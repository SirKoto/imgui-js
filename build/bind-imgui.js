
var Module = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Module = {})  {

var Module = typeof Module != "undefined" ? Module : {};

var readyPromiseResolve, readyPromiseReject;

Module["ready"] = new Promise(function(resolve, reject) {
 readyPromiseResolve = resolve;
 readyPromiseReject = reject;
});

var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];

var thisProgram = "./this.program";

var quit_ = (status, toThrow) => {
 throw toThrow;
};

var ENVIRONMENT_IS_WEB = true;

var ENVIRONMENT_IS_WORKER = false;

var ENVIRONMENT_IS_NODE = false;

var ENVIRONMENT_IS_SHELL = false;

var scriptDirectory = "";

function locateFile(path) {
 if (Module["locateFile"]) {
  return Module["locateFile"](path, scriptDirectory);
 }
 return scriptDirectory + path;
}

var read_, readAsync, readBinary, setWindowTitle;

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
 if (ENVIRONMENT_IS_WORKER) {
  scriptDirectory = self.location.href;
 } else if (typeof document != "undefined" && document.currentScript) {
  scriptDirectory = document.currentScript.src;
 }
 if (_scriptDir) {
  scriptDirectory = _scriptDir;
 }
 if (scriptDirectory.indexOf("blob:") !== 0) {
  scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf("/") + 1);
 } else {
  scriptDirectory = "";
 }
 {
  read_ = url => {
   try {
    var xhr = new XMLHttpRequest();
    xhr.open("GET", url, false);
    xhr.send(null);
    return xhr.responseText;
   } catch (err) {
    var data = tryParseAsDataURI(url);
    if (data) {
     return intArrayToString(data);
    }
    throw err;
   }
  };
  if (ENVIRONMENT_IS_WORKER) {
   readBinary = url => {
    try {
     var xhr = new XMLHttpRequest();
     xhr.open("GET", url, false);
     xhr.responseType = "arraybuffer";
     xhr.send(null);
     return new Uint8Array(xhr.response);
    } catch (err) {
     var data = tryParseAsDataURI(url);
     if (data) {
      return data;
     }
     throw err;
    }
   };
  }
  readAsync = (url, onload, onerror) => {
   var xhr = new XMLHttpRequest();
   xhr.open("GET", url, true);
   xhr.responseType = "arraybuffer";
   xhr.onload = () => {
    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
     onload(xhr.response);
     return;
    }
    var data = tryParseAsDataURI(url);
    if (data) {
     onload(data.buffer);
     return;
    }
    onerror();
   };
   xhr.onerror = onerror;
   xhr.send(null);
  };
 }
 setWindowTitle = title => document.title = title;
} else {}

var out = Module["print"] || console.log.bind(console);

var err = Module["printErr"] || console.warn.bind(console);

Object.assign(Module, moduleOverrides);

moduleOverrides = null;

if (Module["arguments"]) arguments_ = Module["arguments"];

if (Module["thisProgram"]) thisProgram = Module["thisProgram"];

if (Module["quit"]) quit_ = Module["quit"];

var wasmBinary;

if (Module["wasmBinary"]) wasmBinary = Module["wasmBinary"];

var noExitRuntime = Module["noExitRuntime"] || true;

var WebAssembly = {
 Memory: function(opts) {
  this.buffer = new ArrayBuffer(opts["initial"] * 65536);
 },
 Module: function(binary) {},
 Instance: function(module, info) {
  this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 73256, "CwAAAAwAAAAFAAAAAAAAAAAAAADIAwAAAAAAAAAAAAAAAAAAAAAAAAAAAADEAwAAyQMAAOh2AQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwHgEAcH0CAAUAAAAAAAAAAAAAAMYDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQDAADDAwAAaH0BAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgeAQA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var _emval_new_object = env._emval_new_object;
 var _emval_take_value = env._emval_take_value;
 var _emval_new_cstring = env._emval_new_cstring;
 var _emval_set_property = env._emval_set_property;
 var _emval_decref = env._emval_decref;
 var _emval_as = env._emval_as;
 var _emval_run_destructors = env._emval_run_destructors;
 var _emval_get_property = env._emval_get_property;
 var _emval_strictly_equals = env._emval_strictly_equals;
 var _embind_register_function = env._embind_register_function;
 var _emval_incref = env._emval_incref;
 var _embind_register_class = env._embind_register_class;
 var _embind_register_class_property = env._embind_register_class_property;
 var _embind_register_class_function = env._embind_register_class_function;
 var __cxa_throw = env.__cxa_throw;
 var _embind_register_class_constructor = env._embind_register_class_constructor;
 var _emval_call = env._emval_call;
 var _emval_get_method_caller = env._emval_get_method_caller;
 var _emval_call_void_method = env._emval_call_void_method;
 var _embind_register_constant = env._embind_register_constant;
 var _emval_typeof = env._emval_typeof;
 var _emval_new_array = env._emval_new_array;
 var _embind_register_void = env._embind_register_void;
 var _embind_register_bool = env._embind_register_bool;
 var _embind_register_integer = env._embind_register_integer;
 var _embind_register_float = env._embind_register_float;
 var _embind_register_std_string = env._embind_register_std_string;
 var _embind_register_std_wstring = env._embind_register_std_wstring;
 var _embind_register_emval = env._embind_register_emval;
 var _embind_register_memory_view = env._embind_register_memory_view;
 var emscripten_memcpy_big = env.emscripten_memcpy_big;
 var __syscall_openat = env.__syscall_openat;
 var __syscall_fcntl64 = env.__syscall_fcntl64;
 var __syscall_ioctl = env.__syscall_ioctl;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var __wasi_fd_write = wasi_snapshot_preview1.fd_write;
 var __wasi_fd_read = wasi_snapshot_preview1.fd_read;
 var __wasi_fd_close = wasi_snapshot_preview1.fd_close;
 var emscripten_resize_heap = env.emscripten_resize_heap;
 var abort = env.abort;
 var legalimport$_embind_register_bigint = env._embind_register_bigint;
 var legalimport$__wasi_fd_seek = wasi_snapshot_preview1.fd_seek;
 var segfault = env.segfault;
 var alignfault = env.alignfault;
 var __stack_pointer = 163184;
 var __stack_base = 0;
 var tempRet0 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function __wasm_call_ctors() {
  __stack_base = 163184;
  SAFE_HEAP_STORE_i32_4_4(0, 95652, 879);
  SAFE_HEAP_STORE_i32_4_4(0, 95656, 0);
  _embind_register_function(7023, 1, 48472, 48504, 24, 25, 0);
  _embind_register_bindings(95652);
  SAFE_HEAP_STORE_i32_4_4(0, 95664, 880);
  SAFE_HEAP_STORE_i32_4_4(0, 95668, 0);
  _embind_register_class(48528, 48556, 48596, 0, 48504, 26, 48612, 0, 48612, 0, 2017, 48614, 27);
  _embind_register_bindings(95664);
  SAFE_HEAP_STORE_i32_4_4(0, 95672, 881);
  SAFE_HEAP_STORE_i32_4_4(0, 95676, 0);
  embind_init_ImVec2_28_29();
  _embind_register_bindings(95672);
  SAFE_HEAP_STORE_i32_4_4(0, 95680, 882);
  SAFE_HEAP_STORE_i32_4_4(0, 95684, 0);
  embind_init_ImVec4_28_29();
  _embind_register_bindings(95680);
  SAFE_HEAP_STORE_i32_4_4(0, 95688, 883);
  SAFE_HEAP_STORE_i32_4_4(0, 95692, 0);
  embind_init_ImGuiInputTextCallbackData_28_29();
  _embind_register_bindings(95688);
  SAFE_HEAP_STORE_i32_4_4(0, 95696, 884);
  SAFE_HEAP_STORE_i32_4_4(0, 95700, 0);
  embind_init_ImGuiSizeCallbackData_28_29();
  _embind_register_bindings(95696);
  SAFE_HEAP_STORE_i32_4_4(0, 95704, 885);
  SAFE_HEAP_STORE_i32_4_4(0, 95708, 0);
  embind_init_ImGuiListClipper_28_29();
  _embind_register_bindings(95704);
  SAFE_HEAP_STORE_i32_4_4(0, 95712, 886);
  SAFE_HEAP_STORE_i32_4_4(0, 95716, 0);
  embind_init_ImGuiTableColumnSortSpecs_28_29();
  _embind_register_bindings(95712);
  SAFE_HEAP_STORE_i32_4_4(0, 95720, 887);
  SAFE_HEAP_STORE_i32_4_4(0, 95724, 0);
  embind_init_ImGuiTableSortSpecs_28_29();
  _embind_register_bindings(95720);
  SAFE_HEAP_STORE_i32_4_4(0, 95728, 888);
  SAFE_HEAP_STORE_i32_4_4(0, 95732, 0);
  embind_init_ImDrawCmd_28_29();
  _embind_register_bindings(95728);
  SAFE_HEAP_STORE_i32_4_4(0, 95736, 889);
  SAFE_HEAP_STORE_i32_4_4(0, 95740, 0);
  embind_init_ImDrawList_28_29();
  _embind_register_bindings(95736);
  SAFE_HEAP_STORE_i32_4_4(0, 95744, 890);
  SAFE_HEAP_STORE_i32_4_4(0, 95748, 0);
  embind_init_ImDrawData_28_29();
  _embind_register_bindings(95744);
  SAFE_HEAP_STORE_i32_4_4(0, 95752, 891);
  SAFE_HEAP_STORE_i32_4_4(0, 95756, 0);
  embind_init_ImFontGlyph_28_29();
  _embind_register_bindings(95752);
  SAFE_HEAP_STORE_i32_4_4(0, 95760, 892);
  SAFE_HEAP_STORE_i32_4_4(0, 95764, 0);
  embind_init_ImFontConfig_28_29();
  _embind_register_bindings(95760);
  SAFE_HEAP_STORE_i32_4_4(0, 95768, 893);
  SAFE_HEAP_STORE_i32_4_4(0, 95772, 0);
  embind_init_ImFont_28_29();
  _embind_register_bindings(95768);
  SAFE_HEAP_STORE_i32_4_4(0, 95776, 894);
  SAFE_HEAP_STORE_i32_4_4(0, 95780, 0);
  embind_init_ImFontAtlas_28_29();
  _embind_register_bindings(95776);
  SAFE_HEAP_STORE_i32_4_4(0, 95784, 895);
  SAFE_HEAP_STORE_i32_4_4(0, 95788, 0);
  embind_init_ImGuiViewport_28_29();
  _embind_register_bindings(95784);
  SAFE_HEAP_STORE_i32_4_4(0, 95792, 896);
  SAFE_HEAP_STORE_i32_4_4(0, 95796, 0);
  embind_init_ImGuiIO_28_29();
  _embind_register_bindings(95792);
  SAFE_HEAP_STORE_i32_4_4(0, 95800, 897);
  SAFE_HEAP_STORE_i32_4_4(0, 95804, 0);
  embind_init_ImGuiStyle_28_29();
  _embind_register_bindings(95800);
  SAFE_HEAP_STORE_i32_4_4(0, 95808, 898);
  SAFE_HEAP_STORE_i32_4_4(0, 95812, 0);
  embind_init_ImGui_28_29();
  _embind_register_bindings(95808);
  SAFE_HEAP_STORE_i32_4_4(0, 95892, 962);
  SAFE_HEAP_STORE_i32_4_4(0, 95896, 0);
  embind_init_builtin_28_29();
  SAFE_HEAP_STORE_i32_4_4(0, 95896, SAFE_HEAP_LOAD_i32_4_4(0, 95888));
  SAFE_HEAP_STORE_i32_4_4(0, 95888, 95892);
  SAFE_HEAP_STORE_i32_4_4(0, 97096, 95936);
  SAFE_HEAP_STORE_i32_4_4(0, 97024, 42);
 }
 
 function ImGuiStyle__ImGuiStyle_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 60, 0, 0);
  memset($0 + 200 | 0, 0, 848);
  SAFE_HEAP_STORE_i64_8_4($0, 76, 1090519040, 1082130432);
  SAFE_HEAP_STORE_i64_8_4($0, 84, 1082130432, 1082130432);
  SAFE_HEAP_STORE_i64_8_4($0, 92, 1082130432, 1073741824);
  SAFE_HEAP_STORE_i64_8_4($0, 100, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 152, 1056964608, 1056964608);
  SAFE_HEAP_STORE_i64_8_4($0, 160, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 168, 1100480512, 1100480512);
  SAFE_HEAP_STORE_i64_8_4($0, 176, 1077936128, 1077936128);
  SAFE_HEAP_STORE_i64_8_4($0, 192, 1067450368, 1050253722);
  SAFE_HEAP_STORE_i32_1_1($0, 190, 1);
  SAFE_HEAP_STORE_i32_2_2($0, 188, 257);
  SAFE_HEAP_STORE_i32_4_4($0, 184, 1065353216);
  SAFE_HEAP_STORE_i32_4_4($0, 148, 1);
  SAFE_HEAP_STORE_i64_8_4($0, 140, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 132, 1082130432, 1082130432);
  SAFE_HEAP_STORE_i64_8_4($0, 124, 1092616192, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 116, 1096810496, 1091567616);
  SAFE_HEAP_STORE_i64_8_4($0, 108, 1101529088, 1086324736);
  SAFE_HEAP_STORE_i64_8_4($0, 68, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 60, 1082130432, 1077936128);
  SAFE_HEAP_STORE_i64_8_4($0, 52, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0, 44, 0, 1065353216);
  SAFE_HEAP_STORE_i32_4_4($0, 40, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 32, 0, 1056964608);
  SAFE_HEAP_STORE_i64_8_4($0, 24, 1107296256, 1107296256);
  SAFE_HEAP_STORE_i64_8_4($0, 16, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0, 8, 1090519040, 1090519040);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 1065353216, 1058642330);
  ImGui__StyleColorsDark_28ImGuiStyle__29($0);
  return $0;
 }
 
 function ImGuiStyle__ScaleAllSizes_28float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = Math_fround(0), $3 = 0, $4 = 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 8) * $1);
  label$1 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$1;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 8, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 16) * $1);
  label$3 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$3;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 16, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 24) * $1);
  label$5 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$5;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 24, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 44) * $1);
  label$7 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$7;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 44, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 52) * $1);
  label$9 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$9;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 52, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 60) * $1);
  label$11 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$11;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 60, Math_fround($3 | 0));
  $4 = $0 + 12 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$13 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$13;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $4 = $0 + 28 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$15 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$15;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $4 = $0 - -64 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$17 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$17;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 68) * $1);
  label$19 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$19;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 68, Math_fround($3 | 0));
  $4 = $0 + 80 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$21 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$21;
   }
   $3 = -2147483648;
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 76);
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $2 = Math_fround($2 * $1);
  label$23 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$23;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 76, Math_fround($3 | 0));
  $4 = $0 + 88 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$25 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$25;
   }
   $3 = -2147483648;
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 84);
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $2 = Math_fround($2 * $1);
  label$27 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$27;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 84, Math_fround($3 | 0));
  $4 = $0 + 96 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$29 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$29;
   }
   $3 = -2147483648;
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 92);
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $2 = Math_fround($2 * $1);
  label$31 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$31;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 92, Math_fround($3 | 0));
  $4 = $0 + 104 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$33 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$33;
   }
   $3 = -2147483648;
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 100);
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $2 = Math_fround($2 * $1);
  label$35 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$35;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 100, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 108) * $1);
  label$37 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$37;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 108, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 112) * $1);
  label$39 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$39;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 112, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 116) * $1);
  label$41 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$41;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 116, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 120) * $1);
  label$43 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$43;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 120, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 124) * $1);
  label$45 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$45;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 124, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 128) * $1);
  label$47 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$47;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 128, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 132) * $1);
  label$49 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$49;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 132, Math_fround($3 | 0));
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 136) * $1);
  label$51 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$51;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 136, Math_fround($3 | 0));
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 144);
  $4 = $2 != Math_fround(3402823466385288598117041.0e14);
  $2 = Math_fround($2 * $1);
  label$53 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$53;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 144, $4 ? Math_fround($3 | 0) : Math_fround(3402823466385288598117041.0e14));
  $4 = $0 + 172 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$55 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$55;
   }
   $3 = -2147483648;
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 168);
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $2 = Math_fround($2 * $1);
  label$57 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$57;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 168, Math_fround($3 | 0));
  $4 = $0 + 180 | 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * $1);
  label$59 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$59;
   }
   $3 = -2147483648;
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 176);
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 | 0));
  $2 = Math_fround($2 * $1);
  label$61 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$61;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 176, Math_fround($3 | 0));
  $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 184) * $1);
  label$63 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1;
    break label$63;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 184, Math_fround($3 | 0));
 }
 
 function ImeSetInputScreenPosFn_DefaultImpl_28int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
 }
 
 function SetClipboardTextFn_DefaultImpl_28void__2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 12092 | 0, 0);
  if ($2) {
   SAFE_HEAP_STORE_i64_8_4($0, 12084, 0, 0);
   if ($0) {
    $4 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12092, 0);
  }
  $4 = strlen($1);
  $7 = $4 + 1 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 12088 | 0, 0);
  label$3 : {
   if (($2 | 0) > ($4 | 0)) {
    break label$3
   }
   $5 = $2;
   if ($2) {
    $3 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2 = ($3 | 0) > ($7 | 0) ? $3 : $7;
   if (($5 | 0) >= ($2 | 0)) {
    break label$3
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($3) {
    $3 = $3 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 12092);
   if ($6) {
    __memcpy($3, $6, SAFE_HEAP_LOAD_i32_4_4($0, 12084));
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 12092);
    label$8 : {
     if (!$6) {
      break label$8
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$8
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $6, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 12088, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 12092, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 12084, $7);
  __memcpy(SAFE_HEAP_LOAD_i32_4_4($0, 12092), $1, $4);
  SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 12092) + $4 | 0, 0, 0);
 }
 
 function GetClipboardTextFn_DefaultImpl_28void__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $0 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (SAFE_HEAP_LOAD_i32_4_4($1, 12084)) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 12092 | 0, 0)
  }
  return $0 | 0;
 }
 
 function ImGuiIO__AddInputCharacter_28unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if ($1) {
   $5 = $1 >>> 0 >= 65536 ? -3 : $1;
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 5396);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 5400 | 0, 0);
   label$2 : {
    if (($3 | 0) != ($1 | 0)) {
     break label$2
    }
    $2 = $3 + 1 | 0;
    $4 = $1;
    if ($1) {
     $3 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $1 = ($2 | 0) < ($3 | 0) ? $3 : $2;
    if (($4 | 0) >= ($1 | 0)) {
     break label$2
    }
    $3 = $1 << 1;
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($2) {
     $2 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
    }
    $3 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 5404 | 0, 0);
    if ($2) {
     __memcpy($3, $2, SAFE_HEAP_LOAD_i32_4_4($0, 5396) << 1);
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 5404);
     label$7 : {
      if (!$2) {
       break label$7
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$4) {
       break label$7
      }
      $4 = $4 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 5400, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 5404, $3);
   }
   SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($0 + 5404 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 5396) << 1) | 0, 0, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 5396, SAFE_HEAP_LOAD_i32_4_4($0, 5396) + 1 | 0);
  }
 }
 
 function ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = $1 + 1 | 0;
  $6 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
  $5 = $6 >>> 3 | 0;
  $8 = SAFE_HEAP_LOAD_i32_1_1($5 + 20384 | 0, 0);
  $5 = $8 + (-2130771968 >>> $5 & 1) | 0;
  $4 = $2 ? $2 : $5 + $1 | 0;
  if ($3 >>> 0 < $4 >>> 0) {
   $7 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0)
  }
  $3 = $1 >>> 0 < $4 >>> 0;
  $2 = 0;
  $9 = $1 + 2 | 0;
  if ($9 >>> 0 < $4 >>> 0) {
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0)
  }
  $6 = $3 ? $6 : 0;
  $3 = 0;
  $1 = $1 + 3 | 0;
  if ($4 >>> 0 > $1 >>> 0) {
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0)
  }
  $1 = $8 << 2;
  $4 = ($3 & 63 | ($2 << 6 & 4032 | ($7 << 12 & 258048 | (SAFE_HEAP_LOAD_i32_4_4($1 + 20416 | 0, 0) & $6) << 18))) >>> SAFE_HEAP_LOAD_i32_4_4($1 + 20480 | 0, 0) | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
  if (!((($2 >>> 4 & 12 | $7 >>> 2 & 48 | ($3 & 192) >>> 6 | (SAFE_HEAP_LOAD_i32_4_4($1 + 20448 | 0, 0) >>> 0 > $4 >>> 0) << 6 | ($4 >>> 0 > 65535) << 8 | (($4 & -2048) == 55296) << 7) ^ 42) >>> SAFE_HEAP_LOAD_i32_4_4($1 + 20512 | 0, 0) | 0)) {
   return $5
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, 65533);
  $0 = (((($7 & 255) != 0) + (($6 | 0) != 0) | 0) + (($2 & 255) != 0) | 0) + (($3 & 255) != 0) | 0;
  return ($0 | 0) > ($5 | 0) ? $5 : $0;
 }
 
 function ImGuiIO__ClearInputCharacters_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 5400 | 0, 0);
  label$1 : {
   if (($1 | 0) >= 0) {
    break label$1
   }
   $3 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($3 | 0) >= ($1 | 0)) {
    break label$1
   }
   $3 = $1 << 1;
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 5404 | 0, 0);
   if ($2) {
    __memcpy($3, $2, SAFE_HEAP_LOAD_i32_4_4($0, 5396) << 1);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 5404);
    label$4 : {
     if (!$2) {
      break label$4
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$4
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 5400, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 5404, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 5396, 0);
 }
 
 function ImTriangleContainsPoint_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
  $5 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  $4 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  $8 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $9 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
  $1 = !(Math_fround(Math_fround(Math_fround($5 - $6) * Math_fround($7 - $4)) - Math_fround(Math_fround($8 - $6) * Math_fround($9 - $4))) < Math_fround(0.0));
  $10 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  $11 = $4;
  $4 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
  $0 = Math_fround(Math_fround(Math_fround($5 - $10) * Math_fround($11 - $4)) - Math_fround(Math_fround($6 - $10) * Math_fround($9 - $4))) < Math_fround(0.0);
  if (($1 | 0) != ($0 | 0)) {
   $12 = $0 ^ Math_fround(Math_fround(Math_fround($5 - $8) * Math_fround($4 - $7)) - Math_fround(Math_fround($10 - $8) * Math_fround($9 - $7))) < Math_fround(0.0) ^ 1
  }
  return $12;
 }
 
 function ImStrncpy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  label$1 : {
   switch ($2 | 0) {
   default:
    strncpy($0, $1, $2 - 1 | 0);
   case 1:
    SAFE_HEAP_STORE_i32_1_1(($0 + $2 | 0) - 1 | 0, 0, 0);
    break;
   case 0:
    break label$1;
   };
  }
 }
 
 function ImGui__MemAlloc_28unsigned_20long_29($0) {
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ($1) {
   $1 = $1 + 876 | 0;
   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
  }
  return ((wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0;
 }
 
 function ImGui__MemFree_28void__29($0) {
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if (!$1) {
    break label$1
   }
   $1 = $1 + 876 | 0;
   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
  }
  ((wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
 }
 
 function ImStrbolW_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($0, $1) {
  var $2 = 0;
  while (1) {
   $2 = $0;
   if ($1 >>> 0 < $2 >>> 0) {
    $0 = $2 - 2 | 0;
    if ((SAFE_HEAP_LOAD_i32_2_U_2($0, 0) | 0) != 10) {
     continue
    }
   }
   break;
  };
  return $2;
 }
 
 function ImStrSkipBlank_28char_20const__29($0) {
  var $1 = 0;
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   if (!(($1 | 0) != 32 & ($1 | 0) != 9)) {
    $0 = $0 + 1 | 0;
    continue;
   }
   break;
  };
  return $0;
 }
 
 function ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $2, $3) {
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
  $2 = vsnprintf($0, $1, $2, $3);
  label$1 : {
   if (!$0) {
    $0 = $2;
    break label$1;
   }
   $3 = $0;
   $0 = $1 - 1 | 0;
   $0 = ($2 | 0) != -1 ? (($1 | 0) > ($2 | 0) ? $2 : $0) : $0;
   SAFE_HEAP_STORE_i32_1_1($3 + $0 | 0, 0, 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return $0;
 }
 
 function ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($0, $1, $2) {
  $1 = vsnprintf($0, 3073, $1, $2);
  if (!$0) {
   return $1
  }
  $1 = ($1 | 0) == -1 ? 3072 : ($1 | 0) >= 3073 ? 3072 : $1;
  SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
  return $1;
 }
 
 function ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = $1 ^ -1;
  $1 = $0;
  $0 = $3;
  while (1) {
   $4 = $1;
   $1 = $1 + 1 | 0;
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   if ($2) {
    label$6 : {
     if (($2 | 0) != 35) {
      break label$6
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 35) {
      break label$6
     }
     $0 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) == 35 ? $3 : $0;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4((($2 ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
   }
   if ($2) {
    continue
   }
   break;
  };
  return $0 ^ -1;
 }
 
 function ImTextStrFromUtf8_28unsigned_20short__2c_20int_2c_20char_20const__2c_20char_20const__2c_20char_20const___29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = (($1 << 1) + $0 | 0) - 2 | 0;
  $5 = $0;
  $1 = $2;
  while (1) {
   label$1 : {
    if (!(!$3 | $1 >>> 0 < $3 >>> 0) | $5 >>> 0 >= $7 >>> 0) {
     break label$1
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     break label$1
    }
    $8 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($6 + 12 | 0, $1, $3);
    $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
    if ($2) {
     SAFE_HEAP_STORE_i32_2_2($5, 0, $2);
     $5 = $5 + 2 | 0;
    }
    $1 = $1 + $8 | 0;
    if ($2) {
     continue
    }
   }
   break;
  };
  SAFE_HEAP_STORE_i32_2_2($5, 0, 0);
  if ($4) {
   SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
  }
  __stack_pointer = $6 + 16 | 0;
  return $5 - $0 >> 1;
 }
 
 function ImTextCountCharsFromUtf8_28char_20const__2c_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  while (1) {
   label$1 : {
    if (!(!$1 | $0 >>> 0 < $1 >>> 0)) {
     break label$1
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 0)) {
     break label$1
    }
    $0 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($2 + 12 | 0, $0, $1) + $0 | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
    $4 = (($3 | 0) != 0) + $4 | 0;
    if ($3) {
     continue
    }
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return $4;
 }
 
 function ImTextStrToUtf8_28char__2c_20int_2c_20unsigned_20short_20const__2c_20unsigned_20short_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = $0 + $1 | 0;
  $7 = $6 - 1 | 0;
  label$1 : {
   if ($7 >>> 0 <= $0 >>> 0) {
    break label$1
   }
   $1 = $0;
   while (1) {
    if (!(!$3 | $2 >>> 0 < $3 >>> 0)) {
     $0 = $1;
     break label$1;
    }
    $0 = SAFE_HEAP_LOAD_i32_2_U_2($2, 0);
    if (!$0) {
     $0 = $1;
     break label$1;
    }
    $2 = $2 + 2 | 0;
    label$5 : {
     if ($0 >>> 0 <= 127) {
      SAFE_HEAP_STORE_i32_1_1($1, 0, $0);
      $1 = $1 + 1 | 0;
      break label$5;
     }
     $5 = ($1 ^ -1) + $6 | 0;
     label$7 : {
      label$8 : {
       if ($0 >>> 0 <= 2047) {
        $4 = 0;
        if (($5 | 0) < 2) {
         break label$7
        }
        SAFE_HEAP_STORE_i32_1_1($1, 0, ($0 >>> 6 | 0) + -64 | 0);
        $5 = 2;
        $4 = 1;
        break label$8;
       }
       $4 = 0;
       if (($5 | 0) < 3) {
        break label$7
       }
       SAFE_HEAP_STORE_i32_1_1($1, 0, $0 >>> 12 | 224);
       SAFE_HEAP_STORE_i32_1_1($1, 1, $0 >>> 6 & 63 | 128);
       $5 = 3;
       $4 = 2;
      }
      SAFE_HEAP_STORE_i32_1_1($4 + $1 | 0, 0, $0 & 63 | 128);
      $4 = $5;
     }
     $1 = $4 + $1 | 0;
    }
    $0 = $1;
    if ($1 >>> 0 < $7 >>> 0) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_1_1($0, 0, 0);
 }
 
 function ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if (!$1) {
     break label$2
    }
    if ($0 >>> 0 >= $1 >>> 0) {
     break label$1
    }
   }
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_2_U_2($0, 0);
    if (!$2) {
     return $3
    }
    $0 = $0 + 2 | 0;
    $3 = $3 + ($2 >>> 0 < 128 ? 1 : $2 >>> 0 < 2048 ? 2 : 3) | 0;
    if (!$1 | $0 >>> 0 < $1 >>> 0) {
     continue
    }
    break;
   };
  }
  return $3;
 }
 
 function ImAlphaBlendColors_28unsigned_20int_2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0;
  $2 = $0 >>> 8 & 255;
  $3 = Math_fround(Math_fround($1 >>> 24 >>> 0) / Math_fround(255.0));
  $4 = Math_fround(Math_fround(Math_fround(($1 >>> 8 & 255) - $2 | 0) * $3) + Math_fround($2 | 0));
  label$1 : {
   if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
    $2 = ~~$4;
    break label$1;
   }
   $2 = -2147483648;
  }
  $5 = $2 << 8;
  $2 = $0 & 255;
  $4 = Math_fround(Math_fround(Math_fround(($1 & 255) - $2 | 0) * $3) + Math_fround($2 | 0));
  label$3 : {
   if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
    $2 = ~~$4;
    break label$3;
   }
   $2 = -2147483648;
  }
  $2 = $2 | $5;
  $0 = $0 >>> 16 & 255;
  $3 = Math_fround(Math_fround(Math_fround(($1 >>> 16 & 255) - $0 | 0) * $3) + Math_fround($0 | 0));
  label$5 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $0 = ~~$3;
    break label$5;
   }
   $0 = -2147483648;
  }
  return $2 | $0 << 16 | -16777216;
 }
 
 function ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$1 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $2 = ~~$1;
    break label$1;
   }
   $2 = -2147483648;
  }
  $2 = $2 << 8;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$3 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1;
    break label$3;
   }
   $3 = -2147483648;
  }
  $2 = $3 | $2;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$5 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1;
    break label$5;
   }
   $3 = -2147483648;
  }
  $2 = $2 | $3 << 16;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$7 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $0 = ~~$1;
    break label$7;
   }
   $0 = -2147483648;
  }
  return $2 | $0 << 24;
 }
 
 function ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0);
  $6 = $1 < $2;
  $10 = $6 ? Math_fround(-1.0) : Math_fround(0.0);
  $7 = $6 ? $2 : $1;
  $8 = $7 > $0;
  $9 = $8 ? $7 : $0;
  $0 = $8 ? $0 : $7;
  $1 = $6 ? $1 : $2;
  $2 = Math_fround($9 - ($0 < $1 ? $0 : $1));
  SAFE_HEAP_STORE_f32_4_4($3, 0, Math_fround(Math_abs(Math_fround(($8 ? Math_fround(Math_fround(-.3333333432674408) - $10) : $10) + Math_fround(Math_fround($0 - $1) / Math_fround(Math_fround($2 * Math_fround(6.0)) + Math_fround(9.999999682655225e-21)))))));
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($2 / Math_fround($9 + Math_fround(9.999999682655225e-21))));
  SAFE_HEAP_STORE_f32_4_4($5, 0, $9);
 }
 
 function ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0);
  if ($1 == Math_fround(0.0)) {
   SAFE_HEAP_STORE_f32_4_4($5, 0, $2);
   SAFE_HEAP_STORE_f32_4_4($4, 0, $2);
   SAFE_HEAP_STORE_f32_4_4($3, 0, $2);
   return;
  }
  $0 = Math_fround(fmodf($0, Math_fround(1.0)) / Math_fround(.1666666716337204));
  label$2 : {
   if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
    $6 = ~~$0;
    break label$2;
   }
   $6 = -2147483648;
  }
  $0 = Math_fround($0 - Math_fround($6 | 0));
  $7 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround($1 * $0)) * $2);
  $0 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround($1 * Math_fround(Math_fround(1.0) - $0))) * $2);
  $1 = Math_fround(Math_fround(Math_fround(1.0) - $1) * $2);
  label$4 : {
   switch ($6 | 0) {
   case 0:
    SAFE_HEAP_STORE_f32_4_4($3, 0, $2);
    SAFE_HEAP_STORE_f32_4_4($4, 0, $0);
    SAFE_HEAP_STORE_f32_4_4($5, 0, $1);
    return;
   case 1:
    SAFE_HEAP_STORE_f32_4_4($3, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($4, 0, $2);
    SAFE_HEAP_STORE_f32_4_4($5, 0, $1);
    return;
   case 2:
    SAFE_HEAP_STORE_f32_4_4($3, 0, $1);
    SAFE_HEAP_STORE_f32_4_4($4, 0, $2);
    SAFE_HEAP_STORE_f32_4_4($5, 0, $0);
    return;
   case 3:
    SAFE_HEAP_STORE_f32_4_4($3, 0, $1);
    SAFE_HEAP_STORE_f32_4_4($4, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($5, 0, $2);
    return;
   case 4:
    SAFE_HEAP_STORE_f32_4_4($3, 0, $0);
    SAFE_HEAP_STORE_f32_4_4($4, 0, $1);
    SAFE_HEAP_STORE_f32_4_4($5, 0, $2);
    return;
   default:
    break label$4;
   };
  }
  SAFE_HEAP_STORE_f32_4_4($3, 0, $2);
  SAFE_HEAP_STORE_f32_4_4($4, 0, $1);
  SAFE_HEAP_STORE_f32_4_4($5, 0, $7);
 }
 
 function ImGuiStorage__GetInt_28unsigned_20int_2c_20int_29_20const($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $3 = $6;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if ($4) {
   $0 = $4;
   while (1) {
    $5 = $0 >>> 1 | 0;
    $7 = ($5 << 3) + $3 | 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($7, 0) >>> 0 < $1 >>> 0;
    $3 = $8 ? $7 + 8 | 0 : $3;
    $0 = $8 ? $0 + ($5 ^ -1) | 0 : $5;
    if ($0) {
     continue
    }
    break;
   };
  }
  $0 = $3;
  if (($0 | 0) == (($4 << 3) + $6 | 0)) {
   return $2
  }
  $3 = $2;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($1 | 0)) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4)
  }
  return $3;
 }
 
 function ImGuiStorage__GetIntRef_28unsigned_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $2 = $5;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if ($3) {
   $4 = $3;
   while (1) {
    $6 = $4 >>> 1 | 0;
    $7 = ($6 << 3) + $2 | 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($7, 0) >>> 0 < $1 >>> 0;
    $2 = $8 ? $7 + 8 | 0 : $2;
    $4 = $8 ? $4 + ($6 ^ -1) | 0 : $6;
    if ($4) {
     continue
    }
    break;
   };
  }
  label$3 : {
   label$4 : {
    $4 = $2;
    if (($2 | 0) == (($3 << 3) + $5 | 0)) {
     break label$4
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != ($1 | 0)) {
     break label$4
    }
    break label$3;
   }
   $4 = $4 - $5 >> 3;
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$5 : {
    if (($2 | 0) != ($3 | 0)) {
     break label$5
    }
    $5 = $2;
    $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $3 = $3 + 1 | 0;
    $2 = ($2 | 0) > ($3 | 0) ? $2 : $3;
    if (($5 | 0) >= ($2 | 0)) {
     break label$5
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($3) {
     $3 = $3 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
    }
    $3 = (((wasm2js_i32$1 = $2 << 3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($5) {
     __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 3);
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     label$10 : {
      if (!$5) {
       break label$10
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$10
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if (($4 | 0) < ($2 | 0)) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($4 << 3) | 0;
    memmove($3 + 8 | 0, $3, $2 - $4 << 3);
   }
   $4 = $4 << 3;
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 8) + $4 | 0, 0, $1, -1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + $4 | 0;
  }
  return $4 + 4 | 0;
 }
 
 function ImGuiStorage__SetInt_28unsigned_20int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $4 = $7;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if ($5) {
   $3 = $5;
   while (1) {
    $6 = $3 >>> 1 | 0;
    $8 = ($6 << 3) + $4 | 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4($8, 0) >>> 0 < $1 >>> 0;
    $4 = $9 ? $8 + 8 | 0 : $4;
    $3 = $9 ? $3 + ($6 ^ -1) | 0 : $6;
    if ($3) {
     continue
    }
    break;
   };
  }
  label$3 : {
   if (($4 | 0) != (($5 << 3) + $7 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) == ($1 | 0)) {
     break label$3
    }
   }
   $7 = $4 - $7 >> 3;
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$5 : {
    if (($3 | 0) != ($5 | 0)) {
     break label$5
    }
    $5 = $5 + 1 | 0;
    if ($3) {
     $4 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4 = 8
    }
    $4 = ($4 | 0) > ($5 | 0) ? $4 : $5;
    if (($4 | 0) <= ($3 | 0)) {
     break label$5
    }
    $5 = $4 << 3;
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($3) {
     $3 = $3 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
    }
    $5 = (((wasm2js_i32$1 = $5, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($3) {
     __memcpy($5, $3, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     label$10 : {
      if (!$3) {
       break label$10
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$10
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $5);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if (($7 | 0) < ($4 | 0)) {
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($7 << 3) | 0;
    memmove($5 + 8 | 0, $5, $4 - $7 << 3);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($7 << 3) | 0, 0, $1, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   return;
  }
  SAFE_HEAP_STORE_i32_4_4($4, 4, $2);
 }
 
 function ImGui__SetNextItemWidth_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_f32_4_4($1 + 7224 | 0, 0, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 7220, SAFE_HEAP_LOAD_i32_4_4($1, 7220) | 1);
 }
 
 function ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if ($2) {
   $7 = $2 - $1 | 0
  } else {
   $7 = strlen($1)
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $8 = $2 >>> 0 <= 1 ? 1 : $2;
  $2 = $7 + $8 | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$3 : {
   if (($2 | 0) < ($4 | 0)) {
    break label$3
   }
   $3 = $4;
   $4 = $4 << 1;
   $4 = ($2 | 0) > ($4 | 0) ? $2 : $4;
   if (($3 | 0) >= ($4 | 0)) {
    break label$3
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($3) {
    $3 = $3 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($5) {
    __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 0));
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    label$6 : {
     if (!$5) {
      break label$6
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$6) {
      break label$6
     }
     $6 = $6 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$7 : {
   if (($4 | 0) >= ($2 | 0)) {
    break label$7
   }
   $5 = $4;
   if ($4) {
    $3 = $4 + (($4 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $4 = ($2 | 0) < ($3 | 0) ? $3 : $2;
   if (($5 | 0) >= ($4 | 0)) {
    break label$7
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($3) {
    $3 = $3 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($5) {
    __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 0));
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    label$12 : {
     if (!$5) {
      break label$12
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$6) {
      break label$12
     }
     $6 = $6 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
  $2 = $8 - 1 | 0;
  __memcpy(SAFE_HEAP_LOAD_i32_4_4($0, 8) + $2 | 0, $1, $7);
  SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($2 + $7 | 0) | 0, 0, 0);
 }
 
 function ImGuiTextBuffer__appendf_28char_20const__2c_20____29($0, $1, $2) {
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($0, $1, $2);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($7, 8, $2);
  $8 = vsnprintf(0, 0, $1, $2);
  label$1 : {
   if (($8 | 0) <= 0) {
    break label$1
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $9 = $2 >>> 0 <= 1 ? 1 : $2;
   $2 = $9 + $8 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$2 : {
    if (($2 | 0) < ($4 | 0)) {
     break label$2
    }
    $3 = $4;
    $4 = $4 << 1;
    $4 = ($2 | 0) > ($4 | 0) ? $2 : $4;
    if (($3 | 0) >= ($4 | 0)) {
     break label$2
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($3) {
     $3 = $3 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
    }
    $3 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($5) {
     __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 0));
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     label$5 : {
      if (!$5) {
       break label$5
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$5
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$6 : {
    if (($4 | 0) >= ($2 | 0)) {
     break label$6
    }
    $5 = $4;
    if ($4) {
     $3 = $4 + (($4 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $4 = ($2 | 0) < ($3 | 0) ? $3 : $2;
    if (($5 | 0) >= ($4 | 0)) {
     break label$6
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($3) {
     $3 = $3 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
    }
    $3 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($5) {
     __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 0));
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     label$11 : {
      if (!$5) {
       break label$11
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$11
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   $4 = ($2 + $9 | 0) - 1 | 0;
   $3 = $8 + 1 | 0;
   $0 = vsnprintf($4, $3, $1, SAFE_HEAP_LOAD_i32_4_4($7, 8));
   if (!$2) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($4 + (($0 | 0) != -1 ? (($0 | 0) < ($3 | 0) ? $0 : $8) : $8) | 0, 0, 0);
  }
  __stack_pointer = $7 + 16 | 0;
 }
 
 function ImGuiListClipper__ImGuiListClipper_28_29($0) {
  var $1 = 0;
  $1 = $0 + 8 | 0;
  SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, -1);
  return $0;
 }
 
 function ImGuiListClipper___ImGuiListClipper_28_29($0) {
  var $1 = 0, $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  label$1 : {
   if ($1 >>> 0 > 2147483646) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) < 0) {
    break label$1
   }
   ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $1);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 8, -1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($1, 16));
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8020);
   SAFE_HEAP_STORE_i32_4_4($2, 8020, $1 - 1 | 0);
   if (($1 | 0) >= 2) {
    $2 = (SAFE_HEAP_LOAD_i32_4_4($2 + 8032 | 0, 0) + Math_imul($1, 28) | 0) - 56 | 0;
    SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 0), 20, $2);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
  }
  return $0;
 }
 
 function ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0.0;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  $7 = $3 + 212 | 0;
  $9 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
  $10 = $1;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  $11 = +($10 - SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
  $2 = Math_fround($11 * +$5 + (+SAFE_HEAP_LOAD_f32_4_4($0, 16) + +SAFE_HEAP_LOAD_f32_4_4($1, 4)));
  SAFE_HEAP_STORE_f32_4_4($7, 0, $2);
  $4 = SAFE_HEAP_LOAD_f32_4_4($6 + 5496 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($3 + 220 | 0, 0, Math_fround($2 - $5));
  SAFE_HEAP_STORE_f32_4_4($3 + 260 | 0, 0, Math_fround($5 - $4));
  $0 = $3 + 236 | 0;
  $8 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $4 = Math_fround($2 - $4);
  SAFE_HEAP_STORE_f32_4_4($0, 0, $4 <= $8 ? $8 : $4);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 368 | 0, 0);
  if ($0) {
   SAFE_HEAP_STORE_f32_4_4($0, 28, $2)
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 8036);
  if ($0) {
   $2 = Math_fround($2 - $9);
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 442)) {
    ImGui__TableEndRow_28ImGuiTable__29($0)
   }
   SAFE_HEAP_STORE_f32_4_4($0, 104, SAFE_HEAP_LOAD_f32_4_4($3, 212));
   $2 = Math_fround(Math_fround($2 / $5) + Math_fround(.5));
   label$4 : {
    if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
     $1 = ~~$2;
     break label$4;
    }
    $1 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 124, $1 + SAFE_HEAP_LOAD_i32_4_4($0, 124) | 0);
  }
 }
 
 function ImGuiListClipper__End_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  label$1 : {
   if ($1 >>> 0 > 2147483646) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) < 0) {
    break label$1
   }
   ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $1);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 8, -1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($1, 16));
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8020);
   SAFE_HEAP_STORE_i32_4_4($2, 8020, $1 - 1 | 0);
   if (($1 | 0) >= 2) {
    $2 = (SAFE_HEAP_LOAD_i32_4_4($2 + 8032 | 0, 0) + Math_imul($1, 28) | 0) - 56 | 0;
    SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 0), 20, $2);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
  }
 }
 
 function ImGuiListClipper__Begin_28int_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $10 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  $3 = SAFE_HEAP_LOAD_i32_4_4($5, 8036);
  label$1 : {
   if (!$3) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 442)) {
    break label$1
   }
   ImGui__TableEndRow_28ImGuiTable__29($3);
  }
  $11 = SAFE_HEAP_LOAD_f32_4_4($10 + 212 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0, 12, $2);
  SAFE_HEAP_STORE_f32_4_4($0, 16, $11);
  SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
  SAFE_HEAP_STORE_i64_8_4($0, 0, -1, 0);
  $7 = SAFE_HEAP_LOAD_i32_4_4($5, 8020);
  $8 = $7 + 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($5, 8020, $8);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 8024) | 0) <= ($7 | 0)) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($5 + 8028 | 0, 0);
   label$3 : {
    if (($3 | 0) > ($7 | 0)) {
     break label$3
    }
    if ($3) {
     $1 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $1 = 8
    }
    $1 = ($1 | 0) > ($8 | 0) ? $1 : $8;
    if (($1 | 0) <= ($3 | 0)) {
     break label$3
    }
    $3 = Math_imul($1, 28);
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($4) {
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
    }
    $3 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($5 + 8032 | 0, 0);
    if ($4) {
     __memcpy($3, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($5, 8024), 28));
     $4 = SAFE_HEAP_LOAD_i32_4_4($5, 8032);
     label$8 : {
      if (!$4) {
       break label$8
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$9) {
       break label$8
      }
      $9 = $9 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($5, 8028, $1);
    SAFE_HEAP_STORE_i32_4_4($5, 8032, $3);
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($5, 8024);
   if (($1 | 0) <= ($7 | 0)) {
    while (1) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 8032) + Math_imul($1, 28) | 0;
     SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($3 + 16 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($3 + 8 | 0, 0, 0, 0);
     $3 = $1;
     $1 = $3 + 1 | 0;
     if (($3 | 0) != ($7 | 0)) {
      continue
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($5, 8024, $8);
  }
  $7 = SAFE_HEAP_LOAD_i32_4_4($5 + 8032 | 0, 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($5, 8020) - 1 | 0;
  $1 = $7 + Math_imul($4, 28) | 0;
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 0);
  $5 = $1 + 16 | 0;
  $9 = $1 + 20 | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
  label$11 : {
   if (($3 | 0) >= 0) {
    break label$11
   }
   $6 = $3;
   $3 = $3 + (($3 | 0) / 2 | 0) | 0;
   $3 = ($3 | 0) > 0 ? $3 : 0;
   if (($6 | 0) >= ($3 | 0)) {
    break label$11
   }
   $8 = Math_imul($3, 12);
   $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($6) {
    $6 = $6 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) + 1 | 0);
   }
   $8 = (((wasm2js_i32$1 = $8, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $7 = ($7 + Math_imul($4, 28) | 0) + 24 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
   if ($4) {
    __memcpy($8, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($5, 0), 12));
    $4 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
    label$14 : {
     if (!$4) {
      break label$14
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$6) {
      break label$14
     }
     $6 = $6 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 0, $8);
   SAFE_HEAP_STORE_i32_4_4($9, 0, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
  SAFE_HEAP_STORE_f32_4_4($1, 4, SAFE_HEAP_LOAD_f32_4_4($10 + 288 | 0, 0));
  SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
 }
 
 function ImVector_ImGuiListClipperRange___push_back_28ImGuiListClipperRange_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$1 : {
   if (($4 | 0) != ($3 | 0)) {
    break label$1
   }
   $2 = $4 + 1 | 0;
   $5 = $3;
   if ($3) {
    $4 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $4 = 8
   }
   $3 = ($2 | 0) < ($4 | 0) ? $4 : $2;
   if (($5 | 0) >= ($3 | 0)) {
    break label$1
   }
   $4 = Math_imul($3, 12);
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
   }
   $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($2) {
    __memcpy($4, $2, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12));
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    label$6 : {
     if (!$2) {
      break label$6
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$6
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $4);
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 12) | 0;
  SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + 8 | 0, 0));
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
 }
 
 function ImGuiListClipper__Step_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = Math_fround(0), $19 = 0.0, $20 = 0.0, $21 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 8036);
  label$1 : {
   if (!$9) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 442)) {
    break label$1
   }
   ImGui__TableEndRow_28ImGuiTable__29($9);
  }
  label$2 : {
   label$3 : {
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($2) {
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $5 = SAFE_HEAP_LOAD_i32_4_4($4, 8036);
     label$5 : {
      if ($5) {
       $5 = $5 + 455 | 0;
       break label$5;
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4($4, 7080) + 143 | 0;
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 0)) {
      break label$3
     }
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    label$7 : {
     if ($2 >>> 0 > 2147483646) {
      break label$7
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) < 0) {
      break label$7
     }
     ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $2);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 8, -1);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
    $2 = 0;
    if (!$3) {
     break label$2
    }
    SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($3, 16));
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8020);
    SAFE_HEAP_STORE_i32_4_4($1, 8020, $3 - 1 | 0);
    if (($3 | 0) >= 2) {
     $1 = (SAFE_HEAP_LOAD_i32_4_4($1 + 8032 | 0, 0) + Math_imul($3, 28) | 0) - 56 | 0;
     SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20, $1);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
    $2 = 0;
    break label$2;
   }
   label$9 : {
    $5 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
    if ($5 | !$9) {
     break label$9
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($9, 452)) {
     break label$9
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
    $3 = $1 + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
    if (($1 | 0) >= ($2 | 0)) {
     if (!(($1 | 0) < 0 | $2 >>> 0 > 2147483646)) {
      ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $2)
     }
     SAFE_HEAP_STORE_i32_4_4($0, 8, -1);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
     $2 = 0;
     if (!$1) {
      break label$2
     }
     SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($1, 16));
     $1 = SAFE_HEAP_LOAD_i32_4_4($4, 8020);
     SAFE_HEAP_STORE_i32_4_4($4, 8020, $1 - 1 | 0);
     if (($1 | 0) >= 2) {
      $1 = (SAFE_HEAP_LOAD_i32_4_4($4 + 8032 | 0, 0) + Math_imul($1, 28) | 0) - 56 | 0;
      SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20, $1);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
     $2 = 0;
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($6, 12, $3);
    $2 = 1;
    break label$2;
   }
   label$14 : {
    if ($5) {
     break label$14
    }
    SAFE_HEAP_STORE_f32_4_4($0, 16, SAFE_HEAP_LOAD_f32_4_4($3 + 212 | 0, 0));
    if (!(SAFE_HEAP_LOAD_f32_4_4($0, 12) <= Math_fround(0.0))) {
     break label$14
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
    SAFE_HEAP_STORE_i32_1_1($8, 10, 0);
    SAFE_HEAP_STORE_i32_2_2($8, 8, 0);
    SAFE_HEAP_STORE_i32_4_4($8, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($8, 4, $1 + 1 | 0);
    $1 = $6 + 16 | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    label$10 : {
     if (!$3) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      label$31 : {
       if (($2 | 0) != ($3 | 0)) {
        break label$31
       }
       $4 = $2;
       $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
       $3 = $3 + 1 | 0;
       $3 = ($2 | 0) > ($3 | 0) ? $2 : $3;
       if (($4 | 0) >= ($3 | 0)) {
        break label$31
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($2) {
        $2 = $2 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
       }
       $2 = (((wasm2js_i32$1 = Math_imul($3, 12), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
       if ($4) {
        __memcpy($2, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 12));
        $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
        label$8 : {
         if (!$4) {
          break label$8
         }
         $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!$9) {
          break label$8
         }
         $9 = $9 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
       SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 12) | 0;
      break label$10;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     label$92 : {
      if (($2 | 0) != ($3 | 0)) {
       break label$92
      }
      $4 = $2;
      $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
      $3 = $3 + 1 | 0;
      $3 = ($2 | 0) > ($3 | 0) ? $2 : $3;
      if (($4 | 0) >= ($3 | 0)) {
       break label$92
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($2) {
       $2 = $2 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
      }
      $2 = (((wasm2js_i32$1 = Math_imul($3, 12), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
      if ($4) {
       __memcpy($2, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 12));
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
       label$143 : {
        if (!$4) {
         break label$143
        }
        $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$9) {
         break label$143
        }
        $9 = $9 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
      SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if (($3 | 0) > 0) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
      memmove($2 + 12 | 0, $2, Math_imul($3, 12));
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    }
    SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($8 + 8 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($6 + 24 | 0, 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
    $2 = ($2 | 0) < ($3 | 0) ? $3 : $2;
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    $3 = ($1 | 0) > ($3 | 0) ? $3 : $1;
    SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
    if (($2 | 0) == ($3 | 0)) {
     $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!(($2 | 0) < 0 | $1 >>> 0 > 2147483646)) {
      ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $1)
     }
     SAFE_HEAP_STORE_i32_4_4($0, 8, -1);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
     $2 = 0;
     if (!$1) {
      break label$2
     }
     SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($1, 16));
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 8020);
     SAFE_HEAP_STORE_i32_4_4($3, 8020, $1 - 1 | 0);
     if (($1 | 0) >= 2) {
      $1 = (SAFE_HEAP_LOAD_i32_4_4($3 + 8032 | 0, 0) + Math_imul($1, 28) | 0) - 56 | 0;
      SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 20, $1);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
     $2 = 0;
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($6, 8, 1);
    $2 = 1;
    break label$2;
   }
   $5 = !$5;
   label$19 : {
    if (!(SAFE_HEAP_LOAD_f32_4_4($0, 12) <= Math_fround(0.0))) {
     break label$19
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($3 + 212 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($0, 16);
    SAFE_HEAP_STORE_f32_4_4($0, 12, Math_fround(Math_fround($11 - $13) / Math_fround(SAFE_HEAP_LOAD_i32_4_4($0, 4) - SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0)));
    if (!($13 <= Math_fround(-16777216.0) | $13 >= Math_fround(16777216.0) | $11 <= Math_fround(-16777216.0))) {
     $5 = 1;
     if (!($11 >= Math_fround(16777216.0))) {
      break label$19
     }
    }
    SAFE_HEAP_STORE_f32_4_4($0, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 260 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($1 + 5496 | 0, 0)));
    $5 = 1;
   }
   $9 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$22 : {
    if (!$5) {
     break label$22
    }
    label$23 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1($1, 12196)) {
      $5 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
      $1 = SAFE_HEAP_LOAD_i32_4_4($6 + 20 | 0, 0);
      label$25 : {
       if (($5 | 0) != ($1 | 0)) {
        break label$25
       }
       $7 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
       $5 = $5 + 1 | 0;
       $5 = ($5 | 0) < ($7 | 0) ? $7 : $5;
       if (($1 | 0) >= ($5 | 0)) {
        break label$25
       }
       if ($4) {
        $1 = $4 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
       }
       $1 = (((wasm2js_i32$1 = Math_imul($5, 12), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
       $4 = SAFE_HEAP_LOAD_i32_4_4($6 + 24 | 0, 0);
       if ($4) {
        __memcpy($1, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($6, 16), 12));
        $4 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
        label$30 : {
         if (!$4) {
          break label$30
         }
         $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!$7) {
          break label$30
         }
         $7 = $7 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($6, 20, $5);
       SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($6 + 24 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($6, 16), 12) | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
      $4 = 0;
      $5 = 0;
      $7 = 0;
      break label$23;
     }
     $4 = 0;
     label$314 : {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7597)) {
       break label$314
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7508);
      $4 = 0;
      if (!$2) {
       break label$314
      }
      $4 = (SAFE_HEAP_LOAD_i32_4_4($2, 748) | 0) == (SAFE_HEAP_LOAD_i32_4_4($3, 748) | 0);
     }
     $2 = $4;
     label$33 : {
      if (!$2) {
       break label$33
      }
      $11 = SAFE_HEAP_LOAD_f32_4_4($1 + 7644 | 0, 0);
      $13 = SAFE_HEAP_LOAD_f32_4_4($1 + 7652 | 0, 0);
      SAFE_HEAP_STORE_i32_1_1($8, 10, 0);
      SAFE_HEAP_STORE_i32_2_2($8, 8, 1);
      SAFE_HEAP_STORE_i32_4_4($8, 4, Math_fround(Math_abs($13)) < Math_fround(2147483648.0) ? ~~$13 : -2147483648);
      SAFE_HEAP_STORE_i32_4_4($8, 0, Math_fround(Math_abs($11)) < Math_fround(2147483648.0) ? ~~$11 : -2147483648);
      $5 = $6 + 16 | 0;
      ImVector_ImGuiListClipperRange___push_back_28ImGuiListClipperRange_20const__29($5, $8);
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 7601 | 0, 0) & 4)) {
       break label$33
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 7660) | 0) != -1) {
       break label$33
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      SAFE_HEAP_STORE_i32_1_1($8, 10, 0);
      SAFE_HEAP_STORE_i32_2_2($8, 8, 0);
      SAFE_HEAP_STORE_i32_4_4($8, 4, $4);
      SAFE_HEAP_STORE_i32_4_4($8, 0, $4 - 1 | 0);
      ImVector_ImGuiListClipperRange___push_back_28ImGuiListClipperRange_20const__29($5, $8);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7512);
     label$38 : {
      if (!$4) {
       break label$38
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 756) | 0) != ($4 | 0)) {
       break label$38
      }
      $13 = SAFE_HEAP_LOAD_f32_4_4($3 + 776 | 0, 0);
      $18 = SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0);
      $11 = Math_fround($18 + SAFE_HEAP_LOAD_f32_4_4($3 + 768 | 0, 0));
      SAFE_HEAP_STORE_i32_1_1($8, 10, 0);
      SAFE_HEAP_STORE_i32_2_2($8, 8, 1);
      $13 = Math_fround($18 + $13);
      label$39 : {
       if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
        $4 = ~~$13;
        break label$39;
       }
       $4 = -2147483648;
      }
      SAFE_HEAP_STORE_i32_4_4($8, 4, $4);
      SAFE_HEAP_STORE_i32_4_4($8, 0, Math_fround(Math_abs($11)) < Math_fround(2147483648.0) ? ~~$11 : -2147483648);
      ImVector_ImGuiListClipperRange___push_back_28ImGuiListClipperRange_20const__29($6 + 16 | 0, $8);
     }
     if ($2) {
      $4 = (SAFE_HEAP_LOAD_i32_4_4($1, 7620) | 0) == 2 ? -1 : 0
     } else {
      $4 = 0
     }
     if ($2) {
      $5 = (SAFE_HEAP_LOAD_i32_4_4($1, 7620) | 0) == 3
     } else {
      $5 = 0
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($6 + 20 | 0, 0);
     $7 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
     $11 = SAFE_HEAP_LOAD_f32_4_4($3 + 508 | 0, 0);
     label$45 : {
      if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
       $2 = ~~$11;
       break label$45;
      }
      $2 = -2147483648;
     }
     $10 = ($1 | 0) != ($7 | 0);
     $11 = SAFE_HEAP_LOAD_f32_4_4($3 + 500 | 0, 0);
     label$47 : {
      if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
       $14 = ~~$11;
       break label$47;
      }
      $14 = -2147483648;
     }
     label$49 : {
      if ($10) {
       break label$49
      }
      $10 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
      $7 = $7 + 1 | 0;
      $7 = ($7 | 0) < ($10 | 0) ? $10 : $7;
      if (($1 | 0) >= ($7 | 0)) {
       break label$49
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($1) {
       $1 = $1 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
      }
      $1 = (((wasm2js_i32$1 = Math_imul($7, 12), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $10 = SAFE_HEAP_LOAD_i32_4_4($6 + 24 | 0, 0);
      if ($10) {
       __memcpy($1, $10, Math_imul(SAFE_HEAP_LOAD_i32_4_4($6, 16), 12));
       $10 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
       label$54 : {
        if (!$10) {
         break label$54
        }
        $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$12) {
         break label$54
        }
        $12 = $12 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $10, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($6, 20, $7);
      SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($6 + 24 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($6, 16), 12) | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, $14);
     $7 = 1;
    }
    SAFE_HEAP_STORE_i32_1_1($1, 10, $5);
    SAFE_HEAP_STORE_i32_1_1($1, 9, $4);
    SAFE_HEAP_STORE_i32_1_1($1, 8, $7);
    SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
    $4 = SAFE_HEAP_LOAD_i32_4_4($6, 16) + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
    if (($4 | 0) > 0) {
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     $7 = $5 - 1 | 0;
     $14 = SAFE_HEAP_LOAD_i32_4_4($6 + 24 | 0, 0);
     $19 = +SAFE_HEAP_LOAD_f32_4_4($0, 12);
     $1 = 0;
     while (1) {
      $2 = $14 + Math_imul($1, 12) | 0;
      if (SAFE_HEAP_LOAD_i32_1_U_1($2, 8)) {
       $12 = $2 + 8 | 0;
       $17 = +(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
       $16 = +SAFE_HEAP_LOAD_f32_4_4($3, 212);
       $20 = +SAFE_HEAP_LOAD_f32_4_4($6, 4);
       $17 = ($17 - $16 - $20) / $19;
       label$58 : {
        if (Math_abs($17) < 2147483648.0) {
         $15 = ~~$17;
         break label$58;
        }
        $15 = -2147483648;
       }
       $10 = ($15 + $9 | 0) + SAFE_HEAP_LOAD_i32_1_1($2, 9) | 0;
       $10 = ($9 | 0) > ($10 | 0) ? $9 : ($7 | 0) > ($10 | 0) ? $10 : $7;
       SAFE_HEAP_STORE_i32_4_4($2, 0, $10);
       $21 = SAFE_HEAP_LOAD_i32_1_1($2, 10) + $9 | 0;
       $15 = $2;
       $16 = (+(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0) - $16 - $20) / $19 + .9999989867210388;
       label$60 : {
        if (Math_abs($16) < 2147483648.0) {
         $2 = ~~$16;
         break label$60;
        }
        $2 = -2147483648;
       }
       $2 = $2 + $21 | 0;
       SAFE_HEAP_STORE_i32_4_4($15, 4, ($2 | 0) > ($10 | 0) ? (($2 | 0) < ($5 | 0) ? $2 : $5) : $10 + 1 | 0);
       SAFE_HEAP_STORE_i32_1_1($12, 0, 0);
      }
      $1 = $1 + 1 | 0;
      if (($4 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
    $1 = $4 - $3 | 0;
    if (($1 | 0) < 2) {
     break label$22
    }
    while (1) {
     $4 = $1;
     $2 = $1 - 1 | 0;
     if (($1 | 0) > 1) {
      $10 = $2 + $3 | 0;
      $1 = $3;
      while (1) {
       $5 = SAFE_HEAP_LOAD_i32_4_4($6, 24) + Math_imul($1, 12) | 0;
       $7 = $5 + 12 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) > (SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0)) {
        $14 = $8 + 8 | 0;
        $12 = $5 + 8 | 0;
        SAFE_HEAP_STORE_i32_4_4($14, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0));
        SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
        $15 = $12;
        $12 = $7 + 8 | 0;
        SAFE_HEAP_STORE_i32_4_4($15, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0));
        SAFE_HEAP_STORE_i64_8_4($5, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
        SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($14, 0));
        SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
       }
       $1 = $1 + 1 | 0;
       if (($10 | 0) > ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $1 = $2;
     if (($4 | 0) >= 3) {
      continue
     }
     break;
    };
    $2 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
    $1 = $3 + 1 | 0;
    if (($2 | 0) <= ($1 | 0)) {
     break label$22
    }
    while (1) {
     $5 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
     $4 = $5 + Math_imul($3, 12) | 0;
     $7 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
     $5 = $5 + Math_imul($1, 12) | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($7 | 0) >= ($10 | 0)) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      SAFE_HEAP_STORE_i32_4_4($4, 0, ($1 | 0) < ($10 | 0) ? $1 : $10);
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
      SAFE_HEAP_STORE_i32_4_4($4 + 4 | 0, 0, ($1 | 0) < ($7 | 0) ? $7 : $1);
      memmove($5, $5 + 12 | 0, Math_imul($2 - $3 | 0, 12) - 24 | 0);
      SAFE_HEAP_STORE_i32_4_4($6, 16, SAFE_HEAP_LOAD_i32_4_4($6, 16) - 1 | 0);
      $1 = $3;
     }
     $3 = $1;
     $2 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
     $1 = $1 + 1 | 0;
     if (($2 | 0) > ($1 | 0)) {
      continue
     }
     break;
    };
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 16) | 0) > ($1 | 0)) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($6 + 24 | 0, 0) + Math_imul($1, 12) | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    $2 = $1;
    $1 = ($1 | 0) > ($9 | 0);
    $2 = $1 ? $2 : $9;
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    $3 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    SAFE_HEAP_STORE_i32_4_4($0, 4, ($3 | 0) < ($4 | 0) ? $3 : $4);
    if ($1) {
     ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $2)
    }
    SAFE_HEAP_STORE_i32_4_4($6, 8, SAFE_HEAP_LOAD_i32_4_4($6, 8) + 1 | 0);
    $2 = 1;
    break label$2;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if (($1 | 0) != 2147483647) {
    ImGuiListClipper_SeekCursorForItem_28ImGuiListClipper__2c_20int_29($0, $1)
   }
   SAFE_HEAP_STORE_i32_4_4($0, 8, -1);
   $2 = 0;
  }
  $0 = $2;
  __stack_pointer = $8 + 16 | 0;
  return $0 | 0;
 }
 
 function ImGui__GetStyle_28_29() {
  return SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 5416 | 0;
 }
 
 function ImGui__GetColorU32_28int_2c_20float_29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = ($5 + 5416 | 0) + ($0 << 4) | 0;
  $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 204 | 0, 0);
  $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2) * Math_fround(255.0)) + Math_fround(.5));
  label$1 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $0 = ~~$2;
    break label$1;
   }
   $0 = -2147483648;
  }
  $0 = $0 << 8;
  $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 200 | 0, 0);
  $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2) * Math_fround(255.0)) + Math_fround(.5));
  label$3 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $4 = ~~$2;
    break label$3;
   }
   $4 = -2147483648;
  }
  $0 = $4 | $0;
  $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 208 | 0, 0);
  $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2) * Math_fround(255.0)) + Math_fround(.5));
  label$5 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $4 = ~~$2;
    break label$5;
   }
   $4 = -2147483648;
  }
  $0 = $0 | $4 << 16;
  $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 212 | 0, 0) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 5416) * $1));
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$7 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1;
    break label$7;
   }
   $3 = -2147483648;
  }
  return $0 | $3 << 24;
 }
 
 function ImGui__GetColorU32_28ImVec4_20const__29($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$1 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $2 = ~~$1;
    break label$1;
   }
   $2 = -2147483648;
  }
  $2 = $2 << 8;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$3 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1;
    break label$3;
   }
   $3 = -2147483648;
  }
  $2 = $3 | $2;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$5 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1;
    break label$5;
   }
   $3 = -2147483648;
  }
  $2 = $2 | $3 << 16;
  $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 12) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 5416));
  $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
  label$7 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $0 = ~~$1;
    break label$7;
   }
   $0 = -2147483648;
  }
  return $2 | $0 << 24;
 }
 
 function ImGui__GetStyleColorVec4_28int_29($0) {
  return (SAFE_HEAP_LOAD_i32_4_4(0, 73568) + ($0 << 4) | 0) + 5616 | 0;
 }
 
 function ImGui__GetColorU32_28unsigned_20int_29($0) {
  var $1 = Math_fround(0), $2 = 0;
  $1 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 5416);
  if ($1 >= Math_fround(1.0)) {
   return $0
  }
  $2 = $0 & 16777215;
  $1 = Math_fround($1 * Math_fround($0 >>> 24 >>> 0));
  label$2 : {
   if ($1 < Math_fround(4294967296.0) & $1 >= Math_fround(0.0)) {
    $0 = ~~$1 >>> 0;
    break label$2;
   }
   $0 = 0;
  }
  return $2 | $0 << 24;
 }
 
 function ImGui__PushStyleColor_28int_2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $9 = $8 + 8 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = $2 + ($0 << 4) | 0;
  SAFE_HEAP_STORE_i64_8_8($9, 0, SAFE_HEAP_LOAD_i64_8_8($6 + 5624 | 0, 0), i64toi32_i32$HIGH_BITS);
  $6 = $6 + 5616 | 0;
  SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_8($6, 0), i64toi32_i32$HIGH_BITS);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7396);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 7400 | 0, 0);
  label$1 : {
   if (($4 | 0) != ($3 | 0)) {
    break label$1
   }
   $5 = $4 + 1 | 0;
   $4 = 8;
   $7 = $3;
   $4 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : $4;
   $3 = ($4 | 0) > ($5 | 0) ? $4 : $5;
   if (($7 | 0) >= ($3 | 0)) {
    break label$1
   }
   $4 = Math_imul($3, 20);
   if ($2) {
    $5 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) + 1 | 0);
   }
   $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($2 + 7404 | 0, 0);
   if ($5) {
    __memcpy($4, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7396), 20));
    $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7404);
    label$5 : {
     if (!$5) {
      break label$5
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$7) {
      break label$5
     }
     $7 = $7 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7400, $3);
   SAFE_HEAP_STORE_i32_4_4($2, 7404, $4);
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 7404 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7396), 20) | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
  SAFE_HEAP_STORE_i64_8_4($3, 4, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($3 + 12 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($9, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i32_4_4($2, 7396, SAFE_HEAP_LOAD_i32_4_4($2, 7396) + 1 | 0);
  SAFE_HEAP_STORE_f32_4_4($6, 12, Math_fround(Math_fround($1 >>> 24 >>> 0) * Math_fround(.003921568859368563)));
  SAFE_HEAP_STORE_f32_4_4($6, 8, Math_fround(Math_fround(($1 >>> 16 & 255) >>> 0) * Math_fround(.003921568859368563)));
  SAFE_HEAP_STORE_f32_4_4($6, 4, Math_fround(Math_fround(($1 >>> 8 & 255) >>> 0) * Math_fround(.003921568859368563)));
  SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround(Math_fround(($1 & 255) >>> 0) * Math_fround(.003921568859368563)));
  __stack_pointer = $8 + 16 | 0;
 }
 
 function ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $9 = $7 + 8 | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = $3 + ($0 << 4) | 0;
  SAFE_HEAP_STORE_i64_8_8($9, 0, SAFE_HEAP_LOAD_i64_8_8($2 + 5624 | 0, 0), i64toi32_i32$HIGH_BITS);
  $8 = $2 + 5616 | 0;
  SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 7396);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7400 | 0, 0);
  label$1 : {
   if (($4 | 0) != ($2 | 0)) {
    break label$1
   }
   $5 = $4 + 1 | 0;
   $4 = 8;
   $6 = $2;
   $4 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : $4;
   $2 = ($4 | 0) > ($5 | 0) ? $4 : $5;
   if (($6 | 0) >= ($2 | 0)) {
    break label$1
   }
   $4 = Math_imul($2, 20);
   if ($3) {
    $5 = $3 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) + 1 | 0);
   }
   $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 7404 | 0, 0);
   if ($5) {
    __memcpy($4, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($3, 7396), 20));
    $5 = SAFE_HEAP_LOAD_i32_4_4($3, 7404);
    label$5 : {
     if (!$5) {
      break label$5
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$6) {
      break label$5
     }
     $6 = $6 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 7400, $2);
   SAFE_HEAP_STORE_i32_4_4($3, 7404, $4);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7404 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($3, 7396), 20) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
  SAFE_HEAP_STORE_i64_8_4($2, 4, SAFE_HEAP_LOAD_i64_8_8($7, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 12 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($9, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i32_4_4($3, 7396, SAFE_HEAP_LOAD_i32_4_4($3, 7396) + 1 | 0);
  SAFE_HEAP_STORE_i64_8_4($8 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($8, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function ImGui__PopStyleColor_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  if (($0 | 0) > 0) {
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   while (1) {
    $1 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7396), 20) + SAFE_HEAP_LOAD_i32_4_4($2, 7404) | 0) - 20 | 0;
    $3 = (SAFE_HEAP_LOAD_i32_4_4($1, 0) << 4) + $2 | 0;
    SAFE_HEAP_STORE_i64_8_4($3 + 5624 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 12 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($3 + 5616 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 4), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($2, 7396, SAFE_HEAP_LOAD_i32_4_4($2, 7396) - 1 | 0);
    $1 = $0;
    $0 = $1 - 1 | 0;
    if (($1 | 0) > 1) {
     continue
    }
    break;
   };
  }
 }
 
 function ImGui__PushStyleVar_28int_2c_20float_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if (!(!(8206235 >>> $0 & 1) | (SAFE_HEAP_LOAD_i32_4_4(Math_imul($0, 12) + 20912 | 0, 0) | 0) != 8)) {
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $7 = ($2 + SAFE_HEAP_LOAD_i32_4_4(Math_imul($0, 12) + 20920 | 0, 0) | 0) + 5416 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7408);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 7412 | 0, 0);
   label$2 : {
    if (($4 | 0) != ($3 | 0)) {
     break label$2
    }
    $5 = $4 + 1 | 0;
    $6 = $3;
    if ($3) {
     $4 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4 = 8
    }
    $3 = ($4 | 0) > ($5 | 0) ? $4 : $5;
    if (($6 | 0) >= ($3 | 0)) {
     break label$2
    }
    $4 = Math_imul($3, 12);
    if ($2) {
     $5 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) + 1 | 0);
    }
    $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($2 + 7416 | 0, 0);
    if ($5) {
     __memcpy($4, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7408), 12));
     $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7416);
     label$7 : {
      if (!$5) {
       break label$7
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$7
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($2, 7412, $3);
    SAFE_HEAP_STORE_i32_4_4($2, 7416, $4);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 7416 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7408), 12) | 0;
   SAFE_HEAP_STORE_f32_4_4($3, 4, $8);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
   SAFE_HEAP_STORE_i32_4_4($2, 7408, SAFE_HEAP_LOAD_i32_4_4($2, 7408) + 1 | 0);
   SAFE_HEAP_STORE_f32_4_4($7, 0, $1);
  }
 }
 
 function ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if (!(!(25348196 >>> $0 & 1) | (SAFE_HEAP_LOAD_i32_4_4(Math_imul($0, 12) + 20912 | 0, 0) | 0) != 8)) {
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $7 = ($2 + SAFE_HEAP_LOAD_i32_4_4(Math_imul($0, 12) + 20920 | 0, 0) | 0) + 5416 | 0;
   $8 = SAFE_HEAP_LOAD_i64_8_4($7, 0);
   $9 = i64toi32_i32$HIGH_BITS;
   $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7408);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 7412 | 0, 0);
   label$2 : {
    if (($4 | 0) != ($3 | 0)) {
     break label$2
    }
    $5 = $4 + 1 | 0;
    $6 = $3;
    if ($3) {
     $4 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4 = 8
    }
    $3 = ($4 | 0) > ($5 | 0) ? $4 : $5;
    if (($6 | 0) >= ($3 | 0)) {
     break label$2
    }
    $4 = Math_imul($3, 12);
    if ($2) {
     $5 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) + 1 | 0);
    }
    $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($2 + 7416 | 0, 0);
    if ($5) {
     __memcpy($4, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7408), 12));
     $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7416);
     label$7 : {
      if (!$5) {
       break label$7
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$7
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($2, 7412, $3);
    SAFE_HEAP_STORE_i32_4_4($2, 7416, $4);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 7416 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7408), 12) | 0;
   SAFE_HEAP_STORE_i32_4_4($3, 8, $9);
   SAFE_HEAP_STORE_i32_4_4($3, 4, $8);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
   SAFE_HEAP_STORE_i32_4_4($2, 7408, SAFE_HEAP_LOAD_i32_4_4($2, 7408) + 1 | 0);
   SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  }
 }
 
 function ImGui__PopStyleVar_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if (($0 | 0) > 0) {
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $7 = $2 + 5416 | 0;
   $8 = SAFE_HEAP_LOAD_i32_4_4($2 + 7416 | 0, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7408);
   while (1) {
    $5 = $0;
    $3 = $3 - 1 | 0;
    $0 = Math_imul($3, 12) + $8 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    $1 = Math_imul($4, 12);
    $6 = (SAFE_HEAP_LOAD_i32_4_4($1 + 20912 | 0, 0) | 0) != 8;
    label$3 : {
     if ($6) {
      break label$3
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($1 + 20920 | 0, 0) + $7 | 0;
     if (8206235 >>> $4 & 1) {
      SAFE_HEAP_STORE_f32_4_4($1, 0, SAFE_HEAP_LOAD_f32_4_4($0, 4));
      break label$3;
     }
     if (!(25348196 >>> $4 & 1) | $6) {
      break label$3
     }
     SAFE_HEAP_STORE_f32_4_4($1, 0, SAFE_HEAP_LOAD_f32_4_4($0, 4));
     SAFE_HEAP_STORE_f32_4_4($1, 4, SAFE_HEAP_LOAD_f32_4_4($0 + 8 | 0, 0));
    }
    SAFE_HEAP_STORE_i32_4_4($2, 7408, $3);
    $0 = $5 - 1 | 0;
    if (($5 | 0) > 1) {
     continue
    }
    break;
   };
  }
 }
 
 function ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0) {
  var $1 = 0;
  if (($0 | 0) == -1) {
   return $0
  }
  while (1) {
   label$3 : {
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
    if (($1 | 0) != 35) {
     if ($1) {
      break label$3
     }
     return $0;
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) != 35) {
     break label$3
    }
    return $0;
   }
   $0 = $0 + 1 | 0;
   if (($0 | 0) != -1) {
    continue
   }
   break;
  };
  return -1;
 }
 
 function ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  label$1 : {
   if ($3) {
    $3 = $1;
    $6 = $2 ? $2 : -1;
    if ($1 >>> 0 >= $6 >>> 0) {
     break label$1
    }
    $3 = $6;
    $2 = $1;
    while (1) {
     label$4 : {
      $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      if (($7 | 0) != 35) {
       if ($7) {
        break label$4
       }
       $3 = $2;
       break label$1;
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 35) {
       break label$4
      }
      $3 = $2;
      break label$1;
     }
     $2 = $2 + 1 | 0;
     if (($6 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $3 = $2;
   if ($2) {
    break label$1
   }
   $3 = strlen($1) + $1 | 0;
  }
  $2 = $3;
  label$6 : {
   if (($2 | 0) == ($1 | 0)) {
    break label$6
   }
   $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 5620 | 0, 0);
   $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
   label$7 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $3 = ~~$4;
     break label$7;
    }
    $3 = -2147483648;
   }
   $6 = $3 << 8;
   $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 5616 | 0, 0);
   $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
   label$9 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $3 = ~~$4;
     break label$9;
    }
    $3 = -2147483648;
   }
   $6 = $3 | $6;
   $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 5624 | 0, 0);
   $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
   label$11 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $3 = ~~$4;
     break label$11;
    }
    $3 = -2147483648;
   }
   $6 = $6 | $3 << 16;
   $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 5628 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($5, 5416));
   $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
   label$13 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $3 = ~~$4;
     break label$13;
    }
    $3 = -2147483648;
   }
   ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29(SAFE_HEAP_LOAD_i32_4_4($8, 580), SAFE_HEAP_LOAD_i32_4_4($5, 6464), SAFE_HEAP_LOAD_f32_4_4($5, 6468), $0, $6 | $3 << 24, $1, $2, Math_fround(0.0), 0);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 12196)) {
    break label$6
   }
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2);
  }
 }
 
 function ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  while (1) {
   $3 = $1;
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $8 = SAFE_HEAP_LOAD_i32_4_4($4, 12224);
   SAFE_HEAP_STORE_i32_4_4($4, 12224, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($4, 12220);
   SAFE_HEAP_STORE_i32_4_4($4, 12220, 0);
   $7 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
   label$2 : {
    if ($2) {
     break label$2
    }
    $2 = $3;
    if (($1 | 0) == -1) {
     break label$2
    }
    while (1) {
     label$4 : {
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
      if (($2 | 0) != 35) {
       if ($2) {
        break label$4
       }
       $2 = $1;
       break label$2;
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 1) | 0) != 35) {
       break label$4
      }
      $2 = $1;
      break label$2;
     }
     $2 = -1;
     $1 = $1 + 1 | 0;
     if (($1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   if ($0) {
    $1 = SAFE_HEAP_LOAD_f32_4_4($0, 4) > Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 12228) + SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0)) + Math_fround(1.0))
   } else {
    $1 = 0
   }
   if ($0) {
    SAFE_HEAP_STORE_f32_4_4($4, 12228, SAFE_HEAP_LOAD_f32_4_4($0, 4))
   }
   if ($1) {
    ImGui__LogText_28char_20const__2c_20____29(19353, 0);
    SAFE_HEAP_STORE_i32_1_1($4, 12232, 1);
   }
   if ($5) {
    ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0, $5, strlen($5) + $5 | 0)
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($4, 12236);
   $1 = SAFE_HEAP_LOAD_i32_4_4($7 + 344 | 0, 0);
   if (($5 | 0) > ($1 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($4, 12236, $1)
   }
   $5 = $1 - SAFE_HEAP_LOAD_i32_4_4($4, 12236) << 2;
   $1 = $3;
   while (1) {
    $3 = memchr($1, 10, $2 - $1 | 0);
    $3 = $3 ? $3 : $2;
    label$13 : {
     if (($1 | 0) == ($3 | 0) & ($2 | 0) == ($3 | 0)) {
      break label$13
     }
     $7 = SAFE_HEAP_LOAD_i32_1_U_1($4, 12232);
     SAFE_HEAP_STORE_i32_4_4($6, 4, 19354);
     SAFE_HEAP_STORE_i32_4_4($6, 0, $7 ? $5 : 1);
     SAFE_HEAP_STORE_i32_4_4($6, 12, $1);
     SAFE_HEAP_STORE_i32_4_4($6, 8, $3 - $1 | 0);
     ImGui__LogText_28char_20const__2c_20____29(5442, $6);
     SAFE_HEAP_STORE_i32_1_1($4, 12232, 0);
     if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 0) | 0) != 10) {
      break label$13
     }
     ImGui__LogText_28char_20const__2c_20____29(19353, 0);
     SAFE_HEAP_STORE_i32_1_1($4, 12232, 1);
    }
    $7 = $3 + 1 | 0;
    $3 = ($2 | 0) != ($3 | 0);
    $1 = $3 ? $7 : $1;
    if ($3) {
     continue
    }
    break;
   };
   if ($8) {
    $1 = $8;
    $2 = $1 + strlen($1) | 0;
    continue;
   }
   break;
  };
  __stack_pointer = $6 + 16 | 0;
 }
 
 function ImGui__LogText_28char_20const__2c_20____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (SAFE_HEAP_LOAD_i32_1_U_1($3, 12196)) {
   SAFE_HEAP_STORE_i32_4_4($5, 12, $1);
   $7 = $3 + 12208 | 0;
   __inlined_func$LogTextV_28ImGuiContext__2c_20char_20const__2c_20void__29 : {
    if (SAFE_HEAP_LOAD_i32_4_4($3, 12204)) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($3 + 12212 | 0, 0);
     label$2 : {
      if (($4 | 0) >= 0) {
       break label$2
      }
      $2 = $4 + (($4 | 0) / 2 | 0) | 0;
      $6 = ($2 | 0) > 0 ? $2 : 0;
      if (($4 | 0) >= ($6 | 0)) {
       break label$2
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($2) {
       $2 = $2 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
      }
      $8 = (((wasm2js_i32$1 = $6, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12216 | 0, 0);
      if ($2) {
       __memcpy($8, $2, SAFE_HEAP_LOAD_i32_4_4($3, 12208));
       $4 = SAFE_HEAP_LOAD_i32_4_4($3, 12216);
       label$5 : {
        if (!$4) {
         break label$5
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$2) {
         break label$5
        }
        $2 = $2 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($3, 12212, $6);
      SAFE_HEAP_STORE_i32_4_4($3, 12216, $8);
     }
     SAFE_HEAP_STORE_i32_4_4($3, 12208, 0);
     ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($7, $0, $1);
     $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 12216 | 0, 0);
     $2 = $0 ? $0 : 73572;
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 12208);
     $0 = $1 - 1 | 0;
     fwrite($2, $0 >>> 0 <= $1 >>> 0 ? $0 : 0, SAFE_HEAP_LOAD_i32_4_4($3, 12204));
     break __inlined_func$LogTextV_28ImGuiContext__2c_20char_20const__2c_20void__29;
    }
    ImGuiTextBuffer__appendfv_28char_20const__2c_20void__29($7, $0, $1);
   }
  }
  __stack_pointer = $5 + 16 | 0;
 }
 
 function ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0);
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  SAFE_HEAP_STORE_i64_8_8($9, 24, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  label$1 : {
   if ($5) {
    SAFE_HEAP_STORE_i64_8_8($9, 16, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
    break label$1;
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $8 = SAFE_HEAP_LOAD_f32_4_4($5, 6468);
   if (($3 | 0) == ($4 | 0)) {
    SAFE_HEAP_STORE_f32_4_4($9, 20, $8);
    SAFE_HEAP_STORE_i32_4_4($9, 16, 0);
    break label$1;
   }
   ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($9 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($5, 6464), $8, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $3, $4, 0);
   $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 16) + Math_fround(.9999899864196777));
   label$4 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5 = ~~$8;
     break label$4;
    }
    $5 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($9, 16, Math_fround($5 | 0));
  }
  $8 = SAFE_HEAP_LOAD_f32_4_4($9, 24);
  $10 = SAFE_HEAP_LOAD_f32_4_4($9, 16);
  $11 = $7 ? $7 + 8 | 0 : $2;
  $12 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
  $5 = 1;
  label$6 : {
   if ($12 <= Math_fround($8 + $10)) {
    break label$6
   }
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 28) + SAFE_HEAP_LOAD_f32_4_4($9, 20)) >= SAFE_HEAP_LOAD_f32_4_4($11, 4);
  }
  $1 = $7 ? $7 : $1;
  if ($7) {
   $7 = 1;
   if (!(SAFE_HEAP_LOAD_f32_4_4($1, 0) > $8)) {
    $7 = SAFE_HEAP_LOAD_f32_4_4($9, 28) < SAFE_HEAP_LOAD_f32_4_4($1, 4)
   }
   $5 = ($7 | $5) != 0;
  }
  $7 = $5;
  $13 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
  if ($13 > Math_fround(0.0)) {
   $10 = Math_fround(Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - $8) - $10) * $13) + $8);
   SAFE_HEAP_STORE_f32_4_4($9, 24, $8 >= $10 ? $8 : $10);
  }
  $10 = SAFE_HEAP_LOAD_f32_4_4($6, 4);
  if ($10 > Math_fround(0.0)) {
   $8 = SAFE_HEAP_LOAD_f32_4_4($9, 28);
   $10 = Math_fround($8 + Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) - $8) - SAFE_HEAP_LOAD_f32_4_4($9, 20)) * $10));
   SAFE_HEAP_STORE_f32_4_4($9, 28, $8 >= $10 ? $8 : $10);
  }
  label$12 : {
   if ($7) {
    $1 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
    $2 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_f32_4_4($9, 12, SAFE_HEAP_LOAD_f32_4_4($11, 4));
    SAFE_HEAP_STORE_f32_4_4($9, 8, $12);
    SAFE_HEAP_STORE_i64_8_4($9, 0, $1, $2);
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5620 | 0, 0);
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$14 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $1 = ~~$8;
      break label$14;
     }
     $1 = -2147483648;
    }
    $1 = $1 << 8;
    $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5616 | 0, 0);
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$16 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $5 = ~~$8;
      break label$16;
     }
     $5 = -2147483648;
    }
    $1 = $5 | $1;
    $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5624 | 0, 0);
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$18 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $5 = ~~$8;
      break label$18;
     }
     $5 = -2147483648;
    }
    $1 = $1 | $5 << 16;
    $5 = $9 + 24 | 0;
    $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5628 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$20 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $2 = ~~$8;
      break label$20;
     }
     $2 = -2147483648;
    }
    ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($0, 0, Math_fround(0.0), $5, $1 | $2 << 24, $3, $4, Math_fround(0.0), $9);
    break label$12;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5620 | 0, 0);
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$22 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $1 = ~~$8;
     break label$22;
    }
    $1 = -2147483648;
   }
   $1 = $1 << 8;
   $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5616 | 0, 0);
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$24 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5 = ~~$8;
     break label$24;
    }
    $5 = -2147483648;
   }
   $1 = $5 | $1;
   $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5624 | 0, 0);
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$26 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5 = ~~$8;
     break label$26;
    }
    $5 = -2147483648;
   }
   $1 = $1 | $5 << 16;
   $5 = $9 + 24 | 0;
   $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5628 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$28 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $2 = ~~$8;
     break label$28;
    }
    $2 = -2147483648;
   }
   ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($0, 0, Math_fround(0.0), $5, $1 | $2 << 24, $3, $4, Math_fround(0.0), 0);
  }
  __stack_pointer = $9 + 32 | 0;
 }
 
 function ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0);
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if (!$3) {
    $3 = $2;
    break label$1;
   }
   $3 = $1;
   $5 = $2 ? $2 : -1;
   if ($1 >>> 0 >= $5 >>> 0) {
    break label$1
   }
   $3 = $5;
   $2 = $1;
   while (1) {
    label$4 : {
     $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
     if (($7 | 0) != 35) {
      if ($7) {
       break label$4
      }
      $3 = $2;
      break label$1;
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 35) {
      break label$4
     }
     $3 = $2;
     break label$1;
    }
    $2 = $2 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  $8 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
  if (($1 | 0) == ($3 | 0)) {
   SAFE_HEAP_STORE_f32_4_4($0, 4, $8);
   SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
   return;
  }
  ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($0, SAFE_HEAP_LOAD_i32_4_4($6, 6464), $8, Math_fround(3402823466385288598117041.0e14), $4, $1, $3, 0);
  $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 0) + Math_fround(.9999899864196777));
  label$7 : {
   if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
    $1 = ~~$4;
    break label$7;
   }
   $1 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($1 | 0));
 }
 
 function ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0;
  $7 = $2;
  $8 = $3 ? $3 : -1;
  label$1 : {
   if ($2 >>> 0 >= $8 >>> 0) {
    break label$1
   }
   $7 = $8;
   $3 = $2;
   while (1) {
    label$3 : {
     $9 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
     if (($9 | 0) != 35) {
      if ($9) {
       break label$3
      }
      $7 = $3;
      break label$1;
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 1) | 0) != 35) {
      break label$3
     }
     $7 = $3;
     break label$1;
    }
    $3 = $3 + 1 | 0;
    if (($8 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  label$5 : {
   if (($2 | 0) == ($7 | 0)) {
    break label$5
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 7080), 580), $0, $1, $2, $7, $4, $5, $6);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 12196)) {
    break label$5
   }
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($0, $2, $7);
  }
 }
 
 function ImGui__RenderTextEllipsis_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0);
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  $9 = $6;
  label$1 : {
   if ($6) {
    break label$1
   }
   $9 = $5;
   if (($9 | 0) == -1) {
    break label$1
   }
   $6 = $5;
   while (1) {
    label$3 : {
     $9 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
     if (($9 | 0) != 35) {
      if ($9) {
       break label$3
      }
      $9 = $6;
      break label$1;
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 1) | 0) != 35) {
      break label$3
     }
     $9 = $6;
     break label$1;
    }
    $9 = -1;
    $6 = $6 + 1 | 0;
    if (($6 | 0) != -1) {
     continue
    }
    break;
   };
  }
  $14 = $9;
  $16 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$5 : {
   if ($7) {
    SAFE_HEAP_STORE_i64_8_8($8, 40, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
    break label$5;
   }
   $10 = SAFE_HEAP_LOAD_f32_4_4($16, 6468);
   if (($5 | 0) == ($14 | 0)) {
    SAFE_HEAP_STORE_f32_4_4($8, 44, $10);
    SAFE_HEAP_STORE_i32_4_4($8, 40, 0);
    break label$5;
   }
   ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 40 | 0, SAFE_HEAP_LOAD_i32_4_4($16, 6464), $10, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $5, $14, 0);
   $10 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 40) + Math_fround(.9999899864196777));
   label$8 : {
    if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
     $6 = ~~$10;
     break label$8;
    }
    $6 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($8, 40, Math_fround($6 | 0));
  }
  label$10 : {
   if (SAFE_HEAP_LOAD_f32_4_4($8, 40) > Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - SAFE_HEAP_LOAD_f32_4_4($1, 0))) {
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
    $15 = SAFE_HEAP_LOAD_f32_4_4($6, 12);
    $13 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
    SAFE_HEAP_STORE_i32_4_4($8, 36, 0);
    $6 = 1;
    $9 = SAFE_HEAP_LOAD_i32_2_U_2($13, 60);
    $12 = ($9 | 0) != 65535;
    if (!$12) {
     $9 = SAFE_HEAP_LOAD_i32_2_U_2($13, 62);
     $6 = 3;
    }
    $7 = $6;
    $6 = $9;
    $9 = ImFont__FindGlyph_28unsigned_20short_29_20const($13, $6 & 65535);
    $10 = SAFE_HEAP_LOAD_f32_4_4($9, 16);
    if ($12) {
     $11 = $10
    } else {
     $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 12) / SAFE_HEAP_LOAD_f32_4_4($13, 16));
     $10 = Math_fround($11 + Math_fround($10 - SAFE_HEAP_LOAD_f32_4_4($9, 8)));
     $11 = Math_fround(Math_fround($10 * Math_fround($7 | 0)) - $11);
    }
    $18 = $10;
    $10 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    $10 = Math_fround(Math_fround(($4 <= $10 ? $10 : $4) - $11) - SAFE_HEAP_LOAD_f32_4_4($1, 0));
    ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 28 | 0, $13, $15, $10 >= Math_fround(1.0) ? $10 : Math_fround(1.0), Math_fround(0.0), $5, $14, $8 + 36 | 0);
    $10 = SAFE_HEAP_LOAD_f32_4_4($8, 28);
    $9 = SAFE_HEAP_LOAD_i32_4_4($8, 36);
    if (!(($5 | 0) != ($9 | 0) | $9 >>> 0 >= $14 >>> 0)) {
     SAFE_HEAP_STORE_i32_4_4($8, 28, 0);
     $12 = $8 + 28 | 0;
     $9 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($12, $5, $14) + $5 | 0;
     SAFE_HEAP_STORE_i32_4_4($8, 36, $9);
     ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($12, $13, $15, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $5, $9, 0);
     $10 = SAFE_HEAP_LOAD_f32_4_4($8, 28);
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($8, 36);
    label$17 : {
     if ($5 >>> 0 >= $9 >>> 0) {
      break label$17
     }
     while (1) {
      $12 = $9 - 1 | 0;
      $17 = SAFE_HEAP_LOAD_i32_1_U_1($12, 0);
      if (!(($17 | 0) == 32 | ($17 | 0) == 9)) {
       break label$17
      }
      SAFE_HEAP_STORE_i32_4_4($8, 36, $12);
      ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 28 | 0, $13, $15, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $12, $9, 0);
      $9 = SAFE_HEAP_LOAD_i32_4_4($8, 36);
      $10 = Math_fround($10 - SAFE_HEAP_LOAD_f32_4_4($8, 28));
      if ($5 >>> 0 < $9 >>> 0) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_f32_4_4($8, 32, SAFE_HEAP_LOAD_f32_4_4($2, 4));
    SAFE_HEAP_STORE_f32_4_4($8, 28, $3);
    SAFE_HEAP_STORE_i64_8_4($8, 20, 0, 0);
    ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0, $1, $8 + 28 | 0, $5, $9, $8 + 40 | 0, $8 + 20 | 0, 0);
    $10 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
    if (!(Math_fround($11 + $10) <= $4)) {
     break label$10
    }
    $12 = $6 & 65535;
    $6 = 0;
    while (1) {
     $2 = $6;
     SAFE_HEAP_STORE_f32_4_4($8, 16, SAFE_HEAP_LOAD_f32_4_4($1, 4));
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     SAFE_HEAP_STORE_f32_4_4($8, 12, $10);
     $19 = SAFE_HEAP_LOAD_f32_4_4($6 + 5628 | 0, 0);
     $3 = SAFE_HEAP_LOAD_f32_4_4($6 + 5624 | 0, 0);
     $4 = SAFE_HEAP_LOAD_f32_4_4($6 + 5616 | 0, 0);
     $11 = SAFE_HEAP_LOAD_f32_4_4($6 + 5620 | 0, 0);
     $20 = SAFE_HEAP_LOAD_f32_4_4($6, 5416);
     SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_4($8, 12), i64toi32_i32$HIGH_BITS);
     $11 = Math_fround(Math_fround(($11 < Math_fround(0.0) ? Math_fround(0.0) : $11 > Math_fround(1.0) ? Math_fround(1.0) : $11) * Math_fround(255.0)) + Math_fround(.5));
     label$22 : {
      if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
       $6 = ~~$11;
       break label$22;
      }
      $6 = -2147483648;
     }
     $6 = $6 << 8;
     $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
     label$24 : {
      if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
       $9 = ~~$4;
       break label$24;
      }
      $9 = -2147483648;
     }
     $6 = $9 | $6;
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
     label$26 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $9 = ~~$3;
       break label$26;
      }
      $9 = -2147483648;
     }
     $6 = $6 | $9 << 16;
     $3 = Math_fround($19 * $20);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
     label$28 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $9 = ~~$3;
       break label$28;
      }
      $9 = -2147483648;
     }
     ImFont__RenderChar_28ImDrawList__2c_20float_2c_20ImVec2_2c_20unsigned_20int_2c_20unsigned_20short_29_20const($13, $0, $15, $8, $6 | $9 << 24, $12);
     $10 = Math_fround($18 + $10);
     $6 = $2 + 1 | 0;
     if (($7 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
    break label$10;
   }
   SAFE_HEAP_STORE_f32_4_4($8, 32, SAFE_HEAP_LOAD_f32_4_4($2, 4));
   SAFE_HEAP_STORE_f32_4_4($8, 28, $3);
   SAFE_HEAP_STORE_i64_8_4($8, 20, 0, 0);
   ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0, $1, $8 + 28 | 0, $5, $14, $8 + 40 | 0, $8 + 20 | 0, 0);
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($16, 12196)) {
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($1, $5, $14)
  }
  __stack_pointer = $8 + 48 | 0;
 }
 
 function ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0);
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($9, 580), $0, $1, $2, $4, 0);
  label$1 : {
   if (!$3) {
    break label$1
   }
   $10 = SAFE_HEAP_LOAD_f32_4_4($6 + 5488 | 0, 0);
   if (!($10 > Math_fround(0.0))) {
    break label$1
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
   $5 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 4) + Math_fround(1.0)));
   SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($5 + Math_fround(1.0)));
   $5 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) + Math_fround(1.0)));
   SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround($5 + Math_fround(1.0)));
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 5716 | 0, 0);
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$2 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$2;
    }
    $2 = -2147483648;
   }
   $2 = $2 << 8;
   $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 5712 | 0, 0);
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$4 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $8 = ~~$5;
     break label$4;
    }
    $8 = -2147483648;
   }
   $2 = $8 | $2;
   $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 5720 | 0, 0);
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$6 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $8 = ~~$5;
     break label$6;
    }
    $8 = -2147483648;
   }
   $2 = $2 | $8 << 16;
   $8 = $7 + 8 | 0;
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 5724 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($3, 5416));
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$8 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $3 = ~~$5;
     break label$8;
    }
    $3 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($6, $8, $7, $2 | $3 << 24, $4, 0, $10);
   $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 5700 | 0, 0);
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$10 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$10;
    }
    $2 = -2147483648;
   }
   $3 = $2 << 8;
   $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 5696 | 0, 0);
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$12 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$12;
    }
    $2 = -2147483648;
   }
   $3 = $2 | $3;
   $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 5704 | 0, 0);
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$14 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$14;
    }
    $2 = -2147483648;
   }
   $3 = $3 | $2 << 16;
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 5708 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($6, 5416));
   $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
   label$16 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$16;
    }
    $2 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($9, 580), $0, $1, $3 | $2 << 24, $4, 0, $10);
  }
  __stack_pointer = $7 + 16 | 0;
 }
 
 function ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_f32_4_4($4 + 5488 | 0, 0);
  if ($9 > Math_fround(0.0)) {
   $10 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
   $6 = SAFE_HEAP_LOAD_i32_4_4($10, 580);
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 4) + Math_fround(1.0)));
   SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($3 + Math_fround(1.0)));
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) + Math_fround(1.0)));
   SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround($3 + Math_fround(1.0)));
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5716 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$2 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $5 = ~~$3;
     break label$2;
    }
    $5 = -2147483648;
   }
   $5 = $5 << 8;
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5712 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$4 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $8 = ~~$3;
     break label$4;
    }
    $8 = -2147483648;
   }
   $5 = $8 | $5;
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5720 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$6 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $8 = ~~$3;
     break label$6;
    }
    $8 = -2147483648;
   }
   $5 = $5 | $8 << 16;
   $8 = $7 + 8 | 0;
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 5724 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($4, 5416));
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$8 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4 = ~~$3;
     break label$8;
    }
    $4 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($6, $8, $7, $5 | $4 << 24, $2, 0, $9);
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5700 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$10 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $6 = ~~$3;
     break label$10;
    }
    $6 = -2147483648;
   }
   $6 = $6 << 8;
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5696 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$12 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $5 = ~~$3;
     break label$12;
    }
    $5 = -2147483648;
   }
   $6 = $5 | $6;
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5704 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$14 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $5 = ~~$3;
     break label$14;
    }
    $5 = -2147483648;
   }
   $6 = $6 | $5 << 16;
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 5708 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($4, 5416));
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$16 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4 = ~~$3;
     break label$16;
    }
    $4 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($10, 580), $0, $1, $6 | $4 << 24, $2, 0, $9);
  }
  __stack_pointer = $7 + 16 | 0;
 }
 
 function ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0;
  $4 = __stack_pointer + -64 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7512) | 0) != ($1 | 0)) {
    break label$1
   }
   if (!($2 & 4)) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($5, 7570) & 255) {
     break label$1
    }
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
   if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 304 | 0, 0)) {
    break label$1
   }
   if (!($2 & 8)) {
    $16 = SAFE_HEAP_LOAD_f32_4_4($5 + 5484 | 0, 0)
   }
   $11 = $4 + 56 | 0;
   SAFE_HEAP_STORE_i64_8_8($11, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 48, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 500 | 0, 0);
   $6 = SAFE_HEAP_LOAD_f32_4_4($4, 48);
   $13 = SAFE_HEAP_LOAD_f32_4_4($1, 496);
   $10 = $6 >= $13 ? $6 : $13;
   SAFE_HEAP_STORE_f32_4_4($4, 48, $10);
   $6 = SAFE_HEAP_LOAD_f32_4_4($4, 52);
   SAFE_HEAP_STORE_f32_4_4($4, 52, $3 <= $6 ? $6 : $3);
   $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 504 | 0, 0);
   $0 = $4 + 60 | 0;
   $7 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 508 | 0, 0);
   $7 = $7 < $14 ? $7 : $14;
   SAFE_HEAP_STORE_f32_4_4($0, 0, $7);
   $8 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
   $8 = $6 > $8 ? $8 : $6;
   SAFE_HEAP_STORE_f32_4_4($11, 0, $8);
   label$4 : {
    if (!($2 & 1)) {
     break label$4
    }
    $17 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 52) + Math_fround(-4.0));
    SAFE_HEAP_STORE_f32_4_4($4, 52, $17);
    $10 = Math_fround($10 + Math_fround(-4.0));
    SAFE_HEAP_STORE_f32_4_4($4, 48, $10);
    $8 = Math_fround($8 + Math_fround(4.0));
    SAFE_HEAP_STORE_f32_4_4($4, 56, $8);
    $7 = Math_fround($7 + Math_fround(4.0));
    SAFE_HEAP_STORE_f32_4_4($4, 60, $7);
    $18 = $3 <= $17 & $10 >= $13 & $6 >= $8 & $7 <= $14;
    if (!$18) {
     $15 = SAFE_HEAP_LOAD_i32_4_4($1, 580);
     $0 = SAFE_HEAP_LOAD_i64_8_8($4, 48);
     $9 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($4, 40, $0, $9);
     $5 = SAFE_HEAP_LOAD_i64_8_8($4, 56);
     $12 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($4, 32, $5, $12);
     SAFE_HEAP_STORE_i64_8_8($4, 8, $0, $9);
     SAFE_HEAP_STORE_i64_8_8($4, 0, $5, $12);
     ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($15, $4 + 8 | 0, $4, 0);
    }
    $15 = SAFE_HEAP_LOAD_i32_4_4($1, 580);
    SAFE_HEAP_STORE_f32_4_4($4, 28, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 52) + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 24, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 48) + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 20, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 60 | 0, 0) + Math_fround(-1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 16, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 56) + Math_fround(-1.0)));
    $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6404 | 0, 0);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0 = ~~$3;
      break label$6;
     }
     $0 = -2147483648;
    }
    $9 = $0 << 8;
    $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6400 | 0, 0);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$8 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0 = ~~$3;
      break label$8;
     }
     $0 = -2147483648;
    }
    $9 = $0 | $9;
    $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6408 | 0, 0);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$10 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0 = ~~$3;
      break label$10;
     }
     $0 = -2147483648;
    }
    $9 = $9 | $0 << 16;
    $12 = $4 + 24 | 0;
    $19 = $4 + 16 | 0;
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 6412 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($5, 5416));
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$12 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0 = ~~$3;
      break label$12;
     }
     $0 = -2147483648;
    }
    ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($15, $12, $19, $9 | $0 << 24, $16, 0, Math_fround(2.0));
    if ($18) {
     break label$4
    }
    ImDrawList__PopClipRect_28_29(SAFE_HEAP_LOAD_i32_4_4($1, 580));
   }
   if (!($2 & 2)) {
    break label$1
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 6404 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$14 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$14;
    }
    $0 = -2147483648;
   }
   $5 = $0 << 8;
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 6400 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$16 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$16;
    }
    $0 = -2147483648;
   }
   $5 = $0 | $5;
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 6408 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$18 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$18;
    }
    $0 = -2147483648;
   }
   $0 = $5 | $0 << 16;
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 6412 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$20 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$20;
    }
    $2 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($1, 580), $4 + 48 | 0, $11, $0 | $2 << 24, $16, 0, Math_fround(1.0));
  }
  __stack_pointer = $4 - -64 | 0;
 }
 
 function ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3 + 12276 | 0, 0);
  label$1 : {
   if (($4 | 0) == -1) {
    SAFE_HEAP_STORE_i32_4_4($3, 12276, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($9, 196);
    $6 = $4 + 1 | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 12288 | 0, 0);
    label$3 : {
     if (($1 | 0) > ($4 | 0)) {
      break label$3
     }
     $2 = $1;
     $1 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
     $1 = ($1 | 0) > ($6 | 0) ? $1 : $6;
     if (($2 | 0) >= ($1 | 0)) {
      break label$3
     }
     if ($3) {
      $2 = $3 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
     }
     $2 = (((wasm2js_i32$1 = $1 << 6, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     $7 = SAFE_HEAP_LOAD_i32_4_4($3 + 12292 | 0, 0);
     if ($7) {
      __memcpy($2, $7, SAFE_HEAP_LOAD_i32_4_4($3, 12284) << 6);
      $7 = SAFE_HEAP_LOAD_i32_4_4($3, 12292);
      label$8 : {
       if (!$7) {
        break label$8
       }
       $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$8) {
        break label$8
       }
       $8 = $8 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($8, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $7, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($3, 12288, $1);
     SAFE_HEAP_STORE_i32_4_4($3, 12292, $2);
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 12284);
    if (($1 | 0) <= ($4 | 0)) {
     while (1) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 12292) + ($1 << 6) | 0;
      SAFE_HEAP_STORE_i64_8_4($2, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($2 + 56 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($2 + 48 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($2 + 40 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($2 + 32 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($2 + 24 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($2 + 16 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($2 + 8 | 0, 0, 0, 0);
      $2 = $1;
      $1 = $2 + 1 | 0;
      if (($2 | 0) != ($4 | 0)) {
       continue
      }
      break;
     }
    }
    SAFE_HEAP_STORE_i32_4_4($3, 12284, $6);
    $4 = SAFE_HEAP_LOAD_i32_4_4($9, 196);
    if (($4 | 0) < 0) {
     break label$1
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4($3 + 12292 | 0, 0);
    $3 = 0;
    while (1) {
     $1 = $0;
     $2 = $3;
     if (($4 | 0) > ($2 | 0)) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 204) + ($2 << 2) | 0, 0)
     }
     SAFE_HEAP_STORE_i32_4_4($6 + ($2 << 6) | 0, 0, $1);
     $3 = $2 + 1 | 0;
     if (($2 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($9, 196) | 0) != ($4 | 0)) {
    break label$1
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($3 + 12292 | 0, 0);
   label$13 : {
    label$14 : {
     switch ($1 - 4 | 0) {
     case 0:
      SAFE_HEAP_STORE_i32_4_4($5, 0, $2);
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29(($3 + ($4 << 6) | 0) + 6 | 0, 58, 13404, $5);
      break label$13;
     case 7:
      $0 = strlen($2);
      SAFE_HEAP_STORE_i32_4_4($5, 20, $2);
      SAFE_HEAP_STORE_i32_4_4($5, 16, $0);
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29(($3 + ($4 << 6) | 0) + 6 | 0, 58, 18924, $5 + 16 | 0);
      break label$13;
     case 8:
      SAFE_HEAP_STORE_i32_4_4($5, 32, $2);
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29(($3 + ($4 << 6) | 0) + 6 | 0, 58, 6985, $5 + 32 | 0);
      break label$13;
     case 9:
      break label$14;
     default:
      break label$13;
     };
    }
    $1 = $3 + ($4 << 6) | 0;
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 6)) {
     break label$13
    }
    SAFE_HEAP_STORE_i32_4_4($5, 48, $0);
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($1 + 6 | 0, 58, 13961, $5 + 48 | 0);
   }
   SAFE_HEAP_STORE_i32_1_1($3 + ($4 << 6) | 0, 5, 1);
  }
  __stack_pointer = $5 - -64 | 0;
 }
 
 function ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = $1;
  $4 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($0, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($0 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $0 = $4;
  while (1) {
   $5 = $2;
   $2 = $2 + 1 | 0;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
   if ($3) {
    label$11 : {
     if (($3 | 0) != 35) {
      break label$11
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 35) {
      break label$11
     }
     $0 = (SAFE_HEAP_LOAD_i32_1_U_1($5, 2) | 0) == 35 ? $4 : $0;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4((($3 ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = $0 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($2, 7140, $0)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7196) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($2, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7112) | 0) == ($0 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, 11, $1)
  }
  return $0;
 }
 
 function ImDrawList___ImDrawList_28_29($0) {
  var $1 = 0, $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  ImDrawList___ClearFreeMemory_28_29($0);
  ImDrawListSplitter__ClearFreeMemory_28_29($0 + 120 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 136 | 0, 0);
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0);
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0);
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 32 | 0, 0);
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
  }
  return $0;
 }
 
 function ImGui__KeepAliveID_28unsigned_20int_29($0) {
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($1, 7140, $0)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 7196) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($1, 7200, 1)
  }
 }
 
 function ImGuiWindow__GetID_28void_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  $4 = 4;
  $2 = $3 + 12 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($0, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($0 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  while (1) {
   $5 = $2;
   $2 = $2 + 1 | 0;
   $0 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
   $4 = $4 - 1 | 0;
   if ($4) {
    continue
   }
   break;
  };
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = $0 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($2, 7140, $0)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7196) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($2, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7112) | 0) == ($0 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, 12, $1)
  }
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function ImGuiWindow__GetIDNoKeepAlive_28char_20const__2c_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = $1;
  $5 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($0, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($0 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $0 = $5;
  while (1) {
   $4 = $3;
   $3 = $4 + 1 | 0;
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   if ($2) {
    label$11 : {
     if (($2 | 0) != 35) {
      break label$11
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 0) | 0) != 35) {
      break label$11
     }
     $0 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) == 35 ? $5 : $0;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4((($2 ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
   }
   if ($2) {
    continue
   }
   break;
  };
  $0 = $0 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7112) | 0) == ($0 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, 11, $1)
  }
  return $0;
 }
 
 function ImGuiWindow__GetIDFromRectangle_28ImRect_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $2 = __stack_pointer;
  $3 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($0, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($0 + 204 | 0, 0) | 0) - 4 | 0, 0);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 224 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  $8 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
  $2 = $2 - 16 | 0;
  $9 = SAFE_HEAP_LOAD_f32_4_4($1 + 12 | 0, 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 228 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($2 + 12 | 0, 0, Math_fround($9 - $5));
  SAFE_HEAP_STORE_f32_4_4($2, 8, Math_fround($8 - $4));
  SAFE_HEAP_STORE_f32_4_4($2, 4, Math_fround($7 - $5));
  SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($6 - $4));
  $0 = 16;
  $1 = $2;
  $3 = $3 ^ -1;
  while (1) {
   $2 = $1;
   $1 = $1 + 1 | 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) ^ $3 & 255) << 2) + 19360 | 0, 0) ^ $3 >>> 8;
   $3 = $2;
   $0 = $0 - 1 | 0;
   if ($0) {
    continue
   }
   break;
  };
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = $2 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 7136) | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($0, 7140, $1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 7196) | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($0, 7200, 1)
  }
  return $1;
 }
 
 function ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7136);
  SAFE_HEAP_STORE_i32_1_1($2, 7148, ($0 | 0) != ($3 | 0));
  label$1 : {
   if (($0 | 0) == ($3 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7192, -1);
   SAFE_HEAP_STORE_i32_2_1($2, 7151, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 7144, 0);
   if (!$0) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7212, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 7208, $0);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 7184, $1);
  SAFE_HEAP_STORE_i32_2_1($2, 7149, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 7136, $0);
  SAFE_HEAP_STORE_i32_1_1($2, 7153, 0);
  if ($0) {
   SAFE_HEAP_STORE_i32_4_4($2, 7140, $0);
   $1 = 4;
   label$3 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 7520) | 0) == ($0 | 0)) {
     break label$3
    }
    $1 = 4;
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 7532) | 0) == ($0 | 0)) {
     break label$3
    }
    $1 = (SAFE_HEAP_LOAD_i32_4_4($2, 7540) | 0) == ($0 | 0) ? 4 : 1;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7188, $1);
  }
  SAFE_HEAP_STORE_i64_8_8($2, 7168, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 7156, 0, 0);
  SAFE_HEAP_STORE_i32_1_1($2, 7154, 0);
 }
 
 function ImGui__ClearActiveID_28_29() {
  var $0 = 0, $1 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
  SAFE_HEAP_STORE_i32_1_1($0, 7148, ($1 | 0) != 0);
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($0, 7192, -1);
   SAFE_HEAP_STORE_i32_2_1($0, 7151, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 7144, 0);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 7184, 0);
  SAFE_HEAP_STORE_i32_2_1($0, 7149, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 7136, 0);
  SAFE_HEAP_STORE_i64_8_8($0, 7168, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 7156, 0, 0);
  SAFE_HEAP_STORE_i32_2_1($0, 7153, 0);
 }
 
 function ImGui__SetHoveredID_28unsigned_20int_29($0) {
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_2_2($1, 7124, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7116, $0);
  label$1 : {
   if (!$0) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 7120) | 0) == ($0 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i64_8_8($1, 7128, 0, 0);
  }
 }
 
 function ImGui__MarkItemEdited_28unsigned_20int_29($0) {
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_2_2($0, 7152, 257);
  $0 = $0 + 7248 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) | 4);
 }
 
 function ImGui__IsItemHovered_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  folding_inner0 : {
   label$1 : {
    label$2 : {
     label$3 : {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 7571)) {
       break label$3
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7570)) {
       break label$3
      }
      label$4 : {
       if ($0 & 512) {
        break label$4
       }
       if (!(SAFE_HEAP_LOAD_i32_4_4($2 + 7244 | 0, 0) & 4)) {
        break label$4
       }
       break folding_inner0;
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7512);
      if (!$3) {
       break folding_inner0
      }
      $0 = 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 7240) | 0) == ($3 | 0)) {
       break label$2
      }
      break label$1;
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 7248 | 0, 0);
     if (!($1 & 1)) {
      break folding_inner0
     }
     if (!($1 & 128 | $0 & 256 | (SAFE_HEAP_LOAD_i32_4_4($2, 7084) | 0) == ($3 | 0))) {
      break folding_inner0
     }
     label$8 : {
      if ($0 & 128) {
       break label$8
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7136);
      if (!$1) {
       break label$8
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 7240) | 0) == ($1 | 0)) {
       break label$8
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7149)) {
       break label$8
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 80) | 0) == ($1 | 0)) {
       break label$8
      }
      break folding_inner0;
     }
     label$9 : {
      $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7508);
      if (!$1) {
       break label$9
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($1, 736);
      if (!$1) {
       break label$9
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
       break label$9
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 736) | 0) == ($1 | 0)) {
       break label$9
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
      if ($1 & 134217728) {
       break folding_inner0
      }
      if (!($1 & 67108864) | $0 & 32) {
       break label$9
      }
      break folding_inner0;
     }
     label$11 : {
      if ($0 & 512) {
       break label$11
      }
      if (!(SAFE_HEAP_LOAD_i32_4_4($2 + 7244 | 0, 0) & 4)) {
       break label$11
      }
      break folding_inner0;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 7240) | 0) != (SAFE_HEAP_LOAD_i32_4_4($3, 80) | 0)) {
      break label$2
     }
     $0 = 0;
     if (SAFE_HEAP_LOAD_i32_1_U_1($3, 140)) {
      break label$1
     }
    }
    $0 = 1;
   }
   return $0 | 0;
  }
  return 0;
 }
 
 function ImGui__IsItemFocused_28_29() {
  var $0 = 0, $1 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7512);
  return ($1 | 0) != 0 & (SAFE_HEAP_LOAD_i32_4_4($0, 7240) | 0) == ($1 | 0);
 }
 
 function ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0;
  folding_inner1 : {
   label$1 : {
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7116);
    if (!$4 | ($1 | 0) == ($4 | 0)) {
     break label$1
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7124)) {
     break label$1
    }
    break folding_inner1;
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7084);
   $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
   if (($5 | 0) != ($4 | 0)) {
    break folding_inner1
   }
   label$3 : {
    $11 = SAFE_HEAP_LOAD_i32_4_4($2, 7136);
    if (!$11 | ($1 | 0) == ($11 | 0)) {
     break label$3
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7149)) {
     break label$3
    }
    break folding_inner1;
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 228 | 0, 0);
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($4, 496);
   $8 = $3 >= $7 ? $3 : $7;
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5516 | 0, 0);
   if (!($6 >= Math_fround($8 - $3))) {
    break folding_inner1
   }
   $7 = SAFE_HEAP_LOAD_f32_4_4($2 + 232 | 0, 0);
   $9 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   $10 = SAFE_HEAP_LOAD_f32_4_4($4 + 500 | 0, 0);
   $8 = $9 >= $10 ? $9 : $10;
   $9 = SAFE_HEAP_LOAD_f32_4_4($2 + 5520 | 0, 0);
   if (!($7 >= Math_fround($8 - $9))) {
    break folding_inner1
   }
   $8 = $3;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
   $10 = SAFE_HEAP_LOAD_f32_4_4($4 + 504 | 0, 0);
   if (!($6 < Math_fround($8 + ($3 < $10 ? $3 : $10)))) {
    break folding_inner1
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 508 | 0, 0);
   if (!(Math_fround(($3 > $6 ? $6 : $3) + $9) > $7)) {
    break folding_inner1
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7571)) {
    break folding_inner1
   }
   folding_inner0 : {
    label$9 : {
     $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7508);
     if (!$5) {
      break label$9
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 736);
     if (!$5) {
      break label$9
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 139)) {
      break label$9
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 736) | 0) == ($5 | 0)) {
      break label$9
     }
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($5 + 11 | 0, 0) & 12)) {
      break label$9
     }
     break folding_inner0;
    }
    label$10 : {
     if (!$1) {
      break label$10
     }
     SAFE_HEAP_STORE_i32_2_2($2, 7124, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 7116, $1);
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 7120) | 0) == ($1 | 0)) {
      break label$10
     }
     SAFE_HEAP_STORE_i64_8_8($2, 7128, 0, 0);
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1(((SAFE_HEAP_LOAD_i32_4_4($2, 7240) | 0) == ($1 | 0) ? 7244 : 7216) + $2 | 0, 0) & 4) {
     if (($1 | 0) == ($11 | 0)) {
      ImGui__ClearActiveID_28_29()
     }
     break folding_inner0;
    }
    label$13 : {
     if (!$1) {
      break label$13
     }
     label$14 : {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 12248)) {
       break label$14
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 7120) | 0) != ($1 | 0)) {
       break label$14
      }
      ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2 + 7504 | 0, 0), 0), 1, 11768), $0, $0 + 8 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 12252) | 0) != ($1 | 0)) {
      break label$13
     }
     wasm2js_trap();
    }
    return 1;
   }
   SAFE_HEAP_STORE_i32_1_1($2, 7127, 1);
  }
  return 0;
 }
 
 function GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = ($1 << 2) + $0 | 0;
  $6 = $5 + 44 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  if (!$1) {
   if ($4) {
    $1 = $4 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
   }
   $1 = memset((((wasm2js_i32$1 = 144, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0), 0, 144);
   SAFE_HEAP_STORE_i32_4_4($1, 48, $2);
   SAFE_HEAP_STORE_i32_4_4($1, 44, $4 + 6476 | 0);
   SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
  }
  $5 = $5 + 36 | 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($4, 6984) | 0)) {
   ImDrawList___ResetForNewFrame_28_29($1);
   ImDrawList__PushTextureID_28void__29($1, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4 + 152 | 0, 0), 4));
   $2 = SAFE_HEAP_LOAD_i64_8_4($0, 4);
   $6 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($3, 24, $2, $6);
   $7 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   $8 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   SAFE_HEAP_STORE_f32_4_4($3, 20, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 8 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0)));
   SAFE_HEAP_STORE_f32_4_4($3, 16, Math_fround($8 + $7));
   SAFE_HEAP_STORE_i64_8_8($3, 8, $2, $6);
   SAFE_HEAP_STORE_i64_8_8($3, 0, SAFE_HEAP_LOAD_i64_8_4($3, 16), i64toi32_i32$HIGH_BITS);
   ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($1, $3 + 8 | 0, $3, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($4, 6984));
  }
  __stack_pointer = $3 + 32 | 0;
  return $1;
 }
 
 function ImGui__IsMouseHoveringRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  $7 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ($2) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 496);
   $5 = $3 <= $5 ? $5 : $3;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 500 | 0, 0);
   $4 = $3 <= $4 ? $4 : $3;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 504 | 0, 0);
   $7 = $3 > $7 ? $7 : $3;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 508 | 0, 0);
   $6 = $3 > $6 ? $6 : $3;
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 228 | 0, 0);
  $8 = $5;
  $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 5516 | 0, 0);
  $0 = 0;
  label$3 : {
   if (!($3 >= Math_fround($8 - $5))) {
    break label$3
   }
   $9 = SAFE_HEAP_LOAD_f32_4_4($1 + 232 | 0, 0);
   $8 = $4;
   $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 5520 | 0, 0);
   $0 = $3 < Math_fround($7 + $5) & $9 >= Math_fround($8 - $4) & Math_fround($6 + $4) > $9;
  }
  return $0;
 }
 
 function ImGui__GetForegroundDrawList_28_29() {
  return GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
 }
 
 function ImGui__IsClippedEx_28ImRect_20const__2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = 0;
  label$1 : {
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
   label$2 : {
    if (!(SAFE_HEAP_LOAD_f32_4_4($3 + 500 | 0, 0) < SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0))) {
     break label$2
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($3 + 508 | 0, 0) > SAFE_HEAP_LOAD_f32_4_4($0, 4))) {
     break label$2
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($3, 496) < SAFE_HEAP_LOAD_f32_4_4($0, 8))) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_f32_4_4($3, 504) > SAFE_HEAP_LOAD_f32_4_4($0, 0)) {
     break label$1
    }
   }
   if ($1) {
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) == ($1 | 0)) {
     break label$1
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 7512) | 0) == ($1 | 0)) {
     break label$1
    }
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 12196)) {
    break label$1
   }
   return 1;
  }
  return 0;
 }
 
 function ImGui__GetClipboardText_28_29() {
  var $0 = 0, $1 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 208 | 0, 0);
  if (!$1) {
   return 19354
  }
  return FUNCTION_TABLE[$1 | 0](SAFE_HEAP_LOAD_i32_4_4($0 + 216 | 0, 0)) | 0;
 }
 
 function ImGui__SetClipboardText_28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 212 | 0, 0);
  if ($2) {
   FUNCTION_TABLE[$2 | 0](SAFE_HEAP_LOAD_i32_4_4($1 + 216 | 0, 0), $0)
  }
 }
 
 function ImGui__GetCurrentContext_28_29() {
  return SAFE_HEAP_LOAD_i32_4_4(0, 73568);
 }
 
 function ImGui__SetCurrentContext_28ImGuiContext__29($0) {
  SAFE_HEAP_STORE_i32_4_4(0, 73568, $0);
 }
 
 function ImGui__SetAllocatorFunctions_28void__20_28__29_28unsigned_20long_2c_20void__29_2c_20void_20_28__29_28void__2c_20void__29_2c_20void__29($0, $1) {
  SAFE_HEAP_STORE_i32_4_4(0, 73260, $1);
  SAFE_HEAP_STORE_i32_4_4(0, 73256, $0);
  SAFE_HEAP_STORE_i32_4_4(0, 73576, 0);
 }
 
 function WindowSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  if (SAFE_HEAP_LOAD_i32_4_4($0, 7008)) {
   while (1) {
    $9 = $4;
    $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 7016) + ($4 << 2) | 0, 0);
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($6 + 9 | 0, 0) & 1)) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($6, 576);
     label$4 : {
      if (($3 | 0) != -1) {
       $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12164) + $3 | 0;
       break label$4;
      }
      $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $4 = SAFE_HEAP_LOAD_i32_4_4($11 + 12164 | 0, 0);
      $12 = $4 + 4 | 0;
      $3 = $4 ? $12 : 0;
      if (!$4) {
       break label$4
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($6, 4);
      while (1) {
       if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) == ($7 | 0)) {
        break label$4
       }
       $10 = SAFE_HEAP_LOAD_i32_4_4($3 - 4 | 0, 0) + $3 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($11, 12156) + $12 | 0;
       $3 = ($4 | 0) != ($10 | 0) ? $10 : 0;
       if (($4 | 0) != ($10 | 0)) {
        continue
       }
       break;
      };
     }
     $4 = $3;
     if (!$3) {
      $4 = ImGui__CreateNewWindowSettings_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($6, 0));
      SAFE_HEAP_STORE_i32_4_4($6, 576, $4 - SAFE_HEAP_LOAD_i32_4_4($0, 12164) | 0);
     }
     $8 = SAFE_HEAP_LOAD_f32_4_4($6, 12);
     label$10 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $3 = ~~$8;
       break label$10;
      }
      $3 = -2147483648;
     }
     $3 = $3 & 65535;
     $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 16 | 0, 0);
     label$12 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $7 = ~~$8;
       break label$12;
      }
      $7 = -2147483648;
     }
     SAFE_HEAP_STORE_i32_4_4($4, 4, $3 | $7 << 16);
     $8 = SAFE_HEAP_LOAD_f32_4_4($6, 28);
     label$14 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $3 = ~~$8;
       break label$14;
      }
      $3 = -2147483648;
     }
     $3 = $3 & 65535;
     $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 32 | 0, 0);
     label$16 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $7 = ~~$8;
       break label$16;
      }
      $7 = -2147483648;
     }
     SAFE_HEAP_STORE_i32_4_4($4, 8, $3 | $7 << 16);
     SAFE_HEAP_STORE_i32_1_1($4, 12, SAFE_HEAP_LOAD_i32_1_U_1($6, 141));
    }
    $4 = $9 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 7008) | 0) != ($4 | 0)) {
     continue
    }
    break;
   }
  }
  $9 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
  $6 = Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 12156), 6);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $3 = $4 - 1 | 0;
  $7 = $6 + ($3 >>> 0 <= $4 >>> 0 ? $3 : 0) | 0;
  if (($9 | 0) < ($7 | 0)) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($3) {
    $3 = $3 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $9 = (((wasm2js_i32$1 = $7, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
   if ($3) {
    __memcpy($9, $3, SAFE_HEAP_LOAD_i32_4_4($2, 0));
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
    label$21 : {
     if (!$4) {
      break label$21
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$3) {
      break label$21
     }
     $3 = $3 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($2, 4, $7);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $9);
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 12164 | 0, 0);
  if ($3) {
   $4 = $3 + 4 | 0;
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 52, $4 + 16 | 0);
    SAFE_HEAP_STORE_i32_4_4($5, 48, $3);
    ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 19240, $5 + 48 | 0);
    $3 = SAFE_HEAP_LOAD_i32_2_2($4, 4);
    SAFE_HEAP_STORE_i32_4_4($5, 36, SAFE_HEAP_LOAD_i32_2_2($4 + 6 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($5, 32, $3);
    ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 19217, $5 + 32 | 0);
    $3 = SAFE_HEAP_LOAD_i32_2_2($4, 8);
    SAFE_HEAP_STORE_i32_4_4($5, 20, SAFE_HEAP_LOAD_i32_2_2($4 + 10 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($5, 16, $3);
    ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 19228, $5 + 16 | 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 12));
    ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 19203, $5);
    ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($2, 19353, 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4 - 4 | 0, 0) + $4 | 0;
    $4 = ($3 | 0) != ((SAFE_HEAP_LOAD_i32_4_4($0, 12164) + SAFE_HEAP_LOAD_i32_4_4($0, 12156) | 0) + 4 | 0) ? $3 : 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $5 - -64 | 0;
 }
 
 function WindowSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12164 | 0, 0);
  if ($1) {
   $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $1 = $1 + 4 | 0;
   while (1) {
    $3 = $1;
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 13)) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     $7 = SAFE_HEAP_LOAD_i32_4_4($6, 7064);
     $2 = $7;
     $8 = SAFE_HEAP_LOAD_i32_4_4($6, 7056);
     $1 = $8;
     if ($1) {
      while (1) {
       $5 = $1 >>> 1 | 0;
       $9 = ($5 << 3) + $2 | 0;
       $10 = SAFE_HEAP_LOAD_i32_4_4($9, 0) >>> 0 < $4 >>> 0;
       $2 = $10 ? $9 + 8 | 0 : $2;
       $1 = $10 ? $1 + ($5 ^ -1) | 0 : $5;
       if ($1) {
        continue
       }
       break;
      }
     }
     $1 = 0;
     label$6 : {
      if (($2 | 0) == (($8 << 3) + $7 | 0)) {
       break label$6
      }
      $1 = 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != ($4 | 0)) {
       break label$6
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
     }
     if ($1) {
      $2 = SAFE_HEAP_LOAD_i32_2_2($3 + 6 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($1, 12, Math_fround(SAFE_HEAP_LOAD_i32_2_2($3, 4) | 0));
      SAFE_HEAP_STORE_f32_4_4($1 + 16 | 0, 0, Math_fround($2 | 0));
      $2 = SAFE_HEAP_LOAD_i32_2_2($3, 8);
      label$9 : {
       if (($2 | 0) <= 0) {
        break label$9
       }
       $4 = SAFE_HEAP_LOAD_i32_2_2($3 + 10 | 0, 0);
       if (($4 | 0) <= 0) {
        break label$9
       }
       $11 = Math_fround($4 | 0);
       SAFE_HEAP_STORE_f32_4_4($1 + 32 | 0, 0, $11);
       $12 = Math_fround($2 | 0);
       SAFE_HEAP_STORE_f32_4_4($1, 28, $12);
       SAFE_HEAP_STORE_f32_4_4($1 + 24 | 0, 0, $11);
       SAFE_HEAP_STORE_f32_4_4($1, 20, $12);
      }
      SAFE_HEAP_STORE_i32_1_1($1, 141, SAFE_HEAP_LOAD_i32_1_U_1($3, 12));
     }
     SAFE_HEAP_STORE_i32_1_1($3, 13, 0);
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($3 - 4 | 0, 0) + $3 | 0;
    $1 = ($1 | 0) != ((SAFE_HEAP_LOAD_i32_4_4($0, 12164) + SAFE_HEAP_LOAD_i32_4_4($0, 12156) | 0) + 4 | 0) ? $1 : 0;
    if ($1) {
     continue
    }
    break;
   };
  }
 }
 
 function WindowSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $0 = __stack_pointer + -64 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_4_4($0, 32, $0 + 60 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 36, $0 + 56 | 0);
  label$1 : {
   if ((sscanf($3, 8575, $0 + 32 | 0) | 0) == 2) {
    SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($0, 56) << 16 | SAFE_HEAP_LOAD_i32_2_U_2($0, 60));
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 20, $0 + 56 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 16, $0 + 60 | 0);
   if ((sscanf($3, 8585, $0 + 16 | 0) | 0) == 2) {
    SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 56) << 16 | SAFE_HEAP_LOAD_i32_2_U_2($0, 60));
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $0 + 52 | 0);
   if ((sscanf($3, 12977, $0) | 0) != 1) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($2, 12, (SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) != 0);
  }
  __stack_pointer = $0 - -64 | 0;
 }
 
 function WindowSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = $2;
  $0 = -1;
  while (1) {
   $3 = $1;
   $1 = $1 + 1 | 0;
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
   if ($4) {
    label$4 : {
     if (($4 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 35) {
      break label$4
     }
     $0 = (SAFE_HEAP_LOAD_i32_1_U_1($3, 2) | 0) == 35 ? -1 : $0;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
   }
   if ($4) {
    continue
   }
   break;
  };
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($4 + 12164 | 0, 0);
  $5 = $3 + 4 | 0;
  $1 = $3 ? $5 : 0;
  label$7 : {
   if (!$3) {
    break label$7
   }
   $3 = $0 ^ -1;
   while (1) {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($3 | 0)) {
     break label$7
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1 - 4 | 0, 0) + $1 | 0;
    $6 = SAFE_HEAP_LOAD_i32_4_4($4, 12156) + $5 | 0;
    $1 = ($6 | 0) != ($0 | 0) ? $0 : 0;
    if (($0 | 0) != ($6 | 0)) {
     continue
    }
    break;
   };
  }
  if (!$1) {
   $1 = ImGui__CreateNewWindowSettings_28char_20const__29($2)
  }
  SAFE_HEAP_STORE_i64_8_2($1 + 6 | 0, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 13, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  return $1 | 0;
 }
 
 function WindowSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7008);
  if ($2) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 7016 | 0, 0);
   $1 = 0;
   while (1) {
    SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(($1 << 2) + $3 | 0, 0), 576, -1);
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12164 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 12156, 0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12164, 0);
  }
 }
 
 function ImGui__SaveIniSettingsToMemory_28unsigned_20long__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($2, 12128, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 12136 | 0, 0);
  label$1 : {
   if (($1 | 0) >= 0) {
    break label$1
   }
   $3 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($3 | 0) >= ($1 | 0)) {
    break label$1
   }
   if ($2) {
    $4 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
   }
   $4 = (((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 12140 | 0, 0);
   if ($3) {
    __memcpy($4, $3, SAFE_HEAP_LOAD_i32_4_4($2, 12132));
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 12140);
    label$4 : {
     if (!$3) {
      break label$4
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$4
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($2, 12136, $1);
   SAFE_HEAP_STORE_i32_4_4($2, 12140, $4);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12132, 0);
  if (!SAFE_HEAP_LOAD_i32_4_4($2, 12136)) {
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
   }
   $1 = (((wasm2js_i32$1 = 8, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($2 + 12140 | 0, 0);
   if ($4) {
    __memcpy($1, $4, SAFE_HEAP_LOAD_i32_4_4($2, 12132));
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 12140);
    label$8 : {
     if (!$4) {
      break label$8
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$3) {
      break label$8
     }
     $3 = $3 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($2, 12136, 8);
   SAFE_HEAP_STORE_i32_4_4($2, 12140, $1);
  }
  $4 = $2 + 12132 | 0;
  SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($2 + 12140 | 0, 0) + SAFE_HEAP_LOAD_i32_4_4($2, 12132) | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 12132, SAFE_HEAP_LOAD_i32_4_4($2, 12132) + 1 | 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 12144) | 0) > 0) {
   $1 = 0;
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 12152) + Math_imul($1, 36) | 0;
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($3, 28) | 0]($2, $3, $4);
    $1 = $1 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 12144) | 0) > ($1 | 0)) {
     continue
    }
    break;
   };
  }
  if ($0) {
   $3 = $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   $1 = $0 - 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($3, 0, $0 >>> 0 >= $1 >>> 0 ? $1 : 0);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12140);
  return $0 ? $0 : 73572;
 }
 
 function ImPool_ImGuiTabBar___Clear_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) > 0) {
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 20) + ($2 << 3) | 0, 4);
    label$3 : {
     if (($1 | 0) == -1) {
      break label$3
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul($1, 144) | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 140 | 0, 0);
     if ($3) {
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($4) {
       $4 = $4 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
      }
      ((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
     if (!$1) {
      break label$3
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($3) {
      $3 = $3 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = $2 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) > ($2 | 0)) {
     continue
    }
    break;
   }
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
  if ($2) {
   SAFE_HEAP_STORE_i64_8_4($0, 12, 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($2) {
   SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  }
  SAFE_HEAP_STORE_i64_8_4($0, 24, 0, 0);
 }
 
 function ImPool_ImGuiTable___Clear_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) > 0) {
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 20) + ($4 << 3) | 0, 4);
    label$3 : {
     if (($1 | 0) == -1) {
      break label$3
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul($1, 456) | 0;
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
     label$4 : {
      if (!$2) {
       break label$4
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$3) {
       break label$4
      }
      $3 = $3 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 400 | 0, 0);
     if ($2) {
      $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($3) {
       $3 = $3 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($1 + 372 | 0, 0);
     if (!$1) {
      break label$3
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($2) {
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $4 = $4 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) > ($4 | 0)) {
     continue
    }
    break;
   }
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
  if ($4) {
   SAFE_HEAP_STORE_i64_8_4($0, 12, 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($4) {
   SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  }
  SAFE_HEAP_STORE_i64_8_4($0, 24, 0, 0);
 }
 
 function ImGui__GetIO_28_29() {
  return SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 8 | 0;
 }
 
 function ImGui__GetTime_28_29() {
  return +SAFE_HEAP_LOAD_f64_8_8(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6976);
 }
 
 function ImGui__GetFrameCount_28_29() {
  return SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6984) | 0;
 }
 
 function ImGui__StartMouseMovingWindow_28ImGuiWindow__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0);
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  ImGui__FocusWindow_28ImGuiWindow__29($0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7136);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 80);
  SAFE_HEAP_STORE_i32_1_1($1, 7148, ($2 | 0) != ($3 | 0));
  label$1 : {
   if (($2 | 0) == ($3 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7192, -1);
   SAFE_HEAP_STORE_i32_2_1($1, 7151, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 7144, 0);
   if (!$2) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7212, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 7208, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($1, 7184, $0);
  SAFE_HEAP_STORE_i32_2_1($1, 7149, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7136, $2);
  SAFE_HEAP_STORE_i32_1_1($1, 7153, 0);
  if ($2) {
   SAFE_HEAP_STORE_i32_4_4($1, 7140, $2);
   $3 = 4;
   label$3 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 7520) | 0) == ($2 | 0)) {
     break label$3
    }
    $3 = 4;
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 7532) | 0) == ($2 | 0)) {
     break label$3
    }
    $3 = (SAFE_HEAP_LOAD_i32_4_4($1, 7540) | 0) == ($2 | 0) ? 4 : 1;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7188, $3);
  }
  SAFE_HEAP_STORE_i64_8_8($1, 7168, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7156, 0, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 7154, 0);
  SAFE_HEAP_STORE_i32_1_1($4, 7570, 1);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 736);
  $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 16 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($4, 7176, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 908 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($2, 12)));
  SAFE_HEAP_STORE_i32_1_1($4, 7150, 1);
  SAFE_HEAP_STORE_f32_4_4($4 + 7180 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 912 | 0, 0) - $5));
  SAFE_HEAP_STORE_i64_8_8($1, 7168, -1, -1);
  SAFE_HEAP_STORE_i64_8_4($1, 7156, -1, -1);
  SAFE_HEAP_STORE_i32_2_2($1, 7596, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 7572, SAFE_HEAP_LOAD_i32_1_U_1($1, 7573));
  label$5 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 4) {
    break label$5
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 736), 8) & 4) {
    break label$5
   }
   SAFE_HEAP_STORE_i32_4_4($4, 7092, $0);
  }
 }
 
 function ImGui__FocusWindow_28ImGuiWindow__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7508) | 0) != ($0 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($2, 7508, $0);
   if ($0) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7571)) {
     SAFE_HEAP_STORE_i32_1_1($2, 7569, 1)
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 756);
   }
   SAFE_HEAP_STORE_i32_1_1($2, 7568, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 7516, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 7512, $1);
   SAFE_HEAP_STORE_i32_4_4($2, 7564, 0);
   SAFE_HEAP_STORE_i32_2_2($2, 7596, 0);
   SAFE_HEAP_STORE_i32_2_2($2, 7572, 0);
  }
  $1 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($4, 7468);
  label$1 : {
   if (!$5) {
    break label$1
   }
   $3 = 0;
   label$2 : {
    if (!$0) {
     break label$2
    }
    $3 = 0;
    if (($5 | 0) <= 0) {
     break label$2
    }
    $8 = SAFE_HEAP_LOAD_i32_4_4($4 + 7476 | 0, 0);
    while (1) {
     $4 = $1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(Math_imul($1, 36) + $8 | 0, 4);
     $7 = 4;
     label$5 : {
      if (!$3) {
       break label$5
      }
      $6 = 0;
      $7 = 4;
      if (SAFE_HEAP_LOAD_i32_1_U_1($3 + 11 | 0, 0) & 1) {
       break label$5
      }
      while (1) {
       $3 = $1;
       $9 = SAFE_HEAP_LOAD_i32_4_4(Math_imul($1, 36) + $8 | 0, 4);
       $1 = 1;
       label$8 : {
        if (!$9) {
         break label$8
        }
        $1 = $0;
        if ((SAFE_HEAP_LOAD_i32_4_4($1, 736) | 0) == ($9 | 0)) {
         $6 = 1;
         $1 = 0;
         break label$8;
        }
        while (1) {
         label$11 : {
          $7 = ($1 | 0) != ($9 | 0);
          if (!$7) {
           $6 = 1;
           break label$11;
          }
          $1 = SAFE_HEAP_LOAD_i32_4_4($1, 732);
          if ($1) {
           continue
          }
         }
         break;
        };
        $1 = $7;
       }
       if ($1) {
        $1 = $3 + 1 | 0;
        if (($1 | 0) < ($5 | 0)) {
         continue
        }
       }
       break;
      };
      $7 = $6 ? 0 : 2;
     }
     if (($7 | 0) == 2) {
      $3 = $4;
      break label$2;
     }
     $1 = $4 + 1 | 0;
     if (($1 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
    $3 = $5;
   }
   $1 = $3;
   if (($1 | 0) >= ($5 | 0)) {
    break label$1
   }
   ImGui__ClosePopupToLevel_28int_2c_20bool_29($1, 0);
  }
  if ($0) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 736)
  } else {
   $4 = 0
  }
  if ($0) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 736)
  } else {
   $3 = 0
  }
  label$6 : {
   if (!SAFE_HEAP_LOAD_i32_4_4($2, 7136)) {
    break label$6
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7184);
   if (!$1) {
    break label$6
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 736) | 0) == ($4 | 0)) {
    break label$6
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7150)) {
    break label$6
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7136);
   SAFE_HEAP_STORE_i32_1_1($1, 7148, ($2 | 0) != 0);
   if ($2) {
    SAFE_HEAP_STORE_i32_4_4($1, 7192, -1);
    SAFE_HEAP_STORE_i32_2_1($1, 7151, 0);
    SAFE_HEAP_STORE_i32_4_4($1, 7144, 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7184, 0);
   SAFE_HEAP_STORE_i32_2_1($1, 7149, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 7136, 0);
   SAFE_HEAP_STORE_i64_8_8($1, 7168, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($1, 7156, 0, 0);
   SAFE_HEAP_STORE_i32_2_1($1, 7153, 0);
  }
  label$80 : {
   if (!$0) {
    break label$80
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 7028 | 0, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7020) - 1 | 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($1 + ($5 << 2) | 0, 0) | 0) != ($4 | 0)) {
    $1 = SAFE_HEAP_LOAD_i32_2_2($4, 156);
    if (($5 | 0) > ($1 | 0)) {
     while (1) {
      $6 = SAFE_HEAP_LOAD_i32_4_4($2, 7028);
      $8 = $1 << 2;
      $1 = $1 + 1 | 0;
      SAFE_HEAP_STORE_i32_4_4($6 + $8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($6 + ($1 << 2) | 0, 0));
      $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 7028) + $8 | 0, 0);
      SAFE_HEAP_STORE_i32_2_2($6, 156, SAFE_HEAP_LOAD_i32_2_U_2($6, 156) - 1 | 0);
      if (($1 | 0) != ($5 | 0)) {
       continue
      }
      break;
     }
    }
    SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 7028) + ($5 << 2) | 0, 0, $4);
    SAFE_HEAP_STORE_i32_2_2($4, 156, $5);
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($3, 8) | SAFE_HEAP_LOAD_i32_4_4($0, 8)) & 8192) {
    break label$80
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7008);
   $5 = SAFE_HEAP_LOAD_i32_4_4($4 + 7016 | 0, 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4((($2 << 2) + $5 | 0) - 4 | 0, 0);
   if (($0 | 0) == ($3 | 0)) {
    break label$80
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 736) | 0) == ($3 | 0) | ($2 | 0) < 2) {
    break label$80
   }
   $1 = $2 - 2 | 0;
   while (1) {
    $0 = $1;
    $1 = $5 + ($1 << 2) | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($3 | 0)) {
     memmove($1, ($5 + ($0 << 2) | 0) + 4 | 0, $2 + ($0 ^ -1) << 2);
     SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($4, 7008) << 2) + SAFE_HEAP_LOAD_i32_4_4($4, 7016) | 0) - 4 | 0, 0, $3);
     return;
    }
    $1 = $0 - 1 | 0;
    if (($0 | 0) > 0) {
     continue
    }
    break;
   };
  }
 }
 
 function ImGui__IsMousePosValid_28ImVec2_20const__29($0) {
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0 = (wasm2js_i32$0 = $0, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 228 | 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  return SAFE_HEAP_LOAD_f32_4_4($0, 0) >= Math_fround(-256.0e3) & SAFE_HEAP_LOAD_f32_4_4($0, 4) >= Math_fround(-256.0e3);
 }
 
 function ImGui__ClosePopupToLevel_28int_2c_20bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($2 + 7476 | 0, 0) + Math_imul($0, 36) | 0;
  $8 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
  $5 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2 + 7472 | 0, 0);
  label$1 : {
   if (($4 | 0) >= ($0 | 0)) {
    break label$1
   }
   $3 = $4;
   if ($4) {
    $6 = $4 + (($4 | 0) / 2 | 0) | 0
   } else {
    $6 = 8
   }
   $4 = ($0 | 0) < ($6 | 0) ? $6 : $0;
   if (($3 | 0) >= ($4 | 0)) {
    break label$1
   }
   $6 = Math_imul($4, 36);
   if ($2) {
    $3 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $6 = (((wasm2js_i32$1 = $6, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7476);
   if ($3) {
    __memcpy($6, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7468), 36));
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7476);
    label$6 : {
     if (!$3) {
      break label$6
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$7) {
      break label$6
     }
     $7 = $7 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7472, $4);
   SAFE_HEAP_STORE_i32_4_4($2, 7476, $6);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 7468, $0);
  if ($1) {
   label$8 : {
    if (!$5) {
     break label$8
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($5, 139) | !$8) {
     break label$8
    }
    ImGui__FocusTopMostWindowUnderOne_28ImGuiWindow__2c_20ImGuiWindow__29($8);
    return;
   }
   label$9 : {
    label$10 : {
     if (!$5) {
      break label$10
     }
     if (SAFE_HEAP_LOAD_i32_4_4($2, 7564)) {
      break label$10
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($5, 752);
     if (!$0) {
      break label$10
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
      break label$9
     }
    }
    $0 = $5;
   }
   ImGui__FocusWindow_28ImGuiWindow__29($0);
  }
 }
 
 function ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7468);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7480);
  if (($3 | 0) <= ($2 | 0)) {
   $0 = 0
  } else {
   $0 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 7476 | 0, 0) + Math_imul($2, 36) | 0, 0) | 0) == ($0 | 0)
  }
  return $0;
 }
 
 function ImGui__NewFrame_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $21 = __stack_pointer - 16 | 0;
  __stack_pointer = $21;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 12180);
  if (($2 | 0) > 0) {
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($7, 12188);
    $0 = $2;
    $2 = $0 - 1 | 0;
    $4 = $1 + Math_imul($2, 20) | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 4) | 0) == 7) {
     memmove($4, $1 + Math_imul($0, 20) | 0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($7, 12180) - $0 | 0, 20));
     SAFE_HEAP_STORE_i32_4_4($7, 12180, SAFE_HEAP_LOAD_i32_4_4($7, 12180) - 1 | 0);
    }
    if (($0 | 0) > 1) {
     continue
    }
    break;
   }
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 12180) | 0) > 0) {
   $0 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($7, 12188) + Math_imul($0, 20) | 0;
    if (!SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
     FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0]($7, $2)
    }
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 12180) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$7 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($12 + 180 | 0, 0)) {
    break label$7
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($12 + 12 | 0, 0) & 2) {
    break label$7
   }
   SAFE_HEAP_STORE_i32_1_1($12, 180, 0);
  }
  if (!SAFE_HEAP_LOAD_i32_1_U_1($12, 12125)) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($12 + 32 | 0, 0);
   label$9 : {
    if (!$0) {
     break label$9
    }
    SAFE_HEAP_STORE_i32_4_4($21, 8, 0);
    $13 = $21 + 8 | 0;
    if ($13) {
     SAFE_HEAP_STORE_i32_4_4($13, 0, 0)
    }
    $8 = fopen($0, 13530);
    $0 = 0;
    __inlined_func$ImFileLoadToMemory_28char_20const__2c_20char_20const__2c_20unsigned_20long__2c_20int_29 : {
     if (!$8) {
      break __inlined_func$ImFileLoadToMemory_28char_20const__2c_20char_20const__2c_20unsigned_20long__2c_20int_29
     }
     $0 = ftell($8);
     $1 = -1;
     label$3 : {
      if (($0 | 0) == -1) {
       break label$3
      }
      $1 = -1;
      if (fseek($8, 0, 2)) {
       break label$3
      }
      $2 = ftell($8);
      $1 = -1;
      if (($2 | 0) == -1) {
       break label$3
      }
      $1 = fseek($8, $0, 0) ? -1 : $2;
     }
     $0 = $1;
     if (($0 | 0) == -1) {
      fclose($8);
      $0 = 0;
      break __inlined_func$ImFileLoadToMemory_28char_20const__2c_20char_20const__2c_20unsigned_20long__2c_20int_29;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($2) {
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
     }
     $4 = (((wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     if (!$4) {
      fclose($8);
      $0 = 0;
      break __inlined_func$ImFileLoadToMemory_28char_20const__2c_20char_20const__2c_20unsigned_20long__2c_20int_29;
     }
     $2 = $4;
     SAFE_HEAP_LOAD_i32_4_4($8, 76);
     $1 = SAFE_HEAP_LOAD_i32_4_4($8, 72);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $1 - 1 | $1);
     $1 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
     $9 = SAFE_HEAP_LOAD_i32_4_4($8, 8);
     if (($1 | 0) == ($9 | 0)) {
      $1 = $0
     } else {
      $16 = $1;
      $1 = $9 - $1 | 0;
      $1 = $0 >>> 0 > $1 >>> 0 ? $1 : $0;
      __memcpy($2, $16, $1);
      SAFE_HEAP_STORE_i32_4_4($8, 4, SAFE_HEAP_LOAD_i32_4_4($8, 4) + $1 | 0);
      $2 = $1 + $2 | 0;
      $1 = $0 - $1 | 0;
     }
     __inlined_func$fread : {
      if ($1) {
       while (1) {
        label$6 : {
         if (!__toread($8)) {
          $9 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($8, 32) | 0]($8, $2, $1) | 0;
          if ($9) {
           break label$6
          }
         }
         $1 = $0 - $1 | 0;
         break __inlined_func$fread;
        }
        $2 = $2 + $9 | 0;
        $1 = $1 - $9 | 0;
        if ($1) {
         continue
        }
        break;
       }
      }
      $1 = $0;
     }
     if (($1 | 0) != ($0 | 0)) {
      fclose($8);
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($0) {
       $0 = $0 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      $0 = 0;
      break __inlined_func$ImFileLoadToMemory_28char_20const__2c_20char_20const__2c_20unsigned_20long__2c_20int_29;
     }
     fclose($8);
     if ($13) {
      SAFE_HEAP_STORE_i32_4_4($13, 0, $0)
     }
     $0 = $4;
    }
    if (!$0) {
     break label$9
    }
    ImGui__LoadIniSettingsFromMemory_28char_20const__2c_20unsigned_20long_29($0, SAFE_HEAP_LOAD_i32_4_4($21, 8));
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($2) {
     $2 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_1_1($12, 12125, 1);
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($12, 12128);
  label$11 : {
   if (!($3 > Math_fround(0.0))) {
    break label$11
   }
   $3 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($12 + 24 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($12, 12128, $3);
   if (!($3 <= Math_fround(0.0))) {
    break label$11
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($12 + 32 | 0, 0);
   label$12 : {
    if ($0) {
     SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 12128, 0);
     SAFE_HEAP_STORE_i32_4_4($21, 8, 0);
     $2 = ImGui__SaveIniSettingsToMemory_28unsigned_20long__29($21 + 8 | 0);
     $0 = fopen($0, 2145);
     if (!$0) {
      break label$12
     }
     fwrite($2, SAFE_HEAP_LOAD_i32_4_4($21, 8), $0);
     fclose($0);
     break label$12;
    }
    SAFE_HEAP_STORE_i32_1_1($12 + 852 | 0, 0, 1);
   }
   SAFE_HEAP_STORE_i32_4_4($12, 12128, 0);
  }
  SAFE_HEAP_STORE_i32_1_1($7, 6996, 1);
  SAFE_HEAP_STORE_i32_2_2($7, 12078, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 7068, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 6984, SAFE_HEAP_LOAD_i32_4_4($7, 6984) + 1 | 0);
  SAFE_HEAP_STORE_f64_8_8($7, 6976, SAFE_HEAP_LOAD_f64_8_8($7, 6976) + +SAFE_HEAP_LOAD_f32_4_4($7 + 24 | 0, 0));
  $0 = SAFE_HEAP_LOAD_i32_4_4($7 + 12100 | 0, 0);
  label$14 : {
   if (($0 | 0) >= 0) {
    break label$14
   }
   $2 = $0 + (($0 | 0) / 2 | 0) | 0;
   $2 = ($2 | 0) > 0 ? $2 : 0;
   if (($0 | 0) >= ($2 | 0)) {
    break label$14
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $0 = (((wasm2js_i32$2 = $2 << 2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($7 + 12104 | 0, 0);
   if ($1) {
    __memcpy($0, $1, SAFE_HEAP_LOAD_i32_4_4($7, 12096) << 2);
    $1 = SAFE_HEAP_LOAD_i32_4_4($7, 12104);
    label$17 : {
     if (!$1) {
      break label$17
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$17
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 12100, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 12104, $0);
  }
  SAFE_HEAP_STORE_i32_4_4($7, 12096, 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($7, 12784);
  $3 = SAFE_HEAP_LOAD_f32_4_4($7, 24);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 12776);
  $2 = (($0 << 2) + $7 | 0) + 12296 | 0;
  SAFE_HEAP_STORE_f32_4_4($7, 12784, Math_fround($5 + Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($2, 0))));
  SAFE_HEAP_STORE_f32_4_4($2, 0, $3);
  SAFE_HEAP_STORE_i32_4_4($7, 12776, ($0 + 1 | 0) % 120 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 12780);
  $0 = (($0 | 0) >= 119 ? 119 : $0) + 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($7, 12780, $0);
  $1 = $7 + 856 | 0;
  $3 = SAFE_HEAP_LOAD_f32_4_4($7, 12784);
  if ($3 > Math_fround(0.0)) {
   $3 = Math_fround(Math_fround(1.0) / Math_fround($3 / Math_fround($0 | 0)))
  } else {
   $3 = Math_fround(3402823466385288598117041.0e14)
  }
  SAFE_HEAP_STORE_f32_4_4($1, 0, $3);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 7504 | 0, 0), 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 5, 0);
  SAFE_HEAP_STORE_i32_4_4($0 + 8 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 12, SAFE_HEAP_LOAD_i64_8_8($1 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 7496) | 0) > 0) {
   $0 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7504) + ($0 << 2) | 0, 0);
    $4 = SAFE_HEAP_LOAD_i64_8_4($2, 136);
    SAFE_HEAP_STORE_i64_8_4($2, 120, $4, i64toi32_i32$HIGH_BITS);
    $4 = $2 + 144 | 0;
    SAFE_HEAP_STORE_i64_8_4($2, 128, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($2, 136, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4, 0, 0, 0);
    $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
    $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 124 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($2 + 24 | 0, 0, Math_fround($5 + $3));
    $6 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
    $5 = SAFE_HEAP_LOAD_f32_4_4($2, 120);
    SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround($6 + $5));
    $6 = SAFE_HEAP_LOAD_f32_4_4($2, 128);
    $14 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
    $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 16 | 0, 0) - $3) + SAFE_HEAP_LOAD_f32_4_4($2 + 132 | 0, 0));
    SAFE_HEAP_STORE_f32_4_4($2 + 32 | 0, 0, $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3);
    $3 = Math_fround($6 + Math_fround($14 - $5));
    SAFE_HEAP_STORE_f32_4_4($2, 28, $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3);
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 7496) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($7 + 152 | 0, 0), 16, 1);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 164 | 0, 0);
  if (!$0) {
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 152 | 0, 0) + 60 | 0, 0), 0)
  }
  SAFE_HEAP_STORE_i32_4_4($1, 6464, $0);
  $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 156 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($0, 16)) * SAFE_HEAP_LOAD_f32_4_4($0, 68));
  $3 = $3 <= Math_fround(1.0) ? Math_fround(1.0) : $3;
  SAFE_HEAP_STORE_f32_4_4($1, 6472, $3);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  label$22 : {
   if (!$2) {
    break label$22
   }
   $11 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($2, 572));
   $2 = SAFE_HEAP_LOAD_i32_4_4($2, 728);
   if (!$2) {
    break label$22
   }
   $11 = Math_fround($11 * SAFE_HEAP_LOAD_f32_4_4($2, 572));
  }
  SAFE_HEAP_STORE_f32_4_4($1, 6468, $11);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
  $4 = SAFE_HEAP_LOAD_i64_8_4($2, 44);
  $8 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i32_4_4($1 + 6972 | 0, 0, $2 + 88 | 0);
  SAFE_HEAP_STORE_i64_8_4($1, 6476, $4, $8);
  SAFE_HEAP_STORE_f32_4_4($1 + 6488 | 0, 0, $11);
  SAFE_HEAP_STORE_i32_4_4($1 + 6484 | 0, 0, $0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($7, 7496);
  label$25 : {
   if (($1 | 0) <= 0) {
    $11 = Math_fround(3402823466385288598117041.0e14);
    $3 = Math_fround(3402823466385288598117041.0e14);
    $14 = Math_fround(-3402823466385288598117041.0e14);
    $5 = Math_fround(-3402823466385288598117041.0e14);
    break label$25;
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($7 + 7504 | 0, 0);
   $0 = 0;
   $5 = Math_fround(-3402823466385288598117041.0e14);
   $14 = Math_fround(-3402823466385288598117041.0e14);
   $3 = Math_fround(3402823466385288598117041.0e14);
   $6 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($4 + ($0 << 2) | 0, 0);
    $15 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
    $6 = $6 > $15 ? $15 : $6;
    $11 = $6;
    $19 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
    $3 = $3 > $19 ? $19 : $3;
    $15 = Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($2, 12));
    $14 = $14 < $15 ? $15 : $14;
    $15 = Math_fround($19 + SAFE_HEAP_LOAD_f32_4_4($2 + 16 | 0, 0));
    $5 = $5 < $15 ? $15 : $5;
    $0 = $0 + 1 | 0;
    if (($1 | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_f32_4_4($7 + 6512 | 0, 0, $5);
  SAFE_HEAP_STORE_f32_4_4($7 + 6508 | 0, 0, $14);
  SAFE_HEAP_STORE_f32_4_4($7 + 6504 | 0, 0, $3);
  SAFE_HEAP_STORE_f32_4_4($7 + 6500 | 0, 0, $11);
  SAFE_HEAP_STORE_f32_4_4($7 + 6492 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($7 + 5608 | 0, 0));
  $3 = SAFE_HEAP_LOAD_f32_4_4($7 + 5612 | 0, 0);
  $1 = 0;
  $0 = $7 + 6476 | 0;
  if (SAFE_HEAP_LOAD_f32_4_4($0, 20) != $3) {
   SAFE_HEAP_STORE_f32_4_4($0, 20, $3);
   while (1) {
    $4 = ($0 + $1 | 0) + 432 | 0;
    if ($1) {
     $5 = Math_fround($1 | 0);
     $5 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / acosf(Math_fround(Math_fround(1.0) - Math_fround(($3 < $5 ? $3 : $5) / $5))))));
     label$4 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $2 = ~~$5;
       break label$4;
      }
      $2 = -2147483648;
     }
     $2 = ($2 + 1 | 0) / 2 << 1;
     $2 = ($2 | 0) >= 512 ? 512 : $2;
     $2 = ($2 | 0) <= 4 ? 4 : $2;
    } else {
     $2 = 0
    }
    SAFE_HEAP_STORE_i32_1_1($4, 0, $2);
    $1 = $1 + 1 | 0;
    if (($1 | 0) != 64) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_f32_4_4($0, 428, Math_fround($3 / Math_fround(2.1410584449768066e-03)));
  }
  $0 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 5604 | 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 6516 | 0, 0, $0);
  label$28 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($7 + 5605 | 0, 0)) {
    break label$28
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 6464), 48), 0) & 4) {
    break label$28
   }
   SAFE_HEAP_STORE_i32_4_4($7, 6516, $0 | 2);
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 5606 | 0, 0)) {
   SAFE_HEAP_STORE_i32_4_4($7, 6516, SAFE_HEAP_LOAD_i32_4_4($7, 6516) | 4)
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 12 | 0, 0) & 8) {
   SAFE_HEAP_STORE_i32_4_4($7, 6516, SAFE_HEAP_LOAD_i32_4_4($7, 6516) | 8)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 7496) | 0) > 0) {
   $0 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 7504) + ($0 << 2) | 0, 0);
    SAFE_HEAP_STORE_i64_8_4($2, 52, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($2 + 92 | 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($2 + 84 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($2 + 76 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($2 + 68 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($2 + 60 | 0, 0, 0, 0);
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 7496) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  label$33 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($7, 7876)) {
    break label$33
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($7 + 7900 | 0, 0);
   if ((SAFE_HEAP_LOAD_i32_4_4($7, 7136) | 0) != ($0 | 0)) {
    break label$33
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) == ($0 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($2, 7140, $0)
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($2, 7196) | 0) != ($0 | 0)) {
    break label$33
   }
   SAFE_HEAP_STORE_i32_1_1($2, 7200, 1);
  }
  label$35 : {
   label$36 : {
    if (!SAFE_HEAP_LOAD_i32_4_4($7, 7120)) {
     SAFE_HEAP_STORE_i32_4_4($7, 7128, 0);
     break label$36;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7116);
    if (!$0) {
     break label$35
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 7136) | 0) != ($0 | 0)) {
     break label$35
    }
   }
   SAFE_HEAP_STORE_i32_4_4($7, 7132, 0);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7116);
  label$38 : {
   if (!$0) {
    break label$38
   }
   SAFE_HEAP_STORE_f32_4_4($7, 7128, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 24) + SAFE_HEAP_LOAD_f32_4_4($7, 7128)));
   if ((SAFE_HEAP_LOAD_i32_4_4($7, 7136) | 0) == ($0 | 0)) {
    break label$38
   }
   SAFE_HEAP_STORE_f32_4_4($7, 7132, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 24) + SAFE_HEAP_LOAD_f32_4_4($7, 7132)));
  }
  SAFE_HEAP_STORE_i32_4_4($7, 7120, $0);
  SAFE_HEAP_STORE_i32_1_1($7, 7127, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 7116, 0);
  SAFE_HEAP_STORE_i32_1_1($7, 7126, SAFE_HEAP_LOAD_i32_1_U_1($7, 7125));
  SAFE_HEAP_STORE_i32_2_2($7, 7124, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($7, 7140);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7136);
  label$39 : {
   if (($1 | 0) == ($0 | 0) | !$0) {
    break label$39
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($7, 7196) | 0) != ($0 | 0)) {
    break label$39
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
   SAFE_HEAP_STORE_i32_1_1($0, 7148, ($2 | 0) != 0);
   if ($2) {
    SAFE_HEAP_STORE_i32_4_4($0, 7192, -1);
    SAFE_HEAP_STORE_i32_2_1($0, 7151, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7144, 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 7184, 0);
   SAFE_HEAP_STORE_i32_2_1($0, 7149, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 7136, 0);
   SAFE_HEAP_STORE_i64_8_8($0, 7168, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0, 7156, 0, 0);
   SAFE_HEAP_STORE_i32_2_1($0, 7153, 0);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7136);
  if ($0) {
   SAFE_HEAP_STORE_f32_4_4($7, 7144, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 24) + SAFE_HEAP_LOAD_f32_4_4($7, 7144)))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 7196, $0);
  SAFE_HEAP_STORE_i32_1_1($7, 7200, 0);
  SAFE_HEAP_STORE_i32_1_1($7, 7153, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 7140, 0);
  SAFE_HEAP_STORE_i32_1_1($7, 7148, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 7204, SAFE_HEAP_LOAD_i32_4_4($7, 7184));
  SAFE_HEAP_STORE_i32_1_1($7, 7201, SAFE_HEAP_LOAD_i32_1_U_1($7, 7152));
  SAFE_HEAP_STORE_f32_4_4($7, 7212, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 24) + SAFE_HEAP_LOAD_f32_4_4($7, 7212)));
  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 11968);
  if (!(!$2 | ($0 | 0) == ($2 | 0))) {
   SAFE_HEAP_STORE_i32_4_4($7, 11968, 0)
  }
  if (!$0) {
   SAFE_HEAP_STORE_i64_8_8($7, 7168, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($7, 7156, 0, 0);
  }
  SAFE_HEAP_STORE_i32_4_4($7, 7988, 0);
  SAFE_HEAP_STORE_i32_2_1($7, 7877, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 7980, SAFE_HEAP_LOAD_i32_4_4($7, 7976));
  SAFE_HEAP_STORE_i64_8_4($7, 7972, 2139095039, 0);
  if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 5400 | 0, 0)) {
   memset($7 + 256 | 0, 0, 512);
   $0 = 0;
   while (1) {
    $2 = ($0 << 2) + $7 | 0;
    SAFE_HEAP_STORE_i32_4_4($2 + 1140 | 0, 0, -1082130432);
    SAFE_HEAP_STORE_i32_4_4($2 + 3188 | 0, 0, -1082130432);
    $0 = $0 + 1 | 0;
    if (($0 | 0) != 512) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i64_8_4($7 + 892 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7 + 252 | 0, 0, 0);
   $0 = 0;
   while (1) {
    $2 = ($0 << 2) + $7 | 0;
    SAFE_HEAP_STORE_i32_4_4($2 + 5236 | 0, 0, -1082130432);
    SAFE_HEAP_STORE_i32_4_4($2 + 5316 | 0, 0, -1082130432);
    $0 = $0 + 1 | 0;
    if (($0 | 0) != 20) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i32_1_1($7, 5400, 0);
  }
  $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_1_U_1($9 + 252 | 0, 0);
  $0 = SAFE_HEAP_LOAD_i32_1_U_1($9 + 253 | 0, 0) ? $0 | 2 : $0;
  $0 = SAFE_HEAP_LOAD_i32_1_U_1($9 + 254 | 0, 0) ? $0 | 4 : $0;
  SAFE_HEAP_STORE_i32_4_4($7 + 892 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($9 + 255 | 0, 0) ? $0 | 8 : $0);
  __memcpy($7 + 3188 | 0, $7 + 1140 | 0, 2048);
  $0 = 0;
  while (1) {
   $1 = (($0 << 2) + $7 | 0) + 1140 | 0;
   $5 = Math_fround(-1.0);
   label$48 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $7 | 0) + 256 | 0, 0)) {
     break label$48
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4((($0 << 2) + $7 | 0) + 1140 | 0, 0);
    $5 = Math_fround(0.0);
    if ($3 < Math_fround(0.0)) {
     break label$48
    }
    $5 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($7, 24));
   }
   SAFE_HEAP_STORE_f32_4_4($1, 0, $5);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 512) {
    continue
   }
   break;
  };
  SAFE_HEAP_STORE_i32_1_1($9 + 851 | 0, 0, 0);
  $0 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($9, 8);
  if ($2 & 2) {
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($9 + 12 | 0, 0) & 1
  }
  $22 = $2 & 1;
  $8 = $0;
  label$51 : {
   if (!$0) {
    break label$51
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($9, 7560) | 0) == 3) {
    break label$51
   }
   label$52 : {
    if (SAFE_HEAP_LOAD_f32_4_4($9 + 768 | 0, 0) > Math_fround(0.0)) {
     break label$52
    }
    if (SAFE_HEAP_LOAD_f32_4_4($9 + 776 | 0, 0) > Math_fround(0.0)) {
     break label$52
    }
    if (SAFE_HEAP_LOAD_f32_4_4($9 + 772 | 0, 0) > Math_fround(0.0)) {
     break label$52
    }
    if (SAFE_HEAP_LOAD_f32_4_4($9 + 780 | 0, 0) > Math_fround(0.0)) {
     break label$52
    }
    if (SAFE_HEAP_LOAD_f32_4_4($9 + 784 | 0, 0) > Math_fround(0.0)) {
     break label$52
    }
    if (SAFE_HEAP_LOAD_f32_4_4($9 + 788 | 0, 0) > Math_fround(0.0)) {
     break label$52
    }
    if (SAFE_HEAP_LOAD_f32_4_4($9 + 792 | 0, 0) > Math_fround(0.0)) {
     break label$52
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($9 + 796 | 0, 0) > Math_fround(0.0))) {
     break label$51
    }
   }
   SAFE_HEAP_STORE_i32_4_4($9, 7560, 3);
  }
  label$53 : {
   if (!$22) {
    break label$53
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 100 | 0, 0);
   label$54 : {
    if (($0 | 0) < 0) {
     break label$54
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $9 | 0) + 256 | 0, 0)) {
     break label$54
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7560, 2);
    SAFE_HEAP_STORE_i32_4_4($9 + 768 | 0, 0, 1065353216);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 104 | 0, 0);
   label$55 : {
    if (($0 | 0) < 0) {
     break label$55
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $9 | 0) + 256 | 0, 0)) {
     break label$55
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7560, 2);
    SAFE_HEAP_STORE_i32_4_4($9 + 776 | 0, 0, 1065353216);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 108 | 0, 0);
   label$56 : {
    if (($0 | 0) < 0) {
     break label$56
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $9 | 0) + 256 | 0, 0)) {
     break label$56
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7560, 2);
    SAFE_HEAP_STORE_i32_4_4($9 + 772 | 0, 0, 1065353216);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 56 | 0, 0);
   label$57 : {
    if (($0 | 0) < 0) {
     break label$57
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $9 | 0) + 256 | 0, 0)) {
     break label$57
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7560, 2);
    SAFE_HEAP_STORE_i32_4_4($9 + 832 | 0, 0, 1065353216);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 60 | 0, 0);
   label$58 : {
    if (($0 | 0) < 0) {
     break label$58
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $9 | 0) + 256 | 0, 0)) {
     break label$58
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7560, 2);
    SAFE_HEAP_STORE_i32_4_4($9 + 836 | 0, 0, 1065353216);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9 - -64 | 0, 0);
   label$59 : {
    if (($0 | 0) < 0) {
     break label$59
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $9 | 0) + 256 | 0, 0)) {
     break label$59
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7560, 2);
    SAFE_HEAP_STORE_i32_4_4($9 + 840 | 0, 0, 1065353216);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 68 | 0, 0);
   label$60 : {
    if (($0 | 0) < 0) {
     break label$60
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $9 | 0) + 256 | 0, 0)) {
     break label$60
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7560, 2);
    SAFE_HEAP_STORE_i32_4_4($9 + 844 | 0, 0, 1065353216);
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($9, 252)) {
    SAFE_HEAP_STORE_i32_4_4($9 + 824 | 0, 0, 1065353216)
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 253)) {
    break label$53
   }
   SAFE_HEAP_STORE_i32_4_4($9 + 828 | 0, 0, 1065353216);
  }
  __memcpy($9 + 5316 | 0, $9 + 5236 | 0, 80);
  $0 = 0;
  while (1) {
   $2 = $9 + ($0 << 2) | 0;
   $5 = Math_fround(-1.0);
   label$63 : {
    if (!(SAFE_HEAP_LOAD_f32_4_4($2 + 768 | 0, 0) > Math_fround(0.0))) {
     break label$63
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5236 | 0, 0);
    $5 = Math_fround(0.0);
    if ($3 < Math_fround(0.0)) {
     break label$63
    }
    $5 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($9, 24));
   }
   $3 = $5;
   SAFE_HEAP_STORE_f32_4_4($2 + 5236 | 0, 0, $3);
   $2 = $0 + 1 | 0;
   $0 = $2;
   if (($0 | 0) != 20) {
    continue
   }
   break;
  };
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 7576);
  label$64 : {
   if (!$0) {
    break label$64
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($9, 7508);
   if (!$2) {
    break label$64
   }
   SAFE_HEAP_STORE_i32_4_4($9, 7516, 0);
   SAFE_HEAP_STORE_i32_4_4($9, 7512, $0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 7564);
   SAFE_HEAP_STORE_i32_4_4((($1 << 2) + $2 | 0) + 756 | 0, 0, $0);
   $0 = ($1 << 4) + $2 | 0;
   SAFE_HEAP_STORE_i64_8_4($0 + 772 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9 + 7588 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 764 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 7580), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_1_1($9, 7568, 1);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 7574)) {
    break label$64
   }
   SAFE_HEAP_STORE_i32_1_1($9, 7571, 1);
   SAFE_HEAP_STORE_i32_2_1($9, 7569, 1);
  }
  SAFE_HEAP_STORE_i32_4_4($9, 7576, 0);
  SAFE_HEAP_STORE_i32_2_1($9, 7573, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 7540, 0);
  if (SAFE_HEAP_LOAD_i32_1_U_1($9, 7596)) {
   $12 = __stack_pointer - 32 | 0;
   __stack_pointer = $12;
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   label$1 : {
    if (SAFE_HEAP_LOAD_i32_4_4($1 + 7672 | 0, 0)) {
     $0 = $1 + 7668 | 0;
     break label$1;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 7760 | 0, 0) ? $1 + 7756 | 0 : 0;
   }
   $13 = SAFE_HEAP_LOAD_i32_4_4($1, 7600);
   $4 = $13 & 1024;
   label$31 : {
    if (!$4) {
     break label$31
    }
    label$502 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 7664) | 0) == 1) {
      break label$502
     }
     if (!SAFE_HEAP_LOAD_i32_4_4($1, 7660)) {
      break label$502
     }
     break label$31;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 7804 | 0, 0) ? $1 + 7800 | 0 : $0;
   }
   label$65 : {
    label$71 : {
     if (!$0) {
      if ($4) {
       SAFE_HEAP_STORE_i32_4_4($1, 7600, $13 | 4096)
      }
      if (!SAFE_HEAP_LOAD_i32_4_4($1, 7512)) {
       break label$65
      }
      $0 = $1;
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 7601 | 0, 0) & 16)) {
       break label$71
      }
      break label$65;
     }
     label$10 : {
      if (!($13 & 32)) {
       break label$10
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 7716 | 0, 0);
      if (!$4) {
       break label$10
      }
      $0 = (SAFE_HEAP_LOAD_i32_4_4($1, 7512) | 0) == ($4 | 0) ? $0 : $1 + 7712 | 0;
     }
     $4 = $1 + 7756 | 0;
     label$13 : {
      if (($0 | 0) == ($4 | 0)) {
       break label$13
      }
      if (!SAFE_HEAP_LOAD_i32_4_4($1 + 7760 | 0, 0)) {
       break label$13
      }
      if ((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7756), 728) | 0) != (SAFE_HEAP_LOAD_i32_4_4($1, 7508) | 0)) {
       break label$13
      }
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 7788 | 0, 0);
      $5 = SAFE_HEAP_LOAD_f32_4_4($0, 32);
      if (!($3 < $5)) {
       if ($3 != $5) {
        break label$13
       }
       if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 7792 | 0, 0) < SAFE_HEAP_LOAD_f32_4_4($0, 36))) {
        break label$13
       }
      }
      $0 = $4;
     }
     label$19 : {
      if (SAFE_HEAP_LOAD_i32_4_4($1, 7564)) {
       break label$19
      }
      if ($13 & 64) {
       $3 = Math_fround(0.0);
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 7612) | 0) == 2) {
        $3 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) + 100 | 0, 0)
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
       SAFE_HEAP_STORE_i32_4_4($4 + 124 | 0, 0, 0);
       SAFE_HEAP_STORE_i32_4_4($4 + 116 | 0, 0, 0);
       SAFE_HEAP_STORE_f32_4_4($4 + 108 | 0, 0, $3);
       break label$19;
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
      $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 20 | 0, 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
      $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 224 | 0, 0);
      $11 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
      $14 = SAFE_HEAP_LOAD_f32_4_4($4 + 228 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($12 + 28 | 0, 0, Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0)));
      SAFE_HEAP_STORE_f32_4_4($12, 24, Math_fround($3 + $6));
      SAFE_HEAP_STORE_f32_4_4($12, 20, Math_fround($14 + $5));
      SAFE_HEAP_STORE_f32_4_4($12, 16, Math_fround($3 + $11));
      ImGui__ScrollToRectEx_28ImGuiWindow__2c_20ImRect_20const__2c_20int_29($12 + 8 | 0, $4, $12 + 16 | 0, SAFE_HEAP_LOAD_i32_4_4($1, 7604));
     }
     SAFE_HEAP_STORE_i32_4_4($1, 7508, SAFE_HEAP_LOAD_i32_4_4($0, 0));
     $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7136);
     $13 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     if (($4 | 0) != ($13 | 0)) {
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $10 = SAFE_HEAP_LOAD_i32_4_4($4, 7136);
      SAFE_HEAP_STORE_i32_1_1($4, 7148, ($10 | 0) != 0);
      if ($10) {
       SAFE_HEAP_STORE_i32_4_4($4, 7192, -1);
       SAFE_HEAP_STORE_i32_2_1($4, 7151, 0);
       SAFE_HEAP_STORE_i32_4_4($4, 7144, 0);
      }
      SAFE_HEAP_STORE_i32_4_4($4, 7184, 0);
      SAFE_HEAP_STORE_i32_2_1($4, 7149, 0);
      SAFE_HEAP_STORE_i32_4_4($4, 7136, 0);
      SAFE_HEAP_STORE_i64_8_8($4, 7168, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($4, 7156, 0, 0);
      SAFE_HEAP_STORE_i32_2_1($4, 7153, 0);
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 7512) | 0) != ($13 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($1, 7540, $13);
      SAFE_HEAP_STORE_i32_4_4($1, 7544, SAFE_HEAP_LOAD_i32_4_4($0, 8));
      SAFE_HEAP_STORE_i32_4_4($1, 7548, SAFE_HEAP_LOAD_i32_4_4($1, 7608));
     }
     $16 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $10 = SAFE_HEAP_LOAD_i32_4_4($1, 7564);
     SAFE_HEAP_STORE_i32_4_4($4, 7564, $10);
     SAFE_HEAP_STORE_i32_4_4($4, 7512, $13);
     SAFE_HEAP_STORE_i32_4_4($4, 7516, $16);
     $16 = SAFE_HEAP_LOAD_i32_4_4($4, 7508);
     SAFE_HEAP_STORE_i32_4_4(($16 + ($10 << 2) | 0) + 756 | 0, 0, $13);
     $13 = $16 + ($10 << 4) | 0;
     SAFE_HEAP_STORE_i64_8_4($13 + 772 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 20 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($13 + 764 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 12), i64toi32_i32$HIGH_BITS);
     $13 = SAFE_HEAP_LOAD_i32_4_4($1, 7600);
     label$252 : {
      if (!($13 & 1024)) {
       break label$252
      }
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 29 | 0, 0) & 1)) {
       break label$252
      }
      $10 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      SAFE_HEAP_STORE_i32_4_4($1, 7600, $13 | 4096);
      SAFE_HEAP_STORE_i32_4_4($1, 7556, 5);
      SAFE_HEAP_STORE_i32_4_4($1, 7552, $10);
     }
     $13 = SAFE_HEAP_LOAD_i32_4_4($1, 7600);
     if ($13 & 2048) {
      $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      SAFE_HEAP_STORE_i32_4_4($1, 7556, 0);
      SAFE_HEAP_STORE_i32_4_4($1, 7552, $0);
     }
     $0 = $4;
     if ($13 & 4096) {
      break label$65
     }
    }
    SAFE_HEAP_STORE_i32_1_1($0, 7571, 1);
    SAFE_HEAP_STORE_i32_2_1($0, 7569, 1);
   }
   __stack_pointer = $12 + 32 | 0;
  }
  SAFE_HEAP_STORE_i32_4_4($9, 7664, 0);
  SAFE_HEAP_STORE_i32_2_2($9, 7596, 0);
  $18 = 0;
  label$66 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 7569)) {
    break label$66
   }
   $18 = 0;
   if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 7568)) {
    break label$66
   }
   $18 = 0;
   if (SAFE_HEAP_LOAD_i32_1_U_1($9, 7570)) {
    break label$66
   }
   $18 = 0;
   if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 7571)) {
    break label$66
   }
   $18 = (SAFE_HEAP_LOAD_i32_4_4($9, 7508) | 0) != 0;
  }
  SAFE_HEAP_STORE_i32_1_1($9, 7569, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($9, 7508);
  label$70 : {
   if (!$1) {
    break label$70
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($9, 7564);
   $0 = $1;
   label$713 : {
    while (1) {
     label$72 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 736) | 0) == ($0 | 0)) {
       break label$72
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 20) {
       break label$72
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
      $0 = $2;
      if ($0) {
       continue
      }
      break label$713;
     }
     break;
    };
    if (($0 | 0) == ($1 | 0)) {
     break label$713
    }
    SAFE_HEAP_STORE_i32_4_4($0, 752, $1);
   }
   if (!$1) {
    break label$70
   }
   if ($4 | !SAFE_HEAP_LOAD_i32_4_4($1, 752)) {
    break label$70
   }
   SAFE_HEAP_STORE_i32_4_4($1, 752, 0);
  }
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($10, 7468);
  while (1) {
   label$74 : {
    if (($4 | 0) <= 0) {
     $1 = 0;
     break label$74;
    }
    $0 = $2;
    $4 = $4 - 1 | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($10, 7476) + Math_imul($4, 36) | 0, 4);
    label$77 : {
     if ($2) {
      $1 = 0;
      if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 8) {
       break label$77
      }
     }
     $2 = $0;
     $1 = 1;
    }
    $0 = $1;
    $1 = $2;
    if ($0) {
     continue
    }
   }
   break;
  };
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($10, 7844, 0)
  }
  label$80 : {
   if (!SAFE_HEAP_LOAD_i32_4_4($10, 7848)) {
    break label$80
   }
   if (SAFE_HEAP_LOAD_i32_4_4($10, 7844)) {
    break label$80
   }
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 7860) + Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 24 | 0, 0) * Math_fround(-10.0)));
   $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
   SAFE_HEAP_STORE_f32_4_4($10, 7860, $3);
   if (!(SAFE_HEAP_LOAD_f32_4_4($10, 7868) <= Math_fround(0.0)) | !($3 <= Math_fround(0.0))) {
    break label$80
   }
   SAFE_HEAP_STORE_i32_4_4($10, 7848, 0);
  }
  $12 = 0;
  label$81 : {
   if ($1) {
    break label$81
   }
   $12 = 0;
   if (SAFE_HEAP_LOAD_i32_4_4($10, 7844)) {
    break label$81
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($10 + 5248 | 0, 0);
   $12 = ($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0);
  }
  label$82 : {
   if ($1) {
    $0 = 0;
    break label$82;
   }
   if (SAFE_HEAP_LOAD_i32_4_4($10, 7844)) {
    $0 = 0;
    break label$82;
   }
   $0 = 0;
   if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 252 | 0, 0)) {
    break label$82
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($10 + 52 | 0, 0);
   if (($0 | 0) < 0) {
    $0 = 0;
    break label$82;
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4(($10 + ($0 << 2) | 0) + 1140 | 0, 0);
   $0 = $3 == Math_fround(0.0);
   if ($0) {
    break label$82
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($10 + 140 | 0, 0);
   if (!($5 < $3)) {
    $0 = 0;
    break label$82;
   }
   $0 = 0;
   $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($10 + 24 | 0, 0));
   if ($6 >= $3) {
    break label$82
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($10 + 144 | 0, 0);
   if ($11 <= Math_fround(0.0)) {
    $0 = $5 > $6 & $3 >= $5;
    break label$82;
   }
   if ($5 > $6) {
    $0 = -1
   } else {
    $6 = Math_fround(Math_fround($6 - $5) / $11);
    label$89 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $0 = ~~$6;
      break label$89;
     }
     $0 = -2147483648;
    }
   }
   if ($3 < $5) {
    $1 = -1
   } else {
    $3 = Math_fround(Math_fround($3 - $5) / $11);
    label$92 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $1 = ~~$3;
      break label$92;
     }
     $1 = -2147483648;
    }
   }
   $0 = ($1 | 0) > ($0 | 0);
  }
  label$94 : {
   if (($0 | $12) != 1) {
    break label$94
   }
   $2 = $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($10, 7508);
   label$95 : {
    if ($0) {
     break label$95
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($10, 7020);
    if (($0 | 0) > 0) {
     $13 = SAFE_HEAP_LOAD_i32_4_4($10 + 7028 | 0, 0);
     while (1) {
      $1 = $0;
      $4 = $0 - 1 | 0;
      $0 = SAFE_HEAP_LOAD_i32_4_4($13 + ($4 << 2) | 0, 0);
      label$98 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
        break label$98
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 736) | 0) != ($0 | 0)) {
        break label$98
       }
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 10 | 0, 0) & 8)) {
        break label$95
       }
      }
      $0 = $4;
      if (($1 | 0) > 1) {
       continue
      }
      break;
     };
    }
    $0 = 0;
   }
   if (!$0) {
    break label$94
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 736);
   SAFE_HEAP_STORE_i32_4_4($10, 7844, $0);
   SAFE_HEAP_STORE_i32_4_4($10, 7848, $0);
   SAFE_HEAP_STORE_i32_1_1($10, 7864, $12);
   SAFE_HEAP_STORE_i64_8_8($10, 7856, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($10, 7560, $2 ? 2 : 3);
  }
  $11 = SAFE_HEAP_LOAD_f32_4_4($10 + 24 | 0, 0);
  $3 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($10, 7856));
  SAFE_HEAP_STORE_f32_4_4($10, 7856, $3);
  label$99 : {
   if (!SAFE_HEAP_LOAD_i32_4_4($10, 7844)) {
    $0 = 0;
    $2 = 0;
    break label$99;
   }
   $0 = 0;
   $2 = 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($10, 7560) | 0) != 3) {
    break label$99
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($10, 7860);
   $3 = Math_fround(Math_fround($3 + Math_fround(-.20000000298023224)) / Math_fround(.05000000074505806));
   $3 = $3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3;
   SAFE_HEAP_STORE_f32_4_4($10, 7860, $3 <= $5 ? $5 : $3);
   $3 = SAFE_HEAP_LOAD_f32_4_4($10 + 5284 | 0, 0);
   if ($3 < Math_fround(0.0)) {
    $3 = Math_fround(0.0)
   } else {
    $0 = 1;
    label$102 : {
     if ($3 == Math_fround(0.0)) {
      break label$102
     }
     $6 = Math_fround($3 - $11);
     $0 = 0;
     if ($6 >= $3) {
      break label$102
     }
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 140 | 0, 0) * Math_fround(1.25));
     $14 = SAFE_HEAP_LOAD_f32_4_4($10 + 144 | 0, 0);
     $14 = Math_fround($14 + $14);
     $0 = $5 > $6 & $3 >= $5;
     if ($14 <= Math_fround(0.0)) {
      break label$102
     }
     if ($5 > $6) {
      $0 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $14);
      label$105 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break label$105;
       }
       $0 = -2147483648;
      }
     }
     if ($3 < $5) {
      $1 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $14);
      label$108 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $1 = ~~$3;
        break label$108;
       }
       $1 = -2147483648;
      }
     }
     $0 = $1 - $0 | 0;
    }
    $3 = Math_fround($0 | 0);
   }
   $4 = $3 > Math_fround(0.0);
   $3 = SAFE_HEAP_LOAD_f32_4_4($10 + 5288 | 0, 0);
   if ($3 < Math_fround(0.0)) {
    $3 = Math_fround(0.0)
   } else {
    $0 = 1;
    label$111 : {
     if ($3 == Math_fround(0.0)) {
      break label$111
     }
     $6 = Math_fround($3 - $11);
     $0 = 0;
     if ($6 >= $3) {
      break label$111
     }
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 140 | 0, 0) * Math_fround(1.25));
     $11 = SAFE_HEAP_LOAD_f32_4_4($10 + 144 | 0, 0);
     $11 = Math_fround($11 + $11);
     $0 = $5 > $6 & $3 >= $5;
     if ($11 <= Math_fround(0.0)) {
      break label$111
     }
     if ($5 > $6) {
      $0 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $11);
      label$114 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break label$114;
       }
       $0 = -2147483648;
      }
     }
     if ($3 < $5) {
      $1 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $11);
      label$117 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $1 = ~~$3;
        break label$117;
       }
       $1 = -2147483648;
      }
     }
     $0 = $1 - $0 | 0;
    }
    $3 = Math_fround($0 | 0);
   }
   $0 = $4 - ($3 > Math_fround(0.0)) | 0;
   if ($0) {
    NavUpdateWindowingHighlightWindow_28int_29($0);
    SAFE_HEAP_STORE_i32_4_4($10, 7860, 1065353216);
   }
   $0 = 0;
   if (SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 780 | 0, 0) > Math_fround(0.0)) {
    break label$99
   }
   $0 = SAFE_HEAP_LOAD_f32_4_4($10, 7860) < Math_fround(1.0) & (SAFE_HEAP_LOAD_i32_1_U_1($10, 7864) | 0) != 0;
   SAFE_HEAP_STORE_i32_1_1($10, 7864, $0);
   label$120 : {
    if ($0) {
     $0 = (SAFE_HEAP_LOAD_i32_4_4($10, 7508) | 0) != 0;
     break label$120;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($10, 7844);
    $0 = 0;
   }
   SAFE_HEAP_STORE_i32_4_4($10, 7844, 0);
  }
  $1 = $0;
  label$122 : {
   if (!SAFE_HEAP_LOAD_i32_4_4($10, 7844)) {
    break label$122
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($10, 7560) | 0) != 2) {
    break label$122
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($10, 7860);
   $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 7856) + Math_fround(-.20000000298023224)) / Math_fround(.05000000074505806));
   $3 = $3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3;
   SAFE_HEAP_STORE_f32_4_4($10, 7860, $3 <= $5 ? $5 : $3);
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 52 | 0, 0);
   label$125 : {
    if (($0 | 0) < 0) {
     break label$125
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4(($4 + ($0 << 2) | 0) + 1140 | 0, 0);
    $0 = $3 == Math_fround(0.0);
    label$126 : {
     if ($0) {
      break label$126
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 140 | 0, 0);
     if (!($5 < $3)) {
      break label$125
     }
     $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($4 + 24 | 0, 0));
     if ($6 >= $3) {
      break label$125
     }
     $11 = SAFE_HEAP_LOAD_f32_4_4($4 + 144 | 0, 0);
     if ($11 <= Math_fround(0.0)) {
      $0 = $5 > $6 & $3 >= $5;
      break label$126;
     }
     if ($5 > $6) {
      $0 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $11);
      label$129 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break label$129;
       }
       $0 = -2147483648;
      }
     }
     if ($3 < $5) {
      $4 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $11);
      label$132 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $4 = ~~$3;
        break label$132;
       }
       $4 = -2147483648;
      }
     }
     $0 = ($4 | 0) > ($0 | 0);
    }
    if (!$0) {
     break label$125
    }
    NavUpdateWindowingHighlightWindow_28int_29(SAFE_HEAP_LOAD_i32_1_U_1($10 + 253 | 0, 0) ? 1 : -1);
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 252 | 0, 0)) {
    break label$122
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($10, 7844);
  }
  label$134 : {
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($10, 8) & 1)) {
    break label$134
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($10 + 892 | 0, 0) | 0) != 4) {
    break label$134
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 896 | 0, 0) & 4) {
    break label$134
   }
   SAFE_HEAP_STORE_i32_4_4($10, 7560, 2);
   SAFE_HEAP_STORE_i32_1_1($10, 7864, 1);
  }
  label$135 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($10, 7864)) {
    $0 = $1;
    break label$135;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($10, 7560) | 0) != 2) {
    $0 = $1;
    break label$135;
   }
   label$138 : {
    label$139 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($10 + 5404 | 0, 0) | 0) > 0) {
      break label$139
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 252 | 0, 0)) {
      break label$139
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 253 | 0, 0)) {
      break label$139
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 255 | 0, 0)) {
      break label$138
     }
    }
    SAFE_HEAP_STORE_i32_1_1($10, 7864, 0);
   }
   label$140 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 892 | 0, 0) & 4) {
     break label$140
    }
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($10 + 896 | 0, 0) & 4)) {
     break label$140
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($10, 7864)) {
     break label$140
    }
    label$144 : {
     if (!SAFE_HEAP_LOAD_i32_4_4($10, 7136)) {
      break label$144
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($10, 7149)) {
      break label$144
     }
     break label$140;
    }
    $1 = $1 | !(SAFE_HEAP_LOAD_f32_4_4($10 + 228 | 0, 0) >= Math_fround(-256.0e3) & SAFE_HEAP_LOAD_f32_4_4($10 + 232 | 0, 0) >= Math_fround(-256.0e3) ^ SAFE_HEAP_LOAD_f32_4_4($10 + 900 | 0, 0) >= Math_fround(-256.0e3) & SAFE_HEAP_LOAD_f32_4_4($10 + 904 | 0, 0) >= Math_fround(-256.0e3));
   }
   $0 = $1;
   if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 254 | 0, 0)) {
    SAFE_HEAP_STORE_i32_1_1($10, 7864, 0)
   }
  }
  $12 = $0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($10, 7844);
  label$146 : {
   if (!$1) {
    break label$146
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 8) & 4) {
    break label$146
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($10, 7560);
   label$147 : {
    if (($4 | 0) != 2) {
     $6 = Math_fround(0.0);
     $11 = Math_fround(0.0);
     break label$147;
    }
    $6 = Math_fround(0.0);
    $11 = Math_fround(0.0);
    if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 253 | 0, 0)) {
     break label$147
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $13 = SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0);
    if (($13 | 0) >= 0) {
     $3 = SAFE_HEAP_LOAD_i32_1_U_1(($0 + $13 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $3 = Math_fround(0.0)
    }
    $13 = SAFE_HEAP_LOAD_i32_4_4($0 + 56 | 0, 0);
    if (($13 | 0) >= 0) {
     $5 = SAFE_HEAP_LOAD_i32_1_U_1(($0 + $13 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $5 = Math_fround(0.0)
    }
    $3 = Math_fround($3 - $5);
    $13 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0);
    if (($13 | 0) >= 0) {
     $5 = SAFE_HEAP_LOAD_i32_1_U_1(($0 + $13 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $5 = Math_fround(0.0)
    }
    $13 = SAFE_HEAP_LOAD_i32_4_4($0 - -64 | 0, 0);
    if (($13 | 0) >= 0) {
     $6 = SAFE_HEAP_LOAD_i32_1_U_1(($0 + $13 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $6 = Math_fround(0.0)
    }
    $6 = Math_fround(Math_fround($5 - $6) + Math_fround(0.0));
    $11 = Math_fround($3 + Math_fround(0.0));
   }
   if (($4 | 0) == 3) {
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $11 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 804 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 800 | 0, 0)) + Math_fround(0.0));
    $6 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 812 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 808 | 0, 0)) + Math_fround(0.0));
   }
   if ($11 == Math_fround(0.0) & $6 == Math_fround(0.0)) {
    break label$146
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 736);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 176);
   if ($1 & 1) {
    $3 = SAFE_HEAP_LOAD_f32_4_4($10 + 172 | 0, 0);
    $5 = SAFE_HEAP_LOAD_f32_4_4($10 + 168 | 0, 0);
    $14 = SAFE_HEAP_LOAD_f32_4_4($10, 24);
    SAFE_HEAP_STORE_i64_8_4($0, 180, 2139095039, 2139095039);
    SAFE_HEAP_STORE_i32_4_4($0, 176, $1 & -15);
    $1 = $0 + 16 | 0;
    $15 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $3 = Math_fround(Math_fround($14 * Math_fround(800.0)) * ($3 > $5 ? $5 : $3));
    label$156 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $4 = ~~$3;
      break label$156;
     }
     $4 = -2147483648;
    }
    $3 = Math_fround($4 | 0);
    $5 = Math_fround($15 + Math_fround($6 * $3));
    label$158 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $4 = ~~$5;
      break label$158;
     }
     $4 = -2147483648;
    }
    $5 = Math_fround($4 | 0);
    SAFE_HEAP_STORE_f32_4_4($1, 0, $5);
    $6 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
    $3 = Math_fround($6 + Math_fround($11 * $3));
    label$160 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $1 = ~~$3;
      break label$160;
     }
     $1 = -2147483648;
    }
    $3 = Math_fround($1 | 0);
    SAFE_HEAP_STORE_f32_4_4($0, 12, $3);
    $3 = Math_fround($3 - $6);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 208) + $3));
    $1 = $0 + 212 | 0;
    $5 = Math_fround($5 - $15);
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 0) + $5));
    $1 = $0 + 232 | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
    $1 = $0 + 236 | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
    $1 = $0 + 240 | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
    $1 = $0 + 244 | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
    $1 = $0 + 224 | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
    $1 = $0 + 228 | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   }
   label$162 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 9 | 0, 0) & 1) {
     break label$162
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if (!(SAFE_HEAP_LOAD_f32_4_4($0, 12128) <= Math_fround(0.0))) {
     break label$162
    }
    SAFE_HEAP_STORE_f32_4_4($0, 12128, SAFE_HEAP_LOAD_f32_4_4($0 + 28 | 0, 0));
   }
   SAFE_HEAP_STORE_i32_1_1($10, 7571, 1);
  }
  if ($2) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($10, 7508);
   label$164 : {
    if ($0) {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 736) | 0) == ($2 | 0)) {
      break label$164
     }
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
    SAFE_HEAP_STORE_i32_1_1($0, 7148, ($1 | 0) != 0);
    if ($1) {
     SAFE_HEAP_STORE_i32_4_4($0, 7192, -1);
     SAFE_HEAP_STORE_i32_2_1($0, 7151, 0);
     SAFE_HEAP_STORE_i32_4_4($0, 7144, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7184, 0);
    SAFE_HEAP_STORE_i32_2_1($0, 7149, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7136, 0);
    SAFE_HEAP_STORE_i64_8_8($0, 7168, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 7156, 0, 0);
    SAFE_HEAP_STORE_i32_2_1($0, 7153, 0);
    SAFE_HEAP_STORE_i32_1_1($0, 7571, 1);
    SAFE_HEAP_STORE_i32_2_1($0, 7569, 1);
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 752);
    label$167 : {
     if ($1) {
      if (SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
       break label$167
      }
     }
     $1 = $2;
    }
    $16 = SAFE_HEAP_LOAD_i32_4_4($0, 7468);
    label$169 : {
     if (!$16) {
      break label$169
     }
     $4 = 0;
     label$170 : {
      if (($16 | 0) <= 0) {
       break label$170
      }
      $23 = SAFE_HEAP_LOAD_i32_4_4($0 + 7476 | 0, 0);
      $0 = 0;
      while (1) {
       $4 = $0;
       $13 = SAFE_HEAP_LOAD_i32_4_4($23 + Math_imul($0, 36) | 0, 4);
       $17 = 4;
       label$173 : {
        if (!$13) {
         break label$173
        }
        $2 = 0;
        $17 = 4;
        if (SAFE_HEAP_LOAD_i32_1_U_1($13 + 11 | 0, 0) & 1) {
         break label$173
        }
        while (1) {
         $13 = $0;
         $17 = SAFE_HEAP_LOAD_i32_4_4($23 + Math_imul($0, 36) | 0, 4);
         $0 = 1;
         label$176 : {
          if (!$17) {
           break label$176
          }
          $0 = $1;
          if ((SAFE_HEAP_LOAD_i32_4_4($0, 736) | 0) == ($17 | 0)) {
           $2 = 1;
           $0 = 0;
           break label$176;
          }
          while (1) {
           if (($0 | 0) == ($17 | 0)) {
            $2 = 1;
            $0 = ($0 | 0) != ($17 | 0);
            break label$176;
           }
           $0 = SAFE_HEAP_LOAD_i32_4_4($0, 732);
           if ($0) {
            continue
           }
           break;
          };
          $0 = 1;
         }
         if ($0) {
          $0 = $13 + 1 | 0;
          if (($16 | 0) > ($0 | 0)) {
           continue
          }
         }
         break;
        };
        $17 = $2 & 1 ? 0 : 2;
       }
       if (($17 | 0) == 2) {
        break label$170
       }
       $0 = $4 + 1 | 0;
       if (($16 | 0) != ($0 | 0)) {
        continue
       }
       break;
      };
      $4 = $16;
     }
     $0 = $4;
     if (($16 | 0) <= ($0 | 0)) {
      break label$169
     }
     ImGui__ClosePopupToLevel_28int_2c_20bool_29($0, 0);
    }
    ImGui__FocusWindow_28ImGuiWindow__29($1);
    label$183 : {
     if (SAFE_HEAP_LOAD_i32_4_4($1, 756)) {
      break label$183
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 10 | 0, 0) & 4) {
      SAFE_HEAP_STORE_i64_8_8($0, 7512, 0, 0);
      break label$183;
     }
     SAFE_HEAP_STORE_i64_8_8($0, 7512, 0, 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 7564);
     SAFE_HEAP_STORE_i32_4_4(($2 + ($4 << 2) | 0) + 756 | 0, 0, 0);
     $2 = $2 + ($4 << 4) | 0;
     SAFE_HEAP_STORE_i64_8_4($2 + 772 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($2 + 764 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($0, 7576, 0, 0);
     SAFE_HEAP_STORE_i32_1_1($0, 7574, 0);
     SAFE_HEAP_STORE_i32_2_2($0, 7572, 257);
     SAFE_HEAP_STORE_i64_8_8($0 + 7584 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($0 + 7592 | 0, 0, 0);
    }
    if ((SAFE_HEAP_LOAD_i32_2_U_2($1 + 298 | 0, 0) | 0) != 2) {
     break label$164
    }
    SAFE_HEAP_STORE_i32_4_4($10, 7564, 1);
   }
   SAFE_HEAP_STORE_i32_4_4($10, 7844, 0);
  }
  label$185 : {
   if (!$12) {
    break label$185
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($10, 7508);
   if (!$1) {
    break label$185
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
   SAFE_HEAP_STORE_i32_1_1($0, 7148, ($2 | 0) != 0);
   if ($2) {
    SAFE_HEAP_STORE_i32_4_4($0, 7192, -1);
    SAFE_HEAP_STORE_i32_2_1($0, 7151, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7144, 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 7184, 0);
   SAFE_HEAP_STORE_i32_2_1($0, 7149, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 7136, 0);
   SAFE_HEAP_STORE_i64_8_8($0, 7168, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0, 7156, 0, 0);
   SAFE_HEAP_STORE_i32_2_1($0, 7153, 0);
   $2 = $1;
   while (1) {
    label$187 : {
     $0 = $2;
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
     if (!$2) {
      break label$187
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 296 | 0, 0) & 2) {
      break label$187
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) & 352321536) == 16777216) {
      continue
     }
    }
    break;
   };
   if (($0 | 0) != ($1 | 0)) {
    ImGui__FocusWindow_28ImGuiWindow__29($0);
    SAFE_HEAP_STORE_i32_4_4($0, 752, $1);
   }
   $0 = 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($10, 7508);
   if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 296 | 0, 0) & 2) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($10, 7564) ^ 1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($10, 7564) | 0) == ($0 | 0)) {
    break label$185
   }
   if (($0 | 0) == 1) {
    SAFE_HEAP_STORE_i32_4_4($2 + 760 | 0, 0, 0)
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if (!$0) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7508);
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 752);
    label$193 : {
     if ($1) {
      if (SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
       break label$193
      }
     }
     $1 = $2;
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7508, $1);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7508);
   $1 = ($2 + ($0 << 2) | 0) + 756 | 0;
   $12 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   label$195 : {
    if ($12) {
     SAFE_HEAP_STORE_i32_4_4($4, 7564, $0);
     SAFE_HEAP_STORE_i32_4_4($4, 7512, $12);
     SAFE_HEAP_STORE_i32_4_4($4, 7516, 0);
     SAFE_HEAP_STORE_i32_4_4($1, 0, $12);
     break label$195;
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7564, $0);
    if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 10 | 0, 0) & 4) {
     SAFE_HEAP_STORE_i64_8_8($4, 7512, 0, 0);
     break label$195;
    }
    SAFE_HEAP_STORE_i64_8_8($4, 7512, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
    $0 = $2 + ($0 << 4) | 0;
    SAFE_HEAP_STORE_i64_8_4($0 + 772 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 764 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($4, 7576, 0, 0);
    SAFE_HEAP_STORE_i32_1_1($4, 7574, 0);
    SAFE_HEAP_STORE_i32_2_2($4, 7572, 257);
    SAFE_HEAP_STORE_i64_8_8($4 + 7584 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($4 + 7592 | 0, 0, 0);
   }
   SAFE_HEAP_STORE_i32_1_1($4, 7571, 1);
   SAFE_HEAP_STORE_i32_2_1($4, 7569, 1);
  }
  $1 = $9 + 854 | 0;
  label$198 : {
   label$199 : {
    label$200 : {
     $16 = $8 | $22;
     if (($16 | 0) != 1) {
      break label$200
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 7508);
     if (!$0) {
      break label$200
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8) & 262144;
     SAFE_HEAP_STORE_i32_1_1($9 + 853 | 0, 0, !$0);
     if ($0) {
      break label$199
     }
     if (!SAFE_HEAP_LOAD_i32_4_4($9, 7512)) {
      break label$199
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($9, 7570)) {
      break label$199
     }
     $0 = 1;
     break label$198;
    }
    SAFE_HEAP_STORE_i32_1_1($9 + 853 | 0, 0, 0);
   }
   $0 = (SAFE_HEAP_LOAD_i32_4_4($9, 7844) | 0) != 0;
  }
  SAFE_HEAP_STORE_i32_1_1($1, 0, $0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5240 | 0, 0);
  label$201 : {
   if (!(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0))) {
    break label$201
   }
   if (SAFE_HEAP_LOAD_i32_4_4($1, 7136)) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 7160) & 2) {
     break label$201
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7192, -1);
    SAFE_HEAP_STORE_i32_1_1($1, 7152, 0);
    SAFE_HEAP_STORE_i32_4_4($1, 7184, 0);
    SAFE_HEAP_STORE_i64_8_8($1, 7144, 0, 1);
    SAFE_HEAP_STORE_i32_4_4($1, 7136, 0);
    SAFE_HEAP_STORE_i64_8_8($1, 7168, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($1, 7156, 0, 0);
    SAFE_HEAP_STORE_i32_2_1($1, 7153, 0);
    break label$201;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7508);
   if (SAFE_HEAP_LOAD_i32_4_4($1, 7564)) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 752);
    label$204 : {
     if ($0) {
      if (SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
       break label$204
      }
     }
     $0 = $2;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7508, $0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 756);
    label$206 : {
     if ($2) {
      SAFE_HEAP_STORE_i32_4_4($1, 7564, 0);
      SAFE_HEAP_STORE_i32_4_4($1, 7512, $2);
      SAFE_HEAP_STORE_i32_4_4($1, 7516, 0);
      SAFE_HEAP_STORE_i32_4_4($0, 756, $2);
      break label$206;
     }
     SAFE_HEAP_STORE_i32_4_4($1, 7564, 0);
     if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 10 | 0, 0) & 4) {
      SAFE_HEAP_STORE_i64_8_8($1, 7512, 0, 0);
      break label$206;
     }
     SAFE_HEAP_STORE_i64_8_8($1, 7512, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($0, 764, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($0, 756, 0);
     SAFE_HEAP_STORE_i64_8_4($0 + 772 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($1, 7576, 0, 0);
     SAFE_HEAP_STORE_i32_1_1($1, 7574, 0);
     SAFE_HEAP_STORE_i32_2_2($1, 7572, 257);
     SAFE_HEAP_STORE_i64_8_8($1 + 7584 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($1 + 7592 | 0, 0, 0);
    }
    SAFE_HEAP_STORE_i32_1_1($1, 7571, 1);
    SAFE_HEAP_STORE_i32_2_1($1, 7569, 1);
    break label$201;
   }
   label$209 : {
    if (!$2) {
     break label$209
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 736) | 0) == ($2 | 0)) {
     break label$209
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 4) {
     break label$209
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 728);
    if (!$0) {
     break label$209
    }
    $14 = SAFE_HEAP_LOAD_f32_4_4($2 + 24 | 0, 0);
    $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 16 | 0, 0);
    $15 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
    $5 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
    ImGui__FocusWindow_28ImGuiWindow__29($0);
    $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 224 | 0, 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 228 | 0, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 84);
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    SAFE_HEAP_STORE_i32_4_4($0, 7564, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7512, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 7516, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
    SAFE_HEAP_STORE_f32_4_4($2 + 776 | 0, 0, Math_fround(Math_fround($3 + $14) - $11));
    SAFE_HEAP_STORE_f32_4_4($2 + 772 | 0, 0, Math_fround(Math_fround($5 + $15) - $6));
    SAFE_HEAP_STORE_f32_4_4($2 + 768 | 0, 0, Math_fround($3 - $11));
    SAFE_HEAP_STORE_f32_4_4($2, 764, Math_fround($5 - $6));
    SAFE_HEAP_STORE_i32_4_4($2, 756, $1);
    SAFE_HEAP_STORE_i32_1_1($0, 7571, 1);
    SAFE_HEAP_STORE_i32_2_1($0, 7569, 1);
    break label$201;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7468);
   if (($0 | 0) > 0) {
    $0 = $0 - 1 | 0;
    if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 7476 | 0, 0) + Math_imul($0, 36) | 0, 4) + 11 | 0, 0) & 8) {
     break label$201
    }
    ImGui__ClosePopupToLevel_28int_2c_20bool_29($0, 1);
    break label$201;
   }
   label$211 : {
    if (!$2) {
     break label$211
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 8) & 83886080) == 16777216) {
     break label$211
    }
    SAFE_HEAP_STORE_i32_4_4($2, 756, 0);
   }
   SAFE_HEAP_STORE_i64_8_8($1, 7512, 0, 0);
  }
  SAFE_HEAP_STORE_i64_8_8($9, 7520, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($9 + 7536 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($9 + 7528 | 0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($9, 7512);
  label$212 : {
   if (!$2) {
    break label$212
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($9, 7570)) {
    break label$212
   }
   if (SAFE_HEAP_LOAD_i32_4_4($9, 7844)) {
    break label$212
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($9, 7508);
   if (!$0) {
    break label$212
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 10 | 0, 0) & 4) {
    break label$212
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 776 | 0, 0);
   $4 = 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 768 | 0, 0);
   if ($3 > Math_fround(0.0)) {
    $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 5236 | 0, 0);
    $4 = ($6 < Math_fround(0.0) ? Math_fround(0.0) : $6 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0);
   }
   $0 = 0;
   if ($5 > Math_fround(0.0)) {
    $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 5244 | 0, 0);
    $0 = ($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0);
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 7136);
   if (!($4 ^ 1 | ($1 | 0) != 0)) {
    SAFE_HEAP_STORE_i32_4_4($9, 7536, 2);
    SAFE_HEAP_STORE_i32_4_4($9, 7520, $2);
   }
   label$216 : {
    label$217 : {
     if ($1) {
      if (($1 | 0) == ($2 | 0) & $0) {
       break label$217
      }
      break label$216;
     }
     if (!$0) {
      break label$216
     }
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7536, 1);
    SAFE_HEAP_STORE_i32_4_4($9, 7532, $2);
   }
   label$219 : {
    label$220 : {
     if ($1) {
      if (!($3 > Math_fround(0.0))) {
       break label$219
      }
      if (($1 | 0) == ($2 | 0)) {
       break label$220
      }
      break label$219;
     }
     if (!($3 > Math_fround(0.0))) {
      break label$219
     }
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7524, $2);
   }
   label$222 : {
    if ($1) {
     if (($1 | 0) == ($2 | 0) & $4) {
      break label$222
     }
     break label$212;
    }
    if (!$4) {
     break label$212
    }
   }
   SAFE_HEAP_STORE_i32_4_4($9, 7528, $2);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 7508);
  label$224 : {
   if (!$0) {
    break label$224
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 10 | 0, 0) & 4)) {
    break label$224
   }
   SAFE_HEAP_STORE_i32_1_1($9, 7570, 1);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 7552);
  if ($0) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($9, 7556);
   label$226 : {
    if ($2 & 1) {
     SAFE_HEAP_STORE_i32_4_4($9, 7532, $0);
     break label$226;
    }
    SAFE_HEAP_STORE_i32_4_4($9, 7524, $0);
    SAFE_HEAP_STORE_i32_4_4($9, 7528, $0);
    SAFE_HEAP_STORE_i32_4_4($9, 7520, $0);
   }
   SAFE_HEAP_STORE_i32_4_4($9, 7536, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($9, 7552, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7508);
  if (!(wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($1, 7598), wasm2js_i32$2 = 0, wasm2js_i32$1 = $2, wasm2js_i32$1 ? wasm2js_i32$0 : wasm2js_i32$2)) {
   SAFE_HEAP_STORE_i64_8_8($1, 7600, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 7612, -1);
   label$230 : {
    if (!$2) {
     break label$230
    }
    if (SAFE_HEAP_LOAD_i32_4_4($1, 7844)) {
     break label$230
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 10 | 0, 0) & 4) {
     break label$230
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7156);
    label$231 : {
     if ($0 & 1) {
      break label$231
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5252 | 0, 0);
     if ($3 < Math_fround(0.0)) {
      $3 = Math_fround(0.0)
     } else {
      $4 = 1;
      label$233 : {
       if ($3 == Math_fround(0.0)) {
        break label$233
       }
       $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
       $4 = 0;
       if ($6 >= $3) {
        break label$233
       }
       $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
       $4 = $5 > $6 & $3 >= $5;
       if ($11 <= Math_fround(0.0)) {
        break label$233
       }
       if ($5 > $6) {
        $4 = -1
       } else {
        $6 = Math_fround(Math_fround($6 - $5) / $11);
        label$236 : {
         if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
          $4 = ~~$6;
          break label$236;
         }
         $4 = -2147483648;
        }
       }
       if ($3 < $5) {
        $8 = -1
       } else {
        $3 = Math_fround(Math_fround($3 - $5) / $11);
        label$239 : {
         if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
          $8 = ~~$3;
          break label$239;
         }
         $8 = -2147483648;
        }
       }
       $4 = $8 - $4 | 0;
      }
      $3 = Math_fround($4 | 0);
     }
     if (!($3 > Math_fround(0.0))) {
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5300 | 0, 0);
      if ($3 < Math_fround(0.0)) {
       $3 = Math_fround(0.0)
      } else {
       $4 = 1;
       label$243 : {
        if ($3 == Math_fround(0.0)) {
         break label$243
        }
        $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
        $4 = 0;
        if ($6 >= $3) {
         break label$243
        }
        $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
        $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
        $4 = $5 > $6 & $3 >= $5;
        if ($11 <= Math_fround(0.0)) {
         break label$243
        }
        if ($5 > $6) {
         $4 = -1
        } else {
         $6 = Math_fround(Math_fround($6 - $5) / $11);
         label$246 : {
          if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
           $4 = ~~$6;
           break label$246;
          }
          $4 = -2147483648;
         }
        }
        if ($3 < $5) {
         $8 = -1
        } else {
         $3 = Math_fround(Math_fround($3 - $5) / $11);
         label$249 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $8 = ~~$3;
           break label$249;
          }
          $8 = -2147483648;
         }
        }
        $4 = $8 - $4 | 0;
       }
       $3 = Math_fround($4 | 0);
      }
      if (!($3 > Math_fround(0.0))) {
       break label$231
      }
     }
     SAFE_HEAP_STORE_i32_4_4($1, 7612, 0);
    }
    label$251 : {
     if ($0 & 2) {
      break label$251
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5256 | 0, 0);
     if ($3 < Math_fround(0.0)) {
      $3 = Math_fround(0.0)
     } else {
      $4 = 1;
      label$253 : {
       if ($3 == Math_fround(0.0)) {
        break label$253
       }
       $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
       $4 = 0;
       if ($6 >= $3) {
        break label$253
       }
       $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
       $4 = $5 > $6 & $3 >= $5;
       if ($11 <= Math_fround(0.0)) {
        break label$253
       }
       if ($5 > $6) {
        $4 = -1
       } else {
        $6 = Math_fround(Math_fround($6 - $5) / $11);
        label$256 : {
         if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
          $4 = ~~$6;
          break label$256;
         }
         $4 = -2147483648;
        }
       }
       if ($3 < $5) {
        $8 = -1
       } else {
        $3 = Math_fround(Math_fround($3 - $5) / $11);
        label$259 : {
         if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
          $8 = ~~$3;
          break label$259;
         }
         $8 = -2147483648;
        }
       }
       $4 = $8 - $4 | 0;
      }
      $3 = Math_fround($4 | 0);
     }
     if (!($3 > Math_fround(0.0))) {
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5304 | 0, 0);
      if ($3 < Math_fround(0.0)) {
       $3 = Math_fround(0.0)
      } else {
       $4 = 1;
       label$263 : {
        if ($3 == Math_fround(0.0)) {
         break label$263
        }
        $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
        $4 = 0;
        if ($6 >= $3) {
         break label$263
        }
        $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
        $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
        $4 = $5 > $6 & $3 >= $5;
        if ($11 <= Math_fround(0.0)) {
         break label$263
        }
        if ($5 > $6) {
         $4 = -1
        } else {
         $6 = Math_fround(Math_fround($6 - $5) / $11);
         label$266 : {
          if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
           $4 = ~~$6;
           break label$266;
          }
          $4 = -2147483648;
         }
        }
        if ($3 < $5) {
         $8 = -1
        } else {
         $3 = Math_fround(Math_fround($3 - $5) / $11);
         label$269 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $8 = ~~$3;
           break label$269;
          }
          $8 = -2147483648;
         }
        }
        $4 = $8 - $4 | 0;
       }
       $3 = Math_fround($4 | 0);
      }
      if (!($3 > Math_fround(0.0))) {
       break label$251
      }
     }
     SAFE_HEAP_STORE_i32_4_4($1, 7612, 1);
    }
    label$271 : {
     if ($0 & 4) {
      break label$271
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5260 | 0, 0);
     if ($3 < Math_fround(0.0)) {
      $3 = Math_fround(0.0)
     } else {
      $4 = 1;
      label$273 : {
       if ($3 == Math_fround(0.0)) {
        break label$273
       }
       $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
       $4 = 0;
       if ($6 >= $3) {
        break label$273
       }
       $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
       $4 = $5 > $6 & $3 >= $5;
       if ($11 <= Math_fround(0.0)) {
        break label$273
       }
       if ($5 > $6) {
        $4 = -1
       } else {
        $6 = Math_fround(Math_fround($6 - $5) / $11);
        label$276 : {
         if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
          $4 = ~~$6;
          break label$276;
         }
         $4 = -2147483648;
        }
       }
       if ($3 < $5) {
        $8 = -1
       } else {
        $3 = Math_fround(Math_fround($3 - $5) / $11);
        label$279 : {
         if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
          $8 = ~~$3;
          break label$279;
         }
         $8 = -2147483648;
        }
       }
       $4 = $8 - $4 | 0;
      }
      $3 = Math_fround($4 | 0);
     }
     if (!($3 > Math_fround(0.0))) {
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5308 | 0, 0);
      if ($3 < Math_fround(0.0)) {
       $3 = Math_fround(0.0)
      } else {
       $4 = 1;
       label$283 : {
        if ($3 == Math_fround(0.0)) {
         break label$283
        }
        $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
        $4 = 0;
        if ($6 >= $3) {
         break label$283
        }
        $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
        $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
        $4 = $5 > $6 & $3 >= $5;
        if ($11 <= Math_fround(0.0)) {
         break label$283
        }
        if ($5 > $6) {
         $4 = -1
        } else {
         $6 = Math_fround(Math_fround($6 - $5) / $11);
         label$286 : {
          if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
           $4 = ~~$6;
           break label$286;
          }
          $4 = -2147483648;
         }
        }
        if ($3 < $5) {
         $8 = -1
        } else {
         $3 = Math_fround(Math_fround($3 - $5) / $11);
         label$289 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $8 = ~~$3;
           break label$289;
          }
          $8 = -2147483648;
         }
        }
        $4 = $8 - $4 | 0;
       }
       $3 = Math_fround($4 | 0);
      }
      if (!($3 > Math_fround(0.0))) {
       break label$271
      }
     }
     SAFE_HEAP_STORE_i32_4_4($1, 7612, 2);
    }
    if ($0 & 8) {
     break label$230
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5264 | 0, 0);
    if ($3 < Math_fround(0.0)) {
     $3 = Math_fround(0.0)
    } else {
     $0 = 1;
     label$292 : {
      if ($3 == Math_fround(0.0)) {
       break label$292
      }
      $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
      $0 = 0;
      if ($6 >= $3) {
       break label$292
      }
      $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
      $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
      $0 = $5 > $6 & $3 >= $5;
      if ($11 <= Math_fround(0.0)) {
       break label$292
      }
      if ($5 > $6) {
       $0 = -1
      } else {
       $6 = Math_fround(Math_fround($6 - $5) / $11);
       label$295 : {
        if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
         $0 = ~~$6;
         break label$295;
        }
        $0 = -2147483648;
       }
      }
      if ($3 < $5) {
       $4 = -1
      } else {
       $3 = Math_fround(Math_fround($3 - $5) / $11);
       label$298 : {
        if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
         $4 = ~~$3;
         break label$298;
        }
        $4 = -2147483648;
       }
      }
      $0 = $4 - $0 | 0;
     }
     $3 = Math_fround($0 | 0);
    }
    if (!($3 > Math_fround(0.0))) {
     $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5312 | 0, 0);
     if ($3 < Math_fround(0.0)) {
      $3 = Math_fround(0.0)
     } else {
      $0 = 1;
      label$302 : {
       if ($3 == Math_fround(0.0)) {
        break label$302
       }
       $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
       $0 = 0;
       if ($6 >= $3) {
        break label$302
       }
       $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0) * Math_fround(.7200000286102295));
       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0) * Math_fround(.800000011920929));
       $0 = $5 > $6 & $3 >= $5;
       if ($11 <= Math_fround(0.0)) {
        break label$302
       }
       if ($5 > $6) {
        $0 = -1
       } else {
        $6 = Math_fround(Math_fround($6 - $5) / $11);
        label$305 : {
         if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
          $0 = ~~$6;
          break label$305;
         }
         $0 = -2147483648;
        }
       }
       if ($3 < $5) {
        $4 = -1
       } else {
        $3 = Math_fround(Math_fround($3 - $5) / $11);
        label$308 : {
         if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
          $4 = ~~$3;
          break label$308;
         }
         $4 = -2147483648;
        }
       }
       $0 = $4 - $0 | 0;
      }
      $3 = Math_fround($0 | 0);
     }
     if (!($3 > Math_fround(0.0))) {
      break label$230
     }
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7612, 3);
   }
   SAFE_HEAP_STORE_i64_8_8($1, 7640, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i64_8_8($1 + 7648 | 0, 0, -8388609, -8388609);
   SAFE_HEAP_STORE_i32_4_4($1, 7620, SAFE_HEAP_LOAD_i32_4_4($1, 7612));
  }
  $11 = Math_fround(0.0);
  label$310 : {
   if (!$2) {
    break label$310
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 7612) | 0) != -1) {
    break label$310
   }
   if (!(SAFE_HEAP_LOAD_i32_4_4($1, 8) & 1)) {
    break label$310
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 10 | 0, 0) & 4) {
    break label$310
   }
   if (SAFE_HEAP_LOAD_i32_4_4($1, 7844)) {
    break label$310
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 72 | 0, 0);
   $4 = 0;
   label$311 : {
    if (($0 | 0) < 0) {
     break label$311
    }
    $4 = 0;
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $1 | 0) + 256 | 0, 0)) {
     break label$311
    }
    $4 = !(SAFE_HEAP_LOAD_i32_1_U_1($1, 7168) & 32);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 76 | 0, 0);
   $13 = 0;
   label$312 : {
    if (($0 | 0) < 0) {
     break label$312
    }
    $13 = 0;
    if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $1 | 0) + 256 | 0, 0)) {
     break label$312
    }
    $13 = !(SAFE_HEAP_LOAD_i32_1_U_1($1, 7168) & 64);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 80 | 0, 0);
   $8 = 0;
   label$314 : {
    if (($0 | 0) < 0) {
     break label$314
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4(($1 + ($0 << 2) | 0) + 1140 | 0, 0);
    $0 = $3 == Math_fround(0.0);
    label$315 : {
     if ($0) {
      break label$315
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0);
     $8 = 0;
     if (!($5 < $3)) {
      break label$314
     }
     $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
     $8 = 0;
     if ($6 >= $3) {
      break label$314
     }
     $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0);
     if ($14 <= Math_fround(0.0)) {
      $0 = $5 > $6 & $3 >= $5;
      break label$315;
     }
     if ($5 > $6) {
      $0 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $14);
      label$318 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break label$318;
       }
       $0 = -2147483648;
      }
     }
     if ($3 < $5) {
      $8 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $14);
      label$321 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $8 = ~~$3;
        break label$321;
       }
       $8 = -2147483648;
      }
     }
     $0 = ($8 | 0) > ($0 | 0);
    }
    $8 = 0;
    if (!$0) {
     break label$314
    }
    $8 = !(SAFE_HEAP_LOAD_i32_1_U_1($1, 7168) & 128);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 84 | 0, 0);
   $12 = 0;
   label$323 : {
    if (($0 | 0) < 0) {
     break label$323
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4(($1 + ($0 << 2) | 0) + 1140 | 0, 0);
    $0 = $3 == Math_fround(0.0);
    label$325 : {
     if ($0) {
      break label$325
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0);
     $12 = 0;
     if (!($5 < $3)) {
      break label$323
     }
     $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
     $12 = 0;
     if ($3 <= $6) {
      break label$323
     }
     $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0);
     if ($14 <= Math_fround(0.0)) {
      $0 = $5 > $6 & $3 >= $5;
      break label$325;
     }
     if ($5 > $6) {
      $0 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $14);
      label$330 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break label$330;
       }
       $0 = -2147483648;
      }
     }
     if ($3 < $5) {
      $12 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $14);
      label$333 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $12 = ~~$3;
        break label$333;
       }
       $12 = -2147483648;
      }
     }
     $0 = ($12 | 0) > ($0 | 0);
    }
    $12 = 0;
    if (!$0) {
     break label$323
    }
    $12 = !(SAFE_HEAP_LOAD_i32_1_U_1($1 + 7169 | 0, 0) & 1);
   }
   if (!($8 ^ $12) & ($4 | 0) == ($13 | 0)) {
    break label$310
   }
   label$336 : {
    if (!SAFE_HEAP_LOAD_i32_4_4($1, 7564)) {
     break label$336
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 752);
    label$337 : {
     if ($0) {
      if (SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
       break label$337
      }
     }
     $0 = $2;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7508, $0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 756);
    if ($4) {
     SAFE_HEAP_STORE_i32_4_4($1, 7564, 0);
     SAFE_HEAP_STORE_i32_4_4($1, 7512, $4);
     SAFE_HEAP_STORE_i32_4_4($1, 7516, 0);
     SAFE_HEAP_STORE_i32_4_4($0, 756, $4);
     break label$336;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7564, 0);
    if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 10 | 0, 0) & 4) {
     SAFE_HEAP_STORE_i64_8_8($1, 7512, 0, 0);
     break label$336;
    }
    SAFE_HEAP_STORE_i64_8_8($1, 7512, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 764, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 756, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 772 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($1, 7576, 0, 0);
    SAFE_HEAP_STORE_i32_1_1($1, 7574, 0);
    SAFE_HEAP_STORE_i32_2_2($1, 7572, 257);
    SAFE_HEAP_STORE_i64_8_8($1 + 7584 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($1 + 7592 | 0, 0, 0);
   }
   label$341 : {
    if (SAFE_HEAP_LOAD_i32_2_U_2($2 + 296 | 0, 0)) {
     break label$341
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($2 + 305 | 0, 0)) {
     break label$341
    }
    label$342 : {
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 72);
     if (($0 | 0) < 0) {
      break label$342
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4(($1 + ($0 << 2) | 0) + 1140 | 0, 0);
     $0 = $3 == Math_fround(0.0);
     label$343 : {
      if ($0) {
       break label$343
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0);
      if (!($5 < $3)) {
       break label$342
      }
      $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
      if ($6 >= $3) {
       break label$342
      }
      $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0);
      if ($14 <= Math_fround(0.0)) {
       $0 = $5 > $6 & $3 >= $5;
       break label$343;
      }
      if ($5 > $6) {
       $0 = -1
      } else {
       $6 = Math_fround(Math_fround($6 - $5) / $14);
       label$346 : {
        if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
         $0 = ~~$6;
         break label$346;
        }
        $0 = -2147483648;
       }
      }
      if ($3 < $5) {
       $4 = -1
      } else {
       $3 = Math_fround(Math_fround($3 - $5) / $14);
       label$349 : {
        if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
         $4 = ~~$3;
         break label$349;
        }
        $4 = -2147483648;
       }
      }
      $0 = ($4 | 0) > ($0 | 0);
     }
     if (!$0) {
      break label$342
     }
     SAFE_HEAP_STORE_i32_4_4($2 + 124 | 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($2 + 116 | 0, 0, 0);
     SAFE_HEAP_STORE_f32_4_4($2 + 108 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 92 | 0, 0) - Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 444 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($2 + 436 | 0, 0))));
     break label$310;
    }
    label$351 : {
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 76);
     if (($0 | 0) < 0) {
      break label$351
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4(($1 + ($0 << 2) | 0) + 1140 | 0, 0);
     $0 = $3 == Math_fround(0.0);
     label$352 : {
      if ($0) {
       break label$352
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0);
      if (!($5 < $3)) {
       break label$351
      }
      $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
      if ($6 >= $3) {
       break label$351
      }
      $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0);
      if ($14 <= Math_fround(0.0)) {
       $0 = $5 > $6 & $3 >= $5;
       break label$352;
      }
      if ($5 > $6) {
       $0 = -1
      } else {
       $6 = Math_fround(Math_fround($6 - $5) / $14);
       label$355 : {
        if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
         $0 = ~~$6;
         break label$355;
        }
        $0 = -2147483648;
       }
      }
      if ($3 < $5) {
       $4 = -1
      } else {
       $3 = Math_fround(Math_fround($3 - $5) / $14);
       label$358 : {
        if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
         $4 = ~~$3;
         break label$358;
        }
        $4 = -2147483648;
       }
      }
      $0 = ($4 | 0) > ($0 | 0);
     }
     if (!$0) {
      break label$351
     }
     SAFE_HEAP_STORE_i32_4_4($2 + 124 | 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($2 + 116 | 0, 0, 0);
     SAFE_HEAP_STORE_f32_4_4($2 + 108 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 92 | 0, 0) + Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 444 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($2 + 436 | 0, 0))));
     break label$310;
    }
    if ($8) {
     SAFE_HEAP_STORE_i32_4_4($2 + 124 | 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($2 + 116 | 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($2 + 108 | 0, 0, 0);
     break label$310;
    }
    if (!$12) {
     break label$310
    }
    SAFE_HEAP_STORE_i32_4_4($2 + 124 | 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($2 + 116 | 0, 0, 0);
    SAFE_HEAP_STORE_f32_4_4($2 + 108 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2 + 100 | 0, 0));
    break label$310;
   }
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 444 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($2 + 436 | 0, 0));
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 6472) * SAFE_HEAP_LOAD_f32_4_4($2, 572));
   $13 = SAFE_HEAP_LOAD_i32_4_4($1, 7564);
   $0 = $2 + ($13 << 4) | 0;
   $4 = $0 + 764 | 0;
   $10 = SAFE_HEAP_LOAD_i32_4_4($2, 728);
   if ($10) {
    $3 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($10, 572))
   }
   $10 = $0 + 776 | 0;
   $3 = Math_fround(Math_fround($5 - $3) + Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 0) - SAFE_HEAP_LOAD_f32_4_4($4, 4)));
   $11 = $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3;
   label$363 : {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 72);
    if (($0 | 0) < 0) {
     break label$363
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4(($1 + ($0 << 2) | 0) + 1140 | 0, 0);
    $0 = $3 == Math_fround(0.0);
    label$364 : {
     if ($0) {
      break label$364
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0);
     if (!($5 < $3)) {
      break label$363
     }
     $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
     if ($6 >= $3) {
      break label$363
     }
     $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0);
     if ($14 <= Math_fround(0.0)) {
      $0 = $5 > $6 & $3 >= $5;
      break label$364;
     }
     if ($5 > $6) {
      $0 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $14);
      label$367 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break label$367;
       }
       $0 = -2147483648;
      }
     }
     if ($3 < $5) {
      $17 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $14);
      label$370 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $17 = ~~$3;
        break label$370;
       }
       $17 = -2147483648;
      }
     }
     $0 = ($17 | 0) > ($0 | 0);
    }
    if (!$0) {
     break label$363
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7620, 2);
    SAFE_HEAP_STORE_i32_4_4($1, 7612, 3);
    SAFE_HEAP_STORE_i32_4_4($1, 7600, 48);
    $11 = Math_fround(-$11);
    break label$310;
   }
   label$372 : {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 76);
    if (($0 | 0) < 0) {
     break label$372
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4(($1 + ($0 << 2) | 0) + 1140 | 0, 0);
    $0 = $3 == Math_fround(0.0);
    label$373 : {
     if ($0) {
      break label$373
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 140 | 0, 0);
     if (!($5 < $3)) {
      break label$372
     }
     $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0));
     if ($6 >= $3) {
      break label$372
     }
     $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 144 | 0, 0);
     if ($14 <= Math_fround(0.0)) {
      $0 = $5 > $6 & $3 >= $5;
      break label$373;
     }
     if ($5 > $6) {
      $0 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $14);
      label$376 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $0 = ~~$6;
        break label$376;
       }
       $0 = -2147483648;
      }
     }
     if ($3 < $5) {
      $17 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $14);
      label$379 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $17 = ~~$3;
        break label$379;
       }
       $17 = -2147483648;
      }
     }
     $0 = ($17 | 0) > ($0 | 0);
    }
    if (!$0) {
     break label$372
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7620, 3);
    SAFE_HEAP_STORE_i32_4_4($1, 7612, 2);
    SAFE_HEAP_STORE_i32_4_4($1, 7600, 48);
    break label$310;
   }
   if ($8) {
    SAFE_HEAP_STORE_i32_4_4($10, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($4, 4, 0);
    $0 = ($2 + ($13 << 4) | 0) + 772 | 0;
    if (SAFE_HEAP_LOAD_f32_4_4($4, 0) > SAFE_HEAP_LOAD_f32_4_4($0, 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7600, 80);
    SAFE_HEAP_STORE_i32_4_4($1, 7612, 3);
    $11 = Math_fround(0.0);
    break label$310;
   }
   if ($12) {
    $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 40 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($10, 0, $3);
    SAFE_HEAP_STORE_f32_4_4($4, 4, $3);
    $0 = ($2 + ($13 << 4) | 0) + 772 | 0;
    if (SAFE_HEAP_LOAD_f32_4_4($4, 0) > SAFE_HEAP_LOAD_f32_4_4($0, 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7600, 80);
    SAFE_HEAP_STORE_i32_4_4($1, 7612, 2);
   }
   $11 = Math_fround(0.0);
  }
  if ($11 != Math_fround(0.0)) {
   SAFE_HEAP_STORE_i64_8_4($1, 7640, SAFE_HEAP_LOAD_i64_8_4($2, 432), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1 + 7648 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 440 | 0, 0), i64toi32_i32$HIGH_BITS);
   $0 = $1 + 7644 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
   $0 = $1 + 7652 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
  }
  SAFE_HEAP_STORE_i32_1_1($1, 7598, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7612);
  if (($0 | 0) != -1) {
   SAFE_HEAP_STORE_i32_4_4($1, 7616, $0);
   SAFE_HEAP_STORE_i32_2_2($1, 7596, 257);
   SAFE_HEAP_STORE_i32_1_1($1, 7598, 0);
   SAFE_HEAP_STORE_i64_8_8($1, 7664, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($1, 7712, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 7756, 0);
   SAFE_HEAP_STORE_i32_4_4($1 + 7696 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($1 + 7672 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1 + 7708 | 0, 0, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($1 + 7720 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($1 + 7700 | 0, 0, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i64_8_4($1 + 7740 | 0, 0, 0, 2139095039);
   SAFE_HEAP_STORE_i64_8_4($1 + 7748 | 0, 0, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($1 + 7764 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 7608, SAFE_HEAP_LOAD_i32_4_4($1 + 892 | 0, 0));
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7600);
   SAFE_HEAP_STORE_i32_4_4($1, 7600, $0 >>> 6 & 16 | $0);
   SAFE_HEAP_STORE_i32_4_4($1 + 7760 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($1 + 7792 | 0, 0, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i64_8_4($1 + 7784 | 0, 0, 0, 2139095039);
   SAFE_HEAP_STORE_i32_1_1($1, 7572, 1);
  }
  label$387 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7596)) {
    break label$387
   }
   if (!SAFE_HEAP_LOAD_i32_4_4($1, 7512)) {
    SAFE_HEAP_STORE_i32_4_4($1, 7576, 0);
    SAFE_HEAP_STORE_i32_2_1($1, 7573, 257);
    SAFE_HEAP_STORE_i32_1_1($1, 7570, 0);
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 7560) | 0) != 3) {
    break label$387
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7564);
   if ($4 | !$2) {
    break label$387
   }
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 444 | 0, 0) + Math_fround(1.0));
   $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 228 | 0, 0);
   $3 = Math_fround($3 - $6);
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 440 | 0, 0) + Math_fround(1.0));
   $15 = SAFE_HEAP_LOAD_f32_4_4($2 + 224 | 0, 0);
   $5 = Math_fround($5 - $15);
   $6 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 436 | 0, 0) + Math_fround(-1.0)) - $6);
   $0 = ($2 + ($4 << 4) | 0) + 764 | 0;
   $14 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $19 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 432) + Math_fround(-1.0)) - $15);
   label$389 : {
    if (!($14 >= $19)) {
     break label$389
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($0, 4) >= $6)) {
     break label$389
    }
    $8 = $2 + ($4 << 4) | 0;
    if (!(SAFE_HEAP_LOAD_f32_4_4($8 + 772 | 0, 0) <= $5)) {
     break label$389
    }
    if (SAFE_HEAP_LOAD_f32_4_4($8 + 776 | 0, 0) <= $3) {
     break label$387
    }
   }
   $15 = Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6472) * SAFE_HEAP_LOAD_f32_4_4($2, 572));
   $26 = $6;
   $20 = Math_fround($3 - $6);
   $8 = SAFE_HEAP_LOAD_i32_4_4($2, 728);
   if ($8) {
    $15 = Math_fround($15 * SAFE_HEAP_LOAD_f32_4_4($8, 572))
   }
   $6 = Math_fround($15 * Math_fround(.5));
   $20 = $6 > $20 ? $20 : $6;
   $15 = Math_fround($26 + $20);
   $3 = Math_fround($3 - $20);
   $20 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   SAFE_HEAP_STORE_f32_4_4($0, 4, $15 > $20 ? $15 : $3 < $20 ? $3 : $20);
   $20 = $19;
   $19 = Math_fround($5 - $19);
   $19 = $6 > $19 ? $19 : $6;
   $6 = Math_fround($20 + $19);
   $5 = Math_fround($5 - $19);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $6 > $14 ? $6 : $5 < $14 ? $5 : $14);
   $0 = $2 + ($4 << 4) | 0;
   $4 = $0 + 776 | 0;
   $14 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   SAFE_HEAP_STORE_f32_4_4($4, 0, $14 < $15 ? $15 : $3 < $14 ? $3 : $14);
   $0 = $0 + 772 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $3 < $6 ? $6 : $3 > $5 ? $5 : $3);
   SAFE_HEAP_STORE_i64_8_8($1, 7512, 0, 0);
  }
  label$392 : {
   if (!$2) {
    $6 = Math_fround(0.0);
    $5 = Math_fround(0.0);
    $3 = Math_fround(0.0);
    break label$392;
   }
   $0 = $2 + (SAFE_HEAP_LOAD_i32_4_4($1, 7564) << 4) | 0;
   $4 = $0 + 764 | 0;
   $5 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   label$394 : {
    if (SAFE_HEAP_LOAD_f32_4_4($0 + 772 | 0, 0) < $5) {
     $14 = Math_fround(0.0);
     $6 = Math_fround(0.0);
     $3 = Math_fround(0.0);
     $15 = Math_fround(0.0);
     break label$394;
    }
    $14 = Math_fround(0.0);
    $6 = Math_fround(0.0);
    $3 = Math_fround(0.0);
    $15 = Math_fround(0.0);
    if (SAFE_HEAP_LOAD_f32_4_4($0 + 768 | 0, 0) > SAFE_HEAP_LOAD_f32_4_4($0 + 776 | 0, 0)) {
     break label$394
    }
    $14 = SAFE_HEAP_LOAD_f32_4_4($4, 12);
    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
    $3 = $5;
    $15 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
   }
   $5 = $15;
   $15 = $3;
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 224 | 0, 0);
   $15 = Math_fround(Math_fround($15 + $3) + Math_fround(1.0));
   $3 = Math_fround($6 + $3);
   $6 = $3 > $15 ? $15 : $3;
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 228 | 0, 0);
   $5 = Math_fround($11 + Math_fround($5 + $3));
   $3 = Math_fround($11 + Math_fround($14 + $3));
  }
  SAFE_HEAP_STORE_f32_4_4($1, 7624, $6);
  SAFE_HEAP_STORE_f32_4_4($1 + 7636 | 0, 0, $3);
  SAFE_HEAP_STORE_f32_4_4($1 + 7632 | 0, 0, $6);
  SAFE_HEAP_STORE_f32_4_4($1 + 7628 | 0, 0, $5);
  if (SAFE_HEAP_LOAD_f32_4_4($1, 7640) > $6) {
   SAFE_HEAP_STORE_f32_4_4($1, 7640, $6)
  }
  if (SAFE_HEAP_LOAD_f32_4_4($1 + 7644 | 0, 0) > $5) {
   SAFE_HEAP_STORE_f32_4_4($1, 7644, $5)
  }
  if (SAFE_HEAP_LOAD_f32_4_4($1 + 7648 | 0, 0) < $6) {
   SAFE_HEAP_STORE_f32_4_4($1, 7648, $6)
  }
  if (SAFE_HEAP_LOAD_f32_4_4($1 + 7652 | 0, 0) < $3) {
   SAFE_HEAP_STORE_f32_4_4($1, 7652, $3)
  }
  label$400 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($9, 7612) | 0) != -1) {
    break label$400
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7508);
   if (!$1) {
    break label$400
   }
   if (SAFE_HEAP_LOAD_i32_4_4($2, 7844)) {
    break label$400
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 10 | 0, 0) & 4) {
    break label$400
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($2 + 52 | 0, 0);
   if (($0 | 0) < 0) {
    break label$400
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4(($2 + ($0 << 2) | 0) + 1140 | 0, 0);
   $0 = $3 == Math_fround(0.0);
   label$401 : {
    if ($0) {
     break label$401
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 140 | 0, 0);
    if (!($5 < $3)) {
     break label$400
    }
    $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($2 + 24 | 0, 0));
    if ($6 >= $3) {
     break label$400
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($2 + 144 | 0, 0);
    if ($11 <= Math_fround(0.0)) {
     $0 = $5 > $6 & $3 >= $5;
     break label$401;
    }
    if ($5 > $6) {
     $0 = -1
    } else {
     $6 = Math_fround(Math_fround($6 - $5) / $11);
     label$404 : {
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $0 = ~~$6;
       break label$404;
      }
      $0 = -2147483648;
     }
    }
    if ($3 < $5) {
     $4 = -1
    } else {
     $3 = Math_fround(Math_fround($3 - $5) / $11);
     label$407 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $4 = ~~$3;
       break label$407;
      }
      $4 = -2147483648;
     }
    }
    $0 = ($4 | 0) > ($0 | 0);
   }
   if (!$0) {
    break label$400
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7168) & 1) {
    break label$400
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 252 | 0, 0)) {
    break label$400
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 254 | 0, 0)) {
    break label$400
   }
   $4 = -1;
   if (!SAFE_HEAP_LOAD_i32_1_U_1($2 + 253 | 0, 0)) {
    $4 = (SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) != 0
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7660, $4);
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($1, 144);
   SAFE_HEAP_STORE_i32_4_4($2, 7620, ($4 | 0) < 0 ? 2 : 3);
   SAFE_HEAP_STORE_i64_8_4($2, 7612, -1, -1);
   SAFE_HEAP_STORE_i32_1_1($2, 7596, 1);
   SAFE_HEAP_STORE_i32_2_1($2, 7597, 1);
   SAFE_HEAP_STORE_i32_4_4($2, 7600, 1040);
   SAFE_HEAP_STORE_i32_4_4($2 + 7696 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 7608, SAFE_HEAP_LOAD_i32_4_4($2 + 892 | 0, 0));
   SAFE_HEAP_STORE_i64_8_8($2, 7664, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($2 + 7672 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2 + 7708 | 0, 0, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($2 + 7720 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($2 + 7700 | 0, 0, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($2 + 7752 | 0, 0, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($2 + 7740 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($2, 7712, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 7604, $0 ? 33 : 3);
   SAFE_HEAP_STORE_i32_4_4($2, 7756, 0);
   SAFE_HEAP_STORE_i64_8_4($2 + 7744 | 0, 0, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i64_8_4($2 + 7760 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($2 + 7792 | 0, 0, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i64_8_4($2 + 7784 | 0, 0, 0, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($2, 7800, 0);
   SAFE_HEAP_STORE_i32_1_1($2, 7572, 1);
   SAFE_HEAP_STORE_i64_8_4($2 + 7804 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($2 + 7836 | 0, 0, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i64_8_4($2 + 7828 | 0, 0, 0, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($2, 7664, -1);
  }
  $2 = 1;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7597)) {
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 7573)
  }
  SAFE_HEAP_STORE_i32_1_1($1, 7572, $2);
  SAFE_HEAP_STORE_i32_1_1($9, 7568, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 7508);
  label$411 : {
   if (!$0) {
    break label$411
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 10 | 0, 0) & 4) {
    break label$411
   }
   if (SAFE_HEAP_LOAD_i32_4_4($9, 7844)) {
    break label$411
   }
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 6472) * SAFE_HEAP_LOAD_f32_4_4($0, 572));
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
   if ($2) {
    $3 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($2, 572))
   }
   $3 = Math_fround(Math_fround(Math_fround($3 * Math_fround(100.0)) * SAFE_HEAP_LOAD_f32_4_4($9, 24)) + Math_fround(.5));
   label$414 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$414;
    }
    $2 = -2147483648;
   }
   $3 = Math_fround($2 | 0);
   label$416 : {
    if (SAFE_HEAP_LOAD_i32_2_U_2($0 + 296 | 0, 0)) {
     break label$416
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0 + 305 | 0, 0)) {
     break label$416
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($9, 7612);
    if (($2 | 0) == -1) {
     break label$416
    }
    if ($2 >>> 0 <= 1) {
     SAFE_HEAP_STORE_i32_4_4($0, 120, 0);
     SAFE_HEAP_STORE_i32_4_4($0, 112, 0);
     $5 = Math_fround(Math_fround(($2 ? Math_fround(1.0) : Math_fround(-1.0)) * $3) + SAFE_HEAP_LOAD_f32_4_4($0, 88));
     label$418 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $4 = ~~$5;
       break label$418;
      }
      $4 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($0, 104, Math_fround($4 | 0));
    }
    if (($2 & -2) != 2) {
     break label$416
    }
    SAFE_HEAP_STORE_i32_4_4($0 + 124 | 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($0 + 116 | 0, 0, 0);
    $4 = $0 + 108 | 0;
    $5 = Math_fround(Math_fround((($2 | 0) == 2 ? Math_fround(-1.0) : Math_fround(1.0)) * $3) + SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0));
    label$420 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $2 = ~~$5;
      break label$420;
     }
     $2 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($2 | 0));
   }
   $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 812 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 808 | 0, 0)) + Math_fround(0.0));
   $2 = SAFE_HEAP_LOAD_f32_4_4($1 + 824 | 0, 0) > Math_fround(0.0);
   $5 = $2 ? Math_fround($5 * Math_fround(.10000000149011612)) : $5;
   $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 828 | 0, 0) > Math_fround(0.0);
   $5 = $4 ? Math_fround($5 * Math_fround(10.0)) : $5;
   $6 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 804 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 800 | 0, 0)) + Math_fround(0.0));
   $6 = $2 ? Math_fround($6 * Math_fround(.10000000149011612)) : $6;
   $6 = $4 ? Math_fround($6 * Math_fround(10.0)) : $6;
   label$422 : {
    if ($6 == Math_fround(0.0)) {
     break label$422
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 136)) {
     break label$422
    }
    SAFE_HEAP_STORE_i32_4_4($0, 120, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 112, 0);
    $6 = Math_fround(Math_fround($6 * $3) + SAFE_HEAP_LOAD_f32_4_4($0, 88));
    label$423 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $1 = ~~$6;
      break label$423;
     }
     $1 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($0, 104, Math_fround($1 | 0));
   }
   if ($5 == Math_fround(0.0)) {
    break label$411
   }
   SAFE_HEAP_STORE_i32_4_4($0 + 124 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0 + 116 | 0, 0, 0);
   $1 = $0 + 108 | 0;
   $3 = Math_fround(Math_fround($5 * $3) + SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0));
   label$425 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$425;
    }
    $0 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($0 | 0));
  }
  label$427 : {
   if (!$16) {
    SAFE_HEAP_STORE_i32_2_2($9, 7570, 1);
    break label$427;
   }
   if (!$18) {
    break label$427
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($9, 8) & 4)) {
    break label$427
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($9 + 12 | 0, 0) & 4)) {
    break label$427
   }
   ImGui__NavCalcPreferredRefPos_28_29($21 + 8 | 0);
   $0 = SAFE_HEAP_LOAD_i64_8_8($21, 8);
   $2 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_4($9 + 228 | 0, 0, $0, $2);
   SAFE_HEAP_STORE_i64_8_4($9 + 900 | 0, 0, $0, $2);
   SAFE_HEAP_STORE_i32_1_1($9, 851, 1);
  }
  SAFE_HEAP_STORE_i32_4_4($9, 7656, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 228 | 0, 0);
  label$429 : {
   if (!($3 >= Math_fround(-256.0e3))) {
    break label$429
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 232 | 0, 0);
   if (!($5 >= Math_fround(-256.0e3))) {
    break label$429
   }
   $5 = Math_fround((Math_fround(Math_abs($5)) < Math_fround(2147483648.0) ? ~~$5 : -2147483648) | 0);
   SAFE_HEAP_STORE_f32_4_4($2 + 8176 | 0, 0, $5);
   $3 = Math_fround((Math_fround(Math_abs($3)) < Math_fround(2147483648.0) ? ~~$3 : -2147483648) | 0);
   SAFE_HEAP_STORE_f32_4_4($2, 8172, $3);
   SAFE_HEAP_STORE_f32_4_4($2, 232, $5);
   SAFE_HEAP_STORE_f32_4_4($2, 228, $3);
  }
  $5 = SAFE_HEAP_LOAD_f32_4_4($2, 232);
  label$434 : {
   label$435 : {
    $3 = SAFE_HEAP_LOAD_f32_4_4($2, 228);
    if (!($3 >= Math_fround(-256.0e3)) | !($5 >= Math_fround(-256.0e3))) {
     break label$435
    }
    $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 900 | 0, 0);
    if (!($6 >= Math_fround(-256.0e3))) {
     break label$435
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($2 + 904 | 0, 0);
    if (!($11 >= Math_fround(-256.0e3))) {
     break label$435
    }
    SAFE_HEAP_STORE_f32_4_4($2 + 884 | 0, 0, Math_fround($5 - $11));
    SAFE_HEAP_STORE_f32_4_4($2 + 880 | 0, 0, Math_fround($3 - $6));
    break label$434;
   }
   SAFE_HEAP_STORE_i64_8_8($2 + 880 | 0, 0, 0, 0);
  }
  label$436 : {
   if (SAFE_HEAP_LOAD_f32_4_4($2 + 880 | 0, 0) == Math_fround(0.0)) {
    if (SAFE_HEAP_LOAD_f32_4_4($2 + 884 | 0, 0) == Math_fround(0.0)) {
     break label$436
    }
   }
   SAFE_HEAP_STORE_i32_1_1($2, 7571, 0);
  }
  $13 = SAFE_HEAP_LOAD_i64_8_4($2, 228);
  $0 = i64toi32_i32$HIGH_BITS;
  $16 = $0;
  SAFE_HEAP_STORE_i64_8_4($2 + 900 | 0, 0, $13, $0);
  $4 = $2 + 8 | 0;
  $0 = 0;
  while (1) {
   $1 = 0;
   $17 = $0 + $2 | 0;
   $8 = SAFE_HEAP_LOAD_i32_1_U_1($17 + 236 | 0, 0);
   if ($8) {
    $1 = SAFE_HEAP_LOAD_f32_4_4((($0 << 2) + $2 | 0) + 1040 | 0, 0) < Math_fround(0.0)
   }
   $12 = $0 + $4 | 0;
   $22 = $12 + 984 | 0;
   SAFE_HEAP_STORE_i32_1_1($22, 0, $1);
   $9 = $0 << 1;
   $23 = $9 + $4 | 0;
   $10 = $23 + 994 | 0;
   SAFE_HEAP_STORE_i32_2_2($10, 0, 0);
   $18 = $12 + 1014 | 0;
   if ($8) {
    $12 = 0
   } else {
    $12 = SAFE_HEAP_LOAD_f32_4_4((($0 << 2) + $2 | 0) + 1040 | 0, 0) >= Math_fround(0.0)
   }
   SAFE_HEAP_STORE_i32_1_1($18, 0, $12);
   $12 = $4 + ($0 << 2) | 0;
   $18 = $12 + 1032 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($18, 0);
   SAFE_HEAP_STORE_f32_4_4($12 + 1052 | 0, 0, $3);
   $6 = Math_fround(-1.0);
   label$441 : {
    if (!$8) {
     break label$441
    }
    $6 = Math_fround(0.0);
    if ($3 < Math_fround(0.0)) {
     break label$441
    }
    $6 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($2, 24));
   }
   SAFE_HEAP_STORE_f32_4_4($18, 0, $6);
   label$443 : {
    if ($1) {
     label$445 : {
      label$446 : {
       $3 = SAFE_HEAP_LOAD_f32_4_4($2, 40);
       $25 = SAFE_HEAP_LOAD_f64_8_8($2, 6976);
       $8 = $0 << 3;
       $1 = $8 + $2 | 0;
       $18 = $1 + 952 | 0;
       if (!($3 > Math_fround($25 - SAFE_HEAP_LOAD_f64_8_8($18, 0)))) {
        break label$446
       }
       $3 = SAFE_HEAP_LOAD_f32_4_4($2, 228);
       label$447 : {
        if (!($3 >= Math_fround(-256.0e3))) {
         $11 = Math_fround(0.0);
         $6 = Math_fround(0.0);
         break label$447;
        }
        $11 = Math_fround(0.0);
        $6 = Math_fround(0.0);
        if (!($5 >= Math_fround(-256.0e3))) {
         break label$447
        }
        $11 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 908 | 0, 0));
        $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 232) - SAFE_HEAP_LOAD_f32_4_4($1 + 912 | 0, 0));
       }
       $3 = $6;
       $6 = Math_fround(Math_fround($11 * $11) + Math_fround($3 * $3));
       $3 = SAFE_HEAP_LOAD_f32_4_4($2, 44);
       if (!($6 < Math_fround($3 * $3))) {
        break label$446
       }
       $1 = ($2 + $9 | 0) + 1012 | 0;
       SAFE_HEAP_STORE_i32_2_2($1, 0, SAFE_HEAP_LOAD_i32_2_U_2($1, 0) + 1 | 0);
       break label$445;
      }
      SAFE_HEAP_STORE_i32_2_2(($2 + $9 | 0) + 1012 | 0, 0, 1);
     }
     SAFE_HEAP_STORE_f64_8_8($18, 0, $25);
     $1 = $4 + $8 | 0;
     SAFE_HEAP_STORE_i64_8_4($1 + 900 | 0, 0, $13, $16);
     SAFE_HEAP_STORE_i32_2_2($10, 0, SAFE_HEAP_LOAD_i32_2_U_2($23 + 1004 | 0, 0));
     SAFE_HEAP_STORE_i64_8_8($1 + 1072 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($12 + 1112 | 0, 0, 0);
     break label$443;
    }
    if (!$8) {
     break label$443
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($2, 228);
    label$449 : {
     if (!($3 >= Math_fround(-256.0e3))) {
      $6 = Math_fround(0.0);
      $11 = Math_fround(0.0);
      break label$449;
     }
     $6 = Math_fround(0.0);
     $11 = Math_fround(0.0);
     if (!($5 >= Math_fround(-256.0e3))) {
      break label$449
     }
     $1 = ($0 << 3) + $2 | 0;
     $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 232) - SAFE_HEAP_LOAD_f32_4_4($1 + 912 | 0, 0));
     $11 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 908 | 0, 0));
    }
    $3 = $11;
    $1 = $12 + 1112 | 0;
    $11 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $14 = Math_fround(Math_fround($3 * $3) + Math_fround($6 * $6));
    SAFE_HEAP_STORE_f32_4_4($1, 0, $11 >= $14 ? $11 : $14);
    $1 = $4 + ($0 << 3) | 0;
    $8 = $1 + 1072 | 0;
    $11 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
    $3 = $3 < Math_fround(0.0) ? Math_fround(-$3) : $3;
    SAFE_HEAP_STORE_f32_4_4($8, 0, $3 <= $11 ? $11 : $3);
    $1 = $1 + 1076 | 0;
    $3 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $6 = $6 < Math_fround(0.0) ? Math_fround(-$6) : $6;
    SAFE_HEAP_STORE_f32_4_4($1, 0, $3 >= $6 ? $3 : $6);
   }
   SAFE_HEAP_STORE_i32_1_1($17 + 997 | 0, 0, (SAFE_HEAP_LOAD_i32_2_U_2($10, 0) | 0) == 2);
   if (SAFE_HEAP_LOAD_i32_1_U_1($22, 0)) {
    SAFE_HEAP_STORE_i32_1_1($2, 7571, 0)
   }
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 5) {
    continue
   }
   break;
  };
  $8 = 0;
  $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = $9 + 5520 | 0;
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  SAFE_HEAP_STORE_f32_4_4($9 + 7076 | 0, 0, $3 >= Math_fround(4.0) ? $3 : Math_fround(4.0));
  $3 = SAFE_HEAP_LOAD_f32_4_4($9 + 5516 | 0, 0);
  $3 = $3 >= Math_fround(4.0) ? $3 : Math_fround(4.0);
  SAFE_HEAP_STORE_f32_4_4($9, 7072, $3);
  $10 = SAFE_HEAP_LOAD_i32_4_4($9, 7092);
  if ($10) {
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 9 | 0, 0) & 2 ? 0 : $10
  } else {
   $0 = 0
  }
  $17 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $16 = $17;
  $1 = SAFE_HEAP_LOAD_i32_1_U_1($9 + 180 | 0, 0);
  if ($1) {
   $16 = SAFE_HEAP_LOAD_i32_4_4($9 + 7076 | 0, 0)
  }
  $12 = SAFE_HEAP_LOAD_i32_4_4($9, 7008);
  label$30 : {
   if (($12 | 0) <= 0) {
    break label$30
   }
   $22 = SAFE_HEAP_LOAD_i32_4_4($9, 5516);
   $23 = $1 ? (wasm2js_scratch_store_f32($3), wasm2js_scratch_load_i32(2)) : $22;
   $18 = SAFE_HEAP_LOAD_i32_4_4($9 + 7016 | 0, 0);
   $1 = $0;
   $4 = 0;
   while (1) {
    $13 = $12;
    label$611 : {
     label$712 : {
      $12 = $12 - 1 | 0;
      $8 = SAFE_HEAP_LOAD_i32_4_4($18 + ($12 << 2) | 0, 0);
      if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 138)) {
       break label$712
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($8, 145)) {
       break label$712
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($8, 8);
      if ($0 & 512) {
       break label$712
      }
      $3 = SAFE_HEAP_LOAD_f32_4_4($9, 228);
      $0 = $0 & 16777282;
      $6 = (wasm2js_scratch_store_i32(2, $0 ? $22 : $23), wasm2js_scratch_load_f32());
      if (!($3 >= Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 416) - $6))) {
       break label$712
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($9, 232);
      $11 = (wasm2js_scratch_store_i32(2, $0 ? $17 : $16), wasm2js_scratch_load_f32());
      if (!($5 >= Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 420 | 0, 0) - $11))) {
       break label$712
      }
      if (!($3 < Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 424 | 0, 0) + $6))) {
       break label$712
      }
      if (!(Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 428 | 0, 0) + $11) > $5)) {
       break label$712
      }
      label$8 : {
       $24 = SAFE_HEAP_LOAD_i32_2_U_2($8, 528);
       if (!$24) {
        break label$8
       }
       $0 = 0;
       $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 12) + Math_fround(SAFE_HEAP_LOAD_i32_2_2($8, 532) | 0));
       if ($3 >= $6) {
        $0 = $3 < Math_fround($6 + Math_fround($24 << 16 >> 16));
        $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 16 | 0, 0) + Math_fround(SAFE_HEAP_LOAD_i32_2_2($8 + 534 | 0, 0) | 0));
        $0 = $0 & $3 <= $5 & Math_fround($3 + Math_fround(SAFE_HEAP_LOAD_i32_2_2($8 + 530 | 0, 0) | 0)) > $5;
       }
       if (!$0) {
        break label$8
       }
       $24 = $0 ? 4 : 0;
       break label$611;
      }
      $1 = $1 ? $1 : $8;
      $0 = $4;
      label$1013 : {
       if ($0) {
        break label$1013
       }
       label$1114 : {
        if (!$10) {
         break label$1114
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($8, 736) | 0) != (SAFE_HEAP_LOAD_i32_4_4($10, 736) | 0)) {
         break label$1114
        }
        $0 = 0;
        break label$1013;
       }
       $0 = $8;
      }
      $4 = $0;
      $24 = $1 ? (($0 | 0) != 0) << 1 : 0;
      break label$611;
     }
     $24 = 4;
    }
    $8 = $4;
    $0 = $1;
    label$1215 : {
     switch ($24 | 0) {
     case 0:
     case 4:
      break label$1215;
     default:
      break label$30;
     };
    }
    if (($13 | 0) > 1) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_4_4($9, 7088, $8);
  $12 = $0;
  SAFE_HEAP_STORE_i32_4_4($9, 7084, $0);
  $13 = SAFE_HEAP_LOAD_i32_4_4($9, 7468);
  $8 = $13;
  while (1) {
   label$1317 : {
    if (($8 | 0) <= 0) {
     $0 = 0;
     break label$1317;
    }
    $0 = $1;
    $8 = $8 - 1 | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 7476) + Math_imul($8, 36) | 0, 4);
    label$16 : {
     if ($1) {
      $4 = 0;
      if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 8) {
       break label$16
      }
     }
     $1 = $0;
     $4 = 1;
    }
    $0 = $1;
    if ($4) {
     continue
    }
   }
   break;
  };
  $10 = 0;
  label$18 : {
   if (!$0) {
    break label$18
   }
   $10 = 0;
   if (!$12) {
    break label$18
   }
   $8 = 1;
   $4 = SAFE_HEAP_LOAD_i32_4_4($12, 736);
   label$1918 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 736) | 0) == ($0 | 0)) {
     break label$1918
    }
    if ($4) {
     while (1) {
      $1 = ($0 | 0) == ($4 | 0);
      $8 = $1;
      if ($1) {
       break label$1918
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($4, 732);
      if ($4) {
       continue
      }
      break;
     }
    }
    $8 = 0;
   }
   $10 = $8 ^ 1;
  }
  $16 = ($13 | 0) > 0;
  $17 = $16 | ($12 | 0) != 0;
  $22 = ($0 | $12) != 0;
  $23 = SAFE_HEAP_LOAD_i32_4_4($9, 8);
  $18 = $23 & 16;
  $13 = $9 + 952 | 0;
  $4 = -1;
  $8 = 0;
  $1 = 0;
  while (1) {
   $12 = $1 + $9 | 0;
   if (SAFE_HEAP_LOAD_i32_1_U_1($12 + 992 | 0, 0)) {
    SAFE_HEAP_STORE_i32_1_1($12 + 1032 | 0, 0, $22);
    SAFE_HEAP_STORE_i32_1_1($12 + 1027 | 0, 0, $17);
   }
   $24 = SAFE_HEAP_LOAD_i32_1_U_1($12 + 236 | 0, 0);
   $12 = $24 | $8 & 1;
   label$24 : {
    if (!$24) {
     break label$24
    }
    if (($4 | 0) != -1) {
     if (!(SAFE_HEAP_LOAD_f64_8_8($13 + ($1 << 3) | 0, 0) < SAFE_HEAP_LOAD_f64_8_8($13 + ($4 << 3) | 0, 0))) {
      break label$24
     }
    }
    $4 = $1;
   }
   $8 = ($12 | 0) != 0;
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 5) {
    continue
   }
   break;
  };
  $8 = ($4 | 0) == -1;
  if ($8) {
   $1 = 1
  } else {
   $1 = (SAFE_HEAP_LOAD_i32_1_U_1(($4 + $9 | 0) + 1027 | 0, 0) | 0) != 0
  }
  if ($8) {
   $4 = 1
  } else {
   $4 = (SAFE_HEAP_LOAD_i32_1_U_1(($4 + $9 | 0) + 1032 | 0, 0) | 0) != 0
  }
  $8 = ($18 | 0) != 0 | $10;
  if (SAFE_HEAP_LOAD_i32_1_U_1($9, 7876)) {
   $13 = SAFE_HEAP_LOAD_i32_1_U_1($9, 7880) & 16
  } else {
   $13 = 0
  }
  if ($1 ? $8 : $8 | !$13) {
   SAFE_HEAP_STORE_i64_8_4($9, 7084, 0, 0)
  }
  $8 = ($0 | 0) != 0;
  $13 = SAFE_HEAP_LOAD_i32_4_4($9, 12788);
  label$34 : {
   if (($13 | 0) != -1) {
    $1 = ($13 | 0) != 0;
    SAFE_HEAP_STORE_i32_1_1($9 + 848 | 0, 0, $1);
    SAFE_HEAP_STORE_i32_1_1($9 + 888 | 0, 0, $1);
    break label$34;
   }
   $13 = $9 + 848 | 0;
   label$3621 : {
    if ($1) {
     $1 = 1;
     if (SAFE_HEAP_LOAD_i32_4_4($9, 7084)) {
      break label$3621
     }
     $1 = 1;
     if ($12) {
      break label$3621
     }
    }
    $1 = $16;
   }
   SAFE_HEAP_STORE_i32_1_1($13, 0, $1);
   $16 = $9 + 888 | 0;
   label$3922 : {
    if ($4) {
     $1 = 1;
     if (SAFE_HEAP_LOAD_i32_4_4($9, 7084)) {
      break label$3922
     }
     $1 = 1;
     if ($12) {
      break label$3922
     }
    }
    $1 = $8;
   }
   SAFE_HEAP_STORE_i32_1_1($16, 0, $1);
  }
  $4 = $9 + 849 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($9, 12792);
  label$42 : {
   if (($1 | 0) != -1) {
    $0 = ($1 | 0) != 0;
    break label$42;
   }
   $0 = (SAFE_HEAP_LOAD_i32_4_4($9, 7136) | $0) != 0;
  }
  SAFE_HEAP_STORE_i32_1_1($4, 0, $0);
  if (!(!SAFE_HEAP_LOAD_i32_1_U_1($9 + 853 | 0, 0) | ($23 & 9) != 1)) {
   SAFE_HEAP_STORE_i32_1_1($9 + 849 | 0, 0, 1)
  }
  SAFE_HEAP_STORE_i32_1_1($9 + 850 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($9, 12796) - 1 >>> 0 < 4294967294);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 7092);
  __inlined_func$ImGui__UpdateMouseMovingWindowNewFrame_28_29 : {
   if ($4) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
    SAFE_HEAP_STORE_i32_4_4($0, 7140, $1);
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 7196) | 0) == ($1 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 7200, 1)
    }
    label$316 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($0 + 236 | 0, 0)) {
      break label$316
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 228 | 0, 0);
     if (!($5 >= Math_fround(-256.0e3))) {
      break label$316
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 232 | 0, 0) >= Math_fround(-256.0e3))) {
      break label$316
     }
     $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 7180 | 0, 0));
     $1 = SAFE_HEAP_LOAD_i32_4_4($4, 736);
     $6 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
     $5 = Math_fround($5 - SAFE_HEAP_LOAD_f32_4_4($0, 7176));
     label$43 : {
      if ($6 == $5) {
       if (SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0) == $3) {
        break label$43
       }
      }
      label$657 : {
       if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 9 | 0, 0) & 1) {
        break label$657
       }
       if (!(SAFE_HEAP_LOAD_f32_4_4($0, 12128) <= Math_fround(0.0))) {
        break label$657
       }
       SAFE_HEAP_STORE_f32_4_4($0, 12128, SAFE_HEAP_LOAD_f32_4_4($0 + 28 | 0, 0));
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($1, 176);
      if (!($4 & 1)) {
       break label$43
      }
      SAFE_HEAP_STORE_i64_8_4($1, 180, 2139095039, 2139095039);
      SAFE_HEAP_STORE_i32_4_4($1, 176, $4 & -15);
      $6 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
      $5 = Math_fround((Math_fround(Math_abs($5)) < Math_fround(2147483648.0) ? ~~$5 : -2147483648) | 0);
      SAFE_HEAP_STORE_f32_4_4($1, 12, $5);
      $4 = $1 + 16 | 0;
      $11 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
      $14 = Math_fround((Math_fround(Math_abs($3)) < Math_fround(2147483648.0) ? ~~$3 : -2147483648) | 0);
      SAFE_HEAP_STORE_f32_4_4($4, 0, $14);
      $3 = Math_fround($5 - $6);
      SAFE_HEAP_STORE_f32_4_4($1, 208, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 208)));
      $4 = $1 + 212 | 0;
      $5 = Math_fround($14 - $11);
      SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
      $4 = $1 + 232 | 0;
      SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
      $4 = $1 + 236 | 0;
      SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
      $4 = $1 + 240 | 0;
      SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
      $4 = $1 + 244 | 0;
      SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
      $4 = $1 + 224 | 0;
      SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
      $1 = $1 + 228 | 0;
      SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
     }
     ImGui__FocusWindow_28ImGuiWindow__29(SAFE_HEAP_LOAD_i32_4_4($0, 7092));
     break __inlined_func$ImGui__UpdateMouseMovingWindowNewFrame_28_29;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7092, 0);
    SAFE_HEAP_STORE_i32_1_1($0, 7148, ($1 | 0) != 0);
    if ($1) {
     SAFE_HEAP_STORE_i32_4_4($0, 7192, -1);
     SAFE_HEAP_STORE_i32_2_1($0, 7151, 0);
     SAFE_HEAP_STORE_i32_4_4($0, 7144, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7184, 0);
    SAFE_HEAP_STORE_i32_2_1($0, 7149, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7136, 0);
    SAFE_HEAP_STORE_i64_8_8($0, 7168, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 7156, 0, 0);
    SAFE_HEAP_STORE_i32_2_1($0, 7153, 0);
    break __inlined_func$ImGui__UpdateMouseMovingWindowNewFrame_28_29;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7184);
   label$127 : {
    if (!$1) {
     break label$127
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 80);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
    if (($4 | 0) != ($1 | 0)) {
     break label$127
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7140, $1);
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 7196) | 0) == ($1 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 7200, 1)
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 236 | 0, 0)) {
     break label$127
    }
    SAFE_HEAP_STORE_i32_1_1($0, 7148, ($1 | 0) != 0);
    if ($1) {
     SAFE_HEAP_STORE_i32_4_4($0, 7192, -1);
     SAFE_HEAP_STORE_i32_2_1($0, 7151, 0);
     SAFE_HEAP_STORE_i32_4_4($0, 7144, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7184, 0);
    SAFE_HEAP_STORE_i32_2_1($0, 7149, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7136, 0);
    SAFE_HEAP_STORE_i64_8_8($0, 7168, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 7156, 0, 0);
    SAFE_HEAP_STORE_i32_2_1($0, 7153, 0);
   }
  }
  $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($8, 7468);
  while (1) {
   label$452 : {
    $0 = $2;
    if (($4 | 0) <= 0) {
     $2 = 0;
     break label$452;
    }
    $4 = $4 - 1 | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 7476) + Math_imul($4, 36) | 0, 4);
    label$455 : {
     if ($2) {
      $1 = 0;
      if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 8) {
       break label$455
      }
     }
     $2 = $0;
     $1 = 1;
    }
    if ($1) {
     continue
    }
   }
   break;
  };
  label$457 : {
   label$458 : {
    if (!$2) {
     if (!SAFE_HEAP_LOAD_i32_4_4($7, 7844)) {
      break label$458
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($7, 7860) > Math_fround(0.0))) {
      break label$458
     }
    }
    $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 24) * Math_fround(6.0)) + SAFE_HEAP_LOAD_f32_4_4($7, 7868));
    SAFE_HEAP_STORE_f32_4_4($7, 7868, $3 < Math_fround(1.0) ? $3 : Math_fround(1.0));
    break label$457;
   }
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 7868) + Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 24) * Math_fround(-10.0)));
   SAFE_HEAP_STORE_f32_4_4($7, 7868, $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0));
  }
  SAFE_HEAP_STORE_i32_4_4($7, 12796, -1);
  SAFE_HEAP_STORE_i32_4_4($7, 7872, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 12788, -1, -1);
  SAFE_HEAP_STORE_i64_8_4($7, 12108, 1065353216, 1065353216);
  label$460 : {
   if (!SAFE_HEAP_LOAD_i32_4_4($8, 7096)) {
    break label$460
   }
   SAFE_HEAP_STORE_f32_4_4($8, 7108, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 7108) - SAFE_HEAP_LOAD_f32_4_4($8 + 24 | 0, 0)));
   $3 = SAFE_HEAP_LOAD_f32_4_4($8 + 228 | 0, 0);
   label$461 : {
    if (!($3 >= Math_fround(-256.0e3))) {
     break label$461
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($8 + 232 | 0, 0);
    if (!($5 >= Math_fround(-256.0e3))) {
     break label$461
    }
    $3 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($8, 7100));
    $6 = Math_fround($3 * $3);
    $3 = Math_fround($5 - SAFE_HEAP_LOAD_f32_4_4($8 + 7104 | 0, 0));
    $5 = Math_fround($6 + Math_fround($3 * $3));
    $3 = SAFE_HEAP_LOAD_f32_4_4($8 + 48 | 0, 0);
    if (!($5 > Math_fround($3 * $3))) {
     break label$461
    }
    SAFE_HEAP_STORE_i32_4_4($8, 7108, 0);
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4($8, 7108) <= Math_fround(0.0))) {
    break label$460
   }
   SAFE_HEAP_STORE_i32_4_4($8, 7108, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 7096, 0);
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($8 + 244 | 0, 0);
  label$462 : {
   if ($3 == Math_fround(0.0)) {
    if (SAFE_HEAP_LOAD_f32_4_4($8 + 248 | 0, 0) == Math_fround(0.0)) {
     break label$462
    }
   }
   if (SAFE_HEAP_LOAD_i32_4_4($8, 7136)) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($8, 7154)) {
     break label$462
    }
   }
   if (SAFE_HEAP_LOAD_i32_4_4($8, 7120)) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($8, 7126)) {
     break label$462
    }
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($8, 7096);
   $0 = $2;
   if (!$0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($8, 7084)
   }
   if (!$0) {
    break label$462
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 141)) {
    break label$462
   }
   label$467 : {
    if ($3 == Math_fround(0.0)) {
     break label$467
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($8 + 252 | 0, 0)) {
     break label$467
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($8 + 160 | 0, 0)) {
     break label$467
    }
    if (($0 | 0) != ($2 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($8, 7096, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 7108, 1073741824);
     SAFE_HEAP_STORE_i64_8_4($8, 7100, SAFE_HEAP_LOAD_i64_8_4($8 + 228 | 0, 0), i64toi32_i32$HIGH_BITS);
    }
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 244) * Math_fround(.10000000149011612));
    $5 = SAFE_HEAP_LOAD_f32_4_4($0, 572);
    $3 = Math_fround($3 + $5);
    $3 = $3 < Math_fround(.5) ? Math_fround(.5) : $3 > Math_fround(2.5) ? Math_fround(2.5) : $3;
    SAFE_HEAP_STORE_f32_4_4($0, 572, $3);
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 736) | 0) != ($0 | 0)) {
     break label$462
    }
    $15 = SAFE_HEAP_LOAD_f32_4_4($8 + 228 | 0, 0);
    $14 = SAFE_HEAP_LOAD_f32_4_4($8 + 232 | 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 180, 2139095039, 2139095039);
    SAFE_HEAP_STORE_i32_4_4($0, 176, SAFE_HEAP_LOAD_i32_4_4($0, 176) & -15);
    $2 = $0 + 16 | 0;
    $6 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    $3 = Math_fround($3 / $5);
    $19 = Math_fround(Math_fround(1.0) - $3);
    $1 = $0 + 24 | 0;
    $11 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $5 = Math_fround($6 + Math_fround(Math_fround(Math_fround($19 * $11) * Math_fround($14 - $6)) / $11));
    label$469 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $4 = ~~$5;
      break label$469;
     }
     $4 = -2147483648;
    }
    $20 = Math_fround($4 | 0);
    SAFE_HEAP_STORE_f32_4_4($2, 0, $20);
    $5 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
    $14 = SAFE_HEAP_LOAD_f32_4_4($0, 20);
    $15 = Math_fround($5 + Math_fround(Math_fround(Math_fround($19 * $14) * Math_fround($15 - $5)) / $14));
    label$471 : {
     if (Math_fround(Math_abs($15)) < Math_fround(2147483648.0)) {
      $2 = ~~$15;
      break label$471;
     }
     $2 = -2147483648;
    }
    $15 = Math_fround($2 | 0);
    SAFE_HEAP_STORE_f32_4_4($0, 12, $15);
    $5 = Math_fround($15 - $5);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($0, 208)));
    $2 = $0 + 212 | 0;
    $6 = Math_fround($20 - $6);
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $0 + 232 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $0 + 236 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $0 + 240 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $0 + 244 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $0 + 224 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $0 + 228 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $5 = Math_fround($3 * $11);
    label$473 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $2 = ~~$5;
      break label$473;
     }
     $2 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($2 | 0));
    $5 = Math_fround($3 * $14);
    label$475 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $1 = ~~$5;
      break label$475;
     }
     $1 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($0, 20, Math_fround($1 | 0));
    $2 = $0 + 32 | 0;
    $5 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($2, 0));
    label$477 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $1 = ~~$5;
      break label$477;
     }
     $1 = -2147483648;
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($0, 28);
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($1 | 0));
    $3 = Math_fround($3 * $5);
    label$479 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $1 = ~~$3;
      break label$479;
     }
     $1 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($0, 28, Math_fround($1 | 0));
    break label$462;
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($8 + 252 | 0, 0)) {
    break label$462
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($8 + 253 | 0, 0)) {
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($8 + 177 | 0, 0)
   } else {
    $1 = 1
   }
   $1 = !$1;
   $6 = SAFE_HEAP_LOAD_f32_4_4($8 + ($1 ? 244 : 248) | 0, 0);
   $5 = $1 ? Math_fround(0.0) : $3;
   if ($5 != Math_fround(0.0)) {
    if (($0 | 0) != ($2 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($8, 7096, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 7108, 1073741824);
     SAFE_HEAP_STORE_i64_8_4($8, 7100, SAFE_HEAP_LOAD_i64_8_4($8 + 228 | 0, 0), i64toi32_i32$HIGH_BITS);
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    label$486 : {
     if (!($4 & 16777216)) {
      $1 = $4;
      break label$486;
     }
     $2 = $0;
     while (1) {
      $0 = $2;
      if (!(($4 & 528) == 16 | SAFE_HEAP_LOAD_f32_4_4($0 + 100 | 0, 0) == Math_fround(0.0))) {
       $1 = $4;
       break label$486;
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      $4 = $1;
      $2 = $0;
      if ($1 & 16777216) {
       continue
      }
      break;
     };
    }
    if (!($1 & 528)) {
     $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 444 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 436 | 0, 0)) * Math_fround(.6700000166893005));
     $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 6472) * SAFE_HEAP_LOAD_f32_4_4($0, 572));
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
     if ($2) {
      $14 = Math_fround($14 * SAFE_HEAP_LOAD_f32_4_4($2, 572))
     }
     SAFE_HEAP_STORE_i32_4_4($0 + 124 | 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($0 + 116 | 0, 0, 0);
     $2 = $0 + 108 | 0;
     $15 = SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0);
     $11 = $5;
     $5 = Math_fround($14 * Math_fround(5.0));
     $3 = $3 > $5 ? $5 : $3;
     label$493 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $1 = ~~$3;
       break label$493;
      }
      $1 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($15 - Math_fround($11 * Math_fround($1 | 0))));
    }
   }
   if ($6 == Math_fround(0.0)) {
    break label$462
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($8, 7096) | 0) != ($0 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($8, 7096, $0);
    SAFE_HEAP_STORE_i32_4_4($8, 7108, 1073741824);
    SAFE_HEAP_STORE_i64_8_4($8, 7100, SAFE_HEAP_LOAD_i64_8_4($8 + 228 | 0, 0), i64toi32_i32$HIGH_BITS);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   label$496 : {
    if (!($4 & 16777216)) {
     $1 = $4;
     break label$496;
    }
    $2 = $0;
    while (1) {
     $0 = $2;
     if (!(($4 & 528) == 16 | SAFE_HEAP_LOAD_f32_4_4($0, 96) == Math_fround(0.0))) {
      $1 = $4;
      break label$496;
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     $4 = $1;
     $2 = $0;
     if ($1 & 16777216) {
      continue
     }
     break;
    };
   }
   if ($1 & 528) {
    break label$462
   }
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 6472) * SAFE_HEAP_LOAD_f32_4_4($0, 572));
   $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 440 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0, 432)) * Math_fround(.6700000166893005));
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
   if ($2) {
    $5 = Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($2, 572))
   }
   SAFE_HEAP_STORE_i32_4_4($0, 120, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 112, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($0, 88);
   $5 = Math_fround($5 + $5);
   $3 = $3 > $5 ? $5 : $3;
   label$5028 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $1 = ~~$3;
     break label$5028;
    }
    $1 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($0, 104, Math_fround($11 - Math_fround($6 * Math_fround($1 | 0))));
  }
  $5 = Math_fround(3402823466385288598117041.0e14);
  label$504 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($7, 6999)) {
    break label$504
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($7 + 184 | 0, 0);
   $5 = Math_fround(3402823466385288598117041.0e14);
   if ($3 < Math_fround(0.0)) {
    break label$504
   }
   $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f64_8_8($7, 6976)) - $3);
  }
  $3 = $5;
  if (SAFE_HEAP_LOAD_i32_4_4($7, 7008)) {
   $0 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 7016) + ($0 << 2) | 0, 0);
    SAFE_HEAP_STORE_i32_2_2($2, 150, 0);
    SAFE_HEAP_STORE_i32_1_1($2, 140, 0);
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($2, 138);
    SAFE_HEAP_STORE_i32_1_1($2, 139, $1);
    SAFE_HEAP_STORE_i32_1_1($2, 138, 0);
    label$508 : {
     if ($1) {
      break label$508
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($2, 804)) {
      break label$508
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($2, 540) < $3)) {
      break label$508
     }
     SAFE_HEAP_STORE_i32_1_1($2, 804, 1);
     $1 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
     SAFE_HEAP_STORE_i32_4_4($2, 796, SAFE_HEAP_LOAD_i32_4_4($1 + 16 | 0, 0));
     SAFE_HEAP_STORE_i32_4_4($2, 800, SAFE_HEAP_LOAD_i32_4_4($1 + 28 | 0, 0));
     $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 204 | 0, 0);
     if ($1) {
      SAFE_HEAP_STORE_i64_8_4($2, 196, 0, 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($4) {
       $4 = $4 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      SAFE_HEAP_STORE_i32_4_4($2, 204, 0);
     }
     ImDrawList___ClearFreeMemory_28_29(SAFE_HEAP_LOAD_i32_4_4($2, 580));
     $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 360 | 0, 0);
     if ($1) {
      SAFE_HEAP_STORE_i64_8_4($2 + 352 | 0, 0, 0, 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($4) {
       $4 = $4 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
      }
      ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
      SAFE_HEAP_STORE_i32_4_4($2, 360, 0);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 400 | 0, 0);
     if ($1) {
      SAFE_HEAP_STORE_i64_8_4($2 + 392 | 0, 0, 0, 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($4) {
       $4 = $4 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      SAFE_HEAP_STORE_i32_4_4($2, 400, 0);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 412 | 0, 0);
     if ($1) {
      SAFE_HEAP_STORE_i64_8_4($2 + 404 | 0, 0, 0, 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($4) {
       $4 = $4 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
      }
      ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
      SAFE_HEAP_STORE_i32_4_4($2, 412, 0);
     }
    }
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 7008) | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 8088) | 0) > 0) {
   $0 = 0;
   while (1) {
    $5 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 8096) + ($0 << 2) | 0, 0);
    if (!(!($5 >= Math_fround(0.0)) | !($3 > $5))) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($7, 8064) + Math_imul($0, 456) | 0;
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     SAFE_HEAP_STORE_i32_4_4($2, 404, 0);
     $4 = SAFE_HEAP_LOAD_i32_4_4($2 + 400 | 0, 0);
     if ($4) {
      SAFE_HEAP_STORE_i64_8_4($2, 392, 0, 0);
      ImGui__MemFree_28void__29($4);
      SAFE_HEAP_STORE_i32_4_4($2, 400, 0);
     }
     SAFE_HEAP_STORE_i32_1_1($2, 444, 1);
     $4 = SAFE_HEAP_LOAD_i32_4_4($2 + 372 | 0, 0);
     if ($4) {
      SAFE_HEAP_STORE_i64_8_4($2, 364, 0, 0);
      ImGui__MemFree_28void__29($4);
      SAFE_HEAP_STORE_i32_4_4($2, 372, 0);
     }
     SAFE_HEAP_STORE_i32_1_1($2, 454, 1);
     $4 = SAFE_HEAP_LOAD_i32_4_4($2, 84);
     if (($4 | 0) > 0) {
      $8 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
      $12 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_2_2(Math_imul($12, 104) + $8 | 0, 80, 65535);
       $12 = $12 + 1 | 0;
       if (($4 | 0) != ($12 | 0)) {
        continue
       }
       break;
      };
     }
     SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 8096 | 0, 0) + (($2 - SAFE_HEAP_LOAD_i32_4_4($1 + 8064 | 0, 0) | 0) / 456 << 2) | 0, 0, -1082130432);
    }
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 8088) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 8044) | 0) > 0) {
   $0 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($7, 8052) + Math_imul($0, 104) | 0;
    $5 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
    if (!(!($5 >= Math_fround(0.0)) | !($3 > $5))) {
     ImDrawListSplitter__ClearFreeMemory_28_29($2 + 16 | 0);
     SAFE_HEAP_STORE_i32_4_4($2, 4, -1082130432);
    }
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 8044) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($7, 6999)) {
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 7452 | 0, 0);
   if ($2) {
    SAFE_HEAP_STORE_i64_8_4($0, 7444, 0, 0);
    if ($0) {
     $1 = $0 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7452, 0);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 7464 | 0, 0);
   if ($2) {
    SAFE_HEAP_STORE_i64_8_4($0, 7456, 0, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($1) {
     $1 = $1 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7464, 0);
   }
   $1 = 0;
   $13 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = SAFE_HEAP_LOAD_i32_4_4($13 + 12176 | 0, 0);
   if ($0) {
    $4 = $0 + 4 | 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($13, 12168) + $4 | 0;
    $2 = 0;
    while (1) {
     if (SAFE_HEAP_LOAD_i32_4_4($4, 0)) {
      $2 = (Math_imul(SAFE_HEAP_LOAD_i32_1_1($4, 12), 12) + $2 | 0) + 16 | 0
     }
     $1 = $2;
     $4 = SAFE_HEAP_LOAD_i32_4_4($4 - 4 | 0, 0) + $4 | 0;
     $0 = ($4 | 0) == ($8 | 0);
     $4 = $0 ? 0 : $4;
     if (!$0) {
      continue
     }
     break;
    };
   }
   $4 = $1;
   label$511 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($13, 12168) | 0) == ($1 | 0)) {
     break label$511
    }
    label$612 : {
     if (($4 | 0) <= 0) {
      $4 = 0;
      $1 = 0;
      break label$612;
     }
     $1 = ImGui__MemAlloc_28unsigned_20long_29($4);
    }
    $0 = $4;
    $2 = SAFE_HEAP_LOAD_i32_4_4($13, 12176);
    label$813 : {
     if (!$2) {
      $8 = 0;
      break label$813;
     }
     $4 = $2 + 4 | 0;
     $8 = 0;
     $2 = $0;
     while (1) {
      if (SAFE_HEAP_LOAD_i32_4_4($4, 0)) {
       label$1315 : {
        label$1417 : {
         $9 = Math_imul(SAFE_HEAP_LOAD_i32_1_1($4, 12), 12) + 23 & -4;
         $12 = $9 + $8 | 0;
         if (($12 | 0) <= ($2 | 0)) {
          break label$1417
         }
         $0 = $2 ? (($2 | 0) / 2 | 0) + $2 | 0 : 8;
         $0 = ($0 | 0) > ($12 | 0) ? $0 : $12;
         if (($0 | 0) <= ($2 | 0)) {
          break label$1417
         }
         $2 = ImGui__MemAlloc_28unsigned_20long_29($0);
         if ($1) {
          __memcpy($2, $1, $8);
          ImGui__MemFree_28void__29($1);
         }
         $1 = $2;
         break label$1315;
        }
        $0 = $2;
       }
       $2 = $1 + $8 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 0, $9);
       __memcpy($2 + 4 | 0, $4, Math_imul(SAFE_HEAP_LOAD_i32_1_1($4, 12), 12) + 16 | 0);
       $8 = $12;
       $2 = $0;
      }
      $0 = $2;
      $4 = SAFE_HEAP_LOAD_i32_4_4($4 - 4 | 0, 0) + $4 | 0;
      $12 = ($4 | 0) == ((SAFE_HEAP_LOAD_i32_4_4($13, 12176) + SAFE_HEAP_LOAD_i32_4_4($13, 12168) | 0) + 4 | 0);
      $4 = $12 ? 0 : $4;
      if (!$12) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_i32_4_4($13, 12168, $8);
    SAFE_HEAP_STORE_i32_4_4($13 + 12172 | 0, 0, $0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($13, 12176);
    SAFE_HEAP_STORE_i32_4_4($13, 12176, $1);
    if (!$0) {
     break label$511
    }
    ImGui__MemFree_28void__29($0);
   }
  }
  SAFE_HEAP_STORE_i32_1_1($7, 6999, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7508);
  label$520 : {
   if (!$0) {
    break label$520
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
    break label$520
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 7020);
   if (($0 | 0) > 0) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($2 + 7028 | 0, 0);
    while (1) {
     $1 = $0;
     label$523 : {
      $0 = $0 - 1 | 0;
      $2 = SAFE_HEAP_LOAD_i32_4_4($4 + ($0 << 2) | 0, 0);
      if (!$2) {
       break label$523
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 139)) {
       break label$523
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 8) & 262656) == 262656) {
       break label$523
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($2, 752);
      label$524 : {
       if ($4) {
        if (SAFE_HEAP_LOAD_i32_1_U_1($4, 139)) {
         break label$524
        }
       }
       $4 = $2;
      }
      ImGui__FocusWindow_28ImGuiWindow__29($4);
      break label$520;
     }
     if (($1 | 0) > 1) {
      continue
     }
     break;
    };
   }
   ImGui__FocusWindow_28ImGuiWindow__29(0);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($7 + 7048 | 0, 0);
  label$526 : {
   if (($0 | 0) >= 0) {
    break label$526
   }
   $2 = $0 + (($0 | 0) / 2 | 0) | 0;
   $2 = ($2 | 0) > 0 ? $2 : 0;
   if (($0 | 0) >= ($2 | 0)) {
    break label$526
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $0 = (((wasm2js_i32$2 = Math_imul($2, 84), wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($7 + 7052 | 0, 0);
   if ($1) {
    __memcpy($0, $1, Math_imul(SAFE_HEAP_LOAD_i32_4_4($7, 7044), 84));
    $1 = SAFE_HEAP_LOAD_i32_4_4($7, 7052);
    label$529 : {
     if (!$1) {
      break label$529
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$529
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 7048, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 7052, $0);
  }
  SAFE_HEAP_STORE_i32_4_4($7, 7044, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7 + 7484 | 0, 0);
  label$530 : {
   if (($0 | 0) >= 0) {
    break label$530
   }
   $2 = $0 + (($0 | 0) / 2 | 0) | 0;
   $2 = ($2 | 0) > 0 ? $2 : 0;
   if (($0 | 0) >= ($2 | 0)) {
    break label$530
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $0 = (((wasm2js_i32$2 = Math_imul($2, 36), wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($7 + 7488 | 0, 0);
   if ($1) {
    __memcpy($0, $1, Math_imul(SAFE_HEAP_LOAD_i32_4_4($7, 7480), 36));
    $1 = SAFE_HEAP_LOAD_i32_4_4($7, 7488);
    label$533 : {
     if (!$1) {
      break label$533
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$533
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 7484, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 7488, $0);
  }
  SAFE_HEAP_STORE_i32_4_4($7, 7480, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7 + 7448 | 0, 0);
  label$534 : {
   if (($0 | 0) >= 0) {
    break label$534
   }
   $2 = $0 + (($0 | 0) / 2 | 0) | 0;
   $2 = ($2 | 0) > 0 ? $2 : 0;
   if (($0 | 0) >= ($2 | 0)) {
    break label$534
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $0 = (((wasm2js_i32$2 = $2 << 2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($7 + 7452 | 0, 0);
   if ($1) {
    __memcpy($0, $1, SAFE_HEAP_LOAD_i32_4_4($7, 7444) << 2);
    $1 = SAFE_HEAP_LOAD_i32_4_4($7, 7452);
    label$537 : {
     if (!$1) {
      break label$537
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$537
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 7448, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 7452, $0);
  }
  SAFE_HEAP_STORE_i32_4_4($7, 7444, 0);
  if (!SAFE_HEAP_LOAD_i32_4_4($7, 7448)) {
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $0 = (((wasm2js_i32$2 = 32, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($7 + 7452 | 0, 0);
   if ($2) {
    __memcpy($0, $2, SAFE_HEAP_LOAD_i32_4_4($7, 7444) << 2);
    $2 = SAFE_HEAP_LOAD_i32_4_4($7, 7452);
    label$541 : {
     if (!$2) {
      break label$541
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$1) {
      break label$541
     }
     $1 = $1 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 7448, 8);
   SAFE_HEAP_STORE_i32_4_4($7, 7452, $0);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7 + 7452 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($7, 7444) << 2) | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 7444, SAFE_HEAP_LOAD_i32_4_4($7, 7444) + 1 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7 + 7460 | 0, 0);
  label$542 : {
   if (($0 | 0) >= 0) {
    break label$542
   }
   $2 = $0 + (($0 | 0) / 2 | 0) | 0;
   $2 = ($2 | 0) > 0 ? $2 : 0;
   if (($0 | 0) >= ($2 | 0)) {
    break label$542
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $0 = (((wasm2js_i32$2 = Math_imul($2, 48), wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($7 + 7464 | 0, 0);
   if ($1) {
    __memcpy($0, $1, Math_imul(SAFE_HEAP_LOAD_i32_4_4($7, 7456), 48));
    $1 = SAFE_HEAP_LOAD_i32_4_4($7, 7464);
    label$545 : {
     if (!$1) {
      break label$545
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$545
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($7, 7460, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 7464, $0);
  }
  SAFE_HEAP_STORE_i32_4_4($7, 7456, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($0, 12252, 0);
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 12248)) {
   SAFE_HEAP_STORE_i32_4_4($0, 7872, 7);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7120);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 108 | 0, 0);
   label$547 : {
    if (($2 | 0) < 0) {
     break label$547
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4(($0 + ($2 << 2) | 0) + 1140 | 0, 0);
    $2 = $3 == Math_fround(0.0);
    label$548 : {
     if ($2) {
      break label$548
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 140 | 0, 0);
     if (!($5 < $3)) {
      break label$547
     }
     $6 = Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0));
     if ($6 >= $3) {
      break label$547
     }
     $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 144 | 0, 0);
     if ($11 <= Math_fround(0.0)) {
      $2 = $5 > $6 & $3 >= $5;
      break label$548;
     }
     if ($5 > $6) {
      $2 = -1
     } else {
      $6 = Math_fround(Math_fround($6 - $5) / $11);
      label$551 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $2 = ~~$6;
        break label$551;
       }
       $2 = -2147483648;
      }
     }
     if ($3 < $5) {
      $4 = -1
     } else {
      $3 = Math_fround(Math_fround($3 - $5) / $11);
      label$554 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $4 = ~~$3;
        break label$554;
       }
       $4 = -2147483648;
      }
     }
     $2 = ($4 | 0) > ($2 | 0);
    }
    if (!$2) {
     break label$547
    }
    SAFE_HEAP_STORE_i32_1_1($0, 12248, 0);
   }
   if (!(!$1 | SAFE_HEAP_LOAD_f32_4_4($0 + 1040 | 0, 0) != Math_fround(0.0))) {
    SAFE_HEAP_STORE_i32_1_1($0, 12248, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 12252, $1);
   }
   SAFE_HEAP_STORE_i32_4_4($0 + 7384 | 0, 0, 1058642330);
   SAFE_HEAP_STORE_i32_4_4($0, 7300, SAFE_HEAP_LOAD_i32_4_4($0, 7300) | 64);
   ImGui__BeginTooltipEx_28int_2c_20int_29(0);
   SAFE_HEAP_STORE_i32_4_4($21, 0, $1);
   ImGui__Text_28char_20const__2c_20____29(14473, $21);
   ImGui__Text_28char_20const__2c_20____29(17139, 0);
   ImGui__TextColored_28ImVec4_20const__2c_20char_20const__2c_20____29((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + (!$1 << 4) | 0) + 5616 | 0, 18936, 0);
   ImGui__End_28_29();
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($0, 7112, 0);
  label$557 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 6984) | 0) != (SAFE_HEAP_LOAD_i32_4_4($0, 12272) + 1 | 0)) {
    break label$557
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7120);
   if (!$2) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7136)
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0 + 12280 | 0, 0) | 0) != ($2 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($0, 12280, $2);
    SAFE_HEAP_STORE_i32_4_4($0 + 12276 | 0, 0, -1);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12288 | 0, 0);
    label$560 : {
     if (($1 | 0) >= 0) {
      break label$560
     }
     $4 = $1 + (($1 | 0) / 2 | 0) | 0;
     $4 = ($4 | 0) > 0 ? $4 : 0;
     if (($1 | 0) >= ($4 | 0)) {
      break label$560
     }
     if ($0) {
      $1 = $0 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
     }
     $1 = (((wasm2js_i32$2 = $4 << 6, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
     $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 12292 | 0, 0);
     if ($8) {
      __memcpy($1, $8, SAFE_HEAP_LOAD_i32_4_4($0, 12284) << 6);
      $8 = SAFE_HEAP_LOAD_i32_4_4($0, 12292);
      label$563 : {
       if (!$8) {
        break label$563
       }
       $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$12) {
        break label$563
       }
       $12 = $12 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) - 1 | 0);
      }
      ((wasm2js_i32$1 = $8, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 12288, $4);
     SAFE_HEAP_STORE_i32_4_4($0, 12292, $1);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 12284, 0);
   }
   if (!$2) {
    break label$557
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12276 | 0, 0);
   label$564 : {
    if (($1 | 0) < 0) {
     break label$564
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0 + 12284 | 0, 0) | 0) <= ($1 | 0)) {
     break label$564
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 12292 | 0, 0) + ($1 << 6) | 0;
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 5)) {
     if ((SAFE_HEAP_LOAD_i32_1_1($4, 4) | 0) < 3) {
      break label$564
     }
    }
    SAFE_HEAP_STORE_i32_4_4($0, 12276, $1 + 1 | 0);
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12276);
   if (($1 | 0) == -1) {
    SAFE_HEAP_STORE_i32_4_4($0, 7112, $2)
   }
   if (($1 | 0) < 0) {
    break label$557
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0 + 12284 | 0, 0) | 0) <= ($1 | 0)) {
    break label$557
   }
   $2 = $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($0 + 12292 | 0, 0) + ($1 << 6) | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 7112, SAFE_HEAP_LOAD_i32_4_4($0, 0));
   SAFE_HEAP_STORE_i32_1_1($0, 4, SAFE_HEAP_LOAD_i32_1_U_1($0, 4) + 1 | 0);
  }
  SAFE_HEAP_STORE_i32_1_1($7, 6997, 1);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i64_8_4($0 + 7332 | 0, 0, 1137180672, 1137180672);
  SAFE_HEAP_STORE_i32_4_4($0 + 7308 | 0, 0, 4);
  SAFE_HEAP_STORE_i32_4_4($0, 7300, SAFE_HEAP_LOAD_i32_4_4($0, 7300) | 2);
  ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(3172, 0, 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 12180) | 0) > 0) {
   $0 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($7, 12188) + Math_imul($0, 20) | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0) == 1) {
     FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0]($7, $2)
    }
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 12180) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $21 + 16 | 0;
 }
 
 function ImGui__LoadIniSettingsFromMemory_28char_20const__2c_20unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = $1;
  if (!$1) {
   $3 = strlen($0)
  }
  $6 = $3 + 1 | 0;
  $10 = $3;
  $1 = SAFE_HEAP_LOAD_i32_4_4($4 + 12136 | 0, 0);
  label$2 : {
   if (($3 | 0) < ($1 | 0)) {
    break label$2
   }
   if ($1) {
    $2 = $1 + (($1 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $5 = ($2 | 0) > ($6 | 0) ? $2 : $6;
   if (($5 | 0) <= ($1 | 0)) {
    break label$2
   }
   if ($4) {
    $1 = $4 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$1 = $5, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($4 + 12140 | 0, 0);
   if ($1) {
    __memcpy($3, $1, SAFE_HEAP_LOAD_i32_4_4($4, 12132));
    $2 = SAFE_HEAP_LOAD_i32_4_4($4, 12140);
    label$7 : {
     if (!$2) {
      break label$7
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$1) {
      break label$7
     }
     $1 = $1 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($4, 12136, $5);
   SAFE_HEAP_STORE_i32_4_4($4, 12140, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($4, 12132, $6);
  $11 = __memcpy(SAFE_HEAP_LOAD_i32_4_4($4 + 12140 | 0, 0), $0, $10);
  $8 = $11 + $10 | 0;
  SAFE_HEAP_STORE_i32_1_1($8, 0, 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 12144) | 0) > 0) {
   $1 = 0;
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($4, 12152) + Math_imul($1, 36) | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
    if ($2) {
     FUNCTION_TABLE[$2 | 0]($4, $3)
    }
    $1 = $1 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 12144) | 0) > ($1 | 0)) {
     continue
    }
    break;
   };
  }
  label$11 : {
   if (($10 | 0) <= 0) {
    break label$11
   }
   $3 = 0;
   $2 = $11;
   $1 = 0;
   label$12 : while (1) {
    $6 = $1;
    $5 = $3;
    $1 = $2;
    while (1) {
     label$14 : {
      switch (SAFE_HEAP_LOAD_i32_1_U_1($1, 0) - 10 | 0) {
      default:
       $2 = $1;
       label$16 : {
        if ($1 >>> 0 >= $8 >>> 0) {
         break label$16
        }
        $9 = $8;
        $3 = $1;
        while (1) {
         label$18 : {
          $2 = $3;
          switch (SAFE_HEAP_LOAD_i32_1_U_1($2, 0) - 10 | 0) {
          case 0:
          case 3:
           break label$16;
          default:
           break label$18;
          };
         }
         $3 = $3 + 1 | 0;
         if ($8 >>> 0 > $3 >>> 0) {
          continue
         }
         break;
        };
        $2 = $9;
       }
       $9 = $2;
       SAFE_HEAP_STORE_i32_1_1($2, 0, 0);
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
       label$19 : {
        label$20 : {
         if (($2 | 0) == 59) {
          break label$20
         }
         label$21 : {
          if (($2 | 0) != 91 | $1 >>> 0 >= $9 >>> 0) {
           break label$21
          }
          $3 = $9 - 1 | 0;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 0) | 0) != 93) {
           break label$21
          }
          SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
          $12 = 0;
          $2 = $1 + 1 | 0;
          $7 = memchr($2, 93, $3 - $2 | 0);
          if ($7) {
           $1 = $7 + 1 | 0;
           $12 = memchr($1, 91, $3 - $1 | 0);
          }
          if (!$7) {
           break label$20
          }
          $1 = $6;
          if (!$12) {
           break label$19
          }
          SAFE_HEAP_STORE_i32_1_1($7, 0, 0);
          $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          $3 = $2;
          $2 = -1;
          while (1) {
           $1 = $3;
           $3 = $1 + 1 | 0;
           $5 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
           if ($5) {
            label$26 : {
             if (($5 | 0) != 35) {
              break label$26
             }
             if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 0) | 0) != 35) {
              break label$26
             }
             $2 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) == 35 ? -1 : $2;
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4((($5 ^ $2 & 255) << 2) + 19360 | 0, 0) ^ $2 >>> 8;
           }
           if ($5) {
            continue
           }
           break;
          };
          $6 = SAFE_HEAP_LOAD_i32_4_4($7, 12144);
          $1 = 0;
          label$29 : {
           if (($6 | 0) <= 0) {
            break label$29
           }
           $5 = $2 ^ -1;
           $3 = SAFE_HEAP_LOAD_i32_4_4($7 + 12152 | 0, 0);
           $1 = 0;
           label$30 : {
            while (1) {
             $2 = $3 + Math_imul($1, 36) | 0;
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0) == ($5 | 0)) {
              break label$30
             }
             $1 = $1 + 1 | 0;
             if (($1 | 0) != ($6 | 0)) {
              continue
             }
             break;
            };
            $1 = 0;
            break label$29;
           }
           $1 = $2;
          }
          $5 = 0;
          if (!$1) {
           break label$19
          }
          $5 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0]($4, $1, $12 + 1 | 0) | 0;
          break label$19;
         }
         if (!$6 | !$5) {
          break label$20
         }
         FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($6, 20) | 0]($4, $6, $5, $1);
        }
        $1 = $6;
       }
       $3 = $5;
       $2 = $9 + 1 | 0;
       if ($8 >>> 0 > $2 >>> 0) {
        continue label$12
       }
       break label$11;
      case 0:
      case 3:
       break label$14;
      };
     }
     $1 = $1 + 1 | 0;
     continue;
    };
   };
  }
  SAFE_HEAP_STORE_i32_1_1($4, 12125, 1);
  __memcpy($11, $0, $10);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 12144) | 0) > 0) {
   $1 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($4, 12152) + Math_imul($1, 36) | 0;
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
    if ($0) {
     FUNCTION_TABLE[$0 | 0]($4, $2)
    }
    $0 = $1 + 1 | 0;
    $1 = $0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 12144) | 0) > ($1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function NavUpdateWindowingHighlightWindow_28int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 7844);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 8)) {
   $5 = SAFE_HEAP_LOAD_i32_2_2($1, 156);
   $2 = $5 + $0 | 0;
   label$2 : {
    label$3 : {
     if (($2 | 0) < 0) {
      break label$3
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 7020);
     while (1) {
      if (($2 | 0) >= ($4 | 0)) {
       break label$3
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 7028) + ($2 << 2) | 0, 0);
      label$5 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
        break label$5
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 736) | 0) != ($1 | 0)) {
        break label$5
       }
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 10 | 0, 0) & 8)) {
        break label$2
       }
      }
      $2 = $0 + $2 | 0;
      if (($2 | 0) >= 0) {
       continue
      }
      break;
     };
    }
    $1 = 0;
   }
   label$6 : {
    if ($1) {
     break label$6
    }
    $2 = 0;
    if (($0 | 0) < 0) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7020) - 1 | 0
    }
    label$8 : {
     if (($2 | 0) < 0) {
      break label$8
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 7020);
     while (1) {
      if (($2 | 0) == ($5 | 0) | ($2 | 0) >= ($4 | 0)) {
       break label$8
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 7028) + ($2 << 2) | 0, 0);
      label$10 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
        break label$10
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 736) | 0) != ($1 | 0)) {
        break label$10
       }
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 10 | 0, 0) & 8)) {
        break label$6
       }
      }
      $2 = $0 + $2 | 0;
      if (($2 | 0) >= 0) {
       continue
      }
      break;
     };
    }
    $1 = 0;
   }
   if ($1) {
    SAFE_HEAP_STORE_i32_4_4($3, 7844, $1);
    SAFE_HEAP_STORE_i32_4_4($3, 7848, $1);
   }
   SAFE_HEAP_STORE_i32_1_1($3, 7864, 0);
  }
 }
 
 function ImGui__NavCalcPreferredRefPos_28_29($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0);
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  label$1 : {
   label$2 : {
    $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    label$3 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1($5, 7570)) {
      break label$3
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 7571)) {
      break label$3
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($5, 7508);
     if ($2) {
      break label$2
     }
    }
    label$4 : {
     if (!(SAFE_HEAP_LOAD_f32_4_4($5 + 228 | 0, 0) >= Math_fround(-256.0e3))) {
      break label$4
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($5 + 232 | 0, 0) >= Math_fround(-256.0e3))) {
      break label$4
     }
     SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($5, 228), i64toi32_i32$HIGH_BITS);
     break label$1;
    }
    SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($5, 8172), i64toi32_i32$HIGH_BITS);
    break label$1;
   }
   $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 228 | 0, 0);
   $6 = $2 + (SAFE_HEAP_LOAD_i32_4_4($5, 7564) << 4) | 0;
   $1 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($6 + 776 | 0, 0));
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 224 | 0, 0);
   $4 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($6 + 772 | 0, 0));
   $7 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($6 + 768 | 0, 0));
   $8 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($6 + 764 | 0, 0));
   label$5 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 536) | 0) == (SAFE_HEAP_LOAD_i32_4_4($5, 6984) | 0)) {
     break label$5
    }
    if (SAFE_HEAP_LOAD_f32_4_4($2, 104) == Math_fround(3402823466385288598117041.0e14)) {
     if (SAFE_HEAP_LOAD_f32_4_4($2 + 108 | 0, 0) == Math_fround(3402823466385288598117041.0e14)) {
      break label$5
     }
    }
    CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($9 + 8 | 0, $2);
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 88) - SAFE_HEAP_LOAD_f32_4_4($9, 8));
    $8 = Math_fround($8 + $3);
    $10 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 92 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($9, 12));
    $7 = Math_fround($7 + $10);
    $4 = Math_fround($4 + $3);
    $1 = Math_fround($1 + $10);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5 + 7504 | 0, 0), 0);
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
   $10 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($2 + 16 | 0, 0));
   $12 = $1;
   $11 = SAFE_HEAP_LOAD_f32_4_4($5 + 5480 | 0, 0);
   $1 = Math_fround($1 - $7);
   $1 = Math_fround($12 - ($1 > $11 ? $11 : $1));
   $1 = $1 < $3 ? $3 : $1 > $10 ? $10 : $1;
   label$8 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
     $6 = ~~$1;
     break label$8;
    }
    $6 = -2147483648;
   }
   $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 5476 | 0, 0);
   $3 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
   $1 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($6 | 0));
   $3 = Math_fround($1 + $3);
   $7 = Math_fround($7 * Math_fround(4.0));
   $4 = Math_fround($4 - $8);
   $4 = Math_fround($8 + ($4 > $7 ? $7 : $4));
   $4 = $1 > $4 ? $1 : $3 < $4 ? $3 : $4;
   label$10 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $6 = ~~$4;
     break label$10;
    }
    $6 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($6 | 0));
  }
  __stack_pointer = $9 + 16 | 0;
 }
 
 function ImGui__BeginTooltipEx_28int_2c_20int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0;
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7877)) {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7878)) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_i64_8_4($1 + 7324 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1 + 7304 | 0, 0, 1);
   SAFE_HEAP_STORE_i32_4_4($1, 7300, SAFE_HEAP_LOAD_i32_4_4($1, 7300) | 65);
   SAFE_HEAP_STORE_f32_4_4($1 + 7384 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 5692 | 0, 0) * Math_fround(.6000000238418579)));
   $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5600 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($1 + 7320 | 0, 0, Math_fround(Math_fround($7 * Math_fround(8.0)) + SAFE_HEAP_LOAD_f32_4_4($1 + 232 | 0, 0)));
   SAFE_HEAP_STORE_f32_4_4($1 + 7316 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 228 | 0, 0) + Math_fround($7 * Math_fround(16.0))));
   $0 = 1;
  }
  SAFE_HEAP_STORE_i32_4_4($3, 16, SAFE_HEAP_LOAD_i32_2_2($1, 12078));
  ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3 + 32 | 0, 16, 12868, $3 + 16 | 0);
  label$3 : {
   if (!($0 & 1)) {
    break label$3
   }
   $2 = $3 + 32 | 0;
   $0 = -1;
   while (1) {
    $5 = $2;
    $2 = $2 + 1 | 0;
    $4 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
    if ($4) {
     label$7 : {
      if (($4 | 0) != 35) {
       break label$7
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 35) {
       break label$7
      }
      $0 = (SAFE_HEAP_LOAD_i32_1_U_1($5, 2) | 0) == 35 ? -1 : $0;
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
    }
    if ($4) {
     continue
    }
    break;
   };
   $4 = $0 ^ -1;
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 7064 | 0, 0);
   $2 = $8;
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 7056);
   if ($5) {
    $0 = $5;
    while (1) {
     $6 = $0 >>> 1 | 0;
     $9 = ($6 << 3) + $2 | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4($9, 0) >>> 0 < $4 >>> 0;
     $2 = $10 ? $9 + 8 | 0 : $2;
     $0 = $10 ? $0 + ($6 ^ -1) | 0 : $6;
     if ($0) {
      continue
     }
     break;
    };
   }
   $0 = 0;
   label$12 : {
    if (($2 | 0) == (($5 << 3) + $8 | 0)) {
     break label$12
    }
    $0 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != ($4 | 0)) {
     break label$12
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
   }
   if (!$0) {
    break label$3
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 138)) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_1_1($0, 172, 1);
   SAFE_HEAP_STORE_i32_1_1($0, 145, 1);
   $0 = SAFE_HEAP_LOAD_i32_2_U_2($1, 12078) + 1 | 0;
   SAFE_HEAP_STORE_i32_2_2($1, 12078, $0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $0 << 16 >> 16);
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3 + 32 | 0, 16, 12868, $3);
  }
  ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($3 + 32 | 0, 0, 34341703);
  __stack_pointer = $3 + 48 | 0;
 }
 
 function ImGui__End_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7044) | 0) <= 1) {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 6997)) {
     break label$1
    }
   }
   if (SAFE_HEAP_LOAD_i32_4_4($3 + 368 | 0, 0)) {
    ImGui__EndColumns_28_29()
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
   SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
   ImDrawList__PopClipRect_28_29(SAFE_HEAP_LOAD_i32_4_4($1, 580));
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 580);
   $2 = ((SAFE_HEAP_LOAD_i32_4_4($2, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($2 + 68 | 0, 0) | 0) - 16 | 0;
   $5 = SAFE_HEAP_LOAD_i64_8_4($2, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_4($1 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 8), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1, 496, $5, $4);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($3 + 11 | 0, 0) & 1)) {
    ImGui__LogFinish_28_29()
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 7052 | 0, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 7044);
   $2 = $5 - 1 | 0;
   $1 = $4 + Math_imul($2, 84) | 0;
   SAFE_HEAP_STORE_i64_8_4($0, 7240, SAFE_HEAP_LOAD_i64_8_4($1, 4), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0 + 7296 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + 60 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($0 + 7288 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 52 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 7280 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 44 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 7272 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 36 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 7264 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 28 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 7256 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 20 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 7248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 12 | 0, 0), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
   if ($1 & 268435456) {
    SAFE_HEAP_STORE_i32_4_4($0, 7492, SAFE_HEAP_LOAD_i32_4_4($0, 7492) - 1 | 0)
   }
   if ($1 & 67108864) {
    SAFE_HEAP_STORE_i32_4_4($0, 7480, SAFE_HEAP_LOAD_i32_4_4($0, 7480) - 1 | 0)
   }
   SAFE_HEAP_STORE_i32_4_4($0, 7044, $2);
   $1 = 0;
   if ($2) {
    $1 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0, 7052) + Math_imul($5, 84) | 0) - 168 | 0, 0)
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   SAFE_HEAP_STORE_i32_4_4($0, 7080, $1);
   if ($1) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 372 | 0, 0);
    if (($3 | 0) == -1) {
     $4 = 0
    } else {
     $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 8064 | 0, 0) + Math_imul($3, 456) | 0
    }
    SAFE_HEAP_STORE_i32_4_4($0, 8036, $4);
    $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
    $1 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
    if ($1) {
     $6 = Math_fround($6 * SAFE_HEAP_LOAD_f32_4_4($1, 572))
    }
    SAFE_HEAP_STORE_f32_4_4($0, 6468, $6);
    SAFE_HEAP_STORE_f32_4_4($0 + 6488 | 0, 0, $6);
    return;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 8036, 0);
  }
 }
 
 function ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = Math_fround(0), $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0.0, $50 = Math_fround(0), $51 = Math_fround(0), $52 = 0, $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), $56 = Math_fround(0), $57 = 0, $58 = 0, $59 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $9 = __stack_pointer - 272 | 0;
  __stack_pointer = $9;
  $15 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = $0;
  $6 = -1;
  while (1) {
   $7 = $4;
   $4 = $4 + 1 | 0;
   $10 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0);
   if ($10) {
    label$4 : {
     if (($10 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 35) {
      break label$4
     }
     $6 = (SAFE_HEAP_LOAD_i32_1_U_1($7, 2) | 0) == 35 ? -1 : $6;
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4((($10 ^ $6 & 255) << 2) + 19360 | 0, 0) ^ $6 >>> 8;
   }
   if ($10) {
    continue
   }
   break;
  };
  $12 = $6 ^ -1;
  $7 = SAFE_HEAP_LOAD_i32_4_4($15 + 7064 | 0, 0);
  $10 = $7;
  $3 = SAFE_HEAP_LOAD_i32_4_4($15, 7056);
  if ($3) {
   $4 = $7;
   $6 = $3;
   while (1) {
    $21 = $6 >>> 1 | 0;
    $10 = ($21 << 3) + $4 | 0;
    $20 = SAFE_HEAP_LOAD_i32_4_4($10, 0) >>> 0 < $12 >>> 0;
    $4 = $20 ? $10 + 8 | 0 : $4;
    $10 = $4;
    $6 = $20 ? $6 + ($21 ^ -1) | 0 : $21;
    if ($6) {
     continue
    }
    break;
   };
  }
  $4 = 0;
  label$9 : {
   if (($7 + ($3 << 3) | 0) == ($10 | 0)) {
    break label$9
   }
   $4 = 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($10, 0) | 0) != ($12 | 0)) {
    break label$9
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($10, 4);
  }
  $35 = $4;
  label$11 : {
   if (!$4) {
    if ($15) {
     $4 = $15 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
    }
    $3 = $15 + 7056 | 0;
    $6 = (((wasm2js_i32$1 = 808, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $4 = $6;
    SAFE_HEAP_STORE_i64_8_4($4, 12, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($4 + 360 | 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 352 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 272 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 280 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($4 + 288 | 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 308 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 316 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 324 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 332 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($4 + 340 | 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 764 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 772 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 780 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 788 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 20 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 28 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 36 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 44 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 52 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 60 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 128 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 120 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 112 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 104 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 96 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4, 88, 0, 0);
    memset($4 + 180 | 0, 0, 84);
    memset($4 + 392 | 0, 0, 144);
    SAFE_HEAP_STORE_i64_8_4($4 + 564 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4 + 556 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($4, 548, 0, 0);
    $20 = memset($4 + 584 | 0, 0, 144);
    $10 = memset($4, 0, 808);
    $4 = $0;
    $7 = strlen($4);
    $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($12) {
     $12 = $12 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) + 1 | 0);
    }
    $7 = $7 + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($10, 0, __memcpy((((wasm2js_i32$2 = $7, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0), $4, $7));
    SAFE_HEAP_STORE_i32_4_4($10, 76, strlen($4) + 1 | 0);
    $12 = -1;
    while (1) {
     $7 = $4;
     $4 = $4 + 1 | 0;
     $21 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0);
     if ($21) {
      label$5 : {
       if (($21 | 0) != 35) {
        break label$5
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 35) {
        break label$5
       }
       $12 = (SAFE_HEAP_LOAD_i32_1_U_1($7, 2) | 0) == 35 ? -1 : $12;
      }
      $12 = SAFE_HEAP_LOAD_i32_4_4((($21 ^ $12 & 255) << 2) + 19360 | 0, 0) ^ $12 >>> 8;
     }
     if ($21) {
      continue
     }
     break;
    };
    SAFE_HEAP_STORE_i32_4_4($10, 4, $12 ^ -1);
    $7 = SAFE_HEAP_LOAD_i32_4_4($10, 196);
    $4 = SAFE_HEAP_LOAD_i32_4_4($10, 200);
    label$80 : {
     if (($7 | 0) != ($4 | 0)) {
      break label$80
     }
     $12 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
     $7 = $7 + 1 | 0;
     $7 = ($7 | 0) < ($12 | 0) ? $12 : $7;
     if (($4 | 0) >= ($7 | 0)) {
      break label$80
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($4) {
      $4 = $4 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
     }
     $4 = (((wasm2js_i32$1 = $7 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     $12 = SAFE_HEAP_LOAD_i32_4_4($10, 204);
     if ($12) {
      __memcpy($4, $12, SAFE_HEAP_LOAD_i32_4_4($10, 196) << 2);
      $12 = SAFE_HEAP_LOAD_i32_4_4($10, 204);
      label$13 : {
       if (!$12) {
        break label$13
       }
       $21 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$21) {
        break label$13
       }
       $21 = $21 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($21, 0, SAFE_HEAP_LOAD_i32_4_4($21, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $12, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($10, 200, $7);
     SAFE_HEAP_STORE_i32_4_4($10, 204, $4);
    }
    $7 = $10 + 204 | 0;
    SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 0) + (SAFE_HEAP_LOAD_i32_4_4($10, 196) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($10, 4));
    $12 = SAFE_HEAP_LOAD_i32_4_4($10, 196);
    SAFE_HEAP_STORE_i32_4_4($10, 196, $12 + 1 | 0);
    $4 = 14982;
    $17 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 0) + ($12 << 2) | 0, 0) ^ -1;
    $12 = $17;
    while (1) {
     $7 = $4;
     $4 = $4 + 1 | 0;
     $21 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0);
     if ($21) {
      label$17 : {
       if (($21 | 0) != 35) {
        break label$17
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 35) {
        break label$17
       }
       $12 = (SAFE_HEAP_LOAD_i32_1_U_1($7, 2) | 0) == 35 ? $17 : $12;
      }
      $12 = SAFE_HEAP_LOAD_i32_4_4((($21 ^ $12 & 255) << 2) + 19360 | 0, 0) ^ $12 >>> 8;
     }
     if (($7 | 0) != 14987) {
      continue
     }
     break;
    };
    $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = $12 ^ -1;
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 7136) | 0) == ($4 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($7, 7140, $4)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 7196) | 0) == ($4 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($7, 7200, 1)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 7112) | 0) == ($4 | 0)) {
     ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4, 11, 14982)
    }
    SAFE_HEAP_STORE_i64_8_4($10, 112, 1056964608, 1056964608);
    SAFE_HEAP_STORE_i64_8_4($10, 104, 2139095039, 2139095039);
    SAFE_HEAP_STORE_i32_4_4($10, 80, $4);
    SAFE_HEAP_STORE_i32_4_4($10, 168, -1);
    SAFE_HEAP_STORE_i32_2_2($10, 164, 65535);
    SAFE_HEAP_STORE_i64_8_4($10, 188, 2139095039, 2139095039);
    SAFE_HEAP_STORE_i32_4_4($10, 580, $20);
    SAFE_HEAP_STORE_i64_8_4($10, 572, 1065353216, -1);
    SAFE_HEAP_STORE_i64_8_4($10, 536, -1, -1082130432);
    SAFE_HEAP_STORE_i64_8_4($10, 180, 2139095039, 2139095039);
    SAFE_HEAP_STORE_i32_4_4($10 + 628 | 0, 0, $15 + 6476 | 0);
    SAFE_HEAP_STORE_i32_4_4($10 + 632 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
    SAFE_HEAP_STORE_i32_4_4($10, 176, SAFE_HEAP_LOAD_i32_1_U_1($10 + 179 | 0, 0) << 24 | 986895);
    SAFE_HEAP_STORE_i32_4_4($9, 144, $6);
    SAFE_HEAP_STORE_i32_4_4($6, 8, $2);
    $12 = SAFE_HEAP_LOAD_i32_4_4($6, 4);
    $10 = $6;
    $4 = $3;
    $21 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
    $3 = $21;
    $6 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    if ($6) {
     $7 = $6;
     while (1) {
      $20 = $7 >>> 1 | 0;
      $23 = ($20 << 3) + $3 | 0;
      $17 = SAFE_HEAP_LOAD_i32_4_4($23, 0) >>> 0 < $12 >>> 0;
      $3 = $17 ? $23 + 8 | 0 : $3;
      $7 = $17 ? $7 + ($20 ^ -1) | 0 : $20;
      if ($7) {
       continue
      }
      break;
     };
    }
    __inlined_func$ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29 : {
     label$3 : {
      if (($3 | 0) != (($6 << 3) + $21 | 0)) {
       if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) == ($12 | 0)) {
        break label$3
       }
      }
      $7 = $3 - $21 >> 3;
      $3 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
      label$51 : {
       if (($3 | 0) != ($6 | 0)) {
        break label$51
       }
       $17 = $3;
       $3 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
       $6 = $6 + 1 | 0;
       $6 = ($3 | 0) > ($6 | 0) ? $3 : $6;
       if (($17 | 0) >= ($6 | 0)) {
        break label$51
       }
       $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($3) {
        $3 = $3 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
       }
       $3 = (((wasm2js_i32$1 = $6 << 3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
       $21 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
       if ($21) {
        __memcpy($3, $21, SAFE_HEAP_LOAD_i32_4_4($4, 0) << 3);
        $21 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
        label$10 : {
         if (!$21) {
          break label$10
         }
         $20 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!$20) {
          break label$10
         }
         $20 = $20 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($20, 0, SAFE_HEAP_LOAD_i32_4_4($20, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $21, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
       SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      if (($7 | 0) < ($6 | 0)) {
       $3 = SAFE_HEAP_LOAD_i32_4_4($4, 8) + ($7 << 3) | 0;
       memmove($3 + 8 | 0, $3, $6 - $7 << 3);
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4($4, 8) + ($7 << 3) | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 4, $10);
      SAFE_HEAP_STORE_i32_4_4($6, 0, $12);
      SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
      break __inlined_func$ImGuiStorage__SetVoidPtr_28unsigned_20int_2c_20void__29;
     }
     SAFE_HEAP_STORE_i32_4_4($3, 4, $10);
    }
    $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($10 + 7504 | 0, 0), 0);
    $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 8 | 0, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($9, 144);
    SAFE_HEAP_STORE_f32_4_4($4, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 4) + Math_fround(60.0)));
    SAFE_HEAP_STORE_f32_4_4($4 + 16 | 0, 0, Math_fround($5 + Math_fround(60.0)));
    label$141 : {
     if ($2 & 256) {
      break label$141
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($10 + 12164 | 0, 0);
     $12 = $7 + 4 | 0;
     $6 = $7 ? $12 : 0;
     label$15 : {
      if (!$7) {
       $7 = $6;
       break label$15;
      }
      $21 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
      while (1) {
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) == ($21 | 0)) {
        $7 = $6;
        break label$15;
       }
       $3 = SAFE_HEAP_LOAD_i32_4_4($6 - 4 | 0, 0) + $6 | 0;
       $20 = SAFE_HEAP_LOAD_i32_4_4($10, 12156) + $12 | 0;
       $6 = ($20 | 0) != ($3 | 0) ? $3 : 0;
       $7 = $6;
       if (($3 | 0) != ($20 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$7) {
      break label$141
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($15 + 12164 | 0, 0);
     SAFE_HEAP_STORE_i32_4_4($4, 176, SAFE_HEAP_LOAD_i32_4_4($4, 176) & -263173);
     SAFE_HEAP_STORE_i32_4_4($4, 576, $7 - $6 | 0);
     $6 = SAFE_HEAP_LOAD_i32_2_2($7, 4);
     SAFE_HEAP_STORE_f32_4_4($4, 16, Math_fround(SAFE_HEAP_LOAD_i32_2_2($7 + 6 | 0, 0) | 0));
     SAFE_HEAP_STORE_f32_4_4($4, 12, Math_fround($6 | 0));
     $6 = SAFE_HEAP_LOAD_i32_2_2($7, 8);
     label$19 : {
      if (($6 | 0) <= 0) {
       break label$19
      }
      $3 = SAFE_HEAP_LOAD_i32_2_2($7 + 10 | 0, 0);
      if (($3 | 0) <= 0) {
       break label$19
      }
      $5 = Math_fround($3 | 0);
      SAFE_HEAP_STORE_f32_4_4($4 + 32 | 0, 0, $5);
      $8 = Math_fround($6 | 0);
      SAFE_HEAP_STORE_f32_4_4($4, 28, $8);
      SAFE_HEAP_STORE_f32_4_4($4 + 24 | 0, 0, $5);
      SAFE_HEAP_STORE_f32_4_4($4, 20, $8);
     }
     SAFE_HEAP_STORE_i32_1_1($4, 141, SAFE_HEAP_LOAD_i32_1_U_1($7, 12));
    }
    $6 = SAFE_HEAP_LOAD_i64_8_4($4, 12);
    $7 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_4($4 + 232 | 0, 0, $6, $7);
    SAFE_HEAP_STORE_i64_8_4($4 + 224 | 0, 0, $6, $7);
    label$202 : {
     if ($2 & 64) {
      SAFE_HEAP_STORE_i32_1_1($4, 167, 0);
      SAFE_HEAP_STORE_i32_2_2($4, 164, 514);
      break label$202;
     }
     if (SAFE_HEAP_LOAD_f32_4_4($4, 20) <= Math_fround(0.0)) {
      SAFE_HEAP_STORE_i32_1_1($4, 164, 2)
     }
     if (SAFE_HEAP_LOAD_f32_4_4($4 + 24 | 0, 0) <= Math_fround(0.0)) {
      SAFE_HEAP_STORE_i32_1_1($4, 165, 2)
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($4, 164) | 0) <= 0) {
      $6 = (SAFE_HEAP_LOAD_i32_1_1($4, 165) | 0) > 0
     } else {
      $6 = 1
     }
     SAFE_HEAP_STORE_i32_1_1($4, 167, $6);
    }
    label$25 : {
     if ($2 & 8192) {
      $10 = $9 + 144 | 0;
      $4 = $15 + 7008 | 0;
      $6 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      label$12 : {
       if (!$6) {
        $7 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
        label$33 : {
         if (($7 | 0) != ($6 | 0)) {
          break label$33
         }
         $3 = $7;
         $7 = $7 ? $7 + (($7 | 0) / 2 | 0) | 0 : 8;
         $6 = $6 + 1 | 0;
         $6 = ($6 | 0) < ($7 | 0) ? $7 : $6;
         if (($3 | 0) >= ($6 | 0)) {
          break label$33
         }
         $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if ($7) {
          $7 = $7 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) + 1 | 0);
         }
         $7 = (((wasm2js_i32$1 = $6 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
         $3 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
         if ($3) {
          __memcpy($7, $3, SAFE_HEAP_LOAD_i32_4_4($4, 0) << 2);
          $3 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
          label$84 : {
           if (!$3) {
            break label$84
           }
           $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
           if (!$12) {
            break label$84
           }
           $12 = $12 + 876 | 0;
           SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) - 1 | 0);
          }
          ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
         }
         SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
         SAFE_HEAP_STORE_i32_4_4($4, 8, $7);
        }
        $6 = SAFE_HEAP_LOAD_i32_4_4($4, 8) + (SAFE_HEAP_LOAD_i32_4_4($4, 0) << 2) | 0;
        break label$12;
       }
       $7 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
       label$95 : {
        if (($7 | 0) != ($6 | 0)) {
         break label$95
        }
        $3 = $7;
        $7 = $7 ? $7 + (($7 | 0) / 2 | 0) | 0 : 8;
        $6 = $6 + 1 | 0;
        $6 = ($6 | 0) < ($7 | 0) ? $7 : $6;
        if (($3 | 0) >= ($6 | 0)) {
         break label$95
        }
        $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($7) {
         $7 = $7 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) + 1 | 0);
        }
        $7 = (((wasm2js_i32$1 = $6 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
        $3 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
        if ($3) {
         __memcpy($7, $3, SAFE_HEAP_LOAD_i32_4_4($4, 0) << 2);
         $3 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
         label$146 : {
          if (!$3) {
           break label$146
          }
          $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          if (!$12) {
           break label$146
          }
          $12 = $12 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) - 1 | 0);
         }
         ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
        }
        SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
        SAFE_HEAP_STORE_i32_4_4($4, 8, $7);
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       if (($6 | 0) > 0) {
        $7 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
        memmove($7 + 4 | 0, $7, $6 << 2);
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
      }
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0));
      SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
      break label$25;
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($15, 7008);
     $4 = SAFE_HEAP_LOAD_i32_4_4($15 + 7012 | 0, 0);
     label$27 : {
      if (($6 | 0) != ($4 | 0)) {
       break label$27
      }
      $7 = $4;
      $4 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
      $6 = $6 + 1 | 0;
      $4 = ($4 | 0) > ($6 | 0) ? $4 : $6;
      if (($7 | 0) >= ($4 | 0)) {
       break label$27
      }
      if ($10) {
       $6 = $10 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) + 1 | 0);
      }
      $6 = (((wasm2js_i32$1 = $4 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $7 = SAFE_HEAP_LOAD_i32_4_4($15 + 7016 | 0, 0);
      if ($7) {
       __memcpy($6, $7, SAFE_HEAP_LOAD_i32_4_4($15, 7008) << 2);
       $7 = SAFE_HEAP_LOAD_i32_4_4($15, 7016);
       label$32 : {
        if (!$7) {
         break label$32
        }
        $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$10) {
         break label$32
        }
        $10 = $10 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $7, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($15, 7012, $4);
      SAFE_HEAP_STORE_i32_4_4($15, 7016, $6);
     }
     SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($15 + 7016 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($15, 7008) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($9, 144));
     SAFE_HEAP_STORE_i32_4_4($15, 7008, SAFE_HEAP_LOAD_i32_4_4($15, 7008) + 1 | 0);
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($9, 144);
    UpdateWindowInFocusOrderList_28ImGuiWindow__2c_20bool_2c_20int_29($4, 1, SAFE_HEAP_LOAD_i32_4_4($4, 8));
    $3 = SAFE_HEAP_LOAD_i32_4_4($9, 144);
    break label$11;
   }
   UpdateWindowInFocusOrderList_28ImGuiWindow__2c_20bool_2c_20int_29($35, 0, $2);
   $3 = $35;
  }
  $4 = ($2 & 786944) == 786944 ? $2 | 6 : $2;
  $2 = SAFE_HEAP_LOAD_i32_4_4($15, 6984);
  $7 = 0;
  if (!SAFE_HEAP_LOAD_i32_4_4($15, 7044)) {
   $7 = (SAFE_HEAP_LOAD_i32_1_U_1($15, 6997) | 0) != 0
  }
  $6 = SAFE_HEAP_LOAD_i32_4_4($3, 536);
  SAFE_HEAP_STORE_i32_1_1($3, 146, $7);
  $7 = $2 - 1 | 0;
  if ($4 & 67108864) {
   $17 = SAFE_HEAP_LOAD_i32_4_4($3, 160);
   $10 = SAFE_HEAP_LOAD_i32_4_4($15 + 7476 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($15, 7480), 36) | 0;
   $7 = ($17 | 0) != (SAFE_HEAP_LOAD_i32_4_4($10, 0) | 0) | (SAFE_HEAP_LOAD_i32_4_4($10, 4) | 0) != ($3 | 0) | ($6 | 0) < ($7 | 0);
  } else {
   $7 = ($6 | 0) < ($7 | 0)
  }
  $43 = $7;
  SAFE_HEAP_STORE_i32_1_1($3, 144, $7);
  if ($7) {
   SAFE_HEAP_STORE_i32_4_4($3, 176, SAFE_HEAP_LOAD_i32_4_4($3, 176) | 526344)
  }
  $40 = ($2 | 0) == ($6 | 0);
  label$37 : {
   if (!$40) {
    SAFE_HEAP_STORE_i32_4_4($3, 536, $2);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
    $44 = SAFE_HEAP_LOAD_f64_8_8($15, 6976);
    SAFE_HEAP_STORE_i32_2_2($3, 152, 0);
    SAFE_HEAP_STORE_f32_4_4($3, 540, Math_fround($44));
    $2 = SAFE_HEAP_LOAD_i32_4_4($15, 7068);
    SAFE_HEAP_STORE_i32_4_4($15, 7068, $2 + 1 | 0);
    SAFE_HEAP_STORE_i32_2_2($3, 154, $2);
    break label$37;
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
  }
  $21 = $4;
  $2 = SAFE_HEAP_LOAD_i32_4_4($15, 7044);
  if ($2) {
   $6 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($15 + 7052 | 0, 0) + Math_imul($2, 84) | 0) - 84 | 0, 0)
  } else {
   $6 = 0
  }
  if ($40) {
   $26 = SAFE_HEAP_LOAD_i32_4_4($3, 728)
  } else {
   $26 = $21 & 83886080 ? $6 : 0
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 196);
  if (!$4) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 200 | 0, 0);
   label$44 : {
    if (($2 | 0) != ($4 | 0)) {
     break label$44
    }
    $7 = $2;
    $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $4 = $4 + 1 | 0;
    $2 = ($2 | 0) > ($4 | 0) ? $2 : $4;
    if (($7 | 0) >= ($2 | 0)) {
     break label$44
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($4) {
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
    }
    $4 = (((wasm2js_i32$1 = $2 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $7 = SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0);
    if ($7) {
     __memcpy($4, $7, SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2);
     $7 = SAFE_HEAP_LOAD_i32_4_4($3, 204);
     label$49 : {
      if (!$7) {
       break label$49
      }
      $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$10) {
       break label$49
      }
      $10 = $10 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $7, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($3, 200, $2);
    SAFE_HEAP_STORE_i32_4_4($3, 204, $4);
   }
   SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3, 4));
   SAFE_HEAP_STORE_i32_4_4($3, 196, SAFE_HEAP_LOAD_i32_4_4($3, 196) + 1 | 0);
  }
  SAFE_HEAP_STORE_i32_4_4($15, 7080, $3);
  $7 = $9 + 200 | 0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($15 + 7296 | 0, 0));
  $10 = $9 + 192 | 0;
  SAFE_HEAP_STORE_i64_8_8($10, 0, SAFE_HEAP_LOAD_i64_8_8($15 + 7288 | 0, 0), i64toi32_i32$HIGH_BITS);
  $12 = $9 + 184 | 0;
  SAFE_HEAP_STORE_i64_8_8($12, 0, SAFE_HEAP_LOAD_i64_8_8($15 + 7280 | 0, 0), i64toi32_i32$HIGH_BITS);
  $20 = $9 + 176 | 0;
  SAFE_HEAP_STORE_i64_8_8($20, 0, SAFE_HEAP_LOAD_i64_8_8($15 + 7272 | 0, 0), i64toi32_i32$HIGH_BITS);
  $17 = $9 + 168 | 0;
  SAFE_HEAP_STORE_i64_8_8($17, 0, SAFE_HEAP_LOAD_i64_8_8($15 + 7264 | 0, 0), i64toi32_i32$HIGH_BITS);
  $23 = $9 + 160 | 0;
  SAFE_HEAP_STORE_i64_8_8($23, 0, SAFE_HEAP_LOAD_i64_8_8($15 + 7256 | 0, 0), i64toi32_i32$HIGH_BITS);
  $25 = $9 + 152 | 0;
  SAFE_HEAP_STORE_i64_8_8($25, 0, SAFE_HEAP_LOAD_i64_8_8($15 + 7248 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_8($9, 144, SAFE_HEAP_LOAD_i64_8_8($15, 7240), i64toi32_i32$HIGH_BITS);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $36 = SAFE_HEAP_LOAD_i32_2_U_2($2, 12076);
  $33 = SAFE_HEAP_LOAD_i32_4_4($2, 7480);
  $39 = SAFE_HEAP_LOAD_i32_4_4($2, 7444);
  $34 = SAFE_HEAP_LOAD_i32_4_4($2, 7456);
  $41 = SAFE_HEAP_LOAD_i32_4_4($2, 7432);
  $45 = SAFE_HEAP_LOAD_i32_4_4($2, 7420);
  $42 = SAFE_HEAP_LOAD_i32_4_4($2, 7408);
  $46 = SAFE_HEAP_LOAD_i32_4_4($2, 7396);
  $47 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 7080), 196);
  $31 = SAFE_HEAP_LOAD_i32_4_4($15, 7044);
  $4 = SAFE_HEAP_LOAD_i32_4_4($15 + 7048 | 0, 0);
  label$50 : {
   if (($31 | 0) != ($4 | 0)) {
    break label$50
   }
   $37 = $4;
   $4 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
   $31 = $31 + 1 | 0;
   $4 = ($4 | 0) > ($31 | 0) ? $4 : $31;
   if (($37 | 0) >= ($4 | 0)) {
    break label$50
   }
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
   }
   $2 = (((wasm2js_i32$1 = Math_imul($4, 84), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $31 = SAFE_HEAP_LOAD_i32_4_4($15 + 7052 | 0, 0);
   if ($31) {
    __memcpy($2, $31, Math_imul(SAFE_HEAP_LOAD_i32_4_4($15, 7044), 84));
    $31 = SAFE_HEAP_LOAD_i32_4_4($15, 7052);
    label$54 : {
     if (!$31) {
      break label$54
     }
     $37 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$37) {
      break label$54
     }
     $37 = $37 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($37, 0, SAFE_HEAP_LOAD_i32_4_4($37, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $31, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($15, 7048, $4);
   SAFE_HEAP_STORE_i32_4_4($15, 7052, $2);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($15 + 7052 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($15, 7044), 84) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
  SAFE_HEAP_STORE_i64_8_4($2, 4, SAFE_HEAP_LOAD_i64_8_8($9, 144), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 12 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($25, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 20 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($23, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 28 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($17, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 36 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($20, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 44 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($12, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 52 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($10, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i32_4_4($2 + 60 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0));
  SAFE_HEAP_STORE_i32_2_2($2, 80, $36);
  SAFE_HEAP_STORE_i32_2_2($2, 78, $33);
  SAFE_HEAP_STORE_i32_2_2($2, 76, $39);
  SAFE_HEAP_STORE_i32_2_2($2, 74, $34);
  SAFE_HEAP_STORE_i32_2_2($2, 72, $41);
  SAFE_HEAP_STORE_i32_2_2($2, 70, $45);
  SAFE_HEAP_STORE_i32_2_2($2, 68, $42);
  SAFE_HEAP_STORE_i32_2_2($2, 66, $46);
  SAFE_HEAP_STORE_i32_2_2($2, 64, $47);
  SAFE_HEAP_STORE_i32_4_4($15, 7080, 0);
  SAFE_HEAP_STORE_i32_4_4($15, 7044, SAFE_HEAP_LOAD_i32_4_4($15, 7044) + 1 | 0);
  $23 = $21 & 268435456;
  if ($23) {
   SAFE_HEAP_STORE_i32_4_4($15, 7492, SAFE_HEAP_LOAD_i32_4_4($15, 7492) + 1 | 0)
  }
  $33 = $21 & 67108864;
  if ($33) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($15 + 7476 | 0, 0);
   $7 = SAFE_HEAP_LOAD_i32_4_4($15, 7480);
   $2 = $2 + Math_imul($7, 36) | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 4, $3);
   $4 = SAFE_HEAP_LOAD_i32_4_4($15 + 7484 | 0, 0);
   label$57 : {
    if (($4 | 0) != ($7 | 0)) {
     break label$57
    }
    $10 = $4;
    $4 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
    $7 = $7 + 1 | 0;
    $4 = ($4 | 0) > ($7 | 0) ? $4 : $7;
    if (($10 | 0) >= ($4 | 0)) {
     break label$57
    }
    $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($7) {
     $7 = $7 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) + 1 | 0);
    }
    $7 = (((wasm2js_i32$1 = Math_imul($4, 36), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $10 = SAFE_HEAP_LOAD_i32_4_4($15 + 7488 | 0, 0);
    if ($10) {
     __memcpy($7, $10, Math_imul(SAFE_HEAP_LOAD_i32_4_4($15, 7480), 36));
     $10 = SAFE_HEAP_LOAD_i32_4_4($15, 7488);
     label$62 : {
      if (!$10) {
       break label$62
      }
      $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$12) {
       break label$62
      }
      $12 = $12 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $10, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($15, 7484, $4);
    SAFE_HEAP_STORE_i32_4_4($15, 7488, $7);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($15 + 7488 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($15, 7480), 36) | 0;
   SAFE_HEAP_STORE_i64_8_4($4, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($4 + 32 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2 + 32 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($4 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($4 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($4 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($15, 7480, SAFE_HEAP_LOAD_i32_4_4($15, 7480) + 1 | 0);
   SAFE_HEAP_STORE_i32_4_4($3, 160, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  }
  if (!$40) {
   SAFE_HEAP_STORE_i32_4_4($3, 728, $26);
   SAFE_HEAP_STORE_i32_4_4($3, 748, $3);
   SAFE_HEAP_STORE_i32_4_4($3, 744, $3);
   SAFE_HEAP_STORE_i32_4_4($3, 740, $3);
   SAFE_HEAP_STORE_i32_4_4($3, 736, $3);
   if (!(!$26 | ($21 & 50331648) != 16777216)) {
    SAFE_HEAP_STORE_i32_4_4($3, 736, SAFE_HEAP_LOAD_i32_4_4($26, 736))
   }
   if (!(!$33 | !$26)) {
    SAFE_HEAP_STORE_i32_4_4($3, 740, SAFE_HEAP_LOAD_i32_4_4($26, 740))
   }
   if (!(!$26 | (!($21 & 83886080) | $21 & 134217728))) {
    SAFE_HEAP_STORE_i32_4_4($3, 744, SAFE_HEAP_LOAD_i32_4_4($26, 744))
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($3 + 10 | 0, 0) & 128) {
    $4 = $3;
    while (1) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 728);
     if (SAFE_HEAP_LOAD_i32_1_U_1($4 + 10 | 0, 0) & 128) {
      continue
     }
     break;
    };
    SAFE_HEAP_STORE_i32_4_4($3, 748, $4);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 732, $6);
  }
  $17 = 0;
  label$69 : {
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($15, 7300) & 1)) {
    break label$69
   }
   label$70 : {
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 176);
    $6 = SAFE_HEAP_LOAD_i32_4_4($15 + 7304 | 0, 0);
    $4 = $2 << 24 >> 24 & $6;
    if (!$4) {
     break label$70
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 7324 | 0, 0);
    $8 = Math_fround($5 * $5);
    $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 7328 | 0, 0);
    if (!(Math_fround($8 + Math_fround($5 * $5)) > Math_fround(9.999999747378752e-06))) {
     break label$70
    }
    SAFE_HEAP_STORE_i64_8_4($3, 180, SAFE_HEAP_LOAD_i64_8_4($15 + 7316 | 0, 0), i64toi32_i32$HIGH_BITS);
    $4 = SAFE_HEAP_LOAD_i64_8_4($15, 7324);
    $6 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i32_4_4($3, 176, $2 & -15);
    SAFE_HEAP_STORE_i64_8_4($3, 188, $4, $6);
    $17 = 1;
    break label$69;
   }
   if (!$6 | $4) {
    SAFE_HEAP_STORE_i64_8_4($3, 180, 2139095039, 2139095039);
    SAFE_HEAP_STORE_i32_4_4($3, 176, $2 & -15);
    $2 = $3 + 16 | 0;
    $8 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 7316 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($15 + 7320 | 0, 0);
    label$73 : {
     if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
      $6 = ~~$13;
      break label$73;
     }
     $6 = -2147483648;
    }
    $13 = Math_fround($6 | 0);
    SAFE_HEAP_STORE_f32_4_4($2, 0, $13);
    $11 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
    $5 = Math_fround((Math_fround(Math_abs($5)) < Math_fround(2147483648.0) ? ~~$5 : -2147483648) | 0);
    SAFE_HEAP_STORE_f32_4_4($3, 12, $5);
    $5 = Math_fround($5 - $11);
    SAFE_HEAP_STORE_f32_4_4($3, 208, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 208)));
    $2 = $3 + 212 | 0;
    $8 = Math_fround($13 - $8);
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $3 + 232 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $3 + 236 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $3 + 240 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $3 + 244 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $3 + 224 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
    $2 = $3 + 228 | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
   }
   $17 = ($4 | 0) != 0;
  }
  $4 = 0;
  $6 = 0;
  if (SAFE_HEAP_LOAD_i32_1_U_1($15, 7300) & 2) {
   $7 = SAFE_HEAP_LOAD_i32_4_4($3, 176);
   $10 = SAFE_HEAP_LOAD_i32_4_4($15 + 7308 | 0, 0);
   $4 = $7 << 16 >> 24 & $10;
   if ($4) {
    $2 = SAFE_HEAP_LOAD_f32_4_4($15 + 7332 | 0, 0) > Math_fround(0.0)
   } else {
    $2 = 0
   }
   if ($4) {
    $6 = SAFE_HEAP_LOAD_f32_4_4($15 + 7336 | 0, 0) > Math_fround(0.0)
   }
   label$803 : {
    if (!(!$10 | $4)) {
     break label$803
    }
    SAFE_HEAP_STORE_i32_4_4($3, 176, $7 & -3585);
    $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 7332 | 0, 0);
    label$82 : {
     if ($5 > Math_fround(0.0)) {
      SAFE_HEAP_STORE_i32_1_1($3, 164, 0);
      SAFE_HEAP_STORE_f32_4_4($3, 28, Math_fround((Math_fround(Math_abs($5)) < Math_fround(2147483648.0) ? ~~$5 : -2147483648) | 0));
      break label$82;
     }
     SAFE_HEAP_STORE_i32_1_1($3, 167, 0);
     SAFE_HEAP_STORE_i32_1_1($3, 164, 2);
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 7336 | 0, 0);
    if ($5 > Math_fround(0.0)) {
     SAFE_HEAP_STORE_i32_1_1($3, 165, 0);
     SAFE_HEAP_STORE_f32_4_4($3 + 32 | 0, 0, Math_fround((Math_fround(Math_abs($5)) < Math_fround(2147483648.0) ? ~~$5 : -2147483648) | 0));
     break label$803;
    }
    SAFE_HEAP_STORE_i32_1_1($3, 167, 0);
    SAFE_HEAP_STORE_i32_1_1($3, 165, 2);
   }
   $4 = $6;
   $6 = $2;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($15, 7300);
  label$89 : {
   if (!($2 & 128)) {
    break label$89
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 7348 | 0, 0);
   if ($5 >= Math_fround(0.0)) {
    SAFE_HEAP_STORE_i32_4_4($3, 112, 0);
    SAFE_HEAP_STORE_f32_4_4($3, 104, $5);
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 7352 | 0, 0);
   if (!($5 >= Math_fround(0.0))) {
    break label$89
   }
   SAFE_HEAP_STORE_i32_4_4($3 + 116 | 0, 0, 0);
   SAFE_HEAP_STORE_f32_4_4($3 + 108 | 0, 0, $5);
  }
  label$91 : {
   if ($2 & 4) {
    SAFE_HEAP_STORE_i64_8_4($3, 52, SAFE_HEAP_LOAD_i64_8_4($15 + 7340 | 0, 0), i64toi32_i32$HIGH_BITS);
    break label$91;
   }
   if ($40) {
    break label$91
   }
   SAFE_HEAP_STORE_i64_8_4($3, 52, 0, 0);
  }
  label$93 : {
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($15, 7300) & 8)) {
    break label$93
   }
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($15 + 7356 | 0, 0);
   $7 = SAFE_HEAP_LOAD_i32_4_4($15 + 7312 | 0, 0);
   if ($7) {
    if (!($7 & SAFE_HEAP_LOAD_i32_4_4($3, 176) << 8 >> 24)) {
     break label$93
    }
   }
   SAFE_HEAP_STORE_i32_1_1($3, 141, $2);
   SAFE_HEAP_STORE_i32_4_4($3, 176, SAFE_HEAP_LOAD_i32_4_4($3, 176) & -917505);
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($15, 7300) & 32) {
   ImGui__FocusWindow_28ImGuiWindow__29($3)
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($3, 144)) {
   SAFE_HEAP_STORE_i32_4_4($3, 176, SAFE_HEAP_LOAD_i32_4_4($3, 176) & -526345)
  }
  $7 = $4;
  $36 = $21 & 16777216;
  label$97 : {
   label$98 : {
    label$99 : {
     label$100 : {
      if (!$40) {
       SAFE_HEAP_STORE_i64_8_4($3, 496, -8388609, -8388609);
       SAFE_HEAP_STORE_i32_1_1($3, 138, 1);
       SAFE_HEAP_STORE_i64_8_4($3 + 504 | 0, 0, 2139095039, 2139095039);
       SAFE_HEAP_STORE_i32_1_1($3, 148, ($1 | 0) != 0);
       $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 200 | 0, 0);
       label$102 : {
        if (($2 | 0) > 0) {
         break label$102
        }
        $4 = $2;
        $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
        $2 = ($2 | 0) <= 1 ? 1 : $2;
        if (($4 | 0) >= ($2 | 0)) {
         break label$102
        }
        $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($4) {
         $4 = $4 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
        }
        $4 = (((wasm2js_i32$1 = $2 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
        $10 = SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0);
        if ($10) {
         __memcpy($4, $10, SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2);
         $10 = SAFE_HEAP_LOAD_i32_4_4($3, 204);
         label$107 : {
          if (!$10) {
           break label$107
          }
          $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          if (!$12) {
           break label$107
          }
          $12 = $12 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) - 1 | 0);
         }
         ((wasm2js_i32$2 = $10, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
        }
        SAFE_HEAP_STORE_i32_4_4($3, 200, $2);
        SAFE_HEAP_STORE_i32_4_4($3, 204, $4);
       }
       SAFE_HEAP_STORE_i32_4_4($3, 196, 1);
       ImDrawList___ResetForNewFrame_28_29(SAFE_HEAP_LOAD_i32_4_4($3, 580));
       SAFE_HEAP_STORE_i32_4_4($3 + 372 | 0, 0, -1);
       if (SAFE_HEAP_LOAD_i32_1_U_1($3, 804)) {
        SAFE_HEAP_STORE_i32_1_1($3, 804, 0);
        $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
        $10 = SAFE_HEAP_LOAD_i32_4_4($2 + 16 | 0, 0);
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 796);
        if (($10 | 0) < ($4 | 0)) {
         $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if ($10) {
          $10 = $10 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) + 1 | 0);
         }
         $10 = (((wasm2js_i32$1 = $4 << 1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
         $12 = SAFE_HEAP_LOAD_i32_4_4($2 + 20 | 0, 0);
         if ($12) {
          __memcpy($10, $12, SAFE_HEAP_LOAD_i32_4_4($2, 12) << 1);
          $12 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
          label$40 : {
           if (!$12) {
            break label$40
           }
           $20 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
           if (!$20) {
            break label$40
           }
           $20 = $20 + 876 | 0;
           SAFE_HEAP_STORE_i32_4_4($20, 0, SAFE_HEAP_LOAD_i32_4_4($20, 0) - 1 | 0);
          }
          ((wasm2js_i32$2 = $12, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
         }
         SAFE_HEAP_STORE_i32_4_4($2, 16, $4);
         SAFE_HEAP_STORE_i32_4_4($2, 20, $10);
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
        $10 = SAFE_HEAP_LOAD_i32_4_4($2 + 28 | 0, 0);
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 800);
        if (($10 | 0) < ($4 | 0)) {
         $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if ($10) {
          $10 = $10 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) + 1 | 0);
         }
         $10 = (((wasm2js_i32$1 = Math_imul($4, 20), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
         $12 = SAFE_HEAP_LOAD_i32_4_4($2 + 32 | 0, 0);
         if ($12) {
          __memcpy($10, $12, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 24), 20));
          $12 = SAFE_HEAP_LOAD_i32_4_4($2, 32);
          label$81 : {
           if (!$12) {
            break label$81
           }
           $20 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
           if (!$20) {
            break label$81
           }
           $20 = $20 + 876 | 0;
           SAFE_HEAP_STORE_i32_4_4($20, 0, SAFE_HEAP_LOAD_i32_4_4($20, 0) - 1 | 0);
          }
          ((wasm2js_i32$2 = $12, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
         }
         SAFE_HEAP_STORE_i32_4_4($2, 28, $4);
         SAFE_HEAP_STORE_i32_4_4($2, 32, $10);
        }
        SAFE_HEAP_STORE_i64_8_4($3, 796, 0, 0);
       }
       label$109 : {
        if (!SAFE_HEAP_LOAD_i32_4_4($15, 7852) | !$35) {
         break label$109
        }
        if (SAFE_HEAP_LOAD_i32_4_4($3, 8) & 524288) {
         break label$109
        }
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
        if (!strcmp($0, $4)) {
         break label$109
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($3, 76);
        $10 = strlen($0) + 1 | 0;
        if ($2 >>> 0 < $10 >>> 0) {
         label$112 : {
          if (!$4) {
           break label$112
          }
          $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          if (!$2) {
           break label$112
          }
          $2 = $2 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
         }
         ((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
         $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if ($2) {
          $2 = $2 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
         }
         $2 = $10;
         $4 = (((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
        }
        $4 = __memcpy($4, $0, $10);
        SAFE_HEAP_STORE_i32_4_4($3, 76, $2);
        SAFE_HEAP_STORE_i32_4_4($3, 0, $4);
       }
       $10 = SAFE_HEAP_LOAD_i32_1_1($3, 173);
       $41 = $3 + 36 | 0;
       $12 = $3 + 44 | 0;
       CalcWindowContentSizes_28ImGuiWindow__2c_20ImVec2__2c_20ImVec2__29($3, $41, $12);
       $2 = SAFE_HEAP_LOAD_i32_1_1($3, 172);
       if (($2 | 0) > 0) {
        SAFE_HEAP_STORE_i32_1_1($3, 172, $2 - 1 | 0)
       }
       $2 = SAFE_HEAP_LOAD_i32_1_1($3, 173);
       if (($2 | 0) > 0) {
        SAFE_HEAP_STORE_i32_1_1($3, 173, $2 - 1 | 0)
       }
       $2 = SAFE_HEAP_LOAD_i32_1_1($3, 174);
       if (($2 | 0) > 0) {
        SAFE_HEAP_STORE_i32_1_1($3, 174, $2 - 1 | 0)
       }
       if (!($6 & $7 | $35)) {
        SAFE_HEAP_STORE_i32_1_1($3, 173, 1)
       }
       $4 = $21 & 100663296;
       label$118 : {
        if (!($43 & ($4 | 0) != 0)) {
         break label$118
        }
        SAFE_HEAP_STORE_i32_1_1($3, 173, 1);
        if (!($21 & 64)) {
         break label$118
        }
        if (!$6) {
         SAFE_HEAP_STORE_i32_4_4($3, 20, 0);
         SAFE_HEAP_STORE_i32_4_4($3, 28, 0);
        }
        if (!$7) {
         SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, 0);
         SAFE_HEAP_STORE_i32_4_4($3 + 32 | 0, 0, 0);
        }
        SAFE_HEAP_STORE_i64_8_4($41, 0, 0, 0);
        SAFE_HEAP_STORE_i64_8_4($41 + 8 | 0, 0, 0, 0);
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       SAFE_HEAP_STORE_i32_4_4($2, 7080, $3);
       label$121 : {
        if ($3) {
         $20 = SAFE_HEAP_LOAD_i32_4_4($3, 372);
         if (($20 | 0) == -1) {
          $20 = 0
         } else {
          $20 = SAFE_HEAP_LOAD_i32_4_4($2 + 8064 | 0, 0) + Math_imul($20, 456) | 0
         }
         SAFE_HEAP_STORE_i32_4_4($2, 8036, $20);
         $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
         $20 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
         if ($20) {
          $8 = Math_fround($8 * SAFE_HEAP_LOAD_f32_4_4($20, 572))
         }
         SAFE_HEAP_STORE_f32_4_4($2, 6468, $8);
         SAFE_HEAP_STORE_f32_4_4($2 + 6488 | 0, 0, $8);
         break label$121;
        }
        SAFE_HEAP_STORE_i32_4_4($2, 8036, 0);
       }
       if ($36) {
        $4 = $15 + 5464 | 0
       } else {
        $20 = $15 + 5436 | 0;
        $4 = $4 ? ($21 & 134217728 ? $20 : $15 + 5472 | 0) : $20;
       }
       SAFE_HEAP_STORE_f32_4_4($3, 72, SAFE_HEAP_LOAD_f32_4_4($4, 0));
       SAFE_HEAP_STORE_i64_8_4($3, 60, SAFE_HEAP_LOAD_i64_8_4($15 + 5424 | 0, 0), i64toi32_i32$HIGH_BITS);
       label$129 : {
        if (($21 & 83951616) != 16777216) {
         break label$129
        }
        if (SAFE_HEAP_LOAD_f32_4_4($3, 72) != Math_fround(0.0)) {
         break label$129
        }
        $8 = Math_fround(0.0);
        if ($21 & 1024) {
         $8 = SAFE_HEAP_LOAD_f32_4_4($15 + 5428 | 0, 0)
        }
        SAFE_HEAP_STORE_i32_4_4($3, 60, 0);
        SAFE_HEAP_STORE_f32_4_4($3 - -64 | 0, 0, $8);
       }
       $5 = SAFE_HEAP_LOAD_f32_4_4($3, 60);
       $8 = SAFE_HEAP_LOAD_f32_4_4($15 + 5492 | 0, 0);
       $5 = $5 >= $8 ? $5 : $8;
       $8 = SAFE_HEAP_LOAD_f32_4_4($15 + 7388 | 0, 0);
       SAFE_HEAP_STORE_f32_4_4($3 + 308 | 0, 0, $5 >= $8 ? $5 : $8);
       SAFE_HEAP_STORE_f32_4_4($3 + 312 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($15 + 7392 | 0, 0));
       label$131 : {
        if (!($21 & 33)) {
         $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0);
         $11 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
         $18 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
         $8 = Math_fround(0.0);
         if (!(SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 1)) {
          $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
          $4 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
          if ($4) {
           $13 = Math_fround($13 * SAFE_HEAP_LOAD_f32_4_4($4, 572))
          }
          $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
          $8 = Math_fround(Math_fround($8 + $8) + $13);
         }
         $4 = SAFE_HEAP_LOAD_i64_8_4($3, 12);
         $20 = i64toi32_i32$HIGH_BITS;
         SAFE_HEAP_STORE_f32_4_4($9 + 244 | 0, 0, Math_fround($5 + $8));
         SAFE_HEAP_STORE_f32_4_4($9, 240, Math_fround($18 + $11));
         SAFE_HEAP_STORE_i64_8_8($9, 232, $4, $20);
         label$136 : {
          if ((SAFE_HEAP_LOAD_i32_4_4($15, 7084) | 0) != ($3 | 0)) {
           break label$136
          }
          if (SAFE_HEAP_LOAD_i32_4_4($15, 7116)) {
           break label$136
          }
          if (SAFE_HEAP_LOAD_i32_4_4($15, 7120)) {
           break label$136
          }
          if (!ImGui__IsMouseHoveringRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($9 + 232 | 0, $9 + 240 | 0, 1)) {
           break label$136
          }
          if ((SAFE_HEAP_LOAD_i32_2_U_2($15 + 1002 | 0, 0) | 0) != 2) {
           break label$136
          }
          SAFE_HEAP_STORE_i32_1_1($3, 142, 1);
         }
         if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 142)) {
          break label$131
         }
         SAFE_HEAP_STORE_i32_1_1($3, 141, SAFE_HEAP_LOAD_i32_1_U_1($3, 141) ^ 1);
         if (SAFE_HEAP_LOAD_i32_1_U_1($3 + 9 | 0, 0) & 1) {
          break label$131
         }
         if (!(SAFE_HEAP_LOAD_f32_4_4($2, 12128) <= Math_fround(0.0))) {
          break label$131
         }
         SAFE_HEAP_STORE_f32_4_4($2, 12128, SAFE_HEAP_LOAD_f32_4_4($2 + 28 | 0, 0));
         break label$131;
        }
        SAFE_HEAP_STORE_i32_1_1($3, 141, 0);
       }
       $4 = !$35;
       SAFE_HEAP_STORE_i32_1_1($3, 142, 0);
       CalcWindowAutoFitSize_28ImGuiWindow__2c_20ImVec2_20const__29($9 + 136 | 0, $3, $12);
       label$137 : {
        label$138 : {
         $46 = $21 & 64;
         if (!$46) {
          break label$138
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($3, 141)) {
          break label$138
         }
         $2 = $4;
         if (!$6) {
          SAFE_HEAP_STORE_f32_4_4($3, 28, SAFE_HEAP_LOAD_f32_4_4($9, 136));
          $2 = 1;
         }
         if ($7) {
          $6 = $4;
          $4 = $2;
          break label$137;
         }
         SAFE_HEAP_STORE_f32_4_4($3 + 32 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($9, 140));
         $6 = 1;
         $4 = $2;
         break label$137;
        }
        label$1414 : {
         $12 = SAFE_HEAP_LOAD_i32_1_1($3, 164);
         if (($12 | 0) > 0) {
          break label$1414
         }
         if ((SAFE_HEAP_LOAD_i32_1_1($3, 165) | 0) > 0) {
          break label$1414
         }
         $6 = $4;
         break label$137;
        }
        $2 = $4;
        if (!(($12 | 0) <= 0 | $6)) {
         label$143 : {
          if (SAFE_HEAP_LOAD_i32_1_U_1($3, 167)) {
           $5 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
           $8 = SAFE_HEAP_LOAD_f32_4_4($9, 136);
           $5 = $5 >= $8 ? $5 : $8;
           break label$143;
          }
          $5 = SAFE_HEAP_LOAD_f32_4_4($9, 136);
         }
         SAFE_HEAP_STORE_f32_4_4($3, 28, $5);
         $2 = 1;
        }
        label$145 : {
         if ($7) {
          break label$145
         }
         if ((SAFE_HEAP_LOAD_i32_1_1($3, 165) | 0) <= 0) {
          break label$145
         }
         $4 = $3 + 32 | 0;
         label$147 : {
          if (SAFE_HEAP_LOAD_i32_1_U_1($3, 167)) {
           $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 32 | 0, 0);
           $8 = SAFE_HEAP_LOAD_f32_4_4($9, 140);
           $5 = $5 >= $8 ? $5 : $8;
           break label$147;
          }
          $5 = SAFE_HEAP_LOAD_f32_4_4($9, 140);
         }
         SAFE_HEAP_STORE_f32_4_4($4, 0, $5);
         $4 = 1;
        }
        label$149 : {
         if (SAFE_HEAP_LOAD_i32_1_U_1($3, 141)) {
          break label$149
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($3 + 9 | 0, 0) & 1) {
          break label$149
         }
         $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!(SAFE_HEAP_LOAD_f32_4_4($6, 12128) <= Math_fround(0.0))) {
          break label$149
         }
         SAFE_HEAP_STORE_f32_4_4($6, 12128, SAFE_HEAP_LOAD_f32_4_4($6 + 28 | 0, 0));
        }
        $6 = $4;
        $4 = $2;
       }
       $12 = $4;
       $20 = $6;
       $47 = $3 + 28 | 0;
       CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($9 + 232 | 0, $3, $47);
       SAFE_HEAP_STORE_i64_8_4($3, 28, SAFE_HEAP_LOAD_i64_8_8($9, 232), i64toi32_i32$HIGH_BITS);
       label$150 : {
        if (!($36 | !SAFE_HEAP_LOAD_i32_1_U_1($3, 141))) {
         $2 = $3 + 16 | 0;
         $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
         $8 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
         $13 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
         if (!(SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 1)) {
          $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
          $6 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
          if ($6) {
           $14 = Math_fround($14 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
          }
          $11 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
          $14 = Math_fround(Math_fround($11 + $11) + $14);
         }
         $8 = Math_fround(Math_fround($13 + $8) - SAFE_HEAP_LOAD_f32_4_4($3, 12));
         $5 = Math_fround(Math_fround($5 + $14) - SAFE_HEAP_LOAD_f32_4_4($2, 0));
         break label$150;
        }
        $8 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
        $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 32 | 0, 0);
       }
       SAFE_HEAP_STORE_f32_4_4($3, 20, $8);
       SAFE_HEAP_STORE_f32_4_4($3 + 24 | 0, 0, $5);
       $2 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
       if ($2 & 1) {
        $5 = Math_fround(0.0)
       } else {
        $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
        $6 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
        if ($6) {
         $8 = Math_fround($8 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
        }
        $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
        $5 = Math_fround(Math_fround($5 + $5) + $8);
       }
       $50 = $5;
       if ($2 & 1024) {
        $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
        $5 = SAFE_HEAP_LOAD_f32_4_4($3, 312);
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
        if ($4) {
         $8 = Math_fround($8 * SAFE_HEAP_LOAD_f32_4_4($4, 572))
        }
        $13 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
        $5 = Math_fround(Math_fround($13 + $13) + Math_fround($5 + $8));
       } else {
        $5 = Math_fround(0.0)
       }
       $51 = $5;
       label$161 : {
        if (!$43) {
         break label$161
        }
        SAFE_HEAP_STORE_i32_4_4($3, 168, -1);
        if ($17 | ($21 & 201326592) != 67108864) {
         break label$161
        }
        SAFE_HEAP_STORE_i64_8_4($3, 12, SAFE_HEAP_LOAD_i64_8_4((Math_imul(SAFE_HEAP_LOAD_i32_4_4($15, 7480), 36) + SAFE_HEAP_LOAD_i32_4_4($15 + 7488 | 0, 0) | 0) - 16 | 0, 0), i64toi32_i32$HIGH_BITS);
       }
       $39 = $21 & 50331648;
       label$162 : {
        if (!$36) {
         break label$162
        }
        $4 = SAFE_HEAP_LOAD_i32_4_4($26 + 352 | 0, 0);
        SAFE_HEAP_STORE_i32_2_2($3, 152, $4);
        $2 = SAFE_HEAP_LOAD_i32_4_4($26 + 356 | 0, 0);
        label$163 : {
         if (($2 | 0) != ($4 | 0)) {
          break label$163
         }
         $6 = $2;
         $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
         $4 = $4 + 1 | 0;
         $2 = ($2 | 0) > ($4 | 0) ? $2 : $4;
         if (($6 | 0) >= ($2 | 0)) {
          break label$163
         }
         $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if ($4) {
          $4 = $4 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
         }
         $4 = (((wasm2js_i32$1 = $2 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
         $6 = SAFE_HEAP_LOAD_i32_4_4($26 + 360 | 0, 0);
         if ($6) {
          __memcpy($4, $6, SAFE_HEAP_LOAD_i32_4_4($26, 352) << 2);
          $6 = SAFE_HEAP_LOAD_i32_4_4($26, 360);
          label$168 : {
           if (!$6) {
            break label$168
           }
           $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
           if (!$7) {
            break label$168
           }
           $7 = $7 + 876 | 0;
           SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
          }
          ((wasm2js_i32$2 = $6, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
         }
         SAFE_HEAP_STORE_i32_4_4($26, 356, $2);
         SAFE_HEAP_STORE_i32_4_4($26, 360, $4);
        }
        SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($26 + 360 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($26, 352) << 2) | 0, 0, $3);
        SAFE_HEAP_STORE_i32_4_4($26, 352, SAFE_HEAP_LOAD_i32_4_4($26, 352) + 1 | 0);
        if ($17 | $33 | ($39 | 0) == 50331648) {
         break label$162
        }
        SAFE_HEAP_STORE_i64_8_4($3, 12, SAFE_HEAP_LOAD_i64_8_4($26, 208), i64toi32_i32$HIGH_BITS);
       }
       $45 = $21 & 33554432;
       $4 = ($36 | 0) != 0;
       label$169 : {
        label$170 : {
         $5 = SAFE_HEAP_LOAD_f32_4_4($3, 180);
         if ($5 == Math_fround(3402823466385288598117041.0e14)) {
          break label$170
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($3, 173)) {
          break label$170
         }
         $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 184 | 0, 0);
         SAFE_HEAP_STORE_i64_8_4($3, 180, 2139095039, 2139095039);
         SAFE_HEAP_STORE_i32_4_4($3, 176, SAFE_HEAP_LOAD_i32_4_4($3, 176) & -15);
         $5 = Math_fround($5 - Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 20) * SAFE_HEAP_LOAD_f32_4_4($3, 188)));
         label$171 : {
          if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
           $2 = ~~$5;
           break label$171;
          }
          $2 = -2147483648;
         }
         $5 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
         $13 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($3, 12, $13);
         $8 = Math_fround($8 - Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 24 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($3 + 192 | 0, 0)));
         label$173 : {
          if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
           $2 = ~~$8;
           break label$173;
          }
          $2 = -2147483648;
         }
         $6 = $3 + 16 | 0;
         $8 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
         $11 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($6, 0, $11);
         $5 = Math_fround($13 - $5);
         SAFE_HEAP_STORE_f32_4_4($3, 208, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 208)));
         $2 = $3 + 232 | 0;
         SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
         $2 = $3 + 212 | 0;
         $8 = Math_fround($11 - $8);
         SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
         $2 = $3 + 236 | 0;
         SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
         $2 = $3 + 240 | 0;
         SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
         $2 = $3 + 244 | 0;
         SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
         $2 = $3 + 224 | 0;
         SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
         $2 = $3 + 228 | 0;
         SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2, 0)));
         break label$169;
        }
        if ($23) {
         ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($9 + 232 | 0, $3);
         SAFE_HEAP_STORE_i64_8_4($3, 12, SAFE_HEAP_LOAD_i64_8_8($9, 232), i64toi32_i32$HIGH_BITS);
         break label$169;
        }
        if (!($17 | !$33 | ($10 | 0) <= 0)) {
         ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($9 + 232 | 0, $3);
         SAFE_HEAP_STORE_i64_8_4($3, 12, SAFE_HEAP_LOAD_i64_8_8($9, 232), i64toi32_i32$HIGH_BITS);
         break label$169;
        }
        if ($17 | !$45 | ($39 | 0) == 50331648) {
         break label$169
        }
        ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($9 + 232 | 0, $3);
        SAFE_HEAP_STORE_i64_8_4($3, 12, SAFE_HEAP_LOAD_i64_8_8($9, 232), i64toi32_i32$HIGH_BITS);
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0);
       $13 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
       $5 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
       $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
       $18 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($2 + 16 | 0, 0));
       SAFE_HEAP_STORE_f32_4_4($9 + 132 | 0, 0, $18);
       SAFE_HEAP_STORE_f32_4_4($9, 124, $8);
       SAFE_HEAP_STORE_f32_4_4($9, 120, $5);
       $19 = Math_fround($5 + $13);
       SAFE_HEAP_STORE_f32_4_4($9, 128, $19);
       $16 = SAFE_HEAP_LOAD_f32_4_4($2, 28);
       $13 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
       $11 = SAFE_HEAP_LOAD_f32_4_4($15 + 5592 | 0, 0);
       $14 = SAFE_HEAP_LOAD_f32_4_4($15 + 5584 | 0, 0);
       $22 = SAFE_HEAP_LOAD_f32_4_4($2 + 24 | 0, 0);
       $28 = Math_fround($22 + SAFE_HEAP_LOAD_f32_4_4($2 + 32 | 0, 0));
       $27 = SAFE_HEAP_LOAD_f32_4_4($15 + 5588 | 0, 0);
       $24 = SAFE_HEAP_LOAD_f32_4_4($15 + 5596 | 0, 0);
       $27 = $24 <= $27 ? $27 : $24;
       SAFE_HEAP_STORE_f32_4_4($9 + 116 | 0, 0, Math_fround($28 - $27));
       $11 = $11 <= $14 ? $14 : $11;
       SAFE_HEAP_STORE_f32_4_4($9, 112, Math_fround(Math_fround($13 + $16) - $11));
       SAFE_HEAP_STORE_f32_4_4($9, 108, Math_fround($22 + $27));
       SAFE_HEAP_STORE_f32_4_4($9, 104, Math_fround($13 + $11));
       label$177 : {
        if ($4 | $17) {
         break label$177
        }
        if ((SAFE_HEAP_LOAD_i32_1_1($3, 164) | 0) > 0) {
         break label$177
        }
        if (!(Math_fround($18 - $8) > Math_fround(0.0)) | (!(Math_fround($19 - $5) > Math_fround(0.0)) | (SAFE_HEAP_LOAD_i32_1_1($3, 165) | 0) > 0)) {
         break label$177
        }
        $2 = $9 + 104 | 0;
        $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 24 | 0, 0);
        $8 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
        $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        label$16 : {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($4 + 181 | 0, 0)) {
          break label$16
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 1) {
          break label$16
         }
         $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
         $6 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
         if ($6) {
          $5 = Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
         }
         $13 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
         $5 = Math_fround(Math_fround($13 + $13) + $5);
        }
        $11 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
        $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - $8);
        $2 = SAFE_HEAP_LOAD_i64_8_4($2, 8);
        $4 = i64toi32_i32$HIGH_BITS;
        $14 = (wasm2js_scratch_store_i32(2, $2), wasm2js_scratch_load_f32());
        $13 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
        SAFE_HEAP_STORE_f32_4_4($3, 12, $8 > $13 ? $8 : $13 > $14 ? $14 : $13);
        $2 = $3 + 16 | 0;
        $8 = Math_fround($11 - $5);
        $13 = (wasm2js_scratch_store_i32(2, $4), wasm2js_scratch_load_f32());
        $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
        SAFE_HEAP_STORE_f32_4_4($2, 0, $5 < $8 ? $8 : $5 > $13 ? $13 : $5);
       }
       $5 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
       label$178 : {
        if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
         $2 = ~~$5;
         break label$178;
        }
        $2 = -2147483648;
       }
       SAFE_HEAP_STORE_f32_4_4($3, 12, Math_fround($2 | 0));
       $2 = $3 + 16 | 0;
       $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
       label$180 : {
        if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
         $6 = ~~$5;
         break label$180;
        }
        $6 = -2147483648;
       }
       SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($6 | 0));
       $2 = $15 + 5460 | 0;
       label$182 : {
        if ($36) {
         break label$182
        }
        $2 = $15 + 5468 | 0;
        if (($21 & 201326592) == 67108864) {
         break label$182
        }
        $2 = $15 + 5432 | 0;
       }
       SAFE_HEAP_STORE_f32_4_4($3, 68, SAFE_HEAP_LOAD_f32_4_4($2, 0));
       $23 = 0;
       if (!($43 & !($21 & 4096))) {
        break label$98
       }
       $23 = !$39 | ($33 | 0) != 0;
       $34 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $17 = SAFE_HEAP_LOAD_i32_4_4($34, 7468);
       $10 = $17;
       while (1) {
        label$185 : {
         if (($10 | 0) <= 0) {
          $7 = 0;
          break label$185;
         }
         $2 = $6;
         $10 = $10 - 1 | 0;
         $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($34, 7476) + Math_imul($10, 36) | 0, 4);
         label$188 : {
          if ($6) {
           $4 = 0;
           if (SAFE_HEAP_LOAD_i32_1_U_1($6 + 11 | 0, 0) & 8) {
            break label$188
           }
          }
          $6 = $2;
          $4 = 1;
         }
         $2 = $4;
         $7 = $6;
         if ($2) {
          continue
         }
        }
        break;
       };
       $2 = $7;
       if (!$2) {
        break label$98
       }
       $25 = SAFE_HEAP_LOAD_i32_4_4($3, 736);
       $7 = ($25 | 0) == ($2 | 0);
       if (!$3 | ($2 | 0) == ($25 | 0)) {
        break label$100
       }
       $4 = $3;
       while (1) {
        $6 = $4;
        $4 = ($2 | 0) == ($4 | 0);
        $7 = $4;
        if ($4) {
         break label$100
        }
        $6 = SAFE_HEAP_LOAD_i32_4_4($6, 732);
        $4 = $6;
        if ($4) {
         continue
        }
        break;
       };
       break label$99;
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      SAFE_HEAP_STORE_i32_4_4($0, 7080, $3);
      if ($3) {
       $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 372 | 0, 0);
       if (($1 | 0) != -1) {
        $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 8064 | 0, 0) + Math_imul($1, 456) | 0
       } else {
        $1 = 0
       }
       SAFE_HEAP_STORE_i32_4_4($0, 8036, $1);
       $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
       $1 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
       if ($1) {
        $8 = Math_fround($8 * SAFE_HEAP_LOAD_f32_4_4($1, 572))
       }
       SAFE_HEAP_STORE_f32_4_4($0, 6468, $8);
       SAFE_HEAP_STORE_f32_4_4($0 + 6488 | 0, 0, $8);
       break label$97;
      }
      SAFE_HEAP_STORE_i32_4_4($0, 8036, 0);
      break label$97;
     }
     if ($7) {
      break label$98
     }
    }
    $23 = 0;
    if (($3 | 0) != ($25 | 0)) {
     break label$98
    }
    $42 = SAFE_HEAP_LOAD_i32_4_4($34, 7476);
    $4 = $17;
    label$197 : {
     while (1) {
      $2 = $6;
      $17 = $4;
      label$199 : {
       label$200 : {
        label$201 : {
         $23 = $4 - 1 | 0;
         $4 = SAFE_HEAP_LOAD_i32_4_4($42 + Math_imul($23, 36) | 0, 4);
         if (!$4) {
          break label$201
         }
         if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 139)) {
          break label$201
         }
         if (!(SAFE_HEAP_LOAD_i32_1_U_1($4 + 11 | 0, 0) & 8)) {
          break label$201
         }
         label$2023 : {
          if (($4 | 0) == ($25 | 0)) {
           break label$2023
          }
          $6 = $3;
          if ($3) {
           while (1) {
            if (($4 | 0) == ($6 | 0)) {
             break label$2023
            }
            $6 = SAFE_HEAP_LOAD_i32_4_4($6, 732);
            if ($6) {
             continue
            }
            break;
           }
          }
          $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 732), 736);
          if ($6) {
           while (1) {
            $7 = $6;
            label$207 : {
             label$208 : {
              if (($6 | 0) == ($25 | 0)) {
               break label$208
              }
              $6 = $3;
              if (!$3) {
               break label$207
              }
              while (1) {
               if (($6 | 0) == ($7 | 0)) {
                break label$208
               }
               $6 = SAFE_HEAP_LOAD_i32_4_4($6, 732);
               if ($6) {
                continue
               }
               break;
              };
              break label$207;
             }
             $6 = 1;
             break label$199;
            }
            $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 732), 736);
            if ($6) {
             continue
            }
            break;
           }
          }
          $6 = 0;
          break label$200;
         }
         $6 = 2;
         break label$200;
        }
        $6 = 4;
       }
       $4 = $2;
      }
      $10 = $4;
      label$210 : {
       switch ($6 | 0) {
       case 0:
       case 4:
        break label$210;
       default:
        break label$197;
       };
      }
      $4 = $23;
      $6 = $10;
      if (($17 | 0) > 1) {
       continue
      }
      break;
     };
     $6 = 2;
    }
    $4 = $6;
    $6 = SAFE_HEAP_LOAD_i32_4_4($34 + 7016 | 0, 0);
    $7 = SAFE_HEAP_LOAD_i32_4_4($34, 7008);
    $17 = $6 + ($7 << 2) | 0;
    $2 = $6;
    $23 = ($7 | 0) <= 0;
    label$211 : {
     if ($23) {
      break label$211
     }
     $7 = $6;
     while (1) {
      $2 = $7;
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($25 | 0)) {
       break label$211
      }
      $2 = $2 + 4 | 0;
      $7 = $2;
      if ($2 >>> 0 < $17 >>> 0) {
       continue
      }
      break;
     };
    }
    $2 = $2 - $6 >> 2;
    $7 = $6;
    label$214 : {
     if ($23) {
      break label$214
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(($4 | 0) != 2 ? $10 : 0, 736);
     $10 = $6;
     while (1) {
      if ((SAFE_HEAP_LOAD_i32_4_4($10, 0) | 0) == ($4 | 0)) {
       $7 = $10;
       break label$214;
      }
      $7 = $10 + 4 | 0;
      $10 = $7;
      if ($7 >>> 0 < $17 >>> 0) {
       continue
      }
      break;
     };
    }
    $4 = $7 - $6 >> 2;
    label$217 : {
     if (($4 | 0) > ($2 | 0)) {
      $6 = $6 + ($2 << 2) | 0;
      memmove($6, $6 + 4 | 0, ($2 ^ -1) + $4 << 2);
      $4 = $4 - 1 | 0;
      break label$217;
     }
     $6 = $6 + ($4 << 2) | 0;
     memmove($6 + 4 | 0, $6, $2 - $4 << 2);
    }
    SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($34, 7016) + ($4 << 2) | 0, 0, $25);
    $23 = 0;
   }
   $34 = $23;
   SAFE_HEAP_STORE_i64_8_8($9, 88, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($9, 80, 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($15, 6468);
   $8 = Math_fround($5 * Math_fround(1.100000023841858));
   $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 68) + Math_fround(1.0));
   $5 = Math_fround(Math_fround($5 * Math_fround(.20000000298023224)) + $13);
   $5 = $5 <= $8 ? $8 : $5;
   label$219 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $31 = ~~$5;
     break label$219;
    }
    $31 = -2147483648;
   }
   $42 = SAFE_HEAP_LOAD_i32_1_U_1($15 + 180 | 0, 0) ? 2 : 1;
   label$221 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($3, 141)) {
     $4 = -1;
     $10 = $12;
     $2 = $20;
     break label$221;
    }
    label$223 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 66) {
      $4 = -1;
      $2 = 0;
      break label$223;
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($3, 164) | 0) > 0) {
      $4 = -1;
      $2 = 0;
      break label$223;
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($3, 165) | 0) > 0) {
      $4 = -1;
      $2 = 0;
      break label$223;
     }
     $4 = -1;
     $2 = 0;
     if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 139)) {
      break label$223
     }
     $25 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $23 = SAFE_HEAP_LOAD_i32_1_U_1($25 + 180 | 0, 0);
     $5 = SAFE_HEAP_LOAD_f32_4_4($25, 6468);
     SAFE_HEAP_STORE_i32_4_4($3 + 292 | 0, 0, 1);
     ImGui__PushID_28char_20const__29(14974);
     $8 = Math_fround($5 * Math_fround(1.350000023841858));
     $5 = Math_fround(Math_fround($5 * Math_fround(.20000000298023224)) + $13);
     $5 = $5 <= $8 ? $8 : $5;
     label$227 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $2 = ~~$5;
       break label$227;
      }
      $2 = -2147483648;
     }
     $5 = Math_fround(Math_fround($2 | 0) * Math_fround(.75));
     label$229 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $2 = ~~$5;
       break label$229;
      }
      $2 = -2147483648;
     }
     $22 = Math_fround($2 | 0);
     $27 = Math_fround(-$22);
     $24 = $23 ? Math_fround(4.0) : Math_fround(0.0);
     $37 = $25 + 7176 | 0;
     $52 = $25 + 228 | 0;
     $53 = SAFE_HEAP_LOAD_f32_4_4($9 + 116 | 0, 0);
     $54 = SAFE_HEAP_LOAD_f32_4_4($9, 112);
     $55 = SAFE_HEAP_LOAD_f32_4_4($9, 108);
     $56 = SAFE_HEAP_LOAD_f32_4_4($9, 104);
     $4 = 0;
     $6 = 0;
     $8 = Math_fround(3402823466385288598117041.0e14);
     $11 = Math_fround(3402823466385288598117041.0e14);
     $5 = Math_fround(3402823466385288598117041.0e14);
     $13 = Math_fround(3402823466385288598117041.0e14);
     while (1) {
      $14 = $13;
      $18 = $5;
      $5 = $11;
      $13 = $8;
      $29 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
      $11 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
      $19 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
      $16 = Math_fround(Math_fround($19 + SAFE_HEAP_LOAD_f32_4_4($3, 24)) - $19);
      $2 = Math_imul($6, 24);
      $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 20548 | 0, 0);
      $38 = Math_fround(Math_fround($16 * $8) + $19);
      $19 = SAFE_HEAP_LOAD_f32_4_4($2 + 20556 | 0, 0);
      $16 = Math_fround($38 + Math_fround($19 * $22));
      SAFE_HEAP_STORE_f32_4_4($9, 244, $16);
      $28 = $11;
      $32 = Math_fround(Math_fround($11 + $29) - $11);
      $11 = SAFE_HEAP_LOAD_f32_4_4($2 + 20544 | 0, 0);
      $28 = Math_fround($28 + Math_fround($32 * $11));
      $29 = SAFE_HEAP_LOAD_f32_4_4($2 + 20552 | 0, 0);
      $30 = Math_fround($28 + Math_fround($29 * $22));
      SAFE_HEAP_STORE_f32_4_4($9, 240, $30);
      $32 = $38;
      $38 = Math_fround($24 * $19);
      SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($32 - $38));
      $32 = $28;
      $28 = Math_fround($24 * $29);
      $32 = Math_fround($32 - $28);
      SAFE_HEAP_STORE_f32_4_4($9, 232, $32);
      if ($30 < $32) {
       SAFE_HEAP_STORE_f32_4_4($9, 240, $32);
       SAFE_HEAP_STORE_f32_4_4($9, 232, $30);
      }
      $30 = SAFE_HEAP_LOAD_f32_4_4($9, 236);
      if ($16 < $30) {
       SAFE_HEAP_STORE_f32_4_4($9, 244, $30);
       SAFE_HEAP_STORE_f32_4_4($9, 236, $16);
      }
      $7 = $4;
      $2 = $6;
      SAFE_HEAP_STORE_i32_4_4($9, 216, $2);
      $4 = 4;
      $6 = $9 + 216 | 0;
      $10 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3, 204) | 0) - 4 | 0, 0) ^ -1;
      while (1) {
       $17 = $6;
       $6 = $6 + 1 | 0;
       $10 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_U_1($17, 0) ^ $10 & 255) << 2) + 19360 | 0, 0) ^ $10 >>> 8;
       $4 = $4 - 1 | 0;
       if ($4) {
        continue
       }
       break;
      };
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $4 = $10 ^ -1;
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7136) | 0) == ($4 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($6, 7140, $4)
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7196) | 0) == ($4 | 0)) {
       SAFE_HEAP_STORE_i32_1_1($6, 7200, 1)
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7112) | 0) == ($4 | 0)) {
       ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4, 4, $2)
      }
      ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($9 + 232 | 0, $4, $9 + 264 | 0, $9 + 256 | 0, 264192);
      $6 = SAFE_HEAP_LOAD_i32_1_U_1($9, 264);
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($9, 256);
      if (($6 | $4) & 255) {
       SAFE_HEAP_STORE_i32_4_4($25, 7872, $2 & 1 ? 5 : 6)
      }
      label$239 : {
       label$240 : {
        if (!($4 & 255)) {
         $8 = $14;
         $11 = $18;
         break label$240;
        }
        if (!($2 | (SAFE_HEAP_LOAD_i32_2_U_2($25, 1002) | 0) != 2)) {
         CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($9 + 216 | 0, $3, $9 + 136 | 0);
         $11 = SAFE_HEAP_LOAD_f32_4_4($9, 220);
         $8 = SAFE_HEAP_LOAD_f32_4_4($9, 216);
         $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         $6 = SAFE_HEAP_LOAD_i32_4_4($4, 7136);
         SAFE_HEAP_STORE_i32_1_1($4, 7148, ($6 | 0) != 0);
         if ($6) {
          SAFE_HEAP_STORE_i32_4_4($4, 7192, -1);
          SAFE_HEAP_STORE_i32_2_1($4, 7151, 0);
          SAFE_HEAP_STORE_i32_4_4($4, 7144, 0);
         }
         SAFE_HEAP_STORE_i32_4_4($4, 7184, 0);
         SAFE_HEAP_STORE_i32_2_1($4, 7149, 0);
         SAFE_HEAP_STORE_i32_4_4($4, 7136, 0);
         SAFE_HEAP_STORE_i64_8_8($4, 7168, 0, 0);
         SAFE_HEAP_STORE_i64_8_4($4, 7156, 0, 0);
         SAFE_HEAP_STORE_i32_2_1($4, 7153, 0);
         $7 = 1;
         break label$239;
        }
        $14 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
        $5 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
        $18 = SAFE_HEAP_LOAD_f32_4_4($25, 7180);
        $16 = SAFE_HEAP_LOAD_f32_4_4($25, 232);
        $30 = $11 == Math_fround(1.0) ? $56 : Math_fround(-3402823466385288598117041.0e14);
        $4 = $11 == Math_fround(0.0);
        $32 = $4 ? $54 : Math_fround(3402823466385288598117041.0e14);
        $13 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($29 * $27) - $28) * $11) + $28) + Math_fround(SAFE_HEAP_LOAD_f32_4_4($25, 228) - SAFE_HEAP_LOAD_f32_4_4($25, 7176)));
        $13 = $13 < $30 ? $30 : $13 > $32 ? $32 : $13;
        $29 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
        $30 = Math_fround($29 + SAFE_HEAP_LOAD_f32_4_4($3, 20));
        $29 = Math_fround(Math_fround(Math_fround($29 - $13) * $11) + $13);
        $30 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $30) * $11) + $30) - $29);
        SAFE_HEAP_STORE_f32_4_4($9, 216, $30);
        $11 = $8 == Math_fround(1.0) ? $55 : Math_fround(-3402823466385288598117041.0e14);
        $6 = $8 == Math_fround(0.0);
        $28 = $6 ? $53 : Math_fround(3402823466385288598117041.0e14);
        $13 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($19 * $27) - $38) * $8) + $38) + Math_fround($16 - $18));
        $13 = $11 > $13 ? $11 : $13 > $28 ? $28 : $13;
        $11 = Math_fround(Math_fround(Math_fround($5 - $13) * $8) + $13);
        $5 = Math_fround($5 + $14);
        $13 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $5) * $8) + $5) - $11);
        SAFE_HEAP_STORE_f32_4_4($9, 220, $13);
        CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($9 - -64 | 0, $3, $9 + 216 | 0);
        $8 = SAFE_HEAP_LOAD_f32_4_4($9, 64);
        $5 = Math_fround($29 - ($4 ? Math_fround($8 - $30) : Math_fround(0.0)));
        $14 = $11;
        $11 = SAFE_HEAP_LOAD_f32_4_4($9, 68);
        $13 = Math_fround($14 - ($6 ? Math_fround($11 - $13) : Math_fround(0.0)));
       }
      }
      $17 = $7;
      $16 = $13;
      $19 = $5;
      $5 = $11;
      $13 = $8;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($9, 264);
      $6 = SAFE_HEAP_LOAD_i32_1_U_1($9, 256);
      if ($4 & 255 | (!$2 | $6 & 255)) {
       $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $4 = ($7 + 5416 | 0) + (($6 & 255 ? 32 : $4 & 255 ? 31 : 30) << 4) | 0;
       $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 204 | 0, 0);
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$246 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $6 = ~~$8;
         break label$246;
        }
        $6 = -2147483648;
       }
       $6 = $6 << 8;
       $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 200 | 0, 0);
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$248 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $10 = ~~$8;
         break label$248;
        }
        $10 = -2147483648;
       }
       $6 = $10 | $6;
       $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 208 | 0, 0);
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$250 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $10 = ~~$8;
         break label$250;
        }
        $10 = -2147483648;
       }
       $6 = $6 | $10 << 16;
       $10 = ($9 + 80 | 0) + ($2 << 2) | 0;
       $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 212 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($7, 5416));
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$252 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $4 = ~~$8;
         break label$252;
        }
        $4 = -2147483648;
       }
       SAFE_HEAP_STORE_i32_4_4($10, 0, $6 | $4 << 24);
      }
      $4 = $17;
      $8 = $16;
      $11 = $19;
      $6 = $2 + 1 | 0;
      if (($42 | 0) != ($6 | 0)) {
       continue
      }
      break;
     };
     label$254 : {
      if (!$23) {
       $7 = -1;
       $14 = $13;
       $18 = $5;
       break label$254;
      }
      $57 = SAFE_HEAP_LOAD_i32_4_4($9, 116);
      $58 = SAFE_HEAP_LOAD_i32_4_4($9, 112);
      $27 = SAFE_HEAP_LOAD_f32_4_4($9, 108);
      $24 = SAFE_HEAP_LOAD_f32_4_4($9, 104);
      $59 = $9 + 240 | 0;
      $4 = -1;
      $6 = 0;
      while (1) {
       $7 = $4;
       $14 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
       $18 = Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($3, 24));
       $19 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
       $16 = Math_fround($19 + SAFE_HEAP_LOAD_f32_4_4($3, 20));
       label$257 : {
        label$258 : {
         label$259 : {
          label$260 : {
           label$261 : {
            label$262 : {
             $2 = $6;
             switch ($2 | 0) {
             case 3:
              break label$259;
             case 2:
              break label$260;
             case 1:
              break label$261;
             case 0:
              break label$262;
             default:
              break label$258;
             };
            }
            SAFE_HEAP_STORE_f32_4_4($9, 244, Math_fround($18 - $22));
            SAFE_HEAP_STORE_f32_4_4($9, 240, Math_fround($19 + Math_fround(4.0)));
            SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($14 + $22));
            SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($19 + Math_fround(-4.0)));
            break label$257;
           }
           SAFE_HEAP_STORE_f32_4_4($9, 244, Math_fround($18 - $22));
           SAFE_HEAP_STORE_f32_4_4($9, 240, Math_fround($16 + Math_fround(4.0)));
           SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($14 + $22));
           SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($16 + Math_fround(-4.0)));
           break label$257;
          }
          SAFE_HEAP_STORE_f32_4_4($9, 244, Math_fround($14 + Math_fround(4.0)));
          SAFE_HEAP_STORE_f32_4_4($9, 240, Math_fround($16 - $22));
          SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($14 + Math_fround(-4.0)));
          SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($19 + $22));
          break label$257;
         }
         SAFE_HEAP_STORE_f32_4_4($9, 244, Math_fround($18 + Math_fround(4.0)));
         SAFE_HEAP_STORE_f32_4_4($9, 240, Math_fround($16 - $22));
         SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($18 + Math_fround(-4.0)));
         SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($19 + $22));
         break label$257;
        }
        SAFE_HEAP_STORE_i64_8_8($59, 0, 0, 0);
        SAFE_HEAP_STORE_i64_8_8($9, 232, 0, 0);
       }
       $48 = $2 + 4 | 0;
       SAFE_HEAP_STORE_i32_4_4($9, 216, $48);
       $4 = 4;
       $6 = $9 + 216 | 0;
       $10 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3, 204) | 0) - 4 | 0, 0) ^ -1;
       while (1) {
        $23 = $6;
        $6 = $6 + 1 | 0;
        $10 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_U_1($23, 0) ^ $10 & 255) << 2) + 19360 | 0, 0) ^ $10 >>> 8;
        $4 = $4 - 1 | 0;
        if ($4) {
         continue
        }
        break;
       };
       $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $4 = $10 ^ -1;
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 7136) | 0) == ($4 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($6, 7140, $4)
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 7196) | 0) == ($4 | 0)) {
        SAFE_HEAP_STORE_i32_1_1($6, 7200, 1)
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 7112) | 0) == ($4 | 0)) {
        ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4, 4, $48)
       }
       $14 = $11;
       $18 = $8;
       $6 = $2 >>> 0 > 1;
       ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($9 + 232 | 0, $4, $9 + 256 | 0, $9 + 248 | 0, 264192);
       label$267 : {
        label$268 : {
         if (SAFE_HEAP_LOAD_i32_1_U_1($9, 256)) {
          if (SAFE_HEAP_LOAD_f32_4_4($25, 7128) > Math_fround(.03999999910593033)) {
           break label$268
          }
          if (SAFE_HEAP_LOAD_i32_1_U_1($9, 248) & 255) {
           break label$268
          }
          break label$267;
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($9, 248)) {
          break label$268
         }
         break label$267;
        }
        SAFE_HEAP_STORE_i32_4_4($25, 7872, $6 ? 3 : 4);
        $7 = SAFE_HEAP_LOAD_i32_1_U_1($9, 248) ? $2 : $7;
       }
       $4 = $7;
       $8 = $13;
       $11 = $5;
       $5 = $14;
       $13 = $18;
       if (SAFE_HEAP_LOAD_i32_1_U_1($9, 248)) {
        SAFE_HEAP_STORE_i64_8_8($9, 264, SAFE_HEAP_LOAD_i64_8_4($3, 12), i64toi32_i32$HIGH_BITS);
        $6 = $6 << 2;
        $5 = SAFE_HEAP_LOAD_f32_4_4($6 + $52 | 0, 0);
        SAFE_HEAP_STORE_f32_4_4($6 | $9 + 264, 0, Math_fround(Math_fround($5 - SAFE_HEAP_LOAD_f32_4_4($6 + $37 | 0, 0)) + Math_fround(4.0)));
        $8 = ($2 | 0) == 1 ? $24 : Math_fround(-3402823466385288598117041.0e14);
        $13 = (wasm2js_scratch_store_i32(2, $2 ? 2139095039 : $58), wasm2js_scratch_load_f32());
        $5 = SAFE_HEAP_LOAD_f32_4_4($9, 264);
        $5 = $5 < $8 ? $8 : $5 > $13 ? $13 : $5;
        SAFE_HEAP_STORE_f32_4_4($9, 264, $5);
        $6 = Math_imul($2, 28);
        $13 = SAFE_HEAP_LOAD_f32_4_4($6 + 20660 | 0, 0);
        $11 = SAFE_HEAP_LOAD_f32_4_4($6 + 20652 | 0, 0);
        $14 = ($2 | 0) == 3 ? $27 : Math_fround(-3402823466385288598117041.0e14);
        $18 = (wasm2js_scratch_store_i32(2, ($2 | 0) != 2 ? 2139095039 : $57), wasm2js_scratch_load_f32());
        $8 = SAFE_HEAP_LOAD_f32_4_4($9, 268);
        $8 = $8 < $14 ? $14 : $8 > $18 ? $18 : $8;
        SAFE_HEAP_STORE_f32_4_4($9, 268, $8);
        $19 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
        $14 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
        $16 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
        $18 = Math_fround($16 + SAFE_HEAP_LOAD_f32_4_4($3, 24));
        $13 = $11 < $13 ? $11 : $13;
        $11 = Math_fround(Math_fround(Math_fround($16 - $8) * $13) + $8);
        $16 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $18) * $13) + $18) - $11);
        SAFE_HEAP_STORE_f32_4_4($9, 220, $16);
        $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 20648 | 0, 0);
        $18 = SAFE_HEAP_LOAD_f32_4_4($6 + 20656 | 0, 0);
        $18 = $8 < $18 ? $8 : $18;
        $8 = Math_fround(Math_fround(Math_fround($14 - $5) * $18) + $5);
        $28 = $5;
        $5 = Math_fround($14 + $19);
        $5 = Math_fround(Math_fround(Math_fround(Math_fround($28 - $5) * $18) + $5) - $8);
        SAFE_HEAP_STORE_f32_4_4($9, 216, $5);
        CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($9 - -64 | 0, $3, $9 + 216 | 0);
        $14 = $8;
        $8 = SAFE_HEAP_LOAD_f32_4_4($9, 64);
        $5 = Math_fround($14 - ($18 == Math_fround(0.0) ? Math_fround($8 - $5) : Math_fround(0.0)));
        $14 = $11;
        $11 = SAFE_HEAP_LOAD_f32_4_4($9, 68);
        $13 = Math_fround($14 - ($13 == Math_fround(0.0) ? Math_fround($11 - $16) : Math_fround(0.0)));
       }
       $7 = $4;
       $14 = $8;
       $18 = $11;
       $11 = $5;
       $19 = $5;
       $8 = $13;
       $16 = $8;
       $5 = $18;
       $13 = $14;
       $6 = $2 + 1 | 0;
       if (($6 | 0) != 4) {
        continue
       }
       break;
      };
     }
     $11 = $18;
     $4 = $7;
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
     SAFE_HEAP_STORE_i32_4_4($2, 196, SAFE_HEAP_LOAD_i32_4_4($2, 196) - 1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 292, 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($25, 7844);
     label$271 : {
      if (!$2) {
       break label$271
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 736) | 0) != ($3 | 0)) {
       break label$271
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($25, 7560);
      label$273 : {
       if (($2 | 0) != 2) {
        $13 = Math_fround(0.0);
        $5 = Math_fround(0.0);
        break label$273;
       }
       $13 = Math_fround(0.0);
       $5 = Math_fround(0.0);
       if (!SAFE_HEAP_LOAD_i32_1_U_1($25 + 253 | 0, 0)) {
        break label$273
       }
       ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($9 + 232 | 0, 1, 0, Math_fround(0.0), Math_fround(0.0));
       $13 = SAFE_HEAP_LOAD_f32_4_4($9, 232);
       $5 = SAFE_HEAP_LOAD_f32_4_4($9, 236);
      }
      if (($2 | 0) == 3) {
       ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($9 + 232 | 0, 4, 0, Math_fround(0.0), Math_fround(0.0));
       $13 = SAFE_HEAP_LOAD_f32_4_4($9, 232);
       $5 = SAFE_HEAP_LOAD_f32_4_4($9, 236);
      }
      if ($13 == Math_fround(0.0) & $5 == Math_fround(0.0)) {
       break label$271
      }
      $14 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
      $18 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
      $22 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
      $27 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
      $24 = SAFE_HEAP_LOAD_f32_4_4($9, 104);
      $29 = SAFE_HEAP_LOAD_f32_4_4($9, 108);
      SAFE_HEAP_STORE_i32_1_1($25, 7864, 0);
      SAFE_HEAP_STORE_i32_1_1($25, 7571, 1);
      $30 = SAFE_HEAP_LOAD_f32_4_4($25 + 24 | 0, 0);
      $8 = SAFE_HEAP_LOAD_f32_4_4($25 + 172 | 0, 0);
      $11 = SAFE_HEAP_LOAD_f32_4_4($25 + 168 | 0, 0);
      SAFE_HEAP_STORE_i32_4_4($9, 80, ImGui__GetColorU32_28int_2c_20float_29(32, Math_fround(1.0)));
      $38 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
      $28 = $5;
      $5 = Math_fround(Math_fround($30 * Math_fround(600.0)) * ($8 > $11 ? $11 : $8));
      label$277 : {
       if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
        $2 = ~~$5;
        break label$277;
       }
       $2 = -2147483648;
      }
      $5 = Math_fround($2 | 0);
      $8 = Math_fround($28 * $5);
      $11 = Math_fround(Math_fround($29 - $27) - $22);
      SAFE_HEAP_STORE_f32_4_4($9, 220, Math_fround(($8 >= $11 ? $8 : $11) + SAFE_HEAP_LOAD_f32_4_4($3 + 32 | 0, 0)));
      $5 = Math_fround($13 * $5);
      $8 = Math_fround(Math_fround($24 - $18) - $14);
      SAFE_HEAP_STORE_f32_4_4($9, 216, Math_fround($38 + ($5 >= $8 ? $5 : $8)));
      CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($9 + 232 | 0, $3, $9 + 216 | 0);
      $14 = SAFE_HEAP_LOAD_f32_4_4($9, 232);
      $11 = SAFE_HEAP_LOAD_f32_4_4($9, 236);
     }
     label$279 : {
      if ($14 == Math_fround(3402823466385288598117041.0e14)) {
       break label$279
      }
      SAFE_HEAP_STORE_f32_4_4($3, 28, $14);
      SAFE_HEAP_STORE_f32_4_4($3 + 32 | 0, 0, $11);
      if (SAFE_HEAP_LOAD_i32_1_U_1($3 + 9 | 0, 0) & 1) {
       break label$279
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!(SAFE_HEAP_LOAD_f32_4_4($2, 12128) <= Math_fround(0.0))) {
       break label$279
      }
      SAFE_HEAP_STORE_f32_4_4($2, 12128, SAFE_HEAP_LOAD_f32_4_4($2 + 28 | 0, 0));
     }
     label$280 : {
      if ($19 == Math_fround(3402823466385288598117041.0e14)) {
       break label$280
      }
      SAFE_HEAP_STORE_f32_4_4($3, 16, Math_fround((Math_fround(Math_abs($16)) < Math_fround(2147483648.0) ? ~~$16 : -2147483648) | 0));
      SAFE_HEAP_STORE_f32_4_4($3, 12, Math_fround((Math_fround(Math_abs($19)) < Math_fround(2147483648.0) ? ~~$19 : -2147483648) | 0));
      if (SAFE_HEAP_LOAD_i32_1_U_1($3 + 9 | 0, 0) & 1) {
       break label$280
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!(SAFE_HEAP_LOAD_f32_4_4($2, 12128) <= Math_fround(0.0))) {
       break label$280
      }
      SAFE_HEAP_STORE_f32_4_4($2, 12128, SAFE_HEAP_LOAD_f32_4_4($2 + 28 | 0, 0));
     }
     SAFE_HEAP_STORE_i64_8_4($3, 20, SAFE_HEAP_LOAD_i64_8_4($3, 28), i64toi32_i32$HIGH_BITS);
     $2 = $17;
    }
    $10 = $12 | $2;
    $2 = $2 | $20;
   }
   $27 = Math_fround($50 + $51);
   SAFE_HEAP_STORE_i32_1_1($3, 149, $4);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 141)) {
    $13 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 444 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3 + 436 | 0, 0)) + SAFE_HEAP_LOAD_f32_4_4($3 + 132 | 0, 0));
    $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 32 | 0, 0) - $27);
    label$286 : {
     if (!$35) {
      $5 = Math_fround(0.0);
      $8 = Math_fround(0.0);
      break label$286;
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($3, 60);
     $5 = Math_fround(Math_fround($5 + $5) + SAFE_HEAP_LOAD_f32_4_4($3, 36));
     $8 = SAFE_HEAP_LOAD_f32_4_4($3 - -64 | 0, 0);
     $8 = Math_fround(Math_fround($8 + $8) + SAFE_HEAP_LOAD_f32_4_4($3 + 40 | 0, 0));
    }
    $14 = SAFE_HEAP_LOAD_f32_4_4($3 + 440 | 0, 0);
    $18 = SAFE_HEAP_LOAD_f32_4_4($3, 432);
    $19 = SAFE_HEAP_LOAD_f32_4_4($3, 128);
    $16 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
    $13 = $2 & 1 ? $11 : $13;
    $2 = $21 & 16384 ? 1 : !($21 & 8) & $13 < $8;
    SAFE_HEAP_STORE_i32_1_1($3, 137, $2);
    $4 = 1;
    label$289 : {
     if ($21 & 32768) {
      break label$289
     }
     $14 = $10 & 1 ? $16 : Math_fround(Math_fround($14 - $18) + $19);
     if ($2) {
      $11 = SAFE_HEAP_LOAD_f32_4_4($15 + 5532 | 0, 0)
     } else {
      $11 = Math_fround(0.0)
     }
     $4 = 0;
     if (!(Math_fround($14 - $11) < $5)) {
      break label$289
     }
     $4 = 0;
     if ($21 & 8) {
      break label$289
     }
     $4 = ($21 & 2048) >>> 11 | 0;
    }
    SAFE_HEAP_STORE_i32_1_1($3, 136, $4);
    if (!($2 | $4 ^ 1)) {
     SAFE_HEAP_STORE_i32_1_1($3, 137, !($21 & 8) & $8 > $13)
    }
    $8 = Math_fround(0.0);
    if (SAFE_HEAP_LOAD_i32_1_U_1($3, 137)) {
     $5 = SAFE_HEAP_LOAD_f32_4_4($15 + 5532 | 0, 0)
    } else {
     $5 = Math_fround(0.0)
    }
    if ($4) {
     $8 = SAFE_HEAP_LOAD_f32_4_4($15 + 5532 | 0, 0)
    }
    SAFE_HEAP_STORE_f32_4_4($3, 128, $5);
    SAFE_HEAP_STORE_f32_4_4($3 + 132 | 0, 0, $8);
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0);
   $14 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($3 + 24 | 0, 0));
   $2 = $9 + 120 | 0;
   $7 = !$36 | ($33 | 0) != 0;
   $2 = $7 ? $2 : ($39 | 0) == 50331648 ? $2 : $26 + 496 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
   $6 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
   $8 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
   $13 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $19 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
   $18 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
   $16 = Math_fround($19 + $18);
   $22 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
   $24 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
   $5 = Math_fround(0.0);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 1)) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
    $10 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
    if ($10) {
     $5 = Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($10, 572))
    }
    $29 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
    $5 = Math_fround(Math_fround($29 + $29) + $5);
   }
   $2 = SAFE_HEAP_LOAD_i64_8_4($3, 12);
   $10 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_f32_4_4($9 + 76 | 0, 0, Math_fround($11 + $5));
   SAFE_HEAP_STORE_f32_4_4($9, 72, Math_fround($24 + $22));
   SAFE_HEAP_STORE_i64_8_8($9, 64, $2, $10);
   SAFE_HEAP_STORE_f32_4_4($3 + 420 | 0, 0, $8 <= $11 ? $11 : $8);
   SAFE_HEAP_STORE_f32_4_4($3, 416, $13 <= $19 ? $19 : $13);
   $22 = Math_fround($27 + $11);
   SAFE_HEAP_STORE_f32_4_4($3 + 436 | 0, 0, $22);
   $5 = (wasm2js_scratch_store_i32(2, $6), wasm2js_scratch_load_f32());
   SAFE_HEAP_STORE_f32_4_4($3 + 424 | 0, 0, $5 > $16 ? $16 : $5);
   $11 = (wasm2js_scratch_store_i32(2, $4), wasm2js_scratch_load_f32());
   SAFE_HEAP_STORE_f32_4_4($3 + 428 | 0, 0, $11 > $14 ? $14 : $11);
   $19 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
   SAFE_HEAP_STORE_f32_4_4($3, 432, $19);
   $14 = Math_fround($14 - SAFE_HEAP_LOAD_f32_4_4($3 + 132 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($3 + 444 | 0, 0, $14);
   $24 = Math_fround(Math_fround($18 + $19) - SAFE_HEAP_LOAD_f32_4_4($3, 128));
   SAFE_HEAP_STORE_f32_4_4($3 + 440 | 0, 0, $24);
   $29 = SAFE_HEAP_LOAD_f32_4_4(($21 & 1025) == 1 ? $3 + 72 | 0 : $15 + 5488 | 0, 0);
   $10 = $3 + 460 | 0;
   $16 = Math_fround($14 + Math_fround(.5));
   $14 = SAFE_HEAP_LOAD_f32_4_4($3, 72);
   $16 = Math_fround($16 - $14);
   label$299 : {
    if (Math_fround(Math_abs($16)) < Math_fround(2147483648.0)) {
     $2 = ~~$16;
     break label$299;
    }
    $2 = -2147483648;
   }
   $16 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($10, 0, $8 > $16 ? $8 : $11 < $16 ? $11 : $16);
   $10 = $3 + 452 | 0;
   $16 = Math_fround(Math_fround($22 + Math_fround(.5)) + $29);
   label$301 : {
    if (Math_fround(Math_abs($16)) < Math_fround(2147483648.0)) {
     $2 = ~~$16;
     break label$301;
    }
    $2 = -2147483648;
   }
   $16 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($10, 0, $8 > $16 ? $8 : $11 < $16 ? $11 : $16);
   $10 = $3 + 456 | 0;
   $16 = Math_fround($24 + Math_fround(.5));
   $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 60) * Math_fround(.5));
   label$303 : {
    if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
     $2 = ~~$11;
     break label$303;
    }
    $2 = -2147483648;
   }
   $11 = Math_fround($2 | 0);
   $14 = $11 >= $14 ? $11 : $14;
   $11 = Math_fround($16 - $14);
   label$305 : {
    if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
     $2 = ~~$11;
     break label$305;
    }
    $2 = -2147483648;
   }
   $11 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($10, 0, $11 < $13 ? $13 : $5 < $11 ? $5 : $11);
   $11 = Math_fround(Math_fround($19 + Math_fround(.5)) + $14);
   label$307 : {
    if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
     $2 = ~~$11;
     break label$307;
    }
    $2 = -2147483648;
   }
   $11 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($3, 448, $11 < $13 ? $13 : $5 < $11 ? $5 : $11);
   if ($45 | (!($18 > Math_fround(0.0)) | $46)) {
    $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($15, 6468) * Math_fround(16.0))
   } else {
    $5 = Math_fround($18 * Math_fround(.6499999761581421))
   }
   label$311 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$311;
    }
    $2 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($3, 544, Math_fround($2 | 0));
   $5 = SAFE_HEAP_LOAD_f32_4_4($3, 60);
   $5 = Math_fround(Math_fround(Math_fround($5 + $5) + SAFE_HEAP_LOAD_f32_4_4($3, 36)) - Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 440 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3, 432)));
   SAFE_HEAP_STORE_f32_4_4($3, 96, $5 <= Math_fround(0.0) ? Math_fround(0.0) : $5);
   $5 = SAFE_HEAP_LOAD_f32_4_4($3 - -64 | 0, 0);
   $5 = Math_fround(Math_fround(Math_fround($5 + $5) + SAFE_HEAP_LOAD_f32_4_4($3 + 40 | 0, 0)) - Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 444 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3 + 436 | 0, 0)));
   SAFE_HEAP_STORE_f32_4_4($3 + 100 | 0, 0, $5 <= Math_fround(0.0) ? Math_fround(0.0) : $5);
   CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($9 + 232 | 0, $3);
   SAFE_HEAP_STORE_i64_8_4($3, 88, SAFE_HEAP_LOAD_i64_8_8($9, 232), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3, 104, 2139095039, 2139095039);
   ImDrawList__PushTextureID_28void__29(SAFE_HEAP_LOAD_i32_4_4($3, 580), SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($15, 6464), 48), 4));
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
   SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
   $10 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   SAFE_HEAP_STORE_f32_4_4($9, 236, $8);
   SAFE_HEAP_STORE_f32_4_4($9, 232, $13);
   SAFE_HEAP_STORE_i32_4_4($9, 220, $4);
   SAFE_HEAP_STORE_i32_4_4($9, 216, $6);
   SAFE_HEAP_STORE_i64_8_8($9, 56, SAFE_HEAP_LOAD_i64_8_8($9, 232), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($9, 48, SAFE_HEAP_LOAD_i64_8_8($9, 216), i64toi32_i32$HIGH_BITS);
   ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($10, $9 + 56 | 0, $9 + 48 | 0, 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   $4 = ((SAFE_HEAP_LOAD_i32_4_4($4, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($4 + 68 | 0, 0) | 0) - 16 | 0;
   $6 = SAFE_HEAP_LOAD_i64_8_4($4, 0);
   $10 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_4($2 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($4, 8), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($2, 496, $6, $10);
   $6 = 0;
   label$313 : {
    if ($7 | ($39 | 0) == 50331648) {
     break label$313
    }
    $4 = 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4($26 + 352 | 0, 0);
    if (($2 | 0) >= 2) {
     $4 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($26 + 360 | 0, 0) + ($2 << 2) | 0) - 8 | 0, 0)
    }
    $2 = 0;
    label$315 : {
     if (!$4) {
      break label$315
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
     $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 16 | 0, 0);
     $2 = 0;
     if (!($5 < Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($4 + 24 | 0, 0)))) {
      break label$315
     }
     $2 = 0;
     if (!($8 < Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 24)))) {
      break label$315
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
     $8 = SAFE_HEAP_LOAD_f32_4_4($4, 12);
     $2 = 0;
     if (!($5 < Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($4, 20)))) {
      break label$315
     }
     $2 = $8 < Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 20));
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
    $6 = 0;
    if (SAFE_HEAP_LOAD_i32_4_4((Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 0), 40) + SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0) - 12 | 0, 0)) {
     break label$313
    }
    $6 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($26, 580), 24) | 0) <= 0) {
     break label$313
    }
    $6 = $2 ^ 1;
   }
   $2 = $6;
   $20 = $2;
   if ($2) {
    SAFE_HEAP_STORE_i32_4_4($3, 580, SAFE_HEAP_LOAD_i32_4_4($26, 580))
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($15, 7844);
   if (!$2) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($15, 7508)
   }
   $10 = 1;
   label$322 : {
    if ($34) {
     break label$322
    }
    $10 = 0;
    if (!$2) {
     break label$322
    }
    $10 = (SAFE_HEAP_LOAD_i32_4_4($3, 744) | 0) == (SAFE_HEAP_LOAD_i32_4_4($2, 744) | 0);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   SAFE_HEAP_STORE_i32_1_1($3, 143, 0);
   $13 = SAFE_HEAP_LOAD_f32_4_4($3, 72);
   $11 = SAFE_HEAP_LOAD_f32_4_4($3, 68);
   label$324 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($3, 141)) {
     $4 = $2 + 5488 | 0;
     $14 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
     SAFE_HEAP_STORE_f32_4_4($4, 0, $13);
     $6 = $2 + 5416 | 0;
     if ($10) {
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($2, 7570) ? 12 : 11
     } else {
      $4 = 12
     }
     $4 = $6 + ($4 << 4) | 0;
     $18 = SAFE_HEAP_LOAD_f32_4_4($4 + 212 | 0, 0);
     $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 208 | 0, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 200 | 0, 0);
     $13 = SAFE_HEAP_LOAD_f32_4_4($4 + 204 | 0, 0);
     $19 = SAFE_HEAP_LOAD_f32_4_4($2, 5416);
     $4 = SAFE_HEAP_LOAD_i64_8_8($9, 64);
     $6 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($9, 232, $4, $6);
     $7 = SAFE_HEAP_LOAD_i64_8_8($9, 72);
     $10 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($9, 216, $7, $10);
     SAFE_HEAP_STORE_i64_8_8($9, 40, $4, $6);
     SAFE_HEAP_STORE_i64_8_8($9, 32, $7, $10);
     $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : $13 > Math_fround(1.0) ? Math_fround(1.0) : $13) * Math_fround(255.0)) + Math_fround(.5));
     label$327 : {
      if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
       $4 = ~~$13;
       break label$327;
      }
      $4 = -2147483648;
     }
     $4 = $4 << 8;
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$329 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $6 = ~~$8;
       break label$329;
      }
      $6 = -2147483648;
     }
     $4 = $6 | $4;
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$331 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$331;
      }
      $6 = -2147483648;
     }
     $4 = $4 | $6 << 16;
     $7 = $9 + 40 | 0;
     $10 = $9 + 32 | 0;
     $5 = Math_fround($18 * $19);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$333 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$333;
      }
      $6 = -2147483648;
     }
     ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($7, $10, $4 | $6 << 24, 1, $11);
     SAFE_HEAP_STORE_f32_4_4($2, 5488, $14);
     break label$324;
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
    if (!($4 & 128)) {
     $6 = ($2 + 5416 | 0) + (($4 & 100663296 ? 4 : $4 & 16777216 ? 3 : 2) << 4) | 0;
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 204 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$336 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$336;
      }
      $7 = -2147483648;
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 200 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$338 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $12 = ~~$5;
       break label$338;
      }
      $12 = -2147483648;
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 208 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$340 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $17 = ~~$5;
       break label$340;
      }
      $17 = -2147483648;
     }
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 212 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$342 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $23 = ~~$5;
       break label$342;
      }
      $23 = -2147483648;
     }
     $8 = Math_fround(1.0);
     $25 = SAFE_HEAP_LOAD_i32_4_4($2, 7300) & 64;
     if ($25) {
      $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 7384 | 0, 0)
     }
     $6 = $7 << 8 | $12 | $17 << 16;
     if ($25) {
      $7 = $6 & 16777215;
      $5 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
      label$347 : {
       if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
        $6 = ~~$5;
        break label$347;
       }
       $6 = -2147483648;
      }
      $6 = $7 | $6 << 24;
     } else {
      $6 = $6 | $23 << 24
     }
     $12 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     $7 = 0;
     $14 = Math_fround(0.0);
     if (!($4 & 1)) {
      $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
      $7 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
      if ($7) {
       $8 = Math_fround($8 * SAFE_HEAP_LOAD_f32_4_4($7, 572))
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
      $14 = Math_fround(Math_fround($5 + $5) + $8);
      $7 = 192;
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
     $8 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
     SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($14 + $8));
     SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($5 + Math_fround(0.0)));
     $14 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
     SAFE_HEAP_STORE_f32_4_4($9, 220, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($3, 24)));
     SAFE_HEAP_STORE_f32_4_4($9, 216, Math_fround($5 + $14));
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($12, $9 + 232 | 0, $9 + 216 | 0, $6, $11, $7);
    }
    $7 = $4 & 1;
    if (!$7) {
     $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $6 = ($12 + 5416 | 0) + ($10 ? 176 : 160) | 0;
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 204 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$353 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $10 = ~~$5;
       break label$353;
      }
      $10 = -2147483648;
     }
     $10 = $10 << 8;
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 200 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$355 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $17 = ~~$5;
       break label$355;
      }
      $17 = -2147483648;
     }
     $10 = $17 | $10;
     $17 = $9 + 72 | 0;
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 208 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$357 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $23 = ~~$5;
       break label$357;
      }
      $23 = -2147483648;
     }
     $10 = $10 | $23 << 16;
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 212 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($12, 5416));
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$359 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$359;
      }
      $6 = -2147483648;
     }
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($3, 580), $9 - -64 | 0, $17, $10 | $6 << 24, $11, 48);
    }
    $10 = $3 + 12 | 0;
    label$361 : {
     if (!($4 & 1024)) {
      break label$361
     }
     $8 = Math_fround(0.0);
     $6 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
     if (!($6 & 1)) {
      $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($12, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
      $17 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
      if ($17) {
       $8 = Math_fround($8 * SAFE_HEAP_LOAD_f32_4_4($17, 572))
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($12 + 5480 | 0, 0);
      $8 = Math_fround(Math_fround($5 + $5) + $8);
     }
     $14 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
     $19 = SAFE_HEAP_LOAD_f32_4_4($47, 0);
     $18 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
     $5 = Math_fround(0.0);
     if ($6 & 1024) {
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
      $16 = SAFE_HEAP_LOAD_f32_4_4($3, 312);
      $12 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
      if ($12) {
       $5 = Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($12, 572))
      }
      $22 = SAFE_HEAP_LOAD_f32_4_4($6 + 5480 | 0, 0);
      $5 = Math_fround(Math_fround($22 + $22) + Math_fround($16 + $5));
     }
     $12 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     $16 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
     $22 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
     SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($13 + $18));
     $8 = Math_fround($14 + $8);
     SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround(($8 >= $14 ? $8 : $14) + Math_fround(0.0)));
     $5 = Math_fround($8 + $5);
     $8 = Math_fround($14 + $22);
     $5 = $5 < $8 ? $5 : $8;
     SAFE_HEAP_STORE_f32_4_4($9, 220, $5);
     $8 = Math_fround($18 + $19);
     $14 = Math_fround($18 + $16);
     $14 = $8 < $14 ? $8 : $14;
     SAFE_HEAP_STORE_f32_4_4($9, 216, Math_fround($14 - $13));
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 5828 | 0, 0);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$368 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $17 = ~~$8;
       break label$368;
      }
      $17 = -2147483648;
     }
     $17 = $17 << 8;
     $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 5824 | 0, 0);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$370 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $23 = ~~$8;
       break label$370;
      }
      $23 = -2147483648;
     }
     $17 = $23 | $17;
     $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 5832 | 0, 0);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$372 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $23 = ~~$8;
       break label$372;
      }
      $23 = -2147483648;
     }
     $17 = $17 | $23 << 16;
     $23 = $9 + 232 | 0;
     $35 = $9 + 216 | 0;
     $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 5836 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($6, 5416));
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$374 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $6 = ~~$8;
       break label$374;
      }
      $6 = -2147483648;
     }
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($12, $23, $35, $17 | $6 << 24, $7 ? $11 : Math_fround(0.0), 48);
     $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5488 | 0, 0);
     if (!($8 > Math_fround(0.0))) {
      break label$361
     }
     if (!($5 < Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 16) + SAFE_HEAP_LOAD_f32_4_4($3, 24)))) {
      break label$361
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     SAFE_HEAP_STORE_f32_4_4($9, 236, $5);
     SAFE_HEAP_STORE_f32_4_4($9, 232, $18);
     SAFE_HEAP_STORE_f32_4_4($9, 220, $5);
     SAFE_HEAP_STORE_f32_4_4($9, 216, $14);
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5700 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$376 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$376;
      }
      $7 = -2147483648;
     }
     $7 = $7 << 8;
     $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5696 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$378 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $17 = ~~$5;
       break label$378;
      }
      $17 = -2147483648;
     }
     $7 = $17 | $7;
     $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5704 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$380 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $17 = ~~$5;
       break label$380;
      }
      $17 = -2147483648;
     }
     $7 = $7 | $17 << 16;
     $17 = $9 + 232 | 0;
     $12 = $9 + 216 | 0;
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5708 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$382 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $2 = ~~$5;
       break label$382;
      }
      $2 = -2147483648;
     }
     ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($6, $17, $12, $7 | $2 << 24, $8);
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($3, 136)) {
     ImGui__Scrollbar_28ImGuiAxis_29(0)
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($3, 137)) {
     ImGui__Scrollbar_28ImGuiAxis_29(1)
    }
    if (!($4 & 2)) {
     $5 = Math_fround($31 | 0);
     $8 = Math_fround($11 + $13);
     $4 = 0;
     while (1) {
      $14 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
      $6 = Math_imul($4, 24);
      $14 = Math_fround(Math_fround(Math_fround(Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($3, 24)) - $14) * SAFE_HEAP_LOAD_f32_4_4($6 + 20548 | 0, 0)) + $14);
      $2 = $4 & 1;
      $22 = $2 ? $5 : $13;
      $18 = SAFE_HEAP_LOAD_f32_4_4($6 + 20556 | 0, 0);
      $24 = Math_fround($14 + Math_fround($22 * $18));
      $19 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
      $19 = Math_fround(Math_fround(Math_fround(Math_fround($19 + SAFE_HEAP_LOAD_f32_4_4($3, 20)) - $19) * SAFE_HEAP_LOAD_f32_4_4($6 + 20544 | 0, 0)) + $19);
      $29 = $2 ? $13 : $5;
      $16 = SAFE_HEAP_LOAD_f32_4_4($6 + 20552 | 0, 0);
      $30 = Math_fround($19 + Math_fround($29 * $16));
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
      $12 = SAFE_HEAP_LOAD_i32_4_4($2, 84);
      $7 = SAFE_HEAP_LOAD_i32_4_4($2 + 88 | 0, 0);
      label$388 : {
       if (($12 | 0) != ($7 | 0)) {
        break label$388
       }
       $17 = $7;
       $7 = $7 ? $7 + (($7 | 0) / 2 | 0) | 0 : 8;
       $12 = $12 + 1 | 0;
       $7 = ($7 | 0) > ($12 | 0) ? $7 : $12;
       if (($17 | 0) >= ($7 | 0)) {
        break label$388
       }
       $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($12) {
        $12 = $12 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) + 1 | 0);
       }
       $12 = (((wasm2js_i32$1 = $7 << 3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
       $17 = SAFE_HEAP_LOAD_i32_4_4($2 + 92 | 0, 0);
       if ($17) {
        __memcpy($12, $17, SAFE_HEAP_LOAD_i32_4_4($2, 84) << 3);
        $17 = SAFE_HEAP_LOAD_i32_4_4($2, 92);
        label$393 : {
         if (!$17) {
          break label$393
         }
         $23 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!$23) {
          break label$393
         }
         $23 = $23 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($23, 0, SAFE_HEAP_LOAD_i32_4_4($23, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $17, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($2, 88, $7);
       SAFE_HEAP_STORE_i32_4_4($2, 92, $12);
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($2 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($2, 84) << 3) | 0;
      SAFE_HEAP_STORE_f32_4_4($7, 4, $24);
      SAFE_HEAP_STORE_f32_4_4($7, 0, $30);
      SAFE_HEAP_STORE_i32_4_4($2, 84, SAFE_HEAP_LOAD_i32_4_4($2, 84) + 1 | 0);
      $24 = Math_fround($14 + Math_fround($29 * $18));
      $22 = Math_fround($19 + Math_fround($22 * $16));
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
      $12 = SAFE_HEAP_LOAD_i32_4_4($2, 84);
      $7 = SAFE_HEAP_LOAD_i32_4_4($2 + 88 | 0, 0);
      label$394 : {
       if (($12 | 0) != ($7 | 0)) {
        break label$394
       }
       $17 = $7;
       $7 = $7 ? $7 + (($7 | 0) / 2 | 0) | 0 : 8;
       $12 = $12 + 1 | 0;
       $7 = ($7 | 0) > ($12 | 0) ? $7 : $12;
       if (($17 | 0) >= ($7 | 0)) {
        break label$394
       }
       $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($12) {
        $12 = $12 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($12, 0, SAFE_HEAP_LOAD_i32_4_4($12, 0) + 1 | 0);
       }
       $12 = (((wasm2js_i32$1 = $7 << 3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
       $17 = SAFE_HEAP_LOAD_i32_4_4($2 + 92 | 0, 0);
       if ($17) {
        __memcpy($12, $17, SAFE_HEAP_LOAD_i32_4_4($2, 84) << 3);
        $17 = SAFE_HEAP_LOAD_i32_4_4($2, 92);
        label$399 : {
         if (!$17) {
          break label$399
         }
         $23 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!$23) {
          break label$399
         }
         $23 = $23 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($23, 0, SAFE_HEAP_LOAD_i32_4_4($23, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $17, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($2, 88, $7);
       SAFE_HEAP_STORE_i32_4_4($2, 92, $12);
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($2 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($2, 84) << 3) | 0;
      SAFE_HEAP_STORE_f32_4_4($7, 4, $24);
      SAFE_HEAP_STORE_f32_4_4($7, 0, $22);
      SAFE_HEAP_STORE_i32_4_4($2, 84, SAFE_HEAP_LOAD_i32_4_4($2, 84) + 1 | 0);
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
      SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround(Math_fround($18 * $8) + $14));
      SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround(Math_fround($16 * $8) + $19));
      ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($2, $9 + 232 | 0, $11, SAFE_HEAP_LOAD_i32_4_4($6 + 20560 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($6 + 20564 | 0, 0));
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
      $6 = SAFE_HEAP_LOAD_i32_4_4($2 + 92 | 0, 0);
      ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($2, $6, SAFE_HEAP_LOAD_i32_4_4($2, 84), SAFE_HEAP_LOAD_i32_4_4(($9 + 80 | 0) + ($4 << 2) | 0, 0));
      SAFE_HEAP_STORE_i32_4_4($2, 84, 0);
      $4 = $4 + 1 | 0;
      if (($42 | 0) != ($4 | 0)) {
       continue
      }
      break;
     };
    }
    $22 = SAFE_HEAP_LOAD_f32_4_4($3, 68);
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $24 = SAFE_HEAP_LOAD_f32_4_4($3, 72);
    label$400 : {
     if (!($24 > Math_fround(0.0))) {
      break label$400
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 128) {
      break label$400
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     $5 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
     $8 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
     SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 16) + SAFE_HEAP_LOAD_f32_4_4($3, 24)));
     SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($8 + $5));
     $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5700 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$401 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$401;
      }
      $6 = -2147483648;
     }
     $6 = $6 << 8;
     $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5696 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$403 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$403;
      }
      $7 = -2147483648;
     }
     $6 = $7 | $6;
     $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5704 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$405 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$405;
      }
      $7 = -2147483648;
     }
     $6 = $6 | $7 << 16;
     $17 = $9 + 232 | 0;
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5708 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$407 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$407;
      }
      $7 = -2147483648;
     }
     ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($4, $10, $17, $6 | $7 << 24, $22, 0, $24);
    }
    $6 = SAFE_HEAP_LOAD_i32_1_1($3, 149);
    if (($6 | 0) != -1) {
     $4 = Math_imul($6, 28);
     $7 = $4 + 20640 | 0;
     $14 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
     $18 = Math_fround(Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($3, 24)) + Math_fround(-1.0));
     $19 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
     $16 = Math_fround(Math_fround($19 + SAFE_HEAP_LOAD_f32_4_4($3, 20)) + Math_fround(-1.0));
     $11 = Math_fround(0.0);
     $13 = Math_fround(0.0);
     $5 = Math_fround(0.0);
     $8 = Math_fround(0.0);
     label$410 : {
      label$411 : {
       switch ($6 | 0) {
       case 0:
        $11 = Math_fround($18 - $22);
        $13 = Math_fround($19 + Math_fround(0.0));
        $5 = Math_fround($22 + $14);
        $8 = $19;
        break label$410;
       case 1:
        $11 = Math_fround($18 - $22);
        $13 = Math_fround($16 + Math_fround(0.0));
        $5 = Math_fround($22 + $14);
        $8 = $16;
        break label$410;
       case 2:
        $11 = Math_fround($14 + Math_fround(0.0));
        $13 = Math_fround($16 - $22);
        $5 = $14;
        $8 = Math_fround($22 + $19);
        break label$410;
       case 3:
        break label$411;
       default:
        break label$410;
       };
      }
      $11 = Math_fround($18 + Math_fround(0.0));
      $13 = Math_fround($16 - $22);
      $5 = $18;
      $8 = Math_fround($22 + $19);
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     $11 = Math_fround($11 - $5);
     $18 = Math_fround(Math_fround(Math_fround($11 * SAFE_HEAP_LOAD_f32_4_4($4 + 20652 | 0, 0)) + $5) + Math_fround(.5));
     $14 = Math_fround($22 * SAFE_HEAP_LOAD_f32_4_4($7, 4));
     SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($18 + $14));
     $18 = Math_fround($13 - $8);
     $13 = Math_fround(Math_fround(Math_fround($18 * SAFE_HEAP_LOAD_f32_4_4($4 + 20648 | 0, 0)) + $8) + Math_fround(.5));
     $19 = Math_fround($22 * SAFE_HEAP_LOAD_f32_4_4($7, 0));
     SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($13 + $19));
     $7 = $6;
     $6 = $9 + 232 | 0;
     $13 = SAFE_HEAP_LOAD_f32_4_4($4 + 20664 | 0, 0);
     ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($7, $6, $22, Math_fround($13 + Math_fround(-.7853981852531433)), $13, 0);
     $7 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     SAFE_HEAP_STORE_f32_4_4($9, 236, Math_fround($14 + Math_fround(Math_fround(Math_fround($11 * SAFE_HEAP_LOAD_f32_4_4($4 + 20660 | 0, 0)) + $5) + Math_fround(.5))));
     SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($19 + Math_fround(Math_fround(Math_fround($18 * SAFE_HEAP_LOAD_f32_4_4($4 + 20656 | 0, 0)) + $8) + Math_fround(.5))));
     ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($7, $6, $22, $13, Math_fround($13 + Math_fround(.7853981852531433)), 0);
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 6084 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$415 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$415;
      }
      $6 = -2147483648;
     }
     $6 = $6 << 8;
     $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 6080 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$417 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$417;
      }
      $7 = -2147483648;
     }
     $6 = $7 | $6;
     $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 6088 | 0, 0);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$419 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$419;
      }
      $7 = -2147483648;
     }
     $6 = $6 | $7 << 16;
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 6092 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($4, 5416));
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$421 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$421;
      }
      $7 = -2147483648;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     $10 = SAFE_HEAP_LOAD_i32_4_4($4 + 92 | 0, 0);
     ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($4, $10, SAFE_HEAP_LOAD_i32_4_4($4, 84), $6 | $7 << 24, 0, $24 <= Math_fround(2.0) ? Math_fround(2.0) : $24);
     SAFE_HEAP_STORE_i32_4_4($4, 84, 0);
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5488 | 0, 0);
    if (!($8 > Math_fround(0.0))) {
     break label$324
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 1) {
     break label$324
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($3, 572));
    $11 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
    if ($4) {
     $13 = Math_fround($13 * SAFE_HEAP_LOAD_f32_4_4($4, 572))
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
    $14 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
    SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($24 + $14));
    $5 = Math_fround(Math_fround($11 + Math_fround(Math_fround($5 + $5) + $13)) + Math_fround(-1.0));
    SAFE_HEAP_STORE_f32_4_4($9, 236, $5);
    $13 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
    SAFE_HEAP_STORE_f32_4_4($9, 220, $5);
    SAFE_HEAP_STORE_f32_4_4($9, 216, Math_fround(Math_fround($14 + $13) - $24));
    $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5700 | 0, 0);
    $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
    label$425 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $6 = ~~$5;
      break label$425;
     }
     $6 = -2147483648;
    }
    $6 = $6 << 8;
    $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5696 | 0, 0);
    $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
    label$427 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $7 = ~~$5;
      break label$427;
     }
     $7 = -2147483648;
    }
    $6 = $7 | $6;
    $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5704 | 0, 0);
    $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
    label$429 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $7 = ~~$5;
      break label$429;
     }
     $7 = -2147483648;
    }
    $6 = $6 | $7 << 16;
    $7 = $9 + 232 | 0;
    $10 = $9 + 216 | 0;
    $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5708 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
    $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
    label$431 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $2 = ~~$5;
      break label$431;
     }
     $2 = -2147483648;
    }
    ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($4, $7, $10, $6 | $2 << 24, $8);
   }
   if ($20) {
    SAFE_HEAP_STORE_i32_4_4($3, 580, $3 + 584 | 0)
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($3, 52);
   if ($5 == Math_fround(0.0)) {
    $8 = Math_fround(0.0);
    if (($21 & 2056) == 2048) {
     $8 = SAFE_HEAP_LOAD_f32_4_4($41, 0)
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
    $13 = SAFE_HEAP_LOAD_f32_4_4($3, 60);
    $13 = Math_fround(Math_fround($11 - Math_fround($13 + $13)) - SAFE_HEAP_LOAD_f32_4_4($3, 128));
    $13 = $8 >= $13 ? $8 : $13;
   } else {
    $13 = $5
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($3 + 56 | 0, 0);
   $8 = $11;
   if ($8 == Math_fround(0.0)) {
    $8 = Math_fround(0.0);
    if (!($21 & 8)) {
     $8 = SAFE_HEAP_LOAD_f32_4_4($3, 40)
    }
    $18 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
    $14 = SAFE_HEAP_LOAD_f32_4_4($3, 64);
    $14 = Math_fround(Math_fround(Math_fround($18 - Math_fround($14 + $14)) - $27) - SAFE_HEAP_LOAD_f32_4_4($3, 132));
    $8 = $8 >= $14 ? $8 : $14;
   }
   $18 = SAFE_HEAP_LOAD_f32_4_4($3, 432);
   $19 = SAFE_HEAP_LOAD_f32_4_4($3, 88);
   $14 = SAFE_HEAP_LOAD_f32_4_4($3, 60);
   $16 = SAFE_HEAP_LOAD_f32_4_4($3, 72);
   $18 = Math_fround(Math_fround($18 - $19) + ($14 >= $16 ? $14 : $16));
   label$438 : {
    if (Math_fround(Math_abs($18)) < Math_fround(2147483648.0)) {
     $2 = ~~$18;
     break label$438;
    }
    $2 = -2147483648;
   }
   $24 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($3, 464, $24);
   $4 = $3 + 468 | 0;
   $28 = SAFE_HEAP_LOAD_f32_4_4($3, 436);
   $22 = SAFE_HEAP_LOAD_f32_4_4($3 + 92 | 0, 0);
   $18 = SAFE_HEAP_LOAD_f32_4_4($3, 64);
   $16 = Math_fround(Math_fround($28 - $22) + ($16 <= $18 ? $18 : $16));
   label$440 : {
    if (Math_fround(Math_abs($16)) < Math_fround(2147483648.0)) {
     $2 = ~~$16;
     break label$440;
    }
    $2 = -2147483648;
   }
   $16 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($4, 0, $16);
   SAFE_HEAP_STORE_f32_4_4($3 + 476 | 0, 0, Math_fround($8 + $16));
   $2 = $3 + 472 | 0;
   SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($13 + $24));
   SAFE_HEAP_STORE_i64_8_4($3, 480, SAFE_HEAP_LOAD_i64_8_4($3, 464), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3 + 488 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   $8 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
   $13 = Math_fround($14 + Math_fround($8 - $19));
   SAFE_HEAP_STORE_f32_4_4($3, 512, $13);
   $16 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
   $24 = Math_fround($27 + Math_fround($18 + Math_fround($16 - $22)));
   SAFE_HEAP_STORE_f32_4_4($3 + 516 | 0, 0, $24);
   $2 = $3 + 520 | 0;
   if ($5 == Math_fround(0.0)) {
    $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 20) - Math_fround($14 + $14)) - SAFE_HEAP_LOAD_f32_4_4($3, 128))
   }
   SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($13 + $5));
   if ($11 == Math_fround(0.0)) {
    $11 = Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 24) - Math_fround($18 + $18)) - $27) - SAFE_HEAP_LOAD_f32_4_4($3, 132))
   }
   $44 = +$18 + +$16 - +$22 + +$27;
   $5 = Math_fround($44);
   SAFE_HEAP_STORE_f32_4_4($3 + 228 | 0, 0, $5);
   $2 = $3 + 224 | 0;
   $49 = +$14 + +$8 - +$19 + 0.0;
   $8 = Math_fround($49);
   SAFE_HEAP_STORE_f32_4_4($2, 0, $8);
   SAFE_HEAP_STORE_f32_4_4($3 + 524 | 0, 0, Math_fround($24 + $11));
   SAFE_HEAP_STORE_i64_8_4($3 + 276 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($3 + 292 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($3 + 248 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($3 + 256 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($3 + 264 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_f32_4_4($3 + 272 | 0, 0, Math_fround(Math_fround($14 + Math_fround(0.0)) - $19));
   $2 = SAFE_HEAP_LOAD_i64_8_4($2, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_4($3 + 240 | 0, 0, $2, $4);
   SAFE_HEAP_STORE_i64_8_4($3 + 232 | 0, 0, $2, $4);
   SAFE_HEAP_STORE_i64_8_4($3 + 216 | 0, 0, $2, $4);
   SAFE_HEAP_STORE_i64_8_4($3, 208, $2, $4);
   SAFE_HEAP_STORE_f32_4_4($3 + 288 | 0, 0, Math_fround($44 - +$5));
   SAFE_HEAP_STORE_f32_4_4($3 + 284 | 0, 0, Math_fround($49 - +$8));
   $2 = $3 + 298 | 0;
   $4 = SAFE_HEAP_LOAD_i32_2_U_2($2, 0);
   SAFE_HEAP_STORE_i32_2_2($2, 0, 0);
   SAFE_HEAP_STORE_i32_1_1($3 + 304 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_2_2($3 + 296 | 0, 0, $4);
   $5 = SAFE_HEAP_LOAD_f32_4_4($3, 100);
   SAFE_HEAP_STORE_i32_1_1($3 + 306 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_1_1($3 + 305 | 0, 0, $5 > Math_fround(0.0));
   $2 = $3 + 316 | 0;
   $5 = SAFE_HEAP_LOAD_f32_4_4($15, 5492);
   $6 = 0;
   $7 = 0;
   if ($43) {
    SAFE_HEAP_STORE_i64_8_2($2, 18)
   }
   $4 = $5 < Math_fround(4294967296.0) & $5 >= Math_fround(0.0) ? ~~$5 >>> 0 : 0;
   $12 = $4;
   SAFE_HEAP_STORE_i32_2_2($2, 8, $4);
   $4 = 0;
   while (1) {
    $10 = SAFE_HEAP_LOAD_i32_2_U_2((($4 << 1) + $2 | 0) + 18 | 0, 0);
    $6 = ($7 & 1 ? ($10 ? $12 : 0) : 0) + $6 | 0;
    $20 = ($10 | 0) != 0;
    label$52 : {
     label$6 : {
      switch ($4 - 1 | 0) {
      case 0:
       SAFE_HEAP_STORE_i32_2_2($2, 12, $6);
       break label$52;
      case 1:
       SAFE_HEAP_STORE_i32_2_2($2, 14, $6);
       break label$52;
      case 2:
       break label$6;
      default:
       break label$52;
      };
     }
     SAFE_HEAP_STORE_i32_2_2($2, 16, $6);
    }
    $6 = $6 + $10 | 0;
    $7 = $7 | $20;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != 4) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i64_8_2($2, 18);
   SAFE_HEAP_STORE_i32_4_4($2, 4, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 0, $6 & 65535);
   SAFE_HEAP_STORE_i64_8_4($3 + 344 | 0, 0, 0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 356 | 0, 0);
   label$444 : {
    if (($2 | 0) >= 0) {
     break label$444
    }
    $4 = $2 + (($2 | 0) / 2 | 0) | 0;
    $4 = ($4 | 0) > 0 ? $4 : 0;
    if (($2 | 0) >= ($4 | 0)) {
     break label$444
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($2) {
     $2 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
    }
    $2 = (((wasm2js_i32$1 = $4 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $6 = SAFE_HEAP_LOAD_i32_4_4($3 + 360 | 0, 0);
    if ($6) {
     __memcpy($2, $6, SAFE_HEAP_LOAD_i32_4_4($3, 352) << 2);
     $6 = SAFE_HEAP_LOAD_i32_4_4($3, 360);
     label$447 : {
      if (!$6) {
       break label$447
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$7) {
       break label$447
      }
      $7 = $7 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $6, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($3, 356, $4);
    SAFE_HEAP_STORE_i32_4_4($3, 360, $2);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 352, 0);
   SAFE_HEAP_STORE_i32_4_4($3 + 376 | 0, 0, 1);
   SAFE_HEAP_STORE_i32_4_4($3 + 368 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($3 + 364 | 0, 0, $3 + 548 | 0);
   $4 = $3 + 380 | 0;
   if ($26) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($26 + 376 | 0, 0)
   } else {
    $2 = 1
   }
   SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
   SAFE_HEAP_STORE_i32_4_4($3 + 388 | 0, 0, -1082130432);
   SAFE_HEAP_STORE_f32_4_4($3 + 384 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($3, 544));
   $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 396 | 0, 0);
   label$449 : {
    if (($2 | 0) >= 0) {
     break label$449
    }
    $4 = $2 + (($2 | 0) / 2 | 0) | 0;
    $4 = ($4 | 0) > 0 ? $4 : 0;
    if (($2 | 0) >= ($4 | 0)) {
     break label$449
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($2) {
     $2 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
    }
    $2 = (((wasm2js_i32$1 = $4 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $6 = SAFE_HEAP_LOAD_i32_4_4($3 + 400 | 0, 0);
    if ($6) {
     __memcpy($2, $6, SAFE_HEAP_LOAD_i32_4_4($3, 392) << 2);
     $6 = SAFE_HEAP_LOAD_i32_4_4($3, 400);
     label$452 : {
      if (!$6) {
       break label$452
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$7) {
       break label$452
      }
      $7 = $7 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $6, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($3, 396, $4);
    SAFE_HEAP_STORE_i32_4_4($3, 400, $2);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 392, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 408 | 0, 0);
   label$453 : {
    if (($2 | 0) >= 0) {
     break label$453
    }
    $4 = $2 + (($2 | 0) / 2 | 0) | 0;
    $4 = ($4 | 0) > 0 ? $4 : 0;
    if (($2 | 0) >= ($4 | 0)) {
     break label$453
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($2) {
     $2 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
    }
    $2 = (((wasm2js_i32$1 = $4 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $6 = SAFE_HEAP_LOAD_i32_4_4($3 + 412 | 0, 0);
    if ($6) {
     __memcpy($2, $6, SAFE_HEAP_LOAD_i32_4_4($3, 404) << 2);
     $6 = SAFE_HEAP_LOAD_i32_4_4($3, 412);
     label$456 : {
      if (!$6) {
       break label$456
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$7) {
       break label$456
      }
      $7 = $7 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $6, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($3, 408, $4);
    SAFE_HEAP_STORE_i32_4_4($3, 412, $2);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 404, 0);
   $2 = SAFE_HEAP_LOAD_i32_1_1($3, 164);
   if (($2 | 0) > 0) {
    SAFE_HEAP_STORE_i32_1_1($3, 164, $2 - 1 | 0)
   }
   $2 = SAFE_HEAP_LOAD_i32_1_1($3, 165);
   if (($2 | 0) > 0) {
    SAFE_HEAP_STORE_i32_1_1($3, 165, $2 - 1 | 0)
   }
   $6 = $21 & 1;
   label$459 : {
    if (!$34) {
     break label$459
    }
    ImGui__FocusWindow_28ImGuiWindow__29($3);
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
    if ($4 & 262144) {
     SAFE_HEAP_STORE_i64_8_8($2, 7512, 0, 0);
     break label$459;
    }
    label$461 : {
     if (!($4 & 67108864 | (SAFE_HEAP_LOAD_i32_4_4($3, 736) | 0) == ($3 | 0))) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($3, 756);
      if ($4) {
       break label$461
      }
     }
     SAFE_HEAP_STORE_i64_8_8($2, 7512, 0, 0);
     $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7508);
     $7 = SAFE_HEAP_LOAD_i32_4_4($2, 7564);
     SAFE_HEAP_STORE_i32_4_4(($4 + ($7 << 2) | 0) + 756 | 0, 0, 0);
     $4 = $4 + ($7 << 4) | 0;
     SAFE_HEAP_STORE_i64_8_4($4 + 772 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($4 + 764 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($2, 7576, 0, 0);
     SAFE_HEAP_STORE_i32_1_1($2, 7574, 0);
     SAFE_HEAP_STORE_i32_2_2($2, 7572, 257);
     SAFE_HEAP_STORE_i64_8_8($2 + 7584 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($2 + 7592 | 0, 0, 0);
     break label$459;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 7516, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 7512, $4);
   }
   label$463 : {
    if ($6) {
     break label$463
    }
    $19 = SAFE_HEAP_LOAD_f32_4_4($3, 72);
    $5 = SAFE_HEAP_LOAD_f32_4_4($9, 72);
    $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = 0;
    $17 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
    if (!($17 & 32)) {
     $4 = (SAFE_HEAP_LOAD_i32_4_4($12 + 5456 | 0, 0) | 0) != -1
    }
    $16 = SAFE_HEAP_LOAD_f32_4_4($9, 64);
    $8 = Math_fround($5 - $19);
    $18 = SAFE_HEAP_LOAD_f32_4_4($9, 76);
    $13 = SAFE_HEAP_LOAD_f32_4_4($9, 68);
    $23 = SAFE_HEAP_LOAD_i32_4_4($12, 7216);
    SAFE_HEAP_STORE_i32_4_4($12, 7216, $23 | 16);
    SAFE_HEAP_STORE_i32_4_4($3, 292, 1);
    $14 = SAFE_HEAP_LOAD_f32_4_4($12 + 5476 | 0, 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($12, 6468);
    SAFE_HEAP_STORE_i64_8_8($9, 264, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($9, 256, 0, 0);
    $5 = $14;
    if ($1) {
     SAFE_HEAP_STORE_f32_4_4($9, 268, $13);
     $5 = Math_fround($14 + $11);
     SAFE_HEAP_STORE_f32_4_4($9, 264, Math_fround(Math_fround($8 - $5) - $14));
    }
    label$466 : {
     if (!$4) {
      break label$466
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($12 + 5456 | 0, 0) | 0) != 1) {
      break label$466
     }
     $22 = SAFE_HEAP_LOAD_f32_4_4($12, 5476);
     SAFE_HEAP_STORE_f32_4_4($9, 260, $13);
     $5 = Math_fround($11 + $5);
     SAFE_HEAP_STORE_f32_4_4($9, 256, Math_fround(Math_fround($8 - $5) - $22));
    }
    $19 = Math_fround($16 + $19);
    label$469 : {
     if (!$4) {
      break label$469
     }
     if (SAFE_HEAP_LOAD_i32_4_4($12 + 5456 | 0, 0)) {
      break label$469
     }
     $16 = SAFE_HEAP_LOAD_f32_4_4($12, 5476);
     SAFE_HEAP_STORE_f32_4_4($9, 260, $13);
     SAFE_HEAP_STORE_f32_4_4($9, 256, Math_fround(Math_fround($19 + $14) - $16));
     $14 = Math_fround($14 + $11);
    }
    label$472 : {
     if (!$4) {
      break label$472
     }
     $6 = 14988;
     $20 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
     $10 = $20;
     while (1) {
      $7 = $10;
      $2 = $6;
      $6 = $2 + 1 | 0;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      if ($4) {
       label$476 : {
        if (($4 | 0) != 35) {
         break label$476
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 0) | 0) != 35) {
         break label$476
        }
        $7 = (SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) == 35 ? $20 : $7;
       }
       $7 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $7 & 255) << 2) + 19360 | 0, 0) ^ $7 >>> 8;
      }
      $10 = $7;
      if (($2 | 0) != 14997) {
       continue
      }
      break;
     };
     $4 = $10 ^ -1;
     if ((SAFE_HEAP_LOAD_i32_4_4($12, 7136) | 0) == ($4 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($12, 7140, $4)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($12, 7196) | 0) == ($4 | 0)) {
      SAFE_HEAP_STORE_i32_1_1($12, 7200, 1)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($12, 7112) | 0) == ($4 | 0)) {
      ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4, 11, 14988)
     }
     $2 = __stack_pointer - 48 | 0;
     __stack_pointer = $2;
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $7 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
     $16 = SAFE_HEAP_LOAD_f32_4_4($6 + 5476 | 0, 0);
     $10 = $9 + 256 | 0;
     $22 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
     $25 = SAFE_HEAP_LOAD_i64_8_4($10, 0);
     $35 = i64toi32_i32$HIGH_BITS;
     $20 = $2 + 32 | 0;
     $33 = $20 + 12 | 0;
     $27 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
     $28 = Math_fround($27 + SAFE_HEAP_LOAD_f32_4_4($10, 4));
     $24 = SAFE_HEAP_LOAD_f32_4_4($6 + 5480 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($33, 0, Math_fround($28 + Math_fround($24 + $24)));
     SAFE_HEAP_STORE_i64_8_8($2, 32, $25, $35);
     SAFE_HEAP_STORE_f32_4_4($2, 40, Math_fround(Math_fround($27 + $22) + Math_fround($16 + $16)));
     ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($20, $4, 0, 0);
     $4 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($20, $4, $2 + 31 | 0, $2 + 30 | 0, 0);
     $10 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 30) ? 23 : 22, wasm2js_i32$1 = 21, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 31), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
     $20 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
     SAFE_HEAP_STORE_f32_4_4($2, 24, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 36) + SAFE_HEAP_LOAD_f32_4_4($33, 0)) * Math_fround(.5)));
     SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 32) + SAFE_HEAP_LOAD_f32_4_4($2, 40)) * Math_fround(.5)));
     if (SAFE_HEAP_LOAD_i32_1_U_1($2, 31) | SAFE_HEAP_LOAD_i32_1_U_1($2, 30)) {
      ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($7, 580), $2 + 20 | 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 6468) * Math_fround(.5)) + Math_fround(1.0)), $10, 12)
     }
     $10 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
     $16 = SAFE_HEAP_LOAD_f32_4_4($6, 5476);
     SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 36) + SAFE_HEAP_LOAD_f32_4_4($6, 5480)));
     SAFE_HEAP_STORE_f32_4_4($2, 12, Math_fround($16 + SAFE_HEAP_LOAD_f32_4_4($2, 32)));
     $6 = SAFE_HEAP_LOAD_i32_1_U_1($7, 141);
     SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($2, 12), i64toi32_i32$HIGH_BITS);
     ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($10, $2, $20, $6 ? 1 : 3, Math_fround(1.0));
     label$21 : {
      if (!ImGui__IsItemActive_28_29()) {
       break label$21
      }
      if (!ImGui__IsMouseDragging_28int_2c_20float_29(0, Math_fround(-1.0))) {
       break label$21
      }
      ImGui__StartMouseMovingWindow_28ImGuiWindow__29($7);
     }
     __stack_pointer = $2 + 48 | 0;
     if (!$4) {
      break label$472
     }
     SAFE_HEAP_STORE_i32_1_1($3, 142, 1);
    }
    label$482 : {
     if (!$1) {
      break label$482
     }
     $6 = 14998;
     $20 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
     $10 = $20;
     while (1) {
      $7 = $10;
      $2 = $6;
      $6 = $2 + 1 | 0;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      if ($4) {
       label$486 : {
        if (($4 | 0) != 35) {
         break label$486
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 0) | 0) != 35) {
         break label$486
        }
        $7 = (SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) == 35 ? $20 : $7;
       }
       $7 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $7 & 255) << 2) + 19360 | 0, 0) ^ $7 >>> 8;
      }
      $10 = $7;
      if (($2 | 0) != 15004) {
       continue
      }
      break;
     };
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $2 = $10 ^ -1;
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 7136) | 0) == ($2 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($4, 7140, $2)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 7196) | 0) == ($2 | 0)) {
      SAFE_HEAP_STORE_i32_1_1($4, 7200, 1)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 7112) | 0) == ($2 | 0)) {
      ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($2, 11, 14998)
     }
     if (!ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($2, $9 + 264 | 0)) {
      break label$482
     }
     SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($3, 292, 0);
    SAFE_HEAP_STORE_i32_4_4($12, 7216, $23);
    $1 = $17 & 1048576;
    $11 = Math_fround($11 * Math_fround(.800000011920929));
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $10 = $0;
    label$492 : {
     if (($10 | 0) == -1) {
      break label$492
     }
     $4 = $0;
     while (1) {
      label$494 : {
       $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
       if (($6 | 0) != 35) {
        if ($6) {
         break label$494
        }
        $10 = $4;
        break label$492;
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 1) | 0) != 35) {
        break label$494
       }
       $10 = $4;
       break label$492;
      }
      $10 = -1;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != -1) {
       continue
      }
      break;
     };
    }
    $27 = $1 ? $11 : Math_fround(0.0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($2, 6468);
    label$496 : {
     if (($0 | 0) == ($10 | 0)) {
      SAFE_HEAP_STORE_f32_4_4($9, 236, $11);
      SAFE_HEAP_STORE_i32_4_4($9, 232, 0);
      break label$496;
     }
     ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($9 + 232 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 6464), $11, Math_fround(3402823466385288598117041.0e14), Math_fround(-1.0), $0, $10, 0);
     $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 232) + Math_fround(.9999899864196777));
     label$498 : {
      if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
       $2 = ~~$11;
       break label$498;
      }
      $2 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($9, 232, Math_fround($2 | 0));
    }
    SAFE_HEAP_STORE_f32_4_4($9, 252, Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 236) + Math_fround(0.0)));
    $16 = Math_fround($27 + SAFE_HEAP_LOAD_f32_4_4($9, 232));
    SAFE_HEAP_STORE_f32_4_4($9, 248, $16);
    $11 = SAFE_HEAP_LOAD_f32_4_4($12, 5476);
    if ($14 > $11) {
     $14 = Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($12 + 5500 | 0, 0))
    }
    if ($5 > $11) {
     $5 = Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($12 + 5500 | 0, 0))
    }
    $2 = $12 + 5448 | 0;
    $22 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    if (!(!($22 > Math_fround(0.0)) | !($22 < Math_fround(1.0)))) {
     $11 = $5 <= $14 ? $14 : $5;
     $24 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $19) - $14) - $5) - $16);
     $28 = $11 < $24 ? $11 : $24;
     $11 = Math_fround(Math_abs(Math_fround($22 + Math_fround(-.5))));
     $11 = Math_fround(Math_fround(1.0) - Math_fround($11 + $11));
     $11 = Math_fround($28 * ($11 < Math_fround(0.0) ? Math_fround(0.0) : $11 > Math_fround(1.0) ? Math_fround(1.0) : $11));
     $5 = $5 >= $11 ? $5 : $11;
     $14 = $11 <= $14 ? $14 : $11;
    }
    SAFE_HEAP_STORE_f32_4_4($9 + 244 | 0, 0, $18);
    SAFE_HEAP_STORE_f32_4_4($9, 236, $13);
    $11 = Math_fround($8 - $5);
    SAFE_HEAP_STORE_f32_4_4($9, 240, $11);
    $5 = Math_fround($19 + $14);
    SAFE_HEAP_STORE_f32_4_4($9, 232, $5);
    $14 = SAFE_HEAP_LOAD_f32_4_4($12 + 5500 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($9 + 228 | 0, 0, $18);
    SAFE_HEAP_STORE_f32_4_4($9, 220, $13);
    SAFE_HEAP_STORE_f32_4_4($9, 216, $5);
    $14 = Math_fround($11 + $14);
    SAFE_HEAP_STORE_f32_4_4($9, 224, $8 > $14 ? $14 : $8);
    label$506 : {
     if (!$1) {
      break label$506
     }
     $8 = Math_fround($16 + Math_fround(Math_fround(Math_fround(Math_fround($11 - $5) - $16) * $22) + $5));
     $11 = $5 > $8 ? $5 : $8 > $11 ? $11 : $8;
     if (!($11 > $5)) {
      break label$506
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
     SAFE_HEAP_STORE_f32_4_4($9, 212, Math_fround(Math_fround($13 + $18) * Math_fround(.5)));
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     SAFE_HEAP_STORE_f32_4_4($9, 208, $11);
     $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 5628 | 0, 0);
     $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 5624 | 0, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 5616 | 0, 0);
     $13 = SAFE_HEAP_LOAD_f32_4_4($1 + 5620 | 0, 0);
     $18 = SAFE_HEAP_LOAD_f32_4_4($1, 5416);
     SAFE_HEAP_STORE_i64_8_8($9, 24, SAFE_HEAP_LOAD_i64_8_8($9, 208), i64toi32_i32$HIGH_BITS);
     $13 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : $13 > Math_fround(1.0) ? Math_fround(1.0) : $13) * Math_fround(255.0)) + Math_fround(.5));
     label$507 : {
      if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
       $1 = ~~$13;
       break label$507;
      }
      $1 = -2147483648;
     }
     $1 = $1 << 8;
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$509 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $6 = ~~$8;
       break label$509;
      }
      $6 = -2147483648;
     }
     $1 = $6 | $1;
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$511 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$511;
      }
      $6 = -2147483648;
     }
     $1 = $1 | $6 << 16;
     $7 = $9 + 24 | 0;
     $5 = Math_fround($14 * $18);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$513 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$513;
      }
      $6 = -2147483648;
     }
     ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($4, $7, $1 | $6 << 24);
     $5 = SAFE_HEAP_LOAD_f32_4_4($9, 224);
     $8 = Math_fround($27 * Math_fround(.5));
     label$515 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $1 = ~~$8;
       break label$515;
      }
      $1 = -2147483648;
     }
     $8 = Math_fround($11 - Math_fround($1 | 0));
     SAFE_HEAP_STORE_f32_4_4($9, 224, $5 < $8 ? $5 : $8);
    }
    $10 = $0;
    label$517 : {
     if (($10 | 0) == -1) {
      break label$517
     }
     $4 = $0;
     while (1) {
      label$519 : {
       $1 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
       if (($1 | 0) != 35) {
        if ($1) {
         break label$519
        }
        $10 = $4;
        break label$517;
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 1) | 0) != 35) {
        break label$519
       }
       $10 = $4;
       break label$517;
      }
      $10 = -1;
      $4 = $4 + 1 | 0;
      if (($4 | 0) != -1) {
       continue
      }
      break;
     };
    }
    if (($0 | 0) == ($10 | 0)) {
     break label$463
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    ImGui__RenderTextClippedEx_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7080), 580), $9 + 232 | 0, $9 + 240 | 0, $0, $10, $9 + 248 | 0, $2, $9 + 216 | 0);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 12196)) {
     break label$463
    }
    ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($9 + 232 | 0, $0, $10);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 528, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($3, 80);
   $2 = SAFE_HEAP_LOAD_i32_4_4($15, 7216);
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 228 | 0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($9, 64);
   $13 = SAFE_HEAP_LOAD_f32_4_4($0 + 5516 | 0, 0);
   $4 = 0;
   label$521 : {
    if (!($5 >= Math_fround($8 - $13))) {
     break label$521
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 232 | 0, 0);
    $14 = SAFE_HEAP_LOAD_f32_4_4($9, 68);
    $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 5520 | 0, 0);
    $4 = $8 >= Math_fround($14 - $11) & $5 < Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($9, 72)) & $8 < Math_fround(SAFE_HEAP_LOAD_f32_4_4($9 + 76 | 0, 0) + $11);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 7240, $1);
   SAFE_HEAP_STORE_i32_4_4($0 + 7248 | 0, 0, $4);
   SAFE_HEAP_STORE_i32_4_4($0 + 7244 | 0, 0, $2);
   SAFE_HEAP_STORE_i64_8_4($0 + 7252 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($9, 64), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 7260 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($9 + 72 | 0, 0), i64toi32_i32$HIGH_BITS);
  }
  label$522 : {
   if ($36) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($26 + 300 | 0, 0);
    break label$522;
   }
   $6 = 15005;
   $2 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
   $10 = $2;
   while (1) {
    $7 = $10;
    $0 = $6;
    $6 = $6 + 1 | 0;
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
    if ($1) {
     label$527 : {
      if (($1 | 0) != 35) {
       break label$527
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 0) | 0) != 35) {
       break label$527
      }
      $7 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 2) | 0) == 35 ? $2 : $7;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4((($1 ^ $7 & 255) << 2) + 19360 | 0, 0) ^ $7 >>> 8;
    }
    $10 = $7;
    if (($0 | 0) != 15016) {
     continue
    }
    break;
   };
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $4 = $10 ^ -1;
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7136) | 0) == ($4 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($0, 7140, $4)
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7196) | 0) == ($4 | 0)) {
    SAFE_HEAP_STORE_i32_1_1($0, 7200, 1)
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7112) | 0) == ($4 | 0)) {
    ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4, 11, 15005)
   }
  }
  SAFE_HEAP_STORE_i32_4_4($3 + 300 | 0, 0, $4);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 580);
  $2 = SAFE_HEAP_LOAD_i64_8_4($3, 448);
  $4 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($9, 232, $2, $4);
  $6 = SAFE_HEAP_LOAD_i64_8_4($3 + 456 | 0, 0);
  $7 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($9, 216, $6, $7);
  SAFE_HEAP_STORE_i64_8_8($9, 16, $2, $4);
  SAFE_HEAP_STORE_i64_8_8($9, 8, $6, $7);
  ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($1, $9 + 16 | 0, $9 + 8 | 0, 1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 580);
  $1 = ((SAFE_HEAP_LOAD_i32_4_4($1, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($1 + 68 | 0, 0) | 0) - 16 | 0;
  $2 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
  $4 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_4($0 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 8), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0, 496, $2, $4);
  SAFE_HEAP_STORE_i32_1_1($3, 140, 0);
  SAFE_HEAP_STORE_i32_2_2($3, 150, SAFE_HEAP_LOAD_i32_2_U_2($3, 150) + 1 | 0);
  SAFE_HEAP_STORE_i32_4_4($15, 7300, 0);
  if (!$40) {
   label$534 : {
    if (!$36) {
     break label$534
    }
    label$535 : {
     if ($21 & 64) {
      break label$535
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($3, 164) | 0) > 0) {
      break label$535
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($3, 165) | 0) > 0) {
      break label$535
     }
     $1 = 0;
     label$536 : {
      if (!($21 & 8388608)) {
       break label$536
      }
      $1 = 0;
      if (!SAFE_HEAP_LOAD_i32_1_U_1($15, 7572)) {
       break label$536
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($15, 7508);
      $1 = 0;
      if (!$0) {
       break label$536
      }
      $1 = (SAFE_HEAP_LOAD_i32_4_4($0, 748) | 0) == (SAFE_HEAP_LOAD_i32_4_4($3, 748) | 0);
     }
     $0 = $1;
     if (SAFE_HEAP_LOAD_i32_1_U_1($15, 12196) | $0) {
      break label$535
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($3, 416) >= SAFE_HEAP_LOAD_f32_4_4($3 + 424 | 0, 0))) {
      if (!(SAFE_HEAP_LOAD_f32_4_4($3 + 420 | 0, 0) >= SAFE_HEAP_LOAD_f32_4_4($3 + 428 | 0, 0))) {
       break label$535
      }
     }
     SAFE_HEAP_STORE_i32_1_1($3, 172, 1);
    }
    if (!$26) {
     break label$534
    }
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($26, 141);
    label$540 : {
     if (!$0) {
      if ((SAFE_HEAP_LOAD_i32_1_1($26, 172) | 0) <= 0) {
       break label$540
      }
     }
     SAFE_HEAP_STORE_i32_1_1($3, 172, 1);
    }
    if (!$0) {
     if ((SAFE_HEAP_LOAD_i32_1_1($26, 173) | 0) <= 0) {
      break label$534
     }
    }
    SAFE_HEAP_STORE_i32_1_1($3, 173, 1);
   }
   if (SAFE_HEAP_LOAD_f32_4_4($15, 5416) <= Math_fround(0.0)) {
    SAFE_HEAP_STORE_i32_1_1($3, 172, 1)
   }
   $6 = 1;
   if ((SAFE_HEAP_LOAD_i32_1_1($3, 172) | 0) <= 0) {
    $6 = (SAFE_HEAP_LOAD_i32_1_1($3, 173) | 0) > 0
   }
   if ($6) {
    $0 = 1
   } else {
    $0 = (SAFE_HEAP_LOAD_i32_1_1($3, 174) | 0) > 0
   }
   SAFE_HEAP_STORE_i32_1_1($3, 145, $0);
   $0 = SAFE_HEAP_LOAD_i32_1_1($3, 175);
   if (($0 | 0) > 0) {
    SAFE_HEAP_STORE_i32_1_1($3, 175, $0 - 1 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($3, 8) | 786944);
   }
   label$547 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 141)) {
     $0 = 0;
     if (($6 ^ -1) & (SAFE_HEAP_LOAD_i32_1_U_1($3, 138) | 0) != 0) {
      break label$547
     }
    }
    $0 = 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($3, 164) | 0) > 0) {
     break label$547
    }
    $0 = 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($3, 165) | 0) > 0) {
     break label$547
    }
    $0 = (SAFE_HEAP_LOAD_i32_1_1($3, 173) | 0) <= 0;
   }
   SAFE_HEAP_STORE_i32_1_1($3, 143, $0);
  }
  $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 143);
  __stack_pointer = $9 + 272 | 0;
  return !$0;
 }
 
 function ImGui__FocusTopMostWindowUnderOne_28ImGuiWindow__2c_20ImGuiWindow__29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if (!$0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7020) - 1 | 0;
    break label$1;
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 1) {
    while (1) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
     if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 1) {
      continue
     }
     break;
    };
    $3 = 0;
   } else {
    $3 = -1
   }
   $0 = $3 + SAFE_HEAP_LOAD_i32_2_2($0, 156) | 0;
  }
  label$6 : {
   if (($0 | 0) < 0) {
    break label$6
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 7028 | 0, 0);
   while (1) {
    label$8 : {
     $1 = $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($3 + ($0 << 2) | 0, 0);
     if (!$0) {
      break label$8
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
      break label$8
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) & 262656) == 262656) {
      break label$8
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 752);
     if (!$2) {
      $2 = $0;
      break label$6;
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($2, 139)) {
      break label$6
     }
     $2 = $0;
     break label$6;
    }
    $0 = $1 - 1 | 0;
    if (($1 | 0) > 0) {
     continue
    }
    break;
   };
  }
  ImGui__FocusWindow_28ImGuiWindow__29($2);
 }
 
 function ImGui__SetNextWindowSize_28ImVec2_20const__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($2, 7300, SAFE_HEAP_LOAD_i32_4_4($2, 7300) | 2);
  $0 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
  $3 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i32_4_4($2 + 7308 | 0, 0, $1 >>> 0 <= 1 ? 1 : $1);
  SAFE_HEAP_STORE_i64_8_4($2 + 7332 | 0, 0, $0, $3);
 }
 
 function UpdateWindowInFocusOrderList_28ImGuiWindow__2c_20bool_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = $2 & 16777216;
  $6 = $2 >>> 24 | 0;
  $3 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 147) | 0) == ($6 | 0);
  if (!($3 & ($1 ^ -1) | $2)) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7020);
   $1 = SAFE_HEAP_LOAD_i32_4_4($4 + 7024 | 0, 0);
   label$2 : {
    if (($2 | 0) != ($1 | 0)) {
     break label$2
    }
    $3 = $2 + 1 | 0;
    $5 = $1;
    if ($1) {
     $2 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $2 = 8
    }
    $1 = ($2 | 0) > ($3 | 0) ? $2 : $3;
    if (($5 | 0) >= ($1 | 0)) {
     break label$2
    }
    $2 = $1 << 2;
    if ($4) {
     $3 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
    }
    $2 = (((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7028);
    if ($3) {
     __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($4, 7020) << 2);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7028);
     label$7 : {
      if (!$3) {
       break label$7
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$5) {
       break label$7
      }
      $5 = $5 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7024, $1);
    SAFE_HEAP_STORE_i32_4_4($4, 7028, $2);
   }
   SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 7028) + (SAFE_HEAP_LOAD_i32_4_4($4, 7020) << 2) | 0, 0, $0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($4, 7020);
   SAFE_HEAP_STORE_i32_4_4($4, 7020, $1 + 1 | 0);
   SAFE_HEAP_STORE_i32_2_2($0, 156, $1);
   SAFE_HEAP_STORE_i32_1_1($0, 147, $6);
   return;
  }
  if (!($3 | ($1 | !$2))) {
   $5 = $4 + 7028 | 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   $1 = SAFE_HEAP_LOAD_i32_2_2($0, 156) + 1 | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7020);
   if (($1 | 0) < ($3 | 0)) {
    while (1) {
     $7 = SAFE_HEAP_LOAD_i32_4_4($2 + ($1 << 2) | 0, 0);
     SAFE_HEAP_STORE_i32_2_2($7, 156, SAFE_HEAP_LOAD_i32_2_U_2($7, 156) - 1 | 0);
     $1 = $1 + 1 | 0;
     if (($3 | 0) != ($1 | 0)) {
      continue
     }
     break;
    }
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($5, 0) + (SAFE_HEAP_LOAD_i32_2_2($0, 156) << 2) | 0;
   memmove($1, $1 + 4 | 0, $3 + (($1 - $2 ^ -1) >>> 2 | 0) << 2);
   SAFE_HEAP_STORE_i32_4_4($4, 7020, SAFE_HEAP_LOAD_i32_4_4($4, 7020) - 1 | 0);
   SAFE_HEAP_STORE_i32_2_2($0, 156, 65535);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 147, $6);
 }
 
 function CalcWindowContentSizes_28ImGuiWindow__2c_20ImVec2__2c_20ImVec2__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 141)) {
      break label$3
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($0, 164) | 0) > 0) {
      break label$3
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($0, 165) | 0) <= 0) {
      break label$2
     }
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 145)) {
     break label$1
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 173)) {
     break label$1
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($0, 172) | 0) <= 0) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_i64_8_4($1, 0, SAFE_HEAP_LOAD_i64_8_4($0, 36), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_4($0, 44), i64toi32_i32$HIGH_BITS);
   return;
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($0, 52);
  if ($3 == Math_fround(0.0)) {
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 224 | 0, 0));
   label$5 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4 = ~~$3;
     break label$5;
    }
    $4 = -2147483648;
   }
   $3 = Math_fround($4 | 0);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 0, $3);
  $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 56 | 0, 0);
  if ($3 == Math_fround(0.0)) {
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 236 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 228 | 0, 0));
   label$8 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4 = ~~$3;
     break label$8;
    }
    $4 = -2147483648;
   }
   $3 = Math_fround($4 | 0);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 4, $3);
  $3 = SAFE_HEAP_LOAD_f32_4_4($0, 52);
  if ($3 == Math_fround(0.0)) {
   $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 232 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 240 | 0, 0);
   $3 = Math_fround(($3 >= $5 ? $3 : $5) - SAFE_HEAP_LOAD_f32_4_4($0 + 224 | 0, 0));
   label$11 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $1 = ~~$3;
     break label$11;
    }
    $1 = -2147483648;
   }
   $3 = Math_fround($1 | 0);
  }
  SAFE_HEAP_STORE_f32_4_4($2, 0, $3);
  $3 = SAFE_HEAP_LOAD_f32_4_4($0, 56);
  if ($3 == Math_fround(0.0)) {
   $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 236 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 244 | 0, 0);
   $3 = Math_fround(($3 >= $5 ? $3 : $5) - SAFE_HEAP_LOAD_f32_4_4($0 + 228 | 0, 0));
   label$14 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$14;
    }
    $0 = -2147483648;
   }
   $3 = Math_fround($0 | 0);
  }
  SAFE_HEAP_STORE_f32_4_4($2, 4, $3);
 }
 
 function CalcWindowAutoFitSize_28ImGuiWindow__2c_20ImVec2_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0);
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  if (!($9 & 1)) {
   $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
   $5 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
   if ($5) {
    $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($5, 572))
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($6 + 5480 | 0, 0);
   $4 = Math_fround(Math_fround($3 + $3) + $4);
  }
  $3 = $4;
  $4 = Math_fround(0.0);
  if ($9 & 1024) {
   $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
   $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 312 | 0, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
   if ($5) {
    $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($5, 572))
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($6 + 5480 | 0, 0);
   $4 = Math_fround(Math_fround($11 + $11) + Math_fround($10 + $4));
  }
  $14 = Math_fround($3 + $4);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1 - -64 | 0, 0);
  $15 = Math_fround($3 + $3);
  $12 = Math_fround($14 + Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($2, 4)));
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 60);
  $10 = Math_fround($3 + $3);
  $13 = Math_fround(Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 0)) + Math_fround(0.0));
  label$7 : {
   if ($9 & 33554432) {
    SAFE_HEAP_STORE_f32_4_4($0, 4, $12);
    SAFE_HEAP_STORE_f32_4_4($0, 0, $13);
    break label$7;
   }
   $16 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6 + 7504 | 0, 0), 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($16 + 16 | 0, 0);
   $17 = SAFE_HEAP_LOAD_f32_4_4($6 + 5596 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($6 + 5444 | 0, 0);
   $3 = SAFE_HEAP_LOAD_f32_4_4($6 + 5440 | 0, 0);
   $5 = $9 & 335544320;
   $4 = $5 ? ($3 < Math_fround(4.0) ? $3 : Math_fround(4.0)) : $3;
   $18 = SAFE_HEAP_LOAD_f32_4_4($16, 12);
   $3 = SAFE_HEAP_LOAD_f32_4_4($6 + 5592 | 0, 0);
   $3 = Math_fround($18 - Math_fround($3 + $3));
   $3 = $3 <= $4 ? $4 : $3;
   $4 = $4 > $13 ? $4 : $3 < $13 ? $3 : $13;
   SAFE_HEAP_STORE_f32_4_4($0, 0, $4);
   $7 = $5 ? ($7 < Math_fround(4.0) ? $7 : Math_fround(4.0)) : $7;
   $3 = Math_fround($11 - Math_fround($17 + $17));
   $3 = $3 <= $7 ? $7 : $3;
   $3 = $7 > $12 ? $7 : $3 < $12 ? $3 : $12;
   SAFE_HEAP_STORE_f32_4_4($0, 4, $3);
   CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($8 + 8 | 0, $1, $0);
   label$9 : {
    if (Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 8) - $10) < SAFE_HEAP_LOAD_f32_4_4($2, 0)) {
     $5 = 1;
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 8) & 2056) == 2048) {
      break label$9
     }
    }
    $5 = SAFE_HEAP_LOAD_i32_1_U_1($1 + 9 | 0, 0) >>> 7 | 0;
   }
   label$11 : {
    if (Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 12) - $15) - $14) < SAFE_HEAP_LOAD_f32_4_4($2, 4)) {
     $2 = 1;
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 8) & 8)) {
      break label$11
     }
    }
    $2 = (SAFE_HEAP_LOAD_i32_1_U_1($1 + 9 | 0, 0) & 64) >>> 6 | 0;
   }
   if ($5) {
    SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($6 + 5532 | 0, 0)))
   }
   if (!$2) {
    break label$7
   }
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($4 + SAFE_HEAP_LOAD_f32_4_4($6 + 5532 | 0, 0)));
  }
  __stack_pointer = $8 + 16 | 0;
 }
 
 function CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($0, $1, $2) {
  var $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
  if (SAFE_HEAP_LOAD_i32_1_U_1($6, 7300) & 16) {
   $2 = $6 + 7372 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 7364 | 0, 0);
   label$2 : {
    label$3 : {
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 7360 | 0, 0);
     if (!($5 >= Math_fround(0.0))) {
      break label$3
     }
     $4 = SAFE_HEAP_LOAD_f32_4_4($6 + 7368 | 0, 0);
     if (!($4 >= Math_fround(0.0))) {
      break label$3
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
     $10 = $3 < $5 ? $5 : $4 < $3 ? $4 : $3;
     break label$2;
    }
    $10 = SAFE_HEAP_LOAD_f32_4_4($1, 28);
   }
   $4 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $10);
   label$4 : {
    if (!(!($8 >= Math_fround(0.0)) | !($4 >= Math_fround(0.0)))) {
     $3 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
     $3 = $3 < $8 ? $8 : $4 < $3 ? $4 : $3;
     break label$4;
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 32 | 0, 0);
   }
   SAFE_HEAP_STORE_f32_4_4($0, 4, $3);
   $9 = SAFE_HEAP_LOAD_i32_4_4($6 + 7376 | 0, 0);
   if ($9) {
    $2 = $7 + 24 | 0;
    SAFE_HEAP_STORE_i64_8_4($2, 0, 0, 0);
    $11 = $7 + 16 | 0;
    SAFE_HEAP_STORE_i64_8_4($11, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($7, 8, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($7, 4, SAFE_HEAP_LOAD_i32_4_4($6 + 7380 | 0, 0));
    SAFE_HEAP_STORE_i64_8_4($7, 8, SAFE_HEAP_LOAD_i64_8_4($1, 12), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($11, 0, SAFE_HEAP_LOAD_i64_8_4($1, 28), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
    FUNCTION_TABLE[$9 | 0]($7 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   label$7 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$7;
    }
    $2 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($2 | 0));
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   label$9 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$9;
    }
    $2 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($2 | 0));
  }
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  if (!($9 & 16777280)) {
   $4 = Math_fround(0.0);
   if ($9 & 1) {
    $3 = $4
   } else {
    $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
    if ($2) {
     $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($2, 572))
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($11 + 5480 | 0, 0);
    $3 = Math_fround(Math_fround($3 + $3) + $4);
   }
   $10 = Math_fround(0.0);
   if ($9 & 1024) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
    $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 312 | 0, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
    if ($1) {
     $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($1, 572))
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
    $10 = Math_fround(Math_fround($5 + $5) + Math_fround($8 + $4));
   }
   $8 = SAFE_HEAP_LOAD_f32_4_4($6 + 5440 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   $4 = SAFE_HEAP_LOAD_f32_4_4($6 + 5444 | 0, 0);
   $5 = $4 <= $5 ? $5 : $4;
   SAFE_HEAP_STORE_f32_4_4($0, 4, $5);
   $4 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $4 >= $8 ? $4 : $8);
   $4 = Math_fround($3 + $10);
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 5432 | 0, 0) + Math_fround(-1.0));
   $3 = Math_fround($4 + ($3 <= Math_fround(0.0) ? Math_fround(0.0) : $3));
   SAFE_HEAP_STORE_f32_4_4($0, 4, $3 <= $5 ? $5 : $3);
  }
  __stack_pointer = $7 + 32 | 0;
 }
 
 function ImGui__FindBestWindowPosForPopup_28ImGuiWindow__29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7 + 7504 | 0, 0), 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($4, 12);
  $6 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
  $12 = $2 + 44 | 0;
  $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 8 | 0, 0);
  $8 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4 + 16 | 0, 0));
  SAFE_HEAP_STORE_f32_4_4($12, 0, $8);
  SAFE_HEAP_STORE_f32_4_4($2, 36, $3);
  SAFE_HEAP_STORE_f32_4_4($2, 32, $6);
  $10 = Math_fround($6 + $5);
  SAFE_HEAP_STORE_f32_4_4($2, 40, $10);
  $5 = SAFE_HEAP_LOAD_f32_4_4($7 + 5592 | 0, 0);
  $9 = $8;
  $11 = SAFE_HEAP_LOAD_f32_4_4($7 + 5596 | 0, 0);
  $8 = Math_fround($11 + $11) < Math_fround($8 - $3) ? Math_fround(-$11) : Math_fround(0.0);
  SAFE_HEAP_STORE_f32_4_4($12, 0, Math_fround($9 + $8));
  $5 = Math_fround($5 + $5) < Math_fround($10 - $6) ? Math_fround(-$5) : Math_fround(0.0);
  SAFE_HEAP_STORE_f32_4_4($2, 40, Math_fround($10 + $5));
  SAFE_HEAP_STORE_f32_4_4($2, 36, Math_fround($3 - $8));
  SAFE_HEAP_STORE_f32_4_4($2, 32, Math_fround($6 - $5));
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  label$1 : {
   if ($4 & 268435456) {
    $4 = SAFE_HEAP_LOAD_i32_4_4((Math_imul(SAFE_HEAP_LOAD_i32_4_4($7, 7044), 84) + SAFE_HEAP_LOAD_i32_4_4($7 + 7052 | 0, 0) | 0) - 168 | 0, 0);
    $5 = SAFE_HEAP_LOAD_f32_4_4($7 + 5500 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($2 + 24 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($2, 16, 0, 0);
    label$3 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1($4 + 306 | 0, 0)) {
      $6 = Math_fround(-3402823466385288598117041.0e14);
      $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 500 | 0, 0);
      $5 = Math_fround(3402823466385288598117041.0e14);
      $9 = SAFE_HEAP_LOAD_f32_4_4($4 + 508 | 0, 0);
      break label$3;
     }
     $8 = SAFE_HEAP_LOAD_f32_4_4($4, 12);
     $6 = Math_fround($5 + $8);
     $3 = Math_fround(-3402823466385288598117041.0e14);
     $5 = Math_fround(Math_fround(Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($4, 20)) - $5) - SAFE_HEAP_LOAD_f32_4_4($4, 128));
     $9 = Math_fround(3402823466385288598117041.0e14);
    }
    SAFE_HEAP_STORE_f32_4_4($2, 28, $9);
    SAFE_HEAP_STORE_f32_4_4($2, 24, $5);
    SAFE_HEAP_STORE_f32_4_4($2, 20, $3);
    SAFE_HEAP_STORE_f32_4_4($2, 16, $6);
    ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0, $1 + 12 | 0, $1 + 20 | 0, $1 + 168 | 0, $2 + 32 | 0, $2 + 16 | 0, 0);
    break label$1;
   }
   if ($4 & 67108864) {
    $6 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
    $4 = $2 + 16 | 0;
    $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($4 + 12 | 0, 0, Math_fround($3 + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($2, 24, Math_fround($6 + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround($6 + Math_fround(-1.0)));
    SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround($3 + Math_fround(-1.0)));
    ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0, $1 + 12 | 0, $1 + 20 | 0, $1 + 168 | 0, $2 + 32 | 0, $4, 0);
    break label$1;
   }
   if ($4 & 33554432) {
    $3 = SAFE_HEAP_LOAD_f32_4_4($7 + 5600 | 0, 0);
    ImGui__NavCalcPreferredRefPos_28_29($2 + 8 | 0);
    SAFE_HEAP_STORE_i64_8_8($2 + 24 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($2, 16, 0, 0);
    label$7 : {
     label$8 : {
      if (SAFE_HEAP_LOAD_i32_1_U_1($7, 7570)) {
       break label$8
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($7, 7571)) {
       break label$8
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($7, 8) & 4) {
       break label$8
      }
      $6 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
      $5 = Math_fround($6 + Math_fround(16.0));
      $3 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
      $9 = Math_fround($3 + Math_fround(8.0));
      break label$7;
     }
     $3 = Math_fround($3 * Math_fround(24.0));
     $6 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
     $5 = Math_fround($3 + $6);
     $9 = $3;
     $3 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
     $9 = Math_fround($9 + $3);
    }
    SAFE_HEAP_STORE_f32_4_4($2, 28, $9);
    SAFE_HEAP_STORE_f32_4_4($2, 24, $5);
    SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround($3 + Math_fround(-8.0)));
    SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround($6 + Math_fround(-16.0)));
    ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0, $2 + 8 | 0, $1 + 20 | 0, $1 + 168 | 0, $2 + 32 | 0, $2 + 16 | 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 12), i64toi32_i32$HIGH_BITS);
  }
  __stack_pointer = $2 + 48 | 0;
 }
 
 function ImGui__PushID_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = $0;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  $6 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $1 = $6;
  while (1) {
   $2 = $5;
   $5 = $2 + 1 | 0;
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
   if ($4) {
    label$4 : {
     if (($4 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) | 0) != 35) {
      break label$4
     }
     $1 = (SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) == 35 ? $6 : $1;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
   }
   if ($4) {
    continue
   }
   break;
  };
  $5 = $1 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 7112) | 0) == ($5 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($5, 11, $0)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 196);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 200 | 0, 0);
  label$8 : {
   if (($1 | 0) != ($0 | 0)) {
    break label$8
   }
   $2 = $1 + 1 | 0;
   $6 = $0;
   if ($0) {
    $1 = $0 + (($0 | 0) / 2 | 0) | 0
   } else {
    $1 = 8
   }
   $0 = ($1 | 0) > ($2 | 0) ? $1 : $2;
   if (($6 | 0) >= ($0 | 0)) {
    break label$8
   }
   $1 = $0 << 2;
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
   }
   $1 = (((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0);
   if ($2) {
    __memcpy($1, $2, SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 204);
    label$13 : {
     if (!$2) {
      break label$13
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$13
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 200, $0);
   SAFE_HEAP_STORE_i32_4_4($3, 204, $1);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) | 0, 0, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 196, SAFE_HEAP_LOAD_i32_4_4($3, 196) + 1 | 0);
 }
 
 function ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  if ($1 & 1) {
   $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $6 = SAFE_HEAP_LOAD_i32_4_4($9 + 60 | 0, 0);
   if (($6 | 0) >= 0) {
    $5 = SAFE_HEAP_LOAD_i32_1_U_1(($9 + $6 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
   } else {
    $5 = $7
   }
   $8 = $5;
   $6 = SAFE_HEAP_LOAD_i32_4_4($9 + 56 | 0, 0);
   if (($6 | 0) >= 0) {
    $5 = SAFE_HEAP_LOAD_i32_1_U_1(($9 + $6 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
   } else {
    $5 = $7
   }
   $10 = $5;
   $6 = SAFE_HEAP_LOAD_i32_4_4($9 + 68 | 0, 0);
   if (($6 | 0) >= 0) {
    $5 = SAFE_HEAP_LOAD_i32_1_U_1(($9 + $6 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
   } else {
    $5 = $7
   }
   $8 = Math_fround($8 - $10);
   $6 = SAFE_HEAP_LOAD_i32_4_4($9 - -64 | 0, 0);
   if (($6 | 0) >= 0) {
    $7 = SAFE_HEAP_LOAD_i32_1_U_1(($9 + $6 | 0) + 256 | 0, 0) ? Math_fround(1.0) : Math_fround(0.0)
   }
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($8 + Math_fround(0.0)));
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround(Math_fround($5 - $7) + Math_fround(0.0)));
  }
  if ($1 & 2) {
   $7 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(17, $2);
   $8 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(16, $2);
   $10 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(19, $2);
   $5 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(18, $2);
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround(Math_fround($7 - $8) + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround(Math_fround($10 - $5) + SAFE_HEAP_LOAD_f32_4_4($0, 4)));
  }
  if ($1 & 4) {
   $7 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(5, $2);
   $8 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(4, $2);
   $10 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(7, $2);
   $5 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(6, $2);
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround(Math_fround($7 - $8) + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround(Math_fround($10 - $5) + SAFE_HEAP_LOAD_f32_4_4($0, 4)));
  }
  if ($1 & 8) {
   $7 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(9, $2);
   $8 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(8, $2);
   $10 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(11, $2);
   $5 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(10, $2);
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround(Math_fround($7 - $8) + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround(Math_fround($10 - $5) + SAFE_HEAP_LOAD_f32_4_4($0, 4)));
  }
  label$9 : {
   if ($3 == Math_fround(0.0)) {
    break label$9
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
    break label$9
   }
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 0) * $3));
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 4) * $3));
  }
  label$10 : {
   if ($4 == Math_fround(0.0)) {
    break label$10
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 828 | 0, 0) > Math_fround(0.0))) {
    break label$10
   }
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 0) * $4));
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 4) * $4));
  }
 }
 
 function CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0;
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 88), i64toi32_i32$HIGH_BITS);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 104);
  if ($3 < Math_fround(3402823466385288598117041.0e14)) {
   $2 = SAFE_HEAP_LOAD_f32_4_4($1, 112);
   $4 = SAFE_HEAP_LOAD_f32_4_4($1, 128);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1, 120);
   label$2 : {
    if (!($5 > Math_fround(0.0))) {
     break label$2
    }
    if ($3 <= Math_fround($5 + Math_fround(0.0))) {
     $3 = Math_fround(Math_fround($3 * $2) + Math_fround(0.0));
     break label$2;
    }
    $6 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 96) + SAFE_HEAP_LOAD_f32_4_4($1, 28)) - $4);
    if (!(Math_fround($6 - $5) <= $3)) {
     break label$2
    }
    $3 = Math_fround(Math_fround(Math_fround($6 - $3) * $2) + $3);
   }
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($3 - Math_fround($2 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 28) - $4))));
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 108 | 0, 0);
  if ($3 < Math_fround(3402823466385288598117041.0e14)) {
   $2 = Math_fround(0.0);
   $8 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
   if ($8 & 1) {
    $4 = $2
   } else {
    $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
    $7 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
    if ($7) {
     $2 = Math_fround($2 * SAFE_HEAP_LOAD_f32_4_4($7, 572))
    }
    $4 = SAFE_HEAP_LOAD_f32_4_4($9 + 5480 | 0, 0);
    $4 = Math_fround(Math_fround($4 + $4) + $2);
   }
   $2 = Math_fround(0.0);
   if ($8 & 1024) {
    $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
    $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 312 | 0, 0);
    $9 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
    if ($9) {
     $2 = Math_fround($2 * SAFE_HEAP_LOAD_f32_4_4($9, 572))
    }
    $6 = SAFE_HEAP_LOAD_f32_4_4($8 + 5480 | 0, 0);
    $2 = Math_fround(Math_fround($6 + $6) + Math_fround($5 + $2));
   }
   $4 = Math_fround(Math_fround($4 + $2) + SAFE_HEAP_LOAD_f32_4_4($1 + 132 | 0, 0));
   $2 = SAFE_HEAP_LOAD_f32_4_4($1 + 116 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 124 | 0, 0);
   label$13 : {
    if (!($5 > Math_fround(0.0))) {
     break label$13
    }
    if ($3 <= Math_fround($5 + Math_fround(0.0))) {
     $3 = Math_fround(Math_fround($3 * $2) + Math_fround(0.0));
     break label$13;
    }
    $6 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 100 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($1 + 32 | 0, 0)) - $4);
    if (!(Math_fround($6 - $5) <= $3)) {
     break label$13
    }
    $3 = Math_fround(Math_fround(Math_fround($6 - $3) * $2) + $3);
   }
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($3 - Math_fround($2 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 32 | 0, 0) - $4))));
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $2 = $2 >= Math_fround(0.0) ? $2 : Math_fround(0.0);
  label$17 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $7 = ~~$2;
    break label$17;
   }
   $7 = -2147483648;
  }
  $2 = Math_fround($7 | 0);
  SAFE_HEAP_STORE_f32_4_4($0, 0, $2);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  $4 = $4 >= Math_fround(0.0) ? $4 : Math_fround(0.0);
  label$19 : {
   if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
    $7 = ~~$4;
    break label$19;
   }
   $7 = -2147483648;
  }
  $4 = Math_fround($7 | 0);
  SAFE_HEAP_STORE_f32_4_4($0, 4, $4);
  label$21 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 141)) {
    break label$21
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 143)) {
    break label$21
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 96);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $2 < $3 ? $2 : $3);
   $2 = SAFE_HEAP_LOAD_f32_4_4($1 + 100 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 4, $2 > $4 ? $4 : $2);
  }
 }
 
 function ImGui__CreateNewWindowSettings_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $13 = SAFE_HEAP_LOAD_i32_4_4($10 + 12160 | 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_1_1(18920, 0);
  $4 = $0;
  __inlined_func$strstr : {
   if (!$1) {
    break __inlined_func$strstr
   }
   $1 = strchr($0, $1);
   label$2 : {
    if (!$1) {
     break label$2
    }
    $4 = $1;
    if (!SAFE_HEAP_LOAD_i32_1_U_1(18920, 1)) {
     break __inlined_func$strstr
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 1)) {
     break label$2
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(18920, 2)) {
     $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
     $4 = ($3 | 0) != 0;
     label$10 : {
      if (!$3) {
       break label$10
      }
      $5 = $3 | SAFE_HEAP_LOAD_i32_1_U_1($1, 0) << 8;
      $6 = SAFE_HEAP_LOAD_i32_1_U_1(18920, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1(18920, 1);
      if (($5 | 0) == ($6 | 0)) {
       break label$10
      }
      $3 = $1 + 1 | 0;
      while (1) {
       $1 = $3;
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
       $4 = ($2 | 0) != 0;
       if (!$2) {
        break label$10
       }
       $3 = $1 + 1 | 0;
       $5 = $2 | $5 << 8 & 65280;
       if (($6 | 0) != ($5 | 0)) {
        continue
       }
       break;
      };
     }
     $4 = $4 ? $1 : 0;
     break __inlined_func$strstr;
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 2)) {
     break label$2
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(18920, 3)) {
     $3 = $1 + 2 | 0;
     $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 2);
     $5 = ($4 | 0) != 0;
     label$11 : {
      label$22 : {
       if (!$4) {
        break label$22
       }
       $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1) << 16 | SAFE_HEAP_LOAD_i32_1_U_1($1, 0) << 24 | $4 << 8;
       $6 = SAFE_HEAP_LOAD_i32_1_U_1(18920, 1) << 16 | SAFE_HEAP_LOAD_i32_1_U_1(18920, 0) << 24 | SAFE_HEAP_LOAD_i32_1_U_1(18920, 2) << 8;
       if (($4 | 0) == ($6 | 0)) {
        break label$22
       }
       while (1) {
        $1 = $3 + 1 | 0;
        $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
        $5 = ($2 | 0) != 0;
        if (!$2) {
         break label$11
        }
        $3 = $1;
        $4 = ($2 | $4) << 8;
        if (($6 | 0) != ($4 | 0)) {
         continue
        }
        break;
       };
       break label$11;
      }
      $1 = $3;
     }
     $4 = $5 ? $1 - 2 | 0 : 0;
     break __inlined_func$strstr;
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 3)) {
     break label$2
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1(18920, 4)) {
     $3 = $1 + 3 | 0;
     $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 3);
     $5 = ($4 | 0) != 0;
     label$12 : {
      label$23 : {
       if (!$4) {
        break label$23
       }
       $4 = $4 | (SAFE_HEAP_LOAD_i32_1_U_1($1, 1) << 16 | SAFE_HEAP_LOAD_i32_1_U_1($1, 0) << 24 | SAFE_HEAP_LOAD_i32_1_U_1($1, 2) << 8);
       $1 = SAFE_HEAP_LOAD_i32_4_1(18920, 0);
       $6 = $1 << 24 | ($1 & 65280) << 8 | ($1 >>> 8 & 65280 | $1 >>> 24);
       if (($4 | 0) == ($6 | 0)) {
        break label$23
       }
       while (1) {
        $1 = $3 + 1 | 0;
        $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
        $5 = ($2 | 0) != 0;
        if (!$2) {
         break label$12
        }
        $3 = $1;
        $4 = $2 | $4 << 8;
        if (($6 | 0) != ($4 | 0)) {
         continue
        }
        break;
       };
       break label$12;
      }
      $1 = $3;
     }
     $4 = $5 ? $1 - 3 | 0 : 0;
     break __inlined_func$strstr;
    }
    $5 = $1;
    $11 = __stack_pointer - 1056 | 0;
    __stack_pointer = $11;
    SAFE_HEAP_STORE_i64_8_8($11 + 1048 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($11 + 1040 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($11, 1032, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($11, 1024, 0, 0);
    label$13 : {
     label$24 : {
      label$35 : {
       label$4 : {
        $2 = SAFE_HEAP_LOAD_i32_1_U_1(18920, 0);
        label$5 : {
         if (!$2) {
          $7 = -1;
          $1 = 1;
          break label$5;
         }
         while (1) {
          if (!SAFE_HEAP_LOAD_i32_1_U_1($5 + $8 | 0, 0)) {
           break label$24
          }
          $8 = $8 + 1 | 0;
          SAFE_HEAP_STORE_i32_4_4((($2 & 255) << 2) + $11 | 0, 0, $8);
          $1 = ($11 + 1024 | 0) + ($2 >>> 3 & 28) | 0;
          SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) | 1 << $2);
          $2 = SAFE_HEAP_LOAD_i32_1_U_1($8 + 18920 | 0, 0);
          if ($2) {
           continue
          }
          break;
         };
         $1 = 1;
         $7 = -1;
         if ($8 >>> 0 > 1) {
          break label$4
         }
        }
        $6 = -1;
        $3 = 1;
        break label$35;
       }
       $4 = 1;
       $2 = 1;
       while (1) {
        $6 = SAFE_HEAP_LOAD_i32_1_U_1(($2 + $7 | 0) + 18920 | 0, 0);
        $9 = SAFE_HEAP_LOAD_i32_1_U_1($1 + 18920 | 0, 0);
        label$9 : {
         if (($6 | 0) == ($9 | 0)) {
          if (($2 | 0) == ($4 | 0)) {
           $3 = $3 + $4 | 0;
           $2 = 1;
           break label$9;
          }
          $2 = $2 + 1 | 0;
          break label$9;
         }
         if ($6 >>> 0 > $9 >>> 0) {
          $4 = $1 - $7 | 0;
          $3 = $1;
          $2 = 1;
          break label$9;
         }
         $7 = $3;
         $3 = $3 + 1 | 0;
         $4 = 1;
         $2 = 1;
        }
        $1 = $2 + $3 | 0;
        if ($1 >>> 0 < $8 >>> 0) {
         continue
        }
        break;
       };
       $3 = 1;
       $6 = -1;
       if ($8 >>> 0 <= 1) {
        $1 = $4;
        break label$35;
       }
       $1 = 0;
       $9 = 1;
       $2 = 1;
       while (1) {
        $12 = SAFE_HEAP_LOAD_i32_1_U_1(($2 + $6 | 0) + 18920 | 0, 0);
        $14 = SAFE_HEAP_LOAD_i32_1_U_1($3 + 18920 | 0, 0);
        label$15 : {
         if (($12 | 0) == ($14 | 0)) {
          if (($2 | 0) == ($9 | 0)) {
           $1 = $1 + $9 | 0;
           $2 = 1;
           break label$15;
          }
          $2 = $2 + 1 | 0;
          break label$15;
         }
         if ($12 >>> 0 < $14 >>> 0) {
          $9 = $3 - $6 | 0;
          $1 = $3;
          $2 = 1;
          break label$15;
         }
         $6 = $1;
         $1 = $1 + 1 | 0;
         $9 = 1;
         $2 = 1;
        }
        $3 = $2 + $1 | 0;
        if ($3 >>> 0 < $8 >>> 0) {
         continue
        }
        break;
       };
       $1 = $4;
       $3 = $9;
      }
      $4 = $1;
      $1 = $6 + 1 >>> 0 > $7 + 1 >>> 0;
      $4 = $1 ? $3 : $4;
      $12 = $1 ? $6 : $7;
      $9 = $12 + 1 | 0;
      label$19 : {
       if (memcmp(18920, $4 + 18920 | 0, $9)) {
        $1 = ($12 ^ -1) + $8 | 0;
        $4 = ($1 >>> 0 < $12 >>> 0 ? $12 : $1) + 1 | 0;
        $15 = 0;
        break label$19;
       }
       $15 = $8 - $4 | 0;
      }
      $16 = $8 - 1 | 0;
      $14 = $8 | 63;
      $6 = 0;
      $1 = $5;
      while (1) {
       label$227 : {
        if ($5 - $1 >>> 0 >= $8 >>> 0) {
         break label$227
        }
        $3 = memchr($5, 0, $14);
        if ($3) {
         $5 = $3;
         if ($3 - $1 >>> 0 < $8 >>> 0) {
          break label$24
         }
         break label$227;
        }
        $5 = $5 + $14 | 0;
       }
       $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 + $16 | 0, 0);
       $2 = $8;
       label$248 : {
        label$25 : {
         if (!(SAFE_HEAP_LOAD_i32_4_4(($11 + 1024 | 0) + ($3 >>> 3 & 28) | 0, 0) >>> $3 & 1)) {
          break label$25
         }
         $3 = SAFE_HEAP_LOAD_i32_4_4(($3 << 2) + $11 | 0, 0);
         if (($8 | 0) != ($3 | 0)) {
          $3 = $8 - $3 | 0;
          $2 = $3 >>> 0 > $6 >>> 0 ? $3 : $6;
          break label$25;
         }
         label$28 : {
          $2 = $9;
          $3 = $2 >>> 0 > $6 >>> 0 ? $2 : $6;
          $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + 18920 | 0, 0);
          if ($7) {
           while (1) {
            if ((SAFE_HEAP_LOAD_i32_1_U_1($1 + $3 | 0, 0) | 0) != ($7 & 255)) {
             break label$28
            }
            $3 = $3 + 1 | 0;
            $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + 18920 | 0, 0);
            if ($7) {
             continue
            }
            break;
           }
          }
          while (1) {
           if ($2 >>> 0 <= $6 >>> 0) {
            break label$13
           }
           $2 = $2 - 1 | 0;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2 + 18920 | 0, 0) | 0) == (SAFE_HEAP_LOAD_i32_1_U_1($1 + $2 | 0, 0) | 0)) {
            continue
           }
           break;
          };
          $2 = $4;
          $3 = $15;
          break label$248;
         }
         $2 = $3 - $12 | 0;
        }
        $3 = 0;
       }
       $6 = $3;
       $1 = $1 + $2 | 0;
       continue;
      };
     }
     $1 = 0;
    }
    __stack_pointer = $11 + 1056 | 0;
    $3 = $1;
   }
   $4 = $3;
  }
  $1 = $4;
  $1 = $1 ? $1 : $0;
  $3 = strlen($1);
  $2 = ($3 & -4) + 24 | 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4($10, 12156);
  $0 = $2 + $6 | 0;
  label$1 : {
   if (($13 | 0) >= ($0 | 0)) {
    break label$1
   }
   $4 = $13 ? $13 + (($13 | 0) / 2 | 0) | 0 : 8;
   $4 = ($0 | 0) < ($4 | 0) ? $4 : $0;
   if (($13 | 0) >= ($4 | 0)) {
    break label$1
   }
   if ($10) {
    $5 = $10 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) + 1 | 0);
   }
   $5 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $7 = SAFE_HEAP_LOAD_i32_4_4($10 + 12164 | 0, 0);
   if ($7) {
    __memcpy($5, $7, SAFE_HEAP_LOAD_i32_4_4($10, 12156));
    $7 = SAFE_HEAP_LOAD_i32_4_4($10, 12164);
    label$6 : {
     if (!$7) {
      break label$6
     }
     $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$9) {
      break label$6
     }
     $9 = $9 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $7, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($10, 12160, $4);
   SAFE_HEAP_STORE_i32_4_4($10, 12164, $5);
  }
  SAFE_HEAP_STORE_i32_4_4($10, 12156, $0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($10 + 12164 | 0, 0) + $6 | 0;
  SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
  SAFE_HEAP_STORE_i64_8_4($0 + 12 | 0, 0, 0, 0);
  $6 = $0 + 4 | 0;
  label$79 : {
   if (!$3) {
    $0 = $1;
    $2 = -1;
    while (1) {
     $4 = $0;
     $0 = $4 + 1 | 0;
     $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
     if ($5) {
      label$125 : {
       if (($5 | 0) != 35) {
        break label$125
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
        break label$125
       }
       $2 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) == 35 ? -1 : $2;
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4((($5 ^ $2 & 255) << 2) + 19360 | 0, 0) ^ $2 >>> 8;
     }
     if ($5) {
      continue
     }
     break;
    };
    break label$79;
   }
   $4 = $3;
   $2 = -1;
   $0 = $1;
   while (1) {
    $5 = $0;
    $0 = $5 + 1 | 0;
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
    $4 = $4 - 1 | 0;
    label$16 : {
     if (($7 | 0) != 35 | $4 >>> 0 < 2) {
      break label$16
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
      break label$16
     }
     $2 = (SAFE_HEAP_LOAD_i32_1_U_1($5, 2) | 0) == 35 ? -1 : $2;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4((($7 ^ $2 & 255) << 2) + 19360 | 0, 0) ^ $2 >>> 8;
    if ($4) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_4_4($6, 0, $2 ^ -1);
  __memcpy($6 + 16 | 0, $1, $3 + 1 | 0);
  return $6;
 }
 
 function ImGui__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
  $7 = SAFE_HEAP_LOAD_i32_4_4($4, 580);
  $0 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
  $5 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($3, 24, $0, $5);
  $1 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
  $6 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($3, 16, $1, $6);
  SAFE_HEAP_STORE_i64_8_8($3, 8, $0, $5);
  SAFE_HEAP_STORE_i64_8_8($3, 0, $1, $6);
  ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($7, $3 + 8 | 0, $3, $2);
  $0 = SAFE_HEAP_LOAD_i32_4_4($4, 580);
  $0 = ((SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0) | 0) - 16 | 0;
  $1 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
  $2 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_4($4 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 8), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($4, 496, $1, $2);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function ImGui__PopClipRect_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  ImDrawList__PopClipRect_28_29(SAFE_HEAP_LOAD_i32_4_4($0, 580));
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 580);
  $1 = ((SAFE_HEAP_LOAD_i32_4_4($1, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($1 + 68 | 0, 0) | 0) - 16 | 0;
  $2 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
  $3 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_4($0 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 8), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0, 496, $2, $3);
 }
 
 function ImGui__EndFrame_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $14 = __stack_pointer - 16 | 0;
  __stack_pointer = $14;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 6988) | 0) == (SAFE_HEAP_LOAD_i32_4_4($4, 6984) | 0)) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 12180) | 0) > 0) {
    while (1) {
     $1 = SAFE_HEAP_LOAD_i32_4_4($4, 12188) + Math_imul($0, 20) | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0) == 2) {
      FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0]($4, $1)
     }
     $0 = $0 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 12180) | 0) > ($0 | 0)) {
      continue
     }
     break;
    }
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7044) | 0) >= 2) {
    while (1) {
     ImGui__End_28_29();
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 7044) | 0) > 1) {
      continue
     }
     break;
    }
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 220 | 0, 0);
   label$7 : {
    if (!$0) {
     break label$7
    }
    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 12116);
    if ($6 != Math_fround(3402823466385288598117041.0e14)) {
     $6 = Math_fround($6 - SAFE_HEAP_LOAD_f32_4_4($4, 12108));
     $9 = Math_fround($6 * $6);
     $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 12120 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($4 + 12112 | 0, 0));
     if (!(Math_fround($9 + Math_fround($6 * $6)) > Math_fround(9.999999747378752e-05))) {
      break label$7
     }
    }
    $6 = SAFE_HEAP_LOAD_f32_4_4($4 + 12112 | 0, 0);
    label$9 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $1 = ~~$6;
      break label$9;
     }
     $1 = -2147483648;
    }
    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 12108);
    label$11 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $3 = ~~$6;
      break label$11;
     }
     $3 = -2147483648;
    }
    FUNCTION_TABLE[$0 | 0]($3, $1);
    SAFE_HEAP_STORE_i64_8_4($4, 12116, SAFE_HEAP_LOAD_i64_8_4($4, 12108), i64toi32_i32$HIGH_BITS);
   }
   SAFE_HEAP_STORE_i32_1_1($4, 6997, 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
   label$13 : {
    if (!$0) {
     break label$13
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 140)) {
     break label$13
    }
    SAFE_HEAP_STORE_i32_1_1($0, 138, 0);
   }
   ImGui__End_28_29();
   $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   label$14 : {
    if (!SAFE_HEAP_LOAD_i32_4_4($7, 7844)) {
     break label$14
    }
    if (SAFE_HEAP_LOAD_f32_4_4($7, 7856) < Math_fround(.15000000596046448)) {
     break label$14
    }
    if (!SAFE_HEAP_LOAD_i32_4_4($7, 7852)) {
     $3 = 2611;
     $1 = -1;
     while (1) {
      $0 = $3;
      $3 = $0 + 1 | 0;
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
      if ($2) {
       label$19 : {
        if (($2 | 0) != 35) {
         break label$19
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 0) | 0) != 35) {
         break label$19
        }
        $1 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 2) | 0) == 35 ? -1 : $1;
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4((($2 ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
      }
      if (($0 | 0) != 2630) {
       continue
      }
      break;
     };
     $10 = $1 ^ -1;
     $2 = SAFE_HEAP_LOAD_i32_4_4($7 + 7064 | 0, 0);
     $1 = $2;
     $5 = SAFE_HEAP_LOAD_i32_4_4($7, 7056);
     if ($5) {
      $3 = $2;
      $0 = $5;
      while (1) {
       $8 = $0 >>> 1 | 0;
       $1 = ($8 << 3) + $3 | 0;
       $13 = SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 0 < $10 >>> 0;
       $3 = $13 ? $1 + 8 | 0 : $3;
       $1 = $3;
       $0 = $13 ? $0 + ($8 ^ -1) | 0 : $8;
       if ($0) {
        continue
       }
       break;
      };
     }
     $0 = 0;
     label$24 : {
      if (($2 + ($5 << 3) | 0) == ($1 | 0)) {
       break label$24
      }
      $0 = 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != ($10 | 0)) {
       break label$24
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     }
     SAFE_HEAP_STORE_i32_4_4($7, 7852, $0);
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7 + 7504 | 0, 0), 0);
    $1 = $0 + 16 | 0;
    $6 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
    SAFE_HEAP_STORE_i64_8_4($7 + 7376 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($7 + 7368 | 0, 0, 2139095039, 2139095039);
    SAFE_HEAP_STORE_f32_4_4($7 + 7360 | 0, 0, Math_fround($9 * Math_fround(.20000000298023224)));
    $3 = SAFE_HEAP_LOAD_i32_4_4($7, 7300);
    SAFE_HEAP_STORE_i32_4_4($7, 7300, $3 | 16);
    SAFE_HEAP_STORE_f32_4_4($7 + 7364 | 0, 0, Math_fround($6 * Math_fround(.20000000298023224)));
    $6 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
    $9 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
    $12 = SAFE_HEAP_LOAD_f32_4_4($0 + 8 | 0, 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    SAFE_HEAP_STORE_i64_8_4($7 + 7324 | 0, 0, 1056964608, 1056964608);
    SAFE_HEAP_STORE_i32_4_4($7 + 7304 | 0, 0, 1);
    SAFE_HEAP_STORE_i32_4_4($7, 7300, $3 | 17);
    SAFE_HEAP_STORE_f32_4_4($7 + 7320 | 0, 0, Math_fround($12 + Math_fround($11 * Math_fround(.5))));
    SAFE_HEAP_STORE_f32_4_4($7 + 7316 | 0, 0, Math_fround($6 + Math_fround($9 * Math_fround(.5))));
    $6 = SAFE_HEAP_LOAD_f32_4_4($7 + 5424 | 0, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($7 + 5428 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($14, 12, Math_fround($9 + $9));
    SAFE_HEAP_STORE_f32_4_4($14, 8, Math_fround($6 + $6));
    ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(2, $14 + 8 | 0);
    ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(2611, 0, 791367);
    $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7020);
    if (($0 | 0) > 0) {
     while (1) {
      $3 = $0;
      $2 = $0 - 1 | 0;
      $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 7028) + ($2 << 2) | 0, 0);
      label$28 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 139)) {
        break label$28
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 736) | 0) != ($5 | 0)) {
        break label$28
       }
       $8 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
       if ($8 & 524288) {
        break label$28
       }
       $10 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       $0 = $10;
       $1 = $0;
       label$29 : {
        if (($0 | 0) == -1) {
         break label$29
        }
        while (1) {
         label$31 : {
          $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
          if (($1 | 0) != 35) {
           if ($1) {
            break label$31
           }
           $1 = $0;
           break label$29;
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) != 35) {
           break label$31
          }
          $1 = $0;
          break label$29;
         }
         $1 = -1;
         $0 = $0 + 1 | 0;
         if (($0 | 0) != -1) {
          continue
         }
         break;
        };
       }
       $0 = $10;
       label$33 : {
        if (($1 | 0) != ($10 | 0)) {
         break label$33
        }
        $0 = 17942;
        if ($8 & 67108864) {
         break label$33
        }
        label$35 : {
         if (!($8 & 1024)) {
          break label$35
         }
         if (strcmp($10, 6628)) {
          break label$35
         }
         $0 = 17926;
         break label$33;
        }
        $0 = 18388;
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($7, 7844);
       SAFE_HEAP_STORE_i64_8_4($14, 8, 0, 0);
       ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($0, ($1 | 0) == ($5 | 0), 0, $14 + 8 | 0);
      }
      $0 = $2;
      if (($3 | 0) > 1) {
       continue
      }
      break;
     }
    }
    ImGui__End_28_29();
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 7416 | 0, 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7408) - 1 | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($1 + Math_imul($3, 12) | 0, 0);
    $2 = Math_imul($5, 12);
    label$36 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($2 + 20912 | 0, 0) | 0) != 8) {
      break label$36
     }
     $2 = (SAFE_HEAP_LOAD_i32_4_4($2 + 20920 | 0, 0) + $0 | 0) + 5416 | 0;
     if (8206235 >>> $5 & 1) {
      SAFE_HEAP_STORE_f32_4_4($2, 0, SAFE_HEAP_LOAD_f32_4_4($1 + Math_imul($3, 12) | 0, 4));
      break label$36;
     }
     if (!(25348196 >>> $5 & 1)) {
      break label$36
     }
     $1 = $1 + Math_imul($3, 12) | 0;
     SAFE_HEAP_STORE_f32_4_4($2, 0, SAFE_HEAP_LOAD_f32_4_4($1, 4));
     SAFE_HEAP_STORE_f32_4_4($2, 4, SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7408, $3);
   }
   label$38 : {
    if (!SAFE_HEAP_LOAD_i32_4_4($7, 7508)) {
     break label$38
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 7597)) {
     break label$38
    }
    if (SAFE_HEAP_LOAD_i32_4_4($2 + 7672 | 0, 0)) {
     break label$38
    }
    if (SAFE_HEAP_LOAD_i32_4_4($2 + 7760 | 0, 0)) {
     break label$38
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7600);
    if (!($0 & 15) | $0 & 128) {
     break label$38
    }
    $7 = SAFE_HEAP_LOAD_i32_4_4($2, 7508);
    $0 = $7 + (SAFE_HEAP_LOAD_i32_4_4($2, 7564) << 4) | 0;
    $12 = SAFE_HEAP_LOAD_f32_4_4($0 + 776 | 0, 0);
    $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 772 | 0, 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 768 | 0, 0);
    $10 = $0 + 764 | 0;
    $9 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7600);
    $8 = SAFE_HEAP_LOAD_i32_4_4($2, 7612);
    label$39 : {
     if ($8) {
      $1 = 0;
      $0 = $8;
      break label$39;
     }
     if (!($5 & 5)) {
      $1 = 0;
      $0 = 0;
      break label$39;
     }
     $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 36) + SAFE_HEAP_LOAD_f32_4_4($7, 60));
     $1 = 1;
     label$42 : {
      if (!($5 & 4)) {
       $9 = $6;
       $0 = 0;
       break label$42;
      }
      $9 = Math_fround($12 - $11);
      $12 = Math_fround($12 - $9);
      $11 = Math_fround($11 - $9);
      $9 = $6;
      $0 = 2;
     }
    }
    $15 = $9;
    label$44 : {
     if (!(!($5 & 5) | ($8 | 0) != 1)) {
      $9 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($7, 60));
      $1 = 1;
      label$46 : {
       if (!($5 & 4)) {
        $6 = $11;
        break label$46;
       }
       $6 = Math_fround($12 - $11);
       $12 = Math_fround($12 + $6);
       $6 = Math_fround($11 + $6);
       $0 = 3;
      }
      $11 = $9;
      break label$44;
     }
     $9 = $6;
     $6 = $11;
     $11 = $15;
    }
    $3 = $1;
    $1 = $0;
    $0 = $5 & 10;
    if (!(!$0 | ($8 | 0) != 2)) {
     $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7 + 40 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($7 - -64 | 0, 0));
     if ($5 & 8) {
      $12 = Math_fround($9 - $11);
      $9 = Math_fround($9 - $12);
      $11 = Math_fround($11 - $12);
      $1 = 0;
     }
     $12 = $6;
     $3 = 1;
    }
    label$52 : {
     if (!(!$0 | ($8 | 0) != 3)) {
      $6 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($7 - -64 | 0, 0));
      if (!($5 & 8)) {
       $12 = $6;
       $0 = $1;
       $3 = 1;
       break label$52;
      }
      $12 = $6;
      $15 = Math_fround($9 - $11);
      $9 = Math_fround($9 + $15);
      $11 = Math_fround($11 + $15);
      $0 = 1;
      $3 = 1;
      break label$52;
     }
     $0 = $1;
    }
    if (!$3) {
     break label$38
    }
    SAFE_HEAP_STORE_f32_4_4($10, 12, $12);
    SAFE_HEAP_STORE_f32_4_4($10, 8, $9);
    SAFE_HEAP_STORE_f32_4_4($10, 4, $6);
    SAFE_HEAP_STORE_f32_4_4($10, 0, $11);
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7604);
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 7612);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    SAFE_HEAP_STORE_i32_1_1($1, 7596, 0);
    SAFE_HEAP_STORE_i32_2_1($1, 7597, 256);
    SAFE_HEAP_STORE_i32_4_4($1, 7620, $0);
    SAFE_HEAP_STORE_i32_4_4($1, 7612, $2);
    SAFE_HEAP_STORE_i32_4_4($1, 7604, $3);
    SAFE_HEAP_STORE_i32_4_4($1, 7600, $5 | 128);
    SAFE_HEAP_STORE_i32_1_1($1, 7572, SAFE_HEAP_LOAD_i32_1_U_1($1, 7573));
   }
   label$55 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 7876)) {
     break label$55
    }
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($4 + 7946 | 0, 0);
    $1 = 0;
    label$56 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($4 + 7908 | 0, 0) + 1 | 0) >= (SAFE_HEAP_LOAD_i32_4_4($4, 6984) | 0)) {
      break label$56
     }
     $1 = 1;
     if (SAFE_HEAP_LOAD_i32_1_U_1($4, 7880) & 32) {
      break label$56
     }
     $1 = !SAFE_HEAP_LOAD_i32_1_U_1((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + SAFE_HEAP_LOAD_i32_4_4($4, 7888) | 0) + 236 | 0, 0);
    }
    if (!($1 | $0 & 255)) {
     break label$55
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    SAFE_HEAP_STORE_i32_1_1($0, 7876, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 7892, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7968, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 7980, 0, -1);
    SAFE_HEAP_STORE_i64_8_4($0, 7972, 2139095039, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 7912 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 7920 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 7928 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 7936 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_1_1($0 + 7944 | 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 7900 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($0 + 7908 | 0, 0, -1);
    SAFE_HEAP_STORE_i32_2_1($0 + 7945 | 0, 0, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 8e3 | 0, 0);
    if ($1) {
     SAFE_HEAP_STORE_i64_8_4($0, 7992, 0, 0);
     if ($0) {
      $3 = $0 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($0, 8e3, 0);
    }
    SAFE_HEAP_STORE_i64_8_4($0, 8004, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0 + 8012 | 0, 0, 0, 0);
   }
   label$60 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 7876)) {
     break label$60
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 7884) | 0) >= (SAFE_HEAP_LOAD_i32_4_4($4, 6984) | 0)) {
     break label$60
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($4, 7880) & 1) {
     break label$60
    }
    SAFE_HEAP_STORE_i32_1_1($4, 7877, 1);
    ImGui__SetTooltip_28char_20const__2c_20____29(17682, 0);
    SAFE_HEAP_STORE_i32_1_1($4, 7877, 0);
   }
   SAFE_HEAP_STORE_i32_1_1($4, 6996, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 6988, SAFE_HEAP_LOAD_i32_4_4($4, 6984));
   $2 = 0;
   $1 = 0;
   $6 = Math_fround(0.0);
   $7 = __stack_pointer - 16 | 0;
   __stack_pointer = $7;
   $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   label$10 : {
    if (SAFE_HEAP_LOAD_i32_4_4($5, 7136)) {
     break label$10
    }
    if (SAFE_HEAP_LOAD_i32_4_4($5, 7116)) {
     break label$10
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($5, 7508);
    if ($3) {
     if (SAFE_HEAP_LOAD_i32_1_U_1($3, 144)) {
      break label$10
     }
    }
    label$32 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($5 + 992 | 0, 0)) {
      break label$32
     }
     $10 = SAFE_HEAP_LOAD_i32_4_4($5, 7084);
     if ($10) {
      $0 = SAFE_HEAP_LOAD_i32_4_4($10, 736)
     } else {
      $0 = 0
     }
     $1 = 0;
     label$5 : {
      if (!$0) {
       break label$5
      }
      $1 = 0;
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 4)) {
       break label$5
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 7468);
      label$73 : {
       if (($1 | 0) <= 0) {
        $16 = ($1 | 0) > 0;
        break label$73;
       }
       $8 = SAFE_HEAP_LOAD_i32_4_4($5 + 7476 | 0, 0);
       $17 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
       $13 = SAFE_HEAP_LOAD_i32_4_4($0, 160);
       $16 = 1;
       if (($17 | 0) == ($13 | 0)) {
        break label$73
       }
       while (1) {
        $2 = $2 + 1 | 0;
        if (($1 | 0) != ($2 | 0)) {
         if ((SAFE_HEAP_LOAD_i32_4_4($8 + Math_imul($2, 36) | 0, 0) | 0) != ($13 | 0)) {
          continue
         }
        }
        break;
       };
       $16 = ($1 | 0) > ($2 | 0);
      }
      $1 = $16 ^ 1;
     }
     if (!($1 | !$0)) {
      ImGui__StartMouseMovingWindow_28ImGuiWindow__29($10);
      label$12 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($5 + 181 | 0, 0)) {
        break label$12
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1) {
        break label$12
       }
       $9 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
       $12 = SAFE_HEAP_LOAD_f32_4_4($0, 28);
       $11 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
        $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 6472) * SAFE_HEAP_LOAD_f32_4_4($0, 572));
        $2 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
        if ($2) {
         $6 = Math_fround($6 * SAFE_HEAP_LOAD_f32_4_4($2, 572))
        }
        $15 = SAFE_HEAP_LOAD_f32_4_4($3 + 5480 | 0, 0);
        $6 = Math_fround(Math_fround($15 + $15) + $6);
       }
       $0 = SAFE_HEAP_LOAD_i64_8_4($0, 12);
       $3 = i64toi32_i32$HIGH_BITS;
       SAFE_HEAP_STORE_f32_4_4($7 + 12 | 0, 0, Math_fround($9 + $6));
       SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($11 + $12));
       SAFE_HEAP_STORE_i64_8_4($7, 0, $0, $3);
       $6 = SAFE_HEAP_LOAD_f32_4_4($5 + 908 | 0, 0);
       label$135 : {
        if (!($6 >= SAFE_HEAP_LOAD_f32_4_4($7, 0))) {
         break label$135
        }
        $9 = SAFE_HEAP_LOAD_f32_4_4($5 + 912 | 0, 0);
        if (!($9 >= SAFE_HEAP_LOAD_f32_4_4($7, 4))) {
         break label$135
        }
        if (!(SAFE_HEAP_LOAD_f32_4_4($7, 8) > $6)) {
         break label$135
        }
        if (SAFE_HEAP_LOAD_f32_4_4($7 + 12 | 0, 0) > $9) {
         break label$12
        }
       }
       SAFE_HEAP_STORE_i32_4_4($5, 7092, 0);
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 7127)) {
       break label$32
      }
      SAFE_HEAP_STORE_i32_4_4($5, 7092, 0);
      break label$32;
     }
     if ($0 | !$3) {
      break label$32
     }
     $0 = 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $2 = SAFE_HEAP_LOAD_i32_4_4($10, 7468);
     __inlined_func$ImGui__GetTopMostPopupModal_28_29 : {
      while (1) {
       $3 = 0;
       if (($2 | 0) <= 0) {
        break __inlined_func$ImGui__GetTopMostPopupModal_28_29
       }
       $3 = $0;
       $2 = $2 - 1 | 0;
       $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($10, 7476) + Math_imul($2, 36) | 0, 4);
       label$327 : {
        if ($0) {
         $8 = 0;
         if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 8) {
          break label$327
         }
        }
        $0 = $3;
        $8 = 1;
       }
       if ($8) {
        continue
       }
       break;
      };
      $3 = $0;
     }
     if ($3) {
      break label$32
     }
     ImGui__FocusWindow_28ImGuiWindow__29(0);
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($5 + 993 | 0, 0)) {
     break label$10
    }
    $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $10 = SAFE_HEAP_LOAD_i32_4_4($8, 7468);
    $0 = $10;
    while (1) {
     label$148 : {
      $3 = $1;
      if (($0 | 0) <= 0) {
       $2 = 0;
       break label$148;
      }
      $0 = $0 - 1 | 0;
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 7476) + Math_imul($0, 36) | 0, 4);
      label$17 : {
       if ($1) {
        $13 = 0;
        if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 8) {
         break label$17
        }
       }
       $1 = $3;
       $13 = 1;
      }
      $2 = $1;
      if ($13) {
       continue
      }
     }
     break;
    };
    $0 = $2;
    $5 = SAFE_HEAP_LOAD_i32_4_4($5, 7084);
    label$199 : {
     if (!$5) {
      break label$199
     }
     if ($0) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 8) >>> 25 & 1;
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8) >>> 25 & 1;
      label$22 : {
       if (($1 | 0) != ($2 | 0)) {
        $1 = $1 >>> 0 > $2 >>> 0;
        break label$22;
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($8, 7008);
       while (1) {
        if (($2 | 0) <= 0) {
         break label$199
        }
        $2 = $2 - 1 | 0;
        $13 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 7016) + ($2 << 2) | 0, 0);
        $16 = ($0 | 0) != ($13 | 0);
        $1 = ($13 | 0) == ($5 | 0) | $3 & $16;
        if (!$16) {
         break label$22
        }
        $3 = $1;
        if (($5 | 0) != ($13 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$1) {
       break label$199
      }
     }
     $0 = $5;
    }
    if (!$10) {
     break label$10
    }
    $3 = $0;
    $2 = 0;
    label$2711 : {
     if (!$0) {
      break label$2711
     }
     $2 = 0;
     if (($10 | 0) <= 0) {
      break label$2711
     }
     $13 = SAFE_HEAP_LOAD_i32_4_4($8, 7476);
     $0 = 0;
     while (1) {
      $2 = $0;
      $5 = SAFE_HEAP_LOAD_i32_4_4($13 + Math_imul($0, 36) | 0, 4);
      $8 = 4;
      label$3013 : {
       if (!$5) {
        break label$3013
       }
       $1 = 0;
       $8 = 4;
       if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 11 | 0, 0) & 1) {
        break label$3013
       }
       while (1) {
        $5 = $0;
        $8 = SAFE_HEAP_LOAD_i32_4_4($13 + Math_imul($0, 36) | 0, 4);
        $0 = 1;
        label$3314 : {
         if (!$8) {
          break label$3314
         }
         $0 = $3;
         if ((SAFE_HEAP_LOAD_i32_4_4($0, 736) | 0) == ($8 | 0)) {
          $1 = 1;
          $0 = 0;
          break label$3314;
         }
         while (1) {
          if (($0 | 0) == ($8 | 0)) {
           $1 = 1;
           $0 = ($0 | 0) != ($8 | 0);
           break label$3314;
          }
          $0 = SAFE_HEAP_LOAD_i32_4_4($0, 732);
          if ($0) {
           continue
          }
          break;
         };
         $0 = 1;
        }
        if ($0) {
         $0 = $5 + 1 | 0;
         if (($10 | 0) > ($0 | 0)) {
          continue
         }
        }
        break;
       };
       $8 = $1 & 1 ? 0 : 2;
      }
      if (($8 | 0) == 2) {
       break label$2711
      }
      $0 = $2 + 1 | 0;
      if (($10 | 0) != ($0 | 0)) {
       continue
      }
      break;
     };
     $2 = $10;
    }
    $0 = $2;
    if (($10 | 0) <= ($0 | 0)) {
     break label$10
    }
    ImGui__ClosePopupToLevel_28int_2c_20bool_29($0, 1);
   }
   __stack_pointer = $7 + 16 | 0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 7036 | 0, 0);
   label$61 : {
    if (($0 | 0) >= 0) {
     break label$61
    }
    $1 = $0 + (($0 | 0) / 2 | 0) | 0;
    $1 = ($1 | 0) > 0 ? $1 : 0;
    if (($0 | 0) >= ($1 | 0)) {
     break label$61
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($0) {
     $0 = $0 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
    }
    $0 = (((wasm2js_i32$2 = $1 << 2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4 + 7040 | 0, 0);
    if ($3) {
     __memcpy($0, $3, SAFE_HEAP_LOAD_i32_4_4($4, 7032) << 2);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7040);
     label$64 : {
      if (!$3) {
       break label$64
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$2) {
       break label$64
      }
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7036, $1);
    SAFE_HEAP_STORE_i32_4_4($4, 7040, $0);
   }
   SAFE_HEAP_STORE_i32_4_4($4, 7032, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($4, 7036);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 7008);
   if (($1 | 0) < ($0 | 0)) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($1) {
     $1 = $1 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
    }
    $1 = (((wasm2js_i32$2 = $0 << 2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4 + 7040 | 0, 0);
    if ($3) {
     __memcpy($1, $3, SAFE_HEAP_LOAD_i32_4_4($4, 7032) << 2);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7040);
     label$68 : {
      if (!$3) {
       break label$68
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$2) {
       break label$68
      }
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7036, $0);
    SAFE_HEAP_STORE_i32_4_4($4, 7040, $1);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 7008);
   $1 = $0;
   if ($0) {
    $3 = $4 + 7032 | 0;
    $0 = 0;
    while (1) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 7016) + ($0 << 2) | 0, 0);
     label$71 : {
      if (SAFE_HEAP_LOAD_i32_1_U_1($1, 138)) {
       if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 1) {
        break label$71
       }
      }
      AddWindowToSortBuffer_28ImVector_ImGuiWindow____2c_20ImGuiWindow__29($3, $1);
     }
     $0 = $0 + 1 | 0;
     $1 = SAFE_HEAP_LOAD_i32_4_4($4, 7008);
     if (($0 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_4_4($4, 7008, SAFE_HEAP_LOAD_i32_4_4($4, 7032));
   SAFE_HEAP_STORE_i32_4_4($4, 7032, $1);
   SAFE_HEAP_STORE_i32_4_4($4 + 872 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($4, 7068));
   $0 = SAFE_HEAP_LOAD_i64_8_4($4, 7036);
   $1 = i64toi32_i32$HIGH_BITS;
   $3 = $4 + 7012 | 0;
   SAFE_HEAP_STORE_i64_8_4($4, 7036, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3, 0, $0, $1);
   SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($4 + 152 | 0, 0), 16, 0);
   SAFE_HEAP_STORE_i64_8_4($4 + 244 | 0, 0, 0, 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 5408 | 0, 0);
   label$7316 : {
    if (($0 | 0) >= 0) {
     break label$7316
    }
    $1 = $0 + (($0 | 0) / 2 | 0) | 0;
    $1 = ($1 | 0) > 0 ? $1 : 0;
    if (($0 | 0) >= ($1 | 0)) {
     break label$7316
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($0) {
     $0 = $0 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
    }
    $0 = (((wasm2js_i32$2 = $1 << 1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4 + 5412 | 0, 0);
    if ($3) {
     __memcpy($0, $3, SAFE_HEAP_LOAD_i32_4_4($4, 5404) << 1);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 5412);
     label$76 : {
      if (!$3) {
       break label$76
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$2) {
       break label$76
      }
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($4, 5408, $1);
    SAFE_HEAP_STORE_i32_4_4($4, 5412, $0);
   }
   SAFE_HEAP_STORE_i32_4_4($4, 5404, 0);
   SAFE_HEAP_STORE_i32_4_4($4 + 896 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($4 + 892 | 0, 0));
   memset($4 + 768 | 0, 0, 80);
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 12180) | 0) <= 0) {
    break label$1
   }
   $0 = 0;
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($4, 12188) + Math_imul($0, 20) | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0) == 3) {
     FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0]($4, $1)
    }
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 12180) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $14 + 16 | 0;
 }
 
 function ImGui__SetTooltip_28char_20const__2c_20____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  ImGui__BeginTooltipEx_28int_2c_20int_29(1);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
   $2 = $2 + 12800 | 0;
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($2, ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($2, $0, $1) + $2 | 0, 1);
  }
  ImGui__End_28_29();
  __stack_pointer = $3 + 16 | 0;
 }
 
 function AddWindowToSortBuffer_28ImVector_ImGuiWindow____2c_20ImGuiWindow__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$1 : {
   if (($3 | 0) != ($4 | 0)) {
    break label$1
   }
   $2 = $3 + 1 | 0;
   $5 = $4;
   if ($4) {
    $3 = $4 + (($4 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $4 = ($3 | 0) > ($2 | 0) ? $3 : $2;
   if (($5 | 0) >= ($4 | 0)) {
    break label$1
   }
   $3 = $4 << 2;
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($2) {
    __memcpy($3, $2, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 2);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    label$6 : {
     if (!$2) {
      break label$6
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$6
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8) + (SAFE_HEAP_LOAD_i32_4_4($0, 0) << 2) | 0, 0, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
  label$7 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 138)) {
    break label$7
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 352 | 0, 0);
   if ($4 >>> 0 >= 2) {
    qsort(SAFE_HEAP_LOAD_i32_4_4($1 + 360 | 0, 0), $4, 4, 9)
   }
   if (($4 | 0) <= 0) {
    break label$7
   }
   $3 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 360) + ($3 << 2) | 0, 0);
    if (SAFE_HEAP_LOAD_i32_1_U_1($2, 138)) {
     AddWindowToSortBuffer_28ImVector_ImGuiWindow____2c_20ImGuiWindow__29($0, $2)
    }
    $3 = $3 + 1 | 0;
    if (($4 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function ImGui__LogFinish_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  label$1 : {
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 12196)) {
    break label$1
   }
   ImGui__LogText_28char_20const__2c_20____29(19353, 0);
   label$2 : {
    label$3 : {
     switch (SAFE_HEAP_LOAD_i32_4_4($0, 12200) - 1 | 0) {
     case 0:
      fflush(SAFE_HEAP_LOAD_i32_4_4($0, 12204));
      break label$2;
     case 1:
      fclose(SAFE_HEAP_LOAD_i32_4_4($0, 12204));
      break label$2;
     case 3:
      break label$3;
     default:
      break label$2;
     };
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 12208) | 0) < 2) {
     break label$2
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 212 | 0, 0);
    if (!$2) {
     break label$2
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 216 | 0, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12216 | 0, 0);
    FUNCTION_TABLE[$2 | 0]($3, $1 ? $1 : 73572);
   }
   SAFE_HEAP_STORE_i64_8_8($0, 12200, 0, 0);
   SAFE_HEAP_STORE_i32_1_1($0, 12196, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12216 | 0, 0);
   if (!$1) {
    break label$1
   }
   SAFE_HEAP_STORE_i64_8_4($0, 12208, 0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
   }
   ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12216, 0);
  }
 }
 
 function ImGui__IsMouseDown_28int_29($0) {
  $0 = $0 | 0;
  return SAFE_HEAP_LOAD_i32_1_U_1((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + $0 | 0) + 236 | 0, 0) | 0;
 }
 
 function ChildWindowComparer_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  $3 = ($2 & 67108864) - ($0 & 67108864) | 0;
  if ($3) {
   return $3 | 0
  }
  $2 = $2 & 33554432;
  $0 = $0 & 33554432;
  if (($2 | 0) != ($0 | 0)) {
   return (($0 | 0) == ($2 | 0) ? $3 : $2 - $0 | 0) | 0
  }
  return SAFE_HEAP_LOAD_i32_2_2($4, 152) - SAFE_HEAP_LOAD_i32_2_2($1, 152) | 0;
 }
 
 function ImGui__Render_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $9 = __stack_pointer + -64 | 0;
  __stack_pointer = $9;
  $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ((SAFE_HEAP_LOAD_i32_4_4($8, 6988) | 0) != (SAFE_HEAP_LOAD_i32_4_4($8, 6984) | 0)) {
   ImGui__EndFrame_28_29()
  }
  $19 = SAFE_HEAP_LOAD_i32_4_4($8, 6992);
  $17 = SAFE_HEAP_LOAD_i32_4_4($8, 6984);
  SAFE_HEAP_STORE_i32_4_4($8, 6992, $17);
  SAFE_HEAP_STORE_i32_4_4($8 + 868 | 0, 0, 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($8, 12180) | 0) > 0) {
   while (1) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($8, 12188) + Math_imul($4, 20) | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) == 4) {
     FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0]($8, $0)
    }
    $0 = $4 + 1 | 0;
    $4 = $0;
    if ((SAFE_HEAP_LOAD_i32_4_4($8, 12180) | 0) > ($0 | 0)) {
     continue
    }
    break;
   }
  }
  if (SAFE_HEAP_LOAD_i32_4_4($8, 7496)) {
   $4 = 0;
   while (1) {
    $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 7504) + ($4 << 2) | 0, 0);
    $5 = $6 + 96 | 0;
    $0 = 0;
    while (1) {
     $1 = $0;
     $0 = $5 + Math_imul($0, 12) | 0;
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$8 : {
      if (($2 | 0) >= 0) {
       break label$8
      }
      $10 = $2 + (($2 | 0) / 2 | 0) | 0;
      $10 = ($10 | 0) > 0 ? $10 : 0;
      if (($2 | 0) >= ($10 | 0)) {
       break label$8
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($2) {
       $2 = $2 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
      }
      $2 = $0 + 8 | 0;
      $7 = (((wasm2js_i32$1 = $10 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $15 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      if ($15) {
       __memcpy($7, $15, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 2);
       $15 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       label$11 : {
        if (!$15) {
         break label$11
        }
        $18 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$18) {
         break label$11
        }
        $18 = $18 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($18, 0, SAFE_HEAP_LOAD_i32_4_4($18, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $15, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($2, 0, $7);
      SAFE_HEAP_STORE_i32_4_4($0 + 4 | 0, 0, $10);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
     $0 = $1 + 1 | 0;
     if (!$1) {
      continue
     }
     break;
    };
    if (SAFE_HEAP_LOAD_i32_4_4($6, 44)) {
     AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29($5, GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($6, 0, 11755))
    }
    $0 = $4 + 1 | 0;
    $4 = $0;
    if ((SAFE_HEAP_LOAD_i32_4_4($8, 7496) | 0) != ($0 | 0)) {
     continue
    }
    break;
   };
  }
  $19 = ($19 | 0) == ($17 | 0);
  label$13 : {
   if ($19) {
    break label$13
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7468);
   while (1) {
    label$14 : {
     $1 = $0;
     if (($4 | 0) <= 0) {
      $1 = 0;
      break label$14;
     }
     label$17 : {
      label$18 : {
       $4 = $4 - 1 | 0;
       $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 7476) + Math_imul($4, 36) | 0, 4);
       if (!$0) {
        break label$18
       }
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 8)) {
        break label$18
       }
       if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 138)) {
        break label$18
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($0, 145)) {
        break label$18
       }
       $1 = $0;
       $2 = 0;
       break label$17;
      }
      $2 = 1;
     }
     $0 = $1;
     if ($2) {
      continue
     }
    }
    break;
   };
   $0 = SAFE_HEAP_LOAD_i32_4_4($5, 7848);
   if ($0) {
    $4 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 138) | 0) != 0
   } else {
    $4 = 0
   }
   if (!($4 | $1)) {
    break label$13
   }
   if ($1) {
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = SAFE_HEAP_LOAD_i32_4_4($4 + 7016 | 0, 0);
    $0 = $2;
    $6 = SAFE_HEAP_LOAD_i32_4_4($4, 7008);
    label$1 : {
     if (($6 | 0) <= 0) {
      break label$1
     }
     $6 = $2 + ($6 << 2) | 0;
     while (1) {
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($1 | 0)) {
       break label$1
      }
      $0 = $0 + 4 | 0;
      if ($0 >>> 0 < $6 >>> 0) {
       continue
      }
      break;
     };
    }
    $2 = $0 - $2 | 0;
    $0 = $1;
    __inlined_func$ImGui__FindBottomMostVisibleWindowWithinBeginStack_28ImGuiWindow__29 : {
     if (($2 | 0) < -3) {
      break __inlined_func$ImGui__FindBottomMostVisibleWindowWithinBeginStack_28ImGuiWindow__29
     }
     $10 = SAFE_HEAP_LOAD_i32_4_4($4 + 7016 | 0, 0);
     $0 = $1;
     $4 = $2 >> 2;
     while (1) {
      $2 = $0;
      $6 = $4;
      $4 = SAFE_HEAP_LOAD_i32_4_4(($4 << 2) + $10 | 0, 0);
      $7 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
      label$60 : {
       if ($7 & 16777216) {
        $0 = 4;
        break label$60;
       }
       label$81 : {
        label$9 : {
         if ((SAFE_HEAP_LOAD_i32_4_4($4, 736) | 0) == ($1 | 0)) {
          break label$9
         }
         $0 = $4;
         if (!$0) {
          break label$81
         }
         while (1) {
          if (($0 | 0) == ($1 | 0)) {
           break label$9
          }
          $0 = SAFE_HEAP_LOAD_i32_4_4($0, 732);
          if ($0) {
           continue
          }
          break;
         };
         break label$81;
        }
        label$112 : {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 138)) {
          break label$112
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($4, 145)) {
          break label$112
         }
         $0 = 0;
         $2 = ($7 >>> 25 & 1) >>> 0 > (SAFE_HEAP_LOAD_i32_4_4($1, 8) >>> 25 & 1) >>> 0 ? $2 : $4;
         break label$60;
        }
        $0 = 0;
        break label$60;
       }
       $0 = 2;
      }
      label$12 : {
       switch ($0 | 0) {
       case 0:
       case 4:
        $0 = $2;
        $4 = $6 - 1 | 0;
        if (($6 | 0) > 0) {
         continue
        }
        break;
       default:
        break label$12;
       };
      }
      break;
     };
     $0 = $2;
    }
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 6460 | 0, 0) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 7868) * SAFE_HEAP_LOAD_f32_4_4($5, 5416)));
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$23 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $1 = ~~$3;
      break label$23;
     }
     $1 = -2147483648;
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6452 | 0, 0);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$25 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $2 = ~~$3;
      break label$25;
     }
     $2 = -2147483648;
    }
    $4 = $2 << 8;
    $1 = $1 << 24;
    $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6448 | 0, 0);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$27 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $2 = ~~$3;
      break label$27;
     }
     $2 = -2147483648;
    }
    $4 = $2 | $4;
    $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6456 | 0, 0);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$29 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $2 = ~~$3;
      break label$29;
     }
     $2 = -2147483648;
    }
    ImGui__RenderDimmedBackgroundBehindWindow_28ImGuiWindow__2c_20unsigned_20int_29($0, $1 | ($4 | $2 << 16));
    break label$13;
   }
   if (!$4) {
    break label$13
   }
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 6444 | 0, 0) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 7868) * SAFE_HEAP_LOAD_f32_4_4($5, 5416)));
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$31 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $1 = ~~$3;
     break label$31;
    }
    $1 = -2147483648;
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6436 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$33 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$33;
    }
    $2 = -2147483648;
   }
   $4 = $2 << 8;
   $1 = $1 << 24;
   $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6432 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$35 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$35;
    }
    $2 = -2147483648;
   }
   $4 = $2 | $4;
   $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 6440 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$37 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$37;
    }
    $2 = -2147483648;
   }
   ImGui__RenderDimmedBackgroundBehindWindow_28ImGuiWindow__2c_20unsigned_20int_29($0, $1 | ($4 | $2 << 16));
   $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($5, 7848);
   $16 = SAFE_HEAP_LOAD_f32_4_4($0, 20);
   $11 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   $3 = SAFE_HEAP_LOAD_f32_4_4($5, 6468);
   $14 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
   $13 = Math_fround($3 + Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0)));
   SAFE_HEAP_STORE_f32_4_4($9 + 60 | 0, 0, $13);
   $14 = Math_fround($14 - $3);
   SAFE_HEAP_STORE_f32_4_4($9, 52, $14);
   $12 = Math_fround($11 - $3);
   SAFE_HEAP_STORE_f32_4_4($9, 48, $12);
   $11 = Math_fround($3 + Math_fround($11 + $16));
   SAFE_HEAP_STORE_f32_4_4($9, 56, $11);
   label$39 : {
    if (!(SAFE_HEAP_LOAD_f32_4_4($1, 12) <= Math_fround($11 - $12))) {
     break label$39
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0) <= Math_fround($13 - $14))) {
     break label$39
    }
    $3 = Math_fround(Math_fround(-1.0) - $3);
    SAFE_HEAP_STORE_f32_4_4($9, 60, Math_fround($3 + $13));
    SAFE_HEAP_STORE_f32_4_4($9, 56, Math_fround($3 + $11));
    SAFE_HEAP_STORE_f32_4_4($9, 52, Math_fround($14 - $3));
    SAFE_HEAP_STORE_f32_4_4($9, 48, Math_fround($12 - $3));
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 580);
   if (!SAFE_HEAP_LOAD_i32_4_4($4, 0)) {
    ImDrawList__AddDrawCmd_28_29($4)
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 580);
   $2 = SAFE_HEAP_LOAD_i64_8_4($1, 4);
   $6 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($9, 40, $2, $6);
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
   $11 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
   SAFE_HEAP_STORE_f32_4_4($9, 36, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0)));
   SAFE_HEAP_STORE_f32_4_4($9, 32, Math_fround($11 + $3));
   SAFE_HEAP_STORE_i64_8_8($9, 16, $2, $6);
   SAFE_HEAP_STORE_i64_8_8($9, 8, SAFE_HEAP_LOAD_i64_8_4($9, 32), i64toi32_i32$HIGH_BITS);
   ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($4, $9 + 16 | 0, $9 + 8 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 6428 | 0, 0) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 7860) * SAFE_HEAP_LOAD_f32_4_4($1, 5416)));
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$41 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4 = ~~$3;
     break label$41;
    }
    $4 = -2147483648;
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 6420 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$43 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2 = ~~$3;
     break label$43;
    }
    $2 = -2147483648;
   }
   $2 = $2 << 8;
   $6 = $9 + 56 | 0;
   $4 = $4 << 24;
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 6416 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$45 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $17 = ~~$3;
     break label$45;
    }
    $17 = -2147483648;
   }
   $2 = $17 | $2;
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 6424 | 0, 0);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$47 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $1 = ~~$3;
     break label$47;
    }
    $1 = -2147483648;
   }
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($0, 580), $9 + 48 | 0, $6, $4 | ($2 | $1 << 16), SAFE_HEAP_LOAD_f32_4_4($0, 68), 0, Math_fround(3.0));
   ImDrawList__PopClipRect_28_29(SAFE_HEAP_LOAD_i32_4_4($0, 580));
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($8, 7844);
  $1 = 0;
  label$49 : {
   if (!$0) {
    break label$49
   }
   $1 = 0;
   if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 9 | 0, 0) & 32) {
    break label$49
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 736);
  }
  $2 = $1;
  SAFE_HEAP_STORE_i32_4_4($9, 48, $1);
  $4 = 0;
  if ($0) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($8, 7852)
  }
  SAFE_HEAP_STORE_i32_4_4($9, 52, $4);
  if (SAFE_HEAP_LOAD_i32_4_4($8, 7008)) {
   $0 = $4;
   $4 = 0;
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 7016) + ($4 << 2) | 0, 0);
    label$53 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 138)) {
      break label$53
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($1, 145)) {
      break label$53
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
     if ($6 & 16777216 | ($1 | 0) == ($2 | 0) | ($0 | 0) == ($1 | 0)) {
      break label$53
     }
     AddWindowToDrawData_28ImGuiWindow__2c_20int_29($1, $6 >>> 25 & 1);
    }
    $4 = $4 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($8, 7008) | 0) != ($4 | 0)) {
     continue
    }
    break;
   };
  }
  $0 = 0;
  while (1) {
   $1 = $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4(($9 + 48 | 0) + ($0 << 2) | 0, 0);
   label$55 : {
    if (!$0) {
     break label$55
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 138)) {
     break label$55
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 145)) {
     break label$55
    }
    AddWindowToDrawData_28ImGuiWindow__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 8) >>> 25 & 1);
   }
   $0 = $1 + 1 | 0;
   if (!$1) {
    continue
   }
   break;
  };
  SAFE_HEAP_STORE_i64_8_4($8 + 860 | 0, 0, 0, 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($8, 7496) | 0) > 0) {
   $4 = 0;
   while (1) {
    $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 7504) + ($4 << 2) | 0, 0);
    $17 = $6 + 96 | 0;
    $0 = $17;
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
    $10 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    $2 = $2 + $10 | 0;
    label$16 : {
     if (($1 | 0) >= ($2 | 0)) {
      break label$16
     }
     $5 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
     $5 = ($2 | 0) < ($5 | 0) ? $5 : $2;
     if (($1 | 0) >= ($5 | 0)) {
      break label$16
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
     }
     $1 = (((wasm2js_i32$1 = $5 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     if ($7) {
      __memcpy($1, $7, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 2);
      $7 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      label$67 : {
       if (!$7) {
        break label$67
       }
       $15 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$15) {
        break label$67
       }
       $15 = $15 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($15, 0, SAFE_HEAP_LOAD_i32_4_4($15, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $7, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 4, $5);
     SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
    if ($1) {
     __memcpy(SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($10 << 2) | 0, SAFE_HEAP_LOAD_i32_4_4($0, 20), $1 << 2);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
     label$88 : {
      if (($1 | 0) >= 0) {
       break label$88
      }
      $2 = $1 + (($1 | 0) / 2 | 0) | 0;
      $2 = ($2 | 0) > 0 ? $2 : 0;
      if (($1 | 0) >= ($2 | 0)) {
       break label$88
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($1) {
       $1 = $1 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
      }
      $1 = (((wasm2js_i32$1 = $2 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
      if ($5) {
       __memcpy($1, $5, SAFE_HEAP_LOAD_i32_4_4($0, 12) << 2);
       $5 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
       label$119 : {
        if (!$5) {
         break label$119
        }
        $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$10) {
         break label$119
        }
        $10 = $10 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($10, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($0, 16, $2);
      SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
    }
    if (!($19 | !SAFE_HEAP_LOAD_i32_1_U_1($8, 176))) {
     $0 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($6, 1, 11768);
     $2 = SAFE_HEAP_LOAD_i64_8_4($8, 228);
     $5 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($9, 24, $2, $5);
     $1 = SAFE_HEAP_LOAD_i32_4_4($8, 7872);
     $3 = SAFE_HEAP_LOAD_f32_4_4($8, 5600);
     SAFE_HEAP_STORE_i64_8_8($9, 0, $2, $5);
     $13 = Math_fround(0.0);
     $11 = Math_fround(0.0);
     $7 = 0;
     $14 = Math_fround(0.0);
     $2 = __stack_pointer - 48 | 0;
     __stack_pointer = $2;
     label$19 : {
      if (($1 | 0) == -1) {
       break label$19
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 8), 48);
      SAFE_HEAP_STORE_i64_8_8($2 + 40 | 0, 0, 0, 0);
      $10 = $2 + 32 | 0;
      SAFE_HEAP_STORE_i64_8_8($10, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_8($2, 24, 0, 0);
      SAFE_HEAP_STORE_i64_8_8($2, 16, 0, 0);
      $12 = Math_fround(0.0);
      label$210 : {
       if ($1 >>> 0 > 8) {
        break label$210
       }
       $12 = Math_fround(0.0);
       if (SAFE_HEAP_LOAD_i32_1_U_1($5, 0) & 2) {
        break label$210
       }
       $7 = SAFE_HEAP_LOAD_i32_4_4($5 + 72 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($5, 1120), 28) | 0;
       $15 = SAFE_HEAP_LOAD_i32_2_U_2($7, 4);
       $13 = SAFE_HEAP_LOAD_f32_4_4($5, 36);
       $1 = Math_imul($1, 24);
       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 21428 | 0, 0) + Math_fround(SAFE_HEAP_LOAD_i32_2_U_2($7, 6) >>> 0));
       $14 = SAFE_HEAP_LOAD_f32_4_4($5 + 40 | 0, 0);
       $12 = Math_fround($11 * $14);
       SAFE_HEAP_STORE_f32_4_4($2 + 36 | 0, 0, $12);
       $16 = $14;
       $14 = SAFE_HEAP_LOAD_f32_4_4($1 + 21436 | 0, 0);
       $16 = Math_fround($16 * Math_fround($11 + $14));
       SAFE_HEAP_STORE_f32_4_4($2 + 44 | 0, 0, $16);
       SAFE_HEAP_STORE_f32_4_4($2, 20, $12);
       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 21424 | 0, 0) + Math_fround($15 >>> 0));
       SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround($13 * $11));
       $12 = Math_fround($11 + Math_fround(123.0));
       SAFE_HEAP_STORE_f32_4_4($2, 32, Math_fround($13 * $12));
       SAFE_HEAP_STORE_f32_4_4($2, 28, $16);
       $16 = $11;
       $11 = SAFE_HEAP_LOAD_f32_4_4($1 + 21432 | 0, 0);
       SAFE_HEAP_STORE_f32_4_4($2, 24, Math_fround($13 * Math_fround($16 + $11)));
       SAFE_HEAP_STORE_f32_4_4($2, 40, Math_fround($13 * Math_fround($12 + $11)));
       $13 = SAFE_HEAP_LOAD_f32_4_4($1 + 21440 | 0, 0);
       $7 = 1;
       $12 = SAFE_HEAP_LOAD_f32_4_4($1 + 21444 | 0, 0);
      }
      if (!$7) {
       break label$19
      }
      $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 0) - $13);
      SAFE_HEAP_STORE_f32_4_4($9, 0, $13);
      $12 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 4) - $12);
      SAFE_HEAP_STORE_f32_4_4($9, 4, $12);
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
      ImDrawList__PushTextureID_28void__29($0, $1);
      $16 = Math_fround(Math_fround($3 * Math_fround(0.0)) + $12);
      SAFE_HEAP_STORE_f32_4_4($2, 12, $16);
      SAFE_HEAP_STORE_f32_4_4($2, 8, Math_fround($13 + $3));
      $20 = Math_fround(Math_fround(Math_fround($14 + Math_fround(0.0)) * $3) + $12);
      SAFE_HEAP_STORE_f32_4_4($2, 4, $20);
      SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround(Math_fround(Math_fround($11 + Math_fround(1.0)) * $3) + $13));
      $5 = $2 + 8 | 0;
      $7 = $2 + 40 | 0;
      ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $5, $2, $10, $7, 805306368);
      SAFE_HEAP_STORE_f32_4_4($2, 12, $16);
      SAFE_HEAP_STORE_f32_4_4($2, 8, Math_fround(Math_fround($3 + $3) + $13));
      SAFE_HEAP_STORE_f32_4_4($2, 4, $20);
      SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround(Math_fround(Math_fround($11 + Math_fround(2.0)) * $3) + $13));
      ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $5, $2, $10, $7, 805306368);
      $14 = Math_fround(Math_fround($14 * $3) + $12);
      SAFE_HEAP_STORE_f32_4_4($2, 12, $14);
      $3 = Math_fround(Math_fround($11 * $3) + $13);
      SAFE_HEAP_STORE_f32_4_4($2, 8, $3);
      ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $9, $5, $10, $7, -16777216);
      SAFE_HEAP_STORE_f32_4_4($2, 12, $14);
      SAFE_HEAP_STORE_f32_4_4($2, 8, $3);
      $7 = $1;
      $1 = $2 + 16 | 0;
      ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $7, $9, $5, $1, $1 | 8, -1);
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
      $5 = $1 - 1 | 0;
      SAFE_HEAP_STORE_i32_4_4($0, 72, $5);
      $7 = $0 + 112 | 0;
      if ($5) {
       $1 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0)
      } else {
       $1 = 0
      }
      SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      label$611 : {
       $15 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
       $10 = $15 - 1 | 0;
       $7 = $5 + Math_imul($10, 40) | 0;
       $18 = SAFE_HEAP_LOAD_i32_4_4($7, 28);
       if (!$18) {
        break label$611
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($1 | 0)) {
        break label$611
       }
       ImDrawList__AddDrawCmd_28_29($0);
       break label$19;
      }
      label$712 : {
       if (($15 | 0) < 2 | $18) {
        break label$712
       }
       $7 = $7 - 40 | 0;
       if (memcmp($0 + 96 | 0, $7, 24)) {
        break label$712
       }
       if (SAFE_HEAP_LOAD_i32_4_4($7, 32)) {
        break label$712
       }
       SAFE_HEAP_STORE_i32_4_4($0, 0, $10);
       break label$19;
      }
      SAFE_HEAP_STORE_i32_4_4($5 + Math_imul($10, 40) | 0, 16, $1);
     }
     __stack_pointer = $2 + 48 | 0;
    }
    if (SAFE_HEAP_LOAD_i32_4_4($6 + 48 | 0, 0)) {
     AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29($17, GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29($6, 1, 11768))
    }
    $2 = $4;
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    SAFE_HEAP_STORE_i32_1_1($6, 52, 1);
    $4 = 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($6, 96);
    $1 = ($5 | 0) <= 0;
    if (!$1) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($6 + 104 | 0, 0)
    }
    SAFE_HEAP_STORE_i64_8_4($6 + 60 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($6 + 56 | 0, 0, $5);
    SAFE_HEAP_STORE_i32_4_4($6 + 68 | 0, 0, $4);
    SAFE_HEAP_STORE_i64_8_4($6 + 72 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6, 4), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($6 + 80 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6, 12), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($6 + 88 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($0 + 168 | 0, 0), i64toi32_i32$HIGH_BITS);
    if (!$1) {
     $10 = SAFE_HEAP_LOAD_i32_4_4($6 + 104 | 0, 0);
     $4 = 0;
     $0 = 0;
     $1 = 0;
     while (1) {
      $7 = SAFE_HEAP_LOAD_i32_4_4($10 + ($1 << 2) | 0, 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4($7, 12) + $4 | 0;
      $0 = SAFE_HEAP_LOAD_i32_4_4($7, 24) + $0 | 0;
      $1 = $1 + 1 | 0;
      if (($5 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
     SAFE_HEAP_STORE_i32_4_4($6, 60, $4);
     SAFE_HEAP_STORE_i32_4_4($6, 64, $0);
    }
    SAFE_HEAP_STORE_i32_4_4($8, 860, SAFE_HEAP_LOAD_i32_4_4($8, 860) + SAFE_HEAP_LOAD_i32_4_4($6, 64) | 0);
    SAFE_HEAP_STORE_i32_4_4($8, 864, SAFE_HEAP_LOAD_i32_4_4($8, 864) + SAFE_HEAP_LOAD_i32_4_4($6, 60) | 0);
    $4 = $2 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($8, 7496) | 0) > ($4 | 0)) {
     continue
    }
    break;
   };
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($8, 12180) | 0) > 0) {
   $4 = 0;
   while (1) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($8, 12188) + Math_imul($4, 20) | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) == 5) {
     FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0]($8, $0)
    }
    $4 = $4 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($8, 12180) | 0) > ($4 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $9 - -64 | 0;
 }
 
 function AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  label$1 : {
   if (!$2) {
    break label$1
   }
   $2 = $2 - 1 | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul($2, 40) | 0;
   if (SAFE_HEAP_LOAD_i32_4_4($3, 28)) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_4_4($3, 32)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  }
  if (SAFE_HEAP_LOAD_i32_4_4($1, 0)) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$2 : {
    if (($3 | 0) != ($2 | 0)) {
     break label$2
    }
    $4 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $3 = $3 + 1 | 0;
    $3 = ($3 | 0) < ($4 | 0) ? $4 : $3;
    if (($2 | 0) >= ($3 | 0)) {
     break label$2
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($2) {
     $2 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
    }
    $2 = (((wasm2js_i32$1 = $3 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($4) {
     __memcpy($2, $4, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 2);
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     label$7 : {
      if (!$4) {
       break label$7
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$5) {
       break label$7
      }
      $5 = $5 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
   }
   SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8) + (SAFE_HEAP_LOAD_i32_4_4($0, 0) << 2) | 0, 0, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
  }
 }
 
 function ImGui__RenderDimmedBackgroundBehindWindow_28ImGuiWindow__2c_20unsigned_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 96 | 0;
  __stack_pointer = $4;
  if ($1 >>> 0 >= 16777216) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0);
   $9 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
   $7 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
   $2 = $4 + 92 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 8 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0)));
   SAFE_HEAP_STORE_f32_4_4($4, 84, $8);
   SAFE_HEAP_STORE_f32_4_4($4, 80, $7);
   SAFE_HEAP_STORE_f32_4_4($4, 88, Math_fround($7 + $9));
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 736), 580);
   if (!SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
    ImDrawList__AddDrawCmd_28_29($0)
   }
   SAFE_HEAP_STORE_f32_4_4($4, 76, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 84) + Math_fround(-1.0)));
   SAFE_HEAP_STORE_f32_4_4($4, 72, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 80) + Math_fround(-1.0)));
   SAFE_HEAP_STORE_f32_4_4($4, 64, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 88) + Math_fround(1.0)));
   SAFE_HEAP_STORE_f32_4_4($4, 68, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) + Math_fround(1.0)));
   SAFE_HEAP_STORE_i64_8_8($4, 16, SAFE_HEAP_LOAD_i64_8_4($4, 72), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 8, SAFE_HEAP_LOAD_i64_8_4($4, 64), i64toi32_i32$HIGH_BITS);
   ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($0, $4 + 16 | 0, $4 + 8 | 0, 0);
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $4 + 80 | 0, $4 + 88 | 0, $1, Math_fround(0.0), 0);
   $1 = $4 + 24 | 0;
   $3 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) + SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) - 40 | 0;
   SAFE_HEAP_STORE_i64_8_8($1 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 24, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) - 1 | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$1 : {
    if (!$3) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$3 : {
      if (($2 | 0) != ($3 | 0)) {
       break label$3
      }
      $5 = $2;
      $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
      $3 = $3 + 1 | 0;
      $3 = ($2 | 0) > ($3 | 0) ? $2 : $3;
      if (($5 | 0) >= ($3 | 0)) {
       break label$3
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($2) {
       $2 = $2 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
      }
      $2 = (((wasm2js_i32$1 = Math_imul($3, 40), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      if ($5) {
       __memcpy($2, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40));
       $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
       label$8 : {
        if (!$5) {
         break label$8
        }
        $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$6) {
         break label$8
        }
        $6 = $6 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
      SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0;
     break label$1;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    label$9 : {
     if (($2 | 0) != ($3 | 0)) {
      break label$9
     }
     $5 = $2;
     $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
     $3 = $3 + 1 | 0;
     $3 = ($2 | 0) > ($3 | 0) ? $2 : $3;
     if (($5 | 0) >= ($3 | 0)) {
      break label$9
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($2) {
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
     }
     $2 = (((wasm2js_i32$1 = Math_imul($3, 40), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     if ($5) {
      __memcpy($2, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40));
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      label$14 : {
       if (!$5) {
        break label$14
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$6) {
        break label$14
       }
       $6 = $6 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
     SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    if (($3 | 0) > 0) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     memmove($2 + 40 | 0, $2, Math_imul($3, 40));
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   }
   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   ImDrawList__PopClipRect_28_29($0);
  }
  __stack_pointer = $4 + 96 | 0;
 }
 
 function AddWindowToDrawData_28ImGuiWindow__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2 + 7504 | 0, 0), 0);
  $2 = $2 + 868 | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
  AddDrawListToDrawData_28ImVector_ImDrawList____2c_20ImDrawList__29(($3 + Math_imul($1, 12) | 0) + 96 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 580));
  if ((SAFE_HEAP_LOAD_i32_4_4($0 + 352 | 0, 0) | 0) > 0) {
   $2 = 0;
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 360) + ($2 << 2) | 0, 0);
    label$3 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 138)) {
      break label$3
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($3, 145)) {
      break label$3
     }
     AddWindowToDrawData_28ImGuiWindow__2c_20int_29($3, $1);
    }
    $2 = $2 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 352) | 0) > ($2 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function ImGui__GetKeyIndex_28int_29($0) {
  $0 = $0 | 0;
  return SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + ($0 << 2) | 0) + 52 | 0, 0) | 0;
 }
 
 function ImGui__IsKeyDown_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if (($0 | 0) >= 0) {
   $1 = (SAFE_HEAP_LOAD_i32_1_U_1((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + $0 | 0) + 256 | 0, 0) | 0) != 0
  }
  return $1 | 0;
 }
 
 function ImGui__GetKeyPressedAmount_28int_2c_20float_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  $3 = 0;
  label$1 : {
   if (($0 | 0) < 0) {
    break label$1
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $6 = SAFE_HEAP_LOAD_f32_4_4(($4 + ($0 << 2) | 0) + 1140 | 0, 0);
   $3 = 1;
   if ($6 == Math_fround(0.0)) {
    break label$1
   }
   $5 = Math_fround($6 - SAFE_HEAP_LOAD_f32_4_4($4 + 24 | 0, 0));
   $3 = 0;
   if ($5 >= $6) {
    break label$1
   }
   if ($2 <= Math_fround(0.0)) {
    return $1 <= $6 & $1 > $5
   }
   $4 = -1;
   if ($1 > $5) {
    $0 = $4
   } else {
    $5 = Math_fround(Math_fround($5 - $1) / $2);
    label$4 : {
     if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
      $0 = ~~$5;
      break label$4;
     }
     $0 = -2147483648;
    }
   }
   if (!($1 > $6)) {
    $1 = Math_fround(Math_fround($6 - $1) / $2);
    label$7 : {
     if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
      $4 = ~~$1;
      break label$7;
     }
     $4 = -2147483648;
    }
   }
   $3 = $4 - $0 | 0;
  }
  return $3 | 0;
 }
 
 function ImGui__IsKeyPressed_28int_2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0);
  label$1 : {
   if (($0 | 0) < 0) {
    break label$1
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_f32_4_4(($6 + ($0 << 2) | 0) + 1140 | 0, 0);
   $5 = $2 == Math_fround(0.0);
   if ($5) {
    return $5 | 0
   }
   if (!$1) {
    break label$1
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($6 + 140 | 0, 0);
   if (!($2 > $3)) {
    return 0
   }
   $5 = 0;
   $4 = Math_fround($2 - SAFE_HEAP_LOAD_f32_4_4($6 + 24 | 0, 0));
   if ($4 >= $2) {
    break label$1
   }
   $7 = SAFE_HEAP_LOAD_f32_4_4($6 + 144 | 0, 0);
   if ($7 <= Math_fround(0.0)) {
    return $3 > $4 & $2 >= $3
   }
   $0 = -1;
   if ($3 > $4) {
    $1 = $0
   } else {
    $4 = Math_fround(Math_fround($4 - $3) / $7);
    label$6 : {
     if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
      $1 = ~~$4;
      break label$6;
     }
     $1 = -2147483648;
    }
   }
   if (!($2 < $3)) {
    $2 = Math_fround(Math_fround($2 - $3) / $7);
    label$9 : {
     if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
      $0 = ~~$2;
      break label$9;
     }
     $0 = -2147483648;
    }
   }
   $5 = ($0 | 0) > ($1 | 0);
  }
  return $5 | 0;
 }
 
 function ImGui__IsKeyReleased_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = 0;
  label$1 : {
   if (($0 | 0) < 0) {
    break label$1
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $1 = 0;
   if (!(SAFE_HEAP_LOAD_f32_4_4(($2 + ($0 << 2) | 0) + 3188 | 0, 0) >= Math_fround(0.0))) {
    break label$1
   }
   $1 = !SAFE_HEAP_LOAD_i32_1_U_1(($0 + $2 | 0) + 256 | 0, 0);
  }
  return $1 | 0;
 }
 
 function ImGui__IsMouseClicked_28int_2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_f32_4_4(($5 + ($0 << 2) | 0) + 1040 | 0, 0);
  if ($2 == Math_fround(0.0)) {
   return 1
  }
  label$2 : {
   label$3 : {
    if (!$1) {
     break label$3
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 140 | 0, 0);
    if (!($2 > $3)) {
     break label$3
    }
    $4 = Math_fround($2 - SAFE_HEAP_LOAD_f32_4_4($5 + 24 | 0, 0));
    $1 = 0;
    label$4 : {
     if ($4 >= $2) {
      break label$4
     }
     $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 144 | 0, 0) * Math_fround(.5));
     $1 = $3 > $4 & $2 >= $3;
     if ($6 <= Math_fround(0.0)) {
      break label$4
     }
     $0 = -1;
     if ($3 > $4) {
      $1 = $0
     } else {
      $4 = Math_fround(Math_fround($4 - $3) / $6);
      label$7 : {
       if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
        $1 = ~~$4;
        break label$7;
       }
       $1 = -2147483648;
      }
     }
     if (!($2 < $3)) {
      $2 = Math_fround(Math_fround($2 - $3) / $6);
      label$10 : {
       if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
        $0 = ~~$2;
        break label$10;
       }
       $0 = -2147483648;
      }
     }
     $1 = $0 - $1 | 0;
    }
    $0 = 1;
    if (($1 | 0) > 0) {
     break label$2
    }
   }
   $0 = 0;
  }
  return $0 | 0;
 }
 
 function ImGui__IsMouseReleased_28int_29($0) {
  $0 = $0 | 0;
  return SAFE_HEAP_LOAD_i32_1_U_1((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + $0 | 0) + 1022 | 0, 0) | 0;
 }
 
 function ImGui__IsMouseDoubleClicked_28int_29($0) {
  $0 = $0 | 0;
  return (SAFE_HEAP_LOAD_i32_2_U_2((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + ($0 << 1) | 0) + 1002 | 0, 0) | 0) == 2 | 0;
 }
 
 function ImGui__GetMouseClickedCount_28int_29($0) {
  $0 = $0 | 0;
  return SAFE_HEAP_LOAD_i32_2_U_2((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + ($0 << 1) | 0) + 1002 | 0, 0) | 0;
 }
 
 function ImGui__IsMouseDragPastThreshold_28int_2c_20float_29($0) {
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ($0 < Math_fround(0.0)) {
   $0 = SAFE_HEAP_LOAD_f32_4_4($1 + 48 | 0, 0)
  }
  return SAFE_HEAP_LOAD_f32_4_4($1 + 1120 | 0, 0) >= Math_fround($0 * $0);
 }
 
 function ImGui__IsMouseDragging_28int_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (SAFE_HEAP_LOAD_i32_1_U_1(($2 + $0 | 0) + 236 | 0, 0)) {
   if ($1 < Math_fround(0.0)) {
    $1 = SAFE_HEAP_LOAD_f32_4_4($2 + 48 | 0, 0)
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4((($0 << 2) + $2 | 0) + 1120 | 0, 0) >= Math_fround($1 * $1);
  }
  return $3 | 0;
 }
 
 function ImGui__GetMousePos_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 228 | 0, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__IsAnyMouseDown_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = 1;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1 + 236 | 0, 0)) {
   $0 = 0;
   while (1) {
    $2 = $0;
    $0 = $0 + 1 | 0;
    if (($0 | 0) != 5) {
     if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + $1 | 0) + 236 | 0, 0)) {
      continue
     }
    }
    break;
   };
   $0 = $2 >>> 0 < 4;
  }
  return $0 | 0;
 }
 
 function ImGui__ResetMouseDragDelta_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i64_8_4((($0 << 3) + $1 | 0) + 908 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 228 | 0, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__GetMouseCursor_28_29() {
  return SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7872) | 0;
 }
 
 function ImGui__SetMouseCursor_28int_29($0) {
  $0 = $0 | 0;
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7872, $0);
 }
 
 function ImGui__CaptureKeyboardFromApp_28bool_29($0) {
  $0 = $0 | 0;
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 12792, $0);
 }
 
 function ImGui__CaptureMouseFromApp_28bool_29($0) {
  $0 = $0 | 0;
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 12788, $0);
 }
 
 function ImGui__IsItemActive_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
  if ($1) {
   $2 = (SAFE_HEAP_LOAD_i32_4_4($0, 7240) | 0) == ($1 | 0)
  }
  return $2 | 0;
 }
 
 function ImGui__IsItemActivated_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7136);
  label$1 : {
   label$2 : {
    if (!$0) {
     break label$2
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7240);
    if (($0 | 0) != ($2 | 0)) {
     break label$2
    }
    $0 = 1;
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 7196) | 0) != ($2 | 0)) {
     break label$1
    }
   }
   $0 = 0;
  }
  return $0 | 0;
 }
 
 function ImGui__IsItemDeactivated_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($2 + 7248 | 0, 0);
  if ($0 & 32) {
   return ($0 & 64) >>> 6 | 0
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7196);
  if (!$1) {
   return 0
  }
  $0 = 0;
  $3 = $1;
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7240);
  if (($3 | 0) == ($1 | 0)) {
   $0 = (SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) != ($1 | 0)
  }
  return $0 | 0;
 }
 
 function ImGui__IsItemDeactivatedAfterEdit_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 7248 | 0, 0);
  label$1 : {
   label$2 : {
    if ($0 & 32) {
     $3 = ($0 & 64) >>> 6 | 0;
     break label$2;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7196);
    if (!$0) {
     return 0
    }
    $3 = $0;
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7240);
    $2 = 0;
    if (($3 | 0) != ($0 | 0)) {
     break label$1
    }
    $3 = (SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) != ($0 | 0);
   }
   if (!$3) {
    return 0
   }
   $2 = 1;
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 7201)) {
    break label$1
   }
   $2 = 0;
   if (SAFE_HEAP_LOAD_i32_4_4($1, 7136)) {
    break label$1
   }
   $2 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 7152) | 0) != 0;
  }
  return $2 | 0;
 }
 
 function ImGui__IsItemClicked_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if (SAFE_HEAP_LOAD_f32_4_4((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + ($0 << 2) | 0) + 1040 | 0, 0) == Math_fround(0.0)) {
   $1 = ImGui__IsItemHovered_28int_29(0)
  }
  return $1 | 0;
 }
 
 function ImGui__IsItemToggledOpen_28_29() {
  return (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7248 | 0, 0) & 16) >>> 4 | 0;
 }
 
 function ImGui__IsAnyItemHovered_28_29() {
  var $0 = 0, $1 = 0;
  $0 = 1;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_4_4($1, 7116)) {
   $0 = (SAFE_HEAP_LOAD_i32_4_4($1, 7120) | 0) != 0
  }
  return $0 | 0;
 }
 
 function ImGui__IsAnyItemActive_28_29() {
  return (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7136) | 0) != 0 | 0;
 }
 
 function ImGui__IsAnyItemFocused_28_29() {
  var $0 = 0, $1 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (SAFE_HEAP_LOAD_i32_4_4($0, 7512)) {
   $1 = !SAFE_HEAP_LOAD_i32_1_U_1($0, 7570)
  }
  return $1 | 0;
 }
 
 function ImGui__IsItemVisible_28_29() {
  var $0 = 0, $1 = 0, $2 = Math_fround(0), $3 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_f32_4_4($0 + 7256 | 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  if (!($2 < SAFE_HEAP_LOAD_f32_4_4($1 + 508 | 0, 0))) {
   return 0
  }
  if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 7264 | 0, 0) > SAFE_HEAP_LOAD_f32_4_4($1 + 500 | 0, 0))) {
   return 0
  }
  if (SAFE_HEAP_LOAD_f32_4_4($0, 7252) < SAFE_HEAP_LOAD_f32_4_4($1, 504)) {
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 7260) > SAFE_HEAP_LOAD_f32_4_4($1, 496)
  }
  return $3 | 0;
 }
 
 function ImGui__IsItemEdited_28_29() {
  return (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7248 | 0, 0) & 4) >>> 2 | 0;
 }
 
 function ImGui__SetItemAllowOverlap_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7116);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7240);
  if (($1 | 0) == ($2 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($0, 7124, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 7136) | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($0, 7149, 1)
  }
 }
 
 function ImGui__NavMoveRequestCancel_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_2_2($0, 7596, 0);
  SAFE_HEAP_STORE_i32_1_1($0, 7572, SAFE_HEAP_LOAD_i32_1_U_1($0, 7573));
 }
 
 function ImGui__GetItemRectMin_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7252 | 0, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__GetItemRectMax_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7260 | 0, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__BeginChildEx_28char_20const__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20bool_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  $12 = SAFE_HEAP_LOAD_f32_4_4($8 + 524 | 0, 0);
  label$1 : {
   label$2 : {
    if (SAFE_HEAP_LOAD_i32_4_4($8 + 368 | 0, 0)) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_4_4($5, 8036)) {
     break label$2
    }
    $6 = $8 + 520 | 0;
    break label$1;
   }
   $6 = $8 + 472 | 0;
  }
  $9 = SAFE_HEAP_LOAD_i32_4_4($8, 8);
  $13 = SAFE_HEAP_LOAD_f32_4_4($8 + 212 | 0, 0);
  $11 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  $14 = SAFE_HEAP_LOAD_f32_4_4($8, 208);
  $15 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
  $10 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
  SAFE_HEAP_STORE_i32_4_4($5, 7300, SAFE_HEAP_LOAD_i32_4_4($5, 7300) | 2);
  SAFE_HEAP_STORE_i32_4_4($5 + 7308 | 0, 0, 1);
  $9 = $9 & 4;
  $13 = Math_fround($12 - $13);
  if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
   $2 = ~~$10
  } else {
   $2 = -2147483648
  }
  $12 = Math_fround($2 | 0);
  $10 = Math_fround($13 + $12);
  SAFE_HEAP_STORE_f32_4_4($5 + 7336 | 0, 0, ($2 | 0) > 0 ? $12 : $10 >= Math_fround(4.0) ? $10 : Math_fround(4.0));
  $16 = $4 | $9;
  $12 = Math_fround($15 - $14);
  if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
   $6 = ~~$11
  } else {
   $6 = -2147483648
  }
  $10 = Math_fround($6 | 0);
  $11 = Math_fround($12 + $10);
  SAFE_HEAP_STORE_f32_4_4($5 + 7332 | 0, 0, ($6 | 0) > 0 ? $10 : $11 >= Math_fround(4.0) ? $11 : Math_fround(4.0));
  $9 = $5 + 12800 | 0;
  $17 = !$2 << 1;
  $6 = !$6;
  $2 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
  label$7 : {
   if ($0) {
    SAFE_HEAP_STORE_i32_4_4($7, 24, $1);
    SAFE_HEAP_STORE_i32_4_4($7, 20, $0);
    SAFE_HEAP_STORE_i32_4_4($7, 16, $2);
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($9, 3073, 14551, $7 + 16 | 0);
    break label$7;
   }
   SAFE_HEAP_STORE_i32_4_4($7, 4, $1);
   SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($9, 3073, 14575, $7);
  }
  $0 = $16 | 16777475;
  $6 = $6 | $17;
  $11 = SAFE_HEAP_LOAD_f32_4_4($5 + 5464 | 0, 0);
  if (!$3) {
   SAFE_HEAP_STORE_i32_4_4($5, 5464, 0)
  }
  $9 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($5 + 12800 | 0, 0, $0);
  SAFE_HEAP_STORE_f32_4_4($5, 5464, $11);
  $2 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 166, $6);
  SAFE_HEAP_STORE_i32_4_4($2, 84, $1);
  if ((SAFE_HEAP_LOAD_i32_2_U_2($2, 150) | 0) == 1) {
   SAFE_HEAP_STORE_i64_8_4($8, 208, SAFE_HEAP_LOAD_i64_8_4($2, 12), i64toi32_i32$HIGH_BITS)
  }
  label$11 : {
   if ($4 & 8388608) {
    break label$11
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7520) | 0) != ($1 | 0)) {
    break label$11
   }
   if (!SAFE_HEAP_LOAD_i32_2_U_2($2 + 296 | 0, 0)) {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($2 + 305 | 0, 0)) {
     break label$11
    }
   }
   ImGui__FocusWindow_28ImGuiWindow__29($2);
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
   label$13 : {
    if ($3 & 262144) {
     SAFE_HEAP_STORE_i64_8_8($0, 7512, 0, 0);
     break label$13;
    }
    label$15 : {
     if (!($3 & 67108864 | (SAFE_HEAP_LOAD_i32_4_4($2, 736) | 0) == ($2 | 0))) {
      $3 = SAFE_HEAP_LOAD_i32_4_4($2, 756);
      if ($3) {
       break label$15
      }
     }
     SAFE_HEAP_STORE_i64_8_8($0, 7512, 0, 0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 7564);
     SAFE_HEAP_STORE_i32_4_4(($3 + ($4 << 2) | 0) + 756 | 0, 0, 0);
     $3 = $3 + ($4 << 4) | 0;
     SAFE_HEAP_STORE_i64_8_4($3 + 772 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($3 + 764 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($0, 7576, 0, 0);
     SAFE_HEAP_STORE_i32_1_1($0, 7574, 0);
     SAFE_HEAP_STORE_i32_2_2($0, 7572, 257);
     SAFE_HEAP_STORE_i64_8_8($0 + 7584 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($0 + 7592 | 0, 0, 0);
     break label$13;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7516, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7512, $3);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
   $1 = $1 + 1 | 0;
   SAFE_HEAP_STORE_i32_1_1($0, 7148, ($3 | 0) != ($1 | 0));
   label$17 : {
    if (($1 | 0) == ($3 | 0)) {
     break label$17
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7192, -1);
    SAFE_HEAP_STORE_i32_2_1($0, 7151, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7144, 0);
    if (!$1) {
     break label$17
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7212, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 7208, $1);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 7184, $2);
   SAFE_HEAP_STORE_i32_2_1($0, 7149, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 7136, $1);
   SAFE_HEAP_STORE_i32_1_1($0, 7153, 0);
   if ($1) {
    SAFE_HEAP_STORE_i32_4_4($0, 7140, $1);
    $2 = 4;
    label$19 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 7520) | 0) == ($1 | 0)) {
      break label$19
     }
     $2 = 4;
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 7532) | 0) == ($1 | 0)) {
      break label$19
     }
     $2 = (SAFE_HEAP_LOAD_i32_4_4($0, 7540) | 0) == ($1 | 0) ? 4 : 1;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 7188, $2);
   }
   SAFE_HEAP_STORE_i64_8_8($0, 7168, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0, 7156, 0, 0);
   SAFE_HEAP_STORE_i32_1_1($0, 7154, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 7188, 4);
  }
  __stack_pointer = $7 + 32 | 0;
  return $9;
 }
 
 function ImGui__GetContentRegionAvail_28_29($0) {
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 524 | 0, 0);
  label$1 : {
   label$2 : {
    if (SAFE_HEAP_LOAD_i32_4_4($1 + 368 | 0, 0)) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_4_4($2, 8036)) {
     break label$2
    }
    $2 = $1 + 520 | 0;
    break label$1;
   }
   $2 = $1 + 472 | 0;
  }
  $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 212 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - SAFE_HEAP_LOAD_f32_4_4($1, 208)));
  SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($3 - $4));
 }
 
 function ImGui__EndChild_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0;
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_1_1($3, 6998, 1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_2_2($1, 150) | 0) >= 2) {
    ImGui__End_28_29();
    break label$1;
   }
   SAFE_HEAP_STORE_i64_8_8($0, 40, SAFE_HEAP_LOAD_i64_8_4($1, 20), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 166);
   if ($2 & 1) {
    $4 = SAFE_HEAP_LOAD_f32_4_4($0, 40);
    SAFE_HEAP_STORE_f32_4_4($0, 40, $4 <= Math_fround(4.0) ? Math_fround(4.0) : $4);
   }
   if ($2 & 2) {
    $4 = SAFE_HEAP_LOAD_f32_4_4($0, 44);
    SAFE_HEAP_STORE_f32_4_4($0, 44, $4 <= Math_fround(4.0) ? Math_fround(4.0) : $4);
   }
   ImGui__End_28_29();
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
   $4 = SAFE_HEAP_LOAD_f32_4_4($2, 208);
   $5 = SAFE_HEAP_LOAD_i64_8_4($2, 208);
   $6 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_f32_4_4($0 + 36 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0, 44)));
   SAFE_HEAP_STORE_i64_8_8($0, 24, $5, $6);
   SAFE_HEAP_STORE_f32_4_4($0, 32, Math_fround($4 + SAFE_HEAP_LOAD_f32_4_4($0, 40)));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($0 + 40 | 0, Math_fround(-1.0));
   label$5 : {
    label$6 : {
     if (!SAFE_HEAP_LOAD_i32_2_U_2($1 + 296 | 0, 0)) {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1 + 305 | 0, 0)) {
       break label$6
      }
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 10 | 0, 0) & 128) {
      break label$6
     }
     $2 = $0 + 24 | 0;
     ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($2, SAFE_HEAP_LOAD_i32_4_4($1, 84), 0, 0);
     ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($2, SAFE_HEAP_LOAD_i32_4_4($1, 84), 1);
     if (SAFE_HEAP_LOAD_i32_2_U_2($1, 296)) {
      break label$5
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 7508) | 0) != ($1 | 0)) {
      break label$5
     }
     $2 = $0 + 8 | 0;
     SAFE_HEAP_STORE_f32_4_4($2 + 12 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 36 | 0, 0) + Math_fround(2.0)));
     SAFE_HEAP_STORE_f32_4_4($0, 16, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 32) + Math_fround(2.0)));
     SAFE_HEAP_STORE_f32_4_4($0, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 28) + Math_fround(-2.0)));
     SAFE_HEAP_STORE_f32_4_4($0, 8, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 24) + Math_fround(-2.0)));
     ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($2, SAFE_HEAP_LOAD_i32_4_4($3, 7512), 2);
     break label$5;
    }
    ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0 + 24 | 0, 0, 0, 0);
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($3, 7084) | 0) != ($1 | 0)) {
    break label$1
   }
   $1 = $3 + 7248 | 0;
   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) | 128);
  }
  SAFE_HEAP_STORE_i32_4_4($3, 12228, -8388609);
  SAFE_HEAP_STORE_i32_1_1($3, 6998, 0);
  __stack_pointer = $0 + 48 | 0;
 }
 
 function ImGui__ItemSize_28ImVec2_20const__2c_20float_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  label$1 : {
   $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
    break label$1
   }
   if ($1 >= Math_fround(0.0)) {
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 264 | 0, 0) - $1);
    $3 = $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3;
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 208) + SAFE_HEAP_LOAD_f32_4_4($0, 0));
   SAFE_HEAP_STORE_f32_4_4($2 + 216 | 0, 0, $6);
   $9 = $2 + 212 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
   SAFE_HEAP_STORE_f32_4_4($2 + 220 | 0, 0, $8);
   $4 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 12) + SAFE_HEAP_LOAD_f32_4_4($2 + 272 | 0, 0)) + SAFE_HEAP_LOAD_f32_4_4($2 + 276 | 0, 0));
   label$3 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $0 = ~~$4;
     break label$3;
    }
    $0 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround($0 | 0));
   $4 = SAFE_HEAP_LOAD_f32_4_4($7 + 5496 | 0, 0);
   $0 = $2 + 252 | 0;
   $5 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
   $0 = $2 + 232 | 0;
   $10 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $6 <= $10 ? $10 : $6);
   $3 = Math_fround($3 + $11);
   $3 = $3 <= $5 ? $5 : $3;
   SAFE_HEAP_STORE_f32_4_4($2 + 260 | 0, 0, $3);
   $3 = Math_fround($4 + Math_fround($3 + $8));
   label$5 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$5;
    }
    $0 = -2147483648;
   }
   $5 = Math_fround($0 | 0);
   SAFE_HEAP_STORE_f32_4_4($9, 0, $5);
   $0 = $2 + 236 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $4 = Math_fround($5 - $4);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $3 >= $4 ? $3 : $4);
   $0 = $2 + 264 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
   $1 = $1 <= $3 ? $3 : $1;
   SAFE_HEAP_STORE_f32_4_4($2 + 268 | 0, 0, $1);
   if (SAFE_HEAP_LOAD_i32_4_4($2 + 376 | 0, 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
   $3 = SAFE_HEAP_LOAD_f32_4_4($7 + 5492 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2, 212, $8);
   SAFE_HEAP_STORE_f32_4_4($2, 264, $1);
   SAFE_HEAP_STORE_i64_8_4($2 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround($6 + $3));
  }
 }
 
 function ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($4, 7240, $1);
  SAFE_HEAP_STORE_i64_8_4($4 + 7252 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($4 + 7260 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  $2 = $2 ? $2 : $0;
  $5 = SAFE_HEAP_LOAD_i64_8_4($2, 0);
  $10 = i64toi32_i32$HIGH_BITS;
  $13 = SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0);
  $18 = i64toi32_i32$HIGH_BITS;
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7216) | $3;
  SAFE_HEAP_STORE_i32_4_4($4 + 7244 | 0, 0, $2);
  SAFE_HEAP_STORE_i32_4_4($4 + 7248 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($4 + 7276 | 0, 0, $13, $18);
  SAFE_HEAP_STORE_i64_8_4($4 + 7268 | 0, 0, $5, $10);
  label$1 : {
   if (!$1) {
    break label$1
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
   $5 = $3 + 298 | 0;
   $10 = SAFE_HEAP_LOAD_i32_2_U_2($5, 0);
   $13 = SAFE_HEAP_LOAD_i32_4_4($3 + 292 | 0, 0);
   SAFE_HEAP_STORE_i32_2_2($5, 0, $10 | 1 << $13);
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 7512) | 0) != ($1 | 0)) {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 7572)) {
     break label$1
    }
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($4, 7508);
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 748) | 0) != (SAFE_HEAP_LOAD_i32_4_4($3, 748) | 0)) {
    break label$1
   }
   if (($3 | 0) != ($5 | 0)) {
    if (!((SAFE_HEAP_LOAD_i32_4_4($5, 8) | SAFE_HEAP_LOAD_i32_4_4($3, 8)) & 8388608)) {
     break label$1
    }
   }
   $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 7280 | 0, 0);
   $14 = SAFE_HEAP_LOAD_f32_4_4($4 + 7276 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($4 + 7272 | 0, 0);
   $12 = SAFE_HEAP_LOAD_f32_4_4($4, 7268);
   label$4 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 7573)) {
     break label$4
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 7564) | 0) != ($13 | 0)) {
     break label$4
    }
    $5 = $2 & 20;
    label$5 : {
     if ($5) {
      if (SAFE_HEAP_LOAD_i32_4_4($4, 7576)) {
       break label$5
      }
     }
     SAFE_HEAP_STORE_i32_4_4($4, 7576, $1);
     $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 224 | 0, 0);
     $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($4 + 7592 | 0, 0, Math_fround($8 - $7));
     SAFE_HEAP_STORE_f32_4_4($4 + 7588 | 0, 0, Math_fround($14 - $6));
     SAFE_HEAP_STORE_f32_4_4($4 + 7584 | 0, 0, Math_fround($11 - $7));
     SAFE_HEAP_STORE_f32_4_4($4, 7580, Math_fround($12 - $6));
    }
    if ($5) {
     break label$4
    }
    SAFE_HEAP_STORE_i32_1_1($4, 7573, 0);
    SAFE_HEAP_STORE_i32_1_1($4, 7572, SAFE_HEAP_LOAD_i32_1_U_1($4, 7597));
   }
   label$7 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 7597)) {
     break label$7
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($4, 7600);
    if ($5 & 1024) {
     if (!($5 & 512) & ($2 & 261) != 256) {
      break label$7
     }
     label$10 : {
      switch (SAFE_HEAP_LOAD_i32_4_4($4, 7660) + 1 | 0) {
      case 2:
       if (!SAFE_HEAP_LOAD_i32_4_4($4 + 7804 | 0, 0)) {
        SAFE_HEAP_STORE_i32_4_4($4, 7804, $1);
        SAFE_HEAP_STORE_i32_4_4($4, 7800, $3);
        $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 300 | 0, 0);
        SAFE_HEAP_STORE_i32_4_4($4 + 7828 | 0, 0, $2);
        SAFE_HEAP_STORE_i32_4_4($4 + 7808 | 0, 0, $5);
        $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 224 | 0, 0);
        $9 = SAFE_HEAP_LOAD_f32_4_4($4, 7280);
        $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0);
        SAFE_HEAP_STORE_f32_4_4($4 + 7824 | 0, 0, Math_fround($9 - $7));
        SAFE_HEAP_STORE_f32_4_4($4 + 7820 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7276) - $6));
        SAFE_HEAP_STORE_f32_4_4($4 + 7816 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7272) - $7));
        SAFE_HEAP_STORE_f32_4_4($4 + 7812 | 0, 0, Math_fround($12 - $6));
       }
       $5 = SAFE_HEAP_LOAD_i32_4_4($4, 7664) - 1 | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 7664, $5);
       if (!$5) {
        SAFE_HEAP_STORE_i32_4_4($4, 7668, $3);
        SAFE_HEAP_STORE_i32_1_1($4, 7597, 0);
        SAFE_HEAP_STORE_i32_4_4($4 + 7672 | 0, 0, $1);
        $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 300 | 0, 0);
        SAFE_HEAP_STORE_i32_4_4($4 + 7696 | 0, 0, $2);
        SAFE_HEAP_STORE_i32_4_4($4 + 7676 | 0, 0, $5);
        $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 224 | 0, 0);
        $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0);
        SAFE_HEAP_STORE_i32_1_1($4, 7572, SAFE_HEAP_LOAD_i32_1_U_1($4, 7573));
        SAFE_HEAP_STORE_f32_4_4($4 + 7692 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7280) - $7));
        SAFE_HEAP_STORE_f32_4_4($4 + 7688 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7276) - $6));
        SAFE_HEAP_STORE_f32_4_4($4 + 7684 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7272) - $7));
        SAFE_HEAP_STORE_f32_4_4($4 + 7680 | 0, 0, Math_fround($12 - $6));
        break label$7;
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($4, 7512) | 0) != ($1 | 0)) {
        break label$7
       }
       SAFE_HEAP_STORE_i32_4_4($4, 7664, 1);
       break label$7;
      case 0:
       if ((SAFE_HEAP_LOAD_i32_4_4($4, 7512) | 0) == ($1 | 0)) {
        if (!SAFE_HEAP_LOAD_i32_4_4($4 + 7672 | 0, 0)) {
         break label$7
        }
        SAFE_HEAP_STORE_i32_1_1($4, 7597, 0);
        SAFE_HEAP_STORE_i32_1_1($4, 7572, SAFE_HEAP_LOAD_i32_1_U_1($4, 7573));
        break label$7;
       }
       SAFE_HEAP_STORE_i32_4_4($4, 7668, $3);
       SAFE_HEAP_STORE_i32_4_4($4 + 7672 | 0, 0, $1);
       $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 300 | 0, 0);
       SAFE_HEAP_STORE_i32_4_4($4 + 7696 | 0, 0, $2);
       SAFE_HEAP_STORE_i32_4_4($4 + 7676 | 0, 0, $5);
       $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 224 | 0, 0);
       $9 = SAFE_HEAP_LOAD_f32_4_4($4, 7280);
       $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0);
       SAFE_HEAP_STORE_f32_4_4($4 + 7692 | 0, 0, Math_fround($9 - $7));
       SAFE_HEAP_STORE_f32_4_4($4 + 7688 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7276) - $6));
       SAFE_HEAP_STORE_f32_4_4($4 + 7684 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7272) - $7));
       SAFE_HEAP_STORE_f32_4_4($4 + 7680 | 0, 0, Math_fround($12 - $6));
       break label$7;
      case 1:
       break label$10;
      default:
       break label$7;
      };
     }
     if (SAFE_HEAP_LOAD_i32_4_4($4 + 7804 | 0, 0)) {
      break label$7
     }
     SAFE_HEAP_STORE_i32_4_4($4, 7804, $1);
     SAFE_HEAP_STORE_i32_4_4($4, 7800, $3);
     SAFE_HEAP_STORE_i32_1_1($4, 7597, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 300 | 0, 0);
     SAFE_HEAP_STORE_i32_4_4($4 + 7828 | 0, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($4 + 7808 | 0, 0, $5);
     $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 224 | 0, 0);
     $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0);
     SAFE_HEAP_STORE_i32_1_1($4, 7572, SAFE_HEAP_LOAD_i32_1_U_1($4, 7573));
     SAFE_HEAP_STORE_f32_4_4($4 + 7824 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7280) - $7));
     SAFE_HEAP_STORE_f32_4_4($4 + 7820 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7276) - $6));
     SAFE_HEAP_STORE_f32_4_4($4 + 7816 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 7272) - $7));
     SAFE_HEAP_STORE_f32_4_4($4 + 7812 | 0, 0, Math_fround($12 - $6));
     break label$7;
    }
    if (!(($5 & 16) >>> 4 | (SAFE_HEAP_LOAD_i32_4_4($4, 7512) | 0) != ($1 | 0)) | $2 & 12) {
     break label$7
    }
    $5 = (SAFE_HEAP_LOAD_i32_4_4($4, 7508) | 0) == ($3 | 0);
    $2 = $5 ? $4 + 7668 | 0 : $4 + 7756 | 0;
    if (ImGui__NavScoreItem_28ImGuiNavItemData__29($2)) {
     $13 = ($5 ? 7668 : 7756) + $4 | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $10 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
     SAFE_HEAP_STORE_i32_4_4($13, 0, $10);
     SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($5, 7240));
     SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($10 + 300 | 0, 0));
     SAFE_HEAP_STORE_i32_4_4($2, 28, SAFE_HEAP_LOAD_i32_4_4($5 + 7244 | 0, 0));
     $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 7268 | 0, 0);
     $15 = SAFE_HEAP_LOAD_f32_4_4($5 + 7272 | 0, 0);
     $16 = SAFE_HEAP_LOAD_f32_4_4($5 + 7276 | 0, 0);
     $6 = SAFE_HEAP_LOAD_f32_4_4($10 + 224 | 0, 0);
     $17 = SAFE_HEAP_LOAD_f32_4_4($5 + 7280 | 0, 0);
     $9 = SAFE_HEAP_LOAD_f32_4_4($10 + 228 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($2 + 24 | 0, 0, Math_fround($17 - $9));
     SAFE_HEAP_STORE_f32_4_4($2 + 20 | 0, 0, Math_fround($16 - $6));
     SAFE_HEAP_STORE_f32_4_4($2 + 16 | 0, 0, Math_fround($15 - $9));
     SAFE_HEAP_STORE_f32_4_4($2, 12, Math_fround($7 - $6));
    }
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 7600) & 32)) {
     break label$7
    }
    $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 508 | 0, 0);
    if (!($6 > $11)) {
     break label$7
    }
    $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 500 | 0, 0);
    if (!($7 < $8)) {
     break label$7
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($3, 504) > $12)) {
     break label$7
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($3, 496) < $14) | !(Math_fround(($7 > $8 ? $7 : $6 < $8 ? $6 : $8) - ($7 > $11 ? $7 : $6 < $11 ? $6 : $11)) >= Math_fround(Math_fround($8 - $11) * Math_fround(.699999988079071)))) {
     break label$7
    }
    $2 = $4 + 7712 | 0;
    if (!ImGui__NavScoreItem_28ImGuiNavItemData__29($2)) {
     break label$7
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $10 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $10);
    SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($5, 7240));
    SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($10 + 300 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($2, 28, SAFE_HEAP_LOAD_i32_4_4($5 + 7244 | 0, 0));
    $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 7268 | 0, 0);
    $15 = SAFE_HEAP_LOAD_f32_4_4($5 + 7272 | 0, 0);
    $16 = SAFE_HEAP_LOAD_f32_4_4($5 + 7276 | 0, 0);
    $6 = SAFE_HEAP_LOAD_f32_4_4($10 + 224 | 0, 0);
    $17 = SAFE_HEAP_LOAD_f32_4_4($5 + 7280 | 0, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($10 + 228 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($2 + 24 | 0, 0, Math_fround($17 - $9));
    SAFE_HEAP_STORE_f32_4_4($2 + 20 | 0, 0, Math_fround($16 - $6));
    SAFE_HEAP_STORE_f32_4_4($2 + 16 | 0, 0, Math_fround($15 - $9));
    SAFE_HEAP_STORE_f32_4_4($2, 12, Math_fround($7 - $6));
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 7512) | 0) != ($1 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($4, 7508, $3);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 292);
   SAFE_HEAP_STORE_i32_4_4($4, 7564, $2);
   $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 300 | 0, 0);
   SAFE_HEAP_STORE_i32_1_1($4, 7568, 1);
   SAFE_HEAP_STORE_i32_4_4($4, 7516, $5);
   $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 224 | 0, 0);
   $2 = $3 + ($2 << 4) | 0;
   $9 = $8;
   $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2 + 776 | 0, 0, Math_fround($9 - $8));
   SAFE_HEAP_STORE_f32_4_4($2 + 772 | 0, 0, Math_fround($14 - $6));
   SAFE_HEAP_STORE_f32_4_4($2 + 768 | 0, 0, Math_fround($11 - $8));
   SAFE_HEAP_STORE_f32_4_4($2 + 764 | 0, 0, Math_fround($12 - $6));
  }
  SAFE_HEAP_STORE_i32_4_4($4, 7220, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 500 | 0, 0);
  label$17 : {
   label$18 : {
    label$19 : {
     if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0) > $8)) {
      break label$19
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($3 + 508 | 0, 0) > SAFE_HEAP_LOAD_f32_4_4($0, 4))) {
      break label$19
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($3, 496) < SAFE_HEAP_LOAD_f32_4_4($0, 8))) {
      break label$19
     }
     if (SAFE_HEAP_LOAD_f32_4_4($3, 504) > SAFE_HEAP_LOAD_f32_4_4($0, 0)) {
      break label$18
     }
    }
    if ($1) {
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) == ($1 | 0)) {
      break label$18
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 7512) | 0) == ($1 | 0)) {
      break label$18
     }
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($2, 12196)) {
     break label$18
    }
    $1 = 1;
    break label$17;
   }
   $1 = 0;
  }
  label$21 : {
   if ($1) {
    break label$21
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($2 + 228 | 0, 0);
   $12 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $6 = SAFE_HEAP_LOAD_f32_4_4($3, 496);
   $9 = $6 <= $12 ? $12 : $6;
   $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 5516 | 0, 0);
   if (!($11 >= Math_fround($9 - $6))) {
    break label$21
   }
   $12 = SAFE_HEAP_LOAD_f32_4_4($2 + 232 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   $9 = $7 >= $8 ? $7 : $8;
   $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5520 | 0, 0);
   if (!($12 >= Math_fround($9 - $8))) {
    break label$21
   }
   $9 = $6;
   $6 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
   $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 504 | 0, 0);
   if (!($11 < Math_fround($9 + ($6 < $7 ? $6 : $7)))) {
    break label$21
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
   $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 508 | 0, 0);
   if (!($12 < Math_fround(($6 > $11 ? $11 : $6) + $8))) {
    break label$21
   }
   SAFE_HEAP_STORE_i32_4_4($4, 7248, SAFE_HEAP_LOAD_i32_4_4($4, 7248) | 1);
  }
  return $1 ^ 1;
 }
 
 function ImGui__NavScoreItem_28ImGuiNavItemData__29($0) {
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0);
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $15 = SAFE_HEAP_LOAD_i32_4_4($3, 7564);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  if (($15 | 0) != (SAFE_HEAP_LOAD_i32_4_4($4 + 292 | 0, 0) | 0)) {
   return 0
  }
  SAFE_HEAP_STORE_i32_4_4($3, 7656, SAFE_HEAP_LOAD_i32_4_4($3, 7656) + 1 | 0);
  $16 = SAFE_HEAP_LOAD_f32_4_4($3 + 7636 | 0, 0);
  $13 = SAFE_HEAP_LOAD_f32_4_4($3 + 7632 | 0, 0);
  $11 = SAFE_HEAP_LOAD_f32_4_4($3 + 7628 | 0, 0);
  $1 = SAFE_HEAP_LOAD_f32_4_4($3 + 7280 | 0, 0);
  $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 7276 | 0, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 7272 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 7268 | 0, 0);
  $14 = SAFE_HEAP_LOAD_f32_4_4($3, 7624);
  $9 = SAFE_HEAP_LOAD_i32_4_4($4, 728);
  $17 = SAFE_HEAP_LOAD_i32_4_4($3, 7508);
  label$2 : {
   label$3 : {
    if (($17 | 0) != ($9 | 0)) {
     break label$3
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($4 + 508 | 0, 0) > $7)) {
     return 0
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($4 + 500 | 0, 0) < $1)) {
     return 0
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($4, 504) > $6)) {
     return 0
    }
    $9 = 0;
    if (!(SAFE_HEAP_LOAD_f32_4_4($4, 496) < $8)) {
     break label$2
    }
    $2 = SAFE_HEAP_LOAD_f32_4_4($4 + 500 | 0, 0);
    $9 = SAFE_HEAP_LOAD_i64_8_4($4, 504);
    $5 = (wasm2js_scratch_store_i32(2, i64toi32_i32$HIGH_BITS), wasm2js_scratch_load_f32());
    $1 = $1 < $2 ? $2 : $1 > $5 ? $5 : $1;
    $10 = SAFE_HEAP_LOAD_f32_4_4($4, 496);
    $12 = (wasm2js_scratch_store_i32(2, $9), wasm2js_scratch_load_f32());
    $8 = $8 < $10 ? $10 : $8 > $12 ? $12 : $8;
    $7 = $2 > $7 ? $2 : $5 < $7 ? $5 : $7;
    $6 = $6 < $10 ? $10 : $6 > $12 ? $12 : $6;
   }
   $2 = $8;
   $8 = $1;
   label$8 : {
    if (SAFE_HEAP_LOAD_i32_4_4($3, 7620) >>> 0 <= 1) {
     $1 = SAFE_HEAP_LOAD_f32_4_4($4 + 500 | 0, 0);
     $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 508 | 0, 0);
     $8 = $1 > $8 ? $1 : $5 < $8 ? $5 : $8;
     $7 = $1 > $7 ? $1 : $5 < $7 ? $5 : $7;
     break label$8;
    }
    $1 = SAFE_HEAP_LOAD_f32_4_4($4, 496);
    $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 504 | 0, 0);
    $2 = $1 > $2 ? $1 : $2 > $5 ? $5 : $2;
    $6 = $1 > $6 ? $1 : $5 < $6 ? $5 : $6;
   }
   $5 = $6;
   $10 = $2;
   label$10 : {
    if ($2 < $14) {
     $2 = Math_fround($10 - $14);
     break label$10;
    }
    $2 = Math_fround(0.0);
    if (!($5 > $13)) {
     break label$10
    }
    $2 = Math_fround($5 - $13);
   }
   $1 = Math_fround($8 - $7);
   $6 = Math_fround(Math_fround($1 * Math_fround(.800000011920929)) + $7);
   $12 = Math_fround($16 - $11);
   $18 = Math_fround(Math_fround($12 * Math_fround(.20000000298023224)) + $11);
   label$12 : {
    if ($6 < $18) {
     $6 = Math_fround($6 - $18);
     break label$12;
    }
    $12 = Math_fround(Math_fround($12 * Math_fround(.800000011920929)) + $11);
    $1 = Math_fround(Math_fround($1 * Math_fround(.20000000298023224)) + $7);
    $6 = Math_fround(0.0);
    if (!($12 < $1)) {
     break label$12
    }
    $6 = Math_fround($1 - $12);
   }
   if (!($2 == Math_fround(0.0) | $6 == Math_fround(0.0))) {
    $2 = Math_fround(Math_fround($2 / Math_fround(1.0e3)) + ($2 > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)))
   }
   $1 = Math_fround(Math_fround($8 + $7) - Math_fround($11 + $16));
   $11 = Math_fround(Math_abs($1));
   $7 = Math_fround(Math_fround($10 + $5) - Math_fround($14 + $13));
   $13 = Math_fround(Math_abs($7));
   $5 = Math_fround($11 + $13);
   $8 = $2;
   $14 = Math_fround(Math_abs($6));
   $2 = Math_fround(Math_abs($2));
   $10 = Math_fround($14 + $2);
   label$17 : {
    if (!($6 == Math_fround(0.0) & $8 == Math_fround(0.0))) {
     $9 = $2 > $14 ? $8 > Math_fround(0.0) : $6 > Math_fround(0.0) ? 3 : 2;
     $7 = $8;
     $1 = $6;
     $2 = $10;
     break label$17;
    }
    if (!($7 == Math_fround(0.0) & $1 == Math_fround(0.0))) {
     $9 = $11 < $13 ? $7 > Math_fround(0.0) : $1 > Math_fround(0.0) ? 3 : 2;
     $2 = $5;
     break label$17;
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($3, 7240) >>> 0 >= SAFE_HEAP_LOAD_i32_4_4($3, 7512) >>> 0;
    $7 = Math_fround(0.0);
    $1 = Math_fround(0.0);
    $2 = Math_fround(0.0);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 7612);
   $4 = 0;
   label$22 : {
    if (($9 | 0) != ($3 | 0)) {
     break label$22
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($0, 32);
    if ($10 < $11) {
     SAFE_HEAP_STORE_f32_4_4($0, 36, $5);
     SAFE_HEAP_STORE_f32_4_4($0, 32, $10);
     return 1;
    }
    $4 = 0;
    if ($10 != $11) {
     break label$22
    }
    $10 = SAFE_HEAP_LOAD_f32_4_4($0, 36);
    if ($5 < $10) {
     SAFE_HEAP_STORE_f32_4_4($0, 36, $5);
     $4 = 1;
     break label$22;
    }
    $4 = 0;
    if ($5 != $10) {
     break label$22
    }
    $4 = 0;
    if (!((($3 & -2) == 2 ? $6 : $8) < Math_fround(0.0))) {
     break label$22
    }
    $4 = 1;
   }
   $9 = $4;
   if (SAFE_HEAP_LOAD_f32_4_4($0, 32) != Math_fround(3402823466385288598117041.0e14)) {
    return $9
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4($0, 40) > $2)) {
    return $9
   }
   if (($15 | 0) != 1) {
    return $9
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($17 + 11 | 0, 0) & 16) {
    return $9
   }
   label$32 : {
    if (!$3 & $7 < Math_fround(0.0) | ($3 | 0) == 1 & $7 > Math_fround(0.0)) {
     break label$32
    }
    if (($3 | 0) == 2 & $1 < Math_fround(0.0)) {
     break label$32
    }
    if (($3 | 0) != 3) {
     return $9
    }
    if (!($1 > Math_fround(0.0))) {
     break label$2
    }
   }
   SAFE_HEAP_STORE_f32_4_4($0, 40, $2);
   $9 = 1;
  }
  return $9;
 }
 
 function ImGui__BeginChildFrame_28unsigned_20int_2c_20ImVec2_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(3, $3 + 5728 | 0);
  ImGui__PushStyleVar_28int_2c_20float_29(7, SAFE_HEAP_LOAD_f32_4_4($3 + 5484 | 0, 0));
  ImGui__PushStyleVar_28int_2c_20float_29(8, SAFE_HEAP_LOAD_f32_4_4($3 + 5488 | 0, 0));
  ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(2, $3 + 5476 | 0);
  $6 = ImGui__BeginChildEx_28char_20const__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20bool_2c_20int_29(0, $0, $1, 1, $2 | 65540);
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $7 = $3 + 5416 | 0;
  $8 = SAFE_HEAP_LOAD_i32_4_4($3 + 7416 | 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7408);
  $1 = 3;
  while (1) {
   $0 = $1;
   $2 = $2 - 1 | 0;
   $1 = Math_imul($2, 12) + $8 | 0;
   $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $4 = Math_imul($5, 12);
   label$2 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($4 + 20912 | 0, 0) | 0) != 8) {
     break label$2
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($4 + 20920 | 0, 0) + $7 | 0;
    if (8206235 >>> $5 & 1) {
     SAFE_HEAP_STORE_f32_4_4($4, 0, SAFE_HEAP_LOAD_f32_4_4($1, 4));
     break label$2;
    }
    if (!(25348196 >>> $5 & 1)) {
     break label$2
    }
    SAFE_HEAP_STORE_f32_4_4($4, 0, SAFE_HEAP_LOAD_f32_4_4($1, 4));
    SAFE_HEAP_STORE_f32_4_4($4, 4, SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0));
   }
   SAFE_HEAP_STORE_i32_4_4($3, 7408, $2);
   $1 = $0 - 1 | 0;
   if ($0 >>> 0 > 1) {
    continue
   }
   break;
  };
  $0 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($3, 7396), 20) + SAFE_HEAP_LOAD_i32_4_4($3 + 7404 | 0, 0) | 0) - 20 | 0;
  $1 = (SAFE_HEAP_LOAD_i32_4_4($0, 0) << 4) + $3 | 0;
  SAFE_HEAP_STORE_i64_8_4($1 + 5624 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 12 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($1 + 5616 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 4), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i32_4_4($3, 7396, SAFE_HEAP_LOAD_i32_4_4($3, 7396) - 1 | 0);
  return $6;
 }
 
 function ImGui__EndChildFrame_28_29() {
  ImGui__EndChild_28_29();
 }
 
 function ImGui__FindWindowByName_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $1 = $0;
  $0 = -1;
  while (1) {
   $3 = $1;
   $1 = $1 + 1 | 0;
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
   if ($2) {
    label$4 : {
     if (($2 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 35) {
      break label$4
     }
     $0 = (SAFE_HEAP_LOAD_i32_1_U_1($3, 2) | 0) == 35 ? -1 : $0;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4((($2 ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
   }
   if ($2) {
    continue
   }
   break;
  };
  $5 = $0 ^ -1;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 7064 | 0, 0);
  $1 = $3;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7056);
  if ($2) {
   $0 = $2;
   while (1) {
    $4 = $0 >>> 1 | 0;
    $6 = ($4 << 3) + $1 | 0;
    $7 = SAFE_HEAP_LOAD_i32_4_4($6, 0) >>> 0 < $5 >>> 0;
    $1 = $7 ? $6 + 8 | 0 : $1;
    $0 = $7 ? $0 + ($4 ^ -1) | 0 : $4;
    if ($0) {
     continue
    }
    break;
   };
  }
  $0 = $1;
  if (($0 | 0) == (($2 << 3) + $3 | 0)) {
   return 0
  }
  $1 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($5 | 0)) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4)
  }
  return $1;
 }
 
 function ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_f32$2 = Math_fround(0), wasm2js_f32$3 = Math_fround(0), wasm2js_i32$1 = 0;
  $9 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  $15 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
  $16 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
  $8 = $4 + 12 | 0;
  $7 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
  $11 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
  $17 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  $12 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
  if (($6 | 0) == 1) {
   $13 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
   $18 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   $14 = SAFE_HEAP_LOAD_i32_4_4($5 + 12 | 0, 0);
   $19 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 4) - $11);
   $20 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 8) - $9);
   $23 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   $2 = ($23 | 0) != -1 ? -1 : 0;
   while (1) {
    $8 = SAFE_HEAP_LOAD_i32_4_4(($2 | 0) != -1 ? ($2 << 2) + 20752 | 0 : $3, 0);
    label$3 : {
     if (($8 | 0) == ($23 | 0) & ($2 | 0) != -1) {
      break label$3
     }
     SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
     label$5 : {
      label$6 : {
       switch ($8 | 0) {
       case 3:
        SAFE_HEAP_STORE_i32_4_4($0, 4, $14);
        SAFE_HEAP_STORE_i32_4_4($0, 0, $18);
        break label$5;
       case 1:
        SAFE_HEAP_STORE_f32_4_4($0, 4, $19);
        SAFE_HEAP_STORE_i32_4_4($0, 0, $18);
        break label$5;
       case 0:
        SAFE_HEAP_STORE_i32_4_4($0, 4, $14);
        SAFE_HEAP_STORE_f32_4_4($0, 0, $20);
        break label$5;
       case 2:
        break label$6;
       default:
        break label$5;
       };
      }
      SAFE_HEAP_STORE_f32_4_4($0, 4, $19);
      SAFE_HEAP_STORE_f32_4_4($0, 0, $20);
     }
     $21 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
     if (!($21 >= $10)) {
      break label$3
     }
     $22 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
     if (!($22 >= $12) | !(Math_fround($9 + $21) <= $15) | !($13 >= Math_fround($11 + $22))) {
      break label$3
     }
     SAFE_HEAP_STORE_i32_4_4($3, 0, $8);
     return;
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) != 4) {
     continue
    }
    break;
   };
  }
  label$10 : {
   switch ($6 | 0) {
   case 0:
   case 2:
    $13 = Math_fround($15 - $9);
    $13 = $10 > $16 ? $10 : $13 < $16 ? $13 : $16;
    $7 = Math_fround($7 - $11);
    $7 = $12 > $17 ? $12 : $7 < $17 ? $7 : $17;
    $18 = $5 + 8 | 0;
    $19 = SAFE_HEAP_LOAD_f32_4_4($4 + 12 | 0, 0);
    $20 = SAFE_HEAP_LOAD_f32_4_4($5, 4);
    $21 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
    $22 = SAFE_HEAP_LOAD_f32_4_4($5, 8);
    $24 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
    $25 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
    $2 = (SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) != -1 ? -1 : 0;
    while (1) {
     $14 = ($2 | 0) == -1;
     $8 = SAFE_HEAP_LOAD_i32_4_4($14 ? $3 : ($2 << 2) + 20768 | 0, 0);
     label$13 : {
      if (!$14) {
       if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) == ($8 | 0)) {
        break label$13
       }
      }
      if ($8 >>> 0 < 2 & Math_fround(($8 ? $24 : $25) - (($8 | 0) == 1 ? $22 : $21)) < $9) {
       break label$13
      }
      if (($8 & -2) == 2 & $11 > Math_fround((($8 | 0) == 2 ? $20 : $19) - SAFE_HEAP_LOAD_f32_4_4(($8 | 0) == 3 ? $18 : $4, 4))) {
       break label$13
      }
      SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
      $9 = (wasm2js_f32$0 = (wasm2js_f32$2 = SAFE_HEAP_LOAD_f32_4_4($5, 8), wasm2js_f32$3 = $13, wasm2js_i32$1 = ($8 | 0) == 1, wasm2js_i32$1 ? wasm2js_f32$2 : wasm2js_f32$3), wasm2js_f32$1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 0) - $9), wasm2js_i32$0 = $8, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
      SAFE_HEAP_STORE_f32_4_4($0, 0, $9);
      label$17 : {
       if (($8 | 0) == 2) {
        $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 4) - $11);
        break label$17;
       }
       if (($8 | 0) != 3) {
        break label$17
       }
       $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 12 | 0, 0);
      }
      SAFE_HEAP_STORE_f32_4_4($0, 4, $7 >= $12 ? $7 : $12);
      SAFE_HEAP_STORE_f32_4_4($0, 0, $9 >= $10 ? $9 : $10);
      SAFE_HEAP_STORE_i32_4_4($3, 0, $8);
      return;
     }
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 4) {
      continue
     }
     break;
    };
    break;
   default:
    break label$10;
   };
  }
  SAFE_HEAP_STORE_i32_4_4($3, 0, -1);
  if (($6 | 0) == 2) {
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($17 + Math_fround(2.0)));
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($16 + Math_fround(2.0)));
   return;
  }
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  $7 = Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($0, 0));
  $7 = Math_fround(($7 < $15 ? $7 : $15) - $9);
  SAFE_HEAP_STORE_f32_4_4($0, 0, $7 >= $10 ? $7 : $10);
  $7 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($0, 4));
  $9 = SAFE_HEAP_LOAD_f32_4_4($4 + 12 | 0, 0);
  $7 = Math_fround(($7 < $9 ? $7 : $9) - $11);
  SAFE_HEAP_STORE_f32_4_4($0, 4, $7 >= $12 ? $7 : $12);
 }
 
 function ImGui__GetMainViewport_28_29() {
  return SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0);
 }
 
 function ImGui__PushFont_28ImFont__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if ($0) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 164 | 0, 0);
   if ($0) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 152 | 0, 0) + 60 | 0, 0), 0);
  }
  SAFE_HEAP_STORE_i32_4_4($1, 6464, $0);
  $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 156 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($0, 16)) * SAFE_HEAP_LOAD_f32_4_4($0, 68));
  $5 = $5 <= Math_fround(1.0) ? Math_fround(1.0) : $5;
  SAFE_HEAP_STORE_f32_4_4($1, 6472, $5);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  label$2 : {
   if (!$2) {
    $5 = Math_fround(0.0);
    break label$2;
   }
   $5 = Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($2, 572));
   $2 = SAFE_HEAP_LOAD_i32_4_4($2, 728);
   if (!$2) {
    break label$2
   }
   $5 = Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($2, 572));
  }
  SAFE_HEAP_STORE_f32_4_4($1, 6468, $5);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
  $3 = SAFE_HEAP_LOAD_i64_8_4($2, 44);
  $4 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i32_4_4($1 + 6972 | 0, 0, $2 + 88 | 0);
  SAFE_HEAP_STORE_i64_8_4($1, 6476, $3, $4);
  SAFE_HEAP_STORE_f32_4_4($1 + 6488 | 0, 0, $5);
  SAFE_HEAP_STORE_i32_4_4($1 + 6484 | 0, 0, $0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7420);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 7424 | 0, 0);
  label$5 : {
   if (($3 | 0) != ($2 | 0)) {
    break label$5
   }
   $4 = $3 + 1 | 0;
   $6 = $2;
   if ($2) {
    $3 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2 = ($3 | 0) > ($4 | 0) ? $3 : $4;
   if (($6 | 0) >= ($2 | 0)) {
    break label$5
   }
   $3 = $2 << 2;
   if ($1) {
    $4 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 7428 | 0, 0);
   if ($4) {
    __memcpy($3, $4, SAFE_HEAP_LOAD_i32_4_4($1, 7420) << 2);
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7428);
    label$10 : {
     if (!$4) {
      break label$10
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$6) {
      break label$10
     }
     $6 = $6 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7424, $2);
   SAFE_HEAP_STORE_i32_4_4($1, 7428, $3);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 7428 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 7420) << 2) | 0, 0, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 7420, SAFE_HEAP_LOAD_i32_4_4($1, 7420) + 1 | 0);
  ImDrawList__PushTextureID_28void__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7080), 580), SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 48), 4));
 }
 
 function ImGui__PopFont_28_29() {
  var $0 = 0, $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  ImDrawList__PopTextureID_28_29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 7080), 580));
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7420);
  $1 = $3 - 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 7420, $1);
  label$1 : {
   label$2 : {
    if (!$1) {
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 164 | 0, 0);
     if ($3) {
      break label$1
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0 + 152 | 0, 0) + 60 | 0, 0);
     break label$2;
    }
    $0 = (SAFE_HEAP_LOAD_i32_4_4($0 + 7428 | 0, 0) + ($3 << 2) | 0) - 8 | 0;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($0, 6464, $3);
  $2 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 156 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($3, 16)) * SAFE_HEAP_LOAD_f32_4_4($3, 68));
  $2 = $2 <= Math_fround(1.0) ? Math_fround(1.0) : $2;
  SAFE_HEAP_STORE_f32_4_4($0, 6472, $2);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  label$4 : {
   if (!$1) {
    $2 = Math_fround(0.0);
    break label$4;
   }
   $2 = Math_fround($2 * SAFE_HEAP_LOAD_f32_4_4($1, 572));
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
   if (!$1) {
    break label$4
   }
   $2 = Math_fround($2 * SAFE_HEAP_LOAD_f32_4_4($1, 572));
  }
  SAFE_HEAP_STORE_f32_4_4($0, 6468, $2);
  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 48);
  $4 = SAFE_HEAP_LOAD_i64_8_4($1, 44);
  $5 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i32_4_4($0 + 6972 | 0, 0, $1 + 88 | 0);
  SAFE_HEAP_STORE_i64_8_4($0, 6476, $4, $5);
  SAFE_HEAP_STORE_f32_4_4($0 + 6488 | 0, 0, $2);
  SAFE_HEAP_STORE_i32_4_4($0 + 6484 | 0, 0, $3);
 }
 
 function ImGui__PushItemFlag_28int_2c_20bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($2, 7216);
  $5 = $1 ? $5 | $0 : $5 & ($0 ^ -1);
  SAFE_HEAP_STORE_i32_4_4($2, 7216, $5);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7444);
  $0 = SAFE_HEAP_LOAD_i32_4_4($2 + 7448 | 0, 0);
  label$1 : {
   if (($1 | 0) != ($0 | 0)) {
    break label$1
   }
   $3 = $1 + 1 | 0;
   $4 = $0;
   if ($0) {
    $1 = $0 + (($0 | 0) / 2 | 0) | 0
   } else {
    $1 = 8
   }
   $0 = ($1 | 0) > ($3 | 0) ? $1 : $3;
   if (($4 | 0) >= ($0 | 0)) {
    break label$1
   }
   $1 = $0 << 2;
   if ($2) {
    $3 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $1 = (((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7452);
   if ($3) {
    __memcpy($1, $3, SAFE_HEAP_LOAD_i32_4_4($2, 7444) << 2);
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7452);
    label$6 : {
     if (!$3) {
      break label$6
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$6
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7448, $0);
   SAFE_HEAP_STORE_i32_4_4($2, 7452, $1);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 7452) + (SAFE_HEAP_LOAD_i32_4_4($2, 7444) << 2) | 0, 0, $5);
  SAFE_HEAP_STORE_i32_4_4($2, 7444, SAFE_HEAP_LOAD_i32_4_4($2, 7444) + 1 | 0);
 }
 
 function ImGui__PopItemFlag_28_29() {
  var $0 = 0, $1 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7444);
  SAFE_HEAP_STORE_i32_4_4($0, 7444, $1 - 1 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 7216, SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 7452 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0));
 }
 
 function ImGui__BeginDisabled_28bool_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7216);
  $3 = $2 & 4;
  if (!($3 | !$0)) {
   $5 = SAFE_HEAP_LOAD_f32_4_4($1, 5416);
   SAFE_HEAP_STORE_f32_4_4($1, 12072, $5);
   SAFE_HEAP_STORE_f32_4_4($1, 5416, Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($1 + 5420 | 0, 0)));
  }
  if ($3 | $0) {
   SAFE_HEAP_STORE_i32_4_4($1, 7216, $2 | 4)
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7444);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 7448 | 0, 0);
  label$4 : {
   if (($2 | 0) != ($0 | 0)) {
    break label$4
   }
   $3 = $2 + 1 | 0;
   $4 = $0;
   if ($0) {
    $2 = $0 + (($0 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $0 = ($2 | 0) > ($3 | 0) ? $2 : $3;
   if (($4 | 0) >= ($0 | 0)) {
    break label$4
   }
   $2 = $0 << 2;
   if ($1) {
    $3 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $2 = (((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 7452 | 0, 0);
   if ($3) {
    __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($1, 7444) << 2);
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7452);
    label$9 : {
     if (!$3) {
      break label$9
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$9
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7448, $0);
   SAFE_HEAP_STORE_i32_4_4($1, 7452, $2);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 7452 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 7444) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 7216));
  SAFE_HEAP_STORE_i32_4_4($1, 7444, SAFE_HEAP_LOAD_i32_4_4($1, 7444) + 1 | 0);
  SAFE_HEAP_STORE_i32_2_2($1, 12076, SAFE_HEAP_LOAD_i32_2_U_2($1, 12076) + 1 | 0);
 }
 
 function ImGui__EndDisabled_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_2_2($0, 12076, SAFE_HEAP_LOAD_i32_2_U_2($0, 12076) - 1 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7444);
  SAFE_HEAP_STORE_i32_4_4($0, 7444, $1 - 1 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7216);
  $1 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 7452 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 7216, $1);
  if (!(!($2 & 4) | $1 & 4)) {
   SAFE_HEAP_STORE_f32_4_4($0, 5416, SAFE_HEAP_LOAD_f32_4_4($0, 12072))
  }
 }
 
 function ImGui__PushAllowKeyboardFocus_28bool_29($0) {
  $0 = $0 | 0;
  ImGui__PushItemFlag_28int_2c_20bool_29(1, $0 ^ 1);
 }
 
 function ImGui__PushButtonRepeat_28bool_29($0) {
  $0 = $0 | 0;
  ImGui__PushItemFlag_28int_2c_20bool_29(2, $0);
 }
 
 function ImGui__PushTextWrapPos_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 404 | 0, 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 408 | 0, 0);
  label$1 : {
   if (($4 | 0) != ($3 | 0)) {
    break label$1
   }
   $5 = $4 + 1 | 0;
   $6 = $3;
   if ($3) {
    $4 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $4 = 8
   }
   $3 = ($4 | 0) > ($5 | 0) ? $4 : $5;
   if (($6 | 0) >= ($3 | 0)) {
    break label$1
   }
   $4 = $3 << 2;
   if ($2) {
    $2 = $2 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
   }
   $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 412 | 0, 0);
   if ($2) {
    __memcpy($4, $2, SAFE_HEAP_LOAD_i32_4_4($1, 404) << 2);
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 412);
    label$6 : {
     if (!$2) {
      break label$6
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$6
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 408, $3);
   SAFE_HEAP_STORE_i32_4_4($1, 412, $4);
  }
  $3 = $1 + 388 | 0;
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 412 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 404) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
  SAFE_HEAP_STORE_f32_4_4($3, 0, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 404, SAFE_HEAP_LOAD_i32_4_4($1, 404) + 1 | 0);
 }
 
 function ImGui__PopTextWrapPos_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 412 | 0, 0);
  $1 = $0 + 404 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0;
  $4 = SAFE_HEAP_LOAD_f32_4_4($3 + ($2 << 2) | 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  SAFE_HEAP_STORE_f32_4_4($0 + 388 | 0, 0, $4);
 }
 
 function ImGui__IsWindowHovered_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 7084);
  if (!$4) {
   return 0
  }
  label$2 : {
   if ($0 & 4) {
    break label$2
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
   $7 = $0 & 8;
   if (!(!($0 & 2) | !$5)) {
    $1 = $5;
    while (1) {
     $3 = $1;
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 736);
     if (!$7) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($2, 740)
     }
     $1 = $2;
     $5 = $1;
     if (($1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   label$9 : {
    if ($0 & 1) {
     $1 = $4;
     while (1) {
      $3 = $1;
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 736);
      if (!$7) {
       $2 = SAFE_HEAP_LOAD_i32_4_4($2, 740)
      }
      $1 = $2;
      if (($3 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
     if (($2 | 0) == ($5 | 0)) {
      break label$2
     }
     $3 = $4;
     while (1) {
      $1 = ($3 | 0) == ($5 | 0);
      if ($1 | ($2 | 0) == ($3 | 0)) {
       break label$9
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($3, 728);
      $3 = $1;
      if ($1) {
       continue
      }
      break;
     };
     return 0;
    }
    $1 = ($5 | 0) == ($4 | 0);
   }
   if ($1) {
    break label$2
   }
   return 0;
  }
  label$16 : {
   $1 = SAFE_HEAP_LOAD_i32_4_4($6, 7508);
   if (!$1) {
    break label$16
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 736);
   if (!$1) {
    break label$16
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
    break label$16
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($4, 736) | 0) == ($1 | 0)) {
    break label$16
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
   if ($1 & 134217728) {
    return 0
   }
   if (!($1 & 67108864) | $0 & 32) {
    break label$16
   }
   return 0;
  }
  label$18 : {
   label$19 : {
    if ($0 & 128) {
     break label$19
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7136);
    if (!$0) {
     break label$19
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($6, 7149)) {
     break label$19
    }
    $1 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 80) | 0) != ($0 | 0)) {
     break label$18
    }
   }
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function ImGui__IsWindowFocused_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 7508);
  if (!$4) {
   return 0
  }
  $1 = 1;
  label$2 : {
   if ($0 & 4) {
    break label$2
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
   $5 = $0 & 8;
   label$3 : {
    if (!($0 & 2)) {
     $3 = $1;
     break label$3;
    }
    if (!$1) {
     $3 = $1;
     break label$3;
    }
    while (1) {
     $6 = $1;
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 736);
     if (!$5) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($2, 740)
     }
     $1 = $2;
     $3 = $1;
     if (($1 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
   }
   if ($0 & 1) {
    $1 = $4;
    while (1) {
     $0 = $1;
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 736);
     if (!$5) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($2, 740)
     }
     $1 = $2;
     if (($0 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
    if (($2 | 0) == ($3 | 0)) {
     return 1
    }
    while (1) {
     $1 = ($3 | 0) == ($4 | 0);
     if ($1) {
      return $1 | 0
     }
     if (($2 | 0) == ($4 | 0)) {
      break label$2
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($4, 728);
     $4 = $0;
     if ($0) {
      continue
     }
     break;
    };
    return 0;
   }
   $1 = ($3 | 0) == ($4 | 0);
  }
  return $1 | 0;
 }
 
 function ImGui__GetWindowWidth_28_29() {
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 20));
 }
 
 function ImGui__GetWindowHeight_28_29() {
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 24 | 0, 0));
 }
 
 function ImGui__IsWindowCollapsed_28_29() {
  return SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 141) | 0;
 }
 
 function ImGui__IsWindowAppearing_28_29() {
  return SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 144) | 0;
 }
 
 function ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($0, $1, $2) {
  var $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($3, 7300, SAFE_HEAP_LOAD_i32_4_4($3, 7300) | 1);
  SAFE_HEAP_STORE_i64_8_4($3 + 7316 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
  $0 = SAFE_HEAP_LOAD_i64_8_4($2, 0);
  $2 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i32_4_4($3 + 7304 | 0, 0, $1 >>> 0 <= 1 ? 1 : $1);
  SAFE_HEAP_STORE_i64_8_4($3 + 7324 | 0, 0, $0, $2);
 }
 
 function ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($3, 7300, SAFE_HEAP_LOAD_i32_4_4($3, 7300) | 16);
  $0 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
  $4 = i64toi32_i32$HIGH_BITS;
  $1 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
  $5 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i32_4_4($3 + 7380 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($3 + 7376 | 0, 0, $2);
  SAFE_HEAP_STORE_i64_8_4($3 + 7368 | 0, 0, $1, $5);
  SAFE_HEAP_STORE_i64_8_4($3 + 7360 | 0, 0, $0, $4);
 }
 
 function ImGui__SetNextWindowContentSize_28ImVec2_20const__29($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($1, 7300, SAFE_HEAP_LOAD_i32_4_4($1, 7300) | 4);
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $4 = $1 + 7344 | 0;
  $3 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  label$1 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $0 = ~~$3;
    break label$1;
   }
   $0 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($0 | 0));
  $1 = $1 + 7340 | 0;
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
   $0 = ~~$2
  } else {
   $0 = -2147483648
  }
  SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($0 | 0));
 }
 
 function ImGui__SetNextWindowCollapsed_28bool_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_1_1($2 + 7356 | 0, 0, $0);
  SAFE_HEAP_STORE_i32_4_4($2 + 7312 | 0, 0, $1 >>> 0 <= 1 ? 1 : $1);
  SAFE_HEAP_STORE_i32_4_4($2, 7300, SAFE_HEAP_LOAD_i32_4_4($2, 7300) | 8);
 }
 
 function ImGui__SetNextWindowFocus_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($0, 7300, SAFE_HEAP_LOAD_i32_4_4($0, 7300) | 32);
 }
 
 function ImGui__SetNextWindowBgAlpha_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_f32_4_4($1 + 7384 | 0, 0, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 7300, SAFE_HEAP_LOAD_i32_4_4($1, 7300) | 64);
 }
 
 function ImGui__GetFontSize_28_29() {
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6468));
 }
 
 function ImGui__GetFontTexUvWhitePixel_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6476), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__SetWindowFontScale_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  SAFE_HEAP_STORE_f32_4_4($1, 572, $0);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  $0 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * $0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
  if ($1) {
   $0 = Math_fround($0 * SAFE_HEAP_LOAD_f32_4_4($1, 572))
  }
  SAFE_HEAP_STORE_f32_4_4($2, 6468, $0);
  SAFE_HEAP_STORE_f32_4_4($2 + 6488 | 0, 0, $0);
 }
 
 function ImGui__SetKeyboardFocusHere_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  SAFE_HEAP_STORE_i32_4_4($1, 7508, $2);
  $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 144);
  SAFE_HEAP_STORE_i32_4_4($1 + 7740 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7752 | 0, 0, 2139095039);
  SAFE_HEAP_STORE_i32_4_4($1 + 7720 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7712, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7700 | 0, 0, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i32_4_4($1 + 7708 | 0, 0, 2139095039);
  $3 = $1 + 7672 | 0;
  SAFE_HEAP_STORE_i64_8_8($3, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7664, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7608, SAFE_HEAP_LOAD_i32_4_4($1 + 892 | 0, 0));
  $4 = $1 + 7696 | 0;
  SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
  SAFE_HEAP_STORE_i32_2_1($1, 7597, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 7600, 1552);
  SAFE_HEAP_STORE_i32_1_1($1, 7596, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 7620, ($0 | 0) < 0 ? 2 : 3);
  SAFE_HEAP_STORE_i64_8_4($1, 7612, -1, -1);
  SAFE_HEAP_STORE_i32_4_4($1, 7604, $7 ? 33 : 3);
  SAFE_HEAP_STORE_i32_4_4($1, 7756, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7744 | 0, 0, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i64_8_4($1 + 7760 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7792 | 0, 0, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i64_8_4($1 + 7784 | 0, 0, 0, 2139095039);
  SAFE_HEAP_STORE_i32_1_1($1, 7572, 1);
  if (($0 | 0) == -1) {
   SAFE_HEAP_STORE_i32_4_4($1, 7668, $2);
   SAFE_HEAP_STORE_i32_1_1($1, 7597, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($1, 7240));
   SAFE_HEAP_STORE_i32_4_4($1 + 7676 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2 + 300 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($1 + 7244 | 0, 0));
   $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 228 | 0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 7268 | 0, 0);
   $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 224 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($1 + 7680 | 0, 0, Math_fround($8 - $6));
   SAFE_HEAP_STORE_f32_4_4($1 + 7684 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 7272 | 0, 0) - $5));
   SAFE_HEAP_STORE_f32_4_4($1 + 7688 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 7276 | 0, 0) - $6));
   SAFE_HEAP_STORE_f32_4_4($1 + 7692 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 7280 | 0, 0) - $5));
   SAFE_HEAP_STORE_i32_1_1($1, 7572, SAFE_HEAP_LOAD_i32_1_U_1($1, 7573));
   return;
  }
  SAFE_HEAP_STORE_i32_4_4($1, 7660, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 7664, $0 + 1 | 0);
 }
 
 function ImGui__SetItemDefaultFocus_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  label$1 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 144)) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7508) | 0) != (SAFE_HEAP_LOAD_i32_4_4($1, 748) | 0)) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 7573)) {
    if (!SAFE_HEAP_LOAD_i32_4_4($0, 7576)) {
     break label$1
    }
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7564) | 0) != (SAFE_HEAP_LOAD_i32_4_4($1 + 292 | 0, 0) | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0, 7573, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 7576, SAFE_HEAP_LOAD_i32_4_4($0, 7240));
   $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 224 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 228 | 0, 0);
   SAFE_HEAP_STORE_i32_1_1($0, 7572, SAFE_HEAP_LOAD_i32_1_U_1($0, 7597));
   $6 = $0 + 7264 | 0;
   SAFE_HEAP_STORE_f32_4_4($0 + 7592 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 0) - $5));
   SAFE_HEAP_STORE_f32_4_4($0 + 7588 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 7260 | 0, 0) - $4));
   $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 7256 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0 + 7584 | 0, 0, Math_fround($7 - $5));
   $3 = $0 + 7252 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 7580, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 0) - $4));
   label$3 : {
    if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 508 | 0, 0) > $7)) {
     break label$3
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($6, 0) > SAFE_HEAP_LOAD_f32_4_4($1 + 500 | 0, 0))) {
     break label$3
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($3, 0) < SAFE_HEAP_LOAD_f32_4_4($1, 504))) {
     break label$3
    }
    if (SAFE_HEAP_LOAD_f32_4_4($0, 7260) > SAFE_HEAP_LOAD_f32_4_4($1, 496)) {
     break label$1
    }
   }
   ImGui__ScrollToRectEx_28ImGuiWindow__2c_20ImRect_20const__2c_20int_29($2 + 8 | 0, $1, $3, 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__ScrollToRectEx_28ImGuiWindow__2c_20ImRect_20const__2c_20int_29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0);
  $11 = __stack_pointer - 32 | 0;
  __stack_pointer = $11;
  $22 = SAFE_HEAP_LOAD_f32_4_4($1, 432);
  $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 444 | 0, 0);
  $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 440 | 0, 0);
  $23 = SAFE_HEAP_LOAD_f32_4_4($1 + 436 | 0, 0);
  $12 = $3;
  if (!($12 & 21)) {
   $12 = SAFE_HEAP_LOAD_i32_1_U_1($1, 136) | $3
  }
  $18 = Math_fround($22 + Math_fround(-1.0));
  $19 = Math_fround($5 + Math_fround(1.0));
  $20 = Math_fround($4 + Math_fround(1.0));
  $21 = Math_fround($23 + Math_fround(-1.0));
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!($12 & 42)) {
   $12 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 144) ? 32 : 2) | $12
  }
  $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  $14 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
  $9 = $5 >= $18 & $20 >= $14;
  $15 = SAFE_HEAP_LOAD_f32_4_4($2 + 12 | 0, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
  $13 = Math_fround($15 - $7);
  $16 = SAFE_HEAP_LOAD_f32_4_4($10 + 5496 | 0, 0);
  $8 = Math_fround($16 + $16);
  $17 = SAFE_HEAP_LOAD_f32_4_4($10 + 5492 | 0, 0);
  $24 = Math_fround(Math_fround($17 + $17) + Math_fround($14 - $5));
  $6 = $15 <= $19 & $7 >= $21;
  $4 = Math_fround($20 - $18);
  label$4 : {
   label$5 : {
    if (!($9 | !($12 & 1))) {
     if (!(!($5 < $18) & $4 >= $24)) {
      $5 = Math_fround($5 - $17);
      $4 = Math_fround(0.0);
      break label$5;
     }
     if (!($14 >= $20)) {
      break label$4
     }
     $5 = Math_fround($14 + $17);
     $4 = Math_fround(1.0);
     break label$5;
    }
    if (!($9 | !($12 & 4) ? $12 & 16 : 1)) {
     break label$4
    }
    if ($4 >= $24) {
     $4 = Math_fround(Math_fround(Math_fround($5 + $14) - Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 440 | 0, 0) - $22)) * Math_fround(.5));
     label$12 : {
      if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
       $9 = ~~$4;
       break label$12;
      }
      $9 = -2147483648;
     }
     $5 = Math_fround($9 | 0);
    }
    $4 = Math_fround(0.0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 120, 0);
   SAFE_HEAP_STORE_f32_4_4($1, 112, $4);
   $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 88) + Math_fround($5 - SAFE_HEAP_LOAD_f32_4_4($1, 12)));
   label$14 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $9 = ~~$4;
     break label$14;
    }
    $9 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($1, 104, Math_fround($9 | 0));
  }
  $5 = Math_fround($8 + $13);
  $4 = Math_fround($19 - $21);
  label$16 : {
   label$17 : {
    if (!($6 | !($12 & 2))) {
     if (!(!($7 < $21) & $4 >= $5)) {
      $8 = Math_fround($7 - $16);
      $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
      $4 = Math_fround(0.0);
      $9 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
      if (!($9 & 1)) {
       $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
       $6 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
       if ($6) {
        $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
       }
       $5 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
       $4 = Math_fround(Math_fround($5 + $5) + $4);
      }
      $5 = $4;
      $4 = Math_fround(0.0);
      $13 = Math_fround($8 - $7);
      if ($9 & 1024) {
       $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
       $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 312 | 0, 0);
       $6 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
       if ($6) {
        $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
       }
       $7 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
       $4 = Math_fround(Math_fround($7 + $7) + Math_fround($8 + $4));
      }
      $4 = Math_fround($13 - Math_fround($5 + $4));
      $5 = Math_fround(0.0);
      break label$17;
     }
     if (!($15 >= $19)) {
      break label$16
     }
     $8 = Math_fround($15 + $16);
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
     $4 = Math_fround(0.0);
     $9 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
     if (!($9 & 1)) {
      $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
      $6 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
      if ($6) {
       $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
      $4 = Math_fround(Math_fround($5 + $5) + $4);
     }
     $5 = $4;
     $4 = Math_fround(0.0);
     $13 = Math_fround($8 - $7);
     if ($9 & 1024) {
      $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
      $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 312 | 0, 0);
      $6 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
      if ($6) {
       $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
      }
      $7 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
      $4 = Math_fround(Math_fround($7 + $7) + Math_fround($8 + $4));
     }
     $4 = Math_fround($13 - Math_fround($5 + $4));
     $5 = Math_fround(1.0);
     break label$17;
    }
    if (!($6 | !($12 & 8) ? $12 & 32 : 1)) {
     break label$16
    }
    if ($4 >= $5) {
     $4 = Math_fround(Math_fround(Math_fround($7 + $15) - Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 444 | 0, 0) - $23)) * Math_fround(.5));
     label$36 : {
      if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
       $6 = ~~$4;
       break label$36;
      }
      $6 = -2147483648;
     }
     $7 = Math_fround($6 | 0);
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
    $4 = Math_fround(0.0);
    $9 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    if (!($9 & 1)) {
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
     $6 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
     if ($6) {
      $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
     $4 = Math_fround(Math_fround($5 + $5) + $4);
    }
    $5 = $4;
    $4 = Math_fround(0.0);
    $13 = Math_fround($7 - $8);
    if ($9 & 1024) {
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
     $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 312 | 0, 0);
     $6 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
     if ($6) {
      $4 = Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
     }
     $7 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
     $4 = Math_fround(Math_fround($7 + $7) + Math_fround($8 + $4));
    }
    $4 = Math_fround($13 - Math_fround($5 + $4));
    $5 = Math_fround(0.0);
   }
   SAFE_HEAP_STORE_i32_4_4($1 + 124 | 0, 0, 0);
   SAFE_HEAP_STORE_f32_4_4($1 + 116 | 0, 0, $5);
   $10 = $1 + 108 | 0;
   $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 92 | 0, 0) + $4);
   label$44 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $6 = ~~$4;
     break label$44;
    }
    $6 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($10, 0, Math_fround($6 | 0));
  }
  CalcNextScrollFromScrollTargetAndClamp_28ImGuiWindow__29($11 + 24 | 0, $1);
  $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 92 | 0, 0);
  $4 = SAFE_HEAP_LOAD_f32_4_4($11, 28);
  $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 24) - SAFE_HEAP_LOAD_f32_4_4($1, 88));
  SAFE_HEAP_STORE_f32_4_4($0, 0, $13);
  $8 = Math_fround($4 - $5);
  SAFE_HEAP_STORE_f32_4_4($0, 4, $8);
  label$46 : {
   if ($12 & 64) {
    break label$46
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 1)) {
    break label$46
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
   $7 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
   $4 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
   SAFE_HEAP_STORE_f32_4_4($11 + 12 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 12 | 0, 0) - $8));
   SAFE_HEAP_STORE_f32_4_4($11, 8, Math_fround($4 - $13));
   SAFE_HEAP_STORE_f32_4_4($11, 4, Math_fround($5 - $8));
   SAFE_HEAP_STORE_f32_4_4($11, 0, Math_fround($7 - $13));
   $2 = $1;
   $1 = $3 & 20 ? $3 & -22 | 1 : $3;
   ImGui__ScrollToRectEx_28ImGuiWindow__2c_20ImRect_20const__2c_20int_29($11 + 16 | 0, $2, $11, $1 & 40 ? $1 & -43 | 2 : $1);
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($11, 16)));
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($11, 20)));
  }
  __stack_pointer = $11 + 32 | 0;
 }
 
 function ImGui__PushID_28void_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $0);
  $4 = 4;
  $2 = $6 + 12 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  while (1) {
   $5 = $2;
   $2 = $2 + 1 | 0;
   $5 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
   $1 = $5;
   $4 = $4 - 1 | 0;
   if ($4) {
    continue
   }
   break;
  };
  $5 = $5 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 7112) | 0) == ($5 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($5, 12, $0)
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 196);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 200 | 0, 0);
  label$3 : {
   if (($2 | 0) != ($0 | 0)) {
    break label$3
   }
   $1 = $2 + 1 | 0;
   $4 = $0;
   if ($0) {
    $2 = $0 + (($0 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $0 = ($1 | 0) < ($2 | 0) ? $2 : $1;
   if (($4 | 0) >= ($0 | 0)) {
    break label$3
   }
   $2 = $0 << 2;
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
   }
   $2 = (((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0);
   if ($1) {
    __memcpy($2, $1, SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2);
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 204);
    label$8 : {
     if (!$1) {
      break label$8
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$8
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 200, $0);
   SAFE_HEAP_STORE_i32_4_4($3, 204, $2);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) | 0, 0, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 196, SAFE_HEAP_LOAD_i32_4_4($3, 196) + 1 | 0);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function ImGui__PushID_28int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $0);
  $4 = 4;
  $2 = $6 + 12 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  while (1) {
   $5 = $2;
   $2 = $2 + 1 | 0;
   $5 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
   $1 = $5;
   $4 = $4 - 1 | 0;
   if ($4) {
    continue
   }
   break;
  };
  $5 = $5 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 7112) | 0) == ($5 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($5, 4, $0)
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 196);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 200 | 0, 0);
  label$3 : {
   if (($2 | 0) != ($0 | 0)) {
    break label$3
   }
   $1 = $2 + 1 | 0;
   $4 = $0;
   if ($0) {
    $2 = $0 + (($0 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $0 = ($1 | 0) < ($2 | 0) ? $2 : $1;
   if (($4 | 0) >= ($0 | 0)) {
    break label$3
   }
   $2 = $0 << 2;
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
   }
   $2 = (((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0);
   if ($1) {
    __memcpy($2, $1, SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2);
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 204);
    label$8 : {
     if (!$1) {
      break label$8
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$4) {
      break label$8
     }
     $4 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 200, $0);
   SAFE_HEAP_STORE_i32_4_4($3, 204, $2);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) | 0, 0, $5);
  SAFE_HEAP_STORE_i32_4_4($3, 196, SAFE_HEAP_LOAD_i32_4_4($3, 196) + 1 | 0);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function ImGui__PushOverrideID_28unsigned_20int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7112) | 0) == ($0 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, 13, 0)
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 196);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 200 | 0, 0);
  label$2 : {
   if (($4 | 0) != ($2 | 0)) {
    break label$2
   }
   $1 = $4 + 1 | 0;
   $5 = $2;
   if ($2) {
    $4 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $4 = 8
   }
   $2 = ($1 | 0) < ($4 | 0) ? $4 : $1;
   if (($5 | 0) >= ($2 | 0)) {
    break label$2
   }
   $4 = $2 << 2;
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($1) {
    $1 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
   }
   $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0);
   if ($1) {
    __memcpy($4, $1, SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2);
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 204);
    label$7 : {
     if (!$1) {
      break label$7
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$7
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 200, $2);
   SAFE_HEAP_STORE_i32_4_4($3, 204, $4);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) | 0, 0, $0);
  SAFE_HEAP_STORE_i32_4_4($3, 196, SAFE_HEAP_LOAD_i32_4_4($3, 196) + 1 | 0);
 }
 
 function ImGui__GetIDWithSeed_28char_20const__2c_20char_20const__2c_20unsigned_20int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = 14998;
  $3 = $0 ^ -1;
  $0 = $3;
  while (1) {
   $4 = $1;
   $1 = $1 + 1 | 0;
   $2 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   if ($2) {
    label$11 : {
     if (($2 | 0) != 35) {
      break label$11
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 35) {
      break label$11
     }
     $0 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) == 35 ? $3 : $0;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4((($2 ^ $0 & 255) << 2) + 19360 | 0, 0) ^ $0 >>> 8;
   }
   if ($2) {
    continue
   }
   break;
  };
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = $0 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($1, 7140, $0)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 7196) | 0) == ($0 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($1, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 7112) | 0) == ($0 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, 11, 14998)
  }
  return $0;
 }
 
 function ImGui__PopID_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_4_4($0, 196, SAFE_HEAP_LOAD_i32_4_4($0, 196) - 1 | 0);
 }
 
 function ImGui__GetID_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = $0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  $6 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($1, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($1 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $1 = $6;
  while (1) {
   $5 = $4;
   $4 = $5 + 1 | 0;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
   if ($3) {
    label$4 : {
     if (($3 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 35) {
      break label$4
     }
     $1 = (SAFE_HEAP_LOAD_i32_1_U_1($5, 2) | 0) == 35 ? $6 : $1;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4((($3 ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $1 = $1 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($2, 7140, $1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7196) | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($2, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7112) | 0) == ($1 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($1, 11, $0)
  }
  return $1;
 }
 
 function ImGui__IsRectVisible_28ImVec2_20const__2c_20ImVec2_20const__29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0;
  $3 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  if (!($3 < SAFE_HEAP_LOAD_f32_4_4($2 + 508 | 0, 0))) {
   return 0
  }
  if (!(SAFE_HEAP_LOAD_f32_4_4($1, 4) > SAFE_HEAP_LOAD_f32_4_4($2 + 500 | 0, 0))) {
   return 0
  }
  if (SAFE_HEAP_LOAD_f32_4_4($0, 0) < SAFE_HEAP_LOAD_f32_4_4($2, 504)) {
   $4 = SAFE_HEAP_LOAD_f32_4_4($1, 0) > SAFE_HEAP_LOAD_f32_4_4($2, 496)
  }
  return $4;
 }
 
 function ImGui__DebugCheckVersionAndDataLayout_28char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6) {
  return !strcmp($0, 16215) & (($1 | 0) == 5408 & ($2 | 0) == 1048 & ($3 | 0) == 8 & ($4 | 0) == 16 & ($5 | 0) == 20 & ($6 | 0) == 2);
 }
 
 function ImGui__EndGroup_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $10 = SAFE_HEAP_LOAD_i32_4_4($1 + 7464 | 0, 0);
  $11 = SAFE_HEAP_LOAD_i32_4_4($1, 7456) - 1 | 0;
  $0 = $10 + Math_imul($11, 48) | 0;
  $7 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  $4 = SAFE_HEAP_LOAD_i64_8_4($0, 4);
  $8 = i64toi32_i32$HIGH_BITS;
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  $12 = $2 + 232 | 0;
  $5 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
  $13 = $2 + 236 | 0;
  $6 = SAFE_HEAP_LOAD_f32_4_4($13, 0);
  $9 = SAFE_HEAP_LOAD_f32_4_4($0 + 8 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($3 + 28 | 0, 0, $6 >= $9 ? $6 : $9);
  SAFE_HEAP_STORE_i64_8_8($3, 16, $4, $8);
  SAFE_HEAP_STORE_f32_4_4($3, 24, $5 >= $7 ? $5 : $7);
  SAFE_HEAP_STORE_i64_8_4($2, 208, $4, $8);
  $7 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
  $9 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($13, 0, $6 <= $9 ? $9 : $6);
  SAFE_HEAP_STORE_f32_4_4($12, 0, $5 <= $7 ? $7 : $5);
  SAFE_HEAP_STORE_i32_4_4($2 + 272 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 20));
  SAFE_HEAP_STORE_i32_4_4($2 + 280 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 24));
  SAFE_HEAP_STORE_i64_8_4($2 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 28), i64toi32_i32$HIGH_BITS);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0, 36);
  SAFE_HEAP_STORE_f32_4_4($2 + 264 | 0, 0, $5);
  if (SAFE_HEAP_LOAD_i32_1_U_1($1, 12196)) {
   SAFE_HEAP_STORE_i32_4_4($1, 12228, -8388609)
  }
  label$2 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 46)) {
    break label$2
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 268 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2, 264, $5 <= $6 ? $6 : $5);
   SAFE_HEAP_STORE_f32_4_4($3, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 28 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3, 20)));
   SAFE_HEAP_STORE_f32_4_4($3, 8, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 24) - SAFE_HEAP_LOAD_f32_4_4($3, 16)));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($3 + 8 | 0, Math_fround(-1.0));
   ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 16 | 0, 0, 0, 1);
   $8 = Math_imul($11, 48) + $10 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($8, 40);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7136);
   $2 = 0;
   label$3 : {
    if (($4 | 0) == ($0 | 0)) {
     break label$3
    }
    $2 = (SAFE_HEAP_LOAD_i32_4_4($1, 7140) | 0) == ($0 | 0) & ($0 | 0) != 0;
   }
   $4 = 0;
   if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 44)) {
    $4 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 7200) | 0) != 0
   }
   label$5 : {
    if (!$2) {
     if (!$4) {
      break label$5
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7196);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 7240, $0);
   }
   SAFE_HEAP_STORE_i64_8_4($1 + 7252 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($3, 16), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1 + 7260 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($3 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
   label$7 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1(Math_imul($11, 48) + $10 | 0, 45)) {
     break label$7
    }
    if (!SAFE_HEAP_LOAD_i32_4_4($1, 7116)) {
     break label$7
    }
    $0 = $1 + 7248 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) | 128);
   }
   label$8 : {
    if (!$2) {
     break label$8
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7153)) {
     break label$8
    }
    $0 = $1 + 7248 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) | 4);
   }
   $2 = $1 + 7248 | 0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 0, $0 | 32);
   if (!$4) {
    break label$2
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) == (SAFE_HEAP_LOAD_i32_4_4($1, 7196) | 0)) {
    break label$2
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7248, $0 | 96);
  }
  SAFE_HEAP_STORE_i32_4_4($1, 7456, SAFE_HEAP_LOAD_i32_4_4($1, 7456) - 1 | 0);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function ImGui__SameLine_28float_2c_20float_29($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
   label$2 : {
    if ($0 != Math_fround(0.0)) {
     $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 280 | 0, 0) + Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1) + Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 12) - SAFE_HEAP_LOAD_f32_4_4($2, 88)) + $0)));
     $0 = SAFE_HEAP_LOAD_f32_4_4($2 + 276 | 0, 0);
     break label$2;
    }
    $0 = $1;
    if ($1 < Math_fround(0.0)) {
     $0 = SAFE_HEAP_LOAD_f32_4_4($3 + 5492 | 0, 0)
    }
    $1 = SAFE_HEAP_LOAD_f32_4_4($2 + 216 | 0, 0);
   }
   SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround($0 + $1));
   SAFE_HEAP_STORE_f32_4_4($2 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2 + 220 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($2 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($2 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2 + 268 | 0, 0));
  }
 }
 
 function ImGui__ItemSize_28ImRect_20const__2c_20float_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  SAFE_HEAP_STORE_f32_4_4($2, 8, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 8) - SAFE_HEAP_LOAD_f32_4_4($0, 0)));
  SAFE_HEAP_STORE_f32_4_4($2, 12, Math_fround($3 - $4));
  ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2 + 8 | 0, $1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__GetCursorScreenPos_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 208), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__SetCursorScreenPos_28ImVec2_20const__29($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  SAFE_HEAP_STORE_i64_8_4($1, 208, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
  $0 = $1 + 232 | 0;
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 208);
  SAFE_HEAP_STORE_f32_4_4($0, 0, $2 >= $3 ? $2 : $3);
  $0 = $1 + 236 | 0;
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 212 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0, 0, $2 >= $3 ? $2 : $3);
 }
 
 function ImGui__GetCursorPosX_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  return Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 208) - SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0, 88)));
 }
 
 function ImGui__GetCursorPosY_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  return Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 212 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0)) + SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0)));
 }
 
 function ImGui__SetCursorPosX_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = Math_fround(0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  $0 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 12) - SAFE_HEAP_LOAD_f32_4_4($1, 88)) + $0);
  SAFE_HEAP_STORE_f32_4_4($1, 208, $0);
  $1 = $1 + 232 | 0;
  $2 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  SAFE_HEAP_STORE_f32_4_4($1, 0, $0 <= $2 ? $2 : $0);
 }
 
 function ImGui__SetCursorPosY_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = Math_fround(0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  $0 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 92 | 0, 0)) + $0);
  SAFE_HEAP_STORE_f32_4_4($1 + 212 | 0, 0, $0);
  $1 = $1 + 236 | 0;
  $2 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  SAFE_HEAP_STORE_f32_4_4($1, 0, $0 <= $2 ? $2 : $0);
 }
 
 function ImGui__Indent_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if ($0 == Math_fround(0.0)) {
   $0 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0)
  }
  $1 = $2 + 272 | 0;
  $0 = Math_fround($0 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
  SAFE_HEAP_STORE_f32_4_4($1, 0, $0);
  SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround(Math_fround($0 + SAFE_HEAP_LOAD_f32_4_4($2, 12)) + SAFE_HEAP_LOAD_f32_4_4($2 + 276 | 0, 0)));
 }
 
 function ImGui__Unindent_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if ($0 == Math_fround(0.0)) {
   $0 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0)
  }
  $1 = $2 + 272 | 0;
  $0 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 0) - $0);
  SAFE_HEAP_STORE_f32_4_4($1, 0, $0);
  SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround(Math_fround($0 + SAFE_HEAP_LOAD_f32_4_4($2, 12)) + SAFE_HEAP_LOAD_f32_4_4($2 + 276 | 0, 0)));
 }
 
 function ImGui__PushItemWidth_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 392 | 0, 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 396 | 0, 0);
  label$1 : {
   if (($2 | 0) != ($4 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   $5 = $4;
   if ($4) {
    $2 = $4 + (($4 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $4 = ($2 | 0) > ($3 | 0) ? $2 : $3;
   if (($5 | 0) >= ($4 | 0)) {
    break label$1
   }
   $2 = $4 << 2;
   if ($6) {
    $3 = $6 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $2 = (((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 400 | 0, 0);
   if ($3) {
    __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($1, 392) << 2);
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 400);
    label$6 : {
     if (!$3) {
      break label$6
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$6
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 396, $4);
   SAFE_HEAP_STORE_i32_4_4($1, 400, $2);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 400 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 392) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 384));
  SAFE_HEAP_STORE_i32_4_4($1, 392, SAFE_HEAP_LOAD_i32_4_4($1, 392) + 1 | 0);
  if ($0 == Math_fround(0.0)) {
   $0 = SAFE_HEAP_LOAD_f32_4_4($1, 544)
  }
  SAFE_HEAP_STORE_f32_4_4($1, 384, $0);
  SAFE_HEAP_STORE_i32_4_4($6, 7220, SAFE_HEAP_LOAD_i32_4_4($6, 7220) & -2);
 }
 
 function ImGui__PushMultiItemsWidths_28int_2c_20float_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $7 = SAFE_HEAP_LOAD_f32_4_4($10 + 5500 | 0, 0);
  $12 = Math_fround($0 - 1 | 0);
  $11 = Math_fround(Math_fround($1 - Math_fround($7 * $12)) / Math_fround($0 | 0));
  label$1 : {
   if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
    $2 = ~~$11;
    break label$1;
   }
   $2 = -2147483648;
  }
  $11 = $1;
  $1 = Math_fround($2 | 0);
  $1 = $1 <= Math_fround(1.0) ? Math_fround(1.0) : $1;
  $7 = Math_fround($11 - Math_fround(Math_fround($7 + $1) * $12));
  label$3 : {
   if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
    $2 = ~~$7;
    break label$3;
   }
   $2 = -2147483648;
  }
  $7 = Math_fround($2 | 0);
  $6 = $7 <= Math_fround(1.0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($10, 7080);
  $5 = SAFE_HEAP_LOAD_i32_4_4($4 + 392 | 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($4 + 396 | 0, 0);
  label$5 : {
   if (($5 | 0) != ($2 | 0)) {
    break label$5
   }
   $3 = $5 + 1 | 0;
   $8 = $2;
   if ($2) {
    $5 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $5 = 8
   }
   $2 = ($3 | 0) < ($5 | 0) ? $5 : $3;
   if (($8 | 0) >= ($2 | 0)) {
    break label$5
   }
   $5 = $2 << 2;
   if ($10) {
    $3 = $10 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $5 = (((wasm2js_i32$1 = $5, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($4 + 400 | 0, 0);
   if ($3) {
    __memcpy($5, $3, SAFE_HEAP_LOAD_i32_4_4($4, 392) << 2);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4, 400);
    label$10 : {
     if (!$3) {
      break label$10
     }
     $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$9) {
      break label$10
     }
     $9 = $9 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($4, 396, $2);
   SAFE_HEAP_STORE_i32_4_4($4, 400, $5);
  }
  $7 = $6 ? Math_fround(1.0) : $7;
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4 + 400 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($4, 392) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($4, 384));
  $5 = SAFE_HEAP_LOAD_i32_4_4($4, 392);
  $2 = $5 + 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($4, 392, $2);
  $3 = $2;
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 396);
  label$11 : {
   if (($3 | 0) != ($2 | 0)) {
    break label$11
   }
   $3 = $5 + 2 | 0;
   $8 = $2;
   if ($2) {
    $5 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $5 = 8
   }
   $2 = ($3 | 0) < ($5 | 0) ? $5 : $3;
   if (($8 | 0) >= ($2 | 0)) {
    break label$11
   }
   $5 = $2 << 2;
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($3) {
    $3 = $3 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
   }
   $5 = (((wasm2js_i32$1 = $5, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 400);
   if ($3) {
    __memcpy($5, $3, SAFE_HEAP_LOAD_i32_4_4($4, 392) << 2);
    $3 = SAFE_HEAP_LOAD_i32_4_4($4, 400);
    label$16 : {
     if (!$3) {
      break label$16
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$6) {
      break label$16
     }
     $6 = $6 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($4, 396, $2);
   SAFE_HEAP_STORE_i32_4_4($4, 400, $5);
  }
  SAFE_HEAP_STORE_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 400) + (SAFE_HEAP_LOAD_i32_4_4($4, 392) << 2) | 0, 0, $7);
  SAFE_HEAP_STORE_i32_4_4($4, 392, SAFE_HEAP_LOAD_i32_4_4($4, 392) + 1 | 0);
  if (($0 | 0) >= 3) {
   $9 = $0 - 3 | 0;
   $2 = 0;
   while (1) {
    $5 = $2;
    $3 = SAFE_HEAP_LOAD_i32_4_4($4, 392);
    $2 = SAFE_HEAP_LOAD_i32_4_4($4, 396);
    label$19 : {
     if (($3 | 0) != ($2 | 0)) {
      break label$19
     }
     $6 = $3 + 1 | 0;
     $8 = $2;
     if ($2) {
      $3 = $2 + (($2 | 0) / 2 | 0) | 0
     } else {
      $3 = 8
     }
     $2 = ($3 | 0) > ($6 | 0) ? $3 : $6;
     if (($8 | 0) >= ($2 | 0)) {
      break label$19
     }
     $3 = $2 << 2;
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($6) {
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) + 1 | 0);
     }
     $3 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     $6 = SAFE_HEAP_LOAD_i32_4_4($4, 400);
     if ($6) {
      __memcpy($3, $6, SAFE_HEAP_LOAD_i32_4_4($4, 392) << 2);
      $6 = SAFE_HEAP_LOAD_i32_4_4($4, 400);
      label$24 : {
       if (!$6) {
        break label$24
       }
       $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$8) {
        break label$24
       }
       $8 = $8 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($8, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $6, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($4, 396, $2);
     SAFE_HEAP_STORE_i32_4_4($4, 400, $3);
    }
    SAFE_HEAP_STORE_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 400) + (SAFE_HEAP_LOAD_i32_4_4($4, 392) << 2) | 0, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($4, 392, SAFE_HEAP_LOAD_i32_4_4($4, 392) + 1 | 0);
    $2 = $5 + 1 | 0;
    if (($5 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_f32_4_4($4, 384, ($0 | 0) == 1 ? $7 : $1);
  SAFE_HEAP_STORE_i32_4_4($10, 7220, SAFE_HEAP_LOAD_i32_4_4($10, 7220) & -2);
 }
 
 function ImGui__PopItemWidth_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 400 | 0, 0);
  $1 = $0 + 392 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0;
  $4 = SAFE_HEAP_LOAD_f32_4_4($3 + ($2 << 2) | 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  SAFE_HEAP_STORE_f32_4_4($0 + 384 | 0, 0, $4);
 }
 
 function ImGui__CalcItemWidth_28_29() {
  var $0 = 0, $1 = Math_fround(0), $2 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  $1 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_1_U_1($0, 7220) & 1 ? $0 + 7224 | 0 : $2 + 384 | 0, 0);
  label$1 : {
   if (!($1 < Math_fround(0.0))) {
    break label$1
   }
   label$3 : {
    label$4 : {
     if (SAFE_HEAP_LOAD_i32_4_4($2 + 368 | 0, 0)) {
      break label$4
     }
     if (SAFE_HEAP_LOAD_i32_4_4($0, 8036)) {
      break label$4
     }
     $0 = $2 + 520 | 0;
     break label$3;
    }
    $0 = $2 + 472 | 0;
   }
   $1 = Math_fround($1 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 0) - SAFE_HEAP_LOAD_f32_4_4($2, 208)));
   $1 = $1 <= Math_fround(1.0) ? Math_fround(1.0) : $1;
  }
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
   $0 = ~~$1
  } else {
   $0 = -2147483648
  }
  return Math_fround(Math_fround($0 | 0));
 }
 
 function ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  $7 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  label$1 : {
   if (!($7 < Math_fround(0.0))) {
    $9 = Math_fround(0.0);
    if (!($6 < Math_fround(0.0))) {
     break label$1
    }
   }
   $10 = $4 + 524 | 0;
   label$3 : {
    label$4 : {
     if (SAFE_HEAP_LOAD_i32_4_4($4 + 368 | 0, 0)) {
      break label$4
     }
     if (SAFE_HEAP_LOAD_i32_4_4($5, 8036)) {
      break label$4
     }
     $5 = $4 + 520 | 0;
     break label$3;
    }
    $5 = $4 + 472 | 0;
   }
   $8 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
   $9 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
  }
  $11 = $8;
  $8 = $2;
  label$5 : {
   if ($7 != Math_fround(0.0)) {
    if (!($7 < Math_fround(0.0))) {
     break label$5
    }
    $2 = Math_fround($7 + Math_fround($11 - SAFE_HEAP_LOAD_f32_4_4($4, 208)));
    $8 = $2 <= Math_fround(4.0) ? Math_fround(4.0) : $2;
   }
   SAFE_HEAP_STORE_f32_4_4($1, 0, $8);
  }
  label$7 : {
   if ($6 != Math_fround(0.0)) {
    if (!($6 < Math_fround(0.0))) {
     break label$7
    }
    $2 = Math_fround($6 + Math_fround($9 - SAFE_HEAP_LOAD_f32_4_4($4 + 212 | 0, 0)));
    $3 = $2 <= Math_fround(4.0) ? Math_fround(4.0) : $2;
   }
   SAFE_HEAP_STORE_f32_4_4($1, 4, $3);
  }
  SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__GetTextLineHeightWithSpacing_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  return Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 6468) + SAFE_HEAP_LOAD_f32_4_4($0 + 5496 | 0, 0)));
 }
 
 function ImGui__GetFrameHeight_28_29() {
  var $0 = 0, $1 = Math_fround(0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 5480 | 0, 0);
  return Math_fround(Math_fround(Math_fround($1 + $1) + SAFE_HEAP_LOAD_f32_4_4($0, 6468)));
 }
 
 function ImGui__GetFrameHeightWithSpacing_28_29() {
  var $0 = 0, $1 = Math_fround(0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 5480 | 0, 0);
  return Math_fround(Math_fround(Math_fround(Math_fround($1 + $1) + SAFE_HEAP_LOAD_f32_4_4($0, 6468)) + SAFE_HEAP_LOAD_f32_4_4($0 + 5496 | 0, 0)));
 }
 
 function ImGui__BeginGroup_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 7456);
  $7 = $6 + 1 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 7460 | 0, 0);
  label$1 : {
   if (($0 | 0) > ($6 | 0)) {
    break label$1
   }
   $5 = $0;
   if ($0) {
    $3 = $0 + (($0 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $0 = ($3 | 0) > ($7 | 0) ? $3 : $7;
   if (($5 | 0) >= ($0 | 0)) {
    break label$1
   }
   $3 = Math_imul($0, 48);
   if ($1) {
    $4 = $1 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 7464 | 0, 0);
   if ($4) {
    __memcpy($3, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 7456), 48));
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7464);
    label$6 : {
     if (!$4) {
      break label$6
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$5) {
      break label$6
     }
     $5 = $5 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7460, $0);
   SAFE_HEAP_STORE_i32_4_4($1, 7464, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($1, 7456, $7);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 7464 | 0, 0) + Math_imul($6, 48) | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($2, 4));
  SAFE_HEAP_STORE_i64_8_4($0, 4, SAFE_HEAP_LOAD_i64_8_4($2, 208), i64toi32_i32$HIGH_BITS);
  $7 = $2 + 232 | 0;
  SAFE_HEAP_STORE_i64_8_4($0, 12, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
  $3 = $2 + 272 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 20, SAFE_HEAP_LOAD_i32_4_4($3, 0));
  $6 = $2 + 280 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_4($6, 0));
  $4 = $2 + 248 | 0;
  SAFE_HEAP_STORE_i64_8_4($0, 28, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_f32_4_4($0, 36, SAFE_HEAP_LOAD_f32_4_4($2 + 264 | 0, 0));
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($1, 7140));
  SAFE_HEAP_STORE_i32_1_1($0, 45, (SAFE_HEAP_LOAD_i32_4_4($1, 7116) | 0) != 0);
  $5 = SAFE_HEAP_LOAD_i32_1_U_1($1, 7200);
  SAFE_HEAP_STORE_i32_1_1($0, 46, 1);
  SAFE_HEAP_STORE_i32_1_1($0, 44, $5);
  SAFE_HEAP_STORE_i64_8_4($4, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_4($2, 208), i64toi32_i32$HIGH_BITS);
  $8 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 208) - SAFE_HEAP_LOAD_f32_4_4($2, 12)) - SAFE_HEAP_LOAD_f32_4_4($2 + 276 | 0, 0));
  SAFE_HEAP_STORE_f32_4_4($6, 0, $8);
  SAFE_HEAP_STORE_f32_4_4($3, 0, $8);
  if (SAFE_HEAP_LOAD_i32_1_U_1($1, 12196)) {
   SAFE_HEAP_STORE_i32_4_4($1, 12228, -8388609)
  }
 }
 
 function ImGui__SetScrollFromPosX_28ImGuiWindow__2c_20float_2c_20float_29($0, $1) {
  var $2 = 0;
  SAFE_HEAP_STORE_i32_4_4($0, 120, 0);
  SAFE_HEAP_STORE_f32_4_4($0, 112, Math_fround(1.0));
  $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 88) + $1);
  label$1 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $2 = ~~$1;
    break label$1;
   }
   $2 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($0, 104, Math_fround($2 | 0));
 }
 
 function ImGui__GetScrollX_28_29() {
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 88));
 }
 
 function ImGui__GetScrollY_28_29() {
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 92 | 0, 0));
 }
 
 function ImGui__GetScrollMaxX_28_29() {
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 96));
 }
 
 function ImGui__GetScrollMaxY_28_29() {
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 100 | 0, 0));
 }
 
 function ImGui__SetScrollY_28ImGuiWindow__2c_20float_29($0, $1) {
  SAFE_HEAP_STORE_i32_4_4($0 + 124 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0 + 116 | 0, 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 108 | 0, 0, $1);
 }
 
 function ImGui__SetScrollX_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_4_4($1, 120, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 112, 0);
  SAFE_HEAP_STORE_f32_4_4($1, 104, $0);
 }
 
 function ImGui__SetScrollY_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_4_4($1 + 124 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 116 | 0, 0, 0);
  SAFE_HEAP_STORE_f32_4_4($1 + 108 | 0, 0, $0);
 }
 
 function ImGui__SetScrollFromPosX_28float_2c_20float_29($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_4_4($2, 120, 0);
  SAFE_HEAP_STORE_f32_4_4($2, 112, $1);
  $0 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 88) + $0);
  label$1 : {
   if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
    $3 = ~~$0;
    break label$1;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($2, 104, Math_fround($3 | 0));
 }
 
 function ImGui__SetScrollFromPosY_28float_2c_20float_29($0, $1) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  $7 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
  if (!($7 & 1)) {
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 6472) * SAFE_HEAP_LOAD_f32_4_4($2, 572));
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 728);
   if ($5) {
    $3 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($5, 572))
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
   $3 = Math_fround(Math_fround($6 + $6) + $3);
  }
  $6 = $3;
  $3 = Math_fround(0.0);
  if ($7 & 1024) {
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 6472) * SAFE_HEAP_LOAD_f32_4_4($2, 572));
   $9 = SAFE_HEAP_LOAD_f32_4_4($2 + 312 | 0, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 728);
   if ($5) {
    $3 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($5, 572))
   }
   $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
   $3 = Math_fround(Math_fround($8 + $8) + Math_fround($9 + $3));
  }
  SAFE_HEAP_STORE_i32_4_4($2 + 124 | 0, 0, 0);
  SAFE_HEAP_STORE_f32_4_4($2 + 116 | 0, 0, $1);
  $4 = $2 + 108 | 0;
  $0 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 92 | 0, 0) + Math_fround($0 - Math_fround($6 + $3)));
  label$7 : {
   if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
    $2 = ~~$0;
    break label$7;
   }
   $2 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($2 | 0));
 }
 
 function ImGui__SetScrollHereX_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 7260 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 7252 | 0, 0);
  $2 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  SAFE_HEAP_STORE_f32_4_4($1, 112, $0);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 60);
  $2 = $2 <= $3 ? $3 : $2;
  $3 = Math_fround($3 - $2);
  SAFE_HEAP_STORE_f32_4_4($1, 120, $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3);
  $4 = Math_fround($4 + $2);
  $2 = Math_fround($6 - $2);
  $0 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 88) + Math_fround(Math_fround(Math_fround(Math_fround($4 - $2) * $0) + $2) - SAFE_HEAP_LOAD_f32_4_4($1, 12)));
  label$1 : {
   if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
    $5 = ~~$0;
    break label$1;
   }
   $5 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($1, 104, Math_fround($5 | 0));
 }
 
 function ImGui__SetScrollHereY_28float_29($0) {
  $0 = Math_fround($0);
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0);
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = $4 + 5496 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  $12 = $1 + 16 | 0;
  $13 = $1 + 260 | 0;
  $14 = $1 + 220 | 0;
  $15 = $1 - -64 | 0;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  if (!($9 & 1)) {
   $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
   $10 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
   if ($10) {
    $6 = Math_fround($6 * SAFE_HEAP_LOAD_f32_4_4($10, 572))
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
   $6 = Math_fround(Math_fround($3 + $3) + $6);
  }
  $7 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
  $16 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
  $17 = SAFE_HEAP_LOAD_f32_4_4($13, 0);
  $11 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
  $2 = SAFE_HEAP_LOAD_f32_4_4($15, 0);
  $3 = Math_fround(0.0);
  if ($9 & 1024) {
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 6472) * SAFE_HEAP_LOAD_f32_4_4($1, 572));
   $18 = SAFE_HEAP_LOAD_f32_4_4($1 + 312 | 0, 0);
   $8 = SAFE_HEAP_LOAD_i32_4_4($1, 728);
   if ($8) {
    $3 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($8, 572))
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
   $3 = Math_fround(Math_fround($5 + $5) + Math_fround($18 + $3));
  }
  SAFE_HEAP_STORE_f32_4_4($1 + 116 | 0, 0, $0);
  $5 = $2;
  $2 = $2 >= $7 ? $2 : $7;
  $7 = Math_fround($5 - $2);
  SAFE_HEAP_STORE_f32_4_4($1 + 124 | 0, 0, $7 <= Math_fround(0.0) ? Math_fround(0.0) : $7);
  $4 = $1 + 108 | 0;
  $5 = Math_fround($2 + Math_fround($11 + $17));
  $2 = Math_fround($11 - $2);
  $0 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 92 | 0, 0) + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5 - $2) * $0) + $2) - $16) - Math_fround($6 + $3)));
  label$7 : {
   if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
    $1 = ~~$0;
    break label$7;
   }
   $1 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($1 | 0));
 }
 
 function ImGui__BeginTooltip_28_29() {
  ImGui__BeginTooltipEx_28int_2c_20int_29(0);
 }
 
 function ImGui__EndTooltip_28_29() {
  ImGui__End_28_29();
 }
 
 function ImGui__OpenPopup_28char_20const__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = $0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  $7 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($2, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($2 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $2 = $7;
  while (1) {
   $6 = $5;
   $5 = $6 + 1 | 0;
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
   if ($4) {
    label$4 : {
     if (($4 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) | 0) != 35) {
      break label$4
     }
     $2 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 2) | 0) == 35 ? $7 : $2;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $2 & 255) << 2) + 19360 | 0, 0) ^ $2 >>> 8;
   }
   if ($4) {
    continue
   }
   break;
  };
  $2 = $2 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7136) | 0) == ($2 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($3, 7140, $2)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7196) | 0) == ($2 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($3, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7112) | 0) == ($2 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($2, 11, $0)
  }
  ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($2, $1);
 }
 
 function ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7480);
  $2 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  label$1 : {
   if ($1 & 32) {
    if ((SAFE_HEAP_LOAD_i32_4_4($5, 7468) | 0) > ($4 | 0)) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_i64_8_8($8, 8, 0, 0);
   $11 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($2, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($2 + 204 | 0, 0) | 0) - 4 | 0, 0);
   $10 = SAFE_HEAP_LOAD_i32_4_4($5, 6984);
   $12 = SAFE_HEAP_LOAD_i32_4_4($5, 7508);
   $2 = $8 + 8 | 0;
   ImGui__NavCalcPreferredRefPos_28_29($2);
   $1 = $5 + 228 | 0;
   $1 = SAFE_HEAP_LOAD_i64_8_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_f32_4_4($5 + 232 | 0, 0) >= Math_fround(-256.0e3) ? $1 : $2, wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_f32_4_4($1, 0) >= Math_fround(-256.0e3), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0);
   $13 = i64toi32_i32$HIGH_BITS;
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 7468);
   if (($4 | 0) >= ($3 | 0)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($5 + 7472 | 0, 0);
    label$4 : {
     if (($4 | 0) != ($3 | 0)) {
      break label$4
     }
     $6 = $3 + 1 | 0;
     $7 = $4;
     if ($4) {
      $3 = $4 + (($4 | 0) / 2 | 0) | 0
     } else {
      $3 = 8
     }
     $4 = ($3 | 0) > ($6 | 0) ? $3 : $6;
     if (($7 | 0) >= ($4 | 0)) {
      break label$4
     }
     $3 = Math_imul($4, 36);
     if ($2) {
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
     }
     $2 = (((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5 + 7476 | 0, 0);
     if ($3) {
      __memcpy($2, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($5, 7468), 36));
      $3 = SAFE_HEAP_LOAD_i32_4_4($5, 7476);
      label$9 : {
       if (!$3) {
        break label$9
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$6) {
        break label$9
       }
       $6 = $6 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($5, 7472, $4);
     SAFE_HEAP_STORE_i32_4_4($5, 7476, $2);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($5 + 7476 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($5, 7468), 36) | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 16, $11);
    SAFE_HEAP_STORE_i32_4_4($2, 12, $10);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $12);
    SAFE_HEAP_STORE_i32_4_4($2, 4, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
    $0 = SAFE_HEAP_LOAD_i64_8_8($8, 8);
    $4 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_4($2, 28, $1, $13);
    SAFE_HEAP_STORE_i64_8_4($2, 20, $0, $4);
    SAFE_HEAP_STORE_i32_4_4($5, 7468, SAFE_HEAP_LOAD_i32_4_4($5, 7468) + 1 | 0);
    break label$1;
   }
   label$10 : {
    $3 = SAFE_HEAP_LOAD_i32_4_4($5 + 7476 | 0, 0) + Math_imul($4, 36) | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) != ($0 | 0)) {
     break label$10
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0) != (SAFE_HEAP_LOAD_i32_4_4($5, 6984) - 1 | 0)) {
     break label$10
    }
    SAFE_HEAP_STORE_i32_4_4($3 + 12 | 0, 0, $10);
    break label$1;
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4($2 + 7472 | 0, 0);
   label$11 : {
    if (($6 | 0) >= ($4 | 0)) {
     break label$11
    }
    if ($6) {
     $3 = $6 + (($6 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $3 = ($3 | 0) > ($4 | 0) ? $3 : $4;
    if (($3 | 0) <= ($6 | 0)) {
     break label$11
    }
    $6 = Math_imul($3, 36);
    if ($2) {
     $7 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) + 1 | 0);
    }
    $6 = (((wasm2js_i32$1 = $6, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $7 = SAFE_HEAP_LOAD_i32_4_4($2, 7476);
    if ($7) {
     __memcpy($6, $7, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7468), 36));
     $7 = SAFE_HEAP_LOAD_i32_4_4($2, 7476);
     label$16 : {
      if (!$7) {
       break label$16
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$9) {
       break label$16
      }
      $9 = $9 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $7, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($2, 7472, $3);
    SAFE_HEAP_STORE_i32_4_4($2, 7476, $6);
   }
   SAFE_HEAP_STORE_i32_4_4($2, 7468, $4);
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7468);
   $2 = SAFE_HEAP_LOAD_i32_4_4($5 + 7472 | 0, 0);
   label$17 : {
    if (($4 | 0) != ($2 | 0)) {
     break label$17
    }
    $3 = $4 + 1 | 0;
    $7 = $2;
    if ($2) {
     $4 = $2 + (($2 | 0) / 2 | 0) | 0
    } else {
     $4 = 8
    }
    $2 = ($3 | 0) < ($4 | 0) ? $4 : $3;
    if (($7 | 0) >= ($2 | 0)) {
     break label$17
    }
    $4 = Math_imul($2, 36);
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($3) {
     $3 = $3 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
    }
    $4 = (((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $3 = SAFE_HEAP_LOAD_i32_4_4($5, 7476);
    if ($3) {
     __memcpy($4, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($5, 7468), 36));
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 7476);
     label$22 : {
      if (!$3) {
       break label$22
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$22
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($5, 7472, $2);
    SAFE_HEAP_STORE_i32_4_4($5, 7476, $4);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($5, 7476) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($5, 7468), 36) | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 16, $11);
   SAFE_HEAP_STORE_i32_4_4($2, 12, $10);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $12);
   SAFE_HEAP_STORE_i32_4_4($2, 4, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
   $0 = SAFE_HEAP_LOAD_i64_8_8($8, 8);
   $4 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_4($2, 28, $1, $13);
   SAFE_HEAP_STORE_i64_8_4($2, 20, $0, $4);
   SAFE_HEAP_STORE_i32_4_4($5, 7468, SAFE_HEAP_LOAD_i32_4_4($5, 7468) + 1 | 0);
  }
  __stack_pointer = $8 + 16 | 0;
 }
 
 function ImGui__CloseCurrentPopup_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = SAFE_HEAP_LOAD_i32_4_4($3, 7480);
   if (($0 | 0) <= 0) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($3, 7468) | 0) < ($0 | 0)) {
    break label$1
   }
   $0 = $0 - 1 | 0;
   $1 = Math_imul($0, 36);
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 7488 | 0, 0) + $1 | 0, 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($3 + 7476 | 0, 0);
   if (($2 | 0) != (SAFE_HEAP_LOAD_i32_4_4($1 + $4 | 0, 0) | 0)) {
    break label$1
   }
   while (1) {
    label$2 : {
     if (($0 | 0) <= 0) {
      $0 = 0;
      break label$2;
     }
     label$5 : {
      label$6 : {
       $1 = Math_imul($0, 36) + $4 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
       if (!$2) {
        break label$6
       }
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 16)) {
        break label$6
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($1 - 32 | 0, 0);
       if (!$1) {
        break label$6
       }
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($1 + 9 | 0, 0) & 4;
       $1 = !$2;
       $0 = $2 ? $0 : $0 - 1 | 0;
       break label$5;
      }
      $1 = 0;
     }
     if ($1) {
      continue
     }
    }
    break;
   };
   ImGui__ClosePopupToLevel_28int_2c_20bool_29($0, 1);
   $0 = SAFE_HEAP_LOAD_i32_4_4($3, 7508);
   if (!$0) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0 + 304 | 0, 0, 1);
  }
 }
 
 function ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($3, 7468);
  label$1 : {
   label$2 : {
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 7480);
    if (($4 | 0) < ($5 | 0)) {
     if ((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 7476 | 0, 0) + Math_imul($4, 36) | 0, 0) | 0) == ($0 | 0)) {
      break label$2
     }
    }
    SAFE_HEAP_STORE_i32_4_4($3, 7300, 0);
    $0 = 0;
    break label$1;
   }
   label$4 : {
    if ($1 & 268435456) {
     SAFE_HEAP_STORE_i32_4_4($2, 16, SAFE_HEAP_LOAD_i32_4_4($3, 7492));
     ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2 + 32 | 0, 20, 12856, $2 + 16 | 0);
     break label$4;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2 + 32 | 0, 20, 1603, $2);
   }
   $0 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($2 + 32 | 0, 0, $1 | 67108864);
   if (!$0) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7508);
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    label$7 : {
     if (($4 | 0) != ($3 | 0)) {
      break label$7
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7597)) {
      break label$7
     }
     if (SAFE_HEAP_LOAD_i32_4_4($1, 7564)) {
      break label$7
     }
     SAFE_HEAP_STORE_i32_4_4($1, 7600, SAFE_HEAP_LOAD_i32_4_4($1, 7600) | 2);
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($3 + 11 | 0, 0) & 1) {
     SAFE_HEAP_STORE_i32_1_1($1, 6998, 1)
    }
    ImGui__End_28_29();
    SAFE_HEAP_STORE_i32_1_1($1, 6998, 0);
   }
  }
  __stack_pointer = $2 - -64 | 0;
  return $0;
 }
 
 function ImGui__EndPopup_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  label$1 : {
   if (($2 | 0) != ($1 | 0)) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 7597)) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_4_4($0, 7564)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($0, 7600, SAFE_HEAP_LOAD_i32_4_4($0, 7600) | 2);
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 1) {
   SAFE_HEAP_STORE_i32_1_1($0, 6998, 1)
  }
  ImGui__End_28_29();
  SAFE_HEAP_STORE_i32_1_1($0, 6998, 0);
 }
 
 function ImGui__BeginPopup_28char_20const__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7468) | 0) <= (SAFE_HEAP_LOAD_i32_4_4($3, 7480) | 0)) {
   SAFE_HEAP_STORE_i32_4_4($3, 7300, 0);
   return 0;
  }
  $5 = $0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  $7 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($2, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($2 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $2 = $7;
  while (1) {
   $6 = $5;
   $5 = $6 + 1 | 0;
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
   if ($4) {
    label$5 : {
     if (($4 | 0) != 35) {
      break label$5
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) | 0) != 35) {
      break label$5
     }
     $2 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 2) | 0) == 35 ? $7 : $2;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $2 & 255) << 2) + 19360 | 0, 0) ^ $2 >>> 8;
   }
   if ($4) {
    continue
   }
   break;
  };
  $2 = $2 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7136) | 0) == ($2 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($3, 7140, $2)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7196) | 0) == ($2 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($3, 7200, 1)
  }
  $1 = $1 | 321;
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7112) | 0) == ($2 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($2, 11, $0)
  }
  return ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($2, $1);
 }
 
 function ImGui__OpenPopupOnItemClick_28char_20const__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  label$1 : {
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if (!SAFE_HEAP_LOAD_i32_1_U_1(($3 + ($1 & 31) | 0) + 1022 | 0, 0)) {
    break label$1
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
   if (!ImGui__IsItemHovered_28int_29(32)) {
    break label$1
   }
   label$2 : {
    if ($0) {
     $5 = $0;
     $7 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($2, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($2 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
     $2 = $7;
     while (1) {
      $6 = $5;
      $5 = $6 + 1 | 0;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
      if ($4) {
       label$7 : {
        if (($4 | 0) != 35) {
         break label$7
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) | 0) != 35) {
         break label$7
        }
        $2 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 2) | 0) == 35 ? $7 : $2;
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $2 & 255) << 2) + 19360 | 0, 0) ^ $2 >>> 8;
      }
      if ($4) {
       continue
      }
      break;
     };
     $2 = $2 ^ -1;
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 7136) | 0) == ($2 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($3, 7140, $2)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 7196) | 0) == ($2 | 0)) {
      SAFE_HEAP_STORE_i32_1_1($3, 7200, 1)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 7112) | 0) != ($2 | 0)) {
      break label$2
     }
     ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($2, 11, $0);
     break label$2;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7240);
   }
   ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($2, $1);
  }
 }
 
 function ImGui__SetNavID_28unsigned_20int_2c_20ImGuiNavLayer_2c_20unsigned_20int_2c_20ImRect_20const__29($0, $1, $2, $3) {
  var $4 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($4, 7564, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 7512, $0);
  SAFE_HEAP_STORE_i32_4_4($4, 7516, $2);
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7508);
  SAFE_HEAP_STORE_i32_4_4(($2 + ($1 << 2) | 0) + 756 | 0, 0, $0);
  $1 = $2 + ($1 << 4) | 0;
  SAFE_HEAP_STORE_i64_8_4($1 + 772 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($1 + 764 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 292 | 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7508) | 0) != ($1 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($2, 7573, 0)
  }
  SAFE_HEAP_STORE_i32_4_4($2, 7564, $3);
  SAFE_HEAP_STORE_i32_4_4($2, 7512, $0);
  SAFE_HEAP_STORE_i32_4_4($2, 7508, $1);
  SAFE_HEAP_STORE_i32_4_4($2, 7516, SAFE_HEAP_LOAD_i32_4_4($1 + 300 | 0, 0));
  SAFE_HEAP_STORE_i32_4_4((($3 << 2) + $1 | 0) + 756 | 0, 0, $0);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7240) | 0) == ($0 | 0)) {
   $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 7268 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($2 + 7272 | 0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 7276 | 0, 0);
   $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 224 | 0, 0);
   $0 = ($3 << 4) + $1 | 0;
   $9 = SAFE_HEAP_LOAD_f32_4_4($2 + 7280 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 228 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0 + 776 | 0, 0, Math_fround($9 - $5));
   SAFE_HEAP_STORE_f32_4_4($0 + 772 | 0, 0, Math_fround($8 - $4));
   SAFE_HEAP_STORE_f32_4_4($0 + 768 | 0, 0, Math_fround($7 - $5));
   SAFE_HEAP_STORE_f32_4_4($0 + 764 | 0, 0, Math_fround($6 - $4));
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7188) | 0) == 4) {
   SAFE_HEAP_STORE_i32_1_1($2, 7571, 1);
   return;
  }
  SAFE_HEAP_STORE_i32_1_1($2, 7570, 1);
 }
 
 function ImGui__NavMoveRequestButNoResultYet_28_29() {
  var $0 = 0, $1 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 7597)) {
   return 0
  }
  if (!SAFE_HEAP_LOAD_i32_4_4($0 + 7672 | 0, 0)) {
   $1 = !SAFE_HEAP_LOAD_i32_4_4($0 + 7760 | 0, 0)
  }
  return $1;
 }
 
 function ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29($0, $1) {
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!$1) {
   return SAFE_HEAP_LOAD_f32_4_4(($6 + ($0 << 2) | 0) + 768 | 0, 0)
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4(($6 + ($0 << 2) | 0) + 5236 | 0, 0);
  if (!(!($2 < Math_fround(0.0)) | ($1 | 0) != 2)) {
   return SAFE_HEAP_LOAD_f32_4_4(($6 + ($0 << 2) | 0) + 5316 | 0, 0) >= Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)
  }
  if ($2 < Math_fround(0.0)) {
   return Math_fround(0.0)
  }
  label$4 : {
   switch ($1 - 1 | 0) {
   case 0:
    return $2 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0);
   case 2:
    $0 = 1;
    label$9 : {
     if ($2 == Math_fround(0.0)) {
      break label$9
     }
     $3 = Math_fround($2 - SAFE_HEAP_LOAD_f32_4_4($6 + 24 | 0, 0));
     $0 = 0;
     if ($3 >= $2) {
      break label$9
     }
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 140 | 0, 0) * Math_fround(.7200000286102295));
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 144 | 0, 0) * Math_fround(.800000011920929));
     $0 = $4 > $3 & $2 >= $4;
     if ($5 <= Math_fround(0.0)) {
      break label$9
     }
     $1 = -1;
     if ($4 > $3) {
      $0 = $1
     } else {
      $3 = Math_fround(Math_fround($3 - $4) / $5);
      label$12 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $0 = ~~$3;
        break label$12;
       }
       $0 = -2147483648;
      }
     }
     if (!($2 < $4)) {
      $2 = Math_fround(Math_fround($2 - $4) / $5);
      label$15 : {
       if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
        $1 = ~~$2;
        break label$15;
       }
       $1 = -2147483648;
      }
     }
     $0 = $1 - $0 | 0;
    }
    return Math_fround($0 | 0);
   case 3:
    $0 = 1;
    label$17 : {
     if ($2 == Math_fround(0.0)) {
      break label$17
     }
     $3 = Math_fround($2 - SAFE_HEAP_LOAD_f32_4_4($6 + 24 | 0, 0));
     $0 = 0;
     if ($3 >= $2) {
      break label$17
     }
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 140 | 0, 0) * Math_fround(1.25));
     $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 144 | 0, 0);
     $5 = Math_fround($5 + $5);
     $0 = $4 > $3 & $2 >= $4;
     if ($5 <= Math_fround(0.0)) {
      break label$17
     }
     $1 = -1;
     if ($4 > $3) {
      $0 = $1
     } else {
      $3 = Math_fround(Math_fround($3 - $4) / $5);
      label$20 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $0 = ~~$3;
        break label$20;
       }
       $0 = -2147483648;
      }
     }
     if (!($2 < $4)) {
      $2 = Math_fround(Math_fround($2 - $4) / $5);
      label$23 : {
       if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
        $1 = ~~$2;
        break label$23;
       }
       $1 = -2147483648;
      }
     }
     $0 = $1 - $0 | 0;
    }
    return Math_fround($0 | 0);
   case 4:
    $0 = 1;
    label$25 : {
     if ($2 == Math_fround(0.0)) {
      break label$25
     }
     $3 = Math_fround($2 - SAFE_HEAP_LOAD_f32_4_4($6 + 24 | 0, 0));
     $0 = 0;
     if ($3 >= $2) {
      break label$25
     }
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 140 | 0, 0) * Math_fround(.7200000286102295));
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 + 144 | 0, 0) * Math_fround(.30000001192092896));
     $0 = $4 > $3 & $2 >= $4;
     if ($5 <= Math_fround(0.0)) {
      break label$25
     }
     $1 = -1;
     if ($4 > $3) {
      $0 = $1
     } else {
      $3 = Math_fround(Math_fround($3 - $4) / $5);
      label$28 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $0 = ~~$3;
        break label$28;
       }
       $0 = -2147483648;
      }
     }
     if (!($2 < $4)) {
      $2 = Math_fround(Math_fround($2 - $4) / $5);
      label$31 : {
       if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
        $1 = ~~$2;
        break label$31;
       }
       $1 = -2147483648;
      }
     }
     $0 = $1 - $0 | 0;
    }
    $4 = Math_fround($0 | 0);
    break;
   default:
    break label$4;
   };
  }
  return $4;
 }
 
 function ImGui__BeginDragDropSource_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   label$2 : {
    if ($0 & 16) {
     $4 = 7241;
     $2 = -1;
     while (1) {
      $6 = $2;
      $7 = $4;
      $4 = $4 + 1 | 0;
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0);
      if ($2) {
       label$7 : {
        if (($2 | 0) != 35) {
         break label$7
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 35) {
         break label$7
        }
        $6 = (SAFE_HEAP_LOAD_i32_1_U_1($7, 2) | 0) == 35 ? -1 : $6;
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4((($2 ^ $6 & 255) << 2) + 19360 | 0, 0) ^ $6 >>> 8;
      }
      $2 = $6;
      if (($7 | 0) != 7254) {
       continue
      }
      break;
     };
     $4 = 1;
     $7 = $2 ^ -1;
     $2 = 0;
     $6 = 0;
     break label$2;
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7240);
    label$10 : {
     label$11 : {
      if ($4) {
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) != ($4 | 0)) {
        break label$1
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7192);
       $6 = ($2 | 0) != -1 ? $2 : 0;
       if (!SAFE_HEAP_LOAD_i32_1_U_1(($6 + $1 | 0) + 236 | 0, 0)) {
        break label$1
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
        return 0
       }
       $2 = 0;
       break label$11;
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1 + 236 | 0, 0)) {
       return 0
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
       return 0
      }
      label$16 : {
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 7248 | 0, 0) & 1)) {
        if (!SAFE_HEAP_LOAD_i32_4_4($1, 7136)) {
         return 0
        }
        if (!($0 & 8)) {
         return 0
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($1, 7184) | 0) == ($5 | 0)) {
         break label$16
        }
        break label$1;
       }
       if (!($0 & 8)) {
        break label$1
       }
      }
      $2 = $1 + 7252 | 0;
      $4 = ImGuiWindow__GetIDFromRectangle_28ImRect_20const__29($5, $2);
      SAFE_HEAP_STORE_i32_4_4($1, 7240, $4);
      $2 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($2, $4);
      label$20 : {
       if (!$2) {
        break label$20
       }
       if (!SAFE_HEAP_LOAD_i32_1_U_1($1 + 992 | 0, 0)) {
        break label$20
       }
       ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($4, $5);
       ImGui__FocusWindow_28ImGuiWindow__29($5);
      }
      $3 = 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) != ($4 | 0)) {
       break label$10
      }
     }
     SAFE_HEAP_STORE_i32_1_1($1, 7149, $2);
     $3 = $6;
    }
    $6 = $3;
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) != ($4 | 0)) {
     break label$1
    }
    $7 = $4;
    $2 = ((SAFE_HEAP_LOAD_i32_4_4($5, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($5 + 204 | 0, 0) | 0) - 4 | 0;
    $4 = 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if (SAFE_HEAP_LOAD_i32_1_U_1(($5 + $6 | 0) + 236 | 0, 0)) {
     $9 = SAFE_HEAP_LOAD_f32_4_4(($5 + ($6 << 2) | 0) + 1120 | 0, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($5 + 48 | 0, 0);
     $4 = $9 >= Math_fround($8 * $8);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i64_8_8($5, 7168, -1, -1);
    SAFE_HEAP_STORE_i64_8_4($5, 7156, -1, -1);
    SAFE_HEAP_STORE_i32_2_2($5, 7596, 0);
    SAFE_HEAP_STORE_i32_1_1($5, 7572, SAFE_HEAP_LOAD_i32_1_U_1($5, 7573));
   }
   $5 = $7;
   $7 = 0;
   if (!$4) {
    break label$1
   }
   label$22 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 7876)) {
     break label$22
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    SAFE_HEAP_STORE_i32_1_1($3, 7876, 0);
    SAFE_HEAP_STORE_i64_8_4($3, 7892, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 7968, 0);
    SAFE_HEAP_STORE_i64_8_4($3, 7980, 0, -1);
    SAFE_HEAP_STORE_i64_8_4($3, 7972, 2139095039, 0);
    SAFE_HEAP_STORE_i64_8_4($3 + 7912 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($3 + 7920 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($3 + 7928 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($3 + 7936 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_1_1($3 + 7944 | 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($3 + 7900 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($3 + 7908 | 0, 0, -1);
    SAFE_HEAP_STORE_i32_2_1($3 + 7945 | 0, 0, 0);
    $7 = SAFE_HEAP_LOAD_i32_4_4($3 + 8e3 | 0, 0);
    if ($7) {
     SAFE_HEAP_STORE_i64_8_4($3, 7992, 0, 0);
     if ($3) {
      $4 = $3 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $7, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8e3, 0);
    }
    SAFE_HEAP_STORE_i64_8_4($3, 8004, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($3 + 8012 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($1 + 7904 | 0, 0, $2);
    SAFE_HEAP_STORE_i32_4_4($1 + 7900 | 0, 0, $5);
    SAFE_HEAP_STORE_i32_4_4($1, 7888, $6);
    SAFE_HEAP_STORE_i32_4_4($1, 7880, $0);
    SAFE_HEAP_STORE_i32_1_1($1, 7876, 1);
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 7136) | 0) != ($5 | 0)) {
     break label$22
    }
    SAFE_HEAP_STORE_i32_1_1($1, 7150, 1);
   }
   SAFE_HEAP_STORE_i32_1_1($1, 7877, 1);
   SAFE_HEAP_STORE_i32_4_4($1, 7884, SAFE_HEAP_LOAD_i32_4_4($1, 6984));
   label$25 : {
    if ($0 & 1) {
     break label$25
    }
    ImGui__BeginTooltipEx_28int_2c_20int_29(0);
    if (!SAFE_HEAP_LOAD_i32_4_4($1, 7980)) {
     break label$25
    }
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 7969 | 0, 0) & 16)) {
     break label$25
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($2, 172, 1);
    SAFE_HEAP_STORE_i32_1_1($2, 145, 1);
    SAFE_HEAP_STORE_i32_1_1($2, 143, 1);
   }
   if (!($0 & 18)) {
    $0 = $1 + 7248 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) & -2);
   }
   $7 = 1;
  }
  return $7 | 0;
 }
 
 function ImGui__EndDragDropSource_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 7880) & 1)) {
   ImGui__End_28_29()
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($1 + 7908 | 0, 0) | 0) == -1) {
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   SAFE_HEAP_STORE_i32_1_1($0, 7876, 0);
   SAFE_HEAP_STORE_i64_8_4($0, 7892, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 7968, 0);
   SAFE_HEAP_STORE_i64_8_4($0, 7980, 0, -1);
   SAFE_HEAP_STORE_i64_8_4($0, 7972, 2139095039, 0);
   SAFE_HEAP_STORE_i64_8_4($0 + 7912 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0 + 7920 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0 + 7928 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0 + 7936 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_1_1($0 + 7944 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0 + 7900 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0 + 7908 | 0, 0, -1);
   SAFE_HEAP_STORE_i32_2_1($0 + 7945 | 0, 0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 8e3 | 0, 0);
   if ($2) {
    SAFE_HEAP_STORE_i64_8_4($0, 7992, 0, 0);
    if ($0) {
     $3 = $0 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 8e3, 0);
   }
   SAFE_HEAP_STORE_i64_8_4($0, 8004, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0 + 8012 | 0, 0, 0, 0);
  }
  SAFE_HEAP_STORE_i32_1_1($1, 7877, 0);
 }
 
 function ImGui__SetDragDropPayload_28char_20const__2c_20void_20const__2c_20unsigned_20long_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if ($3 >>> 0 >= 2) {
    if ((SAFE_HEAP_LOAD_i32_4_4($4 + 7908 | 0, 0) | 0) != -1) {
     break label$1
    }
   }
   strncpy($4 + 7912 | 0, $0, 32);
   SAFE_HEAP_STORE_i32_1_1($4 + 7944 | 0, 0, 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 7996 | 0, 0);
   label$3 : {
    if (($0 | 0) >= 0) {
     break label$3
    }
    $3 = $0;
    $0 = $0 + (($0 | 0) / 2 | 0) | 0;
    $0 = ($0 | 0) > 0 ? $0 : 0;
    if (($3 | 0) >= ($0 | 0)) {
     break label$3
    }
    if ($4) {
     $3 = $4 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
    }
    $3 = (((wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($4 + 8e3 | 0, 0);
    if ($5) {
     __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($4, 7992));
     $5 = SAFE_HEAP_LOAD_i32_4_4($4, 8e3);
     label$6 : {
      if (!$5) {
       break label$6
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if (!$6) {
       break label$6
      }
      $6 = $6 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7996, $0);
    SAFE_HEAP_STORE_i32_4_4($4, 8e3, $3);
   }
   SAFE_HEAP_STORE_i32_4_4($4, 7992, 0);
   label$7 : {
    if ($2 >>> 0 >= 17) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7996);
     label$9 : {
      if (($3 | 0) >= ($2 | 0)) {
       break label$9
      }
      if ($3) {
       $0 = $3 + (($3 | 0) / 2 | 0) | 0
      } else {
       $0 = 8
      }
      $0 = ($0 | 0) > ($2 | 0) ? $0 : $2;
      if (($0 | 0) <= ($3 | 0)) {
       break label$9
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($3) {
       $3 = $3 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + 1 | 0);
      }
      $3 = (((wasm2js_i32$1 = $0, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $5 = SAFE_HEAP_LOAD_i32_4_4($4 + 8e3 | 0, 0);
      if ($5) {
       __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($4, 7992));
       $5 = SAFE_HEAP_LOAD_i32_4_4($4, 8e3);
       label$14 : {
        if (!$5) {
         break label$14
        }
        $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$6) {
         break label$14
        }
        $6 = $6 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($4, 7996, $0);
      SAFE_HEAP_STORE_i32_4_4($4, 8e3, $3);
     }
     SAFE_HEAP_STORE_i32_4_4($4, 7992, $2);
     $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 8e3 | 0, 0);
     SAFE_HEAP_STORE_i32_4_4($4, 7892, $0);
     __memcpy($0, $1, $2);
     break label$7;
    }
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($4, 8004, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($4 + 8012 | 0, 0, 0, 0);
     $0 = $4 + 8004 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 7892, $0);
     __memcpy($0, $1, $2);
     break label$7;
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7892, 0);
   }
   SAFE_HEAP_STORE_i32_4_4($4 + 7896 | 0, 0, $2);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($4, 6984);
  SAFE_HEAP_STORE_i32_4_4($4 + 7908 | 0, 0, $0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 7984);
  return ($1 | 0) == ($0 | 0) | ($1 | 0) == ($0 - 1 | 0);
 }
 
 function ImGui__BeginDragDropTarget_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 7876)) {
   return 0
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 7248 | 0, 0);
  if (!($2 & 1)) {
   return 0
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7088);
  if (!$1) {
   return 0
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 736) | 0) != (SAFE_HEAP_LOAD_i32_4_4($1, 736) | 0)) {
   return 0
  }
  $1 = 0;
  if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 143)) {
   $2 = ($0 + 7240 | 0) + ($2 & 2 ? 44 : 12) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7240);
   if (!$1) {
    $1 = ImGuiWindow__GetIDFromRectangle_28ImRect_20const__29($3, $2)
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 7900 | 0, 0);
   if (($1 | 0) == ($3 | 0)) {
    return ($1 | 0) != ($3 | 0) | 0
   }
   SAFE_HEAP_STORE_i64_8_4($0, 7948, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 7956 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 7964, $1);
   SAFE_HEAP_STORE_i32_1_1($0, 7878, 1);
   $1 = 1;
  }
  return $1 | 0;
 }
 
 function ImGui__AcceptDragDropPayload_28char_20const__2c_20int_29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $7 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  label$1 : {
   if ($0) {
    if ((SAFE_HEAP_LOAD_i32_4_4($3 + 7908 | 0, 0) | 0) == -1) {
     break label$1
    }
    if (strcmp($0, $3 + 7912 | 0)) {
     break label$1
    }
   }
   $8 = SAFE_HEAP_LOAD_i32_4_4($3, 7980);
   $5 = SAFE_HEAP_LOAD_i32_4_4($3, 7964);
   $0 = ($8 | 0) == ($5 | 0);
   $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 7956 | 0, 0);
   $9 = SAFE_HEAP_LOAD_f32_4_4($3, 7948);
   $10 = SAFE_HEAP_LOAD_f32_4_4($3 + 7960 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($3 + 7952 | 0, 0);
   $12 = Math_fround(Math_fround($2 - $9) * Math_fround($10 - $11));
   if ($12 <= SAFE_HEAP_LOAD_f32_4_4($3, 7972)) {
    SAFE_HEAP_STORE_i32_4_4($3, 7976, $5);
    SAFE_HEAP_STORE_i32_4_4($3, 7968, $1);
    SAFE_HEAP_STORE_f32_4_4($3, 7972, $12);
   }
   SAFE_HEAP_STORE_i32_1_1($3 + 7945 | 0, 0, $0);
   if (!((SAFE_HEAP_LOAD_i32_4_4($3, 7880) | $1) & 2048 | ($5 | 0) != ($8 | 0))) {
    $7 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
    SAFE_HEAP_STORE_f32_4_4($4, 12, Math_fround($11 + Math_fround(-3.5)));
    SAFE_HEAP_STORE_f32_4_4($4, 8, Math_fround($9 + Math_fround(-3.5)));
    SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround($10 + Math_fround(3.5)));
    SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($2 + Math_fround(3.5)));
    $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 6388 | 0, 0);
    $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2) * Math_fround(255.0)) + Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
      $0 = ~~$2;
      break label$6;
     }
     $0 = -2147483648;
    }
    $0 = $0 << 8;
    $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 6384 | 0, 0);
    $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2) * Math_fround(255.0)) + Math_fround(.5));
    label$8 : {
     if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
      $6 = ~~$2;
      break label$8;
     }
     $6 = -2147483648;
    }
    $0 = $6 | $0;
    $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 6392 | 0, 0);
    $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2) * Math_fround(255.0)) + Math_fround(.5));
    label$10 : {
     if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
      $6 = ~~$2;
      break label$10;
     }
     $6 = -2147483648;
    }
    $0 = $0 | $6 << 16;
    $13 = $4 + 8 | 0;
    $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 6396 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($3, 5416));
    $2 = Math_fround(Math_fround(($2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2) * Math_fround(255.0)) + Math_fround(.5));
    label$12 : {
     if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
      $6 = ~~$2;
      break label$12;
     }
     $6 = -2147483648;
    }
    ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($7, $13, $4, $0 | $6 << 24, Math_fround(0.0), 0, Math_fround(2.0));
   }
   SAFE_HEAP_STORE_i32_4_4($3, 7984, SAFE_HEAP_LOAD_i32_4_4($3, 6984));
   label$14 : {
    if (($5 | 0) == ($8 | 0)) {
     $0 = SAFE_HEAP_LOAD_i32_1_U_1((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + SAFE_HEAP_LOAD_i32_4_4($3, 7888) | 0) + 236 | 0, 0);
     SAFE_HEAP_STORE_i32_1_1($3 + 7946 | 0, 0, !$0);
     if ($1 & 1024) {
      break label$14
     }
     $5 = 0;
     if (!$0) {
      break label$14
     }
     break label$1;
    }
    SAFE_HEAP_STORE_i32_1_1($3 + 7946 | 0, 0, 0);
    $5 = 0;
    if (!($1 & 1024)) {
     break label$1
    }
   }
   $5 = $3 + 7892 | 0;
  }
  __stack_pointer = $4 + 16 | 0;
  return $5;
 }
 
 function ImGui__EndDragDropTarget_28_29() {
  SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7878, 0);
 }
 
 function ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29($0, $1) {
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($2, 12224, $1);
  SAFE_HEAP_STORE_i32_4_4($2, 12220, $0);
 }
 
 function ImGui__LogToTTY_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 12196)) {
   SAFE_HEAP_STORE_i32_4_4($1, 12200, 1);
   SAFE_HEAP_STORE_i32_1_1($1, 12196, 1);
   SAFE_HEAP_STORE_i64_8_4($1, 12220, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 12236, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7080) + 344 | 0, 0));
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12244)
   }
   SAFE_HEAP_STORE_i32_1_1($1, 12232, 1);
   SAFE_HEAP_STORE_i32_4_4($1, 12228, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($1, 12240, $0);
   SAFE_HEAP_STORE_i32_4_4($1, 12204, SAFE_HEAP_LOAD_i32_4_4(0, 71168));
  }
 }
 
 function ImGui__LogToClipboard_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 12196)) {
   SAFE_HEAP_STORE_i32_4_4($1, 12200, 4);
   SAFE_HEAP_STORE_i32_1_1($1, 12196, 1);
   SAFE_HEAP_STORE_i64_8_4($1, 12220, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 12236, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7080) + 344 | 0, 0));
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12244)
   }
   SAFE_HEAP_STORE_i32_1_1($1, 12232, 1);
   SAFE_HEAP_STORE_i32_4_4($1, 12228, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($1, 12240, $0);
  }
 }
 
 function ImGui__LogButtons_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  ImGui__PushID_28char_20const__29(4625);
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  $4 = ImGui__Button_28char_20const__2c_20ImVec2_20const__29(14105, $2 + 8 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
   $3 = SAFE_HEAP_LOAD_f32_4_4($5 + 5492 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
  }
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  $5 = ImGui__Button_28char_20const__2c_20ImVec2_20const__29(11290, $2 + 8 | 0);
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
   $3 = SAFE_HEAP_LOAD_f32_4_4($6 + 5492 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
  }
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  $6 = ImGui__Button_28char_20const__2c_20ImVec2_20const__29(11738, $2 + 8 | 0);
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
   $3 = SAFE_HEAP_LOAD_f32_4_4($7 + 5492 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
  }
  ImGui__PushItemFlag_28int_2c_20bool_29(1, 1);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($0 + 7224 | 0, 0, 1117782016);
  SAFE_HEAP_STORE_i32_4_4($0, 7220, SAFE_HEAP_LOAD_i32_4_4($0, 7220) | 1);
  ImGui__SliderInt_28char_20const__2c_20int__2c_20int_2c_20int_2c_20char_20const__2c_20int_29(8596, $1 + 12244 | 0, 0, 9, 0, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7444);
  SAFE_HEAP_STORE_i32_4_4($0, 7444, $1 - 1 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 7216, SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 7452 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0));
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  SAFE_HEAP_STORE_i32_4_4($1, 196, SAFE_HEAP_LOAD_i32_4_4($1, 196) - 1 | 0);
  label$4 : {
   if (!$4) {
    break label$4
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 12196)) {
    break label$4
   }
   SAFE_HEAP_STORE_i32_4_4($0, 12200, 1);
   SAFE_HEAP_STORE_i32_1_1($0, 12196, 1);
   SAFE_HEAP_STORE_i64_8_4($0, 12220, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12236, SAFE_HEAP_LOAD_i32_4_4($1 + 344 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($0, 12240, SAFE_HEAP_LOAD_i32_4_4($0, 12244));
   SAFE_HEAP_STORE_i32_1_1($0, 12232, 1);
   SAFE_HEAP_STORE_i32_4_4($0, 12228, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($0, 12204, SAFE_HEAP_LOAD_i32_4_4(0, 71168));
  }
  label$5 : {
   if (!$5) {
    break label$5
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 12196)) {
    break label$5
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 36 | 0, 0);
   if (!$1) {
    break label$5
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
    break label$5
   }
   $4 = fopen($1, 13565);
   if (!$4) {
    break label$5
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   SAFE_HEAP_STORE_i32_4_4($1, 12200, 2);
   SAFE_HEAP_STORE_i32_1_1($1, 12196, 1);
   SAFE_HEAP_STORE_i64_8_4($1, 12220, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 12236, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7080) + 344 | 0, 0));
   SAFE_HEAP_STORE_i32_1_1($1, 12232, 1);
   SAFE_HEAP_STORE_i32_4_4($1, 12228, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($1, 12240, SAFE_HEAP_LOAD_i32_4_4($1, 12244));
   SAFE_HEAP_STORE_i32_4_4($0, 12204, $4);
  }
  label$6 : {
   if (!$6) {
    break label$6
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 12196)) {
    break label$6
   }
   SAFE_HEAP_STORE_i32_4_4($0, 12200, 4);
   SAFE_HEAP_STORE_i32_1_1($0, 12196, 1);
   SAFE_HEAP_STORE_i64_8_4($0, 12220, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12236, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 7080) + 344 | 0, 0));
   SAFE_HEAP_STORE_i32_1_1($0, 12232, 1);
   SAFE_HEAP_STORE_i32_4_4($0, 12228, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($0, 12240, SAFE_HEAP_LOAD_i32_4_4($0, 12244));
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__MarkIniSettingsDirty_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (SAFE_HEAP_LOAD_f32_4_4($0, 12128) <= Math_fround(0.0)) {
   SAFE_HEAP_STORE_f32_4_4($0, 12128, SAFE_HEAP_LOAD_f32_4_4($0 + 28 | 0, 0))
  }
 }
 
 function ImGui__ShowStackToolWindow_28bool__29($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($2, 7300);
  if (!($6 & 2)) {
   SAFE_HEAP_STORE_i32_4_4($2 + 7332 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 7300, $6 | 2);
   SAFE_HEAP_STORE_i32_4_4($2 + 7308 | 0, 0, 4);
   SAFE_HEAP_STORE_f32_4_4($2 + 7336 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6468) * Math_fround(8.0)));
  }
  label$2 : {
   if (!ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(8100, $0, 0)) {
    break label$2
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
   SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
   if ((SAFE_HEAP_LOAD_i32_2_2($0, 150) | 0) > 1) {
    break label$2
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 7120);
   SAFE_HEAP_STORE_i32_4_4($3, 52, SAFE_HEAP_LOAD_i32_4_4($2, 7136));
   SAFE_HEAP_STORE_i32_4_4($3, 48, $0);
   ImGui__Text_28char_20const__2c_20____29(14514, $3 + 48 | 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
   SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
    $1 = SAFE_HEAP_LOAD_f32_4_4($6 + 5492 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
    SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($1 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
   }
   MetricsHelpMarker_28char_20const__29(16681);
   SAFE_HEAP_STORE_i32_4_4($2, 12272, SAFE_HEAP_LOAD_i32_4_4($2, 6984));
   if ((SAFE_HEAP_LOAD_i32_4_4($2 + 12284 | 0, 0) | 0) <= 0) {
    break label$2
   }
   SAFE_HEAP_STORE_i64_8_4($3, 56, 0, 0);
   if (!ImGui__BeginTable_28char_20const__2c_20int_2c_20int_2c_20ImVec2_20const__2c_20float_29(11393, 3, 1920, $3 + 56 | 0, Math_fround(0.0))) {
    break label$2
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($3 + 56 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 6464), SAFE_HEAP_LOAD_f32_4_4($0, 6468), Math_fround(3402823466385288598117041.0e14), Math_fround(-1.0), 15090, 0, 0);
   $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 56) + Math_fround(.9999899864196777));
   label$4 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
     $0 = ~~$1;
     break label$4;
    }
    $0 = -2147483648;
   }
   $1 = Math_fround($0 | 0);
   ImGui__TableSetupColumn_28char_20const__2c_20int_2c_20float_2c_20unsigned_20int_29(12685, 16, $1, 0);
   ImGui__TableSetupColumn_28char_20const__2c_20int_2c_20float_2c_20unsigned_20int_29(15056, 8, Math_fround(0.0), 0);
   ImGui__TableSetupColumn_28char_20const__2c_20int_2c_20float_2c_20unsigned_20int_29(3128, 16, $1, 0);
   ImGui__TableHeadersRow_28_29();
   if ((SAFE_HEAP_LOAD_i32_4_4($2, 12284) | 0) > 0) {
    $0 = 0;
    while (1) {
     $5 = $0 << 6;
     $7 = SAFE_HEAP_LOAD_i32_4_4($2, 12292);
     ImGui__TableNextColumn_28_29();
     $4 = 0;
     $6 = $0;
     if ($0) {
      $4 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($2, 12292) + $5 | 0) + -64 | 0, 0)
     }
     $5 = $5 + $7 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 32, $4);
     ImGui__Text_28char_20const__2c_20____29(14544, $3 + 32 | 0);
     ImGui__TableNextColumn_28_29();
     $0 = 0;
     label$9 : {
      if ($6) {
       break label$9
      }
      $0 = 0;
      if (SAFE_HEAP_LOAD_i32_1_U_1($5, 6) & 255) {
       break label$9
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $9 = SAFE_HEAP_LOAD_i32_4_4($0 + 7064 | 0, 0);
      $4 = $9;
      $10 = SAFE_HEAP_LOAD_i32_4_4($0, 7056);
      $0 = $10;
      if ($0) {
       while (1) {
        $8 = $0 >>> 1 | 0;
        $11 = ($8 << 3) + $4 | 0;
        $12 = SAFE_HEAP_LOAD_i32_4_4($11, 0) >>> 0 < $7 >>> 0;
        $4 = $12 ? $11 + 8 | 0 : $4;
        $0 = $12 ? $0 + ($8 ^ -1) | 0 : $8;
        if ($0) {
         continue
        }
        break;
       }
      }
      $0 = 0;
      if (($4 | 0) == (($10 << 3) + $9 | 0)) {
       break label$9
      }
      $0 = 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != ($7 | 0)) {
       break label$9
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
     }
     label$15 : {
      if ($0) {
       SAFE_HEAP_STORE_i32_4_4($3, 16, SAFE_HEAP_LOAD_i32_4_4($0, 0));
       ImGui__Text_28char_20const__2c_20____29(13947, $3 + 16 | 0);
       break label$15;
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($5, 5)) {
       ImGui__TextUnformatted_28char_20const__2c_20char_20const__29($5 + 6 | 0);
       break label$15;
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 12276) | 0) < (SAFE_HEAP_LOAD_i32_4_4($2, 12284) | 0)) {
       break label$15
      }
      ImGui__TextUnformatted_28char_20const__2c_20char_20const__29(15508);
     }
     ImGui__TableNextColumn_28_29();
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
     ImGui__Text_28char_20const__2c_20____29(14544, $3);
     if (($6 | 0) == (SAFE_HEAP_LOAD_i32_4_4($2, 12284) - 1 | 0)) {
      $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $1 = SAFE_HEAP_LOAD_f32_4_4($5 + 6004 | 0, 0);
      $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
      label$19 : {
       if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
        $0 = ~~$1;
        break label$19;
       }
       $0 = -2147483648;
      }
      $4 = $0 << 8;
      $1 = SAFE_HEAP_LOAD_f32_4_4($5 + 6e3 | 0, 0);
      $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
      label$21 : {
       if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
        $0 = ~~$1;
        break label$21;
       }
       $0 = -2147483648;
      }
      $4 = $0 | $4;
      $1 = SAFE_HEAP_LOAD_f32_4_4($5 + 6008 | 0, 0);
      $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
      label$23 : {
       if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
        $0 = ~~$1;
        break label$23;
       }
       $0 = -2147483648;
      }
      $4 = $4 | $0 << 16;
      $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 6012 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($5, 5416));
      $1 = Math_fround(Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * Math_fround(255.0)) + Math_fround(.5));
      label$25 : {
       if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
        $0 = ~~$1;
        break label$25;
       }
       $0 = -2147483648;
      }
      ImGui__TableSetBgColor_28int_2c_20unsigned_20int_2c_20int_29(3, $4 | $0 << 24, -1);
     }
     $0 = $6 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 12284) | 0) > ($0 | 0)) {
      continue
     }
     break;
    };
   }
   ImGui__EndTable_28_29();
  }
  ImGui__End_28_29();
  __stack_pointer = $3 - -64 | 0;
 }
 
 function MetricsHelpMarker_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0);
  ImGui__TextDisabled_28char_20const__2c_20____29(18622, 0);
  if (ImGui__IsItemHovered_28int_29(0)) {
   ImGui__BeginTooltipEx_28int_2c_20int_29(0);
   ImGui__PushTextWrapPos_28float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6468) * Math_fround(35.0)));
   ImGui__TextUnformatted_28char_20const__2c_20char_20const__29($0);
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
   SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 412 | 0, 0);
   $1 = $0 + 404 | 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0;
   $4 = SAFE_HEAP_LOAD_f32_4_4($3 + ($2 << 2) | 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
   SAFE_HEAP_STORE_f32_4_4($0 + 388 | 0, 0, $4);
   ImGui__End_28_29();
  }
 }
 
 function ImGui__ShowMetricsWindow_28bool__29__Funcs__GetTableRect_28ImGuiTable__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
  folding_inner2 : {
   folding_inner1 : {
    folding_inner0 : {
     label$1 : {
      switch ($2 | 0) {
      case 0:
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 212), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 220 | 0, 0), i64toi32_i32$HIGH_BITS);
       return;
      case 1:
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 228), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 236 | 0, 0), i64toi32_i32$HIGH_BITS);
       return;
      case 2:
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 244), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 252 | 0, 0), i64toi32_i32$HIGH_BITS);
       return;
      case 3:
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 324), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 332 | 0, 0), i64toi32_i32$HIGH_BITS);
       return;
      case 4:
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 260), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 268 | 0, 0), i64toi32_i32$HIGH_BITS);
       return;
      case 5:
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 276), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 284 | 0, 0), i64toi32_i32$HIGH_BITS);
       return;
      case 6:
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($3, 104) | 0;
       $6 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
       $4 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
       $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 264 | 0, 0);
       SAFE_HEAP_STORE_f32_4_4($0 + 12 | 0, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($1, 180)));
       break folding_inner1;
      case 7:
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($3, 104) | 0;
       $6 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
       $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 248 | 0, 0);
       $5 = SAFE_HEAP_LOAD_f32_4_4($2, 56);
       SAFE_HEAP_STORE_f32_4_4($0 + 12 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($1 + 256 | 0, 0));
       SAFE_HEAP_STORE_f32_4_4($0, 8, $5);
       SAFE_HEAP_STORE_f32_4_4($0, 4, $4);
       break folding_inner2;
      case 8:
       $1 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($3, 104) | 0;
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 32), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 40 | 0, 0), i64toi32_i32$HIGH_BITS);
       return;
      case 9:
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($3, 104) | 0;
       $6 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
       $4 = SAFE_HEAP_LOAD_f32_4_4($2, 72);
       break folding_inner0;
      case 10:
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($3, 104) | 0;
       $6 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
       $4 = SAFE_HEAP_LOAD_f32_4_4($2, 76);
       break folding_inner0;
      case 11:
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($3, 104) | 0;
       $6 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
       $4 = SAFE_HEAP_LOAD_f32_4_4($2, 64);
       break folding_inner0;
      case 12:
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($3, 104) | 0;
       $6 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
       $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 264 | 0, 0);
       $5 = SAFE_HEAP_LOAD_f32_4_4($2, 68);
       $7 = SAFE_HEAP_LOAD_f32_4_4($1, 184);
       SAFE_HEAP_STORE_f32_4_4($0 + 12 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($1 + 272 | 0, 0));
       SAFE_HEAP_STORE_f32_4_4($0, 8, $5);
       SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($4 + $7));
       break folding_inner2;
      default:
       break label$1;
      };
     }
     SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, 0, 0);
     return;
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 264 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($0 + 12 | 0, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($1, 184)));
   }
   SAFE_HEAP_STORE_f32_4_4($0, 8, $4);
   SAFE_HEAP_STORE_f32_4_4($0, 4, $5);
  }
  SAFE_HEAP_STORE_f32_4_4($0, 0, $6);
 }
 
 function ImGui__DebugNodeWindow_28ImGuiWindow__2c_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
  $2 = __stack_pointer - 400 | 0;
  __stack_pointer = $2;
  label$1 : {
   if (!$0) {
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
    ImGui__BulletText_28char_20const__2c_20____29(14873, $2);
    break label$1;
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $7 = (SAFE_HEAP_LOAD_i32_4_4($5, 7508) | 0) == ($0 | 0);
   $3 = 19354;
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($0, 139);
   if (!$4) {
    ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, $5 + 5632 | 0);
    $3 = 17707;
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 376, $3);
   SAFE_HEAP_STORE_i32_4_4($2, 372, $5);
   SAFE_HEAP_STORE_i32_4_4($2, 368, $1);
   $5 = ImGui__TreeNodeEx_28char_20const__2c_20int_2c_20char_20const__2c_20____29($1, $7, 5679, $2 + 368 | 0);
   if (!$4) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $3 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 7396), 20) + SAFE_HEAP_LOAD_i32_4_4($1 + 7404 | 0, 0) | 0) - 20 | 0;
    $7 = (SAFE_HEAP_LOAD_i32_4_4($3, 0) << 4) + $1 | 0;
    SAFE_HEAP_STORE_i64_8_4($7 + 5624 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 12 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($7 + 5616 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 4), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($1, 7396, SAFE_HEAP_LOAD_i32_4_4($1, 7396) - 1 | 0);
   }
   if (!(!$4 | !ImGui__IsItemHovered_28int_29(0))) {
    $1 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
    $6 = SAFE_HEAP_LOAD_f32_4_4($0, 20);
    $8 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
    SAFE_HEAP_STORE_f32_4_4($2, 396, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0)));
    SAFE_HEAP_STORE_f32_4_4($2, 392, Math_fround($8 + $6));
    ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($1, $0 + 12 | 0, $2 + 392 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
   }
   if (!$5) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 804)) {
    ImGui__TextDisabled_28char_20const__2c_20____29(17230, 0)
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   ImGui__DebugNodeDrawList_28ImGuiWindow__2c_20ImDrawList_20const__2c_20char_20const__29($0, SAFE_HEAP_LOAD_i32_4_4($0, 580));
   $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 40 | 0, 0);
   $9 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   $11 = SAFE_HEAP_LOAD_f32_4_4($0, 20);
   $12 = SAFE_HEAP_LOAD_f32_4_4($0, 36);
   $13 = SAFE_HEAP_LOAD_f32_4_4($0, 44);
   SAFE_HEAP_STORE_f64_8_8($2 + 360 | 0, 0, +SAFE_HEAP_LOAD_f32_4_4($0 + 48 | 0, 0));
   $3 = $2 + 304 | 0;
   SAFE_HEAP_STORE_f64_8_8($3 + 48 | 0, 0, +$13);
   SAFE_HEAP_STORE_f64_8_8($3 + 40 | 0, 0, +$10);
   SAFE_HEAP_STORE_f64_8_8($3 + 32 | 0, 0, +$12);
   SAFE_HEAP_STORE_f64_8_8($3 + 24 | 0, 0, +$8);
   SAFE_HEAP_STORE_f64_8_8($3 + 16 | 0, 0, +$11);
   SAFE_HEAP_STORE_f64_8_8($2, 312, +$6);
   SAFE_HEAP_STORE_f64_8_8($2, 304, +$9);
   ImGui__BulletText_28char_20const__2c_20____29(18207, $3);
   $3 = $2 + 256 | 0;
   SAFE_HEAP_STORE_i32_4_4($3 + 36 | 0, 0, $1 & 64 ? 10030 : 19354);
   SAFE_HEAP_STORE_i32_4_4($3 + 32 | 0, 0, $1 & 262144 ? 4082 : 19354);
   SAFE_HEAP_STORE_i32_4_4($2 + 284 | 0, 0, $1 & 512 ? 4128 : 19354);
   SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, $1 & 256 ? 19057 : 19354);
   SAFE_HEAP_STORE_i32_4_4($2 + 276 | 0, 0, $1 & 268435456 ? 19046 : 19354);
   SAFE_HEAP_STORE_i32_4_4($3 + 16 | 0, 0, $1 & 134217728 ? 19090 : 19354);
   SAFE_HEAP_STORE_i32_4_4($2, 268, $1 & 67108864 ? 19074 : 19354);
   SAFE_HEAP_STORE_i32_4_4($2, 264, $1 & 33554432 ? 19081 : 19354);
   SAFE_HEAP_STORE_i32_4_4($2, 260, $1 & 16777216 ? 19128 : 19354);
   SAFE_HEAP_STORE_i32_4_4($2, 256, $1);
   ImGui__BulletText_28char_20const__2c_20____29(18626, $3);
   $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 100 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($0, 88);
   $9 = SAFE_HEAP_LOAD_f32_4_4($0, 96);
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 136);
   $1 = $2 + 208 | 0;
   SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($0, 137) ? 14127 : 19354);
   SAFE_HEAP_STORE_i32_4_4($1 + 32 | 0, 0, $3 ? 14745 : 19354);
   SAFE_HEAP_STORE_f64_8_8($1 + 24 | 0, 0, +$8);
   SAFE_HEAP_STORE_f64_8_8($1 + 16 | 0, 0, +$6);
   SAFE_HEAP_STORE_f64_8_8($2, 216, +$9);
   SAFE_HEAP_STORE_f64_8_8($2, 208, +$10);
   ImGui__BulletText_28char_20const__2c_20____29(5472, $1);
   $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 140);
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 139);
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($0, 138);
   if ($3 | $4) {
    $5 = SAFE_HEAP_LOAD_i32_2_2($0, 154)
   } else {
    $5 = -1
   }
   SAFE_HEAP_STORE_i32_4_4($2, 204, $5);
   SAFE_HEAP_STORE_i32_4_4($2, 200, $1);
   SAFE_HEAP_STORE_i32_4_4($2, 196, $3);
   SAFE_HEAP_STORE_i32_4_4($2, 192, $4);
   ImGui__BulletText_28char_20const__2c_20____29(13013, $2 + 192 | 0);
   $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 144);
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 145);
   $4 = SAFE_HEAP_LOAD_i32_1_1($0, 172);
   $5 = SAFE_HEAP_LOAD_i32_1_1($0, 173);
   $7 = $2 + 160 | 0;
   SAFE_HEAP_STORE_i32_4_4($7 + 16 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($0, 143));
   SAFE_HEAP_STORE_i32_4_4($2, 172, $5);
   SAFE_HEAP_STORE_i32_4_4($2, 168, $4);
   SAFE_HEAP_STORE_i32_4_4($2, 164, $3);
   SAFE_HEAP_STORE_i32_4_4($2, 160, $1);
   ImGui__BulletText_28char_20const__2c_20____29(13075, $7);
   $1 = $2 + 96 | 0;
   $5 = $1 + 32 | 0;
   $7 = $1 + 24 | 0;
   $1 = 0;
   while (1) {
    $3 = $1;
    $4 = SAFE_HEAP_LOAD_i32_4_4((($1 << 2) + $0 | 0) + 756 | 0, 0);
    $1 = ($1 << 4) + $0 | 0;
    $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 772 | 0, 0);
    $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 768 | 0, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($1 + 764 | 0, 0);
    $8 = SAFE_HEAP_LOAD_f32_4_4($1 + 776 | 0, 0);
    label$10 : {
     if (!(!($9 >= $8) | !($6 >= $8))) {
      SAFE_HEAP_STORE_i32_4_4($2, 148, $4);
      SAFE_HEAP_STORE_i32_4_4($2, 144, $3);
      ImGui__BulletText_28char_20const__2c_20____29(14491, $2 + 144 | 0);
      break label$10;
     }
     SAFE_HEAP_STORE_f64_8_8($5, 0, +$8);
     SAFE_HEAP_STORE_f64_8_8($7, 0, +$10);
     $1 = $2 + 96 | 0;
     SAFE_HEAP_STORE_f64_8_8($1 + 16 | 0, 0, +$6);
     SAFE_HEAP_STORE_i32_4_4($2, 100, $4);
     SAFE_HEAP_STORE_i32_4_4($2, 96, $3);
     SAFE_HEAP_STORE_f64_8_8($2, 104, +$9);
     ImGui__BulletText_28char_20const__2c_20____29(18157, $1);
     if (!ImGui__IsItemHovered_28int_29(0)) {
      break label$10
     }
     $1 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
     $11 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
     $12 = $6;
     $6 = SAFE_HEAP_LOAD_f32_4_4($0, 16);
     SAFE_HEAP_STORE_f32_4_4($2, 396, Math_fround($12 + $6));
     SAFE_HEAP_STORE_f32_4_4($2, 392, Math_fround($9 + $11));
     SAFE_HEAP_STORE_f32_4_4($2, 388, Math_fround($8 + $6));
     SAFE_HEAP_STORE_f32_4_4($2, 384, Math_fround($10 + $11));
     ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($1, $2 + 392 | 0, $2 + 384 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
    }
    $1 = $3 + 1 | 0;
    if (!$3) {
     continue
    }
    break;
   };
   $1 = SAFE_HEAP_LOAD_i32_2_2($0 + 296 | 0, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 752);
   if ($3) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0)
   } else {
    $3 = 14877
   }
   SAFE_HEAP_STORE_i32_4_4($2, 84, $3);
   SAFE_HEAP_STORE_i32_4_4($2, 80, $1);
   ImGui__BulletText_28char_20const__2c_20____29(5760, $2 + 80 | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 736);
   if (($0 | 0) != ($1 | 0)) {
    ImGui__DebugNodeWindow_28ImGuiWindow__2c_20char_20const__29($1, 1685)
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
   if ($1) {
    ImGui__DebugNodeWindow_28ImGuiWindow__2c_20char_20const__29($1, 1696)
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 352 | 0, 0);
   label$16 : {
    if (($1 | 0) <= 0) {
     break label$16
    }
    SAFE_HEAP_STORE_i32_4_4($2, 68, $1);
    SAFE_HEAP_STORE_i32_4_4($2, 64, 3951);
    if (!ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(3951, 18512, $2 - -64 | 0)) {
     break label$16
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 352);
    if (($1 | 0) > 0) {
     while (1) {
      $3 = $1;
      $1 = $1 - 1 | 0;
      $4 = $1 << 2;
      ImGui__PushID_28void_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 360) + $4 | 0, 0));
      ImGui__DebugNodeWindow_28ImGuiWindow__2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 360) + $4 | 0, 0), 1800);
      $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
      SAFE_HEAP_STORE_i32_4_4($4, 196, SAFE_HEAP_LOAD_i32_4_4($4, 196) - 1 | 0);
      if (($3 | 0) > 1) {
       continue
      }
      break;
     }
    }
    ImGui__TreePop_28_29();
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 560);
   label$19 : {
    if (($1 | 0) <= 0) {
     break label$19
    }
    SAFE_HEAP_STORE_i32_4_4($2, 48, $1);
    if (!ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(4753, 18456, $2 + 48 | 0)) {
     break label$19
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 560) | 0) > 0) {
     $1 = 0;
     while (1) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 568) + Math_imul($1, 124) | 0;
      $3 = __stack_pointer - 80 | 0;
      __stack_pointer = $3;
      $5 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      $7 = SAFE_HEAP_LOAD_i32_4_4($4, 16);
      SAFE_HEAP_STORE_i32_4_4($3, 72, SAFE_HEAP_LOAD_i32_4_4($4, 4));
      SAFE_HEAP_STORE_i32_4_4($3, 68, $7);
      SAFE_HEAP_STORE_i32_4_4($3, 64, $5);
      if (ImGui__TreeNode_28void_20const__2c_20char_20const__2c_20____29($5, 14643, $3 - -64 | 0)) {
       $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
       $5 = $3 + 32 | 0;
       $8 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
       SAFE_HEAP_STORE_f64_8_8($5 + 16 | 0, 0, +$8);
       SAFE_HEAP_STORE_f64_8_8($3, 40, +$6);
       SAFE_HEAP_STORE_f64_8_8($3, 32, +Math_fround($8 - $6));
       ImGui__BulletText_28char_20const__2c_20____29(18286, $5);
       if ((SAFE_HEAP_LOAD_i32_4_4($4, 92) | 0) > 0) {
        $7 = $3 + 16 | 0;
        $5 = 0;
        while (1) {
         $6 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 100) + Math_imul($5, 28) | 0, 0);
         SAFE_HEAP_STORE_f64_8_8($7, 0, +Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 24) - SAFE_HEAP_LOAD_f32_4_4($4, 20)) * $6));
         SAFE_HEAP_STORE_f64_8_8($3, 8, +$6);
         SAFE_HEAP_STORE_i32_4_4($3, 0, $5);
         ImGui__BulletText_28char_20const__2c_20____29(17719, $3);
         $5 = $5 + 1 | 0;
         if ((SAFE_HEAP_LOAD_i32_4_4($4, 92) | 0) > ($5 | 0)) {
          continue
         }
         break;
        };
       }
       ImGui__TreePop_28_29();
      }
      __stack_pointer = $3 + 80 | 0;
      $1 = $1 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 560) | 0) > ($1 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__TreePop_28_29();
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 548);
   SAFE_HEAP_STORE_i32_4_4($2, 36, $1);
   SAFE_HEAP_STORE_i32_4_4($2, 32, 11574);
   SAFE_HEAP_STORE_i32_4_4($2, 40, $1 << 3);
   if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(11574, 5090, $2 + 32 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 548) | 0) > 0) {
     $1 = 0;
     while (1) {
      SAFE_HEAP_STORE_i64_8_8($2, 16, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 556) + ($1 << 3) | 0, 0), i64toi32_i32$HIGH_BITS);
      ImGui__BulletText_28char_20const__2c_20____29(1024, $2 + 16 | 0);
      $1 = $1 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 548) | 0) > ($1 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__TreePop_28_29();
   }
   ImGui__TreePop_28_29();
  }
  __stack_pointer = $2 + 400 | 0;
 }
 
 function ImGui__ShowMetricsWindow_28bool__29__Func__WindowComparerByBeginOrder_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return SAFE_HEAP_LOAD_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($0, 0), 154) - SAFE_HEAP_LOAD_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($1, 0), 154) | 0;
 }
 
 function ImGui__DebugNodeWindowsListByBeginStackParent_28ImGuiWindow___2c_20int_2c_20ImGuiWindow__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  if (($1 | 0) > 0) {
   while (1) {
    $7 = ($9 << 2) + $0 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 732) | 0) == ($2 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_2_2($4, 154));
     $3 = $6 + 16 | 0;
     ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3, 20, 1793, $6);
     ImGui__DebugNodeWindow_28ImGuiWindow__2c_20char_20const__29($4, $3);
     $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $3 = SAFE_HEAP_LOAD_i32_4_4($8, 7080);
     SAFE_HEAP_STORE_i32_1_1($3, 140, 1);
     $5 = SAFE_HEAP_LOAD_f32_4_4($8 + 5524 | 0, 0);
     $8 = $3 + 272 | 0;
     $5 = Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($8, 0));
     SAFE_HEAP_STORE_f32_4_4($8, 0, $5);
     SAFE_HEAP_STORE_f32_4_4($3, 208, Math_fround(Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 12)) + SAFE_HEAP_LOAD_f32_4_4($3 + 276 | 0, 0)));
     ImGui__DebugNodeWindowsListByBeginStackParent_28ImGuiWindow___2c_20int_2c_20ImGuiWindow__29($7 + 4 | 0, ($9 ^ -1) + $1 | 0, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
     SAFE_HEAP_STORE_i32_1_1($3, 140, 1);
     $7 = $3 + 272 | 0;
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 0) - SAFE_HEAP_LOAD_f32_4_4($4 + 5524 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($7, 0, $5);
     SAFE_HEAP_STORE_f32_4_4($3, 208, Math_fround(Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 12)) + SAFE_HEAP_LOAD_f32_4_4($3 + 276 | 0, 0)));
    }
    $9 = $9 + 1 | 0;
    if (($9 | 0) != ($1 | 0)) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $6 + 48 | 0;
 }
 
 function ImGui__DebugNodeDrawList_28ImGuiWindow__2c_20ImDrawList_20const__2c_20char_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0;
  $2 = __stack_pointer - 560 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  label$1 : {
   if (($3 | 0) <= 0) {
    break label$1
   }
   $5 = $3 - 1 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul($5, 40) | 0;
   if (SAFE_HEAP_LOAD_i32_4_4($4, 28)) {
    break label$1
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 32) ? $3 : $5;
  }
  $14 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 48);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 24);
  $10 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
  $15 = $3;
  SAFE_HEAP_STORE_i32_4_4($2 + 176 | 0, 0, $3);
  SAFE_HEAP_STORE_i32_4_4($2, 172, $10);
  SAFE_HEAP_STORE_i32_4_4($2, 168, $4);
  SAFE_HEAP_STORE_i32_4_4($2, 160, 2602);
  SAFE_HEAP_STORE_i32_4_4($2, 164, $5 ? $5 : 19354);
  $5 = ImGui__TreeNode_28void_20const__2c_20char_20const__2c_20____29($1, 5292, $2 + 160 | 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  SAFE_HEAP_STORE_i32_1_1($3, 140, 1);
  label$4 : {
   label$5 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 580) | 0) == ($1 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($3, 140, 1);
     if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 143)) {
      $6 = SAFE_HEAP_LOAD_f32_4_4($4 + 5492 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($3 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($3 + 220 | 0, 0));
      SAFE_HEAP_STORE_i64_8_4($3 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_f32_4_4($3 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($3 + 268 | 0, 0));
      SAFE_HEAP_STORE_f32_4_4($3, 208, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($3 + 216 | 0, 0)));
     }
     SAFE_HEAP_STORE_i64_8_4($2, 264, 1053609165, 1065353216);
     SAFE_HEAP_STORE_i64_8_4($2, 256, 1065353216, 1053609165);
     ImGui__TextColored_28ImVec4_20const__2c_20char_20const__2c_20____29($2 + 256 | 0, 14915, 0);
     if ($5) {
      break label$5
     }
     break label$4;
    }
    $7 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4 + 7504 | 0, 0), 0), 1, 11768);
    label$8 : {
     if (!$0) {
      break label$8
     }
     if (!$7 | !ImGui__IsItemHovered_28int_29(0)) {
      break label$8
     }
     $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($2, 256, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 12) + SAFE_HEAP_LOAD_f32_4_4($0, 20)));
     SAFE_HEAP_STORE_f32_4_4($2, 260, Math_fround($8 + $6));
     ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($7, $0 + 12 | 0, $2 + 256 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
    }
    if (!$5) {
     break label$4
    }
    label$9 : {
     if (!$0) {
      break label$9
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
      break label$9
     }
     ImGui__TextDisabled_28char_20const__2c_20____29(18964, 0);
    }
    if (($15 | 0) <= 0) {
     break label$5
    }
    $17 = $2 + 556 | 0;
    $0 = $2 + 96 | 0;
    $18 = $0 + 32 | 0;
    $19 = $0 + 24 | 0;
    $20 = $0 + 16 | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    while (1) {
     $4 = $3;
     $0 = SAFE_HEAP_LOAD_i32_4_4($3, 32);
     label$11 : {
      if ($0) {
       SAFE_HEAP_STORE_i32_4_4($2, 148, SAFE_HEAP_LOAD_i32_4_4($4, 36));
       SAFE_HEAP_STORE_i32_4_4($2, 144, $0);
       ImGui__BulletText_28char_20const__2c_20____29(6997, $2 + 144 | 0);
       break label$11;
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($4, 28);
      $6 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
      $3 = SAFE_HEAP_LOAD_i32_4_4($4, 16);
      $8 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
      $11 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
      SAFE_HEAP_STORE_f64_8_8($18, 0, +SAFE_HEAP_LOAD_f32_4_4($4, 12));
      SAFE_HEAP_STORE_f64_8_8($19, 0, +$11);
      SAFE_HEAP_STORE_f64_8_8($20, 0, +$8);
      SAFE_HEAP_STORE_i32_4_4($2, 100, $3);
      SAFE_HEAP_STORE_f64_8_8($2, 104, +$6);
      SAFE_HEAP_STORE_i32_4_4($2, 96, ($0 >>> 0) / 3 | 0);
      $0 = $2 + 256 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, 300, 18323, $2 + 96 | 0);
      $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
      SAFE_HEAP_STORE_i32_4_4($2, 80, $0);
      $0 = ImGui__TreeNode_28void_20const__2c_20char_20const__2c_20____29(($4 - $3 | 0) / 40 | 0, 5950, $2 + 80 | 0);
      label$13 : {
       if (!ImGui__IsItemHovered_28int_29(0)) {
        break label$13
       }
       $3 = SAFE_HEAP_LOAD_i32_1_U_1($14, 12260);
       label$14 : {
        if (!$3) {
         if (!$7) {
          break label$13
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($14, 12261) & 255) {
          break label$14
         }
         break label$13;
        }
        if (!$7) {
         break label$13
        }
       }
       ImGui__DebugNodeDrawCmdShowMeshAndBoundingBox_28ImDrawList__2c_20ImDrawList_20const__2c_20ImDrawCmd_20const__2c_20bool_2c_20bool_29($7, $1, $4, ($3 | 0) != 0, SAFE_HEAP_LOAD_i32_1_U_1($14, 12261));
      }
      if (!$0) {
       break label$11
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0) <= 0) {
       $12 = 0
      } else {
       $12 = SAFE_HEAP_LOAD_i32_4_4($1, 20)
      }
      $16 = SAFE_HEAP_LOAD_i32_4_4($1, 32) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 20), 20) | 0;
      $0 = SAFE_HEAP_LOAD_i32_4_4($4, 24);
      $3 = SAFE_HEAP_LOAD_i32_4_4($4, 28);
      label$18 : {
       if ($0 + $3 >>> 0 <= $0 >>> 0) {
        $6 = Math_fround(0.0);
        $5 = $0;
        break label$18;
       }
       $6 = Math_fround(0.0);
       while (1) {
        SAFE_HEAP_STORE_i64_8_8($2 + 240 | 0, 0, 0, 0);
        SAFE_HEAP_STORE_i64_8_8($2, 232, 0, 0);
        SAFE_HEAP_STORE_i64_8_8($2, 224, 0, 0);
        $3 = 0;
        while (1) {
         $10 = ($2 + 224 | 0) + ($3 << 3) | 0;
         if ($12) {
          $5 = SAFE_HEAP_LOAD_i32_2_U_2($12 + ($0 << 1) | 0, 0)
         } else {
          $5 = $0
         }
         SAFE_HEAP_STORE_i64_8_8($10, 0, SAFE_HEAP_LOAD_i64_8_4($16 + Math_imul($5, 20) | 0, 0), i64toi32_i32$HIGH_BITS);
         $0 = $0 + 1 | 0;
         $3 = $3 + 1 | 0;
         if (($3 | 0) != 3) {
          continue
         }
         break;
        };
        $11 = $6;
        $13 = SAFE_HEAP_LOAD_f32_4_4($2, 240);
        $6 = SAFE_HEAP_LOAD_f32_4_4($2, 228);
        $8 = SAFE_HEAP_LOAD_f32_4_4($2, 236);
        $21 = Math_fround($13 * Math_fround($6 - $8));
        $22 = SAFE_HEAP_LOAD_f32_4_4($2, 224);
        $13 = $8;
        $8 = SAFE_HEAP_LOAD_f32_4_4($2, 244);
        $6 = Math_fround($11 + Math_fround(Math_fround(Math_abs(Math_fround($21 + Math_fround(Math_fround($22 * Math_fround($13 - $8)) + Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 232) * Math_fround($8 - $6)))))) * Math_fround(.5)));
        $5 = SAFE_HEAP_LOAD_i32_4_4($4, 24);
        $3 = SAFE_HEAP_LOAD_i32_4_4($4, 28);
        if ($5 + $3 >>> 0 > $0 >>> 0) {
         continue
        }
        break;
       };
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($4, 20);
      $10 = $2 + 48 | 0;
      SAFE_HEAP_STORE_f64_8_8($10 + 16 | 0, 0, +$6);
      SAFE_HEAP_STORE_i32_4_4($2, 56, $5);
      SAFE_HEAP_STORE_i32_4_4($2, 52, $0);
      SAFE_HEAP_STORE_i32_4_4($2, 48, $3);
      $0 = $2 + 256 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, 300, 1290, $10);
      SAFE_HEAP_STORE_i64_8_4($2, 224, 0, 0);
      ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($0, 0, 0, $2 + 224 | 0);
      if (!(!$7 | !ImGui__IsItemHovered_28int_29(0))) {
       ImGui__DebugNodeDrawCmdShowMeshAndBoundingBox_28ImDrawList__2c_20ImDrawList_20const__2c_20ImDrawCmd_20const__2c_20bool_2c_20bool_29($7, $1, $4, 1, 0)
      }
      $0 = $2 + 224 | 0;
      ImGuiListClipper__ImGuiListClipper_28_29($0);
      ImGuiListClipper__Begin_28int_2c_20float_29($0, (SAFE_HEAP_LOAD_i32_4_4($4, 28) >>> 0) / 3 | 0, Math_fround(-1.0));
      if (ImGuiListClipper__Step_28_29($0)) {
       while (1) {
        $3 = SAFE_HEAP_LOAD_i32_4_4($2, 224);
        if (($3 | 0) < (SAFE_HEAP_LOAD_i32_4_4($2, 228) | 0)) {
         $5 = SAFE_HEAP_LOAD_i32_4_4($4, 24) + Math_imul($3, 3) | 0;
         while (1) {
          $10 = $3;
          SAFE_HEAP_STORE_i64_8_8($2 + 208 | 0, 0, 0, 0);
          SAFE_HEAP_STORE_i64_8_8($2, 200, 0, 0);
          SAFE_HEAP_STORE_i64_8_8($2, 192, 0, 0);
          $3 = 0;
          $0 = $2 + 256 | 0;
          while (1) {
           $23 = ($2 + 192 | 0) + ($3 << 3) | 0;
           if ($12) {
            $9 = SAFE_HEAP_LOAD_i32_2_U_2($12 + ($5 << 1) | 0, 0)
           } else {
            $9 = $5
           }
           $9 = $16 + Math_imul($9, 20) | 0;
           SAFE_HEAP_STORE_i64_8_8($23, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
           $6 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
           $8 = SAFE_HEAP_LOAD_f32_4_4($9, 4);
           $11 = SAFE_HEAP_LOAD_f32_4_4($9, 8);
           $13 = SAFE_HEAP_LOAD_f32_4_4($9 + 12 | 0, 0);
           SAFE_HEAP_STORE_i32_4_4($2 + 40 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($9, 16));
           SAFE_HEAP_STORE_f64_8_8($2 + 32 | 0, 0, +$13);
           SAFE_HEAP_STORE_f64_8_8($2 + 24 | 0, 0, +$11);
           SAFE_HEAP_STORE_f64_8_8($2 + 16 | 0, 0, +$8);
           SAFE_HEAP_STORE_i32_4_4($2, 0, $3 ? 19150 : 16155);
           SAFE_HEAP_STORE_f64_8_8($2, 8, +$6);
           SAFE_HEAP_STORE_i32_4_4($2, 4, $5);
           $0 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $17 - $0 | 0, 19267, $2) + $0 | 0;
           $5 = $5 + 1 | 0;
           $3 = $3 + 1 | 0;
           if (($3 | 0) != 3) {
            continue
           }
           break;
          };
          SAFE_HEAP_STORE_i64_8_4($2, 184, 0, 0);
          ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($2 + 256 | 0, 0, 0, $2 + 184 | 0);
          label$30 : {
           if (!$7) {
            break label$30
           }
           if (!ImGui__IsItemHovered_28int_29(0)) {
            break label$30
           }
           $0 = SAFE_HEAP_LOAD_i32_4_4($7, 36);
           SAFE_HEAP_STORE_i32_4_4($7, 36, $0 & -2);
           ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($7, $2 + 192 | 0, 3, -16711681, 1, Math_fround(1.0));
           SAFE_HEAP_STORE_i32_4_4($7, 36, $0);
          }
          $3 = $10 + 1 | 0;
          if ((SAFE_HEAP_LOAD_i32_4_4($2, 228) | 0) > ($3 | 0)) {
           continue
          }
          break;
         };
        }
        if (ImGuiListClipper__Step_28_29($2 + 224 | 0)) {
         continue
        }
        break;
       }
      }
      ImGui__TreePop_28_29();
      ImGuiListClipper___ImGuiListClipper_28_29($2 + 224 | 0);
     }
     $3 = $4 + 40 | 0;
     if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul($15, 40) >>> 0) {
      continue
     }
     break;
    };
   }
   ImGui__TreePop_28_29();
  }
  __stack_pointer = $2 + 560 | 0;
 }
 
 function ImGui__DebugNodeDrawCmdShowMeshAndBoundingBox_28ImDrawList__2c_20ImDrawList_20const__2c_20ImDrawCmd_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  $17 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
  $18 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
  $19 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
  $20 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  $21 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
  SAFE_HEAP_STORE_i32_4_4($0, 36, $21 & -2);
  $6 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
  $22 = $6 + SAFE_HEAP_LOAD_i32_4_4($2, 28) | 0;
  if ($6 >>> 0 < $22 >>> 0) {
   $25 = $5 + 32 | 0;
   $9 = Math_fround(3402823466385288598117041.0e14);
   $10 = Math_fround(3402823466385288598117041.0e14);
   $11 = Math_fround(-3402823466385288598117041.0e14);
   $12 = Math_fround(-3402823466385288598117041.0e14);
   while (1) {
    $14 = $12;
    $15 = $11;
    $16 = $6;
    $6 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0) > 0) {
     $6 = SAFE_HEAP_LOAD_i32_4_4($1, 20)
    }
    $23 = $6;
    $6 = SAFE_HEAP_LOAD_i32_4_4($1, 32);
    $13 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
    SAFE_HEAP_STORE_i64_8_8($25, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($5, 24, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($5, 16, 0, 0);
    $26 = $6 + Math_imul($13, 20) | 0;
    $6 = 0;
    $12 = $9;
    $11 = $10;
    $9 = $15;
    $10 = $14;
    while (1) {
     $13 = $16;
     if ($23) {
      $24 = SAFE_HEAP_LOAD_i32_2_U_2(($16 << 1) + $23 | 0, 0)
     } else {
      $24 = $13
     }
     $13 = ($5 + 16 | 0) + ($6 << 3) | 0;
     SAFE_HEAP_STORE_i64_8_8($13, 0, SAFE_HEAP_LOAD_i64_8_4(Math_imul($24, 20) + $26 | 0, 0), i64toi32_i32$HIGH_BITS);
     $16 = $16 + 1 | 0;
     $7 = SAFE_HEAP_LOAD_f32_4_4($13, 0);
     $14 = $12 > $7 ? $7 : $12;
     $12 = $14;
     $8 = SAFE_HEAP_LOAD_f32_4_4($13, 4);
     $15 = $11 > $8 ? $8 : $11;
     $11 = $15;
     $7 = $9 < $7 ? $7 : $9;
     $9 = $7;
     $8 = $10 < $8 ? $8 : $10;
     $10 = $8;
     $6 = $6 + 1 | 0;
     if (($6 | 0) != 3) {
      continue
     }
     break;
    };
    if ($3) {
     ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $5 + 16 | 0, 3, -16711681, 1, Math_fround(1.0))
    }
    $9 = $14;
    $10 = $15;
    $11 = $7;
    $12 = $8;
    $6 = $16;
    if ($22 >>> 0 > $6 >>> 0) {
     continue
    }
    break;
   };
   if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
    $1 = ~~$8
   } else {
    $1 = -2147483648
   }
   $9 = Math_fround($1 | 0);
   if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
    $1 = ~~$7
   } else {
    $1 = -2147483648
   }
   $10 = Math_fround($1 | 0);
   if (Math_fround(Math_abs($15)) < Math_fround(2147483648.0)) {
    $1 = ~~$15
   } else {
    $1 = -2147483648
   }
   $12 = Math_fround($1 | 0);
   if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
    $1 = ~~$14
   } else {
    $1 = -2147483648
   }
   $11 = Math_fround($1 | 0);
  }
  if ($4) {
   if (Math_fround(Math_abs($19)) < Math_fround(2147483648.0)) {
    $1 = ~~$19
   } else {
    $1 = -2147483648
   }
   SAFE_HEAP_STORE_f32_4_4($5, 20, Math_fround($1 | 0));
   if (Math_fround(Math_abs($20)) < Math_fround(2147483648.0)) {
    $1 = ~~$20
   } else {
    $1 = -2147483648
   }
   SAFE_HEAP_STORE_f32_4_4($5, 16, Math_fround($1 | 0));
   if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
    $1 = ~~$17
   } else {
    $1 = -2147483648
   }
   SAFE_HEAP_STORE_f32_4_4($5, 12, Math_fround($1 | 0));
   if (Math_fround(Math_abs($18)) < Math_fround(2147483648.0)) {
    $1 = ~~$18
   } else {
    $1 = -2147483648
   }
   SAFE_HEAP_STORE_f32_4_4($5, 8, Math_fround($1 | 0));
   $1 = $5 + 16 | 0;
   $2 = $5 + 8 | 0;
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $1, $2, -65281, Math_fround(0.0), 0, Math_fround(1.0));
   SAFE_HEAP_STORE_f32_4_4($5, 20, $12);
   SAFE_HEAP_STORE_f32_4_4($5, 16, $11);
   SAFE_HEAP_STORE_f32_4_4($5, 12, $9);
   SAFE_HEAP_STORE_f32_4_4($5, 8, $10);
   ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $1, $2, -256, Math_fround(0.0), 0, Math_fround(1.0));
  }
  SAFE_HEAP_STORE_i32_4_4($0, 36, $21);
  __stack_pointer = $5 + 48 | 0;
 }
 
 function MallocWrapper_28unsigned_20long_2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return dlmalloc($0) | 0;
 }
 
 function FreeWrapper_28void__2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  dlfree($0);
 }
 
 function ImGui__ShowAboutWindow_28bool__29($0) {
  
 }
 
 function ImGui__ShowUserGuide_28_29() {
  
 }
 
 function ImGui__StyleColorsDark_28ImGuiStyle__29($0) {
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0);
  if (!$0) {
   $0 = ImGui__GetStyle_28_29()
  }
  SAFE_HEAP_STORE_i64_8_4($0, 200, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 240 | 0, 0, 1031127695, 1064346583);
  SAFE_HEAP_STORE_i64_8_4($0 + 232 | 0, 0, 1031127695, 1031127695);
  SAFE_HEAP_STORE_i64_8_4($0 + 224 | 0, 0, 1056964608, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 216 | 0, 0, 1056964608, 1056964608);
  SAFE_HEAP_STORE_i64_8_4($0 + 208 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 256 | 0, 0, 0, 0);
  $8 = $0 + 288 | 0;
  SAFE_HEAP_STORE_i64_8_4($8, 0, 1056964608, 1056964608);
  $9 = $0 + 280 | 0;
  SAFE_HEAP_STORE_i64_8_4($9, 0, 1054615798, 1054615798);
  SAFE_HEAP_STORE_i64_8_4($0 + 272 | 0, 0, 1034147594, 1064346583);
  SAFE_HEAP_STORE_i64_8_4($0 + 264 | 0, 0, 1034147594, 1034147594);
  SAFE_HEAP_STORE_i64_8_4($0 + 296 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 304 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 312 | 0, 0, 1042536202, 1049918177);
  SAFE_HEAP_STORE_i64_8_4($0 + 320 | 0, 0, 1056293519, 1057635697);
  SAFE_HEAP_STORE_i64_8_4($0 + 328 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 336 | 0, 0, 1065017672, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 344 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 352 | 0, 0, 1065017672, 1059816735);
  $10 = $0 + 360 | 0;
  SAFE_HEAP_STORE_i64_8_4($10, 0, 1025758986, 1025758986);
  $11 = $0 + 368 | 0;
  SAFE_HEAP_STORE_i64_8_4($11, 0, 1025758986, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 376 | 0, 0, 1042536202, 1049918177);
  $12 = $0 + 384 | 0;
  SAFE_HEAP_STORE_i64_8_4($12, 0, 1056293519, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 392 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 400 | 0, 0, 0, 1057132380);
  SAFE_HEAP_STORE_i64_8_4($0 + 408 | 0, 0, 1041194025, 1041194025);
  SAFE_HEAP_STORE_i64_8_4($0 + 416 | 0, 0, 1041194025, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 424 | 0, 0, 1017370378, 1017370378);
  SAFE_HEAP_STORE_i64_8_4($0 + 432 | 0, 0, 1017370378, 1057467924);
  SAFE_HEAP_STORE_i64_8_4($0 + 440 | 0, 0, 1050589266, 1050589266);
  SAFE_HEAP_STORE_i64_8_4($0 + 448 | 0, 0, 1050589266, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 456 | 0, 0, 1053944709, 1053944709);
  SAFE_HEAP_STORE_i64_8_4($0 + 464 | 0, 0, 1053944709, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 472 | 0, 0, 1057132380, 1057132380);
  SAFE_HEAP_STORE_i64_8_4($0 + 480 | 0, 0, 1057132380, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 488 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 496 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 504 | 0, 0, 1047904911, 1057300152);
  SAFE_HEAP_STORE_i64_8_4($0 + 512 | 0, 0, 1063339950, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 520 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 528 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 536 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 544 | 0, 0, 1065017672, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 552 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 560 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 568 | 0, 0, 1031127695, 1057467924);
  SAFE_HEAP_STORE_i64_8_4($0 + 576 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 584 | 0, 0, 1048911544, 1058474557);
  $13 = $0 + 592 | 0;
  SAFE_HEAP_STORE_i64_8_4($13, 0, 1065017672, 1050589266);
  $14 = $0 + 600 | 0;
  SAFE_HEAP_STORE_i64_8_4($14, 0, 1048911544, 1058474557);
  $15 = $0 + 608 | 0;
  SAFE_HEAP_STORE_i64_8_4($15, 0, 1065017672, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 616 | 0, 0, 1048911544, 1058474557);
  $16 = $0 + 624 | 0;
  SAFE_HEAP_STORE_i64_8_4($16, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 720 | 0, 0, 1065017672, 1064514355);
  SAFE_HEAP_STORE_i64_8_4($0 + 712 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 704 | 0, 0, 1065017672, 1059816735);
  SAFE_HEAP_STORE_i64_8_4($0 + 696 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 688 | 0, 0, 1065017672, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 680 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 672 | 0, 0, 1061158912, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 664 | 0, 0, 1036831949, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 656 | 0, 0, 1061158912, 1061662228);
  SAFE_HEAP_STORE_i64_8_4($0 + 648 | 0, 0, 1036831949, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 640 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 632 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 380 | 0, 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 588 | 0, 0);
  $2 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($13, 0);
  $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 388 | 0, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 596 | 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0 + 728 | 0, 0, 1043878379);
  SAFE_HEAP_STORE_i32_4_4($0 + 760 | 0, 0, 1045220556);
  SAFE_HEAP_STORE_i64_8_4($0 + 752 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($15, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 744 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($14, 0), i64toi32_i32$HIGH_BITS);
  $7 = Math_fround($7 + Math_fround(Math_fround($3 - $7) * Math_fround(.800000011920929)));
  SAFE_HEAP_STORE_f32_4_4($0 + 740 | 0, 0, $7);
  $6 = Math_fround($6 + Math_fround(Math_fround($2 - $6) * Math_fround(.800000011920929)));
  SAFE_HEAP_STORE_f32_4_4($0 + 736 | 0, 0, $6);
  $5 = Math_fround($5 + Math_fround(Math_fround($1 - $5) * Math_fround(.800000011920929)));
  SAFE_HEAP_STORE_f32_4_4($0 + 732 | 0, 0, $5);
  $4 = $3;
  $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 628 | 0, 0);
  $3 = Math_fround(Math_fround(Math_fround($4 - $3) * Math_fround(.6000000238418579)) + $3);
  SAFE_HEAP_STORE_f32_4_4($0 + 772 | 0, 0, $3);
  $4 = $2;
  $2 = SAFE_HEAP_LOAD_f32_4_4($16, 0);
  $2 = Math_fround(Math_fround(Math_fround($4 - $2) * Math_fround(.6000000238418579)) + $2);
  SAFE_HEAP_STORE_f32_4_4($0 + 768 | 0, 0, $2);
  $4 = $1;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 620 | 0, 0);
  $1 = Math_fround(Math_fround(Math_fround($4 - $1) * Math_fround(.6000000238418579)) + $1);
  SAFE_HEAP_STORE_f32_4_4($0 + 764 | 0, 0, $1);
  $17 = SAFE_HEAP_LOAD_f32_4_4($0 + 364 | 0, 0);
  $18 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 372 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 788 | 0, 0, Math_fround(Math_fround(Math_fround($4 - $7) * Math_fround(.800000011920929)) + $7));
  SAFE_HEAP_STORE_f32_4_4($0 + 784 | 0, 0, Math_fround(Math_fround(Math_fround($18 - $6) * Math_fround(.800000011920929)) + $6));
  SAFE_HEAP_STORE_f32_4_4($0 + 780 | 0, 0, Math_fround(Math_fround(Math_fround($17 - $5) * Math_fround(.800000011920929)) + $5));
  SAFE_HEAP_STORE_i32_4_4($0 + 776 | 0, 0, 1032536982);
  SAFE_HEAP_STORE_i64_8_4($0 + 808 | 0, 0, 1058810102, 1058810102);
  SAFE_HEAP_STORE_i64_8_4($0 + 816 | 0, 0, 1058810102, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 824 | 0, 0, 1065353216, 1054615798);
  SAFE_HEAP_STORE_i64_8_4($0 + 832 | 0, 0, 1051931443, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 840 | 0, 0, 1063675494, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 848 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 856 | 0, 0, 1065353216, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 864 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 872 | 0, 0, 1044549468, 1044549468);
  SAFE_HEAP_STORE_i64_8_4($0 + 880 | 0, 0, 1045220557, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 888 | 0, 0, 1050589266, 1050589266);
  SAFE_HEAP_STORE_i64_8_4($0 + 896 | 0, 0, 1051931443, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 904 | 0, 0, 1047233823, 1047233823);
  SAFE_HEAP_STORE_i64_8_4($0 + 912 | 0, 0, 1048576e3, 1065353216);
  SAFE_HEAP_STORE_f32_4_4($0 + 796 | 0, 0, Math_fround(Math_fround(Math_fround($17 - $1) * Math_fround(.4000000059604645)) + $1));
  SAFE_HEAP_STORE_f32_4_4($0 + 800 | 0, 0, Math_fround(Math_fround(Math_fround($18 - $2) * Math_fround(.4000000059604645)) + $2));
  SAFE_HEAP_STORE_f32_4_4($0 + 804 | 0, 0, Math_fround(Math_fround(Math_fround($4 - $3) * Math_fround(.4000000059604645)) + $3));
  SAFE_HEAP_STORE_f32_4_4($0 + 792 | 0, 0, Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 0) + Math_fround(-.19999998807907104)) * Math_fround(.4000000059604645)) + Math_fround(.19999998807907104)));
  SAFE_HEAP_STORE_i64_8_4($0 + 928 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 920 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 1040 | 0, 0, 1061997773, 1051931443);
  SAFE_HEAP_STORE_i64_8_4($0 + 1032 | 0, 0, 1061997773, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 1024 | 0, 0, 1061997773, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 1016 | 0, 0, 1061997773, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 1008 | 0, 0, 1065353216, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 1e3 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 992 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 984 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 976 | 0, 0, 0, 1063675494);
  SAFE_HEAP_STORE_i64_8_4($0 + 968 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 960 | 0, 0, 1065017672, 1051931443);
  SAFE_HEAP_STORE_i64_8_4($0 + 952 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 944 | 0, 0, 1065353216, 1031127695);
  SAFE_HEAP_STORE_i64_8_4($0 + 936 | 0, 0, 1065353216, 1065353216);
 }
 
 function ImDrawList___ResetForNewFrame_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$1 : {
   if (($1 | 0) >= 0) {
    break label$1
   }
   $2 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($2 | 0) >= ($1 | 0)) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 40));
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($3) {
    __memcpy($2, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 16 | 0, 0);
  label$3 : {
   if (($1 | 0) >= 0) {
    break label$3
   }
   $2 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($2 | 0) >= ($1 | 0)) {
    break label$3
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 1);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
   if ($3) {
    __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 12) << 1);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 20));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 16, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 20, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
  label$5 : {
   if (($1 | 0) >= 0) {
    break label$5
   }
   $2 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($2 | 0) >= ($1 | 0)) {
    break label$5
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 20));
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 32 | 0, 0);
   if ($3) {
    __memcpy($2, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 24), 20));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 32));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 32, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 40);
  SAFE_HEAP_STORE_i64_8_4($0, 96, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
  SAFE_HEAP_STORE_i64_8_4($0 + 104 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 112 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 52, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 40, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 - -64 | 0, 0);
  label$7 : {
   if (($1 | 0) >= 0) {
    break label$7
   }
   $2 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($2 | 0) >= ($1 | 0)) {
    break label$7
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 4);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0);
   if ($3) {
    __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 68));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 64, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 68, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 60, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 76 | 0, 0);
  label$9 : {
   if (($1 | 0) >= 0) {
    break label$9
   }
   $2 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($2 | 0) >= ($1 | 0)) {
    break label$9
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 2);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0);
   if ($3) {
    __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 72) << 2);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 80));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 76, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 80, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 72, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
  label$11 : {
   if (($1 | 0) >= 0) {
    break label$11
   }
   $2 = $1;
   $1 = $1 + (($1 | 0) / 2 | 0) | 0;
   $1 = ($1 | 0) > 0 ? $1 : 0;
   if (($2 | 0) >= ($1 | 0)) {
    break label$11
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
   if ($3) {
    __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
  }
  SAFE_HEAP_STORE_i64_8_4($0, 120, 0, 1);
  SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$13 : {
   if (($2 | 0) != ($1 | 0)) {
    break label$13
   }
   $3 = $2 + 1 | 0;
   $4 = $1;
   if ($1) {
    $2 = $1 + (($1 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $1 = ($2 | 0) > ($3 | 0) ? $2 : $3;
   if (($4 | 0) >= ($1 | 0)) {
    break label$13
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 40));
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($3) {
    __memcpy($2, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0;
  SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 32 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 140, 1065353216);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
 }
 
 function ImDrawList___ClearFreeMemory_28_29($0) {
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 12, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 20, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 32 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 24, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 32, 0);
  }
  SAFE_HEAP_STORE_i64_8_4($0, 52, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 36, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 60, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 68, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 72, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 80, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 84, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 92, 0);
  }
  ImDrawListSplitter__ClearFreeMemory_28_29($0 + 120 | 0);
 }
 
 function ImDrawListSplitter__ClearFreeMemory_28_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) > 0) {
   while (1) {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($2 | 0)) {
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($2, 24) | 0;
     SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($1 + 16 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, 0, 0);
    }
    $3 = Math_imul($2, 24);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + $3 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    if ($4) {
     SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
     ImGui__MemFree_28void__29($4);
     SAFE_HEAP_STORE_i32_4_4($1, 8, 0);
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + $3 | 0;
    $3 = $1 + 20 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    if ($4) {
     SAFE_HEAP_STORE_i64_8_4($1, 12, 0, 0);
     ImGui__MemFree_28void__29($4);
     SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
    }
    $2 = $2 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) > ($2 | 0)) {
     continue
    }
    break;
   }
  }
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 1);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 16 | 0, 0);
  if ($2) {
   SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
   ImGui__MemFree_28void__29($2);
   SAFE_HEAP_STORE_i32_4_4($0, 16, 0);
  }
 }
 
 function ImDrawList__AddDrawCmd_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = $4 + 8 | 0;
  SAFE_HEAP_STORE_i64_8_8($5, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 104 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_8($4, 0, SAFE_HEAP_LOAD_i64_8_4($0, 96), i64toi32_i32$HIGH_BITS);
  $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 116 | 0, 0);
  $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 112 | 0, 0);
  $9 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$1 : {
   if (($2 | 0) != ($1 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   $2 = 8;
   $6 = $1;
   $2 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : $2;
   $1 = ($2 | 0) > ($3 | 0) ? $2 : $3;
   if (($6 | 0) >= ($1 | 0)) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 40));
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($3) {
    __memcpy($2, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
  }
  $2 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
  $3 = i64toi32_i32$HIGH_BITS;
  $5 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
  $6 = i64toi32_i32$HIGH_BITS;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0;
  SAFE_HEAP_STORE_i32_4_4($1, 16, $8);
  SAFE_HEAP_STORE_i32_4_4($1, 20, $7);
  SAFE_HEAP_STORE_i32_4_4($1, 24, $9);
  SAFE_HEAP_STORE_i64_8_4($1, 28, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 0, $5, $6);
  SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, $2, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function ImDrawList___CalcCircleAutoSegmentCount_28float_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = Math_fround(0), $3 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  $2 = Math_fround($1 + Math_fround(.9999989867210388));
  label$1 : {
   if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
    $3 = ~~$2;
    break label$1;
   }
   $3 = -2147483648;
  }
  if (($3 | 0) <= 63) {
   return SAFE_HEAP_LOAD_i32_1_U_1(($0 + $3 | 0) + 432 | 0, 0) | 0
  }
  $2 = SAFE_HEAP_LOAD_f32_4_4($0, 20);
  $1 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / acosf(Math_fround(Math_fround(1.0) - Math_fround(($1 > $2 ? $2 : $1) / $1))))));
  label$4 : {
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $0 = ~~$1;
    break label$4;
   }
   $0 = -2147483648;
  }
  $0 = ($0 + 1 | 0) / 2 << 1;
  $0 = ($0 | 0) >= 512 ? 512 : $0;
  return (($0 | 0) <= 4 ? 4 : $0) | 0;
 }
 
 function ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($0, $1, $2, $3) {
  var $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0;
  $5 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
  $8 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  $7 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  label$1 : {
   if (!$3) {
    $4 = $5;
    $5 = $8;
    break label$1;
   }
   $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 104 | 0, 0);
   $8 = $4 < $8 ? $4 : $8;
   $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 100 | 0, 0);
   $6 = $4 > $6 ? $4 : $6;
   $4 = SAFE_HEAP_LOAD_f32_4_4($0, 96);
   $7 = $4 > $7 ? $4 : $7;
   $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 108 | 0, 0);
   if (!($5 > $4)) {
    $4 = $5
   }
   $5 = $8;
  }
  $4 = $4 <= $6 ? $6 : $4;
  $5 = $5 <= $7 ? $7 : $5;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 - -64 | 0, 0);
  label$5 : {
   if (($1 | 0) != ($2 | 0)) {
    break label$5
   }
   $1 = $1 + 1 | 0;
   if ($2) {
    $3 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $3 = ($1 | 0) < ($3 | 0) ? $3 : $1;
   if (($3 | 0) <= ($2 | 0)) {
    break label$5
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($3 << 4);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0);
   if ($1) {
    __memcpy($2, $1, SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 68));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 64, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 68, $2);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4) | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 12, $4);
  SAFE_HEAP_STORE_f32_4_4($1, 8, $5);
  SAFE_HEAP_STORE_f32_4_4($1, 4, $6);
  SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
  SAFE_HEAP_STORE_f32_4_4($0 + 108 | 0, 0, $4);
  SAFE_HEAP_STORE_f32_4_4($0 + 104 | 0, 0, $5);
  SAFE_HEAP_STORE_f32_4_4($0 + 100 | 0, 0, $6);
  SAFE_HEAP_STORE_f32_4_4($0, 96, $7);
  SAFE_HEAP_STORE_i32_4_4($0, 60, SAFE_HEAP_LOAD_i32_4_4($0, 60) + 1 | 0);
  $10 = $0 + 96 | 0;
  label$9 : {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $2 = $3 - 1 | 0;
   $9 = $1 + Math_imul($2, 40) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 28);
   if (!$1) {
    break label$9
   }
   if (!memcmp($9, $10, 16)) {
    break label$9
   }
   ImDrawList__AddDrawCmd_28_29($0);
   return;
  }
  label$10 : {
   if (($3 | 0) < 2 | $1) {
    break label$10
   }
   $1 = $9 - 40 | 0;
   if (memcmp($10, $1, 24)) {
    break label$10
   }
   if (SAFE_HEAP_LOAD_i32_4_4($1, 32)) {
    break label$10
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
   return;
  }
  SAFE_HEAP_STORE_i64_8_4($9, 0, SAFE_HEAP_LOAD_i64_8_4($10, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($9 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($10 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function ImDrawList__PushClipRectFullScreen_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  $3 = SAFE_HEAP_LOAD_i64_8_4($2, 24);
  $4 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_4($1, 24, $3, $4);
  $2 = SAFE_HEAP_LOAD_i64_8_4($2 + 32 | 0, 0);
  $5 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($1, 8, $3, $4);
  SAFE_HEAP_STORE_i64_8_4($1, 16, $2, $5);
  SAFE_HEAP_STORE_i64_8_8($1, 0, $2, $5);
  ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($0, $1 + 8 | 0, $1, 0);
  __stack_pointer = $1 + 32 | 0;
 }
 
 function ImDrawList__PopClipRect_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
  $2 = $1 - 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 60, $2);
  $2 = (wasm2js_i32$0 = (SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0) + ($1 << 4) | 0) - 32 | 0, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4($0, 44) + 24 | 0, wasm2js_i32$2 = $2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  SAFE_HEAP_STORE_i64_8_4($0, 96, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 104 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  $3 = $0 + 96 | 0;
  label$1 : {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $5 = $4 - 1 | 0;
   $1 = $1 + Math_imul($5, 40) | 0;
   $6 = SAFE_HEAP_LOAD_i32_4_4($1, 28);
   if (!$6) {
    break label$1
   }
   if (!memcmp($1, $3, 16)) {
    break label$1
   }
   ImDrawList__AddDrawCmd_28_29($0);
   return;
  }
  label$2 : {
   if (($4 | 0) < 2 | $6) {
    break label$2
   }
   $4 = $3;
   $3 = $1 - 40 | 0;
   if (memcmp($4, $3, 24)) {
    break label$2
   }
   if (SAFE_HEAP_LOAD_i32_4_4($3, 32)) {
    break label$2
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
   return;
  }
  $0 = SAFE_HEAP_LOAD_i64_8_4($2, 0);
  $3 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($1, 0, $0, $3);
 }
 
 function ImDrawList__PushTextureID_28void__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 76 | 0, 0);
  label$1 : {
   if (($2 | 0) != ($3 | 0)) {
    break label$1
   }
   $4 = $2 + 1 | 0;
   $5 = $3;
   if ($3) {
    $2 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $3 = ($2 | 0) > ($4 | 0) ? $2 : $4;
   if (($5 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($3 << 2);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0);
   if ($4) {
    __memcpy($2, $4, SAFE_HEAP_LOAD_i32_4_4($0, 72) << 2);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 80));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 76, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 80, $2);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 72) << 2) | 0, 0, $1);
  SAFE_HEAP_STORE_i32_4_4($0 + 112 | 0, 0, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 72, SAFE_HEAP_LOAD_i32_4_4($0, 72) + 1 | 0);
  label$5 : {
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $3 = $5 - 1 | 0;
   $2 = $4 + Math_imul($3, 40) | 0;
   $6 = SAFE_HEAP_LOAD_i32_4_4($2, 28);
   if (!$6) {
    break label$5
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($2, 16) | 0) == ($1 | 0)) {
    break label$5
   }
   ImDrawList__AddDrawCmd_28_29($0);
   return;
  }
  label$6 : {
   if (($5 | 0) < 2 | $6) {
    break label$6
   }
   $2 = $2 - 40 | 0;
   if (memcmp($0 + 96 | 0, $2, 24)) {
    break label$6
   }
   if (SAFE_HEAP_LOAD_i32_4_4($2, 32)) {
    break label$6
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
   return;
  }
  SAFE_HEAP_STORE_i32_4_4(Math_imul($3, 40) + $4 | 0, 16, $1);
 }
 
 function ImDrawList__PopTextureID_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
  $2 = $1 - 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 72, $2);
  $4 = $0 + 112 | 0;
  if ($2) {
   $1 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0)
  } else {
   $1 = 0
  }
  SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
  label$3 : {
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $2 = $6 - 1 | 0;
   $3 = $5 + Math_imul($2, 40) | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
   if (!$4) {
    break label$3
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0) == ($1 | 0)) {
    break label$3
   }
   ImDrawList__AddDrawCmd_28_29($0);
   return;
  }
  label$4 : {
   if (($6 | 0) < 2 | $4) {
    break label$4
   }
   $3 = $3 - 40 | 0;
   if (memcmp($0 + 96 | 0, $3, 24)) {
    break label$4
   }
   if (SAFE_HEAP_LOAD_i32_4_4($3, 32)) {
    break label$4
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
   return;
  }
  SAFE_HEAP_STORE_i32_4_4(Math_imul($2, 40) + $5 | 0, 16, $1);
 }
 
 function ImDrawList__PrimReserve_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_4_4($0, 40) + $2 >>> 0 < 65536) {
    break label$1
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 36) & 8)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($0, 40, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   SAFE_HEAP_STORE_i32_4_4($0 + 116 | 0, 0, $3);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 1 | 0, 40) | 0;
   if (SAFE_HEAP_LOAD_i32_4_4($4, 28)) {
    ImDrawList__AddDrawCmd_28_29($0);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($4, 20, $3);
  }
  $3 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) + SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) - 12 | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + $1 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
  $2 = $5 + $2 | 0;
  label$3 : {
   if (($3 | 0) >= ($2 | 0)) {
    break label$3
   }
   $6 = $3;
   if ($3) {
    $4 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $4 = 8
   }
   $3 = ($2 | 0) < ($4 | 0) ? $4 : $2;
   if (($6 | 0) >= ($3 | 0)) {
    break label$3
   }
   $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($3, 20));
   $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 32 | 0, 0);
   if ($6) {
    __memcpy($4, $6, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 24), 20));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 32));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 32, $4);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 24, $2);
  SAFE_HEAP_STORE_i32_4_4($0, 52, SAFE_HEAP_LOAD_i32_4_4($0 + 32 | 0, 0) + Math_imul($5, 20) | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 16 | 0, 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  $3 = $4 + $1 | 0;
  label$7 : {
   if (($2 | 0) >= ($3 | 0)) {
    break label$7
   }
   if ($2) {
    $1 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $1 = 8
   }
   $1 = ($1 | 0) > ($3 | 0) ? $1 : $3;
   if (($1 | 0) <= ($2 | 0)) {
    break label$7
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 1);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
   if ($5) {
    __memcpy($2, $5, SAFE_HEAP_LOAD_i32_4_4($0, 12) << 1);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 20));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 16, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 20, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0) + ($4 << 1) | 0);
 }
 
 function ImDrawList__PrimUnreserve_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) + SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) - 12 | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) - $1 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_4($0, 24) - $2 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 12, SAFE_HEAP_LOAD_i32_4_4($0, 12) - $1 | 0);
 }
 
 function ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $13 = __stack_pointer;
  $26 = $13;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($2 | 0) < 2) {
        break label$5
       }
       $9 = $2 - 1 | 0;
       $6 = $4 & 1;
       $20 = $6 ? $2 : $9;
       $19 = SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 0);
       $21 = i64toi32_i32$HIGH_BITS;
       $4 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
       if ($4 & 1) {
        $10 = SAFE_HEAP_LOAD_f32_4_4($0, 140);
        $7 = $4 >>> 1 | 0;
        $12 = $5 >= Math_fround(1.0) ? $5 : Math_fround(1.0);
        label$7 : {
         if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
          $4 = ~~$12;
          break label$7;
         }
         $4 = -2147483648;
        }
        $17 = $4;
        $16 = $5 > $10;
        $18 = $7 & ($4 | 0) < 63 & Math_fround($12 - Math_fround($4 | 0)) <= Math_fround(9.999999747378752e-06) & $10 == Math_fround(1.0);
        $14 = Math_imul($20, $18 ? 6 : $16 ? 18 : 12);
        label$9 : {
         if (($18 | 0) == 1) {
          $7 = $2 << 1;
          $4 = 3;
          break label$9;
         }
         $7 = $16 ? $2 << 2 : Math_imul($2, 3);
         $4 = $16 ? 5 : 3;
        }
        $31 = $7;
        ImDrawList__PrimReserve_28int_2c_20int_29($0, $14, $7);
        $7 = $13;
        $13 = $2 << 3;
        $14 = $7 - (Math_imul($13, $4) + 15 & -16) | 0;
        __stack_pointer = $14;
        if (($20 | 0) > 0) {
         $7 = 0;
         while (1) {
          $4 = $7 + 1 | 0;
          $24 = ((($2 | 0) != ($4 | 0) ? $4 : 0) << 3) + $1 | 0;
          $7 = $7 << 3;
          $25 = $7 + $1 | 0;
          $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($24, 0) - SAFE_HEAP_LOAD_f32_4_4($25, 0));
          $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($24, 4) - SAFE_HEAP_LOAD_f32_4_4($25, 4));
          $11 = Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8));
          if ($11 > Math_fround(0.0)) {
           $11 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($11)));
           $8 = Math_fround($8 * $11);
           $5 = Math_fround($5 * $11);
          }
          $7 = $7 + $14 | 0;
          SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround(-$5));
          SAFE_HEAP_STORE_f32_4_4($7, 0, $8);
          $7 = $4;
          if (($4 | 0) != ($20 | 0)) {
           continue
          }
          break;
         };
        }
        if (!$6) {
         SAFE_HEAP_STORE_i64_8_8($14 + ($9 << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_8(($14 + ($2 << 3) | 0) - 16 | 0, 0), i64toi32_i32$HIGH_BITS)
        }
        $24 = $3 & 16777215;
        $13 = $13 + $14 | 0;
        if ((!$16 | $18) == 1) {
         $12 = $18 ? Math_fround(Math_fround($12 * Math_fround(.5)) + Math_fround(1.0)) : $10;
         if (!$6) {
          $5 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
          $8 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
          $10 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
          $11 = Math_fround($12 * SAFE_HEAP_LOAD_f32_4_4($14, 4));
          SAFE_HEAP_STORE_f32_4_4($13 + 12 | 0, 0, Math_fround($10 - $11));
          $8 = Math_fround($12 * $8);
          SAFE_HEAP_STORE_f32_4_4($13, 8, Math_fround($5 - $8));
          SAFE_HEAP_STORE_f32_4_4($13, 4, Math_fround($11 + $10));
          SAFE_HEAP_STORE_f32_4_4($13, 0, Math_fround($8 + $5));
          $4 = $9 << 3;
          $7 = $4 + $1 | 0;
          $5 = SAFE_HEAP_LOAD_f32_4_4($7, 4);
          $6 = $4 + $14 | 0;
          $8 = SAFE_HEAP_LOAD_f32_4_4($6, 4);
          $4 = $13 + ($9 << 4) | 0;
          $10 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
          $11 = Math_fround($12 * SAFE_HEAP_LOAD_f32_4_4($6, 0));
          SAFE_HEAP_STORE_f32_4_4($4 + 8 | 0, 0, Math_fround($10 - $11));
          $8 = Math_fround($12 * $8);
          SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround($5 + $8));
          SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($11 + $10));
          SAFE_HEAP_STORE_f32_4_4($4 + 12 | 0, 0, Math_fround($5 - $8));
         }
         if (($20 | 0) <= 0) {
          break label$2
         }
         $25 = $18 ? 2 : 3;
         $4 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
         $7 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
         $6 = 0;
         while (1) {
          $9 = $7;
          $16 = $6 + 1 | 0;
          $23 = ($16 | 0) == ($2 | 0);
          $7 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 40), wasm2js_i32$1 = $7 + $25 | 0, wasm2js_i32$2 = $23, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
          $6 = $14 + ($6 << 3) | 0;
          $23 = $23 ? 0 : $16;
          $27 = $23 << 3;
          $28 = $27 + $14 | 0;
          $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 0) + SAFE_HEAP_LOAD_f32_4_4($28, 0)) * Math_fround(.5));
          $8 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 4) + SAFE_HEAP_LOAD_f32_4_4($28, 4)) * Math_fround(.5));
          $10 = Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8));
          if ($10 > Math_fround(9.999999974752427e-07)) {
           $22 = $8;
           $8 = Math_fround(Math_fround(1.0) / $10);
           $10 = $8 > Math_fround(100.0) ? Math_fround(100.0) : $8;
           $8 = Math_fround($22 * $10);
           $5 = Math_fround($5 * $10);
          }
          $6 = $13 + ($23 << 4) | 0;
          $23 = $1 + $27 | 0;
          $10 = SAFE_HEAP_LOAD_f32_4_4($23, 0);
          $11 = Math_fround($12 * $5);
          SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround($10 + $11));
          $5 = SAFE_HEAP_LOAD_f32_4_4($23, 4);
          SAFE_HEAP_STORE_f32_4_4($6, 8, Math_fround($10 - $11));
          $8 = Math_fround($12 * $8);
          SAFE_HEAP_STORE_f32_4_4($6 + 12 | 0, 0, Math_fround($5 - $8));
          SAFE_HEAP_STORE_f32_4_4($6, 4, Math_fround($8 + $5));
          SAFE_HEAP_STORE_i32_2_2($4, 2, $9);
          SAFE_HEAP_STORE_i32_2_2($4, 0, $7);
          label$21 : {
           if ($18) {
            SAFE_HEAP_STORE_i32_2_2($4, 10, $7);
            $9 = $9 + 1 | 0;
            SAFE_HEAP_STORE_i32_2_2($4, 8, $9);
            SAFE_HEAP_STORE_i32_2_2($4, 6, $7 + 1 | 0);
            SAFE_HEAP_STORE_i32_2_2($4, 4, $9);
            $4 = $4 + 12 | 0;
            SAFE_HEAP_STORE_i32_4_4($0, 56, $4);
            break label$21;
           }
           SAFE_HEAP_STORE_i32_2_2($4, 20, $7);
           SAFE_HEAP_STORE_i32_2_2($4, 18, $9);
           SAFE_HEAP_STORE_i32_2_2($4, 16, $9);
           SAFE_HEAP_STORE_i32_2_2($4, 10, $7);
           $6 = $7 + 1 | 0;
           SAFE_HEAP_STORE_i32_2_2($4, 22, $6);
           SAFE_HEAP_STORE_i32_2_2($4, 14, $9 + 1 | 0);
           SAFE_HEAP_STORE_i32_2_2($4, 12, $6);
           SAFE_HEAP_STORE_i32_2_2($4, 8, $7 + 2 | 0);
           $9 = $9 + 2 | 0;
           SAFE_HEAP_STORE_i32_2_2($4, 6, $9);
           SAFE_HEAP_STORE_i32_2_2($4, 4, $9);
           $4 = $4 + 24 | 0;
           SAFE_HEAP_STORE_i32_4_4($0, 56, $4);
          }
          $6 = $16;
          if (($20 | 0) != ($6 | 0)) {
           continue
          }
          break;
         };
         break label$2;
        }
        $12 = Math_fround(Math_fround($12 - $10) * Math_fround(.5));
        if (!$6) {
         $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
         $15 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
         $5 = SAFE_HEAP_LOAD_f32_4_4($14, 4);
         $11 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
         SAFE_HEAP_STORE_f32_4_4($13 + 12 | 0, 0, Math_fround(Math_fround($12 * $5) + $11));
         SAFE_HEAP_STORE_f32_4_4($13, 8, Math_fround($8 + Math_fround($12 * $15)));
         $22 = $5;
         $5 = Math_fround($10 + $12);
         SAFE_HEAP_STORE_f32_4_4($13, 4, Math_fround($11 + Math_fround($22 * $5)));
         SAFE_HEAP_STORE_f32_4_4($13, 0, Math_fround($8 + Math_fround($5 * $15)));
         $15 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
         SAFE_HEAP_STORE_f32_4_4($13 + 20 | 0, 0, Math_fround($11 - Math_fround($12 * SAFE_HEAP_LOAD_f32_4_4($14, 4))));
         SAFE_HEAP_STORE_f32_4_4($13, 16, Math_fround($8 - Math_fround($12 * $15)));
         $15 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
         SAFE_HEAP_STORE_f32_4_4($13 + 28 | 0, 0, Math_fround($11 - Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($14, 4))));
         SAFE_HEAP_STORE_f32_4_4($13, 24, Math_fround($8 - Math_fround($5 * $15)));
         $4 = $9 << 3;
         $7 = $4 + $1 | 0;
         $8 = SAFE_HEAP_LOAD_f32_4_4($7, 4);
         $6 = $4 + $14 | 0;
         $15 = SAFE_HEAP_LOAD_f32_4_4($6, 4);
         $4 = $13 + ($9 << 5) | 0;
         $22 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
         $29 = Math_fround($12 * $22);
         $11 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
         SAFE_HEAP_STORE_f32_4_4($4 + 8 | 0, 0, Math_fround($29 + $11));
         $30 = Math_fround($5 * $15);
         SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround($8 + $30));
         $5 = Math_fround($5 * $22);
         SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($11 + $5));
         $15 = Math_fround($12 * $15);
         SAFE_HEAP_STORE_f32_4_4($4 + 12 | 0, 0, Math_fround($8 + $15));
         SAFE_HEAP_STORE_f32_4_4($4 + 20 | 0, 0, Math_fround($8 - $15));
         SAFE_HEAP_STORE_f32_4_4($4 + 16 | 0, 0, Math_fround($11 - $29));
         SAFE_HEAP_STORE_f32_4_4($4 + 28 | 0, 0, Math_fround($8 - $30));
         SAFE_HEAP_STORE_f32_4_4($4 + 24 | 0, 0, Math_fround($11 - $5));
        }
        if (($20 | 0) <= 0) {
         break label$3
        }
        $15 = Math_fround($10 + $12);
        $4 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
        $7 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
        $6 = 0;
        while (1) {
         $16 = $6 + 1 | 0;
         $17 = ($16 | 0) == ($2 | 0);
         $9 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 40), wasm2js_i32$1 = $7 + 4 | 0, wasm2js_i32$2 = $17, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
         $6 = $14 + ($6 << 3) | 0;
         $17 = $17 ? 0 : $16;
         $18 = $17 << 3;
         $25 = $18 + $14 | 0;
         $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 0) + SAFE_HEAP_LOAD_f32_4_4($25, 0)) * Math_fround(.5));
         $8 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 4) + SAFE_HEAP_LOAD_f32_4_4($25, 4)) * Math_fround(.5));
         $10 = Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8));
         if ($10 > Math_fround(9.999999974752427e-07)) {
          $22 = $5;
          $5 = Math_fround(Math_fround(1.0) / $10);
          $10 = $5 > Math_fround(100.0) ? Math_fround(100.0) : $5;
          $5 = Math_fround($22 * $10);
          $8 = Math_fround($8 * $10);
         }
         $6 = $13 + ($17 << 5) | 0;
         $22 = Math_fround($15 * $5);
         $17 = $1 + $18 | 0;
         $11 = SAFE_HEAP_LOAD_f32_4_4($17, 0);
         SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround($22 + $11));
         $10 = SAFE_HEAP_LOAD_f32_4_4($17, 4);
         SAFE_HEAP_STORE_f32_4_4($6, 24, Math_fround($11 - $22));
         $5 = Math_fround($12 * $5);
         SAFE_HEAP_STORE_f32_4_4($6, 16, Math_fround($11 - $5));
         SAFE_HEAP_STORE_f32_4_4($6, 8, Math_fround($5 + $11));
         $5 = Math_fround($15 * $8);
         SAFE_HEAP_STORE_f32_4_4($6 + 28 | 0, 0, Math_fround($10 - $5));
         $8 = Math_fround($12 * $8);
         SAFE_HEAP_STORE_f32_4_4($6 + 20 | 0, 0, Math_fround($10 - $8));
         SAFE_HEAP_STORE_f32_4_4($6 + 12 | 0, 0, Math_fround($8 + $10));
         SAFE_HEAP_STORE_f32_4_4($6, 4, Math_fround($5 + $10));
         $17 = $9 + 2 | 0;
         SAFE_HEAP_STORE_i32_2_2($4, 34, $17);
         SAFE_HEAP_STORE_i32_2_2($4, 32, $9 + 3 | 0);
         $6 = $7 + 3 | 0;
         SAFE_HEAP_STORE_i32_2_2($4, 30, $6);
         SAFE_HEAP_STORE_i32_2_2($4, 28, $6);
         $18 = $7 + 2 | 0;
         SAFE_HEAP_STORE_i32_2_2($4, 26, $18);
         SAFE_HEAP_STORE_i32_2_2($4, 24, $17);
         $6 = $9 + 1 | 0;
         SAFE_HEAP_STORE_i32_2_2($4, 22, $6);
         SAFE_HEAP_STORE_i32_2_2($4, 20, $9);
         SAFE_HEAP_STORE_i32_2_2($4, 18, $7);
         SAFE_HEAP_STORE_i32_2_2($4, 16, $7);
         $7 = $7 + 1 | 0;
         SAFE_HEAP_STORE_i32_2_2($4, 14, $7);
         SAFE_HEAP_STORE_i32_2_2($4, 12, $6);
         SAFE_HEAP_STORE_i32_2_2($4, 10, $6);
         SAFE_HEAP_STORE_i32_2_2($4, 8, $17);
         SAFE_HEAP_STORE_i32_2_2($4, 6, $18);
         SAFE_HEAP_STORE_i32_2_2($4, 4, $18);
         SAFE_HEAP_STORE_i32_2_2($4, 2, $7);
         SAFE_HEAP_STORE_i32_2_2($4, 0, $6);
         $4 = $4 + 36 | 0;
         $7 = $9;
         $6 = $16;
         if (($20 | 0) != ($6 | 0)) {
          continue
         }
         break;
        };
        break label$4;
       }
       ImDrawList__PrimReserve_28int_2c_20int_29($0, Math_imul($20, 6), $20 << 2);
       if (($20 | 0) <= 0) {
        break label$5
       }
       $12 = Math_fround($5 * Math_fround(.5));
       $4 = 0;
       while (1) {
        $7 = $4 + 1 | 0;
        $9 = ((($2 | 0) != ($7 | 0) ? $7 : 0) << 3) + $1 | 0;
        $16 = $9 + 4 | 0;
        $4 = ($4 << 3) + $1 | 0;
        $17 = $4 + 4 | 0;
        $5 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
        $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
        $5 = Math_fround($5 - $10);
        $8 = SAFE_HEAP_LOAD_f32_4_4($9, 4);
        $11 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
        $8 = Math_fround($8 - $11);
        $15 = Math_fround(Math_fround($5 * $5) + Math_fround($8 * $8));
        if ($15 > Math_fround(0.0)) {
         $15 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($15)));
         $5 = Math_fround($5 * $15);
         $8 = Math_fround($8 * $15);
        }
        $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
        SAFE_HEAP_STORE_i64_8_4($6, 8, $19, $21);
        $5 = Math_fround($12 * $5);
        SAFE_HEAP_STORE_f32_4_4($6, 4, Math_fround($11 - $5));
        $8 = Math_fround($12 * $8);
        SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround($10 + $8));
        $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
        SAFE_HEAP_STORE_i32_4_4($6, 16, $3);
        SAFE_HEAP_STORE_f32_4_4($6, 20, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($9, 0)));
        $10 = SAFE_HEAP_LOAD_f32_4_4($16, 0);
        SAFE_HEAP_STORE_i64_8_4($6 + 28 | 0, 0, $19, $21);
        SAFE_HEAP_STORE_f32_4_4($6 + 24 | 0, 0, Math_fround($10 - $5));
        $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
        SAFE_HEAP_STORE_i32_4_4($6 + 36 | 0, 0, $3);
        SAFE_HEAP_STORE_f32_4_4($6, 40, Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 0) - $8));
        $10 = SAFE_HEAP_LOAD_f32_4_4($16, 0);
        SAFE_HEAP_STORE_i64_8_4($6 + 48 | 0, 0, $19, $21);
        SAFE_HEAP_STORE_f32_4_4($6 + 44 | 0, 0, Math_fround($5 + $10));
        $9 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
        SAFE_HEAP_STORE_i32_4_4($9 + 56 | 0, 0, $3);
        SAFE_HEAP_STORE_f32_4_4($9, 60, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) - $8));
        $8 = SAFE_HEAP_LOAD_f32_4_4($17, 0);
        SAFE_HEAP_STORE_i64_8_4($9 + 68 | 0, 0, $19, $21);
        SAFE_HEAP_STORE_f32_4_4($9 - -64 | 0, 0, Math_fround($5 + $8));
        $4 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
        SAFE_HEAP_STORE_i32_4_4($4 + 76 | 0, 0, $3);
        SAFE_HEAP_STORE_i32_4_4($0, 52, $4 + 80 | 0);
        $4 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
        $9 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
        SAFE_HEAP_STORE_i32_2_2($4, 6, $9);
        SAFE_HEAP_STORE_i32_2_2($4, 0, $9);
        SAFE_HEAP_STORE_i32_2_2($4, 10, $9 + 3 | 0);
        $6 = $9 + 2 | 0;
        SAFE_HEAP_STORE_i32_2_2($4, 8, $6);
        SAFE_HEAP_STORE_i32_2_2($4, 4, $6);
        SAFE_HEAP_STORE_i32_2_2($4, 2, $9 + 1 | 0);
        SAFE_HEAP_STORE_i32_4_4($0, 40, $9 + 4 | 0);
        SAFE_HEAP_STORE_i32_4_4($0, 56, $4 + 12 | 0);
        $4 = $7;
        if (($20 | 0) != ($4 | 0)) {
         continue
        }
        break;
       };
      }
      __stack_pointer = $26;
      return;
     }
     SAFE_HEAP_STORE_i32_4_4($0, 56, $4);
    }
    if (($2 | 0) <= 0) {
     break label$1
    }
    $4 = 0;
    while (1) {
     $1 = $13 + ($4 << 5) | 0;
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_8($1, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $19, $21);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($7, 16, $24);
     SAFE_HEAP_STORE_i64_8_4($7, 20, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 28 | 0, 0, $19, $21);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($7 + 36 | 0, 0, $3);
     SAFE_HEAP_STORE_i64_8_4($7, 40, SAFE_HEAP_LOAD_i64_8_8($1 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, $19, $21);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($7 + 56 | 0, 0, $3);
     SAFE_HEAP_STORE_i64_8_4($7, 60, SAFE_HEAP_LOAD_i64_8_8($1 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 68 | 0, 0, $19, $21);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $24);
     SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   if (!$18) {
    if (($2 | 0) <= 0) {
     break label$1
    }
    $4 = 0;
    while (1) {
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4(($4 << 3) + $1 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $19, $21);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($7, 16, $3);
     $9 = $13 + ($4 << 4) | 0;
     SAFE_HEAP_STORE_i64_8_4($7, 20, SAFE_HEAP_LOAD_i64_8_8($9, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 28 | 0, 0, $19, $21);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($7 + 36 | 0, 0, $24);
     SAFE_HEAP_STORE_i64_8_4($7, 40, SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, $19, $21);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($7 + 56 | 0, 0, $24);
     SAFE_HEAP_STORE_i32_4_4($0, 52, $7 + 60 | 0);
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   if (($2 | 0) <= 0) {
    break label$1
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 496) + ($17 << 4) | 0;
   $7 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
   $19 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
   $9 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $4 = 0;
   while (1) {
    $16 = $13 + ($4 << 4) | 0;
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_8($16, 0), i64toi32_i32$HIGH_BITS);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($6, 8, $1);
    SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, $9);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($6, 16, $3);
    SAFE_HEAP_STORE_i64_8_4($6, 20, SAFE_HEAP_LOAD_i64_8_8($16 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($6 + 32 | 0, 0, $7);
    SAFE_HEAP_STORE_i32_4_4($6 + 28 | 0, 0, $19);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($6 + 36 | 0, 0, $3);
    SAFE_HEAP_STORE_i32_4_4($0, 52, $6 + 40 | 0);
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + ($31 & 65535) | 0);
  __stack_pointer = $26;
 }
 
 function ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0);
  $11 = __stack_pointer;
  $19 = $11;
  if (($2 | 0) >= 3) {
   $16 = SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 0);
   $17 = i64toi32_i32$HIGH_BITS;
   label$2 : {
    label$3 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1($0, 36) & 4) {
      $15 = SAFE_HEAP_LOAD_f32_4_4($0, 140);
      $18 = $2 << 1;
      ImDrawList__PrimReserve_28int_2c_20int_29($0, Math_imul($2, 9) - 6 | 0, $18);
      $12 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
      if (($2 | 0) >= 3) {
       $4 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
       $5 = 2;
       while (1) {
        SAFE_HEAP_STORE_i32_2_2($4, 0, $12);
        $10 = $12 + ($5 << 1) | 0;
        SAFE_HEAP_STORE_i32_2_2($4, 4, $10);
        SAFE_HEAP_STORE_i32_2_2($4, 2, $10 - 2 | 0);
        $4 = $4 + 6 | 0;
        $5 = $5 + 1 | 0;
        if (($5 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($0, 56, $4);
      }
      $10 = $2 - 1 | 0;
      $11 = $11 - (($2 << 3) + 15 & -16) | 0;
      __stack_pointer = $11;
      if (($2 | 0) <= 0) {
       break label$3
      }
      $5 = $10;
      $4 = 0;
      while (1) {
       $6 = ($4 << 3) + $1 | 0;
       $5 = $5 << 3;
       $13 = $5 + $1 | 0;
       $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 0) - SAFE_HEAP_LOAD_f32_4_4($13, 0));
       $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 4) - SAFE_HEAP_LOAD_f32_4_4($13, 4));
       $9 = Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8));
       if ($9 > Math_fround(0.0)) {
        $9 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($9)));
        $8 = Math_fround($8 * $9);
        $7 = Math_fround($7 * $9);
       }
       $5 = $5 + $11 | 0;
       SAFE_HEAP_STORE_f32_4_4($5, 4, Math_fround(-$7));
       SAFE_HEAP_STORE_f32_4_4($5, 0, $8);
       $5 = $4;
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     ImDrawList__PrimReserve_28int_2c_20int_29($0, Math_imul($2, 3) - 6 | 0, $2);
     if (($2 | 0) > 0) {
      while (1) {
       SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4(($4 << 3) + $1 | 0, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $16, $17);
       $5 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
       SAFE_HEAP_STORE_i32_4_4($5, 16, $3);
       SAFE_HEAP_STORE_i32_4_4($0, 52, $5 + 20 | 0);
       $4 = $4 + 1 | 0;
       if (($4 | 0) != ($2 | 0)) {
        continue
       }
       break;
      }
     }
     if (($2 | 0) >= 3) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
      $5 = 2;
      while (1) {
       SAFE_HEAP_STORE_i32_2_2($4, 0, $1);
       $3 = $1 + $5 | 0;
       SAFE_HEAP_STORE_i32_2_2($4, 4, $3);
       SAFE_HEAP_STORE_i32_2_2($4, 2, $3 - 1 | 0);
       $3 = $4 + 6 | 0;
       $4 = $3;
       $5 = $5 + 1 | 0;
       if (($5 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
      SAFE_HEAP_STORE_i32_4_4($0, 56, $3);
     }
     $4 = $2 & 65535;
     $0 = $0 + 40 | 0;
     break label$2;
    }
    if (($2 | 0) > 0) {
     $20 = $3 & 16777215;
     $13 = $12 + 1 | 0;
     $15 = Math_fround($15 * Math_fround(.5));
     $4 = 0;
     $5 = $10;
     while (1) {
      $10 = $5;
      $6 = $11 + ($5 << 3) | 0;
      $8 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
      $5 = $4;
      $4 = $4 << 3;
      $14 = $4 + $11 | 0;
      $7 = Math_fround(Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($14, 0)) * Math_fround(.5));
      $8 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 4) + SAFE_HEAP_LOAD_f32_4_4($14, 4)) * Math_fround(.5));
      $9 = Math_fround(Math_fround($7 * $7) + Math_fround($8 * $8));
      label$16 : {
       if (!($9 > Math_fround(9.999999974752427e-07))) {
        break label$16
       }
       $21 = $7;
       $7 = Math_fround(Math_fround(1.0) / $9);
       $9 = $7 > Math_fround(100.0) ? Math_fround(100.0) : $7;
       $7 = Math_fround($21 * $9);
       $8 = Math_fround($8 * $9);
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
      $4 = $1 + $4 | 0;
      $7 = Math_fround($15 * $7);
      SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) - $7));
      $9 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
      SAFE_HEAP_STORE_i64_8_4($6, 8, $16, $17);
      $8 = Math_fround($15 * $8);
      SAFE_HEAP_STORE_f32_4_4($6, 4, Math_fround($9 - $8));
      $6 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
      SAFE_HEAP_STORE_i32_4_4($6, 16, $3);
      SAFE_HEAP_STORE_f32_4_4($6, 20, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
      $7 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
      SAFE_HEAP_STORE_i64_8_4($6 + 28 | 0, 0, $16, $17);
      SAFE_HEAP_STORE_f32_4_4($6 + 24 | 0, 0, Math_fround($8 + $7));
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
      SAFE_HEAP_STORE_i32_4_4($4 + 36 | 0, 0, $20);
      SAFE_HEAP_STORE_i32_4_4($0, 52, $4 + 40 | 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
      $6 = $5 << 1;
      $14 = $6 + $12 | 0;
      SAFE_HEAP_STORE_i32_2_2($4, 10, $14);
      SAFE_HEAP_STORE_i32_2_2($4, 8, $6 + $13 | 0);
      $10 = $10 << 1;
      $6 = $10 + $13 | 0;
      SAFE_HEAP_STORE_i32_2_2($4, 6, $6);
      SAFE_HEAP_STORE_i32_2_2($4, 4, $6);
      SAFE_HEAP_STORE_i32_2_2($4, 2, $10 + $12 | 0);
      SAFE_HEAP_STORE_i32_2_2($4, 0, $14);
      SAFE_HEAP_STORE_i32_4_4($0, 56, $4 + 12 | 0);
      $4 = $5 + 1 | 0;
      if (($4 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $4 = $18 & 65534;
    $0 = $0 + 40 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + $4 | 0);
  }
  __stack_pointer = $19;
 }
 
 function ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ($2 <= Math_fround(0.0)) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($4 | 0) != ($3 | 0)) {
     break label$2
    }
    $5 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
    $4 = $4 + 1 | 0;
    $4 = ($4 | 0) < ($5 | 0) ? $5 : $4;
    if (($3 | 0) >= ($4 | 0)) {
     break label$2
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($5) {
     __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $4);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $3);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
   return;
  }
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  $9 = Math_fround($2 + Math_fround(.9999989867210388));
  label$7 : {
   if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
    $8 = ~~$9;
    break label$7;
   }
   $8 = -2147483648;
  }
  label$9 : {
   if (($8 | 0) <= 63) {
    $5 = SAFE_HEAP_LOAD_i32_1_U_1(($5 + $8 | 0) + 432 | 0, 0);
    break label$9;
   }
   $9 = SAFE_HEAP_LOAD_f32_4_4($5, 20);
   $9 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / acosf(Math_fround(Math_fround(1.0) - Math_fround(($2 > $9 ? $9 : $2) / $2))))));
   label$11 : {
    if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
     $5 = ~~$9;
     break label$11;
    }
    $5 = -2147483648;
   }
   $5 = ($5 + 1 | 0) / 2 << 1;
   $5 = ($5 | 0) >= 512 ? 512 : $5;
   $5 = ($5 | 0) <= 4 ? 4 : $5;
  }
  $7 = 48 / ($5 >>> 0) | 0;
  $8 = $4 - $3 | 0;
  $5 = $8 >> 31;
  $5 = ($5 ^ $8) - $5 | 0;
  $8 = ($7 | 0) >= 12 ? 12 : $7;
  $8 = ($8 | 0) <= 1 ? 1 : $8;
  label$13 : {
   if ($8 >>> 0 < 2) {
    $7 = $5 + 1 | 0;
    $5 = 1;
    break label$13;
   }
   $6 = $5;
   $5 = ($5 >>> 0) / ($8 >>> 0) | 0;
   $6 = $6 - Math_imul($5, $8) | 0;
   if (!$6) {
    $13 = ($6 | 0) != 0;
    $7 = $5 + 1 | 0;
    $5 = $8;
    break label$13;
   }
   $7 = $5 + 2 | 0;
   if (($3 | 0) == ($4 | 0)) {
    $13 = 1;
    $5 = $8;
    break label$13;
   }
   $13 = 1;
   $5 = $8 + (($8 - $6 | 0) / -2 | 0) | 0;
  }
  $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
  $11 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $7 = $11 + $7 | 0;
  label$17 : {
   if (($6 | 0) >= ($7 | 0)) {
    break label$17
   }
   $10 = $6 ? $6 + (($6 | 0) / 2 | 0) | 0 : 8;
   $10 = ($7 | 0) < ($10 | 0) ? $10 : $7;
   if (($6 | 0) >= ($10 | 0)) {
    break label$17
   }
   $6 = ImGui__MemAlloc_28unsigned_20long_29($10 << 3);
   $12 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
   if ($12) {
    __memcpy($6, $12, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 88, $10);
   SAFE_HEAP_STORE_i32_4_4($0, 92, $6);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 84, $7);
  $10 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
  $7 = $3;
  if ($3 >>> 0 >= 48) {
   $6 = ($3 | 0) % 48 | 0;
   $7 = ($6 | 0) < 0 ? $6 + 48 | 0 : $6;
  }
  $11 = $10 + ($11 << 3) | 0;
  $12 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  label$22 : {
   if (($3 | 0) > ($4 | 0)) {
    $6 = $3;
    while (1) {
     $10 = $5;
     $3 = ($7 | 0) < 0 ? $7 + 48 | 0 : $7;
     $5 = $12 + ($3 << 3) | 0;
     $9 = SAFE_HEAP_LOAD_f32_4_4($5 + 48 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($11, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 44 | 0, 0) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
     SAFE_HEAP_STORE_f32_4_4($11, 4, Math_fround(Math_fround($9 * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 4)));
     $5 = $8;
     $7 = $3 - $10 | 0;
     $11 = $11 + 8 | 0;
     $3 = $11;
     $6 = $6 - $10 | 0;
     if (($6 | 0) >= ($4 | 0)) {
      continue
     }
     break;
    };
    break label$22;
   }
   $6 = $3;
   while (1) {
    $10 = $5;
    $3 = ($7 | 0) > 47 ? $7 - 48 | 0 : $7;
    $5 = $12 + ($3 << 3) | 0;
    $9 = SAFE_HEAP_LOAD_f32_4_4($5 + 48 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($11, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 44 | 0, 0) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
    SAFE_HEAP_STORE_f32_4_4($11, 4, Math_fround(Math_fround($9 * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 4)));
    $5 = $8;
    $7 = $3 + $10 | 0;
    $11 = $11 + 8 | 0;
    $3 = $11;
    $6 = $6 + $10 | 0;
    if (($6 | 0) <= ($4 | 0)) {
     continue
    }
    break;
   };
  }
  if ($13) {
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   $0 = ($4 | 0) % 48 | 0;
   $0 = $5 + ((($0 | 0) < 0 ? $0 + 48 | 0 : $0) << 3) | 0;
   $9 = SAFE_HEAP_LOAD_f32_4_4($0 + 48 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($3, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 44 | 0, 0) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   SAFE_HEAP_STORE_f32_4_4($3, 4, Math_fround(Math_fround($9 * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 4)));
  }
 }
 
 function ImDrawList___PathArcToN_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  if ($2 <= Math_fround(0.0)) {
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($5 | 0) != ($6 | 0)) {
     break label$2
    }
    $8 = $6 + 1 | 0;
    $7 = $5;
    if ($5) {
     $6 = $5 + (($5 | 0) / 2 | 0) | 0
    } else {
     $6 = 8
    }
    $5 = ($6 | 0) > ($8 | 0) ? $6 : $8;
    if (($7 | 0) >= ($5 | 0)) {
     break label$2
    }
    $6 = ImGui__MemAlloc_28unsigned_20long_29($5 << 3);
    $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($8) {
     __memcpy($6, $8, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $5);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $6);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
   return;
  }
  $6 = ($5 + $6 | 0) + 1 | 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0) | 0) < ($6 | 0)) {
   $8 = ImGui__MemAlloc_28unsigned_20long_29($6 << 3);
   $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
   if ($7) {
    __memcpy($8, $7, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 88, $6);
   SAFE_HEAP_STORE_i32_4_4($0, 92, $8);
  }
  if (($5 | 0) >= 0) {
   $4 = Math_fround($4 - $3);
   $11 = Math_fround($5 | 0);
   $6 = 0;
   while (1) {
    $8 = $6;
    $10 = Math_fround(Math_fround(Math_fround(Math_fround($6 | 0) / $11) * $4) + $3);
    $12 = Math_fround(Math_fround(sinf($10) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 4));
    $10 = Math_fround(Math_fround(cosf($10) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 0));
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
    label$10 : {
     if (($7 | 0) != ($6 | 0)) {
      break label$10
     }
     $9 = $7 + 1 | 0;
     $13 = $6;
     if ($6) {
      $7 = $6 + (($6 | 0) / 2 | 0) | 0
     } else {
      $7 = 8
     }
     $6 = ($7 | 0) > ($9 | 0) ? $7 : $9;
     if (($13 | 0) >= ($6 | 0)) {
      break label$10
     }
     $7 = ImGui__MemAlloc_28unsigned_20long_29($6 << 3);
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
     if ($9) {
      __memcpy($7, $9, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $6);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $7);
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
    SAFE_HEAP_STORE_f32_4_4($6, 4, $12);
    SAFE_HEAP_STORE_f32_4_4($6, 0, $10);
    SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
    $6 = $8 + 1 | 0;
    if (($5 | 0) != ($8 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  if ($2 <= Math_fround(0.0)) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($4 | 0) != ($3 | 0)) {
     break label$2
    }
    $5 = $4 + 1 | 0;
    $6 = $3;
    if ($3) {
     $4 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4 = 8
    }
    $3 = ($4 | 0) > ($5 | 0) ? $4 : $5;
    if (($6 | 0) >= ($3 | 0)) {
     break label$2
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29($3 << 3);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($5) {
     __memcpy($4, $5, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $3);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $4);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
   return;
  }
  ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3 << 2, $4 << 2);
 }
 
 function ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0;
  folding_inner0 : {
   if ($2 <= Math_fround(0.0)) {
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
    label$2 : {
     if (($6 | 0) != ($5 | 0)) {
      break label$2
     }
     $8 = $6 + 1 | 0;
     $9 = $5;
     if ($5) {
      $6 = $5 + (($5 | 0) / 2 | 0) | 0
     } else {
      $6 = 8
     }
     $5 = ($6 | 0) > ($8 | 0) ? $6 : $8;
     if (($9 | 0) >= ($5 | 0)) {
      break label$2
     }
     $6 = ImGui__MemAlloc_28unsigned_20long_29($5 << 3);
     $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
     if ($8) {
      __memcpy($6, $8, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $5);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $6);
    }
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
    break folding_inner0;
   }
   if (($5 | 0) > 0) {
    ImDrawList___PathArcToN_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5);
    return;
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   label$7 : {
    if (SAFE_HEAP_LOAD_f32_4_4($5, 428) >= $2) {
     $7 = Math_fround(Math_fround($3 * Math_fround(48.0)) / Math_fround(6.2831854820251465));
     $10 = Math_fround($4 * Math_fround(48.0));
     $8 = $3 > $4;
     label$9 : {
      if ($8) {
       label$11 : {
        if (!($7 >= Math_fround(0.0))) {
         if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
          $5 = ~~$7
         } else {
          $5 = -2147483648
         }
         if ($7 != Math_fround($5 | 0)) {
          break label$11
         }
        }
        $12 = Math_fround(~~$7 | 0);
        if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
         break label$9
        }
        $12 = Math_fround(-2147483648.0);
        break label$9;
       }
       $12 = Math_fround($5 - 1 | 0);
       break label$9;
      }
      $12 = Math_fround(Math_ceil($7));
     }
     $7 = $12;
     label$16 : {
      if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
       $5 = ~~$7;
       break label$16;
      }
      $5 = -2147483648;
     }
     $7 = Math_fround($10 / Math_fround(6.2831854820251465));
     if ($8) {
      $7 = Math_fround(Math_ceil($7))
     } else {
      label$20 : {
       label$21 : {
        if (!($7 >= Math_fround(0.0))) {
         if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
          $6 = ~~$7
         } else {
          $6 = -2147483648
         }
         if ($7 != Math_fround($6 | 0)) {
          break label$21
         }
        }
        $6 = ~~$7;
        if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
         break label$20
        }
        $6 = -2147483648;
        break label$20;
       }
       $6 = $6 - 1 | 0;
      }
      $7 = Math_fround($6 | 0);
     }
     label$26 : {
      if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
       $6 = ~~$7;
       break label$26;
      }
      $6 = -2147483648;
     }
     $9 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
     $10 = Math_fround(Math_fround($6 | 0) * Math_fround(3.1415927410125732));
     $10 = Math_fround($4 - Math_fround(Math_fround($10 + $10) / Math_fround(48.0)));
     $7 = Math_fround(Math_fround($5 | 0) * Math_fround(3.1415927410125732));
     $7 = Math_fround(Math_fround(Math_fround($7 + $7) / Math_fround(48.0)) - $3);
     $13 = $8 ? $5 - $6 | 0 : $6 - $5 | 0;
     $8 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + ((($10 != Math_fround(0.0)) + ($7 != Math_fround(0.0) ? 2 : 1) | 0) + (($13 | 0) > 0 ? $13 : 0) | 0) | 0;
     if (($9 | 0) < ($8 | 0)) {
      $9 = ImGui__MemAlloc_28unsigned_20long_29($8 << 3);
      $11 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
      if ($11) {
       __memcpy($9, $11, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
      }
      SAFE_HEAP_STORE_i32_4_4($0, 88, $8);
      SAFE_HEAP_STORE_i32_4_4($0, 92, $9);
     }
     if ($7 != Math_fround(0.0)) {
      $7 = Math_fround(Math_fround(sinf($3) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 4));
      $3 = Math_fround(Math_fround(cosf($3) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 0));
      $9 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
      $8 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
      label$31 : {
       if (($9 | 0) != ($8 | 0)) {
        break label$31
       }
       $11 = $9 + 1 | 0;
       $14 = $8;
       if ($8) {
        $9 = $8 + (($8 | 0) / 2 | 0) | 0
       } else {
        $9 = 8
       }
       $8 = ($9 | 0) > ($11 | 0) ? $9 : $11;
       if (($14 | 0) >= ($8 | 0)) {
        break label$31
       }
       $9 = ImGui__MemAlloc_28unsigned_20long_29($8 << 3);
       $11 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
       if ($11) {
        __memcpy($9, $11, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
       }
       SAFE_HEAP_STORE_i32_4_4($0, 88, $8);
       SAFE_HEAP_STORE_i32_4_4($0, 92, $9);
      }
      $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
      SAFE_HEAP_STORE_f32_4_4($8, 4, $7);
      SAFE_HEAP_STORE_f32_4_4($8, 0, $3);
      SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
     }
     if (($13 | 0) > 0) {
      ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $5, $6)
     }
     if ($10 == Math_fround(0.0)) {
      break label$7
     }
     $3 = Math_fround(Math_fround(sinf($4) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 4));
     $2 = Math_fround(Math_fround(cosf($4) * $2) + SAFE_HEAP_LOAD_f32_4_4($1, 0));
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
     label$36 : {
      if (($5 | 0) != ($1 | 0)) {
       break label$36
      }
      $5 = $5 + 1 | 0;
      $8 = $1;
      if ($1) {
       $6 = $1 + (($1 | 0) / 2 | 0) | 0
      } else {
       $6 = 8
      }
      $1 = ($5 | 0) < ($6 | 0) ? $6 : $5;
      if (($8 | 0) >= ($1 | 0)) {
       break label$36
      }
      $5 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
      $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
      if ($6) {
       __memcpy($5, $6, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
      }
      SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
      SAFE_HEAP_STORE_i32_4_4($0, 92, $5);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
     SAFE_HEAP_STORE_f32_4_4($1, 4, $3);
     SAFE_HEAP_STORE_f32_4_4($1, 0, $2);
     break folding_inner0;
    }
    $7 = Math_fround($2 + Math_fround(.9999989867210388));
    label$40 : {
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $6 = ~~$7;
      break label$40;
     }
     $6 = -2147483648;
    }
    $7 = Math_fround(Math_abs(Math_fround($4 - $3)));
    label$42 : {
     if (($6 | 0) <= 63) {
      $6 = SAFE_HEAP_LOAD_i32_1_U_1(($5 + $6 | 0) + 432 | 0, 0);
      break label$42;
     }
     $10 = SAFE_HEAP_LOAD_f32_4_4($5, 20);
     $10 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / acosf(Math_fround(Math_fround(1.0) - Math_fround(($2 > $10 ? $10 : $2) / $2))))));
     label$44 : {
      if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
       $5 = ~~$10;
       break label$44;
      }
      $5 = -2147483648;
     }
     $5 = ($5 + 1 | 0) / 2 << 1;
     $5 = ($5 | 0) >= 512 ? 512 : $5;
     $6 = ($5 | 0) <= 4 ? 4 : $5;
    }
    $10 = Math_fround(Math_fround(6.2831854820251465) / $7);
    label$46 : {
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
      $5 = ~~$10;
      break label$46;
     }
     $5 = -2147483648;
    }
    $7 = Math_fround(Math_ceil(Math_fround(Math_fround($7 * Math_fround($6 | 0)) / Math_fround(6.2831854820251465))));
    label$48 : {
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $6 = ~~$7;
      break label$48;
     }
     $6 = -2147483648;
    }
    ImDrawList___PathArcToN_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, ($5 | 0) < ($6 | 0) ? $6 : $5);
   }
   return;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
 }
 
 function ImDrawList__PathBezierCubicCurveTo_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0;
  $5 = ((SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) + SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) | 0) - 8 | 0;
  $10 = SAFE_HEAP_LOAD_f32_4_4($5, 4);
  $11 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
  if (!$4) {
   PathBezierCubicCurveToCasteljau_28ImVector_ImVec2___2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0 + 84 | 0, $11, $10, SAFE_HEAP_LOAD_f32_4_4($1, 0), SAFE_HEAP_LOAD_f32_4_4($1, 4), SAFE_HEAP_LOAD_f32_4_4($2, 0), SAFE_HEAP_LOAD_f32_4_4($2, 4), SAFE_HEAP_LOAD_f32_4_4($3, 0), SAFE_HEAP_LOAD_f32_4_4($3, 4), SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 16), 0);
   return;
  }
  if (($4 | 0) > 0) {
   $17 = Math_fround(Math_fround(1.0) / Math_fround($4 | 0));
   $5 = 1;
   while (1) {
    $12 = $5;
    $6 = Math_fround($17 * Math_fround($5 | 0));
    $13 = Math_fround($6 * Math_fround($6 * $6));
    $8 = Math_fround(Math_fround(1.0) - $6);
    $14 = Math_fround($8 * Math_fround(3.0));
    $15 = Math_fround($6 * Math_fround($6 * $14));
    $16 = Math_fround($8 * Math_fround($8 * $8));
    $6 = Math_fround($6 * Math_fround($8 * $14));
    $8 = Math_fround(Math_fround($13 * SAFE_HEAP_LOAD_f32_4_4($3, 4)) + Math_fround(Math_fround($15 * SAFE_HEAP_LOAD_f32_4_4($2, 4)) + Math_fround(Math_fround($16 * $10) + Math_fround($6 * SAFE_HEAP_LOAD_f32_4_4($1, 4)))));
    $6 = Math_fround(Math_fround($13 * SAFE_HEAP_LOAD_f32_4_4($3, 0)) + Math_fround(Math_fround($15 * SAFE_HEAP_LOAD_f32_4_4($2, 0)) + Math_fround(Math_fround($16 * $11) + Math_fround($6 * SAFE_HEAP_LOAD_f32_4_4($1, 0)))));
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
    label$4 : {
     if (($7 | 0) != ($5 | 0)) {
      break label$4
     }
     $9 = $7 + 1 | 0;
     $18 = $5;
     if ($5) {
      $7 = $5 + (($5 | 0) / 2 | 0) | 0
     } else {
      $7 = 8
     }
     $5 = ($7 | 0) > ($9 | 0) ? $7 : $9;
     if (($18 | 0) >= ($5 | 0)) {
      break label$4
     }
     $7 = ImGui__MemAlloc_28unsigned_20long_29($5 << 3);
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
     if ($9) {
      __memcpy($7, $9, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $5);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $7);
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
    SAFE_HEAP_STORE_f32_4_4($5, 4, $8);
    SAFE_HEAP_STORE_f32_4_4($5, 0, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
    $5 = $12 + 1 | 0;
    if (($4 | 0) != ($12 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function PathBezierCubicCurveToCasteljau_28ImVector_ImVec2___2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  var $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0);
  while (1) {
   label$1 : {
    $13 = Math_fround($8 - $2);
    $14 = Math_fround($7 - $1);
    $11 = Math_fround(Math_fround(Math_fround($3 - $7) * $13) - Math_fround($14 * Math_fround($4 - $8)));
    $16 = $11 >= Math_fround(0.0) ? $11 : Math_fround(-$11);
    $11 = Math_fround(Math_fround(Math_fround($5 - $7) * $13) - Math_fround($14 * Math_fround($6 - $8)));
    $11 = Math_fround($16 + ($11 >= Math_fround(0.0) ? $11 : Math_fround(-$11)));
    if (Math_fround($11 * $11) < Math_fround(Math_fround(Math_fround($14 * $14) + Math_fround($13 * $13)) * $9)) {
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$4 : {
      if (($12 | 0) != ($10 | 0)) {
       break label$4
      }
      $15 = $12 + 1 | 0;
      $19 = $10;
      if ($10) {
       $12 = $10 + (($10 | 0) / 2 | 0) | 0
      } else {
       $12 = 8
      }
      $10 = ($12 | 0) > ($15 | 0) ? $12 : $15;
      if (($19 | 0) >= ($10 | 0)) {
       break label$4
      }
      $12 = ImGui__MemAlloc_28unsigned_20long_29($10 << 3);
      $15 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      if ($15) {
       __memcpy($12, $15, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 3);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
      }
      SAFE_HEAP_STORE_i32_4_4($0, 4, $10);
      SAFE_HEAP_STORE_i32_4_4($0, 8, $12);
     }
     $10 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + (SAFE_HEAP_LOAD_i32_4_4($0, 0) << 3) | 0;
     SAFE_HEAP_STORE_f32_4_4($10, 4, $8);
     SAFE_HEAP_STORE_f32_4_4($10, 0, $7);
     SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
     break label$1;
    }
    if (($10 | 0) > 9) {
     break label$1
    }
    $13 = Math_fround(Math_fround($1 + $3) * Math_fround(.5));
    $14 = Math_fround(Math_fround($3 + $5) * Math_fround(.5));
    $3 = Math_fround(Math_fround($13 + $14) * Math_fround(.5));
    $11 = Math_fround(Math_fround($2 + $4) * Math_fround(.5));
    $17 = Math_fround(Math_fround($4 + $6) * Math_fround(.5));
    $4 = Math_fround(Math_fround($11 + $17) * Math_fround(.5));
    $20 = $1;
    $21 = $2;
    $16 = $3;
    $18 = $4;
    $5 = Math_fround(Math_fround($5 + $7) * Math_fround(.5));
    $3 = Math_fround(Math_fround($14 + $5) * Math_fround(.5));
    $1 = Math_fround(Math_fround($16 + $3) * Math_fround(.5));
    $6 = Math_fround(Math_fround($6 + $8) * Math_fround(.5));
    $4 = Math_fround(Math_fround($17 + $6) * Math_fround(.5));
    $2 = Math_fround(Math_fround($18 + $4) * Math_fround(.5));
    $10 = $10 + 1 | 0;
    PathBezierCubicCurveToCasteljau_28ImVector_ImVec2___2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $20, $21, $13, $11, $16, $18, $1, $2, $9, $10);
    continue;
   }
   break;
  };
 }
 
 function ImDrawList__PathBezierQuadraticCurveTo_28ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0;
  $4 = ((SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) + SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) | 0) - 8 | 0;
  $9 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
  $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
  if (!$3) {
   PathBezierQuadraticCurveToCasteljau_28ImVector_ImVec2___2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0 + 84 | 0, $10, $9, SAFE_HEAP_LOAD_f32_4_4($1, 0), SAFE_HEAP_LOAD_f32_4_4($1, 4), SAFE_HEAP_LOAD_f32_4_4($2, 0), SAFE_HEAP_LOAD_f32_4_4($2, 4), SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 16), 0);
   return;
  }
  if (($3 | 0) > 0) {
   $14 = Math_fround(Math_fround(1.0) / Math_fround($3 | 0));
   $4 = 1;
   while (1) {
    $11 = $4;
    $5 = Math_fround($14 * Math_fround($4 | 0));
    $12 = Math_fround($5 * $5);
    $7 = Math_fround(Math_fround(1.0) - $5);
    $13 = Math_fround($7 * $7);
    $5 = Math_fround($5 * Math_fround($7 + $7));
    $7 = Math_fround(Math_fround($12 * SAFE_HEAP_LOAD_f32_4_4($2, 4)) + Math_fround(Math_fround($13 * $9) + Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($1, 4))));
    $5 = Math_fround(Math_fround($12 * SAFE_HEAP_LOAD_f32_4_4($2, 0)) + Math_fround(Math_fround($13 * $10) + Math_fround($5 * SAFE_HEAP_LOAD_f32_4_4($1, 0))));
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
    label$4 : {
     if (($6 | 0) != ($4 | 0)) {
      break label$4
     }
     $8 = $6 + 1 | 0;
     $15 = $4;
     if ($4) {
      $6 = $4 + (($4 | 0) / 2 | 0) | 0
     } else {
      $6 = 8
     }
     $4 = ($6 | 0) > ($8 | 0) ? $6 : $8;
     if (($15 | 0) >= ($4 | 0)) {
      break label$4
     }
     $6 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
     $8 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
     if ($8) {
      __memcpy($6, $8, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $4);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $6);
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
    SAFE_HEAP_STORE_f32_4_4($4, 4, $7);
    SAFE_HEAP_STORE_f32_4_4($4, 0, $5);
    SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
    $4 = $11 + 1 | 0;
    if (($3 | 0) != ($11 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function PathBezierQuadraticCurveToCasteljau_28ImVector_ImVec2___2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0);
  while (1) {
   label$1 : {
    $10 = Math_fround($6 - $2);
    $11 = Math_fround($5 - $1);
    $13 = Math_fround(Math_fround(Math_fround($3 - $5) * $10) - Math_fround($11 * Math_fround($4 - $6)));
    if (Math_fround(Math_fround($13 * $13) * Math_fround(4.0)) < Math_fround(Math_fround(Math_fround($11 * $11) + Math_fround($10 * $10)) * $7)) {
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $8 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$4 : {
      if (($9 | 0) != ($8 | 0)) {
       break label$4
      }
      $12 = $9 + 1 | 0;
      $14 = $8;
      if ($8) {
       $9 = $8 + (($8 | 0) / 2 | 0) | 0
      } else {
       $9 = 8
      }
      $8 = ($9 | 0) > ($12 | 0) ? $9 : $12;
      if (($14 | 0) >= ($8 | 0)) {
       break label$4
      }
      $9 = ImGui__MemAlloc_28unsigned_20long_29($8 << 3);
      $12 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      if ($12) {
       __memcpy($9, $12, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 3);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
      }
      SAFE_HEAP_STORE_i32_4_4($0, 4, $8);
      SAFE_HEAP_STORE_i32_4_4($0, 8, $9);
     }
     $8 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + (SAFE_HEAP_LOAD_i32_4_4($0, 0) << 3) | 0;
     SAFE_HEAP_STORE_f32_4_4($8, 4, $6);
     SAFE_HEAP_STORE_f32_4_4($8, 0, $5);
     SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
     break label$1;
    }
    if (($8 | 0) > 9) {
     break label$1
    }
    $10 = $1;
    $11 = $2;
    $1 = Math_fround(Math_fround($1 + $3) * Math_fround(.5));
    $13 = $1;
    $2 = Math_fround(Math_fround($2 + $4) * Math_fround(.5));
    $15 = $2;
    $3 = Math_fround(Math_fround($3 + $5) * Math_fround(.5));
    $1 = Math_fround(Math_fround($1 + $3) * Math_fround(.5));
    $4 = Math_fround(Math_fround($4 + $6) * Math_fround(.5));
    $2 = Math_fround(Math_fround($2 + $4) * Math_fround(.5));
    $8 = $8 + 1 | 0;
    PathBezierQuadraticCurveToCasteljau_28ImVector_ImVec2___2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $10, $11, $13, $15, $1, $2, $7, $8);
    continue;
   }
   break;
  };
 }
 
 function ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  label$1 : {
   label$2 : {
    $4 = $4 & 496 ? $4 : $4 | 240;
    if (($4 & 496) != 256) {
     $9 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     $10 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     $6 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($9 - $10))) * (($4 & 48) == 48 ? Math_fround(.5) : ($4 & 192) == 192 ? Math_fround(.5) : Math_fround(1.0))) + Math_fround(-1.0));
     $3 = $3 < $6 ? $3 : $6;
     $9 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
     $6 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
     $9 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($9 - $6))) * (($4 & 80) == 80 ? Math_fround(.5) : ($4 & 160) == 160 ? Math_fround(.5) : Math_fround(1.0))) + Math_fround(-1.0));
     $3 = $3 < $9 ? $3 : $9;
     if (!($3 <= Math_fround(0.0))) {
      break label$2
     }
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
    label$4 : {
     if (($4 | 0) != ($5 | 0)) {
      break label$4
     }
     $7 = $4 + 1 | 0;
     if ($5) {
      $4 = $5 + (($5 | 0) / 2 | 0) | 0
     } else {
      $4 = 8
     }
     $4 = ($4 | 0) > ($7 | 0) ? $4 : $7;
     if (($4 | 0) <= ($5 | 0)) {
      break label$4
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
     if ($7) {
      __memcpy($5, $7, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $4);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $5);
    }
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $4 = $5 + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 84, $4);
    $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    $13 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    $11 = $4;
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
    label$8 : {
     if (($11 | 0) != ($4 | 0)) {
      break label$8
     }
     $7 = $5 + 2 | 0;
     $11 = $4;
     if ($4) {
      $5 = $4 + (($4 | 0) / 2 | 0) | 0
     } else {
      $5 = 8
     }
     $4 = ($5 | 0) > ($7 | 0) ? $5 : $7;
     if (($11 | 0) >= ($4 | 0)) {
      break label$8
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
     if ($7) {
      __memcpy($5, $7, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $4);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $5);
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 4, $12);
    SAFE_HEAP_STORE_i32_4_4($4, 0, $13);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $5 = $4 + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 84, $5);
    $11 = $5;
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
    label$12 : {
     if (($11 | 0) != ($5 | 0)) {
      break label$12
     }
     $7 = $4 + 2 | 0;
     if ($5) {
      $4 = $5 + (($5 | 0) / 2 | 0) | 0
     } else {
      $4 = 8
     }
     $4 = ($4 | 0) > ($7 | 0) ? $4 : $7;
     if (($4 | 0) <= ($5 | 0)) {
      break label$12
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
     if ($7) {
      __memcpy($5, $7, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $4);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $5);
    }
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $5 = $4 + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 84, $5);
    $7 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
    $12 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
    label$16 : {
     if (($1 | 0) != ($5 | 0)) {
      break label$16
     }
     $2 = $4 + 2 | 0;
     $5 = $1;
     if ($1) {
      $4 = $1 + (($1 | 0) / 2 | 0) | 0
     } else {
      $4 = 8
     }
     $1 = ($2 | 0) < ($4 | 0) ? $4 : $2;
     if (($5 | 0) >= ($1 | 0)) {
      break label$16
     }
     $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
     if ($4) {
      __memcpy($2, $4, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
     SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 4, $7);
    SAFE_HEAP_STORE_i32_4_4($1, 0, $12);
    SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
    break label$1;
   }
   $9 = $6;
   $6 = $4 & 16 ? $3 : Math_fround(0.0);
   SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround($9 + $6));
   SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($10 + $6));
   $5 = $8 + 8 | 0;
   ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0, $5, $6, 6, 9);
   $10 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $6 = $4 & 32 ? $3 : Math_fround(0.0);
   SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($1, 4)));
   SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($10 - $6));
   ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0, $5, $6, 9, 12);
   $10 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $6 = $4 & 128 ? $3 : Math_fround(0.0);
   SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) - $6));
   SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($10 - $6));
   ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0, $5, $6, 0, 3);
   $6 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   $3 = $4 & 64 ? $3 : Math_fround(0.0);
   SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) - $3));
   SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($3 + $6));
   ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0, $5, $3, 3, 6);
  }
  __stack_pointer = $8 + 16 | 0;
 }
 
 function ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
  if ($3 >>> 0 >= 16777216) {
   $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) + Math_fround(.5));
   $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 0) + Math_fround(.5));
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($5 | 0) != ($1 | 0)) {
     break label$2
    }
    $6 = $5 + 1 | 0;
    $9 = $1;
    if ($1) {
     $5 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $5 = 8
    }
    $1 = ($5 | 0) > ($6 | 0) ? $5 : $6;
    if (($9 | 0) >= ($1 | 0)) {
     break label$2
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($6) {
     __memcpy($5, $6, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $5);
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 4, $7);
   SAFE_HEAP_STORE_f32_4_4($1, 0, $8);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $1 = $5 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) + Math_fround(.5));
   $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) + Math_fround(.5));
   $2 = $1;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$6 : {
    if (($2 | 0) != ($1 | 0)) {
     break label$6
    }
    $5 = $5 + 2 | 0;
    $9 = $1;
    if ($1) {
     $2 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $2 = 8
    }
    $1 = ($2 | 0) > ($5 | 0) ? $2 : $5;
    if (($9 | 0) >= ($1 | 0)) {
     break label$6
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($5) {
     __memcpy($2, $5, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 4, $7);
   SAFE_HEAP_STORE_f32_4_4($1, 0, $8);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 92), $1, $3, 0, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
 }
 
 function ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = Math_fround(0);
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  if ($3 >>> 0 >= 16777216) {
   label$2 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 36) & 1) {
     $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) + Math_fround(.5)));
     SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($8 + Math_fround(.5)));
     $8 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) + Math_fround(-.5)));
     SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround($8 + Math_fround(-.5)));
     break label$2;
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) + Math_fround(.5)));
    SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($8 + Math_fround(.5)));
    $8 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) + Math_fround(-.49000000953674316)));
    SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround($8 + Math_fround(-.49000000953674316)));
   }
   ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0, $7 + 8 | 0, $7, $4, $5);
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $3, 1, $6);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  __stack_pointer = $7 + 16 | 0;
 }
 
 function ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  if ($3 >>> 0 >= 16777216) {
   if (!(!($4 <= Math_fround(0.0)) & ($5 & 496) != 256)) {
    ImDrawList__PrimReserve_28int_2c_20int_29($0, 6, 4);
    $10 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
    $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    $13 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    $5 = SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 0);
    $9 = i64toi32_i32$HIGH_BITS;
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
    $7 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
    SAFE_HEAP_STORE_i32_2_2($6, 10, $7 + 3 | 0);
    $8 = $7 + 2 | 0;
    SAFE_HEAP_STORE_i32_2_2($6, 8, $8);
    SAFE_HEAP_STORE_i32_2_2($6, 6, $7);
    SAFE_HEAP_STORE_i32_2_2($6, 4, $8);
    SAFE_HEAP_STORE_i32_2_2($6, 2, $7 + 1 | 0);
    SAFE_HEAP_STORE_i32_2_2($6, 0, $7);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $5, $9);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1, 20, $13);
    SAFE_HEAP_STORE_i32_4_4($1, 16, $3);
    SAFE_HEAP_STORE_i32_4_4($1 + 24 | 0, 0, $12);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 28 | 0, 0, $5, $9);
    $8 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($8 + 36 | 0, 0, $3);
    SAFE_HEAP_STORE_i64_8_4($8, 40, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, $5, $9);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1, 60, $11);
    SAFE_HEAP_STORE_i32_4_4($1 - -64 | 0, 0, $10);
    SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $3);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 68 | 0, 0, $5, $9);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $3);
    SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
    return;
   }
   ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0, $1, $2, $4, $5);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $3);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
 }
 
 function ImDrawList__AddRectFilledMultiColor_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  if (($3 | $4 | $5 | $6) >>> 0 >= 16777216) {
   $9 = SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 0);
   $10 = i64toi32_i32$HIGH_BITS;
   ImDrawList__PrimReserve_28int_2c_20int_29($0, 6, 4);
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
   $8 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
   SAFE_HEAP_STORE_i32_2_2($7, 0, $8);
   SAFE_HEAP_STORE_i32_4_4($0, 56, $7 + 2 | 0);
   SAFE_HEAP_STORE_i32_2_2($7, 2, $8 + 1 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 56, $7 + 4 | 0);
   $11 = $8 + 2 | 0;
   SAFE_HEAP_STORE_i32_2_2($7, 4, $11);
   SAFE_HEAP_STORE_i32_4_4($0, 56, $7 + 6 | 0);
   SAFE_HEAP_STORE_i32_2_2($7, 6, $8);
   SAFE_HEAP_STORE_i32_4_4($0, 56, $7 + 8 | 0);
   SAFE_HEAP_STORE_i32_2_2($7, 8, $11);
   SAFE_HEAP_STORE_i32_4_4($0, 56, $7 + 10 | 0);
   SAFE_HEAP_STORE_i32_2_2($7, 10, $8 + 3 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 56, $7 + 12 | 0);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $9, $10);
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($7, 16, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 52, $7 + 20 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 1 | 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   SAFE_HEAP_STORE_i32_4_4($7 + 24 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 4));
   SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $9, $10);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($3, 16, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 52, $3 + 20 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 1 | 0);
   SAFE_HEAP_STORE_i64_8_4($3, 20, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $9, $10);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($3, 16, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 52, $3 + 20 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 1 | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2, 4));
   SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $9, $10);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($1, 16, $6);
   SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 20 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 1 | 0);
  }
 }
 
 function ImDrawList__AddTriangle_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  if ($4 >>> 0 >= 16777216) {
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($7 | 0) != ($6 | 0)) {
     break label$2
    }
    $8 = $7 + 1 | 0;
    $9 = $6;
    if ($6) {
     $7 = $6 + (($6 | 0) / 2 | 0) | 0
    } else {
     $7 = 8
    }
    $6 = ($7 | 0) > ($8 | 0) ? $7 : $8;
    if (($9 | 0) >= ($6 | 0)) {
     break label$2
    }
    $7 = ImGui__MemAlloc_28unsigned_20long_29($6 << 3);
    $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($8) {
     __memcpy($7, $8, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $7);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $1 = $6 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   $7 = $1;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$6 : {
    if (($7 | 0) != ($1 | 0)) {
     break label$6
    }
    $7 = $6 + 2 | 0;
    $9 = $1;
    if ($1) {
     $6 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $6 = 8
    }
    $1 = ($6 | 0) > ($7 | 0) ? $6 : $7;
    if (($9 | 0) >= ($1 | 0)) {
     break label$6
    }
    $6 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($7) {
     __memcpy($6, $7, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $6);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $1 = $2 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   $6 = $1;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$10 : {
    if (($6 | 0) != ($1 | 0)) {
     break label$10
    }
    $6 = $2 + 2 | 0;
    $7 = $1;
    if ($1) {
     $2 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $2 = 8
    }
    $1 = ($2 | 0) > ($6 | 0) ? $2 : $6;
    if (($7 | 0) >= ($1 | 0)) {
     break label$10
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($6) {
     __memcpy($2, $6, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 92), $1, $4, 1, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
 }
 
 function ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  if ($4 >>> 0 >= 16777216) {
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($6 | 0) != ($5 | 0)) {
     break label$2
    }
    $7 = $6 + 1 | 0;
    $8 = $5;
    if ($5) {
     $6 = $5 + (($5 | 0) / 2 | 0) | 0
    } else {
     $6 = 8
    }
    $5 = ($6 | 0) > ($7 | 0) ? $6 : $7;
    if (($8 | 0) >= ($5 | 0)) {
     break label$2
    }
    $6 = ImGui__MemAlloc_28unsigned_20long_29($5 << 3);
    $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($7) {
     __memcpy($6, $7, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $5);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $6);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $1 = $5 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   $6 = $1;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$6 : {
    if (($6 | 0) != ($1 | 0)) {
     break label$6
    }
    $6 = $5 + 2 | 0;
    $8 = $1;
    if ($1) {
     $5 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $5 = 8
    }
    $1 = ($5 | 0) > ($6 | 0) ? $5 : $6;
    if (($8 | 0) >= ($1 | 0)) {
     break label$6
    }
    $5 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($6) {
     __memcpy($5, $6, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $5);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $1 = $2 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   $5 = $1;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$10 : {
    if (($5 | 0) != ($1 | 0)) {
     break label$10
    }
    $5 = $2 + 2 | 0;
    $6 = $1;
    if ($1) {
     $2 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $2 = 8
    }
    $1 = ($2 | 0) > ($5 | 0) ? $2 : $5;
    if (($6 | 0) >= ($1 | 0)) {
     break label$10
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($5) {
     __memcpy($2, $5, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 92), $1, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
 }
 
 function ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0);
  if (!($3 >>> 0 < 16777216 | $2 <= Math_fround(0.0))) {
   label$2 : {
    if (($4 | 0) <= 0) {
     ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, Math_fround($2 + Math_fround(-.5)), 0, 48);
     SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) - 1 | 0);
     break label$2;
    }
    $6 = $1;
    $7 = Math_fround($2 + Math_fround(-.5));
    $1 = ($4 | 0) >= 512 ? 512 : $4;
    $1 = ($1 | 0) <= 3 ? 3 : $1;
    $2 = Math_fround($1 | 0);
    ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $6, $7, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2), $1 - 1 | 0);
   }
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $3, 1, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
 }
 
 function ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0);
  if (!($3 >>> 0 < 16777216 | $2 <= Math_fround(0.0))) {
   label$2 : {
    if (($4 | 0) <= 0) {
     ImDrawList___PathArcToFastEx_28ImVec2_20const__2c_20float_2c_20int_2c_20int_2c_20int_29($0, $1, $2, 0, 48);
     SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) - 1 | 0);
     break label$2;
    }
    $5 = $1;
    $6 = $2;
    $1 = ($4 | 0) >= 512 ? 512 : $4;
    $1 = ($1 | 0) <= 3 ? 3 : $1;
    $2 = Math_fround($1 | 0);
    ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $5, $6, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2), $1 - 1 | 0);
   }
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $3);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
 }
 
 function ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0;
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  label$1 : {
   if ($4 >>> 0 < 16777216) {
    break label$1
   }
   if (!$6) {
    $6 = strlen($5) + $5 | 0
   }
   $12 = $6;
   if (($12 | 0) == ($5 | 0)) {
    break label$1
   }
   $6 = $1;
   if (!$6) {
    $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 8)
   }
   if ($2 == Math_fround(0.0)) {
    $2 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 12)
   }
   SAFE_HEAP_STORE_i64_8_8($9 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 104 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($9, 16, SAFE_HEAP_LOAD_i64_8_4($0, 96), i64toi32_i32$HIGH_BITS);
   if ($8) {
    $10 = SAFE_HEAP_LOAD_f32_4_4($9, 16);
    $11 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
    SAFE_HEAP_STORE_f32_4_4($9, 16, $10 >= $11 ? $10 : $11);
    $10 = SAFE_HEAP_LOAD_f32_4_4($9, 20);
    $11 = SAFE_HEAP_LOAD_f32_4_4($8, 4);
    SAFE_HEAP_STORE_f32_4_4($9, 20, $10 >= $11 ? $10 : $11);
    $10 = SAFE_HEAP_LOAD_f32_4_4($9, 24);
    $11 = SAFE_HEAP_LOAD_f32_4_4($8, 8);
    SAFE_HEAP_STORE_f32_4_4($9, 24, $10 < $11 ? $10 : $11);
    $10 = SAFE_HEAP_LOAD_f32_4_4($9, 28);
    $11 = SAFE_HEAP_LOAD_f32_4_4($8, 12);
    SAFE_HEAP_STORE_f32_4_4($9, 28, $10 < $11 ? $10 : $11);
   }
   $1 = SAFE_HEAP_LOAD_i64_8_4($3, 0);
   $3 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($9, 0, $1, $3);
   SAFE_HEAP_STORE_i64_8_8($9, 8, $1, $3);
   ImFont__RenderText_28ImDrawList__2c_20float_2c_20ImVec2_2c_20unsigned_20int_2c_20ImVec4_20const__2c_20char_20const__2c_20char_20const__2c_20float_2c_20bool_29_20const($6, $0, $2, $9, $4, $9 + 16 | 0, $5, $12, $7, ($8 | 0) != 0);
  }
  __stack_pointer = $9 + 32 | 0;
 }
 
 function ImFont__RenderText_28ImDrawList__2c_20float_2c_20ImVec2_2c_20unsigned_20int_2c_20ImVec4_20const__2c_20char_20const__2c_20char_20const__2c_20float_2c_20bool_29_20const($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0), $34 = 0, $35 = Math_fround(0), $36 = 0, $37 = 0, $38 = 0;
  $26 = __stack_pointer - 16 | 0;
  __stack_pointer = $26;
  $12 = $7;
  if (!$7) {
   $12 = strlen($6) + $6 | 0
  }
  $13 = $12;
  $10 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
  label$2 : {
   if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
    $7 = ~~$10;
    break label$2;
   }
   $7 = -2147483648;
  }
  $15 = Math_fround($7 | 0);
  SAFE_HEAP_STORE_f32_4_4($3, 0, $15);
  $10 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
  label$4 : {
   if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
    $7 = ~~$10;
    break label$4;
   }
   $7 = -2147483648;
  }
  $10 = Math_fround($7 | 0);
  SAFE_HEAP_STORE_f32_4_4($3, 4, $10);
  $17 = SAFE_HEAP_LOAD_f32_4_4($5, 12);
  label$6 : {
   if ($17 < $10) {
    break label$6
   }
   $14 = $2;
   $2 = SAFE_HEAP_LOAD_f32_4_4($0, 16);
   $23 = Math_fround($14 / $2);
   $27 = Math_fround($2 * $23);
   label$7 : {
    label$8 : {
     $18 = $8 > Math_fround(0.0);
     if ($18) {
      break label$8
     }
     $14 = Math_fround($27 + $10);
     $20 = SAFE_HEAP_LOAD_f32_4_4($5, 4);
     $7 = $14 < $20;
     if (!$7 | !$7 | $6 >>> 0 >= $13 >>> 0) {
      break label$8
     }
     $12 = $6;
     while (1) {
      $6 = memchr($12, 10, $13 - $12 | 0);
      $12 = $6 ? $6 + 1 | 0 : $13;
      $2 = $14;
      $14 = Math_fround($27 + $2);
      if (!($20 > $14)) {
       $19 = $12;
       break label$7;
      }
      $19 = $12;
      if ($12 >>> 0 < $13 >>> 0) {
       continue
      }
      break;
     };
     break label$7;
    }
    $19 = $6;
    $2 = $10;
   }
   $7 = $19;
   label$11 : {
    if ($18) {
     $19 = $13;
     break label$11;
    }
    if (($13 - $7 | 0) < 10001) {
     $19 = $13;
     break label$11;
    }
    if (!($2 < $17)) {
     break label$11
    }
    if ($7 >>> 0 >= $13 >>> 0) {
     break label$11
    }
    $12 = $7;
    $14 = $2;
    while (1) {
     $6 = memchr($12, 10, $13 - $12 | 0);
     $12 = $6 ? $6 + 1 | 0 : $13;
     $14 = Math_fround($27 + $14);
     if (!($17 > $14)) {
      $19 = $12;
      break label$11;
     }
     $19 = $12;
     if ($12 >>> 0 < $13 >>> 0) {
      continue
     }
     break;
    };
   }
   if (($7 | 0) == ($19 | 0)) {
    break label$6
   }
   $36 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
   $6 = $19 - $7 | 0;
   $34 = Math_imul($6, 6);
   ImDrawList__PrimReserve_28int_2c_20int_29($1, $34, $6 << 2);
   $37 = $4 | 16777215;
   $6 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   $12 = SAFE_HEAP_LOAD_i32_4_4($1, 56);
   $11 = SAFE_HEAP_LOAD_i32_4_4($1, 40);
   $18 = 0;
   $14 = $2;
   $2 = $15;
   label$16 : {
    while (1) {
     label$17 : {
      $16 = $11;
      $13 = $12;
      $11 = $6;
      if ($7 >>> 0 >= $19 >>> 0) {
       break label$17
      }
      $15 = $14;
      $17 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
      $10 = $2;
      $14 = $10;
      $2 = $15;
      $6 = $18;
      $28 = $7;
      while (1) {
       label$19 : {
        if (!($8 > Math_fround(0.0))) {
         $14 = $15;
         $7 = $28;
         $6 = $18;
         break label$19;
        }
        $12 = $6;
        if ($6) {
         $6 = $12
        } else {
         $6 = ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($0, $23, $7, $19, Math_fround($8 - Math_fround($14 - $17)));
         $6 = (($6 | 0) == ($7 | 0)) + $6 | 0;
        }
        if ($6 >>> 0 > $7 >>> 0) {
         $10 = $14;
         $14 = $2;
         break label$19;
        }
        $6 = $7;
        $12 = $7;
        label$24 : {
         if ($7 >>> 0 >= $19 >>> 0) {
          break label$24
         }
         while (1) {
          $7 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
          $12 = ($7 | 0) == 32;
          $6 = $6 + ($12 | ($7 - 9 & 255) >>> 0 < 2) | 0;
          if (!(($7 | 0) == 9 | $12)) {
           $12 = $6;
           break label$24;
          }
          $12 = $6;
          if ($6 >>> 0 < $19 >>> 0) {
           continue
          }
          break;
         };
        }
        $14 = $17;
        $2 = Math_fround($27 + $2);
        $6 = 0;
        $7 = $12;
        if ($7 >>> 0 < $19 >>> 0) {
         continue
        }
        break label$17;
       }
       break;
      };
      $38 = $6;
      $2 = $10;
      $6 = SAFE_HEAP_LOAD_i32_1_1($7, 0);
      SAFE_HEAP_STORE_i32_4_4($26, 12, $6);
      label$27 : {
       label$28 : {
        label$29 : {
         label$30 : {
          label$31 : {
           label$32 : {
            label$33 : {
             label$34 : {
              label$35 : {
               label$36 : {
                if (($6 | 0) >= 0) {
                 $7 = $7 + 1 | 0;
                 break label$36;
                }
                $7 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($26 + 12 | 0, $7, $19) + $7 | 0;
                if (!SAFE_HEAP_LOAD_i32_4_4($26, 12)) {
                 break label$35
                }
               }
               $28 = $7;
               label$38 : {
                $31 = SAFE_HEAP_LOAD_i32_4_4($26, 12);
                if ($31 >>> 0 > 31) {
                 break label$38
                }
                $6 = $11;
                $12 = $13;
                $18 = $16;
                $21 = 0;
                $10 = $14;
                label$39 : {
                 switch ($31 - 10 | 0) {
                 case 3:
                  break label$27;
                 case 0:
                  break label$39;
                 default:
                  break label$38;
                 };
                }
                $10 = Math_fround($27 + $14);
                $21 = SAFE_HEAP_LOAD_f32_4_4($5, 12) < $10;
                $2 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
                break label$27;
               }
               $6 = $31 & 65535;
               label$40 : {
                if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= $6 >>> 0) {
                 $7 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
                 break label$40;
                }
                $7 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
                $12 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
                $6 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0, 28) + ($6 << 1) | 0, 0);
                $7 = ($6 | 0) == 65535 ? $7 : $12 + Math_imul($6, 40) | 0;
               }
               if (!$7) {
                $7 = $28;
                $6 = $11;
                $12 = $13;
                $18 = $16;
                $21 = 0;
                break label$28;
               }
               $35 = Math_fround($23 * SAFE_HEAP_LOAD_f32_4_4($7, 4));
               $6 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
               if (!($6 & 2)) {
                $6 = $11;
                $12 = $13;
                $11 = $16;
                break label$29;
               }
               $10 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 8) * $23) + $2);
               $32 = SAFE_HEAP_LOAD_f32_4_4($5, 8);
               if (!($10 <= $32)) {
                break label$32
               }
               $20 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 16) * $23) + $2);
               $15 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
               if (!($20 >= $15)) {
                break label$32
               }
               $17 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 20) * $23) + $14);
               $22 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 12) * $23) + $14);
               $29 = SAFE_HEAP_LOAD_f32_4_4($7, 36);
               $30 = SAFE_HEAP_LOAD_f32_4_4($7, 32);
               $24 = SAFE_HEAP_LOAD_f32_4_4($7, 28);
               $25 = SAFE_HEAP_LOAD_f32_4_4($7, 24);
               if (!$9) {
                $15 = $10;
                $10 = $25;
                break label$34;
               }
               label$45 : {
                if (!($10 < $15)) {
                 $15 = $10;
                 break label$45;
                }
                $25 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround($20 - $15) / Math_fround($20 - $10))) * Math_fround($30 - $25)) + $25);
               }
               $33 = $15;
               $15 = SAFE_HEAP_LOAD_f32_4_4($5, 4);
               label$47 : {
                if (!($15 > $22)) {
                 $15 = $22;
                 break label$47;
                }
                $24 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround($17 - $15) / Math_fround($17 - $22))) * Math_fround($29 - $24)) + $24);
               }
               $22 = $15;
               label$49 : {
                if (!($20 > $32)) {
                 $10 = $20;
                 break label$49;
                }
                $10 = $32;
                $30 = Math_fround(Math_fround(Math_fround(Math_fround($10 - $33) / Math_fround($20 - $33)) * Math_fround($30 - $25)) + $25);
               }
               $20 = $10;
               $10 = SAFE_HEAP_LOAD_f32_4_4($5, 12);
               label$51 : {
                if (!($10 < $17)) {
                 $10 = $17;
                 break label$51;
                }
                $29 = Math_fround(Math_fround(Math_fround(Math_fround($10 - $22) / Math_fround($17 - $22)) * Math_fround($29 - $24)) + $24);
               }
               $15 = $33;
               $17 = $10;
               $10 = $25;
               if (!($17 <= $22)) {
                break label$34
               }
               $7 = $11;
               $11 = $16;
               $16 = 0;
               $18 = 6;
               $2 = Math_fround($2 + $35);
               $12 = $13;
               break label$33;
              }
              $6 = $11;
              $12 = $13;
              $18 = $16;
              $21 = 1;
              break label$28;
             }
             SAFE_HEAP_STORE_i32_2_2($13, 6, $16);
             SAFE_HEAP_STORE_i32_2_2($13, 0, $16);
             SAFE_HEAP_STORE_i32_2_2($13, 10, $16 + 3 | 0);
             $7 = $16 + 2 | 0;
             SAFE_HEAP_STORE_i32_2_2($13, 8, $7);
             SAFE_HEAP_STORE_i32_2_2($13, 4, $7);
             SAFE_HEAP_STORE_i32_2_2($13, 2, $16 + 1 | 0);
             $6 = $6 & 1 ? $37 : $4;
             SAFE_HEAP_STORE_i32_4_4($11, 16, $6);
             SAFE_HEAP_STORE_f32_4_4($11, 4, $22);
             SAFE_HEAP_STORE_f32_4_4($11, 0, $15);
             SAFE_HEAP_STORE_i32_4_4($11 + 36 | 0, 0, $6);
             SAFE_HEAP_STORE_f32_4_4($11 + 24 | 0, 0, $22);
             SAFE_HEAP_STORE_f32_4_4($11, 20, $20);
             SAFE_HEAP_STORE_f32_4_4($11 + 12 | 0, 0, $24);
             SAFE_HEAP_STORE_f32_4_4($11, 8, $10);
             SAFE_HEAP_STORE_i32_4_4($11 + 56 | 0, 0, $6);
             SAFE_HEAP_STORE_f32_4_4($11 + 44 | 0, 0, $17);
             SAFE_HEAP_STORE_f32_4_4($11, 40, $20);
             SAFE_HEAP_STORE_f32_4_4($11 + 32 | 0, 0, $24);
             SAFE_HEAP_STORE_f32_4_4($11 + 28 | 0, 0, $30);
             SAFE_HEAP_STORE_i32_4_4($11 + 76 | 0, 0, $6);
             SAFE_HEAP_STORE_f32_4_4($11 - -64 | 0, 0, $17);
             SAFE_HEAP_STORE_f32_4_4($11, 60, $15);
             SAFE_HEAP_STORE_f32_4_4($11 + 52 | 0, 0, $29);
             SAFE_HEAP_STORE_f32_4_4($11 + 48 | 0, 0, $30);
             SAFE_HEAP_STORE_f32_4_4($11 + 72 | 0, 0, $29);
             SAFE_HEAP_STORE_f32_4_4($11 + 68 | 0, 0, $10);
             $7 = $11 + 80 | 0;
             $11 = $16 + 4 | 0;
             $16 = 1;
             $18 = 0;
             $12 = $13 + 12 | 0;
            }
            $6 = $7;
            $21 = $12;
            $13 = $11;
            $10 = $2;
            if (!$16) {
             break label$30
            }
            break label$31;
           }
           $6 = $11;
           $21 = $13;
           $13 = $16;
           $10 = $2;
          }
          $7 = $6;
          $12 = $21;
          $11 = $13;
          $18 = 0;
          $2 = $10;
         }
         $6 = $7;
         if (!$18) {
          break label$29
         }
         $7 = $28;
         $18 = $11;
         $21 = 0;
         $10 = $14;
         break label$27;
        }
        $7 = $28;
        $18 = $11;
        $21 = 0;
        $10 = $14;
        $2 = Math_fround($35 + $2);
        break label$27;
       }
       $10 = $14;
      }
      $11 = $18;
      $18 = $38;
      $14 = $10;
      $13 = $12;
      $16 = $11;
      if (!$21) {
       continue
      }
      break label$16;
     }
     break;
    };
    $6 = $11;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 24, ($6 - SAFE_HEAP_LOAD_i32_4_4($1 + 32 | 0, 0) | 0) / 20 | 0);
   $0 = $13 - SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0) >> 1;
   SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
   $3 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40) + SAFE_HEAP_LOAD_i32_4_4($1, 8) | 0) - 12 | 0;
   SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) + ($0 - ($36 + $34 | 0) | 0) | 0);
   SAFE_HEAP_STORE_i32_4_4($1, 56, $13);
   SAFE_HEAP_STORE_i32_4_4($1, 52, $6);
   SAFE_HEAP_STORE_i32_4_4($1, 40, $16);
  }
  __stack_pointer = $26 + 16 | 0;
 }
 
 function ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $13 = __stack_pointer - 16 | 0;
  __stack_pointer = $13;
  $20 = $0 + 12 | 0;
  $19 = Math_fround($4 / $1);
  $1 = Math_fround(0.0);
  $4 = Math_fround(0.0);
  $6 = 1;
  $7 = $2;
  while (1) {
   label$1 : {
    $15 = $6;
    $5 = $11;
    $6 = $7;
    $8 = $10;
    $18 = $4;
    $16 = $1;
    $7 = $2;
    if ($3 >>> 0 <= $2 >>> 0) {
     $5 = $7;
     break label$1;
    }
    $2 = SAFE_HEAP_LOAD_i32_1_1($7, 0);
    SAFE_HEAP_STORE_i32_4_4($13, 12, $2);
    $11 = 1;
    if (($2 | 0) < 0) {
     $11 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($13 + 12 | 0, $7, $3)
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($13, 12);
    label$5 : {
     if (!$9) {
      $2 = $6;
      $12 = $15;
      $14 = $7;
      $17 = 1;
      break label$5;
     }
     $14 = $7 + $11 | 0;
     label$7 : {
      if ($9 >>> 0 > 31) {
       break label$7
      }
      $1 = Math_fround(0.0);
      $4 = Math_fround(0.0);
      $10 = Math_fround(0.0);
      $2 = $6;
      $12 = 1;
      $17 = 0;
      label$8 : {
       switch ($9 - 10 | 0) {
       case 0:
        break label$5;
       case 3:
        break label$8;
       default:
        break label$7;
       };
      }
      $1 = $16;
      $4 = $18;
      $10 = $8;
      $12 = $15;
      break label$5;
     }
     $1 = SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($9 << 2) | 0, wasm2js_i32$1 = $20, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) > ($9 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0);
     label$9 : {
      label$10 : {
       label$11 : {
        if (!(($9 | 0) == 9 | ($9 | 0) == 32 | ($9 | 0) == 12288)) {
         $10 = Math_fround($18 + $1);
         if (!($15 & 1)) {
          break label$11
         }
         $4 = $16;
         $2 = $14;
         $6 = $5;
         $1 = $8;
         break label$10;
        }
        $2 = $15 & 1;
        $4 = Math_fround($16 + ($2 ? $8 : Math_fround(-0.0)));
        $10 = $18;
        $8 = Math_fround(($2 ? Math_fround(0.0) : $8) + $1);
        $12 = 0;
        $2 = $2 ? $7 : $6;
        break label$9;
       }
       $4 = Math_fround($16 + Math_fround($8 + $10));
       $10 = Math_fround(0.0);
       $2 = $6;
       $1 = Math_fround(0.0);
      }
      $5 = $9 - 33 | 0;
      if (!($5 >>> 0 > 30 | !(1 << $5 & 1140860931))) {
       $8 = $1;
       $5 = $6;
       $12 = 0;
       break label$9;
      }
      $8 = $1;
      $5 = $6;
      $12 = 1;
     }
     $11 = $2;
     $1 = $4;
     $4 = $10;
     $10 = $8;
     $2 = $11;
     $17 = Math_fround($1 + $4) > $19;
     $14 = $17 ? ($4 < $19 ? ($5 ? $5 : $2) : $7) : $14;
    }
    $7 = $2;
    $11 = $5;
    $6 = $12;
    $2 = $14;
    $5 = $2;
    if (!$17) {
     continue
    }
   }
   break;
  };
  __stack_pointer = $13 + 16 | 0;
  return $5;
 }
 
 function ImDrawList__AddText_28ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0);
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  label$1 : {
   if ($2 >>> 0 < 16777216) {
    break label$1
   }
   $6 = strlen($3) + $3 | 0;
   if (($6 | 0) == ($3 | 0)) {
    break label$1
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   $8 = SAFE_HEAP_LOAD_f32_4_4($5, 12);
   $5 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
   SAFE_HEAP_STORE_i64_8_8($4 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 104 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 16, SAFE_HEAP_LOAD_i64_8_4($0, 96), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
   $7 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($4, 0, $1, $7);
   SAFE_HEAP_STORE_i64_8_8($4, 8, $1, $7);
   ImFont__RenderText_28ImDrawList__2c_20float_2c_20ImVec2_2c_20unsigned_20int_2c_20ImVec4_20const__2c_20char_20const__2c_20char_20const__2c_20float_2c_20bool_29_20const($5, $0, $8, $4, $2, $4 + 16 | 0, $3, $6, Math_fround(0.0), 0);
  }
  __stack_pointer = $4 + 32 | 0;
 }
 
 function ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
  if ($6 >>> 0 >= 16777216) {
   if ((SAFE_HEAP_LOAD_i32_4_4($0 + 112 | 0, 0) | 0) != ($1 | 0)) {
    ImDrawList__PushTextureID_28void__29($0, $1);
    ImDrawList__PrimReserve_28int_2c_20int_29($0, 6, 4);
    $9 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    $10 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
    $11 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
    $12 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    $13 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    $14 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
    $15 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
    $16 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
    $7 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
    SAFE_HEAP_STORE_i32_2_2($1, 6, $7);
    SAFE_HEAP_STORE_i32_2_2($1, 0, $7);
    SAFE_HEAP_STORE_i32_2_2($1, 10, $7 + 3 | 0);
    $8 = $7 + 2 | 0;
    SAFE_HEAP_STORE_i32_2_2($1, 8, $8);
    SAFE_HEAP_STORE_i32_2_2($1, 4, $8);
    SAFE_HEAP_STORE_i32_2_2($1, 2, $7 + 1 | 0);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1, 20, $16);
    SAFE_HEAP_STORE_i32_4_4($1, 16, $6);
    SAFE_HEAP_STORE_i32_4_4($1 + 24 | 0, 0, $15);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 32 | 0, 0, $14);
    SAFE_HEAP_STORE_i32_4_4($1 + 28 | 0, 0, $13);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, $6);
    SAFE_HEAP_STORE_i64_8_4($1, 40, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1, 60, $12);
    SAFE_HEAP_STORE_i32_4_4($1 - -64 | 0, 0, $11);
    SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $6);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 72 | 0, 0, $10);
    SAFE_HEAP_STORE_i32_4_4($1 + 68 | 0, 0, $9);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
    $2 = $1 - 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 72, $2);
    if ($2) {
     $6 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0)
    } else {
     $6 = 0
    }
    SAFE_HEAP_STORE_i32_4_4($0, 112, $6);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    label$5 : {
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $2 = $4 - 1 | 0;
     $3 = $1 + Math_imul($2, 40) | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
     if (!$5) {
      break label$5
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0) == ($6 | 0)) {
      break label$5
     }
     ImDrawList__AddDrawCmd_28_29($0);
     return;
    }
    label$6 : {
     if (($4 | 0) < 2 | $5) {
      break label$6
     }
     $3 = $3 - 40 | 0;
     if (memcmp($0 + 96 | 0, $3, 24)) {
      break label$6
     }
     if (SAFE_HEAP_LOAD_i32_4_4($3, 32)) {
      break label$6
     }
     SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
     return;
    }
    SAFE_HEAP_STORE_i32_4_4($1 + Math_imul($2, 40) | 0, 16, $6);
    return;
   }
   ImDrawList__PrimReserve_28int_2c_20int_29($0, 6, 4);
   $9 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   $10 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
   $11 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
   $12 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   $13 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   $14 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
   $15 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
   $16 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
   $7 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
   SAFE_HEAP_STORE_i32_2_2($1, 6, $7);
   SAFE_HEAP_STORE_i32_2_2($1, 0, $7);
   SAFE_HEAP_STORE_i32_2_2($1, 10, $7 + 3 | 0);
   $8 = $7 + 2 | 0;
   SAFE_HEAP_STORE_i32_2_2($1, 8, $8);
   SAFE_HEAP_STORE_i32_2_2($1, 4, $8);
   SAFE_HEAP_STORE_i32_2_2($1, 2, $7 + 1 | 0);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($1, 20, $16);
   SAFE_HEAP_STORE_i32_4_4($1, 16, $6);
   SAFE_HEAP_STORE_i32_4_4($1 + 24 | 0, 0, $15);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($1 + 32 | 0, 0, $14);
   SAFE_HEAP_STORE_i32_4_4($1 + 28 | 0, 0, $13);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, $6);
   SAFE_HEAP_STORE_i64_8_4($1, 40, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($1, 60, $12);
   SAFE_HEAP_STORE_i32_4_4($1 - -64 | 0, 0, $11);
   SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $6);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($1 + 72 | 0, 0, $10);
   SAFE_HEAP_STORE_i32_4_4($1 + 68 | 0, 0, $9);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $6);
   SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
  }
 }
 
 function ImDrawListSplitter__Split_28ImDrawList__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $9 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if (($2 | 0) > ($9 | 0)) {
   if ((SAFE_HEAP_LOAD_i32_4_4($0 + 12 | 0, 0) | 0) < ($2 | 0)) {
    $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 24));
    $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 16 | 0, 0);
    if ($3) {
     __memcpy($1, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 8), 24));
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 16));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 16, $1);
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   label$4 : {
    if (($1 | 0) >= ($2 | 0)) {
     break label$4
    }
    $4 = $1;
    if ($1) {
     $3 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $1 = ($2 | 0) < ($3 | 0) ? $3 : $2;
    if (($4 | 0) >= ($1 | 0)) {
     break label$4
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 24));
    $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 16 | 0, 0);
    if ($4) {
     __memcpy($3, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 8), 24));
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 16));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 16, $3);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 16 | 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, 0, 0);
  if (($2 | 0) > 1) {
   $1 = 1;
   while (1) {
    $6 = Math_imul($1, 24);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + $6 | 0;
    label$10 : {
     if (($1 | 0) >= ($9 | 0)) {
      SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($3 + 16 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($3 + 8 | 0, 0, 0, 0);
      break label$10;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
     label$12 : {
      if (($4 | 0) >= 0) {
       break label$12
      }
      $5 = $4;
      $4 = $4 + (($4 | 0) / 2 | 0) | 0;
      $4 = ($4 | 0) > 0 ? $4 : 0;
      if (($5 | 0) >= ($4 | 0)) {
       break label$12
      }
      $7 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($4, 40));
      $8 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
      if ($8) {
       __memcpy($7, $8, Math_imul(SAFE_HEAP_LOAD_i32_4_4($3, 0), 40));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($3, 8));
      }
      SAFE_HEAP_STORE_i32_4_4($3, 4, $4);
      SAFE_HEAP_STORE_i32_4_4($3, 8, $7);
     }
     SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + $6 | 0;
     $7 = $4 + 12 | 0;
     $8 = $4 + 16 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
     label$14 : {
      if (($3 | 0) >= 0) {
       break label$14
      }
      $5 = $3;
      $3 = $3 + (($3 | 0) / 2 | 0) | 0;
      $3 = ($3 | 0) > 0 ? $3 : 0;
      if (($5 | 0) >= ($3 | 0)) {
       break label$14
      }
      $6 = ImGui__MemAlloc_28unsigned_20long_29($3 << 1);
      $4 = $4 + 20 | 0;
      $5 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      if ($5) {
       __memcpy($6, $5, SAFE_HEAP_LOAD_i32_4_4($7, 0) << 1);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 0));
      }
      SAFE_HEAP_STORE_i32_4_4($4, 0, $6);
      SAFE_HEAP_STORE_i32_4_4($8, 0, $3);
     }
     SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function ImDrawListSplitter__Merge_28ImDrawList__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) >= 2) {
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($0, $1, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   label$2 : {
    if (!$3) {
     break label$2
    }
    $3 = $3 - 1 | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul($3, 40) | 0;
    if (SAFE_HEAP_LOAD_i32_4_4($2, 28)) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_4_4($2, 32)) {
     break label$2
    }
    SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
   }
   $2 = 0;
   $4 = 0;
   label$3 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) <= 0) {
     break label$3
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $4 = 0;
    if (($3 | 0) <= 0) {
     break label$3
    }
    $4 = (SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul($3, 40) | 0) - 40 | 0;
   }
   if ($4) {
    $5 = SAFE_HEAP_LOAD_i32_4_4($4, 28) + SAFE_HEAP_LOAD_i32_4_4($4, 24) | 0
   } else {
    $5 = $2
   }
   $3 = 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) >= 2) {
    $6 = 1;
    while (1) {
     $7 = $3;
     $10 = $2;
     $9 = $6;
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($6, 24) | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     label$8 : {
      if (($3 | 0) <= 0) {
       break label$8
      }
      $3 = $3 - 1 | 0;
      if (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 8) + Math_imul($3, 40) | 0, 28)) {
       break label$8
      }
      SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     label$9 : {
      if (($6 | 0) <= 0) {
       break label$9
      }
      if (!$4) {
       break label$9
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
      if (memcmp($4, $3, 24)) {
       break label$9
      }
      if (SAFE_HEAP_LOAD_i32_4_4($4, 32) | SAFE_HEAP_LOAD_i32_4_4($3, 32)) {
       break label$9
      }
      SAFE_HEAP_STORE_i32_4_4($4, 28, SAFE_HEAP_LOAD_i32_4_4($4, 28) + SAFE_HEAP_LOAD_i32_4_4($3, 28) | 0);
      $8 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
      memmove($3, $3 + 40 | 0, Math_imul($6, 40) - 40 | 0);
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
      $5 = $5 + $8 | 0;
     }
     $3 = $5;
     $8 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     $6 = ($8 | 0) <= 0;
     if ($6) {
      $5 = $4
     } else {
      $5 = (SAFE_HEAP_LOAD_i32_4_4($2, 8) + Math_imul($8, 40) | 0) - 40 | 0
     }
     $11 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
     label$15 : {
      if ($6) {
       $6 = $3;
       break label$15;
      }
      $12 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
      $2 = $3;
      $4 = 0;
      while (1) {
       $3 = $12 + Math_imul($4, 40) | 0;
       SAFE_HEAP_STORE_i32_4_4($3, 24, $2);
       $2 = SAFE_HEAP_LOAD_i32_4_4($3, 28) + $2 | 0;
       $6 = $2;
       $4 = $4 + 1 | 0;
       if (($8 | 0) != ($4 | 0)) {
        continue
       }
       break;
      };
     }
     $3 = $7 + $11 | 0;
     $2 = $8 + $10 | 0;
     $4 = $5;
     $5 = $6;
     $6 = $9 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) > ($6 | 0)) {
      continue
     }
     break;
    };
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $6 = $2;
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + $2 | 0;
   label$18 : {
    if (($4 | 0) >= ($2 | 0)) {
     break label$18
    }
    if ($4) {
     $5 = $4 + (($4 | 0) / 2 | 0) | 0
    } else {
     $5 = 8
    }
    $5 = ($2 | 0) < ($5 | 0) ? $5 : $2;
    if (($5 | 0) <= ($4 | 0)) {
     break label$18
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($5, 40));
    $7 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    if ($7) {
     __memcpy($4, $7, Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40));
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 8));
    }
    SAFE_HEAP_STORE_i32_4_4($1, 4, $5);
    SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
   $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 16 | 0, 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
   $5 = $4 + $3 | 0;
   label$22 : {
    if (($2 | 0) >= ($5 | 0)) {
     break label$22
    }
    if ($2) {
     $3 = $2 + (($2 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $3 = ($3 | 0) > ($5 | 0) ? $3 : $5;
    if (($3 | 0) <= ($2 | 0)) {
     break label$22
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($3 << 1);
    $7 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
    if ($7) {
     __memcpy($2, $7, SAFE_HEAP_LOAD_i32_4_4($1, 12) << 1);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 20));
    }
    SAFE_HEAP_STORE_i32_4_4($1, 16, $3);
    SAFE_HEAP_STORE_i32_4_4($1, 20, $2);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 12, $5);
   $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0) + ($4 << 1) | 0;
   label$26 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) < 2) {
     $6 = $4;
     break label$26;
    }
    $2 = 1;
    $3 = (SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40) | 0) + Math_imul($6, -40) | 0;
    while (1) {
     $5 = $2;
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($2, 24) | 0;
     $6 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     label$29 : {
      if (!$6) {
       break label$29
      }
      $9 = $3;
      $3 = Math_imul($6, 40);
      $3 = __memcpy($9, SAFE_HEAP_LOAD_i32_4_4($2, 8), $3) + $3 | 0;
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
     if ($6) {
      $9 = SAFE_HEAP_LOAD_i32_4_4($2 + 20 | 0, 0);
      $2 = $6 << 1;
      $4 = __memcpy($4, $9, $2) + $2 | 0;
     }
     $6 = $4;
     $2 = $5 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) > ($2 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_4_4($1, 56, $6);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   label$33 : {
    if ($3) {
     if (!SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul($3, 40) | 0) - 8 | 0, 0)) {
      break label$33
     }
    }
    ImDrawList__AddDrawCmd_28_29($1);
   }
   $3 = $1 + 96 | 0;
   $2 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 40) + SAFE_HEAP_LOAD_i32_4_4($1, 8) | 0) - 40 | 0;
   label$35 : {
    if (!SAFE_HEAP_LOAD_i32_4_4($2, 28)) {
     SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($2 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($2 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     break label$35;
    }
    if (!memcmp($2, $3, 24)) {
     break label$35
    }
    ImDrawList__AddDrawCmd_28_29($1);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, 1);
  }
 }
 
 function ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if (($3 | 0) == ($2 | 0)) {
    break label$1
   }
   $4 = $0 + 16 | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + Math_imul($3, 24) | 0;
   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   $6 = $1 + 8 | 0;
   SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0));
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0;
   SAFE_HEAP_STORE_i64_8_4($3, 12, SAFE_HEAP_LOAD_i64_8_4($1, 12), i64toi32_i32$HIGH_BITS);
   $5 = $3 + 20 | 0;
   $3 = $1 + 20 | 0;
   SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
   $2 = Math_imul($2, 24);
   $5 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + $2 | 0;
   $0 = SAFE_HEAP_LOAD_i64_8_4($5, 0);
   SAFE_HEAP_STORE_i64_8_4($1, 0, $0, i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($5 + 8 | 0, 0));
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + $2 | 0;
   $2 = SAFE_HEAP_LOAD_i64_8_4($4, 12);
   SAFE_HEAP_STORE_i64_8_4($1, 12, $2, i64toi32_i32$HIGH_BITS);
   $4 = SAFE_HEAP_LOAD_i32_4_4($4 + 20 | 0, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $4);
   SAFE_HEAP_STORE_i32_4_4($1, 56, $4 + ($2 << 1) | 0);
   if ($0) {
    $0 = (SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul($0, 40) | 0) - 40 | 0
   } else {
    $0 = 0
   }
   if ($0) {
    $2 = $1 + 96 | 0;
    if (!SAFE_HEAP_LOAD_i32_4_4($0, 28)) {
     SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     return;
    }
    if (!memcmp($0, $2, 24)) {
     break label$1
    }
   }
   ImDrawList__AddDrawCmd_28_29($1);
  }
 }
 
 function ImDrawData__DeIndexAllBuffers_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) <= 0) {
    break label$1
   }
   while (1) {
    $8 = $3;
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16) + ($3 << 2) | 0, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
    label$4 : {
     if (!$4) {
      $3 = $1;
      break label$4;
     }
     label$6 : {
      if (($5 | 0) >= ($4 | 0)) {
       break label$6
      }
      if ($5) {
       $3 = (($5 | 0) / 2 | 0) + $5 | 0
      } else {
       $3 = 8
      }
      $3 = ($3 | 0) > ($4 | 0) ? $3 : $4;
      if (($3 | 0) <= ($5 | 0)) {
       break label$6
      }
      $5 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($3, 20));
      if ($1) {
       __memcpy($5, $1, Math_imul($7, 20));
       ImGui__MemFree_28void__29($1);
      }
      $1 = $5;
      $5 = $3;
     }
     $3 = $5;
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0) > 0) {
      $5 = 0;
      while (1) {
       $6 = $1 + Math_imul($5, 20) | 0;
       $7 = SAFE_HEAP_LOAD_i32_4_4($2, 32) + Math_imul(SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($2, 20) + ($5 << 1) | 0, 0), 20) | 0;
       SAFE_HEAP_STORE_i64_8_4($6, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i32_4_4($6 + 16 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($7 + 16 | 0, 0));
       SAFE_HEAP_STORE_i64_8_4($6 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($7 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
       $5 = $5 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0) > ($5 | 0)) {
        continue
       }
       break;
      };
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
     SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
     $4 = $2 + 28 | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
     $4 = $2 + 32 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
     $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 16 | 0, 0);
     label$13 : {
      if (($1 | 0) >= 0) {
       break label$13
      }
      $4 = $1;
      $1 = $1 + (($1 | 0) / 2 | 0) | 0;
      $1 = ($1 | 0) > 0 ? $1 : 0;
      if (($4 | 0) >= ($1 | 0)) {
       break label$13
      }
      $4 = ImGui__MemAlloc_28unsigned_20long_29($1 << 1);
      $6 = SAFE_HEAP_LOAD_i32_4_4($2 + 20 | 0, 0);
      if ($6) {
       __memcpy($4, $6, SAFE_HEAP_LOAD_i32_4_4($2, 12) << 1);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 20));
      }
      SAFE_HEAP_STORE_i32_4_4($2, 16, $1);
      SAFE_HEAP_STORE_i32_4_4($2, 20, $4);
     }
     SAFE_HEAP_STORE_i32_4_4($2, 12, 0);
     SAFE_HEAP_STORE_i32_4_4($0, 12, SAFE_HEAP_LOAD_i32_4_4($0, 12) + SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0);
    }
    $1 = $3;
    $3 = $8 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) > ($3 | 0)) {
     continue
    }
    break;
   };
  }
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
 }
 
 function ImFontConfig__ImFontConfig_28_29($0) {
  $0 = memset($0, 0, 120);
  SAFE_HEAP_STORE_i32_2_2($0, 72, 65535);
  SAFE_HEAP_STORE_i32_4_4($0, 68, 1065353216);
  SAFE_HEAP_STORE_i32_4_4($0, 56, 2139095039);
  SAFE_HEAP_STORE_i64_8_4($0, 20, 3, 1);
  SAFE_HEAP_STORE_i32_1_1($0, 8, 1);
  return $0;
 }
 
 function ImFontAtlas___ImFontAtlas_28_29($0) {
  var $1 = 0;
  ImFontAtlas__Clear_28_29($0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 84 | 0, 0);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  return $0;
 }
 
 function ImFontAtlas__Clear_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  ImFontAtlas__ClearInputData_28_29($0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  SAFE_HEAP_STORE_i32_1_1($0, 18, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) > 0) {
   $1 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 60) + ($1 << 2) | 0, 0);
    if ($2) {
     ImFont___ImFont_28_29($2);
     ImGui__MemFree_28void__29($2);
    }
    $1 = $1 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) > ($1 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 52, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 60, 0);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 17, 0);
 }
 
 function ImFontAtlas__ClearInputData_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 76);
  if (($1 | 0) > 0) {
   while (1) {
    $1 = Math_imul($2, 120);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + $1 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    label$3 : {
     if (!$4) {
      break label$3
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 8)) {
      break label$3
     }
     ImGui__MemFree_28void__29($4);
     SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 84) + $1 | 0, 0, 0);
    }
    $2 = $2 + 1 | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 76);
    if (($2 | 0) < ($1 | 0)) {
     continue
    }
    break;
   }
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  if (($3 | 0) > 0) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 84 | 0, 0);
   $1 = $4 + Math_imul($1, 120) | 0;
   $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0);
   $2 = 0;
   while (1) {
    $5 = ($2 << 2) + $8 | 0;
    $6 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    $7 = SAFE_HEAP_LOAD_i32_4_4($6, 52);
    if (!($7 >>> 0 < $4 >>> 0 | $1 >>> 0 <= $7 >>> 0)) {
     SAFE_HEAP_STORE_i32_4_4($6, 52, 0);
     SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($5, 0), 56, 0);
    }
    $2 = $2 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 84 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 76, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 64, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 72, 0);
  }
  SAFE_HEAP_STORE_i64_8_4($0, 1120, -1, -1);
 }
 
 function ImFontAtlas__ClearTexData_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  SAFE_HEAP_STORE_i32_1_1($0, 18, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
 }
 
 function ImFontAtlas__ClearFonts_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) > 0) {
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 60) + ($1 << 2) | 0, 0);
    if ($2) {
     ImFont___ImFont_28_29($2);
     ImGui__MemFree_28void__29($2);
    }
    $1 = $1 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) > ($1 | 0)) {
     continue
    }
    break;
   }
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 52, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 60, 0);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 17, 0);
 }
 
 function ImFontAtlas__Build_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
  $1 = __stack_pointer - 128 | 0;
  __stack_pointer = $1;
  if (!SAFE_HEAP_LOAD_i32_4_4($0, 76)) {
   ImFontConfig__ImFontConfig_28_29($1 + 8 | 0);
   SAFE_HEAP_STORE_i32_1_1($1, 36, 1);
   SAFE_HEAP_STORE_i64_8_4($1, 28, 1, 1);
   if (SAFE_HEAP_LOAD_f32_4_4($1, 24) <= Math_fround(0.0)) {
    SAFE_HEAP_STORE_i32_4_4($1, 24, 1095761920)
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 82)) {
    $2 = $1 + 82 | 0;
    $3 = SAFE_HEAP_LOAD_f32_4_4($1, 24);
    label$4 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $4 = ~~$3;
      break label$4;
     }
     $4 = -2147483648;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2, 40, 1268, $1);
   }
   $4 = $1 + 52 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 24);
   $5 = Math_fround($3 / Math_fround(13.0));
   label$6 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$6;
    }
    $2 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($2 | 0));
   SAFE_HEAP_STORE_i32_2_2($1, 80, 133);
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 56);
   ImFontAtlas__AddFontFromMemoryCompressedBase85TTF_28char_20const__2c_20float_2c_20ImFontConfig_20const__2c_20unsigned_20short_20const__29($0, $3, $1 + 8 | 0, $2 ? $2 : 21640);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 1112);
  if (!$2) {
   SAFE_HEAP_STORE_i32_4_4(0, 73580, 13);
   $2 = 73580;
  }
  $0 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0]($0) | 0;
  __stack_pointer = $1 + 128 | 0;
  return $0 | 0;
 }
 
 function ImFontAtlas__AddFontFromMemoryCompressedBase85TTF_28char_20const__2c_20float_2c_20ImFontConfig_20const__2c_20unsigned_20short_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $5 = 36160;
  $11 = ImGui__MemAlloc_28unsigned_20long_29((strlen(36160) + 4 | 0) / 5 << 2);
  $4 = SAFE_HEAP_LOAD_i32_1_U_1(36160, 0);
  if ($4) {
   $6 = $11;
   while (1) {
    $4 = $4 << 24 >> 24;
    $7 = (($4 | 0) > 91 ? -36 : -35) + $4 | 0;
    $4 = SAFE_HEAP_LOAD_i32_1_1($5, 1);
    $8 = (($4 | 0) > 91 ? -36 : -35) + $4 | 0;
    $4 = SAFE_HEAP_LOAD_i32_1_1($5, 2);
    $12 = (($4 | 0) > 91 ? -36 : -35) + $4 | 0;
    $4 = SAFE_HEAP_LOAD_i32_1_1($5, 3);
    $13 = (($4 | 0) > 91 ? -36 : -35) + $4 | 0;
    $4 = SAFE_HEAP_LOAD_i32_1_1($5, 4);
    SAFE_HEAP_STORE_i32_4_1($6, 0, $7 + Math_imul($8 + Math_imul($12 + Math_imul($13 + Math_imul((($4 | 0) > 91 ? -36 : -35) + $4 | 0, 85) | 0, 85) | 0, 85) | 0, 85) | 0);
    $4 = SAFE_HEAP_LOAD_i32_1_U_1($5, 5);
    $5 = $5 + 5 | 0;
    $6 = $6 + 4 | 0;
    if ($4) {
     continue
    }
    break;
   };
  }
  $15 = $0;
  $12 = $2;
  $13 = $3;
  $9 = __stack_pointer - 240 | 0;
  __stack_pointer = $9;
  $0 = SAFE_HEAP_LOAD_i32_4_1($11, 8);
  $14 = $0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24);
  $8 = ImGui__MemAlloc_28unsigned_20long_29($14);
  $0 = SAFE_HEAP_LOAD_i32_4_1($11, 0);
  label$1 : {
   if (($0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24)) != 1471938560) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_1($11, 4);
   if ($0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_1($11, 8);
   SAFE_HEAP_STORE_i32_4_4(0, 95648, $8);
   SAFE_HEAP_STORE_i32_4_4(0, 95636, $11);
   SAFE_HEAP_STORE_i32_4_4(0, 95644, $8);
   $10 = ($0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24)) + $8 | 0;
   SAFE_HEAP_STORE_i32_4_4(0, 95640, $10);
   $3 = $10 + 1 | 0;
   $2 = $8;
   $4 = $11 + 16 | 0;
   while (1) {
    $5 = $2;
    $6 = $4;
    $4 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
    label$3 : {
     if ($4 >>> 0 >= 32) {
      if ($4 << 24 >> 24 < 0) {
       $2 = $4 - 127 | 0;
       $0 = $2 + $5 | 0;
       label$6 : {
        if ($0 >>> 0 > $10 >>> 0) {
         break label$6
        }
        $0 = $3;
        $4 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 1) ^ -1) + $5 | 0;
        if ($4 >>> 0 < $8 >>> 0) {
         break label$6
        }
        $0 = $5;
        if (!$2) {
         break label$6
        }
        while (1) {
         SAFE_HEAP_STORE_i32_1_1($0, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0));
         $4 = $4 + 1 | 0;
         $0 = $0 + 1 | 0;
         $2 = $2 - 1 | 0;
         if ($2) {
          continue
         }
         break;
        };
       }
       $2 = $0;
       $0 = $6 + 2 | 0;
       break label$3;
      }
      if ($4 >>> 0 >= 64) {
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($6, 2) + 1 | 0;
       $0 = $2 + $5 | 0;
       label$9 : {
        if ($0 >>> 0 > $10 >>> 0) {
         break label$9
        }
        $0 = $3;
        $4 = ($5 - (SAFE_HEAP_LOAD_i32_1_U_1($6, 1) | $4 << 8) | 0) + 16383 | 0;
        if ($4 >>> 0 < $8 >>> 0) {
         break label$9
        }
        while (1) {
         SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0));
         $4 = $4 + 1 | 0;
         $5 = $5 + 1 | 0;
         $0 = $5;
         $2 = $2 - 1 | 0;
         if ($2) {
          continue
         }
         break;
        };
       }
       $2 = $0;
       $0 = $6 + 3 | 0;
       break label$3;
      }
      $0 = $4 - 31 | 0;
      $2 = $0 + $5 | 0;
      label$11 : {
       if ($10 >>> 0 >= $2 >>> 0) {
        $4 = $6 + 1 | 0;
        $7 = $3;
        if ($4 >>> 0 < $11 >>> 0) {
         break label$11
        }
        __memcpy($5, $4, $0);
       }
       $7 = $2;
      }
      $2 = $7;
      $0 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 0) + $6 | 0) - 30 | 0;
      break label$3;
     }
     if ($4 >>> 0 >= 24) {
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($6, 3) + 1 | 0;
      $0 = $2 + $5 | 0;
      label$14 : {
       if ($0 >>> 0 > $10 >>> 0) {
        break label$14
       }
       $0 = $3;
       $4 = ($5 - (SAFE_HEAP_LOAD_i32_1_U_1($6, 2) | $4 << 16 | SAFE_HEAP_LOAD_i32_1_U_1($6, 1) << 8) | 0) + 1572863 | 0;
       if ($4 >>> 0 < $8 >>> 0) {
        break label$14
       }
       while (1) {
        SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0));
        $4 = $4 + 1 | 0;
        $5 = $5 + 1 | 0;
        $0 = $5;
        $2 = $2 - 1 | 0;
        if ($2) {
         continue
        }
        break;
       };
      }
      $2 = $0;
      $0 = $6 + 4 | 0;
      break label$3;
     }
     if ($4 >>> 0 >= 16) {
      $2 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 3) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($6, 4)) + 1 | 0;
      $0 = $2 + $5 | 0;
      label$17 : {
       if ($0 >>> 0 > $10 >>> 0) {
        break label$17
       }
       $0 = $3;
       $4 = ($5 - (SAFE_HEAP_LOAD_i32_1_U_1($6, 2) | $4 << 16 | SAFE_HEAP_LOAD_i32_1_U_1($6, 1) << 8) | 0) + 1048575 | 0;
       if ($4 >>> 0 < $8 >>> 0) {
        break label$17
       }
       while (1) {
        SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0));
        $4 = $4 + 1 | 0;
        $5 = $5 + 1 | 0;
        $0 = $5;
        $2 = $2 - 1 | 0;
        if ($2) {
         continue
        }
        break;
       };
      }
      $2 = $0;
      $0 = $6 + 5 | 0;
      break label$3;
     }
     if ($4 >>> 0 >= 8) {
      $0 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 1) | $4 << 8) - 2047 | 0;
      $2 = $0 + $5 | 0;
      label$201 : {
       if ($10 >>> 0 >= $2 >>> 0) {
        $4 = $6 + 2 | 0;
        $7 = $3;
        if ($4 >>> 0 < $11 >>> 0) {
         break label$201
        }
        __memcpy($5, $4, $0);
       }
       $7 = $2;
      }
      $2 = $7;
      $0 = ($6 + (SAFE_HEAP_LOAD_i32_1_U_1($6, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($6, 1)) | 0) - 2045 | 0;
      break label$3;
     }
     $0 = $6;
     label$22 : {
      switch ($4 - 4 | 0) {
      case 3:
       $0 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 1) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($6, 2)) + 1 | 0;
       $2 = $0 + $5 | 0;
       label$25 : {
        if ($10 >>> 0 >= $2 >>> 0) {
         $4 = $6 + 3 | 0;
         $7 = $3;
         if ($4 >>> 0 < $11 >>> 0) {
          break label$25
         }
         __memcpy($5, $4, $0);
        }
        $7 = $2;
       }
       $2 = $7;
       $0 = ($6 + (SAFE_HEAP_LOAD_i32_1_U_1($6, 1) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($6, 2)) | 0) + 4 | 0;
       break label$3;
      case 2:
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($6, 4) + 1 | 0;
       $0 = $2 + $5 | 0;
       label$27 : {
        if ($0 >>> 0 > $10 >>> 0) {
         break label$27
        }
        $0 = $3;
        $4 = ((SAFE_HEAP_LOAD_i32_1_U_1($6, 1) << 16 | SAFE_HEAP_LOAD_i32_1_U_1($6, 3) | SAFE_HEAP_LOAD_i32_1_U_1($6, 2) << 8) ^ -1) + $5 | 0;
        if ($4 >>> 0 < $8 >>> 0) {
         break label$27
        }
        while (1) {
         SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0));
         $4 = $4 + 1 | 0;
         $5 = $5 + 1 | 0;
         $0 = $5;
         $2 = $2 - 1 | 0;
         if ($2) {
          continue
         }
         break;
        };
       }
       $2 = $0;
       $0 = $6 + 5 | 0;
       break label$3;
      case 0:
       break label$22;
      default:
       break label$3;
      };
     }
     $2 = (SAFE_HEAP_LOAD_i32_1_U_1($6, 4) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($6, 5)) + 1 | 0;
     $0 = $2 + $5 | 0;
     label$29 : {
      if ($0 >>> 0 > $10 >>> 0) {
       break label$29
      }
      $0 = $3;
      $4 = ((SAFE_HEAP_LOAD_i32_1_U_1($6, 1) << 16 | SAFE_HEAP_LOAD_i32_1_U_1($6, 3) | SAFE_HEAP_LOAD_i32_1_U_1($6, 2) << 8) ^ -1) + $5 | 0;
      if ($4 >>> 0 < $8 >>> 0) {
       break label$29
      }
      while (1) {
       SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0));
       $4 = $4 + 1 | 0;
       $5 = $5 + 1 | 0;
       $0 = $5;
       $2 = $2 - 1 | 0;
       if ($2) {
        continue
       }
       break;
      };
     }
     $2 = $0;
     $0 = $6 + 6 | 0;
    }
    $4 = $0;
    if (($4 | 0) != ($6 | 0) & $2 >>> 0 <= $10 >>> 0) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i32_4_4(0, 95648, $2);
  }
  label$32 : {
   if ($12) {
    __memcpy($9, $12, 120);
    break label$32;
   }
   ImFontConfig__ImFontConfig_28_29($9);
  }
  SAFE_HEAP_STORE_i32_1_1($9, 8, 1);
  __memcpy($9 + 120 | 0, $9, 120);
  SAFE_HEAP_STORE_i32_4_4($9, 124, $14);
  SAFE_HEAP_STORE_i32_4_4($9, 120, $8);
  SAFE_HEAP_STORE_f32_4_4($9, 136, (wasm2js_f32$0 = $1, wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($9, 136), wasm2js_i32$0 = $1 > Math_fround(0.0), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1));
  if ($13) {
   SAFE_HEAP_STORE_i32_4_4($9, 168, $13)
  }
  $0 = ImFontAtlas__AddFont_28ImFontConfig_20const__29($15, $9 + 120 | 0);
  __stack_pointer = $9 + 240 | 0;
  ImGui__MemFree_28void__29($11);
  return $0;
 }
 
 function ImFontAtlasBuildWithStbTruetype_28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = Math_fround(0), $44 = 0, $45 = 0, $46 = 0, $47 = Math_fround(0), $48 = 0, $49 = 0, $50 = Math_fround(0), $51 = Math_fround(0), $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = Math_fround(0), $57 = Math_fround(0), $58 = Math_fround(0), $59 = Math_fround(0), $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = Math_fround(0), $66 = 0, $67 = Math_fround(0), $68 = Math_fround(0), $69 = Math_fround(0), $70 = Math_fround(0), $71 = Math_fround(0), $72 = Math_fround(0), $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = Math_fround(0), $85 = Math_fround(0);
  $11 = __stack_pointer - 640 | 0;
  __stack_pointer = $11;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 1120) | 0) < 0) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
   label$2 : {
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 2)) {
     label$4 : {
      if (($1 | 0) != ($2 | 0)) {
       break label$4
      }
      $3 = $2;
      $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
      $1 = $1 + 1 | 0;
      $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
      if (($3 | 0) >= ($2 | 0)) {
       break label$4
      }
      $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 28));
      $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0);
      if ($3) {
       __memcpy($1, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 64), 28));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 72));
      }
      SAFE_HEAP_STORE_i32_4_4($0, 68, $2);
      SAFE_HEAP_STORE_i32_4_4($0, 72, $1);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 64), 28) | 0;
     SAFE_HEAP_STORE_i32_2_2($2, 0, 245);
     $1 = 27;
     break label$2;
    }
    label$8 : {
     if (($1 | 0) != ($2 | 0)) {
      break label$8
     }
     $3 = $2;
     $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
     $1 = $1 + 1 | 0;
     $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
     if (($3 | 0) >= ($2 | 0)) {
      break label$8
     }
     $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 28));
     $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0);
     if ($3) {
      __memcpy($1, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 64), 28));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 72));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 68, $2);
     SAFE_HEAP_STORE_i32_4_4($0, 72, $1);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 64), 28) | 0;
    SAFE_HEAP_STORE_i32_2_2($2, 0, 2);
    $1 = 2;
   }
   SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 4, -1);
   SAFE_HEAP_STORE_i32_2_2($2, 2, $1);
   SAFE_HEAP_STORE_i64_8_4($2 + 16 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
   SAFE_HEAP_STORE_i32_4_4($0, 1120, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 64, $2 + 1 | 0);
  }
  label$12 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 1124) | 0) >= 0) {
    break label$12
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 4) {
    break label$12
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0);
   label$13 : {
    if (($1 | 0) != ($2 | 0)) {
     break label$13
    }
    $3 = $2;
    $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $1 = $1 + 1 | 0;
    $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
    if (($3 | 0) >= ($2 | 0)) {
     break label$13
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 28));
    $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0);
    if ($3) {
     __memcpy($1, $3, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 64), 28));
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 72));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 68, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 72, $1);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 64), 28) | 0;
   SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($2, 0, 4194369, -1);
   SAFE_HEAP_STORE_i64_8_4($2 + 16 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
   SAFE_HEAP_STORE_i32_4_4($0, 1124, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 64, $2 + 1 | 0);
  }
  SAFE_HEAP_STORE_i64_8_4($0, 28, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 36 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 44 | 0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  if ($2) {
   ImGui__MemFree_28void__29($2)
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
  if ($2) {
   ImGui__MemFree_28void__29($2)
  }
  SAFE_HEAP_STORE_i32_1_1($0, 18, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
  $1 = 0;
  $37 = SAFE_HEAP_LOAD_i32_4_4($0, 76);
  if (($37 | 0) > 0) {
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(($37 | 0) <= 8 ? 8 : $37, 196))
  } else {
   $2 = 0
  }
  $38 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  if (($38 | 0) > 0) {
   $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(($38 | 0) <= 8 ? 8 : $38, 24))
  }
  $35 = memset($2, 0, Math_imul($37, 196));
  $17 = memset($1, 0, Math_imul($38, 24));
  label$5 : {
   label$6 : {
    $4 = (SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) <= 0;
    if ($4) {
     $2 = $4;
     break label$6;
    }
    $3 = 0;
    while (1) {
     label$80 : {
      $60 = $4;
      $45 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + Math_imul($3, 120) | 0;
      $2 = SAFE_HEAP_LOAD_i32_4_4($45, 116);
      $25 = Math_imul($3, 196) + $35 | 0;
      SAFE_HEAP_STORE_i32_4_4($25, 160, -1);
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
      if (($5 | 0) <= 0) {
       break label$80
      }
      $27 = $3;
      $54 = $25 + 160 | 0;
      $9 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
      $4 = 0;
      $3 = -1;
      while (1) {
       $1 = $3;
       if ((SAFE_HEAP_LOAD_i32_4_4($9 + ($4 << 2) | 0, 0) | 0) == ($2 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($54, 0, $4);
        $1 = $4;
       }
       $4 = $4 + 1 | 0;
       if (($4 | 0) < ($5 | 0)) {
        $3 = $1;
        if (($1 | 0) == -1) {
         continue
        }
       }
       break;
      };
      if (($1 | 0) == -1) {
       break label$80
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4($45, 12);
      label$131 : {
       label$14 : {
        label$15 : {
         $22 = SAFE_HEAP_LOAD_i32_4_4($45, 0);
         $2 = SAFE_HEAP_LOAD_i32_1_U_1($22, 0);
         label$16 : {
          label$17 : {
           if (($2 | 0) != 49) {
            break label$17
           }
           if (SAFE_HEAP_LOAD_i32_1_U_1($22, 1)) {
            break label$17
           }
           if (SAFE_HEAP_LOAD_i32_1_U_1($22, 2)) {
            break label$17
           }
           if (!SAFE_HEAP_LOAD_i32_1_U_1($22, 3)) {
            break label$16
           }
          }
          $1 = ($2 | 0) != 116;
          label$18 : {
           if ($1) {
            break label$18
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 1) | 0) != 121) {
            break label$18
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 2) | 0) != 112) {
            break label$18
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 3) | 0) == 49) {
            break label$16
           }
          }
          label$19 : {
           if ($2) {
            if (($2 | 0) != 79) {
             break label$19
            }
            label$21 : {
             if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 1) | 0) != 84) {
              break label$21
             }
             if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 2) | 0) != 84) {
              break label$21
             }
             if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 3) | 0) == 79) {
              break label$16
             }
            }
            if ($2) {
             break label$19
            }
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 1) | 0) != 1) {
            break label$19
           }
           if (SAFE_HEAP_LOAD_i32_1_U_1($22, 2)) {
            break label$19
           }
           if (!SAFE_HEAP_LOAD_i32_1_U_1($22, 3)) {
            break label$16
           }
          }
          if ($1) {
           $4 = -1;
           break label$131;
          }
          $4 = -1;
          label$23 : {
           $2 = SAFE_HEAP_LOAD_i32_1_U_1($22, 1);
           switch ($2 - 114 | 0) {
           case 2:
            break label$14;
           case 0:
            break label$23;
           default:
            break label$131;
           };
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 2) | 0) != 117) {
           break label$15
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 3) | 0) != 101) {
           break label$15
          }
         }
         $4 = $5 ? -1 : 0;
         break label$131;
        }
        if (($2 | 0) == 116) {
         break label$14
        }
        break label$131;
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 2) | 0) != 99) {
        break label$131
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 3) | 0) != 102) {
        break label$131
       }
       $2 = SAFE_HEAP_LOAD_i32_4_1($22, 4);
       $2 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
       if (!(($2 | 0) == 131072 | ($2 | 0) == 65536)) {
        break label$131
       }
       $2 = SAFE_HEAP_LOAD_i32_4_1($22, 8);
       if (($2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24)) <= ($5 | 0)) {
        break label$131
       }
       $2 = SAFE_HEAP_LOAD_i32_4_1(($22 + ($5 << 2) | 0) + 12 | 0, 0);
       $4 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
      }
      SAFE_HEAP_STORE_i64_8_4($25, 52, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($25, 8, $4);
      SAFE_HEAP_STORE_i32_4_4($25, 4, $22);
      SAFE_HEAP_STORE_i32_4_4($25 + 60 | 0, 0, 0);
      $33 = $4 + 12 | 0;
      $9 = 0;
      $2 = $4 + $22 | 0;
      $31 = $2 + 4 | 0;
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($2 + 5 | 0, 0);
      $34 = 0;
      label$27 : {
       if (!$1) {
        break label$27
       }
       while (1) {
        label$29 : {
         label$30 : {
          $2 = $22 + ($33 + ($9 << 4) | 0) | 0;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 99) {
           break label$30
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 109) {
           break label$30
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) != 97) {
           break label$30
          }
          $3 = 1;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 3) | 0) != 112) {
           break label$29
          }
          $2 = SAFE_HEAP_LOAD_i32_4_1($2, 8);
          $5 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
          $3 = 0;
          break label$29;
         }
         $3 = 1;
        }
        if (!$3) {
         $34 = $5;
         break label$27;
        }
        $9 = $9 + 1 | 0;
        if (($1 | 0) != ($9 | 0)) {
         continue
        }
        break;
       };
       $34 = 0;
      }
      $9 = 0;
      $3 = 0;
      label$32 : {
       if (!$1) {
        break label$32
       }
       label$34 : {
        while (1) {
         label$36 : {
          label$37 : {
           $2 = $22 + ($33 + ($9 << 4) | 0) | 0;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 108) {
            break label$37
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 111) {
            break label$37
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) != 99) {
            break label$37
           }
           $3 = 1;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 3) | 0) != 97) {
            break label$36
           }
           $2 = SAFE_HEAP_LOAD_i32_4_1($2, 8);
           $5 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
           $3 = 0;
           break label$36;
          }
          $3 = 1;
         }
         if (!$3) {
          break label$34
         }
         $9 = $9 + 1 | 0;
         if (($1 | 0) != ($9 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
        break label$32;
       }
       $3 = $5;
      }
      $9 = $3;
      SAFE_HEAP_STORE_i32_4_4($25, 16, $3);
      $5 = 0;
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
      $2 = 0;
      label$38 : {
       if (!$1) {
        break label$38
       }
       while (1) {
        label$40 : {
         label$41 : {
          $2 = $22 + ($33 + ($5 << 4) | 0) | 0;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 104) {
           break label$41
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 101) {
           break label$41
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) != 97) {
           break label$41
          }
          $4 = 1;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 3) | 0) != 100) {
           break label$40
          }
          $2 = SAFE_HEAP_LOAD_i32_4_1($2, 8);
          $3 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
          $4 = 0;
          break label$40;
         }
         $4 = 1;
        }
        if (!$4) {
         $2 = $3;
         break label$38;
        }
        $2 = $5 + 1 | 0;
        $5 = $2;
        if (($1 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
       $2 = 0;
      }
      $7 = $2;
      SAFE_HEAP_STORE_i32_4_4($25, 20, $2);
      $5 = 0;
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
      label$43 : {
       if (!$1) {
        $3 = 0;
        break label$43;
       }
       label$45 : {
        while (1) {
         label$47 : {
          label$48 : {
           $2 = $22 + ($33 + ($5 << 4) | 0) | 0;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 103) {
            break label$48
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 108) {
            break label$48
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) != 121) {
            break label$48
           }
           $4 = 1;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 3) | 0) != 102) {
            break label$47
           }
           $2 = SAFE_HEAP_LOAD_i32_4_1($2, 8);
           $3 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
           $4 = 0;
           break label$47;
          }
          $4 = 1;
         }
         if (!$4) {
          break label$45
         }
         $2 = $5 + 1 | 0;
         $5 = $2;
         if (($1 | 0) != ($2 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
       }
      }
      $2 = $3;
      SAFE_HEAP_STORE_i32_4_4($25, 24, $2);
      $5 = 0;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
      $1 = 0;
      label$49 : {
       if (!$4) {
        break label$49
       }
       while (1) {
        label$51 : {
         label$52 : {
          $1 = $22 + ($33 + ($5 << 4) | 0) | 0;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 104) {
           break label$52
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 1) | 0) != 104) {
           break label$52
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) != 101) {
           break label$52
          }
          $10 = 1;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 3) | 0) != 97) {
           break label$51
          }
          $1 = SAFE_HEAP_LOAD_i32_4_1($1, 8);
          $3 = $1 << 24 | ($1 & 65280) << 8 | ($1 >>> 8 & 65280 | $1 >>> 24);
          $10 = 0;
          break label$51;
         }
         $10 = 1;
        }
        if (!$10) {
         $1 = $3;
         break label$49;
        }
        $1 = $5 + 1 | 0;
        $5 = $1;
        if (($1 | 0) != ($4 | 0)) {
         continue
        }
        break;
       };
       $1 = 0;
      }
      $10 = $1;
      SAFE_HEAP_STORE_i32_4_4($25, 28, $1);
      $5 = 0;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
      label$54 : {
       if (!$4) {
        $3 = 0;
        break label$54;
       }
       label$56 : {
        while (1) {
         label$58 : {
          label$59 : {
           $1 = $22 + ($33 + ($5 << 4) | 0) | 0;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 104) {
            break label$59
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 1) | 0) != 109) {
            break label$59
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) != 116) {
            break label$59
           }
           $28 = 1;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 3) | 0) != 120) {
            break label$58
           }
           $1 = SAFE_HEAP_LOAD_i32_4_1($1, 8);
           $3 = $1 << 24 | ($1 & 65280) << 8 | ($1 >>> 8 & 65280 | $1 >>> 24);
           $28 = 0;
           break label$58;
          }
          $28 = 1;
         }
         if (!$28) {
          break label$56
         }
         $1 = $5 + 1 | 0;
         $5 = $1;
         if (($1 | 0) != ($4 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
       }
      }
      $1 = $3;
      SAFE_HEAP_STORE_i32_4_4($25, 32, $1);
      $5 = 0;
      $24 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
      $5 = 0;
      label$60 : {
       if (!$24) {
        break label$60
       }
       while (1) {
        label$62 : {
         label$63 : {
          $4 = $22 + ($33 + ($5 << 4) | 0) | 0;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 107) {
           break label$63
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 1) | 0) != 101) {
           break label$63
          }
          if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) != 114) {
           break label$63
          }
          $28 = 1;
          if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 3) | 0) != 110) {
           break label$62
          }
          $3 = SAFE_HEAP_LOAD_i32_4_1($4, 8);
          $3 = $3 << 24 | ($3 & 65280) << 8 | ($3 >>> 8 & 65280 | $3 >>> 24);
          $28 = 0;
          break label$62;
         }
         $28 = 1;
        }
        if (!$28) {
         $5 = $3;
         break label$60;
        }
        $5 = $5 + 1 | 0;
        if (($5 | 0) != ($24 | 0)) {
         continue
        }
        break;
       };
       $5 = 0;
      }
      SAFE_HEAP_STORE_i32_4_4($25, 36, $5);
      $5 = 0;
      $24 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
      label$65 : {
       if (!$24) {
        $3 = 0;
        break label$65;
       }
       label$67 : {
        while (1) {
         label$69 : {
          label$70 : {
           $4 = $22 + ($33 + ($5 << 4) | 0) | 0;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 71) {
            break label$70
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 1) | 0) != 80) {
            break label$70
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) != 79) {
            break label$70
           }
           $28 = 1;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 3) | 0) != 83) {
            break label$69
           }
           $3 = SAFE_HEAP_LOAD_i32_4_1($4, 8);
           $3 = $3 << 24 | ($3 & 65280) << 8 | ($3 >>> 8 & 65280 | $3 >>> 24);
           $28 = 0;
           break label$69;
          }
          $28 = 1;
         }
         if (!$28) {
          break label$67
         }
         $5 = $5 + 1 | 0;
         if (($5 | 0) != ($24 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
       }
      }
      SAFE_HEAP_STORE_i32_4_4($25, 40, $3);
      if (!$34 | !$7 | (!$10 | !$1)) {
       break label$80
      }
      label$71 : {
       if ($2) {
        if ($9) {
         break label$71
        }
        break label$80;
       }
       SAFE_HEAP_STORE_i32_4_4($11, 108, 2);
       SAFE_HEAP_STORE_i32_4_4($11, 104, 0);
       SAFE_HEAP_STORE_i32_4_4($11, 100, 0);
       SAFE_HEAP_STORE_i32_4_4($11, 96, 0);
       $5 = 0;
       $1 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
       label$73 : {
        if (!$1) {
         $3 = 0;
         break label$73;
        }
        label$75 : {
         while (1) {
          label$77 : {
           label$78 : {
            $2 = $22 + ($33 + ($5 << 4) | 0) | 0;
            if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 67) {
             break label$78
            }
            if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 70) {
             break label$78
            }
            if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) != 70) {
             break label$78
            }
            $4 = 1;
            if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 3) | 0) != 32) {
             break label$77
            }
            $2 = SAFE_HEAP_LOAD_i32_4_1($2, 8);
            $3 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
            $4 = 0;
            break label$77;
           }
           $4 = 1;
          }
          if (!$4) {
           break label$75
          }
          $2 = $5 + 1 | 0;
          $5 = $2;
          if (($1 | 0) != ($2 | 0)) {
           continue
          }
          break;
         };
         $3 = 0;
        }
       }
       if (!$3) {
        break label$80
       }
       SAFE_HEAP_STORE_i64_8_4($25, 100, 0, 0);
       SAFE_HEAP_STORE_i64_8_4($25, 56, 0, 536870912);
       SAFE_HEAP_STORE_i64_8_4($25 + 116 | 0, 0, 0, 0);
       $55 = $25 + 108 | 0;
       SAFE_HEAP_STORE_i64_8_4($55, 0, 0, 0);
       SAFE_HEAP_STORE_i32_4_4($25, 52, $3 + $22 | 0);
       $39 = $11 + 120 | 0;
       $2 = $25 + 52 | 0;
       $10 = SAFE_HEAP_LOAD_i32_4_4($2 + 8 | 0, 0);
       SAFE_HEAP_STORE_i32_4_4($39, 0, $10);
       SAFE_HEAP_STORE_i64_8_8($11, 112, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
       $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
       $1 = $2 + 2 | 0;
       $2 = ($2 | 0) < -2 ? $10 : ($1 | 0) > ($10 | 0) ? $10 : $1;
       SAFE_HEAP_STORE_i32_4_4($11, 116, $2);
       if (($2 | 0) < ($10 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($11, 116, $2 + 1 | 0);
        $2 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($11, 112) + $2 | 0, 0);
       } else {
        $2 = 0
       }
       $2 = $2 & 255;
       $9 = ($2 | 0) > ($10 | 0) ? $10 : $2;
       SAFE_HEAP_STORE_i32_4_4($11, 116, $9);
       $24 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
       $2 = $9;
       $1 = 0;
       $7 = 0;
       while (1) {
        $4 = $7 << 8;
        $3 = $2;
        label$81 : {
         if (($10 | 0) <= ($2 | 0)) {
          $2 = $9;
          $7 = 0;
          break label$81;
         }
         $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
         $2 = $3 + 1 | 0;
         $3 = $2;
        }
        $5 = $3;
        $3 = $2;
        $9 = $2;
        $2 = $5;
        $4 = $4 | $7 & 255;
        $7 = $4;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 2) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
       if ($4) {
        $9 = 0;
        if (($3 | 0) < ($10 | 0)) {
         SAFE_HEAP_STORE_i32_4_4($11, 116, $3 + 1 | 0);
         $9 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
        }
        $5 = $9;
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116) + Math_imul($4, $5) | 0;
        $9 = ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2;
        SAFE_HEAP_STORE_i32_4_4($11, 116, $9);
        $2 = $9;
        $1 = 0;
        $7 = 0;
        if ($5) {
         while (1) {
          $28 = $7 << 8;
          $3 = $2;
          label$88 : {
           if (($10 | 0) <= ($2 | 0)) {
            $2 = $9;
            $7 = 0;
            break label$88;
           }
           $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
           $2 = $3 + 1 | 0;
           $3 = $2;
          }
          $4 = $2;
          $9 = $2;
          $2 = $3;
          $3 = $28 | $7 & 255;
          $7 = $3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != ($5 | 0)) {
           continue
          }
          break;
         };
         SAFE_HEAP_STORE_i32_4_4($11, 116, $4);
         $2 = $3 - 1 | 0;
        } else {
         $2 = -1
        }
        $2 = $2 + SAFE_HEAP_LOAD_i32_4_4($11, 116) | 0;
        SAFE_HEAP_STORE_i32_4_4($11, 116, ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2);
       }
       $28 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
       $9 = $28;
       $2 = $9;
       $1 = 0;
       $7 = 0;
       while (1) {
        $4 = $7 << 8;
        $3 = $2;
        label$91 : {
         if (($10 | 0) <= ($2 | 0)) {
          $2 = $9;
          $7 = 0;
          break label$91;
         }
         $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
         $2 = $3 + 1 | 0;
         $3 = $2;
        }
        $5 = $3;
        $3 = $2;
        $9 = $2;
        $2 = $5;
        $4 = $4 | $7 & 255;
        $7 = $4;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 2) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
       if ($4) {
        $9 = 0;
        if (($3 | 0) < ($10 | 0)) {
         SAFE_HEAP_STORE_i32_4_4($11, 116, $3 + 1 | 0);
         $9 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
        }
        $5 = $9;
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116) + Math_imul($4, $5) | 0;
        $9 = ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2;
        SAFE_HEAP_STORE_i32_4_4($11, 116, $9);
        $2 = $9;
        $1 = 0;
        $7 = 0;
        if ($5) {
         while (1) {
          $32 = $7 << 8;
          $3 = $2;
          label$98 : {
           if (($10 | 0) <= ($2 | 0)) {
            $2 = $9;
            $7 = 0;
            break label$98;
           }
           $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
           $2 = $3 + 1 | 0;
           $3 = $2;
          }
          $4 = $2;
          $9 = $2;
          $2 = $3;
          $3 = $32 | $7 & 255;
          $7 = $3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != ($5 | 0)) {
           continue
          }
          break;
         };
         SAFE_HEAP_STORE_i32_4_4($11, 116, $4);
         $2 = $3 - 1 | 0;
        } else {
         $2 = -1
        }
        $2 = $2 + SAFE_HEAP_LOAD_i32_4_4($11, 116) | 0;
        SAFE_HEAP_STORE_i32_4_4($11, 116, ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2);
       }
       $5 = $11 + 76 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
       $1 = $2 - $28 | 0;
       label$100 : {
        if (($1 | $28) < 0) {
         $9 = 0;
         $1 = 0;
         break label$100;
        }
        $3 = ($10 | 0) < ($28 | 0) | ($2 | 0) > ($10 | 0);
        $9 = $3 ? 0 : $24 + $28 | 0;
        $1 = $3 ? 0 : $1;
       }
       SAFE_HEAP_STORE_i32_4_4($5, 0, $1);
       $3 = $11 + 40 | 0;
       SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, $1);
       SAFE_HEAP_STORE_i32_4_4($11, 72, 0);
       SAFE_HEAP_STORE_i32_4_4($11, 68, $9);
       SAFE_HEAP_STORE_i64_8_8($11, 40, SAFE_HEAP_LOAD_i64_8_4($11, 68), i64toi32_i32$HIGH_BITS);
       stbtt__cff_index_get_28stbtt__buf_2c_20int_29($11 + 80 | 0, $3, 0);
       $9 = $2;
       $1 = 0;
       $7 = 0;
       while (1) {
        $4 = $7 << 8;
        $3 = $2;
        label$103 : {
         if (($10 | 0) <= ($2 | 0)) {
          $2 = $9;
          $7 = 0;
          break label$103;
         }
         $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
         $2 = $3 + 1 | 0;
         $3 = $2;
        }
        $5 = $3;
        $3 = $2;
        $9 = $2;
        $2 = $5;
        $4 = $4 | $7 & 255;
        $7 = $4;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 2) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
       if ($4) {
        $9 = 0;
        if (($3 | 0) < ($10 | 0)) {
         SAFE_HEAP_STORE_i32_4_4($11, 116, $3 + 1 | 0);
         $9 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
        }
        $5 = $9;
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116) + Math_imul($4, $5) | 0;
        $9 = ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2;
        SAFE_HEAP_STORE_i32_4_4($11, 116, $9);
        $2 = $9;
        $1 = 0;
        $7 = 0;
        if ($5) {
         while (1) {
          $28 = $7 << 8;
          $3 = $2;
          label$110 : {
           if (($10 | 0) <= ($2 | 0)) {
            $2 = $9;
            $7 = 0;
            break label$110;
           }
           $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
           $2 = $3 + 1 | 0;
           $3 = $2;
          }
          $4 = $2;
          $9 = $2;
          $2 = $3;
          $3 = $28 | $7 & 255;
          $7 = $3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != ($5 | 0)) {
           continue
          }
          break;
         };
         SAFE_HEAP_STORE_i32_4_4($11, 116, $4);
         $2 = $3 - 1 | 0;
        } else {
         $2 = -1
        }
        $2 = $2 + SAFE_HEAP_LOAD_i32_4_4($11, 116) | 0;
        SAFE_HEAP_STORE_i32_4_4($11, 116, ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2);
       }
       $28 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
       $9 = $28;
       $2 = $9;
       $1 = 0;
       $7 = 0;
       while (1) {
        $4 = $7 << 8;
        $3 = $2;
        label$113 : {
         if (($10 | 0) <= ($2 | 0)) {
          $2 = $9;
          $7 = 0;
          break label$113;
         }
         $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
         $2 = $3 + 1 | 0;
         $3 = $2;
        }
        $5 = $3;
        $3 = $2;
        $9 = $2;
        $2 = $5;
        $4 = $4 | $7 & 255;
        $7 = $4;
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 2) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
       if ($4) {
        $9 = 0;
        if (($3 | 0) < ($10 | 0)) {
         SAFE_HEAP_STORE_i32_4_4($11, 116, $3 + 1 | 0);
         $9 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
        }
        $5 = $9;
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116) + Math_imul($4, $5) | 0;
        $9 = ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2;
        SAFE_HEAP_STORE_i32_4_4($11, 116, $9);
        $2 = $9;
        $1 = 0;
        $7 = 0;
        if ($5) {
         while (1) {
          $32 = $7 << 8;
          $3 = $2;
          label$120 : {
           if (($10 | 0) <= ($2 | 0)) {
            $2 = $9;
            $7 = 0;
            break label$120;
           }
           $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $24 | 0, 0);
           $2 = $3 + 1 | 0;
           $3 = $2;
          }
          $4 = $2;
          $9 = $2;
          $2 = $3;
          $3 = $32 | $7 & 255;
          $7 = $3;
          $1 = $1 + 1 | 0;
          if (($1 | 0) != ($5 | 0)) {
           continue
          }
          break;
         };
         SAFE_HEAP_STORE_i32_4_4($11, 116, $4);
         $2 = $3 - 1 | 0;
        } else {
         $2 = -1
        }
        $2 = $2 + SAFE_HEAP_LOAD_i32_4_4($11, 116) | 0;
        SAFE_HEAP_STORE_i32_4_4($11, 116, ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2);
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
       $1 = $2 - $28 | 0;
       label$122 : {
        if (($1 | $28) < 0) {
         $9 = 0;
         $2 = 0;
         break label$122;
        }
        $2 = ($10 | 0) < ($28 | 0) | ($2 | 0) > ($10 | 0);
        $9 = $2 ? 0 : $1;
        $2 = $2 ? 0 : $24 + $28 | 0;
       }
       SAFE_HEAP_STORE_i32_4_4($25, 76, $2);
       SAFE_HEAP_STORE_i32_4_4($25 + 84 | 0, 0, $9);
       SAFE_HEAP_STORE_i32_4_4($25 + 80 | 0, 0, 0);
       $2 = $11 + 80 | 0;
       stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($2, 17, 1, $11 + 104 | 0);
       stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($2, 262, 1, $11 + 108 | 0);
       stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($2, 292, 1, $11 + 100 | 0);
       stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($2, 293, 1, $11 + 96 | 0);
       $1 = $11 + 24 | 0;
       SAFE_HEAP_STORE_i32_4_4($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($39, 0));
       $3 = $11 + 8 | 0;
       SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2 + 8 | 0, 0));
       SAFE_HEAP_STORE_i64_8_8($11, 24, SAFE_HEAP_LOAD_i64_8_8($11, 112), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_8($11, 8, SAFE_HEAP_LOAD_i64_8_4($11, 80), i64toi32_i32$HIGH_BITS);
       $2 = $11 + 56 | 0;
       stbtt__get_subrs_28stbtt__buf_2c_20stbtt__buf_29($2, $1, $3);
       SAFE_HEAP_STORE_i32_4_4($25 + 96 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2 + 8 | 0, 0));
       SAFE_HEAP_STORE_i64_8_4($25, 88, SAFE_HEAP_LOAD_i64_8_4($11, 56), i64toi32_i32$HIGH_BITS);
       if ((SAFE_HEAP_LOAD_i32_4_4($11, 108) | 0) != 2) {
        break label$80
       }
       $39 = SAFE_HEAP_LOAD_i32_4_4($11, 104);
       if (!$39) {
        break label$80
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($11, 100);
       if ($2) {
        $28 = SAFE_HEAP_LOAD_i32_4_4($11, 96);
        if (!$28) {
         break label$80
        }
        $1 = ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2;
        SAFE_HEAP_STORE_i32_4_4($11, 116, $1);
        $24 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
        $10 = SAFE_HEAP_LOAD_i32_4_4($11, 120);
        $3 = $1;
        $5 = $1;
        $9 = 0;
        $2 = 0;
        while (1) {
         $32 = $2 << 8;
         $2 = $5;
         label$126 : {
          if (($10 | 0) <= ($2 | 0)) {
           $5 = $3;
           $7 = 0;
           break label$126;
          }
          $7 = SAFE_HEAP_LOAD_i32_1_U_1($2 + $24 | 0, 0);
          $5 = $2 + 1 | 0;
          $2 = $5;
         }
         $4 = $5;
         $3 = $4;
         $5 = $2;
         $2 = $32 | $7 & 255;
         $9 = $9 + 1 | 0;
         if (($9 | 0) != 2) {
          continue
         }
         break;
        };
        SAFE_HEAP_STORE_i32_4_4($11, 116, $4);
        if ($2) {
         $3 = 0;
         if (($4 | 0) < ($10 | 0)) {
          SAFE_HEAP_STORE_i32_4_4($11, 116, $4 + 1 | 0);
          $3 = SAFE_HEAP_LOAD_i32_1_U_1($4 + $24 | 0, 0);
         }
         $4 = $3;
         $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116) + Math_imul($2, $3) | 0;
         $3 = ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2;
         SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
         $5 = $3;
         $9 = 0;
         $2 = 0;
         if ($4) {
          while (1) {
           $32 = $2 << 8;
           $2 = $5;
           label$133 : {
            if (($10 | 0) <= ($2 | 0)) {
             $5 = $3;
             $7 = 0;
             break label$133;
            }
            $7 = SAFE_HEAP_LOAD_i32_1_U_1($2 + $24 | 0, 0);
            $5 = $2 + 1 | 0;
            $2 = $5;
           }
           $3 = $5;
           $5 = $2;
           $2 = $32 | $7 & 255;
           $9 = $9 + 1 | 0;
           if (($4 | 0) != ($9 | 0)) {
            continue
           }
           break;
          };
          SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
          $2 = $2 - 1 | 0;
         } else {
          $2 = -1
         }
         $2 = $2 + SAFE_HEAP_LOAD_i32_4_4($11, 116) | 0;
         SAFE_HEAP_STORE_i32_4_4($11, 116, ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2);
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
        $5 = $2 - $1 | 0;
        label$135 : {
         if (($5 | $1) < 0) {
          $3 = 0;
          $2 = 0;
          break label$135;
         }
         $2 = ($2 | 0) > ($10 | 0) | ($1 | 0) > ($10 | 0);
         $3 = $2 ? 0 : $1 + $24 | 0;
         $2 = $2 ? 0 : $5;
        }
        SAFE_HEAP_STORE_i32_4_4($25, 116, 0);
        SAFE_HEAP_STORE_i32_4_4($25, 100, $3);
        SAFE_HEAP_STORE_i32_4_4($55, 0, $2);
        SAFE_HEAP_STORE_i32_4_4($25 + 104 | 0, 0, 0);
        $1 = $10 - $28 | 0;
        $2 = ($1 | $28) < 0 | ($10 | 0) < ($28 | 0);
        SAFE_HEAP_STORE_i32_4_4($25, 120, $2 ? 0 : $1);
        SAFE_HEAP_STORE_i32_4_4($25, 112, $2 ? 0 : $24 + $28 | 0);
       }
       $10 = SAFE_HEAP_LOAD_i32_4_4($11, 120);
       $1 = ($39 | 0) < 0 ? $10 : ($10 | 0) < ($39 | 0) ? $10 : $39;
       SAFE_HEAP_STORE_i32_4_4($11, 116, $1);
       $24 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
       $3 = $1;
       $5 = $1;
       $9 = 0;
       $2 = 0;
       while (1) {
        $28 = $2 << 8;
        $2 = $5;
        label$138 : {
         if (($10 | 0) <= ($2 | 0)) {
          $5 = $3;
          $7 = 0;
          break label$138;
         }
         $7 = SAFE_HEAP_LOAD_i32_1_U_1($2 + $24 | 0, 0);
         $5 = $2 + 1 | 0;
         $2 = $5;
        }
        $4 = $5;
        $3 = $4;
        $5 = $2;
        $2 = $28 | $7 & 255;
        $9 = $9 + 1 | 0;
        if (($9 | 0) != 2) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($11, 116, $4);
       if ($2) {
        $3 = 0;
        if (($4 | 0) < ($10 | 0)) {
         SAFE_HEAP_STORE_i32_4_4($11, 116, $4 + 1 | 0);
         $3 = SAFE_HEAP_LOAD_i32_1_U_1($4 + $24 | 0, 0);
        }
        $4 = $3;
        $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116) + Math_imul($2, $3) | 0;
        $3 = ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2;
        SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
        $5 = $3;
        $9 = 0;
        $2 = 0;
        if ($4) {
         while (1) {
          $28 = $2 << 8;
          $2 = $5;
          label$145 : {
           if (($10 | 0) <= ($2 | 0)) {
            $5 = $3;
            $7 = 0;
            break label$145;
           }
           $7 = SAFE_HEAP_LOAD_i32_1_U_1($2 + $24 | 0, 0);
           $5 = $2 + 1 | 0;
           $2 = $5;
          }
          $3 = $5;
          $5 = $2;
          $2 = $28 | $7 & 255;
          $9 = $9 + 1 | 0;
          if (($4 | 0) != ($9 | 0)) {
           continue
          }
          break;
         };
         SAFE_HEAP_STORE_i32_4_4($11, 116, $3);
         $2 = $2 - 1 | 0;
        } else {
         $2 = -1
        }
        $2 = $2 + SAFE_HEAP_LOAD_i32_4_4($11, 116) | 0;
        SAFE_HEAP_STORE_i32_4_4($11, 116, ($2 | 0) < 0 ? $10 : ($2 | 0) > ($10 | 0) ? $10 : $2);
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
       SAFE_HEAP_STORE_i32_4_4($25 + 68 | 0, 0, 0);
       $5 = $2 - $1 | 0;
       $3 = ($5 | $1) < 0 | ($2 | 0) > ($10 | 0);
       SAFE_HEAP_STORE_i32_4_4($25 + 72 | 0, 0, $3 ? 0 : $5);
       SAFE_HEAP_STORE_i32_4_4($25, 64, $3 ? 0 : $1 + $24 | 0);
      }
      $5 = 0;
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($31, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($31, 1);
      $2 = 0;
      label$147 : {
       if (!$1) {
        break label$147
       }
       label$149 : {
        while (1) {
         label$151 : {
          label$152 : {
           $2 = $22 + ($33 + ($5 << 4) | 0) | 0;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 109) {
            break label$152
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) != 97) {
            break label$152
           }
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 2) | 0) != 120) {
            break label$152
           }
           $4 = 1;
           if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 3) | 0) != 112) {
            break label$151
           }
           $2 = SAFE_HEAP_LOAD_i32_4_1($2, 8);
           $3 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
           $4 = 0;
           break label$151;
          }
          $4 = 1;
         }
         if (!$4) {
          break label$149
         }
         $2 = $5 + 1 | 0;
         $5 = $2;
         if (($1 | 0) != ($2 | 0)) {
          continue
         }
         break;
        };
        $2 = 0;
        break label$147;
       }
       $2 = $3;
      }
      if ($2) {
       $2 = $2 + $22 | 0;
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($2 + 4 | 0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($2 + 5 | 0, 0);
      } else {
       $2 = 65535
      }
      SAFE_HEAP_STORE_i32_4_4($25, 12, $2);
      $2 = $22 + $34 | 0;
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($2 + 3 | 0, 0);
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($2 + 2 | 0, 0);
      SAFE_HEAP_STORE_i32_4_4($25, 44, 0);
      $1 = $1 | $2 << 8;
      if ($1) {
       $3 = $34 + 4 | 0;
       $4 = 0;
       while (1) {
        label$157 : {
         label$158 : {
          label$159 : {
           $2 = $22 + ($3 + ($4 << 3) | 0) | 0;
           $5 = SAFE_HEAP_LOAD_i32_2_U_1($2, 0);
           switch (($5 << 8 | $5 >>> 8) & 65535) {
           case 0:
            break label$158;
           case 3:
            break label$159;
           default:
            break label$157;
           };
          }
          $5 = SAFE_HEAP_LOAD_i32_2_U_1($2, 2);
          switch ((($5 << 8 | $5 >>> 8) & 65535) - 1 | 0) {
          case 0:
          case 9:
           break label$158;
          default:
           break label$157;
          };
         }
         $2 = SAFE_HEAP_LOAD_i32_4_1($2, 4);
         SAFE_HEAP_STORE_i32_4_4($25, 44, $34 + ($2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24)) | 0);
        }
        $2 = $4 + 1 | 0;
        $4 = $2;
        if (($1 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
      }
      if (!SAFE_HEAP_LOAD_i32_4_4($25, 44)) {
       break label$80
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($25, 20) + $22 | 0;
      SAFE_HEAP_STORE_i32_4_4($25, 48, SAFE_HEAP_LOAD_i32_1_U_1($2 + 50 | 0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($2 + 51 | 0, 0));
      $2 = SAFE_HEAP_LOAD_i32_4_4($54, 0);
      $1 = SAFE_HEAP_LOAD_i32_4_4($45, 48);
      $4 = $1 ? $1 : 21640;
      SAFE_HEAP_STORE_i32_4_4($25, 156, $4);
      $1 = $17 + Math_imul($2, 24) | 0;
      label$160 : {
       if (!SAFE_HEAP_LOAD_i32_2_U_2($4, 0)) {
        break label$160
       }
       $3 = $25 + 164 | 0;
       while (1) {
        $2 = $4;
        $5 = SAFE_HEAP_LOAD_i32_2_U_2($2, 2);
        if (!$5) {
         break label$160
        }
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
        SAFE_HEAP_STORE_i32_4_4($3, 0, ($4 | 0) > ($5 | 0) ? $4 : $5);
        $4 = $2 + 4 | 0;
        if (SAFE_HEAP_LOAD_i32_2_U_2($2, 4)) {
         continue
        }
        break;
       };
      }
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
      $3 = $1;
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      $1 = SAFE_HEAP_LOAD_i32_4_4($25, 164);
      SAFE_HEAP_STORE_i32_4_4($3, 4, ($1 | 0) < ($2 | 0) ? $2 : $1);
      $3 = $27 + 1 | 0;
      $4 = (SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) <= ($3 | 0);
      $2 = $4;
      if (!$2) {
       continue
      }
      break label$6;
     }
     break;
    };
    $4 = $60;
    $1 = $35;
    $0 = $17;
    break label$5;
   }
   $60 = $2;
   $2 = 0;
   $24 = ($37 | 0) > 0;
   if ($24) {
    $1 = 0;
    $4 = 0;
    while (1) {
     $2 = $1;
     $10 = Math_imul($4, 196) + $35 | 0;
     $27 = $10 + 172 | 0;
     $9 = SAFE_HEAP_LOAD_i32_4_4($10, 160);
     $1 = SAFE_HEAP_LOAD_i32_4_4($10 + 176 | 0, 0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($10, 164) + 32 >> 5;
     label$164 : {
      if (($1 | 0) >= ($3 | 0)) {
       break label$164
      }
      $5 = $1;
      $1 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
      $1 = ($1 | 0) > ($3 | 0) ? $1 : $3;
      if (($5 | 0) >= ($1 | 0)) {
       break label$164
      }
      $5 = ImGui__MemAlloc_28unsigned_20long_29($1 << 2);
      $7 = SAFE_HEAP_LOAD_i32_4_4($27, 8);
      if ($7) {
       __memcpy($5, $7, SAFE_HEAP_LOAD_i32_4_4($27, 0) << 2);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($27, 8));
      }
      SAFE_HEAP_STORE_i32_4_4($27, 4, $1);
      SAFE_HEAP_STORE_i32_4_4($27, 8, $5);
     }
     SAFE_HEAP_STORE_i32_4_4($27, 0, $3);
     memset(SAFE_HEAP_LOAD_i32_4_4($27, 8), 0, $3 << 2);
     $5 = $17 + Math_imul($9, 24) | 0;
     $7 = $5 + 12 | 0;
     if (!SAFE_HEAP_LOAD_i32_4_4($5, 12)) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($7, 4);
      $3 = SAFE_HEAP_LOAD_i32_4_4($5, 4) + 32 >> 5;
      label$169 : {
       if (($1 | 0) >= ($3 | 0)) {
        break label$169
       }
       $9 = $1;
       $1 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
       $1 = ($1 | 0) > ($3 | 0) ? $1 : $3;
       if (($9 | 0) >= ($1 | 0)) {
        break label$169
       }
       $9 = ImGui__MemAlloc_28unsigned_20long_29($1 << 2);
       $25 = SAFE_HEAP_LOAD_i32_4_4($7, 8);
       if ($25) {
        __memcpy($9, $25, SAFE_HEAP_LOAD_i32_4_4($7, 0) << 2);
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($7, 8));
       }
       SAFE_HEAP_STORE_i32_4_4($7, 4, $1);
       SAFE_HEAP_STORE_i32_4_4($7, 8, $9);
      }
      SAFE_HEAP_STORE_i32_4_4($7, 0, $3);
      memset(SAFE_HEAP_LOAD_i32_4_4($7, 8), 0, $3 << 2);
     }
     $9 = $4;
     $3 = SAFE_HEAP_LOAD_i32_4_4($10, 156);
     $1 = SAFE_HEAP_LOAD_i32_2_U_2($3, 0);
     label$173 : {
      if (!$1) {
       break label$173
      }
      $25 = $5 + 8 | 0;
      $22 = $10 + 168 | 0;
      $4 = $2;
      while (1) {
       $31 = SAFE_HEAP_LOAD_i32_2_U_2($3, 2);
       if (!$31) {
        $2 = $4;
        break label$173;
       }
       $5 = $3;
       $3 = $1 & 65535;
       label$177 : {
        if ($31 >>> 0 < $3 >>> 0) {
         $2 = $4;
         break label$177;
        }
        $33 = SAFE_HEAP_LOAD_i32_4_4($7, 8);
        while (1) {
         $34 = $3 >>> 5 << 2;
         $2 = $34 + $33 | 0;
         $1 = $3;
         $3 = 1 << $1;
         label$180 : {
          if (SAFE_HEAP_LOAD_i32_4_4($2, 0) & $3) {
           break label$180
          }
          if (!stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29($10, $1)) {
           break label$180
          }
          SAFE_HEAP_STORE_i32_4_4($22, 0, SAFE_HEAP_LOAD_i32_4_4($22, 0) + 1 | 0);
          SAFE_HEAP_STORE_i32_4_4($25, 0, SAFE_HEAP_LOAD_i32_4_4($25, 0) + 1 | 0);
          $34 = SAFE_HEAP_LOAD_i32_4_4($27, 8) + $34 | 0;
          SAFE_HEAP_STORE_i32_4_4($34, 0, SAFE_HEAP_LOAD_i32_4_4($34, 0) | $3);
          SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) | $3);
          $4 = $4 + 1 | 0;
         }
         $2 = $4;
         $3 = $1 + 1 | 0;
         if (($1 | 0) != ($31 | 0)) {
          continue
         }
         break;
        };
       }
       $3 = $5 + 4 | 0;
       $4 = $2;
       $1 = SAFE_HEAP_LOAD_i32_2_U_2($5, 4);
       if ($1) {
        continue
       }
       break;
      };
     }
     $1 = $2;
     $3 = $9 + 1 | 0;
     $4 = $3;
     if (($3 | 0) != ($37 | 0)) {
      continue
     }
     break;
    };
   }
   if ($24) {
    $1 = 0;
    while (1) {
     $9 = Math_imul($1, 196) + $35 | 0;
     $7 = $9 + 184 | 0;
     $25 = $9 + 188 | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($25, 0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($9, 168);
     if (($5 | 0) < ($3 | 0)) {
      $5 = ImGui__MemAlloc_28unsigned_20long_29($3 << 2);
      $4 = $9 + 192 | 0;
      $27 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      if ($27) {
       __memcpy($5, $27, SAFE_HEAP_LOAD_i32_4_4($7, 0) << 2);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 0));
      }
      SAFE_HEAP_STORE_i32_4_4($4, 0, $5);
      SAFE_HEAP_STORE_i32_4_4($25, 0, $3);
     }
     $4 = $1;
     $1 = SAFE_HEAP_LOAD_i32_4_4($9, 172);
     if (($1 | 0) > 0) {
      $3 = SAFE_HEAP_LOAD_i32_4_4($9 + 180 | 0, 0);
      $31 = $3 + ($1 << 2) | 0;
      $27 = $9 + 192 | 0;
      $1 = $3;
      while (1) {
       $5 = $1;
       $24 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       if ($24) {
        $33 = $5 - $3 << 3;
        $1 = 0;
        while (1) {
         if ($24 >>> $1 & 1) {
          $34 = $1 + $33 | 0;
          $22 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
          $10 = SAFE_HEAP_LOAD_i32_4_4($25, 0);
          label$192 : {
           if (($22 | 0) != ($10 | 0)) {
            break label$192
           }
           $28 = $10 ? $10 + (($10 | 0) / 2 | 0) | 0 : 8;
           $22 = $22 + 1 | 0;
           $22 = ($22 | 0) < ($28 | 0) ? $28 : $22;
           if (($10 | 0) >= ($22 | 0)) {
            break label$192
           }
           $10 = ImGui__MemAlloc_28unsigned_20long_29($22 << 2);
           $28 = SAFE_HEAP_LOAD_i32_4_4($27, 0);
           if ($28) {
            __memcpy($10, $28, SAFE_HEAP_LOAD_i32_4_4($7, 0) << 2);
            ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($27, 0));
           }
           SAFE_HEAP_STORE_i32_4_4($27, 0, $10);
           SAFE_HEAP_STORE_i32_4_4($25, 0, $22);
          }
          SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($27, 0) + (SAFE_HEAP_LOAD_i32_4_4($7, 0) << 2) | 0, 0, $34);
          SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) + 1 | 0);
         }
         $1 = $1 + 1 | 0;
         if (($1 | 0) != 32) {
          continue
         }
         break;
        };
       }
       $1 = $5 + 4 | 0;
       if ($1 >>> 0 < $31 >>> 0) {
        continue
       }
       break;
      };
     }
     $1 = $9 + 172 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
     if ($3) {
      SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
      ImGui__MemFree_28void__29($3);
      SAFE_HEAP_STORE_i32_4_4($1, 8, 0);
     }
     $1 = $4 + 1 | 0;
     if (($37 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   if (($38 | 0) > 0) {
    $1 = 0;
    while (1) {
     $3 = $17 + Math_imul($1, 24) | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 20 | 0, 0);
     if ($5) {
      $3 = $3 + 12 | 0;
      SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
      ImGui__MemFree_28void__29($5);
      SAFE_HEAP_STORE_i32_4_4($3, 8, 0);
     }
     $1 = $1 + 1 | 0;
     if (($38 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($17) {
    ImGui__MemFree_28void__29($17);
    $17 = 0;
   }
   $54 = $17;
   $1 = 0;
   $3 = ($2 | 0) <= 0;
   if ($3) {
    $5 = 0
   } else {
    $5 = ImGui__MemAlloc_28unsigned_20long_29((($2 | 0) <= 8 ? 8 : $2) << 4)
   }
   if (!$3) {
    $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(($2 | 0) <= 8 ? 8 : $2, 28))
   }
   $25 = memset($5, 0, $2 << 4);
   $61 = memset($1, 0, Math_imul($2, 28));
   $9 = 0;
   if (($37 | 0) > 0) {
    $1 = 0;
    $4 = 0;
    $3 = 0;
    $5 = 0;
    while (1) {
     $9 = $1;
     $2 = Math_imul($5, 196) + $35 | 0;
     $7 = SAFE_HEAP_LOAD_i32_4_4($2, 168);
     $9 = $1;
     label$206 : {
      if (!$7) {
       break label$206
      }
      $17 = Math_imul($3, 28) + $61 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 152, $17);
      SAFE_HEAP_STORE_i32_4_4($2, 148, ($4 << 4) + $25 | 0);
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + Math_imul($5, 120) | 0;
      $6 = SAFE_HEAP_LOAD_f32_4_4($1, 16);
      $22 = $2 + 192 | 0;
      SAFE_HEAP_STORE_i32_4_4($2 + 132 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($22, 0));
      SAFE_HEAP_STORE_i32_4_4($2 + 128 | 0, 0, 0);
      SAFE_HEAP_STORE_f32_4_4($2, 124, $6);
      SAFE_HEAP_STORE_i32_4_4($2 + 140 | 0, 0, $17);
      SAFE_HEAP_STORE_i32_4_4($2 + 136 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2, 184));
      SAFE_HEAP_STORE_i32_1_1($2 + 144 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 20));
      SAFE_HEAP_STORE_i32_1_1($2 + 145 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 24));
      $17 = $2 + 184 | 0;
      label$208 : {
       if ($6 > Math_fround(0.0)) {
        $27 = SAFE_HEAP_LOAD_i32_4_4($2, 4) + SAFE_HEAP_LOAD_i32_4_4($2, 28) | 0;
        $10 = SAFE_HEAP_LOAD_i32_2_U_1($27, 4);
        $27 = SAFE_HEAP_LOAD_i32_2_U_1($27, 6);
        $6 = Math_fround($6 / Math_fround((($10 << 8 | $10 >>> 8) << 16 >> 16) - (($27 << 8 | $27 >>> 8) << 16 >> 16) | 0));
        break label$208;
       }
       $27 = SAFE_HEAP_LOAD_i32_2_U_1((SAFE_HEAP_LOAD_i32_4_4($2, 4) + SAFE_HEAP_LOAD_i32_4_4($2, 20) | 0) + 18 | 0, 0);
       $6 = Math_fround(Math_fround(-$6) / Math_fround((($27 << 8 | $27 >>> 8) & 65535) >>> 0));
      }
      $3 = $3 + $7 | 0;
      $4 = $4 + $7 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($17, 0) | 0) <= 0) {
       break label$206
      }
      $31 = $2 + 148 | 0;
      $7 = $1 + 24 | 0;
      $27 = $1 + 20 | 0;
      $10 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
      $1 = 0;
      while (1) {
       stbtt_GetGlyphBitmapBoxSubpixel_28stbtt_fontinfo_20const__2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int__2c_20int__2c_20int__2c_20int__29($2, stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29($2, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($22, 0) + ($1 << 2) | 0, 0)), Math_fround($6 * Math_fround(SAFE_HEAP_LOAD_i32_4_4($27, 0) | 0)), Math_fround($6 * Math_fround(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0)), $11 + 112 | 0, $11 + 80 | 0, $11 + 68 | 0, $11 + 56 | 0);
       $24 = SAFE_HEAP_LOAD_i32_4_4($31, 0) + ($1 << 4) | 0;
       $33 = (((SAFE_HEAP_LOAD_i32_4_4($11, 68) + $10 | 0) - SAFE_HEAP_LOAD_i32_4_4($11, 112) | 0) + SAFE_HEAP_LOAD_i32_4_4($27, 0) | 0) - 1 | 0;
       SAFE_HEAP_STORE_i32_2_2($24, 4, $33);
       $28 = $24;
       $24 = (((SAFE_HEAP_LOAD_i32_4_4($11, 56) + $10 | 0) - SAFE_HEAP_LOAD_i32_4_4($11, 80) | 0) + SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) - 1 | 0;
       SAFE_HEAP_STORE_i32_2_2($28, 6, $24);
       $9 = Math_imul($24 & 65535, $33 & 65535) + $9 | 0;
       $1 = $1 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($17, 0) | 0) > ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $1 = $9;
     $9 = $1;
     $5 = $5 + 1 | 0;
     if (($5 | 0) != ($37 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_4_4($0, 32, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   label$212 : {
    if (($1 | 0) > 0) {
     break label$212
    }
    $1 = 4096;
    $6 = Math_fround(Math_sqrt(Math_fround($9 | 0)));
    label$213 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $2 = ~~$6;
      break label$213;
     }
     $2 = -2147483648;
    }
    if (($2 | 0) > 2866) {
     break label$212
    }
    $1 = 2048;
    if (($2 | 0) > 1432) {
     break label$212
    }
    $1 = ($2 | 0) > 715 ? 1024 : 512;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
   $17 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   $5 = ImGui__MemAlloc_28unsigned_20long_29(48);
   $7 = $1 - $17 | 0;
   $3 = ImGui__MemAlloc_28unsigned_20long_29($7 << 3);
   label$215 : {
    if (!($3 ? $5 : 0)) {
     if ($5) {
      ImGui__MemFree_28void__29($5)
     }
     if (!$3) {
      $1 = 0;
      $3 = 0;
      $2 = 0;
      $17 = 0;
      break label$215;
     }
     ImGui__MemFree_28void__29($3);
     $1 = 0;
     $3 = 0;
     $2 = 0;
     $17 = 0;
     break label$215;
    }
    $4 = 0;
    if (($7 | 0) >= 2) {
     $27 = $7 - 2 | 0;
     $2 = 0;
     while (1) {
      $9 = $2;
      $4 = $2 + 1 | 0;
      SAFE_HEAP_STORE_i32_4_4(($2 << 3) + $3 | 0, 4, ($4 << 3) + $3 | 0);
      $2 = $4;
      if (($9 | 0) != ($27 | 0)) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_i32_4_4(($4 << 3) + $3 | 0, 4, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 28, $3);
    SAFE_HEAP_STORE_i64_8_4($5, 12, 1, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 24, $5 + 32 | 0);
    SAFE_HEAP_STORE_i32_4_4($5, 20, $7);
    SAFE_HEAP_STORE_i32_4_4($5, 4, 32768 - $17 | 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $7);
    SAFE_HEAP_STORE_i32_4_4($5 + 44 | 0, 0, 0);
    SAFE_HEAP_STORE_i32_2_2($5 + 42 | 0, 0, 65535);
    $2 = $5 + 40 | 0;
    SAFE_HEAP_STORE_i32_2_2($2, 0, $7);
    SAFE_HEAP_STORE_i32_4_4($5 + 36 | 0, 0, $2);
    SAFE_HEAP_STORE_i32_4_4($5, 32, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 8, (($7 << 1) - 1 | 0) / ($7 | 0) | 0);
    $2 = $5;
   }
   $22 = $17;
   $27 = $1;
   $28 = $2;
   $1 = 0;
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
   if (($5 | 0) > 0) {
    $4 = ImGui__MemAlloc_28unsigned_20long_29((($5 | 0) <= 8 ? 8 : $5) << 4)
   } else {
    $4 = 0
   }
   $4 = memset($4, 0, $5 << 4);
   $9 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
   if (($9 | 0) > 0) {
    $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0);
    while (1) {
     $17 = ($1 << 4) + $4 | 0;
     $10 = Math_imul($1, 28) + $7 | 0;
     SAFE_HEAP_STORE_i32_2_2($17, 4, SAFE_HEAP_LOAD_i32_2_U_2($10, 0));
     SAFE_HEAP_STORE_i32_2_2($17, 6, SAFE_HEAP_LOAD_i32_2_U_2($10, 2));
     $1 = $1 + 1 | 0;
     if (($9 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   stbrp_pack_rects_28stbrp_context__2c_20stbrp_rect__2c_20int_29($2, $4, $5);
   if (($5 | 0) > 0) {
    $1 = 0;
    while (1) {
     $2 = ($1 << 4) + $4 | 0;
     if (SAFE_HEAP_LOAD_i32_4_4($2, 12)) {
      $9 = SAFE_HEAP_LOAD_i32_4_4($0, 72) + Math_imul($1, 28) | 0;
      SAFE_HEAP_STORE_i32_2_2($9, 4, SAFE_HEAP_LOAD_i32_2_U_2($2, 8));
      $7 = $9;
      $9 = SAFE_HEAP_LOAD_i32_2_U_2($2, 10);
      SAFE_HEAP_STORE_i32_2_2($7, 6, $9);
      $7 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
      $2 = SAFE_HEAP_LOAD_i32_2_U_2($2, 6) + $9 | 0;
      SAFE_HEAP_STORE_i32_4_4($0, 32, ($2 | 0) < ($7 | 0) ? $7 : $2);
     }
     $1 = $1 + 1 | 0;
     if (($5 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($4) {
    ImGui__MemFree_28void__29($4)
   }
   if (($37 | 0) > 0) {
    $1 = 0;
    while (1) {
     $2 = $1;
     $1 = Math_imul($2, 196) + $35 | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 168);
     label$224 : {
      if (!$5) {
       break label$224
      }
      stbrp_pack_rects_28stbrp_context__2c_20stbrp_rect__2c_20int_29($28, SAFE_HEAP_LOAD_i32_4_4($1, 148), $5);
      $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 168 | 0, 0);
      if (($4 | 0) <= 0) {
       break label$224
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($1 + 148 | 0, 0);
      $1 = 0;
      while (1) {
       $5 = $9 + ($1 << 4) | 0;
       if (SAFE_HEAP_LOAD_i32_4_4($5, 12)) {
        $7 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
        $5 = SAFE_HEAP_LOAD_i32_2_U_2($5, 6) + SAFE_HEAP_LOAD_i32_2_U_2($5, 10) | 0;
        SAFE_HEAP_STORE_i32_4_4($0, 32, ($5 | 0) < ($7 | 0) ? $7 : $5);
       }
       $1 = $1 + 1 | 0;
       if (($4 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $1 = $2 + 1 | 0;
     if (($37 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
   $55 = $3;
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 1)) {
    $2 = $1 - 1 | 0;
    $2 = $2 >> 1 | $2;
    $2 = $2 >> 2 | $2;
    $2 = $2 >> 4 | $2;
    $2 = $2 >> 8 | $2;
    $1 = $2 >> 16 | $2;
   }
   $2 = $1 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 32, $2);
   SAFE_HEAP_STORE_f32_4_4($0, 40, Math_fround(Math_fround(1.0) / Math_fround($2 | 0)));
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
   SAFE_HEAP_STORE_f32_4_4($0, 36, Math_fround(Math_fround(1.0) / Math_fround($1 | 0)));
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, $2));
   SAFE_HEAP_STORE_i32_4_4($0, 20, $2);
   memset($2, 0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 32), SAFE_HEAP_LOAD_i32_4_4($0, 28)));
   if (($37 | 0) > 0) {
    $75 = $0 + 28 | 0;
    $62 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
    $1 = 0;
    while (1) {
     $45 = $1;
     $36 = Math_imul($1, 196) + $35 | 0;
     if (SAFE_HEAP_LOAD_i32_4_4($36, 168)) {
      $2 = $36 + 145 | 0;
      $1 = $36 + 144 | 0;
      $6 = SAFE_HEAP_LOAD_f32_4_4($36, 124);
      label$232 : {
       if ($6 > Math_fround(0.0)) {
        $3 = SAFE_HEAP_LOAD_i32_4_4($36, 4) + SAFE_HEAP_LOAD_i32_4_4($36, 28) | 0;
        $5 = SAFE_HEAP_LOAD_i32_2_U_1($3, 4);
        $3 = SAFE_HEAP_LOAD_i32_2_U_1($3, 6);
        $56 = Math_fround($6 / Math_fround((($5 << 8 | $5 >>> 8) << 16 >> 16) - (($3 << 8 | $3 >>> 8) << 16 >> 16) | 0));
        break label$232;
       }
       $3 = SAFE_HEAP_LOAD_i32_2_U_1((SAFE_HEAP_LOAD_i32_4_4($36, 4) + SAFE_HEAP_LOAD_i32_4_4($36, 20) | 0) + 18 | 0, 0);
       $56 = Math_fround(Math_fround(-$6) / Math_fround((($3 << 8 | $3 >>> 8) & 65535) >>> 0));
      }
      $41 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      $42 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
      $6 = Math_fround($42 >>> 0);
      $76 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
      $66 = $36 + 136 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($66, 0) | 0) > 0) {
       $67 = $42 ? Math_fround(Math_fround(1 - $42 | 0) / Math_fround($6 + $6)) : Math_fround(0.0);
       $8 = Math_fround($41 >>> 0);
       $68 = $41 ? Math_fround(Math_fround(1 - $41 | 0) / Math_fround($8 + $8)) : Math_fround(0.0);
       $77 = $36 + 128 | 0;
       $78 = $36 + 132 | 0;
       $79 = $36 + 140 | 0;
       $80 = SAFE_HEAP_LOAD_i32_4_4($36, 148);
       $69 = Math_fround(Math_fround(1.0) / $8);
       $70 = Math_fround(Math_fround(1.0) / $6);
       $51 = Math_fround($56 * $8);
       $47 = Math_fround($56 * $6);
       $6 = Math_fround(Math_fround(.3499999940395355) / ($47 > $51 ? $51 : $47));
       $71 = Math_fround($6 * $6);
       $72 = Math_fround(-$51);
       $1 = 0;
       while (1) {
        $31 = $1;
        $40 = ($1 << 4) + $80 | 0;
        label$238 : {
         if (!SAFE_HEAP_LOAD_i32_4_4($40, 12)) {
          break label$238
         }
         $1 = SAFE_HEAP_LOAD_i32_2_U_2($40, 4);
         if (!$1) {
          break label$238
         }
         $3 = SAFE_HEAP_LOAD_i32_2_U_2($40, 6);
         if (!$3) {
          break label$238
         }
         $52 = $40 + 4 | 0;
         $53 = $40 + 6 | 0;
         $2 = SAFE_HEAP_LOAD_i32_4_4($78, 0);
         label$239 : {
          if (!$2) {
           $2 = SAFE_HEAP_LOAD_i32_4_4($77, 0) + $31 | 0;
           break label$239;
          }
          $2 = SAFE_HEAP_LOAD_i32_4_4($2 + ($31 << 2) | 0, 0);
         }
         $81 = SAFE_HEAP_LOAD_i32_4_4($79, 0);
         $2 = stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29($36, $2);
         SAFE_HEAP_STORE_i32_2_2($40, 8, SAFE_HEAP_LOAD_i32_2_U_2($40, 8) + $22 | 0);
         SAFE_HEAP_STORE_i32_2_2($40, 10, SAFE_HEAP_LOAD_i32_2_U_2($40, 10) + $22 | 0);
         SAFE_HEAP_STORE_i32_2_2($52, 0, $1 - $22 | 0);
         SAFE_HEAP_STORE_i32_2_2($53, 0, $3 - $22 | 0);
         $1 = SAFE_HEAP_LOAD_i32_4_4($36, 4);
         $3 = SAFE_HEAP_LOAD_i32_4_4($36, 32) + $1 | 0;
         $1 = SAFE_HEAP_LOAD_i32_4_4($36, 28) + $1 | 0;
         $1 = SAFE_HEAP_LOAD_i32_1_U_1($1 + 34 | 0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($1 + 35 | 0, 0);
         $73 = SAFE_HEAP_LOAD_i32_2_U_1($3 + (($1 | 0) > ($2 | 0) ? $2 << 2 : ($1 << 2) - 4 | 0) | 0, 0);
         stbtt_GetGlyphBitmapBoxSubpixel_28stbtt_fontinfo_20const__2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int__2c_20int__2c_20int__2c_20int__29($36, $2, $47, $51, $11 + 104 | 0, $11 + 100 | 0, $11 + 96 | 0, $11 + 92 | 0);
         $26 = SAFE_HEAP_LOAD_i32_2_U_2($40, 8);
         $19 = SAFE_HEAP_LOAD_i32_2_U_2($40, 10);
         $1 = SAFE_HEAP_LOAD_i32_2_U_2($52, 0);
         $3 = SAFE_HEAP_LOAD_i32_2_U_2($53, 0);
         $24 = stbtt_GetGlyphShape_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt_vertex___29($36, $2, $11 + 108 | 0);
         stbtt_GetGlyphBitmapBoxSubpixel_28stbtt_fontinfo_20const__2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int__2c_20int__2c_20int__2c_20int__29($36, $2, $47, $51, $11 + 68 | 0, $11 + 56 | 0, 0, 0);
         $48 = $1 - $42 | 0;
         $33 = $48 + 1 | 0;
         label$241 : {
          if (!$33) {
           break label$241
          }
          $63 = $3 - $41 | 0;
          $44 = $63 + 1 | 0;
          if (!$44) {
           break label$241
          }
          $38 = SAFE_HEAP_LOAD_i32_4_4($11, 56);
          $64 = SAFE_HEAP_LOAD_i32_4_4($11, 68);
          $34 = SAFE_HEAP_LOAD_i32_4_4($11, 108);
          SAFE_HEAP_STORE_i32_4_4($11, 112, 0);
          $1 = 0;
          $4 = 0;
          $39 = ($24 | 0) <= 0;
          if (!$39) {
           while (1) {
            $1 = ((SAFE_HEAP_LOAD_i32_1_U_1($34 + Math_imul($4, 14) | 0, 12) | 0) == 1) + $1 | 0;
            $2 = $4 + 1 | 0;
            $4 = $2;
            if (($2 | 0) != ($24 | 0)) {
             continue
            }
            break;
           }
          }
          $17 = $1;
          label$244 : {
           if (!$1) {
            $4 = 0;
            $3 = 0;
            break label$244;
           }
           $4 = 0;
           $1 = 0;
           $3 = 0;
           $5 = ImGui__MemAlloc_28unsigned_20long_29($17 << 2);
           if (!$5) {
            $4 = $5;
            $17 = 0;
            break label$244;
           }
           label$247 : {
            while (1) {
             $2 = $1;
             $1 = $3;
             $10 = $4;
             label$249 : {
              label$250 : {
               if (($4 | 0) != 1) {
                break label$250
               }
               $1 = ImGui__MemAlloc_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4($11, 112) << 3);
               if ($1) {
                break label$250
               }
               $4 = $2;
               $3 = 0;
               $2 = 0;
               break label$249;
              }
              $7 = $1;
              SAFE_HEAP_STORE_i32_4_4($11, 112, 0);
              label$251 : {
               if ($39) {
                $9 = -1;
                $3 = $2;
                break label$251;
               }
               $18 = Math_fround(0.0);
               $6 = Math_fround(0.0);
               $1 = $2;
               $4 = -1;
               $2 = 0;
               while (1) {
                $3 = $1;
                label$254 : {
                 label$257 : {
                  label$258 : {
                   label$259 : {
                    label$260 : {
                     $1 = $34 + Math_imul($2, 14) | 0;
                     switch (SAFE_HEAP_LOAD_i32_1_U_1($1, 12) - 1 | 0) {
                     case 3:
                      break label$257;
                     case 2:
                      break label$258;
                     case 1:
                      break label$259;
                     case 0:
                      break label$260;
                     default:
                      break label$254;
                     };
                    }
                    if (($4 | 0) >= 0) {
                     SAFE_HEAP_STORE_i32_4_4($5 + ($4 << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($11, 112) - $3 | 0)
                    }
                    $9 = SAFE_HEAP_LOAD_i32_2_2($1, 2);
                    $1 = SAFE_HEAP_LOAD_i32_2_2($1, 0);
                    $3 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
                    SAFE_HEAP_STORE_i32_4_4($11, 112, $3 + 1 | 0);
                    $4 = $4 + 1 | 0;
                    $18 = Math_fround($9 | 0);
                    $6 = Math_fround($1 | 0);
                    if (!$7) {
                     break label$254
                    }
                    $1 = $7 + ($3 << 3) | 0;
                    SAFE_HEAP_STORE_f32_4_4($1, 4, $18);
                    SAFE_HEAP_STORE_f32_4_4($1, 0, $6);
                    break label$254;
                   }
                   $9 = SAFE_HEAP_LOAD_i32_2_2($1, 2);
                   $1 = SAFE_HEAP_LOAD_i32_2_2($1, 0);
                   $32 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
                   SAFE_HEAP_STORE_i32_4_4($11, 112, $32 + 1 | 0);
                   $18 = Math_fround($9 | 0);
                   $6 = Math_fround($1 | 0);
                   if (!$7) {
                    break label$254
                   }
                   $1 = $7 + ($32 << 3) | 0;
                   SAFE_HEAP_STORE_f32_4_4($1, 4, $18);
                   SAFE_HEAP_STORE_f32_4_4($1, 0, $6);
                   break label$254;
                  }
                  stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($7, $11 + 112 | 0, $6, $18, Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 4) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 6) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 0) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 2) | 0), $71, 0);
                  $6 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 0) | 0);
                  $18 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 2) | 0);
                  break label$254;
                 }
                 stbtt__tesselate_cubic_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($7, $11 + 112 | 0, $6, $18, Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 4) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 6) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 8) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 10) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 0) | 0), Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 2) | 0), $71, 0);
                 $6 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 0) | 0);
                 $18 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($1, 2) | 0);
                }
                $1 = $3;
                $9 = $4;
                $2 = $2 + 1 | 0;
                if (($24 | 0) != ($2 | 0)) {
                 continue
                }
                break;
               };
              }
              SAFE_HEAP_STORE_i32_4_4($5 + ($9 << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($11, 112) - $3 | 0);
              $4 = $3;
              $3 = 1;
              $2 = $7;
             }
             if (!$3) {
              break label$247
             }
             $1 = $4;
             $4 = $10 + 1 | 0;
             $3 = $2;
             if (!$10) {
              continue
             }
             break;
            };
            $4 = $5;
            break label$244;
           }
           ImGui__MemFree_28void__29($2);
           ImGui__MemFree_28void__29($5);
           $4 = 0;
           $3 = 0;
           $17 = 0;
          }
          $5 = $17;
          if (!$3) {
           break label$241
          }
          $34 = $4;
          $39 = $3;
          $1 = 0;
          $4 = 0;
          $2 = ($5 | 0) <= 0;
          if ($2) {
           $3 = 20
          } else {
           while (1) {
            $1 = SAFE_HEAP_LOAD_i32_4_4($34 + ($4 << 2) | 0, 0) + $1 | 0;
            $3 = $4 + 1 | 0;
            $4 = $3;
            if (($3 | 0) != ($5 | 0)) {
             continue
            }
            break;
           };
           $3 = Math_imul($1, 20) + 20 | 0;
          }
          $10 = ImGui__MemAlloc_28unsigned_20long_29($3);
          if ($10) {
           $1 = 0;
           $4 = 0;
           $3 = 0;
           if (!$2) {
            while (1) {
             $7 = $3;
             $46 = $34 + ($4 << 2) | 0;
             $24 = SAFE_HEAP_LOAD_i32_4_4($46, 0);
             label$268 : {
              if (($24 | 0) <= 0) {
               $2 = $1;
               break label$268;
              }
              $17 = ($7 << 3) + $39 | 0;
              $3 = $1;
              $9 = 0;
              $1 = $24 - 1 | 0;
              while (1) {
               $2 = $1;
               $6 = SAFE_HEAP_LOAD_f32_4_4($17 + ($2 << 3) | 0, 4);
               $1 = $9;
               $8 = SAFE_HEAP_LOAD_f32_4_4($17 + ($1 << 3) | 0, 4);
               if ($6 != $8) {
                $9 = $10 + Math_imul($3, 20) | 0;
                $32 = $6 > $8;
                SAFE_HEAP_STORE_i32_4_4($9, 16, $32);
                $49 = $17 + (($32 ? $2 : $1) << 3) | 0;
                SAFE_HEAP_STORE_f32_4_4($9, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($49, 0) * $47) + Math_fround(0.0)));
                SAFE_HEAP_STORE_f32_4_4($9, 4, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($49, 4) * $72) + Math_fround(0.0)));
                $2 = $17 + (($32 ? $1 : $2) << 3) | 0;
                SAFE_HEAP_STORE_f32_4_4($9, 8, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) * $47) + Math_fround(0.0)));
                SAFE_HEAP_STORE_f32_4_4($9, 12, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) * $72) + Math_fround(0.0)));
                $3 = $3 + 1 | 0;
               }
               $2 = $3;
               $9 = $1 + 1 | 0;
               if ((SAFE_HEAP_LOAD_i32_4_4($46, 0) | 0) > ($9 | 0)) {
                continue
               }
               break;
              };
             }
             $1 = $2;
             $3 = $7 + $24 | 0;
             $4 = $4 + 1 | 0;
             if (($5 | 0) != ($4 | 0)) {
              continue
             }
             break;
            }
           }
           $2 = $1;
           stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($10, $2);
           $1 = 1;
           if (($2 | 0) >= 2) {
            while (1) {
             $3 = $10 + Math_imul($1, 20) | 0;
             $6 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
             $8 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
             $9 = $11 + 120 | 0;
             SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($3 + 16 | 0, 0));
             SAFE_HEAP_STORE_i64_8_8($11, 112, SAFE_HEAP_LOAD_i64_8_4($3, 8), i64toi32_i32$HIGH_BITS);
             $3 = $1;
             while (1) {
              label$275 : {
               if (($1 | 0) <= 0) {
                $4 = $1;
                break label$275;
               }
               $5 = $1 - 1 | 0;
               $4 = $10 + Math_imul($5, 20) | 0;
               $7 = SAFE_HEAP_LOAD_f32_4_4($4, 4) > $6;
               if ($7) {
                $1 = $10 + Math_imul($1, 20) | 0;
                SAFE_HEAP_STORE_i64_8_4($1, 0, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
                SAFE_HEAP_STORE_i32_4_4($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($4 + 16 | 0, 0));
                SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($4 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
                $1 = $5;
               }
               $4 = $1;
               if ($7) {
                continue
               }
              }
              break;
             };
             if (($3 | 0) != ($4 | 0)) {
              $1 = $10 + Math_imul($4, 20) | 0;
              SAFE_HEAP_STORE_f32_4_4($1, 4, $6);
              SAFE_HEAP_STORE_f32_4_4($1, 0, $8);
              SAFE_HEAP_STORE_i64_8_4($1, 8, SAFE_HEAP_LOAD_i64_8_8($11, 112), i64toi32_i32$HIGH_BITS);
              SAFE_HEAP_STORE_i32_4_4($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0));
             }
             $1 = $3 + 1 | 0;
             if (($2 | 0) != ($1 | 0)) {
              continue
             }
             break;
            }
           }
           SAFE_HEAP_STORE_i32_4_4($11, 80, 0);
           $24 = $11 + 112 | 0;
           if (($48 | 0) >= 64) {
            $24 = ImGui__MemAlloc_28unsigned_20long_29($33 << 3 | 4)
           }
           SAFE_HEAP_STORE_f32_4_4($10 + Math_imul($2, 20) | 0, 4, Math_fround(Math_fround($38 + $44 | 0) + Math_fround(1.0)));
           $5 = 0;
           if ($63 >>> 0 <= 2147483646) {
            $82 = ($26 + $62 | 0) + Math_imul($19, $27) | 0;
            $49 = $33 << 2;
            $44 = $49 + $24 | 0;
            $46 = $44 + 4 | 0;
            $83 = $49 + 4 | 0;
            $65 = Math_fround($33 | 0);
            $84 = Math_fround($64 | 0);
            $1 = $10;
            $4 = $38;
            $3 = 0;
            $9 = 0;
            $7 = 0;
            $2 = 0;
            while (1) {
             $5 = $2;
             $33 = $3;
             $2 = $1;
             $26 = memset($24, 0, $49);
             $64 = memset($44, 0, $83);
             $32 = $4;
             $23 = Math_fround($4 | 0);
             $21 = Math_fround($23 + Math_fround(1.0));
             $1 = $7;
             $3 = $11 + 80 | 0;
             $4 = SAFE_HEAP_LOAD_i32_4_4($11, 80);
             if ($4) {
              while (1) {
               label$286 : {
                if (!(SAFE_HEAP_LOAD_f32_4_4($4, 24) <= $23)) {
                 $3 = $4;
                 break label$286;
                }
                SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
                SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                SAFE_HEAP_STORE_i32_4_4($4, 16, 0);
                $1 = $4;
               }
               $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
               if ($4) {
                continue
               }
               break;
              }
             }
             $3 = $9;
             $4 = $1;
             $18 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
             label$288 : {
              if (!($21 >= $18)) {
               $7 = $2;
               break label$288;
              }
              $17 = !$33 & ($38 | 0) != 0;
              $9 = $2 + 4 | 0;
              $1 = $2;
              while (1) {
               if (SAFE_HEAP_LOAD_f32_4_4($1, 12) != $18) {
                label$293 : {
                 if ($4) {
                  $7 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                  break label$293;
                 }
                 if (!$3) {
                  $2 = ImGui__MemAlloc_28unsigned_20long_29(56004);
                  if (!$2) {
                   $7 = $4;
                   $4 = 0;
                   break label$293;
                  }
                  SAFE_HEAP_STORE_i32_4_4($2, 0, $5);
                  $5 = $2;
                  $3 = 2e3;
                 }
                 $7 = $4;
                 $3 = $3 - 1 | 0;
                 $4 = (Math_imul($3, 28) + $5 | 0) + 4 | 0;
                }
                if ($4) {
                 $6 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
                 $12 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
                 $8 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
                 $13 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
                 $6 = Math_fround(Math_fround($6 - $12) / Math_fround($8 - $13));
                 SAFE_HEAP_STORE_f32_4_4($4, 8, $6);
                 SAFE_HEAP_STORE_f32_4_4($4, 12, $6 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6) : Math_fround(0.0));
                 SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround(Math_fround($12 + Math_fround($6 * Math_fround($23 - $13))) - $84));
                 $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
                 SAFE_HEAP_STORE_f32_4_4($4, 24, $8);
                 SAFE_HEAP_STORE_f32_4_4($4, 20, $13);
                 SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
                 SAFE_HEAP_STORE_f32_4_4($4, 16, $2 ? Math_fround(1.0) : Math_fround(-1.0));
                 if ($8 < $23 & $17) {
                  SAFE_HEAP_STORE_f32_4_4($4, 24, $23)
                 }
                 SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($11, 80));
                 SAFE_HEAP_STORE_i32_4_4($11, 80, $4);
                }
                $4 = $7;
               }
               $9 = $1 + 24 | 0;
               $6 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
               $18 = $6;
               $1 = $1 + 20 | 0;
               $7 = $1;
               if ($6 <= $21) {
                continue
               }
               break;
              };
             }
             $9 = $7;
             $17 = $3;
             $7 = $4;
             $2 = $5;
             $5 = SAFE_HEAP_LOAD_i32_4_4($11, 80);
             if ($5) {
              $57 = Math_fround($21 - $23);
              $1 = $5;
              while (1) {
               $4 = $1;
               $18 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
               $50 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
               label$302 : {
                if ($50 == Math_fround(0.0)) {
                 if (!($18 < $65)) {
                  break label$302
                 }
                 if ($18 >= Math_fround(0.0)) {
                  $1 = Math_fround(Math_abs($18)) < Math_fround(2147483648.0) ? ~~$18 : -2147483648;
                  $3 = $21 == $23;
                  label$307 : {
                   if ($3) {
                    break label$307
                   }
                   $13 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                   if ($13 < $23) {
                    break label$307
                   }
                   $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                   if ($6 > $21) {
                    break label$307
                   }
                   $12 = $18;
                   if ($6 > $23) {
                    $12 = Math_fround($18 + Math_fround(Math_fround(Math_fround($18 - $18) * Math_fround($6 - $23)) / $57))
                   } else {
                    $6 = $23
                   }
                   $14 = $6;
                   $6 = $12;
                   $12 = $18;
                   $8 = $21;
                   if ($8 > $13) {
                    $12 = Math_fround($18 + Math_fround(Math_fround(Math_fround($13 - $21) * Math_fround($18 - $6)) / Math_fround($21 - $14)));
                    $8 = $13;
                   }
                   $13 = Math_fround($1 | 0);
                   if (!(!($13 >= $6) | !($12 <= $13))) {
                    $19 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($19, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 16) * Math_fround($8 - $14)) + SAFE_HEAP_LOAD_f32_4_4($19, 0)));
                    break label$307;
                   }
                   $16 = Math_fround($1 + 1 | 0);
                   if ($6 >= $16 & $12 >= $16) {
                    break label$307
                   }
                   $19 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($19, 0, Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * SAFE_HEAP_LOAD_f32_4_4($4, 16)) * Math_fround(Math_fround(Math_fround(Math_fround($6 - $13) + Math_fround($12 - $13)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($19, 0)));
                  }
                  if ($3) {
                   break label$302
                  }
                  $13 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                  if ($23 > $13) {
                   break label$302
                  }
                  $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                  if ($6 > $21) {
                   break label$302
                  }
                  $12 = $18;
                  $8 = $23;
                  if ($8 < $6) {
                   $12 = Math_fround($18 + Math_fround(Math_fround(Math_fround($18 - $18) * Math_fround($6 - $23)) / $57));
                   $8 = $6;
                  }
                  $3 = $1 + 1 | 0;
                  label$313 : {
                   if (!($13 < $21)) {
                    $13 = $21;
                    break label$313;
                   }
                   $18 = Math_fround($18 + Math_fround(Math_fround(Math_fround($13 - $21) * Math_fround($18 - $12)) / Math_fround($21 - $8)));
                  }
                  $6 = Math_fround($3 | 0);
                  if (!(!($6 >= $12) | !($6 >= $18))) {
                   $1 = $46 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 16) * Math_fround($13 - $8)) + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
                   break label$302;
                  }
                  $14 = Math_fround($1 + 2 | 0);
                  if ($12 >= $14 & $14 <= $18) {
                   break label$302
                  }
                  $1 = $46 + ($1 << 2) | 0;
                  SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround(Math_fround(Math_fround(Math_fround($13 - $8) * SAFE_HEAP_LOAD_f32_4_4($4, 16)) * Math_fround(Math_fround(Math_fround(Math_fround($12 - $6) + Math_fround($18 - $6)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
                  break label$302;
                 }
                 if ($21 == $23) {
                  break label$302
                 }
                 $13 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                 if ($23 > $13) {
                  break label$302
                 }
                 $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                 if ($6 > $21) {
                  break label$302
                 }
                 $12 = $18;
                 $8 = $23;
                 if ($8 < $6) {
                  $12 = Math_fround($18 + Math_fround(Math_fround(Math_fround($18 - $18) * Math_fround($6 - $23)) / $57));
                  $8 = $6;
                 }
                 label$318 : {
                  if (!($13 < $21)) {
                   $13 = $21;
                   break label$318;
                  }
                  $18 = Math_fround($18 + Math_fround(Math_fround(Math_fround($13 - $21) * Math_fround($18 - $12)) / Math_fround($21 - $8)));
                 }
                 if (!(!($12 <= Math_fround(0.0)) | !($18 <= Math_fround(0.0)))) {
                  SAFE_HEAP_STORE_f32_4_4($44, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 16) * Math_fround($13 - $8)) + SAFE_HEAP_LOAD_f32_4_4($44, 0)));
                  break label$302;
                 }
                 if ($12 >= Math_fround(1.0) & $18 >= Math_fround(1.0)) {
                  break label$302
                 }
                 SAFE_HEAP_STORE_f32_4_4($44, 0, Math_fround(Math_fround(Math_fround(Math_fround($13 - $8) * SAFE_HEAP_LOAD_f32_4_4($4, 16)) * Math_fround(Math_fround(Math_fround($12 + $18) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($44, 0)));
                 break label$302;
                }
                $29 = Math_fround($50 + $18);
                $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                $1 = $6 > $23;
                label$322 : {
                 $14 = $1 ? Math_fround(Math_fround($50 * Math_fround($6 - $23)) + $18) : $18;
                 if (!($14 >= Math_fround(0.0))) {
                  break label$322
                 }
                 $8 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                 $3 = $8 < $21;
                 $12 = $3 ? Math_fround(Math_fround($50 * Math_fround($8 - $23)) + $18) : $29;
                 if (!($12 >= Math_fround(0.0)) | !($14 < $65) | !($12 < $65)) {
                  break label$322
                 }
                 $16 = SAFE_HEAP_LOAD_f32_4_4($4, 12);
                 $8 = $3 ? $8 : $21;
                 $13 = $1 ? $6 : $23;
                 $1 = Math_fround(Math_abs($14)) < Math_fround(2147483648.0) ? ~~$14 : -2147483648;
                 if (($1 | 0) == ((Math_fround(Math_abs($12)) < Math_fround(2147483648.0) ? ~~$12 : -2147483648) | 0)) {
                  $3 = $1 << 2;
                  $19 = $3 + $26 | 0;
                  $6 = Math_fround($1 | 0);
                  $12 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($14 - $6) + Math_fround($12 - $6)) * Math_fround(-.5)) + Math_fround(1.0)) * SAFE_HEAP_LOAD_f32_4_4($4, 16));
                  $6 = Math_fround($8 - $13);
                  SAFE_HEAP_STORE_f32_4_4($19, 0, Math_fround(Math_fround($12 * $6) + SAFE_HEAP_LOAD_f32_4_4($19, 0)));
                  $1 = $3 + $46 | 0;
                  SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 16) * $6) + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
                  break label$302;
                 }
                 label$328 : {
                  if (!($12 < $14)) {
                   $6 = $8;
                   $8 = $12;
                   break label$328;
                  }
                  $16 = Math_fround(-$16);
                  $6 = Math_fround($21 - Math_fround($13 - $23));
                  $13 = Math_fround($21 - Math_fround($8 - $23));
                  $8 = $14;
                  $14 = $12;
                  $18 = $29;
                 }
                 $1 = Math_fround(Math_abs($14)) < Math_fround(2147483648.0) ? ~~$14 : -2147483648;
                 $19 = $26 + ($1 << 2) | 0;
                 $20 = SAFE_HEAP_LOAD_f32_4_4($4, 16);
                 $3 = $1 + 1 | 0;
                 $29 = Math_fround(Math_fround(Math_fround(Math_fround($3 | 0) - $18) * $16) + $23);
                 $12 = $13;
                 $13 = Math_fround($20 * Math_fround($29 - $12));
                 SAFE_HEAP_STORE_f32_4_4($19, 0, Math_fround(Math_fround($13 * Math_fround(Math_fround(Math_fround(Math_fround($14 - Math_fround($1 | 0)) + Math_fround(1.0)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($19, 0)));
                 $1 = Math_fround(Math_abs($8)) < Math_fround(2147483648.0) ? ~~$8 : -2147483648;
                 $19 = $1;
                 if (($1 | 0) > ($3 | 0)) {
                  $14 = Math_fround($16 * $20);
                  $30 = Math_fround($14 * Math_fround(.5));
                  $18 = $13;
                  $1 = $3;
                  while (1) {
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround($30 + $18) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   $13 = Math_fround($14 + $18);
                   $18 = $13;
                   $1 = $1 + 1 | 0;
                   if (($1 | 0) != ($19 | 0)) {
                    continue
                   }
                   break;
                  };
                 }
                 $1 = $19 << 2;
                 $15 = $1 + $26 | 0;
                 SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($20 * Math_fround(Math_fround(Math_fround(Math_fround($8 - Math_fround($19 | 0)) + Math_fround(0.0)) * Math_fround(-.5)) + Math_fround(1.0))) * Math_fround($6 - Math_fround(Math_fround($16 * Math_fround($19 - $3 | 0)) + $29))) + $13) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                 $1 = $1 + $46 | 0;
                 SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround(Math_fround($20 * Math_fround($6 - $12)) + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
                 break label$302;
                }
                if ($48 >>> 0 > 2147483646) {
                 break label$302
                }
                $19 = $4 + 16 | 0;
                $85 = Math_fround($29 - $18);
                $3 = 0;
                while (1) {
                 $1 = $3;
                 $16 = Math_fround($1 | 0);
                 $58 = Math_fround($16 - $18);
                 $14 = Math_fround(Math_fround($58 / $50) + $23);
                 $3 = $1 + 1 | 0;
                 $20 = Math_fround($3 | 0);
                 $59 = Math_fround($20 - $18);
                 $12 = Math_fround(Math_fround($59 / $50) + $23);
                 $15 = $16 > $18;
                 label$338 : {
                  if (!(!$15 | !($20 < $29))) {
                   label$340 : {
                    if ($14 == $23) {
                     break label$340
                    }
                    $43 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($43 < $23) {
                     break label$340
                    }
                    $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($8 > $14) {
                     break label$340
                    }
                    $13 = $18;
                    $6 = $23;
                    if ($6 < $8) {
                     $13 = Math_fround($18 + Math_fround(Math_fround($58 * Math_fround($8 - $23)) / Math_fround($14 - $23)));
                     $6 = $8;
                    }
                    $30 = $13;
                    $13 = $14;
                    $8 = $16;
                    $15 = !($30 <= $8);
                    $16 = $8;
                    if ($14 > $43) {
                     $13 = $43;
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $14) * Math_fround($16 - $30)) / Math_fround($14 - $6)) + $16);
                    }
                    if (!($15 | !($16 >= $8))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($13 - $6)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$340;
                    }
                    if ($20 <= $30 & $8 >= $20) {
                     break label$340
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($13 - $6) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($30 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   label$345 : {
                    if ($12 == $14) {
                     break label$345
                    }
                    $30 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($30 < $14) {
                     break label$345
                    }
                    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($6 > $12) {
                     break label$345
                    }
                    label$346 : {
                     if (!($6 > $14)) {
                      $8 = $16;
                      break label$346;
                     }
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($20 - $16) * Math_fround($6 - $14)) / Math_fround($12 - $14)) + $16);
                     $14 = $6;
                    }
                    $6 = $20;
                    $13 = $8;
                    $15 = !($8 <= $16);
                    $8 = $12;
                    if ($8 > $30) {
                     $8 = $30;
                     $6 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $12) * Math_fround($20 - $13)) / Math_fround($12 - $14)) + $20);
                    }
                    if (!($15 | !($6 <= $16))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($8 - $14)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$345;
                    }
                    if ($13 >= $20 & $6 >= $20) {
                     break label$345
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($6 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   if ($12 == $21) {
                    break label$338
                   }
                   $14 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                   if ($14 < $12) {
                    break label$338
                   }
                   $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                   if ($8 > $21) {
                    break label$338
                   }
                   label$351 : {
                    if (!($8 > $12)) {
                     $6 = $20;
                     break label$351;
                    }
                    $6 = Math_fround(Math_fround(Math_fround(Math_fround($29 - $20) * Math_fround($8 - $12)) / Math_fround($21 - $12)) + $20);
                    $12 = $8;
                   }
                   $13 = $6;
                   $8 = $29;
                   $6 = $21;
                   if ($6 > $14) {
                    $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($14 - $21) * Math_fround($29 - $13)) / Math_fround($21 - $12)));
                    $6 = $14;
                   }
                   if (!(!($13 <= $16) | !($8 <= $16))) {
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($6 - $12)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                    break label$338;
                   }
                   if ($13 >= $20 & $8 >= $20) {
                    break label$338
                   }
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($6 - $12) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   break label$338;
                  }
                  $74 = $16 > $29;
                  if (!(!$74 | !($18 > $20))) {
                   label$357 : {
                    if ($12 == $23) {
                     break label$357
                    }
                    $43 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($43 < $23) {
                     break label$357
                    }
                    $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($8 > $12) {
                     break label$357
                    }
                    $13 = $18;
                    $6 = $23;
                    if ($6 < $8) {
                     $13 = Math_fround($18 + Math_fround(Math_fround($59 * Math_fround($8 - $23)) / Math_fround($12 - $23)));
                     $6 = $8;
                    }
                    $30 = $13;
                    $8 = $20;
                    $13 = $12;
                    if ($12 > $43) {
                     $13 = $43;
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $12) * Math_fround($20 - $30)) / Math_fround($12 - $6)) + $20);
                    }
                    if (!(!($16 >= $30) | !($8 <= $16))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($13 - $6)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$357;
                    }
                    if ($20 <= $30 & $8 >= $20) {
                     break label$357
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($13 - $6) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($30 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   label$362 : {
                    if ($12 == $14) {
                     break label$362
                    }
                    $30 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($30 < $12) {
                     break label$362
                    }
                    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($6 > $14) {
                     break label$362
                    }
                    label$363 : {
                     if (!($6 > $12)) {
                      $8 = $20;
                      break label$363;
                     }
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($16 - $20) * Math_fround($6 - $12)) / Math_fround($14 - $12)) + $20);
                     $12 = $6;
                    }
                    $6 = $16;
                    $13 = $8;
                    $15 = !($6 >= $8);
                    $16 = $6;
                    $8 = $14;
                    if ($8 > $30) {
                     $8 = $30;
                     $6 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * Math_fround($16 - $13)) / Math_fround($14 - $12)) + $16);
                    }
                    if (!($15 | !($16 >= $6))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($8 - $12)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$362;
                    }
                    if ($13 >= $20 & $6 >= $20) {
                     break label$362
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($8 - $12) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($6 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   if ($14 == $21) {
                    break label$338
                   }
                   $12 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                   if ($12 < $14) {
                    break label$338
                   }
                   $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                   if ($8 > $21) {
                    break label$338
                   }
                   label$368 : {
                    if (!($8 > $14)) {
                     $6 = $16;
                     break label$368;
                    }
                    $6 = Math_fround(Math_fround(Math_fround(Math_fround($29 - $16) * Math_fround($8 - $14)) / Math_fround($21 - $14)) + $16);
                    $14 = $8;
                   }
                   $13 = $6;
                   $8 = $29;
                   $6 = $21;
                   if ($6 > $12) {
                    $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($12 - $21) * Math_fround($29 - $13)) / Math_fround($21 - $14)));
                    $6 = $12;
                   }
                   if (!(!($13 <= $16) | !($8 <= $16))) {
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($6 - $14)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                    break label$338;
                   }
                   if ($13 >= $20 & $8 >= $20) {
                    break label$338
                   }
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($6 - $14) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   break label$338;
                  }
                  if (!(!$15 | !($16 < $29))) {
                   label$374 : {
                    if ($14 == $23) {
                     break label$374
                    }
                    $30 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($30 < $23) {
                     break label$374
                    }
                    $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($8 > $14) {
                     break label$374
                    }
                    $6 = $16;
                    $13 = $23;
                    if ($13 < $8) {
                     $13 = $8;
                     $12 = Math_fround($18 + Math_fround(Math_fround($58 * Math_fround($8 - $23)) / Math_fround($14 - $23)));
                    } else {
                     $12 = $18
                    }
                    $15 = !($6 >= $12);
                    $43 = $6;
                    $8 = $14;
                    if ($8 > $30) {
                     $8 = $30;
                     $6 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * Math_fround($16 - $12)) / Math_fround($14 - $13)) + $16);
                    }
                    if (!($15 | !($43 >= $6))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($8 - $13)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$374;
                    }
                    if ($12 >= $20 & $6 >= $20) {
                     break label$374
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($8 - $13) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($12 - $16) + Math_fround($6 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   if ($14 == $21) {
                    break label$338
                   }
                   $12 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                   if ($12 < $14) {
                    break label$338
                   }
                   $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                   if ($8 > $21) {
                    break label$338
                   }
                   label$379 : {
                    if (!($8 > $14)) {
                     $6 = $16;
                     break label$379;
                    }
                    $6 = Math_fround(Math_fround(Math_fround(Math_fround($29 - $16) * Math_fround($8 - $14)) / Math_fround($21 - $14)) + $16);
                    $14 = $8;
                   }
                   $13 = $6;
                   $8 = $29;
                   $6 = $21;
                   if ($6 > $12) {
                    $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($12 - $21) * Math_fround($29 - $13)) / Math_fround($21 - $14)));
                    $6 = $12;
                   }
                   if (!(!($13 <= $16) | !($8 <= $16))) {
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($6 - $14)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                    break label$338;
                   }
                   if ($13 >= $20 & $8 >= $20) {
                    break label$338
                   }
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($6 - $14) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   break label$338;
                  }
                  if (!(!$74 | !($16 < $18))) {
                   label$385 : {
                    if ($14 == $23) {
                     break label$385
                    }
                    $30 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($30 < $23) {
                     break label$385
                    }
                    $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($8 > $14) {
                     break label$385
                    }
                    $6 = $16;
                    $13 = $23;
                    if ($13 < $8) {
                     $13 = $8;
                     $12 = Math_fround($18 + Math_fround(Math_fround($58 * Math_fround($8 - $23)) / Math_fround($14 - $23)));
                    } else {
                     $12 = $18
                    }
                    $15 = !($6 >= $12);
                    $43 = $6;
                    $8 = $14;
                    if ($8 > $30) {
                     $8 = $30;
                     $6 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * Math_fround($16 - $12)) / Math_fround($14 - $13)) + $16);
                    }
                    if (!($15 | !($43 >= $6))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($8 - $13)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$385;
                    }
                    if ($12 >= $20 & $6 >= $20) {
                     break label$385
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($8 - $13) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($12 - $16) + Math_fround($6 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   if ($14 == $21) {
                    break label$338
                   }
                   $12 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                   if ($12 < $14) {
                    break label$338
                   }
                   $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                   if ($8 > $21) {
                    break label$338
                   }
                   label$390 : {
                    if (!($8 > $14)) {
                     $6 = $16;
                     break label$390;
                    }
                    $6 = Math_fround(Math_fround(Math_fround(Math_fround($29 - $16) * Math_fround($8 - $14)) / Math_fround($21 - $14)) + $16);
                    $14 = $8;
                   }
                   $13 = $6;
                   $8 = $29;
                   $6 = $21;
                   if ($6 > $12) {
                    $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($12 - $21) * Math_fround($29 - $13)) / Math_fround($21 - $14)));
                    $6 = $12;
                   }
                   if (!(!($13 <= $16) | !($8 <= $16))) {
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($6 - $14)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                    break label$338;
                   }
                   if ($13 >= $20 & $8 >= $20) {
                    break label$338
                   }
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($6 - $14) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   break label$338;
                  }
                  if (!(!($18 < $20) | !($20 < $29))) {
                   label$396 : {
                    if ($12 == $23) {
                     break label$396
                    }
                    $30 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($30 < $23) {
                     break label$396
                    }
                    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($6 > $12) {
                     break label$396
                    }
                    $13 = $23;
                    if ($13 < $6) {
                     $13 = $6;
                     $14 = Math_fround($18 + Math_fround(Math_fround($59 * Math_fround($6 - $23)) / Math_fround($12 - $23)));
                    } else {
                     $14 = $18
                    }
                    $6 = $20;
                    $8 = $12;
                    if ($8 > $30) {
                     $8 = $30;
                     $6 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $12) * Math_fround($20 - $14)) / Math_fround($12 - $13)) + $20);
                    }
                    if (!(!($14 <= $16) | !($6 <= $16))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($8 - $13)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$396;
                    }
                    if ($14 >= $20 & $6 >= $20) {
                     break label$396
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($8 - $13) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($14 - $16) + Math_fround($6 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   if ($12 == $21) {
                    break label$338
                   }
                   $14 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                   if ($14 < $12) {
                    break label$338
                   }
                   $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                   if ($8 > $21) {
                    break label$338
                   }
                   label$401 : {
                    if (!($8 > $12)) {
                     $6 = $20;
                     break label$401;
                    }
                    $6 = Math_fround(Math_fround(Math_fround(Math_fround($29 - $20) * Math_fround($8 - $12)) / Math_fround($21 - $12)) + $20);
                    $12 = $8;
                   }
                   $13 = $6;
                   $8 = $29;
                   $6 = $21;
                   if ($6 > $14) {
                    $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($14 - $21) * Math_fround($29 - $13)) / Math_fround($21 - $12)));
                    $6 = $14;
                   }
                   if (!(!($13 <= $16) | !($8 <= $16))) {
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($6 - $12)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                    break label$338;
                   }
                   if ($13 >= $20 & $8 >= $20) {
                    break label$338
                   }
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($6 - $12) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   break label$338;
                  }
                  if (!(!($20 > $29) | !($18 > $20))) {
                   label$407 : {
                    if ($12 == $23) {
                     break label$407
                    }
                    $30 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                    if ($30 < $23) {
                     break label$407
                    }
                    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                    if ($6 > $12) {
                     break label$407
                    }
                    $13 = $23;
                    if ($13 < $6) {
                     $13 = $6;
                     $14 = Math_fround($18 + Math_fround(Math_fround($59 * Math_fround($6 - $23)) / Math_fround($12 - $23)));
                    } else {
                     $14 = $18
                    }
                    $6 = $20;
                    $8 = $12;
                    if ($8 > $30) {
                     $8 = $30;
                     $6 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $12) * Math_fround($20 - $14)) / Math_fround($12 - $13)) + $20);
                    }
                    if (!(!($14 <= $16) | !($6 <= $16))) {
                     $15 = $26 + ($1 << 2) | 0;
                     SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($8 - $13)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                     break label$407;
                    }
                    if ($14 >= $20 & $6 >= $20) {
                     break label$407
                    }
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($8 - $13) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($14 - $16) + Math_fround($6 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   }
                   if ($12 == $21) {
                    break label$338
                   }
                   $14 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                   if ($14 < $12) {
                    break label$338
                   }
                   $8 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                   if ($8 > $21) {
                    break label$338
                   }
                   label$412 : {
                    if (!($8 > $12)) {
                     $6 = $20;
                     break label$412;
                    }
                    $6 = Math_fround(Math_fround(Math_fround(Math_fround($29 - $20) * Math_fround($8 - $12)) / Math_fround($21 - $12)) + $20);
                    $12 = $8;
                   }
                   $13 = $6;
                   $8 = $29;
                   $6 = $21;
                   if ($6 > $14) {
                    $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($14 - $21) * Math_fround($29 - $13)) / Math_fround($21 - $12)));
                    $6 = $14;
                   }
                   if (!(!($13 <= $16) | !($8 <= $16))) {
                    $15 = $26 + ($1 << 2) | 0;
                    SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($6 - $12)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                    break label$338;
                   }
                   if ($13 >= $20 & $8 >= $20) {
                    break label$338
                   }
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($6 - $12) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   break label$338;
                  }
                  if ($21 == $23) {
                   break label$338
                  }
                  $12 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
                  if ($12 < $23) {
                   break label$338
                  }
                  $6 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
                  if ($6 > $21) {
                   break label$338
                  }
                  $8 = $18;
                  if ($6 > $23) {
                   $8 = Math_fround($18 + Math_fround(Math_fround($85 * Math_fround($6 - $23)) / $57))
                  } else {
                   $6 = $23
                  }
                  $14 = $6;
                  $13 = $8;
                  $8 = $29;
                  $6 = $21;
                  if ($6 > $12) {
                   $8 = Math_fround($29 + Math_fround(Math_fround(Math_fround($12 - $21) * Math_fround($29 - $13)) / Math_fround($21 - $14)));
                   $6 = $12;
                  }
                  if (!(!($13 <= $16) | !($8 <= $16))) {
                   $15 = $26 + ($1 << 2) | 0;
                   SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 0) * Math_fround($6 - $14)) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                   break label$338;
                  }
                  if ($13 >= $20 & $8 >= $20) {
                   break label$338
                  }
                  $15 = $26 + ($1 << 2) | 0;
                  SAFE_HEAP_STORE_f32_4_4($15, 0, Math_fround(Math_fround(Math_fround(Math_fround($6 - $14) * SAFE_HEAP_LOAD_f32_4_4($19, 0)) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16) + Math_fround($8 - $16)) * Math_fround(-.5)) + Math_fround(1.0))) + SAFE_HEAP_LOAD_f32_4_4($15, 0)));
                 }
                 if (($1 | 0) != ($48 | 0)) {
                  continue
                 }
                 break;
                };
               }
               $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
               if ($1) {
                continue
               }
               break;
              };
             }
             if ($48 >>> 0 <= 2147483646) {
              $19 = Math_imul($27, $33);
              $6 = Math_fround(0.0);
              $4 = 0;
              while (1) {
               $1 = $4;
               $3 = $1 << 2;
               $8 = SAFE_HEAP_LOAD_f32_4_4($3 + $26 | 0, 0);
               $6 = Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($3 + $64 | 0, 0));
               $8 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround($8 + $6))) * Math_fround(255.0)) + Math_fround(.5));
               label$423 : {
                if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                 $3 = ~~$8;
                 break label$423;
                }
                $3 = -2147483648;
               }
               SAFE_HEAP_STORE_i32_1_1($82 + ($1 + $19 | 0) | 0, 0, ($3 | 0) >= 255 ? 255 : $3);
               $4 = $1 + 1 | 0;
               if (($1 | 0) != ($48 | 0)) {
                continue
               }
               break;
              };
             }
             $1 = $5;
             if ($1) {
              while (1) {
               SAFE_HEAP_STORE_f32_4_4($1, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 8) + SAFE_HEAP_LOAD_f32_4_4($1, 4)));
               $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
               if ($1) {
                continue
               }
               break;
              }
             }
             $1 = $9;
             $4 = $32 + 1 | 0;
             $3 = $33 + 1 | 0;
             $9 = $17;
             $5 = $2;
             if (($33 | 0) != ($63 | 0)) {
              continue
             }
             break;
            };
           }
           $4 = $5;
           if ($4) {
            while (1) {
             $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
             ImGui__MemFree_28void__29($4);
             $4 = $2;
             if ($2) {
              continue
             }
             break;
            }
           }
           if (($24 | 0) != ($11 + 112 | 0)) {
            ImGui__MemFree_28void__29($24)
           }
           ImGui__MemFree_28void__29($10);
          }
          ImGui__MemFree_28void__29($34);
          ImGui__MemFree_28void__29($39);
         }
         $34 = Math_imul($31, 28);
         $39 = $73 >>> 8 | 0;
         $32 = $73 << 8;
         $24 = $40 + 10 | 0;
         $33 = $40 + 8 | 0;
         ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($11, 108));
         label$430 : {
          if ($42 >>> 0 < 2) {
           break label$430
          }
          $38 = SAFE_HEAP_LOAD_i32_2_U_2($53, 0);
          $10 = SAFE_HEAP_LOAD_i32_2_U_2($52, 0);
          $2 = SAFE_HEAP_LOAD_i32_2_U_2($24, 0);
          $3 = SAFE_HEAP_LOAD_i32_2_U_2($33, 0);
          SAFE_HEAP_STORE_i64_8_8($11, 112, 0, 0);
          if (!$38) {
           break label$430
          }
          $17 = $10 - $42 | 0;
          $1 = 0;
          $4 = ($3 + $62 | 0) + Math_imul($2, $27) | 0;
          while (1) {
           $2 = $1;
           memset($11 + 112 | 0, 0, $42);
           label$432 : {
            label$433 : {
             switch ($42 - 2 | 0) {
             case 0:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$432
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 2 & 7 | $1;
               $1 = $4 + $7 | 0;
               $26 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $26);
               $3 = ($26 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, $3 >>> 1 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             case 1:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$432
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 3 & 7 | $1;
               $1 = $4 + $7 | 0;
               $26 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $26);
               $3 = ($26 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, ($3 >>> 0) / 3 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             case 2:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$432
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 4 & 7 | $1;
               $1 = $4 + $7 | 0;
               $26 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $26);
               $3 = ($26 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, $3 >>> 2 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             case 3:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$432
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 5 & 7 | $1;
               $1 = $4 + $7 | 0;
               $26 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $26);
               $3 = ($26 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, ($3 >>> 0) / 5 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             default:
              break label$433;
             };
            }
            $5 = 0;
            $7 = 0;
            $1 = 0;
            $3 = 0;
            if (($17 | 0) < 0) {
             break label$432
            }
            while (1) {
             $1 = $11 + 112 | 0;
             $9 = $7;
             $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
             $19 = $7 + $42 & 7 | $1;
             $1 = $4 + $7 | 0;
             $26 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
             SAFE_HEAP_STORE_i32_1_1($19, 0, $26);
             $3 = ($26 - $3 | 0) + $5 | 0;
             SAFE_HEAP_STORE_i32_1_1($1, 0, ($3 >>> 0) / ($42 >>> 0) | 0);
             $5 = $3;
             $1 = $7 + 1 | 0;
             $7 = $1;
             if (($9 | 0) != ($17 | 0)) {
              continue
             }
             break;
            };
           }
           if (($1 | 0) < ($10 | 0)) {
            while (1) {
             $3 = $3 - SAFE_HEAP_LOAD_i32_1_U_1($11 + 112 | $1 & 7, 0) | 0;
             SAFE_HEAP_STORE_i32_1_1($1 + $4 | 0, 0, ($3 >>> 0) / ($42 >>> 0) | 0);
             $1 = $1 + 1 | 0;
             if (($10 | 0) != ($1 | 0)) {
              continue
             }
             break;
            }
           }
           $4 = $4 + $27 | 0;
           $1 = $2 + 1 | 0;
           if (($1 | 0) != ($38 | 0)) {
            continue
           }
           break;
          };
         }
         $10 = $34 + $81 | 0;
         $39 = $32 | $39;
         label$445 : {
          if ($41 >>> 0 < 2) {
           break label$445
          }
          $38 = SAFE_HEAP_LOAD_i32_2_U_2($53, 0);
          $34 = SAFE_HEAP_LOAD_i32_2_U_2($52, 0);
          $2 = SAFE_HEAP_LOAD_i32_2_U_2($24, 0);
          $3 = SAFE_HEAP_LOAD_i32_2_U_2($33, 0);
          SAFE_HEAP_STORE_i64_8_8($11, 112, 0, 0);
          if (!$34) {
           break label$445
          }
          $17 = $38 - $41 | 0;
          $1 = 0;
          $4 = ($3 + $62 | 0) + Math_imul($2, $27) | 0;
          while (1) {
           $2 = $1;
           memset($11 + 112 | 0, 0, $41);
           label$447 : {
            label$448 : {
             switch ($41 - 2 | 0) {
             case 0:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$447
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 2 & 7 | $1;
               $1 = Math_imul($7, $27) + $4 | 0;
               $32 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $32);
               $3 = ($32 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, $3 >>> 1 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             case 1:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$447
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 3 & 7 | $1;
               $1 = Math_imul($7, $27) + $4 | 0;
               $32 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $32);
               $3 = ($32 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, ($3 >>> 0) / 3 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             case 2:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$447
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 4 & 7 | $1;
               $1 = Math_imul($7, $27) + $4 | 0;
               $32 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $32);
               $3 = ($32 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, $3 >>> 2 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             case 3:
              $5 = 0;
              $7 = 0;
              $1 = 0;
              $3 = 0;
              if (($17 | 0) < 0) {
               break label$447
              }
              while (1) {
               $1 = $11 + 112 | 0;
               $9 = $7;
               $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
               $19 = $7 + 5 & 7 | $1;
               $1 = Math_imul($7, $27) + $4 | 0;
               $32 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               SAFE_HEAP_STORE_i32_1_1($19, 0, $32);
               $3 = ($32 - $3 | 0) + $5 | 0;
               SAFE_HEAP_STORE_i32_1_1($1, 0, ($3 >>> 0) / 5 | 0);
               $5 = $3;
               $1 = $7 + 1 | 0;
               $7 = $1;
               if (($9 | 0) != ($17 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             default:
              break label$448;
             };
            }
            $5 = 0;
            $7 = 0;
            $1 = 0;
            $3 = 0;
            if (($17 | 0) < 0) {
             break label$447
            }
            while (1) {
             $1 = $11 + 112 | 0;
             $9 = $7;
             $3 = SAFE_HEAP_LOAD_i32_1_U_1($1 | $7 & 7, 0);
             $19 = $7 + $41 & 7 | $1;
             $1 = Math_imul($7, $27) + $4 | 0;
             $32 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
             SAFE_HEAP_STORE_i32_1_1($19, 0, $32);
             $3 = ($32 - $3 | 0) + $5 | 0;
             SAFE_HEAP_STORE_i32_1_1($1, 0, ($3 >>> 0) / ($41 >>> 0) | 0);
             $5 = $3;
             $1 = $7 + 1 | 0;
             $7 = $1;
             if (($9 | 0) != ($17 | 0)) {
              continue
             }
             break;
            };
           }
           if (($1 | 0) < ($38 | 0)) {
            while (1) {
             $3 = $3 - SAFE_HEAP_LOAD_i32_1_U_1($11 + 112 | $1 & 7, 0) | 0;
             SAFE_HEAP_STORE_i32_1_1(Math_imul($1, $27) + $4 | 0, 0, ($3 >>> 0) / ($41 >>> 0) | 0);
             $1 = $1 + 1 | 0;
             if (($38 | 0) != ($1 | 0)) {
              continue
             }
             break;
            }
           }
           $4 = $4 + 1 | 0;
           $1 = $2 + 1 | 0;
           if (($1 | 0) != ($34 | 0)) {
            continue
           }
           break;
          };
         }
         $2 = SAFE_HEAP_LOAD_i32_2_U_2($33, 0);
         SAFE_HEAP_STORE_i32_2_2($10, 0, $2);
         $1 = SAFE_HEAP_LOAD_i32_2_U_2($24, 0);
         SAFE_HEAP_STORE_i32_2_2($10, 2, $1);
         $3 = SAFE_HEAP_LOAD_i32_2_U_2($52, 0);
         SAFE_HEAP_STORE_i32_2_2($10, 4, $2 + $3 | 0);
         $2 = SAFE_HEAP_LOAD_i32_2_U_2($53, 0);
         SAFE_HEAP_STORE_f32_4_4($10, 16, Math_fround($56 * Math_fround($39 << 16 >> 16)));
         SAFE_HEAP_STORE_i32_2_2($10, 6, $1 + $2 | 0);
         $5 = SAFE_HEAP_LOAD_i32_4_4($11, 104);
         SAFE_HEAP_STORE_f32_4_4($10, 8, Math_fround(Math_fround(Math_fround($5 | 0) * $70) + $67));
         $1 = SAFE_HEAP_LOAD_i32_4_4($11, 100);
         SAFE_HEAP_STORE_f32_4_4($10, 20, Math_fround(Math_fround(Math_fround($3 + $5 | 0) * $70) + $67));
         SAFE_HEAP_STORE_f32_4_4($10, 12, Math_fround(Math_fround(Math_fround($1 | 0) * $69) + $68));
         SAFE_HEAP_STORE_f32_4_4($10, 24, Math_fround(Math_fround(Math_fround($1 + $2 | 0) * $69) + $68));
        }
        $1 = $31 + 1 | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($66, 0) | 0) > ($1 | 0)) {
         continue
        }
        break;
       };
      }
      $9 = $36 + 148 | 0;
      $8 = SAFE_HEAP_LOAD_f32_4_4(Math_imul($45, 120) + $76 | 0, 68);
      label$460 : {
       if ($8 == Math_fround(1.0)) {
        break label$460
       }
       $7 = $36 + 168 | 0;
       $1 = 0;
       while (1) {
        $3 = ($11 + 112 | 0) + $1 | 0;
        $6 = Math_fround($8 * Math_fround($1 >>> 0));
        label$462 : {
         if ($6 < Math_fround(4294967296.0) & $6 >= Math_fround(0.0)) {
          $2 = ~~$6 >>> 0;
          break label$462;
         }
         $2 = 0;
        }
        SAFE_HEAP_STORE_i32_1_1($3, 0, $2 >>> 0 >= 255 ? 255 : $2);
        $1 = $1 + 1 | 0;
        if (($1 | 0) != 256) {
         continue
        }
        break;
       };
       if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) <= 0) {
        break label$460
       }
       $1 = 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
       while (1) {
        $5 = $1;
        $2 = $4;
        label$465 : {
         if (!SAFE_HEAP_LOAD_i32_4_4($2, 12)) {
          break label$465
         }
         $1 = SAFE_HEAP_LOAD_i32_2_U_2($2, 6);
         if (!$1) {
          break label$465
         }
         $17 = SAFE_HEAP_LOAD_i32_2_U_2($2, 4);
         $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + SAFE_HEAP_LOAD_i32_2_U_2($2, 8) | 0;
         $10 = SAFE_HEAP_LOAD_i32_4_4($75, 0);
         $4 = Math_imul(SAFE_HEAP_LOAD_i32_2_U_2($2, 10), $10) + $3 | 0;
         while (1) {
          $3 = $1;
          $1 = 0;
          if ($17) {
           while (1) {
            $31 = $1 + $4 | 0;
            SAFE_HEAP_STORE_i32_1_1($31, 0, SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_1_U_1($31, 0) + ($11 + 112 | 0) | 0, 0));
            $1 = $1 + 1 | 0;
            if (($17 | 0) != ($1 | 0)) {
             continue
            }
            break;
           }
          }
          $1 = $3 - 1 | 0;
          $4 = $4 + $10 | 0;
          if (($3 | 0) > 1) {
           continue
          }
          break;
         };
        }
        $4 = $2 + 16 | 0;
        $1 = $5 + 1 | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) > ($1 | 0)) {
         continue
        }
        break;
       };
      }
      SAFE_HEAP_STORE_i32_4_4($9, 0, 0);
     }
     $1 = $45 + 1 | 0;
     if (($37 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   ImGui__MemFree_28void__29($55);
   ImGui__MemFree_28void__29($28);
   if ($25) {
    ImGui__MemFree_28void__29($25);
    $25 = 0;
   }
   if (($37 | 0) > 0) {
    $1 = 0;
    while (1) {
     $3 = $1;
     $5 = Math_imul($1, 196) + $35 | 0;
     label$473 : {
      if (!SAFE_HEAP_LOAD_i32_4_4($5, 168)) {
       break label$473
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($5, 4) + SAFE_HEAP_LOAD_i32_4_4($5, 28) | 0;
      $2 = SAFE_HEAP_LOAD_i32_2_U_1($4, 6);
      $1 = ($2 << 8 | $2 >>> 8) << 16 >> 16;
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + Math_imul($3, 120) | 0;
      $6 = SAFE_HEAP_LOAD_f32_4_4($2, 16);
      $4 = SAFE_HEAP_LOAD_i32_2_U_1($4, 4);
      $4 = ($4 << 8 | $4 >>> 8) << 16 >> 16;
      $8 = Math_fround($6 / Math_fround($4 - $1 | 0));
      $6 = Math_fround(Math_fround(Math_fround($1 | 0) * $8) + (($1 | 0) <= 0 ? Math_fround(-1.0) : Math_fround(1.0)));
      label$474 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $1 = ~~$6;
        break label$474;
       }
       $1 = -2147483648;
      }
      $6 = Math_fround($1 | 0);
      $9 = $5 + 168 | 0;
      $7 = SAFE_HEAP_LOAD_i32_4_4($2, 116);
      $1 = $7;
      $8 = Math_fround(Math_fround(Math_fround($4 | 0) * $8) + (($4 | 0) <= 0 ? Math_fround(-1.0) : Math_fround(1.0)));
      label$476 : {
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        $4 = ~~$8;
        break label$476;
       }
       $4 = -2147483648;
      }
      $8 = Math_fround($4 | 0);
      if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 60)) {
       SAFE_HEAP_STORE_i64_8_4($1, 12, 0, 0);
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 40 | 0, 0);
       if ($4) {
        SAFE_HEAP_STORE_i64_8_4($1, 32, 0, 0);
        ImGui__MemFree_28void__29($4);
        SAFE_HEAP_STORE_i32_4_4($1, 40, 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
       if ($4) {
        SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
        ImGui__MemFree_28void__29($4);
        SAFE_HEAP_STORE_i32_4_4($1, 8, 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 28 | 0, 0);
       if ($4) {
        SAFE_HEAP_STORE_i64_8_4($1, 20, 0, 0);
        ImGui__MemFree_28void__29($4);
        SAFE_HEAP_STORE_i32_4_4($1, 28, 0);
       }
       SAFE_HEAP_STORE_i32_1_1($1, 64, 1);
       SAFE_HEAP_STORE_i64_8_4($1, 44, 0, 0);
       SAFE_HEAP_STORE_i32_4_4($1, 80, 0);
       SAFE_HEAP_STORE_i64_8_4($1, 72, 0, 0);
       $13 = SAFE_HEAP_LOAD_f32_4_4($2, 16);
       SAFE_HEAP_STORE_i32_2_2($1, 56, 0);
       SAFE_HEAP_STORE_i32_4_4($1, 52, $2);
       SAFE_HEAP_STORE_f32_4_4($1, 16, $13);
       SAFE_HEAP_STORE_f32_4_4($1, 76, $6);
       SAFE_HEAP_STORE_f32_4_4($1, 72, $8);
       SAFE_HEAP_STORE_i32_4_4($1, 48, $0);
      }
      SAFE_HEAP_STORE_i32_2_2($1, 56, SAFE_HEAP_LOAD_i32_2_U_2($1, 56) + 1 | 0);
      $6 = SAFE_HEAP_LOAD_f32_4_4($2 + 44 | 0, 0);
      $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 72) + Math_fround(.5));
      label$478 : {
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        $1 = ~~$8;
        break label$478;
       }
       $1 = -2147483648;
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) <= 0) {
       break label$473
      }
      $6 = Math_fround($6 + Math_fround($1 | 0));
      $8 = SAFE_HEAP_LOAD_f32_4_4($2, 40);
      $4 = $5 + 152 | 0;
      $17 = $5 + 192 | 0;
      $1 = 0;
      while (1) {
       $10 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($17, 0) + ($1 << 2) | 0, 0);
       $5 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + Math_imul($1, 28) | 0;
       $14 = Math_fround($8 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 8) + Math_fround(0.0)));
       $18 = Math_fround($6 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 12) + Math_fround(0.0)));
       $21 = Math_fround($8 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 20) + Math_fround(0.0)));
       $23 = Math_fround($6 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 24) + Math_fround(0.0)));
       $13 = Math_fround(Math_fround(1.0) / Math_fround(SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0));
       $16 = Math_fround($13 * Math_fround(SAFE_HEAP_LOAD_i32_2_U_2($5, 0) >>> 0));
       $12 = Math_fround(Math_fround(1.0) / Math_fround(SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0));
       ImFont__AddGlyph_28ImFontConfig_20const__2c_20unsigned_20short_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($7, $2, $10, $14, $18, $21, $23, $16, Math_fround($12 * Math_fround(SAFE_HEAP_LOAD_i32_2_U_2($5, 2) >>> 0)), Math_fround($13 * Math_fround(SAFE_HEAP_LOAD_i32_2_U_2($5, 4) >>> 0)), Math_fround($12 * Math_fround(SAFE_HEAP_LOAD_i32_2_U_2($5, 6) >>> 0)), SAFE_HEAP_LOAD_f32_4_4($5, 16));
       $1 = $1 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) > ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $1 = $3 + 1 | 0;
     if (($37 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   if (($37 | 0) > 0) {
    $1 = 0;
    while (1) {
     $2 = Math_imul($1, 196) + $35 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 192 | 0, 0);
     if ($3) {
      ImGui__MemFree_28void__29($3)
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($2 + 180 | 0, 0);
     if ($2) {
      ImGui__MemFree_28void__29($2)
     }
     $1 = $1 + 1 | 0;
     if (($37 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($35) {
    ImGui__MemFree_28void__29($35);
    $1 = 0;
   } else {
    $1 = $35
   }
   $2 = $0;
   $35 = SAFE_HEAP_LOAD_i32_4_4($2 + 72 | 0, 0);
   $27 = SAFE_HEAP_LOAD_i32_4_4($2, 1120);
   $5 = $35 + Math_imul($27, 28) | 0;
   $10 = $5 + 4 | 0;
   $4 = SAFE_HEAP_LOAD_i32_2_U_2($5, 4);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 28);
   $9 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
   label$1 : {
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($2, 0) & 2)) {
     $17 = $4 + 123 | 0;
     $7 = SAFE_HEAP_LOAD_i32_2_U_2($5, 6);
     if ($9) {
      $22 = $5 + 6 | 0;
      $0 = 0;
      $5 = ($4 + $9 | 0) + Math_imul($3, $7) | 0;
      $4 = 32864;
      while (1) {
       $3 = $0;
       $0 = 0;
       while (1) {
        SAFE_HEAP_STORE_i32_1_1($0 + $5 | 0, 0, (SAFE_HEAP_LOAD_i32_1_U_1($0 + $4 | 0, 0) | 0) == 46 ? -1 : 0);
        $0 = $0 + 1 | 0;
        if (($0 | 0) != 122) {
         continue
        }
        break;
       };
       $9 = SAFE_HEAP_LOAD_i32_4_4($2, 28);
       $5 = $9 + $5 | 0;
       $4 = $4 + 122 | 0;
       $0 = $3 + 1 | 0;
       if (($0 | 0) != 27) {
        continue
       }
       break;
      };
      $0 = 0;
      $5 = (SAFE_HEAP_LOAD_i32_4_4($2, 20) + $17 | 0) + Math_imul(SAFE_HEAP_LOAD_i32_2_U_2($22, 0), $9) | 0;
      $4 = 32864;
      while (1) {
       $3 = $0;
       $0 = 0;
       while (1) {
        SAFE_HEAP_STORE_i32_1_1($0 + $5 | 0, 0, (SAFE_HEAP_LOAD_i32_1_U_1($0 + $4 | 0, 0) | 0) == 88 ? -1 : 0);
        $0 = $0 + 1 | 0;
        if (($0 | 0) != 122) {
         continue
        }
        break;
       };
       $5 = SAFE_HEAP_LOAD_i32_4_4($2, 28) + $5 | 0;
       $4 = $4 + 122 | 0;
       $0 = $3 + 1 | 0;
       if (($0 | 0) != 27) {
        continue
       }
       break;
      };
      break label$1;
     }
     $0 = 0;
     $9 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
     $5 = ($9 + ($4 << 2) | 0) + (Math_imul($3, $7) << 2) | 0;
     $4 = 32864;
     while (1) {
      $3 = $0;
      $0 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_4_4($5 + ($0 << 2) | 0, 0, (SAFE_HEAP_LOAD_i32_1_U_1($0 + $4 | 0, 0) | 0) == 46 ? -1 : 0);
       $0 = $0 + 1 | 0;
       if (($0 | 0) != 122) {
        continue
       }
       break;
      };
      $22 = SAFE_HEAP_LOAD_i32_4_4($2, 28);
      $5 = $5 + ($22 << 2) | 0;
      $4 = $4 + 122 | 0;
      $0 = $3 + 1 | 0;
      if (($0 | 0) != 27) {
       continue
      }
      break;
     };
     $0 = 0;
     $5 = ($9 + ($17 << 2) | 0) + (Math_imul($7, $22) << 2) | 0;
     $4 = 32864;
     while (1) {
      $3 = $0;
      $0 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_4_4($5 + ($0 << 2) | 0, 0, (SAFE_HEAP_LOAD_i32_1_U_1($0 + $4 | 0, 0) | 0) == 88 ? -1 : 0);
       $0 = $0 + 1 | 0;
       if (($0 | 0) != 122) {
        continue
       }
       break;
      };
      $5 = $5 + (SAFE_HEAP_LOAD_i32_4_4($2, 28) << 2) | 0;
      $4 = $4 + 122 | 0;
      $0 = $3 + 1 | 0;
      if (($0 | 0) != 27) {
       continue
      }
      break;
     };
     break label$1;
    }
    $0 = $4 + Math_imul(SAFE_HEAP_LOAD_i32_2_U_2($5, 6), $3) | 0;
    $5 = $0 + 1 | 0;
    if ($9) {
     $3 = $0 + $3 | 0;
     SAFE_HEAP_STORE_i32_1_1(($3 + $9 | 0) + 1 | 0, 0, 255);
     SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($2, 20) + $3 | 0, 0, 255);
     SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($2, 20) + $5 | 0, 0, 255);
     SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($2, 20) + $0 | 0, 0, 255);
     break label$1;
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
    SAFE_HEAP_STORE_i64_8_4($4 + ($0 + $3 << 2) | 0, 0, -1, -1);
    SAFE_HEAP_STORE_i32_4_4($4 + ($5 << 2) | 0, 0, -1);
    SAFE_HEAP_STORE_i32_4_4($4 + ($0 << 2) | 0, 0, -1);
   }
   $0 = SAFE_HEAP_LOAD_i32_2_U_2($35 + Math_imul($27, 28) | 0, 6);
   SAFE_HEAP_STORE_f32_4_4($2, 44, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 36) * Math_fround(Math_fround(SAFE_HEAP_LOAD_i32_2_U_2($10, 0) >>> 0) + Math_fround(.5))));
   SAFE_HEAP_STORE_f32_4_4($2 + 48 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 40 | 0, 0) * Math_fround(Math_fround($0 >>> 0) + Math_fround(.5))));
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($2, 0) & 4)) {
    $27 = SAFE_HEAP_LOAD_i32_4_4($2, 72) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 1124), 28) | 0;
    $4 = $27 + 6 | 0;
    $9 = $27 + 4 | 0;
    $0 = 0;
    while (1) {
     $7 = SAFE_HEAP_LOAD_i32_2_U_2($27, 0);
     $10 = $7 - $0 | 0;
     $3 = $10 >>> 1 | 0;
     $35 = $3 + $0 | 0;
     $5 = $7 - $35 | 0;
     $17 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
     label$1513 : {
      if ($17) {
       $17 = $17 + (Math_imul(SAFE_HEAP_LOAD_i32_2_U_2($4, 0) + $0 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 28)) + SAFE_HEAP_LOAD_i32_2_U_2($9, 0) | 0) | 0;
       if ($10 >>> 0 >= 2) {
        memset($17, 0, $3 >>> 0 <= 1 ? 1 : $3)
       }
       if ($0) {
        memset($3 + $17 | 0, 255, $0)
       }
       if (($7 | 0) == ($35 | 0)) {
        break label$1513
       }
       memset(($3 + $17 | 0) + $0 | 0, 0, $5 >>> 0 <= 1 ? 1 : $5);
       break label$1513;
      }
      $17 = SAFE_HEAP_LOAD_i32_4_4($2, 24) + (Math_imul(SAFE_HEAP_LOAD_i32_2_U_2($4, 0) + $0 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 28)) + SAFE_HEAP_LOAD_i32_2_U_2($9, 0) << 2) | 0;
      if ($10 >>> 0 >= 2) {
       memset($17, 0, ($3 >>> 0 <= 1 ? 1 : $3) << 2)
      }
      $10 = $0 << 2;
      if ($0) {
       memset($17 + ($3 << 2) | 0, 255, $10)
      }
      if (($7 | 0) == ($35 | 0)) {
       break label$1513
      }
      memset($10 + ($17 + ($3 << 2) | 0) | 0, 0, ($5 >>> 0 <= 1 ? 1 : $5) << 2);
     }
     $6 = SAFE_HEAP_LOAD_f32_4_4($2, 40);
     $7 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
     $5 = ($0 << 4) + $2 | 0;
     $8 = SAFE_HEAP_LOAD_f32_4_4($2, 36);
     $35 = SAFE_HEAP_LOAD_i32_2_U_2($9, 0) + $3 | 0;
     $3 = $0 + 1 | 0;
     SAFE_HEAP_STORE_f32_4_4($5 + 96 | 0, 0, Math_fround($8 * Math_fround($35 + $3 >>> 0)));
     SAFE_HEAP_STORE_f32_4_4($5 + 88 | 0, 0, Math_fround($8 * Math_fround($35 - 1 >>> 0)));
     $0 = $0 + $7 | 0;
     $6 = Math_fround(Math_fround(Math_fround($6 * Math_fround($0 >>> 0)) + Math_fround($6 * Math_fround($0 + 1 >>> 0))) * Math_fround(.5));
     SAFE_HEAP_STORE_f32_4_4($5 + 100 | 0, 0, $6);
     SAFE_HEAP_STORE_f32_4_4($5 + 92 | 0, 0, $6);
     $0 = $3;
     if (($3 | 0) != 64) {
      continue
     }
     break;
    };
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($2, 64) | 0) > 0) {
    $0 = 0;
    while (1) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 72) + Math_imul($0, 28) | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
     label$2314 : {
      if (!$5) {
       break label$2314
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
      if (!$4) {
       break label$2314
      }
      $10 = $5;
      $17 = $4 & 65535;
      $6 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
      $13 = $6;
      $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 20 | 0, 0);
      $12 = $8;
      $5 = SAFE_HEAP_LOAD_i32_2_U_2($3, 0);
      $14 = Math_fround($6 + Math_fround($5 >>> 0));
      $4 = SAFE_HEAP_LOAD_i32_2_U_2($3, 2);
      $18 = Math_fround($8 + Math_fround($4 >>> 0));
      $6 = SAFE_HEAP_LOAD_f32_4_4($2, 36);
      $9 = SAFE_HEAP_LOAD_i32_2_U_2($3, 4);
      $8 = SAFE_HEAP_LOAD_f32_4_4($2, 40);
      $7 = SAFE_HEAP_LOAD_i32_2_U_2($3, 6);
      ImFont__AddGlyph_28ImFontConfig_20const__2c_20unsigned_20short_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($10, 0, $17, $13, $12, $14, $18, Math_fround($6 * Math_fround($9 >>> 0)), Math_fround($8 * Math_fround($7 >>> 0)), Math_fround($6 * Math_fround($5 + $9 | 0)), Math_fround($8 * Math_fround($4 + $7 | 0)), SAFE_HEAP_LOAD_f32_4_4($3, 12));
     }
     $0 = $0 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 64) | 0) > ($0 | 0)) {
      continue
     }
     break;
    };
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($2, 52) | 0) > 0) {
    $0 = 0;
    while (1) {
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 60) + ($0 << 2) | 0, 0);
     if (SAFE_HEAP_LOAD_i32_1_U_1($3, 64)) {
      ImFont__BuildLookupTable_28_29($3)
     }
     $0 = $0 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 52) | 0) > ($0 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($2, 17, 1);
   if ($61) {
    ImGui__MemFree_28void__29($61)
   }
   if ($25) {
    ImGui__MemFree_28void__29($25)
   }
   $4 = $60;
   $0 = $54;
  }
  if ($0) {
   ImGui__MemFree_28void__29($0)
  }
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  __stack_pointer = $11 + 640 | 0;
  return $4 & 1;
 }
 
 function ImFontAtlas__AddFont_28ImFontConfig_20const__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 60)) {
   $5 = ImGui__MemAlloc_28unsigned_20long_29(88);
   ImFont__ImFont_28_29($5);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 56 | 0, 0);
   label$2 : {
    if (($3 | 0) != ($2 | 0)) {
     break label$2
    }
    $4 = $3 + 1 | 0;
    $6 = $2;
    if ($2) {
     $3 = $2 + (($2 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $2 = ($3 | 0) > ($4 | 0) ? $3 : $4;
    if (($6 | 0) >= ($2 | 0)) {
     break label$2
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29($2 << 2);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0);
    if ($4) {
     __memcpy($3, $4, SAFE_HEAP_LOAD_i32_4_4($0, 52) << 2);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 60));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 56, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 60, $3);
   }
   SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 52) << 2) | 0, 0, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 52, SAFE_HEAP_LOAD_i32_4_4($0, 52) + 1 | 0);
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 76);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0);
  label$6 : {
   if (($3 | 0) != ($2 | 0)) {
    break label$6
   }
   $4 = $3 + 1 | 0;
   $6 = $2;
   if ($2) {
    $3 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2 = ($3 | 0) > ($4 | 0) ? $3 : $4;
   if (($6 | 0) >= ($2 | 0)) {
    break label$6
   }
   $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 120));
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 84 | 0, 0);
   if ($4) {
    __memcpy($3, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 76), 120));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 84));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 80, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 84, $3);
  }
  $2 = $0 + 84 | 0;
  __memcpy(SAFE_HEAP_LOAD_i32_4_4($2, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 76), 120) | 0, $1, 120);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 76);
  SAFE_HEAP_STORE_i32_4_4($0, 76, $4 + 1 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $2 = $5 + Math_imul($4, 120) | 0;
  $3 = $2 + 116 | 0;
  if (!SAFE_HEAP_LOAD_i32_4_4($2, 116)) {
   SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($0, 52) << 2) + SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0) | 0) - 4 | 0, 0))
  }
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 8)) {
   $4 = $5 + Math_imul($4, 120) | 0;
   $5 = ImGui__MemAlloc_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4($4, 4));
   SAFE_HEAP_STORE_i32_4_4($2, 0, $5);
   SAFE_HEAP_STORE_i32_1_1($2 + 8 | 0, 0, 1);
   __memcpy($5, SAFE_HEAP_LOAD_i32_4_4($1, 0), SAFE_HEAP_LOAD_i32_4_4($4, 4));
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  if ((SAFE_HEAP_LOAD_i32_2_U_2($2, 60) | 0) == 65535) {
   SAFE_HEAP_STORE_i32_2_2($2, 60, SAFE_HEAP_LOAD_i32_2_U_2($1, 72))
  }
  SAFE_HEAP_STORE_i32_1_1($0, 17, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  SAFE_HEAP_STORE_i32_1_1($0, 18, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
  return SAFE_HEAP_LOAD_i32_4_4($3, 0);
 }
 
 function stbtt__cff_index_get_28stbtt__buf_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  $3 = $8 >> 31 & $8;
  SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
  $13 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $6 = $3;
  while (1) {
   $11 = $10 << 8;
   $5 = $6;
   label$2 : {
    if (($8 | 0) <= ($5 | 0)) {
     $6 = $3;
     $7 = $5;
     $5 = 0;
     break label$2;
    }
    $6 = $5 + 1 | 0;
    $7 = $6;
    $5 = SAFE_HEAP_LOAD_i32_1_U_1($5 + $13 | 0, 0);
   }
   $9 = $6;
   $3 = $9;
   $6 = $7;
   $12 = $11 | $5 & 255;
   $10 = $12;
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 2) {
    continue
   }
   break;
  };
  SAFE_HEAP_STORE_i32_4_4($1, 4, $9);
  $3 = 0;
  if (($8 | 0) > ($9 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($1, 4, $9 + 1 | 0);
   $3 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $9 | 0, 0);
  }
  $9 = $3;
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4) + Math_imul($2, $3) | 0;
  $4 = ($2 | 0) < 0 ? $8 : ($2 | 0) > ($8 | 0) ? $8 : $2;
  SAFE_HEAP_STORE_i32_4_4($1, 4, $4);
  $3 = 0;
  if ($9) {
   $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $10 = 0;
   $7 = 0;
   while (1) {
    $7 = $7 << 8;
    $2 = $4;
    label$7 : {
     if (($8 | 0) <= ($2 | 0)) {
      $4 = $3;
      $5 = $2;
      $2 = 0;
      break label$7;
     }
     $4 = $2 + 1 | 0;
     $5 = $4;
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($2 + $11 | 0, 0);
    }
    $3 = $4;
    $4 = $5;
    $6 = $10 + 1 | 0;
    $10 = $6;
    $2 = $7 | $2 & 255;
    $7 = $2;
    if (($6 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
  } else {
   $2 = $3
  }
  $6 = $2;
  $3 = 0;
  if ($9) {
   $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $4 = $3;
   $10 = 0;
   $7 = 0;
   while (1) {
    $7 = $7 << 8;
    $2 = $4;
    label$11 : {
     if (($8 | 0) <= ($2 | 0)) {
      $4 = $3;
      $5 = $2;
      $2 = 0;
      break label$11;
     }
     $4 = $2 + 1 | 0;
     $5 = $4;
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($2 + $11 | 0, 0);
    }
    $3 = $4;
    $4 = $5;
    $5 = $10 + 1 | 0;
    $10 = $5;
    $2 = $7 | $2 & 255;
    $7 = $2;
    if (($5 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
   $3 = $2;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = $3 - $6 | 0;
  $4 = (Math_imul($9, $12 + 1 | 0) + $6 | 0) + 2 | 0;
  if (!(($2 | $4) < 0 | ($4 | 0) > ($8 | 0) | ($2 | 0) > ($8 - $4 | 0))) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 0, $1 + $4 | 0);
  }
 }
 
 function stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $4 = $5 >> 31 & $5;
  SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
  label$1 : {
   if (($5 | 0) > 0) {
    while (1) {
     $10 = $4;
     label$4 : while (1) {
      $4 = 0;
      $7 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      $8 = ($7 | 0) >= ($5 | 0);
      if ($8) {
       $9 = $4
      } else {
       $9 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $7 | 0, 0)
      }
      if (($9 & 255) >>> 0 >= 28) {
       label$7 : {
        if ($8) {
         break label$7
        }
        $8 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
        if ((SAFE_HEAP_LOAD_i32_1_U_1($8 + $7 | 0, 0) | 0) != 30) {
         break label$7
        }
        $4 = ($7 | 0) < -1 ? $5 : ($5 | 0) <= ($7 | 0) ? $5 : $7 + 1 | 0;
        SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
        $7 = ($4 | 0) > ($5 | 0) ? $4 : $5;
        while (1) {
         if (($4 | 0) == ($7 | 0)) {
          continue label$4
         }
         $5 = $4 + 1 | 0;
         SAFE_HEAP_STORE_i32_4_4($0, 4, $5);
         $9 = SAFE_HEAP_LOAD_i32_1_U_1($4 + $8 | 0, 0);
         if (($9 & 15) == 15) {
          continue label$4
         }
         $4 = $5;
         if (($9 & 240) != 240) {
          continue
         }
         break;
        };
        continue;
       }
       stbtt__cff_int_28stbtt__buf__29($0);
       continue;
      }
      break;
     };
     if (!$8) {
      SAFE_HEAP_STORE_i32_4_4($0, 4, $7 + 1 | 0);
      $4 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $7 | 0, 0);
     }
     $4 = $4 & 255;
     if (($4 | 0) == 12) {
      $4 = 0;
      $8 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      if (($5 | 0) > ($8 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($0, 4, $8 + 1 | 0);
       $4 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $8 | 0, 0);
      }
      $4 = $4 & 255 | 256;
     }
     if (($4 | 0) == ($1 | 0)) {
      SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($6, 12, 0);
      $1 = $7 - $10 | 0;
      if (($1 | $10) < 0 | ($5 | 0) < ($10 | 0) | ($5 | 0) < ($7 | 0)) {
       break label$1
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
      SAFE_HEAP_STORE_i32_4_4($6, 12, $1);
      SAFE_HEAP_STORE_i32_4_4($6, 4, $0 + $10 | 0);
      break label$1;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     if (($5 | 0) > ($4 | 0)) {
      continue
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 12, 0);
   if (($5 | 0) < 0) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 12, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 4, $0);
  }
  label$13 : {
   if (($2 | 0) <= 0) {
    break label$13
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0) >= (SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0)) {
    break label$13
   }
   $4 = 0;
   while (1) {
    SAFE_HEAP_STORE_i32_4_4(($4 << 2) + $3 | 0, 0, stbtt__cff_int_28stbtt__buf__29($6 + 4 | 0));
    $4 = $4 + 1 | 0;
    if (($4 | 0) >= ($2 | 0)) {
     break label$13
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0) < (SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $6 + 16 | 0;
 }
 
 function stbtt__get_subrs_28stbtt__buf_2c_20stbtt__buf_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i32_4_4($5, 28, 0);
  SAFE_HEAP_STORE_i64_8_8($5, 16, 0, 0);
  stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($2, 18, 2, $5 + 16 | 0);
  label$1 : {
   label$2 : {
    $3 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
    if ($3) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
     if ($2) {
      break label$2
     }
    }
    SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
    break label$1;
   }
   $6 = 0;
   label$4 : {
    if (($2 | $3) < 0) {
     break label$4
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    $6 = 0;
    if (($4 | 0) < ($3 | 0)) {
     break label$4
    }
    $6 = 0;
    if (($2 | 0) > ($4 - $3 | 0)) {
     break label$4
    }
    $7 = $2;
    $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + $3 | 0;
   }
   $2 = $6;
   SAFE_HEAP_STORE_i32_4_4($5, 12, $7);
   SAFE_HEAP_STORE_i32_4_4($5, 8, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 4, $2);
   stbtt__dict_get_ints_28stbtt__buf__2c_20int_2c_20int_2c_20unsigned_20int__29($5 + 4 | 0, 19, 1, $5 + 28 | 0);
   $7 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
   if (!$7) {
    SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
    break label$1;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
   $7 = $3 + $7 | 0;
   SAFE_HEAP_STORE_i32_4_4($1, 4, ($7 | 0) < 0 ? $2 : ($2 | 0) < ($7 | 0) ? $2 : $7);
   $7 = $0;
   $2 = 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
   $6 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $0 = $6;
   while (1) {
    $3 = $2 << 8;
    label$21 : {
     if (($0 | 0) >= ($4 | 0)) {
      $2 = $0;
      $9 = 0;
      break label$21;
     }
     $2 = $0 + 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
     $9 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
    }
    $0 = $2;
    $2 = $3 | $9 & 255;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != 2) {
     continue
    }
    break;
   };
   if ($2) {
    $0 = 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    if (($4 | 0) > ($3 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($1, 4, $3 + 1 | 0);
     $0 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $3 | 0, 0);
    }
    $3 = $0;
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 4) + Math_imul($0, $2) | 0;
    $0 = ($0 | 0) < 0 ? $4 : ($0 | 0) > ($4 | 0) ? $4 : $0;
    SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
    if ($3) {
     $8 = 0;
     $2 = 0;
     while (1) {
      $9 = $2 << 8;
      label$9 : {
       if (($0 | 0) >= ($4 | 0)) {
        $2 = $0;
        $10 = 0;
        break label$9;
       }
       $2 = $0 + 1 | 0;
       SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
       $10 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
      }
      $0 = $2;
      $2 = $9 | $10 & 255;
      $8 = $8 + 1 | 0;
      if (($8 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
     $0 = $2 - 1 | 0;
    } else {
     $0 = -1
    }
    $0 = $0 + SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0;
    SAFE_HEAP_STORE_i32_4_4($1, 4, ($0 | 0) < 0 ? $4 : ($0 | 0) > ($4 | 0) ? $4 : $0);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   SAFE_HEAP_STORE_i32_4_4($7, 8, 0);
   SAFE_HEAP_STORE_i64_8_4($7, 0, 0, 0);
   $2 = $0 - $6 | 0;
   if (!(($2 | $6) < 0 | ($4 | 0) < ($6 | 0) | ($0 | 0) > ($4 | 0))) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($7, 8, $2);
    SAFE_HEAP_STORE_i32_4_4($7, 0, $0 + $6 | 0);
   }
  }
  __stack_pointer = $5 + 32 | 0;
 }
 
 function stbtt_FindGlyphIndex_28stbtt_fontinfo_20const__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $8 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
       $7 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
       $3 = $8 + $7 | 0;
       $0 = SAFE_HEAP_LOAD_i32_2_U_1($3, 0);
       $0 = $0 << 8 | $0 >>> 8;
       switch ($0 & 65535) {
       case 2:
        break label$1;
       case 4:
        break label$3;
       case 6:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$2;
       };
      }
      if (((SAFE_HEAP_LOAD_i32_1_U_1($3, 2) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($3 + 3 | 0, 0)) - 6 | 0) <= ($1 | 0)) {
       break label$1
      }
      return SAFE_HEAP_LOAD_i32_1_U_1(($1 + $3 | 0) + 6 | 0, 0);
     }
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 6) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($3 + 7 | 0, 0);
     if ($1 >>> 0 < $0 >>> 0) {
      return 0
     }
     if ($0 + (SAFE_HEAP_LOAD_i32_1_U_1($3, 8) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($3 + 9 | 0, 0)) >>> 0 <= $1 >>> 0) {
      break label$1
     }
     $0 = $3 + ($1 - $0 << 1) | 0;
     return SAFE_HEAP_LOAD_i32_1_U_1($0 + 10 | 0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0);
    }
    if (($1 | 0) > 65535) {
     break label$1
    }
    $6 = SAFE_HEAP_LOAD_i32_1_U_1($3, 6) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($3 + 7 | 0, 0);
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 12) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($3 + 13 | 0, 0) & 254;
    $2 = $0 + $3 | 0;
    $5 = SAFE_HEAP_LOAD_i32_1_U_1($2 + 14 | 0, 0) << 8;
    $5 = ($7 + ((SAFE_HEAP_LOAD_i32_1_U_1($2 + 15 | 0, 0) | $5) <= ($1 | 0) ? $0 : 0) | 0) + 12 | 0;
    $0 = SAFE_HEAP_LOAD_i32_2_U_1($3, 10);
    $0 = $0 << 8 | $0 >>> 8;
    label$7 : {
     if (!($0 & 65535)) {
      $4 = $5;
      break label$7;
     }
     $2 = SAFE_HEAP_LOAD_i32_2_U_1($3, 8);
     $2 = $2 << 8 | $2 >>> 8;
     while (1) {
      $4 = $2 >>> 1 | 0;
      $2 = $4 & 32767;
      $4 = $4 & 32766;
      $9 = $4 + ($5 + $8 | 0) | 0;
      $10 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0) << 8;
      $5 = ((SAFE_HEAP_LOAD_i32_1_U_1($9, 1) | $10) < ($1 | 0) ? $4 : 0) + $5 | 0;
      $4 = $5;
      $0 = $0 - 1 | 0;
      if ($0 & 65535) {
       continue
      }
      break;
     };
    }
    $0 = ($4 - $7 | 0) + 131060 & 131070;
    $5 = $3 + 14 | 0;
    $4 = $0 + ($5 + ($6 & 65534) | 0) | 0;
    $4 = SAFE_HEAP_LOAD_i32_1_U_1($4 + 2 | 0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($4 + 3 | 0, 0);
    $2 = 0;
    label$10 : {
     if (($4 | 0) > ($1 | 0)) {
      break label$10
     }
     $2 = $6 >>> 1 | 0;
     $3 = Math_imul($2, 6);
     $6 = SAFE_HEAP_LOAD_i32_2_U_1(($0 + ($3 + $5 | 0) | 0) + 2 | 0, 0);
     $6 = ($6 << 8 | $6 >>> 8) & 65535;
     if (!$6) {
      $0 = $0 + ($5 + ($2 << 2) | 0) | 0;
      $2 = (SAFE_HEAP_LOAD_i32_1_U_1($0 + 2 | 0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($0 + 3 | 0, 0)) + $1 | 0;
      break label$10;
     }
     $0 = $0 + ($3 + ($7 + (($6 + $8 | 0) + ($1 - $4 << 1) | 0) | 0) | 0) | 0;
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($0 + 16 | 0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($0 + 17 | 0, 0);
    }
    return $2 & 65535;
   }
   if (($0 & 65534) != 12) {
    break label$1
   }
   $8 = $3 + 16 | 0;
   $6 = ($0 & 65535) == 12;
   $0 = 0;
   $2 = SAFE_HEAP_LOAD_i32_4_1($3, 12);
   $5 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
   while (1) {
    if (($0 | 0) >= ($5 | 0)) {
     return 0
    }
    $3 = ($5 - $0 >> 1) + $0 | 0;
    $7 = $8 + Math_imul($3, 12) | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_1($7, 0);
    $9 = $2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24);
    label$14 : {
     if ($1 >>> 0 < $9 >>> 0) {
      $2 = $0;
      $5 = $3;
      $3 = 1;
      break label$14;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_1($7, 4);
     if ($1 >>> 0 > ($2 << 24 | ($2 & 65280) << 8 | ($2 >>> 8 & 65280 | $2 >>> 24)) >>> 0) {
      $2 = $3 + 1 | 0;
      $3 = 1;
      break label$14;
     }
     $2 = $0;
     $0 = SAFE_HEAP_LOAD_i32_4_1($7, 8);
     $4 = ($0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24)) + ($6 ? $1 - $9 | 0 : 0) | 0;
     $3 = 0;
    }
    $0 = $2;
    $2 = $4;
    if ($3) {
     continue
    }
    break;
   };
  }
  return $2;
 }
 
 function stbtt_GetGlyphBitmapBoxSubpixel_28stbtt_fontinfo_20const__2c_20int_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int__2c_20int__2c_20int__2c_20int__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $9 = __stack_pointer - 48 | 0;
  __stack_pointer = $9;
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0)) {
    SAFE_HEAP_STORE_i64_8_8($9 + 40 | 0, 0, 0, 0);
    $10 = $9 + 32 | 0;
    SAFE_HEAP_STORE_i64_8_8($10, 0, 0, 0);
    $11 = $9 + 24 | 0;
    SAFE_HEAP_STORE_i64_8_8($11, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($9 + 16 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($9 + 8 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($9, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($9, 0, 1);
    $0 = stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0, $1, $9);
    $1 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($11, 0), wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    $10 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($10, 0), wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    $11 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($9, 28), wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($9, 36), wasm2js_i32$1 = 0, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    $12 = 0;
    break label$1;
   }
   $1 = stbtt__GetGlyfOffset_28stbtt_fontinfo_20const__2c_20int_29($0, $1);
   if (($1 | 0) < 0) {
    $1 = 0;
    $12 = 1;
    break label$1;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4) + $1 | 0;
   $1 = SAFE_HEAP_LOAD_i32_2_U_1($0, 2);
   $1 = ($1 << 8 | $1 >>> 8) << 16 >> 16;
   $10 = SAFE_HEAP_LOAD_i32_2_U_1($0, 4);
   $10 = ($10 << 8 | $10 >>> 8) << 16 >> 16;
   $11 = SAFE_HEAP_LOAD_i32_2_U_1($0, 6);
   $11 = ($11 << 8 | $11 >>> 8) << 16 >> 16;
   $0 = SAFE_HEAP_LOAD_i32_2_U_1($0, 8);
   $0 = ($0 << 8 | $0 >>> 8) << 16 >> 16;
   $12 = 0;
  }
  label$4 : {
   label$5 : {
    if ($12) {
     if ($4) {
      SAFE_HEAP_STORE_i32_4_4($4, 0, 0)
     }
     if ($5) {
      SAFE_HEAP_STORE_i32_4_4($5, 0, 0)
     }
     if ($6) {
      SAFE_HEAP_STORE_i32_4_4($6, 0, 0)
     }
     $0 = 0;
     if ($7) {
      break label$5
     }
     break label$4;
    }
    if ($4) {
     label$11 : {
      label$12 : {
       $8 = Math_fround(Math_fround(Math_fround($1 | 0) * $2) + Math_fround(0.0));
       if (!($8 >= Math_fround(0.0))) {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $1 = ~~$8
        } else {
         $1 = -2147483648
        }
        if ($8 != Math_fround($1 | 0)) {
         break label$12
        }
       }
       $1 = ~~$8;
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        break label$11
       }
       $1 = -2147483648;
       break label$11;
      }
      $1 = $1 - 1 | 0;
     }
     $8 = Math_fround($1 | 0);
     label$17 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $1 = ~~$8;
       break label$17;
      }
      $1 = -2147483648;
     }
     SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
    }
    if ($5) {
     label$20 : {
      label$21 : {
       $8 = Math_fround(Math_fround(Math_fround(0 - $0 | 0) * $3) + Math_fround(0.0));
       if (!($8 >= Math_fround(0.0))) {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $0 = ~~$8
        } else {
         $0 = -2147483648
        }
        if ($8 != Math_fround($0 | 0)) {
         break label$21
        }
       }
       $0 = ~~$8;
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        break label$20
       }
       $0 = -2147483648;
       break label$20;
      }
      $0 = $0 - 1 | 0;
     }
     $8 = Math_fround($0 | 0);
     label$26 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $0 = ~~$8;
       break label$26;
      }
      $0 = -2147483648;
     }
     SAFE_HEAP_STORE_i32_4_4($5, 0, $0);
    }
    if ($6) {
     $2 = Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround($11 | 0) * $2) + Math_fround(0.0))));
     label$29 : {
      if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
       $0 = ~~$2;
       break label$29;
      }
      $0 = -2147483648;
     }
     SAFE_HEAP_STORE_i32_4_4($6, 0, $0);
    }
    if (!$7) {
     break label$4
    }
    $2 = Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround(0 - $10 | 0) * $3) + Math_fround(0.0))));
    label$31 : {
     if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
      $0 = ~~$2;
      break label$31;
     }
     $0 = -2147483648;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($7, 0, $0);
  }
  __stack_pointer = $9 + 48 | 0;
 }
 
 function stbrp_pack_rects_28stbrp_context__2c_20stbrp_rect__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
  if (($2 | 0) > 0) {
   while (1) {
    SAFE_HEAP_STORE_i32_4_4(($3 << 4) + $1 | 0, 12, $3);
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
  if ($2 >>> 0 >= 2) {
   qsort($1, $2, 16, 14)
  }
  if (($2 | 0) > 0) {
   $23 = $0 + 24 | 0;
   $3 = 0;
   while (1) {
    $28 = $3;
    label$6 : {
     label$7 : {
      $19 = ($3 << 4) + $1 | 0;
      $21 = SAFE_HEAP_LOAD_i32_2_U_2($19, 4);
      if ($21) {
       $20 = SAFE_HEAP_LOAD_i32_2_U_2($19, 6);
       if ($20) {
        break label$7
       }
      }
      SAFE_HEAP_STORE_i32_4_4($19, 8, 0);
      break label$6;
     }
     $12 = 0;
     $10 = 0;
     $8 = 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     $4 = ($5 + $21 | 0) - 1 | 0;
     $13 = $4 - (($4 | 0) % ($5 | 0) | 0) | 0;
     $24 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     label$9 : {
      if (($13 | 0) > ($24 | 0)) {
       break label$9
      }
      $25 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      if (($25 | 0) < ($20 | 0)) {
       break label$9
      }
      $10 = 1073741824;
      $8 = 1073741824;
      $15 = SAFE_HEAP_LOAD_i32_4_4($23, 0);
      $17 = SAFE_HEAP_LOAD_i32_2_U_2($15, 0);
      $3 = $17 + $13 | 0;
      if (($3 | 0) <= ($24 | 0)) {
       $14 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
       $11 = $17;
       $4 = 1073741824;
       $5 = 0;
       $6 = $15;
       $9 = $23;
       $7 = 1073741824;
       while (1) {
        $10 = $7;
        $18 = $9;
        $12 = $5;
        $9 = $4;
        $26 = $3;
        $16 = $11;
        $4 = $11;
        $7 = 0;
        $3 = 0;
        $5 = 0;
        $22 = $6;
        if (($13 | 0) > 0) {
         while (1) {
          $8 = $4;
          $11 = $6;
          $4 = SAFE_HEAP_LOAD_i32_2_U_2($6, 2);
          label$14 : {
           if (($5 | 0) < ($4 | 0)) {
            $5 = Math_imul($4 - $5 | 0, $3);
            $27 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($11, 4), 0);
            if ($8 >>> 0 < $16 >>> 0) {
             $6 = $4;
             $8 = $27 - $16 | 0;
             break label$14;
            }
            $6 = $4;
            $8 = $27 - $8 | 0;
            break label$14;
           }
           $6 = $5;
           $8 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($11, 4), 0) - $8 | 0;
           $8 = ($3 + $8 | 0) > ($13 | 0) ? $13 - $3 | 0 : $8;
           $5 = Math_imul($8, $6 - $4 | 0);
          }
          $11 = SAFE_HEAP_LOAD_i32_4_4($11, 4);
          $4 = SAFE_HEAP_LOAD_i32_2_U_2($11, 0);
          $7 = $5 + $7 | 0;
          $3 = $3 + $8 | 0;
          $5 = $6;
          $6 = $11;
          if (($4 | 0) < ($26 | 0)) {
           continue
          }
          break;
         }
        }
        $3 = $7;
        $6 = $5;
        label$17 : {
         if (!$14) {
          $4 = ($6 | 0) < ($10 | 0);
          $7 = $4 ? $6 : $10;
          $5 = $4 ? $18 : $12;
          $4 = $9;
          break label$17;
         }
         label$19 : {
          if (($6 + $20 | 0) > ($25 | 0)) {
           break label$19
          }
          if (($6 | 0) >= ($10 | 0)) {
           if (($6 | 0) != ($10 | 0)) {
            break label$19
           }
           $7 = $10;
           $5 = $12;
           $4 = $9;
           if (($3 | 0) >= ($4 | 0)) {
            break label$17
           }
          }
          $7 = $6;
          $5 = $18;
          $4 = $3;
          break label$17;
         }
         $7 = $10;
         $5 = $12;
         $4 = $9;
        }
        $9 = $22 + 4 | 0;
        $10 = $7;
        $12 = $5;
        $8 = $4;
        $6 = SAFE_HEAP_LOAD_i32_4_4($22, 4);
        $11 = SAFE_HEAP_LOAD_i32_2_U_2($6, 0);
        $3 = $11 + $13 | 0;
        if (($24 | 0) >= ($3 | 0)) {
         continue
        }
        break;
       };
      }
      $7 = $8;
      $3 = 0;
      if ($12) {
       $3 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($12, 0), 0)
      }
      $8 = $3;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0) != 1) {
       break label$9
      }
      $3 = $15;
      if (($13 | 0) > ($17 | 0)) {
       while (1) {
        $3 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
        if ((SAFE_HEAP_LOAD_i32_2_U_2($3, 0) | 0) < ($13 | 0)) {
         continue
        }
        break;
       }
      }
      $11 = $8;
      $4 = $12;
      $6 = $3;
      $3 = $15;
      $9 = $23;
      $5 = $10;
      while (1) {
       $18 = $5;
       $15 = $4;
       $12 = $11;
       $10 = $7;
       $22 = $6;
       $17 = SAFE_HEAP_LOAD_i32_2_U_2($6, 0);
       $16 = $17 - $13 | 0;
       $7 = $9;
       $5 = $3;
       while (1) {
        $11 = $7;
        $3 = $5;
        $7 = $3 + 4 | 0;
        $5 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
        if ((SAFE_HEAP_LOAD_i32_2_U_2($5, 0) | 0) <= ($16 | 0)) {
         continue
        }
        break;
       };
       $5 = 0;
       $7 = 0;
       $4 = 0;
       $8 = $3;
       $6 = SAFE_HEAP_LOAD_i32_2_U_2($3, 0);
       if ($17 >>> 0 > $6 >>> 0) {
        while (1) {
         $26 = $5;
         $14 = $6 & 65535;
         $6 = $8;
         $5 = SAFE_HEAP_LOAD_i32_2_U_2($6, 2);
         label$29 : {
          if (($4 | 0) < ($5 | 0)) {
           $4 = Math_imul($5 - $4 | 0, $7);
           $9 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($6, 4), 0);
           if (($14 | 0) < ($16 | 0)) {
            $8 = $5;
            $14 = $9 - $16 | 0;
            break label$29;
           }
           $8 = $5;
           $14 = $9 - $14 | 0;
           break label$29;
          }
          $8 = $4;
          $9 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($6, 4), 0) - $14 | 0;
          $9 = ($7 + $9 | 0) > ($13 | 0) ? $13 - $7 | 0 : $9;
          $14 = $9;
          $4 = Math_imul($9, $4 - $5 | 0);
         }
         $9 = SAFE_HEAP_LOAD_i32_4_4($6, 4);
         $6 = SAFE_HEAP_LOAD_i32_2_U_2($9, 0);
         $5 = $4 + $26 | 0;
         $7 = $7 + $14 | 0;
         $4 = $8;
         $8 = $9;
         if ($6 >>> 0 < $17 >>> 0) {
          continue
         }
         break;
        }
       }
       $8 = $5;
       label$32 : {
        label$33 : {
         $7 = $4;
         if (($4 + $20 | 0) > ($25 | 0) | ($4 | 0) > ($18 | 0)) {
          break label$33
         }
         if (!(($7 | 0) < ($18 | 0) | ($8 | 0) < ($10 | 0))) {
          if (($8 | 0) != ($10 | 0)) {
           break label$33
          }
          $5 = $18;
          $9 = $10;
          $6 = $12;
          if (($16 | 0) >= ($6 | 0)) {
           break label$32
          }
         }
         $5 = $7;
         $6 = $16;
         $9 = $8;
         $15 = $11;
         break label$32;
        }
        $5 = $18;
        $6 = $12;
        $9 = $10;
       }
       $4 = $15;
       $7 = $9;
       $9 = $11;
       $12 = $4;
       $10 = $5;
       $11 = $6;
       $8 = $6;
       $6 = SAFE_HEAP_LOAD_i32_4_4($22, 4);
       if ($6) {
        continue
       }
       break;
      };
     }
     label$35 : {
      $3 = $12;
      if (!$3) {
       break label$35
      }
      $4 = $10 + $20 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) < ($4 | 0)) {
       break label$35
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
      if (!$9) {
       break label$35
      }
      SAFE_HEAP_STORE_i32_2_2($9, 2, $4);
      SAFE_HEAP_STORE_i32_2_2($9, 0, $8);
      SAFE_HEAP_STORE_i32_4_4($0, 28, SAFE_HEAP_LOAD_i32_4_4($9, 4));
      $7 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
      if ((SAFE_HEAP_LOAD_i32_2_U_2($7, 0) | 0) < ($8 | 0)) {
       $3 = $7 + 4 | 0;
       $7 = SAFE_HEAP_LOAD_i32_4_4($7, 4);
      }
      SAFE_HEAP_STORE_i32_4_4($3, 0, $9);
      $3 = $7;
      $7 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
      label$38 : {
       if (!$7) {
        break label$38
       }
       $6 = $8 + $21 | 0;
       $5 = $3 + 4 | 0;
       $4 = $3;
       while (1) {
        $3 = $7;
        if ((SAFE_HEAP_LOAD_i32_2_U_2($3, 0) | 0) > ($6 | 0)) {
         $3 = $4;
         break label$38;
        }
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($0, 28));
        SAFE_HEAP_STORE_i32_4_4($0, 28, $4);
        $5 = $3 + 4 | 0;
        $4 = $3;
        $7 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
        if ($7) {
         continue
        }
        break;
       };
      }
      SAFE_HEAP_STORE_i32_4_4($9, 4, $3);
      $4 = $8 + $21 | 0;
      if ((SAFE_HEAP_LOAD_i32_2_U_2($3, 0) | 0) < ($4 | 0)) {
       SAFE_HEAP_STORE_i32_2_2($3, 0, $4)
      }
      SAFE_HEAP_STORE_i32_2_2($19, 10, $10);
      SAFE_HEAP_STORE_i32_2_2($19, 8, $8);
      break label$6;
     }
     SAFE_HEAP_STORE_i32_4_4($19, 8, -1);
    }
    $3 = $28 + 1 | 0;
    if (($3 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  if ($2 >>> 0 >= 2) {
   qsort($1, $2, 16, 15)
  }
  if (($2 | 0) > 0) {
   $3 = 1;
   $7 = 0;
   while (1) {
    $0 = $3;
    $4 = ($7 << 4) + $1 | 0;
    if ((SAFE_HEAP_LOAD_i32_2_U_2($4, 8) | 0) != 65535) {
     $3 = 0
    } else {
     $3 = (SAFE_HEAP_LOAD_i32_2_U_2($4, 10) | 0) == 65535
    }
    SAFE_HEAP_STORE_i32_4_4($4, 12, $3 ^ 1);
    $3 = $3 ? 0 : $0;
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function stbtt_GetGlyphShape_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt_vertex___29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = 0, $29 = 0, $30 = 0, $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0);
  $10 = __stack_pointer - 96 | 0;
  __stack_pointer = $10;
  label$1 : {
   if (!SAFE_HEAP_LOAD_i32_4_4($0 + 60 | 0, 0)) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    $1 = stbtt__GetGlyfOffset_28stbtt_fontinfo_20const__2c_20int_29($0, $1);
    SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
    if (($1 | 0) < 0) {
     break label$1
    }
    $7 = $1 + $3 | 0;
    $1 = SAFE_HEAP_LOAD_i32_2_U_1($7, 0);
    $1 = ($1 << 8 | $1 >>> 8) << 16 >> 16;
    label$3 : {
     if (($1 | 0) > 0) {
      $28 = $7 + 10 | 0;
      $23 = $1 << 1;
      $5 = $28 + $23 | 0;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($5, 1);
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
      $3 = 0;
      $0 = $5 - 2 | 0;
      $24 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
      $11 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($24 + $23 | 0, 14) + 14 | 0);
      if ($11) {
       $0 = 0;
       $3 = ($5 + ($4 | $1 << 8) | 0) + 2 | 0;
       while (1) {
        $1 = $12;
        $4 = $11 + Math_imul($1 + $23 | 0, 14) | 0;
        label$7 : {
         if (!($6 & 255)) {
          $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
          if (!($0 & 8)) {
           $5 = $3 + 1 | 0;
           break label$7;
          }
          $5 = $3 + 2 | 0;
          $6 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
          break label$7;
         }
         $5 = $3;
         $6 = $6 - 1 | 0;
        }
        $3 = $0;
        SAFE_HEAP_STORE_i32_1_1($4, 12, $3);
        $0 = $3;
        $12 = $1 + 1 | 0;
        $3 = $5;
        if (($1 | 0) != ($24 | 0)) {
         continue
        }
        break;
       };
       $0 = 0;
       $4 = $5;
       $6 = 0;
       while (1) {
        $1 = $0;
        $3 = $11 + Math_imul($23 + $1 | 0, 14) | 0;
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($3, 12);
        label$11 : {
         if ($5 & 2) {
          $0 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
          $6 = ($5 & 16 ? $0 : 0 - $0 | 0) + $6 | 0;
          $4 = $4 + 1 | 0;
          break label$11;
         }
         if ($5 & 16) {
          break label$11
         }
         $6 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($4, 1)) + $6 | 0;
         $4 = $4 + 2 | 0;
        }
        SAFE_HEAP_STORE_i32_2_2($3, 0, $6);
        $0 = $1 + 1 | 0;
        if (($1 | 0) != ($24 | 0)) {
         continue
        }
        break;
       };
       $0 = 0;
       $6 = 0;
       while (1) {
        $1 = $0;
        $3 = $11 + Math_imul($23 + $1 | 0, 14) | 0;
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($3, 12);
        label$15 : {
         if ($5 & 4) {
          $0 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
          $6 = ($5 & 32 ? $0 : 0 - $0 | 0) + $6 | 0;
          $4 = $4 + 1 | 0;
          break label$15;
         }
         if ($5 & 32) {
          break label$15
         }
         $6 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($4, 1)) + $6 | 0;
         $4 = $4 + 2 | 0;
        }
        SAFE_HEAP_STORE_i32_2_2($3, 2, $6);
        $0 = $1 + 1 | 0;
        if (($1 | 0) != ($24 | 0)) {
         continue
        }
        break;
       };
       $4 = 0;
       $3 = 0;
       $0 = 0;
       $5 = 0;
       $7 = 0;
       $1 = 0;
       $12 = 0;
       $6 = 0;
       while (1) {
        $18 = $7;
        $7 = $5;
        $5 = $0;
        $0 = $4;
        $4 = $3;
        $13 = $3 + $23 | 0;
        $9 = $11 + Math_imul($13, 14) | 0;
        $29 = SAFE_HEAP_LOAD_i32_1_U_1($9, 12);
        $8 = SAFE_HEAP_LOAD_i32_2_2($9, 2);
        $9 = SAFE_HEAP_LOAD_i32_2_2($9, 0);
        label$19 : {
         if (($3 | 0) == ($14 | 0)) {
          if ($4) {
           label$23 : {
            if ($30) {
             if ($19) {
              $3 = $11 + Math_imul($0, 14) | 0;
              SAFE_HEAP_STORE_i32_2_2($3, 6, $12);
              SAFE_HEAP_STORE_i32_2_2($3, 4, $6);
              SAFE_HEAP_STORE_i32_2_2($3, 2, $7 + $12 >>> 1 | 0);
              SAFE_HEAP_STORE_i32_2_2($3, 0, $6 + $15 >>> 1 | 0);
              SAFE_HEAP_STORE_i32_1_1($3, 12, 3);
              $0 = $0 + 1 | 0;
             }
             $3 = $11 + Math_imul($0, 14) | 0;
             SAFE_HEAP_STORE_i32_2_2($3, 4, $15);
             SAFE_HEAP_STORE_i32_2_2($3, 2, $18);
             SAFE_HEAP_STORE_i32_2_2($3, 0, $1);
             SAFE_HEAP_STORE_i32_1_1($3, 12, 3);
             $1 = $7;
             break label$23;
            }
            $14 = $11 + Math_imul($0, 14) | 0;
            $3 = $14 + 12 | 0;
            if ($19) {
             SAFE_HEAP_STORE_i32_1_1($3, 0, 3);
             SAFE_HEAP_STORE_i32_2_2($14, 0, $1);
             SAFE_HEAP_STORE_i32_2_2($14, 4, $6);
             SAFE_HEAP_STORE_i32_2_2($14, 2, $18);
             $1 = $12;
             break label$23;
            }
            SAFE_HEAP_STORE_i32_1_1($3, 0, 2);
            SAFE_HEAP_STORE_i32_2_2($14, 0, $1);
            SAFE_HEAP_STORE_i32_2_2($14, 4, 0);
            SAFE_HEAP_STORE_i32_2_2($14, 2, $18);
            $1 = 0;
           }
           $14 = $1;
           SAFE_HEAP_STORE_i32_2_2($11 + Math_imul($0, 14) | 0, 6, $14);
           $0 = $0 + 1 | 0;
          }
          $14 = $29 & 1;
          label$28 : {
           if ($14) {
            $3 = $9;
            $1 = $8;
            break label$28;
           }
           $7 = $11 + Math_imul($13 + 1 | 0, 14) | 0;
           $1 = SAFE_HEAP_LOAD_i32_2_2($7, 0);
           if (!(SAFE_HEAP_LOAD_i32_1_U_1($7, 12) & 1)) {
            $3 = $1 + $9 >> 1;
            $1 = SAFE_HEAP_LOAD_i32_2_2($7, 2) + $8 >> 1;
            $15 = $9;
            $7 = $8;
            break label$28;
           }
           $3 = $1 & 65535;
           $1 = SAFE_HEAP_LOAD_i32_2_U_2($7, 2);
           $15 = $9;
           $7 = $8;
           $4 = $4 + 1 | 0;
          }
          $9 = $4;
          $4 = $11 + Math_imul($0, 14) | 0;
          SAFE_HEAP_STORE_i32_4_2($4, 4, 0);
          $18 = $1;
          SAFE_HEAP_STORE_i32_2_2($4, 2, $1);
          $1 = $3;
          SAFE_HEAP_STORE_i32_2_2($4, 0, $1);
          SAFE_HEAP_STORE_i32_1_1($4, 12, 1);
          $19 = 0;
          $30 = !$14;
          $4 = ($5 << 1) + $28 | 0;
          $14 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 0) << 8 | SAFE_HEAP_LOAD_i32_1_U_1($4, 1)) + 1 | 0;
          $5 = $5 + 1 | 0;
          $4 = $0 + 1 | 0;
          $13 = 1;
          break label$19;
         }
         if (!($29 & 1)) {
          if (!$19) {
           $19 = 1;
           $6 = $9;
           $12 = $8;
           $9 = $4;
           $4 = $0;
           $13 = 0;
           break label$19;
          }
          $3 = $11 + Math_imul($0, 14) | 0;
          SAFE_HEAP_STORE_i32_2_2($3, 6, $12);
          SAFE_HEAP_STORE_i32_2_2($3, 4, $6);
          SAFE_HEAP_STORE_i32_2_2($3, 2, $8 + $12 >>> 1 | 0);
          SAFE_HEAP_STORE_i32_2_2($3, 0, $6 + $9 >>> 1 | 0);
          SAFE_HEAP_STORE_i32_1_1($3, 12, 3);
          $19 = 1;
          $6 = $9;
          $12 = $8;
          $9 = $4;
          $4 = $0 + 1 | 0;
          $13 = 0;
          break label$19;
         }
         $13 = $11 + Math_imul($0, 14) | 0;
         $3 = $13 + 12 | 0;
         label$33 : {
          if ($19) {
           SAFE_HEAP_STORE_i32_1_1($3, 0, 3);
           SAFE_HEAP_STORE_i32_2_2($13, 0, $9);
           SAFE_HEAP_STORE_i32_2_2($13, 4, $6);
           SAFE_HEAP_STORE_i32_2_2($13, 2, $8);
           $3 = $12;
           break label$33;
          }
          SAFE_HEAP_STORE_i32_1_1($3, 0, 2);
          SAFE_HEAP_STORE_i32_2_2($13, 0, $9);
          SAFE_HEAP_STORE_i32_2_2($13, 4, 0);
          SAFE_HEAP_STORE_i32_2_2($13, 2, $8);
          $3 = 0;
         }
         SAFE_HEAP_STORE_i32_2_2($13, 6, $3);
         $19 = 0;
         $9 = $4;
         $4 = $0 + 1 | 0;
         $13 = 1;
        }
        $3 = $9 + 1 | 0;
        $0 = $5;
        $8 = $7;
        $5 = $8;
        $7 = $18;
        if (($9 | 0) < ($24 | 0)) {
         continue
        }
        break;
       };
       label$35 : {
        if ($30) {
         if (!$13) {
          $0 = $11 + Math_imul($4, 14) | 0;
          SAFE_HEAP_STORE_i32_2_2($0, 6, $12);
          SAFE_HEAP_STORE_i32_2_2($0, 4, $6);
          SAFE_HEAP_STORE_i32_2_2($0, 2, $8 + $12 >>> 1 | 0);
          SAFE_HEAP_STORE_i32_2_2($0, 0, $6 + $15 >>> 1 | 0);
          SAFE_HEAP_STORE_i32_1_1($0, 12, 3);
          $4 = $4 + 1 | 0;
         }
         $5 = $4;
         $0 = $11 + Math_imul($5, 14) | 0;
         SAFE_HEAP_STORE_i32_2_2($0, 4, $15);
         SAFE_HEAP_STORE_i32_2_2($0, 2, $18);
         SAFE_HEAP_STORE_i32_2_2($0, 0, $1);
         SAFE_HEAP_STORE_i32_1_1($0, 12, 3);
         $3 = $8;
         break label$35;
        }
        $3 = $11 + Math_imul($4, 14) | 0;
        $0 = $3 + 12 | 0;
        if (!$13) {
         SAFE_HEAP_STORE_i32_1_1($0, 0, 3);
         SAFE_HEAP_STORE_i32_2_2($3, 0, $1);
         SAFE_HEAP_STORE_i32_2_2($3, 4, $6);
         SAFE_HEAP_STORE_i32_2_2($3, 2, $18);
         $5 = $4;
         $3 = $12;
         break label$35;
        }
        SAFE_HEAP_STORE_i32_1_1($0, 0, 2);
        SAFE_HEAP_STORE_i32_2_2($3, 0, $1);
        SAFE_HEAP_STORE_i32_2_2($3, 4, 0);
        SAFE_HEAP_STORE_i32_2_2($3, 2, $18);
        $5 = $4;
        $3 = 0;
       }
       SAFE_HEAP_STORE_i32_2_2($11 + Math_imul($5, 14) | 0, 6, $3);
       $3 = $5 + 1 | 0;
      }
      $5 = 0;
      $4 = $11;
      if ($4) {
       break label$3
      }
      break label$1;
     }
     $3 = 0;
     if (($1 | 0) != -1) {
      break label$3
     }
     $5 = 1;
     $1 = $7 + 10 | 0;
     while (1) {
      label$40 : {
       $6 = $4;
       $4 = $3;
       $9 = $5;
       if (!$5) {
        break label$40
       }
       SAFE_HEAP_STORE_i32_4_4($10, 48, 0);
       $5 = $1 + 4 | 0;
       $12 = SAFE_HEAP_LOAD_i32_1_U_1($1, 2) << 8;
       $7 = SAFE_HEAP_LOAD_i32_1_U_1($1, 3);
       $15 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
       label$43 : {
        if (!($15 & 2)) {
         $16 = Math_fround(0.0);
         $27 = Math_fround(0.0);
         break label$43;
        }
        $8 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
        if ($15 & 1) {
         $5 = $1 + 8 | 0;
         $3 = SAFE_HEAP_LOAD_i32_2_U_1($1, 6);
         $16 = Math_fround(($3 << 8 | $3 >>> 8) << 16 >> 16);
         $27 = Math_fround((SAFE_HEAP_LOAD_i32_1_U_1($1, 5) | $8 << 8) << 16 >> 16);
         break label$43;
        }
        $5 = $1 + 6 | 0;
        $16 = Math_fround(SAFE_HEAP_LOAD_i32_1_1($1, 5) | 0);
        $27 = Math_fround($8 << 24 >> 24);
       }
       $31 = $16;
       $7 = $7 | $12;
       label$46 : {
        if ($15 & 8) {
         $1 = SAFE_HEAP_LOAD_i32_2_U_1($5, 0);
         $16 = Math_fround(Math_fround(($1 << 8 | $1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
         $20 = $16;
         $21 = Math_fround(0.0);
         $22 = Math_fround(0.0);
         $5 = $5 + 2 | 0;
         break label$46;
        }
        if ($15 & 64) {
         $1 = SAFE_HEAP_LOAD_i32_2_U_1($5, 2);
         $20 = Math_fround(Math_fround(($1 << 8 | $1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
         $21 = Math_fround(0.0);
         $22 = Math_fround(0.0);
         $1 = SAFE_HEAP_LOAD_i32_2_U_1($5, 0);
         $16 = Math_fround(Math_fround(($1 << 8 | $1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
         $5 = $5 + 4 | 0;
         break label$46;
        }
        if ($15 << 24 >> 24 >= 0) {
         $20 = Math_fround(1.0);
         $21 = Math_fround(0.0);
         $22 = Math_fround(0.0);
         $16 = Math_fround(1.0);
         break label$46;
        }
        $1 = SAFE_HEAP_LOAD_i32_2_U_1($5, 6);
        $20 = Math_fround(Math_fround(($1 << 8 | $1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
        $1 = SAFE_HEAP_LOAD_i32_2_U_1($5, 4);
        $21 = Math_fround(Math_fround(($1 << 8 | $1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
        $1 = SAFE_HEAP_LOAD_i32_2_U_1($5, 2);
        $22 = Math_fround(Math_fround(($1 << 8 | $1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
        $1 = SAFE_HEAP_LOAD_i32_2_U_1($5, 0);
        $16 = Math_fround(Math_fround(($1 << 8 | $1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
        $5 = $5 + 8 | 0;
       }
       $12 = $5;
       label$50 : {
        label$51 : {
         $7 = stbtt_GetGlyphShape_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt_vertex___29($0, $7, $10 + 48 | 0);
         label$52 : {
          if (($7 | 0) <= 0) {
           $5 = $4;
           $1 = $6;
           break label$52;
          }
          $32 = Math_fround(Math_sqrt(Math_fround(Math_fround($21 * $21) + Math_fround($20 * $20))));
          $33 = Math_fround(Math_sqrt(Math_fround(Math_fround($16 * $16) + Math_fround($22 * $22))));
          $5 = SAFE_HEAP_LOAD_i32_4_4($10, 48);
          $1 = 0;
          while (1) {
           $8 = $5 + Math_imul($1, 14) | 0;
           $25 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($8, 0) | 0);
           $26 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($8, 2) | 0);
           $17 = Math_fround($32 * Math_fround($31 + Math_fround(Math_fround($22 * $25) + Math_fround($20 * $26))));
           label$55 : {
            if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
             $3 = ~~$17;
             break label$55;
            }
            $3 = -2147483648;
           }
           SAFE_HEAP_STORE_i32_2_2($8, 2, $3);
           $17 = Math_fround($33 * Math_fround($27 + Math_fround(Math_fround($16 * $25) + Math_fround($21 * $26))));
           label$57 : {
            if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
             $3 = ~~$17;
             break label$57;
            }
            $3 = -2147483648;
           }
           SAFE_HEAP_STORE_i32_2_2($8, 0, $3);
           $25 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($8, 4) | 0);
           $26 = Math_fround(SAFE_HEAP_LOAD_i32_2_2($8, 6) | 0);
           $17 = Math_fround($33 * Math_fround($27 + Math_fround(Math_fround($16 * $25) + Math_fround($21 * $26))));
           label$59 : {
            if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
             $3 = ~~$17;
             break label$59;
            }
            $3 = -2147483648;
           }
           SAFE_HEAP_STORE_i32_2_2($8, 4, $3);
           $17 = Math_fround($32 * Math_fround($31 + Math_fround(Math_fround($22 * $25) + Math_fround($20 * $26))));
           label$61 : {
            if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
             $3 = ~~$17;
             break label$61;
            }
            $3 = -2147483648;
           }
           SAFE_HEAP_STORE_i32_2_2($8, 6, $3);
           $1 = $1 + 1 | 0;
           if (($7 | 0) != ($1 | 0)) {
            continue
           }
           break;
          };
          $5 = $4 + $7 | 0;
          $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($5, 14));
          if (!$1) {
           if ($6) {
            ImGui__MemFree_28void__29($6)
           }
           $1 = SAFE_HEAP_LOAD_i32_4_4($10, 48);
           if (!$1) {
            break label$51
           }
           ImGui__MemFree_28void__29($1);
           break label$51;
          }
          if (($4 | 0) > 0) {
           __memcpy($1, $6, Math_imul($4, 14))
          }
          $3 = SAFE_HEAP_LOAD_i32_4_4($10, 48);
          __memcpy($1 + Math_imul($4, 14) | 0, $3, Math_imul($7, 14));
          if ($6) {
           ImGui__MemFree_28void__29($6)
          }
          ImGui__MemFree_28void__29($3);
         }
         $4 = $1;
         $7 = 1;
         $3 = $5;
         $5 = $15 & 32;
         break label$50;
        }
        $7 = 0;
        $3 = $4;
        $4 = $6;
        $5 = $9;
       }
       $1 = $12;
       $6 = $4;
       if ($7) {
        continue
       }
      }
      break;
     };
     $4 = $6;
     $5 = 0;
     if ($9) {
      break label$1
     }
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
    $5 = $3;
    break label$1;
   }
   $4 = $10 + 48 | 0;
   SAFE_HEAP_STORE_i64_8_8($4 + 40 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($4 + 32 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($4 + 24 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($4 + 16 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($4 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($10, 48, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($10, 48, 1);
   SAFE_HEAP_STORE_i64_8_8($10 + 40 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($10 + 32 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($10 + 24 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($10 + 16 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($10 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($10, 0, 0, 0);
   label$67 : {
    label$68 : {
     if (!stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0, $1, $4)) {
      break label$68
     }
     $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(SAFE_HEAP_LOAD_i32_4_4($10, 92), 14));
     SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
     SAFE_HEAP_STORE_i32_4_4($10, 40, $3);
     if (!stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0, $1, $10)) {
      break label$68
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($10, 44);
     break label$67;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
    $5 = 0;
   }
  }
  __stack_pointer = $10 + 96 | 0;
  return $5;
 }
 
 function stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  var $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
  label$1 : {
   while (1) {
    if (($9 | 0) > 16) {
     break label$1
    }
    $11 = Math_fround(Math_fround(Math_fround(Math_fround($4 + $4) + $2) + $6) * Math_fround(.25));
    $10 = Math_fround(Math_fround(Math_fround($2 + $6) * Math_fround(.5)) - $11);
    $13 = Math_fround($10 * $10);
    $10 = Math_fround(Math_fround(Math_fround(Math_fround($5 + $5) + $3) + $7) * Math_fround(.25));
    $12 = Math_fround(Math_fround(Math_fround($3 + $7) * Math_fround(.5)) - $10);
    if ($8 < Math_fround($13 + Math_fround($12 * $12))) {
     $9 = $9 + 1 | 0;
     stbtt__tesselate_curve_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, Math_fround(Math_fround($2 + $4) * Math_fround(.5)), Math_fround(Math_fround($3 + $5) * Math_fround(.5)), $11, $10, $8, $9);
     $2 = $11;
     $3 = $10;
     $4 = Math_fround(Math_fround($4 + $6) * Math_fround(.5));
     $5 = Math_fround(Math_fround($5 + $7) * Math_fround(.5));
     continue;
    }
    break;
   };
   $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($0) {
    $0 = ($9 << 3) + $0 | 0;
    SAFE_HEAP_STORE_f32_4_4($0, 4, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 0, $6);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $9 + 1 | 0);
  }
 }
 
 function stbtt__tesselate_cubic_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0);
  label$1 : {
   while (1) {
    if (($11 | 0) > 16) {
     break label$1
    }
    $12 = Math_fround($4 - $2);
    $13 = Math_fround($12 * $12);
    $12 = Math_fround($5 - $3);
    $13 = Math_fround(Math_sqrt(Math_fround($13 + Math_fround($12 * $12))));
    $12 = Math_fround($6 - $4);
    $14 = Math_fround($12 * $12);
    $12 = Math_fround($7 - $5);
    $13 = Math_fround($13 + Math_fround(Math_sqrt(Math_fround($14 + Math_fround($12 * $12)))));
    $12 = Math_fround($8 - $6);
    $14 = Math_fround($12 * $12);
    $12 = Math_fround($9 - $7);
    $12 = Math_fround($13 + Math_fround(Math_sqrt(Math_fround($14 + Math_fround($12 * $12)))));
    $13 = Math_fround($12 * $12);
    $12 = Math_fround($8 - $2);
    $14 = Math_fround($12 * $12);
    $12 = Math_fround($9 - $3);
    $12 = Math_fround(Math_sqrt(Math_fround($14 + Math_fround($12 * $12))));
    if ($10 < Math_fround($13 - Math_fround($12 * $12))) {
     $12 = Math_fround(Math_fround($2 + $4) * Math_fround(.5));
     $15 = Math_fround(Math_fround($4 + $6) * Math_fround(.5));
     $4 = Math_fround(Math_fround($12 + $15) * Math_fround(.5));
     $16 = Math_fround(Math_fround($3 + $5) * Math_fround(.5));
     $17 = Math_fround(Math_fround($5 + $7) * Math_fround(.5));
     $5 = Math_fround(Math_fround($16 + $17) * Math_fround(.5));
     $18 = $2;
     $19 = $3;
     $13 = $4;
     $14 = $5;
     $6 = Math_fround(Math_fround($6 + $8) * Math_fround(.5));
     $4 = Math_fround(Math_fround($15 + $6) * Math_fround(.5));
     $2 = Math_fround(Math_fround($13 + $4) * Math_fround(.5));
     $7 = Math_fround(Math_fround($7 + $9) * Math_fround(.5));
     $5 = Math_fround(Math_fround($17 + $7) * Math_fround(.5));
     $3 = Math_fround(Math_fround($14 + $5) * Math_fround(.5));
     $11 = $11 + 1 | 0;
     stbtt__tesselate_cubic_28stbtt__point__2c_20int__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $18, $19, $12, $16, $13, $14, $2, $3, $10, $11);
     continue;
    }
    break;
   };
   $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($0) {
    $0 = ($11 << 3) + $0 | 0;
    SAFE_HEAP_STORE_f32_4_4($0, 4, $9);
    SAFE_HEAP_STORE_f32_4_4($0, 0, $8);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $11 + 1 | 0);
  }
 }
 
 function stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  if (($1 | 0) >= 13) {
   while (1) {
    $14 = $1;
    $10 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
    $2 = Math_imul($1 >>> 1 | 0, 20) + $0 | 0;
    $12 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
    $6 = $0;
    $4 = $1 - 1 | 0;
    $13 = SAFE_HEAP_LOAD_f32_4_4($0 + Math_imul($4, 20) | 0, 4);
    $0 = $12 < $13;
    if (($10 < $12 | 0) != ($0 | 0)) {
     $7 = $5 + 8 | 0;
     $1 = $7 + 16 | 0;
     $0 = $6 + Math_imul($0 ^ $10 < $13 ? $4 : 0, 20) | 0;
     $3 = $0 + 16 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
     $8 = $7 + 8 | 0;
     $9 = $0 + 8 | 0;
     SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($5, 8, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
     $11 = $3;
     $3 = $2 + 16 | 0;
     SAFE_HEAP_STORE_i32_4_4($11, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
     $7 = $2 + 8 | 0;
     SAFE_HEAP_STORE_i64_8_4($9, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
     SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_8($8, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_8($5, 8), i64toi32_i32$HIGH_BITS);
    }
    $1 = $5 + 8 | 0;
    $9 = $1 + 16 | 0;
    $0 = $6 + 16 | 0;
    SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0));
    $7 = $1 + 8 | 0;
    $1 = $6 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($5, 8, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
    $8 = $0;
    $0 = $2 + 16 | 0;
    SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0));
    $3 = $2 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_4($1, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($6, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0));
    SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_8($7, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_8($5, 8), i64toi32_i32$HIGH_BITS);
    $1 = 1;
    $0 = $4;
    while (1) {
     $4 = $0;
     $10 = SAFE_HEAP_LOAD_f32_4_4($6, 4);
     $0 = $1;
     while (1) {
      $1 = $0;
      $0 = $0 + 1 | 0;
      $2 = $6 + Math_imul($1, 20) | 0;
      if (SAFE_HEAP_LOAD_f32_4_4($2, 4) < $10) {
       continue
      }
      break;
     };
     while (1) {
      $0 = $4;
      $4 = $0 - 1 | 0;
      $3 = $6 + Math_imul($0, 20) | 0;
      if (SAFE_HEAP_LOAD_f32_4_4($3, 4) > $10) {
       continue
      }
      break;
     };
     if (($0 | 0) > ($1 | 0)) {
      $4 = $2 + 16 | 0;
      SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
      $8 = $2 + 8 | 0;
      SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($5, 8, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
      $11 = $4;
      $4 = $3 + 16 | 0;
      SAFE_HEAP_STORE_i32_4_4($11, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
      $11 = $8;
      $8 = $3 + 8 | 0;
      SAFE_HEAP_STORE_i64_8_4($11, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0));
      SAFE_HEAP_STORE_i64_8_4($8, 0, SAFE_HEAP_LOAD_i64_8_8($7, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_8($5, 8), i64toi32_i32$HIGH_BITS);
      $1 = $1 + 1 | 0;
      $0 = $0 - 1 | 0;
      continue;
     }
     break;
    };
    $1 = $14 - $1 | 0;
    label$8 : {
     if (($1 | 0) > ($0 | 0)) {
      stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($6, $0);
      $0 = $2;
      break label$8;
     }
     stbtt__sort_edges_quicksort_28stbtt__edge__2c_20int_29($2, $1);
     $1 = $0;
     $0 = $6;
    }
    if (($1 | 0) > 12) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $5 + 32 | 0;
 }
 
 function ImFont__AddGlyph_28ImFontConfig_20const__2c_20unsigned_20short_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  var $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0;
  label$1 : {
   if (!$1) {
    $14 = $11;
    $13 = $5;
    break label$1;
   }
   $13 = SAFE_HEAP_LOAD_f32_4_4($1, 52);
   $14 = SAFE_HEAP_LOAD_f32_4_4($1, 56);
   $13 = $11 < $13 ? $13 : $11 > $14 ? $14 : $11;
   label$3 : {
    if ($11 == $13) {
     $11 = $5;
     break label$3;
    }
    $11 = Math_fround(Math_fround($13 - $11) * Math_fround(.5));
    label$5 : {
     if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
      $12 = ~~$11;
      break label$5;
     }
     $12 = -2147483648;
    }
    $14 = SAFE_HEAP_LOAD_i32_1_U_1($1, 28) ? Math_fround($12 | 0) : $11;
    $11 = Math_fround($14 + $5);
    $3 = Math_fround($14 + $3);
   }
   $5 = $3;
   $14 = SAFE_HEAP_LOAD_f32_4_4($1, 32);
   $3 = Math_fround($13 + Math_fround(.5));
   label$7 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $12 = ~~$3;
     break label$7;
    }
    $12 = -2147483648;
   }
   $14 = Math_fround($14 + (SAFE_HEAP_LOAD_i32_1_U_1($1, 28) ? Math_fround($12 | 0) : $13));
   $13 = $11;
   $3 = $5;
  }
  $11 = $3;
  $17 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
  $12 = $17 + 1 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 36 | 0, 0);
  label$9 : {
   if (($1 | 0) > ($17 | 0)) {
    break label$9
   }
   $16 = $1;
   if ($1) {
    $15 = $1 + (($1 | 0) / 2 | 0) | 0
   } else {
    $15 = 8
   }
   $1 = ($12 | 0) < ($15 | 0) ? $15 : $12;
   if (($16 | 0) >= ($1 | 0)) {
    break label$9
   }
   $15 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($1, 40));
   $16 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   if ($16) {
    __memcpy($15, $16, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 32), 40));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 40));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 36, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 40, $15);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 32, $12);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0) + Math_imul($17, 40) | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 36, $10);
  SAFE_HEAP_STORE_f32_4_4($1, 32, $9);
  SAFE_HEAP_STORE_f32_4_4($1, 28, $8);
  SAFE_HEAP_STORE_f32_4_4($1, 24, $7);
  SAFE_HEAP_STORE_f32_4_4($1, 20, $6);
  SAFE_HEAP_STORE_f32_4_4($1, 16, $13);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $4);
  SAFE_HEAP_STORE_f32_4_4($1, 8, $11);
  SAFE_HEAP_STORE_f32_4_4($1, 4, $14);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $2 << 2 | ($4 != $6 ? ($11 != $13) << 1 : 0));
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
  SAFE_HEAP_STORE_i32_1_1($0, 64, 1);
  $3 = Math_fround(Math_fround($2 | 0) + Math_fround(.9900000095367432));
  $4 = Math_fround(Math_fround(Math_fround($9 - $7) * Math_fround(SAFE_HEAP_LOAD_i32_4_4($1, 28) | 0)) + $3);
  label$13 : {
   if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
    $12 = ~~$4;
    break label$13;
   }
   $12 = -2147483648;
  }
  $3 = Math_fround(Math_fround(Math_fround($10 - $8) * Math_fround(SAFE_HEAP_LOAD_i32_4_4($1, 32) | 0)) + $3);
  label$15 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $1 = ~~$3;
    break label$15;
   }
   $1 = -2147483648;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 80, Math_imul($1, $12) + SAFE_HEAP_LOAD_i32_4_4($0, 80) | 0);
 }
 
 function ImFont__ClearOutputData_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  SAFE_HEAP_STORE_i64_8_4($0, 12, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 32, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 40, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 64, 1);
  SAFE_HEAP_STORE_i64_8_4($0, 44, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 80, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 72, 0, 0);
 }
 
 function rect_height_compare_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = SAFE_HEAP_LOAD_i32_2_U_2($0, 6);
  $4 = SAFE_HEAP_LOAD_i32_2_U_2($1, 6);
  $2 = -1;
  label$1 : {
   if ($3 >>> 0 > $4 >>> 0) {
    break label$1
   }
   $2 = 1;
   if ($3 >>> 0 < $4 >>> 0) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_2_U_2($0, 4);
   $1 = SAFE_HEAP_LOAD_i32_2_U_2($1, 4);
   $2 = $0 >>> 0 > $1 >>> 0 ? -1 : $0 >>> 0 < $1 >>> 0;
  }
  return $2 | 0;
 }
 
 function rect_original_order_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
  return (($0 | 0) < ($1 | 0) ? -1 : ($0 | 0) > ($1 | 0)) | 0;
 }
 
 function ImFont__BuildLookupTable_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
  if ($3) {
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   while (1) {
    $8 = SAFE_HEAP_LOAD_i32_4_4($5 + Math_imul($1, 40) | 0, 0) >>> 2 | 0;
    $2 = ($2 | 0) > ($8 | 0) ? $2 : $8;
    $8 = $2;
    $1 = $1 + 1 | 0;
    if (($3 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
  }
  SAFE_HEAP_STORE_i32_2_2($0, 84, 0);
  SAFE_HEAP_STORE_i32_1_1($0, 64, 0);
  $1 = $8 + 1 | 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) < ($1 | 0)) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$2 : {
    if (($2 | 0) >= ($1 | 0)) {
     break label$2
    }
    $3 = $2;
    $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
    if (($3 | 0) >= ($2 | 0)) {
     break label$2
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29($2 << 2);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($5) {
     __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 2);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if (($1 | 0) > ($2 | 0)) {
    while (1) {
     SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($2 << 2) | 0, 0, -1082130432);
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 24 | 0, 0);
   label$8 : {
    if (($2 | 0) >= ($1 | 0)) {
     break label$8
    }
    $3 = $2;
    $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
    if (($3 | 0) >= ($2 | 0)) {
     break label$8
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29($2 << 1);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
    if ($5) {
     __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($0, 20) << 1);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 28));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 24, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 28, $3);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   if (($1 | 0) > ($2 | 0)) {
    while (1) {
     SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($0, 28) + ($2 << 1) | 0, 0, 65535);
     $2 = $2 + 1 | 0;
     if (($2 | 0) != ($1 | 0)) {
      continue
     }
     break;
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
  if (($2 | 0) > 0) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
   $5 = ($1 | 0) <= 1 ? 1 : $1;
   $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
   $11 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   $2 = 0;
   while (1) {
    $9 = $6 + Math_imul($2, 40) | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
    SAFE_HEAP_STORE_f32_4_4(($3 & -4) + $11 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($9, 4));
    SAFE_HEAP_STORE_i32_2_2($4 + ($3 >>> 1 & 2147483646) | 0, 0, $2);
    $9 = (($3 >>> 17 | 0) + $0 | 0) + 84 | 0;
    SAFE_HEAP_STORE_i32_1_1($9, 0, SAFE_HEAP_LOAD_i32_1_U_1($9, 0) | 1 << ($3 >>> 14 & 7));
    $2 = $2 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
   $2 = $1;
  }
  label$81 : {
   label$9 : {
    if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= 32) {
     if (SAFE_HEAP_LOAD_i32_4_4($0, 44)) {
      break label$9
     }
     break label$81;
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
    $1 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0), 64);
    if (!(($1 | 0) == 65535 ? $3 : $5 + Math_imul($1, 40) | 0)) {
     break label$81
    }
   }
   if ((SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0) + Math_imul($2, 40) | 0) - 40 | 0, 0) & -4) != 36) {
    $3 = $2 + 1 | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 36 | 0, 0);
    label$12 : {
     if (($1 | 0) > ($2 | 0)) {
      break label$12
     }
     $2 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
     $2 = ($2 | 0) > ($3 | 0) ? $2 : $3;
     if (($1 | 0) >= ($2 | 0)) {
      break label$12
     }
     $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 40));
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
     if ($5) {
      __memcpy($1, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 32), 40));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 40));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 36, $2);
     SAFE_HEAP_STORE_i32_4_4($0, 40, $1);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 32, $3);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 32) - 1 | 0;
   $1 = $3 + Math_imul($5, 40) | 0;
   label$16 : {
    if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= 32) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
     break label$16;
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
    $2 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0), 64);
    $2 = ($2 | 0) == 65535 ? $6 : $4 + Math_imul($2, 40) | 0;
   }
   $6 = SAFE_HEAP_LOAD_i64_8_4($2, 0);
   SAFE_HEAP_STORE_i64_8_4($1, 0, $6, i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $6 & 3 | 36);
   $2 = $3 + Math_imul($5, 40) | 0;
   $10 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) * Math_fround(4.0));
   SAFE_HEAP_STORE_f32_4_4($2, 4, $10);
   SAFE_HEAP_STORE_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 36, $10);
   SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($0, 28) + (SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 1 & 2147483646) | 0, 0, SAFE_HEAP_LOAD_i32_2_U_2($0, 32) - 1 | 0);
  }
  label$18 : {
   if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= 32) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
    break label$18;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0), 64);
   $1 = ($1 | 0) == 65535 ? $2 : $3 + Math_imul($1, 40) | 0;
  }
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) & -3)
  }
  label$21 : {
   if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= 9) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
    break label$21;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0), 18);
   $1 = ($1 | 0) == 65535 ? $2 : $3 + Math_imul($1, 40) | 0;
  }
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) & -3)
  }
  SAFE_HEAP_STORE_i32_4_4($7, 12, 8724518);
  SAFE_HEAP_STORE_i32_4_4($7, 8, -15859666);
  if ((SAFE_HEAP_LOAD_i32_2_U_2($0, 60) | 0) == 65535) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   $1 = 0;
   label$25 : {
    while (1) {
     $2 = $1;
     $1 = SAFE_HEAP_LOAD_i32_2_U_2(($7 + 12 | 0) + ($1 << 1) | 0, 0);
     $4 = 0;
     label$27 : {
      if ($6 >>> 0 <= $1 >>> 0) {
       break label$27
      }
      $4 = SAFE_HEAP_LOAD_i32_2_U_2($5 + ($1 << 1) | 0, 0);
      $4 = ($4 | 0) != 65535 ? $3 + Math_imul($4, 40) | 0 : 0;
     }
     if ($4) {
      break label$25
     }
     $1 = $2 + 1 | 0;
     if (($1 | 0) != 2) {
      continue
     }
     break;
    };
    $1 = 65535;
   }
   SAFE_HEAP_STORE_i32_2_2($0, 60, $1);
  }
  if ((SAFE_HEAP_LOAD_i32_2_U_2($0, 62) | 0) == 65535) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   $1 = 0;
   label$29 : {
    while (1) {
     $2 = $1;
     $1 = SAFE_HEAP_LOAD_i32_2_U_2(($7 + 8 | 0) + ($1 << 1) | 0, 0);
     $4 = 0;
     label$31 : {
      if ($6 >>> 0 <= $1 >>> 0) {
       break label$31
      }
      $4 = SAFE_HEAP_LOAD_i32_2_U_2($5 + ($1 << 1) | 0, 0);
      $4 = ($4 | 0) != 65535 ? $3 + Math_imul($4, 40) | 0 : 0;
     }
     if ($4) {
      break label$29
     }
     $1 = $2 + 1 | 0;
     if (($1 | 0) != 2) {
      continue
     }
     break;
    };
    $1 = 65535;
   }
   SAFE_HEAP_STORE_i32_2_2($0, 62, $1);
  }
  $2 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  $1 = SAFE_HEAP_LOAD_i32_2_U_2($0, 58);
  if ($3 >>> 0 > $1 >>> 0) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0) + ($1 << 1) | 0, 0);
   $2 = ($1 | 0) != 65535 ? $2 + Math_imul($1, 40) | 0 : 0;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 44, $2);
  label$33 : {
   if ($2) {
    break label$33
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
   $1 = 0;
   label$34 : {
    while (1) {
     $2 = $1;
     $1 = SAFE_HEAP_LOAD_i32_2_U_2(($1 << 1) + 32850 | 0, 0);
     $4 = 0;
     label$36 : {
      if ($3 >>> 0 <= $1 >>> 0) {
       break label$36
      }
      $4 = SAFE_HEAP_LOAD_i32_2_U_2($6 + ($1 << 1) | 0, 0);
      $4 = ($4 | 0) != 65535 ? $5 + Math_imul($4, 40) | 0 : 0;
     }
     if ($4) {
      break label$34
     }
     $1 = $2 + 1 | 0;
     if (($1 | 0) != 3) {
      continue
     }
     break;
    };
    $1 = 65535;
   }
   $2 = $1;
   SAFE_HEAP_STORE_i32_2_2($0, 58, $1);
   $1 = 0;
   if ($2 >>> 0 < $3 >>> 0) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
    $1 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0, 28) + ($2 << 1) | 0, 0);
    $1 = ($1 | 0) != 65535 ? $3 + Math_imul($1, 40) | 0 : 0;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 44, $1);
   if ($1) {
    break label$33
   }
   $1 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 32), 40) + SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0) | 0) - 40 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 44, $1);
   SAFE_HEAP_STORE_i32_2_2($0, 58, SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 2 | 0);
  }
  SAFE_HEAP_STORE_f32_4_4($0, 12, SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 4));
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $1 = 0;
  while (1) {
   $2 = $1;
   $1 = $3 + ($1 << 2) | 0;
   if (SAFE_HEAP_LOAD_f32_4_4($1, 0) < Math_fround(0.0)) {
    SAFE_HEAP_STORE_f32_4_4($1, 0, SAFE_HEAP_LOAD_f32_4_4($0, 12))
   }
   $1 = $2 + 1 | 0;
   if (($2 | 0) != ($8 | 0)) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 16 | 0;
 }
 
 function ImFont__ImFont_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_1_1($0, 64, 0);
  SAFE_HEAP_STORE_i32_2_2($0, 62, 65535);
  SAFE_HEAP_STORE_i32_4_2($0, 58, -1);
  SAFE_HEAP_STORE_i64_8_4($0, 44, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 72, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 68, 1065353216);
  SAFE_HEAP_STORE_i32_4_4($0 + 40 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 32 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_2($0 + 50 | 0, 0);
  SAFE_HEAP_STORE_i64_8_2($0 + 78 | 0, 0);
 }
 
 function ImFont___ImFont_28_29($0) {
  var $1 = 0;
  SAFE_HEAP_STORE_i64_8_4($0, 12, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 32, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 40, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 64, 1);
  SAFE_HEAP_STORE_i64_8_4($0, 44, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 80, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 72, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ($1) {
   ImGui__MemFree_28void__29($1)
  }
  return $0;
 }
 
 function ImFont__FindGlyph_28unsigned_20short_29_20const($0, $1) {
  var $2 = 0, $3 = 0;
  if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= $1 >>> 0) {
   return SAFE_HEAP_LOAD_i32_4_4($0, 44)
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
  $0 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0) + ($1 << 1) | 0, 0);
  return ($0 | 0) == 65535 ? $2 : $3 + Math_imul($0, 40) | 0;
 }
 
 function ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $12 = __stack_pointer - 16 | 0;
  __stack_pointer = $12;
  $8 = $6;
  if (!$6) {
   $8 = strlen($5) + $5 | 0
  }
  $9 = SAFE_HEAP_LOAD_f32_4_4($1, 16);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $14 = $8;
  label$2 : {
   if ($5 >>> 0 >= $8 >>> 0) {
    $8 = $5;
    $9 = Math_fround(0.0);
    break label$2;
   }
   $16 = Math_fround($2 / $9);
   $17 = $1 + 12 | 0;
   $6 = 0;
   $8 = $5;
   $13 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
   while (1) {
    $5 = $8;
    label$5 : {
     label$6 : {
      if (!($4 > Math_fround(0.0))) {
       break label$6
      }
      $8 = $6;
      if ($6) {
       $6 = $8
      } else {
       $6 = ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($1, $16, $5, $14, Math_fround($4 - $10));
       $6 = (($6 | 0) == ($5 | 0)) + $6 | 0;
      }
      if ($5 >>> 0 < $6 >>> 0) {
       break label$6
      }
      $9 = $13;
      if ($10 > $9) {
       SAFE_HEAP_STORE_f32_4_4($0, 0, $10);
       $9 = $10;
      }
      $13 = $9;
      $11 = Math_fround($11 + $2);
      SAFE_HEAP_STORE_f32_4_4($0, 4, $11);
      $6 = $5;
      if (!($5 >>> 0 >= $14 >>> 0)) {
       while (1) {
        label$12 : {
         $5 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
         $8 = ($5 | 0) == 32;
         $6 = $6 + ($8 | ($5 - 9 & 255) >>> 0 < 2) | 0;
         if (!$8 & ($5 | 0) != 9) {
          break label$12
         }
         if ($6 >>> 0 < $14 >>> 0) {
          continue
         }
        }
        break;
       };
       $5 = $6;
      }
      $8 = $5;
      $5 = 0;
      $10 = Math_fround(0.0);
      break label$5;
     }
     $18 = $6;
     $6 = SAFE_HEAP_LOAD_i32_1_1($5, 0);
     SAFE_HEAP_STORE_i32_4_4($12, 12, $6);
     label$15 : {
      label$16 : {
       label$17 : {
        if (($6 | 0) >= 0) {
         $6 = $5 + 1 | 0;
         break label$17;
        }
        $6 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($12 + 12 | 0, $5, $14) + $5 | 0;
        if (!SAFE_HEAP_LOAD_i32_4_4($12, 12)) {
         break label$16
        }
       }
       $8 = $6;
       label$19 : {
        $15 = SAFE_HEAP_LOAD_i32_4_4($12, 12);
        if ($15 >>> 0 > 31) {
         break label$19
        }
        $9 = $11;
        $6 = 2;
        label$20 : {
         switch ($15 - 10 | 0) {
         case 3:
          break label$15;
         case 0:
          break label$20;
         default:
          break label$19;
         };
        }
        $9 = Math_fround($11 + $2);
        SAFE_HEAP_STORE_f32_4_4($0, 4, $9);
        $13 = $10 <= $13 ? $13 : $10;
        SAFE_HEAP_STORE_f32_4_4($0, 0, $13);
        $10 = Math_fround(0.0);
        break label$15;
       }
       $9 = $11;
       $6 = $5;
       $11 = Math_fround($10 + Math_fround($16 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 8) + ($15 << 2) | 0, wasm2js_i32$1 = $17, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) > ($15 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0)));
       $5 = $11 >= $3;
       $8 = $5 ? $6 : $8;
       $6 = $5 ? 3 : 0;
       $10 = $5 ? $10 : $11;
       break label$15;
      }
      $9 = $11;
      $8 = $6;
      $6 = 3;
     }
     $11 = $9;
     $5 = $18;
     $9 = $10;
     if (($6 | 0) == 3) {
      break label$2
     }
    }
    $6 = $5;
    $9 = $10;
    if ($8 >>> 0 < $14 >>> 0) {
     continue
    }
    break;
   };
  }
  if (SAFE_HEAP_LOAD_f32_4_4($0, 0) < $9) {
   SAFE_HEAP_STORE_f32_4_4($0, 0, $9)
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
  if (!(!($9 > Math_fround(0.0)) & $3 != Math_fround(0.0))) {
   SAFE_HEAP_STORE_f32_4_4($0, 4, Math_fround($3 + $2))
  }
  if ($7) {
   SAFE_HEAP_STORE_i32_4_4($7, 0, $8)
  }
  __stack_pointer = $12 + 16 | 0;
 }
 
 function ImFont__RenderChar_28ImDrawList__2c_20float_2c_20ImVec2_2c_20unsigned_20int_2c_20unsigned_20short_29_20const($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0);
  label$3 : {
   label$1 : {
    if (SAFE_HEAP_LOAD_i32_4_4($0, 20) >>> 0 <= $5 >>> 0) {
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
     break label$1;
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
    $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 40 | 0, 0);
    $5 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 28 | 0, 0) + ($5 << 1) | 0, 0);
    $5 = ($5 | 0) == 65535 ? $6 : $7 + Math_imul($5, 40) | 0;
   }
   if (!$5) {
    break label$3
   }
   $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   if (!($7 & 2)) {
    break label$3
   }
   $8 = Math_fround(1.0);
   if ($2 >= Math_fround(0.0)) {
    $8 = Math_fround($2 / SAFE_HEAP_LOAD_f32_4_4($0, 16))
   }
   $9 = $7 & 1 ? $4 | 16777215 : $4;
   $2 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
   label$5 : {
    if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
     $0 = ~~$2;
     break label$5;
    }
    $0 = -2147483648;
   }
   $11 = Math_fround($0 | 0);
   SAFE_HEAP_STORE_f32_4_4($3, 0, $11);
   $2 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
   label$7 : {
    if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
     $0 = ~~$2;
     break label$7;
    }
    $0 = -2147483648;
   }
   $12 = Math_fround($0 | 0);
   SAFE_HEAP_STORE_f32_4_4($3, 4, $12);
   ImDrawList__PrimReserve_28int_2c_20int_29($1, 6, 4);
   $13 = SAFE_HEAP_LOAD_i32_4_4($5, 36);
   $15 = SAFE_HEAP_LOAD_f32_4_4($5, 20);
   $7 = SAFE_HEAP_LOAD_i32_4_4($5, 32);
   $16 = SAFE_HEAP_LOAD_f32_4_4($5, 16);
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
   $10 = SAFE_HEAP_LOAD_f32_4_4($5, 8);
   $2 = SAFE_HEAP_LOAD_f32_4_4($5, 12);
   $6 = SAFE_HEAP_LOAD_i32_4_4($1, 56);
   $5 = SAFE_HEAP_LOAD_i32_2_U_2($1, 40);
   SAFE_HEAP_STORE_i32_2_2($6, 6, $5);
   SAFE_HEAP_STORE_i32_2_2($6, 0, $5);
   SAFE_HEAP_STORE_i32_2_2($6, 10, $5 + 3 | 0);
   $0 = $5 + 2 | 0;
   SAFE_HEAP_STORE_i32_2_2($6, 8, $0);
   SAFE_HEAP_STORE_i32_2_2($6, 4, $0);
   SAFE_HEAP_STORE_i32_2_2($6, 2, $5 + 1 | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   $14 = Math_fround(Math_fround($2 * $8) + $12);
   SAFE_HEAP_STORE_f32_4_4($0, 4, $14);
   $10 = Math_fround(Math_fround($10 * $8) + $11);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $10);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
   SAFE_HEAP_STORE_i32_4_4($0 + 12 | 0, 0, $4);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   $2 = Math_fround(Math_fround($16 * $8) + $11);
   SAFE_HEAP_STORE_f32_4_4($0, 20, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 16, $9);
   SAFE_HEAP_STORE_f32_4_4($0 + 24 | 0, 0, $14);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   SAFE_HEAP_STORE_i32_4_4($0 + 32 | 0, 0, $4);
   SAFE_HEAP_STORE_i32_4_4($0 + 28 | 0, 0, $7);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   SAFE_HEAP_STORE_f32_4_4($0, 40, $2);
   $2 = Math_fround(Math_fround($15 * $8) + $12);
   SAFE_HEAP_STORE_f32_4_4($0 + 44 | 0, 0, $2);
   SAFE_HEAP_STORE_i32_4_4($0 + 36 | 0, 0, $9);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   SAFE_HEAP_STORE_i32_4_4($0 + 52 | 0, 0, $13);
   SAFE_HEAP_STORE_i32_4_4($0 + 48 | 0, 0, $7);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   SAFE_HEAP_STORE_f32_4_4($0, 60, $10);
   SAFE_HEAP_STORE_f32_4_4($0 - -64 | 0, 0, $2);
   SAFE_HEAP_STORE_i32_4_4($0 + 56 | 0, 0, $9);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   SAFE_HEAP_STORE_i32_4_4($0 + 72 | 0, 0, $13);
   SAFE_HEAP_STORE_i32_4_4($0 + 68 | 0, 0, $3);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
   SAFE_HEAP_STORE_i32_4_4($0 + 76 | 0, 0, $9);
   SAFE_HEAP_STORE_i32_4_4($1, 52, $0 + 80 | 0);
   SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40) + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($1, 56, SAFE_HEAP_LOAD_i32_4_4($1, 56) + 12 | 0);
  }
 }
 
 function ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4) {
  var $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0);
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $15 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  $7 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $10 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 12);
  $5 = Math_fround(Math_fround($10 * Math_fround(.4000000059604645)) * $4);
  label$1 : {
   label$2 : {
    switch ($3 | 0) {
    case 2:
     $5 = Math_fround(-$5);
    case 3:
     $11 = Math_fround($5 * Math_fround(.8659999966621399));
     $8 = Math_fround($5 * Math_fround(-.75));
     $12 = $8;
     $9 = Math_fround($5 * Math_fround(-.8659999966621399));
     $13 = Math_fround($5 * Math_fround(0.0));
     $14 = Math_fround($5 * Math_fround(.75));
     break label$1;
    case 0:
     $5 = Math_fround(-$5);
     break;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   $9 = Math_fround($5 * Math_fround(-.75));
   $11 = $9;
   $12 = Math_fround($5 * Math_fround(-.8659999966621399));
   $8 = Math_fround($5 * Math_fround(.8659999966621399));
   $13 = Math_fround($5 * Math_fround(.75));
   $14 = Math_fround($5 * Math_fround(0.0));
  }
  $5 = $7;
  $7 = Math_fround($10 * Math_fround(.5));
  $5 = Math_fround($5 + $7);
  SAFE_HEAP_STORE_f32_4_4($6, 24, Math_fround($5 + $13));
  $4 = Math_fround($15 + Math_fround($7 * $4));
  SAFE_HEAP_STORE_f32_4_4($6, 28, Math_fround($4 + $14));
  SAFE_HEAP_STORE_f32_4_4($6, 20, Math_fround($4 + $8));
  SAFE_HEAP_STORE_f32_4_4($6, 16, Math_fround($5 + $9));
  SAFE_HEAP_STORE_f32_4_4($6, 12, Math_fround($4 + $12));
  SAFE_HEAP_STORE_f32_4_4($6, 8, Math_fround($5 + $11));
  ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $6 + 24 | 0, $6 + 16 | 0, $6 + 8 | 0, $2);
  __stack_pointer = $6 + 32 | 0;
 }
 
 function ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($0, $1, $2) {
  var $3 = Math_fround(0);
  label$1 : {
   if ($2 >>> 0 < 16777216) {
    break label$1
   }
   $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 12) * Math_fround(.20000000298023224));
   if ($3 <= Math_fround(0.0)) {
    break label$1
   }
   ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $3, Math_fround(0.0), Math_fround(5.4977874755859375), 7);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $2);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
 }
 
 function ImGui__RenderCheckMark_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  $7 = Math_fround($3 / Math_fround(5.0));
  $7 = $7 >= Math_fround(1.0) ? $7 : Math_fround(1.0);
  $8 = Math_fround($7 * Math_fround(.25));
  $9 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
  SAFE_HEAP_STORE_f32_4_4($1, 0, $9);
  $6 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($1, 4));
  SAFE_HEAP_STORE_f32_4_4($1, 4, $6);
  $10 = Math_fround($3 - Math_fround($7 * Math_fround(.5)));
  $3 = Math_fround($10 / Math_fround(3.0));
  $8 = Math_fround($3 + $9);
  $11 = Math_fround($8 - $3);
  $9 = Math_fround(Math_fround($10 + $6) - Math_fround($3 * Math_fround(.5)));
  $6 = Math_fround($9 - $3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
  label$1 : {
   if (($1 | 0) != ($4 | 0)) {
    break label$1
   }
   $5 = $1 + 1 | 0;
   if ($4) {
    $1 = $4 + (($4 | 0) / 2 | 0) | 0
   } else {
    $1 = 8
   }
   $1 = ($1 | 0) > ($5 | 0) ? $1 : $5;
   if (($1 | 0) <= ($4 | 0)) {
    break label$1
   }
   $4 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
   if ($5) {
    __memcpy($4, $5, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 92, $4);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 4, $6);
  SAFE_HEAP_STORE_f32_4_4($1, 0, $11);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $4 = $1 + 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 84, $4);
  $5 = $4;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
  label$5 : {
   if (($5 | 0) != ($4 | 0)) {
    break label$5
   }
   $5 = $1 + 2 | 0;
   if ($4) {
    $1 = $4 + (($4 | 0) / 2 | 0) | 0
   } else {
    $1 = 8
   }
   $1 = ($1 | 0) > ($5 | 0) ? $1 : $5;
   if (($1 | 0) <= ($4 | 0)) {
    break label$5
   }
   $4 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
   if ($5) {
    __memcpy($4, $5, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 92, $4);
  }
  $6 = Math_fround(-$3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 4, $9);
  SAFE_HEAP_STORE_f32_4_4($1, 0, $8);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $4 = $1 + 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 84, $4);
  $5 = $4;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
  label$9 : {
   if (($5 | 0) != ($4 | 0)) {
    break label$9
   }
   $5 = $1 + 2 | 0;
   if ($4) {
    $1 = $4 + (($4 | 0) / 2 | 0) | 0
   } else {
    $1 = 8
   }
   $1 = ($1 | 0) > ($5 | 0) ? $1 : $5;
   if (($1 | 0) <= ($4 | 0)) {
    break label$9
   }
   $4 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
   if ($5) {
    __memcpy($4, $5, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 92, $4);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 4, Math_fround(Math_fround($6 + $6) + $9));
  SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround(Math_fround($3 + $3) + $8));
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
  ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 92), $1, $2, 0, $7);
  SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
 }
 
 function ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    switch ($3 | 0) {
    case 0:
     $6 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     $7 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
     $9 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
     SAFE_HEAP_STORE_f32_4_4($5, 12, Math_fround($7 - $9));
     $6 = Math_fround($8 + $6);
     SAFE_HEAP_STORE_f32_4_4($5, 8, $6);
     SAFE_HEAP_STORE_f32_4_4($5, 4, Math_fround($7 + $9));
     SAFE_HEAP_STORE_f32_4_4($5, 0, $6);
     ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $5 + 8 | 0, $5, $1, $4);
     break label$1;
    case 1:
     $6 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     $7 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
     $9 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
     SAFE_HEAP_STORE_f32_4_4($5, 12, Math_fround($7 + $9));
     $6 = Math_fround($8 - $6);
     SAFE_HEAP_STORE_f32_4_4($5, 8, $6);
     SAFE_HEAP_STORE_f32_4_4($5, 4, Math_fround($7 - $9));
     SAFE_HEAP_STORE_f32_4_4($5, 0, $6);
     ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $5 + 8 | 0, $5, $1, $4);
     break label$1;
    case 2:
     $6 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) + SAFE_HEAP_LOAD_f32_4_4($2, 4));
     SAFE_HEAP_STORE_f32_4_4($5, 12, $7);
     SAFE_HEAP_STORE_f32_4_4($5, 8, Math_fround($8 + $6));
     SAFE_HEAP_STORE_f32_4_4($5, 4, $7);
     SAFE_HEAP_STORE_f32_4_4($5, 0, Math_fround($8 - $6));
     ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $5 + 8 | 0, $5, $1, $4);
     break label$1;
    case 3:
     break label$2;
    default:
     break label$1;
    };
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) - SAFE_HEAP_LOAD_f32_4_4($2, 4));
   SAFE_HEAP_STORE_f32_4_4($5, 12, $7);
   SAFE_HEAP_STORE_f32_4_4($5, 8, Math_fround($8 - $6));
   SAFE_HEAP_STORE_f32_4_4($5, 4, $7);
   SAFE_HEAP_STORE_f32_4_4($5, 0, Math_fround($8 + $6));
   ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $5 + 8 | 0, $5, $1, $4);
  }
  __stack_pointer = $5 + 16 | 0;
 }
 
 function ImGui__RenderColorRectWithAlphaCheckerboard_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20float_2c_20ImVec2_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0);
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  $14 = $7 & 496 ? $7 : 240;
  label$1 : {
   if ($3 >>> 0 <= 4278190079) {
    $20 = ImGui__GetColorU32_28unsigned_20int_29(ImAlphaBlendColors_28unsigned_20int_2c_20unsigned_20int_29(-3355444, $3));
    $7 = ImGui__GetColorU32_28unsigned_20int_29(ImAlphaBlendColors_28unsigned_20int_2c_20unsigned_20int_29(-8355712, $3));
    ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $20, $6, $14);
    $15 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
    $8 = Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($5, 4));
    $12 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
    if (!($8 < $12)) {
     break label$1
    }
    $13 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $21 = Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($5, 0));
    $10 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    $3 = 0;
    while (1) {
     $1 = $3;
     $17 = Math_fround($8 + $4);
     $2 = $17 < $12;
     $18 = $2 ? $17 : $12;
     $19 = $8 < $15 ? $15 : $8 > $12 ? $12 : $8;
     label$4 : {
      if ($18 <= $19) {
       break label$4
      }
      $8 = Math_fround(Math_fround(Math_fround($1 & 1) * $4) + $21);
      if (!($10 > $8)) {
       break label$4
      }
      while (1) {
       $16 = $8 < $13 ? $13 : $8 > $10 ? $10 : $8;
       $11 = Math_fround($8 + $4);
       $11 = $10 > $11 ? $11 : $10;
       if (!($16 >= $11)) {
        $3 = 256;
        label$7 : {
         if (!($15 >= $19)) {
          break label$7
         }
         $3 = $13 >= $16 ? 272 : 256;
         if (!($10 <= $11)) {
          break label$7
         }
         $3 = $3 | 32;
        }
        label$9 : {
         if (!($12 <= $18)) {
          break label$9
         }
         $3 = $13 >= $16 ? $3 | 64 : $3;
         if (!($10 <= $11)) {
          break label$9
         }
         $3 = $3 | 128;
        }
        SAFE_HEAP_STORE_f32_4_4($9, 12, $19);
        SAFE_HEAP_STORE_f32_4_4($9, 8, $16);
        SAFE_HEAP_STORE_f32_4_4($9, 4, $18);
        SAFE_HEAP_STORE_f32_4_4($9, 0, $11);
        ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $9 + 8 | 0, $9, $7, $6, ($14 | 0) == 256 ? 256 : ($3 | 0) == 256 ? 256 : $3 & $14);
       }
       $8 = Math_fround(Math_fround($4 + $4) + $8);
       if ($10 > $8) {
        continue
       }
       break;
      };
     }
     $3 = $1 + 1 | 0;
     $8 = $17;
     if ($2) {
      continue
     }
     break;
    };
    break label$1;
   }
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $6, $14);
  }
  __stack_pointer = $9 + 16 | 0;
 }
 
 function stbtt__run_charstring_28stbtt_fontinfo_20const__2c_20int_2c_20stbtt__csctx__29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = 0, $41 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $6 = __stack_pointer - 464 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i32_4_4($6 + 104 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($0 + 96 | 0, 0));
  SAFE_HEAP_STORE_i64_8_8($6, 96, SAFE_HEAP_LOAD_i64_8_4($0, 88), i64toi32_i32$HIGH_BITS);
  $3 = $6 - -64 | 0;
  SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($0 + 72 | 0, 0));
  SAFE_HEAP_STORE_i64_8_8($6, 64, SAFE_HEAP_LOAD_i64_8_4($0, 64), i64toi32_i32$HIGH_BITS);
  stbtt__cff_index_get_28stbtt__buf_2c_20int_29($6 + 80 | 0, $3, $1);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 84);
  $5 = SAFE_HEAP_LOAD_i32_4_4($6, 88);
  label$1 : {
   if (($4 | 0) >= ($5 | 0)) {
    break label$1
   }
   $40 = $0 + 76 | 0;
   $32 = $0 + 100 | 0;
   $33 = $0 + 52 | 0;
   $8 = 1;
   $3 = 0;
   while (1) {
    $14 = $3;
    $26 = $12;
    $34 = $8;
    $15 = $5;
    $3 = $4;
    SAFE_HEAP_STORE_i32_4_4($6, 84, $3 + 1 | 0);
    $13 = $7;
    $4 = $7;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : {
                     label$20 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         label$24 : {
                          label$25 : {
                           label$26 : {
                            label$27 : {
                             label$28 : {
                              label$29 : {
                               label$30 : {
                                label$31 : {
                                 label$32 : {
                                  label$33 : {
                                   $24 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($6, 80) + $3 | 0, 0);
                                   switch ($24 - 1 | 0) {
                                   case 27:
                                    break label$12;
                                   case 254:
                                    break label$13;
                                   case 11:
                                    break label$15;
                                   case 13:
                                    break label$16;
                                   case 10:
                                    break label$17;
                                   case 28:
                                    break label$18;
                                   case 9:
                                    break label$19;
                                   case 25:
                                   case 26:
                                    break label$20;
                                   case 24:
                                    break label$21;
                                   case 23:
                                    break label$22;
                                   case 7:
                                    break label$23;
                                   case 29:
                                    break label$24;
                                   case 30:
                                    break label$25;
                                   case 5:
                                    break label$26;
                                   case 6:
                                    break label$27;
                                   case 4:
                                    break label$28;
                                   case 21:
                                    break label$29;
                                   case 3:
                                    break label$30;
                                   case 20:
                                    break label$31;
                                   case 0:
                                   case 2:
                                   case 17:
                                   case 22:
                                    break label$32;
                                   case 18:
                                   case 19:
                                    break label$33;
                                   default:
                                    break label$14;
                                   };
                                  }
                                  $3 = SAFE_HEAP_LOAD_i32_4_4($6, 84);
                                  if ($34) {
                                   $9 = (($9 | 0) / 2 | 0) + $26 | 0
                                  } else {
                                   $9 = $26
                                  }
                                  $3 = $3 + (($9 + 7 | 0) / 8 | 0) | 0;
                                  SAFE_HEAP_STORE_i32_4_4($6, 84, ($3 | 0) < 0 ? $15 : ($3 | 0) > ($15 | 0) ? $15 : $3);
                                  $3 = $14;
                                  $4 = 0;
                                  $12 = $9;
                                  $8 = 0;
                                  break label$3;
                                 }
                                 $3 = $14;
                                 $4 = 0;
                                 $12 = (($9 | 0) / 2 | 0) + $26 | 0;
                                 break label$4;
                                }
                                if (($9 | 0) < 2) {
                                 $8 = 0;
                                 break label$1;
                                }
                                $3 = ($6 + 240 | 0) + ($9 << 2) | 0;
                                stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($2, SAFE_HEAP_LOAD_f32_4_4($3 - 8 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 - 4 | 0, 0));
                                $3 = $14;
                                $4 = 0;
                                $8 = 0;
                                break label$3;
                               }
                               if (($9 | 0) <= 0) {
                                $8 = 0;
                                break label$1;
                               }
                               stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($2, Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4(($6 + ($9 << 2) | 0) + 236 | 0, 0));
                               $3 = $14;
                               $4 = 0;
                               $8 = 0;
                               break label$3;
                              }
                              if (($9 | 0) <= 0) {
                               $8 = 0;
                               break label$1;
                              }
                              stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($2, SAFE_HEAP_LOAD_f32_4_4(($6 + ($9 << 2) | 0) + 236 | 0, 0), Math_fround(0.0));
                              $3 = $14;
                              $4 = 0;
                              $8 = 0;
                              break label$3;
                             }
                             $5 = 1;
                             $4 = 0;
                             $8 = 0;
                             if (($9 | 0) < 2) {
                              break label$1
                             }
                             while (1) {
                              $3 = $6 + 240 | 0;
                              $10 = SAFE_HEAP_LOAD_f32_4_4($3 + ($5 << 2) | 0, 0);
                              $5 = $3;
                              $3 = $4;
                              $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + ($3 << 2) | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($2, 16));
                              SAFE_HEAP_STORE_f32_4_4($2, 16, $11);
                              $10 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 20));
                              SAFE_HEAP_STORE_f32_4_4($2, 20, $10);
                              if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
                               $5 = ~~$10
                              } else {
                               $5 = -2147483648
                              }
                              if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                               $4 = ~~$11
                              } else {
                               $4 = -2147483648
                              }
                              label$44 : {
                               if (SAFE_HEAP_LOAD_i32_4_4($2, 0)) {
                                label$46 : {
                                 if ((SAFE_HEAP_LOAD_i32_4_4($2, 28) | 0) >= ($4 | 0)) {
                                  if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                                   break label$46
                                  }
                                 }
                                 SAFE_HEAP_STORE_i32_4_4($2, 28, $4);
                                }
                                label$48 : {
                                 if ((SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0) >= ($5 | 0)) {
                                  if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                                   break label$48
                                  }
                                 }
                                 SAFE_HEAP_STORE_i32_4_4($2, 36, $5);
                                }
                                label$50 : {
                                 if ((SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0) <= ($4 | 0)) {
                                  if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                                   break label$50
                                  }
                                 }
                                 SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
                                }
                                label$52 : {
                                 if ((SAFE_HEAP_LOAD_i32_4_4($2, 32) | 0) <= ($5 | 0)) {
                                  if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                                   break label$52
                                  }
                                 }
                                 SAFE_HEAP_STORE_i32_4_4($2, 32, $5);
                                }
                                SAFE_HEAP_STORE_i32_4_4($2, 4, 1);
                                break label$44;
                               }
                               $7 = SAFE_HEAP_LOAD_i32_4_4($2, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 44), 14) | 0;
                               SAFE_HEAP_STORE_i64_8_2($7, 4);
                               SAFE_HEAP_STORE_i32_2_2($7, 2, $5);
                               SAFE_HEAP_STORE_i32_2_2($7, 0, $4);
                               SAFE_HEAP_STORE_i32_1_1($7, 12, 2);
                              }
                              SAFE_HEAP_STORE_i32_4_4($2, 44, SAFE_HEAP_LOAD_i32_4_4($2, 44) + 1 | 0);
                              $4 = $3 + 2 | 0;
                              $5 = $4 | 1;
                              if (($5 | 0) < ($9 | 0)) {
                               continue
                              }
                              break;
                             };
                             $3 = $14;
                             $7 = $13;
                             $4 = 0;
                             break label$5;
                            }
                            $30 = $9;
                            $27 = 0;
                            $8 = 0;
                            if (($9 | 0) > 0) {
                             break label$10
                            }
                            break label$1;
                           }
                           $31 = $9;
                           $28 = 0;
                           $8 = 0;
                           if (($9 | 0) <= 0) {
                            break label$1
                           }
                           $9 = 0;
                           break label$7;
                          }
                          $35 = 0;
                          $8 = 0;
                          if (($9 | 0) >= 4) {
                           break label$9
                          }
                          break label$1;
                         }
                         $36 = 0;
                         $8 = 0;
                         if (($9 | 0) < 4) {
                          break label$1
                         }
                         $5 = 0;
                         break label$8;
                        }
                        $8 = 5;
                        $5 = 0;
                        if (($9 | 0) < 6) {
                         $8 = 0;
                         break label$1;
                        }
                        while (1) {
                         $7 = $6 + 240 | 0;
                         $4 = $5 << 2;
                         $3 = $7 + $4 | 0;
                         stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, SAFE_HEAP_LOAD_f32_4_4($3, 0), SAFE_HEAP_LOAD_f32_4_4(($4 | 4) + $7 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 8 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 12 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0), SAFE_HEAP_LOAD_f32_4_4(($8 << 2) + $7 | 0, 0));
                         $3 = $5 + 11 | 0;
                         $8 = $3;
                         $5 = $5 + 6 | 0;
                         if (($3 | 0) < ($9 | 0)) {
                          continue
                         }
                         break;
                        };
                        $3 = $14;
                        $7 = $13;
                        $4 = 0;
                        break label$5;
                       }
                       if (($9 | 0) < 8) {
                        $8 = 0;
                        break label$1;
                       }
                       $4 = $9 - 2 | 0;
                       $8 = 5;
                       $5 = 0;
                       while (1) {
                        $12 = $6 + 240 | 0;
                        $7 = $5 << 2;
                        $3 = $12 + $7 | 0;
                        stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, SAFE_HEAP_LOAD_f32_4_4($3, 0), SAFE_HEAP_LOAD_f32_4_4(($7 | 4) + $12 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 8 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 12 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0), SAFE_HEAP_LOAD_f32_4_4(($8 << 2) + $12 | 0, 0));
                        $7 = $5 + 11 | 0;
                        $8 = $7;
                        $3 = $5 + 6 | 0;
                        $5 = $3;
                        if (($4 | 0) > ($7 | 0)) {
                         continue
                        }
                        break;
                       };
                       $4 = $3 | 1;
                       if (($9 | 0) <= ($4 | 0)) {
                        $8 = 0;
                        break label$1;
                       }
                       $7 = $6 + 240 | 0;
                       $10 = SAFE_HEAP_LOAD_f32_4_4($7 + ($4 << 2) | 0, 0);
                       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4(($3 << 2) + $7 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($2, 16));
                       SAFE_HEAP_STORE_f32_4_4($2, 16, $11);
                       $10 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 20));
                       SAFE_HEAP_STORE_f32_4_4($2, 20, $10);
                       if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
                        $9 = ~~$10
                       } else {
                        $9 = -2147483648
                       }
                       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                        $5 = ~~$11
                       } else {
                        $5 = -2147483648
                       }
                       label$63 : {
                        if (SAFE_HEAP_LOAD_i32_4_4($2, 0)) {
                         label$65 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 28) | 0) >= ($5 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$65
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 28, $5);
                         }
                         label$67 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0) >= ($9 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$67
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 36, $9);
                         }
                         label$69 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0) <= ($5 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$69
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 24, $5);
                         }
                         label$71 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 32) | 0) <= ($9 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$71
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 32, $9);
                         }
                         SAFE_HEAP_STORE_i32_4_4($2, 4, 1);
                         break label$63;
                        }
                        $3 = SAFE_HEAP_LOAD_i32_4_4($2, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 44), 14) | 0;
                        SAFE_HEAP_STORE_i64_8_2($3, 4);
                        SAFE_HEAP_STORE_i32_2_2($3, 2, $9);
                        SAFE_HEAP_STORE_i32_2_2($3, 0, $5);
                        SAFE_HEAP_STORE_i32_1_1($3, 12, 2);
                       }
                       SAFE_HEAP_STORE_i32_4_4($2, 44, SAFE_HEAP_LOAD_i32_4_4($2, 44) + 1 | 0);
                       $3 = $14;
                       $7 = $13;
                       $4 = 0;
                       break label$5;
                      }
                      if (($9 | 0) < 8) {
                       $8 = 0;
                       break label$1;
                      }
                      $12 = $9 - 6 | 0;
                      $5 = 1;
                      $4 = 0;
                      while (1) {
                       $3 = $6 + 240 | 0;
                       $10 = SAFE_HEAP_LOAD_f32_4_4($3 + ($5 << 2) | 0, 0);
                       $5 = $3;
                       $3 = $4;
                       $8 = $3 << 2;
                       $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + $8 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($2, 16));
                       SAFE_HEAP_STORE_f32_4_4($2, 16, $11);
                       $10 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 20));
                       SAFE_HEAP_STORE_f32_4_4($2, 20, $10);
                       if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
                        $5 = ~~$10
                       } else {
                        $5 = -2147483648
                       }
                       if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                        $4 = ~~$11
                       } else {
                        $4 = -2147483648
                       }
                       label$79 : {
                        if (SAFE_HEAP_LOAD_i32_4_4($2, 0)) {
                         label$81 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 28) | 0) >= ($4 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$81
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 28, $4);
                         }
                         label$83 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0) >= ($5 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$83
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 36, $5);
                         }
                         label$85 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0) <= ($4 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$85
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
                         }
                         label$87 : {
                          if ((SAFE_HEAP_LOAD_i32_4_4($2, 32) | 0) <= ($5 | 0)) {
                           if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
                            break label$87
                           }
                          }
                          SAFE_HEAP_STORE_i32_4_4($2, 32, $5);
                         }
                         SAFE_HEAP_STORE_i32_4_4($2, 4, 1);
                         break label$79;
                        }
                        $7 = SAFE_HEAP_LOAD_i32_4_4($2, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 44), 14) | 0;
                        SAFE_HEAP_STORE_i64_8_2($7, 4);
                        SAFE_HEAP_STORE_i32_2_2($7, 2, $5);
                        SAFE_HEAP_STORE_i32_2_2($7, 0, $4);
                        SAFE_HEAP_STORE_i32_1_1($7, 12, 2);
                       }
                       SAFE_HEAP_STORE_i32_4_4($2, 44, SAFE_HEAP_LOAD_i32_4_4($2, 44) + 1 | 0);
                       $4 = $3 + 2 | 0;
                       $7 = $4 | 1;
                       $5 = $7;
                       if (($12 | 0) > ($5 | 0)) {
                        continue
                       }
                       break;
                      };
                      $5 = $3 + 7 | 0;
                      if (($9 | 0) <= ($5 | 0)) {
                       $8 = 0;
                       break label$1;
                      }
                      $12 = $6 + 240 | 0;
                      $3 = $8 + $12 | 0;
                      stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, SAFE_HEAP_LOAD_f32_4_4($12 + ($4 << 2) | 0, 0), SAFE_HEAP_LOAD_f32_4_4(($7 << 2) + $12 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 20 | 0, 0), SAFE_HEAP_LOAD_f32_4_4($3 + 24 | 0, 0), SAFE_HEAP_LOAD_f32_4_4(($5 << 2) + $12 | 0, 0));
                      $3 = $14;
                      $7 = $13;
                      $4 = 0;
                      break label$5;
                     }
                     if (($9 | 0) < 4) {
                      $8 = 0;
                      break label$1;
                     }
                     $5 = $9 & 1;
                     $4 = $5 + 3 | 0;
                     if (($4 | 0) >= ($9 | 0)) {
                      break label$6
                     }
                     $11 = (wasm2js_f32$0 = SAFE_HEAP_LOAD_f32_4_4($6, 240), wasm2js_f32$1 = Math_fround(0.0), wasm2js_i32$0 = $5, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                     while (1) {
                      $3 = $6 + 240 | 0;
                      $10 = SAFE_HEAP_LOAD_f32_4_4($3 + ($4 << 2) | 0, 0);
                      $3 = ($5 << 2) + $3 | 0;
                      $18 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
                      $17 = SAFE_HEAP_LOAD_f32_4_4($3 + 8 | 0, 0);
                      $19 = SAFE_HEAP_LOAD_f32_4_4($3 + 4 | 0, 0);
                      label$92 : {
                       if (($24 | 0) == 27) {
                        stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $18, $11, $19, $17, $10, Math_fround(0.0));
                        break label$92;
                       }
                       stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $11, $18, $19, $17, Math_fround(0.0), $10);
                      }
                      $4 = $5 + 7 | 0;
                      $11 = Math_fround(0.0);
                      $5 = $5 + 4 | 0;
                      if (($4 | 0) < ($9 | 0)) {
                       continue
                      }
                      break;
                     };
                     break label$6;
                    }
                    label$94 : {
                     if ($13) {
                      break label$94
                     }
                     $16 = SAFE_HEAP_LOAD_i32_4_4($0, 120);
                     if (!$16) {
                      break label$94
                     }
                     $3 = $16 & $16 >> 31;
                     $21 = SAFE_HEAP_LOAD_i32_4_4($0, 112);
                     label$95 : {
                      if (($16 | 0) <= 0) {
                       $8 = 0;
                       break label$95;
                      }
                      $8 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $21 | 0, 0);
                      $3 = $3 + 1 | 0;
                     }
                     $4 = $3;
                     $3 = $4;
                     $13 = $3;
                     $12 = 0;
                     $15 = 0;
                     $5 = -1;
                     label$97 : {
                      label$98 : {
                       switch ($8 & 255) {
                       case 0:
                        $5 = 0;
                        $3 = $1 + $4 | 0;
                        $3 = ($3 | 0) < 0 ? $16 : ($3 | 0) > ($16 | 0) ? $16 : $3;
                        if (($3 | 0) >= ($16 | 0)) {
                         break label$97
                        }
                        $5 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $21 | 0, 0);
                        break label$97;
                       case 3:
                        break label$98;
                       default:
                        break label$97;
                       };
                      }
                      while (1) {
                       $7 = $3;
                       $4 = $15 << 8;
                       $3 = $13;
                       label$101 : {
                        if (($16 | 0) <= ($3 | 0)) {
                         $15 = 0;
                         break label$101;
                        }
                        $15 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $21 | 0, 0);
                        $7 = $3 + 1 | 0;
                        $3 = $7;
                       }
                       $13 = $3;
                       $23 = $4 | $15 & 255;
                       $15 = $23;
                       $5 = $7;
                       $3 = $5;
                       $4 = $3;
                       $8 = 0;
                       $7 = 0;
                       $12 = $12 + 1 | 0;
                       if (($12 | 0) != 2) {
                        continue
                       }
                       break;
                      };
                      while (1) {
                       $7 = $7 << 8;
                       label$104 : {
                        if (($5 | 0) >= ($16 | 0)) {
                         $13 = 0;
                         $3 = $5;
                         break label$104;
                        }
                        $13 = SAFE_HEAP_LOAD_i32_1_U_1($5 + $21 | 0, 0);
                        $4 = $5 + 1 | 0;
                        $3 = $4;
                       }
                       $12 = $4;
                       $5 = $3;
                       $3 = $7 | $13 & 255;
                       $7 = $3;
                       $8 = $8 + 1 | 0;
                       if (($8 | 0) != 2) {
                        continue
                       }
                       break;
                      };
                      $5 = 0;
                      $4 = $3;
                      $8 = $12;
                      if (($23 | 0) <= 0) {
                       $5 = -1;
                       break label$97;
                      }
                      label$107 : {
                       while (1) {
                        $12 = $4;
                        $15 = $5;
                        label$109 : {
                         if (($8 | 0) >= ($16 | 0)) {
                          $5 = 0;
                          $4 = $8;
                          break label$109;
                         }
                         $5 = SAFE_HEAP_LOAD_i32_1_U_1($8 + $21 | 0, 0);
                         $4 = $8 + 1 | 0;
                        }
                        $25 = $5;
                        $5 = $4;
                        $8 = 0;
                        $7 = 0;
                        while (1) {
                         $41 = $7 << 8;
                         $7 = $4;
                         label$112 : {
                          if (($16 | 0) <= ($4 | 0)) {
                           $4 = $5;
                           $13 = 0;
                           $3 = $7;
                           break label$112;
                          }
                          $13 = SAFE_HEAP_LOAD_i32_1_U_1($7 + $21 | 0, 0);
                          $4 = $7 + 1 | 0;
                          $3 = $4;
                         }
                         $5 = $4;
                         $4 = $3;
                         $3 = $41 | $13 & 255;
                         $7 = $3;
                         $8 = $8 + 1 | 0;
                         if (($8 | 0) != 2) {
                          continue
                         }
                         break;
                        };
                        if (($1 | 0) < ($3 | 0) & ($1 | 0) >= ($12 | 0)) {
                         break label$107
                        }
                        $4 = $3;
                        $8 = $5;
                        $5 = $15 + 1 | 0;
                        if (($23 | 0) != ($5 | 0)) {
                         continue
                        }
                        break;
                       };
                       $5 = -1;
                       break label$97;
                      }
                      $5 = $25 & 255;
                     }
                     $3 = $6 + 456 | 0;
                     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($33 + 8 | 0, 0));
                     SAFE_HEAP_STORE_i64_8_8($6, 448, SAFE_HEAP_LOAD_i64_8_4($33, 0), i64toi32_i32$HIGH_BITS);
                     $7 = $6 + 48 | 0;
                     SAFE_HEAP_STORE_i32_4_4($7 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($32 + 8 | 0, 0));
                     SAFE_HEAP_STORE_i64_8_8($6, 48, SAFE_HEAP_LOAD_i64_8_4($32, 0), i64toi32_i32$HIGH_BITS);
                     $13 = $6 + 436 | 0;
                     stbtt__cff_index_get_28stbtt__buf_2c_20int_29($13, $7, $5);
                     $7 = $6 + 32 | 0;
                     SAFE_HEAP_STORE_i32_4_4($7 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0));
                     $3 = $6 + 16 | 0;
                     SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($13 + 8 | 0, 0));
                     SAFE_HEAP_STORE_i64_8_8($6, 32, SAFE_HEAP_LOAD_i64_8_8($6, 448), i64toi32_i32$HIGH_BITS);
                     SAFE_HEAP_STORE_i64_8_8($6, 16, SAFE_HEAP_LOAD_i64_8_4($6, 436), i64toi32_i32$HIGH_BITS);
                     stbtt__get_subrs_28stbtt__buf_2c_20stbtt__buf_29($6 + 96 | 0, $7, $3);
                    }
                    $4 = 1;
                   }
                   $13 = $4;
                   if (($9 | 0) <= 0) {
                    $8 = 0;
                    break label$1;
                   }
                   $8 = 0;
                   if (($14 | 0) > 9) {
                    break label$1
                   }
                   $15 = $9 - 1 | 0;
                   $11 = SAFE_HEAP_LOAD_f32_4_4(($6 + 240 | 0) + ($15 << 2) | 0, 0);
                   $3 = ($6 + 112 | 0) + Math_imul($14, 12) | 0;
                   $21 = $6 + 88 | 0;
                   SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($21, 0));
                   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_8($6, 80), i64toi32_i32$HIGH_BITS);
                   $23 = $6 + 456 | 0;
                   $3 = ($24 | 0) == 10 ? $6 + 96 | 0 : $40;
                   $16 = SAFE_HEAP_LOAD_i32_4_4($3 + 8 | 0, 0);
                   SAFE_HEAP_STORE_i32_4_4($23, 0, $16);
                   $3 = SAFE_HEAP_LOAD_i64_8_4($3, 0);
                   SAFE_HEAP_STORE_i64_8_8($6, 448, $3, i64toi32_i32$HIGH_BITS);
                   $5 = $16 & $16 >> 31;
                   SAFE_HEAP_STORE_i32_4_4($6, 452, $5);
                   $25 = $3;
                   $9 = $5;
                   $4 = 0;
                   while (1) {
                    $8 = $8 << 8;
                    $3 = $5;
                    label$117 : {
                     if (($3 | 0) >= ($16 | 0)) {
                      $5 = $9;
                      $12 = $3;
                      $7 = 0;
                      break label$117;
                     }
                     $5 = $3 + 1 | 0;
                     $12 = $5;
                     $7 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $25 | 0, 0);
                    }
                    $3 = $5;
                    $9 = $3;
                    $5 = $12;
                    $7 = $8 | $7 & 255;
                    $8 = $7;
                    $4 = $4 + 1 | 0;
                    if (($4 | 0) != 2) {
                     continue
                    }
                    break;
                   };
                   SAFE_HEAP_STORE_i32_4_4($6, 452, $3);
                   $3 = ($7 | 0) > 33899 ? 32768 : ($7 | 0) > 1239 ? 1131 : 107;
                   if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
                    $4 = ~~$11
                   } else {
                    $4 = -2147483648
                   }
                   $3 = $4 + $3 | 0;
                   label$121 : {
                    if (!(($3 | 0) >= 0 & ($3 | 0) < ($7 | 0))) {
                     SAFE_HEAP_STORE_i32_4_4($6, 444, 0);
                     SAFE_HEAP_STORE_i64_8_4($6, 436, 0, 0);
                     break label$121;
                    }
                    SAFE_HEAP_STORE_i32_4_4($6 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($23, 0));
                    SAFE_HEAP_STORE_i64_8_8($6, 0, SAFE_HEAP_LOAD_i64_8_8($6, 448), i64toi32_i32$HIGH_BITS);
                    stbtt__cff_index_get_28stbtt__buf_2c_20int_29($6 + 436 | 0, $6, $3);
                   }
                   $3 = SAFE_HEAP_LOAD_i32_4_4($6 + 444 | 0, 0);
                   SAFE_HEAP_STORE_i32_4_4($21, 0, $3);
                   SAFE_HEAP_STORE_i64_8_8($6, 80, SAFE_HEAP_LOAD_i64_8_4($6, 436), i64toi32_i32$HIGH_BITS);
                   if (!$3) {
                    $8 = 0;
                    break label$1;
                   }
                   SAFE_HEAP_STORE_i32_4_4($6, 84, 0);
                   $3 = $14 + 1 | 0;
                   $7 = $13;
                   $4 = $15;
                   break label$5;
                  }
                  if (($14 | 0) <= 0) {
                   $8 = 0;
                   break label$1;
                  }
                  $3 = $14 - 1 | 0;
                  $4 = ($6 + 112 | 0) + Math_imul($3, 12) | 0;
                  SAFE_HEAP_STORE_i32_4_4($6 + 88 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($4 + 8 | 0, 0));
                  SAFE_HEAP_STORE_i64_8_8($6, 80, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
                  $4 = $9;
                  break label$5;
                 }
                 stbtt__csctx_close_shape_28stbtt__csctx__29($2);
                 $8 = 1;
                 break label$1;
                }
                $5 = 0;
                $8 = 0;
                label$127 : {
                 label$128 : {
                  label$129 : {
                   label$130 : {
                    $3 = SAFE_HEAP_LOAD_i32_4_4($6, 84);
                    if (($15 | 0) > ($3 | 0)) {
                     SAFE_HEAP_STORE_i32_4_4($6, 84, $3 + 1 | 0);
                     $5 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($6, 80) + $3 | 0, 0);
                    }
                    switch (($5 & 255) - 34 | 0) {
                    case 3:
                     break label$127;
                    case 2:
                     break label$128;
                    case 1:
                     break label$129;
                    case 0:
                     break label$130;
                    default:
                     break label$1;
                    };
                   }
                   if (($9 | 0) < 7) {
                    break label$1
                   }
                   $11 = SAFE_HEAP_LOAD_f32_4_4($6, 264);
                   $10 = SAFE_HEAP_LOAD_f32_4_4($6, 260);
                   $18 = SAFE_HEAP_LOAD_f32_4_4($6, 256);
                   $19 = SAFE_HEAP_LOAD_f32_4_4($6, 240);
                   $20 = SAFE_HEAP_LOAD_f32_4_4($6, 244);
                   $17 = SAFE_HEAP_LOAD_f32_4_4($6, 248);
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $19, Math_fround(0.0), $20, $17, SAFE_HEAP_LOAD_f32_4_4($6, 252), Math_fround(0.0));
                   stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $18, Math_fround(0.0), $10, Math_fround(-$17), $11, Math_fround(0.0));
                   $3 = $14;
                   $4 = 0;
                   break label$5;
                  }
                  if (($9 | 0) < 13) {
                   break label$1
                  }
                  $11 = SAFE_HEAP_LOAD_f32_4_4($6, 284);
                  $10 = SAFE_HEAP_LOAD_f32_4_4($6, 280);
                  $18 = SAFE_HEAP_LOAD_f32_4_4($6, 276);
                  $17 = SAFE_HEAP_LOAD_f32_4_4($6, 272);
                  $19 = SAFE_HEAP_LOAD_f32_4_4($6, 268);
                  $20 = SAFE_HEAP_LOAD_f32_4_4($6, 264);
                  stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, SAFE_HEAP_LOAD_f32_4_4($6, 240), SAFE_HEAP_LOAD_f32_4_4($6, 244), SAFE_HEAP_LOAD_f32_4_4($6, 248), SAFE_HEAP_LOAD_f32_4_4($6, 252), SAFE_HEAP_LOAD_f32_4_4($6, 256), SAFE_HEAP_LOAD_f32_4_4($6, 260));
                  stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $20, $19, $17, $18, $10, $11);
                  $3 = $14;
                  $4 = 0;
                  break label$5;
                 }
                 if (($9 | 0) < 9) {
                  break label$1
                 }
                 $10 = SAFE_HEAP_LOAD_f32_4_4($6, 272);
                 $18 = SAFE_HEAP_LOAD_f32_4_4($6, 264);
                 $17 = SAFE_HEAP_LOAD_f32_4_4($6, 260);
                 $11 = SAFE_HEAP_LOAD_f32_4_4($6, 268);
                 $22 = SAFE_HEAP_LOAD_f32_4_4($6, 240);
                 $19 = SAFE_HEAP_LOAD_f32_4_4($6, 244);
                 $29 = SAFE_HEAP_LOAD_f32_4_4($6, 248);
                 $20 = SAFE_HEAP_LOAD_f32_4_4($6, 252);
                 stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $22, $19, $29, $20, SAFE_HEAP_LOAD_f32_4_4($6, 256), Math_fround(0.0));
                 stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $17, Math_fround(0.0), $18, $11, $10, Math_fround(-Math_fround($11 + Math_fround($19 + $20))));
                 $3 = $14;
                 $4 = 0;
                 break label$5;
                }
                if (($9 | 0) < 11) {
                 break label$1
                }
                $11 = SAFE_HEAP_LOAD_f32_4_4($6, 280);
                $10 = SAFE_HEAP_LOAD_f32_4_4($6, 272);
                $18 = SAFE_HEAP_LOAD_f32_4_4($6, 264);
                $17 = SAFE_HEAP_LOAD_f32_4_4($6, 276);
                $19 = SAFE_HEAP_LOAD_f32_4_4($6, 268);
                $20 = SAFE_HEAP_LOAD_f32_4_4($6, 240);
                $22 = SAFE_HEAP_LOAD_f32_4_4($6, 244);
                $29 = SAFE_HEAP_LOAD_f32_4_4($6, 248);
                $37 = SAFE_HEAP_LOAD_f32_4_4($6, 252);
                $38 = SAFE_HEAP_LOAD_f32_4_4($6, 256);
                $39 = SAFE_HEAP_LOAD_f32_4_4($6, 260);
                stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $20, $22, $29, $37, $38, $39);
                $20 = Math_fround($10 + Math_fround($18 + Math_fround($38 + Math_fround($20 + $29))));
                $22 = Math_fround($17 + Math_fround($19 + Math_fround($39 + Math_fround($22 + $37))));
                $3 = Math_fround(Math_abs($20)) > Math_fround(Math_abs($22));
                stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $18, $19, $10, $17, $3 ? $11 : Math_fround(-$20), $3 ? Math_fround(-$22) : $11);
                $3 = $14;
                $4 = 0;
                break label$5;
               }
               if ($24 >>> 0 < 32) {
                $8 = 0;
                break label$1;
               }
               if (($24 | 0) != 255) {
                break label$12
               }
              }
              $25 = SAFE_HEAP_LOAD_i32_4_4($6, 80);
              $5 = SAFE_HEAP_LOAD_i32_4_4($6, 84);
              $4 = $5;
              $8 = 0;
              $12 = 0;
              while (1) {
               $12 = $12 << 8;
               $3 = $4;
               label$133 : {
                if (($15 | 0) <= ($3 | 0)) {
                 $4 = $5;
                 $7 = $3;
                 $3 = 0;
                 break label$133;
                }
                $4 = $3 + 1 | 0;
                $7 = $4;
                $3 = SAFE_HEAP_LOAD_i32_1_U_1($3 + $25 | 0, 0);
               }
               $5 = $4;
               $4 = $7;
               $3 = $12 | $3 & 255;
               $12 = $3;
               $8 = $8 + 1 | 0;
               if (($8 | 0) != 4) {
                continue
               }
               break;
              };
              SAFE_HEAP_STORE_i32_4_4($6, 84, $5);
              $11 = Math_fround(Math_fround($3 | 0) * Math_fround(.0000152587890625));
              break label$11;
             }
             $3 = SAFE_HEAP_LOAD_i32_4_4($6, 84);
             $4 = $3 - 1 | 0;
             SAFE_HEAP_STORE_i32_4_4($6, 84, ($3 | 0) <= 0 ? $15 : ($4 | 0) > ($15 | 0) ? $15 : $4);
             $11 = Math_fround(stbtt__cff_int_28stbtt__buf__29($6 + 80 | 0) << 16 >> 16);
            }
            if (($9 | 0) > 47) {
             $8 = 0;
             break label$1;
            }
            SAFE_HEAP_STORE_f32_4_4(($6 + 240 | 0) + ($9 << 2) | 0, 0, $11);
            $3 = $14;
            $7 = $13;
            $4 = $9 + 1 | 0;
            break label$5;
           }
           $9 = 1;
           break label$7;
          }
          $5 = 1;
         }
         while (1) {
          if (!$5) {
           $3 = $36;
           $4 = $3 + 3 | 0;
           if (($9 | 0) <= ($4 | 0)) {
            $3 = $14;
            $7 = $13;
            $4 = 0;
            break label$5;
           }
           $7 = $6 + 240 | 0;
           $10 = SAFE_HEAP_LOAD_f32_4_4($7 + ($4 << 2) | 0, 0);
           $4 = $7;
           $7 = $3 << 2;
           $4 = $4 + $7 | 0;
           $18 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
           $17 = SAFE_HEAP_LOAD_f32_4_4($4 + 8 | 0, 0);
           $11 = Math_fround(0.0);
           $19 = SAFE_HEAP_LOAD_f32_4_4($4 + 4 | 0, 0);
           if (($9 - $3 | 0) == 5) {
            $11 = SAFE_HEAP_LOAD_f32_4_4(($7 + $6 | 0) + 256 | 0, 0)
           }
           stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, Math_fround(0.0), $18, $19, $17, $10, $11);
           $35 = $3 + 4 | 0;
           $5 = 1;
           continue;
          }
          $3 = $35;
          $7 = $3 + 3 | 0;
          if (($9 | 0) <= ($7 | 0)) {
           $3 = $14;
           $7 = $13;
           $4 = 0;
           break label$5;
          } else {
           $5 = $3 << 2;
           $4 = $5 + ($6 + 240 | 0) | 0;
           $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
           $18 = SAFE_HEAP_LOAD_f32_4_4($4 + 8 | 0, 0);
           $11 = Math_fround(0.0);
           $17 = SAFE_HEAP_LOAD_f32_4_4($4 + 4 | 0, 0);
           if (($9 - $3 | 0) == 5) {
            $11 = SAFE_HEAP_LOAD_f32_4_4(($5 + $6 | 0) + 256 | 0, 0)
           }
           stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($2, $10, Math_fround(0.0), $17, $18, $11, SAFE_HEAP_LOAD_f32_4_4(($6 + 240 | 0) + ($7 << 2) | 0, 0));
           $36 = $3 + 4 | 0;
           $5 = 0;
           continue;
          }
         };
        }
        while (1) {
         if (!$9) {
          if (($28 | 0) >= ($31 | 0)) {
           $3 = $14;
           $7 = $13;
           $4 = 0;
           break label$5;
          }
          $10 = SAFE_HEAP_LOAD_f32_4_4(($6 + 240 | 0) + ($28 << 2) | 0, 0);
          $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 20) + Math_fround(0.0));
          SAFE_HEAP_STORE_f32_4_4($2, 20, $11);
          $10 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 16));
          SAFE_HEAP_STORE_f32_4_4($2, 16, $10);
          if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
           $5 = ~~$11
          } else {
           $5 = -2147483648
          }
          if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
           $4 = ~~$10
          } else {
           $4 = -2147483648
          }
          label$151 : {
           if (SAFE_HEAP_LOAD_i32_4_4($2, 0)) {
            label$153 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 28) | 0) >= ($4 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$153
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 28, $4);
            }
            label$155 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0) >= ($5 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$155
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 36, $5);
            }
            label$157 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0) <= ($4 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$157
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
            }
            label$159 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 32) | 0) <= ($5 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$159
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 32, $5);
            }
            SAFE_HEAP_STORE_i32_4_4($2, 4, 1);
            break label$151;
           }
           $3 = SAFE_HEAP_LOAD_i32_4_4($2, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 44), 14) | 0;
           SAFE_HEAP_STORE_i64_8_2($3, 4);
           SAFE_HEAP_STORE_i32_2_2($3, 2, $5);
           SAFE_HEAP_STORE_i32_2_2($3, 0, $4);
           SAFE_HEAP_STORE_i32_1_1($3, 12, 2);
          }
          SAFE_HEAP_STORE_i32_4_4($2, 44, SAFE_HEAP_LOAD_i32_4_4($2, 44) + 1 | 0);
          $30 = $31;
          $27 = $28 + 1 | 0;
          $9 = 1;
          continue;
         }
         if (($27 | 0) >= ($30 | 0)) {
          $3 = $14;
          $7 = $13;
          $4 = 0;
          break label$5;
         } else {
          $10 = SAFE_HEAP_LOAD_f32_4_4(($6 + 240 | 0) + ($27 << 2) | 0, 0);
          $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 16) + Math_fround(0.0));
          SAFE_HEAP_STORE_f32_4_4($2, 16, $11);
          $10 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 20));
          SAFE_HEAP_STORE_f32_4_4($2, 20, $10);
          if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
           $5 = ~~$11
          } else {
           $5 = -2147483648
          }
          if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
           $4 = ~~$10
          } else {
           $4 = -2147483648
          }
          label$166 : {
           if (SAFE_HEAP_LOAD_i32_4_4($2, 0)) {
            label$168 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 28) | 0) >= ($5 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$168
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 28, $5);
            }
            label$170 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0) >= ($4 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$170
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 36, $4);
            }
            label$172 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0) <= ($5 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$172
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 24, $5);
            }
            label$174 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 32) | 0) <= ($4 | 0)) {
              if (SAFE_HEAP_LOAD_i32_4_4($2, 4)) {
               break label$174
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 32, $4);
            }
            SAFE_HEAP_STORE_i32_4_4($2, 4, 1);
            break label$166;
           }
           $3 = SAFE_HEAP_LOAD_i32_4_4($2, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 44), 14) | 0;
           SAFE_HEAP_STORE_i64_8_2($3, 4);
           SAFE_HEAP_STORE_i32_2_2($3, 2, $4);
           SAFE_HEAP_STORE_i32_2_2($3, 0, $5);
           SAFE_HEAP_STORE_i32_1_1($3, 12, 2);
          }
          SAFE_HEAP_STORE_i32_4_4($2, 44, SAFE_HEAP_LOAD_i32_4_4($2, 44) + 1 | 0);
          $31 = $30;
          $28 = $27 + 1 | 0;
          $9 = 0;
          continue;
         }
        };
       }
       $3 = $14;
       $7 = $13;
       $4 = 0;
      }
      $12 = $26;
     }
     $8 = $34;
    }
    $9 = $4;
    $5 = SAFE_HEAP_LOAD_i32_4_4($6, 88);
    $4 = SAFE_HEAP_LOAD_i32_4_4($6, 84);
    if (($5 | 0) > ($4 | 0)) {
     continue
    }
    break;
   };
   $8 = 0;
  }
  __stack_pointer = $6 + 464 | 0;
  return $8;
 }
 
 function stbtt__GetGlyfOffset_28stbtt_fontinfo_20const__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) <= ($1 | 0)) {
   return -1
  }
  $2 = -1;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
  if (($3 | 0) <= 1) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4) + SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   label$3 : {
    if (!$3) {
     $0 = $2 + ($1 << 1) | 0;
     $1 = SAFE_HEAP_LOAD_i32_1_U_1($0 + 3 | 0, 0) << 1 | SAFE_HEAP_LOAD_i32_1_U_1($0, 2) << 9;
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1) << 1 | SAFE_HEAP_LOAD_i32_1_U_1($0, 0) << 9;
     break label$3;
    }
    $2 = $2 + ($1 << 2) | 0;
    $0 = SAFE_HEAP_LOAD_i32_4_1($2, 4);
    $1 = $0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24);
    $0 = SAFE_HEAP_LOAD_i32_4_1($2, 0);
    $0 = $0 << 24 | ($0 & 65280) << 8 | ($0 >>> 8 & 65280 | $0 >>> 24);
   }
   $2 = ($0 | 0) == ($1 | 0) ? -1 : $4 + $0 | 0;
  }
  return $2;
 }
 
 function stbtt__cff_int_28stbtt__buf__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $1 = 0;
  label$1 : {
   if (($2 | 0) >= ($4 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
   $1 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $2 | 0, 0);
  }
  $3 = $1 & 255;
  $2 = $1;
  if (($1 - 32 & 255) >>> 0 <= 214) {
   return $3 - 139 | 0
  }
  if (($2 + 9 & 255) >>> 0 <= 3) {
   $3 = $3 << 8;
   $1 = 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   if (($4 | 0) > ($2 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
    $1 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $2 | 0, 0);
   }
   return ($1 + $3 | 0) - 63124 | 0;
  }
  if (($2 + 5 & 255) >>> 0 <= 3) {
   $2 = 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   if (($4 | 0) > ($1 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + 1 | 0);
    $2 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0);
   }
   return 64148 - ($2 | $3 << 8) | 0;
  }
  $1 = 0;
  label$7 : {
   label$8 : {
    switch (($2 & 255) - 28 | 0) {
    case 0:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     $3 = 0;
     while (1) {
      $1 = $1 << 8;
      $5 = $1;
      $1 = $2;
      label$11 : {
       if (($4 | 0) <= ($1 | 0)) {
        $1 = 0;
        break label$11;
       }
       $2 = $1 + 1 | 0;
       SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
       $1 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0);
      }
      $1 = $5 | $1 & 255;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != 2) {
       continue
      }
      break;
     };
     break label$7;
    case 1:
     break label$8;
    default:
     break label$7;
    };
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   $3 = 0;
   while (1) {
    $1 = $1 << 8;
    $5 = $1;
    $1 = $2;
    label$14 : {
     if (($4 | 0) <= ($1 | 0)) {
      $1 = 0;
      break label$14;
     }
     $2 = $1 + 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
     $1 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0);
    }
    $1 = $5 | $1 & 255;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 4) {
     continue
    }
    break;
   };
  }
  return $1;
 }
 
 function stbtt__csctx_rmove_to_28stbtt__csctx__2c_20float_2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  stbtt__csctx_close_shape_28stbtt__csctx__29($0);
  $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 16) + $1);
  SAFE_HEAP_STORE_f32_4_4($0, 8, $1);
  SAFE_HEAP_STORE_f32_4_4($0, 16, $1);
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 20) + $2);
  SAFE_HEAP_STORE_f32_4_4($0, 20, $2);
  SAFE_HEAP_STORE_f32_4_4($0, 12, $2);
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
   $3 = ~~$2
  } else {
   $3 = -2147483648
  }
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
   $4 = ~~$1
  } else {
   $4 = -2147483648
  }
  label$5 : {
   if (SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
    label$7 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) >= ($4 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$7
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 28, $4);
    }
    label$9 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0) >= ($3 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$9
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 36, $3);
    }
    label$11 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 24) | 0) <= ($4 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$11
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 24, $4);
    }
    label$13 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) <= ($3 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$13
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 32, $3);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, 1);
    break label$5;
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 44), 14) | 0;
   SAFE_HEAP_STORE_i64_8_2($5, 4);
   SAFE_HEAP_STORE_i32_2_2($5, 2, $3);
   SAFE_HEAP_STORE_i32_2_2($5, 0, $4);
   SAFE_HEAP_STORE_i32_1_1($5, 12, 1);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 44, SAFE_HEAP_LOAD_i32_4_4($0, 44) + 1 | 0);
 }
 
 function stbtt__csctx_rccurve_to_28stbtt__csctx__2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 20) + $2);
  $4 = Math_fround($2 + $4);
  $6 = Math_fround($4 + $6);
  SAFE_HEAP_STORE_f32_4_4($0, 20, $6);
  $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 16) + $1);
  $3 = Math_fround($1 + $3);
  $5 = Math_fround($3 + $5);
  SAFE_HEAP_STORE_f32_4_4($0, 16, $5);
  if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
   $8 = ~~$2
  } else {
   $8 = -2147483648
  }
  if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
   $9 = ~~$1
  } else {
   $9 = -2147483648
  }
  if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
   $10 = ~~$4
  } else {
   $10 = -2147483648
  }
  if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
   $11 = ~~$3
  } else {
   $11 = -2147483648
  }
  if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
   $12 = ~~$6
  } else {
   $12 = -2147483648
  }
  if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
   $13 = ~~$5
  } else {
   $13 = -2147483648
  }
  label$13 : {
   if (SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
    label$15 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) >= ($13 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$15
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 28, $13);
    }
    label$17 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0) >= ($12 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$17
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 36, $12);
    }
    label$19 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 24) | 0) <= ($13 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$19
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 24, $13);
    }
    label$21 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) <= ($12 | 0)) {
      if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
       break label$21
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 32, $12);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, 1);
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) < ($9 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 28, $9)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0) < ($8 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 36, $8)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 24) | 0) > ($9 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 24, $9)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) > ($8 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 32, $8)
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, 1);
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) < ($11 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 28, $11)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0) < ($10 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 36, $10)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 24) | 0) > ($11 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 24, $11)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) > ($10 | 0)) {
     SAFE_HEAP_STORE_i32_4_4($0, 32, $10)
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, 1);
    break label$13;
   }
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 44), 14) | 0;
   SAFE_HEAP_STORE_i32_2_2($7, 10, $10);
   SAFE_HEAP_STORE_i32_2_2($7, 8, $11);
   SAFE_HEAP_STORE_i32_2_2($7, 6, $8);
   SAFE_HEAP_STORE_i32_2_2($7, 4, $9);
   SAFE_HEAP_STORE_i32_2_2($7, 2, $12);
   SAFE_HEAP_STORE_i32_2_2($7, 0, $13);
   SAFE_HEAP_STORE_i32_1_1($7, 12, 4);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 44, SAFE_HEAP_LOAD_i32_4_4($0, 44) + 1 | 0);
 }
 
 function stbtt__csctx_close_shape_28stbtt__csctx__29($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0;
  label$1 : {
   $1 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
   if (SAFE_HEAP_LOAD_f32_4_4($0, 16) == $1) {
    if (SAFE_HEAP_LOAD_f32_4_4($0, 12) == SAFE_HEAP_LOAD_f32_4_4($0, 20)) {
     break label$1
    }
   }
   if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
    $2 = ~~$1
   } else {
    $2 = -2147483648
   }
   $1 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   label$5 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
     $3 = ~~$1;
     break label$5;
    }
    $3 = -2147483648;
   }
   label$7 : {
    if (SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
     label$9 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) >= ($2 | 0)) {
       if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
        break label$9
       }
      }
      SAFE_HEAP_STORE_i32_4_4($0, 28, $2);
     }
     label$11 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0) >= ($3 | 0)) {
       if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
        break label$11
       }
      }
      SAFE_HEAP_STORE_i32_4_4($0, 36, $3);
     }
     label$13 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 24) | 0) <= ($2 | 0)) {
       if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
        break label$13
       }
      }
      SAFE_HEAP_STORE_i32_4_4($0, 24, $2);
     }
     label$15 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) <= ($3 | 0)) {
       if (SAFE_HEAP_LOAD_i32_4_4($0, 4)) {
        break label$15
       }
      }
      SAFE_HEAP_STORE_i32_4_4($0, 32, $3);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 4, 1);
     break label$7;
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 40) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 44), 14) | 0;
    SAFE_HEAP_STORE_i64_8_2($4, 4);
    SAFE_HEAP_STORE_i32_2_2($4, 2, $3);
    SAFE_HEAP_STORE_i32_2_2($4, 0, $2);
    SAFE_HEAP_STORE_i32_1_1($4, 12, 2);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 44, SAFE_HEAP_LOAD_i32_4_4($0, 44) + 1 | 0);
  }
 }
 
 function ImGui__BeginTable_28char_20const__2c_20int_2c_20int_2c_20ImVec2_20const__2c_20float_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0);
  $16 = ImGui__GetID_28char_20const__29($0);
  $7 = __stack_pointer - 160 | 0;
  __stack_pointer = $7;
  $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $17 = SAFE_HEAP_LOAD_i32_4_4($9, 7080);
  SAFE_HEAP_STORE_i32_1_1($17, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($17, 143)) {
   $10 = $0;
   ImGui__GetContentRegionAvail_28_29($7 + 152 | 0);
   SAFE_HEAP_STORE_i64_8_8($7, 136, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   $8 = SAFE_HEAP_LOAD_f32_4_4($7, 152);
   $8 = $8 >= Math_fround(1.0) ? $8 : Math_fround(1.0);
   $12 = $2 & 50331648;
   label$2 : {
    label$3 : {
     if ($12) {
      SAFE_HEAP_STORE_i64_8_8($7, 8, SAFE_HEAP_LOAD_i64_8_8($7, 136), i64toi32_i32$HIGH_BITS);
      $21 = $8;
      $8 = SAFE_HEAP_LOAD_f32_4_4($7, 156);
      ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($7 + 144 | 0, $7 + 8 | 0, $21, $8 >= Math_fround(1.0) ? $8 : Math_fround(1.0));
      $8 = SAFE_HEAP_LOAD_f32_4_4($17, 208);
      $5 = SAFE_HEAP_LOAD_i64_8_4($17, 208);
      $0 = i64toi32_i32$HIGH_BITS;
      SAFE_HEAP_STORE_f32_4_4($7 + 132 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($17 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($7, 148)));
      SAFE_HEAP_STORE_i64_8_8($7, 120, $5, $0);
      SAFE_HEAP_STORE_f32_4_4($7, 128, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($7, 144)));
      if (!ImGui__IsClippedEx_28ImRect_20const__2c_20unsigned_20int_29($7 + 120 | 0, 0)) {
       break label$3
      }
      ImGui__ItemSize_28ImRect_20const__2c_20float_29($7 + 120 | 0, Math_fround(-1.0));
      $15 = 0;
      break label$2;
     }
     SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_8($7, 136), i64toi32_i32$HIGH_BITS);
     ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($7 + 144 | 0, $7, $8, Math_fround(0.0));
     $8 = SAFE_HEAP_LOAD_f32_4_4($17, 208);
     $5 = SAFE_HEAP_LOAD_i64_8_4($17, 208);
     $0 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_f32_4_4($7 + 132 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($17 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($7, 148)));
     SAFE_HEAP_STORE_i64_8_8($7, 120, $5, $0);
     SAFE_HEAP_STORE_f32_4_4($7, 128, Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($7, 144)));
    }
    $5 = ImGuiStorage__GetIntRef_28unsigned_20int_2c_20int_29($9 + 8068 | 0, $16);
    $0 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    label$5 : {
     if (($0 | 0) != -1) {
      $5 = SAFE_HEAP_LOAD_i32_4_4($9 + 8064 | 0, 0) + Math_imul($0, 456) | 0;
      break label$5;
     }
     SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($9 + 8080 | 0, 0));
     $13 = $9 + 8056 | 0;
     $19 = SAFE_HEAP_LOAD_i32_4_4($13, 24);
     $0 = SAFE_HEAP_LOAD_i32_4_4($13, 0);
     label$1 : {
      if (($19 | 0) == ($0 | 0)) {
       $14 = $0 + 1 | 0;
       $6 = $0;
       $0 = SAFE_HEAP_LOAD_i32_4_4($13, 4);
       label$30 : {
        if (($6 | 0) < ($0 | 0)) {
         break label$30
        }
        $5 = $0;
        $0 = $0 ? $0 + (($0 | 0) / 2 | 0) | 0 : 8;
        $6 = ($0 | 0) > ($14 | 0) ? $0 : $14;
        if (($5 | 0) >= ($6 | 0)) {
         break label$30
        }
        $5 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($6, 456));
        $0 = SAFE_HEAP_LOAD_i32_4_4($13, 8);
        if ($0) {
         __memcpy($5, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($13, 0), 456));
         ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($13, 8));
        }
        SAFE_HEAP_STORE_i32_4_4($13, 4, $6);
        SAFE_HEAP_STORE_i32_4_4($13, 8, $5);
       }
       SAFE_HEAP_STORE_i32_4_4($13, 0, $14);
       $0 = SAFE_HEAP_LOAD_i32_4_4($13, 24) + 1 | 0;
       break label$1;
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($13, 8) + Math_imul($19, 456) | 0, 0);
     }
     SAFE_HEAP_STORE_i32_4_4($13, 24, $0);
     $0 = Math_imul($19, 456);
     SAFE_HEAP_STORE_i32_4_4(memset(SAFE_HEAP_LOAD_i32_4_4($13, 8) + $0 | 0, 0, 456), 80, -1);
     SAFE_HEAP_STORE_i32_4_4($13, 28, SAFE_HEAP_LOAD_i32_4_4($13, 28) + 1 | 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($13, 8) + $0 | 0;
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($5, 80) | 0) == (SAFE_HEAP_LOAD_i32_4_4($9, 6984) | 0)) {
     $15 = SAFE_HEAP_LOAD_i32_2_2($5, 96) + 1 | 0
    }
    $13 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
    $20 = SAFE_HEAP_LOAD_i32_4_4($9, 8040);
    $14 = $20 + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($9, 8040, $14);
    $11 = ($5 - SAFE_HEAP_LOAD_i32_4_4($9 + 8064 | 0, 0) | 0) / 456 | 0;
    label$8 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($9, 8044) | 0) > ($20 | 0)) {
      break label$8
     }
     memset($7 + 16 | 0, 0, 104);
     SAFE_HEAP_STORE_i32_4_4($7, 20, -1082130432);
     $6 = SAFE_HEAP_LOAD_i32_4_4($9 + 8048 | 0, 0);
     label$9 : {
      if (($6 | 0) > ($20 | 0)) {
       break label$9
      }
      $0 = $6 ? $6 + (($6 | 0) / 2 | 0) | 0 : 8;
      $19 = ($0 | 0) > ($14 | 0) ? $0 : $14;
      if (($6 | 0) >= ($19 | 0)) {
       break label$9
      }
      $6 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($19, 104));
      $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 8052 | 0, 0);
      if ($0) {
       __memcpy($6, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($9, 8044), 104));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($9, 8052));
      }
      SAFE_HEAP_STORE_i32_4_4($9, 8048, $19);
      SAFE_HEAP_STORE_i32_4_4($9, 8052, $6);
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 8044);
     if (($20 | 0) >= ($0 | 0)) {
      while (1) {
       $6 = $0;
       __memcpy(SAFE_HEAP_LOAD_i32_4_4($9, 8052) + Math_imul($0, 104) | 0, $7 + 16 | 0, 104);
       $0 = $0 + 1 | 0;
       if (($6 | 0) != ($20 | 0)) {
        continue
       }
       break;
      }
     }
     SAFE_HEAP_STORE_i32_4_4($9, 8044, $14);
     ImDrawListSplitter__ClearFreeMemory_28_29($7 + 32 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($7 + 48 | 0, 0);
     if (!$0) {
      break label$8
     }
     ImGui__MemFree_28void__29($0);
    }
    $20 = SAFE_HEAP_LOAD_i32_4_4($9 + 8052 | 0, 0);
    $14 = SAFE_HEAP_LOAD_i32_4_4($9, 8040) - 1 | 0;
    $22 = $20 + Math_imul($14, 104) | 0;
    SAFE_HEAP_STORE_i32_4_4($5, 12, $22);
    SAFE_HEAP_STORE_i32_4_4($22, 0, $11);
    SAFE_HEAP_STORE_i32_4_4($5, 376, $22 + 16 | 0);
    SAFE_HEAP_STORE_i64_8_4($22, 16, 0, 1);
    $0 = $2 & 57344;
    SAFE_HEAP_STORE_i32_1_1($5, 453, !$0);
    if (!$0) {
     if ($2 & 16777216) {
      $0 = 8192
     } else {
      $0 = SAFE_HEAP_LOAD_i32_1_U_1($17, 8) & 64 ? 8192 : 32768
     }
     $2 = $0 | $2;
    }
    $19 = $15 + $16 | 0;
    $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($17, 736), 8);
    SAFE_HEAP_STORE_i32_2_2($5, 96, $15);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $16);
    $2 = ($2 & 57344) == 16384 ? $2 | 262144 : $2;
    $0 = $2 << 9 & 512 | $2;
    $0 = $2 & 50331648 ? $0 & -196609 : $0;
    $2 = $0 & 4096 ? $0 & -2049 : $0;
    $0 = $2 | 16;
    $16 = $6 & 256 ? $0 : $2 & 15 ? $2 : $0;
    SAFE_HEAP_STORE_i32_4_4($5, 4, $16);
    $0 = SAFE_HEAP_LOAD_i32_4_4($9, 6984);
    SAFE_HEAP_STORE_i32_4_4($5, 360, $17);
    SAFE_HEAP_STORE_i32_4_4($5, 80, $0);
    SAFE_HEAP_STORE_i32_4_4($5, 356, $17);
    SAFE_HEAP_STORE_i32_1_1($5, 441, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 84, $1);
    SAFE_HEAP_STORE_f32_4_4($5, 188, $4);
    SAFE_HEAP_STORE_i64_8_4($22, 8, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
    label$18 : {
     if ($12) {
      $3 = $16 & 16777216;
      $4 = $4 > Math_fround(0.0) ? ($3 >>> 24 | 0 ? $4 : Math_fround(3402823466385288598117041.0e14)) : Math_fround(3402823466385288598117041.0e14);
      $2 = $4 != Math_fround(3402823466385288598117041.0e14);
      $0 = $16 & 50331648;
      if (!(!$2 & ($0 | 0) != 16777216)) {
       SAFE_HEAP_STORE_f32_4_4($7, 20, ($0 | 0) == 16777216 ? Math_fround(1.1754943508222875e-38) : Math_fround(0.0));
       SAFE_HEAP_STORE_f32_4_4($7, 16, $2 ? $4 : Math_fround(0.0));
       ImGui__SetNextWindowContentSize_28ImVec2_20const__29($7 + 16 | 0);
      }
      if (!($13 & 50331648)) {
       SAFE_HEAP_STORE_i64_8_4($7, 16, 0, 0);
       $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       SAFE_HEAP_STORE_i32_4_4($0, 7300, SAFE_HEAP_LOAD_i32_4_4($0, 7300) | 128);
       SAFE_HEAP_STORE_i64_8_4($0 + 7348 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($7 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
      }
      SAFE_HEAP_STORE_f32_4_4($7, 16, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 128) - SAFE_HEAP_LOAD_f32_4_4($7, 120)));
      SAFE_HEAP_STORE_f32_4_4($7, 20, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7 + 132 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($7, 124)));
      ImGui__BeginChildEx_28char_20const__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20bool_2c_20int_29($10, $19, $7 + 16 | 0, 0, $3 >>> 13 | 0);
      $0 = SAFE_HEAP_LOAD_i32_4_4($9, 7080);
      SAFE_HEAP_STORE_i32_4_4($5, 360, $0);
      SAFE_HEAP_STORE_i64_8_4($5, 244, SAFE_HEAP_LOAD_i64_8_4($0, 464), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($5 + 252 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 472 | 0, 0), i64toi32_i32$HIGH_BITS);
      $23 = SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0);
      $8 = SAFE_HEAP_LOAD_f32_4_4($0, 20);
      $21 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
      $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($5 + 216 | 0, 0, $4);
      SAFE_HEAP_STORE_f32_4_4($5, 212, $21);
      SAFE_HEAP_STORE_f32_4_4($5 + 224 | 0, 0, Math_fround($4 + $23));
      SAFE_HEAP_STORE_f32_4_4($5 + 220 | 0, 0, Math_fround($21 + $8));
      SAFE_HEAP_STORE_i64_8_4($5, 228, SAFE_HEAP_LOAD_i64_8_4($0, 432), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($5 + 236 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 440 | 0, 0), i64toi32_i32$HIGH_BITS);
      break label$18;
     }
     SAFE_HEAP_STORE_i64_8_4($5, 228, SAFE_HEAP_LOAD_i64_8_8($7, 120), i64toi32_i32$HIGH_BITS);
     $0 = $7 + 128 | 0;
     SAFE_HEAP_STORE_i64_8_4($5 + 236 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($5, 212, SAFE_HEAP_LOAD_i64_8_8($7, 120), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($5 + 220 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($5, 244, SAFE_HEAP_LOAD_i64_8_8($7, 120), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($5 + 252 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($0, 0), i64toi32_i32$HIGH_BITS);
    }
    ImGui__PushOverrideID_28unsigned_20int_29($19);
    $18 = SAFE_HEAP_LOAD_i32_4_4($5, 360);
    SAFE_HEAP_STORE_f32_4_4($5, 152, SAFE_HEAP_LOAD_f32_4_4($18 + 272 | 0, 0));
    SAFE_HEAP_STORE_i64_8_4($5, 324, SAFE_HEAP_LOAD_i64_8_4($18, 496), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($5 + 332 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($18 + 504 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_1_1($5, 455, SAFE_HEAP_LOAD_i32_1_U_1($18, 143));
    $3 = $20 + Math_imul($14, 104) | 0;
    SAFE_HEAP_STORE_i64_8_4($3 + 44 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($18 + 472 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($3, 36, SAFE_HEAP_LOAD_i64_8_4($18, 464), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($3, 52, SAFE_HEAP_LOAD_i64_8_4($18, 480), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($3 + 60 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($18 + 488 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($3, 92, SAFE_HEAP_LOAD_i32_4_4($17 + 276 | 0, 0));
    $2 = $18 + 256 | 0;
    SAFE_HEAP_STORE_i64_8_4($3, 68, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
    $0 = $18 + 248 | 0;
    SAFE_HEAP_STORE_i64_8_4($3, 76, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($3, 84, SAFE_HEAP_LOAD_i64_8_4($18 + 232 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_f32_4_4($3, 96, SAFE_HEAP_LOAD_f32_4_4($17 + 384 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($3, 100, SAFE_HEAP_LOAD_i32_4_4($17 + 392 | 0, 0));
    SAFE_HEAP_STORE_i64_8_4($2, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
    $4 = Math_fround(0.0);
    $0 = $16 & 8389120;
    if (!$0) {
     $4 = SAFE_HEAP_LOAD_f32_4_4($9 + 5508 | 0, 0)
    }
    $8 = Math_fround(0.0);
    if (($0 | 0) == 512) {
     $8 = SAFE_HEAP_LOAD_f32_4_4($9 + 5508 | 0, 0)
    }
    SAFE_HEAP_STORE_f32_4_4($5, 176, $4);
    SAFE_HEAP_STORE_f32_4_4($5, 164, $8);
    SAFE_HEAP_STORE_f32_4_4($5, 172, Math_fround(($16 & 512 ? Math_fround(1.0) : Math_fround(0.0)) + $4));
    SAFE_HEAP_STORE_f32_4_4($5, 168, SAFE_HEAP_LOAD_f32_4_4($9 + 5512 | 0, 0));
    $4 = Math_fround(0.0);
    if (!($16 & 4194304) & ($16 & 2098176) != 0) {
     $4 = SAFE_HEAP_LOAD_f32_4_4($9 + 5508 | 0, 0)
    }
    SAFE_HEAP_STORE_i32_4_4($5, 124, 0);
    SAFE_HEAP_STORE_i64_8_8($5, 88, -1, -1);
    SAFE_HEAP_STORE_i32_4_4($5, 120, SAFE_HEAP_LOAD_i32_2_U_2($5, 120));
    SAFE_HEAP_STORE_f32_4_4($5, 160, Math_fround(Math_fround(($16 & 1024 ? Math_fround(1.0) : Math_fround(0.0)) + $4) - $8));
    $3 = ($17 | 0) == ($18 | 0);
    $0 = $3 ? $5 + 244 | 0 : $18 + 496 | 0;
    SAFE_HEAP_STORE_i64_8_4($5, 260, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
    $12 = $5 + 268 | 0;
    SAFE_HEAP_STORE_i64_8_4($12, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    $8 = SAFE_HEAP_LOAD_f32_4_4($5, 260);
    $4 = SAFE_HEAP_LOAD_f32_4_4($5, 244);
    $24 = $4 <= $8 ? $8 : $4;
    SAFE_HEAP_STORE_f32_4_4($5, 260, $24);
    $8 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
    $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 252 | 0, 0);
    $25 = $4 > $8 ? $8 : $4;
    SAFE_HEAP_STORE_f32_4_4($12, 0, $25);
    $6 = $5 + 264 | 0;
    $8 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
    $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 248 | 0, 0);
    $21 = $4 <= $8 ? $8 : $4;
    SAFE_HEAP_STORE_f32_4_4($6, 0, $21);
    $10 = $5 + 272 | 0;
    $8 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
    $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 256 | 0, 0);
    $23 = $4 > $8 ? $8 : $4;
    SAFE_HEAP_STORE_f32_4_4($10, 0, $23);
    $8 = SAFE_HEAP_LOAD_f32_4_4($5, 324);
    $2 = SAFE_HEAP_LOAD_i64_8_4($5 + 332 | 0, 0);
    $0 = i64toi32_i32$HIGH_BITS;
    $4 = (wasm2js_scratch_store_i32(2, $2), wasm2js_scratch_load_f32());
    SAFE_HEAP_STORE_f32_4_4($5, 260, $8 > $24 ? $8 : $4 < $24 ? $4 : $24);
    SAFE_HEAP_STORE_f32_4_4($12, 0, $8 > $25 ? $8 : $4 < $25 ? $4 : $25);
    $8 = SAFE_HEAP_LOAD_f32_4_4($5 + 328 | 0, 0);
    $4 = (wasm2js_scratch_store_i32(2, $0), wasm2js_scratch_load_f32());
    SAFE_HEAP_STORE_f32_4_4($10, 0, $8 > $23 ? $8 : $4 < $23 ? $4 : $23);
    SAFE_HEAP_STORE_f32_4_4($6, 0, $8 > $21 ? $8 : $4 < $21 ? $4 : $21);
    label$26 : {
     if ($16 & 131072) {
      $8 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
      $4 = SAFE_HEAP_LOAD_f32_4_4($18 + 476 | 0, 0);
      $4 = $4 > $8 ? $8 : $4;
      break label$26;
     }
     $4 = SAFE_HEAP_LOAD_f32_4_4($18 + 508 | 0, 0);
    }
    SAFE_HEAP_STORE_i32_1_1($5, 452, 1);
    SAFE_HEAP_STORE_i32_4_1($5, 433, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 112, 0);
    SAFE_HEAP_STORE_i32_1_1($5, 419, 0);
    SAFE_HEAP_STORE_f32_4_4($5 + 272 | 0, 0, $4);
    $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 248 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($5, 104, $4);
    SAFE_HEAP_STORE_f32_4_4($5, 100, $4);
    SAFE_HEAP_STORE_i32_4_4($5, 136, ImGui__GetColorU32_28int_2c_20float_29(43, Math_fround(1.0)));
    SAFE_HEAP_STORE_i32_4_4($5, 140, ImGui__GetColorU32_28int_2c_20float_29(44, Math_fround(1.0)));
    SAFE_HEAP_STORE_i32_4_4($9, 8036, $5);
    SAFE_HEAP_STORE_i32_4_4($17 + 372 | 0, 0, $11);
    if (!$3) {
     SAFE_HEAP_STORE_i32_4_4($18 + 372 | 0, 0, $11)
    }
    if (!(!($13 & 2) | $16 & 2)) {
     SAFE_HEAP_STORE_i32_1_1($5, 451, 1)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($9, 8088) | 0) <= ($11 | 0)) {
     $6 = $11 + 1 | 0;
     $2 = SAFE_HEAP_LOAD_i32_4_4($9 + 8092 | 0, 0);
     label$31 : {
      if (($2 | 0) > ($11 | 0)) {
       break label$31
      }
      $0 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
      $3 = ($0 | 0) > ($6 | 0) ? $0 : $6;
      if (($2 | 0) >= ($3 | 0)) {
       break label$31
      }
      $2 = ImGui__MemAlloc_28unsigned_20long_29($3 << 2);
      $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 8096 | 0, 0);
      if ($0) {
       __memcpy($2, $0, SAFE_HEAP_LOAD_i32_4_4($9, 8088) << 2);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($9, 8096));
      }
      SAFE_HEAP_STORE_i32_4_4($9, 8092, $3);
      SAFE_HEAP_STORE_i32_4_4($9, 8096, $2);
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 8088);
     if (($11 | 0) >= ($0 | 0)) {
      while (1) {
       $2 = $0;
       SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 8096) + ($0 << 2) | 0, 0, -1082130432);
       $0 = $0 + 1 | 0;
       if (($2 | 0) != ($11 | 0)) {
        continue
       }
       break;
      }
     }
     SAFE_HEAP_STORE_i32_4_4($9, 8088, $6);
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($9 + 8096 | 0, 0) + ($11 << 2) | 0;
    $4 = Math_fround(SAFE_HEAP_LOAD_f64_8_8($9, 6976));
    SAFE_HEAP_STORE_f32_4_4($0, 0, $4);
    SAFE_HEAP_STORE_f32_4_4($20 + Math_imul($14, 104) | 0, 4, $4);
    SAFE_HEAP_STORE_i32_1_1($5, 454, 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($5 + 20 | 0, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
    $22 = ($0 - $2 | 0) / 104 | 0;
    label$37 : {
     if (($0 | 0) == ($2 | 0)) {
      $0 = 0;
      $3 = 0;
      break label$37;
     }
     $0 = 0;
     $3 = 0;
     if (($1 | 0) == ($22 | 0)) {
      break label$37
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
     SAFE_HEAP_STORE_i32_4_4($5, 8, 0);
     $3 = $2;
    }
    $16 = $3;
    if (!SAFE_HEAP_LOAD_i32_4_4($5, 8)) {
     $10 = Math_imul($1, 105) + 3 & -4;
     $6 = $1 << 3;
     $3 = $10 + $6 | 0;
     $2 = ImGui__MemAlloc_28unsigned_20long_29($3);
     SAFE_HEAP_STORE_i32_4_4($5, 8, $2);
     memset($2, 0, $3);
     SAFE_HEAP_STORE_i32_1_1($5, 447, 1);
     SAFE_HEAP_STORE_i32_1_1($5, 443, 1);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
     SAFE_HEAP_STORE_i32_4_4($5, 16, $3);
     $2 = $3 + $10 | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 32, $2);
     $3 = $3 + Math_imul($1, 104) | 0;
     SAFE_HEAP_STORE_i32_4_4($5, 24, $3);
     SAFE_HEAP_STORE_i32_4_4($5 + 20 | 0, 0, $3);
     SAFE_HEAP_STORE_i32_4_4($5 + 36 | 0, 0, $2 + $6 | 0);
     SAFE_HEAP_STORE_i32_4_4($5 + 28 | 0, 0, $1 + $3 | 0);
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($5, 450)) {
     SAFE_HEAP_STORE_i32_1_1($5, 450, 0);
     SAFE_HEAP_STORE_i32_1_1($5, 443, 1);
     SAFE_HEAP_STORE_i32_2_1($5, 447, 256);
     SAFE_HEAP_STORE_i32_4_4($5, 72, 0);
    }
    label$41 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 443)) {
      break label$41
     }
     SAFE_HEAP_STORE_i32_1_1($5, 444, 1);
     SAFE_HEAP_STORE_i32_4_4($5, 76, -1);
     SAFE_HEAP_STORE_i32_1_1($5, 432, 255);
     SAFE_HEAP_STORE_i32_2_2($5, 98, 65535);
     SAFE_HEAP_STORE_i32_1_1($5, 426, 255);
     SAFE_HEAP_STORE_i32_4_4($5, 420, -1);
     SAFE_HEAP_STORE_i32_1_1($5 + 424 | 0, 0, -1);
     if (($1 | 0) <= 0) {
      break label$41
     }
     $20 = $7 + 71 | 0;
     $13 = $7 - -64 | 0;
     $14 = $7 + 56 | 0;
     $19 = $7 + 48 | 0;
     $12 = $7 + 40 | 0;
     $10 = $7 + 32 | 0;
     $6 = $7 + 68 | 0;
     $3 = $6 + 3 | 0;
     $15 = 0;
     while (1) {
      $2 = Math_imul($15, 104);
      $11 = SAFE_HEAP_LOAD_i32_4_4($5, 16) + $2 | 0;
      label$43 : {
       if (!(!$16 | ($15 | 0) >= ($22 | 0))) {
        __memcpy($11, $2 + $16 | 0, 103);
        break label$43;
       }
       $4 = SAFE_HEAP_LOAD_f32_4_4($11, 20);
       SAFE_HEAP_STORE_i32_4_1($20, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($13, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($14, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($19, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($12, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($10, 0, 0, 0);
       $2 = $7 + 24 | 0;
       SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($7, 16, 0, 0);
       SAFE_HEAP_STORE_i32_4_1($3, 0, -1);
       SAFE_HEAP_STORE_i32_4_4($6, 0, -1);
       SAFE_HEAP_STORE_i64_8_4($11 + 8 | 0, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_4($11, 0, 0, 0);
       SAFE_HEAP_STORE_i32_4_4($11, 24, -1082130432);
       SAFE_HEAP_STORE_i64_8_4($11, 16, -1082130432, 0);
       SAFE_HEAP_STORE_i64_8_4($11, 28, SAFE_HEAP_LOAD_i64_8_8($7, 16), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($11 + 36 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($11 + 44 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($10, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($11 + 52 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($12, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($11 + 60 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($19, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($11 + 68 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($14, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($11 + 76 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($13, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i32_4_1($11 + 83 | 0, 0, SAFE_HEAP_LOAD_i32_4_1($20, 0));
       SAFE_HEAP_STORE_i64_8_2($11, 90);
       SAFE_HEAP_STORE_i32_1_1($11, 89, 255);
       SAFE_HEAP_STORE_i32_2_1($11, 87, 65535);
       SAFE_HEAP_STORE_i64_8_1($11 + 95 | 0, 0, 0);
       SAFE_HEAP_STORE_i32_1_1($11, 97, 1);
       SAFE_HEAP_STORE_f32_4_4($11, 20, $4);
       SAFE_HEAP_STORE_i32_1_1($11, 92, 1);
       SAFE_HEAP_STORE_i32_2_2($11, 90, 257);
      }
      SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($5, 24) + $15 | 0, 0, $15);
      SAFE_HEAP_STORE_i32_1_1($11, 82, $15);
      $15 = $15 + 1 | 0;
      if (($15 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
    }
    if ($0) {
     ImGui__MemFree_28void__29($0)
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($5, 447)) {
     $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     SAFE_HEAP_STORE_i32_1_1($5, 447, 0);
     label$10 : {
      if (SAFE_HEAP_LOAD_i32_1_U_1($5, 4) & 16) {
       break label$10
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4($5, 76);
      label$21 : {
       if (($0 | 0) == -1) {
        $2 = SAFE_HEAP_LOAD_i32_4_4($12 + 12176 | 0, 0);
        $6 = $2 + 4 | 0;
        $0 = $2 ? $6 : 0;
        label$4 : {
         if (!$2) {
          break label$4
         }
         $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
         while (1) {
          if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($3 | 0)) {
           break label$4
          }
          $10 = SAFE_HEAP_LOAD_i32_4_4($0 - 4 | 0, 0) + $0 | 0;
          $2 = SAFE_HEAP_LOAD_i32_4_4($12, 12168) + $6 | 0;
          $0 = ($2 | 0) != ($10 | 0) ? $10 : 0;
          if (($2 | 0) != ($10 | 0)) {
           continue
          }
          break;
         };
        }
        $2 = $0;
        if (!$0) {
         break label$10
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) != (SAFE_HEAP_LOAD_i32_1_1($2, 12) | 0)) {
         SAFE_HEAP_STORE_i32_1_1($5, 448, 1)
        }
        SAFE_HEAP_STORE_i32_4_4($5, 76, $2 - SAFE_HEAP_LOAD_i32_4_4($12 + 12176 | 0, 0) | 0);
        break label$21;
       }
       $3 = SAFE_HEAP_LOAD_i32_4_4($5, 84);
       $2 = SAFE_HEAP_LOAD_i32_4_4($12 + 12176 | 0, 0) + $0 | 0;
       if (($3 | 0) <= (SAFE_HEAP_LOAD_i32_1_1($2, 13) | 0)) {
        break label$21
       }
       SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
       $2 = 0;
      }
      $3 = $2;
      SAFE_HEAP_STORE_i32_4_4($5, 72, SAFE_HEAP_LOAD_i32_4_4($2, 4));
      SAFE_HEAP_STORE_f32_4_4($5, 208, SAFE_HEAP_LOAD_f32_4_4($2, 8));
      $10 = SAFE_HEAP_LOAD_i32_1_1($2, 12);
      label$102 : {
       if (($10 | 0) <= 0) {
        $13 = 0;
        $14 = 0;
        break label$102;
       }
       $2 = $3 + 16 | 0;
       $0 = 0;
       $13 = 0;
       $14 = 0;
       while (1) {
        $6 = SAFE_HEAP_LOAD_i32_1_1($2, 8);
        label$13 : {
         if (($6 | 0) < 0) {
          break label$13
         }
         if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) <= ($6 | 0)) {
          break label$13
         }
         $19 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
         $12 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
         if ($12 & 1) {
          $10 = $19 + Math_imul($6, 104) | 0;
          SAFE_HEAP_STORE_f32_4_4($10 + (SAFE_HEAP_LOAD_i32_1_U_1($2, 11) & 8 ? 24 : 16) | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2, 0));
          SAFE_HEAP_STORE_i32_1_1($10, 99, 0);
         }
         $10 = $6;
         if ($12 & 2) {
          $10 = SAFE_HEAP_LOAD_i32_1_U_1($2, 9)
         }
         $12 = $19 + Math_imul($6, 104) | 0;
         SAFE_HEAP_STORE_i32_1_1($12, 82, $10);
         $6 = SAFE_HEAP_LOAD_i32_1_U_1($2, 11) >>> 2 & 1;
         SAFE_HEAP_STORE_i32_1_1($12, 91, $6);
         SAFE_HEAP_STORE_i32_1_1($12, 92, $6);
         SAFE_HEAP_STORE_i32_1_1($12, 86, SAFE_HEAP_LOAD_i32_1_U_1($2, 10));
         SAFE_HEAP_STORE_i32_1_1($12, 101, SAFE_HEAP_LOAD_i32_1_U_1($12, 101) & 252 | SAFE_HEAP_LOAD_i32_1_U_1($2, 11) & 3);
         $6 = $10 << 24 >> 24;
         $10 = $6 & 31;
         if (($6 & 63) >>> 0 >= 32) {
          $10 = 1 << $10;
          $6 = 0;
         } else {
          $6 = 1 << $10;
          $10 = $6 - 1 & 1 >>> 32 - $10;
         }
         $13 = $6 | $13;
         $14 = $10 | $14;
        }
        $2 = $2 + 12 | 0;
        $0 = $0 + 1 | 0;
        $10 = SAFE_HEAP_LOAD_i32_1_1($3, 12);
        if (($0 | 0) < ($10 | 0)) {
         continue
        }
        break;
       };
      }
      $0 = $10 & 31;
      if (($10 & 63) >>> 0 >= 32) {
       $0 = -1 << $0;
       $3 = 0;
      } else {
       $2 = -1 << $0;
       $0 = $2 | (1 << $0) - 1 & -1 >>> 32 - $0;
       $3 = $2;
      }
      $2 = ($10 | 0) == 64;
      label$183 : {
       if (($13 | 0) == (($2 ? -1 : $3 ^ -1) | 0) & (($2 ? -1 : $0 ^ -1) | 0) == ($14 | 0)) {
        break label$183
       }
       $3 = SAFE_HEAP_LOAD_i32_4_4($5, 84);
       if (($3 | 0) <= 0) {
        break label$183
       }
       $0 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
       $2 = 0;
       while (1) {
        SAFE_HEAP_STORE_i32_1_1($0 + Math_imul($2, 104) | 0, 82, $2);
        $2 = $2 + 1 | 0;
        if (($3 | 0) != ($2 | 0)) {
         continue
        }
        break;
       };
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) <= 0) {
       break label$10
      }
      $2 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($5, 24) + SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($5, 16) + Math_imul($2, 104) | 0, 82) | 0, 0, $2);
       $2 = $2 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) > ($2 | 0)) {
        continue
       }
       break;
      };
     }
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($9, 6468);
    $4 = SAFE_HEAP_LOAD_f32_4_4($5, 208);
    if (!($4 == Math_fround(0.0) | $4 == $8 | ($1 | 0) <= 0)) {
     $4 = Math_fround($8 / $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
     $15 = 0;
     while (1) {
      $0 = $2 + Math_imul($15, 104) | 0;
      SAFE_HEAP_STORE_f32_4_4($0, 16, Math_fround($4 * SAFE_HEAP_LOAD_f32_4_4($0, 16)));
      $15 = $15 + 1 | 0;
      if (($15 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_f32_4_4($5, 208, $8);
    SAFE_HEAP_STORE_i32_1_1($18, 143, 1);
    if ((SAFE_HEAP_LOAD_i32_4_4($5, 364) | 0) > 0) {
     $1 = SAFE_HEAP_LOAD_i32_4_4($5 + 368 | 0, 0);
     label$50 : {
      if (($1 | 0) >= 0) {
       break label$50
      }
      $0 = $1 + (($1 | 0) / 2 | 0) | 0;
      $2 = ($0 | 0) > 0 ? $0 : 0;
      if (($1 | 0) >= ($2 | 0)) {
       break label$50
      }
      $1 = ImGui__MemAlloc_28unsigned_20long_29($2);
      $0 = SAFE_HEAP_LOAD_i32_4_4($5 + 372 | 0, 0);
      if ($0) {
       __memcpy($1, $0, SAFE_HEAP_LOAD_i32_4_4($5, 364));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($5, 372));
      }
      SAFE_HEAP_STORE_i32_4_4($5, 368, $2);
      SAFE_HEAP_STORE_i32_4_4($5, 372, $1);
     }
     SAFE_HEAP_STORE_i32_4_4($5, 364, 0);
    }
    label$11 : {
     if (SAFE_HEAP_LOAD_i32_2_U_2($5, 96)) {
      break label$11
     }
     $0 = SAFE_HEAP_LOAD_i32_1_1($5, 423);
     label$22 : {
      if (($0 | 0) == -1) {
       break label$22
      }
      $4 = SAFE_HEAP_LOAD_f32_4_4($5, 200);
      if ($4 == Math_fround(3402823466385288598117041.0e14)) {
       break label$22
      }
      ImGui__TableSetColumnWidth_28int_2c_20float_29($0, $4);
     }
     SAFE_HEAP_STORE_i32_4_4($5, 200, 2139095039);
     SAFE_HEAP_STORE_i32_1_1($5, 424, SAFE_HEAP_LOAD_i32_1_U_1($5, 423));
     SAFE_HEAP_STORE_i32_1_1($5, 423, 255);
     $0 = SAFE_HEAP_LOAD_i32_1_1($5, 422);
     if (($0 | 0) == -1) {
      break label$11
     }
     ImGui__TableSetColumnWidth_28int_2c_20float_29($0, SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 16) + Math_imul($0, 104) | 0, 20));
     SAFE_HEAP_STORE_i32_1_1($5, 422, 255);
    }
    label$33 : {
     if (SAFE_HEAP_LOAD_i32_2_U_2($5, 96)) {
      break label$33
     }
     label$44 : {
      if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 425) | 0) != 255) {
       break label$44
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 426) | 0) == 255) {
       break label$44
      }
      SAFE_HEAP_STORE_i32_1_1($5, 426, 255);
     }
     SAFE_HEAP_STORE_i32_1_1($5, 425, 255);
     $0 = SAFE_HEAP_LOAD_i32_1_1($5, 426);
     if (($0 | 0) == -1) {
      break label$33
     }
     $12 = SAFE_HEAP_LOAD_i32_1_U_1($5, 427);
     if (!$12) {
      break label$33
     }
     $10 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
     $0 = $10 + Math_imul($0, 104) | 0;
     $6 = SAFE_HEAP_LOAD_i32_1_U_1($0, 82);
     $1 = $0;
     $0 = SAFE_HEAP_LOAD_i32_1_U_1(Math_imul(SAFE_HEAP_LOAD_i32_1_1($0 + (($12 | 0) == 255 ? 84 : 85) | 0, 0), 104) + $10 | 0, 82);
     SAFE_HEAP_STORE_i32_1_1($1, 82, $0);
     if (($0 | 0) != ($6 | 0)) {
      $3 = $12 << 24 >> 24;
      $2 = $0 << 24 >> 24;
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
      $6 = $6 << 24 >> 24;
      while (1) {
       $6 = $3 + $6 | 0;
       $0 = Math_imul(SAFE_HEAP_LOAD_i32_1_1($6 + $1 | 0, 0), 104) + $10 | 0;
       SAFE_HEAP_STORE_i32_1_1($0, 82, SAFE_HEAP_LOAD_i32_1_U_1($0, 82) - $12 | 0);
       if (($2 | 0) != ($6 | 0)) {
        continue
       }
       break;
      };
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) > 0) {
      $6 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($5, 24) + SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($5, 16) + Math_imul($6, 104) | 0, 82) | 0, 0, $6);
       $6 = $6 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) > ($6 | 0)) {
        continue
       }
       break;
      };
     }
     SAFE_HEAP_STORE_i32_1_1($5, 448, 1);
     SAFE_HEAP_STORE_i32_1_1($5, 427, 0);
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($5, 451)) {
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) > 0) {
      $6 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($5, 16) + Math_imul($6, 104) | 0, 82, $6);
       SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($5, 24) + $6 | 0, 0, $6);
       $6 = $6 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 84) | 0) > ($6 | 0)) {
        continue
       }
       break;
      };
     }
     SAFE_HEAP_STORE_i32_1_1($5, 448, 1);
     SAFE_HEAP_STORE_i32_1_1($5, 451, 0);
    }
    $15 = 1;
   }
  }
  __stack_pointer = $7 + 160 | 0;
  return $15;
 }
 
 function ImGui__TableSetColumnWidth_28int_2c_20float_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  $6 = SAFE_HEAP_LOAD_i32_4_4($4, 16);
  $5 = $6 + Math_imul($0, 104) | 0;
  $9 = SAFE_HEAP_LOAD_f32_4_4($4, 164);
  $11 = Math_fround($9 + $9);
  $7 = SAFE_HEAP_LOAD_f32_4_4($4, 156);
  $8 = Math_fround(Math_fround($11 + $7) + SAFE_HEAP_LOAD_f32_4_4($4, 172));
  $3 = SAFE_HEAP_LOAD_f32_4_4($4, 176);
  $12 = Math_fround($8 + $3);
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
  label$1 : {
   if ($2 & 16777216) {
    $2 = SAFE_HEAP_LOAD_i32_1_1($4, 435);
    $10 = SAFE_HEAP_LOAD_i32_1_1($5, 82);
    $8 = Math_fround(3402823466385288598117041.0e14);
    if (($2 | 0) <= ($10 | 0)) {
     break label$1
    }
    $8 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 268 | 0, 0) - Math_fround(Math_fround($2 - $10 | 0) * $12)) - SAFE_HEAP_LOAD_f32_4_4(Math_imul($0, 104) + $6 | 0, 8)) - SAFE_HEAP_LOAD_f32_4_4($4, 160)) - $9) - $3);
    break label$1;
   }
   $8 = Math_fround(3402823466385288598117041.0e14);
   if ($2 & 262144) {
    break label$1
   }
   $2 = Math_imul($0, 104) + $6 | 0;
   $8 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 252 | 0, 0) - Math_fround(Math_fround((SAFE_HEAP_LOAD_i32_1_1($2, 83) ^ -1) + SAFE_HEAP_LOAD_i32_1_1($4, 417) | 0) * $12)) - SAFE_HEAP_LOAD_f32_4_4($2, 8)) - $3) - $11) - SAFE_HEAP_LOAD_f32_4_4($4, 160));
  }
  $3 = $8;
  $2 = Math_imul($0, 104) + $6 | 0;
  $3 = $3 <= $7 ? $7 : $3;
  $1 = $1 < $7 ? $7 : $1 > $3 ? $3 : $1;
  label$3 : {
   if (SAFE_HEAP_LOAD_f32_4_4($2, 4) == $1) {
    break label$3
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($2, 16);
   if ($3 == $1) {
    break label$3
   }
   $10 = $2 + 16 | 0;
   $2 = SAFE_HEAP_LOAD_i32_1_1(Math_imul($0, 104) + $6 | 0, 85);
   $2 = ($2 | 0) != -1 ? Math_imul($2, 104) + $6 | 0 : 0;
   label$4 : {
    label$5 : {
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (!($5 & 16)) {
      break label$5
     }
     label$6 : {
      if (!$2) {
       break label$6
      }
      $13 = SAFE_HEAP_LOAD_i32_1_1($4, 430);
      if (($13 | 0) == -1) {
       break label$6
      }
      if ((SAFE_HEAP_LOAD_i32_1_1(Math_imul($13, 104) + $6 | 0, 82) | 0) < (SAFE_HEAP_LOAD_i32_1_1(Math_imul($0, 104) + $6 | 0, 82) | 0)) {
       break label$5
      }
     }
     SAFE_HEAP_STORE_f32_4_4($10, 0, $1);
     break label$4;
    }
    label$7 : {
     if ($2) {
      break label$7
     }
     $0 = SAFE_HEAP_LOAD_i32_1_1(Math_imul($0, 104) + $6 | 0, 84);
     if (($0 | 0) == -1) {
      $2 = 0;
      break label$7;
     }
     $2 = Math_imul($0, 104) + $6 | 0;
    }
    if (!$2) {
     break label$3
    }
    $9 = SAFE_HEAP_LOAD_f32_4_4($2, 16);
    $1 = Math_fround($9 - Math_fround($1 - $3));
    $1 = $1 >= $7 ? $1 : $7;
    SAFE_HEAP_STORE_f32_4_4($10, 0, Math_fround(Math_fround($3 + $9) - $1));
    SAFE_HEAP_STORE_f32_4_4($2, 16, $1);
    if (!((SAFE_HEAP_LOAD_i32_4_4($2, 0) | $5) & 8)) {
     break label$4
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($4, 84);
    label$9 : {
     if (($2 | 0) <= 0) {
      $3 = Math_fround(0.0);
      $7 = Math_fround(0.0);
      break label$9;
     }
     $7 = Math_fround(0.0);
     $1 = Math_fround(0.0);
     $0 = 0;
     while (1) {
      $5 = Math_imul($0, 104) + $6 | 0;
      label$12 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 90)) {
        break label$12
       }
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($5, 0) & 8)) {
        break label$12
       }
       $1 = Math_fround($1 + SAFE_HEAP_LOAD_f32_4_4($5, 16));
       $7 = Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($5, 24));
      }
      $3 = $1;
      $0 = $0 + 1 | 0;
      if (($2 | 0) != ($0 | 0)) {
       continue
      }
      break;
     };
    }
    if (($2 | 0) <= 0) {
     break label$4
    }
    $0 = 0;
    while (1) {
     $5 = Math_imul($0, 104) + $6 | 0;
     label$15 : {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 90)) {
       break label$15
      }
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($5, 0) & 8)) {
       break label$15
      }
      SAFE_HEAP_STORE_f32_4_4($5, 24, Math_fround($7 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 16) / $3)));
     }
     $0 = $0 + 1 | 0;
     if (($2 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($4, 448, 1);
  }
 }
 
 function ImGui__TableUpdateLayout_28ImGuiTable__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = Math_fround(0), $31 = 0, $32 = Math_fround(0), $33 = Math_fround(0);
  $18 = __stack_pointer - 48 | 0;
  __stack_pointer = $18;
  $31 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_1_1($0, 449, 1);
  SAFE_HEAP_STORE_i32_1_1($0, 417, 0);
  SAFE_HEAP_STORE_i64_8_8($0, 40, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($0 + 48 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_1_1($0, 428, 255);
  $6 = SAFE_HEAP_LOAD_f32_4_4($31 + 5476 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0, 156, $6 <= Math_fround(1.0) ? Math_fround(1.0) : $6);
  $14 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  label$1 : {
   if (($5 | 0) <= 0) {
    $10 = -1;
    break label$1;
   }
   $10 = -1;
   $6 = Math_fround(0.0);
   while (1) {
    $7 = $2;
    $5 = $1;
    $1 = SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 24) + $11 | 0, 0);
    if (($11 | 0) != ($1 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 449, 0)
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($1, 104) | 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($0, 419) | 0) <= ($1 | 0)) {
     TableSetupColumnFlags_28ImGuiTable__2c_20ImGuiTableColumn__2c_20int_29($0, $3, 0);
     SAFE_HEAP_STORE_i32_4_4($3, 48, 0);
     SAFE_HEAP_STORE_i32_2_2($3, 80, 65535);
     SAFE_HEAP_STORE_i32_4_4($3, 28, -1082130432);
    }
    $17 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    label$6 : {
     if ($17 & 4) {
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($3, 0) & 128)) {
       break label$6
      }
     }
     SAFE_HEAP_STORE_i32_1_1($3, 92, 1);
    }
    $15 = $3 + 91 | 0;
    $16 = SAFE_HEAP_LOAD_i32_1_U_1($3, 91);
    $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 92);
    if (($16 | 0) != ($2 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($15, 0, $2);
     SAFE_HEAP_STORE_i32_1_1($0, 448, 1);
    }
    $2 = (SAFE_HEAP_LOAD_i32_1_U_1($15, 0) | 0) != 0;
    $16 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    $15 = $2 & !($16 & 1);
    SAFE_HEAP_STORE_i32_1_1($3, 90, $15);
    $2 = SAFE_HEAP_LOAD_i32_1_1($3, 86);
    if (!($15 | ($2 | 0) == -1)) {
     SAFE_HEAP_STORE_i32_1_1($0, 444, 1)
    }
    if (!($17 & 67108864 | ($2 | 0) <= 0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 444, 1)
    }
    $19 = $16 & 16;
    if (SAFE_HEAP_LOAD_f32_4_4($3 + ($19 ? 16 : 24) | 0, 0) < Math_fround(0.0)) {
     SAFE_HEAP_STORE_i32_2_1($3, 99, 1799)
    }
    label$12 : {
     if (!$15) {
      SAFE_HEAP_STORE_i32_1_1($3, 83, 255);
      $1 = $12;
      $2 = $13;
      break label$12;
     }
     SAFE_HEAP_STORE_i32_1_1($3, 85, 255);
     SAFE_HEAP_STORE_i32_1_1($3, 84, $10);
     label$14 : {
      if (($10 | 0) != -1) {
       SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($10, 104) | 0, 85, $1);
       break label$14;
      }
      SAFE_HEAP_STORE_i32_1_1($0, 428, $1);
     }
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 417);
     SAFE_HEAP_STORE_i32_1_1($0, 417, $2 + 1 | 0);
     SAFE_HEAP_STORE_i32_1_1($3, 83, $2);
     $15 = SAFE_HEAP_LOAD_i64_8_8($0, 48);
     $10 = i64toi32_i32$HIGH_BITS;
     $22 = $1 & 31;
     if (($1 & 63) >>> 0 >= 32) {
      $20 = 1 << $22;
      $2 = 0;
     } else {
      $2 = 1 << $22;
      $20 = $2 - 1 & 1 >>> 32 - $22;
     }
     SAFE_HEAP_STORE_i64_8_8($0, 48, $2 | $15, $10 | $20);
     $2 = SAFE_HEAP_LOAD_i64_1_1($3, 82);
     $10 = $2 & 31;
     if (($2 & 63) >>> 0 >= 32) {
      $20 = 1 << $10;
      $2 = 0;
     } else {
      $2 = 1 << $10;
      $20 = $2 - 1 & 1 >>> 32 - $10;
     }
     SAFE_HEAP_STORE_i64_8_8($0, 40, $2 | SAFE_HEAP_LOAD_i64_8_8($0, 40), i64toi32_i32$HIGH_BITS | $20);
     if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 97)) {
      $9 = SAFE_HEAP_LOAD_f32_4_4($3, 64);
      $4 = SAFE_HEAP_LOAD_f32_4_4($3, 68);
      $4 = $4 <= $9 ? $9 : $4;
      $9 = SAFE_HEAP_LOAD_f32_4_4($3, 52);
      $4 = Math_fround($4 - $9);
      if (!($16 & 8192)) {
       $9 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 76) - $9);
       $4 = $4 >= $9 ? $4 : $9;
      }
      label$19 : {
       if (!$19) {
        break label$19
       }
       $9 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
       if (!($9 > Math_fround(0.0))) {
        break label$19
       }
       $4 = $17 & 1 ? ($16 & 32 ? $9 : $4) : $9;
      }
      $9 = SAFE_HEAP_LOAD_f32_4_4($0, 156);
      SAFE_HEAP_STORE_f32_4_4($3, 20, $4 >= $9 ? $4 : $9);
     }
     $10 = $16 & 32;
     $2 = !$10;
     label$22 : {
      if (!$19) {
       break label$22
      }
      $4 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
      if (!($4 > Math_fround(0.0)) | !$10) {
       break label$22
      }
      SAFE_HEAP_STORE_f32_4_4($3, 20, $4);
     }
     $10 = $1;
     $1 = $2 | $12;
     $2 = $13 | (SAFE_HEAP_LOAD_i32_1_U_1($3, 99) | 0) != 0;
     $4 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
     if ($16 & 8) {
      $8 = Math_fround($8 + $4);
      $7 = $7 + 1 | 0;
      break label$12;
     }
     $6 = $4 <= $6 ? $6 : $4;
     $5 = $5 + 1 | 0;
    }
    $4 = $6;
    $9 = $8;
    $12 = $1;
    $13 = $2;
    $2 = $7;
    $1 = $5;
    $17 = $1;
    $11 = $11 + 1 | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    if (($11 | 0) < ($5 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = $5;
  $27 = $9;
  $21 = $4;
  $16 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$24 : {
   if (!($16 & 8)) {
    break label$24
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 416) | $16 & 134217728) {
    break label$24
   }
   SAFE_HEAP_STORE_i32_1_1($0, 444, 1);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 429, $10);
  label$25 : {
   if (!($13 & 1)) {
    break label$25
   }
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 356);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
   if (($7 | 0) != ($5 | 0)) {
    SAFE_HEAP_STORE_i32_1_1($5, 143, 0)
   }
   if (!($13 & 1)) {
    break label$25
   }
   SAFE_HEAP_STORE_i32_1_1($0, 448, 1);
  }
  SAFE_HEAP_STORE_i32_2_2($0, 430, 65535);
  label$27 : {
   if (($1 | 0) <= 0) {
    $4 = Math_fround(0.0);
    $9 = Math_fround(0.0);
    break label$27;
   }
   $28 = Math_fround($2 | 0);
   $19 = SAFE_HEAP_LOAD_i64_8_8($0, 48);
   $15 = i64toi32_i32$HIGH_BITS;
   $2 = $14 & 57344;
   $11 = ($2 | 0) != 24576;
   $13 = ($2 | 0) != 16384;
   $5 = 0;
   $10 = 0;
   $6 = Math_fround(0.0);
   $8 = Math_fround(0.0);
   while (1) {
    $7 = $5 & 31;
    if (($5 & 63) >>> 0 >= 32) {
     $20 = 1 << $7;
     $2 = 0;
    } else {
     $2 = 1 << $7;
     $20 = $2 - 1 & 1 >>> 32 - $7;
    }
    $7 = $2;
    if ($7 & $19 | $15 & $20) {
     $14 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
     $3 = $14 + Math_imul($5, 104) | 0;
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     $22 = $2 & 32;
     label$32 : {
      if ($2 & 16) {
       $4 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
       if (!$13) {
        $4 = SAFE_HEAP_LOAD_i32_1_U_1($3, 99) ? $21 : $22 ? $21 : $4
       }
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 99);
       label$36 : {
        if (!$2) {
         if (!$22) {
          break label$36
         }
         if (!(SAFE_HEAP_LOAD_i64_8_8($0, 64) & $7 | $20 & i64toi32_i32$HIGH_BITS)) {
          break label$36
         }
        }
        SAFE_HEAP_STORE_f32_4_4($3, 16, $4);
       }
       label$38 : {
        if ($2 >>> 0 < 2) {
         break label$38
        }
        if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 443)) {
         break label$38
        }
        if (SAFE_HEAP_LOAD_i32_1_U_1($3, 97) & 255) {
         break label$38
        }
        $9 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
        $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 156) * Math_fround(4.0));
        SAFE_HEAP_STORE_f32_4_4($3, 16, $4 <= $9 ? $9 : $4);
       }
       $6 = Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($3, 16));
       break label$32;
      }
      $7 = $3 + 24 | 0;
      label$39 : {
       label$40 : {
        if (SAFE_HEAP_LOAD_i32_1_U_1($3, 99)) {
         break label$40
        }
        if (SAFE_HEAP_LOAD_f32_4_4($3, 24) < Math_fround(0.0)) {
         break label$40
        }
        if (!$22) {
         break label$39
        }
       }
       $4 = SAFE_HEAP_LOAD_f32_4_4($3, 28);
       $2 = $4 > Math_fround(0.0);
       $4 = $2 ? $4 : Math_fround(1.0);
       if (!($2 | $11)) {
        $4 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 20) / $27) * $28)
       }
       SAFE_HEAP_STORE_f32_4_4($7, 0, $4);
      }
      $4 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
      $2 = SAFE_HEAP_LOAD_i32_1_1($0, 430);
      label$43 : {
       if (($2 | 0) != -1) {
        if ((SAFE_HEAP_LOAD_i32_1_1($14 + Math_imul($2, 104) | 0, 82) | 0) <= (SAFE_HEAP_LOAD_i32_1_1($3, 82) | 0)) {
         break label$43
        }
       }
       SAFE_HEAP_STORE_i32_1_1($0, 430, $5);
      }
      $8 = Math_fround($8 + $4);
      $2 = SAFE_HEAP_LOAD_i32_1_1($0, 431);
      label$45 : {
       if (($2 | 0) != -1) {
        if ((SAFE_HEAP_LOAD_i32_1_1($14 + Math_imul($2, 104) | 0, 82) | 0) >= (SAFE_HEAP_LOAD_i32_1_1($3, 82) | 0)) {
         break label$45
        }
       }
       SAFE_HEAP_STORE_i32_1_1($0, 431, $5);
      }
     }
     SAFE_HEAP_STORE_i32_1_1($3, 97, 0);
     $4 = SAFE_HEAP_LOAD_f32_4_4($0, 164);
     $6 = Math_fround(Math_fround($4 + $4) + $6);
    }
    $4 = $8;
    $9 = $6;
    $5 = $5 + 1 | 0;
    $10 = $5 ? $10 : $10 + 1 | 0;
    if ($10 | ($1 | 0) != ($5 | 0)) {
     continue
    }
    break;
   };
  }
  $21 = $4;
  SAFE_HEAP_STORE_i32_1_1($0, 418, $17);
  $6 = SAFE_HEAP_LOAD_f32_4_4($0, 160);
  $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 172) + SAFE_HEAP_LOAD_f32_4_4($0, 176));
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 417);
  $4 = Math_fround(Math_fround($6 + $6) + Math_fround($4 * Math_fround($5 - 1 | 0)));
  $6 = SAFE_HEAP_LOAD_f32_4_4($0 + 252 | 0, 0);
  $2 = $0 + 248 | 0;
  $27 = SAFE_HEAP_LOAD_f32_4_4($0, 244);
  label$47 : {
   label$48 : {
    if (!($16 & 16777216)) {
     break label$48
    }
    if (SAFE_HEAP_LOAD_f32_4_4($0, 188) != Math_fround(0.0)) {
     break label$48
    }
    $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0, 260));
    break label$47;
   }
   $8 = Math_fround($6 - $27);
  }
  $26 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($0, 164);
  SAFE_HEAP_STORE_f32_4_4($0, 192, Math_fround(Math_fround(Math_fround($6 + $6) * Math_fround($5 | 0)) + $4));
  $4 = Math_fround(Math_fround($8 - $4) - $9);
  label$49 : {
   if (($1 | 0) <= 0) {
    $8 = $4;
    break label$49;
   }
   $7 = SAFE_HEAP_LOAD_i64_8_8($0, 48);
   $13 = i64toi32_i32$HIGH_BITS;
   $5 = 0;
   $10 = 0;
   $6 = $4;
   while (1) {
    $2 = $5 & 31;
    if ((($5 & 63) >>> 0 >= 32 ? $13 >>> $2 | 0 : ((1 << $2) - 1 & $13) << 32 - $2 | $7 >>> $2) & 1) {
     $11 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($5, 104) | 0;
     $2 = SAFE_HEAP_LOAD_i32_4_4($11, 0);
     if ($2 & 8) {
      $9 = Math_fround($4 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 24) / $21));
      $8 = SAFE_HEAP_LOAD_f32_4_4($0, 156);
      $8 = Math_fround(($8 <= $9 ? $9 : $8) + Math_fround(.009999999776482582));
      label$56 : {
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        $3 = ~~$8;
        break label$56;
       }
       $3 = -2147483648;
      }
      $8 = Math_fround($3 | 0);
      SAFE_HEAP_STORE_f32_4_4($11, 16, $8);
      $6 = Math_fround($6 - $8);
     }
     label$58 : {
      if ((SAFE_HEAP_LOAD_i32_1_U_1($11, 85) | 0) != 255) {
       break label$58
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 430) | 0) == 255) {
       break label$58
      }
      SAFE_HEAP_STORE_i32_4_4($11, 0, $2 | 1073741824);
     }
     $9 = SAFE_HEAP_LOAD_f32_4_4($11, 16);
     $8 = SAFE_HEAP_LOAD_f32_4_4($0, 156);
     $8 = $8 <= $9 ? $9 : $8;
     label$59 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $2 = ~~$8;
       break label$59;
      }
      $2 = -2147483648;
     }
     $8 = Math_fround($2 | 0);
     SAFE_HEAP_STORE_f32_4_4($11, 4, $8);
     SAFE_HEAP_STORE_f32_4_4($0, 192, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 192) + $8));
    }
    $8 = $6;
    $5 = $5 + 1 | 0;
    $10 = $5 ? $10 : $10 + 1 | 0;
    if ($10 | ($1 | 0) != ($5 | 0)) {
     continue
    }
    break;
   };
  }
  $6 = $8;
  label$61 : {
   if (!($6 >= Math_fround(1.0)) | $16 & 524288 | (!($21 > Math_fround(0.0)) | !($6 >= Math_fround(1.0))) | ($1 | 0) <= 0) {
    break label$61
   }
   $13 = SAFE_HEAP_LOAD_i64_8_8($0, 40);
   $11 = i64toi32_i32$HIGH_BITS;
   $2 = $1;
   $10 = 0;
   while (1) {
    $1 = $1 - 1 | 0;
    $5 = $1 & 31;
    label$63 : {
     if (!((($1 & 63) >>> 0 >= 32 ? $11 >>> $5 | 0 : ((1 << $5) - 1 & $11) << 32 - $5 | $13 >>> $5) & 1)) {
      break label$63
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul(SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 24) + $1 | 0, 0), 104) | 0;
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($5, 0) & 8)) {
      break label$63
     }
     SAFE_HEAP_STORE_f32_4_4($5, 16, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 16) + Math_fround(1.0)));
     SAFE_HEAP_STORE_f32_4_4($5, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 4) + Math_fround(1.0)));
     $6 = Math_fround($6 + Math_fround(-1.0));
    }
    if (!($21 > Math_fround(0.0)) | !($6 >= Math_fround(1.0))) {
     break label$61
    }
    $7 = $10;
    $5 = $7 - 1 | 0;
    $10 = $5 + 1 | 0;
    $3 = $5;
    $5 = $2;
    $2 = $2 - 1 | 0;
    $10 = ($2 | 0) != -1 ? $10 : $3;
    if ($5 >>> 0 > 1 & ($7 | 0) >= 0 | ($7 | 0) > 0) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_2_2($0, 420, 65535);
  $21 = SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0);
  $9 = SAFE_HEAP_LOAD_f32_4_4($0, 212);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 224 | 0, 0);
  $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0);
  $6 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($0, 180));
  SAFE_HEAP_STORE_f32_4_4($18 + 44 | 0, 0, $4 >= $6 ? $4 : $6);
  SAFE_HEAP_STORE_f32_4_4($18, 40, $21);
  SAFE_HEAP_STORE_f32_4_4($18, 36, $8);
  SAFE_HEAP_STORE_f32_4_4($18, 32, $9);
  $22 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($18 + 32 | 0, 0);
  $6 = $27;
  $2 = SAFE_HEAP_LOAD_i32_1_1($0, 436);
  if (($2 | 0) > 0) {
   $6 = SAFE_HEAP_LOAD_f32_4_4($0, 212)
  }
  SAFE_HEAP_STORE_i64_8_8($0, 56, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($0 - -64 | 0, 0, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $13 = $1;
  if (($1 | 0) > 0) {
   $19 = $0 + 40 | 0;
   $14 = $0 + 56 | 0;
   $23 = SAFE_HEAP_LOAD_f32_4_4($0 + 264 | 0, 0);
   $24 = (wasm2js_scratch_store_i32(2, SAFE_HEAP_LOAD_i32_4_4($0 + 272 | 0, 0)), wasm2js_scratch_load_f32());
   $25 = (wasm2js_scratch_store_i32(2, SAFE_HEAP_LOAD_i32_4_4($0 + 268 | 0, 0)), wasm2js_scratch_load_f32());
   $5 = 0;
   $10 = 0;
   $6 = Math_fround(Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($0, 160)) - SAFE_HEAP_LOAD_f32_4_4($0, 172));
   $1 = ($2 | 0) > 0;
   $2 = 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($0, 260);
   while (1) {
    $11 = $1;
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
    $16 = SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 24) + $5 | 0, 0);
    $3 = $1 + Math_imul($16, 104) | 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($0, 434) | 0) <= 0) {
     $1 = (SAFE_HEAP_LOAD_i32_1_1($0, 436) | 0) > ($16 | 0)
    } else {
     $1 = 1
    }
    SAFE_HEAP_STORE_i32_1_1($3, 98, $1);
    label$70 : {
     if (!($11 & 1)) {
      break label$70
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($0, 436) | 0) != ($2 | 0)) {
      break label$70
     }
     $11 = 0;
     $6 = Math_fround($6 + Math_fround($27 - SAFE_HEAP_LOAD_f32_4_4($0, 212)));
    }
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) & -251658241);
    $7 = SAFE_HEAP_LOAD_i64_8_8($19, 0);
    $1 = i64toi32_i32$HIGH_BITS;
    $13 = $5 & 31;
    label$72 : {
     if (!((($5 & 63) >>> 0 >= 32 ? $1 >>> $13 | 0 : ((1 << $13) - 1 & $1) << 32 - $13 | $7 >>> $13) & 1)) {
      SAFE_HEAP_STORE_f32_4_4($3, 52, $6);
      SAFE_HEAP_STORE_f32_4_4($3, 12, $6);
      SAFE_HEAP_STORE_f32_4_4($3, 8, $6);
      SAFE_HEAP_STORE_i32_4_4($3, 4, 0);
      SAFE_HEAP_STORE_i32_4_1($3, 93, 16777216);
      SAFE_HEAP_STORE_i32_4_4($3, 60, 1065353216);
      $4 = $6 < $8 ? $8 : $6 > $25 ? $25 : $6;
      SAFE_HEAP_STORE_f32_4_4($3, 32, $4);
      SAFE_HEAP_STORE_f32_4_4($3 + 36 | 0, 0, $23 > $26 ? $23 : $24 < $26 ? $24 : $26);
      SAFE_HEAP_STORE_f32_4_4($3 + 44 | 0, 0, $23 > Math_fround(3402823466385288598117041.0e14) ? $23 : $24 < Math_fround(3402823466385288598117041.0e14) ? $24 : Math_fround(3402823466385288598117041.0e14));
      SAFE_HEAP_STORE_f32_4_4($3 + 40 | 0, 0, $4);
      break label$72;
     }
     label$74 : {
      if (!$22) {
       break label$74
      }
      $4 = SAFE_HEAP_LOAD_f32_4_4($31, 228);
      if (!(SAFE_HEAP_LOAD_f32_4_4($3, 32) <= $4)) {
       break label$74
      }
      if (!(SAFE_HEAP_LOAD_f32_4_4($3 + 40 | 0, 0) > $4)) {
       break label$74
      }
      SAFE_HEAP_STORE_i32_1_1($0, 420, $16);
     }
     SAFE_HEAP_STORE_f32_4_4($3, 8, $6);
     $29 = SAFE_HEAP_LOAD_f32_4_4($0, 164);
     $32 = Math_fround($29 + $29);
     $33 = SAFE_HEAP_LOAD_f32_4_4($0, 156);
     $28 = SAFE_HEAP_LOAD_f32_4_4($0, 172);
     $30 = SAFE_HEAP_LOAD_f32_4_4($0, 176);
     $4 = Math_fround(Math_fround(Math_fround($32 + $33) + $28) + $30);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
     label$75 : {
      if ($1 & 16777216) {
       $7 = SAFE_HEAP_LOAD_i32_1_1($0, 435);
       $1 = SAFE_HEAP_LOAD_i32_1_1($3, 82);
       $9 = Math_fround(3402823466385288598117041.0e14);
       if (($7 | 0) <= ($1 | 0)) {
        break label$75
       }
       $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 268) - Math_fround(Math_fround($7 - $1 | 0) * $4)) - SAFE_HEAP_LOAD_f32_4_4($3, 8)) - SAFE_HEAP_LOAD_f32_4_4($0, 160)) - $29) - $30);
       break label$75;
      }
      $9 = Math_fround(3402823466385288598117041.0e14);
      if ($1 & 262144) {
       break label$75
      }
      $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 252) - Math_fround(Math_fround((SAFE_HEAP_LOAD_i32_1_1($3, 83) ^ -1) + SAFE_HEAP_LOAD_i32_1_1($0, 417) | 0) * $4)) - SAFE_HEAP_LOAD_f32_4_4($3, 8)) - $30) - $32) - SAFE_HEAP_LOAD_f32_4_4($0, 160));
     }
     SAFE_HEAP_STORE_f32_4_4($3, 52, Math_fround(Math_fround($6 + $29) + $28));
     SAFE_HEAP_STORE_i32_1_1($3, 94, 1);
     $21 = $6 < $8 ? $8 : $6 > $25 ? $25 : $6;
     SAFE_HEAP_STORE_f32_4_4($3, 32, $21);
     SAFE_HEAP_STORE_f32_4_4($3 + 36 | 0, 0, $23 > $26 ? $23 : $24 < $26 ? $24 : $26);
     SAFE_HEAP_STORE_f32_4_4($3 + 44 | 0, 0, $23 > Math_fround(3402823466385288598117041.0e14) ? $23 : $24 < Math_fround(3402823466385288598117041.0e14) ? $24 : Math_fround(3402823466385288598117041.0e14));
     $4 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
     $9 = $4 < $9 ? $4 : $9;
     $4 = SAFE_HEAP_LOAD_f32_4_4($3, 16);
     $4 = $4 < $33 ? $4 : $33;
     $9 = $4 <= $9 ? $9 : $4;
     SAFE_HEAP_STORE_f32_4_4($3, 4, $9);
     $4 = Math_fround($9 * Math_fround(.6499999761581421));
     label$77 : {
      if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
       $1 = ~~$4;
       break label$77;
      }
      $1 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($3, 60, Math_fround($1 | 0));
     $4 = Math_fround($32 + Math_fround($30 + Math_fround($28 + Math_fround($6 + $9))));
     SAFE_HEAP_STORE_f32_4_4($3, 12, $4);
     SAFE_HEAP_STORE_f32_4_4($3, 56, Math_fround(Math_fround($4 - $29) - $30));
     $4 = $4 < $8 ? $8 : $4 > $25 ? $25 : $4;
     SAFE_HEAP_STORE_f32_4_4($3 + 40 | 0, 0, $4);
     $17 = $4 > $21;
     SAFE_HEAP_STORE_i32_1_1($3, 93, $17);
     label$79 : {
      label$80 : {
       label$81 : {
        if ($17) {
         $15 = SAFE_HEAP_LOAD_i64_8_8($14, 0);
         $13 = i64toi32_i32$HIGH_BITS;
         $7 = $16 & 31;
         if (($16 & 63) >>> 0 >= 32) {
          $7 = 1 << $7;
          $1 = 0;
         } else {
          $1 = 1 << $7;
          $7 = $1 - 1 & 1 >>> 32 - $7;
         }
         SAFE_HEAP_STORE_i64_8_8($14, 0, $1 | $15, $7 | $13);
         break label$81;
        }
        if (SAFE_HEAP_LOAD_i32_1_U_1($3, 99)) {
         break label$81
        }
        $1 = SAFE_HEAP_LOAD_i32_1_U_1($3, 100);
        SAFE_HEAP_STORE_i32_1_1($3, 95, ($1 | 0) != 0);
        if (!$1) {
         break label$79
        }
        break label$80;
       }
       SAFE_HEAP_STORE_i32_1_1($3, 95, 1);
      }
      $13 = SAFE_HEAP_LOAD_i64_8_8($0, 64);
      $7 = i64toi32_i32$HIGH_BITS;
      $15 = $16 & 31;
      if (($16 & 63) >>> 0 >= 32) {
       $20 = 1 << $15;
       $1 = 0;
      } else {
       $1 = 1 << $15;
       $20 = $1 - 1 & 1 >>> 32 - $15;
      }
      SAFE_HEAP_STORE_i64_8_8($0, 64, $1 | $13, $7 | $20);
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($3, 90)) {
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 455)
     } else {
      $1 = 1
     }
     SAFE_HEAP_STORE_i32_1_1($3, 96, $1);
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0) | ($17 ? 50331648 : 16777216);
     SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
     if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 86) | 0) != 255) {
      SAFE_HEAP_STORE_i32_4_4($3, 0, $1 | 67108864)
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 420) | 0) == ($16 & 255)) {
      SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) | 134217728)
     }
     $4 = SAFE_HEAP_LOAD_f32_4_4($3 + 52 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($3, 76, $4);
     SAFE_HEAP_STORE_f32_4_4($3, 64, $4);
     SAFE_HEAP_STORE_f32_4_4($3, 68, $4);
     SAFE_HEAP_STORE_f32_4_4($3, 72, $4);
     if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 455)) {
      SAFE_HEAP_STORE_i32_1_1($3, 99, SAFE_HEAP_LOAD_i32_1_U_1($3, 99) >>> 1 | 0);
      SAFE_HEAP_STORE_i32_1_1($3, 100, SAFE_HEAP_LOAD_i32_1_U_1($3, 100) >>> 1 | 0);
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($0, 436) | 0) > ($2 | 0)) {
      $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 12 | 0, 0) + Math_fround(1.0));
      $8 = $4 < $8 ? $8 : $4 > $25 ? $25 : $4;
     }
     $2 = $2 + 1 | 0;
     $4 = $6;
     $6 = SAFE_HEAP_LOAD_f32_4_4($0, 164);
     $6 = Math_fround($4 + Math_fround(Math_fround($6 + $6) + Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 4 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0, 172)) + SAFE_HEAP_LOAD_f32_4_4($0, 176))));
    }
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
    $13 = $7;
    $5 = $5 + 1 | 0;
    $10 = $5 ? $10 : $10 + 1 | 0;
    $1 = $11;
    $11 = $5 >>> 0 < $7 >>> 0;
    $7 = $7 >> 31;
    if ($11 & ($7 | 0) >= ($10 | 0) | ($7 | 0) > ($10 | 0)) {
     continue
    }
    break;
   };
  }
  $8 = SAFE_HEAP_LOAD_f32_4_4($0, 244);
  $6 = SAFE_HEAP_LOAD_f32_4_4((SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul(SAFE_HEAP_LOAD_i32_1_1($0, 429), 104) | 0) + 40 | 0, 0);
  $8 = $6 <= $8 ? $8 : $6;
  label$90 : {
   if (!$22) {
    break label$90
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 420) | 0) != 255) {
    break label$90
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4($31 + 228 | 0, 0) >= $8)) {
    break label$90
   }
   SAFE_HEAP_STORE_i32_1_1($0, 420, $13);
  }
  label$91 : {
   if ($12 & 1) {
    break label$91
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   if (!($1 & 1)) {
    break label$91
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1 & -2);
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 431) | 0) != 255) {
   SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) & -65537)
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 6 | 0, 0) & 1) {
   SAFE_HEAP_STORE_f32_4_4($0, 220, $8);
   SAFE_HEAP_STORE_f32_4_4($0 + 252 | 0, 0, $8);
   $1 = $0 + 268 | 0;
   $6 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   SAFE_HEAP_STORE_f32_4_4($1, 0, $6 < $8 ? $6 : $8);
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
  $1 = $0 + 244 | 0;
  SAFE_HEAP_STORE_i64_8_4($2, 480, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($2 + 488 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_f32_4_4($0, 144, SAFE_HEAP_LOAD_f32_4_4($0, 260));
  SAFE_HEAP_STORE_f32_4_4($0, 148, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
  $12 = (SAFE_HEAP_LOAD_i32_1_1($0, 434) | 0) > 0 ? 2 : 1;
  $11 = 1;
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 6 | 0, 0) & 16)) {
   $11 = SAFE_HEAP_LOAD_i32_1_1($0, 417)
  }
  $13 = 1;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) <= (SAFE_HEAP_LOAD_i32_1_1($0, 417) | 0)) {
   $2 = SAFE_HEAP_LOAD_i64_8_8($0, 56);
   $1 = i64toi32_i32$HIGH_BITS;
   $13 = (SAFE_HEAP_LOAD_i64_8_8($0, 48) | 0) != ($2 | 0) | (i64toi32_i32$HIGH_BITS | 0) != ($1 | 0);
  }
  $1 = $13 + (($12 + 1 | 0) + Math_imul($11, $12) | 0) | 0;
  ImDrawListSplitter__Split_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 376), SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 360), 580), $1);
  SAFE_HEAP_STORE_i32_1_1($0, 439, 1);
  $7 = $13 ? $1 - 1 | 0 : -1;
  SAFE_HEAP_STORE_i32_1_1($0, 438, $7);
  $1 = SAFE_HEAP_LOAD_i32_1_1($0, 434);
  SAFE_HEAP_STORE_i32_1_1($0, 440, ($1 | 0) <= 0 ? 1 : $11 + 2 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  if (($5 | 0) > 0) {
   $12 = ($1 | 0) > 0 ? $11 + 1 | 0 : 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   $11 = 2;
   $13 = 0;
   while (1) {
    label$5 : {
     label$60 : {
      $1 = Math_imul($13, 104) + $2 | 0;
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 93)) {
       break label$60
      }
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 94) & 255)) {
       break label$60
      }
      SAFE_HEAP_STORE_i32_1_1($1, 89, $11 + $12 | 0);
      SAFE_HEAP_STORE_i32_1_1($1, 88, $11);
      $11 = ((SAFE_HEAP_LOAD_i32_4_4($0, 4) ^ -1) >>> 20 & 1) + $11 | 0;
      break label$5;
     }
     SAFE_HEAP_STORE_i32_1_1($1, 88, $7);
     SAFE_HEAP_STORE_i32_1_1($1, 89, $7);
    }
    SAFE_HEAP_STORE_i32_1_1($1, 87, SAFE_HEAP_LOAD_i32_1_U_1($1, 88));
    $1 = $13 + 1 | 0;
    $13 = $1;
    if (($1 | 0) != ($5 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i64_8_4($0, 276, SAFE_HEAP_LOAD_i64_8_4($0, 260), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 284 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 268 | 0, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 356);
  $5 = SAFE_HEAP_LOAD_i64_8_4($1 + 504 | 0, 0);
  $12 = i64toi32_i32$HIGH_BITS;
  $2 = SAFE_HEAP_LOAD_i64_8_4($1, 496);
  $1 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_4($0, 308, SAFE_HEAP_LOAD_i64_8_4($0, 324), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 316 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 332 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0, 292, $2, $1);
  SAFE_HEAP_STORE_i64_8_4($0 + 300 | 0, 0, $5, $12);
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 1) {
   $17 = 0;
   $19 = 0;
   $14 = __stack_pointer - 32 | 0;
   __stack_pointer = $14;
   $10 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   if (($10 | 0) > 0) {
    $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 224 | 0, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0);
    $6 = Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($0, 180));
    $8 = $6 <= $8 ? $8 : $6;
    $6 = Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($0, 184));
    $13 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $7 = $0 + 5 | 0;
    while (1) {
     $2 = SAFE_HEAP_LOAD_i64_8_8($0, 40);
     $1 = i64toi32_i32$HIGH_BITS;
     $12 = $17 & 31;
     label$31 : {
      if (!((($17 & 63) >>> 0 >= 32 ? $1 >>> $12 | 0 : ((1 << $12) - 1 & $1) << 32 - $12 | $2 >>> $12) & 1)) {
       break label$31
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
      $15 = SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 24) + $17 | 0, 0);
      $5 = Math_imul($15, 104);
      $11 = $1 + $5 | 0;
      if (SAFE_HEAP_LOAD_i32_4_4($11, 0) & 1073741856) {
       break label$31
      }
      $12 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0) & 8;
      if ($12) {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 445)) {
        break label$31
       }
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($11, 93)) {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 424) | 0) != ($15 & 255)) {
        break label$31
       }
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
      $1 = SAFE_HEAP_LOAD_i32_2_2($0, 96);
      $4 = SAFE_HEAP_LOAD_f32_4_4($11, 12);
      SAFE_HEAP_STORE_f32_4_4($14, 28, $12 ? $6 : $8);
      SAFE_HEAP_STORE_f32_4_4($14, 20, $9);
      SAFE_HEAP_STORE_f32_4_4($14, 24, Math_fround($4 + Math_fround(4.0)));
      SAFE_HEAP_STORE_f32_4_4($14, 16, Math_fround($4 + Math_fround(-4.0)));
      $1 = (($2 + $15 | 0) + Math_imul($1, $10) | 0) + 1 | 0;
      ImGui__KeepAliveID_28unsigned_20int_29($1);
      SAFE_HEAP_STORE_i32_1_1($14, 15, 0);
      SAFE_HEAP_STORE_i32_1_1($14, 14, 0);
      label$64 : {
       if (!ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($14 + 16 | 0, $1, $14 + 15 | 0, $14 + 14 | 0, 268560)) {
        break label$64
       }
       if (!ImGui__IsMouseDoubleClicked_28int_29(0)) {
        break label$64
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + $5 | 0;
       if (SAFE_HEAP_LOAD_i32_1_U_1($1, 90)) {
        SAFE_HEAP_STORE_i32_1_1($1, 100, 1);
        SAFE_HEAP_STORE_i32_1_1($0, 422, $15);
       }
       ImGui__ClearActiveID_28_29();
       SAFE_HEAP_STORE_i32_1_1($14, 14, 0);
       SAFE_HEAP_STORE_i32_1_1($14, 15, 0);
      }
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($14, 14);
      if ($2) {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 424) | 0) == 255) {
        $1 = SAFE_HEAP_LOAD_i32_1_1($0, 429);
        if (($1 | 0) == -1) {
         $4 = Math_fround(-3402823466385288598117041.0e14)
        } else {
         $4 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($1, 104) | 0, 12)
        }
        SAFE_HEAP_STORE_f32_4_4($0, 204, $4);
       }
       SAFE_HEAP_STORE_i32_1_1($0, 423, $15);
       SAFE_HEAP_STORE_i32_2_2($0, 98, SAFE_HEAP_LOAD_i32_2_U_2($0, 96));
      }
      label$125 : {
       if (SAFE_HEAP_LOAD_i32_1_U_1($14, 15)) {
        if ($2) {
         break label$125
        }
        if (SAFE_HEAP_LOAD_f32_4_4($13, 7128) > Math_fround(.05999999865889549)) {
         break label$125
        }
        break label$31;
       }
       if (!$2) {
        break label$31
       }
      }
      SAFE_HEAP_STORE_i32_1_1($0, 421, $15);
      ImGui__SetMouseCursor_28int_29(4);
     }
     $17 = $17 + 1 | 0;
     $19 = $17 ? $19 : $19 + 1 | 0;
     $10 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
     $1 = $10 >> 31;
     if ($10 >>> 0 > $17 >>> 0 & ($1 | 0) >= ($19 | 0) | ($1 | 0) > ($19 | 0)) {
      continue
     }
     break;
    };
   }
   __stack_pointer = $14 + 32 | 0;
  }
  SAFE_HEAP_STORE_i32_1_1($0, 445, 0);
  SAFE_HEAP_STORE_i32_1_1($0, 441, 1);
  SAFE_HEAP_STORE_i32_4_4($0, 184, 0);
  label$95 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 446)) {
    break label$95
   }
   if ((SAFE_HEAP_LOAD_i32_2_U_2($0, 96) | 0) != (SAFE_HEAP_LOAD_i32_2_U_2($0, 98) | 0)) {
    break label$95
   }
   if (ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29(ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(1873, SAFE_HEAP_LOAD_i32_4_4($0, 0)), 321)) {
    label$10 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 143)) {
      break label$10
     }
     $1 = -1;
     $2 = SAFE_HEAP_LOAD_i32_1_1($0, 432);
     if (($2 | 0) >= 0) {
      $1 = (SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) <= ($2 | 0) ? -1 : $2
     }
     if (($1 | 0) == -1) {
      $2 = 0
     } else {
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($1, 104) | 0
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4) & 1;
     label$54 : {
      if (!$5) {
       break label$54
      }
      label$65 : {
       if (!$2) {
        break label$65
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($2, 0) & 32) {
        $2 = 0
       } else {
        $2 = (SAFE_HEAP_LOAD_i32_1_U_1($2, 90) | 0) != 0
       }
       if (!ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29(11008, 0, 0, $2)) {
        break label$65
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($1, 104) | 0;
       if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 90)) {
        break label$65
       }
       SAFE_HEAP_STORE_i32_1_1($2, 100, 1);
       SAFE_HEAP_STORE_i32_1_1($0, 422, $1);
      }
      label$8 : {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 418) | 0) == (SAFE_HEAP_LOAD_i32_1_U_1($0, 417) | 0)) {
        $1 = 8223;
        if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) & 57344) != 16384) {
         break label$8
        }
       }
       $1 = 8185;
      }
      if (!ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($1, 0, 0, 1)) {
       break label$54
      }
      $12 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
      if (($12 | 0) <= 0) {
       break label$54
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
      $1 = 0;
      while (1) {
       $7 = $2 + Math_imul($1, 104) | 0;
       label$11 : {
        if (!SAFE_HEAP_LOAD_i32_1_U_1($7, 90)) {
         if (!(SAFE_HEAP_LOAD_i32_1_U_1($7, 0) & 8)) {
          break label$11
         }
        }
        SAFE_HEAP_STORE_i32_2_1($7, 99, 258);
       }
       $1 = $1 + 1 | 0;
       if (($12 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $1 = $5;
     label$13 : {
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 2)) {
       break label$13
      }
      $1 = 1;
      if (!ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29(6359, 0, 0, !SAFE_HEAP_LOAD_i32_1_U_1($0, 449))) {
       break label$13
      }
      SAFE_HEAP_STORE_i32_1_1($0, 451, 1);
      $1 = 1;
     }
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 4)) {
      break label$10
     }
     if ($1) {
      ImGui__Separator_28_29()
     }
     ImGui__PushItemFlag_28int_2c_20bool_29(32, 1);
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) > 0) {
      $1 = 0;
      while (1) {
       $2 = $1;
       $7 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($1, 104) | 0;
       $12 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
       label$17 : {
        if ($12 & 1) {
         break label$17
        }
        label$18 : {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 441)) {
          $5 = 19354;
          if ((SAFE_HEAP_LOAD_i32_1_1($0, 419) | 0) <= ($2 | 0)) {
           break label$18
          }
         }
         $1 = SAFE_HEAP_LOAD_i32_2_2($7, 80);
         $5 = 19354;
         if (($1 | 0) == -1) {
          break label$18
         }
         $5 = SAFE_HEAP_LOAD_i32_4_4($0, 372) + $1 | 0;
        }
        $1 = $5;
        label$21 : {
         if ($1) {
          if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
           break label$21
          }
         }
         $1 = 16029;
        }
        $12 = $12 & 128;
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($7, 91);
        if ($5) {
         $12 = !$12 & (SAFE_HEAP_LOAD_i32_1_1($0, 417) | 0) > 1
        } else {
         $12 = !$12
        }
        if (!ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($1, 0, ($5 | 0) != 0, $12)) {
         break label$17
        }
        SAFE_HEAP_STORE_i32_1_1($7, 92, SAFE_HEAP_LOAD_i32_1_U_1($7 + 91 | 0, 0) ^ 1);
       }
       $1 = $2 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) > ($1 | 0)) {
        continue
       }
       break;
      };
     }
     ImGui__PopItemFlag_28_29();
    }
    ImGui__EndPopup_28_29();
    break label$95;
   }
   SAFE_HEAP_STORE_i32_1_1($0, 446, 0);
  }
  label$97 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 444)) {
    break label$97
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 8)) {
    break label$97
   }
   ImGui__TableSortSpecsBuild_28ImGuiTable__29($0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
  label$98 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 6 | 0, 0) & 16) {
    ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 376), SAFE_HEAP_LOAD_i32_4_4($1, 580), 2);
    break label$98;
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($1, 580);
   $12 = SAFE_HEAP_LOAD_i64_8_4($1, 496);
   $2 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($18, 24, $12, $2);
   $1 = SAFE_HEAP_LOAD_i64_8_4($1 + 504 | 0, 0);
   $0 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($18, 16, $1, $0);
   SAFE_HEAP_STORE_i64_8_8($18, 8, $12, $2);
   SAFE_HEAP_STORE_i64_8_8($18, 0, $1, $0);
   ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($5, $18 + 8 | 0, $18, 0);
  }
  __stack_pointer = $18 + 48 | 0;
 }
 
 function TableSetupColumnFlags_28ImGuiTable__2c_20ImGuiTableColumn__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  label$1 : {
   if ($2 & 24) {
    break label$1
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4) & 57344;
   if (!(($3 | 0) != 16384 & ($3 | 0) != 8192)) {
    $2 = $2 | 16;
    break label$1;
   }
   $2 = $2 | 8;
  }
  $3 = (SAFE_HEAP_LOAD_i32_4_4($0, 4) ^ -1) << 5 & 32 | $2;
  $2 = ($2 & 3072) == 3072 ? $3 | 512 : $3;
  if (!($2 & 196608)) {
   $2 = ((SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0) == ($1 | 0) ? 65536 : 131072) | $2
  }
  SAFE_HEAP_STORE_i32_1_1($1, 102, 0);
  $8 = SAFE_HEAP_LOAD_i32_1_U_1($1, 101) & 3;
  SAFE_HEAP_STORE_i32_1_1($1, 101, $8);
  SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) & 251658240 | $2);
  $9 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$7 : {
   if (!($9 & 8)) {
    break label$7
   }
   $3 = $2 & 17408;
   $7 = ($3 | 0) == 16384;
   $10 = $2 & 34816;
   $5 = ($10 | 0) == 32768;
   $6 = $5 ? ($7 ? 2 : 1) : $7;
   $2 = $7 << 1;
   $4 = $5 ? $2 | 4 : $2;
   $2 = $7 | ($5 ? ($7 ? 8 : 2) : 0);
   label$8 : {
    if ($3) {
     $5 = $4;
     $4 = $6;
     break label$8;
    }
    $5 = $4 | 2;
    $2 = 1 << ($6 << 1) | $2;
    $4 = $6 + 1 | 0;
   }
   if (!$10) {
    $5 = $5 | 4;
    $2 = $2 | 2 << ($4 << 1);
    $4 = $4 + 1 | 0;
   }
   $3 = $4;
   SAFE_HEAP_STORE_i32_1_1($1, 102, $2);
   $4 = !$3 | ($9 & 134217728) >>> 27;
   $6 = $4 | $5;
   $3 = $3 + $4 << 2 & 12 | $6 << 4;
   SAFE_HEAP_STORE_i32_1_1($1, 101, $3 | $8);
   if ($6 >>> $8 & 1 | (SAFE_HEAP_LOAD_i32_1_U_1($1, 86) | 0) == 255) {
    break label$7
   }
   SAFE_HEAP_STORE_i32_1_1($1, 101, $3 | $2 & 3);
   SAFE_HEAP_STORE_i32_1_1($0, 444, 1);
  }
 }
 
 function ImGui__TableSortSpecsBuild_28ImGuiTable__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
  $11 = SAFE_HEAP_LOAD_i32_1_U_1($0, 444);
  if ($11) {
   $4 = 1;
   $9 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   if (($9 | 0) > 0) {
    $10 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
    $4 = 0;
    while (1) {
     $3 = $10 + Math_imul($2, 104) | 0;
     $6 = $3 + 86 | 0;
     label$3 : {
      if ((SAFE_HEAP_LOAD_i32_1_U_1($3, 86) | 0) == 255) {
       break label$3
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($3, 90) & 255) {
       break label$3
      }
      SAFE_HEAP_STORE_i32_1_1($6, 0, 255);
     }
     $6 = SAFE_HEAP_LOAD_i64_1_1($6, 0);
     $8 = ($6 & i64toi32_i32$HIGH_BITS) != -1;
     $1 = $8 + $1 | 0;
     $3 = $6 & 31;
     if (($6 & 63) >>> 0 >= 32) {
      $3 = 1 << $3;
      $6 = 0;
     } else {
      $6 = 1 << $3;
      $3 = $6 - 1 & 1 >>> 32 - $3;
     }
     $6 = $8 ? $6 : 0;
     $5 = $5 | ($8 ? $3 : 0);
     $4 = $4 | $6;
     $2 = $2 + 1 | 0;
     if (($9 | 0) != ($2 | 0)) {
      continue
     }
     break;
    };
    $4 = $4 + 1 | 0;
    $5 = $4 ? $5 : $5 + 1 | 0;
   }
   $2 = $1 & 31;
   if (($1 & 63) >>> 0 >= 32) {
    $2 = 1 << $2;
    $3 = 0;
   } else {
    $3 = 1 << $2;
    $2 = $3 - 1 & 1 >>> 32 - $2;
   }
   $6 = $3;
   $3 = $2;
   $2 = 0;
   if ($1 >>> 0 > 1) {
    $2 = !(SAFE_HEAP_LOAD_i32_1_U_1($0 + 7 | 0, 0) & 4)
   }
   if (!((($4 | 0) != ($6 | 0) | ($3 | 0) != ($5 | 0) | $2) != 1 | ($1 | 0) <= 0)) {
    $8 = $2;
    $12 = ($9 | 0) > 0;
    $15 = $2 & $12;
    $13 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
    $2 = $1;
    $3 = 0;
    $4 = 0;
    $5 = 0;
    while (1) {
     $10 = $4;
     $6 = $5;
     $1 = -1;
     $4 = 0;
     $5 = 0;
     if ($12) {
      while (1) {
       $7 = $4 & 31;
       label$11 : {
        if ((($4 & 63) >>> 0 >= 32 ? $6 >>> $7 | 0 : ((1 << $7) - 1 & $6) << 32 - $7 | $10 >>> $7) & 1) {
         break label$11
        }
        $7 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
        $14 = SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($4, 104) | 0, 86);
        if (($14 | 0) == -1) {
         break label$11
        }
        if (($1 | 0) != -1) {
         if ((SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($1, 104) | 0, 86) | 0) <= ($14 | 0)) {
          break label$11
         }
        }
        $1 = $4;
       }
       $4 = $4 + 1 | 0;
       $5 = $4 ? $5 : $5 + 1 | 0;
       if ($5 | ($4 | 0) != ($9 | 0)) {
        continue
       }
       break;
      }
     }
     $4 = $1;
     SAFE_HEAP_STORE_i32_1_1($13 + Math_imul($1, 104) | 0, 86, $3);
     $5 = $1 & 31;
     if (($1 & 63) >>> 0 >= 32) {
      $5 = 1 << $5;
      $1 = 0;
     } else {
      $1 = 1 << $5;
      $5 = $1 - 1 & 1 >>> 32 - $5;
     }
     $7 = $1;
     $1 = 0;
     label$15 : {
      if (!$15) {
       $2 = $8 ? 1 : $2;
       break label$15;
      }
      while (1) {
       if (($1 | 0) != ($4 | 0)) {
        SAFE_HEAP_STORE_i32_1_1($13 + Math_imul($1, 104) | 0, 86, 255)
       }
       $2 = 1;
       $1 = $1 + 1 | 0;
       if (($9 | 0) != ($1 | 0)) {
        continue
       }
       break;
      };
     }
     $4 = $7 | $10;
     $5 = $5 | $6;
     $1 = $2;
     $3 = $3 + 1 | 0;
     if ((($1 | 0) <= ($3 | 0) | $8) != 1) {
      continue
     }
     break;
    };
   }
   label$19 : {
    if ($1) {
     break label$19
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 7 | 0, 0) & 8) {
     $1 = 0;
     break label$19;
    }
    $1 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) <= 0) {
     break label$19
    }
    $2 = 0;
    $3 = 0;
    while (1) {
     $4 = $3;
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($3, 104) | 0;
     label$22 : {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 90)) {
       $3 = $2;
       $2 = 1;
       break label$22;
      }
      $3 = $2;
      $2 = 1;
      if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 1 | 0, 0) & 2) {
       break label$22
      }
      SAFE_HEAP_STORE_i32_1_1($1, 86, 0);
      SAFE_HEAP_STORE_i32_1_1($1, 101, SAFE_HEAP_LOAD_i32_1_U_1($1, 101) & 252 | SAFE_HEAP_LOAD_i32_1_U_1($1, 102) & 3);
      $3 = 1;
      $2 = 0;
     }
     $1 = $3;
     if ($2) {
      $2 = $1;
      $3 = $4 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) <= ($3 | 0)) {
       break label$19
      }
      continue;
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($0, 416, $1);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 396 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_1_1($0, 416);
   $1 = ($1 | 0) >= 2 ? $1 : 0;
   label$20 : {
    if (($2 | 0) >= ($1 | 0)) {
     break label$20
    }
    $3 = $2;
    $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
    if (($3 | 0) >= ($2 | 0)) {
     break label$20
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 12));
    $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 400 | 0, 0);
    if ($4) {
     __memcpy($3, $4, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 392), 12));
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 400));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 396, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 400, $3);
   }
   SAFE_HEAP_STORE_i32_1_1($0, 444, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 392, $1);
   SAFE_HEAP_STORE_i32_1_1($0 + 412 | 0, 0, 1);
  }
  $2 = 0;
  label$6 : {
   label$7 : {
    switch (SAFE_HEAP_LOAD_i32_1_U_1($0, 416) | 0) {
    case 1:
     $2 = $0 + 380 | 0;
     break label$6;
    case 0:
     break label$6;
    default:
     break label$7;
    };
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 400 | 0, 0);
  }
  $1 = $2;
  label$9 : {
   if (!$11 | !$1) {
    break label$9
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) <= 0) {
    break label$9
   }
   $2 = 0;
   while (1) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($2, 104) | 0;
    $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 86);
    if (($3 | 0) != 255) {
     $5 = SAFE_HEAP_LOAD_i32_4_4($4, 48);
     $6 = $3 << 24 >> 24;
     $3 = Math_imul($6, 12) + $1 | 0;
     SAFE_HEAP_STORE_i32_2_2($3, 6, $6);
     SAFE_HEAP_STORE_i32_2_2($3, 4, $2 << 24 >> 24);
     SAFE_HEAP_STORE_i32_4_4($3, 0, $5);
     SAFE_HEAP_STORE_i32_1_1($3, 8, SAFE_HEAP_LOAD_i32_1_U_1($4, 101) & 3);
    }
    $2 = $2 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) > ($2 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_4_4($0, 404, $1);
  SAFE_HEAP_STORE_i32_4_4($0 + 408 | 0, 0, SAFE_HEAP_LOAD_i32_1_1($0, 416));
 }
 
 function ImGui__EndTable_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = 0, $28 = Math_fround(0), $29 = 0, $30 = Math_fround(0), $31 = 0, $32 = 0, $33 = Math_fround(0), $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = Math_fround(0), $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = Math_fround(0);
  $26 = __stack_pointer - 16 | 0;
  __stack_pointer = $26;
  $21 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($21, 8036);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 441)) {
   ImGui__TableUpdateLayout_28ImGuiTable__29($1)
  }
  $17 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
  $18 = SAFE_HEAP_LOAD_i32_4_4($1, 356);
  $10 = SAFE_HEAP_LOAD_i32_4_4($1, 360);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  if (SAFE_HEAP_LOAD_i32_1_U_1($1, 442)) {
   ImGui__TableEndRow_28ImGuiTable__29($1)
  }
  label$3 : {
   if (!($2 & 32)) {
    break label$3
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 420) | 0) == 255) {
    break label$3
   }
   if (ImGui__IsAnyItemHovered_28_29()) {
    break label$3
   }
   if (!ImGui__IsMouseReleased_28int_29(1)) {
    break label$3
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
   $0 = SAFE_HEAP_LOAD_i32_1_1($1, 420);
   if (($0 | 0) == -1) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($4, 92)
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 4) & 7)) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_1_1($4, 446, 1);
   SAFE_HEAP_STORE_i32_2_2($4, 98, SAFE_HEAP_LOAD_i32_2_U_2($4, 96));
   SAFE_HEAP_STORE_i32_1_1($4, 432, (SAFE_HEAP_LOAD_i32_4_4($4, 84) | 0) == ($0 | 0) ? -1 : $0);
   ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29(ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(1873, SAFE_HEAP_LOAD_i32_4_4($4, 0)), 0);
  }
  SAFE_HEAP_STORE_i64_8_4($10 + 256 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($17, 68), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($10 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($17, 76), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($10 + 232 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($17, 84), i64toi32_i32$HIGH_BITS);
  $25 = SAFE_HEAP_LOAD_f32_4_4($1, 104);
  $31 = ($10 | 0) == ($18 | 0);
  label$5 : {
   if (!$31) {
    SAFE_HEAP_STORE_f32_4_4($10 + 236 | 0, 0, $25);
    break label$5;
   }
   if ($2 & 131072) {
    break label$5
   }
   $0 = $1 + 224 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $3 = $3 >= $25 ? $3 : $25;
   SAFE_HEAP_STORE_f32_4_4($1 + 240 | 0, 0, $3);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $3);
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 224 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($1, 180, Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($1 + 216 | 0, 0)));
  $0 = $1 + 256 | 0;
  $6 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  SAFE_HEAP_STORE_f32_4_4($0, 0, $3 <= $6 ? $6 : $3);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  if ($0 & 16777216) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 360);
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 232 | 0, 0);
   $5 = SAFE_HEAP_LOAD_i32_1_1($1, 429);
   if (($5 | 0) != -1) {
    $6 = Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($5, 104) | 0, 56) + SAFE_HEAP_LOAD_f32_4_4($1, 164)) + SAFE_HEAP_LOAD_f32_4_4($1, 160)) - ($0 & 1024 ? Math_fround(1.0) : Math_fround(0.0)));
    $3 = $3 >= $6 ? $3 : $6;
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 423) | 0) != 255) {
    $6 = SAFE_HEAP_LOAD_f32_4_4($1, 204);
    $3 = $3 >= $6 ? $3 : $6;
   }
   SAFE_HEAP_STORE_f32_4_4($4, 232, $3);
  }
  if (!($2 & 1048576)) {
   ImDrawList__PopClipRect_28_29(SAFE_HEAP_LOAD_i32_4_4($10, 580))
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($10, 580);
  $0 = ((SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0) | 0) - 16 | 0;
  $4 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
  $5 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_4($10 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 8), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($10, 496, $4, $5);
  if ($2 & 1920) {
   $0 = __stack_pointer + -64 | 0;
   __stack_pointer = $0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 216 | 0, 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 356);
   label$1 : {
    if (!($3 < SAFE_HEAP_LOAD_f32_4_4($4 + 508 | 0, 0))) {
     break label$1
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 224 | 0, 0) > SAFE_HEAP_LOAD_f32_4_4($4 + 500 | 0, 0))) {
     break label$1
    }
    $12 = $1 + 212 | 0;
    if (!(SAFE_HEAP_LOAD_f32_4_4($12, 0) < SAFE_HEAP_LOAD_f32_4_4($4, 504))) {
     break label$1
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($1, 220) > SAFE_HEAP_LOAD_f32_4_4($4, 496))) {
     break label$1
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 376);
    $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 360), 580);
    ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($5, $4, 0);
    $2 = SAFE_HEAP_LOAD_i64_8_4($1, 292);
    $5 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($0, 56, $2, $5);
    $8 = SAFE_HEAP_LOAD_i64_8_4($1 + 300 | 0, 0);
    $7 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($0, 48, $8, $7);
    SAFE_HEAP_STORE_i64_8_8($0, 16, $2, $5);
    SAFE_HEAP_STORE_i64_8_8($0, 8, $8, $7);
    ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($4, $0 + 16 | 0, $0 + 8 | 0, 0);
    $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 240 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($1 + 232 | 0, 0);
    $3 = $13;
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 445)) {
     if ((SAFE_HEAP_LOAD_i32_1_1($1, 434) | 0) <= 0) {
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 248 | 0, 0)
     }
     $3 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 184));
     $3 = $3 > $6 ? $6 : $3;
    }
    label$4 : {
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 5 | 0, 0) & 2)) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 84) | 0) <= 0) {
      break label$4
     }
     $16 = $1 + 5 | 0;
     $5 = 0;
     $8 = 0;
     while (1) {
      $7 = SAFE_HEAP_LOAD_i64_8_8($1, 40);
      $9 = i64toi32_i32$HIGH_BITS;
      $2 = $5 & 31;
      label$6 : {
       if (!((($5 & 63) >>> 0 >= 32 ? $9 >>> $2 | 0 : ((1 << $2) - 1 & $9) << 32 - $2 | $7 >>> $2) & 1)) {
        break label$6
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
       $9 = SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($1, 24) + $5 | 0, 0);
       $7 = $2 + Math_imul($9 << 24 >> 24, 104) | 0;
       $2 = 0;
       if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 423) | 0) == ($9 | 0)) {
        $2 = (SAFE_HEAP_LOAD_i32_2_U_2($1, 98) | 0) == (SAFE_HEAP_LOAD_i32_2_U_2($1, 96) | 0)
       }
       $14 = SAFE_HEAP_LOAD_i32_1_U_1($1, 421);
       $22 = SAFE_HEAP_LOAD_i64_1_1($1, 436);
       $11 = SAFE_HEAP_LOAD_f32_4_4($7, 12);
       if (!$2 & SAFE_HEAP_LOAD_f32_4_4($1, 268) < $11) {
        break label$6
       }
       label$9 : {
        if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 85) | 0) != 255) {
         break label$9
        }
        if (!(SAFE_HEAP_LOAD_i32_4_4($7, 0) & 1073741856)) {
         break label$9
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) & 122880) != 16384) {
         break label$6
        }
       }
       if (SAFE_HEAP_LOAD_f32_4_4($7, 32) >= $11) {
        break label$6
       }
       label$10 : {
        label$11 : {
         $14 = $14 & 255;
         if (!(($14 | 0) == ($9 | 0) | $2)) {
          $23 = $5 + 1 | 0;
          if (($23 ? $8 : $8 + 1 | 0) | ($22 | 0) != ($23 | 0)) {
           break label$11
          }
         }
         if ($2) {
          $2 = ImGui__GetColorU32_28int_2c_20float_29(29, Math_fround(1.0));
          $11 = $6;
          break label$10;
         }
         if (($9 | 0) == ($14 | 0)) {
          $2 = ImGui__GetColorU32_28int_2c_20float_29(28, Math_fround(1.0));
          $11 = $6;
          break label$10;
         }
         $2 = SAFE_HEAP_LOAD_i32_4_4($1, 136);
         $11 = $6;
         break label$10;
        }
        $9 = SAFE_HEAP_LOAD_i32_1_U_1($16, 0) & 24;
        $2 = SAFE_HEAP_LOAD_i32_4_4(($9 ? 136 : 140) + $1 | 0, 0);
        $11 = $9 ? $3 : $6;
       }
       if (!($11 > $13)) {
        break label$6
       }
       $7 = $7 + 12 | 0;
       $19 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
       SAFE_HEAP_STORE_f32_4_4($0, 28, $13);
       SAFE_HEAP_STORE_f32_4_4($0, 24, $19);
       $19 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
       SAFE_HEAP_STORE_f32_4_4($0, 44, $11);
       SAFE_HEAP_STORE_f32_4_4($0, 40, $19);
       ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($4, $0 + 24 | 0, $0 + 40 | 0, $2, Math_fround(1.0));
      }
      $5 = $5 + 1 | 0;
      $8 = $5 ? $8 : $8 + 1 | 0;
      $7 = SAFE_HEAP_LOAD_i64_4_4($1, 84) >>> 0 > $5 >>> 0;
      $2 = i64toi32_i32$HIGH_BITS;
      if ($7 & ($2 | 0) >= ($8 | 0) | ($2 | 0) > ($8 | 0)) {
       continue
      }
      break;
     };
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
    $8 = $5 & 1280;
    label$15 : {
     if (!$8) {
      break label$15
     }
     $7 = $0 + 32 | 0;
     SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_4($12 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($0, 24, SAFE_HEAP_LOAD_i64_8_4($12, 0), i64toi32_i32$HIGH_BITS);
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 136);
     if (($8 | 0) == 1280) {
      ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($4, $0 + 24 | 0, $7, $2, Math_fround(0.0), 0, Math_fround(1.0));
      break label$15;
     }
     if ($5 & 1024) {
      SAFE_HEAP_STORE_f32_4_4($0, 40, SAFE_HEAP_LOAD_f32_4_4($0, 24));
      SAFE_HEAP_STORE_f32_4_4($0, 44, SAFE_HEAP_LOAD_f32_4_4($0 + 36 | 0, 0));
      $5 = $0 + 40 | 0;
      ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($4, $0 + 24 | 0, $5, $2, Math_fround(1.0));
      SAFE_HEAP_STORE_i64_8_4($0, 40, __wasm_rotl_i64(SAFE_HEAP_LOAD_i64_8_4($0, 28), i64toi32_i32$HIGH_BITS), i64toi32_i32$HIGH_BITS);
      ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($4, $5, $0 + 32 | 0, $2, Math_fround(1.0));
      break label$15;
     }
     if (!($5 & 256)) {
      break label$15
     }
     SAFE_HEAP_STORE_i64_8_4($0, 40, __wasm_rotl_i64(SAFE_HEAP_LOAD_i64_8_4($0, 28), i64toi32_i32$HIGH_BITS), i64toi32_i32$HIGH_BITS);
     $5 = $0 + 40 | 0;
     ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($4, $0 + 24 | 0, $5, $2, Math_fround(1.0));
     SAFE_HEAP_STORE_f32_4_4($0, 44, SAFE_HEAP_LOAD_f32_4_4($0 + 36 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 40, SAFE_HEAP_LOAD_f32_4_4($0, 24));
     ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($4, $5, $0 + 32 | 0, $2, Math_fround(1.0));
    }
    label$18 : {
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 128)) {
      break label$18
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4($1, 104);
     if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 224 | 0, 0) > $3)) {
      break label$18
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 280 | 0, 0) <= $3)) {
      break label$18
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 288 | 0, 0) > $3)) {
      break label$18
     }
     $6 = SAFE_HEAP_LOAD_f32_4_4($1, 144);
     SAFE_HEAP_STORE_f32_4_4($0, 28, $3);
     SAFE_HEAP_STORE_f32_4_4($0, 24, $6);
     $6 = SAFE_HEAP_LOAD_f32_4_4($1, 148);
     SAFE_HEAP_STORE_f32_4_4($0, 44, $3);
     SAFE_HEAP_STORE_f32_4_4($0, 40, $6);
     ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($4, $0 + 24 | 0, $0 + 40 | 0, SAFE_HEAP_LOAD_i32_4_4($1, 140), Math_fround(1.0));
    }
    ImDrawList__PopClipRect_28_29($4);
   }
   __stack_pointer = $0 - -64 | 0;
  }
  $34 = SAFE_HEAP_LOAD_i32_4_4($1, 376);
  ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($34, SAFE_HEAP_LOAD_i32_4_4($10, 580), 0);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($1 + 6 | 0, 0) & 16)) {
   $2 = 0;
   $8 = 0;
   $4 = 0;
   $16 = __stack_pointer - 192 | 0;
   __stack_pointer = $16;
   $22 = SAFE_HEAP_LOAD_i32_1_1($1, 434);
   $12 = SAFE_HEAP_LOAD_i32_4_4($1, 376);
   $14 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $23 = SAFE_HEAP_LOAD_i32_1_1($1, 436);
   memset($16 + 32 | 0, 0, 160);
   $35 = SAFE_HEAP_LOAD_i32_4_4($1, 84);
   if (($35 | 0) > 0) {
    $15 = $23 >> 31;
    $40 = ($23 | 0) <= 0;
    $41 = SAFE_HEAP_LOAD_i64_8_8($1, 56);
    $29 = i64toi32_i32$HIGH_BITS;
    $0 = 0;
    while (1) {
     $5 = $2;
     $4 = $8 & 31;
     if ((($8 & 63) >>> 0 >= 32 ? $29 >>> $4 | 0 : ((1 << $4) - 1 & $29) << 32 - $4 | $41 >>> $4) & 1) {
      $42 = ($5 | 0) >= ($15 | 0) & $8 >>> 0 >= $23 >>> 0 | ($5 | 0) > ($15 | 0) | $40;
      $7 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($8, 104) | 0;
      $43 = $7 + 40 | 0;
      $44 = $7 - -64 | 0;
      $45 = $7 + 89 | 0;
      $46 = $7 + 88 | 0;
      $47 = SAFE_HEAP_LOAD_i32_4_4($12, 16);
      $27 = $7 + 72 | 0;
      $20 = $7 + 68 | 0;
      $2 = 0;
      while (1) {
       $4 = $2;
       $32 = SAFE_HEAP_LOAD_i32_1_U_1($2 ? $45 : $46, 0);
       $9 = $47 + Math_imul($32, 24) | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
       label$62 : {
        if (($2 | 0) <= 0) {
         break label$62
        }
        $2 = $2 - 1 | 0;
        if (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 8) + Math_imul($2, 40) | 0, 28)) {
         break label$62
        }
        SAFE_HEAP_STORE_i32_4_4($9, 0, $2);
       }
       label$7 : {
        if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) != 1) {
         break label$7
        }
        label$93 : {
         if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 1 | 0, 0) & 1) {
          break label$93
         }
         label$104 : {
          if (($22 | 0) <= 0) {
           $3 = SAFE_HEAP_LOAD_f32_4_4($20, 0);
           $6 = SAFE_HEAP_LOAD_f32_4_4($27, 0);
           $3 = $3 >= $6 ? $3 : $6;
           break label$104;
          }
          if (!$4) {
           $3 = SAFE_HEAP_LOAD_f32_4_4($44, 0);
           $6 = SAFE_HEAP_LOAD_f32_4_4($27, 0);
           $3 = $3 >= $6 ? $3 : $6;
           break label$104;
          }
          $3 = SAFE_HEAP_LOAD_f32_4_4($20, 0);
         }
         if (!($3 > SAFE_HEAP_LOAD_f32_4_4($43, 0))) {
          break label$93
         }
         break label$7;
        }
        $36 = (($22 | 0) <= 0 ? 2 : (($4 | 0) != 0) << 1) | $42;
        $2 = ($16 + 32 | 0) + Math_imul($36, 40) | 0;
        $37 = $2 + 16 | 0;
        if (!SAFE_HEAP_LOAD_i32_4_4($2, 16)) {
         SAFE_HEAP_STORE_i64_8_8($2, 8, -8388609, -8388609);
         SAFE_HEAP_STORE_i64_8_8($2, 0, 2139095039, 2139095039);
        }
        $38 = ($2 + ($32 >>> 3 & 28) | 0) + 20 | 0;
        SAFE_HEAP_STORE_i32_4_4($38, 0, SAFE_HEAP_LOAD_i32_4_4($38, 0) | 1 << $32);
        SAFE_HEAP_STORE_i32_4_4($37, 0, SAFE_HEAP_LOAD_i32_4_4($37, 0) + 1 | 0);
        $9 = SAFE_HEAP_LOAD_i32_4_4($9, 8);
        $3 = SAFE_HEAP_LOAD_f32_4_4($9, 4);
        $11 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
        $6 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
        if ($11 > $6) {
         SAFE_HEAP_STORE_f32_4_4($2, 0, $6)
        }
        $6 = SAFE_HEAP_LOAD_f32_4_4($9, 8);
        if (SAFE_HEAP_LOAD_f32_4_4($2, 4) > $3) {
         SAFE_HEAP_STORE_f32_4_4($2, 4, $3)
        }
        $3 = SAFE_HEAP_LOAD_f32_4_4($9, 12);
        if (SAFE_HEAP_LOAD_f32_4_4($2, 8) < $6) {
         SAFE_HEAP_STORE_f32_4_4($2, 8, $6)
        }
        if (SAFE_HEAP_LOAD_f32_4_4($2 + 12 | 0, 0) < $3) {
         SAFE_HEAP_STORE_f32_4_4($2, 12, $3)
        }
        $0 = $0 | 1 << $36;
       }
       if (($22 | 0) > 0) {
        $2 = $4 + 1 | 0;
        if (!$4) {
         continue
        }
       }
       break;
      };
      SAFE_HEAP_STORE_i32_1_1($7, 87, 255);
     }
     $4 = $0;
     $8 = $8 + 1 | 0;
     $2 = $8 ? $5 : $5 + 1 | 0;
     if ($2 | ($8 | 0) != ($35 | 0)) {
      continue
     }
     break;
    };
   }
   if ($4) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($14 + 8104 | 0, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($12, 4) - 2 | 0;
    label$20 : {
     if (($0 | 0) >= ($4 | 0)) {
      break label$20
     }
     $5 = $0;
     $0 = $0 ? $0 + (($0 | 0) / 2 | 0) | 0 : 8;
     $0 = ($0 | 0) > ($4 | 0) ? $0 : $4;
     if (($5 | 0) >= ($0 | 0)) {
      break label$20
     }
     $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($0, 24));
     $5 = SAFE_HEAP_LOAD_i32_4_4($14 + 8108 | 0, 0);
     if ($5) {
      __memcpy($2, $5, Math_imul(SAFE_HEAP_LOAD_i32_4_4($14, 8100), 24));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($14, 8108));
     }
     SAFE_HEAP_STORE_i32_4_4($14, 8104, $0);
     SAFE_HEAP_STORE_i32_4_4($14, 8108, $2);
    }
    SAFE_HEAP_STORE_i32_4_4($14, 8100, $4);
    $2 = SAFE_HEAP_LOAD_i32_4_4($14 + 8108 | 0, 0);
    $0 = $16 + 8 | 0;
    SAFE_HEAP_STORE_i32_4_4($0 + 16 | 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($0 + 8 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($16, 8, 0, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
    if (($4 | 0) >= 3) {
     $5 = $4 - 1 | 0;
     $8 = ($5 & 31) + 1 | 0;
     $0 = 2;
     while (1) {
      $7 = ($16 + 8 | 0) + ($0 >> 5 << 2) | 0;
      $9 = $7;
      $15 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
      $7 = ($5 | 0) > ($0 | 31) ? 32 : $8;
      SAFE_HEAP_STORE_i32_4_4($9, 0, $15 | ((($7 & 63) >>> 0 < 32 ? -1 << $7 : 0) ^ -1) & -1 << $0);
      $0 = ($0 & -32) + 32 | 0;
      if (($4 | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($1, 440);
    $5 = ($16 + 8 | 0) + ($0 >>> 3 & 28) | 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    SAFE_HEAP_STORE_i32_4_4($5, 0, __wasm_rotl_i32($0) & $8);
    $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 336 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($1 + 332 | 0, 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($1 + 328 | 0, 0);
    $19 = SAFE_HEAP_LOAD_f32_4_4($1, 324);
    $29 = $1 + 6 | 0;
    $0 = 0;
    $27 = ($22 | 0) > 0;
    $5 = $4 + ($27 ? -3 : -2) | 0;
    while (1) {
     $4 = $5;
     $7 = $0;
     $8 = $2;
     $0 = ($16 + 32 | 0) + Math_imul($0, 40) | 0;
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
     label$27 : {
      if (!$2) {
       break label$27
      }
      $24 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
      $30 = $11 > $24 ? $24 : $11;
      $28 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
      $39 = $19 > $28 ? $28 : $19;
      $33 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
      $48 = $13 <= $33 ? $33 : $13;
      $3 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
      label$29 : {
       if ($7 >>> 0 < 2) {
        break label$29
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($29, 0) & 2) {
        break label$29
       }
       $3 = $3 >= $6 ? $3 : $6;
      }
      $9 = $0 + 20 | 0;
      $0 = 0;
      while (1) {
       $5 = $0 << 2;
       $15 = $5 + ($16 + 8 | 0) | 0;
       $20 = SAFE_HEAP_LOAD_i32_4_4($15, 0);
       SAFE_HEAP_STORE_i32_4_4($15, 0, (SAFE_HEAP_LOAD_i32_4_4($5 + $9 | 0, 0) ^ -1) & $20);
       $0 = $0 + 1 | 0;
       if (($0 | 0) != 5) {
        continue
       }
       break;
      };
      $5 = $4 - $2 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($12, 4) | 0) <= 0) {
       $4 = $5;
       break label$27;
      }
      $24 = $7 >>> 0 > 1 ? ($27 ? $24 : $30) : $30;
      $0 = $7 & 1;
      $30 = $0 ? (($23 | 0) > 0 ? $28 : $39) : $39;
      $28 = $0 ? $48 : $33;
      $4 = 0;
      while (1) {
       $0 = $2;
       $2 = $9 + ($4 >>> 3 & 536870908) | 0;
       $15 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       $20 = 1 << $4;
       if ($15 & $20) {
        SAFE_HEAP_STORE_i32_4_4($2, 0, $15 & ($20 ^ -1));
        $15 = SAFE_HEAP_LOAD_i32_4_4($12, 16) + Math_imul($4, 24) | 0;
        $20 = $15 + 8 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($20, 0);
        SAFE_HEAP_STORE_f32_4_4($2, 12, $3);
        SAFE_HEAP_STORE_f32_4_4($2, 8, $28);
        SAFE_HEAP_STORE_f32_4_4($2, 4, $24);
        SAFE_HEAP_STORE_f32_4_4($2, 0, $30);
        SAFE_HEAP_STORE_i64_8_4($8 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($15 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
        SAFE_HEAP_STORE_i64_8_4($8 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($20, 0), i64toi32_i32$HIGH_BITS);
        SAFE_HEAP_STORE_i64_8_4($8, 0, SAFE_HEAP_LOAD_i64_8_4($15, 0), i64toi32_i32$HIGH_BITS);
        $8 = $8 + 24 | 0;
        $0 = $0 - 1 | 0;
       }
       $4 = $4 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($12, 4) | 0) > ($4 | 0)) {
        $2 = $0;
        if ($0) {
         continue
        }
       }
       break;
      };
      $4 = $5;
     }
     $0 = $8;
     label$38 : {
      if (($7 | 0) != 1) {
       break label$38
      }
      if (($22 | 0) <= 0) {
       break label$38
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($12, 16) + Math_imul(SAFE_HEAP_LOAD_i32_1_U_1($1, 440), 24) | 0;
      SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
      $0 = $0 + 24 | 0;
     }
     $2 = $0;
     $9 = $2;
     $5 = $4;
     $0 = $7 + 1 | 0;
     if (($0 | 0) != 4) {
      continue
     }
     break;
    };
    $8 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
    label$41 : {
     if (!$4 | ($8 | 0) <= 0) {
      break label$41
     }
     $2 = 0;
     $5 = $9;
     while (1) {
      $0 = $5;
      if (SAFE_HEAP_LOAD_i32_4_4(($16 + 8 | 0) + ($2 >>> 3 & 536870908) | 0, 0) >>> $2 & 1) {
       $5 = SAFE_HEAP_LOAD_i32_4_4($12, 16) + Math_imul($2, 24) | 0;
       SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($5 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($5 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
       $0 = $0 + 24 | 0;
       $4 = $4 - 1 | 0;
      }
      $5 = $0;
      $2 = $2 + 1 | 0;
      $8 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
      if (($2 | 0) >= ($8 | 0)) {
       break label$41
      }
      if ($4) {
       continue
      }
      break;
     };
    }
    __memcpy(SAFE_HEAP_LOAD_i32_4_4($12 + 16 | 0, 0) + 48 | 0, SAFE_HEAP_LOAD_i32_4_4($14, 8108), Math_imul($8, 24) - 48 | 0);
   }
   __stack_pointer = $16 + 192 | 0;
  }
  ImDrawListSplitter__Merge_28ImDrawList__29($34, SAFE_HEAP_LOAD_i32_4_4($10, 580));
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 164);
  $13 = Math_fround($3 + $3);
  $0 = SAFE_HEAP_LOAD_i32_1_1($1, 417);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 160);
  SAFE_HEAP_STORE_f32_4_4($1, 196, Math_fround(Math_fround($13 * Math_fround($0 | 0)) + Math_fround(Math_fround($3 + $3) + Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 172) + SAFE_HEAP_LOAD_f32_4_4($1, 176)) * Math_fround($0 - 1 | 0)))));
  $5 = $1 + 196 | 0;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 84);
  if (($9 | 0) > 0) {
   $12 = SAFE_HEAP_LOAD_i64_8_8($1, 48);
   $7 = i64toi32_i32$HIGH_BITS;
   $4 = 0;
   $0 = 0;
   while (1) {
    $2 = $4 & 31;
    if ((($4 & 63) >>> 0 >= 32 ? $7 >>> $2 | 0 : ((1 << $2) - 1 & $7) << 32 - $2 | $12 >>> $2) & 1) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($4, 104) | 0;
     $8 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     label$181 : {
      if (($8 & 48) == 16) {
       $3 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
       $2 = $2 + 16 | 0;
       break label$181;
      }
      $3 = SAFE_HEAP_LOAD_f32_4_4($2, 64);
      $6 = SAFE_HEAP_LOAD_f32_4_4($2, 68);
      $3 = $3 >= $6 ? $3 : $6;
      $6 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
      $3 = Math_fround($3 - $6);
      if (!($8 & 8192)) {
       $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 76) - $6);
       $3 = $3 >= $6 ? $3 : $6;
      }
      label$22 : {
       if (!($8 & 16)) {
        break label$22
       }
       $6 = SAFE_HEAP_LOAD_f32_4_4($2, 28);
       if (!($6 > Math_fround(0.0))) {
        break label$22
       }
       $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 1 ? ($8 & 32 ? $6 : $3) : $6;
      }
      $6 = SAFE_HEAP_LOAD_f32_4_4($1, 156);
      $3 = $3 >= $6 ? $3 : $6;
      $2 = $5;
     }
     SAFE_HEAP_STORE_f32_4_4($5, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) + $3));
    }
    $4 = $4 + 1 | 0;
    $0 = $4 ? $0 : $0 + 1 | 0;
    if ($0 | ($4 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
  }
  label$255 : {
   label$266 : {
    if ($31) {
     break label$266
    }
    if (SAFE_HEAP_LOAD_i32_4_4($1, 4) & 16777216) {
     break label$266
    }
    SAFE_HEAP_STORE_i32_4_4($10, 88, 0);
    break label$255;
   }
   $0 = SAFE_HEAP_LOAD_i32_1_1($1, 424);
   if (($0 | 0) == -1) {
    break label$255
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 423) | 0) != 255) {
    break label$255
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($10, 136)) {
    break label$255
   }
   if ((SAFE_HEAP_LOAD_i32_2_U_2($1, 98) | 0) != (SAFE_HEAP_LOAD_i32_2_U_2($1, 96) | 0)) {
    break label$255
   }
   $6 = Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($1, 156));
   $3 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($0, 104) | 0, 12);
   if (SAFE_HEAP_LOAD_f32_4_4($1, 260) > $3) {
    ImGui__SetScrollFromPosX_28ImGuiWindow__2c_20float_2c_20float_29($10, Math_fround(Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($10, 12)) - $6));
    break label$255;
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4($1 + 268 | 0, 0) < $3)) {
    break label$255
   }
   ImGui__SetScrollFromPosX_28ImGuiWindow__2c_20float_2c_20float_29($10, Math_fround($6 + Math_fround($3 - SAFE_HEAP_LOAD_f32_4_4($10, 12))));
  }
  $0 = SAFE_HEAP_LOAD_i32_1_1($1, 423);
  label$28 : {
   if (($0 | 0) == -1) {
    break label$28
   }
   if ((SAFE_HEAP_LOAD_i32_2_U_2($1, 96) | 0) != (SAFE_HEAP_LOAD_i32_2_U_2($1, 98) | 0)) {
    break label$28
   }
   $6 = Math_fround(Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($21 + 228 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($21, 7176)) + Math_fround(4.0)) - SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($0, 104) | 0, 8)) - SAFE_HEAP_LOAD_f32_4_4($1, 172));
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 164);
   $3 = Math_fround($6 - Math_fround($3 + $3));
   label$297 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$297;
    }
    $0 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($1, 200, Math_fround($0 | 0));
  }
  $0 = $1 + 212 | 0;
  ImGui__PopID_28_29();
  $6 = SAFE_HEAP_LOAD_f32_4_4($18 + 236 | 0, 0);
  $13 = SAFE_HEAP_LOAD_f32_4_4($18 + 232 | 0, 0);
  SAFE_HEAP_STORE_i64_8_4($10 + 472 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($17 + 44 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($10, 464, SAFE_HEAP_LOAD_i64_8_4($17, 36), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($10 + 488 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($17 + 60 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($10, 480, SAFE_HEAP_LOAD_i64_8_4($17, 52), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i32_1_1($10, 143, SAFE_HEAP_LOAD_i32_1_U_1($1, 455));
  SAFE_HEAP_STORE_i64_8_4($18, 208, SAFE_HEAP_LOAD_i64_8_4($1, 212), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_f32_4_4($18 + 384 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($17, 96));
  SAFE_HEAP_STORE_i32_4_4($18 + 392 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($17, 100));
  SAFE_HEAP_STORE_i32_4_4($18 + 276 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($17, 92));
  label$31 : {
   if (!$31) {
    ImGui__EndChild_28_29();
    break label$31;
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 220 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($1, 212);
   SAFE_HEAP_STORE_f32_4_4($26, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 224) - SAFE_HEAP_LOAD_f32_4_4($1, 216)));
   SAFE_HEAP_STORE_f32_4_4($26, 8, Math_fround($3 - $11));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($26 + 8 | 0, Math_fround(-1.0));
   ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0, 0, 0, 0);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  label$33 : {
   if ($4 & 65536) {
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 0) + SAFE_HEAP_LOAD_f32_4_4($5, 0));
    break label$33;
   }
   $19 = SAFE_HEAP_LOAD_f32_4_4($17, 8);
   if ($19 <= Math_fround(0.0)) {
    $3 = Math_fround(0.0);
    if ($4 & 16777216) {
     $3 = SAFE_HEAP_LOAD_f32_4_4($10, 128)
    }
    $0 = $18 + 240 | 0;
    $11 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
    $24 = $3;
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 212) + SAFE_HEAP_LOAD_f32_4_4($1, 196));
    $19 = Math_fround(Math_fround($24 + $3) - $19);
    SAFE_HEAP_STORE_f32_4_4($0, 0, $11 >= $19 ? $11 : $19);
    $11 = SAFE_HEAP_LOAD_f32_4_4($1, 220);
    $3 = $3 > $11 ? $11 : $3;
    break label$33;
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 220);
  }
  SAFE_HEAP_STORE_f32_4_4($18, 232, $3 <= $13 ? $13 : $3);
  $11 = SAFE_HEAP_LOAD_f32_4_4($17 + 12 | 0, 0);
  label$37 : {
   if ($11 <= Math_fround(0.0)) {
    $3 = Math_fround(0.0);
    if ($4 & 33554432) {
     $3 = SAFE_HEAP_LOAD_f32_4_4($10 + 132 | 0, 0)
    }
    $0 = $18 + 244 | 0;
    $13 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
    $3 = Math_fround(Math_fround($25 + $3) - $11);
    SAFE_HEAP_STORE_f32_4_4($0, 0, $3 <= $13 ? $13 : $3);
    $3 = SAFE_HEAP_LOAD_f32_4_4($1, 224);
    $3 = $3 < $25 ? $3 : $25;
    break label$37;
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 224);
  }
  SAFE_HEAP_STORE_f32_4_4($18, 236, $3 <= $6 ? $6 : $3);
  if (SAFE_HEAP_LOAD_i32_1_U_1($1, 448)) {
   $0 = 0;
   $5 = 0;
   SAFE_HEAP_STORE_i32_1_1($1, 448, 0);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 16)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 76);
    label$21 : {
     if (($2 | 0) == -1) {
      break label$21
     }
     $8 = SAFE_HEAP_LOAD_i32_4_4($1, 84);
     $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 12176 | 0, 0) + $2 | 0;
     if (($8 | 0) <= (SAFE_HEAP_LOAD_i32_1_1($0, 13) | 0)) {
      break label$21
     }
     SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
     $0 = 0;
    }
    if (!$0) {
     $0 = ImGui__TableSettingsCreate_28unsigned_20int_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($1, 0), SAFE_HEAP_LOAD_i32_4_4($1, 84));
     SAFE_HEAP_STORE_i32_4_4($1, 76, $0 - SAFE_HEAP_LOAD_i32_4_4($4 + 12176 | 0, 0) | 0);
    }
    $4 = $0;
    SAFE_HEAP_STORE_i32_1_1($0, 12, SAFE_HEAP_LOAD_i32_4_4($1, 84));
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
    SAFE_HEAP_STORE_i32_4_4($4, 4, 0);
    label$52 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 84) | 0) > 0) {
      $8 = 0;
      $2 = $4 + 16 | 0;
      while (1) {
       $3 = SAFE_HEAP_LOAD_f32_4_4((SAFE_HEAP_LOAD_i32_4_4($0, 0) & 8 ? 24 : 16) + $0 | 0, 0);
       SAFE_HEAP_STORE_i32_1_1($2, 8, $5);
       SAFE_HEAP_STORE_f32_4_4($2, 0, $3);
       SAFE_HEAP_STORE_i32_1_1($2, 9, SAFE_HEAP_LOAD_i32_1_U_1($0, 82));
       SAFE_HEAP_STORE_i32_1_1($2, 10, SAFE_HEAP_LOAD_i32_1_U_1($0, 86));
       $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 11) & -4 | SAFE_HEAP_LOAD_i32_1_U_1($0, 101) & 3;
       SAFE_HEAP_STORE_i32_1_1($2, 11, $7);
       $7 = $7 & -5 | SAFE_HEAP_LOAD_i32_1_U_1($0, 91) << 2;
       SAFE_HEAP_STORE_i32_1_1($2, 11, $7);
       SAFE_HEAP_STORE_i32_1_1($2, 11, SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 8 | $7 & 247);
       $7 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
       if (SAFE_HEAP_LOAD_f32_4_4($0, 28) != $3) {
        SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($4, 4) | 1)
       }
       if ((SAFE_HEAP_LOAD_i32_1_1($0, 82) | 0) != ($5 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($4, 4) | 2)
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 86) | 0) != 255) {
        SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($4, 4) | 8)
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 91) | 0) != (($7 ^ -1) >>> 1 & 1)) {
        SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($4, 4) | 4)
       }
       $8 = !($7 & 8) | $8;
       $2 = $2 + 12 | 0;
       $0 = $0 + 104 | 0;
       $5 = $5 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 84) | 0) > ($5 | 0)) {
        continue
       }
       break;
      };
      SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($4, 4) & SAFE_HEAP_LOAD_i32_4_4($1, 4));
      $3 = Math_fround(0.0);
      if (!($8 & 1)) {
       break label$52
      }
      $3 = SAFE_HEAP_LOAD_f32_4_4($1, 208);
      break label$52;
     }
     SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($4, 4) & SAFE_HEAP_LOAD_i32_4_4($1, 4));
     $3 = Math_fround(0.0);
    }
    SAFE_HEAP_STORE_f32_4_4($4, 8, $3);
    ImGui__MarkIniSettingsDirty_28_29();
   }
  }
  SAFE_HEAP_STORE_i32_1_1($1, 443, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($21, 8040);
  SAFE_HEAP_STORE_i32_4_4($21, 8040, $0 - 1 | 0);
  $4 = 0;
  if (($0 | 0) >= 2) {
   $4 = (SAFE_HEAP_LOAD_i32_4_4($21 + 8052 | 0, 0) + Math_imul($0, 104) | 0) - 208 | 0
  }
  $0 = 0;
  if ($4) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($21 + 8064 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 0), 456) | 0
  }
  SAFE_HEAP_STORE_i32_4_4($21, 8036, $0);
  $5 = $18 + 372 | 0;
  if ($0) {
   SAFE_HEAP_STORE_i32_4_4($0, 12, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 376, $4 + 16 | 0);
   $0 = ($0 - SAFE_HEAP_LOAD_i32_4_4($21 + 8064 | 0, 0) | 0) / 456 | 0;
  } else {
   $0 = -1
  }
  SAFE_HEAP_STORE_i32_4_4($5, 0, $0);
  __stack_pointer = $26 + 16 | 0;
 }
 
 function ImGui__TableEndRow_28ImGuiTable__29($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
  if (($6 | 0) != -1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
   $11 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 120) & 1) {
    $13 = ($11 + Math_imul($6, 104) | 0) + 72 | 0
   } else {
    $13 = ($11 + Math_imul($6, 104) | 0) + (SAFE_HEAP_LOAD_i32_1_U_1($0, 452) ? 68 : 64) | 0
   }
   $2 = SAFE_HEAP_LOAD_f32_4_4($13, 0);
   $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 232 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($13, 0, $2 >= $4 ? $2 : $4);
   $2 = SAFE_HEAP_LOAD_f32_4_4($0, 104);
   $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 236 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0, 168));
   SAFE_HEAP_STORE_f32_4_4($0, 104, $2 >= $4 ? $2 : $4);
   SAFE_HEAP_STORE_f32_4_4($11 + Math_imul($6, 104) | 0, 60, SAFE_HEAP_LOAD_f32_4_4($1 + 384 | 0, 0));
   $2 = SAFE_HEAP_LOAD_f32_4_4($0, 112);
   $4 = SAFE_HEAP_LOAD_f32_4_4($1 + 268 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 112, $2 >= $4 ? $2 : $4);
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($7, 12196)) {
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29(0, 1059, 0)
  }
  $4 = SAFE_HEAP_LOAD_f32_4_4($0, 104);
  SAFE_HEAP_STORE_f32_4_4($9 + 212 | 0, 0, $4);
  $10 = SAFE_HEAP_LOAD_f32_4_4($0, 100);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
  if (!$1) {
   SAFE_HEAP_STORE_f32_4_4($0, 184, Math_fround($4 - $10))
  }
  $11 = $1 + 1 | 0;
  $20 = SAFE_HEAP_LOAD_i32_1_1($0, 433);
  $13 = SAFE_HEAP_LOAD_i32_1_1($0, 434);
  label$6 : {
   if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 264 | 0, 0) <= $4)) {
    break label$6
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 272 | 0, 0) >= $10)) {
    break label$6
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 128);
   label$7 : {
    if (($1 | 0) != 16777216) {
     break label$7
    }
    $1 = 0;
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 64)) {
     break label$7
    }
    $1 = ImGui__GetColorU32_28int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($0, 124) & 1 ? 46 : 45, Math_fround(1.0));
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4($0 + 132 | 0, 0);
   $7 = ($6 | 0) != 16777216 ? $6 : 0;
   label$8 : {
    label$9 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 88) | 0) > 0) {
      break label$9
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 360) | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 356) | 0)) {
      break label$9
     }
     $6 = 0;
     break label$8;
    }
    $6 = 0;
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 128)) {
     break label$8
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_1_U_1($0 + 122 | 0, 0) & 1 ? 136 : 140) + $0 | 0, 0);
   }
   $15 = SAFE_HEAP_LOAD_i32_1_1($0, 437);
   $17 = $1 | $7;
   if (!(!($17 | $6 | ($11 | 0) == ($13 | 0)) & ($15 | 0) < 0)) {
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 6 | 0, 0) & 16)) {
     $18 = SAFE_HEAP_LOAD_i64_8_4($0, 292);
     $21 = i64toi32_i32$HIGH_BITS;
     $12 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
     SAFE_HEAP_STORE_i64_8_4($12 + 104 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 300 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($12, 96, $18, $21);
    }
    ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 376), SAFE_HEAP_LOAD_i32_4_4($9, 580), 0);
   }
   label$13 : {
    if (!$17) {
     break label$13
    }
    $2 = SAFE_HEAP_LOAD_f32_4_4($0 + 252 | 0, 0);
    $5 = SAFE_HEAP_LOAD_f32_4_4($0, 244);
    $12 = $3 + 28 | 0;
    SAFE_HEAP_STORE_f32_4_4($12, 0, $4);
    SAFE_HEAP_STORE_f32_4_4($3, 24, $2);
    SAFE_HEAP_STORE_f32_4_4($3, 16, $5);
    SAFE_HEAP_STORE_f32_4_4($3, 20, $10);
    $8 = SAFE_HEAP_LOAD_f32_4_4($0, 276);
    $14 = SAFE_HEAP_LOAD_f32_4_4($0 + 280 | 0, 0);
    $14 = $10 >= $14 ? $10 : $14;
    SAFE_HEAP_STORE_f32_4_4($3, 20, $14);
    SAFE_HEAP_STORE_f32_4_4($3, 16, $5 >= $8 ? $5 : $8);
    $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 284 | 0, 0);
    $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 288 | 0, 0);
    $8 = $4 < $8 ? $4 : $8;
    SAFE_HEAP_STORE_f32_4_4($12, 0, $8);
    SAFE_HEAP_STORE_f32_4_4($3, 24, $2 < $5 ? $2 : $5);
    $12 = $3 + 24 | 0;
    if (!(!$1 | !($8 > $14))) {
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($9, 580), $3 + 16 | 0, $12, $1, Math_fround(0.0), 0)
    }
    if (!$7) {
     break label$13
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($3, 20) < SAFE_HEAP_LOAD_f32_4_4($3, 28))) {
     break label$13
    }
    ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($9, 580), $3 + 16 | 0, $12, $7, Math_fround(0.0), 0);
   }
   label$15 : {
    if (($15 | 0) < 0) {
     break label$15
    }
    $1 = SAFE_HEAP_LOAD_i32_1_1($0, 437);
    if (($1 | 0) < 0) {
     break label$15
    }
    $7 = $1 << 3;
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 32);
    $12 = $7 + $1 | 0;
    $17 = $3 + 24 | 0;
    while (1) {
     $15 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
     $7 = $15 + Math_imul(SAFE_HEAP_LOAD_i32_1_1($1, 4), 104) | 0;
     $5 = SAFE_HEAP_LOAD_f32_4_4($7, 8);
     if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 84) | 0) == 255) {
      $5 = Math_fround($5 - SAFE_HEAP_LOAD_f32_4_4($0, 172))
     }
     $18 = SAFE_HEAP_LOAD_i32_1_1($1, 4);
     $2 = SAFE_HEAP_LOAD_f32_4_4($7, 12);
     if ((SAFE_HEAP_LOAD_i32_1_U_1($7, 85) | 0) == 255) {
      $2 = Math_fround($2 + SAFE_HEAP_LOAD_f32_4_4($0, 176))
     }
     $8 = SAFE_HEAP_LOAD_f32_4_4($0, 100);
     $14 = SAFE_HEAP_LOAD_f32_4_4($0, 104);
     SAFE_HEAP_STORE_f32_4_4($3, 28, $14);
     SAFE_HEAP_STORE_f32_4_4($3, 20, $8);
     SAFE_HEAP_STORE_f32_4_4($3, 24, $2);
     SAFE_HEAP_STORE_f32_4_4($3, 16, $5);
     $16 = SAFE_HEAP_LOAD_f32_4_4($0, 276);
     $19 = SAFE_HEAP_LOAD_f32_4_4($0, 280);
     SAFE_HEAP_STORE_f32_4_4($3, 20, $8 >= $19 ? $8 : $19);
     $5 = $5 >= $16 ? $5 : $16;
     SAFE_HEAP_STORE_f32_4_4($3, 16, $5);
     $8 = SAFE_HEAP_LOAD_f32_4_4($0, 284);
     $16 = SAFE_HEAP_LOAD_f32_4_4($0, 288);
     SAFE_HEAP_STORE_f32_4_4($3, 28, $14 < $16 ? $14 : $16);
     $2 = $2 < $8 ? $2 : $8;
     SAFE_HEAP_STORE_f32_4_4($3, 24, $2);
     $7 = $15 + Math_imul($18, 104) | 0;
     $8 = SAFE_HEAP_LOAD_f32_4_4($7, 32);
     SAFE_HEAP_STORE_f32_4_4($3, 16, $5 >= $8 ? $5 : $8);
     $5 = SAFE_HEAP_LOAD_f32_4_4($7, 12);
     SAFE_HEAP_STORE_f32_4_4($3, 24, $2 < $5 ? $2 : $5);
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($9, 580), $3 + 16 | 0, $17, SAFE_HEAP_LOAD_i32_4_4($1, 0), Math_fround(0.0), 0);
     $1 = $1 + 8 | 0;
     if ($12 >>> 0 >= $1 >>> 0) {
      continue
     }
     break;
    };
   }
   label$21 : {
    if (!$6) {
     break label$21
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 280 | 0, 0) <= $10)) {
     break label$21
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 288 | 0, 0) > $10)) {
     break label$21
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
    $2 = SAFE_HEAP_LOAD_f32_4_4($0, 144);
    SAFE_HEAP_STORE_f32_4_4($3, 20, $10);
    SAFE_HEAP_STORE_f32_4_4($3, 16, $2);
    $2 = SAFE_HEAP_LOAD_f32_4_4($0, 148);
    SAFE_HEAP_STORE_f32_4_4($3, 12, $10);
    SAFE_HEAP_STORE_f32_4_4($3, 8, $2);
    ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($1, $3 + 16 | 0, $3 + 8 | 0, $6, Math_fround(1.0));
   }
   if (($11 | 0) != ($13 | 0)) {
    break label$6
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 280 | 0, 0) <= $4)) {
    break label$6
   }
   if (!(SAFE_HEAP_LOAD_f32_4_4($0 + 288 | 0, 0) > $4)) {
    break label$6
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
   $2 = SAFE_HEAP_LOAD_f32_4_4($0, 144);
   SAFE_HEAP_STORE_f32_4_4($3, 20, $4);
   SAFE_HEAP_STORE_f32_4_4($3, 16, $2);
   $2 = SAFE_HEAP_LOAD_f32_4_4($0, 148);
   SAFE_HEAP_STORE_f32_4_4($3, 12, $4);
   SAFE_HEAP_STORE_f32_4_4($3, 8, $2);
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($1, $3 + 16 | 0, $3 + 8 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 136), Math_fround(1.0));
  }
  label$22 : {
   if (($11 | 0) != ($20 | 0)) {
    break label$22
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   if (($6 | 0) <= 0) {
    break label$22
   }
   $7 = SAFE_HEAP_LOAD_i32_1_1($0, 436);
   $15 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   $1 = 0;
   while (1) {
    SAFE_HEAP_STORE_i32_1_1($15 + Math_imul($1, 104) | 0, 98, ($1 | 0) < ($7 | 0));
    $1 = $1 + 1 | 0;
    if (($6 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
  if (($11 | 0) == ($13 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($0, 452, 1);
   $4 = SAFE_HEAP_LOAD_f32_4_4($9 + 452 | 0, 0);
   $2 = SAFE_HEAP_LOAD_f32_4_4($9 + 460 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0 + 320 | 0, 0, $2);
   SAFE_HEAP_STORE_f32_4_4($0 + 288 | 0, 0, $2);
   SAFE_HEAP_STORE_i32_1_1($0, 439, SAFE_HEAP_LOAD_i32_1_U_1($0, 440));
   $10 = SAFE_HEAP_LOAD_f32_4_4($0, 104);
   $5 = Math_fround($10 + Math_fround(1.0));
   $4 = $4 <= $5 ? $5 : $4;
   $2 = $2 > $4 ? $4 : $2;
   SAFE_HEAP_STORE_f32_4_4($0 + 312 | 0, 0, $2);
   SAFE_HEAP_STORE_f32_4_4($0 + 280 | 0, 0, $2);
   $5 = SAFE_HEAP_LOAD_f32_4_4($0, 100);
   $4 = Math_fround(Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($0 + 248 | 0, 0)) - SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($9, 212, $4);
   SAFE_HEAP_STORE_f32_4_4($0, 100, Math_fround($4 - Math_fround($10 - $5)));
   SAFE_HEAP_STORE_f32_4_4($0, 104, $4);
   $11 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   if (($11 | 0) > 0) {
    $13 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
    $1 = 0;
    while (1) {
     $6 = $13 + Math_imul($1, 104) | 0;
     SAFE_HEAP_STORE_i32_1_1($6, 87, SAFE_HEAP_LOAD_i32_1_U_1($6, 89));
     SAFE_HEAP_STORE_f32_4_4($6 + 36 | 0, 0, $2);
     $1 = $1 + 1 | 0;
     if (($11 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   $2 = SAFE_HEAP_LOAD_f32_4_4($1 + 44 | 0, 0);
   $6 = $1 + 40 | 0;
   $4 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 36 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1, 32);
   SAFE_HEAP_STORE_i64_8_4($9 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($9, 496, SAFE_HEAP_LOAD_i64_8_4($1, 32), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
   SAFE_HEAP_STORE_f32_4_4($1 + 100 | 0, 0, $10);
   SAFE_HEAP_STORE_f32_4_4($1 + 104 | 0, 0, $4);
   SAFE_HEAP_STORE_f32_4_4($1 + 108 | 0, 0, $2);
   SAFE_HEAP_STORE_f32_4_4($1, 96, $5);
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
   $1 = ((SAFE_HEAP_LOAD_i32_4_4($1, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($1 + 68 | 0, 0) | 0) - 16 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 12, $2);
   SAFE_HEAP_STORE_f32_4_4($1, 8, $4);
   SAFE_HEAP_STORE_f32_4_4($1, 4, $10);
   SAFE_HEAP_STORE_f32_4_4($1, 0, $5);
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 376), SAFE_HEAP_LOAD_i32_4_4($9, 580), SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 16), 87));
  }
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 120) & 1)) {
   SAFE_HEAP_STORE_i32_4_4($0, 124, SAFE_HEAP_LOAD_i32_4_4($0, 124) + 1 | 0)
  }
  SAFE_HEAP_STORE_i32_1_1($0, 442, 0);
  __stack_pointer = $3 + 32 | 0;
 }
 
 function ImGui__TableSettingsCreate_28unsigned_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 12172 | 0, 0);
  $7 = Math_imul($1, 12) + 23 & -4;
  $8 = SAFE_HEAP_LOAD_i32_4_4($2, 12168);
  $4 = $7 + $8 | 0;
  label$1 : {
   if (($3 | 0) >= ($4 | 0)) {
    break label$1
   }
   $6 = $3;
   if ($3) {
    $5 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $5 = 8
   }
   $3 = ($4 | 0) < ($5 | 0) ? $5 : $4;
   if (($6 | 0) >= ($3 | 0)) {
    break label$1
   }
   $5 = ImGui__MemAlloc_28unsigned_20long_29($3);
   $6 = SAFE_HEAP_LOAD_i32_4_4($2 + 12176 | 0, 0);
   if ($6) {
    __memcpy($5, $6, SAFE_HEAP_LOAD_i32_4_4($2, 12168));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 12176));
   }
   SAFE_HEAP_STORE_i32_4_4($2, 12172, $3);
   SAFE_HEAP_STORE_i32_4_4($2, 12176, $5);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12168, $4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($2 + 12176 | 0, 0) + $8 | 0;
  SAFE_HEAP_STORE_i64_8_4($2, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, $7);
  SAFE_HEAP_STORE_i64_8_4($2 + 12 | 0, 0, 0, 0);
  $3 = $2 + 4 | 0;
  if (($1 | 0) > 0) {
   $4 = 0;
   $2 = $3 + 16 | 0;
   while (1) {
    SAFE_HEAP_STORE_i32_1_1($2, 10, 255);
    SAFE_HEAP_STORE_i64_8_4($2, 0, 0, 0);
    SAFE_HEAP_STORE_i32_2_2($2, 8, 65535);
    SAFE_HEAP_STORE_i32_1_1($2, 11, SAFE_HEAP_LOAD_i32_1_U_1($2, 11) & 240 | 4);
    $2 = $2 + 12 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != ($1 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_1_1($3, 14, 1);
  SAFE_HEAP_STORE_i32_1_1($3, 13, $1);
  SAFE_HEAP_STORE_i32_1_1($3, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
  return $3;
 }
 
 function ImGui__TableSetupColumn_28char_20const__2c_20int_2c_20float_2c_20unsigned_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
   $6 = SAFE_HEAP_LOAD_i32_4_4($4, 84);
   $5 = SAFE_HEAP_LOAD_i32_1_1($4, 419);
   if (($6 | 0) <= ($5 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($4, 419, $5 + 1 | 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($4, 16);
   $7 = $6 + Math_imul($5, 104) | 0;
   label$2 : {
    if ($1 & 24 | !($2 > Math_fround(0.0))) {
     break label$2
    }
    $8 = SAFE_HEAP_LOAD_i32_4_4($4, 4) & 57344;
    if (!(($8 | 0) == 16384 | ($8 | 0) == 8192)) {
     break label$2
    }
    $1 = $1 | 16;
   }
   TableSetupColumnFlags_28ImGuiTable__2c_20ImGuiTableColumn__2c_20int_29($4, $7, $1);
   SAFE_HEAP_STORE_i32_4_4($7, 48, $3);
   $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
   SAFE_HEAP_STORE_f32_4_4($7, 28, $2);
   label$6 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 443)) {
     break label$6
    }
    $3 = Math_imul($5, 104) + $6 | 0;
    label$7 : {
     if (!(SAFE_HEAP_LOAD_f32_4_4($3, 16) < Math_fround(0.0))) {
      break label$7
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($3, 24) < Math_fround(0.0))) {
      break label$7
     }
     if (!(!($2 > Math_fround(0.0)) | !($1 & 16))) {
      SAFE_HEAP_STORE_f32_4_4($3 + 16 | 0, 0, $2)
     }
     if ($1 & 8) {
      SAFE_HEAP_STORE_f32_4_4($3 + 24 | 0, 0, $2 > Math_fround(0.0) ? $2 : Math_fround(-1.0))
     }
     if (!($2 > Math_fround(0.0))) {
      break label$7
     }
     SAFE_HEAP_STORE_i32_1_1(Math_imul($5, 104) + $6 | 0, 99, 0);
    }
    label$10 : {
     if (!($1 & 2)) {
      break label$10
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($4, 72) & 4) {
      break label$10
     }
     SAFE_HEAP_STORE_i32_2_1(Math_imul($5, 104) + $6 | 0, 91, 0);
    }
    if (!($1 & 4)) {
     break label$6
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($4, 72) & 8) {
     break label$6
    }
    $3 = Math_imul($5, 104) + $6 | 0;
    SAFE_HEAP_STORE_i32_1_1($3, 86, 0);
    SAFE_HEAP_STORE_i32_1_1($3, 101, SAFE_HEAP_LOAD_i32_1_U_1($3, 101) & 252 | ($1 & 32768 ? 2 : 1));
   }
   $1 = Math_imul($5, 104) + $6 | 0;
   SAFE_HEAP_STORE_i32_2_2($1, 80, 65535);
   if (!$0) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 0)) {
    break label$1
   }
   $5 = $1 + 80 | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($4, 364);
   $3 = $1 - 1 | 0;
   SAFE_HEAP_STORE_i32_2_2($5, 0, $1 >>> 0 >= $3 >>> 0 ? $3 : 0);
   ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($4 + 364 | 0, $0, (strlen($0) + $0 | 0) + 1 | 0);
  }
 }
 
 function ImGui__TableSetBgColor_28int_2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = ($1 | 0) != 16777216 ? $1 : 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  label$1 : {
   label$2 : {
    switch ($0 - 1 | 0) {
    case 2:
     if (SAFE_HEAP_LOAD_f32_4_4($1, 100) > SAFE_HEAP_LOAD_f32_4_4($1 + 272 | 0, 0)) {
      break label$1
     }
     $0 = $2;
     if (($2 | 0) == -1) {
      $0 = SAFE_HEAP_LOAD_i32_4_4($1, 92)
     }
     $5 = SAFE_HEAP_LOAD_i64_8_8($1, 56);
     $4 = i64toi32_i32$HIGH_BITS;
     $2 = $0 & 31;
     if (!((($0 & 63) >>> 0 >= 32 ? $4 >>> $2 | 0 : ((1 << $2) - 1 & $4) << 32 - $2 | $5 >>> $2) & 1)) {
      break label$1
     }
     $2 = SAFE_HEAP_LOAD_i32_1_1($1, 437);
     label$5 : {
      if (($2 | 0) >= 0) {
       if ((SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($1, 32) + ($2 << 3) | 0, 4) | 0) == ($0 | 0)) {
        break label$5
       }
      }
      SAFE_HEAP_STORE_i32_1_1($1, 437, $2 + 1 | 0);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($1, 32) + (SAFE_HEAP_LOAD_i32_1_1($1, 437) << 3) | 0;
     SAFE_HEAP_STORE_i32_1_1($1, 4, $0);
     SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
     return;
    case 0:
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   if (SAFE_HEAP_LOAD_f32_4_4($1, 100) > SAFE_HEAP_LOAD_f32_4_4($1 + 272 | 0, 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4(($1 + ((($0 | 0) == 2) << 2) | 0) + 128 | 0, 0, $3);
  }
 }
 
 function ImGui__TableNextRow_28int_2c_20float_29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 441)) {
   ImGui__TableUpdateLayout_28ImGuiTable__29($2)
  }
  if (SAFE_HEAP_LOAD_i32_1_U_1($2, 442)) {
   ImGui__TableEndRow_28ImGuiTable__29($2)
  }
  SAFE_HEAP_STORE_f32_4_4($2, 108, $1);
  SAFE_HEAP_STORE_i32_4_4($2, 92, -1);
  SAFE_HEAP_STORE_i32_1_1($2, 442, 1);
  SAFE_HEAP_STORE_i32_1_1($2, 437, 255);
  SAFE_HEAP_STORE_i64_8_8($2, 128, 16777216, 16777216);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 88) + 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 88, $4);
  SAFE_HEAP_STORE_i32_4_4($2, 120, $0 & 65535 | SAFE_HEAP_LOAD_i32_4_4($2, 120) << 16);
  $3 = SAFE_HEAP_LOAD_f32_4_4($2, 104);
  $0 = SAFE_HEAP_LOAD_i32_4_4($2, 360);
  label$3 : {
   if ($4) {
    break label$3
   }
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 434) | 0) <= 0) {
    break label$3
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 216 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 112, 0);
  SAFE_HEAP_STORE_f32_4_4($2, 100, $3);
  SAFE_HEAP_STORE_f32_4_4($2, 104, $3);
  SAFE_HEAP_STORE_f32_4_4($2, 116, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 272 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($2, 152)));
  SAFE_HEAP_STORE_f32_4_4($0 + 236 | 0, 0, $3);
  SAFE_HEAP_STORE_i32_4_4($0 + 268 | 0, 0, 0);
  label$5 : {
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($2, 120) & 1)) {
    break label$5
   }
   $0 = ImGui__GetColorU32_28int_2c_20float_29(42, Math_fround(1.0));
   $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
   if (!(SAFE_HEAP_LOAD_f32_4_4($4, 100) > SAFE_HEAP_LOAD_f32_4_4($4 + 272 | 0, 0))) {
    SAFE_HEAP_STORE_i32_4_4($4, 128, ($0 | 0) != 16777216 ? $0 : 0)
   }
   if (SAFE_HEAP_LOAD_i32_4_4($2, 88)) {
    break label$5
   }
   SAFE_HEAP_STORE_i32_1_1($2, 445, 1);
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($2, 168);
  $3 = Math_fround(Math_fround($3 + $3) + SAFE_HEAP_LOAD_f32_4_4($2, 104));
  $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 100) + $1);
  SAFE_HEAP_STORE_f32_4_4($2, 104, $1 <= $3 ? $3 : $1);
  SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($2, 360), 143, 1);
 }
 
 function ImGui__TableSetColumnIndex_28int_29($0) {
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($1) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 92);
   if (($0 | 0) != ($2 | 0)) {
    if (($2 | 0) != -1) {
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 360);
     $6 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
     if (SAFE_HEAP_LOAD_i32_1_U_1($1, 120) & 1) {
      $7 = (Math_imul($2, 104) + $6 | 0) + 72 | 0
     } else {
      $7 = (Math_imul($2, 104) + $6 | 0) + (SAFE_HEAP_LOAD_i32_1_U_1($1, 452) ? 68 : 64) | 0
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
     $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 232 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($7, 0, $3 >= $4 ? $3 : $4);
     $3 = SAFE_HEAP_LOAD_f32_4_4($1, 104);
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 236 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($1, 168));
     SAFE_HEAP_STORE_f32_4_4($1, 104, $3 >= $4 ? $3 : $4);
     SAFE_HEAP_STORE_f32_4_4(Math_imul($2, 104) + $6 | 0, 60, SAFE_HEAP_LOAD_f32_4_4($5 + 384 | 0, 0));
     $3 = SAFE_HEAP_LOAD_f32_4_4($1, 112);
     $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 268 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($1, 112, $3 >= $4 ? $3 : $4);
    }
    ImGui__TableBeginCell_28ImGuiTable__2c_20int_29($1, $0);
   }
   $5 = SAFE_HEAP_LOAD_i64_8_8($1, 64);
   $2 = i64toi32_i32$HIGH_BITS;
   $1 = $0 & 31;
   $2 = (($0 & 63) >>> 0 >= 32 ? $2 >>> $1 | 0 : ((1 << $1) - 1 & $2) << 32 - $1 | $5 >>> $1) & 1;
  }
  return $2;
 }
 
 function ImGui__TableBeginCell_28ImGuiTable__2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0;
  SAFE_HEAP_STORE_i32_4_4($0, 92, $1);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
  $8 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
  $2 = $8 + Math_imul($1, 104) | 0;
  $6 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
  $4 = $6;
  if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 2 | 0, 0) & 1) {
   $4 = Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($0, 116))
  }
  SAFE_HEAP_STORE_f32_4_4($3, 208, $4);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0, 168);
  $7 = SAFE_HEAP_LOAD_f32_4_4($0, 100);
  SAFE_HEAP_STORE_f32_4_4($3 + 232 | 0, 0, $4);
  $5 = Math_fround($7 + $5);
  SAFE_HEAP_STORE_f32_4_4($3 + 212 | 0, 0, $5);
  SAFE_HEAP_STORE_f32_4_4($3 + 276 | 0, 0, Math_fround(Math_fround($4 - SAFE_HEAP_LOAD_f32_4_4($3, 12)) - SAFE_HEAP_LOAD_f32_4_4($3 + 272 | 0, 0)));
  SAFE_HEAP_STORE_f32_4_4($3 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0, 112));
  SAFE_HEAP_STORE_i32_4_4($3 + 292 | 0, 0, SAFE_HEAP_LOAD_i32_1_1($2, 98));
  SAFE_HEAP_STORE_f32_4_4($3 + 468 | 0, 0, $5);
  SAFE_HEAP_STORE_f32_4_4($3, 464, $6);
  SAFE_HEAP_STORE_f32_4_4($3 + 472 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2, 56));
  SAFE_HEAP_STORE_f32_4_4($3 + 384 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2, 60));
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 90)) {
   $4 = SAFE_HEAP_LOAD_f32_4_4($0, 104);
   SAFE_HEAP_STORE_f32_4_4($3, 212, $4 <= $5 ? $5 : $4);
  }
  $9 = Math_imul($1, 104) + $8 | 0;
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($9, 96);
  SAFE_HEAP_STORE_i32_1_1($3, 143, $2);
  if ($2) {
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   SAFE_HEAP_STORE_i32_4_4($2, 7240, 0);
   SAFE_HEAP_STORE_i32_4_4($2 + 7248 | 0, 0, 0);
  }
  label$4 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 6 | 0, 0) & 16) {
    ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 376), SAFE_HEAP_LOAD_i32_4_4($3, 580), 2);
    break label$4;
   }
   $1 = Math_imul($1, 104) + $8 | 0;
   $4 = SAFE_HEAP_LOAD_f32_4_4($1, 32);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 44 | 0, 0);
   $2 = $1 + 40 | 0;
   $6 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 36 | 0, 0);
   SAFE_HEAP_STORE_i64_8_4($3 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($3, 496, SAFE_HEAP_LOAD_i64_8_4($1, 32), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
   SAFE_HEAP_STORE_f32_4_4($2 + 100 | 0, 0, $7);
   SAFE_HEAP_STORE_f32_4_4($2 + 104 | 0, 0, $6);
   SAFE_HEAP_STORE_f32_4_4($2 + 108 | 0, 0, $5);
   SAFE_HEAP_STORE_f32_4_4($2, 96, $4);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
   $2 = ((SAFE_HEAP_LOAD_i32_4_4($2, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($2 + 68 | 0, 0) | 0) - 16 | 0;
   SAFE_HEAP_STORE_f32_4_4($2, 12, $5);
   SAFE_HEAP_STORE_f32_4_4($2, 8, $6);
   SAFE_HEAP_STORE_f32_4_4($2, 4, $7);
   SAFE_HEAP_STORE_f32_4_4($2, 0, $4);
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 376), SAFE_HEAP_LOAD_i32_4_4($3, 580), SAFE_HEAP_LOAD_i32_1_U_1($1, 87));
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$6 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 12196)) {
    break label$6
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($9 + 96 | 0, 0) & 255) {
    break label$6
   }
   ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($3 + 208 | 0, 1059, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12228, 2139095039);
  }
 }
 
 function ImGui__TableNextColumn_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($0) {
   label$2 : {
    label$3 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 442)) {
      break label$3
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
     $1 = $2 + 1 | 0;
     if (($1 | 0) >= (SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0)) {
      break label$3
     }
     if (($2 | 0) == -1) {
      break label$2
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 360);
     $6 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
     if (SAFE_HEAP_LOAD_i32_1_U_1($0, 120) & 1) {
      $7 = (Math_imul($2, 104) + $6 | 0) + 72 | 0
     } else {
      $7 = (Math_imul($2, 104) + $6 | 0) + (SAFE_HEAP_LOAD_i32_1_U_1($0, 452) ? 68 : 64) | 0
     }
     $3 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
     $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 232 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($7, 0, $3 >= $4 ? $3 : $4);
     $3 = SAFE_HEAP_LOAD_f32_4_4($0, 104);
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 236 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0, 168));
     SAFE_HEAP_STORE_f32_4_4($0, 104, $3 >= $4 ? $3 : $4);
     SAFE_HEAP_STORE_f32_4_4(Math_imul($2, 104) + $6 | 0, 60, SAFE_HEAP_LOAD_f32_4_4($5 + 384 | 0, 0));
     $3 = SAFE_HEAP_LOAD_f32_4_4($0, 112);
     $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 268 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0, 112, $3 >= $4 ? $3 : $4);
     break label$2;
    }
    ImGui__TableNextRow_28int_2c_20float_29(0, Math_fround(0.0));
    $1 = 0;
   }
   ImGui__TableBeginCell_28ImGuiTable__2c_20int_29($0, $1);
   $5 = SAFE_HEAP_LOAD_i64_8_8($0, 64);
   $2 = i64toi32_i32$HIGH_BITS;
   $0 = SAFE_HEAP_LOAD_i64_4_U_4($0, 92);
   $1 = $0 & 31;
   $1 = (($0 & 63) >>> 0 >= 32 ? $2 >>> $1 | 0 : ((1 << $1) - 1 & $2) << 32 - $1 | $5 >>> $1) & 1;
  }
  return $1;
 }
 
 function ImGui__TableHeadersRow_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 441)) {
   ImGui__TableUpdateLayout_28ImGuiTable__29($9)
  }
  ImGui__GetCursorScreenPos_28_29($8 + 8 | 0);
  $10 = SAFE_HEAP_LOAD_f32_4_4($8, 12);
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = ImGui__GetFontSize_28_29();
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($3) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 84)
  }
  if (($2 | 0) > 0) {
   $3 = $2;
   $2 = 0;
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
    $4 = 0;
    label$5 : {
     if (!$1) {
      break label$5
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 84) | 0) == ($2 | 0)) {
      $4 = ((SAFE_HEAP_LOAD_i32_1_1($1, 420) | 0) == ($2 | 0)) << 27;
      break label$5;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($2, 104) | 0, 0);
    }
    if (($4 & 16781312) == 16777216) {
     $12 = $6 + 8 | 0;
     $4 = 0;
     label$9 : {
      if (!$1) {
       break label$9
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 441)) {
       $4 = 19354;
       if ((SAFE_HEAP_LOAD_i32_1_1($1, 419) | 0) <= ($2 | 0)) {
        break label$9
       }
      }
      $11 = SAFE_HEAP_LOAD_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($2, 104) | 0, 80);
      $4 = 19354;
      if (($11 | 0) == -1) {
       break label$9
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 372 | 0, 0) + $11 | 0;
     }
     ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($12, $4, 0, 0, Math_fround(-1.0));
     $5 = SAFE_HEAP_LOAD_f32_4_4($6, 12);
     $7 = $7 >= $5 ? $7 : $5;
    }
    $2 = $2 + 1 | 0;
    if (($2 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  $5 = SAFE_HEAP_LOAD_f32_4_4(ImGui__GetStyle_28_29() + 96 | 0, 0);
  __stack_pointer = $6 + 16 | 0;
  $7 = Math_fround(Math_fround($5 + $5) + $7);
  ImGui__TableNextRow_28int_2c_20float_29(1, $7);
  label$20 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($9, 455)) {
    break label$20
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
   if ($2) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 84)
   }
   $2 = $0;
   if (($0 | 0) > 0) {
    $0 = 0;
    while (1) {
     if (ImGui__TableSetColumnIndex_28int_29($0)) {
      $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
      $1 = 0;
      label$7 : {
       if (!$3) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($3, 84) | 0) == ($0 | 0)) {
        $1 = ((SAFE_HEAP_LOAD_i32_1_1($3, 420) | 0) == ($0 | 0)) << 27;
        break label$7;
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 16) + Math_imul($0, 104) | 0, 0);
      }
      $6 = $1 & 4096;
      $1 = $6 >>> 12 | 0 ? 19354 : 0;
      label$92 : {
       if ($6 | !$3) {
        break label$92
       }
       if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 441)) {
        $1 = 19354;
        if ((SAFE_HEAP_LOAD_i32_1_1($3, 419) | 0) <= ($0 | 0)) {
         break label$92
        }
       }
       $1 = SAFE_HEAP_LOAD_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($3, 16) + Math_imul($0, 104) | 0, 80);
       if (($1 | 0) == -1) {
        $1 = 19354;
        break label$92;
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 372 | 0, 0) + $1 | 0;
      }
      ImGui__PushID_28int_29(Math_imul(SAFE_HEAP_LOAD_i32_4_4($9, 84), SAFE_HEAP_LOAD_i32_2_2($9, 96)) + $0 | 0);
      ImGui__TableHeader_28char_20const__29($1);
      ImGui__PopID_28_29();
     }
     $0 = $0 + 1 | 0;
     if (($2 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
   }
   ImGui__GetMousePos_28_29($8 + 8 | 0);
   if (!ImGui__IsMouseReleased_28int_29(1)) {
    break label$20
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
   if ($0) {
    $3 = SAFE_HEAP_LOAD_i32_1_1($0, 420)
   } else {
    $3 = -1
   }
   if (($3 | 0) != ($2 | 0)) {
    break label$20
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($8, 12);
   if (!($5 >= $10) | !(Math_fround($10 + $7) > $5)) {
    break label$20
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 7)) {
    break label$20
   }
   SAFE_HEAP_STORE_i32_1_1($0, 446, 1);
   SAFE_HEAP_STORE_i32_2_2($0, 98, SAFE_HEAP_LOAD_i32_2_U_2($0, 96));
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
   SAFE_HEAP_STORE_i32_1_1($0, 432, (SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) == ($2 | 0) ? -1 : $2);
   ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29(ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(1873, SAFE_HEAP_LOAD_i32_4_4($0, 0)), 0);
  }
  __stack_pointer = $8 + 16 | 0;
 }
 
 function ImGui__TableHeader_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $17 = SAFE_HEAP_LOAD_i32_4_4($8, 7080);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($17, 143)) {
    break label$1
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($8, 8036);
   $7 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
   $9 = SAFE_HEAP_LOAD_i32_4_4($1, 92);
   $18 = $0 ? $0 : 19354;
   $23 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($18);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 104 | 0, $18, $23, 1, Math_fround(-1.0));
   SAFE_HEAP_STORE_i64_8_8($2, 96, SAFE_HEAP_LOAD_i64_8_4($17, 208), i64toi32_i32$HIGH_BITS);
   $4 = Math_imul($9, 104);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + $4 | 0;
   $10 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 84) | 0) == 255) {
    $11 = Math_fround($10 - SAFE_HEAP_LOAD_f32_4_4($1, 172))
   } else {
    $11 = $10
   }
   $14 = $11;
   $10 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 85) | 0) == 255) {
    $10 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 176))
   }
   $4 = $4 + $7 | 0;
   $15 = SAFE_HEAP_LOAD_f32_4_4($1, 104);
   $20 = SAFE_HEAP_LOAD_f32_4_4($1, 100);
   $11 = SAFE_HEAP_LOAD_f32_4_4($1, 108);
   $12 = SAFE_HEAP_LOAD_f32_4_4($1, 168);
   $19 = SAFE_HEAP_LOAD_f32_4_4($2, 108);
   SAFE_HEAP_STORE_i32_4_4($2, 92, 0);
   $16 = Math_fround($11 - Math_fround($12 + $12));
   $0 = $16 <= $19;
   label$6 : {
    label$7 : {
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 8)) {
      break label$7
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($4 + 1 | 0, 0) & 2) {
      break label$7
     }
     $12 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 6468) * Math_fround(.6499999761581421)) + SAFE_HEAP_LOAD_f32_4_4($8 + 5476 | 0, 0));
     label$8 : {
      if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
       $5 = ~~$12;
       break label$8;
      }
      $5 = -2147483648;
     }
     $12 = Math_fround($5 | 0);
     $3 = SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($9, 104) | 0, 86);
     if (($3 | 0) <= 0) {
      $11 = Math_fround(0.0)
     } else {
      SAFE_HEAP_STORE_i32_4_4($2, 32, $3 + 1 | 0);
      $3 = $2 + 92 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3, 4, 13404, $2 + 32 | 0);
      $11 = SAFE_HEAP_LOAD_f32_4_4($8 + 5500 | 0, 0);
      ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 76 | 0, $3, 0, 0, Math_fround(-1.0));
      $11 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($2, 76));
     }
     break label$6;
    }
    $12 = Math_fround(0.0);
    $11 = Math_fround(0.0);
   }
   $19 = $0 ? $19 : $16;
   $22 = SAFE_HEAP_LOAD_f32_4_4($2, 104);
   $26 = SAFE_HEAP_LOAD_f32_4_4($2, 96);
   $0 = $7 + Math_imul($9, 104) | 0;
   $16 = SAFE_HEAP_LOAD_f32_4_4($0, 72);
   $25 = SAFE_HEAP_LOAD_f32_4_4($0, 56);
   SAFE_HEAP_STORE_f32_4_4($0, 72, $16 >= $25 ? $16 : $25);
   $16 = SAFE_HEAP_LOAD_f32_4_4($0, 76);
   $22 = Math_fround($12 + Math_fround($11 + Math_fround($26 + $22)));
   SAFE_HEAP_STORE_f32_4_4($0, 76, $16 >= $22 ? $16 : $22);
   $0 = 0;
   label$12 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 446)) {
     break label$12
    }
    $0 = 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($1, 432) | 0) != ($9 | 0)) {
     break label$12
    }
    $0 = (SAFE_HEAP_LOAD_i32_2_U_2($1, 98) | 0) == (SAFE_HEAP_LOAD_i32_2_U_2($1, 96) | 0);
   }
   $5 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($17, $18);
   $16 = SAFE_HEAP_LOAD_f32_4_4($8 + 5512 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2, 80, $20);
   $20 = Math_fround(Math_fround($16 + $16) + Math_fround($20 + $19));
   SAFE_HEAP_STORE_f32_4_4($2 + 88 | 0, 0, $15 >= $20 ? $15 : $20);
   SAFE_HEAP_STORE_f32_4_4($2, 84, $10);
   SAFE_HEAP_STORE_f32_4_4($2, 76, $14);
   SAFE_HEAP_STORE_f32_4_4($2, 72, $19);
   SAFE_HEAP_STORE_i32_4_4($2, 68, 0);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2 + 68 | 0, Math_fround(-1.0));
   if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($2 + 76 | 0, $5, 0, 0)) {
    break label$1
   }
   $27 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($2 + 76 | 0, $5, $2 + 67 | 0, $2 + 66 | 0, 4096);
   if ((SAFE_HEAP_LOAD_i32_4_4($8, 7136) | 0) != ($5 | 0)) {
    ImGui__SetItemAllowOverlap_28_29()
   }
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($2, 66);
   $6 = SAFE_HEAP_LOAD_i32_1_U_1($2, 67);
   label$15 : {
    if (($0 | (($3 | $6) & 255) != 0) == 1) {
     $13 = ImGui__GetColorU32_28int_2c_20float_29($3 & 255 ? 26 : $6 & 255 ? 25 : 24, Math_fround(1.0));
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
     if (SAFE_HEAP_LOAD_f32_4_4($3, 100) > SAFE_HEAP_LOAD_f32_4_4($3 + 272 | 0, 0)) {
      break label$15
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 92);
     if (($0 | 0) == -1) {
      $0 = SAFE_HEAP_LOAD_i32_4_4($3, 92)
     }
     $24 = SAFE_HEAP_LOAD_i64_8_8($3, 56);
     $21 = i64toi32_i32$HIGH_BITS;
     $6 = $0 & 31;
     if (!((($0 & 63) >>> 0 >= 32 ? $21 >>> $6 | 0 : ((1 << $6) - 1 & $21) << 32 - $6 | $24 >>> $6) & 1)) {
      break label$15
     }
     $13 = ($13 | 0) != 16777216 ? $13 : 0;
     $6 = SAFE_HEAP_LOAD_i32_1_1($3, 437);
     label$18 : {
      if (($6 | 0) >= 0) {
       if ((SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($3, 32) + ($6 << 3) | 0, 4) | 0) == ($0 | 0)) {
        break label$18
       }
      }
      SAFE_HEAP_STORE_i32_1_1($3, 437, $6 + 1 | 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($3, 32) + (SAFE_HEAP_LOAD_i32_1_1($3, 437) << 3) | 0;
     SAFE_HEAP_STORE_i32_1_1($3, 4, $0);
     SAFE_HEAP_STORE_i32_4_4($3, 0, $13);
     break label$15;
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 120) & 1) {
     break label$15
    }
    $13 = ImGui__GetColorU32_28int_2c_20float_29(42, Math_fround(1.0));
    $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
    if (SAFE_HEAP_LOAD_f32_4_4($3, 100) > SAFE_HEAP_LOAD_f32_4_4($3 + 272 | 0, 0)) {
     break label$15
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 92);
    if (($0 | 0) == -1) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($3, 92)
    }
    $24 = SAFE_HEAP_LOAD_i64_8_8($3, 56);
    $21 = i64toi32_i32$HIGH_BITS;
    $6 = $0 & 31;
    if (!((($0 & 63) >>> 0 >= 32 ? $21 >>> $6 | 0 : ((1 << $6) - 1 & $21) << 32 - $6 | $24 >>> $6) & 1)) {
     break label$15
    }
    $13 = ($13 | 0) != 16777216 ? $13 : 0;
    $6 = SAFE_HEAP_LOAD_i32_1_1($3, 437);
    label$21 : {
     if (($6 | 0) >= 0) {
      if ((SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($3, 32) + ($6 << 3) | 0, 4) | 0) == ($0 | 0)) {
       break label$21
      }
     }
     SAFE_HEAP_STORE_i32_1_1($3, 437, $6 + 1 | 0);
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($3, 32) + (SAFE_HEAP_LOAD_i32_1_1($3, 437) << 3) | 0;
    SAFE_HEAP_STORE_i32_1_1($3, 4, $0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $13);
   }
   ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($2 + 76 | 0, $5, 10);
   label$23 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($2, 66)) {
     SAFE_HEAP_STORE_i32_1_1($1, 425, $9);
     $0 = $17 + 212 | 0;
     $15 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
     SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($15 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 5496 | 0, 0) * Math_fround(-.5))));
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 2)) {
      break label$23
     }
     if (!ImGui__IsMouseDragging_28int_2c_20float_29(0, Math_fround(-1.0))) {
      break label$23
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($8, 7876)) {
      break label$23
     }
     SAFE_HEAP_STORE_i32_1_1($1, 426, $9);
     SAFE_HEAP_STORE_i32_2_2($1, 98, SAFE_HEAP_LOAD_i32_2_U_2($1, 96));
     $15 = SAFE_HEAP_LOAD_f32_4_4($8 + 880 | 0, 0);
     label$25 : {
      if (!($15 < Math_fround(0.0))) {
       break label$25
      }
      if (!(SAFE_HEAP_LOAD_f32_4_4($8 + 228 | 0, 0) < $14)) {
       break label$25
      }
      $0 = SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($9, 104) | 0, 84);
      if (($0 | 0) == -1) {
       $0 = 0
      } else {
       $0 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($0, 104) | 0
      }
      if (!$0) {
       break label$25
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | SAFE_HEAP_LOAD_i32_4_4($4, 0)) & 64) {
       break label$25
      }
      $5 = SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($9, 104) | 0, 83);
      $3 = SAFE_HEAP_LOAD_i32_1_1($1, 435);
      if ((($5 | 0) >= ($3 | 0) | 0) == ((SAFE_HEAP_LOAD_i32_1_1($0, 83) | 0) < ($3 | 0) | 0)) {
       break label$25
      }
      SAFE_HEAP_STORE_i32_1_1($1, 427, 255);
     }
     if (!($15 > Math_fround(0.0))) {
      break label$23
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($8 + 228 | 0, 0) > $10)) {
      break label$23
     }
     $0 = SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($9, 104) | 0, 85);
     if (($0 | 0) == -1) {
      $0 = 0
     } else {
      $0 = SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($0, 104) | 0
     }
     if (!$0) {
      break label$23
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | SAFE_HEAP_LOAD_i32_4_4($4, 0)) & 64) {
      break label$23
     }
     $5 = SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($9, 104) | 0, 83);
     $3 = SAFE_HEAP_LOAD_i32_1_1($1, 435);
     if ((($5 | 0) >= ($3 | 0) | 0) == ((SAFE_HEAP_LOAD_i32_1_1($0, 83) | 0) < ($3 | 0) | 0)) {
      break label$23
     }
     SAFE_HEAP_STORE_i32_1_1($1, 427, 1);
     break label$23;
    }
    $0 = $17 + 212 | 0;
    $15 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
    SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($15 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 5496 | 0, 0) * Math_fround(-.5))));
   }
   $10 = Math_fround(Math_fround($10 - $12) - $11);
   label$30 : {
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 8)) {
     break label$30
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($4 + 1 | 0, 0) & 2) {
     break label$30
    }
    $0 = SAFE_HEAP_LOAD_i32_1_1($7 + Math_imul($9, 104) | 0, 86);
    if (($0 | 0) != -1) {
     $14 = $10 <= $14 ? $14 : $10;
     $12 = SAFE_HEAP_LOAD_f32_4_4($2, 100);
     if (($0 | 0) > 0) {
      ImGui__PushStyleColor_28int_2c_20unsigned_20int_29(0, ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(.699999988079071)));
      $15 = SAFE_HEAP_LOAD_f32_4_4($8 + 5500 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($2, 60, $12);
      SAFE_HEAP_STORE_f32_4_4($2, 56, Math_fround($14 + $15));
      SAFE_HEAP_STORE_i64_8_8($2, 24, SAFE_HEAP_LOAD_i64_8_4($2, 56), i64toi32_i32$HIGH_BITS);
      ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($2 + 24 | 0, $2 + 92 | 0, 0, 1);
      ImGui__PopStyleColor_28int_29(1);
      $14 = Math_fround($11 + $14);
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($17, 580);
     SAFE_HEAP_STORE_f32_4_4($2, 52, $12);
     SAFE_HEAP_STORE_f32_4_4($2, 48, $14);
     $3 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
     $7 = SAFE_HEAP_LOAD_i32_1_U_1($7 + Math_imul($9, 104) | 0, 101);
     SAFE_HEAP_STORE_i64_8_8($2, 16, SAFE_HEAP_LOAD_i64_8_4($2, 48), i64toi32_i32$HIGH_BITS);
     ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $2 + 16 | 0, $3, ($7 & 3) == 1 ? 2 : 3, Math_fround(.6499999761581421));
    }
    if (!$27) {
     break label$30
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($1, 426) | 0) == ($9 | 0)) {
     break label$30
    }
    __inlined_func$ImGui__TableGetColumnNextSortDirection_28ImGuiTableColumn__29 : {
     if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 86) | 0) != 255) {
      $1 = SAFE_HEAP_LOAD_i32_1_U_1($4, 101);
      $7 = $1 & 3;
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($4, 102);
      $0 = 0;
      while (1) {
       $5 = $4 >>> (($0 + 1 >>> 0) % (($1 >>> 2 & 3) >>> 0) << 1) & 3;
       if (($7 | 0) == ($4 >>> ($0 << 1) & 3)) {
        break __inlined_func$ImGui__TableGetColumnNextSortDirection_28ImGuiTableColumn__29
       }
       $0 = $0 + 1 | 0;
       if (($0 | 0) != 3) {
        continue
       }
       break;
      };
      $5 = 0;
      break __inlined_func$ImGui__TableGetColumnNextSortDirection_28ImGuiTableColumn__29;
     }
     $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 102) & 3;
    }
    $4 = 0;
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($8 + 253 | 0, 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
    $3 = $1 & SAFE_HEAP_LOAD_i32_1_U_1($0 + 7 | 0, 0) >>> 2;
    $1 = 0;
    label$10 : {
     if (($3 | 0) != 1) {
      break label$10
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
     $1 = 1;
     if (($7 | 0) <= 0) {
      break label$10
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
     $1 = 0;
     while (1) {
      $4 = $4 << 24 >> 24;
      $13 = SAFE_HEAP_LOAD_i32_1_1(Math_imul($1, 104) + $6 | 0, 86);
      $4 = ($4 | 0) > ($13 | 0) ? $4 : $13;
      $1 = $1 + 1 | 0;
      if (($7 | 0) != ($1 | 0)) {
       continue
      }
      break;
     };
     $1 = $4 + 1 | 0;
    }
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($9, 104) | 0;
    $5 = $5 & 3;
    SAFE_HEAP_STORE_i32_1_1($7, 101, $5 | SAFE_HEAP_LOAD_i32_1_U_1($7, 101) & 252);
    $4 = $7 + 86 | 0;
    label$3 : {
     label$4 : {
      if (!$5) {
       $1 = 255;
       break label$4;
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != 255 & $3) {
       break label$3
      }
     }
     SAFE_HEAP_STORE_i32_1_1($4, 0, $1);
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) > 0) {
     $4 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16) + Math_imul($4, 104) | 0;
      if (!(($1 | 0) == ($7 | 0) | $3)) {
       SAFE_HEAP_STORE_i32_1_1($1, 86, 255)
      }
      label$9 : {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 86) | 0) == 255) {
        break label$9
       }
       $5 = SAFE_HEAP_LOAD_i32_1_U_1($1, 101);
       if ($5 >>> 4 >>> ($5 & 3) & 1) {
        break label$9
       }
       SAFE_HEAP_STORE_i32_1_1($1 + 101 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 102) & 3 | $5 & 252);
       SAFE_HEAP_STORE_i32_1_1($0, 444, 1);
      }
      $4 = $4 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) > ($4 | 0)) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_i32_1_1($0, 444, 1);
    SAFE_HEAP_STORE_i32_1_1($0, 448, 1);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($17, 580);
   $14 = SAFE_HEAP_LOAD_f32_4_4($8 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2, 68, $10);
   SAFE_HEAP_STORE_f32_4_4($2, 72, Math_fround($14 + Math_fround($19 + SAFE_HEAP_LOAD_f32_4_4($2, 100))));
   ImGui__RenderTextEllipsis_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__29($0, $2 + 96 | 0, $2 + 68 | 0, $10, $10, $18, $23, $2 + 104 | 0);
   label$34 : {
    if (!(SAFE_HEAP_LOAD_f32_4_4($2, 104) > Math_fround($10 - SAFE_HEAP_LOAD_f32_4_4($2, 96)))) {
     break label$34
    }
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($2, 67) & 255)) {
     break label$34
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($8, 7132) > SAFE_HEAP_LOAD_f32_4_4($8, 12080))) {
     break label$34
    }
    SAFE_HEAP_STORE_i32_4_4($2, 4, $18);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $23 - $18 | 0);
    ImGui__SetTooltip_28char_20const__2c_20____29(5445, $2);
   }
   if (!ImGui__IsMouseReleased_28int_29(1)) {
    break label$1
   }
   if (!ImGui__IsItemHovered_28int_29(0)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
   if (($9 | 0) == -1) {
    $9 = SAFE_HEAP_LOAD_i32_4_4($0, 92)
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 4) & 7)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0, 446, 1);
   SAFE_HEAP_STORE_i32_2_2($0, 98, SAFE_HEAP_LOAD_i32_2_U_2($0, 96));
   SAFE_HEAP_STORE_i32_1_1($0, 432, (SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0) == ($9 | 0) ? -1 : $9);
   ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29(ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(1873, SAFE_HEAP_LOAD_i32_4_4($0, 0)), 0);
  }
  __stack_pointer = $2 + 112 | 0;
 }
 
 function TableSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0;
  $5 = __stack_pointer - 144 | 0;
  __stack_pointer = $5;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 12176 | 0, 0);
  if ($3) {
   $4 = $3 + 4 | 0;
   while (1) {
    $6 = $4;
    label$3 : {
     if (!SAFE_HEAP_LOAD_i32_4_4($4, 0)) {
      break label$3
     }
     $8 = SAFE_HEAP_LOAD_i32_4_4($6, 4);
     if (!($8 & 15)) {
      break label$3
     }
     $9 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     $3 = $4 - 1 | 0;
     $7 = (($4 >>> 0 >= $3 >>> 0 ? $3 : 0) + Math_imul(SAFE_HEAP_LOAD_i32_1_1($6, 12), 50) | 0) + 30 | 0;
     if (($9 | 0) < ($7 | 0)) {
      $4 = ImGui__MemAlloc_28unsigned_20long_29($7);
      $3 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
      if ($3) {
       __memcpy($4, $3, SAFE_HEAP_LOAD_i32_4_4($2, 0));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 8));
      }
      SAFE_HEAP_STORE_i32_4_4($2, 4, $7);
      SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
     SAFE_HEAP_STORE_i32_4_4($5, 136, SAFE_HEAP_LOAD_i32_1_1($6, 12));
     SAFE_HEAP_STORE_i32_4_4($5, 132, $3);
     SAFE_HEAP_STORE_i32_4_4($5, 128, $4);
     ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 19250, $5 + 128 | 0);
     $10 = SAFE_HEAP_LOAD_f32_4_4($6, 8);
     if ($10 != Math_fround(0.0)) {
      SAFE_HEAP_STORE_f64_8_8($5, 112, +$10);
      ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 19190, $5 + 112 | 0);
     }
     if ((SAFE_HEAP_LOAD_i32_1_1($6, 12) | 0) > 0) {
      $11 = $8 & 8;
      $12 = $8 & 2;
      $13 = $8 & 4;
      $8 = $8 & 1;
      $9 = 0;
      $4 = $6 + 16 | 0;
      while (1) {
       $7 = SAFE_HEAP_LOAD_i32_4_4($4, 4) | $8 | $13 | $12;
       $3 = ($7 | 0) != 0;
       if (!(!!$7 | !$11)) {
        $3 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 10) | 0) != 255
       }
       if ($3) {
        SAFE_HEAP_STORE_i32_4_4($5, 96, $9);
        ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 12896, $5 + 96 | 0);
        $3 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
        if ($3) {
         SAFE_HEAP_STORE_i32_4_4($5, 80, $3);
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 14562, $5 + 80 | 0);
        }
        label$13 : {
         if (!$8) {
          break label$13
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($4, 11) & 8) {
          SAFE_HEAP_STORE_f64_8_8($5, 64, +SAFE_HEAP_LOAD_f32_4_4($4, 0));
          ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 9631, $5 - -64 | 0);
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($4, 11) & 8) {
          break label$13
         }
         $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
         label$15 : {
          if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
           $3 = ~~$10;
           break label$15;
          }
          $3 = -2147483648;
         }
         SAFE_HEAP_STORE_i32_4_4($5, 48, $3);
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 12918, $5 + 48 | 0);
        }
        if ($13) {
         SAFE_HEAP_STORE_i32_4_4($5, 32, SAFE_HEAP_LOAD_i32_1_U_1($4, 11) >>> 2 & 1);
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 12928, $5 + 32 | 0);
        }
        if ($12) {
         SAFE_HEAP_STORE_i32_4_4($5, 16, SAFE_HEAP_LOAD_i32_1_1($4, 9));
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 12908, $5 + 16 | 0);
        }
        label$19 : {
         if (!$11) {
          break label$19
         }
         $7 = SAFE_HEAP_LOAD_i32_1_1($4, 10);
         if (($7 | 0) == -1) {
          break label$19
         }
         $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 11);
         SAFE_HEAP_STORE_i32_4_4($5, 0, $7);
         SAFE_HEAP_STORE_i32_4_4($5, 4, ($3 & 3) == 1 ? 118 : 94);
         ImGuiTextBuffer__appendf_28char_20const__2c_20____29($2, 13519, $5);
        }
        ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($2, 19353, 0);
       }
       $3 = $9 + 1 | 0;
       $9 = $3;
       $4 = $4 + 12 | 0;
       if ((SAFE_HEAP_LOAD_i32_1_1($6, 12) | 0) > ($3 | 0)) {
        continue
       }
       break;
      };
     }
     ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($2, 19353, 0);
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($6 - 4 | 0, 0) + $6 | 0;
    $4 = $3;
    $3 = ($3 | 0) == ((SAFE_HEAP_LOAD_i32_4_4($0, 12176) + SAFE_HEAP_LOAD_i32_4_4($0, 12168) | 0) + 4 | 0);
    $4 = $3 ? 0 : $4;
    if (!$3) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $5 + 144 | 0;
 }
 
 function TableSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 8068 | 0, 0);
  if ($3) {
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 8076 | 0, 0);
   $1 = 0;
   while (1) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(($1 << 3) + $5 | 0, 4);
    label$3 : {
     if (($2 | 0) == -1) {
      break label$3
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8064);
     if (!$4) {
      break label$3
     }
     $2 = Math_imul($2, 456) + $4 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 76, -1);
     SAFE_HEAP_STORE_i32_1_1($2, 447, 1);
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function TableSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $0 = __stack_pointer - 144 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_4_4($0, 140, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 136, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 132, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 128, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 112, $0 + 140 | 0);
  label$1 : {
   if ((sscanf($3, 10018, $0 + 112 | 0) | 0) == 1) {
    SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4($0, 140));
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 100, $0 + 132 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 96, $0 + 136 | 0);
   if ((sscanf($3, 7971, $0 + 96 | 0) | 0) != 1) {
    break label$1
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 136);
   if (($1 | 0) < 0) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 12) | 0) <= ($1 | 0)) {
    break label$1
   }
   $1 = ImStrSkipBlank_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($0, 132) + $3 | 0);
   SAFE_HEAP_STORE_i32_1_1($0, 127, 0);
   $5 = $2 + 16 | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 136);
   $4 = $5 + Math_imul($3, 12) | 0;
   SAFE_HEAP_STORE_i32_1_1($4, 8, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 84, $0 + 132 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 80, $0 + 128 | 0);
   if ((sscanf($1, 7995, $0 + 80 | 0) | 0) == 1) {
    $1 = ImStrSkipBlank_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($0, 132) + $1 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($0, 128));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 68, $0 + 132 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 64, $0 + 128 | 0);
   if ((sscanf($1, 7947, $0 - -64 | 0) | 0) == 1) {
    $1 = ImStrSkipBlank_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($0, 132) + $1 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(SAFE_HEAP_LOAD_i32_4_4($0, 128) | 0));
    $6 = $5 + Math_imul($3, 12) | 0;
    SAFE_HEAP_STORE_i32_1_1($6, 11, SAFE_HEAP_LOAD_i32_1_U_1($6, 11) & 247);
    SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 1);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 52, $0 + 132 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 48, $0 + 140 | 0);
   if ((sscanf($1, 7924, $0 + 48 | 0) | 0) == 1) {
    $1 = ImStrSkipBlank_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($0, 132) + $1 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 0, SAFE_HEAP_LOAD_f32_4_4($0, 140));
    $4 = $5 + Math_imul($3, 12) | 0;
    SAFE_HEAP_STORE_i32_1_1($4, 11, SAFE_HEAP_LOAD_i32_1_U_1($4, 11) | 8);
    SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 1);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 36, $0 + 132 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 32, $0 + 128 | 0);
   if ((sscanf($1, 7958, $0 + 32 | 0) | 0) == 1) {
    $1 = ImStrSkipBlank_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($0, 132) + $1 | 0);
    $4 = $5 + Math_imul($3, 12) | 0;
    SAFE_HEAP_STORE_i32_1_1($4, 11, SAFE_HEAP_LOAD_i32_1_U_1($0, 128) << 2 & 4 | SAFE_HEAP_LOAD_i32_1_U_1($4, 11) & 251);
    SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 4);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 20, $0 + 132 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 16, $0 + 128 | 0);
   if ((sscanf($1, 7936, $0 + 16 | 0) | 0) == 1) {
    $1 = ImStrSkipBlank_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($0, 132) + $1 | 0);
    SAFE_HEAP_STORE_i32_1_1($5 + Math_imul($3, 12) | 0, 9, SAFE_HEAP_LOAD_i32_4_4($0, 128));
    SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 2);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 8, $0 + 132 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 4, $0 + 127 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 0, $0 + 128 | 0);
   if ((sscanf($1, 7983, $0) | 0) != 2) {
    break label$1
   }
   ImStrSkipBlank_28char_20const__29(SAFE_HEAP_LOAD_i32_4_4($0, 132) + $1 | 0);
   $1 = $5 + Math_imul($3, 12) | 0;
   SAFE_HEAP_STORE_i32_1_1($1, 10, SAFE_HEAP_LOAD_i32_4_4($0, 128));
   SAFE_HEAP_STORE_i32_1_1($1, 11, SAFE_HEAP_LOAD_i32_1_U_1($1, 11) & 252 | ((SAFE_HEAP_LOAD_i32_1_U_1($0, 127) | 0) == 94 ? 2 : 1));
   SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 8);
  }
  __stack_pointer = $0 + 144 | 0;
 }
 
 function TableSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 0, $3 + 12 | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 4, $3 + 8 | 0);
  $0 = 0;
  label$1 : {
   if ((sscanf($2, 12990, $3) | 0) < 2) {
    break label$1
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 12176 | 0, 0);
   $4 = $0 + 4 | 0;
   $2 = $0 ? $4 : 0;
   $6 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
   label$2 : {
    if (!$0) {
     break label$2
    }
    while (1) {
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($6 | 0)) {
      break label$2
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($2 - 4 | 0, 0) + $2 | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 12168) + $4 | 0;
     $2 = ($5 | 0) != ($0 | 0) ? $0 : 0;
     if (($0 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   $0 = $2;
   if ($0) {
    $5 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
    $4 = SAFE_HEAP_LOAD_i32_1_1($0, 13);
    if (($5 | 0) <= ($4 | 0)) {
     SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, 0, 0);
     if (($4 | 0) > 0) {
      $2 = 0;
      $1 = $0 + 16 | 0;
      while (1) {
       SAFE_HEAP_STORE_i32_1_1($1, 10, 255);
       SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
       SAFE_HEAP_STORE_i32_2_2($1, 8, 65535);
       SAFE_HEAP_STORE_i32_1_1($1, 11, SAFE_HEAP_LOAD_i32_1_U_1($1, 11) & 240 | 4);
       $1 = $1 + 12 | 0;
       $2 = $2 + 1 | 0;
       if (($4 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
     }
     SAFE_HEAP_STORE_i32_1_1($0, 14, 1);
     SAFE_HEAP_STORE_i32_1_1($0, 13, $4);
     SAFE_HEAP_STORE_i32_1_1($0, 12, $5);
     SAFE_HEAP_STORE_i32_4_4($0, 0, $6);
     break label$1;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
   }
   $0 = ImGui__TableSettingsCreate_28unsigned_20int_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($3, 12), SAFE_HEAP_LOAD_i32_4_4($3, 8));
  }
  $1 = $0;
  __stack_pointer = $3 + 16 | 0;
  return $1 | 0;
 }
 
 function TableSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 8068 | 0, 0);
  if ($2) {
   $5 = SAFE_HEAP_LOAD_i32_4_4($0 + 8076 | 0, 0);
   $1 = 0;
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_4_4(($1 << 3) + $5 | 0, 4);
    label$3 : {
     if (($3 | 0) == -1) {
      break label$3
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8064);
     if (!$4) {
      break label$3
     }
     SAFE_HEAP_STORE_i32_4_4(Math_imul($3, 456) + $4 | 0, 76, -1);
    }
    $1 = $1 + 1 | 0;
    if (($1 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12176 | 0, 0);
  if ($1) {
   SAFE_HEAP_STORE_i64_8_4($0, 12168, 0, 0);
   ImGui__MemFree_28void__29($1);
   SAFE_HEAP_STORE_i32_4_4($0, 12176, 0);
  }
 }
 
 function ImGui__DebugNodeTableSettings_28ImGuiTableSettings__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0);
  $1 = __stack_pointer - 96 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 84, SAFE_HEAP_LOAD_i32_1_1($0, 12));
  SAFE_HEAP_STORE_i32_4_4($1, 80, $2);
  if (ImGui__TreeNode_28void_20const__2c_20char_20const__2c_20____29($2, 17794, $1 + 80 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($1, 64, SAFE_HEAP_LOAD_i32_4_4($0, 4));
   ImGui__BulletText_28char_20const__2c_20____29(14455, $1 - -64 | 0);
   $2 = SAFE_HEAP_LOAD_i32_1_1($0, 12);
   SAFE_HEAP_STORE_i32_4_4($1, 52, SAFE_HEAP_LOAD_i32_1_1($0, 13));
   SAFE_HEAP_STORE_i32_4_4($1, 48, $2);
   ImGui__BulletText_28char_20const__2c_20____29(18544, $1 + 48 | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 12) | 0) > 0) {
    $7 = $0 + 16 | 0;
    $8 = $1 + 32 | 0;
    $9 = $1 + 24 | 0;
    $10 = $1 + 20 | 0;
    $2 = 0;
    while (1) {
     $4 = 0;
     $3 = Math_imul($2, 12) + $7 | 0;
     $5 = SAFE_HEAP_LOAD_i32_1_1($3, 10);
     if (($5 | 0) != -1) {
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($3, 11) & 3
     }
     $11 = SAFE_HEAP_LOAD_i32_1_1($3, 9);
     $6 = SAFE_HEAP_LOAD_i32_1_U_1($3, 11);
     $12 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($3, 4));
     SAFE_HEAP_STORE_f64_8_8($9, 0, +$12);
     SAFE_HEAP_STORE_i32_4_4($10, 0, $6 & 8 ? 3308 : 19097);
     SAFE_HEAP_STORE_i32_4_4($1 + 16 | 0, 0, $6 >>> 2 & 1);
     SAFE_HEAP_STORE_i32_4_4($1, 12, ($4 | 0) == 1 ? 13407 : ($4 | 0) == 2 ? 5288 : 17686);
     SAFE_HEAP_STORE_i32_4_4($1, 8, $5);
     SAFE_HEAP_STORE_i32_4_4($1, 4, $11);
     SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
     ImGui__BulletText_28char_20const__2c_20____29(14365, $1);
     $2 = $2 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_1_1($0, 12) | 0) > ($2 | 0)) {
      continue
     }
     break;
    };
   }
   ImGui__TreePop_28_29();
  }
  __stack_pointer = $1 + 96 | 0;
 }
 
 function ImGui__GetColumnIndex_28_29() {
  var $0 = 0, $1 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
  if ($0) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12)
  }
  return $1 | 0;
 }
 
 function ImGui__GetColumnsCount_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
  if (!$0) {
   return 1
  }
  return SAFE_HEAP_LOAD_i32_4_4($0, 16) | 0;
 }
 
 function ImGui__GetColumnOffset_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0);
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
  if (!$1) {
   return Math_fround(Math_fround(0.0))
  }
  if (($0 | 0) < 0) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12)
  }
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 24);
  $2 = SAFE_HEAP_LOAD_f32_4_4($1, 20);
  return Math_fround(Math_fround(Math_fround(Math_fround($3 - $2) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 100 | 0, 0) + Math_imul($0, 28) | 0, 0)) + $2));
 }
 
 function ImGui__GetColumnWidth_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
  label$1 : {
   if (!$1) {
    ImGui__GetContentRegionAvail_28_29($2 + 8 | 0);
    $3 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
    break label$1;
   }
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12)
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 100 | 0, 0) + Math_imul($0, 28) | 0;
   $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 28 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0, 0)) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 24) - SAFE_HEAP_LOAD_f32_4_4($1, 20)));
  }
  __stack_pointer = $2 + 16 | 0;
  return Math_fround($3);
 }
 
 function ImGui__SetColumnOffset_28int_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  while (1) {
   $4 = $1;
   $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 7080) + 368 | 0, 0);
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12)
   }
   $8 = 0;
   $1 = Math_fround(0.0);
   $9 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
   if (!($9 & 4)) {
    $8 = (SAFE_HEAP_LOAD_i32_4_4($2, 16) - 1 | 0) > ($0 | 0)
   }
   if ($8) {
    $6 = SAFE_HEAP_LOAD_i32_1_U_1($2, 9);
    $3 = $0;
    if (($0 | 0) < 0) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 12)
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 100 | 0, 0) + Math_imul($3, 28) | 0;
    $6 = $6 & 255;
    $1 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($6 ? $3 + 32 | 0 : $3 + 28 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($6 ? $3 + 4 | 0 : $3, 0)) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 24) - SAFE_HEAP_LOAD_f32_4_4($2, 20)));
   }
   if (!($9 & 8)) {
    $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 24) - Math_fround(SAFE_HEAP_LOAD_f32_4_4($7 + 5528 | 0, 0) * Math_fround(SAFE_HEAP_LOAD_i32_4_4($2, 16) - $0 | 0)));
    $4 = $4 < $5 ? $4 : $5;
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 100 | 0, 0) + Math_imul($0, 28) | 0;
   $5 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
   SAFE_HEAP_STORE_f32_4_4($3, 0, Math_fround(Math_fround($4 - $5) / Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 24) - $5)));
   if ($8) {
    $0 = $0 + 1 | 0;
    $5 = $4;
    $4 = SAFE_HEAP_LOAD_f32_4_4($7 + 5528 | 0, 0);
    $1 = Math_fround($5 + ($1 <= $4 ? $4 : $1));
    continue;
   }
   break;
  };
 }
 
 function ImGui__SetColumnWidth_28int_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  if (($0 | 0) < 0) {
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2 + 368 | 0, 0), 12)
  }
  $4 = $0 + 1 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2 + 368 | 0, 0);
  if ($2) {
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12)
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($2, 24);
   $3 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
   $3 = Math_fround(Math_fround(Math_fround($5 - $3) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($2 + 100 | 0, 0) + Math_imul($0, 28) | 0, 0)) + $3);
  } else {
   $3 = Math_fround(0.0)
  }
  ImGui__SetColumnOffset_28int_2c_20float_29($4, Math_fround($3 + $1));
 }
 
 function ImGui__PushColumnsBackground_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 368 | 0, 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0) != 1) {
   SAFE_HEAP_STORE_i64_8_4($1, 60, SAFE_HEAP_LOAD_i64_8_4($2, 496), i64toi32_i32$HIGH_BITS);
   $0 = $2 + 504 | 0;
   SAFE_HEAP_STORE_i64_8_4($1 + 68 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 56 | 0, 0);
   $4 = $1 + 52 | 0;
   $5 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 48 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($1, 44);
   SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($2, 496, SAFE_HEAP_LOAD_i64_8_4($1, 44), i64toi32_i32$HIGH_BITS);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   SAFE_HEAP_STORE_f32_4_4($0, 96, $7);
   SAFE_HEAP_STORE_f32_4_4($0 + 100 | 0, 0, $6);
   SAFE_HEAP_STORE_f32_4_4($0 + 104 | 0, 0, $5);
   SAFE_HEAP_STORE_f32_4_4($0 + 108 | 0, 0, $3);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   $0 = ((SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0) | 0) - 16 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 12, $3);
   SAFE_HEAP_STORE_f32_4_4($0, 8, $5);
   SAFE_HEAP_STORE_f32_4_4($0, 4, $6);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $7);
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($1 + 104 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 580), 0);
  }
 }
 
 function ImGui__PopColumnsBackground_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0);
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 368 | 0, 0);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0) != 1) {
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 72 | 0, 0);
   $0 = $1 + 68 | 0;
   $4 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1 - -64 | 0, 0);
   $6 = SAFE_HEAP_LOAD_f32_4_4($1, 60);
   SAFE_HEAP_STORE_i64_8_4($2 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($2, 496, SAFE_HEAP_LOAD_i64_8_4($1, 60), i64toi32_i32$HIGH_BITS);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   SAFE_HEAP_STORE_f32_4_4($0 + 100 | 0, 0, $5);
   SAFE_HEAP_STORE_f32_4_4($0 + 104 | 0, 0, $4);
   SAFE_HEAP_STORE_f32_4_4($0 + 108 | 0, 0, $3);
   SAFE_HEAP_STORE_f32_4_4($0, 96, $6);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   $0 = ((SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0) | 0) - 16 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 12, $3);
   SAFE_HEAP_STORE_f32_4_4($0, 8, $4);
   SAFE_HEAP_STORE_f32_4_4($0, 4, $5);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $6);
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($1 + 104 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 580), SAFE_HEAP_LOAD_i32_4_4($1, 12) + 1 | 0);
  }
 }
 
 function ImGui__NextColumn_28_29() {
  var $0 = 0, $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0);
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
    break label$1
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($2 + 368 | 0, 0);
   if (!$4) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 16);
   if (($0 | 0) == 1) {
    $1 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 12) + SAFE_HEAP_LOAD_f32_4_4($2 + 272 | 0, 0)) + SAFE_HEAP_LOAD_f32_4_4($2 + 276 | 0, 0));
    label$3 : {
     if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
      $0 = ~~$1;
      break label$3;
     }
     $0 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround($0 | 0));
    return;
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4($4, 12) + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($4, 12, ($0 | 0) != ($6 | 0) ? $6 : 0);
   ImGui__PopItemWidth_28_29();
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 100 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 12), 28) | 0;
   $1 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0);
   $6 = $0 + 20 | 0;
   $7 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
   SAFE_HEAP_STORE_i64_8_4($2 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($2, 496, SAFE_HEAP_LOAD_i64_8_4($0, 12), i64toi32_i32$HIGH_BITS);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   SAFE_HEAP_STORE_f32_4_4($0 + 100 | 0, 0, $8);
   SAFE_HEAP_STORE_f32_4_4($0 + 104 | 0, 0, $7);
   SAFE_HEAP_STORE_f32_4_4($0 + 108 | 0, 0, $5);
   SAFE_HEAP_STORE_f32_4_4($0, 96, $1);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
   $0 = ((SAFE_HEAP_LOAD_i32_4_4($0, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($0 + 68 | 0, 0) | 0) - 16 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 12, $5);
   SAFE_HEAP_STORE_f32_4_4($0, 8, $7);
   SAFE_HEAP_STORE_f32_4_4($0, 4, $8);
   SAFE_HEAP_STORE_f32_4_4($0, 0, $1);
   ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($4 + 104 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 580), SAFE_HEAP_LOAD_i32_4_4($4, 12) + 1 | 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 5492 | 0, 0);
   $1 = SAFE_HEAP_LOAD_f32_4_4($4, 32);
   $5 = SAFE_HEAP_LOAD_f32_4_4($2 + 212 | 0, 0);
   $1 = $1 >= $5 ? $1 : $5;
   SAFE_HEAP_STORE_f32_4_4($4, 32, $1);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 12);
   label$5 : {
    if (($0 | 0) > 0) {
     $6 = $2 + 276 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
     if ($3) {
      if (($0 | 0) < 0) {
       $0 = SAFE_HEAP_LOAD_i32_4_4($3, 12)
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
      $1 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
      $1 = Math_fround(Math_fround(Math_fround($5 - $1) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 100 | 0, 0) + Math_imul($0, 28) | 0, 0)) + $1);
     } else {
      $1 = Math_fround(0.0)
     }
     SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround($7 + Math_fround($1 - SAFE_HEAP_LOAD_f32_4_4($2 + 272 | 0, 0))));
     break label$5;
    }
    $5 = Math_fround($7 - SAFE_HEAP_LOAD_f32_4_4($2, 60));
    SAFE_HEAP_STORE_f32_4_4($2 + 276 | 0, 0, $5 >= Math_fround(0.0) ? $5 : Math_fround(0.0));
    SAFE_HEAP_STORE_f32_4_4($4, 28, $1);
   }
   $1 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 12) + SAFE_HEAP_LOAD_f32_4_4($2 + 272 | 0, 0)) + SAFE_HEAP_LOAD_f32_4_4($2 + 276 | 0, 0));
   label$10 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
     $0 = ~~$1;
     break label$10;
    }
    $0 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround($0 | 0));
   SAFE_HEAP_STORE_f32_4_4($2, 212, SAFE_HEAP_LOAD_f32_4_4($4, 28));
   SAFE_HEAP_STORE_i32_4_4($2 + 264 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($2 + 248 | 0, 0, 0, 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4, 12);
   $1 = Math_fround(0.0);
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
   if ($3) {
    $4 = $0;
    if (($0 | 0) < 0) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 12)
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
    $1 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
    $1 = Math_fround(Math_fround(Math_fround($5 - $1) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 100 | 0, 0) + Math_imul($4, 28) | 0, 0)) + $1);
   }
   $5 = $1;
   $1 = Math_fround(0.0);
   if ($3) {
    if (($0 | 0) > -2) {
     $0 = $0 + 1 | 0
    } else {
     $0 = SAFE_HEAP_LOAD_i32_4_4($3, 12)
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
    $1 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
    $1 = Math_fround(Math_fround(Math_fround($8 - $1) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 100 | 0, 0) + Math_imul($0, 28) | 0, 0)) + $1);
   }
   ImGui__PushItemWidth_28float_29(Math_fround(Math_fround($1 - $5) * Math_fround(.6499999761581421)));
   SAFE_HEAP_STORE_f32_4_4($2 + 472 | 0, 0, Math_fround(Math_fround($1 + SAFE_HEAP_LOAD_f32_4_4($2, 12)) - $7));
  }
 }
 
 function ImGui__EndColumns_28_29() {
  var $0 = Math_fround(0), $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $7 = SAFE_HEAP_LOAD_i32_4_4($10, 7080);
  SAFE_HEAP_STORE_i32_1_1($7, 140, 1);
  $8 = SAFE_HEAP_LOAD_i32_4_4($7 + 368 | 0, 0);
  ImGui__PopItemWidth_28_29();
  if ((SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0) >= 2) {
   ImGui__PopClipRect_28_29();
   ImDrawListSplitter__Merge_28ImDrawList__29($8 + 104 | 0, SAFE_HEAP_LOAD_i32_4_4($7, 580));
  }
  $0 = SAFE_HEAP_LOAD_f32_4_4($8, 32);
  $1 = $7 + 212 | 0;
  $2 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $0 = $0 >= $2 ? $0 : $2;
  SAFE_HEAP_STORE_f32_4_4($8, 32, $0);
  $6 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
  SAFE_HEAP_STORE_f32_4_4($1, 0, $0);
  if (!($6 & 16)) {
   SAFE_HEAP_STORE_f32_4_4($7 + 232 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($8, 40))
  }
  $1 = 0;
  label$3 : {
   if ($6 & 1) {
    break label$3
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($7, 143)) {
    break label$3
   }
   $3 = -1;
   $1 = SAFE_HEAP_LOAD_i32_4_4($8, 16);
   $4 = $1;
   if (($4 | 0) >= 2) {
    $2 = SAFE_HEAP_LOAD_f32_4_4($7 + 508 | 0, 0);
    $2 = $0 < $2 ? $0 : $2;
    $0 = SAFE_HEAP_LOAD_f32_4_4($8, 36);
    $9 = SAFE_HEAP_LOAD_f32_4_4($7 + 500 | 0, 0);
    $9 = $0 >= $9 ? $0 : $9;
    $12 = Math_fround($9 + Math_fround(1.0));
    $13 = $6 & 2;
    $1 = -1;
    $6 = 1;
    while (1) {
     $14 = SAFE_HEAP_LOAD_f32_4_4($7, 12);
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
     if ($3) {
      $15 = SAFE_HEAP_LOAD_f32_4_4($3, 24);
      $0 = SAFE_HEAP_LOAD_f32_4_4($3, 20);
      $0 = Math_fround(Math_fround(Math_fround($15 - $0) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 100 | 0, 0) + Math_imul($6, 28) | 0, 0)) + $0);
     } else {
      $0 = Math_fround(0.0)
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($8, 100);
     $3 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
     SAFE_HEAP_STORE_f32_4_4($5, 44, $2);
     $0 = Math_fround($14 + $0);
     SAFE_HEAP_STORE_f32_4_4($5, 40, Math_fround($0 + Math_fround(4.0)));
     SAFE_HEAP_STORE_f32_4_4($5, 36, $9);
     SAFE_HEAP_STORE_f32_4_4($5, 32, Math_fround($0 + Math_fround(-4.0)));
     $3 = $3 + $6 | 0;
     ImGui__KeepAliveID_28unsigned_20int_29($3);
     if (!ImGui__IsClippedEx_28ImRect_20const__2c_20unsigned_20int_29($5 + 32 | 0, $3)) {
      SAFE_HEAP_STORE_i32_1_1($5, 31, 0);
      SAFE_HEAP_STORE_i32_1_1($5, 30, 0);
      label$10 : {
       if ($13) {
        break label$10
       }
       ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($5 + 32 | 0, $3, $5 + 31 | 0, $5 + 30 | 0, 0);
       $11 = SAFE_HEAP_LOAD_i32_1_U_1($5, 31);
       $3 = SAFE_HEAP_LOAD_i32_1_U_1($5, 30);
       if (($11 | $3) & 255) {
        SAFE_HEAP_STORE_i32_4_4($10, 7872, 4)
       }
       if (!($3 & 255)) {
        break label$10
       }
       $1 = SAFE_HEAP_LOAD_i32_1_U_1($4 + Math_imul($6, 28) | 0, 8) & 2 ? $1 : $6;
      }
      $4 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = 29, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_1_U_1($5, 31) ? 28 : 27, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($5, 30), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
      $3 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
      SAFE_HEAP_STORE_f32_4_4($5, 24, $12);
      if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
       $11 = ~~$0
      } else {
       $11 = -2147483648
      }
      $0 = Math_fround($11 | 0);
      SAFE_HEAP_STORE_f32_4_4($5, 20, $0);
      SAFE_HEAP_STORE_f32_4_4($5, 16, $2);
      SAFE_HEAP_STORE_f32_4_4($5, 12, $0);
      ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($3, $5 + 20 | 0, $5 + 12 | 0, $4, Math_fround(1.0));
     }
     $3 = $1;
     $6 = $6 + 1 | 0;
     $4 = SAFE_HEAP_LOAD_i32_4_4($8, 16);
     if (($6 | 0) < ($4 | 0)) {
      continue
     }
     break;
    };
   }
   $1 = ($3 | 0) != -1;
   if (!$1) {
    break label$3
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($8, 9) | ($4 | 0) < 0)) {
    $10 = SAFE_HEAP_LOAD_i32_4_4($8 + 100 | 0, 0);
    $1 = 0;
    while (1) {
     $6 = $10 + Math_imul($1, 28) | 0;
     SAFE_HEAP_STORE_f32_4_4($6, 4, SAFE_HEAP_LOAD_f32_4_4($6, 0));
     $6 = $1;
     $1 = $1 + 1 | 0;
     if (($4 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($8, 9, 1);
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 228 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($1, 7176)) + Math_fround(4.0));
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
   $0 = Math_fround($0 - SAFE_HEAP_LOAD_f32_4_4($4, 12));
   $4 = SAFE_HEAP_LOAD_i32_4_4($4 + 368 | 0, 0);
   if ($4) {
    if (($3 | 0) > 0) {
     $6 = $3 - 1 | 0
    } else {
     $6 = SAFE_HEAP_LOAD_i32_4_4($4, 12)
    }
    $9 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
    $2 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
    $2 = Math_fround(Math_fround(Math_fround($9 - $2) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($4 + 100 | 0, 0) + Math_imul($6, 28) | 0, 0)) + $2);
   } else {
    $2 = Math_fround(0.0)
   }
   $9 = SAFE_HEAP_LOAD_f32_4_4($1 + 5528 | 0, 0);
   $2 = Math_fround($2 + $9);
   $0 = $0 >= $2 ? $0 : $2;
   if (SAFE_HEAP_LOAD_i32_1_U_1($8, 4) & 4) {
    if ($4) {
     if (($3 | 0) > -2) {
      $1 = $3 + 1 | 0
     } else {
      $1 = SAFE_HEAP_LOAD_i32_4_4($4, 12)
     }
     $12 = SAFE_HEAP_LOAD_f32_4_4($4, 24);
     $2 = SAFE_HEAP_LOAD_f32_4_4($4, 20);
     $2 = Math_fround(Math_fround(Math_fround($12 - $2) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($4 + 100 | 0, 0) + Math_imul($1, 28) | 0, 0)) + $2);
    } else {
     $2 = Math_fround(0.0)
    }
    $2 = Math_fround($2 - $9);
    $0 = $0 < $2 ? $0 : $2;
   }
   ImGui__SetColumnOffset_28int_2c_20float_29($3, $0);
   $1 = 1;
  }
  SAFE_HEAP_STORE_i32_1_1($8, 9, $1);
  $1 = $7 + 488 | 0;
  SAFE_HEAP_STORE_i64_8_4($7 + 472 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($7, 464, SAFE_HEAP_LOAD_i64_8_4($7, 480), i64toi32_i32$HIGH_BITS);
  $3 = SAFE_HEAP_LOAD_i64_8_4($8 + 84 | 0, 0);
  $4 = i64toi32_i32$HIGH_BITS;
  $6 = SAFE_HEAP_LOAD_i64_8_4($8, 76);
  $8 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i32_4_4($7, 368, 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 276 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 480, $6, $8);
  SAFE_HEAP_STORE_i64_8_4($1, 0, $3, $4);
  $0 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 12) + SAFE_HEAP_LOAD_f32_4_4($7 + 272 | 0, 0)) + Math_fround(0.0));
  label$28 : {
   if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
    $1 = ~~$0;
    break label$28;
   }
   $1 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($7, 208, Math_fround($1 | 0));
  __stack_pointer = $5 + 48 | 0;
 }
 
 function ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0);
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_1_1($8, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($8, 143)) {
    break label$1
   }
   $5 = ($0 | 0) == ($1 | 0);
   $0 = $5 ? 19354 : $0;
   $1 = $5 ? 19354 : $1;
   if (!$1) {
    $1 = strlen($0) + $0 | 0
   }
   $10 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($8 + 264 | 0, 0));
   $4 = SAFE_HEAP_LOAD_f32_4_4($8 + 388 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($8, 208);
   label$3 : {
    label$4 : {
     if (!(($1 - $0 | 0) < 2001 | $4 >= Math_fround(0.0))) {
      $12 = ImGui__GetFontSize_28_29();
      SAFE_HEAP_STORE_i64_8_4($3, 56, 0, 0);
      if (SAFE_HEAP_LOAD_i32_1_U_1($7, 12196)) {
       break label$4
      }
      $6 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 500 | 0, 0) - $10) / $12);
      label$6 : {
       if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
        $7 = ~~$6;
        break label$6;
       }
       $7 = -2147483648;
      }
      if (($7 | 0) <= 0) {
       break label$4
      }
      if ($0 >>> 0 >= $1 >>> 0) {
       $6 = Math_fround(0.0)
      } else {
       $9 = $2 & 1;
       $5 = 0;
       while (1) {
        $8 = memchr($0, 10, $1 - $0 | 0);
        $8 = $8 ? $8 : $1;
        if (!$9) {
         $4 = SAFE_HEAP_LOAD_f32_4_4($3, 56);
         ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 40 | 0, $0, $8, 0, Math_fround(-1.0));
         $6 = SAFE_HEAP_LOAD_f32_4_4($3, 40);
         SAFE_HEAP_STORE_f32_4_4($3, 56, $4 >= $6 ? $4 : $6);
        }
        $5 = $5 + 1 | 0;
        $0 = $8 + 1 | 0;
        if (($7 | 0) > ($5 | 0) & $1 >>> 0 > $0 >>> 0) {
         continue
        }
        break;
       };
       $6 = Math_fround($5 | 0);
      }
      $6 = Math_fround(Math_fround($6 * $12) + $10);
      break label$3;
     }
     if ($4 >= Math_fround(0.0)) {
      if ($4 < Math_fround(0.0)) {
       $6 = Math_fround(0.0)
      } else {
       $2 = $8 + 208 | 0;
       $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
       label$2 : {
        if ($4 == Math_fround(0.0)) {
         $4 = SAFE_HEAP_LOAD_f32_4_4($5 + 472 | 0, 0);
         break label$2;
        }
        if (!($4 > Math_fround(0.0))) {
         break label$2
        }
        $4 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 12) - SAFE_HEAP_LOAD_f32_4_4($5, 88)) + $4);
       }
       $6 = Math_fround($4 - SAFE_HEAP_LOAD_f32_4_4($2, 0));
       $6 = $6 >= Math_fround(1.0) ? $6 : Math_fround(1.0);
      }
     }
     $2 = $3 + 56 | 0;
     ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2, $0, $1, 0, $6);
     SAFE_HEAP_STORE_f32_4_4($3, 44, $10);
     SAFE_HEAP_STORE_f32_4_4($3 + 52 | 0, 0, Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($3, 60)));
     SAFE_HEAP_STORE_f32_4_4($3, 40, $11);
     SAFE_HEAP_STORE_f32_4_4($3, 48, Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($3, 56)));
     ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2, Math_fround(0.0));
     if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 40 | 0, 0, 0, 0)) {
      break label$1
     }
     $5 = SAFE_HEAP_LOAD_i64_8_8($3, 40);
     $2 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($3, 16, $5, $2);
     SAFE_HEAP_STORE_i64_8_8($3, 0, $5, $2);
     $2 = $3;
     $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $8 = SAFE_HEAP_LOAD_i32_4_4($9, 7080);
     if (!$1) {
      $1 = strlen($0) + $0 | 0
     }
     label$20 : {
      if (($0 | 0) == ($1 | 0)) {
       break label$20
      }
      $4 = SAFE_HEAP_LOAD_f32_4_4($9 + 5620 | 0, 0);
      $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
      label$31 : {
       if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
        $5 = ~~$4;
        break label$31;
       }
       $5 = -2147483648;
      }
      $5 = $5 << 8;
      $4 = SAFE_HEAP_LOAD_f32_4_4($9 + 5616 | 0, 0);
      $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
      label$5 : {
       if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
        $7 = ~~$4;
        break label$5;
       }
       $7 = -2147483648;
      }
      $5 = $7 | $5;
      $4 = SAFE_HEAP_LOAD_f32_4_4($9 + 5624 | 0, 0);
      $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
      label$7 : {
       if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
        $7 = ~~$4;
        break label$7;
       }
       $7 = -2147483648;
      }
      $7 = $5 | $7 << 16;
      $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9 + 5628 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($9, 5416));
      $4 = Math_fround(Math_fround(($4 < Math_fround(0.0) ? Math_fround(0.0) : $4 > Math_fround(1.0) ? Math_fround(1.0) : $4) * Math_fround(255.0)) + Math_fround(.5));
      label$9 : {
       if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
        $5 = ~~$4;
        break label$9;
       }
       $5 = -2147483648;
      }
      ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29(SAFE_HEAP_LOAD_i32_4_4($8, 580), SAFE_HEAP_LOAD_i32_4_4($9, 6464), SAFE_HEAP_LOAD_f32_4_4($9, 6468), $2, $7 | $5 << 24, $0, $1, $6, 0);
      if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 12196)) {
       break label$20
      }
      ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($2, $0, $1);
     }
     break label$1;
    }
    $6 = $10;
   }
   if ($1 >>> 0 > $0 >>> 0) {
    SAFE_HEAP_STORE_f32_4_4($3, 44, $6);
    SAFE_HEAP_STORE_f32_4_4($3 + 52 | 0, 0, Math_fround($12 + $6));
    SAFE_HEAP_STORE_f32_4_4($3, 40, $11);
    SAFE_HEAP_STORE_f32_4_4($3, 48, Math_fround($11 + Math_fround(3402823466385288598117041.0e14)));
    while (1) {
     label$16 : {
      if (ImGui__IsClippedEx_28ImRect_20const__2c_20unsigned_20int_29($3 + 40 | 0, 0)) {
       $5 = $0;
       break label$16;
      }
      $13 = SAFE_HEAP_LOAD_f32_4_4($3, 56);
      $5 = memchr($0, 10, $1 - $0 | 0);
      $5 = $5 ? $5 : $1;
      ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 32 | 0, $0, $5, 0, Math_fround(-1.0));
      SAFE_HEAP_STORE_f32_4_4($3, 24, $11);
      $4 = SAFE_HEAP_LOAD_f32_4_4($3, 32);
      SAFE_HEAP_STORE_f32_4_4($3, 56, $4 <= $13 ? $13 : $4);
      SAFE_HEAP_STORE_f32_4_4($3, 28, $6);
      SAFE_HEAP_STORE_i64_8_8($3, 8, SAFE_HEAP_LOAD_i64_8_8($3, 24), i64toi32_i32$HIGH_BITS);
      ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($3 + 8 | 0, $0, $5, 0);
      SAFE_HEAP_STORE_f32_4_4($3, 44, Math_fround($12 + SAFE_HEAP_LOAD_f32_4_4($3, 44)));
      SAFE_HEAP_STORE_f32_4_4($3, 52, Math_fround($12 + SAFE_HEAP_LOAD_f32_4_4($3, 52)));
      $5 = $5 + 1 | 0;
      $0 = $5;
      $6 = Math_fround($12 + $6);
      if ($1 >>> 0 > $0 >>> 0) {
       continue
      }
     }
     break;
    };
    $0 = $5;
    if ($0 >>> 0 < $1 >>> 0) {
     $7 = $2 & 1;
     $5 = 0;
     while (1) {
      $2 = memchr($0, 10, $1 - $0 | 0);
      $2 = $2 ? $2 : $1;
      if (!$7) {
       $13 = SAFE_HEAP_LOAD_f32_4_4($3, 56);
       ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 32 | 0, $0, $2, 0, Math_fround(-1.0));
       $4 = SAFE_HEAP_LOAD_f32_4_4($3, 32);
       SAFE_HEAP_STORE_f32_4_4($3, 56, $4 <= $13 ? $13 : $4);
      }
      $5 = $5 + 1 | 0;
      $0 = $2 + 1 | 0;
      if ($1 >>> 0 > $0 >>> 0) {
       continue
      }
      break;
     };
     $4 = Math_fround($5 | 0);
    } else {
     $4 = Math_fround(0.0)
    }
    $6 = Math_fround(Math_fround($4 * $12) + $6);
   }
   $6 = Math_fround($6 - $10);
   SAFE_HEAP_STORE_f32_4_4($3, 60, $6);
   SAFE_HEAP_STORE_f32_4_4($3 + 52 | 0, 0, Math_fround($10 + $6));
   SAFE_HEAP_STORE_f32_4_4($3, 44, $10);
   SAFE_HEAP_STORE_f32_4_4($3, 40, $11);
   SAFE_HEAP_STORE_f32_4_4($3, 48, Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($3, 56)));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($3 + 56 | 0, Math_fround(0.0));
   ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 40 | 0, 0, 0, 0);
  }
  __stack_pointer = $3 - -64 | 0;
 }
 
 function ImGui__TextUnformatted_28char_20const__2c_20char_20const__29($0) {
  ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, 0, 1);
 }
 
 function ImGui__Text_28char_20const__2c_20____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
   $2 = $2 + 12800 | 0;
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($2, ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($2, $0, $1) + $2 | 0, 1);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__TextColored_28ImVec4_20const__2c_20char_20const__2c_20____29($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, $0);
  label$1 : {
   label$2 : {
    if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 37) {
     break label$2
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 1) | 0) != 115) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 2)) {
     break label$2
    }
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($2, 0), 0, 1);
    break label$1;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
   SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
   if (SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
    break label$1
   }
   $0 = $0 + 12800 | 0;
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($0, $1, $2) + $0 | 0, 1);
  }
  ImGui__PopStyleColor_28int_29(1);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__TextDisabled_28char_20const__2c_20____29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 5632 | 0);
  label$1 : {
   label$2 : {
    if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 37) {
     break label$2
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) != 115) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 2)) {
     break label$2
    }
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($1, 0), 0, 1);
    break label$1;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
   SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
   if (SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
    break label$1
   }
   $2 = $2 + 12800 | 0;
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($2, ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($2, $0, $1) + $2 | 0, 1);
  }
  ImGui__PopStyleColor_28int_29(1);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImGui__BulletText_28char_20const__2c_20____29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  SAFE_HEAP_STORE_i32_4_4($8, 12, $1);
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
    break label$1
   }
   $7 = $6 + 12800 | 0;
   $0 = $7 + ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($7, $0, $1) | 0;
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 56 | 0, $7, $0, 0, Math_fround(-1.0));
   $5 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
   $9 = SAFE_HEAP_LOAD_f32_4_4($2, 56);
   if ($9 > Math_fround(0.0)) {
    $3 = SAFE_HEAP_LOAD_f32_4_4($6 + 5476 | 0, 0);
    $3 = Math_fround(Math_fround($3 + $3) + $9);
   }
   SAFE_HEAP_STORE_f32_4_4($2, 52, SAFE_HEAP_LOAD_f32_4_4($2, 60));
   SAFE_HEAP_STORE_f32_4_4($2, 48, Math_fround($5 + $3));
   $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 212 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 264 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($4, 208);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2 + 48 | 0, Math_fround(0.0));
   $3 = Math_fround($3 + $5);
   SAFE_HEAP_STORE_f32_4_4($2, 36, $3);
   SAFE_HEAP_STORE_f32_4_4($2 + 44 | 0, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($2, 52)));
   SAFE_HEAP_STORE_i32_4_4($2, 32, $1);
   SAFE_HEAP_STORE_f32_4_4($2, 40, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 48) + (wasm2js_scratch_store_i32(2, $1), wasm2js_scratch_load_f32())));
   if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($2 + 32 | 0, 0, 0, 0)) {
    break label$1
   }
   $1 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
   $10 = $6 + 5476 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 580);
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 6468) * Math_fround(.5));
   SAFE_HEAP_STORE_f32_4_4($2, 28, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($2, 36)));
   SAFE_HEAP_STORE_f32_4_4($2, 24, Math_fround(Math_fround($5 + $3) + SAFE_HEAP_LOAD_f32_4_4($2, 32)));
   SAFE_HEAP_STORE_i64_8_8($2, 8, SAFE_HEAP_LOAD_i64_8_4($2, 24), i64toi32_i32$HIGH_BITS);
   ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($4, $2 + 8 | 0, $1);
   $3 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
   SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 36) + Math_fround(0.0)));
   SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround(Math_fround($5 + Math_fround($3 + $3)) + SAFE_HEAP_LOAD_f32_4_4($2, 32)));
   SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($2, 16), i64toi32_i32$HIGH_BITS);
   ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($2, $7, $0, 0);
  }
  __stack_pointer = $2 - -64 | 0;
  __stack_pointer = $8 + 16 | 0;
 }
 
 function ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $10 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  SAFE_HEAP_STORE_i32_1_1($10, 140, 1);
  $8 = SAFE_HEAP_LOAD_i32_4_4($5, 7084);
  $6 = !($4 & 7) | $4;
  $7 = $4 & 1008 ? $6 : $6 | 32;
  $4 = 0;
  label$1 : {
   if (!($7 & 2048)) {
    break label$1
   }
   $4 = 0;
   if (!$8) {
    break label$1
   }
   $4 = (SAFE_HEAP_LOAD_i32_4_4($8, 736) | 0) == ($10 | 0);
  }
  $9 = $4;
  if ($4) {
   SAFE_HEAP_STORE_i32_4_4($5, 7084, $10)
  }
  $4 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($0, $1);
  label$4 : {
   if (!$4) {
    break label$4
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 7876)) {
    break label$4
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($5 + 7900 | 0, 0) | 0) != ($1 | 0)) {
    break label$4
   }
   $4 = (SAFE_HEAP_LOAD_i32_1_U_1($5, 7880) & 2) >>> 1 & $4;
  }
  label$8 : {
   label$9 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 7876) | !($7 & 512)) {
     break label$9
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($5, 7880) & 4) {
     break label$9
    }
    if (!ImGui__IsItemHovered_28int_29(128)) {
     break label$9
    }
    ImGui__SetHoveredID_28unsigned_20int_29($1);
    $12 = SAFE_HEAP_LOAD_f32_4_4($5, 7128);
    if (!($12 >= Math_fround(.699999988079071))) {
     $4 = 1;
     $6 = 0;
     break label$8;
    }
    $4 = 1;
    $6 = 0;
    if (!(Math_fround($12 - SAFE_HEAP_LOAD_f32_4_4($5 + 24 | 0, 0)) <= Math_fround(.699999988079071))) {
     break label$8
    }
    SAFE_HEAP_STORE_i32_4_4($5, 7988, $1);
    ImGui__FocusWindow_28ImGuiWindow__29($10);
    $6 = 1;
    break label$8;
   }
   $6 = 0;
  }
  if ($9) {
   SAFE_HEAP_STORE_i32_4_4($5, 7084, $8)
  }
  if (($7 & 4096) >>> 12 & $4) {
   $9 = $4;
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7120);
   $4 = $9 & (($4 | 0) == ($1 | 0) | !$4);
  }
  $9 = $4;
  label$14 : {
   if (!$4) {
    $4 = $6;
    break label$14;
   }
   label$16 : {
    label$17 : {
     if (!($7 & 65536)) {
      break label$17
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 252 | 0, 0)) {
      $4 = $6;
      break label$16;
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 253 | 0, 0)) {
      $4 = $6;
      break label$16;
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($5 + 254 | 0, 0)) {
      break label$17
     }
     $4 = $6;
     break label$16;
    }
    $13 = $7 & 1;
    label$20 : {
     if ($13) {
      $4 = 0;
      $11 = 0;
      if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 992 | 0, 0)) {
       break label$20
      }
     }
     label$22 : {
      if (!($7 & 2)) {
       break label$22
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($5 + 993 | 0, 0)) {
       break label$22
      }
      $4 = 0;
      $11 = 1;
      break label$20;
     }
     if (!($7 & 4)) {
      $4 = 1;
      $11 = -1;
      break label$20;
     }
     $8 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 994 | 0, 0);
     $4 = !$8;
     $11 = $8 ? 2 : -1;
    }
    $14 = $4;
    label$24 : {
     label$25 : {
      if (!$13) {
       break label$25
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($5 + 1022 | 0, 0)) {
       break label$25
      }
      $4 = 1;
      $8 = 0;
      break label$24;
     }
     if ($7 & 2) {
      $4 = 1;
      $8 = 1;
      if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 1023 | 0, 0)) {
       break label$24
      }
     }
     if (!($7 & 4)) {
      $4 = 0;
      $8 = -1;
      break label$24;
     }
     $8 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 1024 | 0, 0);
     $4 = ($8 | 0) != 0;
     $8 = $8 ? 2 : -1;
    }
    $13 = $4;
    label$28 : {
     if ($14) {
      break label$28
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 7136) | 0) == ($1 | 0)) {
      break label$28
     }
     if ($7 & 96) {
      ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($1, $10);
      SAFE_HEAP_STORE_i32_4_4($5, 7192, $11);
      if (!($7 & 262144)) {
       ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1, $10)
      }
      ImGui__FocusWindow_28ImGuiWindow__29($10);
     }
     if (!($7 & 16)) {
      if (!($7 & 256)) {
       break label$28
      }
      if ((SAFE_HEAP_LOAD_i32_2_U_2(($5 + ($11 << 1) | 0) + 1002 | 0, 0) | 0) != 2) {
       break label$28
      }
     }
     label$35 : {
      if ($7 & 131072) {
       ImGui__ClearActiveID_28_29();
       break label$35;
      }
      ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($1, $10);
     }
     if (!($7 & 262144)) {
      ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1, $10)
     }
     SAFE_HEAP_STORE_i32_4_4($5, 7192, $11);
     ImGui__FocusWindow_28ImGuiWindow__29($10);
     $6 = 1;
    }
    $4 = $6;
    if (!(!($7 & 128) | $13 ^ 1)) {
     $6 = 0;
     if ($7 & 1024) {
      $6 = SAFE_HEAP_LOAD_f32_4_4(($5 + ($8 << 2) | 0) + 1060 | 0, 0) >= SAFE_HEAP_LOAD_f32_4_4($5 + 140 | 0, 0)
     }
     $6 = $6 ^ 1;
     if (!($7 & 262144)) {
      ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1, $10)
     }
     ImGui__ClearActiveID_28_29();
     $4 = $4 | $6;
    }
    if (!($7 & 1024) | (SAFE_HEAP_LOAD_i32_4_4($5, 7136) | 0) != ($1 | 0)) {
     break label$16
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4($5, 7192);
    if (!(SAFE_HEAP_LOAD_f32_4_4(($5 + ($6 << 2) | 0) + 1040 | 0, 0) > Math_fround(0.0))) {
     break label$16
    }
    $4 = ImGui__IsMouseClicked_28int_2c_20bool_29($6, 1) | $4;
   }
   if ($4) {
    SAFE_HEAP_STORE_i32_1_1($5, 7570, 1)
   }
  }
  $6 = $4;
  label$46 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7512) | 0) != ($1 | 0)) {
    $4 = $9;
    break label$46;
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($5, 7570)) {
    $4 = $9;
    break label$46;
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 7571)) {
    $4 = $9;
    break label$46;
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7136);
   label$50 : {
    if (!(!$4 | ($1 | 0) == ($4 | 0))) {
     if ((SAFE_HEAP_LOAD_i32_4_4($10, 80) | 0) != ($4 | 0)) {
      $4 = $9;
      break label$46;
     }
     $4 = $9;
     if (!($7 & 524288)) {
      break label$50
     }
     break label$46;
    }
    $4 = $9;
    if ($7 & 524288) {
     break label$46
    }
   }
   $4 = 1;
  }
  $8 = $4;
  label$53 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7524) | 0) != ($1 | 0)) {
    break label$53
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7520);
   $12 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(0, $7 & 1024 ? 3 : 1);
   if (($1 | 0) != ($4 | 0)) {
    if (!($12 > Math_fround(0.0))) {
     break label$53
    }
   }
   ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($1, $10);
   SAFE_HEAP_STORE_i32_4_4($5, 7188, 4);
   if (!($7 & 262144)) {
    ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($1, $10)
   }
   $6 = 1;
  }
  $4 = $6;
  label$57 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7136) | 0) != ($1 | 0)) {
    $9 = 0;
    $1 = $4;
    break label$57;
   }
   $9 = 0;
   $6 = $4;
   label$59 : {
    label$60 : {
     label$61 : {
      switch (SAFE_HEAP_LOAD_i32_4_4($5, 7188) - 1 | 0) {
      case 0:
       if (SAFE_HEAP_LOAD_i32_1_U_1($5, 7148)) {
        $12 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
        SAFE_HEAP_STORE_f32_4_4($5 + 7180 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0, 4)));
        SAFE_HEAP_STORE_f32_4_4($5, 7176, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 228 | 0, 0) - $12));
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($5, 7192);
       $6 = $1 + $5 | 0;
       label$64 : {
        if (SAFE_HEAP_LOAD_i32_1_U_1($6 + 236 | 0, 0)) {
         $1 = $4;
         $9 = 1;
         break label$64;
        }
        label$66 : {
         if (!($8 & $7 >>> 5 | $7 & 64)) {
          break label$66
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($5, 7876)) {
          break label$66
         }
         $0 = 0;
         label$69 : {
          if (!($7 & 256)) {
           break label$69
          }
          $0 = 0;
          if (!SAFE_HEAP_LOAD_i32_1_U_1($6 + 1022 | 0, 0)) {
           break label$69
          }
          $0 = (SAFE_HEAP_LOAD_i32_2_U_2(($5 + ($1 << 1) | 0) + 1012 | 0, 0) | 0) == 2;
         }
         $9 = 1;
         if ($7 & 1024) {
          $9 = !(SAFE_HEAP_LOAD_f32_4_4(($5 + ($1 << 2) | 0) + 1060 | 0, 0) >= SAFE_HEAP_LOAD_f32_4_4($5 + 140 | 0, 0))
         }
         if ($0) {
          break label$66
         }
         $4 = $4 | $9;
        }
        $1 = $4;
        ImGui__ClearActiveID_28_29();
        $9 = 0;
       }
       if ($7 & 262144) {
        break label$60
       }
       SAFE_HEAP_STORE_i32_1_1($5, 7570, 1);
       break label$60;
      case 3:
       break label$61;
      default:
       break label$59;
      };
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 7524) | 0) != ($1 | 0)) {
      ImGui__ClearActiveID_28_29()
     }
     break label$59;
    }
    $6 = $1;
   }
   $1 = $6;
   if ($1) {
    SAFE_HEAP_STORE_i32_1_1($5, 7151, 1)
   }
  }
  if ($2) {
   SAFE_HEAP_STORE_i32_1_1($2, 0, $8)
  }
  if ($3) {
   SAFE_HEAP_STORE_i32_1_1($3, 0, $9)
  }
  return $1;
 }
 
 function ImGui__ButtonEx_28char_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
   $9 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($4, $0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 104 | 0, $0, 0, 1, Math_fround(-1.0));
   $6 = SAFE_HEAP_LOAD_f32_4_4($4 + 212 | 0, 0);
   $10 = SAFE_HEAP_LOAD_i32_4_4($4, 208);
   $12 = (wasm2js_scratch_store_i32(2, $10), wasm2js_scratch_load_f32());
   label$2 : {
    if (!($2 & 32768)) {
     break label$2
    }
    $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 5480 | 0, 0);
    $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 264 | 0, 0);
    if (!($7 < $8)) {
     break label$2
    }
    $6 = Math_fround($6 + Math_fround($8 - $7));
   }
   $1 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($3, 88, $1, $4);
   $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 5476 | 0, 0);
   $11 = $5 + 5480 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
   SAFE_HEAP_STORE_i64_8_8($3, 24, $1, $4);
   $1 = $3 + 96 | 0;
   ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($1, $3 + 24 | 0, Math_fround(Math_fround($7 + $7) + SAFE_HEAP_LOAD_f32_4_4($3, 104)), Math_fround(Math_fround($8 + $8) + SAFE_HEAP_LOAD_f32_4_4($3, 108)));
   SAFE_HEAP_STORE_f32_4_4($3, 76, $6);
   SAFE_HEAP_STORE_f32_4_4($3 + 84 | 0, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($3, 100)));
   SAFE_HEAP_STORE_i32_4_4($3, 72, $10);
   SAFE_HEAP_STORE_f32_4_4($3, 80, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 96) + $12));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($1, SAFE_HEAP_LOAD_f32_4_4($11, 0));
   $10 = 0;
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 72 | 0, $9, 0, 0)) {
    $1 = $3 + 72 | 0;
    $10 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($1, $9, $3 + 71 | 0, $3 + 70 | 0, SAFE_HEAP_LOAD_i32_4_4($5 + 7244 | 0, 0) << 9 & 1024 | $2);
    $4 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 70) ? 23 : 22, wasm2js_i32$1 = 21, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 71), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($1, $9, 1);
    $1 = SAFE_HEAP_LOAD_i64_8_8($3, 72);
    $9 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($3, 56, $1, $9);
    $2 = SAFE_HEAP_LOAD_i64_8_8($3, 80);
    $11 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($3, 48, $2, $11);
    $6 = SAFE_HEAP_LOAD_f32_4_4($5 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($3, 16, $1, $9);
    SAFE_HEAP_STORE_i64_8_8($3, 8, $2, $11);
    ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($3 + 16 | 0, $3 + 8 | 0, $4, 1, $6);
    if (SAFE_HEAP_LOAD_i32_1_U_1($5, 12196)) {
     ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(13983, 13981)
    }
    $6 = SAFE_HEAP_LOAD_f32_4_4($5 + 5480 | 0, 0);
    $8 = SAFE_HEAP_LOAD_f32_4_4($3, 72);
    $7 = SAFE_HEAP_LOAD_f32_4_4($5, 5476);
    SAFE_HEAP_STORE_f32_4_4($3, 40, Math_fround($8 + $7));
    SAFE_HEAP_STORE_f32_4_4($3, 44, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($3, 76)));
    SAFE_HEAP_STORE_f32_4_4($3, 36, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 84 | 0, 0) - $6));
    SAFE_HEAP_STORE_f32_4_4($3, 32, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 80) - $7));
    ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($3 + 40 | 0, $3 + 32 | 0, $0, 0, $3 + 104 | 0, $5 + 5568 | 0, $3 + 72 | 0);
   }
  }
  __stack_pointer = $3 + 112 | 0;
  return $10;
 }
 
 function ImGui__Button_28char_20const__2c_20ImVec2_20const__29($0, $1) {
  return ImGui__ButtonEx_28char_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, 0);
 }
 
 function ImGui__SmallButton_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = Math_fround(0);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 5480 | 0;
  $3 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 0);
  $0 = ImGui__ButtonEx_28char_20const__2c_20ImVec2_20const__2c_20int_29($0, $1 + 8 | 0, 32768);
  SAFE_HEAP_STORE_f32_4_4($2, 0, $3);
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function ImGui__InvisibleButton_28char_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
  $3 = __stack_pointer - 48 | 0;
  __stack_pointer = $3;
  $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($5, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
   $0 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($5, $0);
   $1 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_8($3, 0, $1, $4);
   SAFE_HEAP_STORE_i64_8_8($3, 32, $1, $4);
   $6 = $3 + 40 | 0;
   ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($6, $3, Math_fround(0.0), Math_fround(0.0));
   $7 = SAFE_HEAP_LOAD_f32_4_4($5, 208);
   $1 = SAFE_HEAP_LOAD_i64_8_4($5, 208);
   $4 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_f32_4_4($3 + 28 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($3, 44)));
   SAFE_HEAP_STORE_i64_8_8($3, 16, $1, $4);
   SAFE_HEAP_STORE_f32_4_4($3, 24, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($3, 40)));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($6, Math_fround(-1.0));
   $4 = 0;
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($3 + 16 | 0, $0, 0, 0)) {
    $4 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($3 + 16 | 0, $0, $3 + 15 | 0, $3 + 14 | 0, $2)
   }
  }
  __stack_pointer = $3 + 48 | 0;
  return $4;
 }
 
 function ImGui__ArrowButtonEx_28char_20const__2c_20int_2c_20ImVec2_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 80 | 0;
  __stack_pointer = $4;
  $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $7 = SAFE_HEAP_LOAD_i32_4_4($9, 7080);
  SAFE_HEAP_STORE_i32_1_1($7, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($7, 143)) {
   $6 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($7, $0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($7, 208);
   $0 = SAFE_HEAP_LOAD_i64_8_4($7, 208);
   $12 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_f32_4_4($4 + 76 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($2, 4)));
   SAFE_HEAP_STORE_i64_8_8($4, 64, $0, $12);
   SAFE_HEAP_STORE_f32_4_4($4, 72, Math_fround($8 + $5));
   $8 = ImGui__GetFrameHeight_28_29();
   $5 = Math_fround(-1.0);
   if (SAFE_HEAP_LOAD_f32_4_4($2, 4) >= $8) {
    $5 = SAFE_HEAP_LOAD_f32_4_4($9 + 5480 | 0, 0)
   }
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2, $5);
   $0 = 0;
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($4 - -64 | 0, $6, 0, 0)) {
    $10 = $4 - -64 | 0;
    $0 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($10, $6, $4 + 63 | 0, $4 + 62 | 0, SAFE_HEAP_LOAD_i32_4_4($9 + 7244 | 0, 0) << 9 & 1024 | $3);
    $12 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($4, 62) ? 23 : 22, wasm2js_i32$1 = 21, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($4, 63), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
    $14 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($10, $6, 1);
    $3 = SAFE_HEAP_LOAD_i64_8_8($4, 64);
    $13 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 48, $3, $13);
    $6 = SAFE_HEAP_LOAD_i64_8_8($4, 72);
    $10 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 40, $6, $10);
    $5 = SAFE_HEAP_LOAD_f32_4_4($9 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($4, 24, $3, $13);
    SAFE_HEAP_STORE_i64_8_8($4, 16, $6, $10);
    ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($4 + 24 | 0, $4 + 16 | 0, $12, 1, $5);
    $3 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
    $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    $15 = SAFE_HEAP_LOAD_f32_4_4($4, 68);
    $11 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
    $8 = SAFE_HEAP_LOAD_f32_4_4($9, 6468);
    $11 = Math_fround(Math_fround($11 - $8) * Math_fround(.5));
    SAFE_HEAP_STORE_f32_4_4($4, 36, Math_fround($15 + ($11 <= Math_fround(0.0) ? Math_fround(0.0) : $11)));
    $5 = Math_fround(Math_fround($5 - $8) * Math_fround(.5));
    SAFE_HEAP_STORE_f32_4_4($4, 32, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 64) + ($5 <= Math_fround(0.0) ? Math_fround(0.0) : $5)));
    SAFE_HEAP_STORE_i64_8_8($4, 8, SAFE_HEAP_LOAD_i64_8_4($4, 32), i64toi32_i32$HIGH_BITS);
    ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($3, $4 + 8 | 0, $14, $1, Math_fround(1.0));
   }
   $6 = $0;
  }
  __stack_pointer = $4 + 80 | 0;
  return $6;
 }
 
 function ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
  $2 = __stack_pointer - 48 | 0;
  __stack_pointer = $2;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_f32_4_4($7 + 5476 | 0, 0);
  $11 = SAFE_HEAP_LOAD_f32_4_4($7 + 5480 | 0, 0);
  $9 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  $8 = SAFE_HEAP_LOAD_f32_4_4($7, 6468);
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
  SAFE_HEAP_STORE_f32_4_4($2, 36, $5);
  SAFE_HEAP_STORE_f32_4_4($2, 32, $3);
  $11 = Math_fround(Math_fround($8 + $5) + Math_fround($11 + $11));
  SAFE_HEAP_STORE_f32_4_4($2, 44, $11);
  $4 = Math_fround(Math_fround($8 + $3) + Math_fround($4 + $4));
  SAFE_HEAP_STORE_f32_4_4($2, 40, $4);
  if (Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($9 + 424 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($9, 416)) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($9 + 428 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($9 + 420 | 0, 0))) / Math_fround(Math_fround($4 - $3) * Math_fround($11 - $5))) < Math_fround(1.5)) {
   $10 = $2 + 44 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
   $13 = SAFE_HEAP_LOAD_f32_4_4($2, 36);
   $6 = Math_fround(Math_fround($8 - $13) * Math_fround(-.25));
   label$2 : {
    if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
     $1 = ~~$6;
     break label$2;
    }
    $1 = -2147483648;
   }
   $6 = $8;
   $8 = Math_fround($1 | 0);
   SAFE_HEAP_STORE_f32_4_4($10, 0, Math_fround($6 + $8));
   $6 = SAFE_HEAP_LOAD_f32_4_4($2, 40);
   $12 = Math_fround(Math_fround($6 - $3) * Math_fround(-.25));
   label$4 : {
    if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
     $1 = ~~$12;
     break label$4;
    }
    $1 = -2147483648;
   }
   $12 = $6;
   $6 = Math_fround($1 | 0);
   SAFE_HEAP_STORE_f32_4_4($2, 40, Math_fround($12 + $6));
   SAFE_HEAP_STORE_f32_4_4($2, 32, Math_fround($3 - $6));
   SAFE_HEAP_STORE_f32_4_4($2, 36, Math_fround($13 - $8));
  }
  $10 = $2 + 32 | 0;
  $1 = ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($10, $0, 0, 0);
  $10 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($10, $0, $2 + 31 | 0, $2 + 30 | 0, 0);
  if ($1) {
   $0 = ImGui__GetColorU32_28int_2c_20float_29(SAFE_HEAP_LOAD_i32_1_U_1($2, 30) ? 23 : 22, Math_fround(1.0));
   SAFE_HEAP_STORE_f32_4_4($2, 24, Math_fround(Math_fround($5 + $11) * Math_fround(.5)));
   SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround(Math_fround($3 + $4) * Math_fround(.5)));
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 31)) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
    $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 6468) * Math_fround(.5)) + Math_fround(1.0));
    ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($1, $2 + 20 | 0, $3 <= Math_fround(2.0) ? Math_fround(2.0) : $3, $0, 12);
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($7, 6468);
   $0 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 24) + Math_fround(-.5));
   SAFE_HEAP_STORE_f32_4_4($2, 24, $5);
   $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 20) + Math_fround(-.5));
   SAFE_HEAP_STORE_f32_4_4($2, 20, $4);
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
   $3 = Math_fround(Math_fround(Math_fround($3 * Math_fround(.5)) * Math_fround(.707099974155426)) + Math_fround(-1.0));
   SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround($3 + $5));
   SAFE_HEAP_STORE_f32_4_4($2, 12, Math_fround($3 + $4));
   SAFE_HEAP_STORE_f32_4_4($2, 8, Math_fround($5 - $3));
   SAFE_HEAP_STORE_f32_4_4($2, 4, Math_fround($4 - $3));
   $7 = $2 + 12 | 0;
   $14 = $2 + 4 | 0;
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($1, $7, $14, $0, Math_fround(1.0));
   $1 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
   $5 = SAFE_HEAP_LOAD_f32_4_4($2, 24);
   SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround($5 - $3));
   $4 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
   SAFE_HEAP_STORE_f32_4_4($2, 12, Math_fround($3 + $4));
   SAFE_HEAP_STORE_f32_4_4($2, 8, Math_fround($3 + $5));
   SAFE_HEAP_STORE_f32_4_4($2, 4, Math_fround($4 - $3));
   ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($1, $7, $14, $0, Math_fround(1.0));
  }
  __stack_pointer = $2 + 48 | 0;
  return $10;
 }
 
 function ImGui__Scrollbar_28ImGuiAxis_29($0) {
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = 0, $27 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $10 = __stack_pointer - 32 | 0;
  __stack_pointer = $10;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $13 = ImGuiWindow__GetIDNoKeepAlive_28char_20const__2c_20char_20const__29($3, $0 ? 14116 : 14356);
  ImGui__KeepAliveID_28unsigned_20int_29($13);
  $1 = SAFE_HEAP_LOAD_f32_4_4(($3 + (($0 ^ 1) << 2) | 0) + 128 | 0, 0);
  $2 = SAFE_HEAP_LOAD_f32_4_4($3, 72);
  label$1 : {
   if (!$0) {
    $5 = SAFE_HEAP_LOAD_f32_4_4($3, 432);
    $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0);
    $8 = Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($3 + 24 | 0, 0));
    $1 = Math_fround(Math_fround($8 - $2) - $1);
    $1 = $1 <= $6 ? $6 : $1;
    $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 440 | 0, 0);
    break label$1;
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
   $6 = Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 20));
   $1 = Math_fround(Math_fround($6 - $2) - $1);
   $5 = $1 <= $5 ? $5 : $1;
   $1 = SAFE_HEAP_LOAD_f32_4_4($3 + 436 | 0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 444 | 0, 0);
  }
  SAFE_HEAP_STORE_f32_4_4($10, 28, $8);
  SAFE_HEAP_STORE_f32_4_4($10, 24, $6);
  SAFE_HEAP_STORE_f32_4_4($10, 20, $1);
  SAFE_HEAP_STORE_f32_4_4($10, 16, $5);
  label$3 : {
   if (!$0) {
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($3, 137) ? 320 : 448;
    break label$3;
   }
   $14 = (SAFE_HEAP_LOAD_i32_4_4($3, 8) & 1025) == 1 ? 288 : 256;
   $7 = SAFE_HEAP_LOAD_i32_1_U_1($3, 136) ? $14 : $14 | 128;
  }
  $24 = $7;
  $3 = $3 + ($0 << 2) | 0;
  $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 36 | 0, 0);
  $2 = SAFE_HEAP_LOAD_f32_4_4($3 + 60 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 432 | 0, 0);
  $8 = SAFE_HEAP_LOAD_f32_4_4($3 + 440 | 0, 0);
  $21 = $3 + 88 | 0;
  $1 = SAFE_HEAP_LOAD_f32_4_4($21, 0);
  label$5 : {
   if (Math_fround(Math_abs($1)) < Math_fround(9223372036854775808.0)) {
    $3 = Math_fround(Math_abs($1)) >= Math_fround(1.0) ? ~~($1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1 - Math_fround(~~$1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
    $7 = ~~$1 >>> 0;
    break label$5;
   }
   $3 = -2147483648;
   $7 = 0;
  }
  SAFE_HEAP_STORE_i64_8_8($10, 8, $7, $3);
  $12 = $10 + 16 | 0;
  $14 = $0;
  $22 = $10 + 8 | 0;
  $1 = Math_fround($8 - $6);
  label$7 : {
   if (Math_fround(Math_abs($1)) < Math_fround(9223372036854775808.0)) {
    $3 = Math_fround(Math_abs($1)) >= Math_fround(1.0) ? ~~($1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1 - Math_fround(~~$1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
    $17 = ~~$1 >>> 0;
    break label$7;
   }
   $3 = -2147483648;
   $17 = 0;
  }
  $1 = Math_fround(Math_fround($2 + $2) + $5);
  label$9 : {
   if (Math_fround(Math_abs($1)) < Math_fround(9223372036854775808.0)) {
    $0 = Math_fround(Math_abs($1)) >= Math_fround(1.0) ? ~~($1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1 - Math_fround(~~$1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
    $18 = ~~$1 >>> 0;
    break label$9;
   }
   $0 = -2147483648;
   $18 = 0;
  }
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $19 = SAFE_HEAP_LOAD_i32_4_4($11, 7080);
  label$10 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($19, 143)) {
    break label$10
   }
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($12, 8) - SAFE_HEAP_LOAD_f32_4_4($12, 0));
   if ($5 <= Math_fround(0.0)) {
    break label$10
   }
   $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($12 + 12 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($12, 4));
   if ($1 <= Math_fround(0.0)) {
    break label$10
   }
   $9 = Math_fround(1.0);
   label$51 : {
    if (($14 | 0) != 1) {
     break label$51
    }
    $2 = SAFE_HEAP_LOAD_f32_4_4($11 + 5480 | 0, 0);
    $2 = Math_fround($2 + $2);
    $6 = SAFE_HEAP_LOAD_f32_4_4($11, 6468);
    $9 = Math_fround(1.0);
    if (!($1 < Math_fround($2 + $6))) {
     break label$51
    }
    $2 = Math_fround(Math_fround($1 - $6) / $2);
    $9 = $2 < Math_fround(0.0) ? Math_fround(0.0) : $2 > Math_fround(1.0) ? Math_fround(1.0) : $2;
   }
   if ($9 <= Math_fround(0.0)) {
    break label$10
   }
   $7 = $4 + 40 | 0;
   SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_4($12 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
   $15 = SAFE_HEAP_LOAD_i64_8_4($12, 0);
   $25 = i64toi32_i32$HIGH_BITS;
   $16 = $7;
   $6 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
   $2 = Math_fround(Math_fround($5 + Math_fround(-2.0)) * Math_fround(.5));
   label$72 : {
    if (Math_fround(Math_abs($2)) < Math_fround(2147483648.0)) {
     $7 = ~~$2;
     break label$72;
    }
    $7 = -2147483648;
   }
   $2 = Math_fround($7 | 0);
   $2 = ($7 | 0) < 0 ? Math_fround(0.0) : $2 > Math_fround(3.0) ? Math_fround(3.0) : $2;
   $6 = Math_fround($6 - $2);
   SAFE_HEAP_STORE_f32_4_4($16, 0, $6);
   $26 = $12 + 8 | 0;
   $7 = $4 + 44 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
   $1 = Math_fround(Math_fround($1 + Math_fround(-2.0)) * Math_fround(.5));
   label$93 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
     $16 = ~~$1;
     break label$93;
    }
    $16 = -2147483648;
   }
   $1 = Math_fround($16 | 0);
   $5 = ($16 | 0) < 0 ? Math_fround(0.0) : $1 > Math_fround(3.0) ? Math_fround(3.0) : $1;
   $1 = Math_fround($8 - $5);
   SAFE_HEAP_STORE_f32_4_4($7, 0, $1);
   SAFE_HEAP_STORE_i64_8_8($4, 32, $15, $25);
   $8 = Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($4, 36));
   SAFE_HEAP_STORE_f32_4_4($4, 36, $8);
   $2 = Math_fround($2 + SAFE_HEAP_LOAD_f32_4_4($4, 32));
   SAFE_HEAP_STORE_f32_4_4($4, 32, $2);
   $5 = SAFE_HEAP_LOAD_f32_4_4($11 + 5540 | 0, 0);
   SAFE_HEAP_STORE_i32_1_1($4, 31, 0);
   SAFE_HEAP_STORE_i32_1_1($4, 30, 0);
   ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($4 + 32 | 0, $13, $4 + 30 | 0, $4 + 31 | 0, 262144);
   $2 = $14 ? Math_fround($1 - $8) : Math_fround($6 - $2);
   $7 = $17 >>> 0 < $18 >>> 0 & ($0 | 0) >= ($3 | 0) | ($0 | 0) > ($3 | 0);
   $15 = $7 ? $18 : $17;
   $16 = $15;
   $7 = $7 ? $0 : $3;
   $15 = $15 >>> 0 > 1 & ($7 | 0) >= 0 | ($7 | 0) > 0;
   $1 = Math_fround($2 * Math_fround(Math_fround(+($17 >>> 0) + +($3 | 0) * 4294967296.0) / Math_fround(+(($15 ? $16 : 1) >>> 0) + +(($15 ? $7 : 0) | 0) * 4294967296.0)));
   $8 = $1 < $5 ? $5 : $1 > $2 ? $2 : $1;
   $23 = Math_fround($2 - $8);
   $7 = $18 - $17 | 0;
   $0 = $0 - (($17 >>> 0 > $18 >>> 0) + $3 | 0) | 0;
   $3 = $7 >>> 0 > 1 & ($0 | 0) >= 0 | ($0 | 0) > 0;
   $20 = Math_fround(+(($3 ? $7 : 1) >>> 0) + +(($3 ? $0 : 0) | 0) * 4294967296.0);
   $1 = Math_fround(Math_fround(+(SAFE_HEAP_LOAD_i64_8_8($22, 0) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296.0) / $20);
   $1 = Math_fround(Math_fround($23 * ($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1)) / $2);
   label$11 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 31) | !($9 >= Math_fround(1.0))) {
     break label$11
    }
    $5 = Math_fround($8 / $2);
    if (!($5 < Math_fround(1.0))) {
     break label$11
    }
    $0 = $14 << 2;
    $6 = SAFE_HEAP_LOAD_f32_4_4($0 + ($4 + 32 | 0) | 0, 0);
    $27 = SAFE_HEAP_LOAD_f32_4_4(($0 + $11 | 0) + 228 | 0, 0);
    ImGui__SetHoveredID_28unsigned_20int_29($13);
    $6 = Math_fround(Math_fround($27 - $6) / $2);
    $6 = $6 < Math_fround(0.0) ? Math_fround(0.0) : $6 > Math_fround(1.0) ? Math_fround(1.0) : $6;
    label$15 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($11, 7148)) {
      $3 = 0;
      break label$15;
     }
     $3 = $6 > Math_fround($5 + $1) | $1 > $6;
     SAFE_HEAP_STORE_f32_4_4($11, 12068, $3 ? Math_fround(0.0) : Math_fround(Math_fround($6 - $1) + Math_fround($5 * Math_fround(-.5))));
    }
    $1 = Math_fround(Math_fround(Math_fround($6 - SAFE_HEAP_LOAD_f32_4_4($11, 12068)) + Math_fround($5 * Math_fround(-.5))) / Math_fround(Math_fround(1.0) - $5));
    $1 = Math_fround(($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1) * $20);
    label$17 : {
     if (Math_fround(Math_abs($1)) < Math_fround(9223372036854775808.0)) {
      $0 = Math_fround(Math_abs($1)) >= Math_fround(1.0) ? ~~($1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1 - Math_fround(~~$1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
      $13 = ~~$1 >>> 0;
      break label$17;
     }
     $0 = -2147483648;
     $13 = 0;
    }
    SAFE_HEAP_STORE_i64_8_8($22, 0, $13, $0);
    $1 = Math_fround(Math_fround(+($13 >>> 0) + +($0 | 0) * 4294967296.0) / $20);
    $1 = Math_fround(Math_fround($23 * ($1 < Math_fround(0.0) ? Math_fround(0.0) : $1 > Math_fround(1.0) ? Math_fround(1.0) : $1)) / $2);
    if ($3) {
     SAFE_HEAP_STORE_f32_4_4($11, 12068, Math_fround(Math_fround($5 * Math_fround(-.5)) + Math_fround($6 - $1)))
    }
   }
   $2 = $1;
   $0 = ImGui__GetColorU32_28int_2c_20float_29(14, Math_fround(1.0));
   $3 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = 17, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_1_U_1($4, 30) ? 16 : 15, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($4, 31), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $9);
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($19, 580), $12, $26, $0, SAFE_HEAP_LOAD_f32_4_4($19, 68), $24);
   SAFE_HEAP_STORE_i64_8_8($4 + 16 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
   $1 = SAFE_HEAP_LOAD_f32_4_4($4, 32);
   label$20 : {
    if (!$14) {
     $1 = Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 40) - $1) * $2) + $1);
     $2 = SAFE_HEAP_LOAD_f32_4_4($4, 36);
     $5 = Math_fround($8 + $1);
     $9 = SAFE_HEAP_LOAD_f32_4_4($4, 44);
     break label$20;
    }
    $9 = SAFE_HEAP_LOAD_f32_4_4($4, 44);
    $5 = SAFE_HEAP_LOAD_f32_4_4($4, 36);
    $2 = Math_fround(Math_fround(Math_fround($9 - $5) * $2) + $5);
    $5 = SAFE_HEAP_LOAD_f32_4_4($4, 40);
    $9 = Math_fround($8 + $2);
   }
   SAFE_HEAP_STORE_f32_4_4($4, 20, $9);
   SAFE_HEAP_STORE_f32_4_4($4, 16, $5);
   SAFE_HEAP_STORE_f32_4_4($4, 12, $2);
   SAFE_HEAP_STORE_f32_4_4($4, 8, $1);
   ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($19, 580), $4 + 8 | 0, $4 + 16 | 0, $3, SAFE_HEAP_LOAD_f32_4_4($11 + 5536 | 0, 0), 0);
   SAFE_HEAP_LOAD_i32_1_U_1($4, 31);
  }
  __stack_pointer = $4 + 48 | 0;
  SAFE_HEAP_STORE_f32_4_4($21, 0, Math_fround(+(SAFE_HEAP_LOAD_i64_8_8($10, 8) >>> 0) + +(i64toi32_i32$HIGH_BITS | 0) * 4294967296.0));
  __stack_pointer = $10 + 32 | 0;
 }
 
 function ImGui__Checkbox_28char_20const__2c_20bool__29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 112 | 0;
  __stack_pointer = $2;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  SAFE_HEAP_STORE_i32_1_1($6, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
   $7 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($6, $0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 104 | 0, $0, 0, 1, Math_fround(-1.0));
   $3 = ImGui__GetFrameHeight_28_29();
   $9 = SAFE_HEAP_LOAD_i32_4_4($6 + 212 | 0, 0);
   $11 = (wasm2js_scratch_store_i32(2, $9), wasm2js_scratch_load_f32());
   $10 = SAFE_HEAP_LOAD_i32_4_4($6, 208);
   $12 = (wasm2js_scratch_store_i32(2, $10), wasm2js_scratch_load_f32());
   $8 = SAFE_HEAP_LOAD_f32_4_4($2, 104);
   if ($8 > Math_fround(0.0)) {
    $5 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($4 + 5500 | 0, 0))
   }
   $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2 + 100 | 0, 0, Math_fround(Math_fround(Math_fround($8 + $8) + SAFE_HEAP_LOAD_f32_4_4($2, 108)) + $11));
   SAFE_HEAP_STORE_f32_4_4($2, 96, Math_fround(Math_fround($3 + $5) + $12));
   SAFE_HEAP_STORE_i32_4_4($2, 92, $9);
   SAFE_HEAP_STORE_i32_4_4($2, 88, $10);
   $13 = $2 + 88 | 0;
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($13, $8);
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($13, $7, 0, 0)) {
    $14 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($2 + 88 | 0, $7, $2 + 87 | 0, $2 + 86 | 0, 0);
    if ($14) {
     SAFE_HEAP_STORE_i32_1_1($1, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0) ^ 1);
     ImGui__MarkItemEdited_28unsigned_20int_29($7);
    }
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($2 + 88 | 0, $7, 1);
    SAFE_HEAP_STORE_i32_4_4($2, 76, $9);
    SAFE_HEAP_STORE_i32_4_4($2, 72, $10);
    $5 = Math_fround($3 + $11);
    SAFE_HEAP_STORE_f32_4_4($2, 68, $5);
    $8 = Math_fround($3 + $12);
    SAFE_HEAP_STORE_f32_4_4($2, 64, $8);
    $7 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 86) ? 9 : 8, wasm2js_i32$1 = 7, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 87), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
    $15 = SAFE_HEAP_LOAD_f32_4_4($4 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($2, 24, SAFE_HEAP_LOAD_i64_8_8($2, 72), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($2, 16, SAFE_HEAP_LOAD_i64_8_8($2, 64), i64toi32_i32$HIGH_BITS);
    ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($2 + 24 | 0, $2 + 16 | 0, $7, 1, $15);
    $9 = ImGui__GetColorU32_28int_2c_20float_29(18, Math_fround(1.0));
    $10 = SAFE_HEAP_LOAD_i32_4_4($4 + 7244 | 0, 0) & 64;
    label$5 : {
     if ($10) {
      $6 = SAFE_HEAP_LOAD_i32_4_4($6, 580);
      $3 = Math_fround($3 / Math_fround(3.5999999046325684));
      label$7 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $7 = ~~$3;
        break label$7;
       }
       $7 = -2147483648;
      }
      $3 = Math_fround($7 | 0);
      $3 = $3 <= Math_fround(1.0) ? Math_fround(1.0) : $3;
      SAFE_HEAP_STORE_f32_4_4($2, 60, Math_fround($3 + $11));
      SAFE_HEAP_STORE_f32_4_4($2, 56, Math_fround($3 + $12));
      SAFE_HEAP_STORE_f32_4_4($2, 52, Math_fround($5 - $3));
      SAFE_HEAP_STORE_f32_4_4($2, 48, Math_fround($8 - $3));
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($6, $2 + 56 | 0, $2 + 48 | 0, $9, SAFE_HEAP_LOAD_f32_4_4($4, 5484), 0);
      break label$5;
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
      break label$5
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4($6, 580);
     $5 = Math_fround($3 / Math_fround(6.0));
     label$9 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $7 = ~~$5;
       break label$9;
      }
      $7 = -2147483648;
     }
     $5 = Math_fround($7 | 0);
     $5 = $5 <= Math_fround(1.0) ? Math_fround(1.0) : $5;
     SAFE_HEAP_STORE_f32_4_4($2, 44, Math_fround($5 + $11));
     SAFE_HEAP_STORE_f32_4_4($2, 40, Math_fround($5 + $12));
     SAFE_HEAP_STORE_i64_8_8($2, 8, SAFE_HEAP_LOAD_i64_8_4($2, 40), i64toi32_i32$HIGH_BITS);
     ImGui__RenderCheckMark_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20float_29($6, $2 + 8 | 0, $9, Math_fround($3 - Math_fround($5 + $5)));
    }
    $3 = SAFE_HEAP_LOAD_f32_4_4($4 + 5500 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($2, 60, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 5480) + $11));
    SAFE_HEAP_STORE_f32_4_4($2, 56, Math_fround($8 + $3));
    if (SAFE_HEAP_LOAD_i32_1_U_1($4, 12196)) {
     $4 = 13939;
     $6 = $2 + 56 | 0;
     if (!$10) {
      $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0) ? 13943 : 13979
     }
     ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($6, $4, 0);
    }
    if (SAFE_HEAP_LOAD_f32_4_4($2, 104) > Math_fround(0.0)) {
     $1 = SAFE_HEAP_LOAD_i64_8_8($2, 56);
     $4 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($2, 32, $1, $4);
     SAFE_HEAP_STORE_i64_8_8($2, 0, $1, $4);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($2, $0, 0, 1);
    }
   }
  }
  __stack_pointer = $2 + 112 | 0;
  return $14;
 }
 
 function ImGui__RadioButton_28char_20const__2c_20bool_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_1_1($8, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 143)) {
   $3 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($8, $0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 56 | 0, $0, 0, 1, Math_fround(-1.0));
   $4 = ImGui__GetFrameHeight_28_29();
   $5 = SAFE_HEAP_LOAD_i32_4_4($8 + 212 | 0, 0);
   $11 = (wasm2js_scratch_store_i32(2, $5), wasm2js_scratch_load_f32());
   $10 = SAFE_HEAP_LOAD_i32_4_4($8, 208);
   $6 = (wasm2js_scratch_store_i32(2, $10), wasm2js_scratch_load_f32());
   $9 = SAFE_HEAP_LOAD_f32_4_4($2, 56);
   if ($9 > Math_fround(0.0)) {
    $12 = Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($7 + 5500 | 0, 0))
   }
   $9 = SAFE_HEAP_LOAD_f32_4_4($7 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2 + 52 | 0, 0, Math_fround(Math_fround(Math_fround($9 + $9) + SAFE_HEAP_LOAD_f32_4_4($2, 60)) + $11));
   SAFE_HEAP_STORE_f32_4_4($2, 48, Math_fround(Math_fround($4 + $12) + $6));
   SAFE_HEAP_STORE_i32_4_4($2, 44, $5);
   SAFE_HEAP_STORE_i32_4_4($2, 40, $10);
   $10 = $2 + 40 | 0;
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($10, $9);
   $5 = 0;
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($10, $3, 0, 0)) {
    $12 = Math_fround($4 + $6);
    $9 = Math_fround(Math_fround(Math_fround(Math_fround($4 + $11) + $11) * Math_fround(.5)) + Math_fround(.5));
    label$4 : {
     if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
      $5 = ~~$9;
      break label$4;
     }
     $5 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($2, 36, Math_fround($5 | 0));
    $6 = Math_fround(Math_fround(Math_fround($12 + $6) * Math_fround(.5)) + Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $5 = ~~$6;
      break label$6;
     }
     $5 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($2, 32, Math_fround($5 | 0));
    $6 = Math_fround(Math_fround($4 + Math_fround(-1.0)) * Math_fround(.5));
    $5 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($2 + 40 | 0, $3, $2 + 31 | 0, $2 + 30 | 0, 0);
    if ($5) {
     ImGui__MarkItemEdited_28unsigned_20int_29($3)
    }
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($2 + 40 | 0, $3, 1);
    ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($8, 580), $2 + 32 | 0, $6, ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 30) ? 9 : 8, wasm2js_i32$1 = 7, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 31), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0)), 16);
    if ($1) {
     $10 = SAFE_HEAP_LOAD_i32_4_4($8, 580);
     $3 = $2 + 32 | 0;
     $4 = Math_fround($4 / Math_fround(6.0));
     label$10 : {
      if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
       $13 = ~~$4;
       break label$10;
      }
      $13 = -2147483648;
     }
     $4 = Math_fround($13 | 0);
     ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($10, $3, Math_fround($6 - ($4 <= Math_fround(1.0) ? Math_fround(1.0) : $4)), ImGui__GetColorU32_28int_2c_20float_29(18, Math_fround(1.0)), 16);
    }
    if (SAFE_HEAP_LOAD_f32_4_4($7 + 5488 | 0, 0) > Math_fround(0.0)) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($8, 580);
     SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 36) + Math_fround(1.0)));
     SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 32) + Math_fround(1.0)));
     ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($3, $2 + 16 | 0, $6, ImGui__GetColorU32_28int_2c_20float_29(6, Math_fround(1.0)), 16, SAFE_HEAP_LOAD_f32_4_4($7, 5488));
     ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($8, 580), $2 + 32 | 0, $6, ImGui__GetColorU32_28int_2c_20float_29(5, Math_fround(1.0)), 16, SAFE_HEAP_LOAD_f32_4_4($7, 5488));
    }
    $4 = SAFE_HEAP_LOAD_f32_4_4($7 + 5500 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($2, 20, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 5480) + $11));
    SAFE_HEAP_STORE_f32_4_4($2, 16, Math_fround($12 + $4));
    if (SAFE_HEAP_LOAD_i32_1_U_1($7, 12196)) {
     ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($2 + 16 | 0, $1 ? 17760 : 18698, 0)
    }
    if (SAFE_HEAP_LOAD_f32_4_4($2, 56) > Math_fround(0.0)) {
     $1 = SAFE_HEAP_LOAD_i64_8_8($2, 16);
     $3 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($2, 8, $1, $3);
     SAFE_HEAP_STORE_i64_8_8($2, 0, $1, $3);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($2, $0, 0, 1);
    }
   }
   $3 = $5;
  }
  __stack_pointer = $2 - -64 | 0;
  return $3;
 }
 
 function ImGui__Bullet_28_29() {
  var $0 = 0, $1 = Math_fround(0), $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0);
  $0 = __stack_pointer - 32 | 0;
  __stack_pointer = $0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
   $7 = SAFE_HEAP_LOAD_f32_4_4($2, 208);
   $5 = SAFE_HEAP_LOAD_i64_8_4($2, 208);
   $8 = i64toi32_i32$HIGH_BITS;
   $9 = SAFE_HEAP_LOAD_f32_4_4($2 + 212 | 0, 0);
   $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 252 | 0, 0);
   $1 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
   $6 = Math_fround($1 + $1);
   $1 = SAFE_HEAP_LOAD_f32_4_4($4, 6468);
   $6 = Math_fround($6 + $1);
   $3 = $3 < $6 ? $3 : $6;
   $3 = $1 <= $3 ? $3 : $1;
   SAFE_HEAP_STORE_f32_4_4($0 + 28 | 0, 0, Math_fround($9 + $3));
   SAFE_HEAP_STORE_i64_8_8($0, 16, $5, $8);
   SAFE_HEAP_STORE_f32_4_4($0, 24, Math_fround($1 + $7));
   $5 = $0 + 16 | 0;
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($5, Math_fround(-1.0));
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($5, 0, 0, 0)) {
    $5 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 580);
    $1 = SAFE_HEAP_LOAD_f32_4_4($4, 5476);
    $7 = SAFE_HEAP_LOAD_f32_4_4($4, 6468);
    SAFE_HEAP_STORE_f32_4_4($0, 12, Math_fround(Math_fround($3 * Math_fround(.5)) + SAFE_HEAP_LOAD_f32_4_4($0, 20)));
    SAFE_HEAP_STORE_f32_4_4($0, 8, Math_fround(Math_fround($1 + Math_fround($7 * Math_fround(.5))) + SAFE_HEAP_LOAD_f32_4_4($0, 16)));
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 8), i64toi32_i32$HIGH_BITS);
    ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($2, $0, $5);
   }
   $1 = SAFE_HEAP_LOAD_f32_4_4($4, 5476);
   ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), Math_fround($1 + $1));
  }
  __stack_pointer = $0 + 32 | 0;
 }
 
 function ImGui__Spacing_28_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 143)) {
   SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($0 + 8 | 0, Math_fround(-1.0));
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function ImGui__Dummy_28ImVec2_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
   $3 = SAFE_HEAP_LOAD_i64_8_4($2, 208);
   $4 = i64toi32_i32$HIGH_BITS;
   $5 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $6 = SAFE_HEAP_LOAD_f32_4_4($2, 208);
   SAFE_HEAP_STORE_f32_4_4($1 + 12 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0, 4)));
   SAFE_HEAP_STORE_f32_4_4($1, 8, Math_fround($6 + $5));
   SAFE_HEAP_STORE_i64_8_8($1, 0, $3, $4);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($0, Math_fround(-1.0));
   ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($1, 0, 0, 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function ImGui__NewLine_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 143)) {
   $3 = $1 + 376 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, 1);
   label$2 : {
    if (SAFE_HEAP_LOAD_f32_4_4($1 + 252 | 0, 0) > Math_fround(0.0)) {
     SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
     break label$2;
    }
    SAFE_HEAP_STORE_f32_4_4($0, 12, SAFE_HEAP_LOAD_f32_4_4($2, 6468));
    SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
   }
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($0 + 8 | 0, Math_fround(-1.0));
   SAFE_HEAP_STORE_i32_4_4($1, 376, $4);
  }
  __stack_pointer = $0 + 16 | 0;
 }
 
 function ImGui__AlignTextToFramePadding_28_29() {
  var $0 = 0, $1 = Math_fround(0), $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = Math_fround(0);
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
   $5 = SAFE_HEAP_LOAD_f32_4_4($3, 6468);
   $4 = $0 + 264 | 0;
   $2 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   $1 = SAFE_HEAP_LOAD_f32_4_4($3 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($4, 0, $2 >= $1 ? $2 : $1);
   $0 = $0 + 252 | 0;
   $2 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $1 = Math_fround($5 + Math_fround($1 + $1));
   SAFE_HEAP_STORE_f32_4_4($0, 0, $2 >= $1 ? $2 : $1);
  }
 }
 
 function ImGui__SeparatorEx_28int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0);
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  SAFE_HEAP_STORE_i32_1_1($3, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($3, 143)) {
    break label$1
   }
   if ($0 & 2) {
    $4 = SAFE_HEAP_LOAD_f32_4_4($3, 208);
    $0 = $1 + 28 | 0;
    $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 212 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3 + 252 | 0, 0)));
    SAFE_HEAP_STORE_f32_4_4($1, 20, $5);
    SAFE_HEAP_STORE_f32_4_4($1, 16, $4);
    SAFE_HEAP_STORE_f32_4_4($1, 24, Math_fround($4 + Math_fround(1.0)));
    SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 0);
    ImGui__ItemSize_28ImVec2_20const__2c_20float_29($1 + 8 | 0, Math_fround(-1.0));
    if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($1 + 16 | 0, 0, 0, 0)) {
     break label$1
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
    SAFE_HEAP_STORE_f32_4_4($1, 12, SAFE_HEAP_LOAD_f32_4_4($1, 20));
    $4 = SAFE_HEAP_LOAD_f32_4_4($1, 16);
    SAFE_HEAP_STORE_f32_4_4($1, 8, $4);
    SAFE_HEAP_STORE_f32_4_4($1, 4, SAFE_HEAP_LOAD_f32_4_4($0, 0));
    SAFE_HEAP_STORE_f32_4_4($1, 0, $4);
    ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($2, $1 + 8 | 0, $1, ImGui__GetColorU32_28int_2c_20float_29(27, Math_fround(1.0)), Math_fround(1.0));
    if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 12196)) {
     break label$1
    }
    ImGui__LogText_28char_20const__2c_20____29(1058, 0);
    break label$1;
   }
   if (!($0 & 1)) {
    break label$1
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
   $4 = $5;
   $2 = SAFE_HEAP_LOAD_i32_4_4($6, 7456);
   label$3 : {
    if (($2 | 0) <= 0) {
     break label$3
    }
    if ((SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($6 + 7464 | 0, 0) + Math_imul($2, 48) | 0) - 48 | 0, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($3, 4) | 0)) {
     break label$3
    }
    $4 = Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3 + 272 | 0, 0));
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($6, 8036);
   label$4 : {
    if (!$2) {
     $5 = Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 20));
     break label$4;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 16) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 92), 104) | 0;
    $5 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
    $4 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
   }
   $2 = 0;
   if ($0 & 4) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 368 | 0, 0)
   }
   if ($2) {
    ImGui__PushColumnsBackground_28_29()
   }
   $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 212 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($1 + 28 | 0, 0, Math_fround($7 + Math_fround(1.0)));
   SAFE_HEAP_STORE_f32_4_4($1, 24, $5);
   SAFE_HEAP_STORE_f32_4_4($1, 20, $7);
   SAFE_HEAP_STORE_f32_4_4($1, 16, $4);
   SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 0);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($1 + 8 | 0, Math_fround(-1.0));
   label$8 : {
    if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($1 + 16 | 0, 0, 0, 0)) {
     break label$8
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($3, 580);
    SAFE_HEAP_STORE_i64_8_4($1, 8, __wasm_rotl_i64(SAFE_HEAP_LOAD_i64_8_4($1, 20), i64toi32_i32$HIGH_BITS), i64toi32_i32$HIGH_BITS);
    ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($0, $1 + 16 | 0, $1 + 8 | 0, ImGui__GetColorU32_28int_2c_20float_29(27, Math_fround(1.0)), Math_fround(1.0));
    if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 12196)) {
     break label$8
    }
    ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($1 + 16 | 0, 19321, 0);
   }
   if (!$2) {
    break label$1
   }
   ImGui__PopColumnsBackground_28_29();
   SAFE_HEAP_STORE_f32_4_4($2, 28, SAFE_HEAP_LOAD_f32_4_4($3, 212));
  }
  __stack_pointer = $1 + 32 | 0;
 }
 
 function ImGui__Separator_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
   ImGui__SeparatorEx_28int_29(SAFE_HEAP_LOAD_i32_4_4($0 + 376 | 0, 0) ? 5 : 6)
  }
 }
 
 function ShrinkWidthItemComparer_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0);
  $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) - SAFE_HEAP_LOAD_f32_4_4($0, 4));
  label$1 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $2 = ~~$3;
    break label$1;
   }
   $2 = -2147483648;
  }
  if (!$2) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) - SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0
  }
  return $2 | 0;
 }
 
 function ImGui__BeginCombo_28char_20const__2c_20char_20const__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 144 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $7 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  SAFE_HEAP_STORE_i32_1_1($7, 140, 1);
  $19 = SAFE_HEAP_LOAD_i32_4_4($4, 7300);
  SAFE_HEAP_STORE_i32_4_4($4, 7300, 0);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($7, 143)) {
   $8 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($7, $0);
   $13 = $2 & 32;
   if (!$13) {
    $9 = ImGui__GetFrameHeight_28_29()
   }
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 136 | 0, $0, 0, 1, Math_fround(-1.0));
   $5 = $9;
   $15 = $2 & 64;
   if (!$15) {
    $5 = ImGui__CalcItemWidth_28_29()
   }
   $6 = SAFE_HEAP_LOAD_i64_8_4($7, 208);
   $16 = i64toi32_i32$HIGH_BITS;
   $10 = SAFE_HEAP_LOAD_f32_4_4($7, 208);
   $18 = $3 + 132 | 0;
   $11 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($18, 0, Math_fround(Math_fround(Math_fround($11 + $11) + SAFE_HEAP_LOAD_f32_4_4($3, 140)) + SAFE_HEAP_LOAD_f32_4_4($7 + 212 | 0, 0)));
   $14 = $5;
   SAFE_HEAP_STORE_f32_4_4($3, 128, Math_fround($10 + $5));
   SAFE_HEAP_STORE_i64_8_8($3, 120, $6, $16);
   $5 = Math_fround(0.0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($3, 136);
   if ($10 > Math_fround(0.0)) {
    $5 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($4 + 5500 | 0, 0))
   }
   $12 = $3 + 104 | 0;
   SAFE_HEAP_STORE_f32_4_4($12 + 12 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($18, 0) + Math_fround(0.0)));
   SAFE_HEAP_STORE_i64_8_8($3, 104, $6, $16);
   SAFE_HEAP_STORE_f32_4_4($3, 112, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 128)));
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($12, $11);
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($12, $8, $3 + 120 | 0, 0)) {
    $12 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($3 + 120 | 0, $8, $3 + 103 | 0, $3 + 102 | 0, 0);
    $16 = ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(6748, $8);
    $6 = ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($16);
    if (!(!!$6 | !$12)) {
     ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($16, 0);
     $6 = 1;
    }
    $12 = ImGui__GetColorU32_28int_2c_20float_29(SAFE_HEAP_LOAD_i32_1_U_1($3, 103) ? 8 : 7, Math_fround(1.0));
    $5 = SAFE_HEAP_LOAD_f32_4_4($3, 120);
    $11 = SAFE_HEAP_LOAD_f32_4_4($3, 128);
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($3 + 120 | 0, $8, 1);
    $11 = Math_fround($11 - $9);
    $5 = $5 >= $11 ? $5 : $11;
    if (!$15) {
     $8 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
     SAFE_HEAP_STORE_f32_4_4($3, 96, SAFE_HEAP_LOAD_f32_4_4($3 + 132 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($3, 92, $5);
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($8, $3 + 120 | 0, $3 + 92 | 0, $12, SAFE_HEAP_LOAD_f32_4_4($4 + 5484 | 0, 0), $13 ? 240 : 80);
    }
    label$9 : {
     if ($13) {
      break label$9
     }
     $8 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = 22, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_1_U_1($3, 103) & 1 ? 22 : 21, wasm2js_i32$2 = $6, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
     $13 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
     $12 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
     SAFE_HEAP_STORE_f32_4_4($3, 96, SAFE_HEAP_LOAD_f32_4_4($3, 124));
     SAFE_HEAP_STORE_f32_4_4($3, 92, $5);
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($12, $3 + 92 | 0, $3 + 128 | 0, $8, SAFE_HEAP_LOAD_f32_4_4($4 + 5484 | 0, 0), $9 >= $14 ? 240 : 160);
     if (!(Math_fround(Math_fround($9 + $5) - SAFE_HEAP_LOAD_f32_4_4($4, 5476)) <= SAFE_HEAP_LOAD_f32_4_4($3, 128))) {
      break label$9
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
     $9 = SAFE_HEAP_LOAD_f32_4_4($4, 5480);
     SAFE_HEAP_STORE_f32_4_4($3, 88, Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($3, 124)));
     SAFE_HEAP_STORE_f32_4_4($3, 84, Math_fround($5 + $9));
     SAFE_HEAP_STORE_i64_8_8($3, 32, SAFE_HEAP_LOAD_i64_8_4($3, 84), i64toi32_i32$HIGH_BITS);
     ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($7, $3 + 32 | 0, $13, 3, Math_fround(1.0));
    }
    $7 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
    $8 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($3, 72, $7, $8);
    $13 = SAFE_HEAP_LOAD_i64_8_8($3, 128);
    $12 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($3, 64, $13, $12);
    $9 = SAFE_HEAP_LOAD_f32_4_4($4 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($3, 24, $7, $8);
    SAFE_HEAP_STORE_i64_8_8($3, 16, $13, $12);
    ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($3 + 24 | 0, $3 + 16 | 0, $9);
    if ($2 & 1048576) {
     $1 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
     $7 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_f32_4_4($4 + 12016 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($3 + 132 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($4, 12004, $1, $7);
     SAFE_HEAP_STORE_f32_4_4($4 + 12012 | 0, 0, $5);
     $1 = 0;
    }
    if (!(!$1 | $15)) {
     if (SAFE_HEAP_LOAD_i32_1_U_1($4, 12196)) {
      ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(1061, 1056)
     }
     $9 = SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($3, 92, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 120) + SAFE_HEAP_LOAD_f32_4_4($4, 5476)));
     SAFE_HEAP_STORE_f32_4_4($3, 96, Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($3, 124)));
     SAFE_HEAP_STORE_f32_4_4($3, 60, SAFE_HEAP_LOAD_f32_4_4($3 + 132 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($3, 56, $5);
     SAFE_HEAP_STORE_i64_8_4($3, 48, 0, 0);
     ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($3 + 92 | 0, $3 + 56 | 0, $1, 0, 0, $3 + 48 | 0, 0);
    }
    if (SAFE_HEAP_LOAD_f32_4_4($3, 136) > Math_fround(0.0)) {
     $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 5500 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($3, 44, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 124) + SAFE_HEAP_LOAD_f32_4_4($4, 5480)));
     SAFE_HEAP_STORE_f32_4_4($3, 40, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 128)));
     SAFE_HEAP_STORE_i64_8_8($3, 8, SAFE_HEAP_LOAD_i64_8_4($3, 40), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($3 + 8 | 0, $0, 0, 1);
    }
    if ($6) {
     SAFE_HEAP_STORE_i32_4_4($4, 7300, $19);
     $7 = $3 + 120 | 0;
     $0 = __stack_pointer + -64 | 0;
     __stack_pointer = $0;
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     label$1 : {
      if (!ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($16)) {
       SAFE_HEAP_STORE_i32_4_4($1, 7300, 0);
       $1 = 0;
       break label$1;
      }
      $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 8) - SAFE_HEAP_LOAD_f32_4_4($7, 0));
      label$3 : {
       if (SAFE_HEAP_LOAD_i32_1_U_1($1, 7300) & 16) {
        $4 = $1 + 7360 | 0;
        $9 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
        SAFE_HEAP_STORE_f32_4_4($4, 0, $5 <= $9 ? $9 : $5);
        break label$3;
       }
       SAFE_HEAP_STORE_i32_4_4($0, 52, 0);
       SAFE_HEAP_STORE_f32_4_4($0, 48, $5);
       $2 = $2 & 30 ? $2 : $2 | 4;
       $6 = 8;
       label$5 : {
        if ($2 & 4) {
         break label$5
        }
        $6 = 4;
        if ($2 & 2) {
         break label$5
        }
        $6 = $2 & 8 ? 20 : -1;
       }
       if (($6 | 0) <= 0) {
        $5 = Math_fround(3402823466385288598117041.0e14)
       } else {
        $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 5428 | 0, 0);
        $9 = Math_fround($5 + $5);
        $10 = SAFE_HEAP_LOAD_f32_4_4($4, 6468);
        $5 = SAFE_HEAP_LOAD_f32_4_4($4 + 5496 | 0, 0);
        $5 = Math_fround($9 + Math_fround(Math_fround(Math_fround($10 + $5) * Math_fround($6 | 0)) - $5));
       }
       SAFE_HEAP_STORE_f32_4_4($0, 28, $5);
       SAFE_HEAP_STORE_i32_4_4($0, 24, 2139095039);
       ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($0 + 48 | 0, $0 + 24 | 0, 0);
      }
      $6 = $2;
      SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 7480));
      $2 = $0 + 48 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2, 16, 12883, $0);
      $2 = ImGui__FindWindowByName_28char_20const__29($2);
      label$8 : {
       if (!$2) {
        break label$8
       }
       if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 139)) {
        break label$8
       }
       $4 = __stack_pointer - 32 | 0;
       __stack_pointer = $4;
       SAFE_HEAP_STORE_i64_8_4($4, 24, 0, 0);
       SAFE_HEAP_STORE_i64_8_4($4, 16, 0, 0);
       $8 = $4 + 16 | 0;
       CalcWindowContentSizes_28ImGuiWindow__2c_20ImVec2__2c_20ImVec2__29($2, $4 + 24 | 0, $8);
       $13 = $4 + 8 | 0;
       CalcWindowAutoFitSize_28ImGuiWindow__2c_20ImVec2_20const__29($13, $2, $8);
       $15 = $0 + 40 | 0;
       CalcWindowSizeAfterConstraint_28ImGuiWindow__2c_20ImVec2_20const__29($15, $2, $13);
       __stack_pointer = $4 + 32 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 168, $6 & 1 ? 0 : 3);
       $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8 + 7504 | 0, 0), 0);
       $14 = SAFE_HEAP_LOAD_f32_4_4($6 + 16 | 0, 0);
       $5 = SAFE_HEAP_LOAD_f32_4_4($6 + 8 | 0, 0);
       $4 = $0 + 24 | 0;
       $9 = SAFE_HEAP_LOAD_f32_4_4($6, 4);
       $11 = Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($6, 12));
       SAFE_HEAP_STORE_f32_4_4($4, 8, $11);
       SAFE_HEAP_STORE_f32_4_4($4, 4, $5);
       SAFE_HEAP_STORE_f32_4_4($4, 0, $9);
       $6 = $4 + 12 | 0;
       $10 = Math_fround($5 + $14);
       SAFE_HEAP_STORE_f32_4_4($6, 0, $10);
       $14 = SAFE_HEAP_LOAD_f32_4_4($8 + 5592 | 0, 0);
       $20 = $10;
       $17 = SAFE_HEAP_LOAD_f32_4_4($8 + 5596 | 0, 0);
       $10 = Math_fround($17 + $17) < Math_fround($10 - $5) ? Math_fround(-$17) : Math_fround(0.0);
       SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround($20 + $10));
       $14 = Math_fround($14 + $14) < Math_fround($11 - $9) ? Math_fround(-$14) : Math_fround(0.0);
       SAFE_HEAP_STORE_f32_4_4($4, 8, Math_fround($11 + $14));
       SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround($5 - $10));
       SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($9 - $14));
       $5 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
       SAFE_HEAP_STORE_f32_4_4($0, 12, SAFE_HEAP_LOAD_f32_4_4($7 + 12 | 0, 0));
       SAFE_HEAP_STORE_f32_4_4($0, 8, $5);
       $6 = $0 + 16 | 0;
       $8 = $0 + 8 | 0;
       ImGui__FindBestWindowPosForPopupEx_28ImVec2_20const__2c_20ImVec2_20const__2c_20int__2c_20ImRect_20const__2c_20ImRect_20const__2c_20ImGuiPopupPositionPolicy_29($6, $8, $15, $2 + 168 | 0, $4, $7, 1);
       SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
       ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($6, 0, $8);
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 5476 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($0, 28, SAFE_HEAP_LOAD_f32_4_4($1 + 5428 | 0, 0));
      SAFE_HEAP_STORE_f32_4_4($0, 24, $5);
      ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(2, $0 + 24 | 0);
      $1 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($0 + 48 | 0, 0, 67109191);
      ImGui__PopStyleVar_28int_29(1);
      if (!$1) {
       ImGui__EndPopup_28_29()
      }
     }
     __stack_pointer = $0 - -64 | 0;
    } else {
     $1 = 0
    }
   } else {
    $1 = 0
   }
   $6 = $1;
  }
  __stack_pointer = $3 + 144 | 0;
  return $6;
 }
 
 function ImGui__EndCombo_28_29() {
  ImGui__EndPopup_28_29();
 }
 
 function ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $4 = __stack_pointer - 112 | 0;
  __stack_pointer = $4;
  $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($11, 7080);
  SAFE_HEAP_STORE_i32_1_1($8, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 143)) {
   $9 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($8, $0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($4 + 104 | 0, $0, 0, 1, Math_fround(-1.0));
   $6 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
   SAFE_HEAP_STORE_f32_4_4($4, 100, (wasm2js_f32$0 = $10, wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($4, 108), wasm2js_i32$0 = $10 != Math_fround(0.0), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1));
   SAFE_HEAP_STORE_f32_4_4($4, 96, (wasm2js_f32$0 = $6, wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($4, 104), wasm2js_i32$0 = $6 != Math_fround(0.0), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1));
   $12 = SAFE_HEAP_LOAD_f32_4_4($8 + 212 | 0, 0);
   $13 = SAFE_HEAP_LOAD_f32_4_4($8 + 264 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($8, 208);
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($4 + 96 | 0, Math_fround(0.0));
   $6 = $10;
   $15 = $2 & 2;
   if ($15) {
    $6 = SAFE_HEAP_LOAD_f32_4_4($8, 480)
   }
   $12 = Math_fround($12 + $13);
   label$3 : {
    if (!($2 & 16777216)) {
     if (SAFE_HEAP_LOAD_f32_4_4($3, 0) != Math_fround(0.0)) {
      break label$3
     }
    }
    $13 = SAFE_HEAP_LOAD_f32_4_4($4, 104);
    $16 = Math_fround(SAFE_HEAP_LOAD_f32_4_4(($15 ? 488 : 472) + $8 | 0, 0) - $6);
    SAFE_HEAP_STORE_f32_4_4($4, 96, $13 >= $16 ? $13 : $16);
   }
   SAFE_HEAP_STORE_f32_4_4($4, 92, $12);
   SAFE_HEAP_STORE_f32_4_4($4, 88, $10);
   $13 = Math_fround($12 + SAFE_HEAP_LOAD_f32_4_4($4, 100));
   SAFE_HEAP_STORE_f32_4_4($4, 84, $13);
   $16 = Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($4, 96));
   SAFE_HEAP_STORE_f32_4_4($4, 80, $16);
   SAFE_HEAP_STORE_f32_4_4($4 + 76 | 0, 0, $13);
   SAFE_HEAP_STORE_f32_4_4($4, 72, $16);
   SAFE_HEAP_STORE_f32_4_4($4, 68, $12);
   SAFE_HEAP_STORE_f32_4_4($4, 64, $6);
   if (!($2 & 134217728)) {
    $10 = Math_fround(0.0);
    if (!$15) {
     $10 = SAFE_HEAP_LOAD_f32_4_4($11 + 5492 | 0, 0)
    }
    $18 = SAFE_HEAP_LOAD_f32_4_4($11 + 5496 | 0, 0);
    $20 = $6;
    $6 = Math_fround($10 * Math_fround(.5));
    label$7 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $3 = ~~$6;
      break label$7;
     }
     $3 = -2147483648;
    }
    $6 = Math_fround($3 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 64, Math_fround($20 - $6));
    SAFE_HEAP_STORE_f32_4_4($4, 72, Math_fround($16 + Math_fround($10 - $6)));
    $6 = Math_fround($18 * Math_fround(.5));
    label$9 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $3 = ~~$6;
      break label$9;
     }
     $3 = -2147483648;
    }
    $6 = Math_fround($3 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 68, Math_fround($12 - $6));
    SAFE_HEAP_STORE_f32_4_4($4, 76, Math_fround($13 + Math_fround($18 - $6)));
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($8 + 504 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($8, 496);
   if ($15) {
    SAFE_HEAP_STORE_f32_4_4($8, 496, SAFE_HEAP_LOAD_f32_4_4($8, 480));
    SAFE_HEAP_STORE_f32_4_4($8, 504, SAFE_HEAP_LOAD_f32_4_4($8, 488));
   }
   $5 = $2 & 8;
   $7 = ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($4 - -64 | 0, $9, 0, $5 >>> 1 | 0);
   if ($15) {
    SAFE_HEAP_STORE_f32_4_4($8, 504, $6);
    SAFE_HEAP_STORE_f32_4_4($8, 496, $10);
   }
   $3 = 0;
   if ($7) {
    $19 = !$5 | (SAFE_HEAP_LOAD_i32_1_U_1($11, 7216) & 4) >>> 2;
    if (!$19) {
     ImGui__BeginDisabled_28bool_29(1)
    }
    label$15 : {
     if (!$15) {
      break label$15
     }
     if (SAFE_HEAP_LOAD_i32_4_4($8 + 368 | 0, 0)) {
      ImGui__PushColumnsBackground_28_29();
      break label$15;
     }
     if (!SAFE_HEAP_LOAD_i32_4_4($11, 8036)) {
      break label$15
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 8036);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
     SAFE_HEAP_STORE_i64_8_4($3, 340, SAFE_HEAP_LOAD_i64_8_4($5, 496), i64toi32_i32$HIGH_BITS);
     $7 = $5 + 504 | 0;
     SAFE_HEAP_STORE_i64_8_4($3 + 348 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
     $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 320 | 0, 0);
     $14 = $3 + 316 | 0;
     $10 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
     $12 = SAFE_HEAP_LOAD_f32_4_4($3 + 312 | 0, 0);
     $13 = SAFE_HEAP_LOAD_f32_4_4($3, 308);
     SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_4($14, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($5, 496, SAFE_HEAP_LOAD_i64_8_4($3, 308), i64toi32_i32$HIGH_BITS);
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 580);
     SAFE_HEAP_STORE_f32_4_4($7, 96, $13);
     SAFE_HEAP_STORE_f32_4_4($7 + 100 | 0, 0, $12);
     SAFE_HEAP_STORE_f32_4_4($7 + 104 | 0, 0, $10);
     SAFE_HEAP_STORE_f32_4_4($7 + 108 | 0, 0, $6);
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 580);
     $7 = ((SAFE_HEAP_LOAD_i32_4_4($7, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($7 + 68 | 0, 0) | 0) - 16 | 0;
     SAFE_HEAP_STORE_f32_4_4($7, 12, $6);
     SAFE_HEAP_STORE_f32_4_4($7, 8, $10);
     SAFE_HEAP_STORE_f32_4_4($7, 4, $12);
     SAFE_HEAP_STORE_f32_4_4($7, 0, $13);
     ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($3, 376), SAFE_HEAP_LOAD_i32_4_4($5, 580), SAFE_HEAP_LOAD_i32_1_U_1($3, 439));
    }
    $7 = $2 & 16;
    $3 = $2 >>> 16 & 128 | ($2 >>> 18 & 16 | $2 >>> 3 & 131072);
    $3 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($4 - -64 | 0, $9, $4 + 63 | 0, $4 + 62 | 0, $7 << 8 | ($2 & 4 ? $3 | 288 : $3));
    label$17 : {
     label$18 : {
      if (!($2 & 2097152)) {
       break label$18
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4($11, 7540);
      if (!$5) {
       break label$18
      }
      $14 = (SAFE_HEAP_LOAD_i32_4_4($11, 7544) | 0) == (SAFE_HEAP_LOAD_i32_4_4($8 + 300 | 0, 0) | 0) & ($5 | 0) == ($9 | 0);
      $5 = $14 | $1;
      $3 = $3 | $14;
      break label$17;
     }
     $5 = $1;
    }
    label$19 : {
     if (!$3) {
      if (!($2 & 67108864)) {
       break label$19
      }
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 63) & 255)) {
       break label$19
      }
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($11, 7571)) {
      break label$19
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($11, 7508) | 0) != ($8 | 0)) {
      break label$19
     }
     $17 = SAFE_HEAP_LOAD_i32_4_4($11, 7564);
     $14 = SAFE_HEAP_LOAD_i32_4_4($8 + 292 | 0, 0);
     if (($17 | 0) != ($14 | 0)) {
      break label$19
     }
     $17 = SAFE_HEAP_LOAD_i32_4_4($8 + 300 | 0, 0);
     $6 = SAFE_HEAP_LOAD_f32_4_4($8 + 224 | 0, 0);
     $12 = SAFE_HEAP_LOAD_f32_4_4($4, 76);
     $10 = SAFE_HEAP_LOAD_f32_4_4($8 + 228 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($4 + 56 | 0, 0, Math_fround($12 - $10));
     SAFE_HEAP_STORE_f32_4_4($4, 52, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 72) - $6));
     SAFE_HEAP_STORE_f32_4_4($4, 48, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 68) - $10));
     SAFE_HEAP_STORE_f32_4_4($4, 44, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 64) - $6));
     ImGui__SetNavID_28unsigned_20int_2c_20ImGuiNavLayer_2c_20unsigned_20int_2c_20ImRect_20const__29($9, $14, $17, $4 + 44 | 0);
     SAFE_HEAP_STORE_i32_1_1($11, 7570, 1);
    }
    if ($3) {
     ImGui__MarkItemEdited_28unsigned_20int_29($9)
    }
    if ($7) {
     ImGui__SetItemAllowOverlap_28_29()
    }
    if (($1 | 0) != ($5 | 0)) {
     $1 = $11 + 7248 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) | 8);
    }
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($4, 62);
    if (!(!($2 & 33554432) | !($1 & 255))) {
     SAFE_HEAP_STORE_i32_1_1($4, 63, 1)
    }
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($4, 63);
    if (!(!$7 & ($5 ^ -1))) {
     $1 = ImGui__GetColorU32_28int_2c_20float_29($7 ? ($1 & 255 ? 26 : 25) : 24, Math_fround(1.0));
     $5 = SAFE_HEAP_LOAD_i64_8_8($4, 64);
     $7 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($4, 32, $5, $7);
     $14 = SAFE_HEAP_LOAD_i64_8_8($4, 72);
     $17 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($4, 24, $14, $17);
     SAFE_HEAP_STORE_i64_8_8($4, 16, $5, $7);
     SAFE_HEAP_STORE_i64_8_8($4, 8, $14, $17);
     ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($4 + 16 | 0, $4 + 8 | 0, $1, 0, Math_fround(0.0));
    }
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($4 - -64 | 0, $9, 10);
    label$26 : {
     if (!$15) {
      break label$26
     }
     if (SAFE_HEAP_LOAD_i32_4_4($8 + 368 | 0, 0)) {
      ImGui__PopColumnsBackground_28_29();
      break label$26;
     }
     if (!SAFE_HEAP_LOAD_i32_4_4($11, 8036)) {
      break label$26
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $1 = SAFE_HEAP_LOAD_i32_4_4($5, 8036);
     $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 352 | 0, 0);
     $9 = $1 + 348 | 0;
     $10 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
     $12 = SAFE_HEAP_LOAD_f32_4_4($1 + 344 | 0, 0);
     $15 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
     $7 = SAFE_HEAP_LOAD_i32_4_4($1, 92);
     $13 = SAFE_HEAP_LOAD_f32_4_4($1, 340);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
     SAFE_HEAP_STORE_i64_8_4($5 + 504 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($5, 496, SAFE_HEAP_LOAD_i64_8_4($1, 340), i64toi32_i32$HIGH_BITS);
     $9 = SAFE_HEAP_LOAD_i32_4_4($5, 580);
     SAFE_HEAP_STORE_f32_4_4($9 + 100 | 0, 0, $12);
     SAFE_HEAP_STORE_f32_4_4($9 + 104 | 0, 0, $10);
     SAFE_HEAP_STORE_f32_4_4($9 + 108 | 0, 0, $6);
     SAFE_HEAP_STORE_f32_4_4($9, 96, $13);
     $9 = SAFE_HEAP_LOAD_i32_4_4($5, 580);
     $9 = ((SAFE_HEAP_LOAD_i32_4_4($9, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($9 + 68 | 0, 0) | 0) - 16 | 0;
     SAFE_HEAP_STORE_f32_4_4($9, 12, $6);
     SAFE_HEAP_STORE_f32_4_4($9, 8, $10);
     SAFE_HEAP_STORE_f32_4_4($9, 4, $12);
     SAFE_HEAP_STORE_f32_4_4($9, 0, $13);
     ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($1, 376), SAFE_HEAP_LOAD_i32_4_4($5, 580), SAFE_HEAP_LOAD_i32_1_U_1(Math_imul($7, 104) + $15 | 0, 87));
    }
    ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($4 + 88 | 0, $4 + 80 | 0, $0, 0, $4 + 104 | 0, $11 + 5576 | 0, $4 - -64 | 0);
    label$28 : {
     if (!$3 | $2 & 1) {
      break label$28
     }
     if (!(SAFE_HEAP_LOAD_i32_4_4($8, 8) & 67108864)) {
      break label$28
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($11 + 7244 | 0, 0) & 32) {
      break label$28
     }
     ImGui__CloseCurrentPopup_28_29();
    }
    if (!$19) {
     ImGui__EndDisabled_28_29()
    }
   }
   $5 = $3;
  }
  __stack_pointer = $4 + 112 | 0;
  return $5;
 }
 
 function ImGui__Combo_28char_20const__2c_20int__2c_20char_20const__20const__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0);
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $5 = 0;
  label$1 : {
   if (($9 | 0) < 0) {
    break label$1
   }
   $5 = 0;
   if (($3 | 0) <= ($9 | 0)) {
    break label$1
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4(($9 << 2) + $2 | 0, 0);
  }
  $9 = $5;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$2 : {
   if (($4 | 0) == -1) {
    break label$2
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($5, 7300) & 16) {
    break label$2
   }
   SAFE_HEAP_STORE_i64_8_4($7, 8, 0, 0);
   if (($4 | 0) <= 0) {
    $8 = Math_fround(3402823466385288598117041.0e14)
   } else {
    $8 = SAFE_HEAP_LOAD_f32_4_4($5 + 5428 | 0, 0);
    $10 = Math_fround($8 + $8);
    $11 = SAFE_HEAP_LOAD_f32_4_4($5, 6468);
    $8 = SAFE_HEAP_LOAD_f32_4_4($5 + 5496 | 0, 0);
    $8 = Math_fround($10 + Math_fround(Math_fround(Math_fround($11 + $8) * Math_fround($4 | 0)) - $8));
   }
   SAFE_HEAP_STORE_f32_4_4($7, 4, $8);
   SAFE_HEAP_STORE_i32_4_4($7, 0, 2139095039);
   ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($7 + 8 | 0, $7, 0);
  }
  if (ImGui__BeginCombo_28char_20const__2c_20char_20const__2c_20int_29($0, $9, 0)) {
   label$6 : {
    if (($3 | 0) <= 0) {
     $0 = 0;
     break label$6;
    }
    $0 = 0;
    while (1) {
     ImGui__PushID_28int_29($6);
     $9 = SAFE_HEAP_LOAD_i32_4_4(($6 << 2) + $2 | 0, 0);
     $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 8, 0, 0);
     if (ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($9, ($4 | 0) == ($6 | 0), 0, $7 + 8 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($1, 0, $6);
      $0 = 1;
     }
     if (($4 | 0) == ($6 | 0)) {
      ImGui__SetItemDefaultFocus_28_29()
     }
     ImGui__PopID_28_29();
     $6 = $6 + 1 | 0;
     if (($6 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   ImGui__EndPopup_28_29();
   $6 = $0;
   if ($6 & 1) {
    ImGui__MarkItemEdited_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($5, 7240))
   }
  }
  __stack_pointer = $7 + 16 | 0;
  return $6 & 1;
 }
 
 function ImGui__DataTypeFormatString_28char__2c_20int_2c_20int_2c_20void_20const__2c_20char_20const__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0;
  $5 = __stack_pointer - 128 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    switch (($2 & -2) - 4 | 0) {
    case 0:
     SAFE_HEAP_STORE_i32_4_4($5, 96, SAFE_HEAP_LOAD_i32_4_4($3, 0));
     $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5 + 96 | 0);
     break label$1;
    case 2:
     SAFE_HEAP_STORE_i64_8_8($5, 112, SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS);
     $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5 + 112 | 0);
     break label$1;
    default:
     break label$2;
    };
   }
   label$5 : {
    switch ($2 | 0) {
    case 8:
     SAFE_HEAP_STORE_f64_8_8($5, 0, +SAFE_HEAP_LOAD_f32_4_4($3, 0));
     $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5);
     break label$1;
    case 9:
     SAFE_HEAP_STORE_f64_8_8($5, 16, SAFE_HEAP_LOAD_f64_8_8($3, 0));
     $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5 + 16 | 0);
     break label$1;
    case 0:
     SAFE_HEAP_STORE_i32_4_4($5, 32, SAFE_HEAP_LOAD_i32_1_1($3, 0));
     $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5 + 32 | 0);
     break label$1;
    case 1:
     SAFE_HEAP_STORE_i32_4_4($5, 48, SAFE_HEAP_LOAD_i32_1_U_1($3, 0));
     $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5 + 48 | 0);
     break label$1;
    case 2:
     SAFE_HEAP_STORE_i32_4_4($5, 64, SAFE_HEAP_LOAD_i32_2_2($3, 0));
     $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5 - -64 | 0);
     break label$1;
    case 3:
     break label$5;
    default:
     break label$1;
    };
   }
   SAFE_HEAP_STORE_i32_4_4($5, 80, SAFE_HEAP_LOAD_i32_2_U_2($3, 0));
   $6 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, $1, $4, $5 + 80 | 0);
  }
  __stack_pointer = $5 + 128 | 0;
  return $6;
 }
 
 function ImGui__DataTypeApplyOp_28int_2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  label$1 : {
   label$2 : {
    switch ($0 | 0) {
    case 0:
     if (($1 | 0) == 43) {
      $6 = SAFE_HEAP_LOAD_i32_1_1($3, 0);
      $5 = SAFE_HEAP_LOAD_i32_1_1($4, 0);
      label$13 : {
       if (($5 | 0) < 0) {
        $0 = 128;
        if (($6 | 0) < (-128 - $5 | 0)) {
         break label$13
        }
       }
       $0 = $5 + $6 | 0;
       $0 = ($5 | 0) > 0 ? (($6 | 0) > (127 - $5 | 0) ? 127 : $0) : $0;
      }
      SAFE_HEAP_STORE_i32_1_1($2, 0, $0);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $1 = SAFE_HEAP_LOAD_i32_1_1($3, 0);
     $0 = SAFE_HEAP_LOAD_i32_1_1($4, 0);
     label$15 : {
      if (($0 | 0) > 0) {
       $3 = 128;
       if (($1 | 0) < ($0 - 128 | 0)) {
        break label$15
       }
      }
      $3 = $1 - $0 | 0;
      $3 = ($0 | 0) < 0 ? (($1 | 0) > ($0 + 127 | 0) ? 127 : $3) : $3;
     }
     SAFE_HEAP_STORE_i32_1_1($2, 0, $3);
     return;
    case 1:
     if (($1 | 0) == 43) {
      $0 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0) + SAFE_HEAP_LOAD_i32_1_U_1($3, 0) | 0;
      SAFE_HEAP_STORE_i32_1_1($2, 0, $0 >>> 0 >= 255 ? 255 : $0);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
     $1 = $0 - SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0;
     SAFE_HEAP_STORE_i32_1_1($2, 0, $0 >>> 0 >= $1 >>> 0 ? $1 : 0);
     return;
    case 2:
     if (($1 | 0) == 43) {
      $6 = SAFE_HEAP_LOAD_i32_2_2($3, 0);
      $5 = SAFE_HEAP_LOAD_i32_2_2($4, 0);
      label$19 : {
       if (($5 | 0) < 0) {
        $0 = 32768;
        if (($6 | 0) < (-32768 - $5 | 0)) {
         break label$19
        }
       }
       $0 = $5 + $6 | 0;
       $0 = ($5 | 0) > 0 ? (($6 | 0) > (32767 - $5 | 0) ? 32767 : $0) : $0;
      }
      SAFE_HEAP_STORE_i32_2_2($2, 0, $0);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $1 = SAFE_HEAP_LOAD_i32_2_2($3, 0);
     $0 = SAFE_HEAP_LOAD_i32_2_2($4, 0);
     label$21 : {
      if (($0 | 0) > 0) {
       $3 = 32768;
       if (($1 | 0) < ($0 - 32768 | 0)) {
        break label$21
       }
      }
      $3 = $1 - $0 | 0;
      $3 = ($0 | 0) < 0 ? (($1 | 0) > ($0 + 32767 | 0) ? 32767 : $3) : $3;
     }
     SAFE_HEAP_STORE_i32_2_2($2, 0, $3);
     return;
    case 3:
     if (($1 | 0) == 43) {
      $0 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0) + SAFE_HEAP_LOAD_i32_2_U_2($3, 0) | 0;
      SAFE_HEAP_STORE_i32_2_2($2, 0, $0 >>> 0 >= 65535 ? 65535 : $0);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $0 = SAFE_HEAP_LOAD_i32_2_U_2($3, 0);
     $1 = $0 - SAFE_HEAP_LOAD_i32_2_U_2($4, 0) | 0;
     SAFE_HEAP_STORE_i32_2_2($2, 0, $0 >>> 0 >= $1 >>> 0 ? $1 : 0);
     return;
    case 4:
     if (($1 | 0) == 43) {
      $6 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
      $5 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      label$25 : {
       if (($5 | 0) < 0) {
        $0 = -2147483648;
        if (($6 | 0) < (-2147483648 - $5 | 0)) {
         break label$25
        }
       }
       $0 = $5 + $6 | 0;
       $0 = ($5 | 0) > 0 ? (($6 | 0) > ($5 ^ 2147483647) ? 2147483647 : $0) : $0;
      }
      SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     label$27 : {
      if (($0 | 0) > 0) {
       $3 = -2147483648;
       if (($1 | 0) < ($0 | -2147483648)) {
        break label$27
       }
      }
      $3 = $1 - $0 | 0;
      $3 = ($0 | 0) < 0 ? (($1 | 0) > ($0 + 2147483647 | 0) ? 2147483647 : $3) : $3;
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
     return;
    case 5:
     if (($1 | 0) == 43) {
      $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      $5 = SAFE_HEAP_LOAD_i32_4_4($3, 0) + $0 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, $0 >>> 0 > $5 >>> 0 ? -1 : $5);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     $1 = $0 - SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, $0 >>> 0 >= $1 >>> 0 ? $1 : 0);
     return;
    case 6:
     if (($1 | 0) == 43) {
      $6 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
      $8 = i64toi32_i32$HIGH_BITS;
      $5 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
      $0 = i64toi32_i32$HIGH_BITS;
      $9 = $0;
      label$31 : {
       if (($0 | 0) < 0) {
        $0 = 0;
        $7 = -2147483648 - ((($5 | 0) != 0) + $9 | 0) | 0;
        $10 = -2147483648;
        if ($6 >>> 0 < 0 - $5 >>> 0 & ($8 | 0) <= ($7 | 0) | ($7 | 0) > ($8 | 0)) {
         break label$31
        }
       }
       $7 = $8 + $9 | 0;
       $0 = $5 + $6 | 0;
       $7 = $0 >>> 0 < $6 >>> 0 ? $7 + 1 | 0 : $7;
       $10 = $6 >>> 0 > ($5 ^ -1) >>> 0;
       $6 = $9 ^ 2147483647;
       $6 = $10 & ($8 | 0) >= ($6 | 0) | ($6 | 0) < ($8 | 0);
       $5 = !!$5 & ($9 | 0) >= 0 | ($9 | 0) > 0;
       $0 = $5 ? ($6 ? -1 : $0) : $0;
       $10 = $5 ? ($6 ? 2147483647 : $7) : $7;
      }
      $7 = $10;
      SAFE_HEAP_STORE_i64_8_8($2, 0, $0, $7);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $1 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
     $5 = i64toi32_i32$HIGH_BITS;
     $3 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
     $0 = i64toi32_i32$HIGH_BITS;
     $6 = $0;
     label$33 : {
      if (!(!$3 & ($0 | 0) <= 0 | ($0 | 0) < 0)) {
       $0 = 0;
       $4 = $6 | -2147483648;
       $7 = -2147483648;
       if ($1 >>> 0 < $3 >>> 0 & ($5 | 0) <= ($4 | 0) | ($4 | 0) > ($5 | 0)) {
        break label$33
       }
      }
      $0 = $1 - $3 | 0;
      $4 = $5 - (($1 >>> 0 < $3 >>> 0) + $6 | 0) | 0;
      $7 = $6 + 2147483647 | 0;
      $3 = $3 - 1 | 0;
      $7 = ($3 | 0) != -1 ? $7 + 1 | 0 : $7;
      $1 = $1 >>> 0 > $3 >>> 0 & ($5 | 0) >= ($7 | 0) | ($5 | 0) > ($7 | 0);
      $3 = ($6 | 0) < 0;
      $0 = $3 ? ($1 ? -1 : $0) : $0;
      $7 = $3 ? ($1 ? 2147483647 : $4) : $4;
     }
     SAFE_HEAP_STORE_i64_8_8($2, 0, $0, $7);
     return;
    case 7:
     if (($1 | 0) == 43) {
      $0 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
      $5 = i64toi32_i32$HIGH_BITS;
      $8 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
      $6 = $8 + $0 | 0;
      $7 = i64toi32_i32$HIGH_BITS + $5 | 0;
      $7 = $6 >>> 0 < $8 >>> 0 ? $7 + 1 | 0 : $7;
      $0 = ($5 | 0) == ($7 | 0) & $0 >>> 0 > $6 >>> 0 | $5 >>> 0 > $7 >>> 0;
      SAFE_HEAP_STORE_i64_8_8($2, 0, $0 ? -1 : $6, $0 ? -1 : $7);
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     $0 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
     $1 = i64toi32_i32$HIGH_BITS;
     $4 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
     $3 = $0 - $4 | 0;
     $4 = $1 - (i64toi32_i32$HIGH_BITS + ($0 >>> 0 < $4 >>> 0) | 0) | 0;
     $0 = ($1 | 0) == ($4 | 0) & $0 >>> 0 < $3 >>> 0 | $1 >>> 0 < $4 >>> 0;
     SAFE_HEAP_STORE_i64_8_8($2, 0, $0 ? 0 : $3, $0 ? 0 : $4);
     return;
    case 8:
     if (($1 | 0) == 43) {
      SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 0) + SAFE_HEAP_LOAD_f32_4_4($4, 0)))
     }
     if (($1 | 0) != 45) {
      break label$1
     }
     SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 0) - SAFE_HEAP_LOAD_f32_4_4($4, 0)));
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   if (($1 | 0) == 43) {
    SAFE_HEAP_STORE_f64_8_8($2, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0) + SAFE_HEAP_LOAD_f64_8_8($4, 0))
   }
   if (($1 | 0) != 45) {
    break label$1
   }
   SAFE_HEAP_STORE_f64_8_8($2, 0, SAFE_HEAP_LOAD_f64_8_8($3, 0) - SAFE_HEAP_LOAD_f64_8_8($4, 0));
  }
 }
 
 function ImGui__DataTypeApplyOpFromText_28char_20const__2c_20char_20const__2c_20int_2c_20void__2c_20char_20const__29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  label$1 : {
   while (1) {
    label$2 : {
     $7 = $0;
     label$4 : {
      $10 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
      switch ($10 - 9 | 0) {
      case 33:
      case 34:
      case 38:
       break label$2;
      case 0:
      case 23:
       break label$4;
      default:
       break label$1;
      };
     }
     $0 = $0 + 1 | 0;
     continue;
    }
    break;
   };
   while (1) {
    $8 = $0;
    $7 = $0 + 1 | 0;
    $0 = $7;
    $8 = SAFE_HEAP_LOAD_i32_1_U_1($8, 1);
    if (($8 | 0) == 9) {
     continue
    }
    if (($8 | 0) == 32) {
     continue
    }
    break;
   };
   $8 = $10;
  }
  $0 = 0;
  if (SAFE_HEAP_LOAD_i32_1_U_1($7, 0)) {
   $10 = $2 << 4;
   $11 = SAFE_HEAP_LOAD_i32_4_4($10 + 48160 | 0, 0);
   __memcpy($5 + 200 | 0, $3, $11);
   $0 = $4;
   if (!$0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($10 + 48172 | 0, 0)
   }
   SAFE_HEAP_STORE_i32_4_4($5, 196, 0);
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          switch ($2 - 4 | 0) {
          case 0:
           SAFE_HEAP_STORE_i32_4_4($5, 184, SAFE_HEAP_LOAD_i32_4_4($3, 0));
           SAFE_HEAP_STORE_i32_4_4($5, 176, 0);
           label$18 : {
            label$19 : {
             if (!$8) {
              break label$19
             }
             SAFE_HEAP_STORE_i32_4_4($5, 96, $5 + 184 | 0);
             if ((sscanf($1, $0, $5 + 96 | 0) | 0) <= 0) {
              break label$12
             }
             label$20 : {
              switch ($8 - 42 | 0) {
              case 1:
               SAFE_HEAP_STORE_i32_4_4($5, 48, $5 + 196 | 0);
               if (!sscanf($7, 13404, $5 + 48 | 0)) {
                break label$13
               }
               $0 = SAFE_HEAP_LOAD_i32_4_4($5, 196) + SAFE_HEAP_LOAD_i32_4_4($5, 184) | 0;
               break label$18;
              case 0:
               SAFE_HEAP_STORE_i32_4_4($5, 64, $5 + 176 | 0);
               if (!sscanf($7, 10027, $5 - -64 | 0)) {
                break label$13
               }
               $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 176) * Math_fround(SAFE_HEAP_LOAD_i32_4_4($5, 184) | 0));
               if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
                $0 = ~~$6;
                break label$18;
               }
               $0 = -2147483648;
               break label$18;
              case 5:
               break label$20;
              default:
               break label$19;
              };
             }
             SAFE_HEAP_STORE_i32_4_4($5, 80, $5 + 176 | 0);
             if (!sscanf($7, 10027, $5 + 80 | 0)) {
              break label$13
             }
             $6 = SAFE_HEAP_LOAD_f32_4_4($5, 176);
             if ($6 == Math_fround(0.0)) {
              break label$13
             }
             $6 = Math_fround(Math_fround(SAFE_HEAP_LOAD_i32_4_4($5, 184) | 0) / $6);
             if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
              $0 = ~~$6;
              break label$18;
             }
             $0 = -2147483648;
             break label$18;
            }
            SAFE_HEAP_STORE_i32_4_4($5, 32, $5 + 196 | 0);
            if ((sscanf($7, $0, $5 + 32 | 0) | 0) != 1) {
             break label$13
            }
            $0 = SAFE_HEAP_LOAD_i32_4_4($5, 196);
           }
           SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
           break label$13;
          case 4:
           SAFE_HEAP_STORE_f32_4_4($5, 184, SAFE_HEAP_LOAD_f32_4_4($3, 0));
           SAFE_HEAP_STORE_i32_4_4($5, 176, 0);
           if ($8) {
            SAFE_HEAP_STORE_i32_4_4($5, 128, $5 + 184 | 0);
            if ((sscanf($1, 10027, $5 + 128 | 0) | 0) <= 0) {
             break label$11
            }
           }
           SAFE_HEAP_STORE_i32_4_4($5, 112, $5 + 176 | 0);
           if ((sscanf($7, 10027, $5 + 112 | 0) | 0) <= 0) {
            break label$11
           }
           label$26 : {
            label$27 : {
             switch ($8 - 42 | 0) {
             case 1:
              $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 184) + SAFE_HEAP_LOAD_f32_4_4($5, 176));
              break label$26;
             case 0:
              $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 184) * SAFE_HEAP_LOAD_f32_4_4($5, 176));
              break label$26;
             case 5:
              $6 = SAFE_HEAP_LOAD_f32_4_4($5, 176);
              if ($6 == Math_fround(0.0)) {
               break label$13
              }
              $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 184) / $6);
              break label$26;
             default:
              break label$27;
             };
            }
            $6 = SAFE_HEAP_LOAD_f32_4_4($5, 176);
           }
           SAFE_HEAP_STORE_f32_4_4($3, 0, $6);
           break label$13;
          case 5:
           SAFE_HEAP_STORE_f64_8_8($5, 184, SAFE_HEAP_LOAD_f64_8_8($3, 0));
           SAFE_HEAP_STORE_i64_8_8($5, 176, 0, 0);
           if ($8) {
            SAFE_HEAP_STORE_i32_4_4($5, 160, $5 + 184 | 0);
            if ((sscanf($1, 9627, $5 + 160 | 0) | 0) <= 0) {
             break label$10
            }
           }
           SAFE_HEAP_STORE_i32_4_4($5, 144, $5 + 176 | 0);
           if ((sscanf($7, 9627, $5 + 144 | 0) | 0) <= 0) {
            break label$10
           }
           label$32 : {
            label$33 : {
             switch ($8 - 42 | 0) {
             case 1:
              $9 = SAFE_HEAP_LOAD_f64_8_8($5, 184) + SAFE_HEAP_LOAD_f64_8_8($5, 176);
              break label$32;
             case 0:
              $9 = SAFE_HEAP_LOAD_f64_8_8($5, 184) * SAFE_HEAP_LOAD_f64_8_8($5, 176);
              break label$32;
             case 5:
              $9 = SAFE_HEAP_LOAD_f64_8_8($5, 176);
              if ($9 == 0.0) {
               break label$13
              }
              $9 = SAFE_HEAP_LOAD_f64_8_8($5, 184) / $9;
              break label$32;
             default:
              break label$33;
             };
            }
            $9 = SAFE_HEAP_LOAD_f64_8_8($5, 176);
           }
           SAFE_HEAP_STORE_f64_8_8($3, 0, $9);
           break label$13;
          default:
           break label$14;
          };
         }
         if ($2 - 5 >>> 0 <= 2) {
          SAFE_HEAP_STORE_i32_4_4($5, 0, $3);
          if ((sscanf($7, $0, $5) | 0) > 0) {
           break label$13
          }
          $0 = 0;
          break label$8;
         }
         SAFE_HEAP_STORE_i32_4_4($5, 16, $5 + 184 | 0);
         if ((sscanf($7, $0, $5 + 16 | 0) | 0) <= 0) {
          break label$9
         }
         label$38 : {
          switch ($2 | 0) {
          case 0:
           $0 = SAFE_HEAP_LOAD_i32_4_4($5, 184);
           $0 = ($0 | 0) >= 127 ? 127 : $0;
           SAFE_HEAP_STORE_i32_1_1($3, 0, ($0 | 0) <= -128 ? -128 : $0);
           break label$13;
          case 1:
           $0 = SAFE_HEAP_LOAD_i32_4_4($5, 184);
           $0 = ($0 | 0) >= 255 ? 255 : $0;
           SAFE_HEAP_STORE_i32_1_1($3, 0, ($0 | 0) > 0 ? $0 : 0);
           break label$13;
          case 2:
           $0 = SAFE_HEAP_LOAD_i32_4_4($5, 184);
           $0 = ($0 | 0) >= 32767 ? 32767 : $0;
           SAFE_HEAP_STORE_i32_2_2($3, 0, ($0 | 0) <= -32768 ? -32768 : $0);
           break label$13;
          case 3:
           break label$38;
          default:
           break label$13;
          };
         }
         $0 = SAFE_HEAP_LOAD_i32_4_4($5, 184);
         $0 = ($0 | 0) >= 65535 ? 65535 : $0;
         SAFE_HEAP_STORE_i32_2_2($3, 0, ($0 | 0) > 0 ? $0 : 0);
        }
        $0 = (memcmp($5 + 200 | 0, $3, $11) | 0) != 0;
        break label$8;
       }
       $0 = 0;
       break label$8;
      }
      $0 = 0;
      break label$8;
     }
     $0 = 0;
     break label$8;
    }
    $0 = 0;
   }
  }
  __stack_pointer = $5 + 208 | 0;
  return $0;
 }
 
 function ImGui__DataTypeCompare_28int_2c_20void_20const__2c_20void_20const__29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = Math_fround(0), $6 = 0.0, $7 = 0.0;
  label$1 : {
   switch ($0 | 0) {
   case 0:
    $0 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
    $1 = SAFE_HEAP_LOAD_i32_1_1($2, 0);
    return ($0 | 0) < ($1 | 0) ? -1 : ($0 | 0) > ($1 | 0);
   case 1:
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
    return $0 >>> 0 < $1 >>> 0 ? -1 : $0 >>> 0 > $1 >>> 0;
   case 2:
    $0 = SAFE_HEAP_LOAD_i32_2_2($1, 0);
    $1 = SAFE_HEAP_LOAD_i32_2_2($2, 0);
    return ($0 | 0) < ($1 | 0) ? -1 : ($0 | 0) > ($1 | 0);
   case 3:
    $0 = SAFE_HEAP_LOAD_i32_2_U_2($1, 0);
    $1 = SAFE_HEAP_LOAD_i32_2_U_2($2, 0);
    return $0 >>> 0 < $1 >>> 0 ? -1 : $0 >>> 0 > $1 >>> 0;
   case 4:
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    return ($0 | 0) < ($1 | 0) ? -1 : ($0 | 0) > ($1 | 0);
   case 5:
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    return $0 >>> 0 < $1 >>> 0 ? -1 : $0 >>> 0 > $1 >>> 0;
   case 6:
    $0 = SAFE_HEAP_LOAD_i64_8_8($1, 0);
    $3 = i64toi32_i32$HIGH_BITS;
    $1 = SAFE_HEAP_LOAD_i64_8_8($2, 0);
    $2 = i64toi32_i32$HIGH_BITS;
    return $0 >>> 0 < $1 >>> 0 & ($2 | 0) >= ($3 | 0) | ($2 | 0) > ($3 | 0) ? -1 : $1 >>> 0 < $0 >>> 0 & ($2 | 0) <= ($3 | 0) | ($2 | 0) < ($3 | 0);
   case 7:
    $1 = SAFE_HEAP_LOAD_i64_8_8($1, 0);
    $0 = i64toi32_i32$HIGH_BITS;
    $3 = SAFE_HEAP_LOAD_i64_8_8($2, 0);
    $2 = i64toi32_i32$HIGH_BITS;
    return ($0 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $0 >>> 0 < $2 >>> 0 ? -1 : ($2 | 0) == ($0 | 0) & $1 >>> 0 > $3 >>> 0 | $0 >>> 0 > $2 >>> 0;
   case 8:
    $4 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    return $4 < $5 ? -1 : $4 > $5;
   case 9:
    $6 = SAFE_HEAP_LOAD_f64_8_8($1, 0);
    $7 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
    $3 = $6 < $7 ? -1 : $6 > $7;
    break;
   default:
    break label$1;
   };
  }
  return $3;
 }
 
 function bool_20ImGui__DragBehaviorT_int_2c_20int_2c_20float__28int_2c_20int__2c_20float_2c_20int_2c_20int_2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0);
  $13 = __stack_pointer - 16 | 0;
  __stack_pointer = $13;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!(($2 | 0) >= ($3 | 0) | $1 != Math_fround(0.0))) {
   $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 12064) * Math_fround($3 - $2 | 0))
  }
  $14 = $5 & 32;
  $11 = $5 & 1048576;
  $6 = $11 >>> 20 | 0;
  label$3 : {
   label$4 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($7, 7188) | 0) != 1) {
     break label$4
    }
    if (!ImGui__IsMousePosValid_28ImVec2_20const__29(0)) {
     break label$4
    }
    if (!ImGui__IsMouseDragPastThreshold_28int_2c_20float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7 + 48 | 0, 0) * Math_fround(.5)))) {
     break label$4
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4(($7 + ($6 << 2) | 0) + 880 | 0, 0);
    $8 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 254 | 0, 0) ? Math_fround($8 * Math_fround(.009999999776482582)) : $8;
    $8 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 253 | 0, 0) ? Math_fround($8 * Math_fround(10.0)) : $8;
    break label$3;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($7, 7188) | 0) != 4) {
    break label$3
   }
   $9 = $13 + 8 | 0;
   ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($9, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
   $8 = SAFE_HEAP_LOAD_f32_4_4(($6 << 2) + $9 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4(48432, 0);
   $1 = $1 >= $10 ? $1 : $10;
  }
  $1 = Math_fround($8 * $1);
  $1 = $11 ? Math_fround(-$1) : $1;
  label$10 : {
   if (!$14) {
    break label$10
   }
   $6 = $3 - $2 | 0;
   if (($6 | 0) <= 0) {
    break label$10
   }
   $1 = Math_fround($1 / Math_fround($6 | 0));
  }
  $6 = SAFE_HEAP_LOAD_i32_1_U_1($7, 7148);
  $11 = ($2 | 0) >= ($3 | 0);
  $12 = 0;
  label$13 : {
   if ($11) {
    break label$13
   }
   $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if (($3 | 0) <= ($9 | 0)) {
    $12 = 1;
    if ($1 > Math_fround(0.0)) {
     break label$13
    }
   }
   $12 = ($2 | 0) >= ($9 | 0) & $1 < Math_fround(0.0);
  }
  label$15 : {
   label$16 : {
    if ($12 | $6 & 255) {
     SAFE_HEAP_STORE_i32_4_4($7, 12060, 0);
     $6 = 0;
     break label$16;
    }
    if ($1 == Math_fround(0.0)) {
     break label$15
    }
    SAFE_HEAP_STORE_f32_4_4($7, 12060, Math_fround($1 + SAFE_HEAP_LOAD_f32_4_4($7, 12060)));
    $6 = 1;
   }
   SAFE_HEAP_STORE_i32_1_1($7, 12057, $6);
  }
  $6 = 0;
  label$19 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($7, 12057)) {
    break label$19
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$21 : {
    if ($14) {
     $10 = powf(Math_fround(.10000000149011612), Math_fround(1.0));
     $8 = float_20ImGui__ScaleRatioFromValueT_int_2c_20int_2c_20float__28int_2c_20int_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29($6, $2, $3, 1, $10, Math_fround(0.0));
     $6 = int_20ImGui__ScaleValueFromRatioT_int_2c_20int_2c_20float__28int_2c_20float_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29(Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($7, 12060)), $2, $3, 1, $10, Math_fround(0.0));
     break label$21;
    }
    $8 = Math_fround(0.0);
    $10 = Math_fround(0.0);
    $15 = SAFE_HEAP_LOAD_f32_4_4($7, 12060);
    label$24 : {
     if (Math_fround(Math_abs($15)) < Math_fround(2147483648.0)) {
      $9 = ~~$15;
      break label$24;
     }
     $9 = -2147483648;
    }
    $6 = $9 + $6 | 0;
   }
   if ($5 & 64) {
    $5 = $6
   } else {
    $5 = int_20ImGui__RoundScalarWithFormatT_int_2c_20int__28char_20const__2c_20int_2c_20int_29($4, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($7, 12057, 0);
   label$28 : {
    if ($14) {
     $8 = Math_fround(float_20ImGui__ScaleRatioFromValueT_int_2c_20int_2c_20float__28int_2c_20int_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29($5, $2, $3, 1, $10, Math_fround(0.0)) - $8);
     break label$28;
    }
    $8 = Math_fround($5 - SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0);
   }
   SAFE_HEAP_STORE_f32_4_4($7, 12060, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 12060) - $8));
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$30 : {
    if ($11) {
     $2 = $5;
     break label$30;
    }
    if (($4 | 0) == ($5 | 0)) {
     $2 = $5;
     break label$30;
    }
    $2 = (!($1 < Math_fround(0.0)) | ($4 | 0) >= ($5 | 0)) & ($2 | 0) <= ($5 | 0) ? $5 : $2;
    if (($2 | 0) <= ($3 | 0) & (!($1 > Math_fround(0.0)) | ($2 | 0) >= ($4 | 0))) {
     break label$30
    }
    $2 = $3;
   }
   $6 = ($2 | 0) != ($4 | 0);
   if (($2 | 0) == ($4 | 0)) {
    break label$19
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
   $6 = 1;
  }
  $0 = $6;
  __stack_pointer = $13 + 16 | 0;
  return $0;
 }
 
 function bool_20ImGui__DragBehaviorT_unsigned_20int_2c_20int_2c_20float__28int_2c_20unsigned_20int__2c_20float_2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0);
  $17 = __stack_pointer - 16 | 0;
  __stack_pointer = $17;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!($2 >>> 0 >= $3 >>> 0 | $1 != Math_fround(0.0))) {
   $1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 12064) * Math_fround($3 - $2 >>> 0))
  }
  $13 = $5 & 1048576;
  $6 = $13 >>> 20 | 0;
  label$3 : {
   label$4 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($10, 7188) | 0) != 1) {
     break label$4
    }
    if (!ImGui__IsMousePosValid_28ImVec2_20const__29(0)) {
     break label$4
    }
    if (!ImGui__IsMouseDragPastThreshold_28int_2c_20float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 48 | 0, 0) * Math_fround(.5)))) {
     break label$4
    }
    $7 = SAFE_HEAP_LOAD_f32_4_4(($10 + ($6 << 2) | 0) + 880 | 0, 0);
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 254 | 0, 0) ? Math_fround($7 * Math_fround(.009999999776482582)) : $7;
    $7 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 253 | 0, 0) ? Math_fround($7 * Math_fround(10.0)) : $7;
    break label$3;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($10, 7188) | 0) != 4) {
    break label$3
   }
   $16 = $17 + 8 | 0;
   ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($16, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
   $7 = SAFE_HEAP_LOAD_f32_4_4(($6 << 2) + $16 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4(48432, 0);
   $1 = $1 >= $11 ? $1 : $11;
  }
  $1 = Math_fround($7 * $1);
  $1 = $13 ? Math_fround(-$1) : $1;
  $13 = ($2 | 0) == ($3 | 0);
  $16 = $5 & 32;
  $1 = $13 | !$16 ? $1 : Math_fround($1 / Math_fround($3 - $2 >>> 0));
  $6 = SAFE_HEAP_LOAD_i32_1_U_1($10, 7148);
  $18 = $2 >>> 0 >= $3 >>> 0;
  $14 = 0;
  label$13 : {
   if ($18) {
    break label$13
   }
   $15 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if ($3 >>> 0 <= $15 >>> 0) {
    $14 = 1;
    if ($1 > Math_fround(0.0)) {
     break label$13
    }
   }
   $14 = $2 >>> 0 >= $15 >>> 0 & $1 < Math_fround(0.0);
  }
  label$15 : {
   label$16 : {
    if ($14 | $6 & 255) {
     SAFE_HEAP_STORE_i32_4_4($10, 12060, 0);
     $6 = 0;
     break label$16;
    }
    if ($1 == Math_fround(0.0)) {
     break label$15
    }
    SAFE_HEAP_STORE_f32_4_4($10, 12060, Math_fround($1 + SAFE_HEAP_LOAD_f32_4_4($10, 12060)));
    $6 = 1;
   }
   SAFE_HEAP_STORE_i32_1_1($10, 12057, $6);
  }
  $6 = 0;
  label$19 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($10, 12057)) {
    break label$19
   }
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$21 : {
    label$22 : {
     if ($16) {
      $7 = powf(Math_fround(.10000000149011612), Math_fround(1.0));
      $11 = Math_fround(0.0);
      if (!$13) {
       $19 = $2 >>> 0 > $3 >>> 0;
       $15 = $19 ? $3 : $2;
       $11 = Math_fround($15 >>> 0);
       $11 = $7 > $11 ? $7 : $11;
       $14 = $2 >>> 0 < $3 >>> 0 ? $3 : $2;
       $8 = Math_fround(($6 >>> 0 < $15 >>> 0 ? $15 : $6 >>> 0 < $14 >>> 0 ? $6 : $14) >>> 0);
       $9 = Math_fround(0.0);
       label$26 : {
        if ($11 >= $8) {
         break label$26
        }
        $12 = Math_fround($14 >>> 0);
        $12 = $7 > $12 ? $7 : $12;
        $9 = Math_fround(1.0);
        if ($12 <= $8) {
         break label$26
        }
        $9 = Math_fround(logf(Math_fround($8 / $11)) / logf(Math_fround($12 / $11)));
       }
       $11 = $9;
       $11 = $19 ? Math_fround(Math_fround(1.0) - $11) : $11;
      }
      if ($13) {
       break label$22
      }
      $8 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($10, 12060));
      if ($8 <= Math_fround(0.0)) {
       break label$22
      }
      $6 = $3;
      if ($8 >= Math_fround(1.0)) {
       break label$21
      }
      $12 = Math_fround($3 >>> 0);
      $12 = $7 > $12 ? $7 : $12;
      $9 = Math_fround($2 >>> 0);
      $9 = $7 > $9 ? $7 : $9;
      $6 = $2 >>> 0 > $3 >>> 0;
      $20 = $6 ? $12 : $9;
      $8 = Math_fround($20 * powf(Math_fround(($6 ? $9 : $12) / $20), $6 ? Math_fround(Math_fround(1.0) - $8) : $8));
      if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
       $6 = ~~$8 >>> 0;
       break label$21;
      }
      $6 = 0;
      break label$21;
     }
     $11 = Math_fround(0.0);
     $7 = Math_fround(0.0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($10, 12060);
     label$29 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $15 = ~~$8;
       break label$29;
      }
      $15 = -2147483648;
     }
     $6 = $15 + $6 | 0;
     break label$21;
    }
    $6 = $2;
   }
   if ($5 & 64) {
    $5 = $6
   } else {
    $5 = int_20ImGui__RoundScalarWithFormatT_int_2c_20int__28char_20const__2c_20int_2c_20int_29($4, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($10, 12057, 0);
   label$33 : {
    if ($16) {
     if ($13) {
      $7 = Math_fround(0.0)
     } else {
      $13 = $2 >>> 0 > $3 >>> 0;
      $4 = $13 ? $3 : $2;
      $8 = Math_fround($4 >>> 0);
      $8 = $7 > $8 ? $7 : $8;
      $6 = $2 >>> 0 < $3 >>> 0 ? $3 : $2;
      $12 = Math_fround(($4 >>> 0 > $5 >>> 0 ? $4 : $5 >>> 0 < $6 >>> 0 ? $5 : $6) >>> 0);
      $9 = Math_fround(0.0);
      label$36 : {
       if ($8 >= $12) {
        break label$36
       }
       $9 = Math_fround($6 >>> 0);
       $7 = $7 > $9 ? $7 : $9;
       $9 = Math_fround(1.0);
       if ($7 <= $12) {
        break label$36
       }
       $9 = Math_fround(logf(Math_fround($12 / $8)) / logf(Math_fround($7 / $8)));
      }
      $7 = $9;
      $7 = $13 ? Math_fround(Math_fround(1.0) - $7) : $7;
     }
     $7 = Math_fround($7 - $11);
     break label$33;
    }
    $7 = Math_fround($5 - SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0);
   }
   SAFE_HEAP_STORE_f32_4_4($10, 12060, Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 12060) - $7));
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$37 : {
    if ($18) {
     $2 = $5;
     break label$37;
    }
    if (($4 | 0) == ($5 | 0)) {
     $2 = $5;
     break label$37;
    }
    $2 = (!($1 < Math_fround(0.0)) | $4 >>> 0 >= $5 >>> 0) & $2 >>> 0 <= $5 >>> 0 ? $5 : $2;
    if ($2 >>> 0 <= $3 >>> 0 & (!($1 > Math_fround(0.0)) | $2 >>> 0 >= $4 >>> 0)) {
     break label$37
    }
    $2 = $3;
   }
   $6 = ($2 | 0) != ($4 | 0);
   if (($2 | 0) == ($4 | 0)) {
    break label$19
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
   $6 = 1;
  }
  $0 = $6;
  __stack_pointer = $17 + 16 | 0;
  return $0;
 }
 
 function ImParseFormatPrecision_28char_20const__2c_20int_29($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  while (1) {
   $2 = $1;
   $1 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   label$2 : {
    if (!$1) {
     $3 = 3;
     break label$2;
    }
    label$4 : {
     if (($1 | 0) != 37) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) == 37) {
      break label$4
     }
     $2 = $0;
     $3 = 1;
     break label$2;
    }
    $3 = 0;
    $0 = ((($1 | 0) == 37) + $0 | 0) + 1 | 0;
   }
   $4 = $0;
   $1 = $2;
   if (!$3) {
    continue
   }
   break;
  };
  $0 = $2;
  label$5 : {
   switch ($3 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0 = $4;
    break;
   default:
    break label$5;
   };
  }
  if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 37) {
   return 3
  }
  while (1) {
   $1 = $0;
   $2 = $0 + 1 | 0;
   $0 = $2;
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
   if (($4 - 48 & 255) >>> 0 < 10) {
    continue
   }
   break;
  };
  $0 = 2147483647;
  if (($4 & 255) == 46) {
   $5 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) == 45;
   $0 = $5 + ($1 + 2 | 0) | 0;
   $2 = ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == 43) + $0 | 0;
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
   label$11 : {
    if (($0 - 48 & 255) >>> 0 > 9) {
     $3 = 0;
     break label$11;
    }
    $1 = 0;
    while (1) {
     $4 = $0;
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 1);
     $2 = $2 + 1 | 0;
     $1 = (($4 << 24 >> 24) + Math_imul($1, 10) | 0) - 48 | 0;
     $3 = $1;
     if (($0 - 48 & 255) >>> 0 < 10) {
      continue
     }
     break;
    };
   }
   $0 = $5 ? 0 - $3 | 0 : $3;
   $1 = $0 >>> 0 > 99 ? 3 : $0;
  } else {
   $1 = $0
  }
  $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
  $1 = ($0 | 32) == 101 ? -1 : $1;
  label$15 : {
   label$16 : {
    if (($0 | 0) != 103) {
     if (($0 | 0) != 71) {
      break label$15
     }
     if (($1 | 0) == 2147483647) {
      break label$16
     }
     break label$15;
    }
    if (($1 | 0) != 2147483647) {
     break label$15
    }
   }
   $1 = -1;
  }
  return ($1 | 0) == 2147483647 ? 3 : $1;
 }
 
 function float_20ImGui__ScaleRatioFromValueT_int_2c_20int_2c_20float__28int_2c_20int_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0;
  if (($1 | 0) != ($2 | 0)) {
   $14 = ($1 | 0) > ($2 | 0);
   $10 = $14 ? $2 : $1;
   $8 = ($1 | 0) < ($2 | 0) ? $2 : $1;
   $15 = ($0 | 0) < ($10 | 0) ? $10 : ($0 | 0) < ($8 | 0) ? $0 : $8;
   if ($3) {
    $6 = Math_fround(-$4);
    $13 = Math_fround($8 | 0);
    $9 = Math_fround(Math_abs($13)) < $4 ? (($8 | 0) < 0 ? $6 : $4) : $13;
    $12 = Math_fround($10 | 0);
    if (($8 | 0) >= 0 | $10) {
     $1 = ($10 | 0) < 0;
     $9 = $8 ? $9 : $1 ? $6 : $9;
     $6 = Math_fround(Math_abs($12)) < $4 ? ($1 ? $6 : $4) : $12;
    }
    $11 = Math_fround($15 | 0);
    label$5 : {
     if ($11 <= $6) {
      break label$5
     }
     $7 = Math_fround(1.0);
     if ($9 <= $11) {
      break label$5
     }
     if ((Math_imul($8, $10) | 0) < 0) {
      $7 = Math_fround(Math_fround(-$12) / Math_fround($13 - $12));
      if (!$0) {
       break label$5
      }
      if (($0 | 0) < 0) {
       $7 = Math_fround(Math_fround($7 - $5) * Math_fround(Math_fround(1.0) - Math_fround(logf(Math_fround(Math_fround(-$11) / $4)) / logf(Math_fround(Math_fround(-$6) / $4)))));
       break label$5;
      }
      $6 = Math_fround(logf(Math_fround($11 / $4)) / logf(Math_fround($9 / $4)));
      $4 = Math_fround($7 + $5);
      $7 = Math_fround(Math_fround($6 * Math_fround(Math_fround(1.0) - $4)) + $4);
      break label$5;
     }
     if (($8 | $10) < 0) {
      $7 = Math_fround(Math_fround(1.0) - Math_fround(logf(Math_fround($11 / $9)) / logf(Math_fround($6 / $9))));
      break label$5;
     }
     $7 = Math_fround(logf(Math_fround($11 / $6)) / logf(Math_fround($9 / $6)));
    }
    return $14 ? Math_fround(Math_fround(1.0) - $7) : $7;
   }
   $4 = Math_fround(Math_fround($15 - $1 | 0) / Math_fround($2 - $1 | 0));
  } else {
   $4 = Math_fround(0.0)
  }
  return $4;
 }
 
 function int_20ImGui__ScaleValueFromRatioT_int_2c_20int_2c_20float__28int_2c_20float_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0);
  if (($1 | 0) == ($2 | 0)) {
   return $1
  }
  folding_inner0 : {
   label$2 : {
    if ($3) {
     if ($0 <= Math_fround(0.0)) {
      return $1
     }
     if ($0 >= Math_fround(1.0)) {
      return $2
     }
     $6 = Math_fround(-$4);
     $10 = ($1 | 0) < 0;
     $7 = Math_fround($1 | 0);
     $8 = Math_fround(Math_abs($7)) < $4 ? ($10 ? $6 : $4) : $7;
     $9 = Math_fround($2 | 0);
     $11 = Math_fround(Math_abs($9)) < $4 ? (($2 | 0) < 0 ? $6 : $4) : $9;
     $3 = ($1 | 0) > ($2 | 0);
     $12 = $3 ? $8 : $11;
     $6 = $10 ? ($2 ? $12 : $6) : $12;
     $8 = $3 ? $11 : $8;
     $0 = $3 ? Math_fround(Math_fround(1.0) - $0) : $0;
     if ((Math_imul($1, $2) | 0) < 0) {
      $9 = Math_fround(Math_fround(-Math_fround((($1 | 0) < ($2 | 0) ? $1 : $2) | 0)) / Math_fround(Math_abs(Math_fround($9 - $7))));
      $7 = Math_fround($9 + $5);
      $5 = Math_fround($9 - $5);
      if ($0 >= $5) {
       $1 = 0;
       if ($0 <= $7) {
        break label$2
       }
      }
      if ($0 < $9) {
       $0 = Math_fround(Math_fround(-powf(Math_fround(Math_fround(-$8) / $4), Math_fround(Math_fround(1.0) - Math_fround($0 / $5)))) * $4);
       if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
        break folding_inner0
       }
       return -2147483648;
      }
      $0 = Math_fround(powf(Math_fround($6 / $4), Math_fround(Math_fround($0 - $7) / Math_fround(Math_fround(1.0) - $7))) * $4);
      if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
       break folding_inner0
      }
      return -2147483648;
     }
     if (($1 | $2) < 0) {
      $0 = Math_fround($6 * powf(Math_fround($8 / $6), Math_fround(Math_fround(1.0) - $0)));
      if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
       break folding_inner0
      }
      return -2147483648;
     }
     $0 = Math_fround($8 * powf(Math_fround($6 / $8), $0));
     if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
      break folding_inner0
     }
     return -2147483648;
    }
    if (!($0 < Math_fround(1.0))) {
     return $2
    }
    $0 = Math_fround((($1 | 0) > ($2 | 0) ? Math_fround(-.5) : Math_fround(.5)) + Math_fround(Math_fround($2 - $1 | 0) * $0));
    label$17 : {
     if (Math_fround(Math_abs($0)) < Math_fround(2147483648.0)) {
      $2 = ~~$0;
      break label$17;
     }
     $2 = -2147483648;
    }
    $1 = $2 + $1 | 0;
   }
   return $1;
  }
  return ~~$0;
 }
 
 function int_20ImGui__RoundScalarWithFormatT_int_2c_20int__28char_20const__2c_20int_2c_20int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $6 = __stack_pointer - 112 | 0;
  __stack_pointer = $6;
  while (1) {
   $2 = $3;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   label$2 : {
    if (!$3) {
     $4 = 3;
     break label$2;
    }
    label$4 : {
     if (($3 | 0) != 37) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) == 37) {
      break label$4
     }
     $2 = $0;
     $4 = 1;
     break label$2;
    }
    $4 = 0;
    $0 = ((($3 | 0) == 37) + $0 | 0) + 1 | 0;
   }
   $5 = $0;
   $3 = $2;
   if (!$4) {
    continue
   }
   break;
  };
  $0 = $2;
  label$5 : {
   switch ($4 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0 = $5;
    break;
   default:
    break label$5;
   };
  }
  $2 = $0;
  label$8 : {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 37) {
    break label$8
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) == 37) {
    break label$8
   }
   $5 = $2;
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
   label$11 : {
    if (($0 | 0) != 37) {
     break label$11
    }
    $3 = $2;
    while (1) {
     $4 = $0 << 24 >> 24;
     if (!(1 << $4 - 65 & 2304 | ($0 - 65 & 255) >>> 0 > 25)) {
      $5 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $4 - 97 & 38275712 | ($0 - 97 & 255) >>> 0 > 25)) {
      $5 = $3 + 1 | 0;
      break label$11;
     }
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
     $3 = $3 + 1 | 0;
     $5 = $3;
     if ($0) {
      continue
     }
     break;
    };
   }
   $4 = $6 + 80 | 0;
   if ($2 >>> 0 < $5 >>> 0) {
    $3 = $6 + 80 | 0;
    while (1) {
     $0 = $2 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        switch ($2 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($2 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      SAFE_HEAP_STORE_i32_1_1($3, 0, $2);
      $3 = $3 + 1 | 0;
     }
     $4 = $3;
     $2 = $0;
     if (($0 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($4, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
   $0 = $6 + 16 | 0;
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, 64, $6 + 80 | 0, $6);
   while (1) {
    $1 = $0;
    $0 = $0 + 1 | 0;
    $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
    if (($2 | 0) == 32) {
     continue
    }
    break;
   };
   $4 = 0;
   $5 = ($2 | 0) == 45;
   $0 = $1 + $5 | 0;
   $2 = ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == 43) + $0 | 0;
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
   if (($0 - 48 & 255) >>> 0 <= 9) {
    $3 = 0;
    while (1) {
     $1 = $0;
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 1);
     $2 = $2 + 1 | 0;
     $3 = (($1 << 24 >> 24) + Math_imul($3, 10) | 0) - 48 | 0;
     $4 = $3;
     if (($0 - 48 & 255) >>> 0 < 10) {
      continue
     }
     break;
    };
   }
   $1 = $5 ? 0 - $4 | 0 : $4;
  }
  $0 = $1;
  __stack_pointer = $6 + 112 | 0;
  return $0;
 }
 
 function float_20ImGui__ScaleRatioFromValueT_long_20long_2c_20long_20long_2c_20double__28int_2c_20long_20long_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0;
  label$1 : {
   if (($2 | 0) == ($4 | 0) & ($3 | 0) == ($5 | 0)) {
    $7 = Math_fround(0.0)
   } else {
    $20 = $2 >>> 0 > $4 >>> 0 & ($3 | 0) >= ($5 | 0) | ($3 | 0) > ($5 | 0);
    $9 = $20;
    $13 = $9 ? $4 : $2;
    $10 = $2 >>> 0 < $4 >>> 0 & ($3 | 0) <= ($5 | 0) | ($3 | 0) < ($5 | 0);
    $14 = $10 ? $4 : $2;
    $10 = $10 ? $5 : $3;
    $17 = $0 >>> 0 < $14 >>> 0 & ($10 | 0) >= ($1 | 0) | ($1 | 0) < ($10 | 0);
    $9 = $9 ? $5 : $3;
    $21 = $0 >>> 0 < $13 >>> 0 & ($1 | 0) <= ($9 | 0) | ($1 | 0) < ($9 | 0);
    $19 = $21 ? $13 : $17 ? $0 : $14;
    $17 = $21 ? $9 : $17 ? $1 : $10;
    if ($6) {
     $18 = Math_fround(-$7);
     $11 = +($14 >>> 0) + +($10 | 0) * 4294967296.0;
     $15 = +$7;
     $11 = $15 > Math_abs($11) ? +(($10 | 0) < 0 ? $18 : $7) : $11;
     if (!(($9 | $13) != 0 | ($10 | 0) >= 0)) {
      $12 = +$18;
      break label$1;
     }
     $12 = +($13 >>> 0) + +($9 | 0) * 4294967296.0;
     $12 = Math_abs($12) < $15 ? +(($9 | 0) < 0 ? $18 : $7) : $12;
     if ($10 | $14 | ($9 | 0) >= 0) {
      break label$1
     }
     $11 = +$18;
     break label$1;
    }
    $7 = Math_fround((+($19 - $2 >>> 0) + +($17 - (($2 >>> 0 > $19 >>> 0) + $3 | 0) | 0) * 4294967296.0) / (+($4 - $2 >>> 0) + +($5 - (($2 >>> 0 > $4 >>> 0) + $3 | 0) | 0) * 4294967296.0));
   }
   return $7;
  }
  $16 = +($19 >>> 0) + +($17 | 0) * 4294967296.0;
  $7 = Math_fround(0.0);
  label$7 : {
   if ($16 <= $12) {
    break label$7
   }
   $7 = Math_fround(1.0);
   if ($11 <= $16) {
    break label$7
   }
   __wasm_i64_mul($13, $9, $14, $10);
   if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
    $7 = Math_fround(+($13 >>> 0) + +($9 | 0) * 4294967296.0);
    $7 = Math_fround(Math_fround(-$7) / Math_fround(Math_fround(+($14 >>> 0) + +($10 | 0) * 4294967296.0) - $7));
    if (!($0 | $1)) {
     break label$7
    }
    if (($1 | 0) < 0) {
     $7 = Math_fround(Math_fround($7 - $8) * Math_fround(Math_fround(1.0) - Math_fround(log(-$16 / $15) / log(-$12 / $15))));
     break label$7;
    }
    $7 = Math_fround($7 + $8);
    $7 = Math_fround(Math_fround(Math_fround(log($16 / $15) / log($11 / $15)) * Math_fround(Math_fround(1.0) - $7)) + $7);
    break label$7;
   }
   if (($9 | $10) < 0) {
    $7 = Math_fround(Math_fround(1.0) - Math_fround(log($16 / $11) / log($12 / $11)));
    break label$7;
   }
   $7 = Math_fround(log($16 / $12) / log($11 / $12));
  }
  return $20 ? Math_fround(Math_fround(1.0) - $7) : $7;
 }
 
 function long_20long_20ImGui__ScaleValueFromRatioT_long_20long_2c_20long_20long_2c_20double__28int_2c_20float_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0.0, $9 = 0.0, $10 = Math_fround(0), $11 = 0.0, $12 = 0, $13 = 0.0;
  if (!(($1 | 0) != ($3 | 0) | ($2 | 0) != ($4 | 0))) {
   i64toi32_i32$HIGH_BITS = $2;
   return $1;
  }
  folding_inner1 : {
   folding_inner0 : {
    label$2 : {
     if ($5) {
      if ($0 <= Math_fround(0.0)) {
       i64toi32_i32$HIGH_BITS = $2;
       return $1;
      }
      if ($0 >= Math_fround(1.0)) {
       i64toi32_i32$HIGH_BITS = $4;
       return $3;
      }
      $10 = Math_fround(-$6);
      $12 = ($2 | 0) < 0;
      $9 = +($1 >>> 0) + +($2 | 0) * 4294967296.0;
      $8 = +$6;
      $11 = $8 > Math_abs($9) ? +($12 ? $10 : $6) : $9;
      $9 = +($3 >>> 0) + +($4 | 0) * 4294967296.0;
      $13 = $8 > Math_abs($9) ? +(($4 | 0) < 0 ? $10 : $6) : $9;
      $5 = $1 >>> 0 > $3 >>> 0 & ($2 | 0) >= ($4 | 0) | ($2 | 0) > ($4 | 0);
      $9 = $5 ? $11 : $13;
      $9 = $12 ? ($3 | $4 ? $9 : +$10) : $9;
      $11 = $5 ? $13 : $11;
      $0 = $5 ? Math_fround(Math_fround(1.0) - $0) : $0;
      __wasm_i64_mul($3, $4, $1, $2);
      if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
       $5 = $1 >>> 0 < $3 >>> 0 & ($2 | 0) <= ($4 | 0) | ($2 | 0) < ($4 | 0);
       $10 = Math_fround(Math_fround(-Math_fround(+(($5 ? $1 : $3) >>> 0) + +(($5 ? $2 : $4) | 0) * 4294967296.0)) / Math_fround(Math_abs(Math_fround(Math_fround(+($3 >>> 0) + +($4 | 0) * 4294967296.0) - Math_fround(+($1 >>> 0) + +($2 | 0) * 4294967296.0)))));
       $6 = Math_fround($10 + $7);
       $7 = Math_fround($10 - $7);
       if ($0 >= $7) {
        $1 = 0;
        $2 = 0;
        if ($0 <= $6) {
         break label$2
        }
       }
       if ($0 < $10) {
        $8 = $8 * -pow(-$11 / $8, +Math_fround(Math_fround(1.0) - Math_fround($0 / $7)));
        if (Math_abs($8) < 9223372036854775808.0) {
         break folding_inner0
        }
        break folding_inner1;
       }
       $8 = pow($9 / $8, +Math_fround(Math_fround($0 - $6) / Math_fround(Math_fround(1.0) - $6))) * $8;
       if (Math_abs($8) < 9223372036854775808.0) {
        break folding_inner0
       }
       break folding_inner1;
      }
      if (($2 | $4) < 0) {
       $8 = $9 * pow($11 / $9, +Math_fround(Math_fround(1.0) - $0));
       if (Math_abs($8) < 9223372036854775808.0) {
        break folding_inner0
       }
       break folding_inner1;
      }
      $8 = $11 * pow($9 / $11, +$0);
      if (Math_abs($8) < 9223372036854775808.0) {
       break folding_inner0
      }
      break folding_inner1;
     }
     if (!($0 < Math_fround(1.0))) {
      i64toi32_i32$HIGH_BITS = $4;
      return $3;
     }
     $5 = $1 >>> 0 > $3 >>> 0;
     $8 = ($5 & ($2 | 0) >= ($4 | 0) | ($2 | 0) > ($4 | 0) ? -.5 : .5) + +Math_fround(Math_fround(+($3 - $1 >>> 0) + +($4 - ($2 + $5 | 0) | 0) * 4294967296.0) * $0);
     label$17 : {
      if (Math_abs($8) < 9223372036854775808.0) {
       $4 = Math_abs($8) >= 1.0 ? ~~($8 > 0.0 ? Math_min(Math_floor($8 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($8 - +(~~$8 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
       $3 = ~~$8 >>> 0;
       break label$17;
      }
      $4 = -2147483648;
      $3 = 0;
     }
     $2 = $2 + $4 | 0;
     $4 = $1;
     $1 = $1 + $3 | 0;
     $2 = $4 >>> 0 > $1 >>> 0 ? $2 + 1 | 0 : $2;
    }
    i64toi32_i32$HIGH_BITS = $2;
    return $1;
   }
   i64toi32_i32$HIGH_BITS = Math_abs($8) >= 1.0 ? ~~($8 > 0.0 ? Math_min(Math_floor($8 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($8 - +(~~$8 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
   return ~~$8 >>> 0;
  }
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 
 function long_20long_20ImGui__RoundScalarWithFormatT_long_20long_2c_20long_20long__28char_20const__2c_20int_2c_20long_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $6 = __stack_pointer - 112 | 0;
  __stack_pointer = $6;
  while (1) {
   $4 = $3;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   label$2 : {
    if (!$3) {
     $3 = $0;
     $7 = 3;
     break label$2;
    }
    label$4 : {
     if (($3 | 0) != 37) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) == 37) {
      break label$4
     }
     $3 = $0;
     $4 = $0;
     $7 = 1;
     break label$2;
    }
    $3 = ((($3 | 0) == 37) + $0 | 0) + 1 | 0;
    $7 = 0;
   }
   $5 = $3;
   $0 = $3;
   $3 = $4;
   if (!$7) {
    continue
   }
   break;
  };
  $0 = $4;
  label$5 : {
   switch ($7 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0 = $5;
    break;
   default:
    break label$5;
   };
  }
  $4 = $0;
  label$8 : {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 37) {
    break label$8
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 1) | 0) == 37) {
    break label$8
   }
   $5 = $4;
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   label$11 : {
    if (($0 | 0) != 37) {
     break label$11
    }
    $3 = $4;
    while (1) {
     $5 = $0 << 24 >> 24;
     if (!(1 << $5 - 65 & 2304 | ($0 - 65 & 255) >>> 0 > 25)) {
      $5 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $5 - 97 & 38275712 | ($0 - 97 & 255) >>> 0 > 25)) {
      $5 = $3 + 1 | 0;
      break label$11;
     }
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
     $3 = $3 + 1 | 0;
     $5 = $3;
     if ($0) {
      continue
     }
     break;
    };
   }
   $3 = $6 + 80 | 0;
   if ($4 >>> 0 < $5 >>> 0) {
    $3 = $6 + 80 | 0;
    while (1) {
     $0 = $4 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $4 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
        switch ($4 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($4 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      SAFE_HEAP_STORE_i32_1_1($3, 0, $4);
      $3 = $3 + 1 | 0;
     }
     $4 = $0;
     if (($0 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($6, 0, $1, $2);
   $0 = $6 + 16 | 0;
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, 64, $6 + 80 | 0, $6);
   while (1) {
    $1 = $0;
    $0 = $0 + 1 | 0;
    $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
    if (($2 | 0) == 32) {
     continue
    }
    break;
   };
   $5 = 0;
   $4 = 0;
   $7 = ($2 | 0) == 45;
   $0 = $7 + $1 | 0;
   $3 = ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == 43) + $0 | 0;
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
   if (($0 - 48 & 255) >>> 0 <= 9) {
    $1 = 0;
    $2 = 0;
    while (1) {
     $4 = $0;
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
     $3 = $3 + 1 | 0;
     $2 = __wasm_i64_mul($1, $2, 10, 0);
     $1 = $2 + (($4 << 24 >> 24) - 48 | 0) | 0;
     $5 = $1;
     $4 = i64toi32_i32$HIGH_BITS;
     $2 = $5 >>> 0 < $2 >>> 0 ? $4 + 1 | 0 : $4;
     $4 = $2;
     if (($0 - 48 & 255) >>> 0 < 10) {
      continue
     }
     break;
    };
   }
   $2 = $7 ? 0 - ($4 + (($5 | 0) != 0) | 0) | 0 : $4;
   $1 = $7 ? 0 - $5 | 0 : $5;
  }
  __stack_pointer = $6 + 112 | 0;
  i64toi32_i32$HIGH_BITS = $2;
  return $1;
 }
 
 function float_20ImGui__ScaleRatioFromValueT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0);
  if ($1 != $2) {
   $7 = $1 < $2;
   $11 = $7 ? $1 : $2;
   $6 = $7 ? $2 : $1;
   $9 = $0 < $11 ? $11 : $0 > $6 ? $6 : $0;
   if ($3) {
    $6 = Math_fround(-$4);
    $3 = $1 > $2;
    $10 = $3 ? $1 : $2;
    $7 = $10 < Math_fround(0.0);
    $11 = Math_fround(Math_abs($10)) < $4 ? ($7 ? $6 : $4) : $10;
    $8 = $3 ? $2 : $1;
    label$3 : {
     if (!(!$7 | $8 != Math_fround(0.0))) {
      $2 = $11;
      break label$3;
     }
     $7 = $8 < Math_fround(0.0);
     $2 = $10 == Math_fround(0.0) ? ($7 ? $6 : $11) : $11;
     $6 = Math_fround(Math_abs($8)) < $4 ? ($7 ? $6 : $4) : $8;
    }
    $1 = $2;
    $2 = Math_fround(0.0);
    label$5 : {
     if ($6 >= $9) {
      break label$5
     }
     $2 = Math_fround(1.0);
     if ($1 <= $9) {
      break label$5
     }
     if (Math_fround($8 * $10) < Math_fround(0.0)) {
      $2 = Math_fround(Math_fround(-$8) / Math_fround($10 - $8));
      if ($0 == Math_fround(0.0)) {
       break label$5
      }
      if ($0 < Math_fround(0.0)) {
       $2 = Math_fround(Math_fround($2 - $5) * Math_fround(Math_fround(1.0) - Math_fround(logf(Math_fround(Math_fround(-$9) / $4)) / logf(Math_fround(Math_fround(-$6) / $4)))));
       break label$5;
      }
      $0 = Math_fround($2 + $5);
      $2 = Math_fround(Math_fround(Math_fround(logf(Math_fround($9 / $4)) / logf(Math_fround($1 / $4))) * Math_fround(Math_fround(1.0) - $0)) + $0);
      break label$5;
     }
     if ($8 < Math_fround(0.0) | $10 < Math_fround(0.0)) {
      $2 = Math_fround(Math_fround(1.0) - Math_fround(logf(Math_fround($9 / $1)) / logf(Math_fround($6 / $1))));
      break label$5;
     }
     $2 = Math_fround(logf(Math_fround($9 / $6)) / logf(Math_fround($1 / $6)));
    }
    return $3 ? Math_fround(Math_fround(1.0) - $2) : $2;
   }
   $0 = Math_fround(Math_fround($9 - $1) / Math_fround($2 - $1));
  } else {
   $0 = Math_fround(0.0)
  }
  return $0;
 }
 
 function float_20ImGui__ScaleValueFromRatioT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0);
  if ($1 == $2) {
   return $1
  }
  label$2 : {
   if ($3) {
    if ($0 <= Math_fround(0.0)) {
     return $1
    }
    if ($0 >= Math_fround(1.0)) {
     return $2
    }
    $6 = Math_fround(-$4);
    $3 = $1 < Math_fround(0.0);
    $7 = Math_fround(Math_abs($1)) < $4 ? ($3 ? $6 : $4) : $1;
    $8 = $6;
    $10 = Math_fround(Math_abs($2)) < $4 ? ($2 < Math_fround(0.0) ? $6 : $4) : $2;
    $9 = $1 > $2;
    $6 = $9 ? $7 : $10;
    $6 = $3 ? ($2 == Math_fround(0.0) ? $8 : $6) : $6;
    $7 = $9 ? $10 : $7;
    $0 = $9 ? Math_fround(Math_fround(1.0) - $0) : $0;
    if (Math_fround($1 * $2) < Math_fround(0.0)) {
     $2 = Math_fround(Math_fround(-($1 < $2 ? $1 : $2)) / Math_fround(Math_abs(Math_fround($2 - $1))));
     $1 = Math_fround($2 + $5);
     $5 = Math_fround($2 - $5);
     if ($0 >= $5) {
      $8 = Math_fround(0.0);
      if ($0 <= $1) {
       break label$2
      }
     }
     if ($0 < $2) {
      return Math_fround(Math_fround(-powf(Math_fround(Math_fround(-$7) / $4), Math_fround(Math_fround(1.0) - Math_fround($0 / $5)))) * $4)
     }
     return Math_fround(powf(Math_fround($6 / $4), Math_fround(Math_fround($0 - $1) / Math_fround(Math_fround(1.0) - $1))) * $4);
    }
    if ($3 | $2 < Math_fround(0.0)) {
     return Math_fround($6 * powf(Math_fround($7 / $6), Math_fround(Math_fround(1.0) - $0)))
    }
    return Math_fround($7 * powf(Math_fround($6 / $7), $0));
   }
   $8 = Math_fround(Math_fround(Math_fround($2 - $1) * $0) + $1);
  }
  return $8;
 }
 
 function float_20ImGui__RoundScalarWithFormatT_float_2c_20float__28char_20const__2c_20int_2c_20float_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  while (1) {
   $2 = $3;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   label$2 : {
    if (!$3) {
     $4 = 3;
     break label$2;
    }
    label$4 : {
     if (($3 | 0) != 37) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) == 37) {
      break label$4
     }
     $2 = $0;
     $4 = 1;
     break label$2;
    }
    $4 = 0;
    $0 = ((($3 | 0) == 37) + $0 | 0) + 1 | 0;
   }
   $6 = $0;
   $3 = $2;
   if (!$4) {
    continue
   }
   break;
  };
  $0 = $2;
  label$5 : {
   switch ($4 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0 = $6;
    break;
   default:
    break label$5;
   };
  }
  $2 = $0;
  label$8 : {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 37) {
    break label$8
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) == 37) {
    break label$8
   }
   $6 = $2;
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
   label$11 : {
    if (($0 | 0) != 37) {
     break label$11
    }
    $3 = $2;
    while (1) {
     $4 = $0 << 24 >> 24;
     if (!(1 << $4 - 65 & 2304 | ($0 - 65 & 255) >>> 0 > 25)) {
      $6 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $4 - 97 & 38275712 | ($0 - 97 & 255) >>> 0 > 25)) {
      $6 = $3 + 1 | 0;
      break label$11;
     }
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
     $3 = $3 + 1 | 0;
     $6 = $3;
     if ($0) {
      continue
     }
     break;
    };
   }
   $4 = $5 + 80 | 0;
   if ($2 >>> 0 < $6 >>> 0) {
    $3 = $5 + 80 | 0;
    while (1) {
     $0 = $2 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        switch ($2 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($2 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      SAFE_HEAP_STORE_i32_1_1($3, 0, $2);
      $3 = $3 + 1 | 0;
     }
     $4 = $3;
     $2 = $0;
     if (($0 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($4, 0, 0);
   SAFE_HEAP_STORE_f64_8_8($5, 0, +$1);
   $0 = $5 + 16 | 0;
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, 64, $5 + 80 | 0, $5);
   while (1) {
    $2 = $0;
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) == 32) {
     continue
    }
    break;
   };
   $1 = Math_fround(strtod($2));
  }
  __stack_pointer = $5 + 112 | 0;
  return $1;
 }
 
 function float_20ImGui__ScaleRatioFromValueT_double_2c_20double_2c_20double__28int_2c_20double_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0, $11 = Math_fround(0);
  label$2 : {
   label$3 : {
    if ($1 != $2) {
     $8 = $1 < $2;
     $6 = $8 ? $1 : $2;
     $7 = $8 ? $2 : $1;
     $6 = $0 < $6 ? $6 : $0 > $7 ? $7 : $0;
     if ($3) {
      $11 = Math_fround(-$4);
      $3 = $1 > $2;
      $7 = $3 ? $1 : $2;
      $8 = $7 < 0.0;
      $9 = +$4;
      $10 = $9 > Math_abs($7) ? +($8 ? $11 : $4) : $7;
      $2 = $3 ? $2 : $1;
      if (!(!$8 | $2 != 0.0)) {
       $1 = +$11;
       break label$2;
      }
      $8 = $2 < 0.0;
      $1 = Math_abs($2) < $9 ? +($8 ? $11 : $4) : $2;
      if (!$8 | $7 != 0.0) {
       break label$3
      }
      $10 = +$11;
      break label$2;
     }
     $4 = Math_fround(($6 - $1) / ($2 - $1));
    } else {
     $4 = Math_fround(0.0)
    }
    return $4;
   }
  }
  $4 = Math_fround(0.0);
  label$7 : {
   if ($1 >= $6) {
    break label$7
   }
   $4 = Math_fround(1.0);
   if ($6 >= $10) {
    break label$7
   }
   if ($2 * $7 < 0.0) {
    $4 = Math_fround($2);
    $4 = Math_fround(Math_fround(-$4) / Math_fround(Math_fround($7) - $4));
    if ($0 == 0.0) {
     break label$7
    }
    if ($0 < 0.0) {
     $4 = Math_fround(Math_fround($4 - $5) * Math_fround(Math_fround(1.0) - Math_fround(log(-$6 / $9) / log(-$1 / $9))));
     break label$7;
    }
    $4 = Math_fround($4 + $5);
    $4 = Math_fround(Math_fround(Math_fround(log($6 / $9) / log($10 / $9)) * Math_fround(Math_fround(1.0) - $4)) + $4);
    break label$7;
   }
   if ($2 < 0.0 | $7 < 0.0) {
    $4 = Math_fround(Math_fround(1.0) - Math_fround(log($6 / $10) / log($1 / $10)));
    break label$7;
   }
   $4 = Math_fround(log($6 / $1) / log($10 / $1));
  }
  return $3 ? Math_fround(Math_fround(1.0) - $4) : $4;
 }
 
 function double_20ImGui__ScaleValueFromRatioT_double_2c_20double_2c_20double__28int_2c_20float_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29($0, $1, $2, $3, $4, $5) {
  var $6 = Math_fround(0), $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0.0;
  if ($1 == $2) {
   return $1
  }
  label$2 : {
   if ($3) {
    if ($0 <= Math_fround(0.0)) {
     return $1
    }
    if ($0 >= Math_fround(1.0)) {
     return $2
    }
    $6 = Math_fround(-$4);
    $3 = $1 < 0.0;
    $9 = +$4;
    $7 = $9 > Math_abs($1) ? +($3 ? $6 : $4) : $1;
    $11 = Math_abs($2) < $9 ? +($2 < 0.0 ? $6 : $4) : $2;
    $10 = $1 > $2;
    $8 = $10 ? $7 : $11;
    $8 = $3 ? ($2 == 0.0 ? +$6 : $8) : $8;
    $7 = $10 ? $11 : $7;
    $0 = $10 ? Math_fround(Math_fround(1.0) - $0) : $0;
    if ($1 * $2 < 0.0) {
     $6 = Math_fround(Math_fround(-Math_fround($1 < $2 ? $1 : $2)) / Math_fround(Math_abs(Math_fround(Math_fround($2) - Math_fround($1)))));
     $4 = Math_fround($6 + $5);
     $5 = Math_fround($6 - $5);
     if ($0 >= $5) {
      $1 = 0.0;
      if ($0 <= $4) {
       break label$2
      }
     }
     if ($0 < $6) {
      return $9 * -pow(-$7 / $9, +Math_fround(Math_fround(1.0) - Math_fround($0 / $5)))
     }
     return pow($8 / $9, +Math_fround(Math_fround($0 - $4) / Math_fround(Math_fround(1.0) - $4))) * $9;
    }
    if ($3 | $2 < 0.0) {
     return $8 * pow($7 / $8, +Math_fround(Math_fround(1.0) - $0))
    }
    return $7 * pow($8 / $7, +$0);
   }
   $1 = ($2 - $1) * +$0 + $1;
  }
  return $1;
 }
 
 function double_20ImGui__RoundScalarWithFormatT_double_2c_20double__28char_20const__2c_20int_2c_20double_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 112 | 0;
  __stack_pointer = $5;
  while (1) {
   $2 = $3;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   label$2 : {
    if (!$3) {
     $4 = 3;
     break label$2;
    }
    label$4 : {
     if (($3 | 0) != 37) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 1) | 0) == 37) {
      break label$4
     }
     $2 = $0;
     $4 = 1;
     break label$2;
    }
    $4 = 0;
    $0 = ((($3 | 0) == 37) + $0 | 0) + 1 | 0;
   }
   $6 = $0;
   $3 = $2;
   if (!$4) {
    continue
   }
   break;
  };
  $0 = $2;
  label$5 : {
   switch ($4 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0 = $6;
    break;
   default:
    break label$5;
   };
  }
  $2 = $0;
  label$8 : {
   if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 37) {
    break label$8
   }
   if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) == 37) {
    break label$8
   }
   $6 = $2;
   $0 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
   label$11 : {
    if (($0 | 0) != 37) {
     break label$11
    }
    $3 = $2;
    while (1) {
     $4 = $0 << 24 >> 24;
     if (!(1 << $4 - 65 & 2304 | ($0 - 65 & 255) >>> 0 > 25)) {
      $6 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $4 - 97 & 38275712 | ($0 - 97 & 255) >>> 0 > 25)) {
      $6 = $3 + 1 | 0;
      break label$11;
     }
     $0 = SAFE_HEAP_LOAD_i32_1_U_1($3, 1);
     $3 = $3 + 1 | 0;
     $6 = $3;
     if ($0) {
      continue
     }
     break;
    };
   }
   $4 = $5 + 80 | 0;
   if ($2 >>> 0 < $6 >>> 0) {
    $3 = $5 + 80 | 0;
    while (1) {
     $0 = $2 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        switch ($2 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($2 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      SAFE_HEAP_STORE_i32_1_1($3, 0, $2);
      $3 = $3 + 1 | 0;
     }
     $4 = $3;
     $2 = $0;
     if (($0 | 0) != ($6 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_1_1($4, 0, 0);
   SAFE_HEAP_STORE_f64_8_8($5, 0, $1);
   $0 = $5 + 16 | 0;
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($0, 64, $5 + 80 | 0, $5);
   while (1) {
    $2 = $0;
    $0 = $0 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) == 32) {
     continue
    }
    break;
   };
   $1 = strtod($2);
  }
  __stack_pointer = $5 + 112 | 0;
  return $1;
 }
 
 function ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = Math_fround(0), $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0;
  $16 = __stack_pointer - 176 | 0;
  __stack_pointer = $16;
  $21 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $10 = SAFE_HEAP_LOAD_i32_4_4($21, 7080);
  SAFE_HEAP_STORE_i32_1_1($10, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($10, 143)) {
   $26 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($10, $0);
   $13 = ImGui__CalcItemWidth_28_29();
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($16 + 168 | 0, $0, 0, 1, Math_fround(-1.0));
   $23 = SAFE_HEAP_LOAD_f32_4_4($10, 208);
   $9 = SAFE_HEAP_LOAD_i64_8_4($10, 208);
   $22 = i64toi32_i32$HIGH_BITS;
   $17 = $16 + 164 | 0;
   $8 = SAFE_HEAP_LOAD_f32_4_4($21 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($17, 0, Math_fround(Math_fround(Math_fround($8 + $8) + SAFE_HEAP_LOAD_f32_4_4($16, 172)) + SAFE_HEAP_LOAD_f32_4_4($10 + 212 | 0, 0)));
   SAFE_HEAP_STORE_i64_8_8($16, 152, $9, $22);
   SAFE_HEAP_STORE_f32_4_4($16, 160, Math_fround($13 + $23));
   $13 = Math_fround(0.0);
   $23 = SAFE_HEAP_LOAD_f32_4_4($16, 168);
   if ($23 > Math_fround(0.0)) {
    $13 = Math_fround($23 + SAFE_HEAP_LOAD_f32_4_4($21 + 5500 | 0, 0))
   }
   $11 = $16 + 136 | 0;
   SAFE_HEAP_STORE_f32_4_4($11 + 12 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($17, 0) + Math_fround(0.0)));
   SAFE_HEAP_STORE_i64_8_8($16, 136, $9, $22);
   SAFE_HEAP_STORE_f32_4_4($16, 144, Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($16, 160)));
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($11, $8);
   $9 = 0;
   $14 = $11;
   $11 = $7 & 128;
   label$3 : {
    if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($14, $26, $16 + 152 | 0, $11 << 1 ^ 256)) {
     break label$3
    }
    label$4 : {
     if (!$6) {
      $6 = SAFE_HEAP_LOAD_i32_4_4(($1 << 4) + 48168 | 0, 0);
      break label$4;
     }
     label$6 : {
      if (($1 | 0) != 4) {
       break label$6
      }
      if (!strcmp($6, 13404)) {
       break label$6
      }
      label$7 : {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 0) | 0) != 37) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 1) | 0) != 46) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 2) | 0) != 48) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 3) | 0) != 102) {
        break label$7
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($6, 4)) {
        break label$7
       }
       $6 = 13404;
       break label$4;
      }
      $9 = $6;
      while (1) {
       label$9 : {
        label$10 : {
         $22 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0);
         if (!$22) {
          break label$10
         }
         if (($22 | 0) == 37) {
          if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 1) | 0) != 37) {
           break label$10
          }
         }
         $9 = ((($22 | 0) == 37) + $9 | 0) + 1 | 0;
         $14 = 1;
         break label$9;
        }
        $14 = 0;
       }
       if ($14) {
        continue
       }
       break;
      };
     }
    }
    $22 = $6;
    $17 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($16 + 152 | 0, $26);
    label$13 : {
     label$14 : {
      $9 = 0;
      label$12 : {
       if ($11) {
        break label$12
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $9 = 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 7136) | 0) != ($26 | 0)) {
        break label$12
       }
       $9 = (SAFE_HEAP_LOAD_i32_4_4($6, 11968) | 0) == ($26 | 0);
      }
      if ($9) {
       break label$14
      }
      $6 = 0;
      label$19 : {
       label$20 : {
        if ($11) {
         $14 = 0
        } else {
         $14 = SAFE_HEAP_LOAD_i32_1_U_1($21 + 7249 | 0, 0) & 1
        }
        if ($17) {
         $19 = (SAFE_HEAP_LOAD_i32_1_U_1($21 + 992 | 0, 0) | 0) != 0
        } else {
         $19 = 0
        }
        $15 = $14 | $19;
        if ($17) {
         $6 = (SAFE_HEAP_LOAD_i32_2_U_2($21 + 1002 | 0, 0) | 0) == 2
        }
        if ($15 | $6) {
         break label$20
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($21, 7520) | 0) == ($26 | 0)) {
         break label$20
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($21, 7532) | 0) == ($26 | 0)) {
         break label$20
        }
        break label$19;
       }
       ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($26, $10);
       ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($26, $10);
       ImGui__FocusWindow_28ImGuiWindow__29($10);
       SAFE_HEAP_STORE_i32_4_4($21, 7156, 3);
       if ($11) {
        break label$19
       }
       label$22 : {
        if ($14) {
         break label$22
        }
        label$23 : {
         if ($19) {
          if (!((SAFE_HEAP_LOAD_i32_1_U_1($21 + 252 | 0, 0) | 0) != 0 | $6)) {
           break label$23
          }
          break label$22;
         }
         if ($6) {
          break label$22
         }
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($21, 7532) | 0) != ($26 | 0)) {
         break label$19
        }
       }
       $9 = 1;
      }
      if ($9 | $11) {
       break label$14
      }
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($21 + 179 | 0, 0) & 255)) {
       break label$14
      }
      if ($17 ^ 1 | (SAFE_HEAP_LOAD_i32_4_4($21, 7136) | 0) != ($26 | 0)) {
       break label$14
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($21 + 1022 | 0, 0)) {
       break label$14
      }
      if (ImGui__IsMouseDragPastThreshold_28int_2c_20float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4($21 + 48 | 0, 0) * Math_fround(.5)))) {
       break label$14
      }
      SAFE_HEAP_STORE_i32_4_4($21, 7536, 1);
      SAFE_HEAP_STORE_i32_4_4($21, 7520, $26);
      SAFE_HEAP_STORE_i32_4_4($21, 7532, $26);
      break label$13;
     }
     if ($9) {
      break label$13
     }
     $6 = ImGui__GetColorU32_28int_2c_20float_29((SAFE_HEAP_LOAD_i32_4_4($21, 7136) | 0) == ($26 | 0) ? 9 : $17 ? 8 : 7, Math_fround(1.0));
     ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($16 + 152 | 0, $26, 1);
     $9 = SAFE_HEAP_LOAD_i64_8_8($16, 152);
     $10 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($16, 128, $9, $10);
     $11 = SAFE_HEAP_LOAD_i64_8_8($16, 160);
     $17 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($16, 120, $11, $17);
     $8 = SAFE_HEAP_LOAD_f32_4_4($21 + 5484 | 0, 0);
     SAFE_HEAP_STORE_i64_8_8($16, 24, $9, $10);
     SAFE_HEAP_STORE_i64_8_8($16, 16, $11, $17);
     ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($16 + 24 | 0, $16 + 16 | 0, $6, 1, $8);
     $6 = $4;
     $11 = $7;
     $8 = Math_fround(0.0);
     $13 = Math_fround(0.0);
     $28 = __stack_pointer - 16 | 0;
     __stack_pointer = $28;
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     label$1 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 7136) | 0) != ($26 | 0)) {
       break label$1
      }
      label$2 : {
       label$30 : {
        label$41 : {
         $7 = SAFE_HEAP_LOAD_i32_4_4($4, 7188);
         switch ($7 - 1 | 0) {
         case 3:
          break label$30;
         case 0:
          break label$41;
         default:
          break label$1;
         };
        }
        if (!SAFE_HEAP_LOAD_i32_1_U_1($4 + 236 | 0, 0)) {
         break label$2
        }
        if (($7 | 0) != 4) {
         break label$1
        }
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($4, 7528) | 0) != ($26 | 0)) {
        break label$1
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($4, 7148)) {
        break label$1
       }
      }
      ImGui__ClearActiveID_28_29();
     }
     label$5 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 7136) | 0) != ($26 | 0)) {
       $4 = 0;
       break label$5;
      }
      if (SAFE_HEAP_LOAD_i32_4_4($4 + 7244 | 0, 0) & 128 | $11 & 2097152) {
       $4 = 0;
       break label$5;
      }
      $4 = 0;
      label$82 : {
       switch ($1 | 0) {
       case 0:
        SAFE_HEAP_STORE_i32_4_4($28, 12, SAFE_HEAP_LOAD_i32_1_1($2, 0));
        $7 = $28 + 12 | 0;
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i32_1_1($6, 0)
        } else {
         $4 = -128
        }
        if ($5) {
         $5 = SAFE_HEAP_LOAD_i32_1_1($5, 0)
        } else {
         $5 = 127
        }
        $4 = bool_20ImGui__DragBehaviorT_int_2c_20int_2c_20float__28int_2c_20int__2c_20float_2c_20int_2c_20int_2c_20char_20const__2c_20int_29($7, $3, $4, $5, $22, $11);
        if ($4) {
         SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_4_4($28, 12))
        }
        break label$5;
       case 1:
        SAFE_HEAP_STORE_i32_4_4($28, 12, SAFE_HEAP_LOAD_i32_1_U_1($2, 0));
        $7 = $28 + 12 | 0;
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0)
        } else {
         $4 = 0
        }
        if ($5) {
         $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0)
        } else {
         $5 = 255
        }
        $4 = bool_20ImGui__DragBehaviorT_unsigned_20int_2c_20int_2c_20float__28int_2c_20unsigned_20int__2c_20float_2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_29($7, $3, $4, $5, $22, $11);
        if ($4) {
         SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_4_4($28, 12))
        }
        break label$5;
       case 2:
        SAFE_HEAP_STORE_i32_4_4($28, 12, SAFE_HEAP_LOAD_i32_2_2($2, 0));
        $7 = $28 + 12 | 0;
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i32_2_2($6, 0)
        } else {
         $4 = -32768
        }
        if ($5) {
         $5 = SAFE_HEAP_LOAD_i32_2_2($5, 0)
        } else {
         $5 = 32767
        }
        $4 = bool_20ImGui__DragBehaviorT_int_2c_20int_2c_20float__28int_2c_20int__2c_20float_2c_20int_2c_20int_2c_20char_20const__2c_20int_29($7, $3, $4, $5, $22, $11);
        if ($4) {
         SAFE_HEAP_STORE_i32_2_2($2, 0, SAFE_HEAP_LOAD_i32_4_4($28, 12))
        }
        break label$5;
       case 3:
        SAFE_HEAP_STORE_i32_4_4($28, 12, SAFE_HEAP_LOAD_i32_2_U_2($2, 0));
        $7 = $28 + 12 | 0;
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i32_2_U_2($6, 0)
        } else {
         $4 = 0
        }
        if ($5) {
         $5 = SAFE_HEAP_LOAD_i32_2_U_2($5, 0)
        } else {
         $5 = 65535
        }
        $4 = bool_20ImGui__DragBehaviorT_unsigned_20int_2c_20int_2c_20float__28int_2c_20unsigned_20int__2c_20float_2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_29($7, $3, $4, $5, $22, $11);
        if ($4) {
         SAFE_HEAP_STORE_i32_2_2($2, 0, SAFE_HEAP_LOAD_i32_4_4($28, 12))
        }
        break label$5;
       case 4:
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i32_4_4($6, 0)
        } else {
         $4 = -2147483648
        }
        if ($5) {
         $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0)
        } else {
         $5 = 2147483647
        }
        $4 = bool_20ImGui__DragBehaviorT_int_2c_20int_2c_20float__28int_2c_20int__2c_20float_2c_20int_2c_20int_2c_20char_20const__2c_20int_29($2, $3, $4, $5, $22, $11);
        break label$5;
       case 5:
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i32_4_4($6, 0)
        } else {
         $4 = 0
        }
        if ($5) {
         $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0)
        } else {
         $5 = -1
        }
        $4 = bool_20ImGui__DragBehaviorT_unsigned_20int_2c_20int_2c_20float__28int_2c_20unsigned_20int__2c_20float_2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_29($2, $3, $4, $5, $22, $11);
        break label$5;
       case 6:
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i64_8_8($6, 0);
         $9 = i64toi32_i32$HIGH_BITS;
        } else {
         $9 = -2147483648
        }
        $6 = $4;
        label$48 : {
         if (!$5) {
          $4 = -1;
          $10 = 2147483647;
          break label$48;
         }
         $4 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
         $10 = i64toi32_i32$HIGH_BITS;
        }
        $25 = __stack_pointer - 16 | 0;
        __stack_pointer = $25;
        $14 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        $7 = $4;
        if (!($4 >>> 0 <= $6 >>> 0 & ($9 | 0) >= ($10 | 0) | ($9 | 0) > ($10 | 0) | $3 != Math_fround(0.0))) {
         $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($14, 12064) * Math_fround(+($7 - $6 >>> 0) + +($10 - (($6 >>> 0 > $7 >>> 0) + $9 | 0) | 0) * 4294967296.0))
        }
        $17 = $2;
        $19 = $11 & 32;
        $5 = $11 & 1048576;
        $4 = $5 >>> 20 | 0;
        label$308 : {
         label$419 : {
          if ((SAFE_HEAP_LOAD_i32_4_4($14, 7188) | 0) != 1) {
           break label$419
          }
          if (!ImGui__IsMousePosValid_28ImVec2_20const__29(0)) {
           break label$419
          }
          if (!ImGui__IsMouseDragPastThreshold_28int_2c_20float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4($14 + 48 | 0, 0) * Math_fround(.5)))) {
           break label$419
          }
          $8 = SAFE_HEAP_LOAD_f32_4_4(($14 + ($4 << 2) | 0) + 880 | 0, 0);
          $8 = SAFE_HEAP_LOAD_i32_1_U_1($14 + 254 | 0, 0) ? Math_fround($8 * Math_fround(.009999999776482582)) : $8;
          $8 = SAFE_HEAP_LOAD_i32_1_U_1($14 + 253 | 0, 0) ? Math_fround($8 * Math_fround(10.0)) : $8;
          break label$308;
         }
         if ((SAFE_HEAP_LOAD_i32_4_4($14, 7188) | 0) != 4) {
          break label$308
         }
         $27 = $25 + 8 | 0;
         ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($27, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
         $8 = SAFE_HEAP_LOAD_f32_4_4(($4 << 2) + $27 | 0, 0);
         $13 = SAFE_HEAP_LOAD_f32_4_4(48432, 0);
         $3 = $3 >= $13 ? $3 : $13;
        }
        $3 = Math_fround($8 * $3);
        $3 = $5 ? Math_fround(-$3) : $3;
        label$102 : {
         if (!$19) {
          break label$102
         }
         $5 = $7 - $6 | 0;
         $4 = $10 - (($6 >>> 0 > $7 >>> 0) + $9 | 0) | 0;
         if (!(!!$5 & ($4 | 0) >= 0 | ($4 | 0) > 0)) {
          break label$102
         }
         $3 = Math_fround($3 / Math_fround(+($5 >>> 0) + +($4 | 0) * 4294967296.0));
        }
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($14, 7148);
        $30 = ($9 | 0) >= ($10 | 0) & $6 >>> 0 >= $7 >>> 0 | ($9 | 0) > ($10 | 0);
        $15 = 0;
        label$135 : {
         if ($30) {
          break label$135
         }
         $27 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
         $4 = i64toi32_i32$HIGH_BITS;
         if (!($7 >>> 0 > $27 >>> 0 & ($10 | 0) >= ($4 | 0) | ($4 | 0) < ($10 | 0))) {
          $15 = 1;
          if ($3 > Math_fround(0.0)) {
           break label$135
          }
         }
         $15 = (($4 | 0) <= ($9 | 0) & $6 >>> 0 >= $27 >>> 0 | ($4 | 0) < ($9 | 0)) & $3 < Math_fround(0.0);
        }
        label$153 : {
         label$164 : {
          if ($15 | $5 & 255) {
           SAFE_HEAP_STORE_i32_4_4($14, 12060, 0);
           $4 = 0;
           break label$164;
          }
          if ($3 == Math_fround(0.0)) {
           break label$153
          }
          SAFE_HEAP_STORE_f32_4_4($14, 12060, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($14, 12060)));
          $4 = 1;
         }
         SAFE_HEAP_STORE_i32_1_1($14, 12057, $4);
        }
        $15 = 0;
        label$1910 : {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($14, 12057)) {
          break label$1910
         }
         $5 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
         $27 = i64toi32_i32$HIGH_BITS;
         label$21 : {
          if ($19) {
           $8 = powf(Math_fround(.10000000149011612), Math_fround(1.0));
           $13 = float_20ImGui__ScaleRatioFromValueT_long_20long_2c_20long_20long_2c_20double__28int_2c_20long_20long_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29($5, $27, $6, $9, $7, $10, 1, $8, Math_fround(0.0));
           $12 = +$13;
           $5 = long_20long_20ImGui__ScaleValueFromRatioT_long_20long_2c_20long_20long_2c_20double__28int_2c_20float_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29(Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($14, 12060)), $6, $9, $7, $10, 1, $8, Math_fround(0.0));
           $4 = i64toi32_i32$HIGH_BITS;
           break label$21;
          }
          $8 = SAFE_HEAP_LOAD_f32_4_4($14, 12060);
          label$24 : {
           if (Math_fround(Math_abs($8)) < Math_fround(9223372036854775808.0)) {
            $4 = Math_fround(Math_abs($8)) >= Math_fround(1.0) ? ~~($8 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($8 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($8 - Math_fround(~~$8 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
            $15 = ~~$8 >>> 0;
            break label$24;
           }
           $4 = -2147483648;
           $15 = 0;
          }
          $8 = Math_fround(0.0);
          $4 = $4 + $27 | 0;
          $5 = $5 + $15 | 0;
          $4 = $15 >>> 0 > $5 >>> 0 ? $4 + 1 | 0 : $4;
         }
         if (!($11 & 64)) {
          $5 = long_20long_20ImGui__RoundScalarWithFormatT_long_20long_2c_20long_20long__28char_20const__2c_20int_2c_20long_20long_29($22, $5, $4);
          $4 = i64toi32_i32$HIGH_BITS;
         }
         SAFE_HEAP_STORE_i32_1_1($14, 12057, 0);
         label$28 : {
          if ($19) {
           $8 = Math_fround(+float_20ImGui__ScaleRatioFromValueT_long_20long_2c_20long_20long_2c_20double__28int_2c_20long_20long_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29($5, $4, $6, $9, $7, $10, 1, $8, Math_fround(0.0)) - $12);
           break label$28;
          }
          $11 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
          $8 = Math_fround(+($5 - $11 >>> 0) + +($4 - (i64toi32_i32$HIGH_BITS + ($5 >>> 0 < $11 >>> 0) | 0) | 0) * 4294967296.0);
         }
         SAFE_HEAP_STORE_f32_4_4($14, 12060, Math_fround(SAFE_HEAP_LOAD_f32_4_4($14, 12060) - $8));
         $14 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
         $11 = i64toi32_i32$HIGH_BITS;
         label$306 : {
          if (!(($14 | 0) != ($5 | 0) | ($11 | 0) != ($4 | 0)) | $30) {
           break label$306
          }
          if (!(!($5 >>> 0 < $6 >>> 0 & ($4 | 0) <= ($9 | 0) | ($4 | 0) < ($9 | 0)) & (!($5 >>> 0 > $14 >>> 0 & ($4 | 0) >= ($11 | 0) | ($4 | 0) > ($11 | 0)) | !($3 < Math_fround(0.0))))) {
           $5 = $6;
           $4 = $9;
          }
          if (!($5 >>> 0 > $7 >>> 0 & ($4 | 0) >= ($10 | 0) | ($4 | 0) > ($10 | 0)) & (!($5 >>> 0 < $14 >>> 0 & ($4 | 0) <= ($11 | 0) | ($4 | 0) < ($11 | 0)) | !($3 > Math_fround(0.0)))) {
           break label$306
          }
          $5 = $7;
          $4 = $10;
         }
         $6 = ($5 | 0) != ($14 | 0) | ($4 | 0) != ($11 | 0);
         $15 = $6;
         if (!$6) {
          break label$1910
         }
         SAFE_HEAP_STORE_i64_8_8($17, 0, $5, $4);
         $15 = 1;
        }
        $4 = $15;
        __stack_pointer = $25 + 16 | 0;
        break label$5;
       case 7:
        if ($6) {
         $4 = SAFE_HEAP_LOAD_i64_8_8($6, 0);
         $7 = i64toi32_i32$HIGH_BITS;
        } else {
         $7 = 0
        }
        $9 = $4;
        label$52 : {
         if (!$5) {
          $4 = -1;
          $6 = -1;
          break label$52;
         }
         $4 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
         $6 = i64toi32_i32$HIGH_BITS;
        }
        $30 = __stack_pointer - 16 | 0;
        __stack_pointer = $30;
        $19 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        $10 = $4;
        if (!(($6 | 0) == ($7 | 0) & $4 >>> 0 <= $9 >>> 0 | $6 >>> 0 < $7 >>> 0 | $3 != Math_fround(0.0))) {
         $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 12064) * Math_fround(+($10 - $9 >>> 0) + +($6 - (($9 >>> 0 > $10 >>> 0) + $7 | 0) >>> 0) * 4294967296.0))
        }
        $17 = $2;
        $14 = $22;
        $5 = $11 & 1048576;
        $4 = $5 >>> 20 | 0;
        label$31 : {
         label$42 : {
          if ((SAFE_HEAP_LOAD_i32_4_4($19, 7188) | 0) != 1) {
           break label$42
          }
          if (!ImGui__IsMousePosValid_28ImVec2_20const__29(0)) {
           break label$42
          }
          if (!ImGui__IsMouseDragPastThreshold_28int_2c_20float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4($19 + 48 | 0, 0) * Math_fround(.5)))) {
           break label$42
          }
          $8 = SAFE_HEAP_LOAD_f32_4_4(($19 + ($4 << 2) | 0) + 880 | 0, 0);
          $8 = SAFE_HEAP_LOAD_i32_1_U_1($19 + 254 | 0, 0) ? Math_fround($8 * Math_fround(.009999999776482582)) : $8;
          $8 = SAFE_HEAP_LOAD_i32_1_U_1($19 + 253 | 0, 0) ? Math_fround($8 * Math_fround(10.0)) : $8;
          break label$31;
         }
         if ((SAFE_HEAP_LOAD_i32_4_4($19, 7188) | 0) != 4) {
          break label$31
         }
         $25 = $30 + 8 | 0;
         ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($25, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
         $8 = SAFE_HEAP_LOAD_f32_4_4(($4 << 2) + $25 | 0, 0);
         $13 = SAFE_HEAP_LOAD_f32_4_4(48432, 0);
         $3 = $3 >= $13 ? $3 : $13;
        }
        $3 = Math_fround($8 * $3);
        $3 = $5 ? Math_fround(-$3) : $3;
        $4 = ($6 | 0) == ($7 | 0);
        $27 = $4 & ($9 | 0) == ($10 | 0);
        $31 = $11 & 32;
        $3 = $27 | !$31 ? $3 : Math_fround($3 / Math_fround(+($10 - $9 >>> 0) + +($6 - (($9 >>> 0 > $10 >>> 0) + $7 | 0) >>> 0) * 4294967296.0));
        $25 = SAFE_HEAP_LOAD_i32_1_U_1($19, 7148);
        $35 = $9 >>> 0 >= $10 >>> 0 & $4 | $6 >>> 0 < $7 >>> 0;
        $15 = 0;
        label$13611 : {
         if ($35) {
          break label$13611
         }
         $5 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
         $4 = i64toi32_i32$HIGH_BITS;
         if (!(($6 | 0) == ($4 | 0) & $5 >>> 0 < $10 >>> 0 | $4 >>> 0 < $6 >>> 0)) {
          $15 = 1;
          if ($3 > Math_fround(0.0)) {
           break label$13611
          }
         }
         $15 = (($4 | 0) == ($7 | 0) & $5 >>> 0 <= $9 >>> 0 | $4 >>> 0 < $7 >>> 0) & $3 < Math_fround(0.0);
        }
        label$154 : {
         label$165 : {
          if ($15 | $25 & 255) {
           SAFE_HEAP_STORE_i32_4_4($19, 12060, 0);
           $4 = 0;
           break label$165;
          }
          if ($3 == Math_fround(0.0)) {
           break label$154
          }
          SAFE_HEAP_STORE_f32_4_4($19, 12060, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($19, 12060)));
          $4 = 1;
         }
         SAFE_HEAP_STORE_i32_1_1($19, 12057, $4);
        }
        $15 = 0;
        label$197 : {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($19, 12057)) {
          break label$197
         }
         $25 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
         $4 = i64toi32_i32$HIGH_BITS;
         label$218 : {
          if ($31) {
           $8 = powf(Math_fround(.10000000149011612), Math_fround(1.0));
           $13 = Math_fround(0.0);
           if (!$27) {
            $5 = ($6 | 0) == ($7 | 0);
            $36 = $5 & $9 >>> 0 > $10 >>> 0 | $6 >>> 0 < $7 >>> 0;
            $15 = $36;
            $32 = $15 ? $10 : $9;
            $5 = $9 >>> 0 < $10 >>> 0 & $5 | $6 >>> 0 > $7 >>> 0;
            $33 = $5 ? $10 : $9;
            $5 = $5 ? $6 : $7;
            $37 = ($5 | 0) == ($4 | 0) & $25 >>> 0 < $33 >>> 0 | $4 >>> 0 < $5 >>> 0;
            $39 = $37 ? $25 : $33;
            $15 = $15 ? $6 : $7;
            $25 = ($15 | 0) == ($4 | 0) & $25 >>> 0 < $32 >>> 0 | $4 >>> 0 < $15 >>> 0;
            $12 = +$8;
            $20 = +($32 >>> 0) + +($15 >>> 0) * 4294967296.0;
            $20 = $12 > $20 ? $12 : $20;
            $18 = +(($25 ? $32 : $39) >>> 0) + +(($25 ? $15 : $37 ? $4 : $5) >>> 0) * 4294967296.0;
            $13 = Math_fround(0.0);
            label$25 : {
             if ($20 >= $18) {
              break label$25
             }
             $24 = +($33 >>> 0) + +($5 >>> 0) * 4294967296.0;
             $12 = $12 > $24 ? $12 : $24;
             $13 = Math_fround(1.0);
             if ($12 <= $18) {
              break label$25
             }
             $13 = Math_fround(log($18 / $20) / log($12 / $20));
            }
            $13 = $36 ? Math_fround(Math_fround(1.0) - $13) : $13;
           }
           $4 = $7;
           $5 = $9;
           label$26 : {
            if ($27) {
             break label$26
            }
            $23 = Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($19, 12060));
            $5 = $9;
            if ($23 <= Math_fround(0.0)) {
             break label$26
            }
            $4 = $6;
            $5 = $10;
            if ($23 >= Math_fround(1.0)) {
             break label$26
            }
            $12 = +$8;
            $20 = +($10 >>> 0) + +($6 >>> 0) * 4294967296.0;
            $20 = $12 > $20 ? $12 : $20;
            $18 = +($9 >>> 0) + +($7 >>> 0) * 4294967296.0;
            $12 = $12 > $18 ? $12 : $18;
            $4 = ($6 | 0) == ($7 | 0) & $9 >>> 0 > $10 >>> 0 | $6 >>> 0 < $7 >>> 0;
            $18 = $4 ? $20 : $12;
            $12 = $18 * pow(($4 ? $12 : $20) / $18, +($4 ? Math_fround(Math_fround(1.0) - $23) : $23));
            label$27 : {
             if ($12 < 18446744073709551615.0 & $12 >= 0.0) {
              $4 = Math_abs($12) >= 1.0 ? ~~($12 > 0.0 ? Math_min(Math_floor($12 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($12 - +(~~$12 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
              $5 = ~~$12 >>> 0;
              break label$27;
             }
             $4 = 0;
             $5 = 0;
            }
           }
           $20 = +$13;
           $12 = +$8;
           break label$218;
          }
          $8 = SAFE_HEAP_LOAD_f32_4_4($19, 12060);
          label$29 : {
           if (Math_fround(Math_abs($8)) < Math_fround(9223372036854775808.0)) {
            $5 = ~~$8 >>> 0;
            $15 = Math_fround(Math_abs($8)) >= Math_fround(1.0) ? ~~($8 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($8 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($8 - Math_fround(~~$8 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
            break label$29;
           }
           $5 = 0;
           $15 = -2147483648;
          }
          $4 = $15 + $4 | 0;
          $15 = $5;
          $5 = $5 + $25 | 0;
          $4 = $15 >>> 0 > $5 >>> 0 ? $4 + 1 | 0 : $4;
         }
         if (!($11 & 64)) {
          $5 = long_20long_20ImGui__RoundScalarWithFormatT_long_20long_2c_20long_20long__28char_20const__2c_20int_2c_20long_20long_29($14, $5, $4);
          $4 = i64toi32_i32$HIGH_BITS;
         }
         SAFE_HEAP_STORE_i32_1_1($19, 12057, 0);
         label$33 : {
          if ($31) {
           if ($27) {
            $12 = 0.0
           } else {
            $11 = ($6 | 0) == ($7 | 0);
            $15 = $11 & $9 >>> 0 > $10 >>> 0 | $6 >>> 0 < $7 >>> 0;
            $14 = $15;
            $25 = $14 ? $10 : $9;
            $11 = $9 >>> 0 < $10 >>> 0 & $11 | $6 >>> 0 > $7 >>> 0;
            $27 = $11 ? $10 : $9;
            $11 = $11 ? $6 : $7;
            $31 = ($11 | 0) == ($4 | 0) & $5 >>> 0 < $27 >>> 0 | $4 >>> 0 < $11 >>> 0;
            $14 = $14 ? $6 : $7;
            $32 = ($14 | 0) == ($4 | 0) & $5 >>> 0 < $25 >>> 0 | $4 >>> 0 < $14 >>> 0;
            $33 = $32 ? $25 : $31 ? $5 : $27;
            $18 = +($25 >>> 0) + +($14 >>> 0) * 4294967296.0;
            $18 = $12 > $18 ? $12 : $18;
            $24 = +($33 >>> 0) + +(($32 ? $14 : $31 ? $4 : $11) >>> 0) * 4294967296.0;
            $8 = Math_fround(0.0);
            label$36 : {
             if ($18 >= $24) {
              break label$36
             }
             $38 = +($27 >>> 0) + +($11 >>> 0) * 4294967296.0;
             $12 = $12 > $38 ? $12 : $38;
             $8 = Math_fround(1.0);
             if ($12 <= $24) {
              break label$36
             }
             $8 = Math_fround(log($24 / $18) / log($12 / $18));
            }
            $12 = +($15 ? Math_fround(Math_fround(1.0) - $8) : $8);
           }
           $8 = Math_fround($12 - $20);
           break label$33;
          }
          $11 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
          $8 = Math_fround(+($5 - $11 >>> 0) + +($4 - (i64toi32_i32$HIGH_BITS + ($5 >>> 0 < $11 >>> 0) | 0) | 0) * 4294967296.0);
         }
         SAFE_HEAP_STORE_f32_4_4($19, 12060, Math_fround(SAFE_HEAP_LOAD_f32_4_4($19, 12060) - $8));
         $14 = SAFE_HEAP_LOAD_i64_8_8($17, 0);
         $11 = i64toi32_i32$HIGH_BITS;
         label$37 : {
          if (!(($14 | 0) != ($5 | 0) | ($11 | 0) != ($4 | 0)) | $35) {
           break label$37
          }
          if (!(!(($4 | 0) == ($7 | 0) & $5 >>> 0 < $9 >>> 0 | $4 >>> 0 < $7 >>> 0) & (!(($4 | 0) == ($11 | 0) & $5 >>> 0 > $14 >>> 0 | $4 >>> 0 > $11 >>> 0) | !($3 < Math_fround(0.0))))) {
           $5 = $9;
           $4 = $7;
          }
          if (!(($4 | 0) == ($6 | 0) & $5 >>> 0 > $10 >>> 0 | $4 >>> 0 > $6 >>> 0) & (!(($4 | 0) == ($11 | 0) & $5 >>> 0 < $14 >>> 0 | $4 >>> 0 < $11 >>> 0) | !($3 > Math_fround(0.0)))) {
           break label$37
          }
          $5 = $10;
          $4 = $6;
         }
         $6 = ($5 | 0) != ($14 | 0) | ($4 | 0) != ($11 | 0);
         $15 = $6;
         if (!$6) {
          break label$197
         }
         SAFE_HEAP_STORE_i64_8_8($17, 0, $5, $4);
         $15 = 1;
        }
        $4 = $15;
        __stack_pointer = $30 + 16 | 0;
        break label$5;
       case 8:
        if ($6) {
         $23 = SAFE_HEAP_LOAD_f32_4_4($6, 0)
        } else {
         $23 = Math_fround(-3402823466385288598117041.0e14)
        }
        if ($5) {
         $8 = SAFE_HEAP_LOAD_f32_4_4($5, 0)
        } else {
         $8 = Math_fround(3402823466385288598117041.0e14)
        }
        $7 = __stack_pointer - 16 | 0;
        __stack_pointer = $7;
        $9 = $11 & 1048576;
        $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        label$18 : {
         if (!($8 > $23) | $3 != Math_fround(0.0)) {
          break label$18
         }
         $29 = Math_fround($8 - $23);
         if (!($29 < Math_fround(3402823466385288598117041.0e14))) {
          break label$18
         }
         $3 = Math_fround($29 * SAFE_HEAP_LOAD_f32_4_4($4, 12064));
        }
        $6 = $11 & 32;
        $10 = $9 >>> 20 | 0;
        label$49 : {
         label$510 : {
          if ((SAFE_HEAP_LOAD_i32_4_4($4, 7188) | 0) != 1) {
           break label$510
          }
          if (!ImGui__IsMousePosValid_28ImVec2_20const__29(0)) {
           break label$510
          }
          if (!ImGui__IsMouseDragPastThreshold_28int_2c_20float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 48 | 0, 0) * Math_fround(.5)))) {
           break label$510
          }
          $13 = SAFE_HEAP_LOAD_f32_4_4(($4 + ($10 << 2) | 0) + 880 | 0, 0);
          $13 = SAFE_HEAP_LOAD_i32_1_U_1($4 + 254 | 0, 0) ? Math_fround($13 * Math_fround(.009999999776482582)) : $13;
          $13 = SAFE_HEAP_LOAD_i32_1_U_1($4 + 253 | 0, 0) ? Math_fround($13 * Math_fround(10.0)) : $13;
          break label$49;
         }
         if ((SAFE_HEAP_LOAD_i32_4_4($4, 7188) | 0) != 4) {
          break label$49
         }
         $5 = ImParseFormatPrecision_28char_20const__2c_20int_29($22);
         $17 = $7 + 8 | 0;
         ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($17, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
         $13 = SAFE_HEAP_LOAD_f32_4_4(($10 << 2) + $17 | 0, 0);
         $29 = Math_fround(1.1754943508222875e-38);
         label$811 : {
          if (($5 | 0) < 0) {
           break label$811
          }
          if (($5 | 0) <= 9) {
           $29 = SAFE_HEAP_LOAD_f32_4_4(($5 << 2) + 48432 | 0, 0);
           break label$811;
          }
          $29 = powf(Math_fround(10.0), Math_fround(0 - $5 | 0));
         }
         $3 = $3 >= $29 ? $3 : $29;
        }
        $3 = Math_fround($13 * $3);
        $3 = $9 ? Math_fround(-$3) : $3;
        label$1112 : {
         if (!$6) {
          break label$1112
         }
         $13 = Math_fround($8 - $23);
         if (!($13 < Math_fround(3402823466385288598117041.0e14)) | !($13 > Math_fround(9.999999974752427e-07))) {
          break label$1112
         }
         $3 = Math_fround($3 / $13);
        }
        $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 7148);
        $9 = $8 > $23;
        $10 = 0;
        label$1515 : {
         if (!$9) {
          break label$1515
         }
         $13 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
         if ($8 <= $13) {
          $10 = 1;
          if ($3 > Math_fround(0.0)) {
           break label$1515
          }
         }
         $10 = $3 < Math_fround(0.0) & $13 <= $23;
        }
        label$1713 : {
         label$1814 : {
          if ($10 | $5 & 255) {
           SAFE_HEAP_STORE_i32_4_4($4, 12060, 0);
           $5 = 0;
           break label$1814;
          }
          if ($3 == Math_fround(0.0)) {
           break label$1713
          }
          SAFE_HEAP_STORE_f32_4_4($4, 12060, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4, 12060)));
          $5 = 1;
         }
         SAFE_HEAP_STORE_i32_1_1($4, 12057, $5);
        }
        $5 = 0;
        label$2116 : {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 12057)) {
          break label$2116
         }
         $13 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
         label$2312 : {
          if ($6) {
           $34 = powf(Math_fround(.10000000149011612), Math_fround(ImParseFormatPrecision_28char_20const__2c_20int_29($22) | 0));
           $3 = float_20ImGui__ScaleRatioFromValueT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29($13, $23, $8, 1, $34, Math_fround(0.0));
           $13 = float_20ImGui__ScaleValueFromRatioT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29(Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4, 12060)), $23, $8, 1, $34, Math_fround(0.0));
           break label$2312;
          }
          $3 = Math_fround(0.0);
          $13 = Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($4, 12060));
         }
         if (!($11 & 64)) {
          $13 = float_20ImGui__RoundScalarWithFormatT_float_2c_20float__28char_20const__2c_20int_2c_20float_29($22, $13)
         }
         SAFE_HEAP_STORE_i32_1_1($4, 12057, 0);
         label$2817 : {
          if ($6) {
           $3 = Math_fround(float_20ImGui__ScaleRatioFromValueT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29($13, $23, $8, 1, $34, Math_fround(0.0)) - $3);
           break label$2817;
          }
          $3 = Math_fround($13 - SAFE_HEAP_LOAD_f32_4_4($2, 0));
         }
         SAFE_HEAP_STORE_f32_4_4($4, 12060, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 12060) - $3));
         $3 = $13 == Math_fround(0.0) ? Math_fround(0.0) : $13;
         $13 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
         label$3018 : {
          if (!$9 | $3 == $13) {
           break label$3018
          }
          $3 = $3 < $23 ? $23 : $3;
          if (!($3 > $8)) {
           break label$3018
          }
          $3 = $8;
         }
         $5 = $3 != $13;
         if ($3 == $13) {
          break label$2116
         }
         SAFE_HEAP_STORE_f32_4_4($2, 0, $3);
         $5 = 1;
        }
        $4 = $5;
        __stack_pointer = $7 + 16 | 0;
        break label$5;
       case 9:
        break label$82;
       default:
        break label$5;
       };
      }
      if ($6) {
       $18 = SAFE_HEAP_LOAD_f64_8_8($6, 0)
      } else {
       $18 = -1797693134862315708145274.0e284
      }
      if ($5) {
       $20 = SAFE_HEAP_LOAD_f64_8_8($5, 0)
      } else {
       $20 = 1797693134862315708145274.0e284
      }
      $7 = __stack_pointer - 16 | 0;
      __stack_pointer = $7;
      $9 = $11 & 1048576;
      $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      label$110 : {
       if (!($20 > $18) | $3 != Math_fround(0.0)) {
        break label$110
       }
       $12 = $20 - $18;
       if (!($12 < 3402823466385288598117041.0e14)) {
        break label$110
       }
       $3 = Math_fround($12 * +SAFE_HEAP_LOAD_f32_4_4($4, 12064));
      }
      $6 = $11 & 32;
      $10 = $9 >>> 20 | 0;
      label$411 : {
       label$512 : {
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 7188) | 0) != 1) {
         break label$512
        }
        if (!ImGui__IsMousePosValid_28ImVec2_20const__29(0)) {
         break label$512
        }
        if (!ImGui__IsMouseDragPastThreshold_28int_2c_20float_29(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 48 | 0, 0) * Math_fround(.5)))) {
         break label$512
        }
        $8 = SAFE_HEAP_LOAD_f32_4_4(($4 + ($10 << 2) | 0) + 880 | 0, 0);
        $8 = SAFE_HEAP_LOAD_i32_1_U_1($4 + 254 | 0, 0) ? Math_fround($8 * Math_fround(.009999999776482582)) : $8;
        $8 = SAFE_HEAP_LOAD_i32_1_U_1($4 + 253 | 0, 0) ? Math_fround($8 * Math_fround(10.0)) : $8;
        break label$411;
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($4, 7188) | 0) != 4) {
        break label$411
       }
       $5 = ImParseFormatPrecision_28char_20const__2c_20int_29($22);
       $17 = $7 + 8 | 0;
       ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($17, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
       $8 = SAFE_HEAP_LOAD_f32_4_4(($10 << 2) + $17 | 0, 0);
       $13 = Math_fround(1.1754943508222875e-38);
       label$813 : {
        if (($5 | 0) < 0) {
         break label$813
        }
        if (($5 | 0) <= 9) {
         $13 = SAFE_HEAP_LOAD_f32_4_4(($5 << 2) + 48432 | 0, 0);
         break label$813;
        }
        $13 = powf(Math_fround(10.0), Math_fround(0 - $5 | 0));
       }
       $3 = $3 >= $13 ? $3 : $13;
      }
      $3 = Math_fround($8 * $3);
      $3 = $9 ? Math_fround(-$3) : $3;
      label$1114 : {
       if (!$6) {
        break label$1114
       }
       $12 = $20 - $18;
       if (!($12 < 3402823466385288598117041.0e14) | !($12 > 9.999999974752427e-07)) {
        break label$1114
       }
       $3 = Math_fround($3 / Math_fround($12));
      }
      $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 7148);
      $9 = $20 > $18;
      $10 = 0;
      label$1517 : {
       if (!$9) {
        break label$1517
       }
       $12 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
       if ($20 <= $12) {
        $10 = 1;
        if ($3 > Math_fround(0.0)) {
         break label$1517
        }
       }
       $10 = $3 < Math_fround(0.0) & $12 <= $18;
      }
      label$1715 : {
       label$1816 : {
        if ($10 | $5 & 255) {
         SAFE_HEAP_STORE_i32_4_4($4, 12060, 0);
         $5 = 0;
         break label$1816;
        }
        if ($3 == Math_fround(0.0)) {
         break label$1715
        }
        SAFE_HEAP_STORE_f32_4_4($4, 12060, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4, 12060)));
        $5 = 1;
       }
       SAFE_HEAP_STORE_i32_1_1($4, 12057, $5);
      }
      $5 = 0;
      label$2118 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($4, 12057)) {
        break label$2118
       }
       $24 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
       label$2319 : {
        if ($6) {
         $8 = powf(Math_fround(.10000000149011612), Math_fround(ImParseFormatPrecision_28char_20const__2c_20int_29($22) | 0));
         $3 = float_20ImGui__ScaleRatioFromValueT_double_2c_20double_2c_20double__28int_2c_20double_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29($24, $18, $20, 1, $8, Math_fround(0.0));
         $12 = +$3;
         $24 = double_20ImGui__ScaleValueFromRatioT_double_2c_20double_2c_20double__28int_2c_20float_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29(Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($4, 12060)), $18, $20, 1, $8, Math_fround(0.0));
         break label$2319;
        }
        $12 = 0.0;
        $8 = Math_fround(0.0);
        $24 = $24 + +SAFE_HEAP_LOAD_f32_4_4($4, 12060);
       }
       if (!($11 & 64)) {
        $24 = double_20ImGui__RoundScalarWithFormatT_double_2c_20double__28char_20const__2c_20int_2c_20double_29($22, $24)
       }
       SAFE_HEAP_STORE_i32_1_1($4, 12057, 0);
       label$2820 : {
        if ($6) {
         $12 = +float_20ImGui__ScaleRatioFromValueT_double_2c_20double_2c_20double__28int_2c_20double_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29($24, $18, $20, 1, $8, Math_fround(0.0)) - $12;
         break label$2820;
        }
        $12 = $24 - SAFE_HEAP_LOAD_f64_8_8($2, 0);
       }
       SAFE_HEAP_STORE_f32_4_4($4, 12060, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 12060) - Math_fround($12)));
       $12 = $24 == 0.0 ? 0.0 : $24;
       $24 = SAFE_HEAP_LOAD_f64_8_8($2, 0);
       label$3021 : {
        if (!$9 | $12 == $24) {
         break label$3021
        }
        $12 = $12 < $18 ? $18 : $12;
        if (!($20 < $12)) {
         break label$3021
        }
        $12 = $20;
       }
       $5 = $12 != $24;
       if ($12 == $24) {
        break label$2118
       }
       SAFE_HEAP_STORE_f64_8_8($2, 0, $12);
       $5 = 1;
      }
      $4 = $5;
      __stack_pointer = $7 + 16 | 0;
     }
     __stack_pointer = $28 + 16 | 0;
     $9 = $4;
     if ($4) {
      ImGui__MarkItemEdited_28unsigned_20int_29($26)
     }
     $4 = $16 + 48 | 0;
     $1 = $4 + ImGui__DataTypeFormatString_28char__2c_20int_2c_20int_2c_20void_20const__2c_20char_20const__29($4, 64, $1, $2, $22) | 0;
     if (SAFE_HEAP_LOAD_i32_1_U_1($21, 12196)) {
      ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(1061, 1056)
     }
     SAFE_HEAP_STORE_i64_8_4($16, 40, 1056964608, 1056964608);
     ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($16 + 152 | 0, $16 + 160 | 0, $16 + 48 | 0, $1, 0, $16 + 40 | 0, 0);
     if (SAFE_HEAP_LOAD_f32_4_4($16, 168) > Math_fround(0.0)) {
      $3 = SAFE_HEAP_LOAD_f32_4_4($21 + 5500 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($16, 36, Math_fround(SAFE_HEAP_LOAD_f32_4_4($16, 156) + SAFE_HEAP_LOAD_f32_4_4($21, 5480)));
      SAFE_HEAP_STORE_f32_4_4($16, 32, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($16, 160)));
      SAFE_HEAP_STORE_i64_8_8($16, 8, SAFE_HEAP_LOAD_i64_8_4($16, 32), i64toi32_i32$HIGH_BITS);
      ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($16 + 8 | 0, $0, 0, 1);
     }
     break label$3;
    }
    $9 = $16 + 152 | 0;
    $6 = $0;
    $0 = 0;
    label$3313 : {
     if (!($7 & 16)) {
      break label$3313
     }
     $0 = 1;
     if (!$4) {
      break label$3313
     }
     $0 = 1;
     if (!$5) {
      break label$3313
     }
     $0 = ImGui__DataTypeCompare_28int_2c_20void_20const__2c_20void_20const__29($1, $4, $5) >>> 31 | 0;
    }
    $9 = ImGui__TempInputScalar_28ImRect_20const__2c_20unsigned_20int_2c_20char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20void_20const__2c_20void_20const__29($9, $26, $6, $1, $2, $22, $0 ? $4 : 0, $0 ? $5 : 0);
   }
  }
  __stack_pointer = $16 + 176 | 0;
  return $9;
 }
 
 function ImGui__TempInputScalar_28ImRect_20const__2c_20unsigned_20int_2c_20char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20void_20const__2c_20void_20const__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0;
  $10 = __stack_pointer - 80 | 0;
  __stack_pointer = $10;
  $18 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $17 = $10 + 32 | 0;
  $12 = $5;
  while (1) {
   $8 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
   label$2 : {
    if (!$8) {
     $11 = 3;
     break label$2;
    }
    label$4 : {
     if (($8 | 0) != 37) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 1) | 0) == 37) {
      break label$4
     }
     $9 = $5;
     $11 = 1;
     break label$2;
    }
    $11 = 0;
    $5 = ((($8 | 0) == 37) + $5 | 0) + 1 | 0;
   }
   $8 = $5;
   if (!$11) {
    continue
   }
   break;
  };
  $5 = $9;
  label$5 : {
   switch ($11 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $5 = $8;
    break;
   default:
    break label$5;
   };
  }
  $8 = $5;
  $5 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
  __inlined_func$ImParseFormatTrimDecorations_28char_20const__2c_20char__2c_20unsigned_20long_29 : {
   if (($5 | 0) == 37) {
    $9 = $8;
    while (1) {
     label$9 : {
      $12 = $5 << 24 >> 24;
      if (!(1 << $12 - 65 & 2304 | ($5 - 65 & 255) >>> 0 > 25)) {
       $11 = $9 + 1 | 0;
       break label$9;
      }
      if (!(1 << $12 - 97 & 38275712 | ($5 - 97 & 255) >>> 0 > 25)) {
       $11 = $9 + 1 | 0;
       break label$9;
      }
      $5 = SAFE_HEAP_LOAD_i32_1_U_1($9, 1);
      $9 = $9 + 1 | 0;
      $11 = $9;
      if ($5) {
       continue
      }
     }
     break;
    };
    $5 = $8;
    if (!SAFE_HEAP_LOAD_i32_1_U_1($11, 0)) {
     break __inlined_func$ImParseFormatTrimDecorations_28char_20const__2c_20char__2c_20unsigned_20long_29
    }
    $5 = ($11 - $8 | 0) + 1 | 0;
    ImStrncpy_28char__2c_20char_20const__2c_20unsigned_20long_29($17, $8, $5 >>> 0 >= 32 ? 32 : $5);
    $5 = $17;
   } else {
    $5 = $12
   }
  }
  ImGui__DataTypeFormatString_28char__2c_20int_2c_20int_2c_20void_20const__2c_20char_20const__29($10, 32, $3, $4, $5);
  $8 = $10;
  while (1) {
   $5 = SAFE_HEAP_LOAD_i32_1_U_1($8, 0);
   if (($5 | 0) == 32 | ($5 | 0) == 9) {
    $8 = $8 + 1 | 0;
    continue;
   } else {
    $5 = $8;
    while (1) {
     $9 = $5;
     $5 = $5 + 1 | 0;
     if (SAFE_HEAP_LOAD_i32_1_U_1($9, 0)) {
      continue
     }
     break;
    };
    label$42 : {
     if ($8 >>> 0 >= $9 >>> 0) {
      $5 = $9;
      break label$42;
     }
     $5 = $9;
     while (1) {
      $9 = $5 - 1 | 0;
      $12 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0);
      if (($12 | 0) != 32 & ($12 | 0) != 9) {
       break label$42
      }
      $5 = $9;
      if ($5 >>> 0 > $8 >>> 0) {
       continue
      }
      break;
     };
     $5 = $8;
    }
    if (($8 | 0) != ($10 | 0)) {
     memmove($10, $8, $5 - $8 | 0)
    }
    SAFE_HEAP_STORE_i32_1_1(($5 - $8 | 0) + $10 | 0, 0, 0);
   }
   break;
  };
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = (SAFE_HEAP_LOAD_i32_4_4($5, 11968) | 0) == ($1 | 0);
  if (!$9) {
   ImGui__ClearActiveID_28_29()
  }
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($5, 7080), 208, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
  $13 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  $14 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
  SAFE_HEAP_STORE_f32_4_4($10, 76, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0, 4)));
  SAFE_HEAP_STORE_f32_4_4($10, 72, Math_fround($14 - $13));
  $2 = ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($2, 0, $10, 32, $10 + 72 | 0, ($3 & -2) == 8 ? 402784272 : 402653201, 0);
  if (!$9) {
   SAFE_HEAP_STORE_i32_4_4($5, 11968, SAFE_HEAP_LOAD_i32_4_4($5, 7136))
  }
  $0 = 0;
  if ($2) {
   $9 = SAFE_HEAP_LOAD_i32_4_4(($3 << 4) + 48160 | 0, 0);
   __memcpy($10 + 72 | 0, $4, $9);
   ImGui__DataTypeApplyOpFromText_28char_20const__2c_20char_20const__2c_20int_2c_20void__2c_20char_20const__29($10, SAFE_HEAP_LOAD_i32_4_4($18 + 8224 | 0, 0), $3, $4, 0);
   if ($6 | $7) {
    label$50 : {
     if (!(!$6 | !$7)) {
      $0 = (ImGui__DataTypeCompare_28int_2c_20void_20const__2c_20void_20const__29($3, $6, $7) | 0) > 0;
      $5 = $0 ? $7 : $6;
      $0 = $0 ? $6 : $7;
      break label$50;
     }
     $5 = $6;
     $0 = $7;
    }
    __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29 : {
     folding_inner6 : {
      folding_inner5 : {
       folding_inner4 : {
        folding_inner3 : {
         folding_inner2 : {
          folding_inner0 : {
           label$23 : {
            switch ($3 | 0) {
            case 0:
             label$1212 : {
              if (!$5) {
               break label$1212
              }
              $3 = SAFE_HEAP_LOAD_i32_1_1($4, 0);
              $2 = SAFE_HEAP_LOAD_i32_1_1($5, 0);
              if (($3 | 0) >= ($2 | 0)) {
               break label$1212
              }
              break folding_inner0;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $3 = SAFE_HEAP_LOAD_i32_1_1($4, 0);
             $2 = SAFE_HEAP_LOAD_i32_1_1($0, 0);
             if (($3 | 0) <= ($2 | 0)) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner0;
            case 1:
             label$14 : {
              if (!$5) {
               break label$14
              }
              $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
              $2 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
              if ($3 >>> 0 >= $2 >>> 0) {
               break label$14
              }
              break folding_inner0;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
             $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
             if ($3 >>> 0 <= $2 >>> 0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner0;
            case 2:
             label$16 : {
              if (!$5) {
               break label$16
              }
              $3 = SAFE_HEAP_LOAD_i32_2_2($4, 0);
              $2 = SAFE_HEAP_LOAD_i32_2_2($5, 0);
              if (($3 | 0) >= ($2 | 0)) {
               break label$16
              }
              break folding_inner2;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $3 = SAFE_HEAP_LOAD_i32_2_2($4, 0);
             $2 = SAFE_HEAP_LOAD_i32_2_2($0, 0);
             if (($3 | 0) <= ($2 | 0)) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner2;
            case 3:
             label$18 : {
              if (!$5) {
               break label$18
              }
              $3 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
              $2 = SAFE_HEAP_LOAD_i32_2_U_2($5, 0);
              if ($3 >>> 0 >= $2 >>> 0) {
               break label$18
              }
              break folding_inner2;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $3 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
             $2 = SAFE_HEAP_LOAD_i32_2_U_2($0, 0);
             if ($3 >>> 0 <= $2 >>> 0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner2;
            case 4:
             label$20 : {
              if (!$5) {
               break label$20
              }
              $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
              $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
              if (($3 | 0) >= ($2 | 0)) {
               break label$20
              }
              break folding_inner3;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
             $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
             if (($3 | 0) <= ($2 | 0)) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner3;
            case 5:
             label$22 : {
              if (!$5) {
               break label$22
              }
              $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
              $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
              if ($3 >>> 0 >= $2 >>> 0) {
               break label$22
              }
              break folding_inner3;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
             $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
             if ($3 >>> 0 <= $2 >>> 0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner3;
            case 6:
             label$24 : {
              if (!$5) {
               break label$24
              }
              $3 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
              $6 = i64toi32_i32$HIGH_BITS;
              $2 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
              $5 = $3 >>> 0 >= $2 >>> 0;
              $3 = i64toi32_i32$HIGH_BITS;
              if ($5 & ($3 | 0) <= ($6 | 0) | ($3 | 0) < ($6 | 0)) {
               break label$24
              }
              break folding_inner4;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $5 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
             $3 = i64toi32_i32$HIGH_BITS;
             $2 = SAFE_HEAP_LOAD_i64_8_8($0, 0);
             $0 = i64toi32_i32$HIGH_BITS;
             if (($0 | 0) >= ($3 | 0) & $2 >>> 0 >= $5 >>> 0 | ($0 | 0) > ($3 | 0)) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner5;
            case 7:
             label$26 : {
              if (!$5) {
               break label$26
              }
              $7 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
              $6 = i64toi32_i32$HIGH_BITS;
              $2 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
              $3 = i64toi32_i32$HIGH_BITS;
              if (($3 | 0) == ($6 | 0) & $2 >>> 0 <= $7 >>> 0 | $3 >>> 0 < $6 >>> 0) {
               break label$26
              }
              break folding_inner4;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $5 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
             $3 = i64toi32_i32$HIGH_BITS;
             $2 = SAFE_HEAP_LOAD_i64_8_8($0, 0);
             $0 = i64toi32_i32$HIGH_BITS;
             if (($0 | 0) == ($3 | 0) & $2 >>> 0 >= $5 >>> 0 | $0 >>> 0 > $3 >>> 0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner5;
            case 8:
             label$28 : {
              if (!$5) {
               break label$28
              }
              $14 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
              $13 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
              if (!($14 < $13)) {
               break label$28
              }
              break folding_inner6;
             }
             if (!$0) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             $14 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
             $13 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
             if (!($14 > $13)) {
              break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
             }
             break folding_inner6;
            case 9:
             break label$23;
            default:
             break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
            };
           }
           label$30 : {
            if (!$5) {
             break label$30
            }
            $16 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
            $15 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
            if (!($16 < $15)) {
             break label$30
            }
            SAFE_HEAP_STORE_f64_8_8($4, 0, $15);
            break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
           }
           if (!$0) {
            break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
           }
           $16 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
           $15 = SAFE_HEAP_LOAD_f64_8_8($0, 0);
           if (!($16 > $15)) {
            break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29
           }
           SAFE_HEAP_STORE_f64_8_8($4, 0, $15);
           break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
          }
          SAFE_HEAP_STORE_i32_1_1($4, 0, $2);
          break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
         }
         SAFE_HEAP_STORE_i32_2_2($4, 0, $2);
         break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
        }
        SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
        break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
       }
       SAFE_HEAP_STORE_i64_8_8($4, 0, $2, $3);
       break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
      }
      SAFE_HEAP_STORE_i64_8_8($4, 0, $2, $0);
      break __inlined_func$ImGui__DataTypeClamp_28int_2c_20void__2c_20void_20const__2c_20void_20const__29;
     }
     SAFE_HEAP_STORE_f32_4_4($4, 0, $13);
    }
   }
   $0 = memcmp($10 + 72 | 0, $4, $9);
   if ($0) {
    ImGui__MarkItemEdited_28unsigned_20int_29($1)
   }
   $0 = ($0 | 0) != 0;
  }
  __stack_pointer = $10 + 80 | 0;
  return $0;
 }
 
 function ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = Math_fround(0), $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = 0, $41 = Math_fround(0), $42 = Math_fround(0), $43 = Math_fround(0), $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = Math_fround(0), $49 = 0, $50 = 0, $51 = 0, $52 = Math_fround(0), $53 = Math_fround(0), $54 = Math_fround(0), $55 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $11 = __stack_pointer - 192 | 0;
  __stack_pointer = $11;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $13 = SAFE_HEAP_LOAD_i32_4_4($10, 7080);
  SAFE_HEAP_STORE_i32_1_1($13, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($13, 143)) {
   $22 = $5 & 67108864;
   if ($22) {
    ImGui__BeginGroup_28_29()
   }
   $24 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($13, $0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($11 + 184 | 0, $0, 0, 1, Math_fround(-1.0));
   SAFE_HEAP_STORE_i64_8_8($11, 168, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
   $17 = ImGui__CalcItemWidth_28_29();
   label$3 : {
    if ($22) {
     $16 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6468) * Math_fround(8.0));
     break label$3;
    }
    $16 = SAFE_HEAP_LOAD_f32_4_4($11, 188);
   }
   $14 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
   SAFE_HEAP_STORE_i64_8_8($11, 24, SAFE_HEAP_LOAD_i64_8_8($11, 168), i64toi32_i32$HIGH_BITS);
   ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($11 + 176 | 0, $11 + 24 | 0, $17, Math_fround(Math_fround($14 + $14) + $16));
   $14 = SAFE_HEAP_LOAD_f32_4_4($11, 176);
   $16 = Math_fround(0.0);
   $17 = SAFE_HEAP_LOAD_f32_4_4($11, 184);
   if ($17 > Math_fround(0.0)) {
    $16 = Math_fround($17 + SAFE_HEAP_LOAD_f32_4_4($10 + 5500 | 0, 0))
   }
   $17 = SAFE_HEAP_LOAD_f32_4_4($13, 208);
   $4 = SAFE_HEAP_LOAD_i64_8_4($13, 208);
   $7 = i64toi32_i32$HIGH_BITS;
   $34 = SAFE_HEAP_LOAD_f32_4_4($11, 180);
   SAFE_HEAP_STORE_f32_4_4($11 + 164 | 0, 0, Math_fround($34 + SAFE_HEAP_LOAD_f32_4_4($13 + 212 | 0, 0)));
   SAFE_HEAP_STORE_i64_8_8($11, 152, $4, $7);
   SAFE_HEAP_STORE_f32_4_4($11, 160, Math_fround($14 + $17));
   $9 = $11 + 136 | 0;
   SAFE_HEAP_STORE_f32_4_4($9 + 12 | 0, 0, Math_fround($34 + SAFE_HEAP_LOAD_f32_4_4($11, 156)));
   SAFE_HEAP_STORE_f32_4_4($11, 144, Math_fround(Math_fround($14 + $16) + SAFE_HEAP_LOAD_f32_4_4($11, 152)));
   SAFE_HEAP_STORE_i64_8_8($11, 136, $4, $7);
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($9, SAFE_HEAP_LOAD_f32_4_4($10, 5480));
   label$6 : {
    label$7 : {
     if ($22) {
      label$9 : {
       if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($11 + 136 | 0, $24, $11 + 152 | 0, 256)) {
        ImGui__EndGroup_28_29();
        $9 = 0;
        $7 = $13;
        $15 = 0;
        break label$9;
       }
       $12 = SAFE_HEAP_LOAD_i32_4_4($10 + 7244 | 0, 0);
       $9 = SAFE_HEAP_LOAD_i32_4_4($10 + 7248 | 0, 0);
       SAFE_HEAP_STORE_i64_8_4($13, 208, $4, $7);
       ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(3, $10 + 5728 | 0);
       ImGui__PushStyleVar_28int_2c_20float_29(7, SAFE_HEAP_LOAD_f32_4_4($10 + 5484 | 0, 0));
       ImGui__PushStyleVar_28int_2c_20float_29(8, SAFE_HEAP_LOAD_f32_4_4($10 + 5488 | 0, 0));
       SAFE_HEAP_STORE_i64_8_4($11, 88, 0, 0);
       $4 = $11 + 88 | 0;
       ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(2, $4);
       SAFE_HEAP_STORE_f32_4_4($11, 92, Math_fround(SAFE_HEAP_LOAD_f32_4_4($11 + 164 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($11, 156)));
       SAFE_HEAP_STORE_f32_4_4($11, 88, Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 160) - SAFE_HEAP_LOAD_f32_4_4($11, 152)));
       $4 = ImGui__BeginChildEx_28char_20const__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20bool_2c_20int_29($0, $24, $4, 1, 4);
       ImGui__PopStyleVar_28int_29(3);
       ImGui__PopStyleColor_28int_29(1);
       if (!$4) {
        ImGui__EndChild_28_29();
        ImGui__EndGroup_28_29();
        $7 = $13;
        $15 = 0;
        break label$9;
       }
       $7 = SAFE_HEAP_LOAD_i32_4_4($10, 7080);
       $4 = $7 + 298 | 0;
       $8 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
       SAFE_HEAP_STORE_i32_2_2($4, 0, 1 << SAFE_HEAP_LOAD_i32_4_4($7 + 292 | 0, 0) | $8);
       SAFE_HEAP_STORE_f32_4_4($7, 208, Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 5476) + SAFE_HEAP_LOAD_f32_4_4($7, 208)));
       $4 = $7 + 212 | 0;
       SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($4, 0)));
       $14 = Math_fround($14 - SAFE_HEAP_LOAD_f32_4_4($7, 128));
       $15 = 1;
      }
      $4 = $9;
      $8 = $9;
      $9 = 0;
      if ($15) {
       break label$7
      }
      break label$6;
     }
     if (!($5 & 268435456)) {
      $9 = 0;
      if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($11 + 136 | 0, $24, $11 + 152 | 0, 256)) {
       break label$6
      }
     }
     $4 = 0;
     $8 = SAFE_HEAP_LOAD_i32_4_4($10 + 7248 | 0, 0);
     $7 = $13;
    }
    $15 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($11 + 152 | 0, $24);
    if ($15) {
     SAFE_HEAP_STORE_i32_4_4($10, 7872, 1)
    }
    $32 = $7;
    $29 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $18 = SAFE_HEAP_LOAD_i32_4_4($29, 8180);
    $7 = SAFE_HEAP_LOAD_i32_4_4($10, 7136);
    $19 = 0;
    label$14 : {
     if (($7 | 0) == ($24 | 0)) {
      break label$14
     }
     $19 = 1;
     if ((SAFE_HEAP_LOAD_i32_4_4($10, 7532) | 0) == ($24 | 0)) {
      break label$14
     }
     $19 = 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($10, 7520) | 0) != ($24 | 0)) {
      break label$14
     }
     $19 = (SAFE_HEAP_LOAD_i32_4_4($10, 7560) | 0) == 2;
    }
    $28 = ($18 | 0) == ($24 | 0);
    $9 = 0;
    if ($15) {
     $20 = (SAFE_HEAP_LOAD_i32_1_U_1($10 + 992 | 0, 0) | 0) != 0
    } else {
     $20 = 0
    }
    $30 = $28 & ($22 | 0) != 0;
    $25 = 0;
    label$16 : {
     if (!$30) {
      break label$16
     }
     $25 = 0;
     if ($7) {
      break label$16
     }
     $25 = (SAFE_HEAP_LOAD_i32_4_4($10, 7196) | 0) == (ImGuiWindow__GetIDNoKeepAlive_28char_20const__2c_20char_20const__29($32, 14116) | 0);
    }
    if ($30) {
     $9 = (SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) == (ImGuiWindow__GetIDNoKeepAlive_28char_20const__2c_20char_20const__29($32, 14116) | 0)
    }
    $35 = $14;
    $14 = Math_fround(3402823466385288598117041.0e14);
    if ($22) {
     $14 = SAFE_HEAP_LOAD_f32_4_4($32 + 92 | 0, 0)
    }
    $7 = $8;
    $49 = $12;
    $50 = $4;
    $8 = $28 ? $29 + 8180 | 0 : 0;
    $28 = $7 & 256;
    $12 = 0;
    if (($18 | 0) == ($24 | 0)) {
     $18 = (SAFE_HEAP_LOAD_i32_1_U_1($8 + 83 | 0, 0) | 0) != (!$22 | 0)
    } else {
     $18 = 0
    }
    $29 = $19 | ($20 | $25) | ($28 | 0) != 0;
    $30 = $29 | $9;
    label$20 : {
     label$21 : {
      if (($30 | 0) == 1) {
       if ($18 | (SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) != ($24 | 0)) {
        break label$21
       }
       break label$20;
      }
      if (!$18) {
       break label$20
      }
     }
     SAFE_HEAP_STORE_i32_4_4($10 + 11868 | 0, 0, -1097229926);
     $12 = strlen($2);
     $4 = $12 + 1 | 0;
     $7 = SAFE_HEAP_LOAD_i32_4_4($10 + 8220 | 0, 0);
     label$23 : {
      if (($12 | 0) < ($7 | 0)) {
       break label$23
      }
      $12 = $7 ? $7 + (($7 | 0) / 2 | 0) | 0 : 8;
      $12 = ($4 | 0) < ($12 | 0) ? $12 : $4;
      if (($7 | 0) >= ($12 | 0)) {
       break label$23
      }
      $7 = ImGui__MemAlloc_28unsigned_20long_29($12);
      $8 = SAFE_HEAP_LOAD_i32_4_4($10 + 8224 | 0, 0);
      if ($8) {
       __memcpy($7, $8, SAFE_HEAP_LOAD_i32_4_4($10, 8216));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($10, 8224));
      }
      SAFE_HEAP_STORE_i32_4_4($10, 8220, $12);
      SAFE_HEAP_STORE_i32_4_4($10, 8224, $7);
     }
     SAFE_HEAP_STORE_i32_4_4($10, 8216, $4);
     __memcpy(SAFE_HEAP_LOAD_i32_4_4($10 + 8224 | 0, 0), $2, $4);
     SAFE_HEAP_STORE_i32_4_4($11, 88, 0);
     $7 = $3 + 1 | 0;
     $4 = SAFE_HEAP_LOAD_i32_4_4($10 + 8196 | 0, 0);
     label$27 : {
      if (($4 | 0) > ($3 | 0)) {
       break label$27
      }
      $12 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
      $12 = ($7 | 0) < ($12 | 0) ? $12 : $7;
      if (($4 | 0) >= ($12 | 0)) {
       break label$27
      }
      $4 = ImGui__MemAlloc_28unsigned_20long_29($12 << 1);
      $8 = SAFE_HEAP_LOAD_i32_4_4($10 + 8200 | 0, 0);
      if ($8) {
       __memcpy($4, $8, SAFE_HEAP_LOAD_i32_4_4($10, 8192) << 1);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($10, 8200));
      }
      SAFE_HEAP_STORE_i32_4_4($10, 8196, $12);
      SAFE_HEAP_STORE_i32_4_4($10, 8200, $4);
     }
     SAFE_HEAP_STORE_i32_4_4($10, 8192, $7);
     $4 = SAFE_HEAP_LOAD_i32_4_4($10 + 8208 | 0, 0);
     label$31 : {
      if (($4 | 0) >= 0) {
       break label$31
      }
      $7 = $4 + (($4 | 0) / 2 | 0) | 0;
      $7 = ($7 | 0) > 0 ? $7 : 0;
      if (($4 | 0) >= ($7 | 0)) {
       break label$31
      }
      $4 = ImGui__MemAlloc_28unsigned_20long_29($7);
      $12 = SAFE_HEAP_LOAD_i32_4_4($10 + 8212 | 0, 0);
      if ($12) {
       __memcpy($4, $12, SAFE_HEAP_LOAD_i32_4_4($10, 8204));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($10, 8212));
      }
      SAFE_HEAP_STORE_i32_4_4($10, 8208, $7);
      SAFE_HEAP_STORE_i32_4_4($10, 8212, $4);
     }
     SAFE_HEAP_STORE_i32_4_4($10, 8204, 0);
     SAFE_HEAP_STORE_i32_1_1($10 + 8228 | 0, 0, 0);
     $4 = $10 + 8184 | 0;
     SAFE_HEAP_STORE_i32_4_4($4, 0, ImTextStrFromUtf8_28unsigned_20short__2c_20int_2c_20char_20const__2c_20char_20const__2c_20char_20const___29(SAFE_HEAP_LOAD_i32_4_4($10 + 8200 | 0, 0), $3, $2, 0, $11 + 88 | 0));
     SAFE_HEAP_STORE_i32_4_4($10 + 8188 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($11, 88) - $2 | 0);
     $12 = $18 | (SAFE_HEAP_LOAD_i32_4_4($10, 8180) | 0) != ($24 | 0);
     label$33 : {
      if (!$12) {
       $8 = $10 + 8240 | 0;
       $7 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
       $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       SAFE_HEAP_STORE_i32_4_4($8, 0, ($4 | 0) > ($7 | 0) ? $7 : $4);
       $8 = $10 + 8244 | 0;
       $7 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
       SAFE_HEAP_STORE_i32_4_4($8, 0, ($4 | 0) > ($7 | 0) ? $7 : $4);
       $8 = $10 + 8248 | 0;
       $7 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
       SAFE_HEAP_STORE_i32_4_4($8, 0, ($4 | 0) > ($7 | 0) ? $7 : $4);
       break label$33;
      }
      SAFE_HEAP_STORE_i32_4_4($10, 8180, $24);
      SAFE_HEAP_STORE_i32_4_4($10 + 8236 | 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($10 + 11860 | 0, 0, 0, 999);
      SAFE_HEAP_STORE_i32_4_2($10 + 11854 | 0, 0, 6488064);
      SAFE_HEAP_STORE_i32_4_4($10 + 8248 | 0, 0, 0);
      SAFE_HEAP_STORE_i32_4_4($10 + 8268 | 0, 0, 0);
      SAFE_HEAP_STORE_i32_1_1($10 + 8262 | 0, 0, 0);
      SAFE_HEAP_STORE_i64_8_4($10 + 8240 | 0, 0, 0, 0);
      SAFE_HEAP_STORE_i32_1_1($10 + 8263 | 0, 0, !$22);
      SAFE_HEAP_STORE_i32_2_2($10 + 8260 | 0, 0, 256);
      SAFE_HEAP_STORE_i32_4_4($10 + 8256 | 0, 0, 0);
      SAFE_HEAP_STORE_i32_1_1($10 + 8252 | 0, 0, 0);
     }
     $4 = 0;
     label$35 : {
      if ($22) {
       break label$35
      }
      $4 = $5 >>> 4 & 1;
      label$36 : {
       if (!$19) {
        break label$36
       }
       if (!$12) {
        if (SAFE_HEAP_LOAD_i32_1_U_1($10, 7536) & 4) {
         break label$36
        }
       }
       $4 = 1;
      }
      if (!$28) {
       if (!$20) {
        break label$35
       }
       if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 252 | 0, 0)) {
        break label$35
       }
      }
      $4 = 1;
     }
     if ($5 & 8192) {
      SAFE_HEAP_STORE_i32_1_1($10 + 8252 | 0, 0, 1)
     }
     $12 = $4;
     $8 = $10 + 8180 | 0;
    }
    label$42 : {
     if (!($29 & (SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) != ($24 | 0))) {
      break label$42
     }
     ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($24, $13);
     ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($24, $13);
     ImGui__FocusWindow_28ImGuiWindow__29($13);
     SAFE_HEAP_STORE_i32_4_4($10, 7156, SAFE_HEAP_LOAD_i32_4_4($10, 7156) | ($5 & 67108992 ? 15 : 3));
     SAFE_HEAP_STORE_i32_4_4($10, 7160, SAFE_HEAP_LOAD_i32_4_4($10, 7160) | 2);
     $4 = SAFE_HEAP_LOAD_i64_8_8($10, 7168) | ($22 ? 480 : 384);
     $7 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($10, 7168, $4, $7);
     if (!($5 & 1088)) {
      break label$42
     }
     SAFE_HEAP_STORE_i64_8_8($10, 7168, $4 | 1, $7);
    }
    label$43 : {
     if ($8) {
      break label$43
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) != ($24 | 0)) {
      break label$43
     }
     ImGui__ClearActiveID_28_29();
    }
    $7 = SAFE_HEAP_LOAD_i32_4_4($10, 7136);
    if (($24 | 0) == ($7 | 0)) {
     $4 = ($30 ^ -1) & (SAFE_HEAP_LOAD_i32_1_U_1($10 + 992 | 0, 0) | 0) != 0
    } else {
     $4 = 0
    }
    $36 = ($8 | 0) != 0 & $9 | ($7 | 0) == ($24 | 0);
    $25 = $5 & 16384;
    if ($8) {
     $7 = $36 & ((SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0) | 0) | $12)
    } else {
     $7 = 0
    }
    if (!(!($36 | $7) | (!$25 | !$8))) {
     SAFE_HEAP_STORE_i32_4_4($11, 88, 0);
     $9 = $3 + 1 | 0;
     $13 = SAFE_HEAP_LOAD_i32_4_4($8 + 16 | 0, 0);
     label$52 : {
      if (($13 | 0) > ($3 | 0)) {
       break label$52
      }
      $18 = $13 ? $13 + (($13 | 0) / 2 | 0) | 0 : 8;
      $18 = ($9 | 0) < ($18 | 0) ? $18 : $9;
      if (($13 | 0) >= ($18 | 0)) {
       break label$52
      }
      $13 = ImGui__MemAlloc_28unsigned_20long_29($18 << 1);
      $28 = SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0);
      if ($28) {
       __memcpy($13, $28, SAFE_HEAP_LOAD_i32_4_4($8, 12) << 1);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($8, 20));
      }
      SAFE_HEAP_STORE_i32_4_4($8, 16, $18);
      SAFE_HEAP_STORE_i32_4_4($8, 20, $13);
     }
     SAFE_HEAP_STORE_i32_4_4($8, 12, $9);
     $9 = ImTextStrFromUtf8_28unsigned_20short__2c_20int_2c_20char_20const__2c_20char_20const__2c_20char_20const___29(SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0), $9, $2, 0, $11 + 88 | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, $9);
     SAFE_HEAP_STORE_i32_4_4($8, 8, SAFE_HEAP_LOAD_i32_4_4($11, 88) - $2 | 0);
     $13 = SAFE_HEAP_LOAD_i32_4_4($8, 60);
     SAFE_HEAP_STORE_i32_4_4($8, 60, ($9 | 0) > ($13 | 0) ? $13 : $9);
     $18 = $8 - -64 | 0;
     $13 = SAFE_HEAP_LOAD_i32_4_4($18, 0);
     $13 = ($9 | 0) > ($13 | 0) ? $13 : $9;
     SAFE_HEAP_STORE_i32_4_4($18, 0, $13);
     $18 = $8 + 68 | 0;
     $28 = SAFE_HEAP_LOAD_i32_4_4($18, 0);
     $9 = ($9 | 0) > ($28 | 0) ? $28 : $9;
     SAFE_HEAP_STORE_i32_4_4($18, 0, $9);
     $7 = $7 & ($9 | 0) != ($13 | 0);
    }
    $18 = $7;
    label$56 : {
     label$57 : {
      if (!($7 | $36)) {
       if (!$8) {
        $7 = 0;
        break label$56;
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) != ($24 | 0)) {
        $7 = 0;
        break label$56;
       }
       $7 = 0;
       if (!$25) {
        break label$57
       }
       break label$56;
      }
      if (!$8) {
       $7 = 0;
       break label$56;
      }
      $7 = 0;
      if ($25) {
       break label$56
      }
     }
     $7 = (SAFE_HEAP_LOAD_i32_1_U_1($8, 48) | 0) != 0;
    }
    $28 = $7;
    $20 = $5 & 32768;
    if ($1) {
     if ($28) {
      $7 = SAFE_HEAP_LOAD_i32_4_4($8 + 32 | 0, 0)
     } else {
      $7 = $2
     }
     $7 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0);
    } else {
     $7 = 1
    }
    $7 = !$7;
    $40 = $7;
    $33 = !$20;
    $46 = $33 | $7;
    if (!$46) {
     $9 = ImFont__FindGlyph_28unsigned_20short_29_20const(SAFE_HEAP_LOAD_i32_4_4($10, 6464), 42);
     $7 = SAFE_HEAP_LOAD_i32_4_4($10, 6464);
     SAFE_HEAP_STORE_f32_4_4($10 + 11896 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($7, 16));
     SAFE_HEAP_STORE_f32_4_4($10 + 11948 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($7, 68));
     SAFE_HEAP_STORE_f32_4_4($10 + 11952 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($7, 72));
     SAFE_HEAP_STORE_f32_4_4($10 + 11956 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($7, 76));
     SAFE_HEAP_STORE_i32_4_4($10 + 11928 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($7, 48));
     SAFE_HEAP_STORE_i32_4_4($10 + 11924 | 0, 0, $9);
     SAFE_HEAP_STORE_f32_4_4($10 + 11892 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($9, 4));
     ImGui__PushFont_28ImFont__29($10 + 11880 | 0);
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) == ($24 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($8, 3694, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 3696, $5);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $3);
     $30 = SAFE_HEAP_LOAD_i32_4_4($8, 8);
     SAFE_HEAP_STORE_i32_4_4($10, 12796, 1);
     $7 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 236 | 0, 0);
     SAFE_HEAP_STORE_i32_1_1($10, 7149, $7 ^ 1);
     label$67 : {
      if ($22) {
       $17 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($32 + 212 | 0, 0));
       break label$67;
      }
      $17 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6468) * Math_fround(.5));
     }
     $29 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 177 | 0, 0);
     label$69 : {
      if ($12) {
       SAFE_HEAP_STORE_i32_1_1($8, 3693, 1);
       SAFE_HEAP_STORE_i32_4_4($8 - -64 | 0, 0, 0);
       $7 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
       SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, $7);
       SAFE_HEAP_STORE_i32_1_1($8 + 82 | 0, 0, 0);
       SAFE_HEAP_STORE_i32_4_4($8, 60, $7);
       break label$69;
      }
      $16 = Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 228 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($11, 152)) - SAFE_HEAP_LOAD_f32_4_4($10, 5476)) + SAFE_HEAP_LOAD_f32_4_4($8, 56));
      label$71 : {
       if (!$15) {
        break label$71
       }
       if (SAFE_HEAP_LOAD_i32_2_U_2($10 + 1002 | 0, 0) >>> 0 < 2) {
        break label$71
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 253 | 0, 0)) {
        break label$71
       }
       $13 = $8 + 60 | 0;
       ImStb__stb_textedit_click_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__2c_20float_2c_20float_29($8, $13, $16, $17);
       $7 = SAFE_HEAP_LOAD_i32_4_4($8, 60);
       label$72 : {
        if (!(SAFE_HEAP_LOAD_i32_1_U_1($10, 1002) & 1)) {
         if ($7) {
          $7 = (SAFE_HEAP_LOAD_i32_2_U_2((SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0) + ($7 << 1) | 0) - 2 | 0, 0) | 0) == 10
         } else {
          $7 = 1
         }
         label$75 : {
          if ($7) {
           if ((SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0) | 0)) {
            break label$75
           }
          }
          ImGuiInputTextState__OnKeyPressed_28int_29($8, 2097164);
         }
         label$77 : {
          if ((SAFE_HEAP_LOAD_i32_4_4($8, 64) | 0) != (SAFE_HEAP_LOAD_i32_4_4($8, 68) | 0)) {
           break label$77
          }
          $9 = SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0);
          $7 = SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0);
          if (($9 | 0) == ($7 | 0)) {
           $7 = SAFE_HEAP_LOAD_i32_4_4($8, 60);
           SAFE_HEAP_STORE_i32_4_4($8, 68, $7);
           SAFE_HEAP_STORE_i32_4_4($8, 64, $7);
           break label$77;
          }
          SAFE_HEAP_STORE_i32_4_4($13, 0, $7);
         }
         $9 = SAFE_HEAP_LOAD_i32_4_4($8, 60);
         $7 = $9 + 1 | 0;
         $12 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
         label$1 : {
          if (($7 | 0) >= ($12 | 0)) {
           break label$1
          }
          $44 = SAFE_HEAP_LOAD_i32_4_4($8, 3696) & 32768;
          label$30 : {
           while (1) {
            $15 = $9;
            $9 = $7;
            label$5 : {
             if ($44) {
              break label$5
             }
             if (($15 | 0) < 0) {
              break label$30
             }
             label$61 : {
              label$73 : {
               $31 = SAFE_HEAP_LOAD_i32_4_4($8, 20);
               $7 = SAFE_HEAP_LOAD_i32_2_U_2($31 + ($15 << 1) | 0, 0);
               switch ($7 - 9 | 0) {
               case 0:
               case 1:
               case 4:
               case 23:
               case 31:
               case 32:
               case 35:
               case 50:
               case 82:
               case 84:
               case 114:
               case 115:
               case 116:
                break label$5;
               case 2:
               case 3:
               case 5:
               case 6:
               case 7:
               case 8:
               case 9:
               case 10:
               case 11:
               case 12:
               case 13:
               case 14:
               case 15:
               case 16:
               case 17:
               case 18:
               case 19:
               case 20:
               case 21:
               case 22:
               case 24:
               case 25:
               case 26:
               case 27:
               case 28:
               case 29:
               case 30:
               case 33:
               case 34:
               case 36:
               case 37:
               case 38:
               case 39:
               case 40:
               case 41:
               case 42:
               case 43:
               case 44:
               case 45:
               case 46:
               case 47:
               case 48:
               case 49:
               case 51:
               case 52:
               case 53:
               case 54:
               case 55:
               case 56:
               case 57:
               case 58:
               case 59:
               case 60:
               case 61:
               case 62:
               case 63:
               case 64:
               case 65:
               case 66:
               case 67:
               case 68:
               case 69:
               case 70:
               case 71:
               case 72:
               case 73:
               case 74:
               case 75:
               case 76:
               case 77:
               case 78:
               case 79:
               case 80:
               case 81:
               case 83:
               case 85:
               case 86:
               case 87:
               case 88:
               case 89:
               case 90:
               case 91:
               case 92:
               case 93:
               case 94:
               case 95:
               case 96:
               case 97:
               case 98:
               case 99:
               case 100:
               case 101:
               case 102:
               case 103:
               case 104:
               case 105:
               case 106:
               case 107:
               case 108:
               case 109:
               case 110:
               case 111:
               case 112:
               case 113:
                break label$61;
               default:
                break label$73;
               };
              }
              if (($7 | 0) == 12288) {
               break label$5
              }
             }
             label$8 : {
              $7 = $9;
              $15 = SAFE_HEAP_LOAD_i32_2_U_2(($7 << 1) + $31 | 0, 0);
              switch ($15 - 9 | 0) {
              case 0:
              case 1:
              case 4:
              case 23:
              case 31:
              case 32:
              case 35:
              case 50:
              case 82:
              case 84:
              case 114:
              case 115:
              case 116:
               break label$1;
              case 2:
              case 3:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 33:
              case 34:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 83:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
               break label$5;
              default:
               break label$8;
              };
             }
             if (($15 | 0) == 12288) {
              break label$30
             }
            }
            $7 = $9 + 1 | 0;
            if (($12 | 0) != ($7 | 0)) {
             continue
            }
            break;
           };
           $7 = $12;
           break label$1;
          }
          $7 = $9;
         }
         $7 = ($7 | 0) < ($12 | 0) ? $7 : $12;
         SAFE_HEAP_STORE_i32_4_4($8, 68, $7);
         SAFE_HEAP_STORE_i32_4_4($8, 60, $7);
         $9 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
         $7 = $13;
         $12 = SAFE_HEAP_LOAD_i32_4_4($7, 4);
         $13 = SAFE_HEAP_LOAD_i32_4_4($7, 8);
         label$10 : {
          if (($12 | 0) == ($13 | 0)) {
           break label$10
          }
          if (($9 | 0) < ($12 | 0)) {
           SAFE_HEAP_STORE_i32_4_4($7, 4, $9)
          }
          if (($9 | 0) < ($13 | 0)) {
           SAFE_HEAP_STORE_i32_4_4($7, 8, $9)
          }
          $12 = SAFE_HEAP_LOAD_i32_4_4($7, 4);
          if ((SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0) != ($12 | 0)) {
           break label$10
          }
          SAFE_HEAP_STORE_i32_4_4($7, 0, $12);
         }
         if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) > ($9 | 0)) {
          SAFE_HEAP_STORE_i32_4_4($7, 0, $9)
         }
         break label$72;
        }
        $7 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0) + ($7 << 1) | 0, 0);
        ImGuiInputTextState__OnKeyPressed_28int_29($8, 2097156);
        ImGuiInputTextState__OnKeyPressed_28int_29($8, 6291461);
        ImGuiInputTextState__OnKeyPressed_28int_29($8, 6291457);
        if (!(!$22 | ($7 & 65535) == 10)) {
         $7 = $8 + 68 | 0;
         $9 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
         $13 = $7;
         $7 = $8 - -64 | 0;
         $12 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
         SAFE_HEAP_STORE_i32_4_4($13, 0, $12);
         SAFE_HEAP_STORE_i32_4_4($7, 0, $9);
         SAFE_HEAP_STORE_i32_4_4($8, 60, $12);
        }
        SAFE_HEAP_STORE_i32_1_1($8, 3692, 0);
       }
       SAFE_HEAP_STORE_i32_4_4($8, 3688, -1097229926);
       break label$69;
      }
      label$80 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 992 | 0, 0)) {
        break label$80
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($8, 3693)) {
        break label$80
       }
       if (!$15) {
        break label$69
       }
       ImStb__stb_textedit_click_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__2c_20float_2c_20float_29($8, $8 + 60 | 0, $16, $17);
       SAFE_HEAP_STORE_i32_4_4($8, 3688, -1097229926);
       break label$69;
      }
      if (!($7 & 255)) {
       break label$69
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($8, 3693)) {
       break label$69
      }
      if (SAFE_HEAP_LOAD_f32_4_4($10 + 880 | 0, 0) == Math_fround(0.0)) {
       if (SAFE_HEAP_LOAD_f32_4_4($10 + 884 | 0, 0) == Math_fround(0.0)) {
        break label$69
       }
      }
      $12 = $8 + 60 | 0;
      label$11 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($12, 23)) {
        break label$11
       }
       $7 = SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0);
       $13 = $7 + (SAFE_HEAP_LOAD_i32_4_4($8, 4) << 1) | 0;
       while (1) {
        $9 = $7;
        if ($13 >>> 0 <= $7 >>> 0) {
         $17 = Math_fround(0.0);
         break label$11;
        }
        $7 = $9 + 2 | 0;
        $17 = Math_fround(0.0);
        if ((SAFE_HEAP_LOAD_i32_2_U_2($9, 0) | 0) != 10) {
         continue
        }
        break;
       };
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($12, 4) | 0) == (SAFE_HEAP_LOAD_i32_4_4($12, 8) | 0)) {
       SAFE_HEAP_STORE_i32_4_4($12, 4, SAFE_HEAP_LOAD_i32_4_4($12, 0))
      }
      $7 = ImStb__stb_text_locate_coord_28ImGuiInputTextState__2c_20float_2c_20float_29($8, $16, $17);
      SAFE_HEAP_STORE_i32_4_4($12, 0, $7);
      SAFE_HEAP_STORE_i32_4_4($12, 8, $7);
      SAFE_HEAP_STORE_i32_1_1($8, 3692, 1);
      SAFE_HEAP_STORE_i32_4_4($8, 3688, -1097229926);
     }
     label$82 : {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 3693)) {
       break label$82
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($10, 236)) {
       break label$82
      }
      SAFE_HEAP_STORE_i32_1_1($8, 3693, 0);
     }
     $9 = $5 & 1024;
     label$83 : {
      label$84 : {
       label$85 : {
        if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 252 | 0, 0)) {
         $12 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 254 | 0, 0);
         $7 = !$12;
         if ($29 & 255) {
          break label$85
         }
         break label$83;
        }
        if ($29 & 255) {
         break label$84
        }
        $7 = 0;
        break label$83;
       }
       if (!$12) {
        break label$83
       }
      }
      $7 = (SAFE_HEAP_LOAD_i32_1_U_1($10 + 255 | 0, 0) | 0) != 0;
     }
     $12 = $7;
     label$87 : {
      if (!$9) {
       break label$87
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 52 | 0, 0);
      if (($7 | 0) >= 0) {
       $7 = ImGui__IsKeyPressed_28int_2c_20bool_29($7, 1)
      } else {
       $7 = 0
      }
      if ($25 | ($12 | $7 ^ 1)) {
       break label$87
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 253 | 0, 0) & 255) {
       break label$87
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($10 + 5412 | 0, 0);
      $13 = $9 + (SAFE_HEAP_LOAD_i32_4_4($10 + 5404 | 0, 0) << 1) | 0;
      label$89 : {
       while (1) {
        $7 = $9;
        if ($7 >>> 0 >= $13 >>> 0) {
         break label$89
        }
        $9 = $7 + 2 | 0;
        if ((SAFE_HEAP_LOAD_i32_2_U_2($7, 0) | 0) != 9) {
         continue
        }
        break;
       };
       if ($7 >>> 0 < $13 >>> 0) {
        break label$87
       }
      }
      SAFE_HEAP_STORE_i32_4_4($11, 88, 9);
      if (!InputTextFilterCharacter_28unsigned_20int__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__2c_20ImGuiInputSource_29($11 + 88 | 0, $5, $6, 2)) {
       break label$87
      }
      ImGuiInputTextState__OnKeyPressed_28int_29($8, SAFE_HEAP_LOAD_i32_4_4($11, 88));
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($10 + 5404 | 0, 0) | 0) > 0) {
      label$92 : {
       if ($19 | ($12 | $25)) {
        break label$92
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($10, 5404) | 0) <= 0) {
        break label$92
       }
       $7 = 0;
       while (1) {
        $9 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($10, 5412) + ($7 << 1) | 0, 0);
        SAFE_HEAP_STORE_i32_4_4($11, 88, $9);
        label$94 : {
         if (($9 | 0) == 9) {
          if (SAFE_HEAP_LOAD_i32_1_U_1($10, 253)) {
           break label$94
          }
         }
         if (!InputTextFilterCharacter_28unsigned_20int__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__2c_20ImGuiInputSource_29($11 + 88 | 0, $5, $6, 2)) {
          break label$94
         }
         ImGuiInputTextState__OnKeyPressed_28int_29($8, SAFE_HEAP_LOAD_i32_4_4($11, 88));
        }
        $7 = $7 + 1 | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($10, 5404) | 0) > ($7 | 0)) {
         continue
        }
        break;
       };
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($10 + 5408 | 0, 0);
      label$96 : {
       if (($7 | 0) >= 0) {
        break label$96
       }
       $9 = $7 + (($7 | 0) / 2 | 0) | 0;
       $9 = ($9 | 0) > 0 ? $9 : 0;
       if (($7 | 0) >= ($9 | 0)) {
        break label$96
       }
       $7 = ImGui__MemAlloc_28unsigned_20long_29($9 << 1);
       $12 = SAFE_HEAP_LOAD_i32_4_4($10 + 5412 | 0, 0);
       if ($12) {
        __memcpy($7, $12, SAFE_HEAP_LOAD_i32_4_4($10, 5404) << 1);
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($10, 5412));
       }
       SAFE_HEAP_STORE_i32_4_4($10, 5408, $9);
       SAFE_HEAP_STORE_i32_4_4($10, 5412, $7);
      }
      SAFE_HEAP_STORE_i32_4_4($10, 5404, 0);
     }
    } else {
     $30 = 0
    }
    $44 = $30;
    label$98 : {
     label$99 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) != ($24 | 0)) {
       break label$99
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($10, 7148) | $4) {
       break label$99
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      SAFE_HEAP_LOAD_i32_1_U_1($7 + 252 | 0, 0);
      SAFE_HEAP_LOAD_i32_1_U_1($7 + 253 | 0, 0);
      SAFE_HEAP_LOAD_i32_1_U_1($7 + 254 | 0, 0);
      SAFE_HEAP_LOAD_i32_1_U_1($7 + 255 | 0, 0);
      $9 = $8 + 76 | 0;
      $17 = Math_fround(Math_fround($34 - SAFE_HEAP_LOAD_f32_4_4($10, 5480)) / SAFE_HEAP_LOAD_f32_4_4($10, 6468));
      label$100 : {
       if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
        $7 = ~~$17;
        break label$100;
       }
       $7 = -2147483648;
      }
      $30 = ($7 | 0) <= 1 ? 1 : $7;
      SAFE_HEAP_STORE_i32_4_4($9, 0, $30);
      $19 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 177 | 0, 0);
      if ($19) {
       $31 = (SAFE_HEAP_LOAD_i32_4_4($10, 892) | 0) == 10
      } else {
       $31 = 0
      }
      $7 = $10 + 253 | 0;
      $9 = ($19 ? 254 : 252) + $10 | 0;
      label$103 : {
       if (!$19) {
        $13 = 1;
        $15 = 0;
        break label$103;
       }
       label$105 : {
        if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 255 | 0, 0)) {
         break label$105
        }
        if (SAFE_HEAP_LOAD_i32_1_U_1($10, 252)) {
         break label$105
        }
        $13 = 8;
        $15 = !SAFE_HEAP_LOAD_i32_1_U_1($10, 254);
        break label$103;
       }
       $13 = 8;
       $15 = 0;
      }
      $23 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0);
      $29 = SAFE_HEAP_LOAD_i32_1_U_1($9, 0);
      label$106 : {
       label$107 : {
        label$108 : {
         $9 = SAFE_HEAP_LOAD_i32_4_4($10, 892);
         $12 = ($9 | 0) != ($13 | 0);
         label$109 : {
          if ($12) {
           break label$109
          }
          $7 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 128 | 0, 0);
          if (($7 | 0) < 0) {
           break label$109
          }
          if (ImGui__IsKeyPressed_28int_2c_20bool_29($7, 1)) {
           break label$108
          }
         }
         $13 = 0;
         if (($9 | 0) != 2) {
          break label$106
         }
         $7 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 92 | 0, 0);
         if (($7 | 0) >= 0) {
          $7 = ImGui__IsKeyPressed_28int_2c_20bool_29($7, 1)
         } else {
          $7 = 0
         }
         $7 = $7 ^ 1 | ($20 | 0) != 0 | ($25 | 0) != 0;
         $13 = $7 ^ 1;
         if ($7) {
          break label$106
         }
         if ($22) {
          break label$107
         }
         break label$106;
        }
        $7 = $20 | $25;
        $13 = !$7;
        if ($7 | !$22) {
         break label$106
        }
       }
       $13 = (SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0) | 0);
      }
      $7 = $13;
      label$113 : {
       label$114 : {
        label$115 : {
         label$116 : {
          label$117 : {
           if ($12) {
            break label$117
           }
           $13 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 120 | 0, 0);
           if (($13 | 0) < 0) {
            break label$117
           }
           if (ImGui__IsKeyPressed_28int_2c_20bool_29($13, 1)) {
            break label$116
           }
          }
          $13 = 0;
          if (($9 | 0) != 1) {
           break label$113
          }
          $13 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 88 | 0, 0);
          if (($13 | 0) >= 0) {
           $13 = ImGui__IsKeyPressed_28int_2c_20bool_29($13, 1)
          } else {
           $13 = 0
          }
          $13 = $13 & $33;
          if ($22) {
           break label$115
          }
          break label$113;
         }
         if (($5 & 67141632) == 67108864) {
          break label$114
         }
         $13 = !$20;
         break label$113;
        }
        if (!$13) {
         break label$113
        }
       }
       $13 = (SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0) | 0);
      }
      label$119 : {
       label$120 : {
        label$121 : {
         if ($12) {
          break label$121
         }
         $20 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 124 | 0, 0);
         if (($20 | 0) < 0) {
          break label$121
         }
         if (ImGui__IsKeyPressed_28int_2c_20bool_29($20, 1)) {
          break label$120
         }
        }
        $33 = 0;
        if (($9 | 0) != 2) {
         break label$119
        }
        $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 88 | 0, 0);
        $33 = 0;
        if (($9 | 0) < 0) {
         break label$119
        }
        $33 = 0;
        if (!ImGui__IsKeyPressed_28int_2c_20bool_29($9, 1)) {
         break label$119
        }
       }
       $33 = !$25;
      }
      $9 = $5 & 65536;
      if ($12) {
       $20 = 0
      } else {
       $26 = !$9;
       $20 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 136 | 0, 0);
       if (($20 | 0) >= 0) {
        $20 = ImGui__IsKeyPressed_28int_2c_20bool_29($20, 1)
       } else {
        $20 = 0
       }
       $20 = $26 & ($20 & !$25);
      }
      label$125 : {
       label$126 : {
        label$127 : {
         if ($12) {
          break label$127
         }
         $45 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 132 | 0, 0);
         if (($45 | 0) < 0) {
          break label$127
         }
         if (ImGui__IsKeyPressed_28int_2c_20bool_29($45, 1)) {
          break label$126
         }
        }
        $26 = 0;
        if (!$31) {
         break label$125
        }
        $31 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 136 | 0, 0);
        $26 = 0;
        if (($31 | 0) < 0) {
         break label$125
        }
        $26 = 0;
        if (!ImGui__IsKeyPressed_28int_2c_20bool_29($31, 1)) {
         break label$125
        }
       }
       $26 = !($9 | $25);
      }
      $31 = $26;
      $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 104 | 0, 0);
      label$129 : {
       if (($9 | 0) >= 0) {
        $26 = 1;
        if (ImGui__IsKeyPressed_28int_2c_20bool_29($9, 1)) {
         break label$129
        }
       }
       $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 112 | 0, 0);
       $26 = 0;
       if (($9 | 0) < 0) {
        break label$129
       }
       $26 = ImGui__IsKeyPressed_28int_2c_20bool_29($9, 1);
      }
      $45 = $26;
      label$131 : {
       if (ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(0, 1) > Math_fround(0.0)) {
        $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 100 | 0, 0);
        $26 = 1;
        if (($9 | 0) < 0) {
         break label$131
        }
        $26 = 1;
        if (!ImGui__IsKeyPressed_28int_2c_20bool_29($9, 1)) {
         break label$131
        }
       }
       $26 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(2, 1) > Math_fround(0.0);
      }
      $51 = $26;
      $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 108 | 0, 0);
      label$134 : {
       if (($9 | 0) >= 0) {
        $26 = 1;
        if (ImGui__IsKeyPressed_28int_2c_20bool_29($9, 1)) {
         break label$134
        }
       }
       $26 = ImGui__GetNavInputAmount_28int_2c_20ImGuiInputReadMode_29(1, 1) > Math_fround(0.0);
      }
      $9 = $23 << 22;
      label$136 : {
       label$141 : {
        $23 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 56 | 0, 0);
        if (($23 | 0) < 0) {
         break label$141
        }
        if (!ImGui__IsKeyPressed_28int_2c_20bool_29($23, 1)) {
         break label$141
        }
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | ($15 ? 2097156 : $29 & 255 ? 2097164 : 2097152));
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       label$142 : {
        $23 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 60 | 0, 0);
        if (($23 | 0) < 0) {
         break label$142
        }
        if (!ImGui__IsKeyPressed_28int_2c_20bool_29($23, 1)) {
         break label$142
        }
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | ($15 ? 2097157 : $29 & 255 ? 2097165 : 2097153));
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       $47 = !$22;
       $23 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) - -64 | 0, 0);
       if (($23 | 0) >= 0) {
        $23 = ImGui__IsKeyPressed_28int_2c_20bool_29($23, 1)
       } else {
        $23 = 0
       }
       if (!($47 | !$23)) {
        if (SAFE_HEAP_LOAD_i32_1_U_1($10, 252)) {
         $17 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($32 + 92 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($10, 6468));
         ImGui__SetScrollY_28ImGuiWindow__2c_20float_29($32, $17 >= Math_fround(0.0) ? $17 : Math_fround(0.0));
         $9 = 0;
         $7 = 0;
         break label$136;
        }
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | ($15 ? 2097158 : 2097154));
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       $47 = !$22;
       $23 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 68 | 0, 0);
       if (($23 | 0) >= 0) {
        $23 = ImGui__IsKeyPressed_28int_2c_20bool_29($23, 1)
       } else {
        $23 = 0
       }
       if (!($47 | !$23)) {
        if (SAFE_HEAP_LOAD_i32_1_U_1($10, 252)) {
         $17 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($32 + 92 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($10, 6468));
         $16 = ImGui__GetScrollMaxY_28_29();
         ImGui__SetScrollY_28ImGuiWindow__2c_20float_29($32, $16 > $17 ? $17 : $16);
         $9 = 0;
         $7 = 0;
         break label$136;
        }
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | ($15 ? 2097159 : 2097155));
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       $23 = !$22;
       $15 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 72 | 0, 0);
       if (($15 | 0) >= 0) {
        $15 = ImGui__IsKeyPressed_28int_2c_20bool_29($15, 1)
       } else {
        $15 = 0
       }
       if (!($23 | !$15)) {
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | 2097166);
        $9 = 0;
        $14 = Math_fround($14 - Math_fround(Math_fround($30 | 0) * SAFE_HEAP_LOAD_f32_4_4($10, 6468)));
        $7 = 0;
        break label$136;
       }
       $23 = !$22;
       $15 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 76 | 0, 0);
       if (($15 | 0) >= 0) {
        $15 = ImGui__IsKeyPressed_28int_2c_20bool_29($15, 1)
       } else {
        $15 = 0
       }
       if (!($23 | !$15)) {
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | 2097167);
        $9 = 0;
        $14 = Math_fround(Math_fround(Math_fround($30 | 0) * SAFE_HEAP_LOAD_f32_4_4($10, 6468)) + $14);
        $7 = 0;
        break label$136;
       }
       label$153 : {
        $15 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 80 | 0, 0);
        if (($15 | 0) < 0) {
         break label$153
        }
        if (!ImGui__IsKeyPressed_28int_2c_20bool_29($15, 1)) {
         break label$153
        }
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | (SAFE_HEAP_LOAD_i32_1_U_1($10, 252) ? 2097158 : 2097156));
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       label$154 : {
        $15 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 84 | 0, 0);
        if (($15 | 0) < 0) {
         break label$154
        }
        if (!ImGui__IsKeyPressed_28int_2c_20bool_29($15, 1)) {
         break label$154
        }
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | (SAFE_HEAP_LOAD_i32_1_U_1($10, 252) ? 2097159 : 2097157));
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       $15 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 92 | 0, 0);
       if (($15 | 0) >= 0) {
        $15 = ImGui__IsKeyPressed_28int_2c_20bool_29($15, 1)
       } else {
        $15 = 0
       }
       if (!($7 | ($15 ^ 1 | ($25 | 0) != 0))) {
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | 2097160);
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       $15 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 96 | 0, 0);
       if (($15 | 0) >= 0) {
        $15 = ImGui__IsKeyPressed_28int_2c_20bool_29($15, 1)
       } else {
        $15 = 0
       }
       if (!(!$15 | $25)) {
        label$159 : {
         if ((SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0) | 0)) {
          break label$159
         }
         if ($29 & 255) {
          $7 = 6291468
         } else {
          if (!$19) {
           break label$159
          }
          if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 255 | 0, 0)) {
           break label$159
          }
          if (SAFE_HEAP_LOAD_i32_1_U_1($10, 254)) {
           break label$159
          }
          if (SAFE_HEAP_LOAD_i32_1_U_1($10, 252)) {
           break label$159
          }
          $7 = 6291460;
         }
         ImGuiInputTextState__OnKeyPressed_28int_29($8, $7);
        }
        ImGuiInputTextState__OnKeyPressed_28int_29($8, $9 | 2097161);
        $9 = 0;
        $7 = 0;
        break label$136;
       }
       label$137 : {
        label$138 : {
         if ($45) {
          if (!$22) {
           break label$137
          }
          $7 = SAFE_HEAP_LOAD_i32_1_U_1($10, 252);
          label$162 : {
           if ($5 & 2048) {
            if (!($7 & 255)) {
             break label$137
            }
            if (!$25) {
             break label$162
            }
            $9 = 0;
            $7 = 0;
            break label$136;
           }
           $12 = $7 & 255;
           $9 = ($12 | 0) != 0;
           $7 = $9 | $4;
           if ($12 | $25) {
            break label$138
           }
          }
          SAFE_HEAP_STORE_i32_4_4($11, 88, 10);
          if (InputTextFilterCharacter_28unsigned_20int__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__2c_20ImGuiInputSource_29($11 + 88 | 0, $5, $6, 2)) {
           ImGuiInputTextState__OnKeyPressed_28int_29($8, SAFE_HEAP_LOAD_i32_4_4($11, 88))
          }
          $9 = 0;
          $7 = 0;
          break label$136;
         }
         if ($51) {
          $9 = 1;
          $4 = 1;
          $7 = 0;
          break label$136;
         }
         if ($26) {
          $9 = 0;
          $4 = 1;
          $7 = 1;
          break label$136;
         }
         if (($20 | $31) == 1) {
          ImGuiInputTextState__OnKeyPressed_28int_29($8, $20 ? 2097162 : 2097163);
          $7 = SAFE_HEAP_LOAD_i32_4_4($8, 60);
          SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, $7);
          SAFE_HEAP_STORE_i32_4_4($8 - -64 | 0, 0, $7);
          $9 = 0;
          $7 = 0;
          break label$136;
         }
         label$168 : {
          if ($12) {
           break label$168
          }
          $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 116 | 0, 0);
          if (($9 | 0) < 0) {
           break label$168
          }
          if (!ImGui__IsKeyPressed_28int_2c_20bool_29($9, 1)) {
           break label$168
          }
          SAFE_HEAP_STORE_i32_1_1($8, 3692, 1);
          SAFE_HEAP_STORE_i32_4_4($8 - -64 | 0, 0, 0);
          $7 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
          SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, $7);
          SAFE_HEAP_STORE_i32_1_1($8 + 82 | 0, 0, 0);
          SAFE_HEAP_STORE_i32_4_4($8, 60, $7);
          $9 = 0;
          $7 = 0;
          break label$136;
         }
         $20 = $8 + 60 | 0;
         label$169 : {
          if (($7 | $13) == 1) {
           if (SAFE_HEAP_LOAD_i32_4_4($10 + 212 | 0, 0)) {
            $9 = SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0);
            $12 = SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0);
            $13 = ($9 | 0) == ($12 | 0);
            $15 = $13 ? 0 : ($9 | 0) < ($12 | 0) ? $9 : $12;
            if ($13) {
             $9 = SAFE_HEAP_LOAD_i32_4_4($8, 4)
            } else {
             $9 = ($9 | 0) > ($12 | 0) ? $9 : $12
            }
            $12 = $8 + 20 | 0;
            $13 = SAFE_HEAP_LOAD_i32_4_4($12, 0);
            $15 = $15 << 1;
            $19 = $9 << 1;
            $13 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($13 + $15 | 0, $13 + $19 | 0) + 1 | 0;
            $9 = ImGui__MemAlloc_28unsigned_20long_29($13);
            $12 = SAFE_HEAP_LOAD_i32_4_4($12, 0);
            ImTextStrToUtf8_28char__2c_20int_2c_20unsigned_20short_20const__2c_20unsigned_20short_20const__29($9, $13, $12 + $15 | 0, $12 + $19 | 0);
            ImGui__SetClipboardText_28char_20const__29($9);
            ImGui__MemFree_28void__29($9);
           }
           if (!$7) {
            break label$169
           }
           $7 = $8 - -64 | 0;
           $9 = $8 + 68 | 0;
           if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0)) {
            SAFE_HEAP_STORE_i32_4_4($8, 64, 0);
            $12 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
            SAFE_HEAP_STORE_i32_4_4($8, 68, $12);
            SAFE_HEAP_STORE_i32_1_1($8 + 82 | 0, 0, 0);
            SAFE_HEAP_STORE_i32_4_4($8, 60, $12);
           }
           SAFE_HEAP_STORE_i32_1_1($8, 3692, 1);
           if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0)) {
            break label$169
           }
           ImStb__stb_textedit_delete_selection_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__29($8, $20);
           SAFE_HEAP_STORE_i32_1_1($8 + 82 | 0, 0, 0);
           $9 = 0;
           $7 = 0;
           break label$136;
          }
          label$175 : {
           if (!$33) {
            break label$175
           }
           $13 = ImGui__GetClipboardText_28_29();
           if (!$13) {
            break label$175
           }
           $15 = ImGui__MemAlloc_28unsigned_20long_29((strlen($13) << 1) + 2 | 0);
           $9 = 0;
           label$176 : {
            if (!SAFE_HEAP_LOAD_i32_1_U_1($13, 0)) {
             break label$176
            }
            $12 = 0;
            while (1) {
             $7 = $12;
             $19 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($11 + 88 | 0, $13, 0);
             $12 = 5;
             label$178 : {
              if (!SAFE_HEAP_LOAD_i32_4_4($11, 88)) {
               break label$178
              }
              $12 = 6;
              if (!InputTextFilterCharacter_28unsigned_20int__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__2c_20ImGuiInputSource_29($11 + 88 | 0, $5, $6, 5)) {
               break label$178
              }
              SAFE_HEAP_STORE_i32_2_2($15 + ($7 << 1) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($11, 88));
              $7 = $7 + 1 | 0;
              $12 = 0;
             }
             $9 = $7;
             label$181 : {
              switch ($12 | 0) {
              case 0:
              case 6:
               break label$181;
              default:
               break label$176;
              };
             }
             $12 = $7;
             $13 = $13 + $19 | 0;
             if (SAFE_HEAP_LOAD_i32_1_U_1($13, 0)) {
              continue
             }
             break;
            };
           }
           SAFE_HEAP_STORE_i32_2_2($15 + ($9 << 1) | 0, 0, 0);
           if (($9 | 0) > 0) {
            $12 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
            $7 = $20;
            $13 = SAFE_HEAP_LOAD_i32_4_4($7, 4);
            $20 = SAFE_HEAP_LOAD_i32_4_4($7, 8);
            label$12 : {
             if (($13 | 0) == ($20 | 0)) {
              break label$12
             }
             if (($12 | 0) < ($13 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($7, 4, $12)
             }
             if (($12 | 0) < ($20 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($7, 8, $12)
             }
             $13 = SAFE_HEAP_LOAD_i32_4_4($7, 4);
             if ((SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0) != ($13 | 0)) {
              break label$12
             }
             SAFE_HEAP_STORE_i32_4_4($7, 0, $13);
            }
            if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) > ($12 | 0)) {
             SAFE_HEAP_STORE_i32_4_4($7, 0, $12)
            }
            ImStb__stb_textedit_delete_selection_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__29($8, $7);
            if (ImStb__STB_TEXTEDIT_INSERTCHARS_28ImGuiInputTextState__2c_20int_2c_20unsigned_20short_20const__2c_20int_29($8, SAFE_HEAP_LOAD_i32_4_4($7, 0), $15, $9)) {
             ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($7 + 32 | 0, SAFE_HEAP_LOAD_i32_4_4($7, 0), 0, $9);
             SAFE_HEAP_STORE_i32_1_1($7, 22, 0);
             SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) + $9 | 0);
            }
            SAFE_HEAP_STORE_i32_1_1($8, 3692, 1);
           }
           ImGui__MemFree_28void__29($15);
           $9 = 0;
           $7 = 0;
           break label$136;
          }
          $9 = 0;
          $7 = 0;
          break label$136;
         }
         $9 = 0;
         $7 = 0;
         break label$136;
        }
        $4 = $7;
        $7 = 0;
        break label$136;
       }
       $9 = 1;
       $4 = 1;
       $7 = 0;
      }
      $18 = $18 | $36 & (SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0) | 0);
      break label$98;
     }
     $7 = 0;
     $9 = 0;
    }
    $33 = $18;
    $15 = $4;
    $30 = $9;
    $12 = $7;
    $20 = $5 & 262144;
    $7 = 0;
    $9 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) == ($24 | 0)) {
     label$184 : {
      if ($25 | $12 ^ 1) {
       break label$184
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($8 + 44 | 0, 0);
      if (!strcmp($2, $9)) {
       $9 = 0;
       break label$184;
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($8, 36);
      SAFE_HEAP_STORE_i32_4_4($11, 96, 0);
      SAFE_HEAP_STORE_i64_8_4($11, 88, 0, 0);
      $13 = $4 - 1 | 0;
      if (($4 | 0) >= 2) {
       $7 = $9 + $13 | 0;
       ImVector_unsigned_20short___resize_28int_29($11 + 88 | 0, ImTextCountCharsFromUtf8_28char_20const__2c_20char_20const__29($9, $7) + 1 | 0);
       ImTextStrFromUtf8_28unsigned_20short__2c_20int_2c_20char_20const__2c_20char_20const__2c_20char_20const___29(SAFE_HEAP_LOAD_i32_4_4($11, 96), SAFE_HEAP_LOAD_i32_4_4($11, 88), $9, $7, 0);
      }
      $29 = SAFE_HEAP_LOAD_i32_4_4($11, 96);
      $19 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
      $18 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($11, 88) - 1 | 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = ($4 | 0) > 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
      $4 = ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($8 + 92 | 0, 0, $19, $18);
      if (!(!$4 | ($19 | 0) <= 0)) {
       $31 = SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0);
       $7 = 0;
       while (1) {
        $23 = $7 << 1;
        SAFE_HEAP_STORE_i32_2_2($23 + $4 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_2($23 + $31 | 0, 0));
        $7 = $7 + 1 | 0;
        if (($19 | 0) != ($7 | 0)) {
         continue
        }
        break;
       };
      }
      SAFE_HEAP_STORE_i32_1_1($8, 3694, 1);
      $4 = $8 + 20 | 0;
      $7 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
      $19 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
      $31 = $19 << 1;
      $23 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($7, $31 + $7 | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 8, SAFE_HEAP_LOAD_i32_4_4($8, 8) - $23 | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 4, SAFE_HEAP_LOAD_i32_4_4($8, 4) - $19 | 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + $31 | 0;
      while (1) {
       $19 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
       if ($19) {
        SAFE_HEAP_STORE_i32_2_2($7, 0, $19);
        $7 = $7 + 2 | 0;
       }
       $4 = $4 + 2 | 0;
       if ($19) {
        continue
       }
       break;
      };
      SAFE_HEAP_STORE_i32_2_2($7, 0, 0);
      label$193 : {
       if (($18 | 0) <= 0) {
        break label$193
       }
       if (!ImStb__STB_TEXTEDIT_INSERTCHARS_28ImGuiInputTextState__2c_20int_2c_20unsigned_20short_20const__2c_20int_29($8, 0, $29, $18)) {
        break label$193
       }
       SAFE_HEAP_STORE_i32_4_4($8, 60, $18);
       SAFE_HEAP_STORE_i32_1_1($8 + 82 | 0, 0, 0);
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($11, 96);
      if ($4) {
       ImGui__MemFree_28void__29($4)
      }
      $7 = $13;
     }
     label$195 : {
      if (!($5 & 32) | $30 ^ 1 ? $12 : 0) {
       break label$195
      }
      if (!$25) {
       SAFE_HEAP_STORE_i32_1_1($8, 48, 1);
       $4 = SAFE_HEAP_LOAD_i32_4_4($8 + 28 | 0, 0);
       $12 = SAFE_HEAP_LOAD_i32_4_4($8, 12) << 2 | 1;
       label$199 : {
        if (($4 | 0) >= ($12 | 0)) {
         break label$199
        }
        $13 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
        $13 = ($12 | 0) < ($13 | 0) ? $13 : $12;
        if (($4 | 0) >= ($13 | 0)) {
         break label$199
        }
        $4 = ImGui__MemAlloc_28unsigned_20long_29($13);
        $18 = SAFE_HEAP_LOAD_i32_4_4($8 + 32 | 0, 0);
        if ($18) {
         __memcpy($4, $18, SAFE_HEAP_LOAD_i32_4_4($8, 24));
         ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($8, 32));
        }
        SAFE_HEAP_STORE_i32_4_4($8, 28, $13);
        SAFE_HEAP_STORE_i32_4_4($8, 32, $4);
       }
       SAFE_HEAP_STORE_i32_4_4($8, 24, $12);
       ImTextStrToUtf8_28char__2c_20int_2c_20unsigned_20short_20const__2c_20unsigned_20short_20const__29(SAFE_HEAP_LOAD_i32_4_4($8 + 32 | 0, 0), $12, SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0), 0);
      }
      label$203 : {
       if (!($5 & 524736)) {
        break label$203
       }
       label$204 : {
        label$205 : {
         if (!($5 & 64)) {
          break label$205
         }
         $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 52 | 0, 0);
         if (($4 | 0) < 0) {
          break label$205
         }
         if (!ImGui__IsKeyPressed_28int_2c_20bool_29($4, 1)) {
          break label$205
         }
         $12 = 64;
         $13 = 0;
         $4 = 0;
         break label$204;
        }
        label$206 : {
         if (!($5 & 128)) {
          break label$206
         }
         label$207 : {
          $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) - -64 | 0, 0);
          if (($4 | 0) < 0) {
           break label$207
          }
          if (!ImGui__IsKeyPressed_28int_2c_20bool_29($4, 1)) {
           break label$207
          }
          $12 = 128;
          $13 = 3;
          $4 = 0;
          break label$204;
         }
         $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 68 | 0, 0);
         if (($4 | 0) < 0) {
          break label$206
         }
         if (!ImGui__IsKeyPressed_28int_2c_20bool_29($4, 1)) {
          break label$206
         }
         $12 = 128;
         $13 = 4;
         $4 = 0;
         break label$204;
        }
        label$208 : {
         if (!($5 & 524288)) {
          break label$208
         }
         if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 3694)) {
          break label$208
         }
         $12 = 524288;
         $13 = 22;
         $4 = 0;
         break label$204;
        }
        $13 = 22;
        $12 = $5 & 256;
        $4 = !$12;
       }
       if ($4) {
        break label$203
       }
       $4 = $11 + 88 | 0;
       ImGuiInputTextCallbackData__ImGuiInputTextCallbackData_28_29($4);
       $18 = $11 + 96 | 0;
       SAFE_HEAP_STORE_i64_8_8($18, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($11 + 128 | 0, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($4 + 32 | 0, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($11 + 112 | 0, 0, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($11 + 104 | 0, 0, 0, 0);
       SAFE_HEAP_STORE_i32_4_4($18, 0, 0);
       SAFE_HEAP_STORE_i64_8_8($11, 88, 0, 0);
       SAFE_HEAP_STORE_i32_4_4($11, 92, $5);
       SAFE_HEAP_STORE_i32_4_4($11, 88, $12);
       if ($25) {
        $4 = $2
       } else {
        $4 = SAFE_HEAP_LOAD_i32_4_4($8 + 32 | 0, 0)
       }
       SAFE_HEAP_STORE_i32_4_4($11, 108, $4);
       SAFE_HEAP_STORE_i32_4_4($11, 104, $13);
       SAFE_HEAP_STORE_i32_4_4($11, 112, SAFE_HEAP_LOAD_i32_4_4($8, 8));
       $4 = SAFE_HEAP_LOAD_i32_4_4($8, 52);
       SAFE_HEAP_STORE_i32_1_1($11, 120, 0);
       SAFE_HEAP_STORE_i32_4_4($11, 116, $4);
       $4 = SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0);
       $13 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($4, $4 + (SAFE_HEAP_LOAD_i32_4_4($8, 60) << 1) | 0);
       SAFE_HEAP_STORE_i32_4_4($11, 124, $13);
       $18 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($4, $4 + (SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0) << 1) | 0);
       SAFE_HEAP_STORE_i32_4_4($11, 128, $18);
       $19 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($4, $4 + (SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0) << 1) | 0);
       SAFE_HEAP_STORE_i32_4_4($11, 132, $19);
       FUNCTION_TABLE[$6 | 0]($11 + 88 | 0) | 0;
       $12 = SAFE_HEAP_LOAD_i32_4_4($11, 124);
       $4 = SAFE_HEAP_LOAD_i32_1_U_1($11, 120);
       if (!(!$4 & ($12 | 0) == ($13 | 0))) {
        $13 = SAFE_HEAP_LOAD_i32_4_4($11, 108);
        $12 = ImTextCountCharsFromUtf8_28char_20const__2c_20char_20const__29($13, $12 + $13 | 0);
        SAFE_HEAP_STORE_i32_1_1($8, 3692, 1);
        SAFE_HEAP_STORE_i32_4_4($8, 60, $12);
       }
       $12 = SAFE_HEAP_LOAD_i32_4_4($11, 128);
       if (!(!$4 & ($12 | 0) == ($18 | 0))) {
        label$214 : {
         if ((SAFE_HEAP_LOAD_i32_4_4($11, 124) | 0) == ($12 | 0)) {
          $12 = SAFE_HEAP_LOAD_i32_4_4($8, 60);
          break label$214;
         }
         $13 = SAFE_HEAP_LOAD_i32_4_4($11, 108);
         $12 = ImTextCountCharsFromUtf8_28char_20const__2c_20char_20const__29($13, $12 + $13 | 0);
        }
        SAFE_HEAP_STORE_i32_4_4($8, 64, $12);
       }
       $12 = SAFE_HEAP_LOAD_i32_4_4($11, 132);
       if (!(!$4 & ($12 | 0) == ($19 | 0))) {
        label$218 : {
         if ((SAFE_HEAP_LOAD_i32_4_4($11, 128) | 0) == ($12 | 0)) {
          $12 = SAFE_HEAP_LOAD_i32_4_4($8, 64);
          break label$218;
         }
         $13 = SAFE_HEAP_LOAD_i32_4_4($11, 108);
         $12 = ImTextCountCharsFromUtf8_28char_20const__2c_20char_20const__29($13, $12 + $13 | 0);
        }
        SAFE_HEAP_STORE_i32_4_4($8, 68, $12);
       }
       if (!$4) {
        break label$203
       }
       label$220 : {
        if (!$20) {
         break label$220
        }
        $4 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
        if (($4 | 0) <= ($44 | 0)) {
         break label$220
        }
        $12 = $8 + 12 | 0;
        ImVector_unsigned_20short___resize_28int_29($12, SAFE_HEAP_LOAD_i32_4_4($12, 0) + ($4 - $44 | 0) | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($8, 4, ImTextStrFromUtf8_28unsigned_20short__2c_20int_2c_20char_20const__2c_20char_20const__2c_20char_20const___29(SAFE_HEAP_LOAD_i32_4_4($8, 20), SAFE_HEAP_LOAD_i32_4_4($8, 12), SAFE_HEAP_LOAD_i32_4_4($11, 108), 0, 0));
       $4 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
       SAFE_HEAP_STORE_i32_4_4($8, 3688, -1097229926);
       SAFE_HEAP_STORE_i32_4_4($8, 8, $4);
      }
      if ($25) {
       break label$195
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($8 + 32 | 0, 0);
      if (!strcmp($4, $2)) {
       break label$195
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($8, 8);
      $9 = $4;
     }
     SAFE_HEAP_STORE_i32_4_4($8, 3696, 0);
    }
    $29 = $9;
    label$221 : {
     if (!$9) {
      $7 = $2;
      break label$221;
     }
     label$223 : {
      if (!$20) {
       $9 = $7;
       $4 = $3;
       break label$223;
      }
      $4 = $11 + 88 | 0;
      ImGuiInputTextCallbackData__ImGuiInputTextCallbackData_28_29($4);
      SAFE_HEAP_STORE_i32_4_4($11, 108, $2);
      SAFE_HEAP_STORE_i32_4_4($11, 92, $5);
      SAFE_HEAP_STORE_i32_4_4($11, 88, 262144);
      SAFE_HEAP_STORE_i32_4_4($11, 96, 0);
      SAFE_HEAP_STORE_i32_4_4($11, 112, $7);
      $2 = $7 + 1 | 0;
      SAFE_HEAP_STORE_i32_4_4($11, 116, ($2 | 0) < ($3 | 0) ? $3 : $2);
      FUNCTION_TABLE[$6 | 0]($4) | 0;
      $2 = SAFE_HEAP_LOAD_i32_4_4($11, 112);
      $4 = SAFE_HEAP_LOAD_i32_4_4($11, 116);
      $3 = $4 - 1 | 0;
      $9 = ($2 | 0) < ($3 | 0) ? $2 : $3;
      $2 = SAFE_HEAP_LOAD_i32_4_4($11, 108);
     }
     $7 = $2;
     $2 = $9 + 1 | 0;
     ImStrncpy_28char__2c_20char_20const__2c_20unsigned_20long_29($7, $29, ($2 | 0) < ($4 | 0) ? $2 : $4);
    }
    label$225 : {
     if (!$15) {
      break label$225
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) != ($24 | 0)) {
      break label$225
     }
     ImGui__ClearActiveID_28_29();
    }
    if (!$22) {
     ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($11 + 152 | 0, $24, 1);
     SAFE_HEAP_STORE_i64_8_8($11, 80, SAFE_HEAP_LOAD_i64_8_8($11, 152), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($11, 72, SAFE_HEAP_LOAD_i64_8_8($11, 160), i64toi32_i32$HIGH_BITS);
     $2 = ImGui__GetColorU32_28int_2c_20float_29(7, Math_fround(1.0));
     $17 = SAFE_HEAP_LOAD_f32_4_4($10 + 5484 | 0, 0);
     SAFE_HEAP_STORE_i64_8_8($11, 16, SAFE_HEAP_LOAD_i64_8_8($11, 80), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($11, 8, SAFE_HEAP_LOAD_i64_8_8($11, 72), i64toi32_i32$HIGH_BITS);
     ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($11 + 16 | 0, $11 + 8 | 0, $2, 1, $17);
    }
    $17 = SAFE_HEAP_LOAD_f32_4_4($11, 156);
    SAFE_HEAP_STORE_f32_4_4($11, 60, $17);
    $16 = SAFE_HEAP_LOAD_f32_4_4($11, 152);
    SAFE_HEAP_STORE_f32_4_4($11, 56, $16);
    SAFE_HEAP_STORE_f32_4_4($11, 68, Math_fround($34 + $17));
    SAFE_HEAP_STORE_f32_4_4($11, 64, Math_fround($35 + $16));
    label$227 : {
     if ($22) {
      SAFE_HEAP_STORE_i64_8_8($11, 48, SAFE_HEAP_LOAD_i64_8_4($32, 208), i64toi32_i32$HIGH_BITS);
      break label$227;
     }
     $21 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($11, 48, Math_fround($16 + SAFE_HEAP_LOAD_f32_4_4($10, 5476)));
     SAFE_HEAP_STORE_f32_4_4($11, 52, Math_fround($17 + $21));
    }
    if ($28) {
     $7 = SAFE_HEAP_LOAD_i32_4_4($8 + 32 | 0, 0)
    }
    $41 = $14;
    $9 = 0;
    if ($40) {
     $9 = strlen($1) + $1 | 0
    } else {
     $1 = $7
    }
    $15 = $1;
    $7 = $9;
    label$231 : {
     label$232 : {
      label$233 : {
       if (($36 | $33) == 1) {
        if (!$40) {
         $7 = SAFE_HEAP_LOAD_i32_4_4($8, 8) + $15 | 0
        }
        $18 = $7;
        $28 = SAFE_HEAP_LOAD_i32_4_4($8 + 20 | 0, 0);
        $7 = 0;
        $9 = -1e3;
        $4 = 0;
        if ($36) {
         $7 = $28 + (SAFE_HEAP_LOAD_i32_4_4($8, 60) << 1) | 0;
         $9 = -1;
         $4 = 1;
        }
        $20 = $7;
        label$237 : {
         if (!$33) {
          $7 = 0;
          $3 = $4;
          $1 = -1e3;
          break label$237;
         }
         $1 = SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0);
         $2 = SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0);
         $7 = $28 + ((($1 | 0) < ($2 | 0) ? $1 : $2) << 1) | 0;
         $3 = $4 + 1 | 0;
         $1 = -1;
        }
        $19 = $7;
        $7 = $1;
        $4 = $9;
        $12 = ($22 >>> 26 | 0) + $3 | 0;
        $6 = 0;
        $1 = $28;
        while (1) {
         $3 = $4;
         $2 = $7;
         $13 = $4;
         $9 = $6;
         label$240 : {
          switch (SAFE_HEAP_LOAD_i32_2_U_2($1, 0) | 0) {
          case 10:
           $6 = $6 + 1 | 0;
           label$242 : {
            if (($4 | 0) != -1) {
             $7 = $12;
             $3 = $4;
             break label$242;
            }
            if ($1 >>> 0 < $20 >>> 0) {
             $7 = $12;
             $3 = -1;
             break label$242;
            }
            if (($12 | 0) < 2) {
             $13 = $6;
             break label$233;
            }
            $7 = $12 - 1 | 0;
            $3 = $6;
           }
           label$246 : {
            label$247 : {
             if (($2 | 0) != -1) {
              break label$247
             }
             if ($1 >>> 0 < $19 >>> 0) {
              $2 = -1;
              break label$247;
             }
             if (($7 | 0) < 2) {
              $7 = $6;
              $13 = $3;
              break label$233;
             }
             $2 = $6;
             $7 = $7 - 1 | 0;
             break label$246;
            }
           }
           $12 = $7;
           break;
          case 0:
           break label$232;
          default:
           break label$240;
          };
         }
         $7 = $2;
         $4 = $3;
         $1 = $1 + 2 | 0;
         continue;
        };
       }
       label$251 : {
        if ($22) {
         $2 = $15;
         $7 = 0;
         while (1) {
          $12 = $7;
          $9 = 0;
          label$254 : {
           label$255 : {
            label$256 : {
             $1 = $2;
             $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
             switch ($3 | 0) {
             case 0:
              break label$254;
             case 10:
              break label$256;
             default:
              break label$255;
             };
            }
            $12 = $7 + 1 | 0;
           }
           $7 = $12;
           $9 = 1;
          }
          $2 = $1 + 1 | 0;
          if ($9) {
           continue
          }
          break;
         };
         $9 = $7;
         label$257 : {
          switch ($3 - 10 | 0) {
          default:
           $9 = $7 + 1 | 0;
           break;
          case 0:
          case 3:
           break label$257;
          };
         }
         $7 = $1;
         $16 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6468) * Math_fround($9 | 0));
         $14 = $35;
         break label$251;
        }
        label$259 : {
         if ($40) {
          break label$259
         }
         if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) == ($24 | 0)) {
          $7 = SAFE_HEAP_LOAD_i32_4_4($8, 8) + $15 | 0;
          break label$259;
         }
         if ($40) {
          break label$259
         }
         $7 = strlen($15) + $15 | 0;
        }
        $16 = Math_fround(0.0);
        $14 = Math_fround(0.0);
       }
       $9 = 0;
       label$262 : {
        if (!$22) {
         $9 = $11 + 56 | 0;
         if (($7 - $15 | 0) > 2097151) {
          break label$262
         }
        }
        $1 = ImGui__GetColorU32_28int_2c_20float_29($40, Math_fround(1.0));
        ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29(SAFE_HEAP_LOAD_i32_4_4($32, 580), SAFE_HEAP_LOAD_i32_4_4($10, 6464), SAFE_HEAP_LOAD_f32_4_4($10, 6468), $11 + 48 | 0, $1, $15, $7, Math_fround(0.0), $9);
       }
       break label$231;
      }
      $9 = $6;
     }
     $3 = $9 + 1 | 0;
     $4 = ($7 | 0) == -1 ? $3 : $7;
     $17 = Math_fround(0.0);
     $9 = ImStrbolW_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($20, $28);
     if ($20 >>> 0 > $9 >>> 0) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 6464);
      $7 = $2 + 12 | 0;
      $42 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 6468) / SAFE_HEAP_LOAD_f32_4_4($2, 16));
      $21 = Math_fround(0.0);
      $16 = Math_fround(0.0);
      $14 = Math_fround(0.0);
      while (1) {
       $1 = $9 + 2 | 0;
       label$266 : {
        label$267 : {
         label$268 : {
          $6 = SAFE_HEAP_LOAD_i32_2_U_2($9, 0);
          switch ($6 - 10 | 0) {
          case 3:
           break label$266;
          case 0:
           break label$268;
          default:
           break label$267;
          };
         }
         $14 = $16 >= $21 ? $16 : $21;
         $16 = $14;
         $21 = Math_fround(0.0);
         break label$266;
        }
        $21 = Math_fround($21 + Math_fround($42 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 8) + ($6 << 2) | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) > ($6 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0)));
       }
       $27 = $14;
       $17 = $21;
       $9 = $1;
       if ($9 >>> 0 < $20 >>> 0) {
        continue
       }
       break;
      };
     }
     $38 = $17;
     $39 = $27;
     $43 = SAFE_HEAP_LOAD_f32_4_4($10, 6468);
     $14 = Math_fround(0.0);
     $16 = Math_fround(0.0);
     if (($4 | 0) >= 0) {
      $9 = ImStrbolW_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($19, $28);
      label$270 : {
       if ($19 >>> 0 <= $9 >>> 0) {
        $27 = Math_fround(0.0);
        $17 = Math_fround(0.0);
        break label$270;
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 6464);
       $7 = $2 + 12 | 0;
       $42 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 6468) / SAFE_HEAP_LOAD_f32_4_4($2, 16));
       $21 = Math_fround(0.0);
       while (1) {
        $1 = $9 + 2 | 0;
        label$273 : {
         label$274 : {
          label$275 : {
           $6 = SAFE_HEAP_LOAD_i32_2_U_2($9, 0);
           switch ($6 - 10 | 0) {
           case 3:
            break label$273;
           case 0:
            break label$275;
           default:
            break label$274;
           };
          }
          $14 = $16 >= $21 ? $16 : $21;
          $16 = $14;
          $21 = Math_fround(0.0);
          break label$273;
         }
         $21 = Math_fround($21 + Math_fround($42 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 8) + ($6 << 2) | 0, wasm2js_i32$1 = $7, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) > ($6 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0)));
        }
        $27 = $14;
        $17 = $21;
        $9 = $1;
        if ($9 >>> 0 < $19 >>> 0) {
         continue
        }
        break;
       };
      }
      $16 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6468) * Math_fround($4 | 0));
      $14 = $17 > $27 ? $17 : $27;
     }
     $17 = $16;
     $27 = $14;
     $14 = Math_fround(0.0);
     $16 = Math_fround(0.0);
     if ($22) {
      $16 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6468) * Math_fround($3 | 0));
      $14 = $35;
     }
     $42 = $16;
     $52 = $14;
     $38 = $38 > $39 ? $38 : $39;
     $39 = Math_fround($43 * Math_fround((($13 | 0) == -1 ? $3 : $13) | 0));
     label$277 : {
      if (!$36) {
       break label$277
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 3692)) {
       break label$277
      }
      label$278 : {
       if (!($5 & 4096)) {
        $14 = Math_fround($35 * Math_fround(.25));
        $16 = SAFE_HEAP_LOAD_f32_4_4($8, 56);
        if ($38 < $16) {
         $14 = Math_fround($38 - $14);
         $14 = $14 <= Math_fround(0.0) ? Math_fround(0.0) : $14;
         label$281 : {
          if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
           $1 = ~~$14;
           break label$281;
          }
          $1 = -2147483648;
         }
         SAFE_HEAP_STORE_f32_4_4($8, 56, Math_fround($1 | 0));
         break label$278;
        }
        $21 = Math_fround($38 - Math_fround($35 - SAFE_HEAP_LOAD_f32_4_4($10, 5476)));
        if (!($16 <= $21)) {
         break label$278
        }
        $14 = Math_fround($14 + $21);
        label$283 : {
         if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
          $1 = ~~$14;
          break label$283;
         }
         $1 = -2147483648;
        }
        SAFE_HEAP_STORE_f32_4_4($8, 56, Math_fround($1 | 0));
        break label$278;
       }
       SAFE_HEAP_STORE_i32_4_4($8, 56, 0);
      }
      if ($22) {
       $14 = Math_fround($39 - SAFE_HEAP_LOAD_f32_4_4($10, 6468));
       label$286 : {
        if ($41 > $14) {
         $14 = $14 <= Math_fround(0.0) ? Math_fround(0.0) : $14;
         break label$286;
        }
        $14 = $41;
        $16 = SAFE_HEAP_LOAD_f32_4_4($10, 5480);
        $16 = Math_fround($16 + $16);
        if (!($14 <= Math_fround($39 - Math_fround($34 - $16)))) {
         break label$286
        }
        $14 = Math_fround($16 + Math_fround($39 - $34));
       }
       $21 = SAFE_HEAP_LOAD_f32_4_4($11, 52);
       $1 = $32 + 92 | 0;
       $35 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
       $16 = SAFE_HEAP_LOAD_f32_4_4($10, 5480);
       $16 = Math_fround(Math_fround(Math_fround($16 + $16) + $42) - $34);
       $16 = $16 >= Math_fround(0.0) ? $16 : Math_fround(0.0);
       $14 = $14 < Math_fround(0.0) ? Math_fround(0.0) : $14 > $16 ? $16 : $14;
       SAFE_HEAP_STORE_f32_4_4($11, 52, Math_fround($21 + Math_fround($35 - $14)));
       SAFE_HEAP_STORE_f32_4_4($1, 0, $14);
      }
      SAFE_HEAP_STORE_i32_1_1($8, 3692, 0);
     }
     $41 = SAFE_HEAP_LOAD_f32_4_4($8, 56);
     label$288 : {
      if (!$33) {
       break label$288
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($8 + 68 | 0, 0);
      $2 = SAFE_HEAP_LOAD_i32_4_4($8 - -64 | 0, 0);
      $4 = ImGui__GetColorU32_28int_2c_20float_29(47, $36 ? Math_fround(1.0) : Math_fround(.6000000238418579));
      $6 = ($1 | 0) > ($2 | 0) ? $2 : $1;
      $1 = ($1 | 0) < ($2 | 0) ? $2 : $1;
      if (($6 | 0) >= ($1 | 0)) {
       break label$288
      }
      $53 = $22 ? Math_fround(0.0) : Math_fround(2.0);
      $54 = $22 ? Math_fround(0.0) : Math_fround(-1.0);
      $3 = $28 + ($1 << 1) | 0;
      $12 = $11 + 96 | 0;
      $14 = Math_fround($27 + SAFE_HEAP_LOAD_f32_4_4($11, 48));
      $16 = Math_fround($17 + SAFE_HEAP_LOAD_f32_4_4($11, 52));
      $7 = $28 + ($6 << 1) | 0;
      while (1) {
       $34 = SAFE_HEAP_LOAD_f32_4_4($11, 68);
       $48 = SAFE_HEAP_LOAD_f32_4_4($10, 6468);
       if (Math_fround($34 + $48) < $16) {
        break label$288
       }
       $35 = $16;
       $43 = SAFE_HEAP_LOAD_f32_4_4($11, 60);
       label$290 : {
        if ($16 < $43) {
         $9 = $7;
         while (1) {
          $1 = $9;
          if ($3 >>> 0 <= $9 >>> 0) {
           $2 = $1;
           break label$290;
          }
          $9 = $1 + 2 | 0;
          $2 = $9;
          if ((SAFE_HEAP_LOAD_i32_2_U_2($1, 0) | 0) != 10) {
           continue
          }
          break;
         };
         break label$290;
        }
        $37 = Math_fround($14 - $41);
        $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        $1 = SAFE_HEAP_LOAD_i32_4_4($2, 6464);
        $6 = $1 + 12 | 0;
        $55 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6468) / SAFE_HEAP_LOAD_f32_4_4($1, 16));
        $21 = Math_fround(0.0);
        $16 = Math_fround(0.0);
        $14 = Math_fround(0.0);
        while (1) {
         label$294 : {
          if ($3 >>> 0 <= $7 >>> 0) {
           $27 = $21;
           $2 = $7;
           $17 = $14;
           break label$294;
          }
          $17 = $16;
          $9 = 0;
          $27 = $14;
          label$297 : {
           label$298 : {
            label$299 : {
             $2 = SAFE_HEAP_LOAD_i32_2_U_2($7, 0);
             switch ($2 - 10 | 0) {
             case 3:
              break label$297;
             case 0:
              break label$299;
             default:
              break label$298;
             };
            }
            $17 = $14 <= $16 ? $16 : $14;
            $21 = $17;
            $9 = 1;
            $27 = Math_fround(0.0);
            break label$297;
           }
           $27 = Math_fround($14 + Math_fround($55 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 8) + ($2 << 2) | 0, wasm2js_i32$1 = $6, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) > ($2 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0)));
          }
          $16 = $17;
          $14 = $27;
          $27 = $21;
          $7 = $7 + 2 | 0;
          $2 = $7;
          $17 = $14;
          if (!$9) {
           continue
          }
         }
         break;
        };
        $14 = $17 > $27 ? $17 : $27;
        if ($14 <= Math_fround(0.0)) {
         $1 = SAFE_HEAP_LOAD_i32_4_4($10, 6464);
         $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 8) + 128 | 0, wasm2js_i32$1 = $1 + 12 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) > 32, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0) * Math_fround(.5));
         label$301 : {
          if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
           $1 = ~~$14;
           break label$301;
          }
          $1 = -2147483648;
         }
         $14 = Math_fround($1 | 0);
        }
        $17 = Math_fround($37 + $14);
        $14 = SAFE_HEAP_LOAD_f32_4_4($11, 64);
        $27 = $14 > $17 ? $17 : $14;
        SAFE_HEAP_STORE_f32_4_4($11, 96, $27);
        $16 = Math_fround($37 + Math_fround(0.0));
        $17 = SAFE_HEAP_LOAD_f32_4_4($11, 56);
        $16 = $16 >= $17 ? $16 : $17;
        SAFE_HEAP_STORE_f32_4_4($11, 88, $16);
        $21 = Math_fround($35 + Math_fround($54 - $48));
        $21 = $21 >= $43 ? $21 : $43;
        SAFE_HEAP_STORE_f32_4_4($11, 92, $21);
        $37 = Math_fround($53 + $35);
        $37 = $34 > $37 ? $37 : $34;
        SAFE_HEAP_STORE_f32_4_4($11, 100, $37);
        if (!(!($37 > $43) | !($21 < $34) | (!($17 < $27) | !($14 > $16)))) {
         ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($32, 580), $11 + 88 | 0, $12, $4, Math_fround(0.0), 0)
        }
       }
       $14 = SAFE_HEAP_LOAD_f32_4_4($11, 48);
       $16 = Math_fround($35 + SAFE_HEAP_LOAD_f32_4_4($10, 6468));
       $7 = $2;
       if ($3 >>> 0 > $7 >>> 0) {
        continue
       }
       break;
      };
     }
     $7 = 0;
     label$304 : {
      if (!$22) {
       $7 = $11 + 56 | 0;
       if (($18 - $15 | 0) > 2097151) {
        break label$304
       }
      }
      $1 = ImGui__GetColorU32_28int_2c_20float_29($40, Math_fround(1.0));
      $14 = SAFE_HEAP_LOAD_f32_4_4($10, 6468);
      $2 = SAFE_HEAP_LOAD_i32_4_4($10, 6464);
      $3 = SAFE_HEAP_LOAD_i32_4_4($32, 580);
      SAFE_HEAP_STORE_f32_4_4($11, 92, SAFE_HEAP_LOAD_f32_4_4($11, 52));
      SAFE_HEAP_STORE_f32_4_4($11, 88, Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 48) - $41));
      ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($3, $2, $14, $11 + 88 | 0, $1, $15, $18, Math_fround(0.0), $7);
     }
     label$306 : {
      if (!$36) {
       break label$306
      }
      $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 24 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($8, 3688));
      SAFE_HEAP_STORE_f32_4_4($8, 3688, $14);
      $1 = 1;
      label$307 : {
       if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 178 | 0, 0)) {
        break label$307
       }
       $1 = 1;
       if ($14 <= Math_fround(0.0)) {
        break label$307
       }
       $1 = fmodf($14, Math_fround(1.2000000476837158)) <= Math_fround(.800000011920929);
      }
      $14 = Math_fround($39 + SAFE_HEAP_LOAD_f32_4_4($11, 52));
      label$309 : {
       if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
        $2 = ~~$14;
        break label$309;
       }
       $2 = -2147483648;
      }
      $14 = SAFE_HEAP_LOAD_f32_4_4($11, 48);
      $16 = SAFE_HEAP_LOAD_f32_4_4($10, 6468);
      $17 = Math_fround($2 | 0);
      $27 = Math_fround($17 + Math_fround(-1.5));
      SAFE_HEAP_STORE_f32_4_4($11 + 100 | 0, 0, $27);
      $14 = Math_fround(Math_fround($38 + $14) - $41);
      label$311 : {
       if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
        $2 = ~~$14;
        break label$311;
       }
       $2 = -2147483648;
      }
      $14 = Math_fround($2 | 0);
      SAFE_HEAP_STORE_f32_4_4($11, 88, $14);
      $21 = Math_fround($14 + Math_fround(1.0));
      SAFE_HEAP_STORE_f32_4_4($11, 96, $21);
      $16 = Math_fround(Math_fround($17 - $16) + Math_fround(.5));
      SAFE_HEAP_STORE_f32_4_4($11, 92, $16);
      label$313 : {
       if (!$1) {
        break label$313
       }
       if (!(SAFE_HEAP_LOAD_f32_4_4($11, 60) < $27)) {
        break label$313
       }
       if (!(SAFE_HEAP_LOAD_f32_4_4($11, 68) > $16)) {
        break label$313
       }
       if (!(SAFE_HEAP_LOAD_f32_4_4($11, 56) < $21)) {
        break label$313
       }
       if (!(SAFE_HEAP_LOAD_f32_4_4($11, 64) > $14)) {
        break label$313
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($32, 580);
       SAFE_HEAP_STORE_f32_4_4($11, 44, $27);
       SAFE_HEAP_STORE_f32_4_4($11, 40, $14);
       ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($1, $11 + 88 | 0, $11 + 40 | 0, ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0)), Math_fround(1.0));
      }
      if ($25) {
       break label$306
      }
      SAFE_HEAP_STORE_f32_4_4($10, 12108, Math_fround($14 + Math_fround(-1.0)));
      SAFE_HEAP_STORE_f32_4_4($10 + 12112 | 0, 0, Math_fround($17 - SAFE_HEAP_LOAD_f32_4_4($10, 6468)));
     }
     $7 = $18;
     $14 = $52;
     $16 = $42;
    }
    if (!$46) {
     ImGui__PopFont_28_29()
    }
    label$315 : {
     if (!$22) {
      break label$315
     }
     $17 = SAFE_HEAP_LOAD_f32_4_4($10, 5480);
     SAFE_HEAP_STORE_f32_4_4($11, 40, $14);
     $17 = Math_fround($16 + $17);
     SAFE_HEAP_STORE_f32_4_4($11, 44, $17);
     $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
     SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
     if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 143)) {
      $2 = SAFE_HEAP_LOAD_i64_8_4($1, 208);
      $3 = i64toi32_i32$HIGH_BITS;
      $27 = SAFE_HEAP_LOAD_f32_4_4($1, 208);
      SAFE_HEAP_STORE_f32_4_4($11 + 100 | 0, 0, Math_fround($17 + SAFE_HEAP_LOAD_f32_4_4($1 + 212 | 0, 0)));
      SAFE_HEAP_STORE_f32_4_4($11, 96, Math_fround($14 + $27));
      SAFE_HEAP_STORE_i64_8_8($11, 88, $2, $3);
      ImGui__ItemSize_28ImVec2_20const__2c_20float_29($11 + 40 | 0, Math_fround(-1.0));
      ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($11 + 88 | 0, 0, 0, 0);
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($10, 7216);
     SAFE_HEAP_STORE_i32_4_4($10, 7216, $1 | 257);
     ImGui__EndChild_28_29();
     SAFE_HEAP_STORE_i32_4_4($10, 7216, $1);
     $1 = SAFE_HEAP_LOAD_i32_4_4($10 + 7248 | 0, 0);
     ImGui__EndGroup_28_29();
     if (SAFE_HEAP_LOAD_i32_4_4($10, 7240)) {
      break label$315
     }
     SAFE_HEAP_STORE_i32_4_4($10, 7240, $24);
     SAFE_HEAP_STORE_i32_4_4($10 + 7244 | 0, 0, $49);
     SAFE_HEAP_STORE_i32_4_4($10, 7248, $1 & 128 | $50);
    }
    if (!(!SAFE_HEAP_LOAD_i32_1_U_1($10, 12196) | $46 ^ 1)) {
     ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(1061, 1056);
     ImGui__LogRenderedText_28ImVec2_20const__2c_20char_20const__2c_20char_20const__29($11 + 48 | 0, $15, $7);
    }
    if (SAFE_HEAP_LOAD_f32_4_4($11, 184) > Math_fround(0.0)) {
     $14 = SAFE_HEAP_LOAD_f32_4_4($10 + 5500 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($11, 36, Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 156) + SAFE_HEAP_LOAD_f32_4_4($10, 5480)));
     SAFE_HEAP_STORE_f32_4_4($11, 32, Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($11, 160)));
     SAFE_HEAP_STORE_i64_8_8($11, 0, SAFE_HEAP_LOAD_i64_8_4($11, 32), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($11, $0, 0, 1);
    }
    if (!(!$29 | $5 & 134217728)) {
     ImGui__MarkItemEdited_28unsigned_20int_29($24)
    }
    $9 = $5 & 32 ? $30 : ($29 | 0) != 0;
   }
  }
  __stack_pointer = $11 + 192 | 0;
  return $9;
 }
 
 function ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $12 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($12, 7080);
  SAFE_HEAP_STORE_i32_1_1($9, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 143)) {
   ImGui__BeginGroup_28_29();
   ImGui__PushID_28char_20const__29($0);
   ImGui__PushMultiItemsWidths_28int_2c_20float_29($3, ImGui__CalcItemWidth_28_29());
   $9 = 0;
   if (($3 | 0) > 0) {
    $13 = SAFE_HEAP_LOAD_i32_4_4(($1 << 4) + 48160 | 0, 0);
    $10 = $2;
    $2 = 0;
    while (1) {
     ImGui__PushID_28int_29($11);
     if ($11) {
      ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($12, 5500))
     }
     $9 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(19354, $1, $10, $4, $5, $6, $7, $8);
     ImGui__PopID_28_29();
     ImGui__PopItemWidth_28_29();
     $2 = $2 | $9;
     $9 = $2;
     $10 = $10 + $13 | 0;
     $11 = $11 + 1 | 0;
     if (($11 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $10 = $9;
   ImGui__PopID_28_29();
   $1 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0);
   if (($0 | 0) != ($1 | 0)) {
    ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($12 + 5500 | 0, 0));
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $1, 0);
   }
   ImGui__EndGroup_28_29();
  }
  return $10 & 1;
 }
 
 function ImGui__SliderBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0.0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0.0, $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = Math_fround(0), $27 = 0.0, $28 = 0, $29 = 0, $30 = 0, $31 = Math_fround(0), $32 = 0, $33 = 0, $34 = 0, $35 = Math_fround(0), $36 = 0, $37 = Math_fround(0), $38 = Math_fround(0), $39 = 0, $40 = 0, $41 = 0, $42 = Math_fround(0), $43 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $32 = __stack_pointer - 16 | 0;
  __stack_pointer = $32;
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7244 | 0, 0) & 128 | $7 & 2097152) {
    break label$1
   }
   label$3 : {
    switch ($2 | 0) {
    case 0:
     SAFE_HEAP_STORE_i32_4_4($32, 12, SAFE_HEAP_LOAD_i32_1_1($3, 0));
     $15 = bool_20ImGui__SliderBehaviorT_int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20int__2c_20int_2c_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $32 + 12 | 0, SAFE_HEAP_LOAD_i32_1_1($4, 0), SAFE_HEAP_LOAD_i32_1_1($5, 0), $6, $7, $8);
     if ($15) {
      SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($32, 12))
     }
     break label$1;
    case 1:
     SAFE_HEAP_STORE_i32_4_4($32, 12, SAFE_HEAP_LOAD_i32_1_U_1($3, 0));
     $15 = bool_20ImGui__SliderBehaviorT_unsigned_20int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20unsigned_20int__2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $32 + 12 | 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0), SAFE_HEAP_LOAD_i32_1_U_1($5, 0), $6, $7, $8);
     if ($15) {
      SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_4_4($32, 12))
     }
     break label$1;
    case 2:
     SAFE_HEAP_STORE_i32_4_4($32, 12, SAFE_HEAP_LOAD_i32_2_2($3, 0));
     $15 = bool_20ImGui__SliderBehaviorT_int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20int__2c_20int_2c_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $32 + 12 | 0, SAFE_HEAP_LOAD_i32_2_2($4, 0), SAFE_HEAP_LOAD_i32_2_2($5, 0), $6, $7, $8);
     if ($15) {
      SAFE_HEAP_STORE_i32_2_2($3, 0, SAFE_HEAP_LOAD_i32_4_4($32, 12))
     }
     break label$1;
    case 3:
     SAFE_HEAP_STORE_i32_4_4($32, 12, SAFE_HEAP_LOAD_i32_2_U_2($3, 0));
     $15 = bool_20ImGui__SliderBehaviorT_unsigned_20int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20unsigned_20int__2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $32 + 12 | 0, SAFE_HEAP_LOAD_i32_2_U_2($4, 0), SAFE_HEAP_LOAD_i32_2_U_2($5, 0), $6, $7, $8);
     if ($15) {
      SAFE_HEAP_STORE_i32_2_2($3, 0, SAFE_HEAP_LOAD_i32_4_4($32, 12))
     }
     break label$1;
    case 4:
     $15 = bool_20ImGui__SliderBehaviorT_int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20int__2c_20int_2c_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $3, SAFE_HEAP_LOAD_i32_4_4($4, 0), SAFE_HEAP_LOAD_i32_4_4($5, 0), $6, $7, $8);
     break label$1;
    case 5:
     $15 = bool_20ImGui__SliderBehaviorT_unsigned_20int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20unsigned_20int__2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $3, SAFE_HEAP_LOAD_i32_4_4($4, 0), SAFE_HEAP_LOAD_i32_4_4($5, 0), $6, $7, $8);
     break label$1;
    case 6:
     $33 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
     $30 = i64toi32_i32$HIGH_BITS;
     $34 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
     $23 = __stack_pointer - 16 | 0;
     __stack_pointer = $23;
     $36 = i64toi32_i32$HIGH_BITS;
     $2 = $30 - ($36 + ($33 >>> 0 < $34 >>> 0) | 0) | 0;
     $4 = $2;
     $5 = $2 >> 31;
     $2 = $5 ^ $33 - $34;
     $14 = $2 - $5 | 0;
     $15 = ($4 ^ $5) - (($2 >>> 0 < $5 >>> 0) + $5 | 0) | 0;
     $5 = $14 + 1 | 0;
     $4 = $5 ? $15 : $15 + 1 | 0;
     $17 = $7 & 1048576;
     $2 = ($17 >>> 18 | 0) + $0 | 0;
     $20 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
     $12 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     $24 = Math_fround(Math_fround($20 - $12) + Math_fround(-4.0));
     $10 = Math_fround($24 / Math_fround(+($5 >>> 0) + +($4 | 0) * 4294967296.0));
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $9 = SAFE_HEAP_LOAD_f32_4_4($2 + 5540 | 0, 0);
     $9 = $9 <= $10 ? $10 : $9;
     $21 = $9 < $24 ? $9 : $24;
     $35 = Math_fround($21 * Math_fround(.5));
     $9 = Math_fround($24 - $21);
     $4 = $7 & 32;
     if ($4) {
      $25 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5548 | 0, 0) * Math_fround(.5)) / ($9 >= Math_fround(1.0) ? $9 : Math_fround(1.0)));
      $26 = powf(Math_fround(.10000000149011612), Math_fround(1.0));
     }
     $31 = Math_fround($35 + Math_fround($12 + Math_fround(2.0)));
     $5 = 0;
     label$50 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) != ($1 | 0)) {
       break label$50
      }
      $10 = Math_fround(0.0);
      label$61 : {
       label$72 : {
        switch (SAFE_HEAP_LOAD_i32_4_4($2, 7188) - 1 | 0) {
        case 0:
         if (!SAFE_HEAP_LOAD_i32_1_U_1($2 + 236 | 0, 0)) {
          ImGui__ClearActiveID_28_29();
          break label$61;
         }
         if ($9 > Math_fround(0.0)) {
          $9 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4(($2 + ($17 >>> 20 << 2) | 0) + 228 | 0, 0) - $31) / $9);
          $10 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
         }
         $10 = $17 ? Math_fround(Math_fround(1.0) - $10) : $10;
         $28 = 1;
         break label$61;
        case 3:
         break label$72;
        default:
         break label$61;
        };
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7148)) {
        SAFE_HEAP_STORE_i32_1_1($2, 12056, 0);
        SAFE_HEAP_STORE_i32_4_4($2, 12052, 0);
       }
       ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($23 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
       $9 = (wasm2js_f32$0 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($23, 12)), wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($23, 8), wasm2js_i32$0 = $17, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
       if ($9 != Math_fround(0.0)) {
        label$14 : {
         label$17 : {
          if (!(!$15 & $14 >>> 0 < 101)) {
           if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
            break label$17
           }
          }
          $10 = Math_fround(($9 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround(+($14 >>> 0) + +($15 | 0) * 4294967296.0));
          break label$14;
         }
         $10 = Math_fround($9 / Math_fround(100.0));
        }
        $9 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 828 | 0, 0);
        SAFE_HEAP_STORE_i32_1_1($2, 12056, 1);
        SAFE_HEAP_STORE_f32_4_4($2, 12052, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 12052) + ($9 > Math_fround(0.0) ? Math_fround($10 * Math_fround(10.0)) : $10)));
       }
       $19 = SAFE_HEAP_LOAD_f32_4_4($2, 12052);
       label$19 : {
        label$20 : {
         if ((SAFE_HEAP_LOAD_i32_4_4($2, 7528) | 0) != ($1 | 0)) {
          break label$20
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($2, 7148)) {
          break label$20
         }
         ImGui__ClearActiveID_28_29();
         $10 = Math_fround(0.0);
         break label$19;
        }
        if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 12056)) {
         $10 = Math_fround(0.0);
         break label$19;
        }
        $9 = float_20ImGui__ScaleRatioFromValueT_long_20long_2c_20long_20long_2c_20double__28int_2c_20long_20long_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS, $33, $30, $34, $36, ($4 | 0) != 0, $26, $25);
        label$22 : {
         if (!(!(!($9 >= Math_fround(1.0)) | !($19 > Math_fround(0.0))) | !(!($9 <= Math_fround(0.0)) | !($19 < Math_fround(0.0))))) {
          $10 = Math_fround($19 + $9);
          $10 = $10 < Math_fround(0.0) ? Math_fround(0.0) : $10 > Math_fround(1.0) ? Math_fround(1.0) : $10;
          $1 = ($4 | 0) != 0;
          $5 = long_20long_20ImGui__ScaleValueFromRatioT_long_20long_2c_20long_20long_2c_20double__28int_2c_20float_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29($10, $33, $30, $34, $36, $1, $26, $25);
          $28 = i64toi32_i32$HIGH_BITS;
          if (!($7 & 64)) {
           $5 = long_20long_20ImGui__RoundScalarWithFormatT_long_20long_2c_20long_20long__28char_20const__2c_20int_2c_20long_20long_29($6, $5, $28);
           $28 = i64toi32_i32$HIGH_BITS;
          }
          $12 = Math_fround(float_20ImGui__ScaleRatioFromValueT_long_20long_2c_20long_20long_2c_20double__28int_2c_20long_20long_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29($5, $28, $33, $30, $34, $36, $1, $26, $25) - $9);
          $9 = SAFE_HEAP_LOAD_f32_4_4($2, 12052);
          if ($19 > Math_fround(0.0)) {
           $12 = Math_fround($9 - ($12 < $19 ? $12 : $19));
           $28 = 1;
           break label$22;
          }
          $12 = Math_fround($9 - ($12 >= $19 ? $12 : $19));
          $28 = 1;
          break label$22;
         }
         $12 = Math_fround(0.0);
         $10 = $9;
         $28 = 0;
        }
        SAFE_HEAP_STORE_i32_1_1($2, 12056, 0);
        SAFE_HEAP_STORE_f32_4_4($2, 12052, $12);
       }
      }
      $5 = 0;
      if (!$28) {
       break label$50
      }
      $5 = long_20long_20ImGui__ScaleValueFromRatioT_long_20long_2c_20long_20long_2c_20double__28int_2c_20float_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29($10, $33, $30, $34, $36, ($4 | 0) != 0, $26, $25);
      $28 = i64toi32_i32$HIGH_BITS;
      if (!($7 & 64)) {
       $5 = long_20long_20ImGui__RoundScalarWithFormatT_long_20long_2c_20long_20long__28char_20const__2c_20int_2c_20long_20long_29($6, $5, $28);
       $28 = i64toi32_i32$HIGH_BITS;
      }
      $2 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
      $1 = i64toi32_i32$HIGH_BITS;
      if (!(($2 | 0) != ($5 | 0) | ($28 | 0) != ($1 | 0))) {
       $5 = ($2 | 0) != ($5 | 0) | ($1 | 0) != ($28 | 0);
       break label$50;
      }
      SAFE_HEAP_STORE_i64_8_8($3, 0, $5, $28);
      $5 = 1;
     }
     $2 = $5;
     label$32 : {
      if ($24 < Math_fround(1.0)) {
       $1 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
       $0 = i64toi32_i32$HIGH_BITS;
       SAFE_HEAP_STORE_i64_8_4($8, 8, $1, $0);
       SAFE_HEAP_STORE_i64_8_4($8, 0, $1, $0);
       break label$32;
      }
      $12 = Math_fround(-$21);
      $9 = float_20ImGui__ScaleRatioFromValueT_long_20long_2c_20long_20long_2c_20double__28int_2c_20long_20long_2c_20long_20long_2c_20long_20long_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_i64_8_8($3, 0), i64toi32_i32$HIGH_BITS, $33, $30, $34, $36, ($4 | 0) != 0, $26, $25);
      $20 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 + Math_fround(-2.0)) - $35) - $31) * ($17 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $31);
      if (!$17) {
       $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
       $9 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
       SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround(Math_fround($21 * Math_fround(.5)) + $20));
       SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround($9 + Math_fround(2.0)));
       SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
       SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround($10 + Math_fround(-2.0)));
       break label$32;
      }
      $10 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
      $9 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
      SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround(Math_fround($21 * Math_fround(.5)) + $20));
      SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($9 + Math_fround(-2.0)));
      SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
      SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround($10 + Math_fround(2.0)));
     }
     __stack_pointer = $23 + 16 | 0;
     $15 = $2;
     break label$1;
    case 7:
     $15 = $1;
     $2 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
     $13 = i64toi32_i32$HIGH_BITS;
     $1 = SAFE_HEAP_LOAD_i64_8_8($5, 0);
     $34 = __stack_pointer - 16 | 0;
     __stack_pointer = $34;
     $40 = $1 - $2 | 0;
     $14 = $1 >>> 0 > $2 >>> 0;
     $16 = i64toi32_i32$HIGH_BITS;
     $39 = $14 & ($16 | 0) == ($13 | 0) | $13 >>> 0 < $16 >>> 0;
     $5 = $39;
     $23 = $5 ? $40 : $2 - $1 | 0;
     $4 = $0;
     $41 = $7 & 1048576;
     $0 = $0 + ($41 >>> 18 | 0) | 0;
     $20 = SAFE_HEAP_LOAD_f32_4_4($0 + 8 | 0, 0);
     $12 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
     $26 = Math_fround(Math_fround($20 - $12) + Math_fround(-4.0));
     $29 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $10 = SAFE_HEAP_LOAD_f32_4_4($29 + 5540 | 0, 0);
     $28 = $16 - (($1 >>> 0 < $2 >>> 0) + $13 | 0) | 0;
     $14 = $5 ? $28 : $13 - ($14 + $16 | 0) | 0;
     if (($14 | 0) > 0 | ($14 | 0) >= 0) {
      $5 = $23 + 1 | 0;
      $0 = $5 ? $14 : $14 + 1 | 0;
      $9 = Math_fround($26 / Math_fround(+($5 >>> 0) + +($0 | 0) * 4294967296.0));
      $10 = $9 >= $10 ? $9 : $10;
     }
     $24 = $10 < $26 ? $10 : $26;
     $35 = Math_fround($24 * Math_fround(.5));
     $33 = $7 & 32;
     if ($33) {
      $25 = powf(Math_fround(.10000000149011612), Math_fround(1.0))
     }
     $31 = Math_fround($35 + Math_fround($12 + Math_fround(2.0)));
     $0 = 0;
     label$60 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($29, 7136) | 0) != ($15 | 0)) {
       break label$60
      }
      $10 = Math_fround(0.0);
      label$71 : {
       label$82 : {
        switch (SAFE_HEAP_LOAD_i32_4_4($29, 7188) - 1 | 0) {
        case 0:
         if (!SAFE_HEAP_LOAD_i32_1_U_1($29 + 236 | 0, 0)) {
          ImGui__ClearActiveID_28_29();
          break label$71;
         }
         $9 = Math_fround($26 - $24);
         if ($9 > Math_fround(0.0)) {
          $9 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4(($29 + ($41 >>> 20 << 2) | 0) + 228 | 0, 0) - $31) / $9);
          $10 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
         }
         $10 = $41 ? Math_fround(Math_fround(1.0) - $10) : $10;
         $17 = 1;
         break label$71;
        case 3:
         break label$82;
        default:
         break label$71;
        };
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($29, 7148)) {
        SAFE_HEAP_STORE_i32_1_1($29, 12056, 0);
        SAFE_HEAP_STORE_i32_4_4($29, 12052, 0);
       }
       ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($34 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
       $9 = (wasm2js_f32$0 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($34, 12)), wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($34, 8), wasm2js_i32$0 = $41, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
       if ($9 != Math_fround(0.0)) {
        label$15 : {
         label$18 : {
          $0 = $23 + 100 | 0;
          if (!(!($0 >>> 0 < 100 ? $14 + 1 | 0 : $14) & $0 >>> 0 < 201)) {
           if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
            break label$18
           }
          }
          $10 = Math_fround(($9 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround(+($23 >>> 0) + +($14 | 0) * 4294967296.0));
          break label$15;
         }
         $10 = Math_fround($9 / Math_fround(100.0));
        }
        $9 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 828 | 0, 0);
        SAFE_HEAP_STORE_i32_1_1($29, 12056, 1);
        SAFE_HEAP_STORE_f32_4_4($29, 12052, Math_fround(SAFE_HEAP_LOAD_f32_4_4($29, 12052) + ($9 > Math_fround(0.0) ? Math_fround($10 * Math_fround(10.0)) : $10)));
       }
       $19 = SAFE_HEAP_LOAD_f32_4_4($29, 12052);
       label$204 : {
        label$21 : {
         if ((SAFE_HEAP_LOAD_i32_4_4($29, 7528) | 0) != ($15 | 0)) {
          break label$21
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($29, 7148)) {
          break label$21
         }
         ImGui__ClearActiveID_28_29();
         $10 = Math_fround(0.0);
         break label$204;
        }
        if (!SAFE_HEAP_LOAD_i32_1_U_1($29, 12056)) {
         $10 = Math_fround(0.0);
         break label$204;
        }
        $36 = ($1 | 0) == ($2 | 0) & ($13 | 0) == ($16 | 0);
        $10 = Math_fround(0.0);
        label$23 : {
         if ($36) {
          break label$23
         }
         $15 = $39 ? $2 : $1;
         $17 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
         $5 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
         $0 = $5 ? $2 : $1;
         $30 = i64toi32_i32$HIGH_BITS;
         $23 = $5 ? $13 : $16;
         $5 = ($30 | 0) == ($23 | 0) & $0 >>> 0 > $17 >>> 0 | $23 >>> 0 > $30 >>> 0;
         $43 = $5 ? $17 : $0;
         $14 = $39 ? $13 : $16;
         $0 = ($14 | 0) == ($30 | 0) & $15 >>> 0 > $17 >>> 0 | $14 >>> 0 > $30 >>> 0;
         $15 = $0 ? $15 : $43;
         $0 = $0 ? $14 : $5 ? $30 : $23;
         if ($33) {
          $27 = +$25;
          $5 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
          $11 = +(($5 ? $1 : $2) >>> 0) + +(($5 ? $16 : $13) >>> 0) * 4294967296.0;
          $22 = $11 < $27 ? $27 : $11;
          $18 = +($15 >>> 0) + +($0 >>> 0) * 4294967296.0;
          $9 = Math_fround(0.0);
          label$25 : {
           if ($22 >= $18) {
            break label$25
           }
           $0 = ($13 | 0) == ($16 | 0) & $1 >>> 0 > $2 >>> 0 | $13 >>> 0 < $16 >>> 0;
           $11 = +(($0 ? $1 : $2) >>> 0) + +(($0 ? $16 : $13) >>> 0) * 4294967296.0;
           $11 = $11 < $27 ? $27 : $11;
           $9 = Math_fround(1.0);
           if ($11 <= $18) {
            break label$25
           }
           $9 = Math_fround(log($18 / $22) / log($11 / $22));
          }
          $10 = $5 ? Math_fround(Math_fround(1.0) - $9) : $9;
          break label$23;
         }
         $10 = Math_fround((+($15 - $2 >>> 0) + +($0 - (($2 >>> 0 > $15 >>> 0) + $13 | 0) | 0) * 4294967296.0) / (+($40 >>> 0) + +($28 | 0) * 4294967296.0));
        }
        label$26 : {
         if (!(!(!($10 >= Math_fround(1.0)) | !($19 > Math_fround(0.0))) | !(!($10 <= Math_fround(0.0)) | !($19 < Math_fround(0.0))))) {
          $9 = Math_fround($19 + $10);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
          $0 = $2;
          $5 = $13;
          label$30 : {
           if ($36) {
            break label$30
           }
           if ($33) {
            $5 = $13;
            if ($9 <= Math_fround(0.0)) {
             break label$30
            }
            $0 = $1;
            $5 = $16;
            if ($9 >= Math_fround(1.0)) {
             break label$30
            }
            $18 = +$25;
            $11 = +($1 >>> 0) + +($16 >>> 0) * 4294967296.0;
            $22 = $11 < $18 ? $18 : $11;
            $11 = +($2 >>> 0) + +($13 >>> 0) * 4294967296.0;
            $18 = $11 < $18 ? $18 : $11;
            $0 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
            $11 = $0 ? $22 : $18;
            $11 = $11 * pow(($0 ? $18 : $22) / $11, +($0 ? Math_fround(Math_fround(1.0) - $9) : $9));
            if ($11 < 18446744073709551615.0 & $11 >= 0.0) {
             $0 = ~~$11 >>> 0;
             $5 = Math_abs($11) >= 1.0 ? ~~($11 > 0.0 ? Math_min(Math_floor($11 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($11 - +(~~$11 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
             break label$30;
            }
            $0 = 0;
            $5 = 0;
            break label$30;
           }
           $0 = $1;
           $5 = $16;
           if (!($9 < Math_fround(1.0))) {
            break label$30
           }
           $11 = (($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0 ? -.5 : .5) + +Math_fround($9 * Math_fround(+($40 >>> 0) + +($28 | 0) * 4294967296.0));
           label$35 : {
            if (Math_abs($11) < 9223372036854775808.0) {
             $17 = Math_abs($11) >= 1.0 ? ~~($11 > 0.0 ? Math_min(Math_floor($11 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($11 - +(~~$11 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
             $5 = ~~$11 >>> 0;
             break label$35;
            }
            $17 = -2147483648;
            $5 = 0;
           }
           $0 = $13 + $17 | 0;
           $17 = $0 + 1 | 0;
           $15 = $0;
           $0 = $2 + $5 | 0;
           $5 = $0 >>> 0 < $2 >>> 0 ? $17 : $15;
          }
          $17 = $5;
          if (!($7 & 64)) {
           $0 = long_20long_20ImGui__RoundScalarWithFormatT_long_20long_2c_20long_20long__28char_20const__2c_20int_2c_20long_20long_29($6, $0, $17);
           $17 = i64toi32_i32$HIGH_BITS;
          }
          $12 = Math_fround(0.0);
          label$39 : {
           if ($36) {
            break label$39
           }
           $14 = $39 ? $2 : $1;
           $15 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
           $5 = $15 ? $2 : $1;
           $30 = $5;
           $23 = $15 ? $13 : $16;
           $5 = ($23 | 0) == ($17 | 0) & $0 >>> 0 < $5 >>> 0 | $17 >>> 0 < $23 >>> 0;
           $30 = $5 ? $0 : $30;
           $15 = $39 ? $13 : $16;
           $0 = ($15 | 0) == ($17 | 0) & $0 >>> 0 < $14 >>> 0 | $15 >>> 0 > $17 >>> 0;
           $14 = $0 ? $14 : $30;
           $0 = $0 ? $15 : $5 ? $17 : $23;
           if ($33) {
            $27 = +$25;
            $5 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
            $11 = +(($5 ? $1 : $2) >>> 0) + +(($5 ? $16 : $13) >>> 0) * 4294967296.0;
            $22 = $11 < $27 ? $27 : $11;
            $18 = +($14 >>> 0) + +($0 >>> 0) * 4294967296.0;
            $12 = Math_fround(0.0);
            label$41 : {
             if ($22 >= $18) {
              break label$41
             }
             $0 = ($13 | 0) == ($16 | 0) & $1 >>> 0 > $2 >>> 0 | $13 >>> 0 < $16 >>> 0;
             $11 = +(($0 ? $1 : $2) >>> 0) + +(($0 ? $16 : $13) >>> 0) * 4294967296.0;
             $11 = $11 < $27 ? $27 : $11;
             $12 = Math_fround(1.0);
             if ($11 <= $18) {
              break label$41
             }
             $12 = Math_fround(log($18 / $22) / log($11 / $22));
            }
            $12 = $5 ? Math_fround(Math_fround(1.0) - $12) : $12;
            break label$39;
           }
           $12 = Math_fround((+($14 - $2 >>> 0) + +($0 - (($2 >>> 0 > $14 >>> 0) + $13 | 0) | 0) * 4294967296.0) / (+($40 >>> 0) + +($28 | 0) * 4294967296.0));
          }
          $12 = Math_fround($12 - $10);
          $10 = SAFE_HEAP_LOAD_f32_4_4($29, 12052);
          if ($19 > Math_fround(0.0)) {
           $21 = Math_fround($10 - ($12 < $19 ? $12 : $19));
           $10 = $9;
           $17 = 1;
           break label$26;
          }
          $21 = Math_fround($10 - ($12 >= $19 ? $12 : $19));
          $10 = $9;
          $17 = 1;
          break label$26;
         }
         $17 = 0;
        }
        SAFE_HEAP_STORE_i32_1_1($29, 12056, 0);
        SAFE_HEAP_STORE_f32_4_4($29, 12052, $21);
       }
      }
      $0 = 0;
      if (!$17) {
       break label$60
      }
      $0 = $2;
      $5 = $13;
      label$43 : {
       if (($1 | 0) == ($2 | 0) & ($13 | 0) == ($16 | 0)) {
        break label$43
       }
       if ($33) {
        $5 = $13;
        if ($10 <= Math_fround(0.0)) {
         break label$43
        }
        $0 = $1;
        $5 = $16;
        if ($10 >= Math_fround(1.0)) {
         break label$43
        }
        $18 = +$25;
        $11 = +($1 >>> 0) + +($16 >>> 0) * 4294967296.0;
        $22 = $11 < $18 ? $18 : $11;
        $11 = +($2 >>> 0) + +($13 >>> 0) * 4294967296.0;
        $18 = $11 < $18 ? $18 : $11;
        $0 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
        $11 = $0 ? $22 : $18;
        $11 = $11 * pow(($0 ? $18 : $22) / $11, +($0 ? Math_fround(Math_fround(1.0) - $10) : $10));
        if ($11 < 18446744073709551615.0 & $11 >= 0.0) {
         $0 = ~~$11 >>> 0;
         $5 = Math_abs($11) >= 1.0 ? ~~($11 > 0.0 ? Math_min(Math_floor($11 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($11 - +(~~$11 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
         break label$43;
        }
        $0 = 0;
        $5 = 0;
        break label$43;
       }
       $0 = $1;
       $5 = $16;
       if (!($10 < Math_fround(1.0))) {
        break label$43
       }
       $11 = (($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0 ? -.5 : .5) + +Math_fround($10 * Math_fround(+($40 >>> 0) + +($28 | 0) * 4294967296.0));
       label$48 : {
        if (Math_abs($11) < 9223372036854775808.0) {
         $17 = Math_abs($11) >= 1.0 ? ~~($11 > 0.0 ? Math_min(Math_floor($11 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($11 - +(~~$11 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
         $5 = ~~$11 >>> 0;
         break label$48;
        }
        $17 = -2147483648;
        $5 = 0;
       }
       $0 = $13 + $17 | 0;
       $17 = $0 + 1 | 0;
       $15 = $0;
       $0 = $2 + $5 | 0;
       $5 = $0 >>> 0 < $2 >>> 0 ? $17 : $15;
      }
      $17 = $5;
      if (!($7 & 64)) {
       $0 = long_20long_20ImGui__RoundScalarWithFormatT_long_20long_2c_20long_20long__28char_20const__2c_20int_2c_20long_20long_29($6, $0, $17);
       $17 = i64toi32_i32$HIGH_BITS;
      }
      $6 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
      $5 = i64toi32_i32$HIGH_BITS;
      if (!(($0 | 0) != ($6 | 0) | ($17 | 0) != ($5 | 0))) {
       $0 = ($0 | 0) != ($6 | 0) | ($5 | 0) != ($17 | 0);
       break label$60;
      }
      SAFE_HEAP_STORE_i64_8_8($3, 0, $0, $17);
      $0 = 1;
     }
     $6 = $0;
     label$53 : {
      if ($26 < Math_fround(1.0)) {
       $1 = SAFE_HEAP_LOAD_i64_8_4($4, 0);
       $0 = i64toi32_i32$HIGH_BITS;
       SAFE_HEAP_STORE_i64_8_4($8, 8, $1, $0);
       SAFE_HEAP_STORE_i64_8_4($8, 0, $1, $0);
       break label$53;
      }
      $12 = Math_fround(-$24);
      $10 = Math_fround(Math_fround(Math_fround($20 + Math_fround(-2.0)) - $35) - $31);
      $9 = Math_fround(0.0);
      label$55 : {
       if (($1 | 0) == ($2 | 0) & ($13 | 0) == ($16 | 0)) {
        break label$55
       }
       $5 = $39 ? $2 : $1;
       $14 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
       $3 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
       $0 = $3 ? $2 : $1;
       $23 = i64toi32_i32$HIGH_BITS;
       $15 = $3 ? $13 : $16;
       $3 = ($23 | 0) == ($15 | 0) & $0 >>> 0 > $14 >>> 0 | $15 >>> 0 > $23 >>> 0;
       $17 = $3 ? $14 : $0;
       $7 = $39 ? $13 : $16;
       $0 = ($7 | 0) == ($23 | 0) & $5 >>> 0 > $14 >>> 0 | $7 >>> 0 > $23 >>> 0;
       $5 = $0 ? $5 : $17;
       $0 = $0 ? $7 : $3 ? $23 : $15;
       if ($33) {
        $27 = +$25;
        $3 = ($13 | 0) == ($16 | 0) & $1 >>> 0 < $2 >>> 0 | $13 >>> 0 > $16 >>> 0;
        $11 = +(($3 ? $1 : $2) >>> 0) + +(($3 ? $16 : $13) >>> 0) * 4294967296.0;
        $22 = $11 < $27 ? $27 : $11;
        $18 = +($5 >>> 0) + +($0 >>> 0) * 4294967296.0;
        $9 = Math_fround(0.0);
        label$57 : {
         if ($22 >= $18) {
          break label$57
         }
         $0 = ($13 | 0) == ($16 | 0) & $1 >>> 0 > $2 >>> 0 | $13 >>> 0 < $16 >>> 0;
         $11 = +(($0 ? $1 : $2) >>> 0) + +(($0 ? $16 : $13) >>> 0) * 4294967296.0;
         $11 = $11 < $27 ? $27 : $11;
         $9 = Math_fround(1.0);
         if ($11 <= $18) {
          break label$57
         }
         $9 = Math_fround(log($18 / $22) / log($11 / $22));
        }
        $9 = $3 ? Math_fround(Math_fround(1.0) - $9) : $9;
        break label$55;
       }
       $9 = Math_fround((+($5 - $2 >>> 0) + +($0 - (($2 >>> 0 > $5 >>> 0) + $13 | 0) | 0) * 4294967296.0) / (+($40 >>> 0) + +($28 | 0) * 4294967296.0));
      }
      $20 = Math_fround(Math_fround($10 * ($41 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $31);
      if (!$41) {
       $10 = SAFE_HEAP_LOAD_f32_4_4($4 + 12 | 0, 0);
       $9 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
       SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround(Math_fround($24 * Math_fround(.5)) + $20));
       SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround($9 + Math_fround(2.0)));
       SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
       SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround($10 + Math_fround(-2.0)));
       break label$53;
      }
      $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
      $9 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
      SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround(Math_fround($24 * Math_fround(.5)) + $20));
      SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($9 + Math_fround(-2.0)));
      SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
      SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround($10 + Math_fround(2.0)));
     }
     __stack_pointer = $34 + 16 | 0;
     $15 = $6;
     break label$1;
    case 8:
     $37 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
     $38 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
     $5 = __stack_pointer - 16 | 0;
     __stack_pointer = $5;
     $15 = $7 & 1048576;
     $2 = ($15 >>> 18 | 0) + $0 | 0;
     $20 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
     $10 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     $25 = Math_fround(Math_fround($20 - $10) + Math_fround(-4.0));
     $14 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $12 = SAFE_HEAP_LOAD_f32_4_4($14 + 5540 | 0, 0);
     $26 = $37 < $38 ? Math_fround($38 - $37) : Math_fround($37 - $38);
     if (!(!($26 >= Math_fround(0.0)) | 1)) {
      $9 = Math_fround($25 / Math_fround($26 + Math_fround(1.0)));
      $12 = $9 >= $12 ? $9 : $12;
     }
     $24 = $12 < $25 ? $12 : $25;
     $35 = Math_fround($24 * Math_fround(.5));
     $21 = Math_fround($25 - $24);
     $4 = $7 & 32;
     if ($4) {
      $2 = ImParseFormatPrecision_28char_20const__2c_20int_29($6);
      $42 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($14 + 5548 | 0, 0) * Math_fround(.5)) / ($21 >= Math_fround(1.0) ? $21 : Math_fround(1.0)));
      $19 = powf(Math_fround(.10000000149011612), Math_fround($2 | 0));
     }
     $31 = Math_fround($35 + Math_fround($10 + Math_fround(2.0)));
     $13 = 0;
     label$62 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($14, 7136) | 0) != ($1 | 0)) {
       break label$62
      }
      $12 = Math_fround(0.0);
      $2 = 0;
      label$73 : {
       label$84 : {
        switch (SAFE_HEAP_LOAD_i32_4_4($14, 7188) - 1 | 0) {
        case 0:
         if (!SAFE_HEAP_LOAD_i32_1_U_1($14 + 236 | 0, 0)) {
          ImGui__ClearActiveID_28_29();
          break label$73;
         }
         $9 = Math_fround(0.0);
         if ($21 > Math_fround(0.0)) {
          $9 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4(($14 + ($15 >>> 20 << 2) | 0) + 228 | 0, 0) - $31) / $21);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
         }
         $12 = $15 ? Math_fround(Math_fround(1.0) - $9) : $9;
         $2 = 1;
         break label$73;
        case 3:
         break label$84;
        default:
         break label$73;
        };
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($14, 7148)) {
        SAFE_HEAP_STORE_i32_1_1($14, 12056, 0);
        SAFE_HEAP_STORE_i32_4_4($14, 12052, 0);
       }
       ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($5 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
       $9 = (wasm2js_f32$0 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($5, 12)), wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($5, 8), wasm2js_i32$0 = $15, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
       if ($9 != Math_fround(0.0)) {
        label$156 : {
         if ((ImParseFormatPrecision_28char_20const__2c_20int_29($6) | 0) > 0) {
          $9 = Math_fround($9 / Math_fround(100.0));
          if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
           break label$156
          }
          $9 = Math_fround($9 / Math_fround(10.0));
          break label$156;
         }
         label$187 : {
          if (!($26 <= Math_fround(100.0) & $26 >= Math_fround(-100.0))) {
           if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
            break label$187
           }
          }
          $9 = Math_fround(($9 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / $26);
          break label$156;
         }
         $9 = Math_fround($9 / Math_fround(100.0));
        }
        $10 = $9;
        $9 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 828 | 0, 0);
        SAFE_HEAP_STORE_i32_1_1($14, 12056, 1);
        SAFE_HEAP_STORE_f32_4_4($14, 12052, Math_fround(SAFE_HEAP_LOAD_f32_4_4($14, 12052) + ($9 > Math_fround(0.0) ? Math_fround($10 * Math_fround(10.0)) : $10)));
       }
       $21 = SAFE_HEAP_LOAD_f32_4_4($14, 12052);
       label$218 : {
        label$229 : {
         if ((SAFE_HEAP_LOAD_i32_4_4($14, 7528) | 0) != ($1 | 0)) {
          break label$229
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($14, 7148)) {
          break label$229
         }
         ImGui__ClearActiveID_28_29();
         $9 = Math_fround(0.0);
         break label$218;
        }
        if (!SAFE_HEAP_LOAD_i32_1_U_1($14, 12056)) {
         $9 = Math_fround(0.0);
         break label$218;
        }
        $10 = float_20ImGui__ScaleRatioFromValueT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_f32_4_4($3, 0), $37, $38, ($4 | 0) != 0, $19, $42);
        label$24 : {
         if (!(!(!($10 >= Math_fround(1.0)) | !($21 > Math_fround(0.0))) | !(!($10 <= Math_fround(0.0)) | !($21 < Math_fround(0.0))))) {
          $9 = Math_fround($21 + $10);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
          $1 = ($4 | 0) != 0;
          $12 = float_20ImGui__ScaleValueFromRatioT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29($9, $37, $38, $1, $19, $42);
          if (!($7 & 64)) {
           $12 = float_20ImGui__RoundScalarWithFormatT_float_2c_20float__28char_20const__2c_20int_2c_20float_29($6, $12)
          }
          $12 = Math_fround(float_20ImGui__ScaleRatioFromValueT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29($12, $37, $38, $1, $19, $42) - $10);
          $10 = SAFE_HEAP_LOAD_f32_4_4($14, 12052);
          if ($21 > Math_fround(0.0)) {
           $12 = Math_fround($10 - ($12 < $21 ? $12 : $21));
           $2 = 1;
           break label$24;
          }
          $12 = Math_fround($10 - ($12 >= $21 ? $12 : $21));
          $2 = 1;
          break label$24;
         }
         $9 = $10;
         $2 = 0;
        }
        SAFE_HEAP_STORE_i32_1_1($14, 12056, 0);
        SAFE_HEAP_STORE_f32_4_4($14, 12052, $12);
       }
       $12 = $9;
      }
      $13 = 0;
      if (!$2) {
       break label$62
      }
      $9 = float_20ImGui__ScaleValueFromRatioT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29($12, $37, $38, ($4 | 0) != 0, $19, $42);
      if (!($7 & 64)) {
       $9 = float_20ImGui__RoundScalarWithFormatT_float_2c_20float__28char_20const__2c_20int_2c_20float_29($6, $9)
      }
      $10 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
      if ($9 == $10) {
       $13 = $9 != $10;
       break label$62;
      }
      SAFE_HEAP_STORE_f32_4_4($3, 0, $9);
      $13 = 1;
     }
     $2 = $13;
     label$34 : {
      if ($25 < Math_fround(1.0)) {
       $1 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
       $0 = i64toi32_i32$HIGH_BITS;
       SAFE_HEAP_STORE_i64_8_4($8, 8, $1, $0);
       SAFE_HEAP_STORE_i64_8_4($8, 0, $1, $0);
       break label$34;
      }
      $12 = Math_fround(-$24);
      $9 = float_20ImGui__ScaleRatioFromValueT_float_2c_20float_2c_20float__28int_2c_20float_2c_20float_2c_20float_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_f32_4_4($3, 0), $37, $38, ($4 | 0) != 0, $19, $42);
      $20 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 + Math_fround(-2.0)) - $35) - $31) * ($15 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $31);
      if (!$15) {
       $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
       $9 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
       SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround(Math_fround($24 * Math_fround(.5)) + $20));
       SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround($9 + Math_fround(2.0)));
       SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
       SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround($10 + Math_fround(-2.0)));
       break label$34;
      }
      $10 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
      $9 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
      SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround(Math_fround($24 * Math_fround(.5)) + $20));
      SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($9 + Math_fround(-2.0)));
      SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
      SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround($10 + Math_fround(2.0)));
     }
     __stack_pointer = $5 + 16 | 0;
     $15 = $2;
     break label$1;
    case 9:
     break label$3;
    default:
     break label$1;
    };
   }
   $27 = SAFE_HEAP_LOAD_f64_8_8($4, 0);
   $22 = SAFE_HEAP_LOAD_f64_8_8($5, 0);
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $15 = $7 & 1048576;
   $2 = ($15 >>> 18 | 0) + $0 | 0;
   $20 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
   $12 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $24 = Math_fround(Math_fround($20 - $12) + Math_fround(-4.0));
   $14 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $10 = SAFE_HEAP_LOAD_f32_4_4($14 + 5540 | 0, 0);
   $11 = $22 > $27 ? $22 - $27 : $27 - $22;
   if (!(!($11 >= 0.0) | 1)) {
    $9 = Math_fround(+$24 / ($11 + 1.0));
    $10 = $9 >= $10 ? $9 : $10;
   }
   $21 = $10 < $24 ? $10 : $24;
   $35 = Math_fround($21 * Math_fround(.5));
   $9 = Math_fround($24 - $21);
   $4 = $7 & 32;
   if ($4) {
    $2 = ImParseFormatPrecision_28char_20const__2c_20int_29($6);
    $25 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($14 + 5548 | 0, 0) * Math_fround(.5)) / ($9 >= Math_fround(1.0) ? $9 : Math_fround(1.0)));
    $26 = powf(Math_fround(.10000000149011612), Math_fround($2 | 0));
   }
   $31 = Math_fround($35 + Math_fround($12 + Math_fround(2.0)));
   $13 = 0;
   label$63 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($14, 7136) | 0) != ($1 | 0)) {
     break label$63
    }
    $10 = Math_fround(0.0);
    $2 = 0;
    label$74 : {
     label$85 : {
      switch (SAFE_HEAP_LOAD_i32_4_4($14, 7188) - 1 | 0) {
      case 0:
       if (!SAFE_HEAP_LOAD_i32_1_U_1($14 + 236 | 0, 0)) {
        ImGui__ClearActiveID_28_29();
        break label$74;
       }
       if ($9 > Math_fround(0.0)) {
        $9 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4(($14 + ($15 >>> 20 << 2) | 0) + 228 | 0, 0) - $31) / $9);
        $10 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
       }
       $10 = $15 ? Math_fround(Math_fround(1.0) - $10) : $10;
       $2 = 1;
       break label$74;
      case 3:
       break label$85;
      default:
       break label$74;
      };
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($14, 7148)) {
      SAFE_HEAP_STORE_i32_1_1($14, 12056, 0);
      SAFE_HEAP_STORE_i32_4_4($14, 12052, 0);
     }
     ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($5 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
     $9 = (wasm2js_f32$0 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($5, 12)), wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($5, 8), wasm2js_i32$0 = $15, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
     if ($9 != Math_fround(0.0)) {
      label$157 : {
       if ((ImParseFormatPrecision_28char_20const__2c_20int_29($6) | 0) > 0) {
        $9 = Math_fround($9 / Math_fround(100.0));
        if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
         break label$157
        }
        $9 = Math_fround($9 / Math_fround(10.0));
        break label$157;
       }
       label$188 : {
        if (!($11 <= 100.0 & $11 >= -100.0)) {
         if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
          break label$188
         }
        }
        $9 = Math_fround(($9 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround($11));
        break label$157;
       }
       $9 = Math_fround($9 / Math_fround(100.0));
      }
      $10 = $9;
      $9 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 828 | 0, 0);
      SAFE_HEAP_STORE_i32_1_1($14, 12056, 1);
      SAFE_HEAP_STORE_f32_4_4($14, 12052, Math_fround(SAFE_HEAP_LOAD_f32_4_4($14, 12052) + ($9 > Math_fround(0.0) ? Math_fround($10 * Math_fround(10.0)) : $10)));
     }
     $19 = SAFE_HEAP_LOAD_f32_4_4($14, 12052);
     label$219 : {
      label$2210 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($14, 7528) | 0) != ($1 | 0)) {
        break label$2210
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($14, 7148)) {
        break label$2210
       }
       ImGui__ClearActiveID_28_29();
       $10 = Math_fround(0.0);
       break label$219;
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($14, 12056)) {
       $10 = Math_fround(0.0);
       break label$219;
      }
      $9 = float_20ImGui__ScaleRatioFromValueT_double_2c_20double_2c_20double__28int_2c_20double_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_f64_8_8($3, 0), $27, $22, ($4 | 0) != 0, $26, $25);
      label$2411 : {
       if (!(!(!($9 >= Math_fround(1.0)) | !($19 > Math_fround(0.0))) | !(!($9 <= Math_fround(0.0)) | !($19 < Math_fround(0.0))))) {
        $10 = Math_fround($19 + $9);
        $10 = $10 < Math_fround(0.0) ? Math_fround(0.0) : $10 > Math_fround(1.0) ? Math_fround(1.0) : $10;
        $1 = ($4 | 0) != 0;
        $11 = double_20ImGui__ScaleValueFromRatioT_double_2c_20double_2c_20double__28int_2c_20float_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29($10, $27, $22, $1, $26, $25);
        if (!($7 & 64)) {
         $11 = double_20ImGui__RoundScalarWithFormatT_double_2c_20double__28char_20const__2c_20int_2c_20double_29($6, $11)
        }
        $12 = Math_fround(float_20ImGui__ScaleRatioFromValueT_double_2c_20double_2c_20double__28int_2c_20double_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29($11, $27, $22, $1, $26, $25) - $9);
        $9 = SAFE_HEAP_LOAD_f32_4_4($14, 12052);
        if ($19 > Math_fround(0.0)) {
         $12 = Math_fround($9 - ($12 < $19 ? $12 : $19));
         $2 = 1;
         break label$2411;
        }
        $12 = Math_fround($9 - ($12 >= $19 ? $12 : $19));
        $2 = 1;
        break label$2411;
       }
       $12 = Math_fround(0.0);
       $10 = $9;
       $2 = 0;
      }
      SAFE_HEAP_STORE_i32_1_1($14, 12056, 0);
      SAFE_HEAP_STORE_f32_4_4($14, 12052, $12);
     }
    }
    $13 = 0;
    if (!$2) {
     break label$63
    }
    $18 = double_20ImGui__ScaleValueFromRatioT_double_2c_20double_2c_20double__28int_2c_20float_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29($10, $27, $22, ($4 | 0) != 0, $26, $25);
    if (!($7 & 64)) {
     $18 = double_20ImGui__RoundScalarWithFormatT_double_2c_20double__28char_20const__2c_20int_2c_20double_29($6, $18)
    }
    $11 = SAFE_HEAP_LOAD_f64_8_8($3, 0);
    if ($18 == $11) {
     $13 = $11 != $18;
     break label$63;
    }
    SAFE_HEAP_STORE_f64_8_8($3, 0, $18);
    $13 = 1;
   }
   $2 = $13;
   label$3412 : {
    if ($24 < Math_fround(1.0)) {
     $1 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
     $0 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_4($8, 8, $1, $0);
     SAFE_HEAP_STORE_i64_8_4($8, 0, $1, $0);
     break label$3412;
    }
    $12 = Math_fround(-$21);
    $9 = float_20ImGui__ScaleRatioFromValueT_double_2c_20double_2c_20double__28int_2c_20double_2c_20double_2c_20double_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_f64_8_8($3, 0), $27, $22, ($4 | 0) != 0, $26, $25);
    $20 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($20 + Math_fround(-2.0)) - $35) - $31) * ($15 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $31);
    if (!$15) {
     $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
     $9 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
     SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround(Math_fround($21 * Math_fround(.5)) + $20));
     SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround($9 + Math_fround(2.0)));
     SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
     SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround($10 + Math_fround(-2.0)));
     break label$3412;
    }
    $10 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
    SAFE_HEAP_STORE_f32_4_4($8, 12, Math_fround(Math_fround($21 * Math_fround(.5)) + $20));
    SAFE_HEAP_STORE_f32_4_4($8, 8, Math_fround($9 + Math_fround(-2.0)));
    SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround(Math_fround($12 * Math_fround(.5)) + $20));
    SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround($10 + Math_fround(2.0)));
   }
   __stack_pointer = $5 + 16 | 0;
   $15 = $2;
  }
  __stack_pointer = $32 + 16 | 0;
  return $15;
 }
 
 function bool_20ImGui__SliderBehaviorT_int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20int__2c_20int_2c_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $16 = __stack_pointer - 16 | 0;
  __stack_pointer = $16;
  $10 = $3 - $4 | 0;
  $12 = $10 >> 31;
  $21 = ($10 ^ $12) - $12 | 0;
  $14 = $6 & 1048576;
  $12 = ($14 >>> 18 | 0) + $0 | 0;
  $23 = SAFE_HEAP_LOAD_f32_4_4($12 + 8 | 0, 0);
  $11 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
  $17 = Math_fround(Math_fround($23 - $11) + Math_fround(-4.0));
  $9 = Math_fround($17 / Math_fround($21 + 1 | 0));
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_f32_4_4($10 + 5540 | 0, 0);
  $8 = $8 <= $9 ? $9 : $8;
  $18 = $8 < $17 ? $8 : $17;
  $24 = Math_fround($18 * Math_fround(.5));
  $9 = Math_fround($17 - $18);
  $19 = $6 & 32;
  if ($19) {
   $13 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 5548 | 0, 0) * Math_fround(.5)) / ($9 >= Math_fround(1.0) ? $9 : Math_fround(1.0)));
   $20 = powf(Math_fround(.10000000149011612), Math_fround(1.0));
  }
  $22 = Math_fround($24 + Math_fround($11 + Math_fround(2.0)));
  $15 = 0;
  label$5 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($10, 7136) | 0) != ($1 | 0)) {
    break label$5
   }
   $8 = Math_fround(0.0);
   $12 = 0;
   label$6 : {
    label$7 : {
     switch (SAFE_HEAP_LOAD_i32_4_4($10, 7188) - 1 | 0) {
     case 0:
      if (!SAFE_HEAP_LOAD_i32_1_U_1($10 + 236 | 0, 0)) {
       ImGui__ClearActiveID_28_29();
       break label$6;
      }
      if ($9 > Math_fround(0.0)) {
       $8 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4(($10 + ($14 >>> 20 << 2) | 0) + 228 | 0, 0) - $22) / $9);
       $8 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
      }
      $8 = $14 ? Math_fround(Math_fround(1.0) - $8) : $8;
      $12 = 1;
      break label$6;
     case 3:
      break label$7;
     default:
      break label$6;
     };
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($10, 7148)) {
     SAFE_HEAP_STORE_i32_1_1($10, 12056, 0);
     SAFE_HEAP_STORE_i32_4_4($10, 12052, 0);
    }
    ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($16 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
    $8 = (wasm2js_f32$0 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($16, 12)), wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($16, 8), wasm2js_i32$0 = $14, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    if ($8 != Math_fround(0.0)) {
     label$14 : {
      label$17 : {
       if ($21 >>> 0 >= 101) {
        if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
         break label$17
        }
       }
       $8 = Math_fround(($8 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround($21 | 0));
       break label$14;
      }
      $8 = Math_fround($8 / Math_fround(100.0));
     }
     $9 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 828 | 0, 0);
     SAFE_HEAP_STORE_i32_1_1($10, 12056, 1);
     SAFE_HEAP_STORE_f32_4_4($10, 12052, Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 12052) + ($9 > Math_fround(0.0) ? Math_fround($8 * Math_fround(10.0)) : $8)));
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($10, 12052);
    label$19 : {
     label$20 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($10, 7528) | 0) != ($1 | 0)) {
       break label$20
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($10, 7148)) {
       break label$20
      }
      ImGui__ClearActiveID_28_29();
      $8 = Math_fround(0.0);
      $1 = 0;
      break label$19;
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($10, 12056)) {
      $8 = Math_fround(0.0);
      $1 = 0;
      break label$19;
     }
     $9 = float_20ImGui__ScaleRatioFromValueT_int_2c_20int_2c_20float__28int_2c_20int_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($2, 0), $3, $4, ($19 | 0) != 0, $20, $13);
     label$22 : {
      if (!(!(!($9 >= Math_fround(1.0)) | !($11 > Math_fround(0.0))) | !(!($9 <= Math_fround(0.0)) | !($11 < Math_fround(0.0))))) {
       $8 = Math_fround($11 + $9);
       $8 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
       $12 = ($19 | 0) != 0;
       $1 = int_20ImGui__ScaleValueFromRatioT_int_2c_20int_2c_20float__28int_2c_20float_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29($8, $3, $4, $12, $20, $13);
       if (!($6 & 64)) {
        $1 = int_20ImGui__RoundScalarWithFormatT_int_2c_20int__28char_20const__2c_20int_2c_20int_29($5, $1)
       }
       $9 = Math_fround(float_20ImGui__ScaleRatioFromValueT_int_2c_20int_2c_20float__28int_2c_20int_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29($1, $3, $4, $12, $20, $13) - $9);
       $25 = SAFE_HEAP_LOAD_f32_4_4($10, 12052);
       if ($11 > Math_fround(0.0)) {
        $11 = Math_fround($25 - ($9 < $11 ? $9 : $11));
        $1 = 1;
        break label$22;
       }
       $11 = Math_fround($25 - ($9 >= $11 ? $9 : $11));
       $1 = 1;
       break label$22;
      }
      $11 = Math_fround(0.0);
      $8 = $9;
      $1 = 0;
     }
     SAFE_HEAP_STORE_i32_1_1($10, 12056, 0);
     SAFE_HEAP_STORE_f32_4_4($10, 12052, $11);
    }
    $12 = $1;
   }
   $15 = 0;
   if (!$12) {
    break label$5
   }
   $1 = int_20ImGui__ScaleValueFromRatioT_int_2c_20int_2c_20float__28int_2c_20float_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29($8, $3, $4, ($19 | 0) != 0, $20, $13);
   if (!($6 & 64)) {
    $1 = int_20ImGui__RoundScalarWithFormatT_int_2c_20int__28char_20const__2c_20int_2c_20int_29($5, $1)
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   if (($1 | 0) == ($5 | 0)) {
    $15 = ($1 | 0) != ($5 | 0);
    break label$5;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
   $15 = 1;
  }
  $1 = $15;
  label$32 : {
   if ($17 < Math_fround(1.0)) {
    $0 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
    $2 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_4($7, 8, $0, $2);
    SAFE_HEAP_STORE_i64_8_4($7, 0, $0, $2);
    break label$32;
   }
   $9 = Math_fround(-$18);
   $8 = float_20ImGui__ScaleRatioFromValueT_int_2c_20int_2c_20float__28int_2c_20int_2c_20int_2c_20int_2c_20bool_2c_20float_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($2, 0), $3, $4, ($19 | 0) != 0, $20, $13);
   $8 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($23 + Math_fround(-2.0)) - $24) - $22) * ($14 ? Math_fround(Math_fround(1.0) - $8) : $8)) + $22);
   if (!$14) {
    $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
    SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround(Math_fround($18 * Math_fround(.5)) + $8));
    SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround($13 + Math_fround(2.0)));
    SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround(Math_fround($9 * Math_fround(.5)) + $8));
    SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround($11 + Math_fround(-2.0)));
    break label$32;
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $13 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
   SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround(Math_fround($18 * Math_fround(.5)) + $8));
   SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($13 + Math_fround(-2.0)));
   SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround(Math_fround($9 * Math_fround(.5)) + $8));
   SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround($11 + Math_fround(2.0)));
  }
  __stack_pointer = $16 + 16 | 0;
  return $1;
 }
 
 function bool_20ImGui__SliderBehaviorT_unsigned_20int_2c_20int_2c_20float__28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20unsigned_20int__2c_20unsigned_20int_2c_20unsigned_20int_2c_20char_20const__2c_20int_2c_20ImRect__29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $23 = __stack_pointer - 16 | 0;
  __stack_pointer = $23;
  $19 = $6 & 1048576;
  $12 = ($19 >>> 18 | 0) + $0 | 0;
  $28 = SAFE_HEAP_LOAD_f32_4_4($12 + 8 | 0, 0);
  $9 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
  $24 = Math_fround(Math_fround($28 - $9) + Math_fround(-4.0));
  $13 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $10 = SAFE_HEAP_LOAD_f32_4_4($13 + 5540 | 0, 0);
  $20 = $4 - $3 | 0;
  $26 = $3 >>> 0 < $4 >>> 0;
  $12 = $26 ? $20 : $3 - $4 | 0;
  if (($12 | 0) >= 0) {
   $8 = Math_fround($24 / Math_fround($12 + 1 | 0));
   $10 = $8 >= $10 ? $8 : $10;
  }
  $25 = $10 < $24 ? $10 : $24;
  $29 = Math_fround($25 * Math_fround(.5));
  $21 = $6 & 32;
  if ($21) {
   $11 = powf(Math_fround(.10000000149011612), Math_fround(1.0))
  }
  $27 = Math_fround($29 + Math_fround($9 + Math_fround(2.0)));
  $16 = 0;
  label$6 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($13, 7136) | 0) != ($1 | 0)) {
    break label$6
   }
   $10 = Math_fround(0.0);
   label$7 : {
    label$8 : {
     switch (SAFE_HEAP_LOAD_i32_4_4($13, 7188) - 1 | 0) {
     case 0:
      if (!SAFE_HEAP_LOAD_i32_1_U_1($13 + 236 | 0, 0)) {
       ImGui__ClearActiveID_28_29();
       break label$7;
      }
      $8 = Math_fround($24 - $25);
      if ($8 > Math_fround(0.0)) {
       $8 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4(($13 + ($19 >>> 20 << 2) | 0) + 228 | 0, 0) - $27) / $8);
       $10 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
      }
      $10 = $19 ? Math_fround(Math_fround(1.0) - $10) : $10;
      $18 = 1;
      break label$7;
     case 3:
      break label$8;
     default:
      break label$7;
     };
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($13, 7148)) {
     SAFE_HEAP_STORE_i32_1_1($13, 12056, 0);
     SAFE_HEAP_STORE_i32_4_4($13, 12052, 0);
    }
    ImGui__GetNavInputAmount2d_28int_2c_20ImGuiInputReadMode_2c_20float_2c_20float_29($23 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
    $8 = (wasm2js_f32$0 = Math_fround(-SAFE_HEAP_LOAD_f32_4_4($23, 12)), wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($23, 8), wasm2js_i32$0 = $19, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
    if ($8 != Math_fround(0.0)) {
     label$15 : {
      label$18 : {
       if ($12 + 100 >>> 0 >= 201) {
        if (!(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 824 | 0, 0) > Math_fround(0.0))) {
         break label$18
        }
       }
       $10 = Math_fround(($8 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround($12 | 0));
       break label$15;
      }
      $10 = Math_fround($8 / Math_fround(100.0));
     }
     $8 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 828 | 0, 0);
     SAFE_HEAP_STORE_i32_1_1($13, 12056, 1);
     SAFE_HEAP_STORE_f32_4_4($13, 12052, Math_fround(SAFE_HEAP_LOAD_f32_4_4($13, 12052) + ($8 > Math_fround(0.0) ? Math_fround($10 * Math_fround(10.0)) : $10)));
    }
    $17 = SAFE_HEAP_LOAD_f32_4_4($13, 12052);
    label$20 : {
     label$21 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($13, 7528) | 0) != ($1 | 0)) {
       break label$21
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($13, 7148)) {
       break label$21
      }
      ImGui__ClearActiveID_28_29();
      $10 = Math_fround(0.0);
      $1 = 0;
      break label$20;
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($13, 12056)) {
      $10 = Math_fround(0.0);
      $1 = 0;
      break label$20;
     }
     $16 = ($3 | 0) == ($4 | 0);
     $10 = Math_fround(0.0);
     label$23 : {
      if ($16) {
       break label$23
      }
      $12 = $26 ? $3 : $4;
      $18 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      $1 = $3 >>> 0 > $4 >>> 0 ? $3 : $4;
      $12 = $12 >>> 0 > $18 >>> 0 ? $12 : $1 >>> 0 > $18 >>> 0 ? $18 : $1;
      if ($21) {
       $1 = $3 >>> 0 > $4 >>> 0;
       $8 = Math_fround(($1 ? $4 : $3) >>> 0);
       $9 = $8 < $11 ? $11 : $8;
       $10 = Math_fround($12 >>> 0);
       $14 = Math_fround(0.0);
       label$25 : {
        if ($9 >= $10) {
         break label$25
        }
        $8 = Math_fround(($3 >>> 0 < $4 >>> 0 ? $4 : $3) >>> 0);
        $8 = $8 < $11 ? $11 : $8;
        $14 = Math_fround(1.0);
        if ($8 <= $10) {
         break label$25
        }
        $14 = Math_fround(logf(Math_fround($10 / $9)) / logf(Math_fround($8 / $9)));
       }
       $8 = $14;
       $10 = $1 ? Math_fround(Math_fround(1.0) - $8) : $8;
       break label$23;
      }
      $10 = Math_fround(Math_fround($12 - $3 | 0) / Math_fround($20 | 0));
     }
     label$26 : {
      if (!(!(!($10 >= Math_fround(1.0)) | !($17 > Math_fround(0.0))) | !(!($10 <= Math_fround(0.0)) | !($17 < Math_fround(0.0))))) {
       $8 = Math_fround($17 + $10);
       $8 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
       $1 = $3;
       label$30 : {
        if ($16) {
         break label$30
        }
        if ($21) {
         $1 = $3;
         if ($8 <= Math_fround(0.0)) {
          break label$30
         }
         $1 = $4;
         if ($8 >= Math_fround(1.0)) {
          break label$30
         }
         $9 = Math_fround($4 >>> 0);
         $22 = $9 < $11 ? $11 : $9;
         $9 = Math_fround($3 >>> 0);
         $15 = $9 < $11 ? $11 : $9;
         $1 = $3 >>> 0 > $4 >>> 0;
         $9 = $1 ? $22 : $15;
         $9 = Math_fround($9 * powf(Math_fround(($1 ? $15 : $22) / $9), $1 ? Math_fround(Math_fround(1.0) - $8) : $8));
         if ($9 < Math_fround(4294967296.0) & $9 >= Math_fround(0.0)) {
          $1 = ~~$9 >>> 0;
          break label$30;
         }
         $1 = 0;
         break label$30;
        }
        $1 = $4;
        if (!($8 < Math_fround(1.0))) {
         break label$30
        }
        $9 = Math_fround(($3 >>> 0 > $4 >>> 0 ? Math_fround(-.5) : Math_fround(.5)) + Math_fround($8 * Math_fround($20 | 0)));
        label$35 : {
         if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
          $1 = ~~$9;
          break label$35;
         }
         $1 = -2147483648;
        }
        $1 = $1 + $3 | 0;
       }
       if (!($6 & 64)) {
        $1 = int_20ImGui__RoundScalarWithFormatT_int_2c_20int__28char_20const__2c_20int_2c_20int_29($5, $1)
       }
       $9 = Math_fround(0.0);
       label$39 : {
        if ($16) {
         break label$39
        }
        $18 = $26 ? $3 : $4;
        $12 = $3 >>> 0 > $4 >>> 0 ? $3 : $4;
        $12 = $1 >>> 0 < $18 >>> 0 ? $18 : $1 >>> 0 < $12 >>> 0 ? $1 : $12;
        if ($21) {
         $1 = $3 >>> 0 > $4 >>> 0;
         $9 = Math_fround(($1 ? $4 : $3) >>> 0);
         $22 = $9 < $11 ? $11 : $9;
         $15 = Math_fround($12 >>> 0);
         $14 = Math_fround(0.0);
         label$41 : {
          if ($22 >= $15) {
           break label$41
          }
          $9 = Math_fround(($3 >>> 0 < $4 >>> 0 ? $4 : $3) >>> 0);
          $9 = $9 < $11 ? $11 : $9;
          $14 = Math_fround(1.0);
          if ($9 <= $15) {
           break label$41
          }
          $14 = Math_fround(logf(Math_fround($15 / $22)) / logf(Math_fround($9 / $22)));
         }
         $9 = $14;
         $9 = $1 ? Math_fround(Math_fround(1.0) - $9) : $9;
         break label$39;
        }
        $9 = Math_fround(Math_fround($12 - $3 | 0) / Math_fround($20 | 0));
       }
       $9 = Math_fround($9 - $10);
       $10 = SAFE_HEAP_LOAD_f32_4_4($13, 12052);
       if ($17 > Math_fround(0.0)) {
        $9 = Math_fround($10 - ($9 < $17 ? $9 : $17));
        $10 = $8;
        $1 = 1;
        break label$26;
       }
       $9 = Math_fround($10 - ($9 >= $17 ? $9 : $17));
       $10 = $8;
       $1 = 1;
       break label$26;
      }
      $9 = Math_fround(0.0);
      $1 = 0;
     }
     SAFE_HEAP_STORE_i32_1_1($13, 12056, 0);
     SAFE_HEAP_STORE_f32_4_4($13, 12052, $9);
    }
    $18 = $1;
   }
   $16 = 0;
   if (!$18) {
    break label$6
   }
   $1 = $3;
   label$43 : {
    if (($3 | 0) == ($4 | 0)) {
     break label$43
    }
    if ($21) {
     $1 = $3;
     if ($10 <= Math_fround(0.0)) {
      break label$43
     }
     $1 = $4;
     if ($10 >= Math_fround(1.0)) {
      break label$43
     }
     $8 = Math_fround($4 >>> 0);
     $15 = $8 < $11 ? $11 : $8;
     $8 = Math_fround($3 >>> 0);
     $9 = $8 < $11 ? $11 : $8;
     $1 = $3 >>> 0 > $4 >>> 0;
     $8 = $1 ? $15 : $9;
     $8 = Math_fround($8 * powf(Math_fround(($1 ? $9 : $15) / $8), $1 ? Math_fround(Math_fround(1.0) - $10) : $10));
     if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
      $1 = ~~$8 >>> 0;
      break label$43;
     }
     $1 = 0;
     break label$43;
    }
    $1 = $4;
    if (!($10 < Math_fround(1.0))) {
     break label$43
    }
    $8 = Math_fround(($3 >>> 0 > $4 >>> 0 ? Math_fround(-.5) : Math_fround(.5)) + Math_fround($10 * Math_fround($20 | 0)));
    label$48 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $1 = ~~$8;
      break label$48;
     }
     $1 = -2147483648;
    }
    $1 = $1 + $3 | 0;
   }
   if (!($6 & 64)) {
    $1 = int_20ImGui__RoundScalarWithFormatT_int_2c_20int__28char_20const__2c_20int_2c_20int_29($5, $1)
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   if (($1 | 0) == ($5 | 0)) {
    $16 = ($1 | 0) != ($5 | 0);
    break label$6;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
   $16 = 1;
  }
  $6 = $16;
  label$53 : {
   if ($24 < Math_fround(1.0)) {
    $1 = SAFE_HEAP_LOAD_i64_8_4($0, 0);
    $0 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_4($7, 8, $1, $0);
    SAFE_HEAP_STORE_i64_8_4($7, 0, $1, $0);
    break label$53;
   }
   $15 = Math_fround(-$25);
   $17 = Math_fround(Math_fround(Math_fround($28 + Math_fround(-2.0)) - $29) - $27);
   $8 = Math_fround(0.0);
   label$55 : {
    if (($3 | 0) == ($4 | 0)) {
     break label$55
    }
    $5 = $26 ? $3 : $4;
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    $1 = $3 >>> 0 > $4 >>> 0 ? $3 : $4;
    $2 = $2 >>> 0 < $5 >>> 0 ? $5 : $1 >>> 0 > $2 >>> 0 ? $2 : $1;
    if ($21) {
     $1 = $3 >>> 0 > $4 >>> 0;
     $8 = Math_fround(($1 ? $4 : $3) >>> 0);
     $9 = $8 < $11 ? $11 : $8;
     $10 = Math_fround($2 >>> 0);
     $14 = Math_fround(0.0);
     label$57 : {
      if ($9 >= $10) {
       break label$57
      }
      $8 = Math_fround(($3 >>> 0 < $4 >>> 0 ? $4 : $3) >>> 0);
      $8 = $8 < $11 ? $11 : $8;
      $14 = Math_fround(1.0);
      if ($8 <= $10) {
       break label$57
      }
      $14 = Math_fround(logf(Math_fround($10 / $9)) / logf(Math_fround($8 / $9)));
     }
     $8 = $14;
     $8 = $1 ? Math_fround(Math_fround(1.0) - $8) : $8;
     break label$55;
    }
    $8 = Math_fround(Math_fround($2 - $3 | 0) / Math_fround($20 | 0));
   }
   $9 = Math_fround(Math_fround($17 * ($19 ? Math_fround(Math_fround(1.0) - $8) : $8)) + $27);
   if (!$19) {
    $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 12 | 0, 0);
    $8 = SAFE_HEAP_LOAD_f32_4_4($0, 4);
    SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround(Math_fround($25 * Math_fround(.5)) + $9));
    SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround($8 + Math_fround(2.0)));
    SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround(Math_fround($15 * Math_fround(.5)) + $9));
    SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround($10 + Math_fround(-2.0)));
    break label$53;
   }
   $10 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($0, 8);
   SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround(Math_fround($25 * Math_fround(.5)) + $9));
   SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($8 + Math_fround(-2.0)));
   SAFE_HEAP_STORE_f32_4_4($7, 4, Math_fround(Math_fround($15 * Math_fround(.5)) + $9));
   SAFE_HEAP_STORE_f32_4_4($7, 0, Math_fround($10 + Math_fround(2.0)));
  }
  __stack_pointer = $23 + 16 | 0;
  return $6;
 }
 
 function ImGui__SliderScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0;
  $7 = __stack_pointer - 192 | 0;
  __stack_pointer = $7;
  $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $13 = SAFE_HEAP_LOAD_i32_4_4($9, 7080);
  SAFE_HEAP_STORE_i32_1_1($13, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($13, 143)) {
   $10 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($13, $0);
   $17 = ImGui__CalcItemWidth_28_29();
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($7 + 184 | 0, $0, 0, 1, Math_fround(-1.0));
   $18 = SAFE_HEAP_LOAD_f32_4_4($13, 208);
   $8 = SAFE_HEAP_LOAD_i64_8_4($13, 208);
   $14 = i64toi32_i32$HIGH_BITS;
   $11 = $7 + 180 | 0;
   $15 = SAFE_HEAP_LOAD_f32_4_4($9 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($11, 0, Math_fround(Math_fround(Math_fround($15 + $15) + SAFE_HEAP_LOAD_f32_4_4($7, 188)) + SAFE_HEAP_LOAD_f32_4_4($13 + 212 | 0, 0)));
   SAFE_HEAP_STORE_i64_8_8($7, 168, $8, $14);
   SAFE_HEAP_STORE_f32_4_4($7, 176, Math_fround($17 + $18));
   $17 = Math_fround(0.0);
   $18 = SAFE_HEAP_LOAD_f32_4_4($7, 184);
   if ($18 > Math_fround(0.0)) {
    $17 = Math_fround($18 + SAFE_HEAP_LOAD_f32_4_4($9 + 5500 | 0, 0))
   }
   $12 = $7 + 152 | 0;
   SAFE_HEAP_STORE_f32_4_4($12 + 12 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 0) + Math_fround(0.0)));
   SAFE_HEAP_STORE_i64_8_8($7, 152, $8, $14);
   SAFE_HEAP_STORE_f32_4_4($7, 160, Math_fround($17 + SAFE_HEAP_LOAD_f32_4_4($7, 176)));
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($12, $15);
   $8 = 0;
   $11 = $12;
   $12 = $6 & 128;
   label$3 : {
    if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($11, $10, $7 + 168 | 0, $12 << 1 ^ 256)) {
     break label$3
    }
    label$4 : {
     if (!$5) {
      $5 = SAFE_HEAP_LOAD_i32_4_4(($1 << 4) + 48168 | 0, 0);
      break label$4;
     }
     label$6 : {
      if (($1 | 0) != 4) {
       break label$6
      }
      if (!strcmp($5, 13404)) {
       break label$6
      }
      label$7 : {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 0) | 0) != 37) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 1) | 0) != 46) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 2) | 0) != 48) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 3) | 0) != 102) {
        break label$7
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($5, 4)) {
        break label$7
       }
       $5 = 13404;
       break label$4;
      }
      $8 = $5;
      while (1) {
       label$9 : {
        label$10 : {
         $14 = SAFE_HEAP_LOAD_i32_1_U_1($8, 0);
         if (!$14) {
          break label$10
         }
         if (($14 | 0) == 37) {
          if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 1) | 0) != 37) {
           break label$10
          }
         }
         $8 = ((($14 | 0) == 37) + $8 | 0) + 1 | 0;
         $11 = 1;
         break label$9;
        }
        $11 = 0;
       }
       if ($11) {
        continue
       }
       break;
      };
     }
    }
    $14 = $5;
    $16 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($7 + 168 | 0, $10);
    label$13 : {
     $8 = 0;
     label$12 : {
      if ($12) {
       break label$12
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $8 = 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($5, 7136) | 0) != ($10 | 0)) {
       break label$12
      }
      $8 = (SAFE_HEAP_LOAD_i32_4_4($5, 11968) | 0) == ($10 | 0);
     }
     label$14 : {
      if ($8) {
       break label$14
      }
      $5 = 0;
      if ($12) {
       $11 = $5
      } else {
       $11 = SAFE_HEAP_LOAD_i32_1_U_1($9 + 7249 | 0, 0) & 1
      }
      if ($16) {
       $5 = (SAFE_HEAP_LOAD_i32_1_U_1($9 + 992 | 0, 0) | 0) != 0
      }
      label$17 : {
       label$18 : {
        if ($5 | $11) {
         break label$18
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($9, 7520) | 0) == ($10 | 0)) {
         break label$18
        }
        if ((SAFE_HEAP_LOAD_i32_4_4($9, 7532) | 0) != ($10 | 0)) {
         break label$17
        }
       }
       ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($10, $13);
       ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($10, $13);
       ImGui__FocusWindow_28ImGuiWindow__29($13);
       SAFE_HEAP_STORE_i32_4_4($9, 7156, SAFE_HEAP_LOAD_i32_4_4($9, 7156) | 3);
       if ($12) {
        break label$17
       }
       if ($11) {
        break label$14
       }
       if ($5) {
        if (SAFE_HEAP_LOAD_i32_1_U_1($9 + 252 | 0, 0)) {
         break label$14
        }
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($9, 7532) | 0) == ($10 | 0) | $8) {
        break label$14
       }
       break label$13;
      }
      if (!$8) {
       break label$13
      }
     }
     $5 = $0;
     $0 = $6 << 27 >> 31;
     $8 = ImGui__TempInputScalar_28ImRect_20const__2c_20unsigned_20int_2c_20char_20const__2c_20int_2c_20void__2c_20char_20const__2c_20void_20const__2c_20void_20const__29($7 + 168 | 0, $10, $5, $1, $2, $14, $0 & $3, $0 & $4);
     break label$3;
    }
    $11 = ImGui__GetColorU32_28int_2c_20float_29((SAFE_HEAP_LOAD_i32_4_4($9, 7136) | 0) == ($10 | 0) ? 9 : $16 ? 8 : 7, Math_fround(1.0));
    $19 = $7 + 168 | 0;
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($19, $10, 1);
    $5 = SAFE_HEAP_LOAD_i64_8_8($7, 168);
    $12 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($7, 144, $5, $12);
    $8 = SAFE_HEAP_LOAD_i64_8_8($7, 176);
    $16 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($7, 136, $8, $16);
    $15 = SAFE_HEAP_LOAD_f32_4_4($9 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($7, 24, $5, $12);
    SAFE_HEAP_STORE_i64_8_8($7, 16, $8, $16);
    ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($7 + 24 | 0, $7 + 16 | 0, $11, 1, $15);
    $8 = $7 + 120 | 0;
    $5 = $8 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($7, 120, 0, 0);
    $8 = ImGui__SliderBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_2c_20ImRect__29($19, $10, $1, $2, $3, $4, $14, $6, $8);
    if ($8) {
     ImGui__MarkItemEdited_28unsigned_20int_29($10)
    }
    if (SAFE_HEAP_LOAD_f32_4_4($7, 128) > SAFE_HEAP_LOAD_f32_4_4($7, 120)) {
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($13, 580), $7 + 120 | 0, $5, ImGui__GetColorU32_28int_2c_20float_29((SAFE_HEAP_LOAD_i32_4_4($9, 7136) | 0) == ($10 | 0) ? 20 : 19, Math_fround(1.0)), SAFE_HEAP_LOAD_f32_4_4($9 + 5544 | 0, 0), 0)
    }
    $3 = $7 + 176 | 0;
    $4 = $7 + 48 | 0;
    $1 = $4 + ImGui__DataTypeFormatString_28char__2c_20int_2c_20int_2c_20void_20const__2c_20char_20const__29($4, 64, $1, $2, $14) | 0;
    if (SAFE_HEAP_LOAD_i32_1_U_1($9, 12196)) {
     ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(1061, 1056)
    }
    SAFE_HEAP_STORE_i64_8_4($7, 40, 1056964608, 1056964608);
    ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($7 + 168 | 0, $3, $7 + 48 | 0, $1, 0, $7 + 40 | 0, 0);
    if (SAFE_HEAP_LOAD_f32_4_4($7, 184) > Math_fround(0.0)) {
     $15 = SAFE_HEAP_LOAD_f32_4_4($9 + 5500 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($7, 36, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 172) + SAFE_HEAP_LOAD_f32_4_4($9, 5480)));
     SAFE_HEAP_STORE_f32_4_4($7, 32, Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($7, 176)));
     SAFE_HEAP_STORE_i64_8_8($7, 8, SAFE_HEAP_LOAD_i64_8_4($7, 32), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($7 + 8 | 0, $0, 0, 1);
    }
   }
  }
  __stack_pointer = $7 + 192 | 0;
  return $8;
 }
 
 function ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($11, 7080);
  SAFE_HEAP_STORE_i32_1_1($8, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 143)) {
   ImGui__BeginGroup_28_29();
   ImGui__PushID_28char_20const__29($0);
   ImGui__PushMultiItemsWidths_28int_2c_20float_29($3, ImGui__CalcItemWidth_28_29());
   $8 = 0;
   if (($3 | 0) > 0) {
    $12 = SAFE_HEAP_LOAD_i32_4_4(($1 << 4) + 48160 | 0, 0);
    $9 = $2;
    $2 = 0;
    while (1) {
     ImGui__PushID_28int_29($10);
     if ($10) {
      ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($11, 5500))
     }
     $8 = ImGui__SliderScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(19354, $1, $9, $4, $5, $6, $7);
     ImGui__PopID_28_29();
     ImGui__PopItemWidth_28_29();
     $2 = $2 | $8;
     $8 = $2;
     $9 = $9 + $12 | 0;
     $10 = $10 + 1 | 0;
     if (($10 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $9 = $8;
   ImGui__PopID_28_29();
   $1 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0);
   if (($0 | 0) != ($1 | 0)) {
    ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($11 + 5500 | 0, 0));
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $1, 0);
   }
   ImGui__EndGroup_28_29();
  }
  return $9 & 1;
 }
 
 function ImGui__SliderInt_28char_20const__2c_20int__2c_20int_2c_20int_2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i32_4_4($6, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2);
  $0 = ImGui__SliderScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, 4, $1, $6 + 12 | 0, $6 + 8 | 0, $4, $5);
  __stack_pointer = $6 + 16 | 0;
  return $0;
 }
 
 function ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = 0;
  $8 = __stack_pointer - 192 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $12 = SAFE_HEAP_LOAD_i32_4_4($9, 7080);
  SAFE_HEAP_STORE_i32_1_1($12, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($12, 143)) {
   $11 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($12, $0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($8 + 184 | 0, $0, 0, 1, Math_fround(-1.0));
   $13 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   $15 = SAFE_HEAP_LOAD_f32_4_4($12, 208);
   $10 = SAFE_HEAP_LOAD_i64_8_4($12, 208);
   $16 = i64toi32_i32$HIGH_BITS;
   $14 = $8 + 180 | 0;
   SAFE_HEAP_STORE_f32_4_4($14, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($12 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($1, 4)));
   SAFE_HEAP_STORE_i64_8_8($8, 168, $10, $16);
   SAFE_HEAP_STORE_f32_4_4($8, 176, Math_fround($15 + $13));
   $13 = Math_fround(0.0);
   $15 = SAFE_HEAP_LOAD_f32_4_4($8, 184);
   if ($15 > Math_fround(0.0)) {
    $13 = Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($9 + 5500 | 0, 0))
   }
   $1 = $8 + 152 | 0;
   SAFE_HEAP_STORE_f32_4_4($1 + 12 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($14, 0) + Math_fround(0.0)));
   SAFE_HEAP_STORE_i64_8_8($8, 152, $10, $16);
   SAFE_HEAP_STORE_f32_4_4($8, 160, Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($8, 176)));
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($1, SAFE_HEAP_LOAD_f32_4_4($9 + 5480 | 0, 0));
   $10 = 0;
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($8 + 168 | 0, $11, 0, 0)) {
    label$4 : {
     if (!$6) {
      $6 = SAFE_HEAP_LOAD_i32_4_4(($2 << 4) + 48168 | 0, 0);
      break label$4;
     }
     label$6 : {
      if (($2 | 0) != 4) {
       break label$6
      }
      if (!strcmp($6, 13404)) {
       break label$6
      }
      label$7 : {
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 0) | 0) != 37) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 1) | 0) != 46) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 2) | 0) != 48) {
        break label$7
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($6, 3) | 0) != 102) {
        break label$7
       }
       if (SAFE_HEAP_LOAD_i32_1_U_1($6, 4)) {
        break label$7
       }
       $6 = 13404;
       break label$4;
      }
      $10 = $6;
      while (1) {
       label$9 : {
        label$10 : {
         $1 = SAFE_HEAP_LOAD_i32_1_U_1($10, 0);
         if (!$1) {
          break label$10
         }
         if (($1 | 0) == 37) {
          if ((SAFE_HEAP_LOAD_i32_1_U_1($10, 1) | 0) != 37) {
           break label$10
          }
         }
         $10 = ((($1 | 0) == 37) + $10 | 0) + 1 | 0;
         $1 = 1;
         break label$9;
        }
        $1 = 0;
       }
       if ($1) {
        continue
       }
       break;
      };
     }
    }
    $10 = $6;
    $1 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($8 + 168 | 0, $11);
    label$12 : {
     label$13 : {
      if ($1) {
       if (SAFE_HEAP_LOAD_i32_1_U_1($9 + 992 | 0, 0)) {
        break label$13
       }
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($9, 7520) | 0) == ($11 | 0)) {
       break label$13
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($9, 7532) | 0) != ($11 | 0)) {
       break label$12
      }
     }
     ImGui__SetActiveID_28unsigned_20int_2c_20ImGuiWindow__29($11, $12);
     ImGui__SetFocusID_28unsigned_20int_2c_20ImGuiWindow__29($11, $12);
     ImGui__FocusWindow_28ImGuiWindow__29($12);
     SAFE_HEAP_STORE_i32_4_4($9, 7156, SAFE_HEAP_LOAD_i32_4_4($9, 7156) | 12);
    }
    $16 = ImGui__GetColorU32_28int_2c_20float_29((SAFE_HEAP_LOAD_i32_4_4($9, 7136) | 0) == ($11 | 0) ? 9 : $1 ? 8 : 7, Math_fround(1.0));
    $17 = $8 + 168 | 0;
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($17, $11, 1);
    $1 = SAFE_HEAP_LOAD_i64_8_8($8, 168);
    $14 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($8, 144, $1, $14);
    $6 = SAFE_HEAP_LOAD_i64_8_8($8, 176);
    $18 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($8, 136, $6, $18);
    $13 = SAFE_HEAP_LOAD_f32_4_4($9 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($8, 16, $1, $14);
    SAFE_HEAP_STORE_i64_8_8($8, 8, $6, $18);
    ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($8 + 16 | 0, $8 + 8 | 0, $16, 1, $13);
    $1 = $8 + 120 | 0;
    SAFE_HEAP_STORE_i64_8_8($1 + 8 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($8, 120, 0, 0);
    $1 = ImGui__SliderBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_2c_20ImRect__29($17, $11, $2, $3, $4, $5, $10, $7 | 1048576, $1);
    if ($1) {
     ImGui__MarkItemEdited_28unsigned_20int_29($11)
    }
    $4 = $8 + 176 | 0;
    if (SAFE_HEAP_LOAD_f32_4_4($8 + 132 | 0, 0) > SAFE_HEAP_LOAD_f32_4_4($8, 124)) {
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($12, 580), $8 + 120 | 0, $8 + 128 | 0, ImGui__GetColorU32_28int_2c_20float_29((SAFE_HEAP_LOAD_i32_4_4($9, 7136) | 0) == ($11 | 0) ? 20 : 19, Math_fround(1.0)), SAFE_HEAP_LOAD_f32_4_4($9 + 5544 | 0, 0), 0)
    }
    $5 = $8 + 48 | 0;
    $2 = ImGui__DataTypeFormatString_28char__2c_20int_2c_20int_2c_20void_20const__2c_20char_20const__29($5, 64, $2, $3, $10);
    $13 = SAFE_HEAP_LOAD_f32_4_4($9, 5480);
    SAFE_HEAP_STORE_f32_4_4($8, 40, SAFE_HEAP_LOAD_f32_4_4($8, 168));
    SAFE_HEAP_STORE_f32_4_4($8, 44, Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($8, 172)));
    SAFE_HEAP_STORE_i64_8_4($8, 32, 1056964608, 0);
    ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($8 + 40 | 0, $4, $5, $2 + $5 | 0, 0, $8 + 32 | 0, 0);
    if (SAFE_HEAP_LOAD_f32_4_4($8, 184) > Math_fround(0.0)) {
     $13 = SAFE_HEAP_LOAD_f32_4_4($9 + 5500 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($8, 28, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 172) + SAFE_HEAP_LOAD_f32_4_4($9, 5480)));
     SAFE_HEAP_STORE_f32_4_4($8, 24, Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($8, 176)));
     SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_4($8, 24), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($8, $0, 0, 1);
    }
    $10 = $1;
   }
  }
  __stack_pointer = $8 + 192 | 0;
  return $10;
 }
 
 function ImStb__stb_textedit_click_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__2c_20float_2c_20float_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 23)) {
    break label$1
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
   $6 = $4 + (SAFE_HEAP_LOAD_i32_4_4($0, 4) << 1) | 0;
   while (1) {
    $5 = $4;
    if ($6 >>> 0 <= $5 >>> 0) {
     $3 = Math_fround(0.0);
     break label$1;
    }
    $4 = $5 + 2 | 0;
    $3 = Math_fround(0.0);
    if ((SAFE_HEAP_LOAD_i32_2_U_2($5, 0) | 0) != 10) {
     continue
    }
    break;
   };
  }
  $0 = ImStb__stb_text_locate_coord_28ImGuiInputTextState__2c_20float_2c_20float_29($0, $2, $3);
  SAFE_HEAP_STORE_i32_1_1($1, 22, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
 }
 
 function ImGuiInputTextState__OnKeyPressed_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = 0, $28 = Math_fround(0), $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = Math_fround(0), $34 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0);
  $14 = __stack_pointer - 32 | 0;
  __stack_pointer = $14;
  $23 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
  $9 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $29 = $23 + ($9 << 1) | 0;
  $4 = $0 + 60 | 0;
  $30 = SAFE_HEAP_LOAD_i32_4_4($0 + 76 | 0, 0);
  $27 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($0 + 83 | 0, 0);
  $31 = $2;
  $32 = ($2 | 0) != 0;
  $13 = SAFE_HEAP_LOAD_f32_4_4($0 + 88 | 0, 0);
  $11 = $0 + 82 | 0;
  $10 = SAFE_HEAP_LOAD_i32_1_U_1($11, 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
  $6 = $0 + 68 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  $7 = $0 - -64 | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    while (1) {
                     label$19 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         label$24 : {
                          label$25 : {
                           label$26 : {
                            label$27 : {
                             label$28 : {
                              label$29 : {
                               label$30 : {
                                label$31 : {
                                 label$32 : {
                                  label$33 : {
                                   $18 = $1;
                                   switch ($1 - 2097152 | 0) {
                                   case 5:
                                    break label$12;
                                   case 4:
                                    break label$13;
                                   case 7:
                                    break label$16;
                                   case 6:
                                    break label$17;
                                   case 9:
                                    break label$18;
                                   case 8:
                                    break label$19;
                                   case 2:
                                   case 14:
                                    break label$21;
                                   case 3:
                                   case 15:
                                    break label$22;
                                   case 13:
                                    break label$25;
                                   case 12:
                                    break label$27;
                                   case 1:
                                    break label$29;
                                   case 0:
                                    break label$30;
                                   case 11:
                                    break label$31;
                                   case 10:
                                    break label$32;
                                   default:
                                    break label$33;
                                   };
                                  }
                                  label$34 : {
                                   switch ($18 - 6291456 | 0) {
                                   case 5:
                                    break label$10;
                                   case 4:
                                    break label$11;
                                   case 7:
                                    break label$14;
                                   case 6:
                                    break label$15;
                                   case 9:
                                    break label$18;
                                   case 8:
                                    break label$19;
                                   case 2:
                                   case 14:
                                    break label$21;
                                   case 3:
                                   case 15:
                                    break label$22;
                                   case 1:
                                    break label$23;
                                   case 13:
                                    break label$24;
                                   case 12:
                                    break label$26;
                                   case 0:
                                    break label$28;
                                   default:
                                    break label$34;
                                   };
                                  }
                                  $1 = ($18 | 0) <= 2097151 ? $18 : 0;
                                  if (($1 | 0) <= 0) {
                                   break label$1
                                  }
                                  SAFE_HEAP_STORE_i32_2_2($14, 8, $1);
                                  if (($1 | 0) == 10) {
                                   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 83) & 255) {
                                    break label$1
                                   }
                                  }
                                  label$36 : {
                                   label$37 : {
                                    if (!SAFE_HEAP_LOAD_i32_1_U_1($0 + 72 | 0, 0)) {
                                     break label$37
                                    }
                                    if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0)) {
                                     break label$37
                                    }
                                    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
                                    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) <= ($1 | 0)) {
                                     break label$37
                                    }
                                    $2 = ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($0 + 92 | 0, $1, 1, 1);
                                    if ($2) {
                                     SAFE_HEAP_STORE_i32_2_2($2, 0, SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0, 20) + ($1 << 1) | 0, 0))
                                    }
                                    SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
                                    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
                                    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 60) << 1;
                                    $2 = $2 + $1 | 0;
                                    $3 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($2, $2 + 2 | 0);
                                    SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) - $3 | 0);
                                    SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
                                    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $1 | 0;
                                    while (1) {
                                     $1 = SAFE_HEAP_LOAD_i32_2_U_2($3, 2);
                                     if ($1) {
                                      SAFE_HEAP_STORE_i32_2_2($2, 0, $1);
                                      $2 = $2 + 2 | 0;
                                     }
                                     $3 = $3 + 2 | 0;
                                     if ($1) {
                                      continue
                                     }
                                     break;
                                    };
                                    SAFE_HEAP_STORE_i32_2_2($2, 0, 0);
                                    if (ImStb__STB_TEXTEDIT_INSERTCHARS_28ImGuiInputTextState__2c_20int_2c_20unsigned_20short_20const__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 60), $14 + 8 | 0, 1)) {
                                     break label$36
                                    }
                                    break label$1;
                                   }
                                   ImStb__stb_textedit_delete_selection_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__29($0, $4);
                                   if (!ImStb__STB_TEXTEDIT_INSERTCHARS_28ImGuiInputTextState__2c_20int_2c_20unsigned_20short_20const__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 60), $14 + 8 | 0, 1)) {
                                    break label$1
                                   }
                                   ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($0 + 92 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 60), 0, 1);
                                  }
                                  SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
                                  SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                                  break label$1;
                                 }
                                 $1 = SAFE_HEAP_LOAD_i32_2_2($0 + 3674 | 0, 0);
                                 label$42 : {
                                  if (!$1) {
                                   break label$42
                                  }
                                  $8 = $0 + 92 | 0;
                                  $3 = ($8 + ($1 << 4) | 0) - 16 | 0;
                                  $15 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
                                  $10 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
                                  $5 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
                                  $2 = SAFE_HEAP_LOAD_i32_2_2($0 + 3676 | 0, 0);
                                  $1 = ($8 + ($2 << 4) | 0) - 16 | 0;
                                  $9 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                                  SAFE_HEAP_STORE_i32_4_4($1, 8, $9);
                                  SAFE_HEAP_STORE_i32_4_4($1, 4, $5);
                                  SAFE_HEAP_STORE_i32_4_4($1, 12, -1);
                                  SAFE_HEAP_STORE_i32_4_4($1, 0, $10);
                                  if ($5) {
                                   label$44 : {
                                    label$45 : {
                                     label$46 : {
                                      $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 3680 | 0, 0) + $5 | 0;
                                      if (($3 | 0) <= 998) {
                                       $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 3684 | 0, 0);
                                       if (($3 | 0) <= ($1 | 0)) {
                                        $3 = ($1 | 0) < ($3 | 0);
                                        break label$45;
                                       }
                                       if (($2 | 0) == 99) {
                                        break label$42
                                       }
                                       $12 = $0 + 1676 | 0;
                                       break label$46;
                                      }
                                      SAFE_HEAP_STORE_i32_4_4($1 + 4 | 0, 0, 0);
                                      break label$44;
                                     }
                                     while (1) {
                                      if ($2 << 16 >> 16 <= 98) {
                                       label$51 : {
                                        if ((SAFE_HEAP_LOAD_i32_4_4($0, 1672) | 0) < 0) {
                                         break label$51
                                        }
                                        $1 = SAFE_HEAP_LOAD_i32_4_4($0, 3684);
                                        $3 = SAFE_HEAP_LOAD_i32_4_4($0, 1664);
                                        $2 = $1 + $3 | 0;
                                        SAFE_HEAP_STORE_i32_4_4($0, 3684, $2);
                                        $2 = $2 << 1;
                                        memmove($2 + $12 | 0, $12 + ($1 << 1) | 0, 1998 - $2 | 0);
                                        $2 = SAFE_HEAP_LOAD_i32_2_2($0, 3676);
                                        if (($2 | 0) > 97) {
                                         break label$51
                                        }
                                        while (1) {
                                         $1 = $8 + ($2 << 4) | 0;
                                         $17 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
                                         if (($17 | 0) >= 0) {
                                          SAFE_HEAP_STORE_i32_4_4($1 + 12 | 0, 0, $3 + $17 | 0)
                                         }
                                         $2 = $2 + 1 | 0;
                                         if (($2 | 0) != 98) {
                                          continue
                                         }
                                         break;
                                        };
                                       }
                                       $1 = SAFE_HEAP_LOAD_i32_2_2($0, 3676) << 4;
                                       $2 = $1 + $8 | 0;
                                       memmove($2 + 16 | 0, $2, 1568 - $1 | 0);
                                       SAFE_HEAP_STORE_i32_2_2($0, 3676, SAFE_HEAP_LOAD_i32_2_U_2($0, 3676) + 1 | 0);
                                      }
                                      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 3684);
                                      $2 = ($1 | 0) < (SAFE_HEAP_LOAD_i32_4_4($0, 3680) + $5 | 0);
                                      $3 = $2;
                                      if (!$2) {
                                       break label$45
                                      }
                                      $2 = SAFE_HEAP_LOAD_i32_2_U_2($0, 3676);
                                      if (($2 | 0) != 99) {
                                       continue
                                      }
                                      break;
                                     };
                                     break label$42;
                                    }
                                    $1 = $1 - $5 | 0;
                                    SAFE_HEAP_STORE_i32_4_4(($8 + (SAFE_HEAP_LOAD_i32_2_2($0, 3676) << 4) | 0) - 4 | 0, 0, $1);
                                    SAFE_HEAP_STORE_i32_4_4($0, 3684, $1);
                                    if (($5 | 0) > 0) {
                                     $8 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
                                     $2 = 0;
                                     while (1) {
                                      SAFE_HEAP_STORE_i32_2_2((($1 + $2 << 1) + $0 | 0) + 1676 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_2($8 + ($2 + $10 << 1) | 0, 0));
                                      $2 = $2 + 1 | 0;
                                      if (($5 | 0) != ($2 | 0)) {
                                       continue
                                      }
                                      break;
                                     };
                                    }
                                    if ($3) {
                                     break label$42
                                    }
                                   }
                                   SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
                                   $1 = $10 << 1;
                                   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $1 | 0;
                                   $3 = $5 << 1;
                                   $8 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($2, $3 + $2 | 0);
                                   SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) - $8 | 0);
                                   SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - $5 | 0);
                                   $3 = $3 + (SAFE_HEAP_LOAD_i32_4_4($0, 20) + $1 | 0) | 0;
                                   while (1) {
                                    $1 = SAFE_HEAP_LOAD_i32_2_U_2($3, 0);
                                    if ($1) {
                                     SAFE_HEAP_STORE_i32_2_2($2, 0, $1);
                                     $2 = $2 + 2 | 0;
                                    }
                                    $3 = $3 + 2 | 0;
                                    if ($1) {
                                     continue
                                    }
                                    break;
                                   };
                                   SAFE_HEAP_STORE_i32_2_2($2, 0, 0);
                                  }
                                  if ($9) {
                                   ImStb__STB_TEXTEDIT_INSERTCHARS_28ImGuiInputTextState__2c_20int_2c_20unsigned_20short_20const__2c_20int_29($0, $10, (($15 << 1) + $0 | 0) + 1676 | 0, $9);
                                   $1 = $0 + 3680 | 0;
                                   SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - $9 | 0);
                                  }
                                  SAFE_HEAP_STORE_i32_4_4($0, 60, $10 + $9 | 0);
                                  SAFE_HEAP_STORE_i32_2_2($0, 3674, SAFE_HEAP_LOAD_i32_2_U_2($0, 3674) - 1 | 0);
                                  SAFE_HEAP_STORE_i32_2_2($0, 3676, SAFE_HEAP_LOAD_i32_2_U_2($0, 3676) - 1 | 0);
                                 }
                                 SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                                 break label$1;
                                }
                                $1 = SAFE_HEAP_LOAD_i32_2_2($0 + 3676 | 0, 0);
                                if (($1 | 0) != 99) {
                                 $2 = $1 << 4;
                                 $1 = $0 + 92 | 0;
                                 $2 = $2 + $1 | 0;
                                 $9 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
                                 $5 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
                                 $10 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
                                 $1 = $1 + (SAFE_HEAP_LOAD_i32_2_2($0 + 3674 | 0, 0) << 4) | 0;
                                 $3 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
                                 SAFE_HEAP_STORE_i32_4_4($1, 4, $3);
                                 SAFE_HEAP_STORE_i32_4_4($1, 8, $10);
                                 SAFE_HEAP_STORE_i32_4_4($1, 12, -1);
                                 SAFE_HEAP_STORE_i32_4_4($1, 0, $5);
                                 if ($3) {
                                  $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 3680 | 0, 0);
                                  $2 = $8 + $3 | 0;
                                  label$62 : {
                                   if ((SAFE_HEAP_LOAD_i32_4_4($0 + 3684 | 0, 0) | 0) < ($2 | 0)) {
                                    SAFE_HEAP_STORE_i32_4_4($1 + 4 | 0, 0, 0);
                                    SAFE_HEAP_STORE_i32_4_4($1 + 8 | 0, 0, 0);
                                    break label$62;
                                   }
                                   SAFE_HEAP_STORE_i32_4_4($1 + 12 | 0, 0, $8);
                                   SAFE_HEAP_STORE_i32_4_4($0, 3680, $2);
                                   if (($3 | 0) <= 0) {
                                    break label$62
                                   }
                                   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
                                   $2 = 0;
                                   while (1) {
                                    SAFE_HEAP_STORE_i32_2_2((($2 + $8 << 1) + $0 | 0) + 1676 | 0, 0, SAFE_HEAP_LOAD_i32_2_U_2($1 + ($2 + $5 << 1) | 0, 0));
                                    $2 = $2 + 1 | 0;
                                    if (($3 | 0) != ($2 | 0)) {
                                     continue
                                    }
                                    break;
                                   };
                                  }
                                  SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
                                  $2 = $5 << 1;
                                  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $2 | 0;
                                  $8 = $3 << 1;
                                  $12 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($1, $8 + $1 | 0);
                                  SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) - $12 | 0);
                                  SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - $3 | 0);
                                  $3 = $8 + (SAFE_HEAP_LOAD_i32_4_4($0, 20) + $2 | 0) | 0;
                                  while (1) {
                                   $2 = SAFE_HEAP_LOAD_i32_2_U_2($3, 0);
                                   if ($2) {
                                    SAFE_HEAP_STORE_i32_2_2($1, 0, $2);
                                    $1 = $1 + 2 | 0;
                                   }
                                   $3 = $3 + 2 | 0;
                                   if ($2) {
                                    continue
                                   }
                                   break;
                                  };
                                  SAFE_HEAP_STORE_i32_2_2($1, 0, 0);
                                 }
                                 if ($10) {
                                  ImStb__STB_TEXTEDIT_INSERTCHARS_28ImGuiInputTextState__2c_20int_2c_20unsigned_20short_20const__2c_20int_29($0, $5, (($9 << 1) + $0 | 0) + 1676 | 0, $10);
                                  $1 = $0 + 3684 | 0;
                                  SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + $10 | 0);
                                 }
                                 SAFE_HEAP_STORE_i32_4_4($0, 60, $5 + $10 | 0);
                                 SAFE_HEAP_STORE_i32_2_2($0, 3674, SAFE_HEAP_LOAD_i32_2_U_2($0, 3674) + 1 | 0);
                                 SAFE_HEAP_STORE_i32_2_2($0, 3676, SAFE_HEAP_LOAD_i32_2_U_2($0, 3676) + 1 | 0);
                                }
                                SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                                break label$1;
                               }
                               $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                               $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                               label$69 : {
                                if (($1 | 0) != ($2 | 0)) {
                                 if (($1 | 0) > ($2 | 0)) {
                                  SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                                  SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                                 }
                                 $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                                 SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                                 SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                                 SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                                 break label$69;
                                }
                                $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                                if (($1 | 0) <= 0) {
                                 break label$69
                                }
                                SAFE_HEAP_STORE_i32_4_4($4, 0, $1 - 1 | 0);
                               }
                               SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                               break label$1;
                              }
                              $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                              $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                              label$72 : {
                               if (($1 | 0) != ($2 | 0)) {
                                if (($1 | 0) > ($2 | 0)) {
                                 SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                                 SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                                }
                                $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                                $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
                                $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
                                label$75 : {
                                 if (($2 | 0) == ($3 | 0)) {
                                  break label$75
                                 }
                                 if (($1 | 0) < ($2 | 0)) {
                                  SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
                                 }
                                 if (($1 | 0) < ($3 | 0)) {
                                  SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
                                 }
                                 $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                                 if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
                                  break label$75
                                 }
                                 SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                                }
                                if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
                                 SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
                                }
                                $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                                SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                                SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                                SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                                break label$72;
                               }
                               SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + 1 | 0);
                              }
                              $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                              $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
                              $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
                              label$79 : {
                               if (($2 | 0) == ($3 | 0)) {
                                break label$79
                               }
                               if (($1 | 0) < ($2 | 0)) {
                                SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
                               }
                               if (($1 | 0) < ($3 | 0)) {
                                SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
                               }
                               $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                               if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
                                break label$79
                               }
                               SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                              }
                              if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
                               SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
                              }
                              SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                              break label$1;
                             }
                             $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                             $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
                             $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
                             label$83 : {
                              if (($2 | 0) == ($3 | 0)) {
                               break label$83
                              }
                              if (($1 | 0) < ($2 | 0)) {
                               SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
                              }
                              if (($1 | 0) < ($3 | 0)) {
                               SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
                              }
                              $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                              if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
                               break label$83
                              }
                              SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                             }
                             if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
                              SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
                             }
                             $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                             $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                             label$87 : {
                              if (($2 | 0) == ($1 | 0)) {
                               $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                               SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                               SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                               break label$87;
                              }
                              SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                             }
                             $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                             if (($1 | 0) > 0) {
                              SAFE_HEAP_STORE_i32_4_4($6, 0, $1 - 1 | 0)
                             }
                             SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0));
                             SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                             break label$1;
                            }
                            $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                            $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                            if (($1 | 0) != ($2 | 0)) {
                             if (($1 | 0) > ($2 | 0)) {
                              SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                              SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                             }
                             $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                             SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                             SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                             SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                             break label$1;
                            }
                            $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                            $2 = ($1 >> 31 & $1) - 1 | 0;
                            while (1) {
                             label$92 : {
                              if (($1 | 0) <= 0) {
                               $3 = $2;
                               break label$92;
                              }
                              $3 = $1 - 1 | 0;
                              $1 = $3;
                              if (!ImStb__is_word_boundary_from_right_28ImGuiInputTextState__2c_20int_29($0, $1)) {
                               continue
                              }
                             }
                             break;
                            };
                            $1 = ($3 | 0) > 0 ? $3 : 0;
                            $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                            SAFE_HEAP_STORE_i32_4_4($0, 60, ($1 | 0) < ($2 | 0) ? $1 : $2);
                            break label$1;
                           }
                           if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0)) {
                            $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                            SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                            SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                           }
                           $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                           $2 = ($1 >> 31 & $1) - 1 | 0;
                           while (1) {
                            label$96 : {
                             if (($1 | 0) <= 0) {
                              $3 = $2;
                              break label$96;
                             }
                             $3 = $1 - 1 | 0;
                             $1 = $3;
                             if (!ImStb__is_word_boundary_from_right_28ImGuiInputTextState__2c_20int_29($0, $1)) {
                              continue
                             }
                            }
                            break;
                           };
                           $2 = ($3 | 0) > 0 ? $3 : 0;
                           SAFE_HEAP_STORE_i32_4_4($0, 68, $2);
                           SAFE_HEAP_STORE_i32_4_4($0, 60, $2);
                           $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                           $3 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
                           label$99 : {
                            if (($3 | 0) == ($2 | 0)) {
                             break label$99
                            }
                            if (($1 | 0) < ($3 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
                            }
                            if (($1 | 0) < ($2 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
                            }
                            $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                            if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
                             break label$99
                            }
                            SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                           }
                           if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) <= ($1 | 0)) {
                            break label$1
                           }
                           SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                           break label$1;
                          }
                          $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                          $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                          if (($1 | 0) != ($2 | 0)) {
                           if (($1 | 0) > ($2 | 0)) {
                            SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                            SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                           }
                           $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                           $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
                           $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
                           label$104 : {
                            if (($2 | 0) == ($3 | 0)) {
                             break label$104
                            }
                            if (($1 | 0) < ($2 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
                            }
                            if (($1 | 0) < ($3 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
                            }
                            $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                            if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
                             break label$104
                            }
                            SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                           }
                           if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
                            SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
                           }
                           $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                           SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                           SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                           SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                           break label$1;
                          }
                          $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                          $1 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
                          $2 = $1 + 1 | 0;
                          $2 = ($2 | 0) < ($3 | 0) ? $3 : $2;
                          while (1) {
                           label$108 : {
                            $1 = $1 + 1 | 0;
                            if (($3 | 0) <= ($1 | 0)) {
                             $5 = $2;
                             break label$108;
                            }
                            $5 = $1;
                            if (!ImStb__is_word_boundary_from_right_28ImGuiInputTextState__2c_20int_29($0, $1)) {
                             continue
                            }
                           }
                           break;
                          };
                          SAFE_HEAP_STORE_i32_4_4($4, 0, ($3 | 0) > ($5 | 0) ? $5 : $3);
                          break label$1;
                         }
                         if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) == (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0)) {
                          $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                          SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                          SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                         }
                         $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                         $1 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
                         $2 = $1 + 1 | 0;
                         $2 = ($2 | 0) < ($3 | 0) ? $3 : $2;
                         while (1) {
                          label$112 : {
                           $1 = $1 + 1 | 0;
                           if (($3 | 0) <= ($1 | 0)) {
                            $5 = $2;
                            break label$112;
                           }
                           $5 = $1;
                           if (!ImStb__is_word_boundary_from_right_28ImGuiInputTextState__2c_20int_29($0, $1)) {
                            continue
                           }
                          }
                          break;
                         };
                         $1 = ($3 | 0) > ($5 | 0) ? $5 : $3;
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                         SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                         $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                         label$115 : {
                          if (($2 | 0) == ($1 | 0)) {
                           break label$115
                          }
                          if (($2 | 0) > ($3 | 0)) {
                           SAFE_HEAP_STORE_i32_4_4($7, 0, $3)
                          }
                          $2 = $1;
                          $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                          if (($2 | 0) != ($1 | 0)) {
                           break label$115
                          }
                          SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                         }
                         if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) <= ($3 | 0)) {
                          break label$1
                         }
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
                         break label$1;
                        }
                        $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                        $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                        label$117 : {
                         if (($2 | 0) == ($1 | 0)) {
                          $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                          SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                          SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                          break label$117;
                         }
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                        }
                        $2 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
                        $3 = $2 + 1 | 0;
                        SAFE_HEAP_STORE_i32_4_4($0, 68, $3);
                        $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                        $5 = $3;
                        $3 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
                        label$119 : {
                         if (($5 | 0) == ($3 | 0)) {
                          break label$119
                         }
                         if (($1 | 0) < ($3 | 0)) {
                          SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
                         }
                         if (($1 | 0) <= ($2 | 0)) {
                          SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
                         }
                         $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                         if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
                          break label$119
                         }
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                        }
                        if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
                        }
                        SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0));
                        SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                        break label$1;
                       }
                       $20 = $18 & 4194304;
                       $12 = ($18 & -4194305) != 2097167;
                       $24 = $12 & $32;
                       if ($24) {
                        $1 = $20 | 2097153
                       } else {
                        label$125 : {
                         label$126 : {
                          label$127 : {
                           if ($20) {
                            if (($2 | 0) == ($3 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($6, 0, $5);
                             SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
                             $8 = $5;
                             $1 = $5;
                             $2 = $1;
                             break label$125;
                            }
                            SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                            $5 = $2;
                            break label$127;
                           }
                           if (($2 | 0) != ($3 | 0)) {
                            break label$126
                           }
                          }
                          $8 = $5;
                          $1 = $2;
                          $2 = $3;
                          break label$125;
                         }
                         label$130 : {
                          if (($2 | 0) >= ($3 | 0)) {
                           $10 = $2;
                           $2 = $3;
                           break label$130;
                          }
                          SAFE_HEAP_STORE_i32_4_4($6, 0, $3);
                          SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                          $10 = $3;
                         }
                         $1 = $2;
                         $2 = $10;
                         label$132 : {
                          if (($2 | 0) == ($1 | 0)) {
                           $3 = $5;
                           break label$132;
                          }
                          $10 = $1;
                          if (($9 | 0) < ($1 | 0)) {
                           SAFE_HEAP_STORE_i32_4_4($7, 0, $9);
                           $3 = $9;
                          } else {
                           $3 = $10
                          }
                          $10 = $2;
                          if (($2 | 0) > ($9 | 0)) {
                           SAFE_HEAP_STORE_i32_4_4($6, 0, $9);
                           $2 = $9;
                          } else {
                           $2 = $10
                          }
                          label$136 : {
                           if (($2 | 0) != ($3 | 0)) {
                            $3 = $5;
                            break label$136;
                           }
                           SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
                          }
                         }
                         if (($3 | 0) > ($9 | 0)) {
                          SAFE_HEAP_STORE_i32_4_4($4, 0, $9)
                         }
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                         SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                         SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                         $10 = 0;
                         $8 = $2;
                         $1 = $2;
                        }
                        $5 = $8;
                        $3 = $1;
                        if (($1 | 0) != ($2 | 0)) {
                         $8 = $2;
                         if (($2 | 0) > ($9 | 0)) {
                          SAFE_HEAP_STORE_i32_4_4($7, 0, $9);
                          $2 = $9;
                         } else {
                          $2 = $8
                         }
                         $8 = $3;
                         if (($3 | 0) > ($9 | 0)) {
                          SAFE_HEAP_STORE_i32_4_4($6, 0, $9);
                          $3 = $9;
                         } else {
                          $3 = $8
                         }
                         if (($3 | 0) == ($2 | 0)) {
                          SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                          $5 = $2;
                         }
                        }
                        $1 = $2;
                        $2 = $3;
                        $25 = $12 ? 1 : $30;
                        $3 = $5;
                        if (($9 | 0) < ($3 | 0)) {
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $9);
                         $3 = $9;
                        }
                        ImStb__stb_textedit_find_charpos_28ImStb__StbFindState__2c_20ImGuiInputTextState__2c_20int_2c_20int_29($14 + 8 | 0, $0, $3, $31);
                        label$146 : {
                         if (($25 | 0) <= 0) {
                          $5 = $3;
                          $12 = $1;
                          break label$146;
                         }
                         $28 = SAFE_HEAP_LOAD_f32_4_4($14, 8);
                         $8 = $3;
                         $3 = $2;
                         $12 = $1;
                         $5 = $2;
                         $15 = SAFE_HEAP_LOAD_i32_4_4($14, 24);
                         $17 = SAFE_HEAP_LOAD_i32_4_4($14, 20);
                         $22 = 0;
                         label$148 : {
                          while (1) {
                           $2 = $17;
                           $17 = $3;
                           if (!$15) {
                            break label$148
                           }
                           $16 = $2 + $15 | 0;
                           $19 = $23 + ($16 << 1) | 0;
                           if ((SAFE_HEAP_LOAD_i32_2_U_2($19 - 2 | 0, 0) | 0) != 10) {
                            break label$148
                           }
                           $15 = $5;
                           $21 = $10 & 255 ? $13 : $28;
                           SAFE_HEAP_STORE_i32_4_4($4, 0, $16);
                           $10 = SAFE_HEAP_LOAD_i32_4_4($27, 6464);
                           $8 = $10 + 12 | 0;
                           $33 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($27, 6468) / SAFE_HEAP_LOAD_f32_4_4($10, 16));
                           $3 = $19;
                           while (1) {
                            label$150 : {
                             $2 = $3;
                             if ($29 >>> 0 <= $2 >>> 0) {
                              $5 = $2;
                              break label$150;
                             }
                             $3 = $2 + 2 | 0;
                             $5 = $3;
                             if ((SAFE_HEAP_LOAD_i32_2_U_2($2, 0) | 0) != 10) {
                              continue
                             }
                            }
                            break;
                           };
                           $3 = $5 - $19 | 0;
                           $19 = $3 >> 1;
                           $2 = $16;
                           label$153 : {
                            if (($3 | 0) <= 0) {
                             break label$153
                            }
                            $3 = $16;
                            $5 = 0;
                            $13 = Math_fround(0.0);
                            while (1) {
                             $26 = $13;
                             $2 = $3;
                             $13 = Math_fround(-1.0);
                             $3 = SAFE_HEAP_LOAD_i32_2_U_2($23 + ($5 + $16 << 1) | 0, 0);
                             if (($3 | 0) != 10) {
                              $13 = Math_fround($33 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($10, 8) + ($3 << 2) | 0, wasm2js_i32$1 = $8, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($10, 0) | 0) > ($3 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0))
                             }
                             label$156 : {
                              if ($13 == Math_fround(-1.0)) {
                               $13 = $26;
                               $3 = 0;
                               break label$156;
                              }
                              $13 = Math_fround($26 + $13);
                              $3 = 0;
                              if ($13 > $21) {
                               break label$156
                              }
                              $2 = $2 + 1 | 0;
                              SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                              $3 = 1;
                             }
                             if (!$3) {
                              break label$153
                             }
                             $3 = $2;
                             $5 = $5 + 1 | 0;
                             if (($19 | 0) > ($5 | 0)) {
                              continue
                             }
                             break;
                            };
                           }
                           label$160 : {
                            if (($1 | 0) == ($15 | 0)) {
                             $3 = $17;
                             $10 = $12;
                             $5 = $15;
                             $8 = $1;
                             break label$160;
                            }
                            $3 = $12;
                            $5 = $1;
                            if (($9 | 0) < ($1 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($7, 0, $9);
                             $3 = $9;
                             $5 = $3;
                            }
                            $8 = $5;
                            $10 = $3;
                            $3 = $17;
                            $5 = $15;
                            if (($9 | 0) < ($5 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($6, 0, $9);
                             $3 = $9;
                             $5 = $3;
                            }
                            if (($5 | 0) == ($8 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($4, 0, $8);
                             $2 = $8;
                            }
                           }
                           $1 = $8;
                           $12 = $10;
                           if (($2 | 0) > ($9 | 0)) {
                            SAFE_HEAP_STORE_i32_4_4($4, 0, $9);
                            $2 = $9;
                           }
                           SAFE_HEAP_STORE_f32_4_4($0, 88, $21);
                           SAFE_HEAP_STORE_i32_1_1($0, 82, 1);
                           if ($20) {
                            SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
                            $5 = $2;
                            $3 = $2;
                           }
                           $13 = $21;
                           $10 = 1;
                           $8 = $2;
                           $15 = $19;
                           $17 = $16;
                           $22 = $22 + 1 | 0;
                           if (($25 | 0) != ($22 | 0)) {
                            continue
                           }
                           break;
                          };
                          SAFE_HEAP_STORE_i32_4_4($14, 24, $19);
                          SAFE_HEAP_STORE_i32_4_4($14, 20, $16);
                          $5 = $2;
                          $2 = $3;
                          break label$146;
                         }
                         SAFE_HEAP_STORE_i32_4_4($14, 24, $15);
                         SAFE_HEAP_STORE_i32_4_4($14, 20, $2);
                         $5 = $8;
                         $2 = $17;
                        }
                        $3 = $12;
                        $1 = $18;
                       }
                       if ($24) {
                        continue
                       }
                       break label$1;
                      }
                      $22 = $18 & 4194304;
                      $15 = ($18 & -4194305) != 2097166;
                      $24 = $15 & $32;
                      label$168 : {
                       if ($24) {
                        $8 = $10;
                        $1 = $22 | 2097152;
                        break label$168;
                       }
                       label$170 : {
                        label$171 : {
                         label$172 : {
                          if ($22) {
                           if (($2 | 0) == ($3 | 0)) {
                            SAFE_HEAP_STORE_i32_4_4($6, 0, $5);
                            SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
                            $8 = $5;
                            $1 = $5;
                            $2 = $1;
                            break label$170;
                           }
                           SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                           $5 = $2;
                           break label$172;
                          }
                          if (($2 | 0) != ($3 | 0)) {
                           break label$171
                          }
                         }
                         $8 = $5;
                         $1 = $2;
                         $2 = $3;
                         break label$170;
                        }
                        label$175 : {
                         if (($2 | 0) >= ($3 | 0)) {
                          $2 = $3;
                          break label$175;
                         }
                         SAFE_HEAP_STORE_i32_4_4($6, 0, $3);
                         SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                        }
                        SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                        SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
                        SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                        $10 = 0;
                        $8 = $2;
                        $1 = $2;
                       }
                       $5 = $8;
                       $8 = $10;
                       $3 = $1;
                       if (($1 | 0) != ($2 | 0)) {
                        $10 = $2;
                        if (($2 | 0) > ($9 | 0)) {
                         SAFE_HEAP_STORE_i32_4_4($7, 0, $9);
                         $2 = $9;
                        } else {
                         $2 = $10
                        }
                        $10 = $3;
                        if (($3 | 0) > ($9 | 0)) {
                         SAFE_HEAP_STORE_i32_4_4($6, 0, $9);
                         $3 = $9;
                        } else {
                         $3 = $10
                        }
                        if (($3 | 0) == ($2 | 0)) {
                         SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                         $5 = $2;
                        }
                       }
                       $10 = $2;
                       $12 = $3;
                       $25 = $15 ? 1 : $30;
                       $2 = $5;
                       if (($9 | 0) < ($2 | 0)) {
                        SAFE_HEAP_STORE_i32_4_4($4, 0, $9);
                        $2 = $9;
                       }
                       ImStb__stb_textedit_find_charpos_28ImStb__StbFindState__2c_20ImGuiInputTextState__2c_20int_2c_20int_29($14 + 8 | 0, $0, $2, $31);
                       label$184 : {
                        if (($25 | 0) <= 0) {
                         $5 = $2;
                         $3 = $10;
                         break label$184;
                        }
                        label$186 : {
                         $5 = SAFE_HEAP_LOAD_i32_4_4($14, 28);
                         $3 = SAFE_HEAP_LOAD_i32_4_4($14, 20);
                         label$187 : {
                          if (($5 | 0) == ($3 | 0)) {
                           $1 = $2;
                           $2 = $5;
                           break label$187;
                          }
                          $21 = (wasm2js_f32$0 = $13, wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($14, 8), wasm2js_i32$0 = $8 & 255, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
                          $20 = SAFE_HEAP_LOAD_i32_4_4($27, 6464);
                          $34 = $20 + 12 | 0;
                          $28 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($27, 6468) / SAFE_HEAP_LOAD_f32_4_4($20, 16));
                          $3 = 0;
                          $8 = $10;
                          $17 = $10;
                          $1 = $12;
                          $15 = $1;
                          while (1) {
                           $10 = $8;
                           $19 = $3;
                           $16 = $5;
                           SAFE_HEAP_STORE_i32_4_4($4, 0, $5);
                           $8 = $23 + ($5 << 1) | 0;
                           $3 = $8;
                           while (1) {
                            label$190 : {
                             $2 = $3;
                             if ($29 >>> 0 <= $2 >>> 0) {
                              $5 = $2;
                              break label$190;
                             }
                             $3 = $2 + 2 | 0;
                             $5 = $3;
                             if ((SAFE_HEAP_LOAD_i32_2_U_2($2, 0) | 0) != 10) {
                              continue
                             }
                            }
                            break;
                           };
                           $2 = $16;
                           $3 = $5 - $8 | 0;
                           label$193 : {
                            if (($3 | 0) <= 0) {
                             break label$193
                            }
                            $8 = $3 >> 1;
                            $3 = $16;
                            $13 = Math_fround(0.0);
                            $5 = 0;
                            while (1) {
                             $26 = $13;
                             $2 = $3;
                             $13 = Math_fround(-1.0);
                             $3 = SAFE_HEAP_LOAD_i32_2_U_2($23 + ($5 + $16 << 1) | 0, 0);
                             if (($3 | 0) != 10) {
                              $13 = Math_fround($28 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($20, 8) + ($3 << 2) | 0, wasm2js_i32$1 = $34, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($20, 0) | 0) > ($3 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0))
                             }
                             label$196 : {
                              if ($13 == Math_fround(-1.0)) {
                               $13 = $26;
                               $3 = 0;
                               break label$196;
                              }
                              $13 = Math_fround($26 + $13);
                              $3 = 0;
                              if ($13 > $21) {
                               break label$196
                              }
                              $2 = $2 + 1 | 0;
                              SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
                              $3 = 1;
                             }
                             if (!$3) {
                              break label$193
                             }
                             $3 = $2;
                             $5 = $5 + 1 | 0;
                             if (($8 | 0) > ($5 | 0)) {
                              continue
                             }
                             break;
                            };
                           }
                           label$200 : {
                            if (($1 | 0) == ($10 | 0)) {
                             $8 = $2;
                             $2 = $15;
                             $5 = $1;
                             break label$200;
                            }
                            $3 = $17;
                            $5 = $10;
                            if (($9 | 0) < ($5 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($7, 0, $9);
                             $3 = $9;
                             $5 = $3;
                            }
                            $10 = $5;
                            $12 = $3;
                            $3 = $15;
                            $5 = $1;
                            if (($9 | 0) < ($1 | 0)) {
                             SAFE_HEAP_STORE_i32_4_4($6, 0, $9);
                             $3 = $9;
                             $5 = $3;
                            }
                            if (!(($5 | 0) != ($10 | 0))) {
                             SAFE_HEAP_STORE_i32_4_4($4, 0, $10);
                             $2 = $10;
                            }
                            $8 = $2;
                            $2 = $3;
                            $17 = $12;
                           }
                           $1 = $2;
                           $2 = $8;
                           if (($9 | 0) < ($2 | 0)) {
                            SAFE_HEAP_STORE_i32_4_4($4, 0, $9);
                            $2 = $9;
                           }
                           $12 = $2;
                           SAFE_HEAP_STORE_f32_4_4($0, 88, $21);
                           SAFE_HEAP_STORE_i32_1_1($0, 82, 1);
                           $2 = $1;
                           $3 = $5;
                           if ($22) {
                            SAFE_HEAP_STORE_i32_4_4($6, 0, $12);
                            $2 = $12;
                            $1 = $2;
                           } else {
                            $1 = $3
                           }
                           $15 = $2;
                           $3 = ($16 | 0) > 0 ? $16 - 1 | 0 : 0;
                           $5 = $3 >> 31 & $3;
                           while (1) {
                            label$208 : {
                             $2 = $3;
                             if (($2 | 0) <= 0) {
                              $2 = $5;
                              break label$208;
                             }
                             $3 = $2 - 1 | 0;
                             if ((SAFE_HEAP_LOAD_i32_2_U_2($23 + ($3 << 1) | 0, 0) | 0) != 10) {
                              continue
                             }
                            }
                            break;
                           };
                           $3 = $19 + 1 | 0;
                           if (($25 | 0) == ($3 | 0)) {
                            break label$186
                           }
                           $5 = $2;
                           $8 = $10;
                           if (($2 | 0) != ($16 | 0)) {
                            continue
                           }
                           break;
                          };
                          $13 = $21;
                          $8 = 1;
                          $1 = $12;
                          $12 = $15;
                          $10 = $17;
                          $3 = $16;
                         }
                         SAFE_HEAP_STORE_i32_4_4($14, 20, $3);
                         SAFE_HEAP_STORE_i32_4_4($14, 28, $2);
                         $5 = $1;
                         $3 = $10;
                         break label$184;
                        }
                        SAFE_HEAP_STORE_i32_4_4($14, 20, $16);
                        SAFE_HEAP_STORE_i32_4_4($14, 28, $2);
                        $13 = $21;
                        $8 = 1;
                        $5 = $12;
                        $3 = $17;
                        $12 = $15;
                       }
                       $2 = $12;
                       $1 = $18;
                      }
                      $10 = $8;
                      if ($24) {
                       continue
                      }
                      break label$1;
                     }
                     break;
                    };
                    label$211 : {
                     if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0)) {
                      ImStb__stb_textedit_delete_selection_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__29($0, $4);
                      break label$211;
                     }
                     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
                     if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) <= ($1 | 0)) {
                      break label$211
                     }
                     $2 = ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($0 + 92 | 0, $1, 1, 0);
                     if ($2) {
                      SAFE_HEAP_STORE_i32_2_2($2, 0, SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0, 20) + ($1 << 1) | 0, 0))
                     }
                     SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
                     $2 = $1 << 1;
                     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $2 | 0;
                     $3 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($1, $1 + 2 | 0);
                     SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) - $3 | 0);
                     SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
                     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $2 | 0;
                     while (1) {
                      $2 = SAFE_HEAP_LOAD_i32_2_U_2($3, 2);
                      if ($2) {
                       SAFE_HEAP_STORE_i32_2_2($1, 0, $2);
                       $1 = $1 + 2 | 0;
                      }
                      $3 = $3 + 2 | 0;
                      if ($2) {
                       continue
                      }
                      break;
                     };
                     SAFE_HEAP_STORE_i32_2_2($1, 0, 0);
                     SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                    }
                    SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                    break label$1;
                   }
                   label$217 : {
                    if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0)) {
                     ImStb__stb_textedit_delete_selection_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__29($0, $4);
                     break label$217;
                    }
                    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
                    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
                    if (($2 | 0) > ($1 | 0)) {
                     SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
                    }
                    $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                    if (($1 | 0) <= 0) {
                     break label$217
                    }
                    $2 = $1 - 1 | 0;
                    $3 = ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($0 + 92 | 0, $2, 1, 0);
                    if ($3) {
                     SAFE_HEAP_STORE_i32_2_2($3, 0, SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0, 20) + ($2 << 1) | 0, 0))
                    }
                    SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
                    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
                    $5 = $2 << 1;
                    $2 = $3 + $5 | 0;
                    $1 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($2, $3 + ($1 << 1) | 0);
                    SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) - $1 | 0);
                    SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
                    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $5 | 0;
                    while (1) {
                     $1 = SAFE_HEAP_LOAD_i32_2_U_2($3, 2);
                     if ($1) {
                      SAFE_HEAP_STORE_i32_2_2($2, 0, $1);
                      $2 = $2 + 2 | 0;
                     }
                     $3 = $3 + 2 | 0;
                     if ($1) {
                      continue
                     }
                     break;
                    };
                    SAFE_HEAP_STORE_i32_2_2($2, 0, 0);
                    SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                    SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
                   }
                   SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                   break label$1;
                  }
                  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
                  SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
                  SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
                  SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                  break label$1;
                 }
                 SAFE_HEAP_STORE_i32_1_1($0, 82, 0);
                 SAFE_HEAP_STORE_i64_8_4($0, 64, 0, 0);
                 SAFE_HEAP_STORE_i32_4_4($0, 60, SAFE_HEAP_LOAD_i32_4_4($0, 4));
                 break label$1;
                }
                $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
                label$224 : {
                 if (($2 | 0) == ($1 | 0)) {
                  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                  SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                  SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                  break label$224;
                 }
                 SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
                }
                SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
                SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
                SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
                break label$1;
               }
               $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
               $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
               label$226 : {
                if (($2 | 0) == ($1 | 0)) {
                 $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
                 SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                 SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
                 break label$226;
                }
                SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
               }
               SAFE_HEAP_STORE_i32_1_1($0, 82, 0);
               $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
               SAFE_HEAP_STORE_i32_4_4($0, 68, $1);
               SAFE_HEAP_STORE_i32_4_4($0, 60, $1);
               break label$1;
              }
              $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
              $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
              $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
              label$228 : {
               if (($2 | 0) == ($3 | 0)) {
                break label$228
               }
               if (($1 | 0) < ($2 | 0)) {
                SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
               }
               if (($1 | 0) < ($3 | 0)) {
                SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
               }
               $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
               if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
                break label$228
               }
               SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
              }
              if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
               SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
              }
              $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
              $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
              if (($1 | 0) != ($2 | 0)) {
               if (($1 | 0) > ($2 | 0)) {
                SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
                SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
               }
               $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
               SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
               SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
               SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
              }
              if (SAFE_HEAP_LOAD_i32_1_U_1($0, 83)) {
               break label$9
              }
              $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
              if (($2 | 0) <= 0) {
               break label$2
              }
              $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
              while (1) {
               $1 = $2;
               $2 = $1 - 1 | 0;
               if ((SAFE_HEAP_LOAD_i32_2_U_2($3 + ($2 << 1) | 0, 0) | 0) == 10) {
                break label$2
               }
               SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
               if (($1 | 0) > 1) {
                continue
               }
               break;
              };
              break label$2;
             }
             $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
             $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
             $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
             label$235 : {
              if (($2 | 0) == ($3 | 0)) {
               break label$235
              }
              if (($1 | 0) < ($2 | 0)) {
               SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
              }
              if (($1 | 0) < ($3 | 0)) {
               SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
              }
              $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
              if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
               break label$235
              }
              SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
             }
             if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
             }
             $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
             $3 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
             if (($2 | 0) != ($3 | 0)) {
              if (($2 | 0) > ($3 | 0)) {
               SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
               SAFE_HEAP_STORE_i32_4_4($7, 0, $3);
              }
              $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
              SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
              SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
              SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
             }
             if (SAFE_HEAP_LOAD_i32_1_U_1($0, 83)) {
              break label$8
             }
             $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
             if (($3 | 0) >= ($1 | 0)) {
              break label$3
             }
             $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
             while (1) {
              if ((SAFE_HEAP_LOAD_i32_2_U_2($2 + ($3 << 1) | 0, 0) | 0) == 10) {
               break label$3
              }
              $3 = $3 + 1 | 0;
              SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
              if (($1 | 0) != ($3 | 0)) {
               continue
              }
              break;
             };
             break label$3;
            }
            $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
            $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
            $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
            label$242 : {
             if (($2 | 0) == ($3 | 0)) {
              break label$242
             }
             if (($1 | 0) < ($2 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
             }
             if (($1 | 0) < ($3 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
             }
             $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
             if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
              break label$242
             }
             SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
            }
            if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
             SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
            $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
            label$246 : {
             if (($2 | 0) == ($1 | 0)) {
              $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
              SAFE_HEAP_STORE_i32_4_4($6, 0, $1);
              SAFE_HEAP_STORE_i32_4_4($7, 0, $1);
              break label$246;
             }
             SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
            }
            if (SAFE_HEAP_LOAD_i32_1_U_1($0, 83)) {
             break label$7
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
            if (($2 | 0) <= 0) {
             break label$4
            }
            $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
            while (1) {
             $1 = $2;
             $2 = $1 - 1 | 0;
             if ((SAFE_HEAP_LOAD_i32_2_U_2($3 + ($2 << 1) | 0, 0) | 0) == 10) {
              break label$4
             }
             SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
             if (($1 | 0) > 1) {
              continue
             }
             break;
            };
            break label$4;
           }
           $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
           $2 = SAFE_HEAP_LOAD_i32_4_4($0, 64);
           $3 = SAFE_HEAP_LOAD_i32_4_4($0, 68);
           label$249 : {
            if (($2 | 0) == ($3 | 0)) {
             break label$249
            }
            if (($1 | 0) < ($2 | 0)) {
             SAFE_HEAP_STORE_i32_4_4($7, 0, $1)
            }
            if (($1 | 0) < ($3 | 0)) {
             SAFE_HEAP_STORE_i32_4_4($6, 0, $1)
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
            if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != ($2 | 0)) {
             break label$249
            }
            SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
           }
           if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
            SAFE_HEAP_STORE_i32_4_4($4, 0, $1)
           }
           $3 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
           $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
           label$253 : {
            if (($3 | 0) == ($2 | 0)) {
             $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
             SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
             SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
             break label$253;
            }
            SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
           }
           if (SAFE_HEAP_LOAD_i32_1_U_1($0, 83)) {
            break label$6
           }
           $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
           if (($3 | 0) >= ($1 | 0)) {
            break label$5
           }
           $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
           while (1) {
            if ((SAFE_HEAP_LOAD_i32_2_U_2($2 + ($3 << 1) | 0, 0) | 0) == 10) {
             break label$5
            }
            $3 = $3 + 1 | 0;
            SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
            if (($1 | 0) != ($3 | 0)) {
             continue
            }
            break;
           };
           break label$5;
          }
          SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
          break label$2;
         }
         SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
         break label$3;
        }
        SAFE_HEAP_STORE_i32_4_4($4, 0, 0);
        break label$4;
       }
       SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
      }
      SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
      SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
      break label$1;
     }
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0));
     SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
     break label$1;
    }
    SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_1_1($11, 0, 0);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 3688, -1097229926);
  SAFE_HEAP_STORE_i32_1_1($0, 3692, 1);
  __stack_pointer = $14 + 32 | 0;
 }
 
 function InputTextFilterCharacter_28unsigned_20int__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__2c_20ImGuiInputSource_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if ($4 >>> 0 <= 31) {
    $6 = $1 >>> 26 & ($4 | 0) == 10 | $1 >>> 10 & ($4 | 0) == 9;
    if (!$6) {
     break label$1
    }
   }
   label$3 : {
    if (($3 | 0) != 5) {
     if (($4 | 0) == 127 | $4 >>> 0 > 65535) {
      break label$1
     }
     if ($4 - 57344 >>> 0 >= 6400) {
      break label$3
     }
     break label$1;
    }
    if ($4 >>> 0 > 65535) {
     break label$1
    }
   }
   if (!(!($1 & 131087) | $6)) {
    label$9 : {
     label$10 : {
      $7 = $4 - 48 | 0;
      $6 = SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 12124);
      if (!(!($1 & 1) | $7 >>> 0 < 10 | ($6 | 0) == ($4 | 0))) {
       $3 = $4 - 42 | 0;
       if ($3 >>> 0 > 5 | !(1 << $3 & 43)) {
        break label$10
       }
      }
      label$12 : {
       if (!($1 & 131072) | $7 >>> 0 < 10 | ($4 | 0) == ($6 | 0)) {
        break label$12
       }
       $3 = 0;
       $6 = $4;
       switch ($4 - 42 | 0) {
       case 0:
       case 1:
       case 3:
       case 5:
       case 27:
       case 59:
        break label$12;
       default:
        break label$9;
       };
      }
      $3 = $4 - 97 | 0;
      if (!(!($1 & 2) | $7 >>> 0 < 10 | ($3 >>> 0 < 6 | $4 - 65 >>> 0 <= 5))) {
       $3 = 0;
       $6 = $4;
       break label$9;
      }
      if (!(!($1 & 4) | $3 >>> 0 > 25)) {
       $4 = $4 - 32 | 0;
       SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
      }
      $3 = !(($4 | 0) == 9 | ($4 | 0) == 32 | ($4 | 0) == 12288 ? $1 & 8 : 0);
      $6 = $4;
      break label$9;
     }
     $3 = 0;
     $6 = $4;
    }
    $4 = $6;
    $7 = 0;
    if (!$3) {
     break label$1
    }
   }
   label$20 : {
    label$21 : {
     if (!($1 & 512)) {
      break label$21
     }
     ImGuiInputTextCallbackData__ImGuiInputTextCallbackData_28_29($5);
     $3 = $5 + 8 | 0;
     SAFE_HEAP_STORE_i64_8_8($3, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($5 + 40 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($5 + 32 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($5 + 24 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($5 + 16 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
     SAFE_HEAP_STORE_i64_8_8($5, 0, 0, 0);
     SAFE_HEAP_STORE_i32_2_2($5, 12, $4);
     SAFE_HEAP_STORE_i32_4_4($5, 0, 512);
     SAFE_HEAP_STORE_i32_4_4($5, 4, $1);
     if (FUNCTION_TABLE[$2 | 0]($5) | 0) {
      break label$20
     }
     $1 = $0;
     $0 = SAFE_HEAP_LOAD_i32_2_U_2($5, 12);
     SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
     if ($0) {
      break label$21
     }
     break label$1;
    }
    $7 = 1;
   }
  }
  __stack_pointer = $5 + 48 | 0;
  return $7;
 }
 
 function ImStb__stb_textedit_delete_selection_28ImGuiInputTextState__2c_20ImStb__STB_TexteditState__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  label$1 : {
   if (($3 | 0) == ($4 | 0)) {
    break label$1
   }
   if (($2 | 0) < ($3 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($1, 4, $2)
   }
   if (($2 | 0) < ($4 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($1, 8, $2)
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 8) | 0) != ($3 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) > ($2 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($1, 0, $2)
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  if (($3 | 0) != ($4 | 0)) {
   $2 = $1 + 32 | 0;
   label$6 : {
    if (($3 | 0) < ($4 | 0)) {
     $6 = $4 - $3 | 0;
     $5 = ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($2, $3, $6, 0);
     if (!(!$5 | ($6 | 0) <= 0)) {
      $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
      $2 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_2_2($5 + ($2 << 1) | 0, 0, SAFE_HEAP_LOAD_i32_2_U_2($7 + ($2 + $3 << 1) | 0, 0));
       $2 = $2 + 1 | 0;
       if (($6 | 0) != ($2 | 0)) {
        continue
       }
       break;
      };
     }
     SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
     $2 = $3 << 1;
     $3 = $0 + 20 | 0;
     $5 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     $2 = $2 + $5 | 0;
     $4 = $4 << 1;
     $5 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($2, $4 + $5 | 0);
     SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) - $5 | 0);
     SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - $6 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($3, 0) + $4 | 0;
     while (1) {
      $3 = SAFE_HEAP_LOAD_i32_2_U_2($0, 0);
      if ($3) {
       SAFE_HEAP_STORE_i32_2_2($2, 0, $3);
       $2 = $2 + 2 | 0;
      }
      $0 = $0 + 2 | 0;
      if ($3) {
       continue
      }
      break;
     };
     SAFE_HEAP_STORE_i32_2_2($2, 0, 0);
     SAFE_HEAP_STORE_i32_1_1($1, 22, 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
     break label$6;
    }
    $6 = $3 - $4 | 0;
    $5 = ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($2, $4, $6, 0);
    if (!(!$5 | ($6 | 0) <= 0)) {
     $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
     $2 = 0;
     while (1) {
      SAFE_HEAP_STORE_i32_2_2($5 + ($2 << 1) | 0, 0, SAFE_HEAP_LOAD_i32_2_U_2($7 + ($2 + $4 << 1) | 0, 0));
      $2 = $2 + 1 | 0;
      if (($6 | 0) != ($2 | 0)) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
    $2 = $4 << 1;
    $4 = $0 + 20 | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    $2 = $2 + $5 | 0;
    $3 = $3 << 1;
    $5 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($2, $3 + $5 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) - $5 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - $6 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + $3 | 0;
    while (1) {
     $3 = SAFE_HEAP_LOAD_i32_2_U_2($0, 0);
     if ($3) {
      SAFE_HEAP_STORE_i32_2_2($2, 0, $3);
      $2 = $2 + 2 | 0;
     }
     $0 = $0 + 2 | 0;
     if ($3) {
      continue
     }
     break;
    };
    SAFE_HEAP_STORE_i32_2_2($2, 0, 0);
    SAFE_HEAP_STORE_i32_1_1($1, 22, 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
   SAFE_HEAP_STORE_i32_1_1($1, 22, 0);
  }
 }
 
 function ImVector_unsigned_20short___resize_28int_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$1 : {
   if (($2 | 0) >= ($1 | 0)) {
    break label$1
   }
   $4 = $2;
   if ($2) {
    $3 = $2 + (($2 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2 = ($1 | 0) < ($3 | 0) ? $3 : $1;
   if (($4 | 0) >= ($2 | 0)) {
    break label$1
   }
   $3 = ImGui__MemAlloc_28unsigned_20long_29($2 << 1);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($4) {
    __memcpy($3, $4, SAFE_HEAP_LOAD_i32_4_4($0, 0) << 1);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 }
 
 function ImStb__stb_text_createundo_28ImStb__StbUndoState__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  SAFE_HEAP_STORE_i32_4_4($0, 3592, 999);
  SAFE_HEAP_STORE_i32_2_2($0, 3584, 99);
  if ((SAFE_HEAP_LOAD_i32_2_U_2($0, 3582) | 0) == 99) {
   label$2 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) < 0) {
     break label$2
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 3588);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    $4 = $4 - $6 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 3588, $4);
    $5 = $0 + 1584 | 0;
    memmove($5, $5 + ($6 << 1) | 0, $4 << 1);
    $5 = SAFE_HEAP_LOAD_i32_2_2($0, 3582);
    if (($5 | 0) <= 0) {
     break label$2
    }
    $4 = 0;
    while (1) {
     $8 = ($4 << 4) + $0 | 0;
     $7 = SAFE_HEAP_LOAD_i32_4_4($8, 12);
     if (($7 | 0) >= 0) {
      SAFE_HEAP_STORE_i32_4_4($8 + 12 | 0, 0, $7 - $6 | 0)
     }
     $4 = $4 + 1 | 0;
     if (($5 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
   }
   $4 = SAFE_HEAP_LOAD_i32_2_U_2($0, 3582) - 1 | 0;
   SAFE_HEAP_STORE_i32_2_2($0, 3582, $4);
   memmove($0, $0 + 16 | 0, $4 << 16 >> 16 << 4);
  }
  label$5 : {
   if (($2 | 0) <= 999) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 3588);
    if (($4 + $2 | 0) >= 1e3) {
     $8 = $0 + 16 | 0;
     $6 = $0 + 1584 | 0;
     while (1) {
      if ((SAFE_HEAP_LOAD_i32_2_2($0, 3582) | 0) > 0) {
       label$10 : {
        if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) < 0) {
         break label$10
        }
        $5 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
        $4 = $4 - $5 | 0;
        SAFE_HEAP_STORE_i32_4_4($0, 3588, $4);
        memmove($6, ($5 << 1) + $6 | 0, $4 << 1);
        $4 = 0;
        $7 = SAFE_HEAP_LOAD_i32_2_2($0, 3582);
        if (($7 | 0) <= 0) {
         break label$10
        }
        while (1) {
         $9 = ($4 << 4) + $0 | 0;
         $10 = SAFE_HEAP_LOAD_i32_4_4($9, 12);
         if (($10 | 0) >= 0) {
          SAFE_HEAP_STORE_i32_4_4($9 + 12 | 0, 0, $10 - $5 | 0)
         }
         $4 = $4 + 1 | 0;
         if (($7 | 0) != ($4 | 0)) {
          continue
         }
         break;
        };
       }
       $4 = SAFE_HEAP_LOAD_i32_2_U_2($0, 3582) - 1 | 0;
       SAFE_HEAP_STORE_i32_2_2($0, 3582, $4);
       memmove($0, $8, $4 << 16 >> 16 << 4);
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 3588);
      if (($4 + $2 | 0) > 999) {
       continue
      }
      break;
     };
    }
    $4 = SAFE_HEAP_LOAD_i32_2_2($0, 3582);
    SAFE_HEAP_STORE_i32_2_2($0, 3582, $4 + 1 | 0);
    $4 = ($4 << 4) + $0 | 0;
    break label$5;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 3588, 0);
   SAFE_HEAP_STORE_i32_2_2($0, 3582, 0);
   $4 = 0;
  }
  if (!$4) {
   return 0
  }
  SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($4, 4, $2);
  SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
  if (!$2) {
   SAFE_HEAP_STORE_i32_4_4($4, 12, -1);
   return 0;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 3588);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 3588, $1 + $2 | 0);
  return (($1 << 1) + $0 | 0) + 1584 | 0;
 }
 
 function ImStb__STB_TEXTEDIT_INSERTCHARS_28ImGuiInputTextState__2c_20int_2c_20unsigned_20short_20const__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 3696);
  $8 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $9 = ImTextCountUtf8BytesFromStr_28unsigned_20short_20const__2c_20unsigned_20short_20const__29($2, ($3 << 1) + $2 | 0);
  $5 = $4 & 262144;
  label$1 : {
   if (!$5) {
    $4 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) + $9 | 0) >= (SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0)) {
     break label$1
    }
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0) <= ($3 + $8 | 0)) {
    $4 = 0;
    if (!$5) {
     break label$1
    }
    $4 = $3 << 2;
    $5 = ($3 | 0) <= 256 ? 256 : $3;
    $4 = (($3 | 0) < 8 ? 32 : ($4 | 0) < ($5 | 0) ? $4 : $5) + $8 | 0;
    $5 = $4 + 1 | 0;
    $7 = $4;
    $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 16 | 0, 0);
    label$4 : {
     if (($7 | 0) < ($4 | 0)) {
      break label$4
     }
     $6 = 8;
     $7 = $4;
     $6 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : $6;
     $4 = ($5 | 0) < ($6 | 0) ? $6 : $5;
     if (($7 | 0) >= ($4 | 0)) {
      break label$4
     }
     $6 = ImGui__MemAlloc_28unsigned_20long_29($4 << 1);
     $7 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
     if ($7) {
      __memcpy($6, $7, SAFE_HEAP_LOAD_i32_4_4($0, 12) << 1);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 20));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 16, $4);
     SAFE_HEAP_STORE_i32_4_4($0, 20, $6);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 12, $5);
   }
   $5 = $0 + 20 | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   if (($1 | 0) != ($8 | 0)) {
    $6 = $4 + ($1 << 1) | 0;
    memmove($6 + ($3 << 1) | 0, $6, $8 - $1 << 1);
   }
   __memcpy($4 + ($1 << 1) | 0, $2, $3 << 1);
   SAFE_HEAP_STORE_i32_1_1($0, 3694, 1);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4) + $3 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) + $9 | 0);
   SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($5, 0) + ($1 << 1) | 0, 0, 0);
   $4 = 1;
  }
  return $4;
 }
 
 function ImGui__InputScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = __stack_pointer - 80 | 0;
  __stack_pointer = $7;
  $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $10 = SAFE_HEAP_LOAD_i32_4_4($8, 7080);
  SAFE_HEAP_STORE_i32_1_1($10, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($10, 143)) {
   $9 = $5;
   if (!$9) {
    $9 = SAFE_HEAP_LOAD_i32_4_4(($1 << 4) + 48168 | 0, 0)
   }
   $5 = $9;
   ImGui__DataTypeFormatString_28char__2c_20int_2c_20int_2c_20void_20const__2c_20char_20const__29($7, 64, $1, $2, $9);
   $10 = !($6 & 131074) | $6 | 134217744;
   label$3 : {
    if ($3) {
     $11 = ImGui__GetFrameHeight_28_29();
     ImGui__BeginGroup_28_29();
     ImGui__PushID_28char_20const__29($0);
     $13 = ImGui__CalcItemWidth_28_29();
     $12 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($8 + 5500 | 0, 0));
     $12 = Math_fround($13 - Math_fround($12 + $12));
     ImGui__SetNextItemWidth_28float_29($12 <= Math_fround(1.0) ? Math_fround(1.0) : $12);
     SAFE_HEAP_STORE_i64_8_4($7, 72, 0, 0);
     $9 = 0;
     if (ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29(19354, 0, $7, 64, $7 + 72 | 0, $10, 0)) {
      $9 = ImGui__DataTypeApplyOpFromText_28char_20const__2c_20char_20const__2c_20int_2c_20void__2c_20char_20const__29($7, SAFE_HEAP_LOAD_i32_4_4($8 + 8224 | 0, 0), $1, $2, $5)
     }
     $10 = $8 + 5476 | 0;
     $5 = SAFE_HEAP_LOAD_i64_8_4($10, 0);
     $14 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_f32_4_4($10, 0, SAFE_HEAP_LOAD_f32_4_4($8 + 5480 | 0, 0));
     $6 = $6 & 16384;
     if ($6) {
      ImGui__BeginDisabled_28bool_29(1)
     }
     ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($8, 5500));
     SAFE_HEAP_STORE_f32_4_4($7, 76, $11);
     SAFE_HEAP_STORE_f32_4_4($7, 72, $11);
     if (ImGui__ButtonEx_28char_20const__2c_20ImVec2_20const__2c_20int_29(17688, $7 + 72 | 0, 9216)) {
      ImGui__DataTypeApplyOp_28int_2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__29($1, 45, $2, $2, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($8 + 252 | 0, 0) ? $4 : $3, wasm2js_i32$1 = $3, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
      $9 = 1;
     }
     ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($8, 5500));
     SAFE_HEAP_STORE_f32_4_4($7, 76, $11);
     SAFE_HEAP_STORE_f32_4_4($7, 72, $11);
     if (ImGui__ButtonEx_28char_20const__2c_20ImVec2_20const__2c_20int_29(17690, $7 + 72 | 0, 9216)) {
      ImGui__DataTypeApplyOp_28int_2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__29($1, 43, $2, $2, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($8 + 252 | 0, 0) ? $4 : $3, wasm2js_i32$1 = $3, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
      $9 = 1;
     }
     if ($6) {
      ImGui__EndDisabled_28_29()
     }
     $1 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0);
     if (($0 | 0) != ($1 | 0)) {
      ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($8, 5500));
      ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $1, 0);
     }
     SAFE_HEAP_STORE_i64_8_4($8, 5476, $5, $14);
     ImGui__PopID_28_29();
     ImGui__EndGroup_28_29();
     break label$3;
    }
    SAFE_HEAP_STORE_i64_8_4($7, 72, 0, 0);
    $9 = 0;
    if (!ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, 0, $7, 64, $7 + 72 | 0, $10, 0)) {
     break label$3
    }
    $9 = ImGui__DataTypeApplyOpFromText_28char_20const__2c_20char_20const__2c_20int_2c_20void__2c_20char_20const__29($7, SAFE_HEAP_LOAD_i32_4_4($8 + 8224 | 0, 0), $1, $2, $5);
   }
   if ($9) {
    ImGui__MarkItemEdited_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($8, 7240))
   }
  }
  __stack_pointer = $7 + 80 | 0;
  return $9;
 }
 
 function ImGui__InputText_28char_20const__2c_20char__2c_20unsigned_20long_2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  $0 = ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, 0, $1, $2, $5 + 8 | 0, $3, $4);
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($11, 7080);
  SAFE_HEAP_STORE_i32_1_1($8, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 143)) {
   ImGui__BeginGroup_28_29();
   ImGui__PushID_28char_20const__29($0);
   ImGui__PushMultiItemsWidths_28int_2c_20float_29($3, ImGui__CalcItemWidth_28_29());
   $8 = 0;
   if (($3 | 0) > 0) {
    $12 = SAFE_HEAP_LOAD_i32_4_4(($1 << 4) + 48160 | 0, 0);
    $9 = $2;
    $2 = 0;
    while (1) {
     ImGui__PushID_28int_29($10);
     if ($10) {
      ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($11, 5500))
     }
     $8 = ImGui__InputScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(19354, $1, $9, $4, $5, $6, $7);
     ImGui__PopID_28_29();
     ImGui__PopItemWidth_28_29();
     $2 = $2 | $8;
     $8 = $2;
     $9 = $9 + $12 | 0;
     $10 = $10 + 1 | 0;
     if (($10 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $9 = $8;
   ImGui__PopID_28_29();
   $1 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0);
   if (($0 | 0) != ($1 | 0)) {
    ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($11 + 5500 | 0, 0));
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $1, 0);
   }
   ImGui__EndGroup_28_29();
  }
  return $9 & 1;
 }
 
 function ImGui__InputTextMultiline_28char_20const__2c_20char__2c_20unsigned_20long_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, $1, $2, $3, $4, $5) {
  return ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, 0, $1, $2, $3, $4 | 67108864, $5);
 }
 
 function ImGui__InputTextWithHint_28char_20const__2c_20char_20const__2c_20char__2c_20unsigned_20long_2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, $1, $2, $3, $4, $5) {
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  $0 = ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29($0, $1, $2, $3, $6 + 8 | 0, $4, $5);
  __stack_pointer = $6 + 16 | 0;
  return $0;
 }
 
 function ImStb__is_word_boundary_from_right_28ImGuiInputTextState__2c_20int_29($0, $1) {
  var $2 = 0;
  if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 3697 | 0, 0) & 128) {
   return 0
  }
  $2 = 1;
  label$2 : {
   if (($1 | 0) <= 0) {
    break label$2
   }
   $2 = 0;
   label$3 : {
    label$4 : {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0) + ($1 << 1) | 0;
     $1 = SAFE_HEAP_LOAD_i32_2_U_2($0 - 2 | 0, 0);
     switch ($1 - 9 | 0) {
     case 2:
     case 3:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 33:
     case 34:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 49:
     case 51:
     case 52:
     case 53:
     case 54:
     case 55:
     case 56:
     case 57:
     case 58:
     case 59:
     case 60:
     case 61:
     case 62:
     case 63:
     case 64:
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 71:
     case 72:
     case 73:
     case 74:
     case 75:
     case 76:
     case 77:
     case 78:
     case 79:
     case 80:
     case 81:
     case 83:
     case 85:
     case 86:
     case 87:
     case 88:
     case 89:
     case 90:
     case 91:
     case 92:
     case 93:
     case 94:
     case 95:
     case 96:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
     case 103:
     case 104:
     case 105:
     case 106:
     case 107:
     case 108:
     case 109:
     case 110:
     case 111:
     case 112:
     case 113:
      break label$2;
     case 0:
     case 1:
     case 4:
     case 23:
     case 31:
     case 32:
     case 35:
     case 50:
     case 82:
     case 84:
     case 114:
     case 115:
     case 116:
      break label$3;
     default:
      break label$4;
     };
    }
    if (($1 | 0) == 12288) {
     break label$3
    }
    return 0;
   }
   label$5 : {
    label$6 : {
     $0 = SAFE_HEAP_LOAD_i32_2_U_2($0, 0);
     switch ($0 - 9 | 0) {
     case 0:
     case 1:
     case 4:
     case 23:
     case 31:
     case 32:
     case 35:
     case 50:
     case 82:
     case 84:
     case 114:
     case 115:
     case 116:
      break label$2;
     case 2:
     case 3:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 33:
     case 34:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 49:
     case 51:
     case 52:
     case 53:
     case 54:
     case 55:
     case 56:
     case 57:
     case 58:
     case 59:
     case 60:
     case 61:
     case 62:
     case 63:
     case 64:
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 71:
     case 72:
     case 73:
     case 74:
     case 75:
     case 76:
     case 77:
     case 78:
     case 79:
     case 80:
     case 81:
     case 83:
     case 85:
     case 86:
     case 87:
     case 88:
     case 89:
     case 90:
     case 91:
     case 92:
     case 93:
     case 94:
     case 95:
     case 96:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
     case 103:
     case 104:
     case 105:
     case 106:
     case 107:
     case 108:
     case 109:
     case 110:
     case 111:
     case 112:
     case 113:
      break label$5;
     default:
      break label$6;
     };
    }
    if (($0 | 0) == 12288) {
     break label$2
    }
   }
   $2 = 1;
  }
  return $2;
 }
 
 function ImStb__stb_textedit_find_charpos_28ImStb__StbFindState__2c_20ImGuiInputTextState__2c_20int_2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  if (($2 | 0) == ($6 | 0)) {
   if ($3) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
    $14 = $1 + ($6 << 1) | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 6464);
    $9 = $2 + 12 | 0;
    $17 = SAFE_HEAP_LOAD_f32_4_4($3, 6468);
    $20 = Math_fround($17 / SAFE_HEAP_LOAD_f32_4_4($2, 16));
    while (1) {
     label$3 : {
      if ($1 >>> 0 >= $14 >>> 0) {
       $10 = $12;
       $8 = $16;
       $7 = $5;
       break label$3;
      }
      $7 = $11;
      $10 = $13;
      $3 = 0;
      $8 = $5;
      label$6 : {
       label$7 : {
        label$8 : {
         $4 = SAFE_HEAP_LOAD_i32_2_U_2($1, 0);
         switch ($4 - 10 | 0) {
         case 3:
          break label$6;
         case 0:
          break label$8;
         default:
          break label$7;
         };
        }
        $7 = Math_fround($17 + $11);
        $12 = $7;
        $10 = $5 <= $13 ? $13 : $5;
        $16 = $10;
        $3 = 1;
        $8 = Math_fround(0.0);
        break label$6;
       }
       $8 = Math_fround($5 + Math_fround($20 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 8) + ($4 << 2) | 0, wasm2js_i32$1 = $9, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) > ($4 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0)));
      }
      $11 = $7;
      $13 = $10;
      $1 = $1 + 2 | 0;
      $5 = $8;
      $10 = $12;
      $8 = $16;
      $7 = $5;
      if (!$3) {
       continue
      }
     }
     break;
    };
    SAFE_HEAP_STORE_i32_4_4($0, 16, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
    SAFE_HEAP_STORE_f32_4_4($0, 0, $7 > $8 ? $7 : $8);
    SAFE_HEAP_STORE_f32_4_4($0, 8, Math_fround($10 + ($7 > Math_fround(0.0) ? $17 : $10 == Math_fround(0.0) ? $17 : Math_fround(-0.0))));
    return;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 8, 1065353216);
   SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
   $2 = 0;
   if (($6 | 0) > 0) {
    $14 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
    $9 = $14 + ($6 << 1) | 0;
    $3 = 0;
    while (1) {
     $2 = $3;
     $15 = $14 + ($3 << 1) | 0;
     $3 = $15;
     while (1) {
      label$11 : {
       $1 = $3;
       if ($9 >>> 0 <= $1 >>> 0) {
        $4 = $1;
        break label$11;
       }
       $3 = $1 + 2 | 0;
       $4 = $3;
       if ((SAFE_HEAP_LOAD_i32_2_U_2($1, 0) | 0) != 10) {
        continue
       }
      }
      break;
     };
     $4 = ($4 - $15 >> 1) + $2 | 0;
     $3 = $4;
     if (($4 | 0) < ($6 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_4_4($0, 20, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 16, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12, $4);
   return;
  }
  $15 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
  $21 = $15 + ($6 << 1) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 6464);
  $18 = $9 + 12 | 0;
  $8 = SAFE_HEAP_LOAD_f32_4_4($1, 6468);
  $16 = Math_fround($8 / SAFE_HEAP_LOAD_f32_4_4($9, 16));
  $1 = 0;
  $3 = 0;
  while (1) {
   $14 = $3;
   $10 = $5;
   SAFE_HEAP_STORE_f32_4_4($0, 4, $5);
   $13 = Math_fround(0.0);
   $5 = Math_fround(0.0);
   $6 = $1;
   $19 = ($1 << 1) + $15 | 0;
   $1 = $19;
   $11 = Math_fround(0.0);
   while (1) {
    label$15 : {
     $12 = $11;
     $7 = $13;
     if ($1 >>> 0 >= $21 >>> 0) {
      $4 = $1;
      break label$15;
     }
     $11 = $5;
     $3 = 0;
     label$18 : {
      label$19 : {
       label$20 : {
        $4 = SAFE_HEAP_LOAD_i32_2_U_2($1, 0);
        switch ($4 - 10 | 0) {
        case 3:
         break label$18;
        case 0:
         break label$20;
        default:
         break label$19;
        };
       }
       $11 = Math_fround($8 + $5);
       $13 = $11;
       $3 = 1;
       $12 = Math_fround(0.0);
       break label$18;
      }
      $12 = Math_fround($12 + Math_fround($16 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($9, 8) + ($4 << 2) | 0, wasm2js_i32$1 = $18, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) > ($4 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0)));
     }
     $5 = $11;
     $7 = $13;
     $1 = $1 + 2 | 0;
     $4 = $1;
     $11 = $12;
     if (!$3) {
      continue
     }
    }
    break;
   };
   $7 = Math_fround($7 + ($12 > Math_fround(0.0) ? $8 : $7 == Math_fround(0.0) ? $8 : Math_fround(-0.0)));
   $3 = $4 - $19 >> 1;
   $1 = $3 + $6 | 0;
   if (($1 | 0) <= ($2 | 0)) {
    $5 = Math_fround($10 + $7);
    $3 = $6;
    continue;
   }
   break;
  };
  SAFE_HEAP_STORE_i32_4_4($0, 16, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 12, $6);
  SAFE_HEAP_STORE_i32_4_4($0, 20, $14);
  SAFE_HEAP_STORE_f32_4_4($0, 8, $7);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  if (($2 | 0) > ($6 | 0)) {
   $2 = $2 - $6 | 0;
   $3 = $6;
   $4 = 0;
   while (1) {
    $5 = Math_fround(-1.0);
    $1 = SAFE_HEAP_LOAD_i32_2_U_2(($3 << 1) + $15 | 0, 0);
    if (($1 | 0) != 10) {
     $5 = Math_fround($16 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($9, 8) + ($1 << 2) | 0, wasm2js_i32$1 = $18, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) > ($1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0))
    }
    SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
    $4 = $4 + 1 | 0;
    $3 = $4 + $6 | 0;
    if (($2 | 0) != ($4 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function ImGuiInputTextCallbackData__ImGuiInputTextCallbackData_28_29($0) {
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 40 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 32 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, 0, 0);
 }
 
 function ImGuiInputTextCallbackData__DeleteChars_28int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $1 | 0;
  $4 = $3 + $2 | 0;
  while (1) {
   $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   if ($5) {
    SAFE_HEAP_STORE_i32_1_1($3, 0, $5);
    $3 = $3 + 1 | 0;
   }
   $4 = $4 + 1 | 0;
   if ($5) {
    continue
   }
   break;
  };
  SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
  label$4 : {
   label$5 : {
    if (($4 | 0) >= ($1 + $2 | 0)) {
     $3 = $4 - $2 | 0;
     break label$5;
    }
    $3 = $1;
    if (($4 | 0) < ($3 | 0)) {
     break label$4
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 36, $3);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 32, 1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
  SAFE_HEAP_STORE_i32_4_4($0, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 40, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_4($0, 24) - $2 | 0);
 }
 
 function ImStb__stb_text_locate_coord_28ImGuiInputTextState__2c_20float_2c_20float_29($0, $1, $2) {
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = 0, $18 = Math_fround(0), $19 = Math_fround(0), $20 = Math_fround(0), $21 = Math_fround(0), $22 = 0, $23 = 0, $24 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $5 = ($6 | 0) > 0;
  label$1 : {
   if (($6 | 0) <= 0) {
    $4 = Math_fround(0.0);
    break label$1;
   }
   $14 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
   $16 = $14 + ($6 << 1) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $11 = SAFE_HEAP_LOAD_i32_4_4($3, 6464);
   $23 = $11 + 12 | 0;
   $15 = SAFE_HEAP_LOAD_f32_4_4($3, 6468);
   $24 = Math_fround($15 / SAFE_HEAP_LOAD_f32_4_4($11, 16));
   $3 = 0;
   label$3 : {
    while (1) {
     $21 = $4;
     $17 = $5;
     $18 = Math_fround(0.0);
     $19 = Math_fround(0.0);
     $20 = Math_fround(0.0);
     $7 = Math_fround(0.0);
     $12 = $3;
     $22 = ($3 << 1) + $14 | 0;
     $5 = $22;
     $4 = Math_fround(0.0);
     while (1) {
      label$5 : {
       if ($5 >>> 0 >= $16 >>> 0) {
        $13 = $18;
        $10 = $19;
        $8 = $5;
        $9 = $4;
        break label$5;
       }
       $9 = $20;
       $13 = $7;
       $3 = 0;
       $10 = $4;
       label$8 : {
        label$9 : {
         label$10 : {
          $8 = SAFE_HEAP_LOAD_i32_2_U_2($5, 0);
          switch ($8 - 10 | 0) {
          case 0:
           break label$10;
          case 3:
           break label$8;
          default:
           break label$9;
          };
         }
         $9 = Math_fround($15 + $20);
         $18 = $9;
         $13 = $4 <= $7 ? $7 : $4;
         $19 = $13;
         $3 = 1;
         $10 = Math_fround(0.0);
         break label$8;
        }
        $10 = Math_fround($4 + Math_fround($24 * SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($11, 8) + ($8 << 2) | 0, wasm2js_i32$1 = $23, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($11, 0) | 0) > ($8 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0)));
       }
       $20 = $9;
       $7 = $13;
       $4 = $10;
       $13 = $18;
       $10 = $19;
       $5 = $5 + 2 | 0;
       $8 = $5;
       $9 = $4;
       if (!$3) {
        continue
       }
      }
      break;
     };
     $3 = $8 - $22 | 0;
     if (($3 | 0) < 2) {
      return $6
     }
     if (!(!(Math_fround($21 + Math_fround(0.0)) > $2) | $12)) {
      return 0
     }
     $8 = $3 >> 1;
     $4 = Math_fround($21 + Math_fround($13 + ($9 > Math_fround(0.0) ? $15 : $13 == Math_fround(0.0) ? $15 : Math_fround(-0.0))));
     if ($4 > $2) {
      break label$3
     }
     $3 = $8 + $12 | 0;
     $5 = ($3 | 0) < ($6 | 0);
     if ($5) {
      continue
     }
     break;
    };
    $4 = $9 > $10 ? $9 : $10;
    break label$1;
   }
   $3 = $12;
   $5 = $17;
   $4 = $9 > $10 ? $9 : $10;
  }
  $12 = $3;
  $3 = $6;
  if ($5 & 1) {
   if ($1 < Math_fround(0.0)) {
    return $12
   }
   label$15 : {
    if (!($1 < $4) | ($8 | 0) <= 0) {
     break label$15
    }
    $16 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0);
    $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $3 = 0;
    $4 = Math_fround(0.0);
    while (1) {
     $17 = $3;
     $3 = $3 + $12 | 0;
     $14 = SAFE_HEAP_LOAD_i32_2_U_2($16 + ($3 << 1) | 0, 0);
     $7 = Math_fround(-1.0);
     label$17 : {
      if (($14 | 0) == 10) {
       break label$17
      }
      $6 = SAFE_HEAP_LOAD_i32_4_4($11, 6464);
      $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($6, 8) + ($14 << 2) | 0, wasm2js_i32$1 = $6 + 12 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) > ($14 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 6468) / SAFE_HEAP_LOAD_f32_4_4($6, 16)));
     }
     $2 = $7;
     $7 = Math_fround($4 + $7);
     $6 = $7 > $1;
     label$18 : {
      if (!$6) {
       break label$18
      }
      if ($1 < Math_fround($4 + Math_fround($2 * Math_fround(.5)))) {
       $7 = $4;
       $5 = $3;
       break label$18;
      }
      $7 = $4;
      $5 = $3 + 1 | 0;
     }
     $4 = $7;
     if (!$6) {
      $3 = $17 + 1 | 0;
      if (($8 | 0) == ($3 | 0)) {
       break label$15
      }
      continue;
     }
     break;
    };
    return $5;
   }
   $3 = $8 + $12 | 0;
   $5 = $3 - 1 | 0;
   $3 = (SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0) + ($5 << 1) | 0, 0) | 0) == 10 ? $5 : $3;
  }
  return $3;
 }
 
 function ImGui__ColorEdit4_28char_20const__2c_20float__2c_20int_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0;
  $3 = __stack_pointer - 208 | 0;
  __stack_pointer = $3;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $18 = SAFE_HEAP_LOAD_i32_4_4($10, 7080);
  SAFE_HEAP_STORE_i32_1_1($18, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($18, 143)) {
   $24 = ImGui__GetFrameHeight_28_29();
   $25 = ImGui__CalcItemWidth_28_29();
   if ($2 & 16) {
    $20 = Math_fround(0.0)
   } else {
    $20 = Math_fround($24 + SAFE_HEAP_LOAD_f32_4_4($10 + 5500 | 0, 0))
   }
   $23 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0);
   SAFE_HEAP_STORE_i32_4_4($10, 7220, 0);
   ImGui__BeginGroup_28_29();
   ImGui__PushID_28char_20const__29($0);
   $4 = $2 & 32 ? $2 & -7340041 | 1048584 : $2;
   if (!($4 & 8)) {
    $7 = __stack_pointer - 160 | 0;
    __stack_pointer = $7;
    $6 = $4 & 7340032;
    $11 = $4 & 25165824;
    label$1 : {
     if ($11 ? $6 : 0) {
      break label$1
     }
     if (!ImGui__BeginPopup_28char_20const__2c_20int_29(1958, 0)) {
      break label$1
     }
     $21 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $5 = SAFE_HEAP_LOAD_i32_4_4($21, 11972);
     label$3 : {
      if ($6) {
       break label$3
      }
      $12 = $5 & -7340033;
      $5 = ImGui__RadioButton_28char_20const__2c_20bool_29(15314, ($5 & 1048576) >>> 20 | 0) ? $12 | 1048576 : $5;
      $5 = ImGui__RadioButton_28char_20const__2c_20bool_29(14802, ($5 & 2097152) >>> 21 | 0) ? $12 | 2097152 : $5;
      if (!ImGui__RadioButton_28char_20const__2c_20bool_29(1504, ($5 & 4194304) >>> 22 | 0)) {
       break label$3
      }
      $5 = $5 & -7340033 | 4194304;
     }
     if (!$11) {
      label$8 : {
       if ($6) {
        break label$8
       }
       $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
       if (SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
        break label$8
       }
       ImGui__SeparatorEx_28int_29(SAFE_HEAP_LOAD_i32_4_4($6 + 376 | 0, 0) ? 5 : 6);
      }
      $6 = $5 & -25165825;
      $5 = ImGui__RadioButton_28char_20const__2c_20bool_29(16228, ($5 & 8388608) >>> 23 | 0) ? $6 | 8388608 : $5;
      $5 = ImGui__RadioButton_28char_20const__2c_20bool_29(16670, ($5 & 16777216) >>> 24 | 0) ? $6 | 16777216 : $5;
     }
     $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
     if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
      ImGui__SeparatorEx_28int_29(SAFE_HEAP_LOAD_i32_4_4($6 + 376 | 0, 0) ? 5 : 6)
     }
     SAFE_HEAP_STORE_i64_8_4($7, 96, -1082130432, 0);
     if (ImGui__ButtonEx_28char_20const__2c_20ImVec2_20const__2c_20int_29(17283, $7 + 96 | 0, 0)) {
      ImGui__OpenPopup_28char_20const__2c_20int_29(1159, 0)
     }
     if (ImGui__BeginPopup_28char_20const__2c_20int_29(1159, 0)) {
      $8 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
      $13 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
      label$12 : {
       if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
        $6 = ~~$13;
        break label$12;
       }
       $6 = -2147483648;
      }
      $13 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
      $17 = Math_fround(Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : $13 > Math_fround(1.0) ? Math_fround(1.0) : $13) * Math_fround(255.0)) + Math_fround(.5));
      label$14 : {
       if (Math_fround(Math_abs($17)) < Math_fround(2147483648.0)) {
        $11 = ~~$17;
        break label$14;
       }
       $11 = -2147483648;
      }
      $17 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
      $9 = Math_fround(Math_fround(($17 < Math_fround(0.0) ? Math_fround(0.0) : $17 > Math_fround(1.0) ? Math_fround(1.0) : $17) * Math_fround(255.0)) + Math_fround(.5));
      label$16 : {
       if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
        $12 = ~~$9;
        break label$16;
       }
       $12 = -2147483648;
      }
      $16 = 255;
      $19 = $4 & 2;
      if (!$19) {
       $9 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
       $9 = Math_fround(Math_fround(($9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9) * Math_fround(255.0)) + Math_fround(.5));
       label$19 : {
        if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
         $16 = ~~$9;
         break label$19;
        }
        $16 = -2147483648;
       }
      }
      $30 = +$8;
      $31 = +$13;
      $32 = +$17;
      $14 = $7 + 72 | 0;
      if ($19) {
       $26 = 1.0
      } else {
       $26 = +SAFE_HEAP_LOAD_f32_4_4($1, 12)
      }
      SAFE_HEAP_STORE_f64_8_8($14, 0, $26);
      SAFE_HEAP_STORE_f64_8_8($7 - -64 | 0, 0, $30);
      SAFE_HEAP_STORE_f64_8_8($7, 56, $31);
      SAFE_HEAP_STORE_f64_8_8($7, 48, $32);
      $14 = $7 + 96 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($14, 64, 18009, $7 + 48 | 0);
      SAFE_HEAP_STORE_i64_8_4($7, 88, 0, 0);
      if (ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($14, 0, 0, $7 + 88 | 0)) {
       ImGui__SetClipboardText_28char_20const__29($7 + 96 | 0)
      }
      SAFE_HEAP_STORE_i32_4_4($7, 44, $16);
      SAFE_HEAP_STORE_i32_4_4($7, 40, $6);
      SAFE_HEAP_STORE_i32_4_4($7, 36, $11);
      SAFE_HEAP_STORE_i32_4_4($7, 32, $12);
      $14 = $7 + 96 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($14, 64, 18399, $7 + 32 | 0);
      SAFE_HEAP_STORE_i64_8_4($7, 88, 0, 0);
      if (ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($14, 0, 0, $7 + 88 | 0)) {
       ImGui__SetClipboardText_28char_20const__29($7 + 96 | 0)
      }
      SAFE_HEAP_STORE_i32_4_4($7, 24, $6);
      SAFE_HEAP_STORE_i32_4_4($7, 20, $11);
      SAFE_HEAP_STORE_i32_4_4($7, 16, $12);
      $14 = $7 + 96 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($14, 64, 14729, $7 + 16 | 0);
      SAFE_HEAP_STORE_i64_8_4($7, 88, 0, 0);
      if (ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($14, 0, 0, $7 + 88 | 0)) {
       ImGui__SetClipboardText_28char_20const__29($7 + 96 | 0)
      }
      label$25 : {
       if ($19) {
        break label$25
       }
       SAFE_HEAP_STORE_i32_4_4($7, 12, $16);
       SAFE_HEAP_STORE_i32_4_4($7, 8, $6);
       SAFE_HEAP_STORE_i32_4_4($7, 4, $11);
       SAFE_HEAP_STORE_i32_4_4($7, 0, $12);
       $6 = $7 + 96 | 0;
       ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($6, 64, 14711, $7);
       SAFE_HEAP_STORE_i64_8_4($7, 88, 0, 0);
       if (!ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($6, 0, 0, $7 + 88 | 0)) {
        break label$25
       }
       ImGui__SetClipboardText_28char_20const__29($7 + 96 | 0);
      }
      ImGui__EndPopup_28_29();
     }
     SAFE_HEAP_STORE_i32_4_4($21, 11972, $5);
     ImGui__EndPopup_28_29();
    }
    __stack_pointer = $7 + 160 | 0;
   }
   if (!($4 & 7340032)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($10, 11972) & 7340032 | $4
   }
   if (!($4 & 25165824)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($10, 11972) & 25165824 | $4
   }
   if (!($4 & 100663296)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($10, 11972) & 100663296 | $4
   }
   if (!($4 & 402653184)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($10, 11972) & 402653184 | $4
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($10, 11972);
   $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   SAFE_HEAP_STORE_f32_4_4($3, 176, $8);
   SAFE_HEAP_STORE_f32_4_4($3, 180, SAFE_HEAP_LOAD_f32_4_4($1, 4));
   SAFE_HEAP_STORE_f32_4_4($3, 184, SAFE_HEAP_LOAD_f32_4_4($1, 8));
   $7 = $4;
   $12 = $4 | $5 & -535822337;
   $16 = $12 & 2;
   if ($16) {
    $9 = Math_fround(1.0)
   } else {
    $9 = SAFE_HEAP_LOAD_f32_4_4($1, 12)
   }
   SAFE_HEAP_STORE_f32_4_4($3, 188, $9);
   $27 = $7 & 269484032;
   label$13 : {
    if (($27 | 0) == 269484032) {
     $4 = $3 + 176 | 0;
     ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($8, SAFE_HEAP_LOAD_f32_4_4($3, 180), SAFE_HEAP_LOAD_f32_4_4($3, 184), $4, $4 | 4, $4 | 8);
     break label$13;
    }
    if (($7 & 136314880) != 136314880) {
     break label$13
    }
    $4 = $3 + 176 | 0;
    ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($8, SAFE_HEAP_LOAD_f32_4_4($3, 180), SAFE_HEAP_LOAD_f32_4_4($3, 184), $4, $4 | 4, $4 | 8);
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $5 = SAFE_HEAP_LOAD_i32_4_4($4, 11984);
    $6 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
    $11 = i64toi32_i32$HIGH_BITS;
    $8 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
    SAFE_HEAP_STORE_i32_4_4($3, 108, 0);
    SAFE_HEAP_STORE_f32_4_4($3, 104, $8);
    SAFE_HEAP_STORE_i64_8_4($3, 96, $6, $11);
    if ((ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($3 + 96 | 0) | 0) != ($5 | 0)) {
     break label$13
    }
    label$15 : {
     if (SAFE_HEAP_LOAD_f32_4_4($3, 180) != Math_fround(0.0)) {
      if (SAFE_HEAP_LOAD_f32_4_4($3, 176) != Math_fround(0.0)) {
       break label$15
      }
      if (SAFE_HEAP_LOAD_f32_4_4($4, 11976) != Math_fround(1.0)) {
       break label$15
      }
     }
     SAFE_HEAP_STORE_f32_4_4($3, 176, SAFE_HEAP_LOAD_f32_4_4($4, 11976));
    }
    if (SAFE_HEAP_LOAD_f32_4_4($3, 184) != Math_fround(0.0)) {
     break label$13
    }
    SAFE_HEAP_STORE_f32_4_4($3, 180, SAFE_HEAP_LOAD_f32_4_4($4, 11980));
   }
   $8 = SAFE_HEAP_LOAD_f32_4_4($3, 176);
   $8 = Math_fround(Math_fround($8 * Math_fround(255.0)) + ($8 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$17 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $4 = ~~$8;
     break label$17;
    }
    $4 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 160, $4);
   $8 = SAFE_HEAP_LOAD_f32_4_4($3, 180);
   $8 = Math_fround(Math_fround($8 * Math_fround(255.0)) + ($8 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$190 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5 = ~~$8;
     break label$190;
    }
    $5 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 164, $5);
   $8 = SAFE_HEAP_LOAD_f32_4_4($3, 184);
   $8 = Math_fround(Math_fround($8 * Math_fround(255.0)) + ($8 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$21 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5 = ~~$8;
     break label$21;
    }
    $5 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 168, $5);
   $8 = Math_fround($25 - $20);
   $19 = $16 ? 3 : 4;
   $13 = SAFE_HEAP_LOAD_f32_4_4($3, 188);
   $13 = Math_fround(Math_fround($13 * Math_fround(255.0)) + ($13 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$23 : {
    if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
     $5 = ~~$13;
     break label$23;
    }
    $5 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 172, $5);
   $13 = SAFE_HEAP_LOAD_f32_4_4($18, 208);
   SAFE_HEAP_STORE_f32_4_4($18, 208, Math_fround($13 + (SAFE_HEAP_LOAD_i32_4_4($10 + 5564 | 0, 0) ? Math_fround(0.0) : $20)));
   $17 = SAFE_HEAP_LOAD_f32_4_4($18 + 212 | 0, 0);
   $21 = $12 & 32;
   label$251 : {
    if (!($21 | !($7 & 3145728))) {
     $9 = SAFE_HEAP_LOAD_f32_4_4($10 + 5500 | 0, 0);
     $28 = $7 & 16777216;
     ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 96 | 0, $28 ? 16662 : 16656, 0, 0, Math_fround(-1.0));
     $4 = $12 & 524288;
     $22 = $9;
     $15 = Math_fround($19 - 1 | 0);
     $9 = Math_fround(Math_fround($8 - Math_fround($9 * $15)) / Math_fround($19 | 0));
     label$27 : {
      if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
       $5 = ~~$9;
       break label$27;
      }
      $5 = -2147483648;
     }
     $9 = Math_fround($5 | 0);
     $9 = $9 <= Math_fround(1.0) ? Math_fround(1.0) : $9;
     $15 = Math_fround($8 - Math_fround(Math_fround($22 + $9) * $15));
     label$29 : {
      if (Math_fround(Math_abs($15)) < Math_fround(2147483648.0)) {
       $5 = ~~$15;
       break label$29;
      }
      $5 = -2147483648;
     }
     $15 = Math_fround($5 | 0);
     $15 = $15 <= Math_fround(1.0) ? Math_fround(1.0) : $15;
     $29 = SAFE_HEAP_LOAD_f32_4_4($3, 96) >= $9 ? 0 : $7 & 2097152 ? 2 : 1;
     $33 = $4 ? 0 : 255;
     $22 = $4 ? Math_fround(0.0) : Math_fround(1.0);
     $34 = $12 & 8;
     $4 = 0;
     $14 = 0;
     $6 = 0;
     while (1) {
      if ($6) {
       ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($10, 5500))
      }
      $11 = $6 + 1 | 0;
      ImGui__SetNextItemWidth_28float_29($11 >>> 0 < $19 >>> 0 ? $9 : $15);
      $5 = $4 & 1;
      $4 = $6 << 2;
      $6 = SAFE_HEAP_LOAD_i32_4_4($4 + 48320 | 0, 0);
      label$33 : {
       if ($28) {
        SAFE_HEAP_STORE_i32_4_4($3, 96, 0);
        SAFE_HEAP_STORE_f32_4_4($3, 200, $22);
        $4 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($6, 8, $4 + ($3 + 176 | 0) | 0, Math_fround(.003921568859368563), $3 + 96 | 0, $3 + 200 | 0, SAFE_HEAP_LOAD_i32_4_4(($4 + ($29 << 4) | 0) + 48384 | 0, 0), 0) | $5;
        $14 = $4 | $14 & 1;
        break label$33;
       }
       SAFE_HEAP_STORE_i32_4_4($3, 96, 0);
       SAFE_HEAP_STORE_i32_4_4($3, 200, $33);
       $4 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($6, 4, $4 + ($3 + 160 | 0) | 0, Math_fround(1.0), $3 + 96 | 0, $3 + 200 | 0, SAFE_HEAP_LOAD_i32_4_4(($4 + ($29 << 4) | 0) + 48336 | 0, 0), 0) | $5;
      }
      $5 = $4;
      if (!$34) {
       ImGui__OpenPopupOnItemClick_28char_20const__2c_20int_29(1958, 1)
      }
      $6 = $11;
      if (($6 | 0) != ($19 | 0)) {
       continue
      }
      break;
     };
     $6 = $14 & 1;
     break label$251;
    }
    if (!($7 & 4194304)) {
     $5 = 0;
     $6 = 0;
     break label$251;
    }
    $5 = 0;
    $6 = 0;
    if ($21) {
     break label$251
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($3, 168);
    $5 = ($5 | 0) >= 255 ? 255 : $5;
    $5 = ($5 | 0) > 0 ? $5 : 0;
    $6 = SAFE_HEAP_LOAD_i32_4_4($3, 164);
    $6 = ($6 | 0) >= 255 ? 255 : $6;
    $6 = ($6 | 0) > 0 ? $6 : 0;
    $4 = ($4 | 0) >= 255 ? 255 : $4;
    $4 = ($4 | 0) > 0 ? $4 : 0;
    label$37 : {
     if (!$16) {
      SAFE_HEAP_STORE_i32_4_4($3, 48, $4);
      SAFE_HEAP_STORE_i32_4_4($3, 52, $6);
      SAFE_HEAP_STORE_i32_4_4($3, 56, $5);
      $4 = SAFE_HEAP_LOAD_i32_4_4($3, 172);
      $4 = ($4 | 0) >= 255 ? 255 : $4;
      SAFE_HEAP_STORE_i32_4_4($3, 60, ($4 | 0) > 0 ? $4 : 0);
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3 + 96 | 0, 64, 14711, $3 + 48 | 0);
      break label$37;
     }
     SAFE_HEAP_STORE_i32_4_4($3, 72, $5);
     SAFE_HEAP_STORE_i32_4_4($3, 68, $6);
     SAFE_HEAP_STORE_i32_4_4($3, 64, $4);
     ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3 + 96 | 0, 64, 14729, $3 - -64 | 0);
    }
    ImGui__SetNextItemWidth_28float_29($8);
    SAFE_HEAP_STORE_i64_8_4($3, 200, 0, 0);
    $5 = ImGui__InputTextEx_28char_20const__2c_20char_20const__2c_20char__2c_20int_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29(2138, 0, $3 + 96 | 0, 64, $3 + 200 | 0, 6, 0);
    label$39 : {
     if (!$5) {
      break label$39
     }
     $4 = $3 + 96 | 0;
     while (1) {
      $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0) - 9 | 0;
      if (!($6 >>> 0 > 26 | !(1 << $6 & 75497473))) {
       $4 = $4 + 1 | 0;
       continue;
      }
      break;
     };
     SAFE_HEAP_STORE_i64_8_8($3, 168, 0, 255);
     SAFE_HEAP_STORE_i64_8_8($3, 160, 0, 0);
     $11 = $3 + 160 | 0;
     $6 = $11 | 4;
     $11 = $11 | 8;
     if (!$16) {
      $14 = $3 + 160 | 0;
      SAFE_HEAP_STORE_i32_4_4($3, 28, $14 | 12);
      SAFE_HEAP_STORE_i32_4_4($3, 24, $11);
      SAFE_HEAP_STORE_i32_4_4($3, 20, $6);
      SAFE_HEAP_STORE_i32_4_4($3, 16, $14);
      sscanf($4, 14712, $3 + 16 | 0);
      break label$39;
     }
     SAFE_HEAP_STORE_i32_4_4($3, 40, $11);
     SAFE_HEAP_STORE_i32_4_4($3, 36, $6);
     SAFE_HEAP_STORE_i32_4_4($3, 32, $3 + 160 | 0);
     sscanf($4, 14730, $3 + 32 | 0);
    }
    if (!($12 & 8)) {
     ImGui__OpenPopupOnItemClick_28char_20const__2c_20int_29(1958, 1)
    }
    $6 = 0;
   }
   label$44 : {
    if ($12 & 16) {
     $4 = 0;
     break label$44;
    }
    $9 = Math_fround(0.0);
    label$46 : {
     if ($21) {
      break label$46
     }
     $9 = Math_fround(0.0);
     if (!SAFE_HEAP_LOAD_i32_4_4($10, 5564)) {
      break label$46
     }
     $9 = Math_fround($8 + SAFE_HEAP_LOAD_f32_4_4($10 + 5500 | 0, 0));
    }
    $8 = $9;
    SAFE_HEAP_STORE_f32_4_4($18 + 212 | 0, 0, $17);
    SAFE_HEAP_STORE_f32_4_4($18, 208, Math_fround($13 + $8));
    $8 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
    $9 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
    $15 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    if ($16) {
     $22 = Math_fround(1.0)
    } else {
     $22 = SAFE_HEAP_LOAD_f32_4_4($1, 12)
    }
    SAFE_HEAP_STORE_f32_4_4($3, 108, $22);
    SAFE_HEAP_STORE_f32_4_4($3, 104, $8);
    SAFE_HEAP_STORE_f32_4_4($3, 100, $9);
    SAFE_HEAP_STORE_f32_4_4($3, 96, $15);
    SAFE_HEAP_STORE_i64_8_4($3, 88, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($3, 8, 0, 0);
    if (!(!ImGui__ColorButton_28char_20const__2c_20ImVec4_20const__2c_20int_2c_20ImVec2_29(7267, $3 + 96 | 0, $12, $3 + 8 | 0) | $12 & 4)) {
     SAFE_HEAP_STORE_i64_8_4($10, 11988, SAFE_HEAP_LOAD_i64_8_4($3, 96), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4($10 + 11996 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3 + 104 | 0, 0), i64toi32_i32$HIGH_BITS);
     ImGui__OpenPopup_28char_20const__2c_20int_29(6273, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($10 + 7252 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($3, 204, Math_fround(SAFE_HEAP_LOAD_f32_4_4($10 + 7264 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($10 + 5496 | 0, 0)));
     SAFE_HEAP_STORE_f32_4_4($3, 200, Math_fround($8 + Math_fround(-1.0)));
     SAFE_HEAP_STORE_i64_8_4($3, 80, 0, 0);
     ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($3 + 200 | 0, 0, $3 + 80 | 0);
    }
    if (!($12 & 8)) {
     ImGui__OpenPopupOnItemClick_28char_20const__2c_20int_29(1958, 1)
    }
    label$51 : {
     if (!ImGui__BeginPopup_28char_20const__2c_20int_29(6273, 0)) {
      $4 = 0;
      break label$51;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($10, 7080);
     label$53 : {
      if (($0 | 0) == ($23 | 0)) {
       break label$53
      }
      ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $23, 0);
      $11 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
      SAFE_HEAP_STORE_i32_1_1($11, 140, 1);
      if (SAFE_HEAP_LOAD_i32_1_U_1($11, 143)) {
       break label$53
      }
      SAFE_HEAP_STORE_i64_8_4($3, 200, 0, 0);
      ImGui__ItemSize_28ImVec2_20const__2c_20float_29($3 + 200 | 0, Math_fround(-1.0));
     }
     ImGui__SetNextItemWidth_28float_29(Math_fround($24 * Math_fround(12.0)));
     $2 = ImGui__ColorPicker4_28char_20const__2c_20float__2c_20int_2c_20float_20const__29(6271, $1, $2 & 529072130 | 7602304, $10 + 11988 | 0);
     ImGui__EndPopup_28_29();
     $5 = $2 | $5;
    }
   }
   if (!($12 & 128 | ($0 | 0) == ($23 | 0))) {
    if (!$21) {
     $20 = Math_fround($25 + SAFE_HEAP_LOAD_f32_4_4($10 + 5500 | 0, 0))
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($18, 208, Math_fround($13 + $20));
    SAFE_HEAP_STORE_f32_4_4($18 + 212 | 0, 0, Math_fround($17 + $8));
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $23, 0);
   }
   $0 = $4;
   label$56 : {
    if (!($5 & !$4)) {
     break label$56
    }
    if (!$6) {
     $4 = 0;
     while (1) {
      $2 = $4 << 2;
      SAFE_HEAP_STORE_f32_4_4($2 + ($3 + 176 | 0) | 0, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_i32_4_4($2 + ($3 + 160 | 0) | 0, 0) | 0) / Math_fround(255.0)));
      $4 = $4 + 1 | 0;
      if (($4 | 0) != 4) {
       continue
      }
      break;
     };
    }
    $4 = $3 + 176 | 0;
    $2 = $4 | 8;
    $4 = $4 | 4;
    if (($7 & 136314880) == 136314880) {
     $20 = SAFE_HEAP_LOAD_f32_4_4($3, 176);
     SAFE_HEAP_STORE_f32_4_4($10, 11976, $20);
     $8 = SAFE_HEAP_LOAD_f32_4_4($3, 180);
     SAFE_HEAP_STORE_f32_4_4($10, 11980, $8);
     ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($20, $8, SAFE_HEAP_LOAD_f32_4_4($3, 184), $3 + 176 | 0, $4, $2);
     SAFE_HEAP_STORE_i32_4_4($3, 108, 0);
     SAFE_HEAP_STORE_f32_4_4($3, 104, SAFE_HEAP_LOAD_f32_4_4($3, 184));
     SAFE_HEAP_STORE_i64_8_4($3, 96, SAFE_HEAP_LOAD_i64_8_8($3, 176), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i32_4_4($10, 11984, ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($3 + 96 | 0));
    }
    if (($27 | 0) == 269484032) {
     ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29(SAFE_HEAP_LOAD_f32_4_4($3, 176), SAFE_HEAP_LOAD_f32_4_4($3, 180), SAFE_HEAP_LOAD_f32_4_4($3, 184), $3 + 176 | 0, $4, $2)
    }
    SAFE_HEAP_STORE_f32_4_4($1, 0, SAFE_HEAP_LOAD_f32_4_4($3, 176));
    SAFE_HEAP_STORE_f32_4_4($1, 4, SAFE_HEAP_LOAD_f32_4_4($3, 180));
    SAFE_HEAP_STORE_f32_4_4($1, 8, SAFE_HEAP_LOAD_f32_4_4($3, 184));
    if ($16) {
     break label$56
    }
    SAFE_HEAP_STORE_f32_4_4($1, 12, SAFE_HEAP_LOAD_f32_4_4($3, 188));
   }
   ImGui__PopID_28_29();
   ImGui__EndGroup_28_29();
   label$61 : {
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($10 + 7248 | 0, 0) & 1)) {
     $4 = $5;
     break label$61;
    }
    if ($12 & 512) {
     $4 = $5;
     break label$61;
    }
    if (!ImGui__BeginDragDropTarget_28_29()) {
     $4 = $5;
     break label$61;
    }
    $4 = $5;
    $2 = ImGui__AcceptDragDropPayload_28char_20const__2c_20int_29(14967, 0);
    if ($2) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     SAFE_HEAP_STORE_i64_8_1($1, SAFE_HEAP_LOAD_i64_8_1($4), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i32_4_1($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_1($4 + 8 | 0, 0));
     $4 = 1;
    }
    $5 = ImGui__AcceptDragDropPayload_28char_20const__2c_20int_29(14960, 0);
    if ($5) {
     __memcpy($1, SAFE_HEAP_LOAD_i32_4_4($5, 0), $19 << 2);
     $4 = 1;
     $2 = 1;
    } else {
     $2 = ($2 | 0) != 0
    }
    if (!(!$2 | !($7 & 268435456))) {
     ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29(SAFE_HEAP_LOAD_f32_4_4($1, 0), SAFE_HEAP_LOAD_f32_4_4($1, 4), SAFE_HEAP_LOAD_f32_4_4($1, 8), $1, $1 + 4 | 0, $1 + 8 | 0)
    }
    ImGui__EndDragDropTarget_28_29();
   }
   label$69 : {
    if (!$0) {
     break label$69
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($10, 7136);
    if (!$1) {
     break label$69
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($10, 7184) | 0) != ($0 | 0)) {
     break label$69
    }
    SAFE_HEAP_STORE_i32_4_4($10, 7240, $1);
   }
   if ($4) {
    ImGui__MarkItemEdited_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($10, 7240))
   }
  }
  __stack_pointer = $3 + 208 | 0;
  return $4;
 }
 
 function ImGui__ColorButton_28char_20const__2c_20ImVec4_20const__2c_20int_2c_20ImVec2_29($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = Math_fround(0);
  $4 = __stack_pointer - 240 | 0;
  __stack_pointer = $4;
  $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($11, 7080);
  SAFE_HEAP_STORE_i32_1_1($6, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
   $14 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($6, $0);
   $5 = ImGui__GetFrameHeight_28_29();
   if (SAFE_HEAP_LOAD_f32_4_4($3, 0) == Math_fround(0.0)) {
    SAFE_HEAP_STORE_f32_4_4($3, 0, $5)
   }
   if (SAFE_HEAP_LOAD_f32_4_4($3, 4) == Math_fround(0.0)) {
    SAFE_HEAP_STORE_f32_4_4($3, 4, $5)
   }
   $7 = SAFE_HEAP_LOAD_i64_8_4($6, 208);
   $9 = i64toi32_i32$HIGH_BITS;
   $8 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
   $13 = SAFE_HEAP_LOAD_f32_4_4($6, 208);
   $15 = SAFE_HEAP_LOAD_f32_4_4($6 + 212 | 0, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
   SAFE_HEAP_STORE_f32_4_4($4 + 236 | 0, 0, Math_fround($15 + $10));
   SAFE_HEAP_STORE_f32_4_4($4, 232, Math_fround($13 + $8));
   SAFE_HEAP_STORE_i64_8_8($4, 224, $7, $9);
   $7 = $4 + 224 | 0;
   if ($5 <= $10) {
    $5 = SAFE_HEAP_LOAD_f32_4_4($11 + 5480 | 0, 0)
   } else {
    $5 = Math_fround(0.0)
   }
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($7, $5);
   $3 = 0;
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($7, $14, 0, 0)) {
    $3 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($4 + 224 | 0, $14, $4 + 223 | 0, $4 + 222 | 0, 0);
    $9 = $4 + 208 | 0;
    SAFE_HEAP_STORE_i64_8_8($9, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 200, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
    $7 = $2 & 2 ? $2 & -393217 : $2;
    if ($7 & 268435456) {
     $2 = $4 + 200 | 0;
     ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29(SAFE_HEAP_LOAD_f32_4_4($4, 200), SAFE_HEAP_LOAD_f32_4_4($4, 204), SAFE_HEAP_LOAD_f32_4_4($4, 208), $2, $2 | 4, $9);
    }
    SAFE_HEAP_STORE_i32_4_4($4, 196, 1065353216);
    SAFE_HEAP_STORE_f32_4_4($4, 192, SAFE_HEAP_LOAD_f32_4_4($4, 208));
    SAFE_HEAP_STORE_i64_8_4($4, 184, SAFE_HEAP_LOAD_i64_8_8($4, 200), i64toi32_i32$HIGH_BITS);
    $5 = SAFE_HEAP_LOAD_f32_4_4($11 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($4 + 176 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($4 + 232 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 168, SAFE_HEAP_LOAD_i64_8_8($4, 224), i64toi32_i32$HIGH_BITS);
    $10 = Math_fround(($8 < $10 ? $8 : $10) / Math_fround(2.990000009536743));
    $13 = Math_fround($10 * Math_fround(.5));
    $2 = $13 > $5;
    $8 = Math_fround(0.0);
    $9 = $7 & 1024;
    if (!$9) {
     $12 = $4 + 180 | 0;
     SAFE_HEAP_STORE_f32_4_4($12, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($12, 0) + Math_fround(-.75)));
     SAFE_HEAP_STORE_f32_4_4($4, 168, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 168) + Math_fround(.75)));
     SAFE_HEAP_STORE_f32_4_4($4, 172, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 172) + Math_fround(.75)));
     SAFE_HEAP_STORE_f32_4_4($4, 176, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 176) + Math_fround(-.75)));
     $8 = Math_fround(-.75);
    }
    $5 = $2 ? $5 : $13;
    label$8 : {
     label$9 : {
      if (!($7 & 262144)) {
       break label$9
      }
      if (!(SAFE_HEAP_LOAD_f32_4_4($4, 212) < Math_fround(1.0))) {
       break label$9
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($6, 580);
      SAFE_HEAP_STORE_f32_4_4($4, 164, SAFE_HEAP_LOAD_f32_4_4($4, 172));
      $13 = SAFE_HEAP_LOAD_f32_4_4($4, 168);
      SAFE_HEAP_STORE_f32_4_4($4, 160, Math_fround($10 + $13));
      SAFE_HEAP_STORE_i64_8_8($4, 152, SAFE_HEAP_LOAD_i64_8_8($4, 176), i64toi32_i32$HIGH_BITS);
      $15 = SAFE_HEAP_LOAD_f32_4_4($4, 176);
      $12 = ImGui__GetColorU32_28ImVec4_20const__29($4 + 200 | 0);
      SAFE_HEAP_STORE_f32_4_4($4, 148, $8);
      SAFE_HEAP_STORE_f32_4_4($4, 144, Math_fround($8 - $10));
      SAFE_HEAP_STORE_i64_8_8($4, 48, SAFE_HEAP_LOAD_i64_8_4($4, 160), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($4, 40, SAFE_HEAP_LOAD_i64_8_8($4, 152), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($4, 32, SAFE_HEAP_LOAD_i64_8_4($4, 144), i64toi32_i32$HIGH_BITS);
      ImGui__RenderColorRectWithAlphaCheckerboard_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20float_2c_20ImVec2_2c_20float_2c_20int_29($2, $4 + 48 | 0, $4 + 40 | 0, $12, $10, $4 + 32 | 0, $5, 160);
      $2 = SAFE_HEAP_LOAD_i32_4_4($6, 580);
      SAFE_HEAP_STORE_f32_4_4($4, 132, SAFE_HEAP_LOAD_f32_4_4($4 + 180 | 0, 0));
      $8 = Math_fround(Math_fround(Math_fround($13 + $15) * Math_fround(.5)) + Math_fround(.5));
      label$10 : {
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        $12 = ~~$8;
        break label$10;
       }
       $12 = -2147483648;
      }
      SAFE_HEAP_STORE_f32_4_4($4, 128, Math_fround($12 | 0));
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($2, $4 + 168 | 0, $4 + 128 | 0, ImGui__GetColorU32_28ImVec4_20const__29($4 + 184 | 0), $5, 80);
      break label$8;
     }
     $2 = $7 & 131072 ? $4 + 200 | 0 : $4 + 184 | 0;
     SAFE_HEAP_STORE_i64_8_8($4 + 136 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_8($4, 128, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
     $2 = SAFE_HEAP_LOAD_i32_4_4($6, 580);
     if (SAFE_HEAP_LOAD_f32_4_4($4, 140) < Math_fround(1.0)) {
      SAFE_HEAP_STORE_i64_8_8($4, 120, SAFE_HEAP_LOAD_i64_8_8($4, 168), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($4, 112, SAFE_HEAP_LOAD_i64_8_8($4, 176), i64toi32_i32$HIGH_BITS);
      $12 = ImGui__GetColorU32_28ImVec4_20const__29($4 + 128 | 0);
      SAFE_HEAP_STORE_f32_4_4($4, 108, $8);
      SAFE_HEAP_STORE_f32_4_4($4, 104, $8);
      SAFE_HEAP_STORE_i64_8_8($4, 72, SAFE_HEAP_LOAD_i64_8_8($4, 120), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($4, 64, SAFE_HEAP_LOAD_i64_8_8($4, 112), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($4, 56, SAFE_HEAP_LOAD_i64_8_4($4, 104), i64toi32_i32$HIGH_BITS);
      ImGui__RenderColorRectWithAlphaCheckerboard_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20float_2c_20ImVec2_2c_20float_2c_20int_29($2, $4 + 72 | 0, $4 - -64 | 0, $12, $10, $4 + 56 | 0, $5, 0);
      break label$8;
     }
     $12 = $2;
     $2 = $4 + 168 | 0;
     ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($12, $2, $2 + 8 | 0, ImGui__GetColorU32_28ImVec4_20const__29($4 + 128 | 0), $5, 0);
    }
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($4 + 224 | 0, $14, 1);
    label$13 : {
     if ($9) {
      break label$13
     }
     if (SAFE_HEAP_LOAD_f32_4_4($11 + 5488 | 0, 0) > Math_fround(0.0)) {
      $2 = SAFE_HEAP_LOAD_i64_8_8($4, 224);
      $6 = i64toi32_i32$HIGH_BITS;
      SAFE_HEAP_STORE_i64_8_8($4, 96, $2, $6);
      $9 = SAFE_HEAP_LOAD_i64_8_8($4, 232);
      $12 = i64toi32_i32$HIGH_BITS;
      SAFE_HEAP_STORE_i64_8_8($4, 88, $9, $12);
      SAFE_HEAP_STORE_i64_8_8($4, 24, $2, $6);
      SAFE_HEAP_STORE_i64_8_8($4, 16, $9, $12);
      ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($4 + 24 | 0, $4 + 16 | 0, $5);
      break label$13;
     }
     ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($6, 580), $4 + 224 | 0, $4 + 232 | 0, ImGui__GetColorU32_28int_2c_20float_29(7, Math_fround(1.0)), $5, 0, Math_fround(1.0));
    }
    label$15 : {
     if ($7 & 512) {
      break label$15
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($11, 7136) | 0) != ($14 | 0)) {
      break label$15
     }
     if (!ImGui__BeginDragDropSource_28int_29(0)) {
      break label$15
     }
     label$16 : {
      if ($7 & 2) {
       ImGui__SetDragDropPayload_28char_20const__2c_20void_20const__2c_20unsigned_20long_2c_20int_29(14967, $4 + 200 | 0, 12, 2);
       break label$16;
      }
      ImGui__SetDragDropPayload_28char_20const__2c_20void_20const__2c_20unsigned_20long_2c_20int_29(14960, $4 + 200 | 0, 16, 2);
     }
     SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($4, 80, 0, 0);
     ImGui__ColorButton_28char_20const__2c_20ImVec4_20const__2c_20int_2c_20ImVec2_29($0, $1, $7, $4 + 8 | 0);
     ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), Math_fround(-1.0));
     ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29(6176, 0, 0);
     ImGui__EndDragDropSource_28_29();
    }
    label$18 : {
     if ($7 & 64) {
      break label$18
     }
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 223) & 255)) {
      break label$18
     }
     $6 = 0;
     $2 = __stack_pointer - 208 | 0;
     __stack_pointer = $2;
     $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     ImGui__BeginTooltipEx_28int_2c_20int_29(1);
     $7 = $7 & 403046402;
     if ($0) {
      $6 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0)
     }
     label$2 : {
      if ($0 >>> 0 >= $6 >>> 0) {
       break label$2
      }
      ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $6, 0);
      $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
      if (SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
       break label$2
      }
      ImGui__SeparatorEx_28int_29(SAFE_HEAP_LOAD_i32_4_4($0 + 376 | 0, 0) ? 5 : 6);
     }
     $5 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
     $13 = Math_fround(1.0);
     $14 = $7 & 2;
     if (!$14) {
      $13 = SAFE_HEAP_LOAD_f32_4_4($1, 12)
     }
     $19 = SAFE_HEAP_LOAD_f32_4_4($11, 6468);
     $15 = SAFE_HEAP_LOAD_f32_4_4($11 + 5480 | 0, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
     $10 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     SAFE_HEAP_STORE_f32_4_4($2, 204, $13);
     SAFE_HEAP_STORE_f32_4_4($2, 200, $5);
     $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
     label$4 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $0 = ~~$5;
       break label$4;
      }
      $0 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($2, 196, $8);
     $5 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$6 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $6 = ~~$5;
       break label$6;
      }
      $6 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($2, 192, $10);
     $5 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : $10 > Math_fround(1.0) ? Math_fround(1.0) : $10) * Math_fround(255.0)) + Math_fround(.5));
     label$80 : {
      if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
       $11 = ~~$5;
       break label$80;
      }
      $11 = -2147483648;
     }
     $9 = 255;
     if (!$14) {
      $5 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
      $5 = Math_fround(Math_fround(($5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5) * Math_fround(255.0)) + Math_fround(.5));
      label$11 : {
       if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
        $9 = ~~$5;
        break label$11;
       }
       $9 = -2147483648;
      }
     }
     $5 = Math_fround(Math_fround($19 * Math_fround(3.0)) + Math_fround($15 + $15));
     SAFE_HEAP_STORE_f32_4_4($2, 188, $5);
     SAFE_HEAP_STORE_f32_4_4($2, 184, $5);
     SAFE_HEAP_STORE_i64_8_8($2, 176, SAFE_HEAP_LOAD_i64_8_8($2, 184), i64toi32_i32$HIGH_BITS);
     ImGui__ColorButton_28char_20const__2c_20ImVec4_20const__2c_20int_2c_20ImVec2_29(1849, $2 + 192 | 0, $7 & 403046402 | 64, $2 + 176 | 0);
     ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), Math_fround(-1.0));
     label$131 : {
      if ($7 & 402653184 ? $7 & 134217728 : 1) {
       $16 = +SAFE_HEAP_LOAD_f32_4_4($1, 8);
       $17 = +SAFE_HEAP_LOAD_f32_4_4($1, 4);
       $18 = +SAFE_HEAP_LOAD_f32_4_4($1, 0);
       if ($14) {
        SAFE_HEAP_STORE_f64_8_8($2 + 104 | 0, 0, $16);
        SAFE_HEAP_STORE_f64_8_8($2 + 96 | 0, 0, $17);
        SAFE_HEAP_STORE_f64_8_8($2 + 88 | 0, 0, $18);
        SAFE_HEAP_STORE_i32_4_4($2 + 84 | 0, 0, $0);
        SAFE_HEAP_STORE_i32_4_4($2 + 80 | 0, 0, $6);
        SAFE_HEAP_STORE_i32_4_4($2, 76, $11);
        SAFE_HEAP_STORE_i32_4_4($2, 72, $0);
        SAFE_HEAP_STORE_i32_4_4($2, 68, $6);
        SAFE_HEAP_STORE_i32_4_4($2, 64, $11);
        ImGui__Text_28char_20const__2c_20____29(18038, $2 - -64 | 0);
        break label$131;
       }
       $5 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
       SAFE_HEAP_STORE_f64_8_8($2 + 48 | 0, 0, $16);
       SAFE_HEAP_STORE_f64_8_8($2 + 40 | 0, 0, $17);
       SAFE_HEAP_STORE_f64_8_8($2 + 32 | 0, 0, $18);
       SAFE_HEAP_STORE_i32_4_4($2 + 28 | 0, 0, $9);
       SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, $0);
       SAFE_HEAP_STORE_i32_4_4($2 + 20 | 0, 0, $6);
       SAFE_HEAP_STORE_i32_4_4($2 + 16 | 0, 0, $11);
       SAFE_HEAP_STORE_f64_8_8($2 + 56 | 0, 0, +$5);
       SAFE_HEAP_STORE_i32_4_4($2, 12, $9);
       SAFE_HEAP_STORE_i32_4_4($2, 8, $0);
       SAFE_HEAP_STORE_i32_4_4($2, 4, $6);
       SAFE_HEAP_STORE_i32_4_4($2, 0, $11);
       ImGui__Text_28char_20const__2c_20____29(18091, $2);
       break label$131;
      }
      if (!($7 & 268435456)) {
       break label$131
      }
      $16 = +SAFE_HEAP_LOAD_f32_4_4($1, 8);
      $17 = +SAFE_HEAP_LOAD_f32_4_4($1, 4);
      $18 = +SAFE_HEAP_LOAD_f32_4_4($1, 0);
      if ($14) {
       SAFE_HEAP_STORE_f64_8_8($2 + 160 | 0, 0, $16);
       SAFE_HEAP_STORE_f64_8_8($2, 152, $17);
       SAFE_HEAP_STORE_f64_8_8($2, 144, $18);
       ImGui__Text_28char_20const__2c_20____29(9709, $2 + 144 | 0);
       break label$131;
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
      SAFE_HEAP_STORE_f64_8_8($2 + 128 | 0, 0, $16);
      SAFE_HEAP_STORE_f64_8_8($2 + 136 | 0, 0, +$5);
      SAFE_HEAP_STORE_f64_8_8($2, 120, $17);
      SAFE_HEAP_STORE_f64_8_8($2, 112, $18);
      ImGui__Text_28char_20const__2c_20____29(9735, $2 + 112 | 0);
     }
     ImGui__End_28_29();
     __stack_pointer = $2 + 208 | 0;
    }
   }
   $7 = $3;
  }
  __stack_pointer = $4 + 240 | 0;
  return $7;
 }
 
 function ImGui__ColorPicker4_28char_20const__2c_20float__2c_20int_2c_20float_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = Math_fround(0), $22 = Math_fround(0), $23 = 0, $24 = Math_fround(0), $25 = 0, $26 = Math_fround(0), $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = Math_fround(0), $32 = 0, $33 = Math_fround(0), $34 = 0, $35 = 0, $36 = Math_fround(0), $37 = Math_fround(0), $38 = Math_fround(0), $39 = Math_fround(0), $40 = 0, $41 = 0, $42 = Math_fround(0), $43 = Math_fround(0), $44 = 0, $45 = 0;
  $4 = __stack_pointer - 576 | 0;
  __stack_pointer = $4;
  $20 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $27 = SAFE_HEAP_LOAD_i32_4_4($20, 7080);
  SAFE_HEAP_STORE_i32_1_1($27, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($27, 143)) {
   $9 = SAFE_HEAP_LOAD_i32_4_4($27, 580);
   $11 = ImGui__CalcItemWidth_28_29();
   SAFE_HEAP_STORE_i32_4_4($20, 7220, 0);
   ImGui__PushID_28char_20const__29($0);
   $12 = ($2 ^ -1) >>> 4 & 16 | $2;
   ImGui__BeginGroup_28_29();
   if (!($2 & 8)) {
    $18 = __stack_pointer - 32 | 0;
    __stack_pointer = $18;
    $23 = $12 & 100663296;
    $34 = $12 & 65538;
    label$1 : {
     if ($34 ? $23 : 0) {
      break label$1
     }
     if (!ImGui__BeginPopup_28char_20const__2c_20int_29(1958, 0)) {
      break label$1
     }
     $25 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$23) {
      $32 = $12 & 2;
      $5 = SAFE_HEAP_LOAD_f32_4_4($25, 6468);
      $15 = ImGui__GetFrameHeight_28_29();
      $26 = SAFE_HEAP_LOAD_f32_4_4($25 + 5500 | 0, 0);
      $5 = Math_fround($5 * Math_fround(8.0));
      SAFE_HEAP_STORE_f32_4_4($18, 24, $5);
      $15 = Math_fround($5 - Math_fround($15 + $26));
      SAFE_HEAP_STORE_f32_4_4($18, 28, $15 >= Math_fround(1.0) ? $15 : Math_fround(1.0));
      ImGui__PushItemWidth_28float_29($5);
      while (1) {
       $8 = $16;
       label$5 : {
        if (($8 | 0) != 1) {
         break label$5
        }
        $16 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
        if (SAFE_HEAP_LOAD_i32_1_U_1($16, 143)) {
         break label$5
        }
        ImGui__SeparatorEx_28int_29(SAFE_HEAP_LOAD_i32_4_4($16 + 376 | 0, 0) ? 5 : 6);
       }
       ImGui__PushID_28int_29($8);
       $16 = ($8 ? 424 : 33554856) | $32;
       $16 = ($8 | 0) == 1 ? $16 | 67108864 : $16;
       ImGui__GetCursorScreenPos_28_29($18 + 16 | 0);
       if (ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(11380, 0, 0, $18 + 24 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($25, 11972, SAFE_HEAP_LOAD_i32_4_4($25, 11972) & -100663297 | $16 & 100663296)
       }
       ImGui__SetCursorScreenPos_28ImVec2_20const__29($18 + 16 | 0);
       $35 = $16 & 2;
       $28 = $35 ? 12 : 16;
       memset($28 + $18 | 0, 0, $35 << 1);
       ImGui__ColorPicker4_28char_20const__2c_20float__2c_20int_2c_20float_20const__29(6251, __memcpy($18, $1, $28), $16, 0);
       ImGui__PopID_28_29();
       $16 = $8 + 1 | 0;
       if (!$8) {
        continue
       }
       break;
      };
      ImGui__PopItemWidth_28_29();
     }
     label$7 : {
      if ($34) {
       break label$7
      }
      label$8 : {
       if ($23) {
        break label$8
       }
       $8 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
       if (SAFE_HEAP_LOAD_i32_1_U_1($8, 143)) {
        break label$8
       }
       ImGui__SeparatorEx_28int_29(SAFE_HEAP_LOAD_i32_4_4($8 + 376 | 0, 0) ? 5 : 6);
      }
      SAFE_HEAP_STORE_i32_1_1($18, 0, SAFE_HEAP_LOAD_i32_1_U_1($25 + 11974 | 0, 0) & 1);
      if (!ImGui__Checkbox_28char_20const__2c_20bool__29(6687, $18)) {
       break label$7
      }
      SAFE_HEAP_STORE_i32_4_4($25, 11972, SAFE_HEAP_LOAD_i32_4_4($25, 11972) & -65537 | SAFE_HEAP_LOAD_i32_1_U_1($18, 0) << 16);
     }
     ImGui__EndPopup_28_29();
    }
    __stack_pointer = $18 + 32 | 0;
   }
   if ($2 & 100663296) {
    $2 = $12
   } else {
    $2 = SAFE_HEAP_LOAD_i32_4_4($20, 11972) & 100663296;
    $2 = $12 | ($2 ? $2 : 33554432);
   }
   if (!($2 & 402653184)) {
    $12 = SAFE_HEAP_LOAD_i32_4_4($20, 11972) & 402653184;
    $2 = $2 | ($12 ? $12 : 134217728);
   }
   if (!($2 & 8)) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($20, 11972) & 65536 | $2
   }
   SAFE_HEAP_STORE_i64_8_8($4, 504, SAFE_HEAP_LOAD_i64_8_4($27, 208), i64toi32_i32$HIGH_BITS);
   $26 = ImGui__GetFrameHeight_28_29();
   $33 = SAFE_HEAP_LOAD_f32_4_4($20 + 5500 | 0, 0);
   $17 = SAFE_HEAP_LOAD_f32_4_4($4, 504);
   $16 = $2;
   $27 = $2 & 2;
   $35 = $27 ? 12 : 16;
   __memcpy($4 + 480 | 0, $1, $35);
   $34 = $2 & 65538;
   $5 = Math_fround($11 - Math_fround(Math_fround((($34 | 0) == 65536 ? 2 : 1) | 0) * Math_fround($26 + $33)));
   $15 = $5 <= $26 ? $26 : $5;
   $6 = Math_fround($15 * Math_fround(.5));
   SAFE_HEAP_STORE_f32_4_4($4, 476, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($4, 508)));
   SAFE_HEAP_STORE_f32_4_4($4, 472, Math_fround($17 + Math_fround(Math_fround($26 + $15) * Math_fround(.5))));
   SAFE_HEAP_STORE_i32_4_4($4, 468, 0);
   $43 = Math_fround($15 * Math_fround(.07999999821186066));
   $10 = Math_fround($6 - $43);
   $5 = Math_fround($15 * Math_fround(.027000000700354576));
   label$9 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $2 = ~~$5;
     break label$9;
    }
    $2 = -2147483648;
   }
   $5 = Math_fround($10 - Math_fround($2 | 0));
   SAFE_HEAP_STORE_f32_4_4($4, 464, $5);
   SAFE_HEAP_STORE_f32_4_4($4, 460, Math_fround($5 * Math_fround(-.8660249710083008)));
   $11 = Math_fround($5 * Math_fround(-.5));
   SAFE_HEAP_STORE_f32_4_4($4, 456, $11);
   SAFE_HEAP_STORE_f32_4_4($4, 452, Math_fround($5 * Math_fround(.8660249710083008)));
   SAFE_HEAP_STORE_f32_4_4($4, 448, $11);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   SAFE_HEAP_STORE_f32_4_4($4, 444, $5);
   $11 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
   SAFE_HEAP_STORE_f32_4_4($4, 440, $11);
   $7 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
   SAFE_HEAP_STORE_f32_4_4($4, 436, $7);
   SAFE_HEAP_STORE_f32_4_4($4, 432, $5);
   SAFE_HEAP_STORE_f32_4_4($4, 428, $11);
   SAFE_HEAP_STORE_f32_4_4($4, 424, $7);
   $17 = Math_fround($17 + $15);
   $25 = $16 & 134217728;
   $13 = Math_fround($26 * Math_fround(.20000000298023224));
   label$11 : {
    if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
     $32 = ~~$13;
     break label$11;
    }
    $32 = -2147483648;
   }
   $17 = Math_fround($33 + $17);
   label$13 : {
    if ($25) {
     ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($5, $11, $7, $4 + 444 | 0, $4 + 440 | 0, $4 + 436 | 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $12 = SAFE_HEAP_LOAD_i32_4_4($2, 11984);
     $8 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
     $18 = i64toi32_i32$HIGH_BITS;
     $5 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
     SAFE_HEAP_STORE_i32_4_4($4, 364, 0);
     SAFE_HEAP_STORE_f32_4_4($4, 360, $5);
     SAFE_HEAP_STORE_i64_8_4($4, 352, $8, $18);
     if ((ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($4 + 352 | 0) | 0) != ($12 | 0)) {
      break label$13
     }
     label$15 : {
      if (SAFE_HEAP_LOAD_f32_4_4($4, 440) != Math_fround(0.0)) {
       if (SAFE_HEAP_LOAD_f32_4_4($4, 444) != Math_fround(0.0)) {
        break label$15
       }
       if (SAFE_HEAP_LOAD_f32_4_4($2, 11976) != Math_fround(1.0)) {
        break label$15
       }
      }
      SAFE_HEAP_STORE_f32_4_4($4, 444, SAFE_HEAP_LOAD_f32_4_4($2, 11976));
     }
     if (SAFE_HEAP_LOAD_f32_4_4($4, 436) != Math_fround(0.0)) {
      break label$13
     }
     SAFE_HEAP_STORE_f32_4_4($4, 440, SAFE_HEAP_LOAD_f32_4_4($2, 11980));
     break label$13;
    }
    if (!($16 & 268435456)) {
     break label$13
    }
    ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($5, $11, $7, $4 + 432 | 0, $4 + 428 | 0, $4 + 424 | 0);
   }
   $38 = Math_fround($26 + $17);
   ImGui__PushItemFlag_28int_2c_20bool_29(8, 1);
   $28 = $16 & 67108864;
   label$17 : {
    if ($28) {
     $5 = SAFE_HEAP_LOAD_f32_4_4($20, 5500);
     SAFE_HEAP_STORE_f32_4_4($4, 356, $15);
     SAFE_HEAP_STORE_f32_4_4($4, 352, Math_fround($26 + Math_fround($15 + $5)));
     ImGui__InvisibleButton_28char_20const__2c_20ImVec2_20const__2c_20int_29(1861, $4 + 352 | 0, 0);
     $12 = 0;
     $8 = 0;
     $2 = 0;
     label$20 : {
      if (!ImGui__IsItemActive_28_29()) {
       break label$20
      }
      $11 = SAFE_HEAP_LOAD_f32_4_4($20 + 232 | 0, 0);
      $5 = SAFE_HEAP_LOAD_f32_4_4($4, 476);
      $11 = Math_fround($11 - $5);
      $14 = SAFE_HEAP_LOAD_f32_4_4($20 + 228 | 0, 0);
      $13 = SAFE_HEAP_LOAD_f32_4_4($4, 472);
      $7 = Math_fround($14 - $13);
      $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($20 + 908 | 0, 0) - $13);
      $19 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($20 + 912 | 0, 0) - $5);
      $5 = Math_fround(Math_fround($13 * $13) + Math_fround($19 * $19));
      $14 = Math_fround($10 + Math_fround(-1.0));
      $12 = 0;
      label$21 : {
       if (!($5 >= Math_fround($14 * $14))) {
        break label$21
       }
       $14 = Math_fround($6 + Math_fround(1.0));
       $12 = 0;
       if (!($5 <= Math_fround($14 * $14))) {
        break label$21
       }
       $5 = $11;
       __inlined_func$atan2f : {
        if (!(((wasm2js_scratch_store_f32($5), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 < 2139095041 & ((wasm2js_scratch_store_f32($7), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 <= 2139095040)) {
         $5 = Math_fround($5 + $7);
         break __inlined_func$atan2f;
        }
        $8 = (wasm2js_scratch_store_f32($7), wasm2js_scratch_load_i32(2));
        if (($8 | 0) == 1065353216) {
         $5 = atanf($5);
         break __inlined_func$atan2f;
        }
        $18 = $8 >>> 30 & 2;
        $12 = (wasm2js_scratch_store_f32($5), wasm2js_scratch_load_i32(2));
        $2 = $18 | $12 >>> 31;
        folding_inner0 : {
         label$41 : {
          $12 = $12 & 2147483647;
          label$52 : {
           if (!$12) {
            label$73 : {
             switch ($2 - 2 | 0) {
             case 0:
              $5 = Math_fround(3.1415927410125732);
              break __inlined_func$atan2f;
             case 1:
              break label$73;
             default:
              break label$52;
             };
            }
            $5 = Math_fround(-3.1415927410125732);
            break __inlined_func$atan2f;
           }
           $8 = $8 & 2147483647;
           if (($8 | 0) != 2139095040) {
            if (!$8 | !(($12 | 0) != 2139095040 & $12 >>> 0 <= $8 + 218103808 >>> 0)) {
             break folding_inner0
            }
            label$135 : {
             if ($18) {
              $14 = Math_fround(0.0);
              if ($8 >>> 0 > $12 + 218103808 >>> 0) {
               break label$135
              }
             }
             $14 = atanf(Math_fround(Math_abs(Math_fround($5 / $7))));
            }
            $5 = $14;
            label$156 : {
             switch ($2 | 0) {
             case 1:
              $5 = Math_fround(-$5);
              break __inlined_func$atan2f;
             case 2:
              $5 = Math_fround(Math_fround(3.1415927410125732) - Math_fround($5 + Math_fround(8.742277657347586e-08)));
              break __inlined_func$atan2f;
             case 0:
              break label$52;
             default:
              break label$156;
             };
            }
            $5 = Math_fround(Math_fround($5 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
            break __inlined_func$atan2f;
           }
           if (($12 | 0) == 2139095040) {
            break label$41
           }
           $5 = SAFE_HEAP_LOAD_f32_4_4(($2 << 2) + 56744 | 0, 0);
          }
          break __inlined_func$atan2f;
         }
         $5 = SAFE_HEAP_LOAD_f32_4_4(($2 << 2) + 56728 | 0, 0);
         break __inlined_func$atan2f;
        }
        $5 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($5), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141403), wasm2js_scratch_load_f32());
       }
       $5 = Math_fround(Math_fround($5 / Math_fround(3.1415927410125732)) * Math_fround(.5));
       SAFE_HEAP_STORE_f32_4_4($4, 444, $5 < Math_fround(0.0) ? Math_fround($5 + Math_fround(1.0)) : $5);
       $12 = 1;
      }
      $14 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 444) * Math_fround(-2.0)) * Math_fround(3.1415927410125732));
      $5 = cosf($14);
      $14 = sinf($14);
      SAFE_HEAP_STORE_f32_4_4($4, 356, Math_fround(Math_fround($13 * $14) + Math_fround($19 * $5)));
      SAFE_HEAP_STORE_f32_4_4($4, 352, Math_fround(Math_fround($13 * $5) - Math_fround($14 * $19)));
      if (!ImTriangleContainsPoint_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__29($4 + 464 | 0, $4 + 456 | 0, $4 + 448 | 0, $4 + 352 | 0)) {
       $8 = $12;
       $2 = 0;
       break label$20;
      }
      SAFE_HEAP_STORE_f32_4_4($4, 356, Math_fround(Math_fround($7 * $14) + Math_fround($11 * $5)));
      SAFE_HEAP_STORE_f32_4_4($4, 352, Math_fround(Math_fround($7 * $5) - Math_fround($14 * $11)));
      if (!ImTriangleContainsPoint_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__29($4 + 464 | 0, $4 + 456 | 0, $4 + 448 | 0, $4 + 352 | 0)) {
       $23 = $4 + 400 | 0;
       $2 = $4 + 448 | 0;
       $30 = $4 + 352 | 0;
       $7 = SAFE_HEAP_LOAD_f32_4_4($30, 0);
       $8 = $4 + 464 | 0;
       $14 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
       $18 = $4 + 456 | 0;
       $19 = SAFE_HEAP_LOAD_f32_4_4($18, 0);
       $5 = Math_fround($19 - $14);
       $13 = SAFE_HEAP_LOAD_f32_4_4($30, 4);
       $24 = SAFE_HEAP_LOAD_f32_4_4($8, 4);
       $22 = SAFE_HEAP_LOAD_f32_4_4($18, 4);
       $11 = Math_fround($22 - $24);
       $21 = Math_fround(Math_fround(Math_fround($7 - $14) * $5) + Math_fround(Math_fround($13 - $24) * $11));
       label$12 : {
        if ($21 < Math_fround(0.0)) {
         $5 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
         $36 = SAFE_HEAP_LOAD_f32_4_4($8, 4);
         break label$12;
        }
        $29 = Math_fround(Math_fround($5 * $5) + Math_fround($11 * $11));
        if ($21 > $29) {
         $5 = SAFE_HEAP_LOAD_f32_4_4($18, 0);
         $36 = SAFE_HEAP_LOAD_f32_4_4($18, 4);
         break label$12;
        }
        $5 = Math_fround($14 + Math_fround(Math_fround($5 * $21) / $29));
        $36 = Math_fround($24 + Math_fround(Math_fround($11 * $21) / $29));
       }
       $11 = $5;
       $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
       $21 = Math_fround($5 - $19);
       $29 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
       $31 = Math_fround($29 - $22);
       $37 = Math_fround(Math_fround(Math_fround($7 - $19) * $21) + Math_fround(Math_fround($13 - $22) * $31));
       label$43 : {
        if ($37 < Math_fround(0.0)) {
         $19 = SAFE_HEAP_LOAD_f32_4_4($18, 0);
         $21 = SAFE_HEAP_LOAD_f32_4_4($18, 4);
         break label$43;
        }
        $39 = Math_fround(Math_fround($21 * $21) + Math_fround($31 * $31));
        if ($37 > $39) {
         $19 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
         $21 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
         break label$43;
        }
        $19 = Math_fround($19 + Math_fround(Math_fround($21 * $37) / $39));
        $21 = Math_fround($22 + Math_fround(Math_fround($31 * $37) / $39));
       }
       $14 = Math_fround($14 - $5);
       $24 = Math_fround($24 - $29);
       $22 = Math_fround(Math_fround(Math_fround($7 - $5) * $14) + Math_fround(Math_fround($13 - $29) * $24));
       label$74 : {
        if ($22 < Math_fround(0.0)) {
         $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
         $14 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
         break label$74;
        }
        $31 = Math_fround(Math_fround($14 * $14) + Math_fround($24 * $24));
        if ($22 > $31) {
         $5 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
         $14 = SAFE_HEAP_LOAD_f32_4_4($8, 4);
         break label$74;
        }
        $5 = Math_fround($5 + Math_fround(Math_fround($14 * $22) / $31));
        $14 = Math_fround($29 + Math_fround(Math_fround($24 * $22) / $31));
       }
       $24 = Math_fround($7 - $11);
       $22 = Math_fround($24 * $24);
       $24 = Math_fround($13 - $36);
       $24 = Math_fround($22 + Math_fround($24 * $24));
       $22 = Math_fround($7 - $19);
       $29 = Math_fround($22 * $22);
       $22 = Math_fround($13 - $21);
       $22 = Math_fround($29 + Math_fround($22 * $22));
       $7 = Math_fround($7 - $5);
       $29 = Math_fround($7 * $7);
       $7 = Math_fround($13 - $14);
       $7 = Math_fround($29 + Math_fround($7 * $7));
       $7 = $7 > $22 ? $22 : $7;
       $7 = $7 > $24 ? $24 : $7;
       $2 = $7 == $22;
       $8 = $7 == $24;
       SAFE_HEAP_STORE_f32_4_4($23, 4, $8 ? $36 : $2 ? $21 : $14);
       SAFE_HEAP_STORE_f32_4_4($23, 0, $8 ? $11 : $2 ? $19 : $5);
       SAFE_HEAP_STORE_i64_8_8($4, 352, SAFE_HEAP_LOAD_i64_8_8($4, 400), i64toi32_i32$HIGH_BITS);
      }
      $2 = $4 + 336 | 0;
      $8 = $4 + 352 | 0;
      $11 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
      $18 = $4 + 464 | 0;
      $5 = SAFE_HEAP_LOAD_f32_4_4($18, 0);
      $7 = Math_fround($11 - $5);
      $23 = $4 + 448 | 0;
      $14 = SAFE_HEAP_LOAD_f32_4_4($23, 4);
      $11 = SAFE_HEAP_LOAD_f32_4_4($18, 4);
      $13 = Math_fround($14 - $11);
      $19 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 4) - $11);
      $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($23, 0) - $5);
      $21 = Math_fround(Math_fround($7 * $13) - Math_fround($19 * $14));
      $8 = $4 + 456 | 0;
      $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 0) - $5);
      $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 4) - $11);
      $13 = Math_fround(Math_fround($5 * $13) - Math_fround($11 * $14));
      SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($21 / $13));
      $5 = Math_fround(Math_fround(Math_fround($5 * $19) - Math_fround($11 * $7)) / $13);
      SAFE_HEAP_STORE_f32_4_4($4 + 568 | 0, 0, $5);
      SAFE_HEAP_STORE_f32_4_4($4 + 400 | 0, 0, Math_fround(Math_fround(Math_fround(1.0) - SAFE_HEAP_LOAD_f32_4_4($2, 0)) - $5));
      $5 = Math_fround(Math_fround(1.0) - SAFE_HEAP_LOAD_f32_4_4($4, 336));
      $5 = $5 < Math_fround(9.999999747378752e-05) ? Math_fround(9.999999747378752e-05) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5;
      SAFE_HEAP_STORE_f32_4_4($4, 436, $5);
      $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 400) / $5);
      SAFE_HEAP_STORE_f32_4_4($4, 440, $5 < Math_fround(9.999999747378752e-05) ? Math_fround(9.999999747378752e-05) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5);
      $8 = 1;
      $2 = 1;
     }
     if ($16 & 8) {
      break label$17
     }
     ImGui__OpenPopupOnItemClick_28char_20const__2c_20int_29(1958, 1);
     break label$17;
    }
    $2 = 0;
    $12 = 0;
    $8 = 0;
    if (!($16 & 33554432)) {
     break label$17
    }
    SAFE_HEAP_STORE_f32_4_4($4, 356, $15);
    SAFE_HEAP_STORE_f32_4_4($4, 352, $15);
    ImGui__InvisibleButton_28char_20const__2c_20ImVec2_20const__2c_20int_29(1862, $4 + 352 | 0, 0);
    $2 = ImGui__IsItemActive_28_29();
    label$24 : {
     if (!$2) {
      break label$24
     }
     $11 = Math_fround($15 + Math_fround(-1.0));
     $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($20 + 228 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($4, 504)) / $11);
     SAFE_HEAP_STORE_f32_4_4($4, 440, $5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5);
     $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($20 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($4, 508)) / $11);
     SAFE_HEAP_STORE_f32_4_4($4, 436, $5 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($5 > Math_fround(1.0) ? Math_fround(1.0) : $5)));
     $12 = SAFE_HEAP_LOAD_i32_4_4($20, 11984);
     $8 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
     $18 = i64toi32_i32$HIGH_BITS;
     $5 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
     SAFE_HEAP_STORE_i32_4_4($4, 364, 0);
     SAFE_HEAP_STORE_f32_4_4($4, 360, $5);
     SAFE_HEAP_STORE_i64_8_4($4, 352, $8, $18);
     if ((ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($4 + 352 | 0) | 0) != ($12 | 0)) {
      break label$24
     }
     SAFE_HEAP_STORE_f32_4_4($4, 444, SAFE_HEAP_LOAD_f32_4_4($20, 11976));
    }
    if (!($16 & 8)) {
     ImGui__OpenPopupOnItemClick_28char_20const__2c_20int_29(1958, 1)
    }
    SAFE_HEAP_STORE_f32_4_4($4, 356, SAFE_HEAP_LOAD_f32_4_4($4, 508));
    SAFE_HEAP_STORE_f32_4_4($4, 352, $17);
    $12 = $4 + 352 | 0;
    ImGui__SetCursorScreenPos_28ImVec2_20const__29($12);
    SAFE_HEAP_STORE_f32_4_4($4, 356, $15);
    SAFE_HEAP_STORE_f32_4_4($4, 352, $26);
    ImGui__InvisibleButton_28char_20const__2c_20ImVec2_20const__2c_20int_29(10673, $12, 0);
    if (!ImGui__IsItemActive_28_29()) {
     $12 = 0;
     $8 = $2;
     break label$17;
    }
    $5 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($20 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($4, 508)) / Math_fround($15 + Math_fround(-1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 444, $5 < Math_fround(0.0) ? Math_fround(0.0) : $5 > Math_fround(1.0) ? Math_fround(1.0) : $5);
    $12 = 1;
    $8 = 1;
   }
   $5 = Math_fround($33 + $38);
   label$27 : {
    if (($34 | 0) != 65536) {
     break label$27
    }
    SAFE_HEAP_STORE_f32_4_4($4, 356, SAFE_HEAP_LOAD_f32_4_4($4, 508));
    SAFE_HEAP_STORE_f32_4_4($4, 352, $5);
    $18 = $4 + 352 | 0;
    ImGui__SetCursorScreenPos_28ImVec2_20const__29($18);
    SAFE_HEAP_STORE_f32_4_4($4, 356, $15);
    SAFE_HEAP_STORE_f32_4_4($4, 352, $26);
    ImGui__InvisibleButton_28char_20const__2c_20ImVec2_20const__2c_20int_29(13898, $18, 0);
    if (!ImGui__IsItemActive_28_29()) {
     break label$27
    }
    $11 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($20 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($4, 508)) / Math_fround($15 + Math_fround(-1.0)));
    SAFE_HEAP_STORE_f32_4_4($1, 12, $11 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($11 > Math_fround(1.0) ? Math_fround(1.0) : $11)));
    $8 = 1;
   }
   ImGui__PopItemFlag_28_29();
   $23 = $16 & 256;
   if (!$23) {
    ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($20, 5500));
    ImGui__BeginGroup_28_29();
   }
   $18 = $2;
   $2 = $16 & 128;
   label$30 : {
    if ($2) {
     break label$30
    }
    $30 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($0);
    if (($30 | 0) == ($0 | 0)) {
     break label$30
    }
    if ($23) {
     ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($20, 5500))
    }
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($0, $30, 0);
   }
   label$32 : {
    if ($23) {
     $0 = $8;
     break label$32;
    }
    ImGui__PushItemFlag_28int_2c_20bool_29(16, 1);
    $7 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
    $13 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
    $19 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $11 = Math_fround(1.0);
    if ($27) {
     $14 = Math_fround(1.0)
    } else {
     $14 = SAFE_HEAP_LOAD_f32_4_4($1, 12)
    }
    SAFE_HEAP_STORE_f32_4_4($4, 364, $14);
    SAFE_HEAP_STORE_f32_4_4($4, 360, $7);
    SAFE_HEAP_STORE_f32_4_4($4, 356, $13);
    SAFE_HEAP_STORE_f32_4_4($4, 352, $19);
    if ($2) {
     ImGui__Text_28char_20const__2c_20____29(3061, 0)
    }
    $7 = Math_fround($26 + $26);
    SAFE_HEAP_STORE_f32_4_4($4, 420, $7);
    $13 = Math_fround($26 * Math_fround(3.0));
    SAFE_HEAP_STORE_f32_4_4($4, 416, $13);
    SAFE_HEAP_STORE_i64_8_8($4, 232, SAFE_HEAP_LOAD_i64_8_4($4, 416), i64toi32_i32$HIGH_BITS);
    $0 = $16 & 403570752;
    ImGui__ColorButton_28char_20const__2c_20ImVec4_20const__2c_20int_2c_20ImVec2_29(3040, $4 + 352 | 0, $0, $4 + 232 | 0);
    if ($3) {
     ImGui__Text_28char_20const__2c_20____29(8356, 0);
     $19 = SAFE_HEAP_LOAD_f32_4_4($3, 8);
     $33 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
     $14 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
     if (!$27) {
      $11 = SAFE_HEAP_LOAD_f32_4_4($3, 12)
     }
     SAFE_HEAP_STORE_f32_4_4($4, 396, $7);
     SAFE_HEAP_STORE_f32_4_4($4, 392, $13);
     SAFE_HEAP_STORE_f32_4_4($4, 412, $11);
     SAFE_HEAP_STORE_f32_4_4($4, 408, $19);
     SAFE_HEAP_STORE_f32_4_4($4, 404, $33);
     SAFE_HEAP_STORE_f32_4_4($4, 400, $14);
     SAFE_HEAP_STORE_i64_8_8($4, 224, SAFE_HEAP_LOAD_i64_8_4($4, 392), i64toi32_i32$HIGH_BITS);
     if (ImGui__ColorButton_28char_20const__2c_20ImVec4_20const__2c_20int_2c_20ImVec2_29(8345, $4 + 400 | 0, $0, $4 + 224 | 0)) {
      __memcpy($1, $3, $35);
      $0 = 1;
     } else {
      $0 = $8
     }
    } else {
     $0 = $8
    }
    ImGui__PopItemFlag_28_29();
    ImGui__EndGroup_28_29();
   }
   $3 = $0;
   $8 = $1 + 8 | 0;
   $27 = $1 + 4 | 0;
   label$40 : {
    if (($12 | $18) != 1) {
     break label$40
    }
    if ($25) {
     ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29(SAFE_HEAP_LOAD_f32_4_4($4, 444), SAFE_HEAP_LOAD_f32_4_4($4, 440), SAFE_HEAP_LOAD_f32_4_4($4, 436), $1, $27, $8);
     SAFE_HEAP_STORE_f32_4_4($20, 11976, SAFE_HEAP_LOAD_f32_4_4($4, 444));
     SAFE_HEAP_STORE_f32_4_4($20, 11980, SAFE_HEAP_LOAD_f32_4_4($4, 440));
     $0 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
     $2 = i64toi32_i32$HIGH_BITS;
     $11 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
     SAFE_HEAP_STORE_i32_4_4($4, 364, 0);
     SAFE_HEAP_STORE_f32_4_4($4, 360, $11);
     SAFE_HEAP_STORE_i64_8_4($4, 352, $0, $2);
     SAFE_HEAP_STORE_i32_4_4($20, 11984, ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($4 + 352 | 0));
     break label$40;
    }
    if (!($16 & 268435456)) {
     break label$40
    }
    SAFE_HEAP_STORE_f32_4_4($1, 0, SAFE_HEAP_LOAD_f32_4_4($4, 444));
    SAFE_HEAP_STORE_f32_4_4($1, 4, SAFE_HEAP_LOAD_f32_4_4($4, 440));
    SAFE_HEAP_STORE_f32_4_4($1, 8, SAFE_HEAP_LOAD_f32_4_4($4, 436));
   }
   label$42 : {
    if ($16 & 32) {
     $0 = 0;
     break label$42;
    }
    ImGui__PushItemWidth_28float_29(Math_fround(Math_fround($26 + (($34 | 0) == 65536 ? $5 : $17)) - SAFE_HEAP_LOAD_f32_4_4($4, 504)));
    $2 = $16 & 428736538;
    label$44 : {
     label$45 : {
      $23 = $16 & 7340032;
      if (!($23 ? $16 & 1048576 : 1)) {
       break label$45
      }
      if (!ImGui__ColorEdit4_28char_20const__2c_20float__2c_20int_29(13533, $1, $2 | 1048580)) {
       break label$45
      }
      $3 = 1;
      if (SAFE_HEAP_LOAD_i32_4_4($20, 7136)) {
       $0 = SAFE_HEAP_LOAD_i32_1_U_1($20, 7149)
      } else {
       $0 = 1
      }
      $0 = !$0;
      break label$44;
     }
     $0 = 0;
    }
    if (!$23 | $16 & 2097152) {
     $3 = ImGui__ColorEdit4_28char_20const__2c_20float__2c_20int_29(1859, $1, $2 | 2097156) | $3
    }
    if (!$23 | $16 & 4194304) {
     $3 = ImGui__ColorEdit4_28char_20const__2c_20float__2c_20int_29(1406, $1, $2 | 4194308) | $3
    }
    ImGui__PopItemWidth_28_29();
   }
   label$53 : {
    if (!$25 | !$0) {
     break label$53
    }
    ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29(SAFE_HEAP_LOAD_f32_4_4($1, 0), SAFE_HEAP_LOAD_f32_4_4($1, 4), SAFE_HEAP_LOAD_f32_4_4($1, 8), $4 + 352 | 0, $4 + 400 | 0, $4 + 336 | 0);
    if (!(SAFE_HEAP_LOAD_f32_4_4($4, 352) <= Math_fround(0.0))) {
     break label$53
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($4, 444);
    if (!($11 > Math_fround(0.0))) {
     break label$53
    }
    $14 = $11;
    label$54 : {
     label$55 : {
      $11 = SAFE_HEAP_LOAD_f32_4_4($4, 336);
      if (!($11 <= Math_fround(0.0))) {
       break label$55
      }
      $7 = SAFE_HEAP_LOAD_f32_4_4($4, 436);
      if ($7 == $11) {
       break label$55
      }
      $11 = Math_fround($7 * Math_fround(.5));
      $21 = SAFE_HEAP_LOAD_f32_4_4($4, 440);
      break label$54;
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($4, 400) <= Math_fround(0.0))) {
      break label$53
     }
     $21 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 440) * Math_fround(.5));
    }
    ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($14, $21, $11, $1, $27, $8);
   }
   label$56 : {
    if (!$3) {
     break label$56
    }
    if ($25) {
     $11 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     SAFE_HEAP_STORE_f32_4_4($4, 432, $11);
     $7 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
     SAFE_HEAP_STORE_f32_4_4($4, 428, $7);
     $13 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
     SAFE_HEAP_STORE_f32_4_4($4, 424, $13);
     ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($11, $7, $13, $4 + 444 | 0, $4 + 440 | 0, $4 + 436 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 11984);
     $8 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
     $25 = i64toi32_i32$HIGH_BITS;
     $11 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
     SAFE_HEAP_STORE_i32_4_4($4, 364, 0);
     SAFE_HEAP_STORE_f32_4_4($4, 360, $11);
     SAFE_HEAP_STORE_i64_8_4($4, 352, $8, $25);
     if ((ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($4 + 352 | 0) | 0) != ($2 | 0)) {
      break label$56
     }
     label$58 : {
      if (SAFE_HEAP_LOAD_f32_4_4($4, 440) != Math_fround(0.0)) {
       if (SAFE_HEAP_LOAD_f32_4_4($4, 444) != Math_fround(0.0)) {
        break label$58
       }
       if (SAFE_HEAP_LOAD_f32_4_4($0, 11976) != Math_fround(1.0)) {
        break label$58
       }
      }
      SAFE_HEAP_STORE_f32_4_4($4, 444, SAFE_HEAP_LOAD_f32_4_4($0, 11976));
     }
     if (SAFE_HEAP_LOAD_f32_4_4($4, 436) != Math_fround(0.0)) {
      break label$56
     }
     SAFE_HEAP_STORE_f32_4_4($4, 440, SAFE_HEAP_LOAD_f32_4_4($0, 11980));
     break label$56;
    }
    if (!($16 & 268435456)) {
     break label$56
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    SAFE_HEAP_STORE_f32_4_4($4, 444, $11);
    $7 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
    SAFE_HEAP_STORE_f32_4_4($4, 440, $7);
    $13 = SAFE_HEAP_LOAD_f32_4_4($1, 8);
    SAFE_HEAP_STORE_f32_4_4($4, 436, $13);
    ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($11, $7, $13, $4 + 432 | 0, $4 + 428 | 0, $4 + 424 | 0);
   }
   $11 = Math_fround($32 | 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($20, 5416);
   $13 = Math_fround(Math_fround(($7 < Math_fround(0.0) ? Math_fround(0.0) : $7 > Math_fround(1.0) ? Math_fround(1.0) : $7) * Math_fround(255.0)) + Math_fround(.5));
   label$60 : {
    if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
     $0 = ~~$13;
     break label$60;
    }
    $0 = -2147483648;
   }
   $8 = $0 << 24;
   $0 = $8 | 255;
   SAFE_HEAP_STORE_i32_4_4($4, 376, $0);
   SAFE_HEAP_STORE_i32_4_4($4, 372, $8 | 16711935);
   SAFE_HEAP_STORE_i32_4_4($4, 368, $8 | 16711680);
   SAFE_HEAP_STORE_i32_4_4($4, 364, $8 | 16776960);
   SAFE_HEAP_STORE_i32_4_4($4, 360, $8 | 65280);
   SAFE_HEAP_STORE_i32_4_4($4, 356, $8 | 65535);
   SAFE_HEAP_STORE_i32_4_4($4, 352, $0);
   SAFE_HEAP_STORE_f32_4_4($4, 412, $7);
   SAFE_HEAP_STORE_i32_4_4($4, 408, 1065353216);
   SAFE_HEAP_STORE_i64_8_4($4, 400, 1065353216, 1065353216);
   $0 = $4 + 400 | 0;
   ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29(SAFE_HEAP_LOAD_f32_4_4($4, 444), Math_fround(1.0), Math_fround(1.0), $0, $4 + 404 | 0, $4 + 408 | 0);
   $27 = ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($0);
   SAFE_HEAP_STORE_f32_4_4($4, 348, SAFE_HEAP_LOAD_f32_4_4($20, 5416));
   SAFE_HEAP_STORE_f32_4_4($4, 344, SAFE_HEAP_LOAD_f32_4_4($4, 424));
   SAFE_HEAP_STORE_f32_4_4($4, 340, SAFE_HEAP_LOAD_f32_4_4($4, 428));
   SAFE_HEAP_STORE_f32_4_4($4, 336, SAFE_HEAP_LOAD_f32_4_4($4, 432));
   $23 = ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29($4 + 336 | 0);
   SAFE_HEAP_STORE_i64_8_8($4, 328, 0, 0);
   $32 = $8 | 8421504;
   $25 = $8 | 16777215;
   label$62 : {
    if ($28) {
     $0 = ((Math_fround(Math_abs($6)) < Math_fround(2147483648.0) ? ~~$6 : -2147483648) | 0) / 12 | 0;
     $45 = ($0 | 0) <= 4 ? 4 : $0;
     $17 = Math_fround($6 + $10);
     $19 = Math_fround($17 * Math_fround(.5));
     $33 = Math_fround(Math_fround(.5) / $6);
     $38 = Math_fround(-$33);
     $2 = 0;
     while (1) {
      $28 = SAFE_HEAP_LOAD_i32_4_4($9, 24);
      $7 = Math_fround($2 | 0);
      $6 = Math_fround($7 / Math_fround(6.0));
      $6 = Math_fround(Math_fround(Math_fround($6 + $6) * Math_fround(3.1415927410125732)) + $38);
      $7 = Math_fround(Math_fround($7 + Math_fround(1.0)) / Math_fround(6.0));
      $7 = Math_fround(Math_fround(Math_fround($7 + $7) * Math_fround(3.1415927410125732)) + $33);
      ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($9, $4 + 472 | 0, $19, $6, $7, $45);
      ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($9, SAFE_HEAP_LOAD_i32_4_4($9, 92), SAFE_HEAP_LOAD_i32_4_4($9, 84), $25, 0, $43);
      SAFE_HEAP_STORE_i32_4_4($9, 84, 0);
      $13 = sinf($6);
      $30 = SAFE_HEAP_LOAD_i32_4_4($9, 24);
      $14 = Math_fround($13 * $10);
      $13 = SAFE_HEAP_LOAD_f32_4_4($4, 476);
      SAFE_HEAP_STORE_f32_4_4($4, 324, Math_fround($14 + $13));
      $14 = Math_fround(cosf($6) * $10);
      $6 = SAFE_HEAP_LOAD_f32_4_4($4, 472);
      SAFE_HEAP_STORE_f32_4_4($4, 320, Math_fround($14 + $6));
      SAFE_HEAP_STORE_f32_4_4($4, 316, Math_fround($13 + Math_fround(sinf($7) * $10)));
      SAFE_HEAP_STORE_f32_4_4($4, 312, Math_fround($6 + Math_fround(cosf($7) * $10)));
      SAFE_HEAP_STORE_i64_8_8($4, 216, SAFE_HEAP_LOAD_i64_8_8($4, 320), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_8($4, 208, SAFE_HEAP_LOAD_i64_8_8($4, 312), i64toi32_i32$HIGH_BITS);
      $16 = $4 + 352 | 0;
      $0 = SAFE_HEAP_LOAD_i32_4_4($16 + ($2 << 2) | 0, 0);
      $2 = $2 + 1 | 0;
      $16 = SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + $16 | 0, 0);
      if (($30 | 0) > ($28 | 0)) {
       $44 = SAFE_HEAP_LOAD_i32_4_4($9 + 32 | 0, 0);
       $30 = $44 + Math_imul($30, 20) | 0;
       $40 = $4 + 208 | 0;
       $21 = SAFE_HEAP_LOAD_f32_4_4($40, 0);
       $41 = $4 + 216 | 0;
       $14 = SAFE_HEAP_LOAD_f32_4_4($41, 0);
       $6 = Math_fround($21 - $14);
       $21 = SAFE_HEAP_LOAD_f32_4_4($40, 4);
       $24 = SAFE_HEAP_LOAD_f32_4_4($41, 4);
       $7 = Math_fround($21 - $24);
       $22 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($6 * $6) + Math_fround($7 * $7)));
       $40 = $0 & 255;
       $21 = Math_fround(($16 & 255) - $40 | 0);
       $41 = $0 >>> 16 & 255;
       $29 = Math_fround(($16 >>> 16 & 255) - $41 | 0);
       $0 = $0 >>> 8 & 255;
       $31 = Math_fround(($16 >>> 8 & 255) - $0 | 0);
       $37 = Math_fround($40 | 0);
       $36 = Math_fround($41 | 0);
       $39 = Math_fround($0 | 0);
       $0 = Math_imul($28, 20) + $44 | 0;
       while (1) {
        $13 = Math_fround($22 * Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 0) - $14) * $6) + Math_fround($7 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 4) - $24))));
        $13 = $13 < Math_fround(0.0) ? Math_fround(0.0) : $13 > Math_fround(1.0) ? Math_fround(1.0) : $13;
        $42 = Math_fround(Math_fround($31 * $13) + $39);
        label$3 : {
         if (Math_fround(Math_abs($42)) < Math_fround(2147483648.0)) {
          $16 = ~~$42;
          break label$3;
         }
         $16 = -2147483648;
        }
        $16 = $16 << 8;
        $42 = Math_fround(Math_fround($21 * $13) + $37);
        label$50 : {
         if (Math_fround(Math_abs($42)) < Math_fround(2147483648.0)) {
          $28 = ~~$42;
          break label$50;
         }
         $28 = -2147483648;
        }
        $16 = $16 | ($28 | SAFE_HEAP_LOAD_i32_1_U_1($0 + 19 | 0, 0) << 24);
        $13 = Math_fround(Math_fround($29 * $13) + $36);
        label$71 : {
         if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
          $28 = ~~$13;
          break label$71;
         }
         $28 = -2147483648;
        }
        SAFE_HEAP_STORE_i32_4_4($0, 16, $16 | $28 << 16);
        $0 = $0 + 20 | 0;
        if ($30 >>> 0 > $0 >>> 0) {
         continue
        }
        break;
       };
      }
      if (($2 | 0) != 6) {
       continue
      }
      break;
     };
     $6 = SAFE_HEAP_LOAD_f32_4_4($4, 444);
     $10 = Math_fround(Math_fround($6 + $6) * Math_fround(3.1415927410125732));
     $6 = sinf($10);
     SAFE_HEAP_STORE_f32_4_4($4, 340, Math_fround(Math_fround(Math_fround($17 * $6) * Math_fround(.5)) + SAFE_HEAP_LOAD_f32_4_4($4, 476)));
     $10 = cosf($10);
     SAFE_HEAP_STORE_f32_4_4($4, 336, Math_fround(Math_fround(Math_fround($17 * $10) * Math_fround(.5)) + SAFE_HEAP_LOAD_f32_4_4($4, 472)));
     $17 = Math_fround($43 * ($12 ? Math_fround(.6499999761581421) : Math_fround(.550000011920929)));
     $7 = Math_fround($17 / Math_fround(1.399999976158142));
     label$67 : {
      if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
       $0 = ~~$7;
       break label$67;
      }
      $0 = -2147483648;
     }
     $2 = $4 + 336 | 0;
     $0 = ($0 | 0) >= 32 ? 32 : $0;
     $0 = ($0 | 0) <= 9 ? 9 : $0;
     ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($9, $2, $17, $27, $0);
     ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($9, $2, Math_fround($17 + Math_fround(1.0)), $32, $0, Math_fround(1.0));
     ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($9, $2, $17, $25, $0, Math_fround(1.0));
     $13 = SAFE_HEAP_LOAD_f32_4_4($4, 464);
     $19 = SAFE_HEAP_LOAD_f32_4_4($4, 468);
     $17 = SAFE_HEAP_LOAD_f32_4_4($4, 476);
     SAFE_HEAP_STORE_f32_4_4($4, 572, Math_fround(Math_fround(Math_fround($13 * $6) + Math_fround($10 * $19)) + $17));
     $7 = SAFE_HEAP_LOAD_f32_4_4($4, 472);
     SAFE_HEAP_STORE_f32_4_4($4, 568, Math_fround($7 + Math_fround(Math_fround($13 * $10) - Math_fround($6 * $19))));
     $13 = SAFE_HEAP_LOAD_f32_4_4($4, 456);
     $19 = SAFE_HEAP_LOAD_f32_4_4($4, 460);
     SAFE_HEAP_STORE_f32_4_4($4, 564, Math_fround($17 + Math_fround(Math_fround($13 * $6) + Math_fround($10 * $19))));
     SAFE_HEAP_STORE_f32_4_4($4, 560, Math_fround($7 + Math_fround(Math_fround($13 * $10) - Math_fround($6 * $19))));
     $14 = $17;
     $17 = SAFE_HEAP_LOAD_f32_4_4($4, 448);
     $13 = SAFE_HEAP_LOAD_f32_4_4($4, 452);
     SAFE_HEAP_STORE_f32_4_4($4, 556, Math_fround($14 + Math_fround(Math_fround($17 * $6) + Math_fround($10 * $13))));
     SAFE_HEAP_STORE_f32_4_4($4, 552, Math_fround($7 + Math_fround(Math_fround($17 * $10) - Math_fround($6 * $13))));
     ImGui__GetFontTexUvWhitePixel_28_29($4 + 544 | 0);
     ImDrawList__PrimReserve_28int_2c_20int_29($9, 6, 6);
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 56);
     SAFE_HEAP_STORE_i32_2_2($0, 0, SAFE_HEAP_LOAD_i32_4_4($9, 40));
     SAFE_HEAP_STORE_i32_4_4($9, 56, $0 + 2 | 0);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($9, 52), 0, SAFE_HEAP_LOAD_i64_8_8($4, 568), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($9, 52), 8, SAFE_HEAP_LOAD_i64_8_8($4, 544), i64toi32_i32$HIGH_BITS);
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 52);
     SAFE_HEAP_STORE_i32_4_4($0, 16, $27);
     SAFE_HEAP_STORE_i32_4_4($9, 52, $0 + 20 | 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($9, 40) + 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 40, $2);
     $12 = SAFE_HEAP_LOAD_i32_4_4($9, 56);
     SAFE_HEAP_STORE_i32_2_2($12, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($9, 56, $12 + 2 | 0);
     SAFE_HEAP_STORE_i64_8_4($0, 20, SAFE_HEAP_LOAD_i64_8_8($4, 560), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($9, 52), 8, SAFE_HEAP_LOAD_i64_8_8($4, 544), i64toi32_i32$HIGH_BITS);
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 52);
     SAFE_HEAP_STORE_i32_4_4($0, 16, $27);
     SAFE_HEAP_STORE_i32_4_4($9, 52, $0 + 20 | 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($9, 40) + 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 40, $2);
     $12 = SAFE_HEAP_LOAD_i32_4_4($9, 56);
     SAFE_HEAP_STORE_i32_2_2($12, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($9, 56, $12 + 2 | 0);
     SAFE_HEAP_STORE_i64_8_4($0, 20, SAFE_HEAP_LOAD_i64_8_8($4, 552), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($9, 52), 8, SAFE_HEAP_LOAD_i64_8_8($4, 544), i64toi32_i32$HIGH_BITS);
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 52);
     SAFE_HEAP_STORE_i32_4_4($0, 16, $25);
     SAFE_HEAP_STORE_i32_4_4($9, 52, $0 + 20 | 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($9, 40) + 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 40, $2);
     $12 = SAFE_HEAP_LOAD_i32_4_4($9, 56);
     SAFE_HEAP_STORE_i32_2_2($12, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($9, 56, $12 + 2 | 0);
     SAFE_HEAP_STORE_i64_8_4($0, 20, SAFE_HEAP_LOAD_i64_8_8($4, 568), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($9, 52), 8, SAFE_HEAP_LOAD_i64_8_8($4, 544), i64toi32_i32$HIGH_BITS);
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 52);
     SAFE_HEAP_STORE_i32_4_4($0, 16, 0);
     SAFE_HEAP_STORE_i32_4_4($9, 52, $0 + 20 | 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($9, 40) + 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 40, $2);
     $12 = SAFE_HEAP_LOAD_i32_4_4($9, 56);
     SAFE_HEAP_STORE_i32_2_2($12, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($9, 56, $12 + 2 | 0);
     SAFE_HEAP_STORE_i64_8_4($0, 20, SAFE_HEAP_LOAD_i64_8_8($4, 560), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($9, 52), 8, SAFE_HEAP_LOAD_i64_8_8($4, 544), i64toi32_i32$HIGH_BITS);
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 52);
     SAFE_HEAP_STORE_i32_4_4($0, 16, $8);
     SAFE_HEAP_STORE_i32_4_4($9, 52, $0 + 20 | 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($9, 40) + 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 40, $2);
     $12 = SAFE_HEAP_LOAD_i32_4_4($9, 56);
     SAFE_HEAP_STORE_i32_2_2($12, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($9, 56, $12 + 2 | 0);
     SAFE_HEAP_STORE_i64_8_4($0, 20, SAFE_HEAP_LOAD_i64_8_8($4, 552), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($9, 52), 8, SAFE_HEAP_LOAD_i64_8_8($4, 544), i64toi32_i32$HIGH_BITS);
     $0 = SAFE_HEAP_LOAD_i32_4_4($9, 52);
     SAFE_HEAP_STORE_i32_4_4($0, 16, 0);
     SAFE_HEAP_STORE_i32_4_4($9, 52, $0 + 20 | 0);
     SAFE_HEAP_STORE_i32_4_4($9, 40, SAFE_HEAP_LOAD_i32_4_4($9, 40) + 1 | 0);
     ImDrawList__AddTriangle_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($9, $4 + 568 | 0, $4 + 560 | 0, $4 + 552 | 0, $32, Math_fround(1.5));
     $14 = SAFE_HEAP_LOAD_f32_4_4($4, 564);
     $21 = SAFE_HEAP_LOAD_f32_4_4($4, 572);
     $10 = SAFE_HEAP_LOAD_f32_4_4($4, 556);
     $6 = SAFE_HEAP_LOAD_f32_4_4($4, 440);
     $17 = $6 < Math_fround(0.0) ? Math_fround(0.0) : $6 > Math_fround(1.0) ? Math_fround(1.0) : $6;
     $10 = Math_fround(Math_fround(Math_fround($21 - $10) * $17) + $10);
     $6 = Math_fround(Math_fround(1.0) - SAFE_HEAP_LOAD_f32_4_4($4, 436));
     $6 = $6 < Math_fround(0.0) ? Math_fround(0.0) : $6 > Math_fround(1.0) ? Math_fround(1.0) : $6;
     SAFE_HEAP_STORE_f32_4_4($4, 332, Math_fround(Math_fround(Math_fround($14 - $10) * $6) + $10));
     $14 = SAFE_HEAP_LOAD_f32_4_4($4, 560);
     $21 = SAFE_HEAP_LOAD_f32_4_4($4, 568);
     $10 = SAFE_HEAP_LOAD_f32_4_4($4, 552);
     $10 = Math_fround(Math_fround(Math_fround($21 - $10) * $17) + $10);
     SAFE_HEAP_STORE_f32_4_4($4, 328, Math_fround(Math_fround(Math_fround($14 - $10) * $6) + $10));
     break label$62;
    }
    if (!($16 & 33554432)) {
     break label$62
    }
    SAFE_HEAP_STORE_f32_4_4($4, 340, Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($4, 508)));
    SAFE_HEAP_STORE_f32_4_4($4, 336, Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($4, 504)));
    $0 = $4 + 504 | 0;
    $2 = $4 + 336 | 0;
    ImDrawList__AddRectFilledMultiColor_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($9, $0, $2, $25, $27, $27, $25);
    SAFE_HEAP_STORE_f32_4_4($4, 340, Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($4, 508)));
    SAFE_HEAP_STORE_f32_4_4($4, 336, Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($4, 504)));
    ImDrawList__AddRectFilledMultiColor_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($9, $0, $2, 0, 0, $8, $8);
    SAFE_HEAP_STORE_f32_4_4($4, 300, Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($4, 508)));
    SAFE_HEAP_STORE_f32_4_4($4, 296, Math_fround($15 + SAFE_HEAP_LOAD_f32_4_4($4, 504)));
    $0 = SAFE_HEAP_LOAD_i64_8_8($4, 504);
    $2 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 304, $0, $2);
    SAFE_HEAP_STORE_i64_8_8($4, 200, $0, $2);
    SAFE_HEAP_STORE_i64_8_8($4, 192, SAFE_HEAP_LOAD_i64_8_4($4, 296), i64toi32_i32$HIGH_BITS);
    ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($4 + 200 | 0, $4 + 192 | 0, Math_fround(0.0));
    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 440);
    $10 = Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : $6 > Math_fround(1.0) ? Math_fround(1.0) : $6) * $15);
    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 504);
    $10 = Math_fround(Math_fround($10 + $6) + Math_fround(.5));
    label$69 : {
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
      $0 = ~~$10;
      break label$69;
     }
     $0 = -2147483648;
    }
    $10 = Math_fround($6 + Math_fround(2.0));
    $7 = Math_fround(Math_fround($15 + $6) + Math_fround(-2.0));
    $6 = Math_fround($0 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 328, $6 < $10 ? $10 : $6 > $7 ? $7 : $6);
    $6 = Math_fround(Math_fround(1.0) - SAFE_HEAP_LOAD_f32_4_4($4, 436));
    $10 = Math_fround(($6 < Math_fround(0.0) ? Math_fround(0.0) : $6 > Math_fround(1.0) ? Math_fround(1.0) : $6) * $15);
    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 508);
    $10 = Math_fround(Math_fround($10 + $6) + Math_fround(.5));
    label$712 : {
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
      $0 = ~~$10;
      break label$712;
     }
     $0 = -2147483648;
    }
    $10 = Math_fround($6 + Math_fround(2.0));
    $7 = Math_fround(Math_fround($15 + $6) + Math_fround(-2.0));
    $6 = Math_fround($0 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 332, $6 < $10 ? $10 : $6 > $7 ? $7 : $6);
    $6 = Math_fround($15 / Math_fround(6.0));
    $2 = 0;
    while (1) {
     SAFE_HEAP_STORE_f32_4_4($4, 336, $17);
     $10 = SAFE_HEAP_LOAD_f32_4_4($4, 508);
     SAFE_HEAP_STORE_f32_4_4($4, 340, Math_fround(Math_fround(Math_fround($2 | 0) * $6) + $10));
     $0 = $2 + 1 | 0;
     SAFE_HEAP_STORE_f32_4_4($4, 572, Math_fround($10 + Math_fround(Math_fround($0 | 0) * $6)));
     SAFE_HEAP_STORE_f32_4_4($4, 568, $38);
     $12 = $4 + 352 | 0;
     $2 = SAFE_HEAP_LOAD_i32_4_4($12 + ($2 << 2) | 0, 0);
     $8 = $2;
     $2 = SAFE_HEAP_LOAD_i32_4_4(($0 << 2) + $12 | 0, 0);
     ImDrawList__AddRectFilledMultiColor_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($9, $4 + 336 | 0, $4 + 568 | 0, $8, $8, $2, $2);
     $2 = $0;
     if (($0 | 0) != 6) {
      continue
     }
     break;
    };
    $6 = SAFE_HEAP_LOAD_f32_4_4($4, 508);
    SAFE_HEAP_STORE_f32_4_4($4, 292, $6);
    SAFE_HEAP_STORE_f32_4_4($4, 280, $38);
    SAFE_HEAP_STORE_f32_4_4($4, 284, Math_fround($15 + $6));
    SAFE_HEAP_STORE_f32_4_4($4, 288, $17);
    SAFE_HEAP_STORE_i64_8_8($4, 184, SAFE_HEAP_LOAD_i64_8_4($4, 288), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 176, SAFE_HEAP_LOAD_i64_8_4($4, 280), i64toi32_i32$HIGH_BITS);
    $6 = Math_fround(Math_fround($6 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 444) * $15)) + Math_fround(.5));
    label$745 : {
     if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
      $0 = ~~$6;
      break label$745;
     }
     $0 = -2147483648;
    }
    ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($4 + 184 | 0, $4 + 176 | 0, Math_fround(0.0));
    $10 = SAFE_HEAP_LOAD_f32_4_4($20, 5416);
    $7 = Math_fround($0 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 340, $7);
    $6 = Math_fround($11 + Math_fround(1.0));
    $17 = Math_fround($17 + Math_fround(-1.0));
    $13 = Math_fround($6 + $17);
    SAFE_HEAP_STORE_f32_4_4($4, 336, Math_fround($13 + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 572, $6);
    $19 = Math_fround($6 + Math_fround(2.0));
    SAFE_HEAP_STORE_f32_4_4($4, 568, $19);
    SAFE_HEAP_STORE_i64_8_8($4, 168, SAFE_HEAP_LOAD_i64_8_4($4, 336), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 160, SAFE_HEAP_LOAD_i64_8_4($4, 568), i64toi32_i32$HIGH_BITS);
    $2 = $4 + 168 | 0;
    $8 = $4 + 160 | 0;
    $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : $10 > Math_fround(1.0) ? Math_fround(1.0) : $10) * Math_fround(255.0)) + Math_fround(.5));
    label$76 : {
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
      $0 = ~~$10;
      break label$76;
     }
     $0 = -2147483648;
    }
    $0 = $0 << 24;
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $2, $8, 1, $0);
    SAFE_HEAP_STORE_f32_4_4($4, 564, $7);
    SAFE_HEAP_STORE_f32_4_4($4, 560, $13);
    SAFE_HEAP_STORE_f32_4_4($4, 556, $11);
    SAFE_HEAP_STORE_f32_4_4($4, 552, $6);
    SAFE_HEAP_STORE_i64_8_8($4, 152, SAFE_HEAP_LOAD_i64_8_4($4, 560), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 144, SAFE_HEAP_LOAD_i64_8_8($4, 552), i64toi32_i32$HIGH_BITS);
    $2 = $0 | 16777215;
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $4 + 152 | 0, $4 + 144 | 0, 1, $2);
    SAFE_HEAP_STORE_f32_4_4($4, 548, $7);
    $10 = Math_fround(Math_fround(Math_fround($26 + Math_fround(2.0)) + $17) - $6);
    SAFE_HEAP_STORE_f32_4_4($4, 544, Math_fround($10 + Math_fround(-1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 540, $6);
    SAFE_HEAP_STORE_f32_4_4($4, 536, $19);
    SAFE_HEAP_STORE_i64_8_8($4, 136, SAFE_HEAP_LOAD_i64_8_4($4, 544), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 128, SAFE_HEAP_LOAD_i64_8_4($4, 536), i64toi32_i32$HIGH_BITS);
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $4 + 136 | 0, $4 + 128 | 0, 0, $0);
    SAFE_HEAP_STORE_f32_4_4($4, 532, $7);
    SAFE_HEAP_STORE_f32_4_4($4, 528, $10);
    SAFE_HEAP_STORE_f32_4_4($4, 524, $11);
    SAFE_HEAP_STORE_f32_4_4($4, 520, $6);
    SAFE_HEAP_STORE_i64_8_8($4, 120, SAFE_HEAP_LOAD_i64_8_4($4, 528), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 112, SAFE_HEAP_LOAD_i64_8_8($4, 520), i64toi32_i32$HIGH_BITS);
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $4 + 120 | 0, $4 + 112 | 0, 0, $2);
   }
   $0 = $4 + 328 | 0;
   $6 = $18 ? Math_fround(10.0) : Math_fround(6.0);
   ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($9, $0, $6, $23, 12);
   ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($9, $0, Math_fround($6 + Math_fround(1.0)), $32, 12, Math_fround(1.0));
   ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($9, $0, $6, $25, 12, Math_fround(1.0));
   if (($34 | 0) == 65536) {
    $6 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
    $0 = $4 + 336 | 0;
    $10 = SAFE_HEAP_LOAD_f32_4_4($4, 508);
    SAFE_HEAP_STORE_f32_4_4($0 + 12 | 0, 0, Math_fround($15 + $10));
    SAFE_HEAP_STORE_f32_4_4($4, 340, $10);
    SAFE_HEAP_STORE_i64_8_4($4, 256, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($4, 88, 0, 0);
    SAFE_HEAP_STORE_f32_4_4($4, 336, $5);
    $2 = SAFE_HEAP_LOAD_i64_8_8($4, 336);
    $12 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 272, $2, $12);
    SAFE_HEAP_STORE_i64_8_8($4, 104, $2, $12);
    $10 = Math_fround($26 + $5);
    SAFE_HEAP_STORE_f32_4_4($4, 344, $10);
    $2 = SAFE_HEAP_LOAD_i64_8_8($4, 344);
    $12 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 264, $2, $12);
    SAFE_HEAP_STORE_i64_8_8($4, 96, $2, $12);
    ImGui__RenderColorRectWithAlphaCheckerboard_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20float_2c_20ImVec2_2c_20float_2c_20int_29($9, $4 + 104 | 0, $4 + 96 | 0, 0, Math_fround(Math_fround($10 - $5) * Math_fround(.5)), $4 + 88 | 0, Math_fround(0.0), 0);
    $2 = $0;
    $0 = $23 & 16777215;
    ImDrawList__AddRectFilledMultiColor_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($9, $2, $4 + 344 | 0, $23, $23, $0, $0);
    $0 = SAFE_HEAP_LOAD_i64_8_8($4, 336);
    $2 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 248, $0, $2);
    $12 = SAFE_HEAP_LOAD_i64_8_8($4, 344);
    $8 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 240, $12, $8);
    SAFE_HEAP_STORE_i64_8_8($4, 80, $0, $2);
    SAFE_HEAP_STORE_i64_8_8($4, 72, $12, $8);
    $17 = SAFE_HEAP_LOAD_f32_4_4($4, 508);
    ImGui__RenderFrameBorder_28ImVec2_2c_20ImVec2_2c_20float_29($4 + 80 | 0, $4 + 72 | 0, Math_fround(0.0));
    $10 = SAFE_HEAP_LOAD_f32_4_4($20, 5416);
    $15 = Math_fround(Math_fround($17 + Math_fround(($6 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($6 > Math_fround(1.0) ? Math_fround(1.0) : $6))) * $15)) + Math_fround(.5));
    label$79 : {
     if (Math_fround(Math_abs($15)) < Math_fround(2147483648.0)) {
      $0 = ~~$15;
      break label$79;
     }
     $0 = -2147483648;
    }
    $6 = Math_fround($0 | 0);
    SAFE_HEAP_STORE_f32_4_4($4, 572, $6);
    $15 = Math_fround($11 + Math_fround(1.0));
    $5 = Math_fround($5 + Math_fround(-1.0));
    $17 = Math_fround($15 + $5);
    SAFE_HEAP_STORE_f32_4_4($4, 568, Math_fround($17 + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 564, $15);
    $7 = Math_fround($15 + Math_fround(2.0));
    SAFE_HEAP_STORE_f32_4_4($4, 560, $7);
    SAFE_HEAP_STORE_i64_8_8($4, 64, SAFE_HEAP_LOAD_i64_8_4($4, 568), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 56, SAFE_HEAP_LOAD_i64_8_4($4, 560), i64toi32_i32$HIGH_BITS);
    $2 = $4 - -64 | 0;
    $8 = $4 + 56 | 0;
    $10 = Math_fround(Math_fround(($10 < Math_fround(0.0) ? Math_fround(0.0) : $10 > Math_fround(1.0) ? Math_fround(1.0) : $10) * Math_fround(255.0)) + Math_fround(.5));
    label$81 : {
     if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
      $0 = ~~$10;
      break label$81;
     }
     $0 = -2147483648;
    }
    $0 = $0 << 24;
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $2, $8, 1, $0);
    SAFE_HEAP_STORE_f32_4_4($4, 556, $6);
    SAFE_HEAP_STORE_f32_4_4($4, 552, $17);
    SAFE_HEAP_STORE_f32_4_4($4, 548, $11);
    SAFE_HEAP_STORE_f32_4_4($4, 544, $15);
    SAFE_HEAP_STORE_i64_8_8($4, 48, SAFE_HEAP_LOAD_i64_8_4($4, 552), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 40, SAFE_HEAP_LOAD_i64_8_8($4, 544), i64toi32_i32$HIGH_BITS);
    $2 = $0 | 16777215;
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $4 + 48 | 0, $4 + 40 | 0, 1, $2);
    SAFE_HEAP_STORE_f32_4_4($4, 540, $6);
    $5 = Math_fround(Math_fround(Math_fround($26 + Math_fround(2.0)) + $5) - $15);
    SAFE_HEAP_STORE_f32_4_4($4, 536, Math_fround($5 + Math_fround(-1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 532, $15);
    SAFE_HEAP_STORE_f32_4_4($4, 528, $7);
    SAFE_HEAP_STORE_i64_8_8($4, 32, SAFE_HEAP_LOAD_i64_8_4($4, 536), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 24, SAFE_HEAP_LOAD_i64_8_4($4, 528), i64toi32_i32$HIGH_BITS);
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $4 + 32 | 0, $4 + 24 | 0, 0, $0);
    SAFE_HEAP_STORE_f32_4_4($4, 524, $6);
    SAFE_HEAP_STORE_f32_4_4($4, 520, $5);
    SAFE_HEAP_STORE_f32_4_4($4, 516, $11);
    SAFE_HEAP_STORE_f32_4_4($4, 512, $15);
    SAFE_HEAP_STORE_i64_8_8($4, 16, SAFE_HEAP_LOAD_i64_8_4($4, 520), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 8, SAFE_HEAP_LOAD_i64_8_8($4, 512), i64toi32_i32$HIGH_BITS);
    ImGui__RenderArrowPointingAt_28ImDrawList__2c_20ImVec2_2c_20ImVec2_2c_20int_2c_20unsigned_20int_29($9, $4 + 16 | 0, $4 + 8 | 0, 0, $2);
   }
   ImGui__EndGroup_28_29();
   if ($3) {
    $3 = $3 & (memcmp($4 + 480 | 0, $1, $35) | 0) != 0
   }
   $12 = $3;
   if ($12) {
    ImGui__MarkItemEdited_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($20, 7240))
   }
   ImGui__PopID_28_29();
  }
  __stack_pointer = $4 + 576 | 0;
  return $12;
 }
 
 function ImGui__SetColorEditOptions_28int_29($0) {
  $0 = $0 | 0;
  $0 = $0 & 7340032 ? $0 : $0 | 1048576;
  $0 = $0 & 25165824 ? $0 : $0 | 8388608;
  $0 = $0 & 100663296 ? $0 : $0 | 33554432;
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 11972, $0 & 402653184 ? $0 : $0 | 134217728);
 }
 
 function ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  SAFE_HEAP_STORE_i32_1_1($5, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
   $3 = $6 + 12800 | 0;
   $1 = ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($3, $1, $2);
   $3 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29(ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($5, $0), 0, $3, $1 + $3 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return $3;
 }
 
 function ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  SAFE_HEAP_STORE_i32_1_1($9, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($9, 143)) {
   label$2 : {
    if ($1 & 1026) {
     $17 = SAFE_HEAP_LOAD_f32_4_4($6 + 5480 | 0, 0);
     break label$2;
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($9 + 264 | 0, 0);
    $7 = SAFE_HEAP_LOAD_f32_4_4($6 + 5480 | 0, 0);
    $17 = $7 > $11 ? $11 : $7;
   }
   $18 = SAFE_HEAP_LOAD_f32_4_4($6 + 5476 | 0, 0);
   $5 = $3;
   if (!$5) {
    $5 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($2)
   }
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($4 + 200 | 0, $2, $5, 0, Math_fround(-1.0));
   $13 = SAFE_HEAP_LOAD_f32_4_4($9 + 252 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($6 + 5480 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
   $16 = SAFE_HEAP_LOAD_f32_4_4($4, 204);
   $20 = $4 + 192 | 0;
   SAFE_HEAP_STORE_i64_8_8($20, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($4, 184, 0, 0);
   $14 = SAFE_HEAP_LOAD_f32_4_4($9 + ($1 & 4096 ? 464 : 208) | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($4, 184, $14);
   $22 = SAFE_HEAP_LOAD_f32_4_4($9 + 212 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($4, 188, $22);
   $19 = SAFE_HEAP_LOAD_f32_4_4($9 + 472 | 0, 0);
   $7 = Math_fround($7 + Math_fround($11 + $11));
   $11 = $7 > $13 ? $13 : $7;
   $7 = Math_fround($16 + Math_fround($17 + $17));
   $16 = $7 <= $11 ? $11 : $7;
   SAFE_HEAP_STORE_f32_4_4($4 + 196 | 0, 0, Math_fround($22 + $16));
   SAFE_HEAP_STORE_f32_4_4($20, 0, $19);
   $13 = Math_fround(2.0);
   $15 = $1 & 2;
   if ($15) {
    $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 60) * Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $3 = ~~$7;
      break label$6;
     }
     $3 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($4, 192, Math_fround($19 + Math_fround($3 | 0)));
    $7 = Math_fround($7 + Math_fround(-1.0));
    label$8 : {
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $3 = ~~$7;
      break label$8;
     }
     $3 = -2147483648;
    }
    SAFE_HEAP_STORE_f32_4_4($4, 184, Math_fround($14 - Math_fround($3 | 0)));
    $13 = Math_fround(3.0);
   }
   $19 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
   $14 = SAFE_HEAP_LOAD_f32_4_4($4, 200);
   $11 = SAFE_HEAP_LOAD_f32_4_4($9, 208);
   $7 = SAFE_HEAP_LOAD_f32_4_4($9 + 264 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($4, 180, Math_fround($22 + ($7 <= $17 ? $17 : $7)));
   $13 = Math_fround($19 + Math_fround($18 * $13));
   SAFE_HEAP_STORE_f32_4_4($4, 176, Math_fround($11 + $13));
   SAFE_HEAP_STORE_f32_4_4($4, 164, $16);
   $16 = Math_fround($18 + $18);
   $11 = Math_fround($19 + ($14 > Math_fround(0.0) ? Math_fround($14 + $16) : Math_fround(0.0)));
   SAFE_HEAP_STORE_f32_4_4($4, 160, $11);
   $3 = $4 + 160 | 0;
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($3, $17);
   SAFE_HEAP_STORE_i64_8_8($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($20, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 160, SAFE_HEAP_LOAD_i64_8_8($4, 184), i64toi32_i32$HIGH_BITS);
   if (!($1 & 6146)) {
    $7 = SAFE_HEAP_LOAD_f32_4_4($6 + 5492 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($4, 168, Math_fround(Math_fround($7 + $7) + Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($4, 184))));
   }
   $24 = $5;
   if ($1 & 256) {
    $3 = 1
   } else {
    $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $5 = SAFE_HEAP_LOAD_i32_4_4($10, 7080);
    $8 = SAFE_HEAP_LOAD_i32_4_4($5 + 364 | 0, 0);
    label$20 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1($10, 7220) & 2) {
      if (SAFE_HEAP_LOAD_i32_1_U_1($10 + 7232 | 0, 0) & 1) {
       $3 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 7236 | 0, 0);
       ImGuiStorage__SetInt_28unsigned_20int_2c_20int_29($8, $0, $3);
       $3 = ($3 | 0) != 0;
       break label$20;
      }
      $3 = ImGuiStorage__GetInt_28unsigned_20int_2c_20int_29_20const($8, $0, -1);
      if (($3 | 0) == -1) {
       $3 = SAFE_HEAP_LOAD_i32_1_U_1($10 + 7236 | 0, 0);
       ImGuiStorage__SetInt_28unsigned_20int_2c_20int_29($8, $0, $3);
       $3 = ($3 | 0) != 0;
       break label$20;
      }
      $3 = ($3 | 0) != 0;
      break label$20;
     }
     $3 = (ImGuiStorage__GetInt_28unsigned_20int_2c_20int_29_20const($8, $0, $1 >>> 5 & 1) | 0) != 0;
    }
    __inlined_func$ImGui__TreeNodeBehaviorIsOpen_28unsigned_20int_2c_20int_29 : {
     if ($1 & 16) {
      break __inlined_func$ImGui__TreeNodeBehaviorIsOpen_28unsigned_20int_2c_20int_29
     }
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($10, 12196) & 255)) {
      break __inlined_func$ImGui__TreeNodeBehaviorIsOpen_28unsigned_20int_2c_20int_29
     }
     $3 = (SAFE_HEAP_LOAD_i32_4_4($5 + 344 | 0, 0) - SAFE_HEAP_LOAD_i32_4_4($10, 12236) | 0) < (SAFE_HEAP_LOAD_i32_4_4($10, 12240) | 0) | $3;
    }
   }
   label$11 : {
    if (!$3 | ($1 & 8200) != 8192) {
     break label$11
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($6, 7568) & 255) {
     break label$11
    }
    $8 = $9 + 348 | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
    SAFE_HEAP_STORE_i32_4_4($8, 0, 1 << SAFE_HEAP_LOAD_i32_4_4($9 + 344 | 0, 0) | $5);
   }
   $8 = ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($4 + 160 | 0, $0, 0, 0);
   $5 = $6 + 7248 | 0;
   SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 2);
   SAFE_HEAP_STORE_i64_8_4($6 + 7284 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($4, 184), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($6 + 7292 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($4 + 192 | 0, 0), i64toi32_i32$HIGH_BITS);
   label$12 : {
    if (!$8) {
     if ($3 ^ 1 | ($1 & 8) >>> 3) {
      break label$12
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
     ImGui__Indent_28float_29(Math_fround(0.0));
     $1 = $1 + 344 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
     ImGui__PushOverrideID_28unsigned_20int_29($0);
     break label$12;
    }
    $10 = $1 & 4;
    $5 = $10 << 10;
    $21 = $1 & 256;
    $5 = $21 ? $5 : $5 | 512;
    $14 = SAFE_HEAP_LOAD_f32_4_4($6 + 228 | 0, 0);
    $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 176) - $13);
    $7 = SAFE_HEAP_LOAD_f32_4_4($6 + 5516 | 0, 0);
    $8 = 0;
    label$15 : {
     if (!($14 >= Math_fround($11 - $7))) {
      break label$15
     }
     $8 = $14 < Math_fround($7 + Math_fround($11 + Math_fround($16 + SAFE_HEAP_LOAD_f32_4_4($6, 6468))));
    }
    $12 = $5;
    $5 = $5 | 65536;
    $5 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($4 + 160 | 0, $0, $4 + 159 | 0, $4 + 158 | 0, (wasm2js_i32$0 = (SAFE_HEAP_LOAD_i32_4_4($6, 7084) | 0) == ($9 | 0) ? $12 : $5, wasm2js_i32$1 = $5, wasm2js_i32$2 = $8, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1) | ($8 ? 16 : $1 & 64 ? 288 : 32));
    label$16 : {
     if ($21) {
      break label$16
     }
     $12 = 0;
     label$19 : {
      if (!$5) {
       break label$19
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7988) | 0) != ($0 | 0)) {
       label$21 : {
        if ($1 & 192) {
         $5 = 0;
         if ((SAFE_HEAP_LOAD_i32_4_4($6, 7520) | 0) != ($0 | 0)) {
          break label$21
         }
        }
        $5 = 1;
       }
       if ($1 & 128) {
        if ($8) {
         $12 = SAFE_HEAP_LOAD_i32_1_U_1($6, 7571) ^ 1
        } else {
         $12 = 0
        }
        $5 = $12 & 1 | $5;
       }
       $12 = $5;
       if (!($1 & 64)) {
        break label$19
       }
       $12 = (SAFE_HEAP_LOAD_i32_2_U_2($6 + 1002 | 0, 0) | 0) == 2 | ($5 | 0) != 0;
       break label$19;
      }
      $12 = $5 & ($3 ^ 1);
     }
     $5 = $12;
     label$26 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7512) | 0) != ($0 | 0)) {
       break label$26
      }
      if (SAFE_HEAP_LOAD_i32_4_4($6, 7612) | $3 ^ 1) {
       break label$26
      }
      ImGui__NavMoveRequestCancel_28_29();
      $5 = 1;
     }
     label$17 : {
      label$28 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 7512) | 0) != ($0 | 0)) {
        break label$28
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 7612) | 0) != 1 | $3) {
        break label$28
       }
       ImGui__NavMoveRequestCancel_28_29();
       break label$17;
      }
      if ($5) {
       break label$17
      }
      break label$16;
     }
     $3 = $3 ^ 1;
     ImGuiStorage__SetInt_28unsigned_20int_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($9 + 364 | 0, 0), $0, $3);
     SAFE_HEAP_STORE_i32_4_4($6, 7248, SAFE_HEAP_LOAD_i32_4_4($6, 7248) | 16);
    }
    if ($10) {
     ImGui__SetItemAllowOverlap_28_29()
    }
    $12 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
    label$30 : {
     if ($15) {
      $23 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($4, 158) ? 26 : 25, wasm2js_i32$1 = 24, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($4, 159), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
      $15 = SAFE_HEAP_LOAD_i64_8_8($4, 184);
      $10 = i64toi32_i32$HIGH_BITS;
      SAFE_HEAP_STORE_i64_8_8($4, 144, $15, $10);
      $8 = SAFE_HEAP_LOAD_i64_8_8($4, 192);
      $5 = i64toi32_i32$HIGH_BITS;
      SAFE_HEAP_STORE_i64_8_8($4, 136, $8, $5);
      $7 = SAFE_HEAP_LOAD_f32_4_4($6 + 5484 | 0, 0);
      SAFE_HEAP_STORE_i64_8_8($4, 64, $15, $10);
      SAFE_HEAP_STORE_i64_8_8($4, 56, $8, $5);
      ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($4 - -64 | 0, $4 + 56 | 0, $23, 1, $7);
      ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($4 + 184 | 0, $0, 2);
      label$32 : {
       if ($1 & 512) {
        $5 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
        $7 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
        SAFE_HEAP_STORE_f32_4_4($4, 128, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 176) + Math_fround($13 * Math_fround(-.6000000238418579))));
        SAFE_HEAP_STORE_f32_4_4($4, 132, Math_fround(Math_fround($7 * Math_fround(.5)) + SAFE_HEAP_LOAD_f32_4_4($4, 180)));
        SAFE_HEAP_STORE_i64_8_8($4, 48, SAFE_HEAP_LOAD_i64_8_4($4, 128), i64toi32_i32$HIGH_BITS);
        ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($5, $4 + 48 | 0, $12);
        break label$32;
       }
       if (!$21) {
        $5 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
        SAFE_HEAP_STORE_f32_4_4($4, 124, SAFE_HEAP_LOAD_f32_4_4($4, 180));
        SAFE_HEAP_STORE_f32_4_4($4, 120, Math_fround($18 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 176) - $13)));
        SAFE_HEAP_STORE_i64_8_8($4, 40, SAFE_HEAP_LOAD_i64_8_4($4, 120), i64toi32_i32$HIGH_BITS);
        ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($5, $4 + 40 | 0, $12, $3 ? 3 : 1, Math_fround(1.0));
        break label$32;
       }
       SAFE_HEAP_STORE_f32_4_4($4, 176, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 176) - $13));
      }
      if ($1 & 1048576) {
       SAFE_HEAP_STORE_f32_4_4($4, 192, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 192) - Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 6468) + SAFE_HEAP_LOAD_f32_4_4($6, 5476))))
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($6, 12196)) {
       ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(18920, 18920)
      }
      SAFE_HEAP_STORE_i64_8_4($4, 112, 0, 0);
      ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($4 + 176 | 0, $20, $2, $24, $4 + 200 | 0, $4 + 112 | 0, 0);
      break label$30;
     }
     $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 159);
     if ($1 & 1 | $5 & 255) {
      $23 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($4, 158) ? 26 : 25, wasm2js_i32$1 = 24, wasm2js_i32$2 = $5 & 255, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
      $15 = SAFE_HEAP_LOAD_i64_8_8($4, 184);
      $10 = i64toi32_i32$HIGH_BITS;
      SAFE_HEAP_STORE_i64_8_8($4, 104, $15, $10);
      $8 = SAFE_HEAP_LOAD_i64_8_8($4, 192);
      $5 = i64toi32_i32$HIGH_BITS;
      SAFE_HEAP_STORE_i64_8_8($4, 96, $8, $5);
      SAFE_HEAP_STORE_i64_8_8($4, 32, $15, $10);
      SAFE_HEAP_STORE_i64_8_8($4, 24, $8, $5);
      ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($4 + 32 | 0, $4 + 24 | 0, $23, 0, Math_fround(0.0));
     }
     ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($4 + 184 | 0, $0, 2);
     label$39 : {
      if ($1 & 512) {
       $5 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
       $7 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
       SAFE_HEAP_STORE_f32_4_4($4, 88, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 176) - Math_fround($13 * Math_fround(.5))));
       SAFE_HEAP_STORE_f32_4_4($4, 92, Math_fround(Math_fround($7 * Math_fround(.5)) + SAFE_HEAP_LOAD_f32_4_4($4, 180)));
       SAFE_HEAP_STORE_i64_8_8($4, 16, SAFE_HEAP_LOAD_i64_8_4($4, 88), i64toi32_i32$HIGH_BITS);
       ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($5, $4 + 16 | 0, $12);
       break label$39;
      }
      if ($21) {
       break label$39
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4($9, 580);
      $7 = SAFE_HEAP_LOAD_f32_4_4($6, 6468);
      SAFE_HEAP_STORE_f32_4_4($4, 80, Math_fround($18 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 176) - $13)));
      SAFE_HEAP_STORE_f32_4_4($4, 84, Math_fround(Math_fround($7 * Math_fround(.15000000596046448)) + SAFE_HEAP_LOAD_f32_4_4($4, 180)));
      SAFE_HEAP_STORE_i64_8_8($4, 8, SAFE_HEAP_LOAD_i64_8_4($4, 80), i64toi32_i32$HIGH_BITS);
      ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($5, $4 + 8 | 0, $12, $3 ? 3 : 1, Math_fround(.699999988079071));
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($6, 12196)) {
      ImGui__LogSetNextTextDecoration_28char_20const__2c_20char_20const__29(16149, 0)
     }
     $8 = SAFE_HEAP_LOAD_i64_8_8($4, 176);
     $5 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($4, 72, $8, $5);
     SAFE_HEAP_STORE_i64_8_8($4, 0, $8, $5);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($4, $2, $24, 0);
    }
    if (!($3 ^ 1 | ($1 & 8) >>> 3)) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
     ImGui__Indent_28float_29(Math_fround(0.0));
     $1 = $1 + 344 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
     ImGui__PushOverrideID_28unsigned_20int_29($0);
    }
   }
   $5 = $3;
  }
  __stack_pointer = $4 + 208 | 0;
  return $5;
 }
 
 function ImGui__TreeNode_28void_20const__2c_20char_20const__2c_20____29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  SAFE_HEAP_STORE_i32_1_1($5, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
   $3 = $6 + 12800 | 0;
   $1 = ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($3, $1, $2);
   $3 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29(ImGuiWindow__GetID_28void_20const__29($5, $0), 0, $3, $1 + $3 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
  return $3;
 }
 
 function ImGui__TreeNode_28char_20const__29($0) {
  var $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 143)) {
   $2 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29(ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($1, $0), 0, $0, 0)
  }
  return $2;
 }
 
 function ImGui__TreeNodeEx_28char_20const__2c_20int_2c_20char_20const__2c_20____29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i32_4_4($5, 12, $3);
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_1_1($6, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
   $4 = $7 + 12800 | 0;
   $2 = ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($4, $2, $3);
   $4 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29(ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($6, $0), $1, $4, $2 + $4 | 0);
  }
  __stack_pointer = $5 + 16 | 0;
  return $4;
 }
 
 function ImGui__TreePop_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  ImGui__Unindent_28float_29(Math_fround(0.0));
  $4 = $0 + 344 | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
  $3 = 1 << $3;
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_4_4($1, 7612)) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 7508) | 0) != ($0 | 0)) {
    break label$1
   }
   if (!ImGui__NavMoveRequestButNoResultYet_28_29()) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 7568)) {
    break label$1
   }
   if (!(SAFE_HEAP_LOAD_i32_4_4($0 + 348 | 0, 0) & $3)) {
    break label$1
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($0, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($0 + 204 | 0, 0) | 0) - 4 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 7564);
   SAFE_HEAP_STORE_i64_8_8($2 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 0);
   ImGui__SetNavID_28unsigned_20int_2c_20ImGuiNavLayer_2c_20unsigned_20int_2c_20ImRect_20const__29($4, $1, 0, $2);
   ImGui__NavMoveRequestCancel_28_29();
  }
  $0 = $0 + 348 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) & $3 - 1);
  ImGui__PopID_28_29();
  __stack_pointer = $2 + 16 | 0;
 }
 
 function ImGui__GetTreeNodeToLabelSpacing_28_29() {
  var $0 = 0, $1 = Math_fround(0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 5476 | 0, 0);
  return Math_fround(Math_fround(Math_fround($1 + $1) + SAFE_HEAP_LOAD_f32_4_4($0, 6468)));
 }
 
 function ImGui__SetNextItemOpen_28bool_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if (!SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($2, 7080), 143)) {
   SAFE_HEAP_STORE_i32_1_1($2 + 7236 | 0, 0, $0);
   SAFE_HEAP_STORE_i32_4_4($2, 7220, SAFE_HEAP_LOAD_i32_4_4($2, 7220) | 2);
   SAFE_HEAP_STORE_i32_4_4($2 + 7232 | 0, 0, $1 >>> 0 <= 1 ? 1 : $1);
  }
 }
 
 function ImGui__BeginListBox_28char_20const__2c_20ImVec2_20const__29($0, $1) {
  var $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0;
  $2 = __stack_pointer - 80 | 0;
  __stack_pointer = $2;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $8 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_1_1($8, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 143)) {
   $12 = ImGui__GetID_28char_20const__29($0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 72 | 0, $0, 0, 1, Math_fround(-1.0));
   SAFE_HEAP_STORE_i64_8_8($2, 64, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   $4 = ImGui__CalcItemWidth_28_29();
   $6 = ImGui__GetTextLineHeightWithSpacing_28_29();
   $3 = SAFE_HEAP_LOAD_f32_4_4($7 + 5480 | 0, 0);
   SAFE_HEAP_STORE_i64_8_8($2, 8, SAFE_HEAP_LOAD_i64_8_8($2, 64), i64toi32_i32$HIGH_BITS);
   ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($2 + 48 | 0, $2 + 8 | 0, $4, Math_fround(Math_fround($6 * Math_fround(7.25)) + Math_fround($3 + $3)));
   $3 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
   label$2 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $5 = ~~$3;
     break label$2;
    }
    $5 = -2147483648;
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($2, 48);
   $4 = SAFE_HEAP_LOAD_f32_4_4($8, 208);
   $1 = SAFE_HEAP_LOAD_i64_8_4($8, 208);
   $10 = i64toi32_i32$HIGH_BITS;
   $6 = Math_fround($5 | 0);
   $9 = SAFE_HEAP_LOAD_f32_4_4($2, 76);
   SAFE_HEAP_STORE_f32_4_4($2 + 60 | 0, 0, Math_fround(($6 >= $9 ? $6 : $9) + SAFE_HEAP_LOAD_f32_4_4($8 + 212 | 0, 0)));
   SAFE_HEAP_STORE_i64_8_8($2, 48, $1, $10);
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $5 = ~~$3
   } else {
    $5 = -2147483648
   }
   SAFE_HEAP_STORE_f32_4_4($2, 56, Math_fround($4 + Math_fround($5 | 0)));
   $3 = Math_fround(0.0);
   $4 = SAFE_HEAP_LOAD_f32_4_4($2, 72);
   if ($4 > Math_fround(0.0)) {
    $3 = Math_fround($4 + SAFE_HEAP_LOAD_f32_4_4($7 + 5500 | 0, 0))
   }
   $5 = $2 + 32 | 0;
   $11 = $5 + 12 | 0;
   SAFE_HEAP_STORE_f32_4_4($11, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 60 | 0, 0) + Math_fround(0.0)));
   SAFE_HEAP_STORE_i64_8_8($2, 32, $1, $10);
   SAFE_HEAP_STORE_f32_4_4($2, 40, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($2, 56)));
   SAFE_HEAP_STORE_i32_4_4($7, 7220, 0);
   $5 = ImGui__IsRectVisible_28ImVec2_20const__2c_20ImVec2_20const__29($5, $2 + 40 | 0);
   label$7 : {
    if (!$5) {
     SAFE_HEAP_STORE_f32_4_4($2, 24, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 40) - SAFE_HEAP_LOAD_f32_4_4($2, 32)));
     SAFE_HEAP_STORE_f32_4_4($2, 28, Math_fround(SAFE_HEAP_LOAD_f32_4_4($11, 0) - SAFE_HEAP_LOAD_f32_4_4($2, 36)));
     ImGui__ItemSize_28ImVec2_20const__2c_20float_29($2 + 24 | 0, SAFE_HEAP_LOAD_f32_4_4($7, 5480));
     ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($2 + 32 | 0, 0, $2 + 48 | 0, 0);
     break label$7;
    }
    ImGui__BeginGroup_28_29();
    if (SAFE_HEAP_LOAD_f32_4_4($2, 72) > Math_fround(0.0)) {
     $3 = SAFE_HEAP_LOAD_f32_4_4($7, 5480);
     $4 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 56) + SAFE_HEAP_LOAD_f32_4_4($7 + 5500 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($2, 16, $4);
     $6 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($2, 52));
     SAFE_HEAP_STORE_f32_4_4($2, 20, $6);
     SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_8($2, 16), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($2, $0, 0, 1);
     $9 = SAFE_HEAP_LOAD_f32_4_4($2, 72);
     $0 = $8 + 236 | 0;
     $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
     $6 = Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($2, 76));
     SAFE_HEAP_STORE_f32_4_4($0, 0, $3 >= $6 ? $3 : $6);
     $0 = $8 + 232 | 0;
     $3 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
     $4 = Math_fround($4 + $9);
     SAFE_HEAP_STORE_f32_4_4($0, 0, $3 >= $4 ? $3 : $4);
    }
    SAFE_HEAP_STORE_f32_4_4($2, 24, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 56) - SAFE_HEAP_LOAD_f32_4_4($2, 48)));
    SAFE_HEAP_STORE_f32_4_4($2, 28, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 60 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($2, 52)));
    ImGui__BeginChildFrame_28unsigned_20int_2c_20ImVec2_20const__2c_20int_29($12, $2 + 24 | 0, 0);
   }
  }
  __stack_pointer = $2 + 80 | 0;
  return $5;
 }
 
 function ImGui__EndListBox_28_29() {
  ImGui__EndChild_28_29();
  ImGui__EndGroup_28_29();
 }
 
 function ImGui__ListBox_28char_20const__2c_20int__2c_20bool_20_28__29_28void__2c_20int_2c_20char_20const___29_2c_20void__2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = 0;
  $5 = __stack_pointer - 48 | 0;
  __stack_pointer = $5;
  $8 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = ImGui__GetTextLineHeightWithSpacing_28_29();
  $7 = SAFE_HEAP_LOAD_f32_4_4($8 + 5480 | 0, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 40, 0);
  $7 = Math_fround(Math_fround($9 * Math_fround(Math_fround((($4 | 0) < 0 ? (($3 | 0) >= 7 ? 7 : $3) : $4) | 0) + Math_fround(.25))) + Math_fround($7 + $7));
  label$1 : {
   if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
    $4 = ~~$7;
    break label$1;
   }
   $4 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($5, 44, Math_fround($4 | 0));
  $4 = 0;
  if (ImGui__BeginListBox_28char_20const__2c_20ImVec2_20const__29($0, $5 + 40 | 0)) {
   $6 = ImGuiListClipper__ImGuiListClipper_28_29($5 + 16 | 0);
   ImGuiListClipper__Begin_28int_2c_20float_29($6, $3, ImGui__GetTextLineHeightWithSpacing_28_29());
   if (ImGuiListClipper__Step_28_29($6)) {
    $3 = 0;
    while (1) {
     $4 = $3;
     $3 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
     if (($3 | 0) < (SAFE_HEAP_LOAD_i32_4_4($6, 4) | 0)) {
      while (1) {
       $0 = $4;
       if (!(FUNCTION_TABLE[$2 | 0](0, $3, $5 + 12 | 0) | 0)) {
        SAFE_HEAP_STORE_i32_4_4($5, 12, 17692)
       }
       ImGui__PushID_28int_29($3);
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       $10 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
       SAFE_HEAP_STORE_i64_8_4($5, 4, 0, 0);
       if (ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($10, ($3 | 0) == ($4 | 0), 0, $5 + 4 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
        $0 = 1;
       }
       if (($3 | 0) == ($4 | 0)) {
        ImGui__SetItemDefaultFocus_28_29()
       }
       ImGui__PopID_28_29();
       $4 = $0;
       $3 = $3 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 4) | 0) > ($3 | 0)) {
        continue
       }
       break;
      }
     }
     $3 = $4;
     if (ImGuiListClipper__Step_28_29($6)) {
      continue
     }
     break;
    };
   }
   ImGui__EndChild_28_29();
   ImGui__EndGroup_28_29();
   if ($4 & 1) {
    ImGui__MarkItemEdited_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($8, 7240))
   }
   ImGuiListClipper___ImGuiListClipper_28_29($6);
  }
  __stack_pointer = $5 + 48 | 0;
  return $4 & 1;
 }
 
 function ImGui__PlotEx_28ImGuiPlotType_2c_20char_20const__2c_20float_20_28__29_28void__2c_20int_29_2c_20void__2c_20int_2c_20int_2c_20char_20const__2c_20float_2c_20float_2c_20ImVec2_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15 = Math_fround(0), $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = Math_fround(0), $20 = 0, $21 = 0, $22 = 0, $23 = Math_fround(0), $24 = Math_fround(0), $25 = Math_fround(0), $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0);
  $9 = __stack_pointer - 160 | 0;
  __stack_pointer = $9;
  $17 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $20 = SAFE_HEAP_LOAD_i32_4_4($17, 7080);
  SAFE_HEAP_STORE_i32_1_1($20, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($20, 143)) {
   $18 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($20, $1);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($9 + 152 | 0, $1, 0, 1, Math_fround(-1.0));
   if (SAFE_HEAP_LOAD_f32_4_4($8, 0) == Math_fround(0.0)) {
    SAFE_HEAP_STORE_f32_4_4($8, 0, ImGui__CalcItemWidth_28_29())
   }
   if (SAFE_HEAP_LOAD_f32_4_4($8, 4) == Math_fround(0.0)) {
    $11 = SAFE_HEAP_LOAD_f32_4_4($17 + 5480 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($8, 4, Math_fround(Math_fround($11 + $11) + SAFE_HEAP_LOAD_f32_4_4($9, 156)));
   }
   $10 = SAFE_HEAP_LOAD_i64_8_4($20, 208);
   $22 = i64toi32_i32$HIGH_BITS;
   $13 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($20, 208);
   $19 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($20 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($8, 4));
   SAFE_HEAP_STORE_f32_4_4($9 + 148 | 0, 0, $19);
   $15 = Math_fround($11 + $13);
   SAFE_HEAP_STORE_f32_4_4($9, 144, $15);
   SAFE_HEAP_STORE_i64_8_8($9, 136, $10, $22);
   $11 = SAFE_HEAP_LOAD_f32_4_4($9, 152);
   if ($11 > Math_fround(0.0)) {
    $12 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($17 + 5500 | 0, 0))
   }
   $8 = $17 + 5480 | 0;
   $16 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
   $23 = SAFE_HEAP_LOAD_f32_4_4($17 + 5476 | 0, 0);
   $24 = SAFE_HEAP_LOAD_f32_4_4($9, 140);
   $25 = SAFE_HEAP_LOAD_f32_4_4($9, 136);
   $10 = $9 + 120 | 0;
   SAFE_HEAP_STORE_f32_4_4($10 + 12 | 0, 0, Math_fround($19 + Math_fround(0.0)));
   SAFE_HEAP_STORE_i64_8_8($9, 120, SAFE_HEAP_LOAD_i64_8_8($9, 136), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($9, 128, Math_fround($15 + $12));
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($10, SAFE_HEAP_LOAD_f32_4_4($8, 0));
   if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($10, 0, $9 + 136 | 0, 0)) {
    $18 = ImGui__ItemHoverable_28ImRect_20const__2c_20unsigned_20int_29($9 + 136 | 0, $18);
    label$6 : {
     if (!($6 == Math_fround(3402823466385288598117041.0e14) | $7 == Math_fround(3402823466385288598117041.0e14))) {
      $11 = $6;
      $6 = $7;
      break label$6;
     }
     label$8 : {
      if (($3 | 0) <= 0) {
       $12 = Math_fround(-3402823466385288598117041.0e14);
       $11 = Math_fround(3402823466385288598117041.0e14);
       break label$8;
      }
      $11 = Math_fround(3402823466385288598117041.0e14);
      $12 = Math_fround(-3402823466385288598117041.0e14);
      $8 = 0;
      while (1) {
       $14 = Math_fround(FUNCTION_TABLE[$2 | 0](0, $8));
       $10 = $14 != $14;
       $12 = $10 ? $12 : $12 >= $14 ? $12 : $14;
       $11 = $10 ? $11 : $11 < $14 ? $11 : $14;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
     }
     $11 = $6 == Math_fround(3402823466385288598117041.0e14) ? $11 : $6;
     $6 = $7 == Math_fround(3402823466385288598117041.0e14) ? $12 : $7;
    }
    $14 = Math_fround($24 + $16);
    SAFE_HEAP_STORE_i64_8_8($9, 112, SAFE_HEAP_LOAD_i64_8_8($9, 136), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($9, 104, SAFE_HEAP_LOAD_i64_8_8($9, 144), i64toi32_i32$HIGH_BITS);
    $8 = ImGui__GetColorU32_28int_2c_20float_29(7, Math_fround(1.0));
    $7 = SAFE_HEAP_LOAD_f32_4_4($17 + 5484 | 0, 0);
    SAFE_HEAP_STORE_i64_8_8($9, 72, SAFE_HEAP_LOAD_i64_8_8($9, 112), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($9, 64, SAFE_HEAP_LOAD_i64_8_8($9, 104), i64toi32_i32$HIGH_BITS);
    ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($9 + 72 | 0, $9 - -64 | 0, $8, 1, $7);
    $8 = -1;
    if (($3 | 0) >= (($0 ? 1 : 2) | 0)) {
     $19 = Math_fround($19 - $16);
     $12 = Math_fround($15 - $23);
     $7 = Math_fround($25 + $23);
     $21 = !$0;
     $8 = $3 - $21 | 0;
     $10 = Math_fround(Math_abs($13)) < Math_fround(2147483648.0) ? ~~$13 : -2147483648;
     $26 = ($3 | 0) > ($10 | 0) ? $10 : $3;
     label$14 : {
      if (!$18) {
       $10 = -1;
       break label$14;
      }
      $13 = SAFE_HEAP_LOAD_f32_4_4($17 + 228 | 0, 0);
      if (!($13 >= $7)) {
       $10 = -1;
       break label$14;
      }
      $15 = SAFE_HEAP_LOAD_f32_4_4($17 + 232 | 0, 0);
      if (!($15 >= $14)) {
       $10 = -1;
       break label$14;
      }
      if (!($12 > $13)) {
       $10 = -1;
       break label$14;
      }
      $10 = -1;
      if (!($15 < $19)) {
       break label$14
      }
      $13 = Math_fround(Math_fround($13 - $7) / Math_fround($12 - $7));
      $13 = Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : $13 > Math_fround(.9998999834060669) ? Math_fround(.9998999834060669) : $13) * Math_fround($8 | 0));
      label$19 : {
       if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
        $10 = ~~$13;
        break label$19;
       }
       $10 = -2147483648;
      }
      $13 = Math_fround(FUNCTION_TABLE[$2 | 0](0, ($10 + $4 | 0) % ($3 | 0) | 0));
      $18 = $10 + 1 | 0;
      $15 = Math_fround(FUNCTION_TABLE[$2 | 0](0, ($18 + $4 | 0) % ($3 | 0) | 0));
      label$21 : {
       if (!$0) {
        SAFE_HEAP_STORE_f64_8_8($9 + 40 | 0, 0, +$15);
        SAFE_HEAP_STORE_i32_4_4($9 + 32 | 0, 0, $18);
        SAFE_HEAP_STORE_i32_4_4($9, 16, $10);
        SAFE_HEAP_STORE_f64_8_8($9, 24, +$13);
        ImGui__SetTooltip_28char_20const__2c_20____29(9599, $9 + 16 | 0);
        break label$21;
       }
       if (($0 | 0) != 1) {
        break label$21
       }
       SAFE_HEAP_STORE_i32_4_4($9, 48, $10);
       SAFE_HEAP_STORE_f64_8_8($9, 56, +$13);
       ImGui__SetTooltip_28char_20const__2c_20____29(9609, $9 + 48 | 0);
      }
     }
     $16 = Math_fround(FUNCTION_TABLE[$2 | 0](0, ($4 | 0) % ($3 | 0) | 0));
     $18 = ImGui__GetColorU32_28int_2c_20float_29($0 ? 40 : 38, Math_fround(1.0));
     $22 = ImGui__GetColorU32_28int_2c_20float_29($0 ? 41 : 39, Math_fround(1.0));
     $21 = $26 - $21 | 0;
     if (($21 | 0) > 0) {
      $23 = Math_fround(Math_fround(1.0) / Math_fround($21 | 0));
      $13 = $6 != $11 ? Math_fround(Math_fround(1.0) / Math_fround($6 - $11)) : Math_fround(0.0);
      $24 = Math_fround($6 * $11) < Math_fround(0.0) ? Math_fround(Math_fround($11 * $13) + Math_fround(1.0)) : $11 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(1.0);
      $19 = Math_fround($19 - $14);
      $15 = Math_fround($12 - $7);
      $26 = $4 + 1 | 0;
      $25 = Math_fround($8 | 0);
      $8 = 0;
      $6 = Math_fround($13 * Math_fround($16 - $11));
      $12 = $6 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($6 > Math_fround(1.0) ? Math_fround(1.0) : $6));
      $6 = Math_fround(0.0);
      while (1) {
       $12 = Math_fround(Math_fround($19 * $12) + $14);
       $16 = Math_fround(Math_fround($6 * $25) + Math_fround(.5));
       label$26 : {
        if (Math_fround(Math_abs($16)) < Math_fround(2147483648.0)) {
         $4 = ~~$16;
         break label$26;
        }
        $4 = -2147483648;
       }
       $28 = Math_fround(FUNCTION_TABLE[$2 | 0](0, ($26 + $4 | 0) % ($3 | 0) | 0));
       SAFE_HEAP_STORE_f32_4_4($9, 100, $12);
       $27 = Math_fround(Math_fround($15 * $6) + $7);
       SAFE_HEAP_STORE_f32_4_4($9, 96, $27);
       $6 = Math_fround($23 + $6);
       $16 = Math_fround(Math_fround($15 * $6) + $7);
       SAFE_HEAP_STORE_f32_4_4($9, 88, $16);
       $12 = Math_fround($13 * Math_fround($28 - $11));
       $12 = $12 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($12 > Math_fround(1.0) ? Math_fround(1.0) : $12));
       SAFE_HEAP_STORE_f32_4_4($9, 92, Math_fround(Math_fround($19 * ($0 ? $24 : $12)) + $14));
       label$28 : {
        if (!$0) {
         ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($20, 580), $9 + 96 | 0, $9 + 88 | 0, ($4 | 0) == ($10 | 0) ? $22 : $18, Math_fround(1.0));
         break label$28;
        }
        if (($0 | 0) != 1) {
         break label$28
        }
        if (Math_fround($27 + Math_fround(2.0)) <= $16) {
         SAFE_HEAP_STORE_f32_4_4($9, 88, Math_fround($16 + Math_fround(-1.0)))
        }
        ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($20, 580), $9 + 96 | 0, $9 + 88 | 0, ($4 | 0) == ($10 | 0) ? $22 : $18, Math_fround(0.0), 0);
       }
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($21 | 0)) {
        continue
       }
       break;
      };
     }
     $8 = 0;
    }
    if ($5) {
     $6 = SAFE_HEAP_LOAD_f32_4_4($17, 5480);
     SAFE_HEAP_STORE_f32_4_4($9, 96, SAFE_HEAP_LOAD_f32_4_4($9, 136));
     SAFE_HEAP_STORE_f32_4_4($9, 100, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($9, 140)));
     SAFE_HEAP_STORE_i64_8_4($9, 88, 1056964608, 0);
     ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($9 + 96 | 0, $9 + 144 | 0, $5, 0, 0, $9 + 88 | 0, 0);
    }
    if (SAFE_HEAP_LOAD_f32_4_4($9, 152) > Math_fround(0.0)) {
     $6 = SAFE_HEAP_LOAD_f32_4_4($17 + 5500 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($9, 84, $14);
     SAFE_HEAP_STORE_f32_4_4($9, 80, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($9, 144)));
     SAFE_HEAP_STORE_i64_8_8($9, 8, SAFE_HEAP_LOAD_i64_8_4($9, 80), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($9 + 8 | 0, $1, 0, 1);
    }
   }
  }
  __stack_pointer = $9 + 160 | 0;
 }
 
 function ImGui__BeginMenuBar_28_29() {
  var $0 = 0, $1 = Math_fround(0), $2 = 0, $3 = Math_fround(0), $4 = Math_fround(0), $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  $2 = 0;
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
    break label$1
   }
   $2 = 0;
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 9 | 0, 0) & 4)) {
    break label$1
   }
   ImGui__BeginGroup_28_29();
   ImGui__PushID_28char_20const__29(6548);
   $2 = $0 + 16 | 0;
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($6 & 1) {
    $1 = $3
   } else {
    $10 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($10, 6472) * SAFE_HEAP_LOAD_f32_4_4($0, 572));
    $11 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
    if ($11) {
     $3 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($11, 572))
    }
    $1 = SAFE_HEAP_LOAD_f32_4_4($10 + 5480 | 0, 0);
    $1 = Math_fround(Math_fround($1 + $1) + $3);
   }
   $9 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   if ($6 & 1024) {
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 6472) * SAFE_HEAP_LOAD_f32_4_4($0, 572));
    $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 312 | 0, 0);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
    if ($6) {
     $3 = Math_fround($3 * SAFE_HEAP_LOAD_f32_4_4($6, 572))
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
    $4 = Math_fround(Math_fround($8 + $8) + Math_fround($4 + $3));
   }
   $7 = SAFE_HEAP_LOAD_f32_4_4($0, 28);
   $3 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   $9 = Math_fround($9 + $1);
   $1 = Math_fround(Math_fround($9 + $4) + Math_fround(.5));
   label$9 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
     $2 = ~~$1;
     break label$9;
    }
    $2 = -2147483648;
   }
   $4 = SAFE_HEAP_LOAD_f32_4_4($0, 68);
   $1 = SAFE_HEAP_LOAD_f32_4_4($0, 72);
   $6 = $5 + 12 | 0;
   $8 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($6, 0, $8);
   $4 = Math_fround(Math_fround($3 + $7) - ($1 <= $4 ? $4 : $1));
   $4 = Math_fround(($3 >= $4 ? $3 : $4) + Math_fround(.5));
   label$11 : {
    if (Math_fround(Math_abs($4)) < Math_fround(2147483648.0)) {
     $2 = ~~$4;
     break label$11;
    }
    $2 = -2147483648;
   }
   $4 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($5, 8, $4);
   $7 = Math_fround(Math_fround($3 + $1) + Math_fround(.5));
   label$13 : {
    if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
     $2 = ~~$7;
     break label$13;
    }
    $2 = -2147483648;
   }
   $7 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($5, 0, $7);
   $1 = Math_fround(Math_fround($9 + $1) + Math_fround(.5));
   label$15 : {
    if (Math_fround(Math_abs($1)) < Math_fround(2147483648.0)) {
     $2 = ~~$1;
     break label$15;
    }
    $2 = -2147483648;
   }
   $1 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($5, 4, $1);
   $12 = SAFE_HEAP_LOAD_f32_4_4($0, 416);
   $13 = SAFE_HEAP_LOAD_f32_4_4($0 + 420 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($5, 4, $1 >= $13 ? $1 : $13);
   SAFE_HEAP_STORE_f32_4_4($5, 0, $7 >= $12 ? $7 : $12);
   $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 424 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 428 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($6, 0, $7 > $8 ? $8 : $7);
   SAFE_HEAP_STORE_f32_4_4($5, 8, $1 > $4 ? $4 : $1);
   ImGui__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($5, $5 + 8 | 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0 + 376 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_1_1($0, 306, 1);
   SAFE_HEAP_STORE_i32_4_4($0 + 292 | 0, 0, 1);
   $1 = Math_fround($9 + SAFE_HEAP_LOAD_f32_4_4($0 + 312 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($0 + 236 | 0, 0, $1);
   $3 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($0 + 308 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($0 + 232 | 0, 0, $3);
   SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, $1);
   SAFE_HEAP_STORE_f32_4_4($0, 208, $3);
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
   SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
    $4 = SAFE_HEAP_LOAD_f32_4_4($2, 6468);
    $6 = $0 + 264 | 0;
    $1 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
    $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5480 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($6, 0, $1 >= $3 ? $1 : $3);
    $0 = $0 + 252 | 0;
    $1 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
    $3 = Math_fround($4 + Math_fround($3 + $3));
    SAFE_HEAP_STORE_f32_4_4($0, 0, $1 >= $3 ? $1 : $3);
   }
   $2 = 1;
  }
  __stack_pointer = $5 + 16 | 0;
  return $2 | 0;
 }
 
 function ImGui__EndMenuBar_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
   label$2 : {
    if (!ImGui__NavMoveRequestButNoResultYet_28_29()) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_4_4($1, 7612) >>> 0 > 1) {
     break label$2
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7508);
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 16)) {
     break label$2
    }
    while (1) {
     $3 = $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 728);
     if ($0) {
      if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 16) {
       continue
      }
     }
     break;
    };
    if (($0 | 0) != ($2 | 0)) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_4_4($3 + 380 | 0, 0)) {
     break label$2
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 7600) & 128) {
     break label$2
    }
    ImGui__FocusWindow_28ImGuiWindow__29($2);
    ImGui__SetNavID_28unsigned_20int_2c_20ImGuiNavLayer_2c_20unsigned_20int_2c_20ImRect_20const__29(SAFE_HEAP_LOAD_i32_4_4($2 + 760 | 0, 0), 1, 0, $2 + 780 | 0);
    SAFE_HEAP_STORE_i32_1_1($1, 7571, 1);
    SAFE_HEAP_STORE_i32_2_1($1, 7569, 257);
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7612);
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7620);
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 7600);
    $6 = SAFE_HEAP_LOAD_i32_4_4($1, 7604);
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    SAFE_HEAP_STORE_i32_1_1($0, 7596, 0);
    SAFE_HEAP_STORE_i32_2_1($0, 7597, 256);
    SAFE_HEAP_STORE_i32_4_4($0, 7620, $4);
    SAFE_HEAP_STORE_i32_4_4($0, 7612, $3);
    SAFE_HEAP_STORE_i32_4_4($0, 7604, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 7600, $5 | 128);
    SAFE_HEAP_STORE_i32_1_1($0, 7572, SAFE_HEAP_LOAD_i32_1_U_1($0, 7573));
   }
   ImGui__PopClipRect_28_29();
   ImGui__PopID_28_29();
   SAFE_HEAP_STORE_f32_4_4($2 + 308 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 208) - SAFE_HEAP_LOAD_f32_4_4($2, 12)));
   SAFE_HEAP_STORE_i32_1_1((Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 7456), 48) + SAFE_HEAP_LOAD_i32_4_4($1 + 7464 | 0, 0) | 0) - 2 | 0, 0, 0);
   ImGui__EndGroup_28_29();
   SAFE_HEAP_STORE_i32_1_1($2 + 306 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2 + 292 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($2 + 376 | 0, 0, 1);
  }
 }
 
 function ImGui__BeginMainMenuBar_28_29() {
  var $0 = 0, $1 = 0, $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10 = Math_fround(0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = ImGui__GetMainViewport_28_29();
  $8 = $0 + 7388 | 0;
  SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($0 + 5592 | 0, 0));
  $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 5596 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 5480 | 0, 0));
  SAFE_HEAP_STORE_f32_4_4($0 + 7392 | 0, 0, $5 >= Math_fround(0.0) ? $5 : Math_fround(0.0));
  $5 = ImGui__GetFrameHeight_28_29();
  $0 = __stack_pointer - 48 | 0;
  __stack_pointer = $0;
  $4 = ImGui__FindWindowByName_28char_20const__29(6628);
  label$1 : {
   if ($4) {
    if (SAFE_HEAP_LOAD_i32_2_U_2($4, 150)) {
     break label$1
    }
   }
   if (!$1) {
    $1 = ImGui__GetMainViewport_28_29()
   }
   $7 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
   $9 = SAFE_HEAP_LOAD_f32_4_4($1, 144);
   $10 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
   $2 = SAFE_HEAP_LOAD_f32_4_4($1, 136);
   $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0);
   $4 = $1 + 140 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   $6 = Math_fround($6 + $3);
   $3 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0) - $3) + SAFE_HEAP_LOAD_f32_4_4($1 + 148 | 0, 0));
   $3 = Math_fround($6 + ($3 <= Math_fround(0.0) ? Math_fround(0.0) : $3));
   SAFE_HEAP_STORE_f32_4_4($0 + 44 | 0, 0, $3);
   SAFE_HEAP_STORE_f32_4_4($0, 36, $6);
   $7 = Math_fround($7 + $2);
   SAFE_HEAP_STORE_f32_4_4($0, 32, $7);
   $2 = Math_fround($9 + Math_fround($10 - $2));
   $2 = Math_fround($7 + ($2 <= Math_fround(0.0) ? Math_fround(0.0) : $2));
   SAFE_HEAP_STORE_f32_4_4($0, 40, $2);
   SAFE_HEAP_STORE_i64_8_8($0, 24, SAFE_HEAP_LOAD_i64_8_8($0, 32), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($0, 20, Math_fround($3 - $6));
   SAFE_HEAP_STORE_f32_4_4($0, 16, Math_fround($2 - SAFE_HEAP_LOAD_f32_4_4($0, 32)));
   $1 = $0 + 16 | 0;
   SAFE_HEAP_STORE_f32_4_4($1 + 4 | 0, 0, $5);
   SAFE_HEAP_STORE_i64_8_4($0, 8, 0, 0);
   ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($0 + 24 | 0, 0, $0 + 8 | 0);
   ImGui__SetNextWindowSize_28ImVec2_20const__2c_20int_29($1, 0);
   SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) + $5));
  }
  ImGui__PushStyleVar_28int_2c_20float_29(3, Math_fround(0.0));
  SAFE_HEAP_STORE_i64_8_4($0, 32, 0, 0);
  ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(5, $0 + 32 | 0);
  $1 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(6628, 0, 1295);
  ImGui__PopStyleVar_28int_29(2);
  __stack_pointer = $0 + 48 | 0;
  SAFE_HEAP_STORE_i64_8_4($8, 0, 0, 0);
  if ($1) {
   ImGui__BeginMenuBar_28_29();
   return $1 | 0;
  }
  ImGui__End_28_29();
  return $1 | 0;
 }
 
 function ImGui__EndMainMenuBar_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  ImGui__EndMenuBar_28_29();
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
  label$1 : {
   if (($2 | 0) != ($1 | 0)) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_4_4($0, 7564)) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 7572)) {
    break label$1
   }
   ImGui__FocusTopMostWindowUnderOne_28ImGuiWindow__2c_20ImGuiWindow__29($1);
  }
  ImGui__End_28_29();
 }
 
 function ImGui__EndMenu_28_29() {
  var $0 = 0, $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_4_4($1, 7612)) {
    break label$1
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
   if (!ImGui__NavMoveRequestButNoResultYet_28_29()) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($2 + 376 | 0, 0) | 0) != 1) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7508);
   if (!$0) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 748);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 4)) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 728) | 0) != ($2 | 0)) {
    break label$1
   }
   ImGui__ClosePopupToLevel_28int_2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($1, 7480), 1);
   ImGui__NavMoveRequestCancel_28_29();
  }
  ImGui__EndPopup_28_29();
 }
 
 function ImGui__MenuItemEx_28char_20const__2c_20char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = 0, $19 = 0;
  $5 = __stack_pointer - 96 | 0;
  __stack_pointer = $5;
  $11 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $7 = SAFE_HEAP_LOAD_i32_4_4($11, 7080);
  SAFE_HEAP_STORE_i32_1_1($7, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($7, 143)) {
   $16 = SAFE_HEAP_LOAD_f32_4_4($7 + 212 | 0, 0);
   $12 = SAFE_HEAP_LOAD_f32_4_4($7, 208);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($5 + 88 | 0, $0, 0, 1, Math_fround(-1.0));
   $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $10 = SAFE_HEAP_LOAD_i32_4_4($6, 7468);
   $4 = SAFE_HEAP_LOAD_i32_4_4($6, 7480);
   $13 = 0;
   label$2 : {
    if (($10 | 0) <= ($4 | 0)) {
     break label$2
    }
    $13 = 0;
    if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($6, 7080) + 11 | 0, 0) & 16) {
     break label$2
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6 + 7476 | 0, 0) + Math_imul($4, 36) | 0, 4);
    $13 = 0;
    if (!$6) {
     break label$2
    }
    $13 = (SAFE_HEAP_LOAD_i32_1_U_1($6 + 11 | 0, 0) & 16) >>> 4 | 0;
   }
   $18 = SAFE_HEAP_LOAD_i32_4_4($11, 7508);
   if ($13) {
    SAFE_HEAP_STORE_i32_4_4($11, 7508, $7)
   }
   ImGui__PushID_28char_20const__29($0);
   if (!$3) {
    ImGui__BeginDisabled_28bool_29(1)
   }
   label$7 : {
    if (!SAFE_HEAP_LOAD_i32_4_4($7 + 376 | 0, 0)) {
     $1 = $11 + 5492 | 0;
     $8 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
     $12 = Math_fround($8 * Math_fround(.5));
     label$9 : {
      if (Math_fround(Math_abs($12)) < Math_fround(2147483648.0)) {
       $6 = ~~$12;
       break label$9;
      }
      $6 = -2147483648;
     }
     $12 = SAFE_HEAP_LOAD_f32_4_4($5, 88);
     $9 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 208) + Math_fround($6 | 0));
     SAFE_HEAP_STORE_f32_4_4($7, 208, $9);
     $4 = SAFE_HEAP_LOAD_i32_2_U_2($7 + 328 | 0, 0);
     $16 = SAFE_HEAP_LOAD_f32_4_4($7 + 212 | 0, 0);
     $14 = SAFE_HEAP_LOAD_f32_4_4($7 + 264 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($5, 84, SAFE_HEAP_LOAD_f32_4_4($11 + 5496 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($5, 80, Math_fround($8 + $8));
     $6 = $5 + 80 | 0;
     ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(14, $6);
     SAFE_HEAP_STORE_i32_4_4($5, 84, 0);
     SAFE_HEAP_STORE_f32_4_4($5, 80, $12);
     $6 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(19354, $2, 75497472, $6);
     ImGui__PopStyleVar_28int_29(1);
     SAFE_HEAP_STORE_f32_4_4($5, 76, Math_fround($16 + $14));
     SAFE_HEAP_STORE_f32_4_4($5, 72, Math_fround($9 + Math_fround($4 >>> 0)));
     SAFE_HEAP_STORE_i64_8_8($5, 0, SAFE_HEAP_LOAD_i64_8_8($5, 72), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($5, $0, 0, 1);
     $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 0) * Math_fround(-.5));
     label$11 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $0 = ~~$8;
       break label$11;
      }
      $0 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($7, 208, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 208) + Math_fround($0 | 0)));
     break label$7;
    }
    $8 = Math_fround(0.0);
    label$14 : {
     if (!$1) {
      break label$14
     }
     $8 = Math_fround(0.0);
     if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
      break label$14
     }
     ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($5 + 80 | 0, $1, 0, 0, Math_fround(-1.0));
     $8 = SAFE_HEAP_LOAD_f32_4_4($5, 80);
    }
    $4 = $7 + 334 | 0;
    $6 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
    $14 = SAFE_HEAP_LOAD_f32_4_4($11, 6468);
    $9 = SAFE_HEAP_LOAD_f32_4_4($5, 88);
    SAFE_HEAP_STORE_i32_2_2($4, 0, $6);
    $4 = $7 + 336 | 0;
    $6 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
    $10 = $4;
    $4 = $9 < Math_fround(4294967296.0) & $9 >= Math_fround(0.0) ? ~~$9 >>> 0 : 0;
    SAFE_HEAP_STORE_i32_2_2($10, 0, $6 >>> 0 > $4 >>> 0 ? $6 : $4);
    $4 = $7 + 338 | 0;
    $6 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
    $10 = $4;
    $4 = $8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0) ? ~~$8 >>> 0 : 0;
    SAFE_HEAP_STORE_i32_2_2($10, 0, $6 >>> 0 > $4 >>> 0 ? $6 : $4);
    $4 = $7 + 340 | 0;
    $6 = SAFE_HEAP_LOAD_i32_2_U_2($4, 0);
    $10 = $4;
    $9 = Math_fround($14 * Math_fround(1.2000000476837158));
    label$22 : {
     if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
      $4 = ~~$9;
      break label$22;
     }
     $4 = -2147483648;
    }
    $4 = $4 & 65535;
    SAFE_HEAP_STORE_i32_2_2($10, 0, $6 >>> 0 > $4 >>> 0 ? $6 : $4);
    $19 = SAFE_HEAP_LOAD_i32_2_U_2($7 + 324 | 0, 0);
    $6 = 0;
    $4 = 0;
    while (1) {
     $10 = SAFE_HEAP_LOAD_i32_2_U_2((($4 << 1) + $7 | 0) + 334 | 0, 0);
     $6 = ($10 + $6 | 0) + ($15 & 1 ? ($10 ? $19 : 0) : 0) | 0;
     $15 = ($10 | 0) != 0 | $15;
     $4 = $4 + 1 | 0;
     if (($4 | 0) != 4) {
      continue
     }
     break;
    };
    $6 = $6 & 65535;
    SAFE_HEAP_STORE_i32_4_4($7 + 320 | 0, 0, $6);
    $4 = SAFE_HEAP_LOAD_i32_4_4($7, 316);
    $15 = $5 + 80 | 0;
    ImGui__GetContentRegionAvail_28_29($15);
    $9 = SAFE_HEAP_LOAD_f32_4_4($5, 80);
    SAFE_HEAP_STORE_i32_4_4($5, 84, 0);
    $14 = Math_fround(($6 >>> 0 < $4 >>> 0 ? $4 : $6) >>> 0);
    SAFE_HEAP_STORE_f32_4_4($5, 80, $14);
    $6 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(19354, 0, 92274688, $15);
    $4 = SAFE_HEAP_LOAD_i32_2_U_2($7 + 328 | 0, 0);
    $17 = Math_fround($16 + Math_fround(0.0));
    SAFE_HEAP_STORE_f32_4_4($5, 68, $17);
    SAFE_HEAP_STORE_f32_4_4($5, 64, Math_fround($12 + Math_fround($4 >>> 0)));
    SAFE_HEAP_STORE_i64_8_8($5, 32, SAFE_HEAP_LOAD_i64_8_4($5, 64), i64toi32_i32$HIGH_BITS);
    ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($5 + 32 | 0, $0, 0, 1);
    $9 = Math_fround($9 - $14);
    $0 = $9 <= Math_fround(0.0);
    $9 = $0 ? Math_fround(0.0) : $9;
    if ($8 > Math_fround(0.0)) {
     ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, $11 + 5632 | 0);
     $0 = SAFE_HEAP_LOAD_i32_2_U_2($7 + 330 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($5, 52, $17);
     SAFE_HEAP_STORE_f32_4_4($5, 48, Math_fround($12 + Math_fround($9 + Math_fround($0 >>> 0))));
     SAFE_HEAP_STORE_i64_8_8($5, 16, SAFE_HEAP_LOAD_i64_8_4($5, 48), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($5 + 16 | 0, $1, 0, 0);
     ImGui__PopStyleColor_28int_29(1);
    }
    if ($2) {
     $0 = SAFE_HEAP_LOAD_i32_2_U_2($7 + 332 | 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4($7, 580);
     $8 = SAFE_HEAP_LOAD_f32_4_4($11, 6468);
     SAFE_HEAP_STORE_f32_4_4($5, 44, Math_fround($16 + Math_fround(Math_fround($8 * Math_fround(.1340000033378601)) * Math_fround(.5))));
     SAFE_HEAP_STORE_f32_4_4($5, 40, Math_fround($12 + Math_fround(Math_fround($8 * Math_fround(.4000000059604645)) + Math_fround($9 + Math_fround($0 >>> 0)))));
     $0 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
     $8 = SAFE_HEAP_LOAD_f32_4_4($11, 6468);
     SAFE_HEAP_STORE_i64_8_8($5, 8, SAFE_HEAP_LOAD_i64_8_4($5, 40), i64toi32_i32$HIGH_BITS);
     ImGui__RenderCheckMark_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20float_29($1, $5 + 8 | 0, $0, Math_fround($8 * Math_fround(.8659999966621399)));
    }
   }
   if (!$3) {
    ImGui__EndDisabled_28_29()
   }
   ImGui__PopID_28_29();
   if ($13) {
    SAFE_HEAP_STORE_i32_4_4($11, 7508, $18)
   }
  }
  __stack_pointer = $5 + 96 | 0;
  return $6;
 }
 
 function ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3) {
  return ImGui__MenuItemEx_28char_20const__2c_20char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($0, $1, $2, $3);
 }
 
 function TabItemComparerByBeginOrder_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return SAFE_HEAP_LOAD_i32_2_2($0, 32) - SAFE_HEAP_LOAD_i32_2_2($1, 32) | 0;
 }
 
 function ImGui__EndTabBar_28_29() {
  var $0 = 0, $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  label$1 : {
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 143)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 8112);
   if (!$0) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0, 103)) {
    ImGui__TabBarLayout_28ImGuiTabBar__29($0)
   }
   label$3 : {
    label$4 : {
     label$5 : {
      if (SAFE_HEAP_LOAD_i32_1_U_1($0, 104)) {
       break label$5
      }
      if (!SAFE_HEAP_LOAD_i32_4_4($0, 28)) {
       break label$5
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 36) + 1 | 0) >= (SAFE_HEAP_LOAD_i32_4_4($2, 6984) | 0)) {
       break label$4
      }
     }
     $4 = $1 + 212 | 0;
     $3 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
     $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 52 | 0, 0);
     $3 = Math_fround($3 - $5);
     $6 = SAFE_HEAP_LOAD_f32_4_4($0, 56);
     $3 = $3 >= $6 ? $3 : $6;
     SAFE_HEAP_STORE_f32_4_4($0, 56, $3);
     SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($5 + $3));
     break label$3;
    }
    SAFE_HEAP_STORE_f32_4_4($1 + 212 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 52 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0, 60)));
   }
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 102) | 0) >= 2) {
    SAFE_HEAP_STORE_i64_8_4($1, 208, SAFE_HEAP_LOAD_i64_8_4($0, 124), i64toi32_i32$HIGH_BITS)
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 14 | 0, 0) & 16)) {
    ImGui__PopID_28_29()
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 8148);
   $1 = $0 - 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 8148, $1);
   label$8 : {
    if (!$1) {
     $0 = 0;
     break label$8;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 8156 | 0, 0) + ($0 - 2 << 3) | 0;
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    if ($0) {
     break label$8
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 8124 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 4), 144) | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 8112, $0);
  }
 }
 
 function ImGui__TabBarLayout_28ImGuiTabBar__29($0) {
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = Math_fround(0), $25 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $8 = __stack_pointer - 112 | 0;
  __stack_pointer = $8;
  $15 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_1_1($0, 103, 0);
  SAFE_HEAP_STORE_i32_4_4($8 - -64 | 0, 0, 0);
  $1 = $8 + 32 | 0;
  SAFE_HEAP_STORE_i64_8_8($1 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($8, 40, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($8, 32, 0, 0);
  $18 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (($18 | 0) <= 0) {
    $1 = 0;
    break label$1;
   }
   $1 = 0;
   while (1) {
    label$4 : {
     label$6 : {
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      $2 = $4 + Math_imul($7, 40) | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 8) | 0) >= (SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0)) {
       if (!(SAFE_HEAP_LOAD_i32_1_U_1($2, 36) & 255)) {
        break label$6
       }
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
      $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      if (($4 | 0) == ($2 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($0, 28, 0)
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) == ($2 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($0, 20, 0)
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 24) | 0) != ($2 | 0)) {
       break label$4
      }
      SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
      break label$4;
     }
     if (($1 | 0) != ($7 | 0)) {
      $4 = $4 + Math_imul($1, 40) | 0;
      SAFE_HEAP_STORE_i64_8_4($4, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_1($4 + 29 | 0, SAFE_HEAP_LOAD_i64_8_1($2 + 29 | 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($4 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($4 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
      SAFE_HEAP_STORE_i64_8_4($4 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul($1, 40) | 0;
     SAFE_HEAP_STORE_i32_2_2($2, 34, $1);
     $4 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
     $9 = $4 & 64;
     if (($1 | 0) > 0) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($2 - 36 | 0, 0);
      $6 = $6 | (($2 & 192) == 128 & ($4 & 192) != 128 | !($2 & 64) & ($9 | 0) != 0);
     }
     $2 = ($8 + 32 | 0) + Math_imul($9 >>> 6 | 0 ? 0 : $4 & 128 ? 2 : 1, 12) | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
     $1 = $1 + 1 | 0;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    $18 = $2;
    $7 = $7 + 1 | 0;
    if (($2 | 0) > ($7 | 0)) {
     continue
    }
    break;
   };
  }
  if (($1 | 0) != ($18 | 0)) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   label$14 : {
    if (($2 | 0) >= ($1 | 0)) {
     break label$14
    }
    $4 = $2;
    $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
    $2 = ($1 | 0) < ($2 | 0) ? $2 : $1;
    if (($4 | 0) >= ($2 | 0)) {
     break label$14
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 40));
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($7) {
     __memcpy($4, $7, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40));
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $4);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
  }
  label$18 : {
   if (!($6 & 1)) {
    break label$18
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if ($1 >>> 0 < 2) {
    break label$18
   }
   qsort(SAFE_HEAP_LOAD_i32_4_4($0, 8), $1, 40, 23);
  }
  $13 = SAFE_HEAP_LOAD_i32_4_4($8, 32);
  $3 = Math_fround(0.0);
  label$19 : {
   if (($13 | 0) <= 0) {
    break label$19
   }
   $3 = Math_fround(0.0);
   if ((SAFE_HEAP_LOAD_i32_4_4($8, 56) + SAFE_HEAP_LOAD_i32_4_4($8, 44) | 0) <= 0) {
    break label$19
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($15 + 5500 | 0, 0);
  }
  SAFE_HEAP_STORE_f32_4_4($8, 40, $3);
  $18 = SAFE_HEAP_LOAD_i32_4_4($8, 56);
  $1 = $8 + 52 | 0;
  $3 = Math_fround(0.0);
  label$20 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($8, 44) | 0) <= 0) {
    break label$20
   }
   $3 = Math_fround(0.0);
   if (($18 | 0) <= 0) {
    break label$20
   }
   $3 = SAFE_HEAP_LOAD_f32_4_4($15 + 5500 | 0, 0);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 0, $3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
  label$22 : {
   if (!$1) {
    $1 = 0;
    break label$22;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
  }
  if (SAFE_HEAP_LOAD_i32_4_4($0, 96)) {
   $7 = 0;
   $2 = 0;
   $9 = __stack_pointer - 48 | 0;
   __stack_pointer = $9;
   $11 = SAFE_HEAP_LOAD_i32_4_4($0, 96);
   label$10 : {
    if ($11) {
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     label$31 : {
      if (($12 | 0) <= 0) {
       $4 = ($12 | 0) > 0;
       break label$31;
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) == ($11 | 0)) {
       $2 = $4;
       $4 = 1;
       break label$31;
      }
      $6 = ($4 + Math_imul($12, 40) | 0) - 40 | 0;
      while (1) {
       label$62 : {
        $7 = $7 + 1 | 0;
        if (($12 | 0) == ($7 | 0)) {
         $2 = $6;
         break label$62;
        }
        $2 = $4 + Math_imul($7, 40) | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != ($11 | 0)) {
         continue
        }
       }
       break;
      };
      $4 = ($7 | 0) < ($12 | 0);
     }
     if ($4) {
      break label$10
     }
    }
    $2 = 0;
   }
   $11 = 0;
   label$9 : {
    if (!$2) {
     break label$9
    }
    $6 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
    $11 = 0;
    if ($6 & 32) {
     break label$9
    }
    $12 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    $7 = SAFE_HEAP_LOAD_i32_2_2($0, 100);
    $4 = (($2 - $12 | 0) / 40 | 0) + $7 | 0;
    $11 = 0;
    if (($4 | 0) < 0) {
     break label$9
    }
    $11 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) <= ($4 | 0)) {
     break label$9
    }
    $4 = $12 + Math_imul($4, 40) | 0;
    $12 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
    $11 = 0;
    if ($12 & 32) {
     break label$9
    }
    $11 = 0;
    if (($6 ^ $12) & 192) {
     break label$9
    }
    $6 = $9 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_8($6 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 32 | 0, 0), i64toi32_i32$HIGH_BITS);
    $12 = $6 + 24 | 0;
    SAFE_HEAP_STORE_i64_8_8($12, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 24 | 0, 0), i64toi32_i32$HIGH_BITS);
    $11 = $6 + 16 | 0;
    SAFE_HEAP_STORE_i64_8_8($11, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 16 | 0, 0), i64toi32_i32$HIGH_BITS);
    $16 = $6 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_8($16, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($9, 8, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
    $19 = ($7 | 0) > 0;
    $21 = $19 ? $2 : $4 + 40 | 0;
    $19 = $19 ? $2 + 40 | 0 : $4;
    $2 = $7 >> 31;
    memmove($21, $19, Math_imul(($2 ^ $7) - $2 | 0, 40));
    SAFE_HEAP_STORE_i64_8_1($4 + 29 | 0, SAFE_HEAP_LOAD_i64_8_1($6 + 29 | 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($4 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($12, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($4 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($11, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($4 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($16, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($4, 0, SAFE_HEAP_LOAD_i64_8_8($9, 8), i64toi32_i32$HIGH_BITS);
    if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 14 | 0, 0) & 64) {
     ImGui__MarkIniSettingsDirty_28_29()
    }
    $11 = 1;
   }
   $2 = $11;
   __stack_pointer = $9 + 48 | 0;
   if ($2) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 96);
    $1 = (SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) == ($2 | 0) ? $2 : $1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 96, 0);
  }
  $4 = $1;
  label$28 : {
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 4)) {
    break label$28
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5480 | 0, 0);
   $7 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
   $9 = SAFE_HEAP_LOAD_i64_8_4($7, 208);
   $12 = i64toi32_i32$HIGH_BITS;
   $5 = SAFE_HEAP_LOAD_f32_4_4($1, 6468);
   $10 = SAFE_HEAP_LOAD_f32_4_4($0, 40);
   SAFE_HEAP_STORE_i32_4_4($7 + 212 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($0 + 44 | 0, 0));
   SAFE_HEAP_STORE_f32_4_4($7, 208, Math_fround($10 - $3));
   SAFE_HEAP_STORE_f32_4_4($0, 40, Math_fround(Math_fround($5 + $3) + SAFE_HEAP_LOAD_f32_4_4($0, 40)));
   $2 = $8 + 96 | 0;
   SAFE_HEAP_STORE_i64_8_8($2 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 5624 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($8, 96, SAFE_HEAP_LOAD_i64_8_4($1 + 5616 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($8, 108, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 108) * Math_fround(.5)));
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, $2);
   $1 = $8 + 80 | 0;
   SAFE_HEAP_STORE_i64_8_8($1 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($8, 80, 0, 0);
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(21, $1);
   $1 = ImGui__BeginCombo_28char_20const__2c_20char_20const__2c_20int_29(1869, 0, 80);
   ImGui__PopStyleColor_28int_29(2);
   $6 = 0;
   if ($1) {
    label$313 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) <= 0) {
      $2 = 0;
      break label$313;
     }
     $1 = 0;
     while (1) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul($6, 40) | 0;
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($2 + 6 | 0, 0) & 32)) {
       $11 = SAFE_HEAP_LOAD_i32_4_4($2, 28);
       $16 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       $19 = SAFE_HEAP_LOAD_i32_4_4($0, 140);
       $21 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
       SAFE_HEAP_STORE_i64_8_4($8, 80, 0, 0);
       $1 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($11 + $19 | 0, ($16 | 0) == ($21 | 0), 0, $8 + 80 | 0) ? $2 : $1;
      }
      $2 = $1;
      $6 = $6 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) > ($6 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__EndPopup_28_29();
    $6 = $2;
   }
   SAFE_HEAP_STORE_i64_8_4($7, 208, $9, $12);
   $1 = $4;
   if (!$6) {
    break label$28
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
  }
  SAFE_HEAP_STORE_i32_4_4($8, 20, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 28, $13);
  SAFE_HEAP_STORE_i32_4_4($8, 24, $13 + $18 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($15 + 8164 | 0, 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$36 : {
   if (($2 | 0) >= ($4 | 0)) {
    break label$36
   }
   $6 = $2;
   $2 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
   $2 = ($2 | 0) > ($4 | 0) ? $2 : $4;
   if (($6 | 0) >= ($2 | 0)) {
    break label$36
   }
   $6 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3);
   $7 = SAFE_HEAP_LOAD_i32_4_4($15 + 8168 | 0, 0);
   if ($7) {
    __memcpy($6, $7, SAFE_HEAP_LOAD_i32_4_4($15, 8160) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($15, 8168));
   }
   SAFE_HEAP_STORE_i32_4_4($15, 8164, $2);
   SAFE_HEAP_STORE_i32_4_4($15, 8168, $6);
  }
  SAFE_HEAP_STORE_i32_4_4($15, 8160, $4);
  $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$40 : {
   if (($9 | 0) <= 0) {
    $18 = 0;
    $2 = 0;
    break label$40;
   }
   $2 = 0;
   $6 = -1;
   $4 = 0;
   $7 = 0;
   while (1) {
    $9 = $4;
    $12 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul($7, 40) | 0;
    label$43 : {
     label$44 : {
      if (!$2) {
       break label$44
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0) < (SAFE_HEAP_LOAD_i32_4_4($12, 12) | 0)) {
       break label$44
      }
      break label$43;
     }
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($12 + 6 | 0, 0) & 32 ? $2 : $12;
    }
    $13 = SAFE_HEAP_LOAD_i32_4_4($12, 0);
    $4 = $1;
    if (!$1) {
     $4 = (SAFE_HEAP_LOAD_i32_4_4($15, 7540) | 0) == ($13 | 0) ? $13 : 0
    }
    $18 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
    $11 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($8 + 96 | 0, SAFE_HEAP_LOAD_i32_4_4($0, 140) + SAFE_HEAP_LOAD_i32_4_4($12, 28) | 0, 0, 1, Math_fround(-1.0));
    $16 = $12 + 4 | 0;
    $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5476 | 0, 0);
    $10 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 96) + $3);
    if ($11 & 1048576) {
     $5 = Math_fround(1.0)
    } else {
     $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 5500 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($1, 6468))
    }
    $3 = Math_fround($10 + Math_fround($3 + $5));
    $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6468) * Math_fround(20.0));
    $3 = $3 < $5 ? $3 : $5;
    SAFE_HEAP_STORE_f32_4_4($12, 24, $3);
    $5 = Math_fround(0.0);
    $11 = $6;
    $1 = SAFE_HEAP_LOAD_i32_4_4($16, 0);
    $6 = $1 & 64 ? 0 : $1 & 128 ? 2 : 1;
    if (($11 | 0) == ($6 | 0)) {
     $5 = SAFE_HEAP_LOAD_f32_4_4($15, 5500)
    }
    $1 = ($8 + 32 | 0) + Math_imul($6, 12) | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) + Math_fround($3 + $5)));
    $11 = ($8 + 20 | 0) + ($6 << 2) | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($11, 0);
    SAFE_HEAP_STORE_i32_4_4($11, 0, $1 + 1 | 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($15, 8168) + ($1 << 3) | 0;
    SAFE_HEAP_STORE_f32_4_4($1, 4, $3);
    SAFE_HEAP_STORE_i32_4_4($1, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($12, 20, $3);
    $1 = $4;
    $18 = ($13 | 0) == ($18 | 0) | $9;
    $4 = $18;
    $7 = $7 + 1 | 0;
    $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    if (($7 | 0) < ($9 | 0)) {
     continue
    }
    break;
   };
  }
  $4 = $1;
  $12 = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 68, 0);
  $1 = 0;
  $3 = Math_fround(0.0);
  while (1) {
   $2 = ($8 + 32 | 0) + Math_imul($1, 12) | 0;
   $3 = Math_fround($3 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) + SAFE_HEAP_LOAD_f32_4_4($2, 8)));
   $1 = $1 + 1 | 0;
   if (($1 | 0) != 3) {
    continue
   }
   break;
  };
  SAFE_HEAP_STORE_f32_4_4($0, 68, $3);
  label$49 : {
   if (!($3 > Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 48 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0, 40)))) {
    $1 = $4;
    break label$49;
   }
   if (($9 | 0) <= 1) {
    $1 = $4;
    break label$49;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 12) & 144) != 128) {
    $1 = $4;
    break label$49;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1 + 5480 | 0, 0);
   $11 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
   $21 = SAFE_HEAP_LOAD_i64_8_4($11, 208);
   $25 = i64toi32_i32$HIGH_BITS;
   $10 = SAFE_HEAP_LOAD_f32_4_4($1, 6468);
   $2 = $8 + 96 | 0;
   SAFE_HEAP_STORE_i64_8_8($2 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 5624 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($8, 96, SAFE_HEAP_LOAD_i64_8_4($1 + 5616 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_f32_4_4($8, 108, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 108) * Math_fround(.5)));
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, $2);
   $2 = $8 + 80 | 0;
   SAFE_HEAP_STORE_i64_8_8($2 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($8, 80, 0, 0);
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(21, $2);
   $1 = $1 + 140 | 0;
   $2 = SAFE_HEAP_LOAD_i64_8_4($1, 0);
   $6 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_i64_8_4($1, 0, 1048576e3, 1045220557);
   $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 48 | 0, 0);
   $20 = SAFE_HEAP_LOAD_f32_4_4($0, 40);
   $7 = $11 + 212 | 0;
   $9 = $0 + 44 | 0;
   SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0));
   $17 = $3;
   $3 = Math_fround($10 + Math_fround(-2.0));
   $14 = Math_fround($3 + $3);
   $22 = Math_fround($17 - $14);
   $20 = $20 >= $22 ? $20 : $22;
   SAFE_HEAP_STORE_f32_4_4($11, 208, $20);
   $5 = Math_fround($10 + Math_fround($5 + $5));
   SAFE_HEAP_STORE_f32_4_4($8, 84, $5);
   SAFE_HEAP_STORE_f32_4_4($8, 80, $3);
   SAFE_HEAP_STORE_i64_8_8($8, 8, SAFE_HEAP_LOAD_i64_8_8($8, 80), i64toi32_i32$HIGH_BITS);
   $13 = ImGui__ArrowButtonEx_28char_20const__2c_20int_2c_20ImVec2_2c_20int_29(16151, 0, $8 + 8 | 0, 1040);
   SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0));
   SAFE_HEAP_STORE_f32_4_4($11, 208, Math_fround($3 + $20));
   SAFE_HEAP_STORE_f32_4_4($8, 76, $5);
   SAFE_HEAP_STORE_f32_4_4($8, 72, $3);
   SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_8($8, 72), i64toi32_i32$HIGH_BITS);
   $7 = ImGui__ArrowButtonEx_28char_20const__2c_20int_2c_20ImVec2_2c_20int_29(16147, 1, $8, 1040);
   ImGui__PopStyleColor_28int_29(2);
   SAFE_HEAP_STORE_i64_8_4($1, 0, $2, $6);
   $16 = $7 ? 1 : 0 - $13 | 0;
   label$53 : {
    if (!$16) {
     $2 = 0;
     break label$53;
    }
    $19 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
    label$55 : {
     if ($19) {
      $7 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
      label$57 : {
       if (($7 | 0) <= 0) {
        $6 = ($7 | 0) > 0;
        break label$57;
       }
       $9 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
       if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) == ($19 | 0)) {
        $6 = 1;
        $1 = $9;
        break label$57;
       }
       $13 = ($9 + Math_imul($7, 40) | 0) - 40 | 0;
       $6 = 0;
       while (1) {
        label$60 : {
         $6 = $6 + 1 | 0;
         if (($7 | 0) == ($6 | 0)) {
          $1 = $7;
          $2 = $13;
          break label$60;
         }
         $1 = $6;
         $2 = $9 + Math_imul($1, 40) | 0;
         if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != ($19 | 0)) {
          continue
         }
        }
        break;
       };
       $6 = ($1 | 0) < ($7 | 0);
       $1 = $2;
      }
      if ($6) {
       break label$55
      }
     }
     $1 = 0;
    }
    $2 = 0;
    if (!$1) {
     break label$53
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    $6 = ($1 - $9 | 0) / 40 | 0;
    $1 = $16 + $6 | 0;
    while (1) {
     label$64 : {
      if (($1 | 0) >= 0) {
       $2 = $1;
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) > ($1 | 0)) {
        break label$64
       }
      }
      $2 = $6;
     }
     $7 = $9 + Math_imul($2, 40) | 0;
     if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 6 | 0, 0) & 32) {
      $6 = $6 + $16 | 0;
      $1 = $1 + $16 | 0;
      label$68 : {
       if (($1 | 0) < 0) {
        break label$68
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) <= ($1 | 0)) {
        break label$68
       }
       $7 = 0;
      }
     }
     $2 = $7;
     if (!$2) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i64_8_4($11, 208, $21, $25);
   SAFE_HEAP_STORE_f32_4_4($0, 48, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 48) - Math_fround($14 + Math_fround(1.0))));
   $1 = $4;
   if (!$2) {
    break label$49
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($2 + 6 | 0, 0) & 32)) {
    SAFE_HEAP_STORE_i32_4_4($0, 20, $1)
   }
  }
  $2 = $1;
  $20 = SAFE_HEAP_LOAD_f32_4_4($8, 52);
  $3 = SAFE_HEAP_LOAD_f32_4_4($8, 36);
  $22 = SAFE_HEAP_LOAD_f32_4_4($8, 40);
  $5 = Math_fround($3 + $22);
  $10 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 60 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($8 - -64 | 0, 0));
  $14 = Math_fround($5 + $10);
  $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 48) - SAFE_HEAP_LOAD_f32_4_4($0, 40));
  $4 = $14 < $3;
  label$71 : {
   if ($4) {
    $3 = Math_fround(Math_fround($20 + SAFE_HEAP_LOAD_f32_4_4($8 + 48 | 0, 0)) - Math_fround(Math_fround($3 - $5) - $10));
    $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
    break label$71;
   }
   $3 = Math_fround($14 - $3);
  }
  label$73 : {
   if (!($3 > Math_fround(0.0))) {
    break label$73
   }
   if ($4) {
    if (!(SAFE_HEAP_LOAD_i32_4_4($0, 12) & 64)) {
     break label$73
    }
   }
   $13 = $15 + 8168 | 0;
   $9 = SAFE_HEAP_LOAD_i32_4_4($13, 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($8, 56) + SAFE_HEAP_LOAD_i32_4_4($8, 32) | 0;
   $1 = $4 ? $6 : 0;
   $9 = $9 + ($1 << 3) | 0;
   __inlined_func$ImGui__ShrinkWidths_28ImGuiShrinkWidthItem__2c_20int_2c_20float_29 : {
    label$2 : {
     label$32 : {
      label$45 : {
       $7 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($8, 44), wasm2js_i32$1 = $6, wasm2js_i32$2 = $4, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
       switch ($7 | 0) {
       case 0:
        break label$2;
       case 1:
        break label$45;
       default:
        break label$32;
       };
      }
      $5 = SAFE_HEAP_LOAD_f32_4_4($9, 4);
      if (!($5 >= Math_fround(0.0))) {
       break __inlined_func$ImGui__ShrinkWidths_28ImGuiShrinkWidthItem__2c_20int_2c_20float_29
      }
      $3 = Math_fround($5 - $3);
      SAFE_HEAP_STORE_f32_4_4($9, 4, $3 >= Math_fround(1.0) ? $3 : Math_fround(1.0));
      break __inlined_func$ImGui__ShrinkWidths_28ImGuiShrinkWidthItem__2c_20int_2c_20float_29;
     }
     qsort($9, $7, 8, 21);
    }
    $4 = 1;
    while (1) {
     if (!(!($3 > Math_fround(0.0)) | ($4 | 0) >= ($7 | 0))) {
      $5 = SAFE_HEAP_LOAD_f32_4_4($9, 4);
      label$77 : {
       label$8 : {
        label$98 : {
         label$109 : {
          while (1) {
           $10 = SAFE_HEAP_LOAD_f32_4_4(($4 << 3) + $9 | 0, 4);
           if (!($10 >= $5)) {
            break label$109
           }
           $4 = $4 + 1 | 0;
           if (($4 | 0) != ($7 | 0)) {
            continue
           }
           break;
          };
          $4 = $7;
          break label$98;
         }
         if ($10 >= Math_fround(0.0)) {
          break label$8
         }
        }
        $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 4) + Math_fround(-1.0));
        break label$77;
       }
       $5 = Math_fround($5 - $10);
      }
      $6 = $4;
      $11 = $5 <= Math_fround(0.0);
      if (!$11) {
       $10 = Math_fround($6 | 0);
       $14 = Math_fround($3 / $10);
       $5 = $5 > $14 ? $14 : $5;
       $4 = 0;
       if (($6 | 0) > 0) {
        while (1) {
         $16 = ($4 << 3) + $9 | 0;
         SAFE_HEAP_STORE_f32_4_4($16, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($16, 4) - $5));
         $4 = $4 + 1 | 0;
         if (($6 | 0) != ($4 | 0)) {
          continue
         }
         break;
        }
       }
       $3 = Math_fround($3 - Math_fround($5 * $10));
      }
      $4 = $6;
      if (!$11) {
       continue
      }
     }
     break;
    };
    $3 = Math_fround(0.0);
    if (($7 | 0) > 0) {
     $4 = 0;
     while (1) {
      $6 = ($4 << 3) + $9 | 0;
      $5 = SAFE_HEAP_LOAD_f32_4_4($6, 4);
      label$1811 : {
       if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
        $11 = ~~$5;
        break label$1811;
       }
       $11 = -2147483648;
      }
      $10 = Math_fround($11 | 0);
      SAFE_HEAP_STORE_f32_4_4($6, 4, $10);
      $3 = Math_fround($3 + Math_fround($5 - $10));
      $4 = $4 + 1 | 0;
      if (($4 | 0) != ($7 | 0)) {
       continue
      }
      break;
     };
    }
    if (!($3 > Math_fround(0.0)) | ($7 | 0) <= 0) {
     break __inlined_func$ImGui__ShrinkWidths_28ImGuiShrinkWidthItem__2c_20int_2c_20float_29
    }
    $3 = Math_fround($3 + Math_fround(.009999999776482582));
    label$2012 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $4 = 0;
      $11 = ~~$3;
      break label$2012;
     }
     $4 = 0;
     $11 = -2147483648;
    }
    while (1) {
     $6 = ($4 << 3) + $9 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) < ($11 | 0)) {
      SAFE_HEAP_STORE_f32_4_4($6, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($6, 4) + Math_fround(1.0)))
     }
     $4 = $4 + 1 | 0;
     if (($4 | 0) != ($7 | 0)) {
      continue
     }
     break;
    };
   }
   if (($7 | 0) <= 0) {
    break label$73
   }
   $6 = $1 + $7 | 0;
   $7 = SAFE_HEAP_LOAD_i32_4_4($13, 0);
   while (1) {
    $4 = $7 + ($1 << 3) | 0;
    $3 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
    label$76 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $9 = ~~$3;
      break label$76;
     }
     $9 = -2147483648;
    }
    if (($9 | 0) >= 0) {
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 0), 40) | 0;
     $13 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
     $13 = ($8 + 32 | 0) + Math_imul($13 & 64 ? 0 : $13 & 128 ? 2 : 1, 12) | 0;
     $3 = SAFE_HEAP_LOAD_f32_4_4($13, 4);
     $5 = $3;
     $3 = Math_fround($9 | 0);
     SAFE_HEAP_STORE_f32_4_4($13, 4, Math_fround($5 - Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 20) - $3)));
     SAFE_HEAP_STORE_f32_4_4($4, 20, $3);
    }
    $1 = $1 + 1 | 0;
    if (($6 | 0) > ($1 | 0)) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_4_4($0, 64, 0);
  $1 = 0;
  $3 = Math_fround(0.0);
  $6 = 0;
  $5 = Math_fround(0.0);
  while (1) {
   $7 = ($8 + 32 | 0) + Math_imul($1, 12) | 0;
   if (($1 | 0) == 2) {
    $10 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 48) - SAFE_HEAP_LOAD_f32_4_4($0, 40)) - SAFE_HEAP_LOAD_f32_4_4($7, 4));
    $10 = $10 <= Math_fround(0.0) ? Math_fround(0.0) : $10;
    $3 = $3 > $10 ? $10 : $3;
   }
   $10 = $5;
   $4 = $1;
   $9 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
   label$82 : {
    if (($9 | 0) <= 0) {
     $5 = $3;
     break label$82;
    }
    $13 = $9 - 1 | 0;
    $11 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    $1 = 0;
    while (1) {
     $16 = $11 + Math_imul($1 + $6 | 0, 40) | 0;
     SAFE_HEAP_STORE_f32_4_4($16, 16, $3);
     $17 = SAFE_HEAP_LOAD_f32_4_4($16, 20);
     if (($1 | 0) < ($13 | 0)) {
      $5 = SAFE_HEAP_LOAD_f32_4_4($15, 5500)
     } else {
      $5 = Math_fround(0.0)
     }
     $3 = Math_fround($3 + Math_fround($17 + $5));
     $5 = $3;
     $1 = $1 + 1 | 0;
     if (($9 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   $3 = $5;
   $5 = SAFE_HEAP_LOAD_f32_4_4($7, 8);
   $3 = Math_fround($3 + $5);
   $6 = $6 + $9 | 0;
   $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 4) + $5);
   $5 = Math_fround($10 + ($5 >= Math_fround(0.0) ? $5 : Math_fround(0.0)));
   $1 = $4 + 1 | 0;
   if (($1 | 0) != 3) {
    continue
   }
   break;
  };
  SAFE_HEAP_STORE_f32_4_4($0, 64, $5);
  if (!($18 & 1)) {
   SAFE_HEAP_STORE_i32_4_4($0, 20, 0)
  }
  label$87 : {
   if (SAFE_HEAP_LOAD_i32_4_4($0, 20)) {
    $1 = $2;
    break label$87;
   }
   if (SAFE_HEAP_LOAD_i32_4_4($0, 24)) {
    $1 = $2;
    break label$87;
   }
   $1 = $2;
   if (!$12) {
    break label$87
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($12, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
  }
  SAFE_HEAP_STORE_i32_1_1($0, 104, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 28, SAFE_HEAP_LOAD_i32_4_4($0, 20));
  label$90 : {
   if (!$1) {
    break label$90
   }
   $7 = $1;
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$91 : {
    if (($2 | 0) <= 0) {
     $2 = ($2 | 0) > 0;
     break label$91;
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) == ($7 | 0)) {
     $1 = $4;
     $2 = 1;
     break label$91;
    }
    $9 = ($4 + Math_imul($2, 40) | 0) - 40 | 0;
    $6 = 0;
    while (1) {
     label$94 : {
      $6 = $6 + 1 | 0;
      if (($2 | 0) == ($6 | 0)) {
       $6 = $2;
       $1 = $9;
       break label$94;
      }
      $1 = $4 + Math_imul($6, 40) | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != ($7 | 0)) {
       continue
      }
     }
     break;
    };
    $2 = ($2 | 0) > ($6 | 0);
   }
   if (!$2 | !$1) {
    break label$90
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 192) {
    break label$90
   }
   $14 = SAFE_HEAP_LOAD_f32_4_4($8 + 52 | 0, 0);
   $24 = SAFE_HEAP_LOAD_f32_4_4($8 + 60 | 0, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($1, 20);
   $17 = SAFE_HEAP_LOAD_f32_4_4($1, 16);
   $3 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6468);
   $2 = SAFE_HEAP_LOAD_i32_4_4($8, 56);
   $10 = SAFE_HEAP_LOAD_f32_4_4($8, 36);
   $4 = SAFE_HEAP_LOAD_i32_4_4($8, 32);
   SAFE_HEAP_STORE_i32_4_4($0, 80, 0);
   $17 = Math_fround($17 - $10);
   $1 = ($1 - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) / 40 | 0;
   $5 = Math_fround(Math_fround($5 + $17) + (($1 + 1 | 0) < (SAFE_HEAP_LOAD_i32_4_4($0, 0) - $2 | 0) ? $3 : Math_fround(1.0)));
   label$97 : {
    label$9814 : {
     $3 = Math_fround($17 - (($1 | 0) < ($4 | 0) ? Math_fround(-0.0) : $3));
     $17 = SAFE_HEAP_LOAD_f32_4_4($0, 76);
     if (!($3 < $17)) {
      $14 = Math_fround(Math_fround(Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 48 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0, 40)) - $10) - $24) - $14);
      if (!($14 <= Math_fround($5 - $3))) {
       break label$9814
      }
     }
     $14 = SAFE_HEAP_LOAD_f32_4_4($0, 72);
     break label$97;
    }
    $10 = Math_fround($5 - $14);
    if (!($17 < $10)) {
     break label$90
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($0, 72);
    $14 = Math_fround($3 - $14);
    $3 = $10;
   }
   SAFE_HEAP_STORE_f32_4_4($0, 76, $3);
   $3 = Math_fround($14 - $5);
   SAFE_HEAP_STORE_f32_4_4($0, 80, $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0));
  }
  $5 = SAFE_HEAP_LOAD_f32_4_4($0, 72);
  $3 = SAFE_HEAP_LOAD_f32_4_4($0, 64);
  $14 = SAFE_HEAP_LOAD_f32_4_4($0 + 48 | 0, 0);
  $24 = SAFE_HEAP_LOAD_f32_4_4($0, 40);
  $3 = Math_fround($3 - Math_fround($14 - $24));
  $5 = $3 > $5 ? $5 : $3;
  $5 = $5 >= Math_fround(0.0) ? $5 : Math_fround(0.0);
  SAFE_HEAP_STORE_f32_4_4($0, 72, $5);
  $10 = SAFE_HEAP_LOAD_f32_4_4($0, 76);
  $3 = $3 > $10 ? $10 : $3;
  $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
  SAFE_HEAP_STORE_f32_4_4($0, 76, $3);
  label$100 : {
   if ($3 != $5) {
    $10 = SAFE_HEAP_LOAD_f32_4_4($0, 84);
    $17 = SAFE_HEAP_LOAD_f32_4_4($15, 6468);
    $23 = Math_fround($17 * Math_fround(70.0));
    $10 = $10 >= $23 ? $10 : $23;
    $23 = Math_fround(Math_fround(Math_abs(Math_fround($3 - $5))) / Math_fround(.30000001192092896));
    $10 = $10 >= $23 ? $10 : $23;
    SAFE_HEAP_STORE_f32_4_4($0, 84, $10);
    label$102 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 36) + 1 | 0) < (SAFE_HEAP_LOAD_i32_4_4($15, 6984) | 0)) {
      break label$102
     }
     if (SAFE_HEAP_LOAD_f32_4_4($0, 80) > Math_fround($17 * Math_fround(10.0))) {
      break label$102
     }
     $10 = Math_fround($10 * SAFE_HEAP_LOAD_f32_4_4($15 + 24 | 0, 0));
     if ($3 > $5) {
      $5 = Math_fround($5 + $10);
      $3 = $3 > $5 ? $5 : $3;
      break label$102;
     }
     if (!($3 < $5)) {
      $3 = $5;
      break label$102;
     }
     $5 = Math_fround($5 - $10);
     $3 = $3 <= $5 ? $5 : $3;
    }
    SAFE_HEAP_STORE_f32_4_4($0, 72, $3);
    break label$100;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  SAFE_HEAP_STORE_f32_4_4($0, 88, Math_fround($22 + Math_fround($24 + SAFE_HEAP_LOAD_f32_4_4($8, 36))));
  SAFE_HEAP_STORE_f32_4_4($0, 92, Math_fround(Math_fround($14 - SAFE_HEAP_LOAD_f32_4_4($8, 60)) - $20));
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0 + 14 | 0, 0) & 16)) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 136 | 0, 0);
   label$108 : {
    if (($1 | 0) >= 0) {
     break label$108
    }
    $2 = $1 + (($1 | 0) / 2 | 0) | 0;
    $2 = ($2 | 0) > 0 ? $2 : 0;
    if (($1 | 0) >= ($2 | 0)) {
     break label$108
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($2);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 140 | 0, 0);
    if ($4) {
     __memcpy($1, $4, SAFE_HEAP_LOAD_i32_4_4($0, 132));
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 140));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 136, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 140, $1);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 132, 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($15, 7080);
  SAFE_HEAP_STORE_i64_8_4($1, 208, SAFE_HEAP_LOAD_i64_8_4($0, 40), i64toi32_i32$HIGH_BITS);
  $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 44 | 0, 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 52 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($8, 96, SAFE_HEAP_LOAD_f32_4_4($0, 64));
  SAFE_HEAP_STORE_f32_4_4($8, 100, Math_fround($5 - $3));
  ImGui__ItemSize_28ImVec2_20const__2c_20float_29($8 + 96 | 0, SAFE_HEAP_LOAD_f32_4_4($0 + 120 | 0, 0));
  $1 = $1 + 240 | 0;
  $3 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
  $5 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 40) + SAFE_HEAP_LOAD_f32_4_4($0, 68));
  SAFE_HEAP_STORE_f32_4_4($1, 0, $3 >= $5 ? $3 : $5);
  __stack_pointer = $8 + 112 | 0;
 }
 
 function TabItemComparerBySection_28void_20const__2c_20void_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = $2 & 64 ? 0 : $2 & 128 ? 2 : 1;
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  $3 = $3 & 64 ? 0 : $3 & 128 ? 2 : 1;
  if (($2 | 0) != ($3 | 0)) {
   return $2 - $3 | 0
  }
  return SAFE_HEAP_LOAD_i32_2_2($0, 34) - SAFE_HEAP_LOAD_i32_2_2($1, 34) | 0;
 }
 
 function ImGui__TabBarQueueReorder_28ImGuiTabBar__2c_20ImGuiTabItem_20const__2c_20int_29($0, $1, $2) {
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_2_2($0, 100, $2);
  SAFE_HEAP_STORE_i32_4_4($0, 96, $1);
 }
 
 function ImGui__TabItemEx_28ImGuiTabBar__2c_20char_20const__2c_20bool__2c_20int_29($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = 0, $24 = 0, $25 = 0, $26 = Math_fround(0), $27 = 0, $28 = 0, $29 = Math_fround(0), $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $8 = __stack_pointer - 96 | 0;
  __stack_pointer = $8;
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 103)) {
   ImGui__TabBarLayout_28ImGuiTabBar__29($0)
  }
  $18 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $25 = SAFE_HEAP_LOAD_i32_4_4($18, 7080);
  $4 = 0;
  label$2 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($25, 143)) {
    break label$2
   }
   label$3 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 14 | 0, 0) & 16) {
     $16 = ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29($1, 0);
     ImGui__KeepAliveID_28unsigned_20int_29($16);
     break label$3;
    }
    $16 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($25, $1);
   }
   label$5 : {
    if (!$2) {
     break label$5
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($2, 0)) {
     break label$5
    }
    SAFE_HEAP_STORE_i64_8_8($8 + 88 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($8, 80, 0, 0);
    ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($8 + 80 | 0, $16, 0, 24);
    $4 = 0;
    break label$2;
   }
   $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($8 + 80 | 0, $1, 0, 1, Math_fround(-1.0));
   $6 = SAFE_HEAP_LOAD_f32_4_4($9 + 5476 | 0, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($8, 80);
   $4 = $3 & 1048576;
   $27 = $4 ? 0 : $2;
   if ($27) {
    $12 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9 + 5500 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($9, 6468))
   } else {
    $12 = Math_fround(1.0)
   }
   $7 = $9 + 5480 | 0;
   $5 = $2 | $4;
   $11 = Math_fround(Math_fround($11 + $6) + Math_fround($6 + $12));
   $12 = Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6468) * Math_fround(20.0));
   $21 = $11 < $12;
   label$8 : {
    if ($16) {
     $15 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     label$10 : {
      if (($15 | 0) <= 0) {
       $4 = ($15 | 0) > 0;
       break label$10;
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) == ($16 | 0)) {
       $2 = $9;
       $4 = 1;
       break label$10;
      }
      $4 = ($9 + Math_imul($15, 40) | 0) - 40 | 0;
      while (1) {
       label$13 : {
        $13 = $13 + 1 | 0;
        if (($15 | 0) == ($13 | 0)) {
         $2 = $4;
         break label$13;
        }
        $2 = $9 + Math_imul($13, 40) | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != ($16 | 0)) {
         continue
        }
       }
       break;
      };
      $4 = ($13 | 0) < ($15 | 0);
     }
     if ($4) {
      break label$8
     }
    }
    $2 = 0;
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
   $14 = SAFE_HEAP_LOAD_f32_4_4($8, 84);
   $11 = $21 ? $11 : $12;
   $9 = $2;
   if (!$2) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    label$17 : {
     if (($4 | 0) != ($2 | 0)) {
      break label$17
     }
     $15 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
     $4 = $4 + 1 | 0;
     $4 = ($4 | 0) < ($15 | 0) ? $15 : $4;
     if (($2 | 0) >= ($4 | 0)) {
      break label$17
     }
     $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($4, 40));
     $15 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     if ($15) {
      __memcpy($2, $15, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
     }
     SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
     SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0;
    SAFE_HEAP_STORE_i64_8_4($2, 16, 0, 0);
    SAFE_HEAP_STORE_i64_8_4($2, 8, -1, -1);
    SAFE_HEAP_STORE_i64_8_4($2, 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 36, 0);
    SAFE_HEAP_STORE_i64_8_4($2, 28, -1, -1);
    SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2 + 1 | 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul($2, 40) | 0;
    SAFE_HEAP_STORE_f32_4_4($2, 20, $11);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $16);
    SAFE_HEAP_STORE_i32_1_1($0, 105, 1);
   }
   SAFE_HEAP_STORE_i32_2_2($0, 108, ($2 - SAFE_HEAP_LOAD_i32_4_4($0, 8) | 0) / 40 | 0);
   SAFE_HEAP_STORE_f32_4_4($2, 24, $11);
   $4 = SAFE_HEAP_LOAD_i32_2_U_2($0, 106);
   SAFE_HEAP_STORE_i32_2_2($0, 106, $4 + 1 | 0);
   SAFE_HEAP_STORE_i32_2_2($2, 32, $4);
   $15 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
   $20 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   $4 = SAFE_HEAP_LOAD_i32_4_4($18, 6984);
   $13 = $5 ? $3 : $3 | 1048576;
   SAFE_HEAP_STORE_i32_4_4($2, 4, $13);
   $7 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 132);
   $5 = $3 - 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 28, $3 >>> 0 >= $5 >>> 0 ? $5 : 0);
   ImGuiTextBuffer__append_28char_20const__2c_20char_20const__29($0 + 132 | 0, $1, (strlen($1) + $1 | 0) + 1 | 0);
   $21 = $13 & 2097152;
   $3 = $15 + 1 | 0;
   $7 = $7 + 1 | 0;
   $5 = ($7 | 0) >= ($4 | 0);
   label$21 : {
    if ($5) {
     break label$21
    }
    if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 2)) {
     break label$21
    }
    if (SAFE_HEAP_LOAD_i32_4_4($0, 24)) {
     break label$21
    }
    label$22 : {
     if (($3 | 0) < ($4 | 0)) {
      if (!(SAFE_HEAP_LOAD_i32_4_4($0, 20) | $21)) {
       break label$22
      }
      break label$21;
     }
     if ($21) {
      break label$21
     }
    }
    SAFE_HEAP_STORE_i32_4_4($0, 24, $16);
   }
   label$24 : {
    if ($21 | !($13 & 2)) {
     break label$24
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) == ($16 | 0)) {
     break label$24
    }
    SAFE_HEAP_STORE_i32_4_4($0, 24, $16);
   }
   label$25 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) == ($16 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 104, 1);
     $15 = 1;
     break label$25;
    }
    $15 = 0;
    if (SAFE_HEAP_LOAD_i32_4_4($0, 20)) {
     break label$25
    }
    $15 = 0;
    if (($3 | 0) >= ($4 | 0)) {
     break label$25
    }
    $15 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != 1) {
     break label$25
    }
    $15 = !(SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 2);
   }
   if (!(!(!$9 | ($3 | 0) >= ($4 | 0)) | $5)) {
    SAFE_HEAP_STORE_i64_8_8($8 + 88 | 0, 0, 0, 0);
    SAFE_HEAP_STORE_i64_8_8($8, 80, 0, 0);
    ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($8 + 80 | 0, $16, 0, 24);
    $4 = !$21 & $15;
    break label$2;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) == ($16 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($2, 12, SAFE_HEAP_LOAD_i32_4_4($18, 6984))
   }
   $12 = Math_fround(Math_fround($6 + $6) + $14);
   $6 = SAFE_HEAP_LOAD_f32_4_4($2, 16);
   $14 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
   $30 = SAFE_HEAP_LOAD_i64_8_4($25, 208);
   $31 = i64toi32_i32$HIGH_BITS;
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 4) & 192;
   label$31 : {
    if (!$3) {
     $6 = Math_fround($6 - SAFE_HEAP_LOAD_f32_4_4($0, 72));
     label$33 : {
      if (Math_fround(Math_abs($6)) < Math_fround(2147483648.0)) {
       $9 = ~~$6;
       break label$33;
      }
      $9 = -2147483648;
     }
     $11 = Math_fround($9 | 0);
     $6 = SAFE_HEAP_LOAD_f32_4_4($0, 40);
     break label$31;
    }
    $11 = SAFE_HEAP_LOAD_f32_4_4($0, 40);
   }
   $22 = SAFE_HEAP_LOAD_f32_4_4($0 + 44 | 0, 0);
   $6 = Math_fround($6 + $11);
   SAFE_HEAP_STORE_f32_4_4($25, 208, $6);
   $11 = Math_fround($22 + Math_fround(0.0));
   SAFE_HEAP_STORE_f32_4_4($25 + 212 | 0, 0, $11);
   SAFE_HEAP_STORE_f32_4_4($8 + 92 | 0, 0, Math_fround($12 + $11));
   SAFE_HEAP_STORE_f32_4_4($8, 88, Math_fround($14 + $6));
   SAFE_HEAP_STORE_f32_4_4($8, 84, $11);
   SAFE_HEAP_STORE_f32_4_4($8, 80, $6);
   $9 = 0;
   label$35 : {
    if ($3) {
     break label$35
    }
    $9 = 1;
    if (SAFE_HEAP_LOAD_f32_4_4($8, 80) < SAFE_HEAP_LOAD_f32_4_4($0, 88)) {
     break label$35
    }
    $9 = SAFE_HEAP_LOAD_f32_4_4($8, 88) > SAFE_HEAP_LOAD_f32_4_4($0, 92);
   }
   $32 = $9;
   if ($9) {
    $6 = SAFE_HEAP_LOAD_f32_4_4($0, 88);
    SAFE_HEAP_STORE_f32_4_4($8, 76, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 84) + Math_fround(-1.0)));
    $11 = SAFE_HEAP_LOAD_f32_4_4($8, 80);
    SAFE_HEAP_STORE_f32_4_4($8, 72, $6 <= $11 ? $11 : $6);
    $6 = SAFE_HEAP_LOAD_f32_4_4($0, 92);
    SAFE_HEAP_STORE_f32_4_4($8, 68, SAFE_HEAP_LOAD_f32_4_4($8 + 92 | 0, 0));
    SAFE_HEAP_STORE_f32_4_4($8, 64, $6);
    ImGui__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($8 + 72 | 0, $8 - -64 | 0, 1);
   }
   $3 = $25 + 232 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_4($3, 0);
   $5 = i64toi32_i32$HIGH_BITS;
   SAFE_HEAP_STORE_f32_4_4($8, 76, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8 + 92 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($8, 84)));
   SAFE_HEAP_STORE_f32_4_4($8, 72, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 88) - SAFE_HEAP_LOAD_f32_4_4($8, 80)));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($8 + 72 | 0, SAFE_HEAP_LOAD_f32_4_4($18 + 5480 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($3, 0, $9, $5);
   label$37 : {
    if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($8 + 80 | 0, $16, 0, 0)) {
     if ($32) {
      ImGui__PopClipRect_28_29()
     }
     SAFE_HEAP_STORE_i64_8_4($25, 208, $30, $31);
     $4 = $15;
     break label$37;
    }
    $3 = $21 ? 4128 : 4112;
    $33 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($8 + 80 | 0, $16, $8 + 72 | 0, $8 - -64 | 0, SAFE_HEAP_LOAD_i32_1_U_1($18, 7876) ? $3 | 512 : $3);
    if (!(!$33 | $21)) {
     SAFE_HEAP_STORE_i32_4_4($0, 24, $16)
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($18, 7136) | 0) != ($16 | 0)) {
     ImGui__SetItemAllowOverlap_28_29()
    }
    label$42 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 64) | ($4 | 0) > ($7 | 0)) {
      break label$42
     }
     if (!ImGui__IsMouseDragging_28int_2c_20float_29(0, Math_fround(-1.0))) {
      break label$42
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($18, 7876)) {
      break label$42
     }
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 1)) {
      break label$42
     }
     label$43 : {
      label$44 : {
       $6 = SAFE_HEAP_LOAD_f32_4_4($18 + 880 | 0, 0);
       if (!($6 < Math_fround(0.0))) {
        break label$44
       }
       if (!(SAFE_HEAP_LOAD_f32_4_4($18 + 228 | 0, 0) < SAFE_HEAP_LOAD_f32_4_4($8, 80))) {
        break label$44
       }
       SAFE_HEAP_STORE_i64_8_8($8, 56, SAFE_HEAP_LOAD_i64_8_4($18, 228), i64toi32_i32$HIGH_BITS);
       $3 = $8 + 56 | 0;
       break label$43;
      }
      if (!($6 > Math_fround(0.0))) {
       break label$42
      }
      if (!(SAFE_HEAP_LOAD_f32_4_4($18 + 228 | 0, 0) > SAFE_HEAP_LOAD_f32_4_4($8, 88))) {
       break label$42
      }
      SAFE_HEAP_STORE_i64_8_8($8, 48, SAFE_HEAP_LOAD_i64_8_4($18, 228), i64toi32_i32$HIGH_BITS);
      $3 = $8 + 48 | 0;
     }
     SAFE_HEAP_STORE_i64_8_8($8, 24, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
     $9 = $8 + 24 | 0;
     $6 = Math_fround(0.0);
     label$1 : {
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 1)) {
       break label$1
      }
      $10 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
      if (!($10 & 192)) {
       $6 = SAFE_HEAP_LOAD_f32_4_4($0, 76)
      }
      $23 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      $4 = $2 - $23 | 0;
      $7 = ($4 | 0) / 40 | 0;
      $3 = $7;
      label$30 : {
       if (($4 | 0) < -39) {
        break label$30
       }
       $17 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 40) - $6);
       $11 = Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($2, 16));
       $6 = SAFE_HEAP_LOAD_f32_4_4($9, 0);
       $19 = $11 > $6;
       $24 = $19 ? -1 : 1;
       $28 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
       $9 = $7;
       $4 = $7;
       while (1) {
        $3 = $9;
        if (($4 | 0) >= ($28 | 0)) {
         break label$30
        }
        $5 = Math_imul($4, 40) + $23 | 0;
        $9 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
        label$6 : {
         if (!($9 & 32 | ($10 ^ $9) & 192)) {
          $11 = Math_fround($14 + SAFE_HEAP_LOAD_f32_4_4($5, 16));
          $12 = SAFE_HEAP_LOAD_f32_4_4($17, 5500);
          label$81 : {
           if ($19) {
            $3 = $4;
            $9 = 0;
            if (!(Math_fround($11 - $12) < $6)) {
             break label$81
            }
            break label$6;
           }
           $3 = $4;
           $9 = 0;
           if (Math_fround($12 + Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($5, 20))) > $6) {
            break label$6
           }
          }
          $3 = $4;
          $9 = 1;
          break label$6;
         }
         $9 = 0;
        }
        if (!$9) {
         break label$30
        }
        $9 = $3;
        $4 = $4 + $24 | 0;
        if (($4 | 0) >= 0) {
         continue
        }
        break;
       };
      }
      if (($3 | 0) == ($7 | 0)) {
       break label$1
      }
      $9 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
      SAFE_HEAP_STORE_i32_2_2($0, 100, $3 - $7 | 0);
      SAFE_HEAP_STORE_i32_4_4($0, 96, $9);
     }
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($25, 580);
    $3 = $9;
    $23 = $8 + 80 | 0;
    $4 = $23;
    $17 = 34;
    label$45 : {
     if (SAFE_HEAP_LOAD_i32_1_U_1($8, 64) | SAFE_HEAP_LOAD_i32_1_U_1($8, 72)) {
      break label$45
     }
     $7 = $20 & 2097152;
     $17 = $7 ? 35 : 37;
     if ($15) {
      break label$45
     }
     $17 = $7 ? 33 : 36;
    }
    $17 = ImGui__GetColorU32_28int_2c_20float_29($17, Math_fround(1.0));
    $7 = __stack_pointer - 16 | 0;
    __stack_pointer = $7;
    $20 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $6 = SAFE_HEAP_LOAD_f32_4_4($20 + ($13 & 2097152 ? 5484 : 5552) | 0, 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
    $12 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
    $11 = Math_fround(Math_fround(Math_fround($11 - $12) * Math_fround(.5)) + Math_fround(-1.0));
    $6 = $6 < $11 ? $6 : $11;
    $6 = $6 <= Math_fround(0.0) ? Math_fround(0.0) : $6;
    $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 4) + Math_fround(1.0));
    $11 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 12 | 0, 0) + Math_fround(-1.0));
    $10 = SAFE_HEAP_LOAD_i32_4_4($3, 84);
    $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 88 | 0, 0);
    label$11 : {
     if (($10 | 0) != ($5 | 0)) {
      break label$11
     }
     $19 = $5 ? $5 + (($5 | 0) / 2 | 0) | 0 : 8;
     $10 = $10 + 1 | 0;
     $10 = ($10 | 0) < ($19 | 0) ? $19 : $10;
     if (($5 | 0) >= ($10 | 0)) {
      break label$11
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29($10 << 3);
     $19 = SAFE_HEAP_LOAD_i32_4_4($3 + 92 | 0, 0);
     if ($19) {
      __memcpy($5, $19, SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($3, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($3, 88, $10);
     SAFE_HEAP_STORE_i32_4_4($3, 92, $5);
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($3 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3) | 0;
    SAFE_HEAP_STORE_f32_4_4($5, 4, $11);
    SAFE_HEAP_STORE_f32_4_4($5, 0, $12);
    SAFE_HEAP_STORE_i32_4_4($3, 84, SAFE_HEAP_LOAD_i32_4_4($3, 84) + 1 | 0);
    $22 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
    $12 = Math_fround($14 + $6);
    SAFE_HEAP_STORE_f32_4_4($7, 12, $12);
    SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($6 + $22));
    $5 = $7 + 8 | 0;
    ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($3, $5, $6, 6, 9);
    $14 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
    SAFE_HEAP_STORE_f32_4_4($7, 12, $12);
    SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround($14 - $6));
    ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($3, $5, $6, 9, 12);
    $19 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
    $10 = SAFE_HEAP_LOAD_i32_4_4($3, 84);
    $5 = SAFE_HEAP_LOAD_i32_4_4($3, 88);
    label$52 : {
     if (($10 | 0) != ($5 | 0)) {
      break label$52
     }
     $24 = $5 ? $5 + (($5 | 0) / 2 | 0) | 0 : 8;
     $10 = $10 + 1 | 0;
     $10 = ($10 | 0) < ($24 | 0) ? $24 : $10;
     if (($5 | 0) >= ($10 | 0)) {
      break label$52
     }
     $5 = ImGui__MemAlloc_28unsigned_20long_29($10 << 3);
     $24 = SAFE_HEAP_LOAD_i32_4_4($3, 92);
     if ($24) {
      __memcpy($5, $24, SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($3, 92));
     }
     SAFE_HEAP_STORE_i32_4_4($3, 88, $10);
     SAFE_HEAP_STORE_i32_4_4($3, 92, $5);
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($3, 92) + (SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3) | 0;
    SAFE_HEAP_STORE_f32_4_4($5, 4, $11);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $19);
    $5 = SAFE_HEAP_LOAD_i32_4_4($3, 84) + 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 84, $5);
    ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($3, SAFE_HEAP_LOAD_i32_4_4($3, 92), $5, $17);
    SAFE_HEAP_STORE_i32_4_4($3, 84, 0);
    if (SAFE_HEAP_LOAD_f32_4_4($20 + 5556 | 0, 0) > Math_fround(0.0)) {
     $14 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) + Math_fround(.5));
     if (!SAFE_HEAP_LOAD_i32_4_4($3, 88)) {
      $5 = ImGui__MemAlloc_28unsigned_20long_29(64);
      $10 = SAFE_HEAP_LOAD_i32_4_4($3, 92);
      if ($10) {
       __memcpy($5, $10, SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($3, 92));
      }
      SAFE_HEAP_STORE_i32_4_4($3, 88, 8);
      SAFE_HEAP_STORE_i32_4_4($3, 92, $5);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($3, 92) + (SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3) | 0;
     SAFE_HEAP_STORE_f32_4_4($5, 4, $11);
     SAFE_HEAP_STORE_f32_4_4($5, 0, $14);
     SAFE_HEAP_STORE_i32_4_4($3, 84, SAFE_HEAP_LOAD_i32_4_4($3, 84) + 1 | 0);
     $14 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
     $12 = Math_fround($12 + Math_fround(.5));
     SAFE_HEAP_STORE_f32_4_4($7, 12, $12);
     SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround(Math_fround($6 + $14) + Math_fround(.5)));
     $5 = $7 + 8 | 0;
     ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($3, $5, $6, 6, 9);
     $14 = SAFE_HEAP_LOAD_f32_4_4($4, 8);
     SAFE_HEAP_STORE_f32_4_4($7, 12, $12);
     SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround(Math_fround($14 - $6) + Math_fround(-.5)));
     ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($3, $5, $6, 9, 12);
     $6 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 8) + Math_fround(-.5));
     $5 = SAFE_HEAP_LOAD_i32_4_4($3, 84);
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 88);
     label$12 : {
      if (($5 | 0) != ($4 | 0)) {
       break label$12
      }
      $10 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
      $5 = $5 + 1 | 0;
      $5 = ($5 | 0) < ($10 | 0) ? $10 : $5;
      if (($4 | 0) >= ($5 | 0)) {
       break label$12
      }
      $4 = ImGui__MemAlloc_28unsigned_20long_29($5 << 3);
      $10 = SAFE_HEAP_LOAD_i32_4_4($3, 92);
      if ($10) {
       __memcpy($4, $10, SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3);
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($3, 92));
      }
      SAFE_HEAP_STORE_i32_4_4($3, 88, $5);
      SAFE_HEAP_STORE_i32_4_4($3, 92, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 92) + (SAFE_HEAP_LOAD_i32_4_4($3, 84) << 3) | 0;
     SAFE_HEAP_STORE_f32_4_4($4, 4, $11);
     SAFE_HEAP_STORE_f32_4_4($4, 0, $6);
     SAFE_HEAP_STORE_i32_4_4($3, 84, SAFE_HEAP_LOAD_i32_4_4($3, 84) + 1 | 0);
     $4 = ImGui__GetColorU32_28int_2c_20float_29(5, Math_fround(1.0));
     ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($3, SAFE_HEAP_LOAD_i32_4_4($3, 92), SAFE_HEAP_LOAD_i32_4_4($3, 84), $4, 0, SAFE_HEAP_LOAD_f32_4_4($20, 5556));
     SAFE_HEAP_STORE_i32_4_4($3, 84, 0);
    }
    __stack_pointer = $7 + 16 | 0;
    ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($23, $16, 1);
    label$47 : {
     if (!ImGui__IsItemHovered_28int_29(32)) {
      break label$47
     }
     label$48 : {
      if (!ImGui__IsMouseClicked_28int_2c_20bool_29(1, 0)) {
       $3 = ImGui__IsMouseReleased_28int_29(1);
       if ($21) {
        break label$47
       }
       if ($3) {
        break label$48
       }
       break label$47;
      }
      if ($21) {
       break label$47
      }
     }
     SAFE_HEAP_STORE_i32_4_4($0, 24, $16);
    }
    $4 = $13 | SAFE_HEAP_LOAD_i32_4_4($0, 12) >>> 1 & 4;
    if ($27) {
     $3 = ImGui__GetIDWithSeed_28char_20const__2c_20char_20const__2c_20unsigned_20int_29($16)
    } else {
     $3 = 0
    }
    $13 = SAFE_HEAP_LOAD_i64_8_4($0, 116);
    $7 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($8, 16, $13, $7);
    SAFE_HEAP_STORE_i64_8_8($8, 32, $13, $7);
    $20 = $8 + 80 | 0;
    $10 = $8 + 16 | 0;
    $13 = $8 + 46 | 0;
    $7 = __stack_pointer - 112 | 0;
    __stack_pointer = $7;
    $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($7 + 104 | 0, $1, 0, 1, Math_fround(-1.0));
    $23 = $8 + 47 | 0;
    if ($23) {
     SAFE_HEAP_STORE_i32_1_1($23, 0, 0)
    }
    if ($13) {
     SAFE_HEAP_STORE_i32_1_1($13, 0, 0)
    }
    $26 = SAFE_HEAP_LOAD_f32_4_4($20, 8);
    $14 = SAFE_HEAP_LOAD_f32_4_4($20, 0);
    $29 = Math_fround($26 - $14);
    label$32 : {
     if ($29 <= Math_fround(1.0)) {
      break label$32
     }
     $6 = SAFE_HEAP_LOAD_f32_4_4($10, 4);
     $22 = SAFE_HEAP_LOAD_f32_4_4($20, 4);
     $12 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
     SAFE_HEAP_STORE_f32_4_4($7, 100, SAFE_HEAP_LOAD_f32_4_4($20 + 12 | 0, 0));
     $11 = Math_fround($26 - $12);
     SAFE_HEAP_STORE_f32_4_4($7, 96, $11);
     SAFE_HEAP_STORE_f32_4_4($7, 92, Math_fround($22 + $6));
     $6 = Math_fround($14 + $12);
     SAFE_HEAP_STORE_f32_4_4($7, 88, $6);
     if ($13) {
      SAFE_HEAP_STORE_i32_1_1($13, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($7, 104)) > $11)
     }
     $6 = SAFE_HEAP_LOAD_f32_4_4($5, 6468);
     SAFE_HEAP_STORE_f32_4_4($7, 84, $22);
     $12 = Math_fround(Math_fround($26 - Math_fround($12 + $12)) - $6);
     $12 = $12 <= $14 ? $14 : $12;
     SAFE_HEAP_STORE_f32_4_4($7, 80, $12);
     $17 = 0;
     label$53 : {
      if (!$3) {
       break label$53
      }
      label$7 : {
       if ($15) {
        break label$7
       }
       $14 = SAFE_HEAP_LOAD_f32_4_4($5 + 5560 | 0, 0);
       if (($6 >= $14 ? $6 : $14) <= $29) {
        break label$7
       }
       $17 = 0;
       break label$53;
      }
      $13 = SAFE_HEAP_LOAD_i32_4_4($5, 7116);
      label$84 : {
       if (($13 | 0) == ($16 | 0) | ($3 | 0) == ($13 | 0)) {
        break label$84
       }
       $13 = SAFE_HEAP_LOAD_i32_4_4($5, 7136);
       if (($13 | 0) == ($16 | 0)) {
        break label$84
       }
       $17 = 0;
       if (($3 | 0) != ($13 | 0)) {
        break label$53
       }
      }
      $17 = 1;
     }
     $14 = Math_fround($6 + $12);
     $13 = SAFE_HEAP_LOAD_f32_4_4($20, 8) >= $14 & $4;
     label$9 : {
      if ($17) {
       $19 = $7 + 72 | 0;
       $24 = $5 + 7296 | 0;
       SAFE_HEAP_STORE_i32_4_4($19, 0, SAFE_HEAP_LOAD_i32_4_4($24, 0));
       $28 = $7 - -64 | 0;
       $34 = $5 + 7288 | 0;
       SAFE_HEAP_STORE_i64_8_8($28, 0, SAFE_HEAP_LOAD_i64_8_4($34, 0), i64toi32_i32$HIGH_BITS);
       $35 = $7 + 56 | 0;
       $36 = $5 + 7280 | 0;
       SAFE_HEAP_STORE_i64_8_8($35, 0, SAFE_HEAP_LOAD_i64_8_4($36, 0), i64toi32_i32$HIGH_BITS);
       $37 = $7 + 48 | 0;
       $38 = $5 + 7272 | 0;
       SAFE_HEAP_STORE_i64_8_8($37, 0, SAFE_HEAP_LOAD_i64_8_4($38, 0), i64toi32_i32$HIGH_BITS);
       $39 = $7 + 40 | 0;
       $40 = $5 + 7264 | 0;
       SAFE_HEAP_STORE_i64_8_8($39, 0, SAFE_HEAP_LOAD_i64_8_4($40, 0), i64toi32_i32$HIGH_BITS);
       $41 = $7 + 32 | 0;
       $42 = $5 + 7256 | 0;
       SAFE_HEAP_STORE_i64_8_8($41, 0, SAFE_HEAP_LOAD_i64_8_4($42, 0), i64toi32_i32$HIGH_BITS);
       $43 = $7 + 24 | 0;
       $44 = $5 + 7248 | 0;
       SAFE_HEAP_STORE_i64_8_8($43, 0, SAFE_HEAP_LOAD_i64_8_4($44, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_8($7, 16, SAFE_HEAP_LOAD_i64_8_4($5, 7240), i64toi32_i32$HIGH_BITS);
       ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(11, $10);
       $10 = ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($3, $7 + 80 | 0);
       ImGui__PopStyleVar_28int_29(1);
       SAFE_HEAP_STORE_i32_4_4($24, 0, SAFE_HEAP_LOAD_i32_4_4($19, 0));
       SAFE_HEAP_STORE_i64_8_4($34, 0, SAFE_HEAP_LOAD_i64_8_8($28, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($36, 0, SAFE_HEAP_LOAD_i64_8_8($35, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($38, 0, SAFE_HEAP_LOAD_i64_8_8($37, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($40, 0, SAFE_HEAP_LOAD_i64_8_8($39, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($42, 0, SAFE_HEAP_LOAD_i64_8_8($41, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($44, 0, SAFE_HEAP_LOAD_i64_8_8($43, 0), i64toi32_i32$HIGH_BITS);
       SAFE_HEAP_STORE_i64_8_4($5, 7240, SAFE_HEAP_LOAD_i64_8_8($7, 16), i64toi32_i32$HIGH_BITS);
       if (!($4 & 4)) {
        $10 = ImGui__IsMouseClicked_28int_2c_20bool_29(2, 0) ? 1 : $10
       }
       $3 = 1;
       break label$9;
      }
      $10 = 0;
      $3 = $13;
      if (!$3) {
       break label$9
      }
      $12 = SAFE_HEAP_LOAD_f32_4_4($5 + 5476 | 0, 0);
      $26 = SAFE_HEAP_LOAD_f32_4_4($7, 84);
      $29 = Math_fround($22 + $6);
      $22 = SAFE_HEAP_LOAD_f32_4_4($5 + 5480 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($7, 12, Math_fround(Math_fround($26 + Math_fround($29 + Math_fround($22 + $22))) * Math_fround(.5)));
      SAFE_HEAP_STORE_f32_4_4($7, 8, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 80) + Math_fround($14 + Math_fround($12 + $12))) * Math_fround(.5)));
      $4 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
      SAFE_HEAP_STORE_i64_8_8($7, 0, SAFE_HEAP_LOAD_i64_8_4($7, 8), i64toi32_i32$HIGH_BITS);
      ImGui__RenderBullet_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_29($9, $7, $4);
     }
     label$135 : {
      if (!$3) {
       $6 = (wasm2js_f32$0 = $11, wasm2js_f32$1 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($20, 8) + Math_fround(-1.0)), wasm2js_i32$0 = $17, wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1);
       break label$135;
      }
      $12 = Math_fround($6 * Math_fround(.800000011920929));
      SAFE_HEAP_STORE_f32_4_4($7, 96, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 96) - ($13 ? $12 : Math_fround(0.0))));
      $6 = Math_fround($11 - ($17 ? $6 : $12));
      $11 = $6;
     }
     ImGui__RenderTextEllipsis_28ImDrawList__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__29($9, $7 + 88 | 0, $7 + 96 | 0, $11, $6, $1, 0, $7 + 104 | 0);
     if (!$23) {
      break label$32
     }
     SAFE_HEAP_STORE_i32_1_1($23, 0, $10);
    }
    __stack_pointer = $7 + 112 | 0;
    label$523 : {
     if (!$27) {
      break label$523
     }
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($8, 47) & 255)) {
      break label$523
     }
     SAFE_HEAP_STORE_i32_1_1($27, 0, 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($2, 4) & 1)) {
      SAFE_HEAP_STORE_i32_1_1($2, 36, 1);
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) != (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0)) {
       break label$523
      }
      SAFE_HEAP_STORE_i32_4_4($2, 8, -1);
      SAFE_HEAP_STORE_i64_8_4($0, 20, 0, 0);
      break label$523;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
     $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
     if (($4 | 0) == ($3 | 0)) {
      break label$523
     }
     SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
    }
    if ($32) {
     ImGui__PopClipRect_28_29()
    }
    SAFE_HEAP_STORE_i64_8_4($25, 208, $30, $31);
    label$55 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 46)) {
      break label$55
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($18, 7116) | 0) != ($16 | 0)) {
      break label$55
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($8, 64) & 255) {
      break label$55
     }
     if (!(SAFE_HEAP_LOAD_f32_4_4($18, 7132) > SAFE_HEAP_LOAD_f32_4_4($18, 12080))) {
      break label$55
     }
     if (!ImGui__IsItemHovered_28int_29(0)) {
      break label$55
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 32) {
      break label$55
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($2, 4) & 16) {
      break label$55
     }
     $0 = ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($1);
     SAFE_HEAP_STORE_i32_4_4($8, 4, $1);
     SAFE_HEAP_STORE_i32_4_4($8, 0, $0 - $1 | 0);
     ImGui__SetTooltip_28char_20const__2c_20____29(5445, $8);
    }
    $4 = $21 ? $33 : $15;
   }
  }
  $0 = $4;
  __stack_pointer = $8 + 96 | 0;
  return $0;
 }
 
 function ImGui__EndTabItem_28_29() {
  var $0 = 0;
  label$1 : {
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 7080), 143)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8112);
   if (!$0) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_2_2($0, 108), 40) | 0, 4) & 8) {
    break label$1
   }
   ImGui__PopID_28_29();
  }
 }
 
 function get_mallinfo_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $1 = __stack_pointer - 48 | 0;
  __stack_pointer = $1;
  $2 = __stack_pointer - 16 | 0;
  SAFE_HEAP_STORE_i64_8_4($1, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 32 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, 0, 0);
  if (!SAFE_HEAP_LOAD_i32_4_4(0, 97608)) {
   SAFE_HEAP_STORE_i64_8_4(0, 97620, -1, -1);
   SAFE_HEAP_STORE_i64_8_4(0, 97612, 4096, 4096);
   SAFE_HEAP_STORE_i32_4_4(0, 97608, $2 + 12 & -16 ^ 1431655768);
   SAFE_HEAP_STORE_i32_4_4(0, 97628, 0);
   SAFE_HEAP_STORE_i32_4_4(0, 97580, 0);
  }
  $11 = SAFE_HEAP_LOAD_i32_4_4(0, 97160);
  if ($11) {
   $5 = 97584;
   $9 = 1;
   $12 = SAFE_HEAP_LOAD_i32_4_4(0, 97148);
   $6 = $12 + 40 | 0;
   $8 = $6;
   while (1) {
    $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    $4 = $7 + ($7 + 8 & 7 ? -8 - $7 & 7 : 0) | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($5, 4) + $7 | 0;
    while (1) {
     label$4 : {
      if (($4 | 0) == ($11 | 0) | $3 >>> 0 <= $4 >>> 0) {
       break label$4
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
      if (($2 | 0) == 7) {
       break label$4
      }
      $10 = $2 & -8;
      $2 = ($2 & 3) == 1;
      $8 = ($2 ? $10 : 0) + $8 | 0;
      $6 = $6 + $10 | 0;
      $9 = $2 + $9 | 0;
      $4 = $4 + $10 | 0;
      if ($7 >>> 0 <= $4 >>> 0) {
       continue
      }
     }
     break;
    };
    $5 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
    if ($5) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i32_4_4($1, 4, $9);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $6);
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97568);
   SAFE_HEAP_STORE_i32_4_4($1, 16, $3 - $6 | 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97572);
   SAFE_HEAP_STORE_i32_4_4($1, 36, $12);
   SAFE_HEAP_STORE_i32_4_4($1, 32, $8);
   SAFE_HEAP_STORE_i32_4_4($1, 28, $3 - $8 | 0);
   SAFE_HEAP_STORE_i32_4_4($1, 20, $2);
  }
  $3 = _emval_new_object() | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(13892) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 4));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(4824) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 8));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(4801) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 12));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(4808) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 16));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(11919) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 20));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(4792) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 24));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(4800) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 28));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(4814) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 32));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(4823) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 36));
  $2 = _emval_take_value(72724, $1 + 40 | 0) | 0;
  $0 = _emval_new_cstring(2193) | 0;
  _emval_set_property($3 | 0, $0 | 0, $2 | 0);
  _emval_decref($0 | 0);
  _emval_decref($2 | 0);
  __stack_pointer = $1 + 48 | 0;
 }
 
 function import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = 0.0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = _emval_new_cstring(1643) | 0;
  $3 = _emval_get_property($3 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  $4 = +_emval_as($3 | 0, 72808, $5 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 8) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround($4);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 0, $2);
  _emval_decref($3 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = _emval_new_cstring(1245) | 0;
  $0 = _emval_get_property($0 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $4 = +_emval_as($0 | 0, 72808, $5 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $2 = Math_fround($4);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 4, $2);
  _emval_decref($0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return $1;
 }
 
 function export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_f32_4_4($3, 8, SAFE_HEAP_LOAD_f32_4_4($1, 0));
  $4 = _emval_take_value(72796, $3 + 8 | 0) | 0;
  $6 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $5 = _emval_new_cstring(1643) | 0;
  _emval_set_property($6 | 0, $5 | 0, $4 | 0);
  _emval_decref($5 | 0);
  _emval_decref($4 | 0);
  SAFE_HEAP_STORE_f32_4_4($3, 8, SAFE_HEAP_LOAD_f32_4_4($1, 4));
  $1 = _emval_take_value(72796, $3 + 8 | 0) | 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $4 = _emval_new_cstring(1245) | 0;
  _emval_set_property($5 | 0, $4 | 0, $1 | 0);
  _emval_decref($4 | 0);
  _emval_decref($1 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImVec2_Set_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1643) | 0;
  _emval_set_property($5 | 0, $4 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref($4 | 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $2 = _emval_new_cstring(1245) | 0;
  _emval_set_property($4 | 0, $2 | 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 }
 
 function ImVec2_Copy_28emscripten__val_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $4 = _emval_new_cstring(1643) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1643) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $3 = _emval_new_cstring(1245) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $3 = _emval_new_cstring(1245) | 0;
  _emval_set_property($4 | 0, $3 | 0, $2 | 0);
  _emval_decref($3 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 }
 
 function ImVec2_Equals_28emscripten__val_2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = _emval_new_cstring(1643) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1643) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $4 = _emval_strictly_equals($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  _emval_decref($2 | 0);
  $2 = 0;
  if ($4) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $2 = _emval_new_cstring(1245) | 0;
   $0 = _emval_get_property($0 | 0, $2 | 0) | 0;
   _emval_decref($2 | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $2 = _emval_new_cstring(1245) | 0;
   $1 = _emval_get_property($1 | 0, $2 | 0) | 0;
   _emval_decref($2 | 0);
   $2 = _emval_strictly_equals($0 | 0, $1 | 0) | 0;
   _emval_decref($1 | 0);
   _emval_decref($0 | 0);
  }
  return $2 | 0;
 }
 
 function import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($0, $1) {
  var $2 = Math_fround(0), $3 = 0, $4 = 0.0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = _emval_new_cstring(1643) | 0;
  $3 = _emval_get_property($3 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  $4 = +_emval_as($3 | 0, 72808, $5 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround($4);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 0, $2);
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = _emval_new_cstring(1245) | 0;
  $3 = _emval_get_property($3 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  $4 = +_emval_as($3 | 0, 72808, $5 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $2 = Math_fround($4);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 4, $2);
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = _emval_new_cstring(1063) | 0;
  $3 = _emval_get_property($3 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  $4 = +_emval_as($3 | 0, 72808, $5 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $2 = Math_fround($4);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $2);
  _emval_decref($3 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = _emval_new_cstring(1857) | 0;
  $0 = _emval_get_property($0 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $4 = +_emval_as($0 | 0, 72808, $5 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$4 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$4
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$4
   }
   $2 = Math_fround($4);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 12, $2);
  _emval_decref($0 | 0);
  __stack_pointer = $5 + 16 | 0;
  return $1;
 }
 
 function ImVec4_Set_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0;
  $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $6 = _emval_new_cstring(1643) | 0;
  _emval_set_property($7 | 0, $6 | 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref($6 | 0);
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $2 = _emval_new_cstring(1245) | 0;
  _emval_set_property($6 | 0, $2 | 0, SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
  _emval_decref($2 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $2 = _emval_new_cstring(1063) | 0;
  _emval_set_property($3 | 0, $2 | 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
  _emval_decref($2 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $2 = _emval_new_cstring(1857) | 0;
  _emval_set_property($3 | 0, $2 | 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 }
 
 function ImVec4_Copy_28emscripten__val_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $4 = _emval_new_cstring(1643) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1643) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $4 = _emval_new_cstring(1245) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1245) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $4 = _emval_new_cstring(1063) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1063) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $3 = _emval_new_cstring(1857) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $3 = _emval_new_cstring(1857) | 0;
  _emval_set_property($4 | 0, $3 | 0, $2 | 0);
  _emval_decref($3 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
 }
 
 function ImVec4_Equals_28emscripten__val_2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = _emval_new_cstring(1643) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1643) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $4 = _emval_strictly_equals($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  _emval_decref($2 | 0);
  if (!$4) {
   return 0
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = _emval_new_cstring(1245) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1245) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $4 = _emval_strictly_equals($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  _emval_decref($2 | 0);
  if (!$4) {
   return 0
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = _emval_new_cstring(1063) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(1063) | 0;
  $3 = _emval_get_property($3 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $4 = _emval_strictly_equals($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  _emval_decref($2 | 0);
  $2 = 0;
  if ($4) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $2 = _emval_new_cstring(1857) | 0;
   $0 = _emval_get_property($0 | 0, $2 | 0) | 0;
   _emval_decref($2 | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $2 = _emval_new_cstring(1857) | 0;
   $1 = _emval_get_property($1 | 0, $2 | 0) | 0;
   _emval_decref($2 | 0);
   $2 = _emval_strictly_equals($0 | 0, $1 | 0) | 0;
   _emval_decref($1 | 0);
   _emval_decref($0 | 0);
  }
  return $2 | 0;
 }
 
 function import_ImFontConfig_28emscripten__val_29($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $7 = ImFontConfig__ImFontConfig_28_29($0);
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $0 = _emval_new_cstring(13688) | 0;
  $10 = _emval_get_property($8 | 0, $0 | 0) | 0;
  _emval_decref($0 | 0);
  label$1 : {
   if (($10 | 0) == 2) {
    SAFE_HEAP_STORE_i64_8_4($7, 0, 0, 0);
    break label$1;
   }
   $0 = _emval_new_cstring(6308) | 0;
   $4 = _emval_get_property($10 | 0, $0 | 0) | 0;
   _emval_decref($0 | 0);
   $5 = _emval_new_cstring(3533) | 0;
   $0 = _emval_get_property($10 | 0, $5 | 0) | 0;
   _emval_decref($5 | 0);
   $2 = +_emval_as($0 | 0, 72760, $3 + 16 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
   _emval_decref($0 | 0);
   $5 = _emval_new_cstring(8631) | 0;
   $0 = _emval_get_property($10 | 0, $5 | 0) | 0;
   _emval_decref($5 | 0);
   $11 = +_emval_as($0 | 0, 72760, $3 + 16 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
   _emval_decref($0 | 0);
   SAFE_HEAP_STORE_i64_8_4($7, 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 4, $11 < 4294967296.0 & $11 >= 0.0 ? ~~$11 >>> 0 : 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $2 < 4294967296.0 & $2 >= 0.0 ? ~~$2 >>> 0 : 0);
   iprintf(19156, $3);
   _emval_decref($4 | 0);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(5409) | 0;
  $0 = _emval_get_property($0 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $8 = $3 + 16 | 0;
  $4 = $8;
  $2 = +_emval_as($0 | 0, 72652, $4 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  SAFE_HEAP_STORE_i32_1_1($7, 8, $2 != 0.0);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $5 = _emval_new_cstring(7123) | 0;
  $0 = _emval_get_property($0 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  $2 = +_emval_as($0 | 0, 72724, $4 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 12, Math_abs($2) < 2147483648.0 ? ~~$2 : -2147483648);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(4774) | 0;
  $0 = _emval_get_property($0 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $2 = +_emval_as($0 | 0, 72808, $8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  $6 = Math_fround(3402823466385288598117041.0e14);
  label$9 : {
   if ($2 >= 3402823466385288598117041.0e14) {
    break label$9
   }
   $6 = Math_fround(-3402823466385288598117041.0e14);
   if ($2 <= -3402823466385288598117041.0e14) {
    break label$9
   }
   $6 = Math_fround($2);
  }
  SAFE_HEAP_STORE_f32_4_4($7, 16, $6);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(14893) | 0;
  $0 = _emval_get_property($0 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $8 = $3 + 16 | 0;
  $2 = +_emval_as($0 | 0, 72724, $8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 20, Math_abs($2) < 2147483648.0 ? ~~$2 : -2147483648);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(14751) | 0;
  $0 = _emval_get_property($0 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $2 = +_emval_as($0 | 0, 72724, $3 + 16 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 24, Math_abs($2) < 2147483648.0 ? ~~$2 : -2147483648);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $4 = _emval_new_cstring(14882) | 0;
  $0 = _emval_get_property($0 | 0, $4 | 0) | 0;
  _emval_decref($4 | 0);
  $4 = $8;
  $2 = +_emval_as($0 | 0, 72652, $4 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  SAFE_HEAP_STORE_i32_1_1($7, 28, $2 != 0.0);
  _emval_decref($0 | 0);
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $0 = _emval_new_cstring(9411) | 0;
  $5 = _emval_get_property($9 | 0, $0 | 0) | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 28, $5);
  _emval_decref($0 | 0);
  SAFE_HEAP_STORE_i64_8_8($3, 16, 0, 0);
  $9 = $3 + 28 | 0;
  SAFE_HEAP_STORE_i64_8_4($7, 32, SAFE_HEAP_LOAD_i64_8_8(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($9, $4), 0), i64toi32_i32$HIGH_BITS);
  _emval_decref($5 | 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $0 = _emval_new_cstring(3521) | 0;
  $4 = _emval_get_property($4 | 0, $0 | 0) | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 28, $4);
  _emval_decref($0 | 0);
  SAFE_HEAP_STORE_i64_8_8($3, 16, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 40, SAFE_HEAP_LOAD_i64_8_8(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($9, $8), 0), i64toi32_i32$HIGH_BITS);
  _emval_decref($4 | 0);
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $0 = _emval_new_cstring(5204) | 0;
  $4 = _emval_get_property($8 | 0, $0 | 0) | 0;
  _emval_decref($0 | 0);
  if (($4 | 0) == 2) {
   $0 = 0
  } else {
   $2 = +_emval_as($4 | 0, 72748, $3 + 16 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
   $0 = Math_abs($2) < 2147483648.0 ? ~~$2 : -2147483648;
  }
  SAFE_HEAP_STORE_i32_4_4($7, 48, $0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $5 = _emval_new_cstring(14322) | 0;
  $0 = _emval_get_property($0 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  $2 = +_emval_as($0 | 0, 72808, $3 + 16 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  $6 = Math_fround(3402823466385288598117041.0e14);
  label$18 : {
   if ($2 >= 3402823466385288598117041.0e14) {
    break label$18
   }
   $6 = Math_fround(-3402823466385288598117041.0e14);
   if ($2 <= -3402823466385288598117041.0e14) {
    break label$18
   }
   $6 = Math_fround($2);
  }
  SAFE_HEAP_STORE_f32_4_4($7, 52, $6);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $5 = _emval_new_cstring(14305) | 0;
  $0 = _emval_get_property($0 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  $2 = +_emval_as($0 | 0, 72808, $3 + 16 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  $6 = Math_fround(3402823466385288598117041.0e14);
  label$19 : {
   if ($2 >= 3402823466385288598117041.0e14) {
    break label$19
   }
   $6 = Math_fround(-3402823466385288598117041.0e14);
   if ($2 <= -3402823466385288598117041.0e14) {
    break label$19
   }
   $6 = Math_fround($2);
  }
  SAFE_HEAP_STORE_f32_4_4($7, 56, $6);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $5 = _emval_new_cstring(11606) | 0;
  $0 = _emval_get_property($0 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  $9 = $3 + 16 | 0;
  $5 = $9;
  $2 = +_emval_as($0 | 0, 72652, $5 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  SAFE_HEAP_STORE_i32_1_1($7, 60, $2 != 0.0);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $8 = _emval_new_cstring(4895) | 0;
  $0 = _emval_get_property($0 | 0, $8 | 0) | 0;
  _emval_decref($8 | 0);
  $2 = +_emval_as($0 | 0, 72736, $5 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 64, $2 < 4294967296.0 & $2 >= 0.0 ? ~~$2 >>> 0 : 0);
  _emval_decref($0 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $5 = _emval_new_cstring(1170) | 0;
  $0 = _emval_get_property($0 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  $2 = +_emval_as($0 | 0, 72808, $9 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 16) | 0);
  $6 = Math_fround(3402823466385288598117041.0e14);
  label$22 : {
   if ($2 >= 3402823466385288598117041.0e14) {
    break label$22
   }
   $6 = Math_fround(-3402823466385288598117041.0e14);
   if ($2 <= -3402823466385288598117041.0e14) {
    break label$22
   }
   $6 = Math_fround($2);
  }
  SAFE_HEAP_STORE_f32_4_4($7, 68, $6);
  _emval_decref($0 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $0 = _emval_new_cstring(11255) | 0;
  $5 = _emval_get_property($1 | 0, $0 | 0) | 0;
  _emval_decref($0 | 0);
  $2 = +_emval_as($5 | 0, 49072, $3 + 28 | 0);
  label$23 : {
   if ($2 < 4294967296.0 & $2 >= 0.0) {
    $8 = ~~$2 >>> 0;
    break label$23;
   }
   $8 = 0;
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
  if ($1 >>> 0 < 2147483632) {
   $9 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
   label$26 : {
    if ($1 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($3, 27, $1);
     $0 = $3 + 16 | 0;
     break label$26;
    }
    $12 = ($1 | 15) + 1 | 0;
    $0 = operator_20new_28unsigned_20long_29($12);
    SAFE_HEAP_STORE_i32_4_4($3, 24, $12 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($3, 16, $0);
    SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
   }
   if ($1) {
    __memcpy($0, $8 + 4 | 0, $1)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
   _emval_run_destructors($9 | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
   $1 = SAFE_HEAP_LOAD_i32_1_1($3, 27);
   strncpy($7 + 74 | 0, ($1 | 0) < 0 ? $0 : $3 + 16 | 0, 39);
   if (($1 | 0) < 0) {
    dlfree($0)
   }
   _emval_decref($5 | 0);
   _emval_decref($4 | 0);
   _emval_decref($10 | 0);
   __stack_pointer = $3 + 32 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const() {
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(8867);
  wasm2js_trap();
 }
 
 function embind_init_mallinfo_28_29() {
  _embind_register_function(7023, 1, 48472, 48504, 24, 25, 0);
 }
 
 function emscripten__internal__Invoker_emscripten__val___invoke_28emscripten__val_20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  FUNCTION_TABLE[$0 | 0]($1 + 12 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
  _emval_decref($0 | 0);
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_WrapImGuiContext_28_29() {
  _embind_register_class(48528, 48556, 48596, 0, 48504, 26, 48612, 0, 48612, 0, 2017, 48614, 27);
 }
 
 function void_20const__20emscripten__internal__getActualType_WrapImGuiContext__28WrapImGuiContext__29($0) {
  $0 = $0 | 0;
  return 48528;
 }
 
 function void_20emscripten__internal__raw_destructor_WrapImGuiContext__28WrapImGuiContext__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  if ($0) {
   $2 = ImGui__GetCurrentContext_28_29();
   ImGui__SetCurrentContext_28ImGuiContext__29(SAFE_HEAP_LOAD_i32_4_4($0, 0));
   $3 = ImGui__GetIO_28_29();
   SAFE_HEAP_STORE_i32_4_4($3, 208, 0);
   SAFE_HEAP_STORE_i64_8_8($3, 200, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($3, 24, 0, 0);
   ImGui__SetCurrentContext_28ImGuiContext__29($2);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $3 = (wasm2js_i32$0 = $3, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568), wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   $8 = __stack_pointer - 16 | 0;
   __stack_pointer = $8;
   $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 152 | 0, 0);
   label$1 : {
    if (!$2) {
     break label$1
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 1)) {
     break label$1
    }
    SAFE_HEAP_STORE_i32_1_1($2, 16, 0);
    $2 = ImFontAtlas___ImFontAtlas_28_29($2);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($1) {
     $1 = $1 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($3, 152, 0);
   if (SAFE_HEAP_LOAD_i32_1_U_1($3, 0)) {
    label$4 : {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($3, 12125)) {
      break label$4
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 32 | 0, 0);
     if (!$2) {
      break label$4
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     SAFE_HEAP_STORE_i32_4_4(0, 73568, $3);
     SAFE_HEAP_STORE_i32_4_4($3, 12128, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 0);
     $4 = ImGui__SaveIniSettingsToMemory_28unsigned_20long__29($8 + 12 | 0);
     $2 = fopen($2, 2145);
     if ($2) {
      fwrite($4, SAFE_HEAP_LOAD_i32_4_4($8, 12), $2);
      fclose($2);
     }
     SAFE_HEAP_STORE_i32_4_4(0, 73568, $1);
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 12180) | 0) > 0) {
     $2 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($3, 12188) + Math_imul($2, 20) | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0) == 6) {
       FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0]($3, $1)
      }
      $2 = $2 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 12180) | 0) > ($2 | 0)) {
       continue
      }
      break;
     };
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 7008) | 0) > 0) {
     $2 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 7016) + ($2 << 2) | 0, 0);
      if ($1) {
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       if ($4) {
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 560) | 0) > 0) {
        $4 = 0;
        while (1) {
         $5 = SAFE_HEAP_LOAD_i32_4_4($1, 568) + Math_imul($4, 124) | 0;
         ImDrawListSplitter__ClearFreeMemory_28_29($5 + 104 | 0);
         $6 = SAFE_HEAP_LOAD_i32_4_4($5 + 120 | 0, 0);
         if ($6) {
          $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          if ($7) {
           $7 = $7 + 876 | 0;
           SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
          }
          ((wasm2js_i32$1 = $6, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
         }
         $5 = SAFE_HEAP_LOAD_i32_4_4($5 + 100 | 0, 0);
         if ($5) {
          $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          if ($6) {
           $6 = $6 + 876 | 0;
           SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
          }
          ((wasm2js_i32$2 = $5, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
         }
         $4 = $4 + 1 | 0;
         if ((SAFE_HEAP_LOAD_i32_4_4($1, 560) | 0) > ($4 | 0)) {
          continue
         }
         break;
        };
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 568 | 0, 0);
       if ($4) {
        SAFE_HEAP_STORE_i64_8_4($1, 560, 0, 0);
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
        SAFE_HEAP_STORE_i32_4_4($1, 568, 0);
       }
       ImDrawList___ImDrawList_28_29($1 + 584 | 0);
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 568);
       if ($4) {
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 556 | 0, 0);
       if ($4) {
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 412 | 0, 0);
       if ($4) {
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 400 | 0, 0);
       if ($4) {
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 360 | 0, 0);
       if ($4) {
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 204 | 0, 0);
       if ($4) {
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($4) {
        $4 = $4 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      $2 = $2 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 7008) | 0) > ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7016 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7008, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7016, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7028 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7020, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7028, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7040 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7032, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7040, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($3, 7080, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7052 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7044, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7052, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7064 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7056, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7064, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($3, 7508, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 7204, 0);
    SAFE_HEAP_STORE_i64_8_4($3, 7084, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 7184, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 7092, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7404 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7396, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7404, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7416 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7408, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7416, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7428 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7420, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7428, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7476 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7468, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7476, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7488 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7480, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7488, 0);
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 7496) | 0) > 0) {
     $2 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 7504) + ($2 << 2) | 0, 0);
      if ($1) {
       $4 = SAFE_HEAP_LOAD_i32_4_4($1, 44);
       if ($4) {
        $4 = ImDrawList___ImDrawList_28_29($4);
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$1 = $4, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 48 | 0, 0);
       if ($4) {
        $4 = ImDrawList___ImDrawList_28_29($4);
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if ($5) {
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       $5 = $1 + 96 | 0;
       $4 = $1 + 120 | 0;
       while (1) {
        $4 = $4 - 12 | 0;
        $6 = SAFE_HEAP_LOAD_i32_4_4($4 + 8 | 0, 0);
        if ($6) {
         $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if ($7) {
          $7 = $7 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
         }
         ((wasm2js_i32$1 = $6, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
        }
        if (($4 | 0) != ($5 | 0)) {
         continue
        }
        break;
       };
       $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($4) {
        $4 = $4 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      $2 = $2 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 7496) | 0) > ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7504 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 7496, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 7504, 0);
    }
    ImPool_ImGuiTabBar___Clear_28_29($3 + 8116 | 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8156 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 8148, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8156, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8168 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 8160, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8168, 0);
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 8024) | 0) > 0) {
     $2 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($3, 8032) + Math_imul($2, 28) | 0) + 24 | 0, 0);
      if ($1) {
       $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($4) {
        $4 = $4 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      $2 = $2 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 8024) | 0) > ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8032 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 8024, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8032, 0);
    }
    ImPool_ImGuiTable___Clear_28_29($3 + 8056 | 0);
    if ((SAFE_HEAP_LOAD_i32_4_4($3, 8044) | 0) > 0) {
     $2 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($3, 8052) + Math_imul($2, 104) | 0;
      ImDrawListSplitter__ClearFreeMemory_28_29($1 + 16 | 0);
      $1 = SAFE_HEAP_LOAD_i32_4_4($1 + 32 | 0, 0);
      if ($1) {
       $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($4) {
        $4 = $4 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $1, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      $2 = $2 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($3, 8044) | 0) > ($2 | 0)) {
       continue
      }
      break;
     };
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8052 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 8044, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8052, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8108 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 8100, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8108, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12092 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 12084, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 12092, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12104 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 12096, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 12104, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8200 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3 - -8192 | 0, 0, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8200, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8212 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3 + 8204 | 0, 0, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8212, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8224 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3 + 8216 | 0, 0, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 8224, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12164 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 12156, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 12164, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12152 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 12144, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 12152, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 12204);
    if ($2) {
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 71168) | 0) != ($2 | 0)) {
      fclose($2)
     }
     SAFE_HEAP_STORE_i32_4_4($3, 12204, 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12216 | 0, 0);
    if ($2) {
     SAFE_HEAP_STORE_i64_8_4($3, 12208, 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     SAFE_HEAP_STORE_i32_4_4($3, 12216, 0);
    }
    SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
   }
   __stack_pointer = $8 + 16 | 0;
   if ((SAFE_HEAP_LOAD_i32_4_4(0, 73568) | 0) == ($3 | 0)) {
    SAFE_HEAP_STORE_i32_4_4(0, 73568, 0)
   }
   if ($3) {
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12292 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12216 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12188 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12176 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12164 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12152 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12140 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12104 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 12092 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    ImFont___ImFont_28_29($3 + 11880 | 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8224 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8212 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8200 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8168 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8156 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    ImPool_ImGuiTabBar___Clear_28_29($3 + 8116 | 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8136 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8124 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8108 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8096 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    ImPool_ImGuiTable___Clear_28_29($3 + 8056 | 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8076 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8064 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8052 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8032 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 8e3 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7504 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7488 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7476 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7464 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7452 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7440 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7428 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7416 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7404 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7064 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7052 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7040 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7028 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 7016 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3 + 5412 | 0, 0);
    if ($2) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($1) {
      $1 = $1 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0);
     }
     ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    if ($2) {
     $2 = $2 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $3, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 180) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 176) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 172) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 171) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 160))
   }
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 152) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 148) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 147) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 136))
   }
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 128) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 124) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 120) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 119) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 108))
   }
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 100) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 96) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 92) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 88) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 84) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 80) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 72) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 68) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 64) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 63) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 52))
   }
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 48) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 44) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 40) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 27) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 16))
   }
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 4))
   }
   dlfree($0);
  }
 }
 
 function embind_init_ImVec2_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(48628, 48648, 48676, 0, 48504, 28, 48612, 0, 48612, 0, 16568, 48614, 29);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(48628, 1643, 72796, 48692, 30, $0 | 0, 72796, 48696, 31, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(48628, 1245, 72796, 48692, 30, $0 | 0, 72796, 48696, 31, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 32);
  _embind_register_class_function(48628, 3608, 4, 48704, 48720, 33, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 34);
  _embind_register_class_function(48628, 1159, 3, 48728, 48740, 35, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 36);
  _embind_register_class_function(48628, 4785, 3, 48748, 48740, 37, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImVec2__28ImVec2__29($0) {
  $0 = $0 | 0;
  return 48628;
 }
 
 function void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree($0)
  }
 }
 
 function float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0));
 }
 
 function void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  SAFE_HEAP_STORE_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0, $2);
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 4, $2);
  SAFE_HEAP_STORE_i32_4_4($4, 8, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
  FUNCTION_TABLE[$0 | 0]($4 + 12 | 0, $4 + 8 | 0, $4 + 4 | 0, $4);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($4, 12);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 4, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
  FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $3 + 8 | 0, $3 + 4 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28emscripten__val_2c_20emscripten__val_29_2c_20bool_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28___29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  $0 = FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $3 + 8 | 0) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImVec4_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(48768, 48788, 48816, 0, 48504, 38, 48612, 0, 48612, 0, 16367, 48614, 39);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(48768, 1643, 72796, 48692, 40, $0 | 0, 72796, 48696, 41, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(48768, 1245, 72796, 48692, 40, $0 | 0, 72796, 48696, 41, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 8);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 8);
  _embind_register_class_property(48768, 1063, 72796, 48692, 40, $0 | 0, 72796, 48696, 41, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(48768, 1857, 72796, 48692, 40, $0 | 0, 72796, 48696, 41, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 42);
  _embind_register_class_function(48768, 3608, 6, 48832, 48856, 43, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 44);
  _embind_register_class_function(48768, 1159, 3, 48728, 48740, 35, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 45);
  _embind_register_class_function(48768, 4785, 3, 48748, 48740, 37, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImVec4__28ImVec4__29($0) {
  $0 = $0 | 0;
  return 48768;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 20, $2);
  SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $4);
  SAFE_HEAP_STORE_i32_4_4($6, 8, $5);
  FUNCTION_TABLE[$0 | 0]($6 + 28 | 0, $6 + 24 | 0, $6 + 20 | 0, $6 + 16 | 0, $6 + 12 | 0, $6 + 8 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($6, 28) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 28);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 16) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 20) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 24) | 0);
  __stack_pointer = $6 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGuiInputTextCallbackData_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(48896, 48936, 48984, 0, 48504, 46, 48612, 0, 48612, 0, 13787, 48614, 47);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(48896, 9451, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(48896, 4951, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(48896, 6491, 72712, 49e3, 50, $0 | 0, 72712, 49004, 51, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(48896, 1223, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 53);
  _embind_register_class_property(48896, 9619, 48496, 49e3, 54, $0 | 0, 48496, 49004, 55, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 24);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 24);
  _embind_register_class_property(48896, 7850, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 28);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 28);
  _embind_register_class_property(48896, 10340, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 32);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 32);
  _embind_register_class_property(48896, 1076, 72652, 49e3, 56, $0 | 0, 72652, 49004, 57, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 36);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 36);
  _embind_register_class_property(48896, 4470, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 40);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 40);
  _embind_register_class_property(48896, 2727, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 44);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 44);
  _embind_register_class_property(48896, 11792, 72724, 49e3, 48, $0 | 0, 72724, 49004, 49, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 58);
  _embind_register_class_function(48896, 4355, 4, 49088, 49104, 59, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 60);
  _embind_register_class_function(48896, 4343, 4, 49120, 49104, 61, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 62);
  _embind_register_class_function(48896, 7473, 2, 49136, 49e3, 63, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiInputTextCallbackData__28ImGuiInputTextCallbackData__29($0) {
  $0 = $0 | 0;
  return 48896;
 }
 
 function int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0) | 0;
 }
 
 function void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0, $2);
 }
 
 function unsigned_20short_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___getWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0) | 0;
 }
 
 function void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___setWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20unsigned_20short_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0, $2);
 }
 
 function embind_init_ImGuiInputTextCallbackData_28_29__$_0____invoke_28ImGuiInputTextCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 20);
  $3 = strlen($4);
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 23, $3);
     $1 = $2 + 12 | 0;
     break label$2;
    }
    $5 = ($3 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($5);
    SAFE_HEAP_STORE_i32_4_4($2, 20, $5 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
    SAFE_HEAP_STORE_i32_4_4($2, 16, $3);
   }
   if ($3) {
    memmove($1, $4, $3)
   }
   SAFE_HEAP_STORE_i32_1_1($1 + $3 | 0, 0, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
   $4 = SAFE_HEAP_LOAD_i32_1_1($2, 23);
   $1 = ($4 | 0) < 0;
   $3 = $1 ? $3 : $4 & 127;
   $4 = dlmalloc($3 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
   __memcpy($4 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 12), wasm2js_i32$1 = $2 + 12 | 0, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3);
   SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49072, $2 + 24 | 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 23) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 12))
   }
   __stack_pointer = $2 + 32 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGuiInputTextCallbackData_28_29__$_1____invoke_28ImGuiInputTextCallbackData__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $7 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  $4 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 49072, $2 + 12 | 0);
  label$1 : {
   if ($4 < 4294967296.0 & $4 >= 0.0) {
    $5 = ~~$4 >>> 0;
    break label$1;
   }
   $5 = 0;
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  if ($3 >>> 0 < 2147483632) {
   $8 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
   label$4 : {
    if ($3 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 11, $3);
     $1 = $2;
     break label$4;
    }
    $6 = ($3 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($2, 4, $3);
   }
   if ($3) {
    __memcpy($1, $5 + 4 | 0, $3)
   }
   SAFE_HEAP_STORE_i32_1_1($1 + $3 | 0, 0, 0);
   _emval_run_destructors($8 | 0);
   strncpy($7, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 0), wasm2js_i32$1 = $2, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), SAFE_HEAP_LOAD_i32_4_4($0, 28) - 1 | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 0))
   }
   __stack_pointer = $2 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($2 + 12 | 0, $1);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $3 + 12 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0) | 0;
 }
 
 function void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0, $2);
 }
 
 function emscripten__internal__MethodInvoker_void_20_28ImGuiInputTextCallbackData____29_28int_2c_20int_29_2c_20void_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20int___invoke_28void_20_28ImGuiInputTextCallbackData____20const__29_28int_2c_20int_29_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($4 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($4 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  FUNCTION_TABLE[$0 | 0]($1, $2, $3);
 }
 
 function embind_init_ImGuiInputTextCallbackData_28_29__$_2____invoke_28ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 0), wasm2js_i32$1 = $2, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = strlen($6);
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
  label$3 : {
   if (($2 + $5 | 0) >= (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
    if (!($3 & 262144)) {
     break label$3
    }
    $3 = $2 << 2;
    $4 = ($2 | 0) <= 256 ? 256 : $2;
    $4 = $5 + (($2 | 0) < 8 ? 32 : ($3 | 0) < ($4 | 0) ? $3 : $4) | 0;
    $5 = $4 + 1 | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $4 = $4 + 2 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($3 + 8208 | 0, 0) | 0) < ($4 | 0)) {
     $7 = ImGui__MemAlloc_28unsigned_20long_29($4);
     $8 = SAFE_HEAP_LOAD_i32_4_4($3 + 8212 | 0, 0);
     if ($8) {
      __memcpy($7, $8, SAFE_HEAP_LOAD_i32_4_4($3, 8204));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($3, 8212));
     }
     SAFE_HEAP_STORE_i32_4_4($3, 8208, $4);
     SAFE_HEAP_STORE_i32_4_4($3, 8212, $7);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 20, SAFE_HEAP_LOAD_i32_4_4($3, 8212));
    SAFE_HEAP_STORE_i32_4_4($3 + 8232 | 0, 0, $5);
    SAFE_HEAP_STORE_i32_4_4($0, 28, $5);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   if (($1 | 0) != ($3 | 0)) {
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 20) + $1 | 0;
    memmove($5 + $2 | 0, $5, $3 - $1 | 0);
   }
   __memcpy(SAFE_HEAP_LOAD_i32_4_4($0, 20) + $1 | 0, $6, $2);
   SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 20) + (SAFE_HEAP_LOAD_i32_4_4($0, 24) + $2 | 0) | 0, 0, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
   if (($1 | 0) <= ($3 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($0, 36, $2 + $3 | 0)
   }
   SAFE_HEAP_STORE_i32_1_1($0, 32, 1);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 36);
   SAFE_HEAP_STORE_i32_4_4($0, 44, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 40, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 24, SAFE_HEAP_LOAD_i32_4_4($0, 24) + $2 | 0);
  }
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20void_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28___29_28ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  if ($5 >>> 0 < 2147483632) {
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$2 : {
    if ($5 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($4, 15, $5);
     $0 = $4 + 4 | 0;
     break label$2;
    }
    $6 = ($5 | 15) + 1 | 0;
    $0 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($4, 12, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($4, 4, $0);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
   }
   if ($5) {
    __memcpy($0, $3 + 4 | 0, $5)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $5 | 0, 0, 0);
   FUNCTION_TABLE[$7 | 0]($1, $2, $4 + 4 | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 4))
   }
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function ImGuiInputTextCallbackData__HasSelection_28_29_20const($0) {
  $0 = $0 | 0;
  return (SAFE_HEAP_LOAD_i32_4_4($0, 40) | 0) != (SAFE_HEAP_LOAD_i32_4_4($0, 44) | 0) | 0;
 }
 
 function emscripten__internal__MethodInvoker_bool_20_28ImGuiInputTextCallbackData____29_28_29_20const_2c_20bool_2c_20ImGuiInputTextCallbackData_20const____invoke_28bool_20_28ImGuiInputTextCallbackData____20const__29_28_29_20const_2c_20ImGuiInputTextCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($2 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($2 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  return FUNCTION_TABLE[$0 | 0]($1) | 0;
 }
 
 function std____2____throw_length_error_5babi_v15007_5d_28char_20const__29($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = std__exception__exception_5babi_v15007_5d_28_29(__cxa_allocate_exception(8));
  SAFE_HEAP_STORE_i32_4_4($1, 0, 73136);
  $2 = strlen($0);
  $3 = operator_20new_28unsigned_20long_29($2 + 13 | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 4, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
  SAFE_HEAP_STORE_i32_4_4($1 + 4 | 0, 0, __memcpy($3 + 12 | 0, $0, $2 + 1 | 0));
  SAFE_HEAP_STORE_i32_4_4($1, 0, 73184);
  __cxa_throw($1 | 0, 73216, 64);
  wasm2js_trap();
 }
 
 function std____throw_bad_array_new_length_5babi_v15007_5d_28_29() {
  var $0 = 0;
  $0 = std__exception__exception_5babi_v15007_5d_28_29(__cxa_allocate_exception(4));
  SAFE_HEAP_STORE_i32_4_4($0, 0, 72984);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 73004);
  __cxa_throw($0 | 0, 73116, 65);
  wasm2js_trap();
 }
 
 function embind_init_ImGuiSizeCallbackData_28_29() {
  var $0 = 0;
  _embind_register_class(49168, 49204, 49248, 0, 48504, 66, 48612, 0, 48612, 0, 13814, 48614, 67);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 68);
  _embind_register_class_property(49168, 4621, 48496, 49e3, 69, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 70);
  _embind_register_class_property(49168, 10184, 48496, 49e3, 69, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 71);
  _embind_register_class_property(49168, 10381, 48496, 49e3, 69, $0 | 0, 0, 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiSizeCallbackData__28ImGuiSizeCallbackData__29($0) {
  $0 = $0 | 0;
  return 49168;
 }
 
 function embind_init_ImGuiSizeCallbackData_28_29__$_0____invoke_28ImGuiSizeCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiSizeCallbackData_28_29__$_1____invoke_28ImGuiSizeCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 12 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiSizeCallbackData_28_29__$_2____invoke_28ImGuiSizeCallbackData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 20 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiListClipper_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(49284, 49312, 49352, 0, 48504, 72, 48612, 0, 48612, 0, 6209, 48614, 73);
  _embind_register_class_constructor(49284, 1, 49368, 48504, 74, 75);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(49284, 2714, 72724, 49e3, 76, $0 | 0, 72724, 49004, 77, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(49284, 11781, 72724, 49e3, 76, $0 | 0, 72724, 49004, 77, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 8);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 8);
  _embind_register_class_property(49284, 2848, 72724, 49e3, 76, $0 | 0, 72724, 49004, 77, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(49284, 3341, 72796, 48692, 78, $0 | 0, 72796, 48696, 79, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(49284, 14003, 72796, 48692, 78, $0 | 0, 72796, 48696, 79, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 80);
  _embind_register_class_function(49284, 7622, 4, 49376, 49392, 81, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 82);
  _embind_register_class_function(49284, 11801, 2, 49400, 49408, 83, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 84);
  _embind_register_class_function(49284, 6932, 2, 49412, 49e3, 85, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiListClipper__28ImGuiListClipper__29($0) {
  $0 = $0 | 0;
  return 49284;
 }
 
 function void_20emscripten__internal__raw_destructor_ImGuiListClipper__28ImGuiListClipper__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(ImGuiListClipper___ImGuiListClipper_28_29($0))
  }
 }
 
 function emscripten__internal__Invoker_ImGuiListClipper____invoke_28ImGuiListClipper__20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  return FUNCTION_TABLE[$0 | 0]() | 0;
 }
 
 function ImGuiListClipper__20emscripten__internal__operator_new_ImGuiListClipper__28_29() {
  return ImGuiListClipper__ImGuiListClipper_28_29(operator_20new_28unsigned_20long_29(24)) | 0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28int_2c_20float_29_2c_20void_2c_20ImGuiListClipper__2c_20int_2c_20float___invoke_28void_20_28ImGuiListClipper____20const__29_28int_2c_20float_29_2c_20ImGuiListClipper__2c_20int_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($4 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($4 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  FUNCTION_TABLE[$0 | 0]($1, $2, $3);
 }
 
 function emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28_29_2c_20void_2c_20ImGuiListClipper____invoke_28void_20_28ImGuiListClipper____20const__29_28_29_2c_20ImGuiListClipper__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($2 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($2 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  FUNCTION_TABLE[$0 | 0]($1);
 }
 
 function embind_init_ImGuiTableColumnSortSpecs_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(49448, 49488, 49536, 0, 48504, 86, 48612, 0, 48612, 0, 5383, 48614, 87);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(49448, 15037, 72736, 49e3, 88, $0 | 0, 72736, 49004, 89, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(49448, 1469, 72700, 49e3, 90, $0 | 0, 72700, 49004, 91, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 6);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 6);
  _embind_register_class_property(49448, 6396, 72700, 49e3, 90, $0 | 0, 72700, 49004, 91, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 92);
  _embind_register_class_property(49448, 7459, 48496, 49e3, 93, $0 | 0, 0, 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiTableColumnSortSpecs__28ImGuiTableColumnSortSpecs__29($0) {
  $0 = $0 | 0;
  return 49448;
 }
 
 function short_20emscripten__internal__MemberAccess_ImGuiTableColumnSortSpecs_2c_20short___getWire_ImGuiTableColumnSortSpecs__28short_20ImGuiTableColumnSortSpecs____20const__2c_20ImGuiTableColumnSortSpecs_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return SAFE_HEAP_LOAD_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($0, 0) + $1 | 0, 0) | 0;
 }
 
 function embind_init_ImGuiTableColumnSortSpecs_28_29__$_0____invoke_28ImGuiTableColumnSortSpecs_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_1_1($1, 8));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72724, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiTableSortSpecs_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(49576, 49608, 49648, 0, 48504, 94, 48612, 0, 48612, 0, 5363, 48614, 95);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 96);
  _embind_register_class_function(49576, 13511, 3, 49664, 48740, 97, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(49576, 2859, 72724, 49e3, 98, $0 | 0, 72724, 49004, 99, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 8);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 8);
  _embind_register_class_property(49576, 1065, 72652, 49e3, 100, $0 | 0, 72652, 49004, 101, $1 | 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiTableSortSpecs__28ImGuiTableSortSpecs__29($0) {
  $0 = $0 | 0;
  return 49576;
 }
 
 function embind_init_ImGuiTableSortSpecs_28_29__$_0____invoke_28ImGuiTableSortSpecs__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0) + Math_imul($2, 12) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49536, $3 + 8 | 0) | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImGuiTableSortSpecs__2c_20int_29_2c_20emscripten__val_2c_20ImGuiTableSortSpecs__2c_20int___invoke_28emscripten__val_20_28___29_28ImGuiTableSortSpecs__2c_20int_29_2c_20ImGuiTableSortSpecs__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($3 + 12 | 0, $1, $2);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
  _emval_decref($0 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImDrawCmd_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(49688, 49708, 49740, 0, 48504, 102, 48612, 0, 48612, 0, 11805, 48614, 103);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 28);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 28);
  _embind_register_class_property(49688, 2890, 72736, 49e3, 104, $0 | 0, 72736, 49004, 105, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 106);
  _embind_register_class_property(49688, 3722, 48496, 49e3, 107, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 108);
  _embind_register_class_property(49688, 12804, 48496, 49e3, 107, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 20);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 20);
  _embind_register_class_property(49688, 3429, 72736, 49e3, 104, $0 | 0, 72736, 49004, 105, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 24);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 24);
  _embind_register_class_property(49688, 3439, 72736, 49e3, 104, $0 | 0, 72736, 49004, 105, $1 | 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImDrawCmd__28ImDrawCmd__29($0) {
  $0 = $0 | 0;
  return 49688;
 }
 
 function embind_init_ImDrawCmd_28_29__$_0____invoke_28ImDrawCmd_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48816, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawCmd_28_29__$_1____invoke_28ImDrawCmd_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($1, 16));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72724, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(49772, 49796, 49828, 0, 48504, 109, 48612, 0, 48612, 0, 2556, 48614, 110);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 111);
  _embind_register_class_function(49772, 5329, 3, 49844, 49004, 112, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 113);
  _embind_register_class_property(49772, 6325, 48496, 49e3, 114, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 115);
  _embind_register_class_property(49772, 6315, 48496, 49e3, 114, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 36);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 36);
  _embind_register_class_property(49772, 4951, 72724, 49e3, 116, $0 | 0, 72724, 49004, 117, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 118);
  _embind_register_class_function(49772, 3699, 5, 49904, 49924, 119, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 120);
  _embind_register_class_function(49772, 7827, 2, 49932, 49408, 121, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 122);
  _embind_register_class_function(49772, 3687, 2, 49932, 49408, 121, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 123);
  _embind_register_class_function(49772, 15076, 3, 49940, 49004, 124, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 125);
  _embind_register_class_function(49772, 15063, 2, 49932, 49408, 121, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 126);
  _embind_register_class_function(49772, 7628, 3, 49952, 48740, 127, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 128);
  _embind_register_class_function(49772, 1527, 3, 49952, 48740, 127, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 129);
  _embind_register_class_function(49772, 11e3, 6, 49968, 49992, 130, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 131);
  _embind_register_class_function(49772, 3803, 8, 5e4, 50032, 132, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 133);
  _embind_register_class_function(49772, 12491, 7, 50048, 50076, 134, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 135);
  _embind_register_class_function(49772, 6113, 8, 50096, 50128, 136, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 137);
  _embind_register_class_function(49772, 12728, 8, 50144, 50176, 138, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 139);
  _embind_register_class_function(49772, 12553, 7, 50192, 50220, 140, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 141);
  _embind_register_class_function(49772, 11302, 7, 50240, 50268, 142, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 143);
  _embind_register_class_function(49772, 12519, 6, 50288, 50312, 144, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 145);
  _embind_register_class_function(49772, 11326, 7, 50320, 50348, 146, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 147);
  _embind_register_class_function(49772, 12537, 6, 50368, 50392, 148, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 149);
  _embind_register_class_function(49772, 7575, 7, 50320, 50348, 146, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 150);
  _embind_register_class_function(49772, 12505, 6, 50368, 50392, 148, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 151);
  _embind_register_class_function(49772, 15377, 5, 50400, 49924, 152, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 153);
  _embind_register_class_function(49772, 15170, 9, 50432, 50468, 154, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 155);
  _embind_register_class_function(49772, 11589, 8, 50576, 50128, 156, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 157);
  _embind_register_class_function(49772, 12715, 12, 50608, 50656, 158, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 159);
  _embind_register_class_function(49772, 12690, 10, 50672, 50712, 160, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 161);
  _embind_register_class_function(49772, 10952, 7, 50736, 50268, 162, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 163);
  _embind_register_class_function(49772, 12471, 5, 50768, 49924, 164, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 165);
  _embind_register_class_function(49772, 13496, 9, 50800, 50836, 166, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 167);
  _embind_register_class_function(49772, 13435, 8, 50848, 50880, 168, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 169);
  _embind_register_class_function(49772, 6538, 2, 49932, 49408, 121, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 170);
  _embind_register_class_function(49772, 7102, 3, 49940, 49004, 124, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 171);
  _embind_register_class_function(49772, 10702, 3, 49940, 49004, 124, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 172);
  _embind_register_class_function(49772, 1391, 3, 50892, 49004, 173, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 174);
  _embind_register_class_function(49772, 11525, 5, 50912, 50932, 175, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 176);
  _embind_register_class_function(49772, 7113, 7, 50944, 50972, 177, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 178);
  _embind_register_class_function(49772, 2655, 6, 50992, 50392, 179, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 180);
  _embind_register_class_function(49772, 7079, 6, 51024, 50312, 181, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 182);
  _embind_register_class_function(49772, 7052, 5, 51056, 49924, 183, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 184);
  _embind_register_class_function(49772, 3774, 6, 51088, 51112, 185, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 186);
  _embind_register_class_function(49772, 3216, 3, 51120, 49004, 187, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 188);
  _embind_register_class_function(49772, 11536, 2, 49932, 49408, 121, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 189);
  _embind_register_class_function(49772, 3050, 3, 51120, 49004, 187, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 190);
  _embind_register_class_function(49772, 8528, 4, 51136, 49104, 191, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 192);
  _embind_register_class_function(49772, 11815, 2, 49932, 49408, 121, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 193);
  _embind_register_class_function(49772, 10464, 4, 51152, 49104, 194, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 195);
  _embind_register_class_function(49772, 10450, 4, 51152, 49104, 194, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 196);
  _embind_register_class_function(49772, 3749, 5, 51168, 49924, 197, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 198);
  _embind_register_class_function(49772, 14763, 7, 50192, 50220, 140, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 199);
  _embind_register_class_function(49772, 14774, 11, 51200, 51244, 200, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 201);
  _embind_register_class_function(49772, 1255, 5, 51168, 49924, 197, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 202);
  _embind_register_class_function(49772, 1508, 3, 51260, 49004, 203, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 204);
  _embind_register_class_function(49772, 1247, 5, 51168, 49924, 197, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 205);
  _embind_register_class_function(49772, 2790, 3, 51272, 51284, 206, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImDrawList__28ImDrawList__29($0) {
  $0 = $0 | 0;
  return 49772;
 }
 
 function void_20emscripten__internal__raw_destructor_ImDrawList__28ImDrawList__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(ImDrawList___ImDrawList_28_29($0))
  }
 }
 
 function embind_init_ImDrawList_28_29__$_0____invoke_28ImDrawList_20const__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (SAFE_HEAP_LOAD_i32_4_4($0, 0)) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   while (1) {
    SAFE_HEAP_STORE_i32_4_4($2, 0, $4);
    $3 = _emval_take_value(49740, $2 | 0) | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 0, $6);
    $5 = _emval_take_value(72736, $2 | 0) | 0;
    _emval_incref($3 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
    _emval_incref($5 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $5);
    _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 2, 49856, $2 | 0) | 0);
    _emval_decref($5 | 0);
    _emval_decref($3 | 0);
    $3 = $4;
    $4 = $3 + 40 | 0;
    $6 = SAFE_HEAP_LOAD_i32_4_4($3, 28) + $6 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 40) | 0) != ($4 | 0)) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_1____invoke_28ImDrawList_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
  SAFE_HEAP_STORE_i32_4_4($2, 12, SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0));
  SAFE_HEAP_STORE_i32_4_4($2, 8, $3 << 1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49896, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_2____invoke_28ImDrawList_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 24);
  SAFE_HEAP_STORE_i32_4_4($2, 12, SAFE_HEAP_LOAD_i32_4_4($1 + 32 | 0, 0));
  SAFE_HEAP_STORE_i32_4_4($2, 8, Math_imul($3, 20));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49896, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_3____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_4($4, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($4, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $4 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_8($4, 8, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_8($4, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
  ImDrawList__PushClipRect_28ImVec2_2c_20ImVec2_2c_20bool_29($0, $4 + 8 | 0, $4, $3);
  __stack_pointer = $4 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($5, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $5 + 12 | 0, $5 + 8 | 0, $4);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_4____invoke_28ImDrawList__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 72724, $2 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  if (Math_abs($3) < 2147483648.0) {
   $1 = ~~$3
  } else {
   $1 = -2147483648
  }
  ImDrawList__PushTextureID_28void__29($0, $1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_5____invoke_28ImDrawList__2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i64_8_4($3, 8, SAFE_HEAP_LOAD_i64_8_4(((SAFE_HEAP_LOAD_i32_4_4($1, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($1 + 68 | 0, 0) | 0) - 16 | 0, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3 + 8 | 0, $3 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 4) | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImDrawList__2c_20emscripten__val_29_2c_20emscripten__val_2c_20ImDrawList__2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28ImDrawList__2c_20emscripten__val_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
  FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $1, $3 + 8 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_6____invoke_28ImDrawList__2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i64_8_4($3, 8, SAFE_HEAP_LOAD_i64_8_4(((SAFE_HEAP_LOAD_i32_4_4($1, 60) << 4) + SAFE_HEAP_LOAD_i32_4_4($1 + 68 | 0, 0) | 0) - 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3 + 8 | 0, $3 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 4) | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_7____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
  ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($0, $1, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $5), $3, $4);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $6 + 12 | 0, $6 + 8 | 0, $4, $5);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_8____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  $5 = $5 | 0;
  $6 = Math_fround($6);
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  SAFE_HEAP_STORE_i64_8_4($7, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $7 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 0, 0, 0);
  ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $1, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $7), $3, $4, $5, $6);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  $6 = $6 | 0;
  $7 = Math_fround($7);
  var $8 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($8, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $8 + 12 | 0, $8 + 8 | 0, $4, $5, $6, $7);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
  __stack_pointer = $8 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_9____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 0, 0, 0);
  ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $6), $3, $4, $5);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $7 + 12 | 0, $7 + 8 | 0, $4, $5, $6);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_10____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  SAFE_HEAP_STORE_i64_8_4($7, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $7 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 0, 0, 0);
  ImDrawList__AddRectFilledMultiColor_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $7), $3, $4, $5, $6);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($8, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $8 + 12 | 0, $8 + 8 | 0, $4, $5, $6, $7);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
  __stack_pointer = $8 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_11____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = Math_fround($6);
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  SAFE_HEAP_STORE_i64_8_4($8, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $8 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 8, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $8 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 0, 0, 0);
  $10 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $8);
  if ($5 >>> 0 >= 16777216) {
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($7 | 0) != ($4 | 0)) {
     break label$2
    }
    $9 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
    $7 = $7 + 1 | 0;
    $7 = ($7 | 0) < ($9 | 0) ? $9 : $7;
    if (($4 | 0) >= ($7 | 0)) {
     break label$2
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29($7 << 3);
    $9 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($9) {
     __memcpy($4, $9, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $7);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $4);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $7 = $4 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $7);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$6 : {
    if (($7 | 0) != ($1 | 0)) {
     break label$6
    }
    $7 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
    $4 = $4 + 2 | 0;
    $4 = ($4 | 0) < ($7 | 0) ? $7 : $4;
    if (($1 | 0) >= ($4 | 0)) {
     break label$6
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
    $7 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($7) {
     __memcpy($1, $7, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $4);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $1);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $4 = $2 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $4);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$10 : {
    if (($4 | 0) != ($1 | 0)) {
     break label$10
    }
    $4 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
    $2 = $2 + 2 | 0;
    $2 = ($2 | 0) < ($4 | 0) ? $4 : $2;
    if (($1 | 0) >= ($2 | 0)) {
     break label$10
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($4) {
     __memcpy($1, $4, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $1);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $3 = $2 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $3);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$14 : {
    if (($3 | 0) != ($1 | 0)) {
     break label$14
    }
    $3 = $1;
    $1 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
    $2 = $2 + 2 | 0;
    $1 = ($1 | 0) > ($2 | 0) ? $1 : $2;
    if (($3 | 0) >= ($1 | 0)) {
     break label$14
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($3) {
     __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($10, 0), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 92), $1, $5, 1, $6);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  __stack_pointer = $8 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = Math_fround($7);
  var $8 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($8, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($8, 4, $4);
  SAFE_HEAP_STORE_i32_4_4($8, 0, $5);
  FUNCTION_TABLE[$0 | 0]($1, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $8, $6, $7);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
  __stack_pointer = $8 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_12____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  SAFE_HEAP_STORE_i64_8_4($7, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $7 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $7 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 8, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $7 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 0, 0, 0);
  $9 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $7);
  if ($5 >>> 0 >= 16777216) {
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($6 | 0) != ($4 | 0)) {
     break label$2
    }
    $8 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
    $6 = $6 + 1 | 0;
    $6 = ($6 | 0) < ($8 | 0) ? $8 : $6;
    if (($4 | 0) >= ($6 | 0)) {
     break label$2
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29($6 << 3);
    $8 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($8) {
     __memcpy($4, $8, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $4);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $6 = $4 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $6);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$6 : {
    if (($6 | 0) != ($1 | 0)) {
     break label$6
    }
    $6 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
    $4 = $4 + 2 | 0;
    $4 = ($4 | 0) < ($6 | 0) ? $6 : $4;
    if (($1 | 0) >= ($4 | 0)) {
     break label$6
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
    $6 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($6) {
     __memcpy($1, $6, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $4);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $1);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $4 = $2 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $4);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$10 : {
    if (($4 | 0) != ($1 | 0)) {
     break label$10
    }
    $4 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
    $2 = $2 + 2 | 0;
    $2 = ($2 | 0) < ($4 | 0) ? $4 : $2;
    if (($1 | 0) >= ($2 | 0)) {
     break label$10
    }
    $1 = ImGui__MemAlloc_28unsigned_20long_29($2 << 3);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($4) {
     __memcpy($1, $4, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $1);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $3 = $2 + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $3);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 88);
   label$14 : {
    if (($3 | 0) != ($1 | 0)) {
     break label$14
    }
    $3 = $1;
    $1 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
    $2 = $2 + 2 | 0;
    $1 = ($1 | 0) > ($2 | 0) ? $1 : $2;
    if (($3 | 0) >= ($1 | 0)) {
     break label$14
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 92);
    if ($3) {
     __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 92) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0, 92), $1, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  __stack_pointer = $7 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($7, 4, $4);
  SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
  FUNCTION_TABLE[$0 | 0]($1, $7 + 12 | 0, $7 + 8 | 0, $7 + 4 | 0, $7, $6);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_13____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  var $6 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $6 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  ImDrawList__AddTriangle_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($0, $1, $2, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $6 + 8 | 0), $4, $5);
  __stack_pointer = $6 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = Math_fround($6);
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($7, 4, $4);
  FUNCTION_TABLE[$0 | 0]($1, $7 + 12 | 0, $7 + 8 | 0, $7 + 4 | 0, $5, $6);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_14____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($5, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $5 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  ImDrawList__AddTriangleFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $1, $2, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $5 + 8 | 0), $4);
  __stack_pointer = $5 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($6, 4, $4);
  FUNCTION_TABLE[$0 | 0]($1, $6 + 12 | 0, $6 + 8 | 0, $6 + 4 | 0, $5);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_15____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  ImDrawList__AddCircle_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 8 | 0), $2, $3, $4, $5);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = Math_fround($6);
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $7 + 12 | 0, $3, $4, $5, $6);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_16____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  ImDrawList__AddCircleFilled_28ImVec2_20const__2c_20float_2c_20unsigned_20int_2c_20int_29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 8 | 0), $2, $3, $4);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $6 + 12 | 0, $3, $4, $5);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_17____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  var $6 = 0, $7 = Math_fround(0);
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 8 | 0);
  if (!(($4 | 0) < 3 | $3 >>> 0 < 16777216)) {
   $7 = Math_fround($2 + Math_fround(-.5));
   $2 = Math_fround($4 | 0);
   ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $7, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2), $4 - 1 | 0);
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $3, 1, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  __stack_pointer = $6 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_18____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = Math_fround(0);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 8 | 0);
  if (!(($4 | 0) < 3 | $3 >>> 0 < 16777216)) {
   $6 = $2;
   $2 = Math_fround($4 | 0);
   ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $6, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2), $4 - 1 | 0);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $3);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  __stack_pointer = $5 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_19____invoke_28ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_4($4, 8, 0, 0);
  ImDrawList__AddText_28ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 8 | 0), $2, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($3, 0), wasm2js_i32$1 = $3, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($3, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  __stack_pointer = $4 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $7 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 12, $2);
  $0 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  if ($0 >>> 0 < 2147483632) {
   label$2 : {
    if ($0 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 11, $0);
     $2 = $5;
     break label$2;
    }
    $6 = ($0 | 15) + 1 | 0;
    $2 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($5, 8, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 0, $2);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $0);
   }
   if ($0) {
    __memcpy($2, $4 + 4 | 0, $0)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
   FUNCTION_TABLE[$7 | 0]($1, $5 + 12 | 0, $3, $5);
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 11) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 0))
   }
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
   __stack_pointer = $5 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImDrawList_28_29__$_20____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = Math_fround($6);
  $7 = $7 | 0;
  var $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0;
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 50504, $8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 0) | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 24, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $8 + 24 | 0);
  $11 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  $12 = SAFE_HEAP_LOAD_i32_1_1($5, 11);
  SAFE_HEAP_STORE_i64_8_4($8 + 12 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($8, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 0, 50528);
  SAFE_HEAP_STORE_i32_4_4($8, 20, $7);
  $1 = $8 + 4 | 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) != 2) {
   $10 = $8 + 32 | 0;
   SAFE_HEAP_STORE_i64_8_8($10 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($8, 32, 0, 0);
   $7 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($7, $10);
   SAFE_HEAP_STORE_i64_8_4($1, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($1 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($7 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  }
  $5 = ($12 | 0) < 0 ? $11 : $5;
  $7 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0) | 0) != 2 ? $1 : 0;
  if ($9 < 4294967296.0 & $9 >= 0.0) {
   $1 = ~~$9 >>> 0
  } else {
   $1 = 0
  }
  ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($0, $1, $2, $3, $4, $5, 0, $6, $7);
  __stack_pointer = $8 + 48 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20float_2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = Math_fround($7);
  $8 = $8 | 0;
  var $9 = 0, $10 = 0;
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  $10 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 24, $4);
  SAFE_HEAP_STORE_i32_4_4($9, 28, $2);
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  if ($0 >>> 0 < 2147483632) {
   label$2 : {
    if ($0 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($9, 23, $0);
     $4 = $9 + 12 | 0;
     break label$2;
    }
    $2 = ($0 | 15) + 1 | 0;
    $4 = operator_20new_28unsigned_20long_29($2);
    SAFE_HEAP_STORE_i32_4_4($9, 20, $2 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($9, 12, $4);
    SAFE_HEAP_STORE_i32_4_4($9, 16, $0);
   }
   if ($0) {
    __memcpy($4, $6 + 4 | 0, $0)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $4 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($9, 8, $8);
   FUNCTION_TABLE[$10 | 0]($1, $9 + 28 | 0, $3, $9 + 24 | 0, $5, $9 + 12 | 0, $7, $9 + 8 | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 8) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($9, 23) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 12))
   }
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 24) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 28) | 0);
   __stack_pointer = $9 + 32 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImDrawList_28_29__$_21____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0.0, $9 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = $7 + 24 | 0;
  $8 = +_emval_as($9 | 0, 72724, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 24) | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $1);
  SAFE_HEAP_STORE_i64_8_4($7, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $7 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 8, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $7 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($7, 0, 0, 0);
  if (Math_abs($8) < 2147483648.0) {
   $4 = ~~$8
  } else {
   $4 = -2147483648
  }
  ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $4, $1, $2, $3, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($5, $7), $6);
  __stack_pointer = $7 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 24, $3);
  SAFE_HEAP_STORE_i32_4_4($8, 28, $2);
  SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
  SAFE_HEAP_STORE_i32_4_4($8, 16, $5);
  SAFE_HEAP_STORE_i32_4_4($8, 12, $6);
  FUNCTION_TABLE[$0 | 0]($1, $8 + 28 | 0, $8 + 24 | 0, $8 + 20 | 0, $8 + 16 | 0, $8 + 12 | 0, $7);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 20) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 24) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 28) | 0);
  __stack_pointer = $8 + 32 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_22____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0, $12 = 0, $13 = 0.0, $14 = 0;
  $11 = __stack_pointer + -64 | 0;
  __stack_pointer = $11;
  $12 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = $11 + 56 | 0;
  $13 = +_emval_as($12 | 0, 72724, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($11, 56) | 0);
  SAFE_HEAP_STORE_i64_8_4($11, 56, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $1);
  SAFE_HEAP_STORE_i64_8_4($11, 48, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $11 + 48 | 0);
  SAFE_HEAP_STORE_i64_8_4($11, 40, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $11 + 40 | 0);
  SAFE_HEAP_STORE_i64_8_4($11, 32, 0, 0);
  $4 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($5, $11 + 32 | 0);
  SAFE_HEAP_STORE_i64_8_4($11, 24, 0, 0);
  $5 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($6, $11 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($11, 16, 0, 0);
  $6 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($7, $11 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($11, 8, 0, 0);
  $7 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($8, $11 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($11, 0, 0, 0);
  $14 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($9, $11);
  if ($10 >>> 0 >= 16777216) {
   __inlined_func$ImDrawList__AddImageQuad_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29 : {
    $8 = Math_abs($13) < 2147483648.0 ? ~~$13 : -2147483648;
    if ((SAFE_HEAP_LOAD_i32_4_4($0 + 112 | 0, 0) | 0) != ($8 | 0)) {
     ImDrawList__PushTextureID_28void__29($0, $8);
     ImDrawList__PrimReserve_28int_2c_20int_29($0, 6, 4);
     $8 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
     $9 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
     SAFE_HEAP_STORE_i32_2_2($8, 6, $9);
     SAFE_HEAP_STORE_i32_2_2($8, 0, $9);
     SAFE_HEAP_STORE_i32_2_2($8, 10, $9 + 3 | 0);
     $12 = $9 + 2 | 0;
     SAFE_HEAP_STORE_i32_2_2($8, 8, $12);
     SAFE_HEAP_STORE_i32_2_2($8, 4, $12);
     SAFE_HEAP_STORE_i32_2_2($8, 2, $9 + 1 | 0);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($1, 16, $10);
     SAFE_HEAP_STORE_i64_8_4($1, 20, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 28 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, $10);
     SAFE_HEAP_STORE_i64_8_4($1, 40, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $10);
     SAFE_HEAP_STORE_i64_8_4($1, 60, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 68 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($14, 0), i64toi32_i32$HIGH_BITS);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
     SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $10);
     SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
     SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
     SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
     $2 = $1 - 1 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 72, $2);
     if ($2) {
      $1 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0)
     } else {
      $1 = 0
     }
     SAFE_HEAP_STORE_i32_4_4($0, 112, $1);
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     label$5 : {
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
      $3 = $5 - 1 | 0;
      $4 = $2 + Math_imul($3, 40) | 0;
      $6 = SAFE_HEAP_LOAD_i32_4_4($4, 28);
      if (!$6) {
       break label$5
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 16) | 0) == ($1 | 0)) {
       break label$5
      }
      ImDrawList__AddDrawCmd_28_29($0);
      break __inlined_func$ImDrawList__AddImageQuad_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29;
     }
     label$6 : {
      if (($5 | 0) < 2 | $6) {
       break label$6
      }
      $4 = $4 - 40 | 0;
      if (memcmp($0 + 96 | 0, $4, 24)) {
       break label$6
      }
      if (SAFE_HEAP_LOAD_i32_4_4($4, 32)) {
       break label$6
      }
      SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
      break __inlined_func$ImDrawList__AddImageQuad_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29;
     }
     SAFE_HEAP_STORE_i32_4_4($2 + Math_imul($3, 40) | 0, 16, $1);
     break __inlined_func$ImDrawList__AddImageQuad_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29;
    }
    ImDrawList__PrimReserve_28int_2c_20int_29($0, 6, 4);
    $8 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
    $9 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
    SAFE_HEAP_STORE_i32_2_2($8, 6, $9);
    SAFE_HEAP_STORE_i32_2_2($8, 0, $9);
    SAFE_HEAP_STORE_i32_2_2($8, 10, $9 + 3 | 0);
    $12 = $9 + 2 | 0;
    SAFE_HEAP_STORE_i32_2_2($8, 8, $12);
    SAFE_HEAP_STORE_i32_2_2($8, 4, $12);
    SAFE_HEAP_STORE_i32_2_2($8, 2, $9 + 1 | 0);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1, 16, $10);
    SAFE_HEAP_STORE_i64_8_4($1, 20, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 28 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, $10);
    SAFE_HEAP_STORE_i64_8_4($1, 40, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $10);
    SAFE_HEAP_STORE_i64_8_4($1, 60, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 68 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($14, 0), i64toi32_i32$HIGH_BITS);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
    SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $10);
    SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
   }
  }
  __stack_pointer = $11 - -64 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  $11 = $11 | 0;
  var $12 = 0;
  $12 = __stack_pointer - 48 | 0;
  __stack_pointer = $12;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($12, 40, $3);
  SAFE_HEAP_STORE_i32_4_4($12, 44, $2);
  SAFE_HEAP_STORE_i32_4_4($12, 36, $4);
  SAFE_HEAP_STORE_i32_4_4($12, 32, $5);
  SAFE_HEAP_STORE_i32_4_4($12, 28, $6);
  SAFE_HEAP_STORE_i32_4_4($12, 24, $7);
  SAFE_HEAP_STORE_i32_4_4($12, 20, $8);
  SAFE_HEAP_STORE_i32_4_4($12, 16, $9);
  SAFE_HEAP_STORE_i32_4_4($12, 12, $10);
  FUNCTION_TABLE[$0 | 0]($1, $12 + 44 | 0, $12 + 40 | 0, $12 + 36 | 0, $12 + 32 | 0, $12 + 28 | 0, $12 + 24 | 0, $12 + 20 | 0, $12 + 16 | 0, $12 + 12 | 0, $11);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 12) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 16) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 20) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 24) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 28) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 32) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 36) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 40) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($12, 44) | 0);
  __stack_pointer = $12 + 48 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_23____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = Math_fround($7);
  $8 = $8 | 0;
  var $9 = Math_fround(0), $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = 0.0;
  $12 = __stack_pointer - 32 | 0;
  __stack_pointer = $12;
  $14 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = $12 + 24 | 0;
  $19 = +_emval_as($14 | 0, 72724, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($12, 24) | 0);
  SAFE_HEAP_STORE_i64_8_4($12, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $1);
  SAFE_HEAP_STORE_i64_8_4($12, 16, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $12 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($12, 8, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $12 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($12, 0, 0, 0);
  $14 = Math_abs($19) < 2147483648.0 ? ~~$19 : -2147483648;
  $4 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($5, $12);
  __inlined_func$ImDrawList__AddImageRounded_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29 : {
   if ($6 >>> 0 < 16777216) {
    break __inlined_func$ImDrawList__AddImageRounded_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29
   }
   label$2 : {
    if (!($7 <= Math_fround(0.0))) {
     $5 = $8 & 496 ? $8 : $8 | 240;
     if (($5 & 496) != 256) {
      break label$2
     }
    }
    ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $14, $1, $3, $2, $4, $6);
    break __inlined_func$ImDrawList__AddImageRounded_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0 + 112 | 0, 0) | 0) != ($14 | 0)) {
    ImDrawList__PushTextureID_28void__29($0, $14);
    $8 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
    ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0, $1, $3, $7, $5);
    ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $6);
    SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
    if (($8 | 0) < ($5 | 0)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
     $10 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
     $9 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 4) - SAFE_HEAP_LOAD_f32_4_4($1, 4));
     $16 = $9 != Math_fround(0.0) ? Math_fround(Math_fround($7 - $10) / $9) : Math_fround(0.0);
     $9 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
     $11 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
     $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 0) - SAFE_HEAP_LOAD_f32_4_4($1, 0));
     $17 = $13 != Math_fround(0.0) ? Math_fround(Math_fround($9 - $11) / $13) : Math_fround(0.0);
     $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 32 | 0, 0);
     $4 = $3 + Math_imul($5, 20) | 0;
     $13 = $7 <= $10 ? $10 : $7;
     $15 = $9 <= $11 ? $11 : $9;
     $7 = $7 > $10 ? $10 : $7;
     $10 = $9 > $11 ? $11 : $9;
     $3 = $3 + Math_imul($8, 20) | 0;
     while (1) {
      $11 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
      $18 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
      $9 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) + Math_fround($16 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 4) - SAFE_HEAP_LOAD_f32_4_4($1, 4))));
      SAFE_HEAP_STORE_f32_4_4($3 + 12 | 0, 0, $7 > $9 ? $7 : $9 > $13 ? $13 : $9);
      $9 = Math_fround($11 + Math_fround($17 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 0) - $18)));
      SAFE_HEAP_STORE_f32_4_4($3, 8, $9 < $10 ? $10 : $9 > $15 ? $15 : $9);
      $3 = $3 + 20 | 0;
      if ($4 >>> 0 > $3 >>> 0) {
       continue
      }
      break;
     };
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
    $2 = $1 - 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 72, $2);
    $3 = 0;
    if ($2) {
     $3 = SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($0 + 80 | 0, 0) + ($1 << 2) | 0) - 8 | 0, 0)
    }
    SAFE_HEAP_STORE_i32_4_4($0, 112, $3);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    label$8 : {
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $2 = $5 - 1 | 0;
     $4 = $1 + Math_imul($2, 40) | 0;
     $6 = SAFE_HEAP_LOAD_i32_4_4($4, 28);
     if (!$6) {
      break label$8
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 16) | 0) == ($3 | 0)) {
      break label$8
     }
     ImDrawList__AddDrawCmd_28_29($0);
     break __inlined_func$ImDrawList__AddImageRounded_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29;
    }
    label$9 : {
     if (($5 | 0) < 2 | $6) {
      break label$9
     }
     $4 = $4 - 40 | 0;
     if (memcmp($0 + 96 | 0, $4, 24)) {
      break label$9
     }
     if (SAFE_HEAP_LOAD_i32_4_4($4, 32)) {
      break label$9
     }
     SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
     break __inlined_func$ImDrawList__AddImageRounded_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29;
    }
    SAFE_HEAP_STORE_i32_4_4($1 + Math_imul($2, 40) | 0, 16, $3);
    break __inlined_func$ImDrawList__AddImageRounded_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29;
   }
   $8 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0, $1, $3, $7, $5);
   ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $6);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
   if (($5 | 0) <= ($8 | 0)) {
    break __inlined_func$ImDrawList__AddImageRounded_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29
   }
   $7 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
   $10 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
   $9 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 4) - SAFE_HEAP_LOAD_f32_4_4($1, 4));
   $16 = $9 != Math_fround(0.0) ? Math_fround(Math_fround($7 - $10) / $9) : Math_fround(0.0);
   $9 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   $11 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
   $13 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 0) - SAFE_HEAP_LOAD_f32_4_4($1, 0));
   $17 = $13 != Math_fround(0.0) ? Math_fround(Math_fround($9 - $11) / $13) : Math_fround(0.0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($0 + 32 | 0, 0);
   $4 = $0 + Math_imul($5, 20) | 0;
   $13 = $7 <= $10 ? $10 : $7;
   $15 = $9 <= $11 ? $11 : $9;
   $7 = $7 > $10 ? $10 : $7;
   $10 = $9 > $11 ? $11 : $9;
   $3 = $0 + Math_imul($8, 20) | 0;
   while (1) {
    $11 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    $18 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    $9 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 4) + Math_fround($16 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 4) - SAFE_HEAP_LOAD_f32_4_4($1, 4))));
    SAFE_HEAP_STORE_f32_4_4($3 + 12 | 0, 0, $7 > $9 ? $7 : $9 > $13 ? $13 : $9);
    $9 = Math_fround($11 + Math_fround($17 * Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 0) - $18)));
    SAFE_HEAP_STORE_f32_4_4($3, 8, $9 < $10 ? $10 : $9 > $15 ? $15 : $9);
    $3 = $3 + 20 | 0;
    if ($4 >>> 0 > $3 >>> 0) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $12 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = Math_fround($8);
  $9 = $9 | 0;
  var $10 = 0;
  $10 = __stack_pointer - 32 | 0;
  __stack_pointer = $10;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($10, 24, $3);
  SAFE_HEAP_STORE_i32_4_4($10, 28, $2);
  SAFE_HEAP_STORE_i32_4_4($10, 20, $4);
  SAFE_HEAP_STORE_i32_4_4($10, 16, $5);
  SAFE_HEAP_STORE_i32_4_4($10, 12, $6);
  FUNCTION_TABLE[$0 | 0]($1, $10 + 28 | 0, $10 + 24 | 0, $10 + 20 | 0, $10 + 16 | 0, $10 + 12 | 0, $7, $8, $9);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 12) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 16) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 20) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 24) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 28) | 0);
  __stack_pointer = $10 + 32 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_24____invoke_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = $2 << 3;
  $8 = $6 - ($7 + 15 & -16) | 0;
  __stack_pointer = $8;
  if ($2) {
   memset($8, 0, $7)
  }
  if (($2 | 0) > 0) {
   $7 = 0;
   while (1) {
    $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 8, $7);
    $10 = $9;
    $9 = $6 + 8 | 0;
    $11 = _emval_take_value(72724, $9 | 0) | 0;
    $10 = _emval_get_property($10 | 0, $11 | 0) | 0;
    SAFE_HEAP_STORE_i32_4_4($6, 4, $10);
    _emval_decref($11 | 0);
    SAFE_HEAP_STORE_i64_8_8($6, 8, 0, 0);
    SAFE_HEAP_STORE_i64_8_8(($7 << 3) + $8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($6 + 4 | 0, $9), 0), i64toi32_i32$HIGH_BITS);
    _emval_decref($10 | 0);
    $7 = $7 + 1 | 0;
    if (($7 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $8, $2, $3, $4, $5);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = Math_fround($6);
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $7 + 12 | 0, $3, $4, $5, $6);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_25____invoke_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = $2 << 3;
  $6 = $4 - ($5 + 15 & -16) | 0;
  __stack_pointer = $6;
  if ($2) {
   memset($6, 0, $5)
  }
  if (($2 | 0) > 0) {
   $5 = 0;
   while (1) {
    $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
    $8 = $7;
    $7 = $4 + 8 | 0;
    $9 = _emval_take_value(72724, $7 | 0) | 0;
    $8 = _emval_get_property($8 | 0, $9 | 0) | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 4, $8);
    _emval_decref($9 | 0);
    SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
    SAFE_HEAP_STORE_i64_8_8(($5 << 3) + $6 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4 + 4 | 0, $7), 0), i64toi32_i32$HIGH_BITS);
    _emval_decref($8 | 0);
    $5 = $5 + 1 | 0;
    if (($5 | 0) != ($2 | 0)) {
     continue
    }
    break;
   };
  }
  ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, $6, $2, $3);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20int_2c_20unsigned_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $5 + 12 | 0, $3, $4);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_26____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = Math_fround($6);
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  SAFE_HEAP_STORE_i64_8_4($8, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $8 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 8, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $8 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 0, 0, 0);
  $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $8);
  if ($5 >>> 0 >= 16777216) {
   $9 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $4 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($9 | 0) != ($4 | 0)) {
     break label$2
    }
    $10 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
    $9 = $9 + 1 | 0;
    $9 = ($9 | 0) < ($10 | 0) ? $10 : $9;
    if (($4 | 0) >= ($9 | 0)) {
     break label$2
    }
    $4 = ImGui__MemAlloc_28unsigned_20long_29($9 << 3);
    $10 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($10) {
     __memcpy($4, $10, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $9);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $4);
   }
   $4 = $0 + 92 | 0;
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($4, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
   ImDrawList__PathBezierCubicCurveTo_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($0, $2, $3, $11, $7);
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($4, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $5, 0, $6);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  __stack_pointer = $8 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = Math_fround($7);
  $8 = $8 | 0;
  var $9 = 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($9, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($9, 4, $4);
  SAFE_HEAP_STORE_i32_4_4($9, 0, $5);
  FUNCTION_TABLE[$0 | 0]($1, $9 + 12 | 0, $9 + 8 | 0, $9 + 4 | 0, $9, $6, $7, $8);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 12) | 0);
  __stack_pointer = $9 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_27____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  SAFE_HEAP_STORE_i64_8_4($8, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $8 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($8, 8, 0, 0);
  $10 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $8 + 8 | 0);
  if ($4 >>> 0 >= 16777216) {
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$2 : {
    if (($7 | 0) != ($3 | 0)) {
     break label$2
    }
    $9 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
    $7 = $7 + 1 | 0;
    $7 = ($7 | 0) < ($9 | 0) ? $9 : $7;
    if (($3 | 0) >= ($7 | 0)) {
     break label$2
    }
    $3 = ImGui__MemAlloc_28unsigned_20long_29($7 << 3);
    $9 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($9) {
     __memcpy($3, $9, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $7);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $3);
   }
   $3 = $0 + 92 | 0;
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($3, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
   ImDrawList__PathBezierQuadraticCurveTo_28ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($0, $2, $10, $6);
   ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($3, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $4, 0, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
  }
  __stack_pointer = $8 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = Math_fround($6);
  $7 = $7 | 0;
  var $8 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($8, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($8, 4, $4);
  FUNCTION_TABLE[$0 | 0]($1, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $5, $6, $7);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
  __stack_pointer = $8 + 16 | 0;
 }
 
 function ImDrawList__PathClear_28_29($0) {
  $0 = $0 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
 }
 
 function embind_init_ImDrawList_28_29__$_28____invoke_28ImDrawList__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
  $5 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 8 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
  label$1 : {
   if (($2 | 0) != ($1 | 0)) {
    break label$1
   }
   $3 = $2 + 1 | 0;
   $6 = $1;
   if ($1) {
    $2 = $1 + (($1 | 0) / 2 | 0) | 0
   } else {
    $2 = 8
   }
   $1 = ($2 | 0) > ($3 | 0) ? $2 : $3;
   if (($6 | 0) >= ($1 | 0)) {
    break label$1
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
   if ($3) {
    __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
   }
   SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
  }
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_8($5, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_29____invoke_28ImDrawList__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
  $5 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 8 | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  label$1 : {
   if ($2) {
    $1 = SAFE_HEAP_LOAD_i64_8_1((SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + ($2 << 3) | 0) - 8 | 0);
    $3 = i64toi32_i32$HIGH_BITS;
    if ((SAFE_HEAP_LOAD_i64_8_1($5) | 0) == ($1 | 0) & (i64toi32_i32$HIGH_BITS | 0) == ($3 | 0)) {
     break label$1
    }
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 88 | 0, 0);
   label$3 : {
    if (($1 | 0) != ($2 | 0)) {
     break label$3
    }
    $3 = $2 + 1 | 0;
    $6 = $1;
    if ($1) {
     $2 = $1 + (($1 | 0) / 2 | 0) | 0
    } else {
     $2 = 8
    }
    $1 = ($2 | 0) > ($3 | 0) ? $2 : $3;
    if (($6 | 0) >= ($1 | 0)) {
     break label$3
    }
    $2 = ImGui__MemAlloc_28unsigned_20long_29($1 << 3);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0);
    if ($3) {
     __memcpy($2, $3, SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 92));
    }
    SAFE_HEAP_STORE_i32_4_4($0, 88, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 92, $2);
   }
   SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($0, 84) << 3) | 0, 0, SAFE_HEAP_LOAD_i64_8_8($5, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($0, 84, SAFE_HEAP_LOAD_i32_4_4($0, 84) + 1 | 0);
  }
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_30____invoke_28ImDrawList__2c_20unsigned_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $1);
  SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20unsigned_20int_29_2c_20ImDrawList__2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($1, $2);
 }
 
 function embind_init_ImDrawList_28_29__$_31____invoke_28ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  ImDrawList__AddPolyline_28ImVec2_20const__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29($0, SAFE_HEAP_LOAD_i32_4_4($0 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($0, 84), $1, $2, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 84, 0);
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($1, $2, $3, $4);
 }
 
 function embind_init_ImDrawList_28_29__$_32____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 8 | 0), $2, $3, $4, $5);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20float_2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = Math_fround($5);
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $7 + 12 | 0, $3, $4, $5, $6);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_33____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 8 | 0), $2, $3, $4);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_34____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($5, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $5 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  ImDrawList__PathBezierCubicCurveTo_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, $2, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $5 + 8 | 0), $4);
  __stack_pointer = $5 + 32 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_35____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_4($4, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($4, 0, 0, 0);
  ImDrawList__PathBezierQuadraticCurveTo_28ImVec2_20const__2c_20ImVec2_20const__2c_20int_29($0, $1, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $4), $3);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_36____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($5, 0, 0, 0);
  ImDrawList__PathRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20float_2c_20int_29($0, $1, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $5), $3, $4);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20float_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $6 + 12 | 0, $6 + 8 | 0, $4, $5);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0);
  __stack_pointer = $6 + 16 | 0;
 }
 
 function ImDrawList__ChannelsSplit_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  ImDrawListSplitter__Split_28ImDrawList__2c_20int_29($0 + 120 | 0, $0, $1);
 }
 
 function emscripten__internal__MethodInvoker_void_20_28ImDrawList____29_28int_29_2c_20void_2c_20ImDrawList__2c_20int___invoke_28void_20_28ImDrawList____20const__29_28int_29_2c_20ImDrawList__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($3 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($3 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  FUNCTION_TABLE[$0 | 0]($1, $2);
 }
 
 function ImDrawList__ChannelsMerge_28_29($0) {
  $0 = $0 | 0;
  ImDrawListSplitter__Merge_28ImDrawList__29($0 + 120 | 0, $0);
 }
 
 function ImDrawList__ChannelsSetCurrent_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($0 + 120 | 0, $0, $1);
 }
 
 function embind_init_ImDrawList_28_29__$_37____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $4 + 12 | 0, $4 + 8 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_38____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_4($4, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($4, 0, 0, 0);
  $8 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $4);
  $10 = SAFE_HEAP_LOAD_i32_4_4($8, 4);
  $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $12 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  $13 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
  $6 = SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 44), 0);
  $7 = i64toi32_i32$HIGH_BITS;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
  $5 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
  SAFE_HEAP_STORE_i32_2_2($2, 10, $5 + 3 | 0);
  $9 = $5 + 2 | 0;
  SAFE_HEAP_STORE_i32_2_2($2, 8, $9);
  SAFE_HEAP_STORE_i32_2_2($2, 6, $5);
  SAFE_HEAP_STORE_i32_2_2($2, 4, $9);
  SAFE_HEAP_STORE_i32_2_2($2, 2, $5 + 1 | 0);
  SAFE_HEAP_STORE_i32_2_2($2, 0, $5);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, $6, $7);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1, 20, $13);
  SAFE_HEAP_STORE_i32_4_4($1, 16, $3);
  SAFE_HEAP_STORE_i32_4_4($1 + 24 | 0, 0, $12);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 28 | 0, 0, $6, $7);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, $3);
  SAFE_HEAP_STORE_i64_8_4($1, 40, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, $6, $7);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1, 60, $11);
  SAFE_HEAP_STORE_i32_4_4($1 - -64 | 0, 0, $10);
  SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $3);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 68 | 0, 0, $6, $7);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_39____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 24, 0, 0);
  $9 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 16, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $6 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $6 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 0, 0, 0);
  $10 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $6);
  $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $12 = SAFE_HEAP_LOAD_i32_4_4($10, 4);
  $13 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
  $14 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
  $15 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
  $16 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  $17 = SAFE_HEAP_LOAD_i32_4_4($9, 4);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $7 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
  $8 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
  SAFE_HEAP_STORE_i32_2_2($7, 6, $8);
  SAFE_HEAP_STORE_i32_2_2($7, 0, $8);
  SAFE_HEAP_STORE_i32_2_2($7, 10, $8 + 3 | 0);
  $3 = $8 + 2 | 0;
  SAFE_HEAP_STORE_i32_2_2($7, 8, $3);
  SAFE_HEAP_STORE_i32_2_2($7, 4, $3);
  SAFE_HEAP_STORE_i32_2_2($7, 2, $8 + 1 | 0);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1, 20, $4);
  SAFE_HEAP_STORE_i32_4_4($1, 16, $5);
  SAFE_HEAP_STORE_i32_4_4($1 + 24 | 0, 0, $17);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 32 | 0, 0, $16);
  SAFE_HEAP_STORE_i32_4_4($1 + 28 | 0, 0, $15);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, $5);
  SAFE_HEAP_STORE_i64_8_4($1, 40, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($10, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1, 60, $14);
  SAFE_HEAP_STORE_i32_4_4($1 - -64 | 0, 0, $13);
  SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $5);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 72 | 0, 0, $12);
  SAFE_HEAP_STORE_i32_4_4($1 + 68 | 0, 0, $11);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $5);
  SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
  __stack_pointer = $6 + 32 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_40____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $10 = __stack_pointer + -64 | 0;
  __stack_pointer = $10;
  SAFE_HEAP_STORE_i64_8_4($10, 56, 0, 0);
  $12 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $10 + 56 | 0);
  SAFE_HEAP_STORE_i64_8_4($10, 48, 0, 0);
  $13 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $10 + 48 | 0);
  SAFE_HEAP_STORE_i64_8_4($10, 40, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $10 + 40 | 0);
  SAFE_HEAP_STORE_i64_8_4($10, 32, 0, 0);
  $4 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($4, $10 + 32 | 0);
  SAFE_HEAP_STORE_i64_8_4($10, 24, 0, 0);
  $5 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($5, $10 + 24 | 0);
  SAFE_HEAP_STORE_i64_8_4($10, 16, 0, 0);
  $6 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($6, $10 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($10, 8, 0, 0);
  $7 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($7, $10 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($10, 0, 0, 0);
  $8 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($8, $10);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
  $2 = SAFE_HEAP_LOAD_i32_2_U_2($0, 40);
  SAFE_HEAP_STORE_i32_2_2($1, 6, $2);
  SAFE_HEAP_STORE_i32_2_2($1, 0, $2);
  SAFE_HEAP_STORE_i32_2_2($1, 10, $2 + 3 | 0);
  $11 = $2 + 2 | 0;
  SAFE_HEAP_STORE_i32_2_2($1, 8, $11);
  SAFE_HEAP_STORE_i32_2_2($1, 4, $11);
  SAFE_HEAP_STORE_i32_2_2($1, 2, $2 + 1 | 0);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_4($12, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_4($5, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1, 16, $9);
  SAFE_HEAP_STORE_i64_8_4($1, 20, SAFE_HEAP_LOAD_i64_8_4($13, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 28 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($6, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 36 | 0, 0, $9);
  SAFE_HEAP_STORE_i64_8_4($1, 40, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($7, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 56 | 0, 0, $9);
  SAFE_HEAP_STORE_i64_8_4($1, 60, SAFE_HEAP_LOAD_i64_8_4($4, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52) + 68 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1 + 76 | 0, 0, $9);
  SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 80 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56) + 12 | 0);
  __stack_pointer = $10 - -64 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10 = $10 | 0;
  var $11 = 0;
  $11 = __stack_pointer - 32 | 0;
  __stack_pointer = $11;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($11, 24, $3);
  SAFE_HEAP_STORE_i32_4_4($11, 28, $2);
  SAFE_HEAP_STORE_i32_4_4($11, 20, $4);
  SAFE_HEAP_STORE_i32_4_4($11, 16, $5);
  SAFE_HEAP_STORE_i32_4_4($11, 12, $6);
  SAFE_HEAP_STORE_i32_4_4($11, 8, $7);
  SAFE_HEAP_STORE_i32_4_4($11, 4, $8);
  SAFE_HEAP_STORE_i32_4_4($11, 0, $9);
  FUNCTION_TABLE[$0 | 0]($1, $11 + 28 | 0, $11 + 24 | 0, $11 + 20 | 0, $11 + 16 | 0, $11 + 12 | 0, $11 + 8 | 0, $11 + 4 | 0, $11, $10);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 12) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 16) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 20) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 24) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($11, 28) | 0);
  __stack_pointer = $11 + 32 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_41____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_8($4, 0, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $4);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_8($1, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1, 16, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 20 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 1 | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImDrawList_28_29__$_42____invoke_28ImDrawList__2c_20unsigned_20short_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
  SAFE_HEAP_STORE_i32_2_2($2, 0, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 56, $2 + 2 | 0);
 }
 
 function embind_init_ImDrawList_28_29__$_43____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_8($4, 8, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $4 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_8($4, 0, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $4);
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
  SAFE_HEAP_STORE_i32_2_2($5, 0, SAFE_HEAP_LOAD_i32_4_4($0, 40));
  SAFE_HEAP_STORE_i32_4_4($0, 56, $5 + 2 | 0);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 0, SAFE_HEAP_LOAD_i64_8_8($1, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($0, 52), 8, SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
  SAFE_HEAP_STORE_i32_4_4($1, 16, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 52, $1 + 20 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($0, 40) + 1 | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function emscripten__internal__MethodInvoker_int_20_28ImDrawList____29_28float_29_20const_2c_20int_2c_20ImDrawList_20const__2c_20float___invoke_28int_20_28ImDrawList____20const__29_28float_29_20const_2c_20ImDrawList_20const__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($3 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($3 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  return FUNCTION_TABLE[$0 | 0]($1, $2) | 0;
 }
 
 function import_maybe_null_value_ImVec4____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  SAFE_HEAP_STORE_i64_8_8($1 + 8 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 0, 0, 0);
  $2 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($2, $1);
  SAFE_HEAP_STORE_i64_8_4($0, 4, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 12 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImDrawData_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(51304, 51328, 51360, 0, 48504, 207, 48612, 0, 48612, 0, 13646, 48614, 208);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 209);
  _embind_register_class_function(51304, 4142, 3, 51376, 49004, 210, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(51304, 11913, 72652, 49e3, 211, $0 | 0, 72652, 49004, 212, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(51304, 2818, 72724, 49e3, 213, $0 | 0, 72724, 49004, 214, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 8);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 8);
  _embind_register_class_property(51304, 2776, 72724, 49e3, 213, $0 | 0, 72724, 49004, 214, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(51304, 2762, 72724, 49e3, 213, $0 | 0, 72724, 49004, 214, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 215);
  _embind_register_class_property(51304, 4382, 48496, 49e3, 216, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 217);
  _embind_register_class_property(51304, 10047, 48496, 49e3, 216, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 218);
  _embind_register_class_property(51304, 11492, 48496, 49e3, 216, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 219);
  _embind_register_class_function(51304, 4325, 2, 51388, 49408, 220, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 221);
  _embind_register_class_function(51304, 4222, 3, 51396, 49004, 222, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImDrawData__28ImDrawData__29($0) {
  $0 = $0 | 0;
  return 51304;
 }
 
 function embind_init_ImDrawData_28_29__$_0____invoke_28ImDrawData_20const__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) > 0) {
   while (1) {
    SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16) + ($3 << 2) | 0, 0));
    $5 = $2 + 8 | 0;
    $4 = _emval_take_value(49828, $5 | 0) | 0;
    _emval_incref($4 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
    _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 1, 48472, $5 | 0) | 0);
    _emval_decref($4 | 0);
    $3 = $3 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) > ($3 | 0)) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawData_28_29__$_2____invoke_28ImDrawData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 28 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawData_28_29__$_3____invoke_28ImDrawData_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 36 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImDrawData_28_29__$_4____invoke_28ImDrawData__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
  $5 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $3 + 8 | 0);
  $1 = 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) > 0) {
   while (1) {
    $8 = $1;
    $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16) + ($1 << 2) | 0, 0);
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > 0) {
     $1 = 0;
     while (1) {
      $6 = SAFE_HEAP_LOAD_f32_4_4($5, 0);
      $2 = SAFE_HEAP_LOAD_i32_4_4($4, 8) + Math_imul($1, 40) | 0;
      $7 = SAFE_HEAP_LOAD_f32_4_4($5, 4);
      SAFE_HEAP_STORE_f32_4_4($2, 12, Math_fround($7 * SAFE_HEAP_LOAD_f32_4_4($2, 12)));
      SAFE_HEAP_STORE_f32_4_4($2, 8, Math_fround($6 * SAFE_HEAP_LOAD_f32_4_4($2, 8)));
      SAFE_HEAP_STORE_f32_4_4($2, 4, Math_fround($7 * SAFE_HEAP_LOAD_f32_4_4($2, 4)));
      SAFE_HEAP_STORE_f32_4_4($2, 0, Math_fround($6 * SAFE_HEAP_LOAD_f32_4_4($2, 0)));
      $1 = $1 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) > ($1 | 0)) {
       continue
      }
      break;
     };
    }
    $1 = $8 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) > ($1 | 0)) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImFontGlyph_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(51424, 51448, 51480, 0, 48504, 223, 48612, 0, 48612, 0, 8786, 48614, 224);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 225);
  _embind_register_class_property(51424, 12239, 48496, 49e3, 226, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 227);
  _embind_register_class_property(51424, 11372, 48496, 49e3, 226, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 228);
  _embind_register_class_property(51424, 2991, 48496, 49e3, 226, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(51424, 14347, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 8);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 8);
  _embind_register_class_property(51424, 16647, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(51424, 16644, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(51424, 16625, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 20);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 20);
  _embind_register_class_property(51424, 16622, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 24);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 24);
  _embind_register_class_property(51424, 16653, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 28);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 28);
  _embind_register_class_property(51424, 16650, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 32);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 32);
  _embind_register_class_property(51424, 16631, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 36);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 36);
  _embind_register_class_property(51424, 16628, 72796, 48692, 229, $0 | 0, 72796, 48696, 230, $1 | 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImFontGlyph__28ImFontGlyph__29($0) {
  $0 = $0 | 0;
  return 51424;
 }
 
 function embind_init_ImFontGlyph_28_29__$_0____invoke_28ImFontGlyph_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0) & 1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72652, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontGlyph_28_29__$_1____invoke_28ImFontGlyph_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 1 & 1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72652, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontGlyph_28_29__$_2____invoke_28ImFontGlyph_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 2 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72736, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontConfig_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(51512, 51536, 51572, 0, 48504, 231, 48612, 0, 48612, 0, 9429, 48614, 232);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 233);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 234);
  _embind_register_class_property(51512, 13688, 48496, 49e3, 235, $0 | 0, 48496, 49004, 236, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 8);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 8);
  _embind_register_class_property(51512, 5409, 72652, 49e3, 237, $0 | 0, 72652, 49004, 238, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(51512, 7123, 72724, 49e3, 239, $0 | 0, 72724, 49004, 240, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(51512, 4774, 72796, 48692, 241, $0 | 0, 72796, 48696, 242, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 20);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 20);
  _embind_register_class_property(51512, 14893, 72724, 49e3, 239, $0 | 0, 72724, 49004, 240, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 24);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 24);
  _embind_register_class_property(51512, 14751, 72724, 49e3, 239, $0 | 0, 72724, 49004, 240, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 28);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 28);
  _embind_register_class_property(51512, 14882, 72652, 49e3, 237, $0 | 0, 72652, 49004, 238, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 243);
  _embind_register_class_property(51512, 9411, 48496, 49e3, 235, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 244);
  _embind_register_class_property(51512, 3521, 48496, 49e3, 235, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 245);
  _embind_register_class_property(51512, 5204, 48496, 49e3, 235, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 52);
  _embind_register_class_property(51512, 14322, 72796, 48692, 241, $0 | 0, 72796, 48696, 242, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 56);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 56);
  _embind_register_class_property(51512, 14305, 72796, 48692, 241, $0 | 0, 72796, 48696, 242, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 60);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 60);
  _embind_register_class_property(51512, 11606, 72652, 49e3, 237, $0 | 0, 72652, 49004, 238, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 64);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 64);
  _embind_register_class_property(51512, 4895, 72736, 49e3, 246, $0 | 0, 72736, 49004, 247, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 68);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 68);
  _embind_register_class_property(51512, 1170, 72796, 48692, 241, $0 | 0, 72796, 48696, 242, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 248);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 249);
  _embind_register_class_property(51512, 11255, 48496, 49e3, 235, $0 | 0, 48496, 49004, 236, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 250);
  _embind_register_class_property(51512, 2951, 48496, 49e3, 235, $0 | 0, 0, 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImFontConfig__28ImFontConfig__29($0) {
  $0 = $0 | 0;
  return 51512;
 }
 
 function embind_init_ImFontConfig_28_29__$_0____invoke_28ImFontConfig_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, 2447);
  iprintf(19180, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImFontConfig_28_29__$_1____invoke_28ImFontConfig__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 2281);
  iprintf(19180, $0);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function embind_init_ImFontConfig_28_29__$_2____invoke_28ImFontConfig_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 32 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontConfig_28_29__$_3____invoke_28ImFontConfig_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 40 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontConfig_28_29__$_4____invoke_28ImFontConfig_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 48);
  label$1 : {
   if (!$1) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $2 + 8 | 0) | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontConfig_28_29__$_5____invoke_28ImFontConfig_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $4 = $1 + 74 | 0;
  $3 = strlen($4);
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 23, $3);
     $1 = $2 + 12 | 0;
     break label$2;
    }
    $5 = ($3 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($5);
    SAFE_HEAP_STORE_i32_4_4($2, 20, $5 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
    SAFE_HEAP_STORE_i32_4_4($2, 16, $3);
   }
   if ($3) {
    __memcpy($1, $4, $3)
   }
   SAFE_HEAP_STORE_i32_1_1($1 + $3 | 0, 0, 0);
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
   $4 = SAFE_HEAP_LOAD_i32_1_1($2, 23);
   $1 = ($4 | 0) < 0;
   $3 = $1 ? $3 : $4 & 127;
   $4 = dlmalloc($3 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
   __memcpy($4 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 12), wasm2js_i32$1 = $2 + 12 | 0, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3);
   SAFE_HEAP_STORE_i32_4_4($2, 24, $4);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49072, $2 + 24 | 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 23) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 12))
   }
   __stack_pointer = $2 + 32 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImFontConfig_28_29__$_6____invoke_28ImFontConfig__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $5 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 49072, $2 + 12 | 0);
  label$1 : {
   if ($5 < 4294967296.0 & $5 >= 0.0) {
    $4 = ~~$5 >>> 0;
    break label$1;
   }
   $4 = 0;
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  if ($3 >>> 0 < 2147483632) {
   $7 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
   label$4 : {
    if ($3 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 11, $3);
     $1 = $2;
     break label$4;
    }
    $6 = ($3 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($2, 4, $3);
   }
   if ($3) {
    __memcpy($1, $4 + 4 | 0, $3)
   }
   SAFE_HEAP_STORE_i32_1_1($1 + $3 | 0, 0, 0);
   _emval_run_destructors($7 | 0);
   $4 = $0 + 74 | 0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   $1 = SAFE_HEAP_LOAD_i32_1_1($2, 11);
   strncpy($4, ($1 | 0) < 0 ? $0 : $2, 39);
   if (($1 | 0) < 0) {
    dlfree($0)
   }
   __stack_pointer = $2 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImFontConfig_28_29__$_7____invoke_28ImFontConfig_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 116);
  label$1 : {
   if (!$1) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(50504, $2 + 8 | 0) | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFont_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(50496, 50504, 51600, 0, 48504, 251, 48612, 0, 48612, 0, 2975, 48614, 252);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(50496, 10150, 72796, 48692, 253, $0 | 0, 72796, 48696, 254, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 68);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 68);
  _embind_register_class_property(50496, 11519, 72796, 48692, 253, $0 | 0, 72796, 48696, 254, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 255);
  _embind_register_class_function(50496, 4832, 3, 51616, 49004, 256, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 257);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 258);
  _embind_register_class_property(50496, 8798, 48496, 49e3, 259, $0 | 0, 48496, 49004, 260, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(50496, 14339, 72796, 48692, 253, $0 | 0, 72796, 48696, 254, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 58);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 58);
  _embind_register_class_property(50496, 6525, 72712, 49e3, 261, $0 | 0, 72712, 49004, 262, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 60);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 60);
  _embind_register_class_property(50496, 6501, 72712, 49e3, 261, $0 | 0, 72712, 49004, 262, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 62);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 62);
  _embind_register_class_property(50496, 6483, 72712, 49e3, 261, $0 | 0, 72712, 49004, 262, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 56);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 56);
  _embind_register_class_property(50496, 2935, 72700, 49e3, 263, $0 | 0, 72700, 49004, 264, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 265);
  _embind_register_class_function(50496, 13852, 3, 51616, 49004, 256, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 72);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 72);
  _embind_register_class_property(50496, 3093, 72796, 48692, 253, $0 | 0, 72796, 48696, 254, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 76);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 76);
  _embind_register_class_property(50496, 3085, 72796, 48692, 253, $0 | 0, 72796, 48696, 254, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 80);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 80);
  _embind_register_class_property(50496, 11683, 72724, 49e3, 266, $0 | 0, 72724, 49004, 267, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 268);
  _embind_register_class_function(50496, 13657, 2, 51628, 49408, 269, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 270);
  _embind_register_class_function(50496, 11401, 2, 51628, 49408, 269, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 271);
  _embind_register_class_function(50496, 8812, 3, 51636, 48740, 272, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 273);
  _embind_register_class_function(50496, 8508, 3, 51636, 48740, 272, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 274);
  _embind_register_class_function(50496, 11668, 3, 51648, 51660, 275, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 276);
  _embind_register_class_function(50496, 12706, 2, 51668, 49e3, 277, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 278);
  _embind_register_class_function(50496, 11247, 2, 51676, 49e3, 279, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 280);
  _embind_register_class_function(50496, 15340, 8, 51696, 51728, 281, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 282);
  _embind_register_class_function(50496, 15318, 5, 51744, 51764, 283, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 284);
  _embind_register_class_function(50496, 6514, 7, 51776, 51804, 285, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImFont__28ImFont__29($0) {
  $0 = $0 | 0;
  return 50496;
 }
 
 function void_20emscripten__internal__raw_destructor_ImFont__28ImFont__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(ImFont___ImFont_28_29($0))
  }
 }
 
 function embind_init_ImFont_28_29__$_0____invoke_28ImFont__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) > 0) {
   while (1) {
    SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 40) + Math_imul($3, 40) | 0);
    $5 = $2 + 8 | 0;
    $4 = _emval_take_value(51448, $5 | 0) | 0;
    _emval_incref($4 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
    _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 1, 48472, $5 | 0) | 0);
    _emval_decref($4 | 0);
    $3 = $3 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) > ($3 | 0)) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFont_28_29__$_1____invoke_28ImFont_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 44);
  label$1 : {
   if (!$1) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(51480, $2 + 8 | 0) | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFont_28_29__$_2____invoke_28ImFont__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if (($1 | 0) == 2) {
   $1 = 0
  } else {
   $3 = +_emval_as($1 | 0, 51480, $2 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
   if ($3 < 4294967296.0 & $3 >= 0.0) {
    $1 = ~~$3 >>> 0
   } else {
    $1 = 0
   }
  }
  SAFE_HEAP_STORE_i32_4_4($0, 44, $1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFont_28_29__$_3____invoke_28ImFont__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if ((SAFE_HEAP_LOAD_i32_2_2($0, 56) | 0) > 0) {
   while (1) {
    SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 52) + Math_imul($3, 120) | 0);
    $5 = $2 + 8 | 0;
    $4 = _emval_take_value(51572, $5 | 0) | 0;
    _emval_incref($4 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
    _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 1, 48472, $5 | 0) | 0);
    _emval_decref($4 | 0);
    $3 = $3 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_2_2($0, 56) | 0) > ($3 | 0)) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFont_28_29__$_4____invoke_28ImFont_20const__2c_20unsigned_20short_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $1 = ImFont__FindGlyph_28unsigned_20short_29_20const($1, $2);
  label$1 : {
   if (!$1) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(51480, $3 + 8 | 0) | 0);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImFont_28_29__$_5____invoke_28ImFont_20const__2c_20unsigned_20short_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  if (SAFE_HEAP_LOAD_i32_4_4($1, 20) >>> 0 > $2 >>> 0) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 40 | 0, 0);
   $1 = SAFE_HEAP_LOAD_i32_2_U_2(SAFE_HEAP_LOAD_i32_4_4($1 + 28 | 0, 0) + ($2 << 1) | 0, 0);
   $1 = ($1 | 0) != 65535 ? $4 + Math_imul($1, 40) | 0 : 0;
  } else {
   $1 = 0
  }
  label$1 : {
   if (!$1) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(51480, $3 + 8 | 0) | 0);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function ImFont__GetCharAdvance_28unsigned_20short_29_20const($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return Math_fround(SAFE_HEAP_LOAD_f32_4_4((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + ($1 << 2) | 0, wasm2js_i32$1 = $0 + 12 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) > ($1 | 0), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0));
 }
 
 function emscripten__internal__MethodInvoker_float_20_28ImFont____29_28unsigned_20short_29_20const_2c_20float_2c_20ImFont_20const__2c_20unsigned_20short___invoke_28float_20_28ImFont____20const__29_28unsigned_20short_29_20const_2c_20ImFont_20const__2c_20unsigned_20short_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($3 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($3 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  return Math_fround(Math_fround(FUNCTION_TABLE[$0 | 0]($1, $2)));
 }
 
 function ImFont__IsLoaded_28_29_20const($0) {
  $0 = $0 | 0;
  return (SAFE_HEAP_LOAD_i32_4_4($0, 48) | 0) != 0 | 0;
 }
 
 function embind_init_ImFont_28_29__$_6____invoke_28ImFont_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
  $3 = $1 ? $1 + 74 | 0 : 16019;
  $2 = strlen($3);
  if ($2 >>> 0 < 2147483632) {
   label$2 : {
    if ($2 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($0, 11, $2);
     break label$2;
    }
    $4 = ($2 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $4 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
    $0 = $1;
   }
   $1 = $0 + $2 | 0;
   if ($2) {
    memmove($0, $3, $2)
   }
   SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function emscripten__internal__FunctionInvoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28__29_28ImFont_20const__29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20ImFont_20const____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28___29_28ImFont_20const__29_2c_20ImFont__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = $2 + 4 | 0;
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($4, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
  $3 = SAFE_HEAP_LOAD_i32_1_U_1($2, 15);
  $5 = $3 << 24 >> 24;
  $0 = ($5 | 0) < 0;
  $1 = $0 ? $1 : $3 & 127;
  $3 = dlmalloc($1 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
  $6 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
  __memcpy($3 + 4 | 0, $0 ? $6 : $4, $1);
  if (($5 | 0) < 0) {
   dlfree($6)
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function embind_init_ImFont_28_29__$_7____invoke_28ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  $10 = SAFE_HEAP_LOAD_i32_1_1($5, 11);
  SAFE_HEAP_STORE_i32_4_4($8, 20, 0);
  $5 = ($10 | 0) < 0 ? $9 : $5;
  ImFont__CalcTextSizeA_28float_2c_20float_2c_20float_2c_20char_20const__2c_20char_20const__2c_20char_20const___29_20const($8 + 12 | 0, $1, $2, $3, $4, $5, 0, $8 + 20 | 0);
  $6 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  if (($6 | 0) != 2) {
   $9 = SAFE_HEAP_LOAD_i32_4_4($8, 20);
   SAFE_HEAP_STORE_i32_4_4($8, 24, 0);
   $1 = _emval_take_value(72724, $8 + 24 | 0) | 0;
   SAFE_HEAP_STORE_i32_4_4($8, 24, $9 - $5 | 0);
   $5 = _emval_take_value(72724, $8 + 24 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($5 | 0);
   _emval_decref($1 | 0);
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 24, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $8 + 12 | 0, $8 + 24 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 24) | 0);
  __stack_pointer = $8 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_29_2c_20ImFont__2c_20float_2c_20float_2c_20float_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = Math_fround($4);
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  if ($9 >>> 0 < 2147483632) {
   $11 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$2 : {
    if ($9 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($8, 27, $9);
     $0 = $8 + 16 | 0;
     break label$2;
    }
    $10 = ($9 | 15) + 1 | 0;
    $0 = operator_20new_28unsigned_20long_29($10);
    SAFE_HEAP_STORE_i32_4_4($8, 24, $10 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($8, 16, $0);
    SAFE_HEAP_STORE_i32_4_4($8, 20, $9);
   }
   if ($9) {
    __memcpy($0, $5 + 4 | 0, $9)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $9 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 8, $7);
   SAFE_HEAP_STORE_i32_4_4($8, 12, $6);
   FUNCTION_TABLE[$11 | 0]($8 + 28 | 0, $1, $2, $3, $4, $8 + 16 | 0, $8 + 12 | 0, $8 + 8 | 0);
   _emval_incref(SAFE_HEAP_LOAD_i32_4_4($8, 28) | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($8, 28);
   _emval_decref($0 | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 27) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 16))
   }
   __stack_pointer = $8 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImFont_28_29__$_8____invoke_28ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  $3 = Math_fround($3);
  var $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = $0;
  $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 0), wasm2js_i32$1 = $2, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  return ImFont__CalcWordWrapPositionA_28float_2c_20char_20const__2c_20char_20const__2c_20float_29_20const($4, $1, $0, 0, $3) - $0 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_int_20_28__29_28ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_29_2c_20int_2c_20ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float___invoke_28int_20_28___29_28ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_29_2c_20ImFont__2c_20float_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  if ($6 >>> 0 < 2147483632) {
   $8 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$2 : {
    if ($6 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 15, $6);
     $0 = $5 + 4 | 0;
     break label$2;
    }
    $7 = ($6 | 15) + 1 | 0;
    $0 = operator_20new_28unsigned_20long_29($7);
    SAFE_HEAP_STORE_i32_4_4($5, 12, $7 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $0);
    SAFE_HEAP_STORE_i32_4_4($5, 8, $6);
   }
   if ($6) {
    __memcpy($0, $3 + 4 | 0, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $6 | 0, 0, 0);
   $0 = FUNCTION_TABLE[$8 | 0]($1, $2, $5 + 4 | 0, $4) | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 4))
   }
   __stack_pointer = $5 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImFont_28_29__$_9____invoke_28ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $7 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 49796, $6 + 28 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 28) | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 20, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($6, 8, SAFE_HEAP_LOAD_i64_8_4(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $6 + 20 | 0), 0), i64toi32_i32$HIGH_BITS);
  if ($7 < 4294967296.0 & $7 >= 0.0) {
   $1 = ~~$7 >>> 0
  } else {
   $1 = 0
  }
  ImFont__RenderChar_28ImDrawList__2c_20float_2c_20ImVec2_2c_20unsigned_20int_2c_20unsigned_20short_29_20const($0, $1, $2, $6 + 8 | 0, $4, $5);
  __stack_pointer = $6 + 32 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short_29_2c_20void_2c_20ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short___invoke_28void_20_28___29_28ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short_29_2c_20ImFont__2c_20emscripten___EM_VAL__2c_20float_2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20unsigned_20short_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, $4);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $7 + 12 | 0, $3, $7 + 8 | 0, $5, $6);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(51828, 51852, 51884, 0, 48504, 286, 48612, 0, 48612, 0, 5430, 48614, 287);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 288);
  _embind_register_class_function(51828, 3135, 3, 51900, 48740, 289, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 290);
  _embind_register_class_function(51828, 14935, 6, 51920, 51944, 291, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 292);
  _embind_register_class_function(51828, 13621, 2, 52e3, 49408, 293, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 294);
  _embind_register_class_function(51828, 13673, 2, 52e3, 49408, 293, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 295);
  _embind_register_class_function(51828, 4169, 2, 52e3, 49408, 293, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 296);
  _embind_register_class_function(51828, 6542, 2, 52e3, 49408, 293, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 297);
  _embind_register_class_function(51828, 11850, 2, 52008, 49e3, 298, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 299);
  _embind_register_class_function(51828, 3187, 2, 52016, 49e3, 300, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 301);
  _embind_register_class_function(51828, 16167, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 303);
  _embind_register_class_function(51828, 16603, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 304);
  _embind_register_class_function(51828, 3150, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 305);
  _embind_register_class_function(51828, 7865, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 306);
  _embind_register_class_function(51828, 10811, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 307);
  _embind_register_class_function(51828, 8143, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 308);
  _embind_register_class_function(51828, 7361, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 309);
  _embind_register_class_function(51828, 13473, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 310);
  _embind_register_class_function(51828, 8556, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 311);
  _embind_register_class_function(51828, 10834, 2, 52024, 49e3, 302, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(51828, 12628, 72652, 49e3, 312, $0 | 0, 72652, 49004, 313, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(51828, 4951, 72724, 49e3, 314, $0 | 0, 72724, 49004, 315, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 316);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 317);
  _embind_register_class_property(51828, 15025, 48496, 49e3, 318, $0 | 0, 48496, 49004, 319, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 8);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 8);
  _embind_register_class_property(51828, 8760, 72724, 49e3, 314, $0 | 0, 72724, 49004, 315, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 12);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 12);
  _embind_register_class_property(51828, 9188, 72724, 49e3, 314, $0 | 0, 72724, 49004, 315, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 28);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 28);
  _embind_register_class_property(51828, 8648, 72724, 49e3, 314, $0 | 0, 72724, 49004, 315, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 32);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 32);
  _embind_register_class_property(51828, 3315, 72724, 49e3, 314, $0 | 0, 72724, 49004, 315, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 320);
  _embind_register_class_property(51828, 11438, 48496, 49e3, 318, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 321);
  _embind_register_class_property(51828, 8302, 48496, 49e3, 318, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 322);
  _embind_register_class_function(51828, 4180, 3, 52032, 49004, 323, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImFontAtlas__28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  return 51828;
 }
 
 function void_20emscripten__internal__raw_destructor_ImFontAtlas__28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  if ($0) {
   dlfree(ImFontAtlas___ImFontAtlas_28_29($0))
  }
 }
 
 function embind_init_ImFontAtlas_28_29__$_0____invoke_28ImFontAtlas__2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0);
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  label$1 : {
   if (($3 | 0) == 2) {
    ImFontConfig__ImFontConfig_28_29($4 + 16 | 0);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
   _emval_incref($3 | 0);
   import_ImFontConfig_28emscripten__val_29($4 + 16 | 0, $4 + 12 | 0);
  }
  if (($3 | 0) != 2) {
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0)
  }
  $3 = (SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2 ? $4 + 16 | 0 : 0;
  $2 = __stack_pointer - 128 | 0;
  __stack_pointer = $2;
  label$10 : {
   if ($3) {
    __memcpy($2 + 8 | 0, $3, 120);
    break label$10;
   }
   ImFontConfig__ImFontConfig_28_29($2 + 8 | 0);
  }
  if (!$3) {
   SAFE_HEAP_STORE_i32_1_1($2, 36, 1);
   SAFE_HEAP_STORE_i64_8_4($2, 28, 1, 1);
  }
  if (SAFE_HEAP_LOAD_f32_4_4($2, 24) <= Math_fround(0.0)) {
   SAFE_HEAP_STORE_i32_4_4($2, 24, 1095761920)
  }
  if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 82)) {
   $3 = $2 + 82 | 0;
   $5 = SAFE_HEAP_LOAD_f32_4_4($2, 24);
   label$6 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $6 = ~~$5;
     break label$6;
    }
    $6 = -2147483648;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 0, $6);
   ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($3, 40, 1268, $2);
  }
  $6 = $2 + 52 | 0;
  $5 = SAFE_HEAP_LOAD_f32_4_4($2, 24);
  $7 = Math_fround($5 / Math_fround(13.0));
  label$8 : {
   if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
    $3 = ~~$7;
    break label$8;
   }
   $3 = -2147483648;
  }
  SAFE_HEAP_STORE_f32_4_4($6, 0, Math_fround($3 | 0));
  SAFE_HEAP_STORE_i32_2_2($2, 80, 133);
  $3 = $1;
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 56);
  $1 = ImFontAtlas__AddFontFromMemoryCompressedBase85TTF_28char_20const__2c_20float_2c_20ImFontConfig_20const__2c_20unsigned_20short_20const__29($3, $5, $2 + 8 | 0, $1 ? $1 : 21640);
  __stack_pointer = $2 + 128 | 0;
  SAFE_HEAP_STORE_i32_4_4($4, 136, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(50504, $4 + 136 | 0) | 0);
  __stack_pointer = $4 + 144 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_1____invoke_28ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, wasm2js_f32$0 = Math_fround(0), wasm2js_f32$1 = Math_fround(0), wasm2js_i32$0 = 0;
  $6 = __stack_pointer - 160 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i32_4_4($6, 148, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 140, 0, 0);
  $8 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  $7 = _emval_new_cstring(8624) | 0;
  $8 = _emval_get_property($8 | 0, $7 | 0) | 0;
  _emval_decref($7 | 0);
  $9 = +_emval_as($8 | 0, 72760, $6 + 16 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 16) | 0);
  $7 = SAFE_HEAP_LOAD_i32_4_4($6, 144);
  $11 = SAFE_HEAP_LOAD_i32_4_4($6, 140);
  $10 = $7 - $11 | 0;
  $7 = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
  label$3 : {
   if ($10 >>> 0 < $7 >>> 0) {
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______append_28unsigned_20long_29($6 + 140 | 0, $7 - $10 | 0);
    break label$3;
   }
   if ($7 >>> 0 >= $10 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($6, 144, $7 + $11 | 0);
  }
  _emval_decref($8 | 0);
  $7 = SAFE_HEAP_LOAD_i32_4_4($6, 144);
  $8 = SAFE_HEAP_LOAD_i32_4_4($6, 140);
  SAFE_HEAP_STORE_i32_4_4($6, 20, $8);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $7 - $8 | 0);
  $7 = _emval_take_value(51984, $6 + 16 | 0) | 0;
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $8 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $8);
  }
  $8 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 16, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($8 | 0, $7 | 0, 3559, $6 + 16 | 0);
  _emval_decref($7 | 0);
  $7 = SAFE_HEAP_LOAD_i32_4_4($6, 144) - SAFE_HEAP_LOAD_i32_4_4($6, 140) | 0;
  $8 = __memcpy(ImGui__MemAlloc_28unsigned_20long_29($7), SAFE_HEAP_LOAD_i32_4_4($6, 140), $7);
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  label$6 : {
   if (($2 | 0) == 2) {
    ImFontConfig__ImFontConfig_28_29($6 + 16 | 0);
    break label$6;
   }
   SAFE_HEAP_STORE_i32_4_4($6, 12, $2);
   _emval_incref($2 | 0);
   import_ImFontConfig_28emscripten__val_29($6 + 16 | 0, $6 + 12 | 0);
  }
  if (($2 | 0) != 2) {
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0)
  }
  $2 = 0;
  $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  if (($5 | 0) != 2) {
   $9 = +_emval_as($5 | 0, 72748, $6 + 152 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 152) | 0);
   $2 = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
  }
  $5 = (SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2 ? $6 + 16 | 0 : 0;
  $4 = __stack_pointer - 128 | 0;
  __stack_pointer = $4;
  label$1 : {
   if ($5) {
    __memcpy($4 + 8 | 0, $5, 120);
    break label$1;
   }
   ImFontConfig__ImFontConfig_28_29($4 + 8 | 0);
  }
  SAFE_HEAP_STORE_i32_4_4($4, 12, $7);
  SAFE_HEAP_STORE_i32_4_4($4, 8, $8);
  SAFE_HEAP_STORE_f32_4_4($4, 24, (wasm2js_f32$0 = $3, wasm2js_f32$1 = SAFE_HEAP_LOAD_f32_4_4($4, 24), wasm2js_i32$0 = $3 > Math_fround(0.0), wasm2js_i32$0 ? wasm2js_f32$0 : wasm2js_f32$1));
  if ($2) {
   SAFE_HEAP_STORE_i32_4_4($4, 56, $2)
  }
  $1 = ImFontAtlas__AddFont_28ImFontConfig_20const__29($1, $4 + 8 | 0);
  __stack_pointer = $4 + 128 | 0;
  SAFE_HEAP_STORE_i32_4_4($6, 152, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(50504, $6 + 152 | 0) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 140);
  if ($0) {
   SAFE_HEAP_STORE_i32_4_4($6, 144, $0);
   dlfree($0);
  }
  __stack_pointer = $6 + 160 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val_29_2c_20ImFontAtlas__2c_20emscripten___EM_VAL__2c_20float_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 4, $4);
  SAFE_HEAP_STORE_i32_4_4($6, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($6, 0, $5);
  FUNCTION_TABLE[$0 | 0]($6 + 12 | 0, $1, $6 + 8 | 0, $3, $6 + 4 | 0, $6);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  __stack_pointer = $6 + 16 | 0;
  return $0 | 0;
 }
 
 function ImFontAtlas__IsBuilt_28_29_20const($0) {
  $0 = $0 | 0;
  return (SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) > 0 & (SAFE_HEAP_LOAD_i32_1_U_1($0, 17) | 0) != 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_2____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 20, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 16, -1);
  SAFE_HEAP_STORE_i32_4_4($2, 12, -1);
  SAFE_HEAP_STORE_i32_4_4($2, 8, -1);
  $6 = $2 + 20 | 0;
  $3 = $2 + 16 | 0;
  $4 = $2 + 12 | 0;
  $5 = $2 + 8 | 0;
  if (!SAFE_HEAP_LOAD_i32_4_4($1, 20)) {
   ImFontAtlas__Build_28_29($1)
  }
  SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($1, 20));
  if ($3) {
   SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($1, 28))
  }
  if ($4) {
   SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($1, 32))
  }
  if ($5) {
   SAFE_HEAP_STORE_i32_4_4($5, 0, 1)
  }
  $1 = $0;
  $0 = _emval_new_object() | 0;
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  $1 = _emval_new_cstring(4767) | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
  $5 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
  SAFE_HEAP_STORE_i32_4_4($2, 28, SAFE_HEAP_LOAD_i32_4_4($2, 20));
  SAFE_HEAP_STORE_i32_4_4($2, 24, Math_imul($3, Math_imul($4, $5)));
  $5 = $2 + 24 | 0;
  $3 = $5;
  $4 = _emval_take_value(51984, $3 | 0) | 0;
  _emval_set_property($0 | 0, $1 | 0, $4 | 0);
  _emval_decref($4 | 0);
  _emval_decref($1 | 0);
  $1 = _emval_new_cstring(8642) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4($2, 16));
  $3 = _emval_take_value(72724, $3 | 0) | 0;
  _emval_set_property($0 | 0, $1 | 0, $3 | 0);
  _emval_decref($3 | 0);
  _emval_decref($1 | 0);
  $1 = _emval_new_cstring(3301) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4($2, 12));
  $3 = _emval_take_value(72724, $5 | 0) | 0;
  _emval_set_property($0 | 0, $1 | 0, $3 | 0);
  _emval_decref($3 | 0);
  _emval_decref($1 | 0);
  $1 = _emval_new_cstring(8279) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4($2, 8));
  $3 = $0;
  $0 = _emval_take_value(72724, $2 + 24 | 0) | 0;
  _emval_set_property($3 | 0, $1 | 0, $0 | 0);
  _emval_decref($0 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $2 + 32 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_3____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 20, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 16, -1);
  SAFE_HEAP_STORE_i32_4_4($2, 12, -1);
  SAFE_HEAP_STORE_i32_4_4($2, 8, -1);
  $10 = $2 + 20 | 0;
  $7 = $2 + 16 | 0;
  $8 = $2 + 12 | 0;
  $9 = $2 + 8 | 0;
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_4_4($1, 24)) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_4_4($1, 20)) {
    ImFontAtlas__Build_28_29($1)
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 20);
   if (!$4) {
    break label$1
   }
   $6 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 28), SAFE_HEAP_LOAD_i32_4_4($1, 32)) << 2);
   SAFE_HEAP_STORE_i32_4_4($1, 24, $6);
   $3 = Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 32), SAFE_HEAP_LOAD_i32_4_4($1, 28));
   if (($3 | 0) <= 0) {
    break label$1
   }
   while (1) {
    SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_1_U_1($4, 0) << 24 | 16777215);
    $5 = $3;
    $3 = $3 - 1 | 0;
    $6 = $6 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($5 | 0) > 1) {
     continue
    }
    break;
   };
  }
  SAFE_HEAP_STORE_i32_4_4($10, 0, SAFE_HEAP_LOAD_i32_4_4($1, 24));
  if ($7) {
   SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($1, 28))
  }
  if ($8) {
   SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($1, 32))
  }
  if ($9) {
   SAFE_HEAP_STORE_i32_4_4($9, 0, 4)
  }
  $1 = $0;
  $0 = _emval_new_object() | 0;
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  $1 = _emval_new_cstring(4767) | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
  $5 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
  SAFE_HEAP_STORE_i32_4_4($2, 28, SAFE_HEAP_LOAD_i32_4_4($2, 20));
  SAFE_HEAP_STORE_i32_4_4($2, 24, Math_imul($3, Math_imul($4, $5)));
  $4 = $2 + 24 | 0;
  $3 = $4;
  $5 = _emval_take_value(51984, $3 | 0) | 0;
  _emval_set_property($0 | 0, $1 | 0, $5 | 0);
  _emval_decref($5 | 0);
  _emval_decref($1 | 0);
  $1 = _emval_new_cstring(8642) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4($2, 16));
  $3 = _emval_take_value(72724, $3 | 0) | 0;
  _emval_set_property($0 | 0, $1 | 0, $3 | 0);
  _emval_decref($3 | 0);
  _emval_decref($1 | 0);
  $1 = _emval_new_cstring(3301) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4($2, 12));
  $3 = _emval_take_value(72724, $4 | 0) | 0;
  _emval_set_property($0 | 0, $1 | 0, $3 | 0);
  _emval_decref($3 | 0);
  _emval_decref($1 | 0);
  $1 = _emval_new_cstring(8279) | 0;
  SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4($2, 8));
  $3 = $0;
  $0 = _emval_take_value(72724, $2 + 24 | 0) | 0;
  _emval_set_property($3 | 0, $1 | 0, $0 | 0);
  _emval_decref($0 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $2 + 32 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_4____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, 21640);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_5____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, 21648);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_6____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (!SAFE_HEAP_LOAD_i32_2_U_2(0, 83616)) {
   SAFE_HEAP_STORE_i32_4_4(0, 83632, SAFE_HEAP_LOAD_i32_4_4(0, 32768));
   SAFE_HEAP_STORE_i64_8_8(0, 83624, SAFE_HEAP_LOAD_i64_8_8(0, 32760), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8(0, 83616, SAFE_HEAP_LOAD_i64_8_8(0, 32752), i64toi32_i32$HIGH_BITS);
   $1 = 83636;
   $3 = 19968;
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_2_U_2(($4 << 1) + 26752 | 0, 0) + $3 | 0;
    SAFE_HEAP_STORE_i32_2_2($1, 0, $3);
    SAFE_HEAP_STORE_i32_2_2($1, 2, $3);
    $1 = $1 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != 2999) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i32_2_2($1, 0, 0);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 8, 83616);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_7____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, 21680);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_8____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if (!SAFE_HEAP_LOAD_i32_2_U_2(0, 73584)) {
   SAFE_HEAP_STORE_i64_8_8(0, 73600, SAFE_HEAP_LOAD_i64_8_8(0, 26736), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8(0, 73592, SAFE_HEAP_LOAD_i64_8_8(0, 26728), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8(0, 73584, SAFE_HEAP_LOAD_i64_8_8(0, 26720), i64toi32_i32$HIGH_BITS);
   $1 = 73608;
   $3 = 19968;
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_2_U_2(($4 << 1) + 21712 | 0, 0) + $3 | 0;
    SAFE_HEAP_STORE_i32_2_2($1, 0, $3);
    SAFE_HEAP_STORE_i32_2_2($1, 2, $3);
    $1 = $1 + 4 | 0;
    $4 = $4 + 1 | 0;
    if (($4 | 0) != 2500) {
     continue
    }
    break;
   };
   SAFE_HEAP_STORE_i32_2_2($1, 0, 0);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 8, 73584);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_9____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, 32784);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_10____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, 32802);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_11____invoke_28ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, 32816);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72748, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_12____invoke_28ImFontAtlas_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($1, 4));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72724, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_13____invoke_28ImFontAtlas__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 72724, $2 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  if (Math_abs($3) < 2147483648.0) {
   $1 = ~~$3
  } else {
   $1 = -2147483648
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_15____invoke_28ImFontAtlas_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 44 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImFontAtlas_28_29__$_16____invoke_28ImFontAtlas__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) > 0) {
   while (1) {
    SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 60) + ($3 << 2) | 0, 0));
    $5 = $2 + 8 | 0;
    $4 = _emval_take_value(50504, $5 | 0) | 0;
    _emval_incref($4 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
    _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 1, 48472, $5 | 0) | 0);
    _emval_decref($4 | 0);
    $3 = $3 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 52) | 0) > ($3 | 0)) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______append_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if ($1 >>> 0 <= $4 - $2 >>> 0) {
   if ($1) {
    $2 = memset($2, 0, $1) + $1 | 0
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
   return;
  }
  $3 = $2;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = $3 - $2 | 0;
  $3 = $5 + $1 | 0;
  if (($3 | 0) >= 0) {
   $4 = $4 - $2 | 0;
   $6 = $4 << 1;
   $3 = $4 >>> 0 >= 1073741823 ? 2147483647 : $3 >>> 0 < $6 >>> 0 ? $6 : $3;
   label$5 : {
    if (!$3) {
     $3 = 0;
     $4 = 0;
     break label$5;
    }
    $4 = operator_20new_28unsigned_20long_29($3);
   }
   $6 = memset($4 + $5 | 0, 0, $1);
   $5 = memmove($4, $2, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $3 + $5 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + $6 | 0);
   SAFE_HEAP_STORE_i32_4_4($0, 0, $5);
   if ($2) {
    dlfree($2)
   }
   return;
  }
  std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______throw_length_error_5babi_v15007_5d_28_29_20const() {
  std____2____throw_length_error_5babi_v15007_5d_28char_20const__29(5988);
  wasm2js_trap();
 }
 
 function embind_init_ImGuiViewport_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(52060, 52088, 52124, 0, 48504, 324, 48612, 0, 48612, 0, 2685, 48614, 325);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(52060, 4951, 72724, 49e3, 326, $0 | 0, 72724, 49004, 327, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 328);
  _embind_register_class_property(52060, 4621, 48496, 49e3, 329, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 330);
  _embind_register_class_property(52060, 10422, 48496, 49e3, 329, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 331);
  _embind_register_class_property(52060, 4549, 48496, 49e3, 329, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 332);
  _embind_register_class_property(52060, 10331, 48496, 49e3, 329, $0 | 0, 0, 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiViewport__28ImGuiViewport__29($0) {
  $0 = $0 | 0;
  return 52060;
 }
 
 function embind_init_ImGuiIO_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(52152, 52172, 52200, 0, 48504, 333, 48612, 0, 48612, 0, 14828, 48614, 334);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(52152, 4932, 72724, 49e3, 335, $0 | 0, 72724, 49004, 336, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(52152, 4944, 72724, 49e3, 335, $0 | 0, 72724, 49004, 336, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 337);
  _embind_register_class_property(52152, 10047, 48496, 49e3, 338, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(52152, 11066, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 20);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 20);
  _embind_register_class_property(52152, 10741, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 341);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 342);
  _embind_register_class_property(52152, 11124, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 344);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 345);
  _embind_register_class_property(52152, 11136, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 32);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 32);
  _embind_register_class_property(52152, 11045, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 36);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 36);
  _embind_register_class_property(52152, 2631, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 40);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 40);
  _embind_register_class_property(52152, 11826, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 346);
  _embind_register_class_function(52152, 6971, 3, 52216, 48740, 347, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 348);
  _embind_register_class_function(52152, 6957, 4, 52240, 48720, 349, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 132);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 132);
  _embind_register_class_property(52152, 1232, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 136);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 136);
  _embind_register_class_property(52152, 10727, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 350);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 351);
  _embind_register_class_property(52152, 13778, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 352);
  _embind_register_class_property(52152, 4187, 48496, 49e3, 338, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 148);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 148);
  _embind_register_class_property(52152, 11509, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 152);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 152);
  _embind_register_class_property(52152, 9018, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 355);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 356);
  _embind_register_class_property(52152, 3138, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 357);
  _embind_register_class_property(52152, 11485, 48496, 49e3, 338, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 168);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 168);
  _embind_register_class_property(52152, 6040, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 169);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 169);
  _embind_register_class_property(52152, 4265, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 170);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 170);
  _embind_register_class_property(52152, 8460, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 171);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 171);
  _embind_register_class_property(52152, 2048, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 172);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 172);
  _embind_register_class_property(52152, 5216, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 173);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 173);
  _embind_register_class_property(52152, 1189, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 176);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 176);
  _embind_register_class_property(52152, 6226, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 358);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 359);
  _embind_register_class_property(52152, 11227, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 360);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 361);
  _embind_register_class_property(52152, 11188, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 362);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 363);
  _embind_register_class_property(52152, 13721, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 364);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 365);
  _embind_register_class_property(52152, 13697, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 366);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 367);
  _embind_register_class_property(52152, 13745, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 368);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 369);
  _embind_register_class_property(52152, 7905, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 370);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 371);
  _embind_register_class_property(52152, 7886, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 372);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 373);
  _embind_register_class_property(52152, 13769, 48496, 49e3, 338, $0 | 0, 48496, 49004, 343, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 374);
  _embind_register_class_property(52152, 4576, 48496, 49e3, 338, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 375);
  _embind_register_class_function(52152, 7224, 3, 52256, 48740, 376, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 377);
  _embind_register_class_function(52152, 7207, 4, 52272, 48720, 378, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 236);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 236);
  _embind_register_class_property(52152, 8318, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 244);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 244);
  _embind_register_class_property(52152, 8071, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 245);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 245);
  _embind_register_class_property(52152, 3420, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 246);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 246);
  _embind_register_class_property(52152, 3195, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 247);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 247);
  _embind_register_class_property(52152, 6200, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 379);
  _embind_register_class_function(52152, 7164, 3, 52256, 48740, 376, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 380);
  _embind_register_class_function(52152, 7148, 4, 52272, 48720, 378, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 381);
  _embind_register_class_function(52152, 4111, 3, 52288, 51660, 382, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 383);
  _embind_register_class_function(52152, 4094, 4, 52304, 52320, 384, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 385);
  _embind_register_class_function(52152, 6182, 3, 52328, 49004, 386, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 387);
  _embind_register_class_function(52152, 16192, 3, 52340, 49004, 388, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 389);
  _embind_register_class_function(52152, 16192, 3, 52352, 49004, 390, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 391);
  _embind_register_class_function(52152, 4287, 2, 52364, 49408, 392, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 840);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 840);
  _embind_register_class_property(52152, 10755, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 841);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 841);
  _embind_register_class_property(52152, 11703, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 842);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 842);
  _embind_register_class_property(52152, 2148, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 843);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 843);
  _embind_register_class_property(52152, 4557, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 844);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 844);
  _embind_register_class_property(52152, 4861, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 845);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 845);
  _embind_register_class_property(52152, 10476, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 846);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 846);
  _embind_register_class_property(52152, 11355, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 848);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 848);
  _embind_register_class_property(52152, 10692, 72796, 48692, 339, $0 | 0, 72796, 48696, 340, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 852);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 852);
  _embind_register_class_property(52152, 5245, 72724, 49e3, 335, $0 | 0, 72724, 49004, 336, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 856);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 856);
  _embind_register_class_property(52152, 5267, 72724, 49e3, 335, $0 | 0, 72724, 49004, 336, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 860);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 860);
  _embind_register_class_property(52152, 3909, 72724, 49e3, 335, $0 | 0, 72724, 49004, 336, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 864);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 864);
  _embind_register_class_property(52152, 3930, 72724, 49e3, 335, $0 | 0, 72724, 49004, 336, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 868);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 868);
  _embind_register_class_property(52152, 4720, 72724, 49e3, 335, $0 | 0, 72724, 49004, 336, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 393);
  _embind_register_class_property(52152, 13610, 48496, 49e3, 338, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 880);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 880);
  _embind_register_class_property(52152, 10772, 72652, 49e3, 353, $0 | 0, 72652, 49004, 354, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 394);
  _embind_register_class_function(52152, 4602, 3, 52372, 48740, 395, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 396);
  _embind_register_class_function(52152, 7539, 3, 52288, 51660, 382, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 397);
  _embind_register_class_function(52152, 7486, 3, 52288, 51660, 382, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 398);
  _embind_register_class_function(52152, 7510, 3, 52288, 51660, 382, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiIO__28ImGuiIO__29($0) {
  $0 = $0 | 0;
  return 52152;
 }
 
 function void_20emscripten__internal__raw_destructor_ImGuiIO__28ImGuiIO__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  if ($0) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 5404 | 0, 0);
   if ($1) {
    ImGui__MemFree_28void__29($1)
   }
   dlfree($0);
  }
 }
 
 function embind_init_ImGuiIO_28_29__$_0____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 8 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_1____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 24);
  if ($1) {
   $1 = _emval_new_cstring($1 | 0) | 0
  } else {
   $1 = 2
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 }
 
 function embind_init_ImGuiIO_28_29__$_2____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  $6 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 49072, $2 + 12 | 0);
  label$1 : {
   if ($6 < 4294967296.0 & $6 >= 0.0) {
    $7 = ~~$6 >>> 0;
    break label$1;
   }
   $7 = 0;
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
  if ($4 >>> 0 < 2147483632) {
   $9 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
   label$4 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 11, $4);
     $3 = $2;
     break label$4;
    }
    $8 = ($4 | 15) + 1 | 0;
    $3 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
    SAFE_HEAP_STORE_i32_4_4($2, 4, $4);
   }
   if ($4) {
    __memcpy($3, $7 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($3 + $4 | 0, 0, 0);
   _emval_run_destructors($9 | 0);
   $3 = $5 + 4 | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 0))
   }
   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2 + 8 | 0, 0));
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
    $1 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($5, 4), wasm2js_i32$1 = $3, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($5, 15) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)
   } else {
    $1 = 0
   }
   SAFE_HEAP_STORE_i32_4_4($0, 24, $1);
   __stack_pointer = $2 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGuiIO_28_29__$_3____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 28);
  if ($1) {
   $1 = _emval_new_cstring($1 | 0) | 0
  } else {
   $1 = 2
  }
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 }
 
 function embind_init_ImGuiIO_28_29__$_4____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  $6 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 49072, $2 + 12 | 0);
  label$1 : {
   if ($6 < 4294967296.0 & $6 >= 0.0) {
    $7 = ~~$6 >>> 0;
    break label$1;
   }
   $7 = 0;
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
  if ($4 >>> 0 < 2147483632) {
   $9 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
   label$4 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 11, $4);
     $3 = $2;
     break label$4;
    }
    $8 = ($4 | 15) + 1 | 0;
    $3 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
    SAFE_HEAP_STORE_i32_4_4($2, 4, $4);
   }
   if ($4) {
    __memcpy($3, $7 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($3 + $4 | 0, 0, 0);
   _emval_run_destructors($9 | 0);
   $3 = $5 + 16 | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 27) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 0))
   }
   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($2 + 8 | 0, 0));
   if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
    $1 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($5, 16), wasm2js_i32$1 = $3, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($5, 27) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)
   } else {
    $1 = 0
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
   __stack_pointer = $2 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGuiIO_28_29__$_5____invoke_28ImGuiIO_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = -1;
  if ($1 >>> 0 <= 21) {
   $2 = SAFE_HEAP_LOAD_i32_4_4((($1 << 2) + $0 | 0) + 44 | 0, 0)
  }
  return $2 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_int_20_28__29_28ImGuiIO_20const__2c_20int_29_2c_20int_2c_20ImGuiIO_20const__2c_20int___invoke_28int_20_28___29_28ImGuiIO_20const__2c_20int_29_2c_20ImGuiIO__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($1, $2) | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_6____invoke_28ImGuiIO__2c_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if ($1 >>> 0 <= 21) {
   SAFE_HEAP_STORE_i32_4_4((($1 << 2) + $0 | 0) + 44 | 0, 0, $2)
  }
  return $1 >>> 0 < 22 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28ImGuiIO__2c_20int_2c_20int_29_2c_20bool_2c_20ImGuiIO__2c_20int_2c_20int___invoke_28bool_20_28___29_28ImGuiIO__2c_20int_2c_20int_29_2c_20ImGuiIO__2c_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($1, $2, $3) | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_7____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 28);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_8____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 28, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_9____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 144);
  label$1 : {
   if (!$1) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(51852, $2 + 8 | 0) | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_10____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 156);
  label$1 : {
   if (!$1) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(50504, $2 + 8 | 0) | 0);
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_11____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if (($1 | 0) == 2) {
   $1 = 0
  } else {
   $3 = +_emval_as($1 | 0, 50504, $2 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
   if ($3 < 4294967296.0 & $3 >= 0.0) {
    $1 = ~~$3 >>> 0
   } else {
    $1 = 0
   }
  }
  SAFE_HEAP_STORE_i32_4_4($0, 156, $1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_12____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 160 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_13____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 32);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_14____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 32, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_15____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 36);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_16____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 36, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_17____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 40);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_18____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 40) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 40, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_19____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 44);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_20____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 44) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 44, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_21____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 48);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_22____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 48) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 48, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_23____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 64);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_24____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 64) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 64, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_25____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 68);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_26____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 68) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 68, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_27____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $1 = $0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 95660), 72);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref($0 | 0);
 }
 
 function embind_init_ImGuiIO_28_29__$_28____invoke_28ImGuiIO__2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($0, 72) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 72, SAFE_HEAP_LOAD_i32_4_4($1, 0));
 }
 
 function embind_init_ImGuiIO_28_29__$_29____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 220 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_30____invoke_28ImGuiIO_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ($1 >>> 0 <= 4) {
   $2 = (SAFE_HEAP_LOAD_i32_1_U_1(($0 + $1 | 0) + 228 | 0, 0) | 0) != 0
  }
  return $2 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_31____invoke_28ImGuiIO__2c_20int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if ($1 >>> 0 <= 4) {
   SAFE_HEAP_STORE_i32_1_1(($0 + $1 | 0) + 228 | 0, 0, $2)
  }
  return $1 >>> 0 < 5 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_32____invoke_28ImGuiIO_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  if ($1 >>> 0 <= 511) {
   $2 = (SAFE_HEAP_LOAD_i32_1_U_1(($0 + $1 | 0) + 248 | 0, 0) | 0) != 0
  }
  return $2 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_33____invoke_28ImGuiIO__2c_20int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  if ($1 >>> 0 <= 511) {
   SAFE_HEAP_STORE_i32_1_1(($0 + $1 | 0) + 248 | 0, 0, $2)
  }
  return $1 >>> 0 < 512 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_34____invoke_28ImGuiIO_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0);
  if ($1 >>> 0 <= 19) {
   $2 = SAFE_HEAP_LOAD_f32_4_4((($1 << 2) + $0 | 0) + 760 | 0, 0)
  }
  return Math_fround($2);
 }
 
 function emscripten__internal__FunctionInvoker_float_20_28__29_28ImGuiIO_20const__2c_20int_29_2c_20float_2c_20ImGuiIO_20const__2c_20int___invoke_28float_20_28___29_28ImGuiIO_20const__2c_20int_29_2c_20ImGuiIO__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($1, $2)));
 }
 
 function embind_init_ImGuiIO_28_29__$_35____invoke_28ImGuiIO__2c_20int_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  if ($1 >>> 0 <= 19) {
   SAFE_HEAP_STORE_f32_4_4((($1 << 2) + $0 | 0) + 760 | 0, 0, $2)
  }
  return $1 >>> 0 < 20 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28ImGuiIO__2c_20int_2c_20float_29_2c_20bool_2c_20ImGuiIO__2c_20int_2c_20float___invoke_28bool_20_28___29_28ImGuiIO__2c_20int_2c_20float_29_2c_20ImGuiIO__2c_20int_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]($1, $2, $3) | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_36____invoke_28ImGuiIO__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = $1 & 65535;
  $3 = $0;
  $0 = SAFE_HEAP_LOAD_i32_2_U_2($3, 5394);
  if (($1 | $0) & 65535) {
   __inlined_func$ImGuiIO__AddInputCharacterUTF16_28unsigned_20short_29 : {
    $2 = $1 & 64512;
    if (($2 | 0) == 55296) {
     if ($0 & 65535) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 5396);
      $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 5400 | 0, 0);
      label$4 : {
       if (($2 | 0) != ($0 | 0)) {
        break label$4
       }
       $4 = $0;
       $0 = $0 ? $0 + (($0 | 0) / 2 | 0) | 0 : 8;
       $2 = $2 + 1 | 0;
       $0 = ($0 | 0) > ($2 | 0) ? $0 : $2;
       if (($4 | 0) >= ($0 | 0)) {
        break label$4
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($2) {
        $2 = $2 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
       }
       $2 = (((wasm2js_i32$1 = $0 << 1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
       $4 = SAFE_HEAP_LOAD_i32_4_4($3 + 5404 | 0, 0);
       if ($4) {
        __memcpy($2, $4, SAFE_HEAP_LOAD_i32_4_4($3, 5396) << 1);
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 5404);
        label$9 : {
         if (!$4) {
          break label$9
         }
         $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!$5) {
          break label$9
         }
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($3, 5400, $0);
       SAFE_HEAP_STORE_i32_4_4($3, 5404, $2);
      }
      SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($3 + 5404 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 5396) << 1) | 0, 0, 65533);
      SAFE_HEAP_STORE_i32_4_4($3, 5396, SAFE_HEAP_LOAD_i32_4_4($3, 5396) + 1 | 0);
     }
     SAFE_HEAP_STORE_i32_2_2($3, 5394, $1);
     break __inlined_func$ImGuiIO__AddInputCharacterUTF16_28unsigned_20short_29;
    }
    if ($0 & 65535) {
     $0 = 65533;
     if (($2 | 0) != 56320) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 5396);
      $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 5400 | 0, 0);
      label$13 : {
       if (($2 | 0) != ($0 | 0)) {
        break label$13
       }
       $4 = $0;
       $0 = $0 ? $0 + (($0 | 0) / 2 | 0) | 0 : 8;
       $2 = $2 + 1 | 0;
       $0 = ($0 | 0) > ($2 | 0) ? $0 : $2;
       if (($4 | 0) >= ($0 | 0)) {
        break label$13
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if ($2) {
        $2 = $2 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
       }
       $2 = (((wasm2js_i32$1 = $0 << 1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
       $4 = SAFE_HEAP_LOAD_i32_4_4($3 + 5404 | 0, 0);
       if ($4) {
        __memcpy($2, $4, SAFE_HEAP_LOAD_i32_4_4($3, 5396) << 1);
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 5404);
        label$18 : {
         if (!$4) {
          break label$18
         }
         $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if (!$5) {
          break label$18
         }
         $5 = $5 + 876 | 0;
         SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
        }
        ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
       }
       SAFE_HEAP_STORE_i32_4_4($3, 5400, $0);
       SAFE_HEAP_STORE_i32_4_4($3, 5404, $2);
      }
      SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($3 + 5404 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 5396) << 1) | 0, 0, 65533);
      SAFE_HEAP_STORE_i32_4_4($3, 5396, SAFE_HEAP_LOAD_i32_4_4($3, 5396) + 1 | 0);
      $0 = $1;
     }
     SAFE_HEAP_STORE_i32_2_2($3, 5394, 0);
     $1 = $0;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 5396);
    $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 5400 | 0, 0);
    label$19 : {
     if (($2 | 0) != ($0 | 0)) {
      break label$19
     }
     $4 = $0;
     $0 = $0 ? $0 + (($0 | 0) / 2 | 0) | 0 : 8;
     $2 = $2 + 1 | 0;
     $0 = ($0 | 0) > ($2 | 0) ? $0 : $2;
     if (($4 | 0) >= ($0 | 0)) {
      break label$19
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if ($2) {
      $2 = $2 + 876 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
     }
     $2 = (((wasm2js_i32$1 = $0 << 1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
     $4 = SAFE_HEAP_LOAD_i32_4_4($3 + 5404 | 0, 0);
     if ($4) {
      __memcpy($2, $4, SAFE_HEAP_LOAD_i32_4_4($3, 5396) << 1);
      $4 = SAFE_HEAP_LOAD_i32_4_4($3, 5404);
      label$24 : {
       if (!$4) {
        break label$24
       }
       $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       if (!$5) {
        break label$24
       }
       $5 = $5 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
      }
      ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
     }
     SAFE_HEAP_STORE_i32_4_4($3, 5400, $0);
     SAFE_HEAP_STORE_i32_4_4($3, 5404, $2);
    }
    SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($3 + 5404 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($3, 5396) << 1) | 0, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($3, 5396, SAFE_HEAP_LOAD_i32_4_4($3, 5396) + 1 | 0);
   }
  }
 }
 
 function embind_init_ImGuiIO_28_29__$_37____invoke_28ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
   while (1) {
    SAFE_HEAP_STORE_i32_4_4($5, 12, 0);
    $1 = ImTextCharFromUtf8_28unsigned_20int__2c_20char_20const__2c_20char_20const__29($5 + 12 | 0, $1, 0) + $1 | 0;
    $7 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
    if ($7) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 5396);
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 5400);
     label$4 : {
      if (($3 | 0) != ($2 | 0)) {
       break label$4
      }
      $4 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
      $3 = $3 + 1 | 0;
      $3 = ($3 | 0) < ($4 | 0) ? $4 : $3;
      if (($2 | 0) >= ($3 | 0)) {
       break label$4
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($2) {
       $2 = $2 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
      }
      $2 = (((wasm2js_i32$1 = $3 << 1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 5404);
      if ($4) {
       __memcpy($2, $4, SAFE_HEAP_LOAD_i32_4_4($0, 5396) << 1);
       $4 = SAFE_HEAP_LOAD_i32_4_4($0, 5404);
       label$9 : {
        if (!$4) {
         break label$9
        }
        $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$6) {
         break label$9
        }
        $6 = $6 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $4, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($0, 5400, $3);
      SAFE_HEAP_STORE_i32_4_4($0, 5404, $2);
     }
     SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($0, 5404) + (SAFE_HEAP_LOAD_i32_4_4($0, 5396) << 1) | 0, 0, $7);
     SAFE_HEAP_STORE_i32_4_4($0, 5396, SAFE_HEAP_LOAD_i32_4_4($0, 5396) + 1 | 0);
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $5 + 16 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_void_20_28__29_28ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20void_2c_20ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28___29_28ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20ImGuiIO__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  if ($4 >>> 0 < 2147483632) {
   $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$2 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($3, 15, $4);
     $0 = $3 + 4 | 0;
     break label$2;
    }
    $5 = ($4 | 15) + 1 | 0;
    $0 = operator_20new_28unsigned_20long_29($5);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $5 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $0);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
   }
   if ($4) {
    __memcpy($0, $2 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $4 | 0, 0, 0);
   FUNCTION_TABLE[$6 | 0]($1, $3 + 4 | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($3, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 4))
   }
   __stack_pointer = $3 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGuiIO_28_29__$_38____invoke_28ImGuiIO_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 872 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_39____invoke_28ImGuiIO_20const__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   if ($2 >>> 0 <= 4) {
    SAFE_HEAP_STORE_i32_4_4($3, 8, (($2 << 3) + $1 | 0) + 900 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $3 + 8 | 0) | 0);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, 1);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImGuiIO_28_29__$_40____invoke_28ImGuiIO_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0);
  $2 = Math_fround(-1.0);
  if ($1 >>> 0 <= 4) {
   $2 = SAFE_HEAP_LOAD_f32_4_4((($1 << 2) + $0 | 0) + 1032 | 0, 0)
  }
  return Math_fround($2);
 }
 
 function embind_init_ImGuiIO_28_29__$_41____invoke_28ImGuiIO_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0);
  $2 = Math_fround(-1.0);
  if ($1 >>> 0 <= 511) {
   $2 = SAFE_HEAP_LOAD_f32_4_4((($1 << 2) + $0 | 0) + 1132 | 0, 0)
  }
  return Math_fround($2);
 }
 
 function embind_init_ImGuiIO_28_29__$_42____invoke_28ImGuiIO_20const__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0);
  $2 = Math_fround(-1.0);
  if ($1 >>> 0 <= 19) {
   $2 = SAFE_HEAP_LOAD_f32_4_4((($1 << 2) + $0 | 0) + 5228 | 0, 0)
  }
  return Math_fround($2);
 }
 
 function embind_init_ImGuiStyle_28_29() {
  var $0 = 0, $1 = 0;
  _embind_register_class(52400, 52424, 52456, 0, 48504, 399, 48612, 0, 48612, 0, 11269, 48614, 400);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 0);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  _embind_register_class_property(52400, 13933, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 4);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  _embind_register_class_property(52400, 13925, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 403);
  _embind_register_class_property(52400, 9162, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 16);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 16);
  _embind_register_class_property(52400, 9055, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 20);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 20);
  _embind_register_class_property(52400, 10212, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 405);
  _embind_register_class_property(52400, 10305, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 406);
  _embind_register_class_property(52400, 7720, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 40);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 40);
  _embind_register_class_property(52400, 7414, 72724, 49e3, 407, $0 | 0, 72724, 49004, 408, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 44);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 44);
  _embind_register_class_property(52400, 9116, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 48);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 48);
  _embind_register_class_property(52400, 10261, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 52);
  _embind_register_class_property(52400, 9088, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 56);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 56);
  _embind_register_class_property(52400, 10229, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 409);
  _embind_register_class_property(52400, 9215, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 68);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 68);
  _embind_register_class_property(52400, 9102, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 72);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 72);
  _embind_register_class_property(52400, 10245, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 410);
  _embind_register_class_property(52400, 9318, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 411);
  _embind_register_class_property(52400, 9283, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 412);
  _embind_register_class_property(52400, 9176, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 413);
  _embind_register_class_property(52400, 9228, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 108);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 108);
  _embind_register_class_property(52400, 9269, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 112);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 112);
  _embind_register_class_property(52400, 9300, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 116);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 116);
  _embind_register_class_property(52400, 10291, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 120);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 120);
  _embind_register_class_property(52400, 9070, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 124);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 124);
  _embind_register_class_property(52400, 10319, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 128);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 128);
  _embind_register_class_property(52400, 9130, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 132);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 132);
  _embind_register_class_property(52400, 10929, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 136);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 136);
  _embind_register_class_property(52400, 9143, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 140);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 140);
  _embind_register_class_property(52400, 10277, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 144);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 144);
  _embind_register_class_property(52400, 7307, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 148);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 148);
  _embind_register_class_property(52400, 7439, 72724, 49e3, 407, $0 | 0, 72724, 49004, 408, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 414);
  _embind_register_class_property(52400, 7684, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 415);
  _embind_register_class_property(52400, 7700, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 416);
  _embind_register_class_property(52400, 9155, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 417);
  _embind_register_class_property(52400, 9246, 48496, 49e3, 404, $0 | 0, 0, 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 184);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 184);
  _embind_register_class_property(52400, 11468, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 188);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 188);
  _embind_register_class_property(52400, 5125, 72652, 49e3, 418, $0 | 0, 72652, 49004, 419, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 189);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 189);
  _embind_register_class_property(52400, 1481, 72652, 49e3, 418, $0 | 0, 72652, 49004, 419, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 190);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 190);
  _embind_register_class_property(52400, 8169, 72652, 49e3, 418, $0 | 0, 72652, 49004, 419, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 192);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 192);
  _embind_register_class_property(52400, 8122, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 196);
  $1 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 196);
  _embind_register_class_property(52400, 6086, 72796, 48692, 401, $0 | 0, 72796, 48696, 402, $1 | 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 420);
  _embind_register_class_function(52400, 4251, 3, 52472, 48740, 421, $0 | 0, 0, 0);
  $0 = operator_20new_28unsigned_20long_29(4);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 422);
  _embind_register_class_function(52400, 4237, 4, 52496, 48720, 423, $0 | 0, 0, 0);
  _embind_register_class_constructor(52400, 1, 52512, 48504, 424, 425);
  $0 = operator_20new_28unsigned_20long_29(8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 426);
  _embind_register_class_function(52400, 4957, 3, 52516, 48696, 427, $0 | 0, 0, 0);
 }
 
 function void_20const__20emscripten__internal__getActualType_ImGuiStyle__28ImGuiStyle__29($0) {
  $0 = $0 | 0;
  return 52400;
 }
 
 function embind_init_ImGuiStyle_28_29__$_1____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 24 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_3____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 60 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_4____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 76 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_5____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 84 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_6____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 92 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_7____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 100 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_8____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 152 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_10____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 168 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_11____invoke_28ImGuiStyle_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 176 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48676, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_12____invoke_28ImGuiStyle__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   if ($2 >>> 0 <= 52) {
    SAFE_HEAP_STORE_i32_4_4($3, 8, (($2 << 4) + $1 | 0) + 200 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48788, $3 + 8 | 0) | 0);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, 1);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImGuiStyle_28_29__$_13____invoke_28ImGuiStyle__2c_20int_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  if ($1 >>> 0 <= 52) {
   SAFE_HEAP_STORE_i64_8_8($3 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($3, 0, 0, 0);
   $0 = ($1 << 4) + $0 | 0;
   $2 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($2, $3);
   SAFE_HEAP_STORE_i64_8_4($0 + 200 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($0 + 208 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  }
  __stack_pointer = $3 + 16 | 0;
  return $1 >>> 0 < 53 | 0;
 }
 
 function emscripten__internal__FunctionInvoker_bool_20_28__29_28ImGuiStyle__2c_20int_2c_20emscripten__val_29_2c_20bool_2c_20ImGuiStyle__2c_20int_2c_20emscripten__val___invoke_28bool_20_28___29_28ImGuiStyle__2c_20int_2c_20emscripten__val_29_2c_20ImGuiStyle__2c_20int_2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
  $0 = FUNCTION_TABLE[$0 | 0]($1, $2, $4 + 12 | 0) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function ImGuiStyle__20emscripten__internal__operator_new_ImGuiStyle__28_29() {
  return ImGuiStyle__ImGuiStyle_28_29(operator_20new_28unsigned_20long_29(1048)) | 0;
 }
 
 function emscripten__internal__MethodInvoker_void_20_28ImGuiStyle____29_28float_29_2c_20void_2c_20ImGuiStyle__2c_20float___invoke_28void_20_28ImGuiStyle____20const__29_28float_29_2c_20ImGuiStyle__2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  var $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = ($3 >> 1) + $1 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  label$1 : {
   if (!($3 & 1)) {
    break label$1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0) + $0 | 0, 0);
  }
  FUNCTION_TABLE[$0 | 0]($1, $2);
 }
 
 function embind_init_ImGui_28_29() {
  var $0 = 0, $1 = 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_1_1($0, 8, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 4, 909651505);
  SAFE_HEAP_STORE_i32_1_1($0, 15, 4);
  $1 = dlmalloc(8);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 4);
  __memcpy($1 + 4 | 0, $0 + 4 | 0, 4);
  _embind_register_constant(14836, 49072, +($1 >>> 0));
  if ((SAFE_HEAP_LOAD_i32_1_1($0, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 4))
  }
  _embind_register_function(14850, 1, 52528, 48504, 428, 429, 0);
  _embind_register_constant(10393, 72760, 5408.0);
  _embind_register_constant(10366, 72760, 1048.0);
  _embind_register_constant(10416, 72760, 8.0);
  _embind_register_constant(10405, 72760, 16.0);
  _embind_register_constant(10132, 72760, 20.0);
  _embind_register_constant(10059, 72760, 2.0);
  _embind_register_constant(3449, 72760, 0.0);
  _embind_register_constant(3544, 72760, 8.0);
  _embind_register_constant(3501, 72760, 16.0);
  _embind_register_function(2034, 2, 52532, 49e3, 430, 431, 0);
  _embind_register_function(1966, 2, 52552, 49408, 432, 433, 0);
  _embind_register_function(1999, 1, 52560, 48504, 434, 435, 0);
  _embind_register_function(1981, 2, 52552, 49408, 432, 436, 0);
  _embind_register_function(14822, 1, 48472, 48504, 24, 437, 0);
  _embind_register_function(11260, 1, 48472, 48504, 24, 438, 0);
  _embind_register_function(11076, 1, 52564, 48614, 439, 440, 0);
  _embind_register_function(11085, 1, 52564, 48614, 439, 441, 0);
  _embind_register_function(6406, 1, 52564, 48614, 439, 442, 0);
  _embind_register_function(13634, 1, 48472, 48504, 24, 443, 0);
  _embind_register_function(1727, 2, 52568, 49408, 444, 445, 0);
  _embind_register_function(1709, 2, 52568, 49408, 444, 446, 0);
  _embind_register_function(1760, 2, 52568, 49408, 444, 447, 0);
  _embind_register_function(1669, 2, 52568, 49408, 444, 448, 0);
  _embind_register_function(5972, 2, 52568, 49408, 444, 449, 0);
  _embind_register_function(6012, 2, 52644, 49408, 450, 451, 0);
  _embind_register_function(5995, 2, 52644, 49408, 450, 452, 0);
  _embind_register_function(11616, 1, 52564, 48614, 439, 453, 0);
  _embind_register_function(7564, 1, 52652, 48504, 454, 455, 0);
  _embind_register_function(8444, 2, 52656, 49408, 456, 457, 0);
  _embind_register_function(3386, 2, 52656, 49408, 456, 458, 0);
  _embind_register_function(13454, 2, 52656, 49408, 456, 459, 0);
  _embind_register_function(7622, 4, 52672, 48720, 460, 461, 0);
  _embind_register_function(11801, 1, 52564, 48614, 439, 462, 0);
  _embind_register_function(11856, 5, 52688, 52708, 463, 464, 0);
  _embind_register_function(11867, 1, 52564, 48614, 439, 465, 0);
  _embind_register_function(9e3, 1, 52528, 48504, 428, 466, 0);
  _embind_register_function(12104, 1, 52528, 48504, 428, 467, 0);
  _embind_register_function(12002, 2, 52716, 49e3, 468, 469, 0);
  _embind_register_function(12247, 2, 52716, 49e3, 468, 470, 0);
  _embind_register_function(2538, 1, 48472, 48504, 24, 471, 0);
  _embind_register_function(4423, 2, 49856, 49e3, 472, 473, 0);
  _embind_register_function(10105, 2, 49856, 49e3, 472, 474, 0);
  _embind_register_function(8657, 1, 52724, 52728, 475, 476, 0);
  _embind_register_function(3325, 1, 52724, 52728, 475, 477, 0);
  _embind_register_function(4393, 4, 52736, 49104, 478, 479, 0);
  _embind_register_function(10073, 3, 52752, 49004, 480, 481, 0);
  _embind_register_function(4193, 5, 52768, 49924, 482, 483, 0);
  _embind_register_function(10159, 2, 52568, 49408, 444, 484, 0);
  _embind_register_function(12062, 3, 52788, 49004, 485, 486, 0);
  _embind_register_function(3964, 1, 52564, 48614, 439, 487, 0);
  _embind_register_function(13904, 2, 52800, 52808, 488, 489, 0);
  _embind_register_function(4410, 3, 52752, 49004, 480, 490, 0);
  _embind_register_function(10091, 3, 52752, 49004, 480, 491, 0);
  _embind_register_function(12085, 3, 52788, 49004, 485, 492, 0);
  _embind_register_function(3983, 1, 52564, 48614, 439, 493, 0);
  _embind_register_function(11449, 2, 52800, 52808, 488, 494, 0);
  _embind_register_function(4585, 4, 52816, 49104, 495, 496, 0);
  _embind_register_function(10348, 4, 52816, 49104, 495, 497, 0);
  _embind_register_function(12139, 4, 52832, 49104, 498, 499, 0);
  _embind_register_function(4018, 2, 52644, 49408, 450, 500, 0);
  _embind_register_function(8257, 2, 49856, 49e3, 472, 501, 0);
  _embind_register_function(1583, 2, 49856, 49e3, 472, 502, 0);
  _embind_register_function(7658, 2, 49856, 49e3, 472, 503, 0);
  _embind_register_function(1557, 2, 49856, 49e3, 472, 504, 0);
  _embind_register_function(14200, 1, 52724, 52728, 475, 505, 0);
  _embind_register_function(14070, 1, 52724, 52728, 475, 506, 0);
  _embind_register_function(14189, 2, 52800, 52808, 488, 507, 0);
  _embind_register_function(14059, 2, 52800, 52808, 488, 508, 0);
  _embind_register_function(14129, 1, 52724, 52728, 475, 509, 0);
  _embind_register_function(13989, 1, 52724, 52728, 475, 510, 0);
  _embind_register_function(14290, 2, 52800, 52808, 488, 511, 0);
  _embind_register_function(14081, 2, 52800, 52808, 488, 512, 0);
  _embind_register_function(14171, 3, 52848, 52860, 513, 514, 0);
  _embind_register_function(14041, 3, 52848, 52860, 513, 515, 0);
  _embind_register_function(2982, 2, 52568, 49408, 444, 516, 0);
  _embind_register_function(2967, 1, 52564, 48614, 439, 517, 0);
  _embind_register_function(6167, 3, 52868, 49004, 518, 519, 0);
  _embind_register_function(6153, 2, 52880, 49408, 520, 521, 0);
  _embind_register_function(6570, 3, 52868, 49004, 518, 522, 0);
  _embind_register_function(6558, 2, 52880, 49408, 520, 523, 0);
  _embind_register_function(4059, 2, 52888, 49408, 524, 525, 0);
  _embind_register_function(4037, 1, 52564, 48614, 439, 526, 0);
  _embind_register_function(3867, 2, 52888, 49408, 524, 527, 0);
  _embind_register_function(3851, 1, 52564, 48614, 439, 528, 0);
  _embind_register_function(8732, 2, 52800, 52808, 488, 529, 0);
  _embind_register_function(8719, 1, 52564, 48614, 439, 530, 0);
  _embind_register_function(8702, 2, 52800, 52808, 488, 531, 0);
  _embind_register_function(8746, 1, 52724, 52728, 475, 532, 0);
  _embind_register_function(4495, 2, 52800, 52808, 488, 533, 0);
  _embind_register_function(4480, 1, 52564, 48614, 439, 534, 0);
  _embind_register_function(2959, 1, 48472, 48504, 24, 535, 0);
  _embind_register_function(10147, 1, 52724, 52728, 475, 536, 0);
  _embind_register_function(8295, 2, 49856, 49e3, 472, 537, 0);
  _embind_register_function(15490, 3, 52896, 48740, 538, 539, 0);
  _embind_register_function(15283, 2, 52908, 49e3, 540, 541, 0);
  _embind_register_function(15133, 2, 52916, 49e3, 542, 543, 0);
  _embind_register_function(16349, 2, 52924, 49e3, 544, 545, 0);
  _embind_register_function(6030, 1, 52564, 48614, 439, 546, 0);
  _embind_register_function(10991, 3, 52848, 52860, 513, 547, 0);
  _embind_register_function(10983, 1, 52564, 48614, 439, 548, 0);
  _embind_register_function(9421, 1, 52564, 48614, 439, 549, 0);
  _embind_register_function(1164, 2, 52568, 49408, 444, 550, 0);
  _embind_register_function(3078, 2, 52800, 52808, 488, 551, 0);
  _embind_register_function(3069, 2, 52800, 52808, 488, 552, 0);
  _embind_register_function(6791, 1, 52564, 48614, 439, 553, 0);
  _embind_register_function(6802, 1, 52564, 48614, 439, 554, 0);
  _embind_register_function(4467, 2, 49856, 49e3, 472, 555, 0);
  _embind_register_function(14157, 1, 52724, 52728, 475, 556, 0);
  _embind_register_function(14027, 1, 52724, 52728, 475, 557, 0);
  _embind_register_function(4454, 2, 52568, 49408, 444, 558, 0);
  _embind_register_function(14143, 2, 52800, 52808, 488, 559, 0);
  _embind_register_function(14013, 2, 52800, 52808, 488, 560, 0);
  _embind_register_function(4436, 2, 49856, 49e3, 472, 561, 0);
  _embind_register_function(4530, 2, 49856, 49e3, 472, 562, 0);
  _embind_register_function(4511, 2, 52568, 49408, 444, 563, 0);
  _embind_register_function(9204, 1, 52564, 48614, 439, 564, 0);
  _embind_register_function(3353, 1, 52724, 52728, 475, 565, 0);
  _embind_register_function(9356, 1, 52724, 52728, 475, 566, 0);
  _embind_register_function(3371, 1, 52724, 52728, 475, 567, 0);
  _embind_register_function(9385, 1, 52724, 52728, 475, 568, 0);
  _embind_register_function(15056, 2, 52568, 49408, 444, 569, 0);
  _embind_register_function(15050, 1, 52564, 48614, 439, 570, 0);
  _embind_register_function(15031, 2, 52908, 49e3, 540, 571, 0);
  _embind_register_function(11926, 2, 52644, 49408, 450, 572, 0);
  _embind_register_function(2140, 2, 52644, 49408, 450, 573, 0);
  _embind_register_function(12235, 3, 52932, 49004, 574, 575, 0);
  _embind_register_function(12567, 2, 52644, 49408, 450, 576, 0);
  _embind_register_function(12459, 2, 52644, 49408, 450, 577, 0);
  _embind_register_function(2086, 3, 52944, 49004, 578, 579, 0);
  _embind_register_function(2075, 2, 52644, 49408, 450, 580, 0);
  _embind_register_function(7354, 3, 52956, 48740, 581, 582, 0);
  _embind_register_function(7295, 2, 52968, 49e3, 583, 584, 0);
  _embind_register_function(7333, 4, 52672, 48720, 460, 585, 0);
  _embind_register_function(7255, 3, 52976, 48740, 586, 587, 0);
  _embind_register_function(11592, 7, 52992, 50220, 588, 589, 0);
  _embind_register_function(7349, 8, 53024, 53056, 590, 591, 0);
  _embind_register_function(1358, 3, 52956, 48740, 581, 592, 0);
  _embind_register_function(4881, 4, 53136, 48720, 593, 594, 0);
  _embind_register_function(15406, 3, 53208, 48740, 595, 596, 0);
  _embind_register_function(15199, 4, 52672, 48720, 460, 597, 0);
  _embind_register_function(6653, 4, 53280, 53296, 598, 599, 0);
  _embind_register_function(3563, 1, 52564, 48614, 439, 600, 0);
  _embind_register_function(7032, 4, 52672, 48720, 460, 601, 0);
  _embind_register_function(7043, 1, 52564, 48614, 439, 602, 0);
  _embind_register_function(7046, 7, 53472, 53500, 603, 604, 0);
  _embind_register_function(3841, 8, 53536, 53056, 605, 606, 0);
  _embind_register_function(16527, 8, 53536, 53056, 605, 607, 0);
  _embind_register_function(16448, 8, 53536, 53056, 605, 608, 0);
  _embind_register_function(16325, 8, 53536, 53056, 605, 609, 0);
  _embind_register_function(16552, 10, 53792, 53832, 610, 611, 0);
  _embind_register_function(3120, 8, 53856, 53056, 612, 613, 0);
  _embind_register_function(16493, 8, 53856, 53056, 612, 614, 0);
  _embind_register_function(16403, 8, 53856, 53056, 612, 615, 0);
  _embind_register_function(16256, 8, 53856, 53056, 612, 616, 0);
  _embind_register_function(16538, 10, 53792, 53832, 610, 617, 0);
  _embind_register_function(6458, 9, 54064, 54100, 618, 619, 0);
  _embind_register_function(3829, 7, 54880, 53500, 620, 621, 0);
  _embind_register_function(16514, 7, 54880, 53500, 620, 622, 0);
  _embind_register_function(16435, 7, 54880, 53500, 620, 623, 0);
  _embind_register_function(16288, 7, 54880, 53500, 620, 624, 0);
  _embind_register_function(11314, 7, 54880, 53500, 620, 625, 0);
  _embind_register_function(3110, 7, 54912, 53500, 626, 627, 0);
  _embind_register_function(16482, 7, 54912, 53500, 626, 628, 0);
  _embind_register_function(16392, 7, 54912, 53500, 626, 629, 0);
  _embind_register_function(16245, 7, 54912, 53500, 626, 630, 0);
  _embind_register_function(6445, 8, 54944, 53056, 631, 632, 0);
  _embind_register_function(3828, 8, 53536, 53056, 605, 633, 0);
  _embind_register_function(3109, 8, 53856, 53056, 612, 634, 0);
  _embind_register_function(6444, 9, 54976, 54100, 635, 636, 0);
  _embind_register_function(2065, 7, 55024, 53500, 637, 638, 0);
  _embind_register_function(10964, 8, 55056, 53056, 639, 640, 0);
  _embind_register_function(3001, 8, 55088, 53056, 641, 642, 0);
  _embind_register_function(3817, 7, 54880, 53500, 620, 643, 0);
  _embind_register_function(16502, 5, 55120, 52708, 644, 645, 0);
  _embind_register_function(16423, 5, 55120, 52708, 644, 646, 0);
  _embind_register_function(16276, 5, 55120, 52708, 644, 647, 0);
  _embind_register_function(3100, 6, 55152, 48856, 648, 649, 0);
  _embind_register_function(16472, 4, 52672, 48720, 460, 650, 0);
  _embind_register_function(16382, 4, 52672, 48720, 460, 651, 0);
  _embind_register_function(16235, 4, 52672, 48720, 460, 652, 0);
  _embind_register_function(11343, 7, 55184, 55212, 653, 654, 0);
  _embind_register_function(6432, 8, 54944, 53056, 631, 655, 0);
  _embind_register_function(16412, 4, 52672, 48720, 460, 656, 0);
  _embind_register_function(16265, 4, 52672, 48720, 460, 657, 0);
  _embind_register_function(16459, 4, 52672, 48720, 460, 658, 0);
  _embind_register_function(16336, 5, 55280, 52708, 659, 660, 0);
  _embind_register_function(7269, 5, 55280, 52708, 659, 661, 0);
  _embind_register_function(4636, 2, 52880, 49408, 520, 662, 0);
  _embind_register_function(15479, 2, 52968, 49e3, 583, 663, 0);
  _embind_register_function(15272, 3, 55368, 48740, 664, 665, 0);
  _embind_register_function(15122, 3, 55380, 48740, 666, 667, 0);
  _embind_register_function(15364, 3, 52976, 48740, 586, 668, 0);
  _embind_register_function(15157, 4, 55392, 48720, 669, 670, 0);
  _embind_register_function(15101, 4, 55408, 48720, 671, 672, 0);
  _embind_register_function(15431, 2, 52644, 49408, 450, 673, 0);
  _embind_register_function(15224, 2, 52880, 49408, 520, 674, 0);
  _embind_register_function(6878, 1, 52564, 48614, 439, 675, 0);
  _embind_register_function(9330, 1, 52724, 52728, 475, 676, 0);
  _embind_register_function(15387, 3, 52976, 48740, 586, 677, 0);
  _embind_register_function(15180, 4, 52672, 48720, 460, 678, 0);
  _embind_register_function(7793, 3, 52788, 49004, 485, 679, 0);
  _embind_register_function(15466, 5, 55424, 52708, 680, 681, 0);
  _embind_register_function(15259, 5, 55280, 52708, 659, 682, 0);
  _embind_register_function(1367, 3, 52956, 48740, 581, 683, 0);
  _embind_register_function(1380, 1, 52564, 48614, 439, 684, 0);
  _embind_register_function(15354, 6, 55456, 48856, 685, 686, 0);
  _embind_register_function(15147, 7, 53472, 53500, 603, 687, 0);
  _embind_register_function(5115, 10, 55488, 55528, 688, 689, 0);
  _embind_register_function(8057, 10, 55488, 55528, 688, 690, 0);
  _embind_register_function(15442, 3, 55548, 49004, 691, 692, 0);
  _embind_register_function(15235, 3, 55560, 49004, 693, 694, 0);
  _embind_register_function(15114, 3, 55572, 49004, 695, 696, 0);
  _embind_register_function(15017, 4, 55584, 55600, 697, 698, 0);
  _embind_register_function(6583, 1, 52528, 48504, 428, 699, 0);
  _embind_register_function(6642, 1, 52564, 48614, 439, 700, 0);
  _embind_register_function(6596, 1, 52528, 48504, 428, 701, 0);
  _embind_register_function(6613, 1, 52564, 48614, 439, 702, 0);
  _embind_register_function(1887, 3, 53208, 48740, 595, 703, 0);
  _embind_register_function(1897, 1, 52564, 48614, 439, 704, 0);
  _embind_register_function(15420, 5, 55616, 52708, 705, 706, 0);
  _embind_register_function(15213, 5, 55648, 52708, 707, 708, 0);
  _embind_register_function(6897, 1, 52564, 48614, 439, 709, 0);
  _embind_register_function(6910, 1, 52564, 48614, 439, 710, 0);
  _embind_register_function(6886, 2, 52644, 49408, 450, 711, 0);
  _embind_register_function(6761, 3, 52976, 48740, 586, 712, 0);
  _embind_register_function(8405, 4, 52672, 48720, 460, 713, 0);
  _embind_register_function(6782, 1, 52564, 48614, 439, 714, 0);
  _embind_register_function(6772, 3, 55560, 49004, 693, 715, 0);
  _embind_register_function(8487, 3, 52752, 49004, 480, 716, 0);
  _embind_register_function(6730, 1, 52564, 48614, 439, 717, 0);
  _embind_register_function(8011, 3, 55668, 48740, 718, 719, 0);
  _embind_register_function(1645, 3, 55668, 48740, 718, 720, 0);
  _embind_register_function(11881, 3, 55668, 48740, 718, 721, 0);
  _embind_register_function(7781, 3, 52976, 48740, 586, 722, 0);
  _embind_register_function(11418, 6, 55680, 55704, 723, 724, 0);
  _embind_register_function(11429, 1, 52564, 48614, 439, 725, 0);
  _embind_register_function(1820, 3, 55712, 48696, 726, 727, 0);
  _embind_register_function(7583, 1, 52528, 48504, 428, 728, 0);
  _embind_register_function(1441, 2, 52716, 49e3, 468, 729, 0);
  _embind_register_function(7599, 5, 55728, 55748, 730, 731, 0);
  _embind_register_function(10427, 3, 55756, 49004, 732, 733, 0);
  _embind_register_function(1833, 1, 52564, 48614, 439, 734, 0);
  _embind_register_function(6413, 2, 52644, 49408, 450, 735, 0);
  _embind_register_function(5345, 1, 48472, 48504, 24, 736, 0);
  _embind_register_function(2870, 1, 55768, 48504, 737, 738, 0);
  _embind_register_function(1461, 1, 55768, 48504, 737, 739, 0);
  _embind_register_function(1424, 1, 55768, 48504, 737, 740, 0);
  _embind_register_function(11208, 2, 55772, 49e3, 741, 742, 0);
  _embind_register_function(4912, 2, 55780, 49e3, 743, 744, 0);
  _embind_register_function(12606, 3, 55788, 49004, 745, 746, 0);
  _embind_register_function(6137, 4, 55808, 49104, 747, 748, 0);
  _embind_register_function(4753, 4, 55824, 49104, 749, 750, 0);
  _embind_register_function(7588, 1, 52564, 48614, 439, 751, 0);
  _embind_register_function(1466, 1, 55768, 48504, 737, 752, 0);
  _embind_register_function(8687, 2, 55840, 48692, 753, 754, 0);
  _embind_register_function(8672, 3, 55712, 48696, 726, 755, 0);
  _embind_register_function(3485, 2, 55840, 48692, 753, 756, 0);
  _embind_register_function(3469, 3, 55712, 48696, 726, 757, 0);
  _embind_register_function(2832, 1, 55768, 48504, 737, 758, 0);
  _embind_register_function(6665, 3, 52976, 48740, 586, 759, 0);
  _embind_register_function(6677, 1, 52564, 48614, 439, 760, 0);
  _embind_register_function(8033, 4, 52672, 48720, 460, 761, 0);
  _embind_register_function(8046, 1, 52564, 48614, 439, 762, 0);
  _embind_register_function(7281, 3, 52976, 48740, 586, 763, 0);
  _embind_register_function(12162, 2, 52644, 49408, 450, 764, 0);
  _embind_register_function(14096, 2, 52880, 49408, 520, 765, 0);
  _embind_register_function(11280, 3, 52868, 49004, 518, 766, 0);
  _embind_register_function(11723, 2, 52880, 49408, 520, 767, 0);
  _embind_register_function(8776, 1, 52564, 48614, 439, 768, 0);
  _embind_register_function(4625, 1, 52564, 48614, 439, 769, 0);
  _embind_register_function(2096, 2, 52644, 49408, 450, 770, 0);
  _embind_register_function(11630, 2, 52716, 49e3, 468, 771, 0);
  _embind_register_function(12766, 5, 55856, 52708, 772, 773, 0);
  _embind_register_function(11650, 1, 52564, 48614, 439, 774, 0);
  _embind_register_function(3570, 1, 52528, 48504, 428, 775, 0);
  _embind_register_function(12744, 3, 52976, 48740, 586, 776, 0);
  _embind_register_function(3590, 1, 52564, 48614, 439, 777, 0);
  _embind_register_function(12785, 1, 48472, 48504, 24, 778, 0);
  _embind_register_function(12580, 2, 52888, 49408, 524, 779, 0);
  _embind_register_function(12594, 1, 52564, 48614, 439, 780, 0);
  _embind_register_function(3699, 4, 55888, 49104, 781, 782, 0);
  _embind_register_function(3687, 1, 52564, 48614, 439, 783, 0);
  _embind_register_function(3998, 1, 52564, 48614, 439, 784, 0);
  _embind_register_function(10859, 2, 52880, 49408, 520, 785, 0);
  _embind_register_function(12360, 2, 52716, 49e3, 468, 786, 0);
  _embind_register_function(10561, 1, 52528, 48504, 428, 787, 0);
  _embind_register_function(12035, 1, 52528, 48504, 428, 788, 0);
  _embind_register_function(12635, 2, 52716, 49e3, 468, 789, 0);
  _embind_register_function(11366, 1, 52528, 48504, 428, 790, 0);
  _embind_register_function(11942, 1, 52528, 48504, 428, 791, 0);
  _embind_register_function(11973, 1, 52528, 48504, 428, 792, 0);
  _embind_register_function(11955, 1, 52528, 48504, 428, 793, 0);
  _embind_register_function(3230, 1, 52528, 48504, 428, 794, 0);
  _embind_register_function(7809, 1, 52528, 48504, 428, 795, 0);
  _embind_register_function(12343, 1, 52528, 48504, 428, 796, 0);
  _embind_register_function(10545, 1, 52528, 48504, 428, 797, 0);
  _embind_register_function(12018, 1, 52528, 48504, 428, 798, 0);
  _embind_register_function(7643, 2, 49856, 49e3, 472, 799, 0);
  _embind_register_function(1542, 2, 49856, 49e3, 472, 800, 0);
  _embind_register_function(10196, 2, 49856, 49e3, 472, 801, 0);
  _embind_register_function(6937, 1, 52564, 48614, 439, 802, 0);
  _embind_register_function(2669, 1, 48472, 48504, 24, 803, 0);
  _embind_register_function(15450, 2, 55904, 49e3, 804, 805, 0);
  _embind_register_function(15243, 3, 48748, 48740, 806, 807, 0);
  _embind_register_function(11037, 1, 55912, 55916, 808, 809, 0);
  _embind_register_function(2900, 1, 55768, 48504, 737, 810, 0);
  _embind_register_function(2567, 1, 48472, 48504, 24, 811, 0);
  _embind_register_function(2589, 1, 48472, 48504, 24, 812, 0);
  _embind_register_function(13870, 1, 48472, 48504, 24, 813, 0);
  _embind_register_function(11170, 2, 55772, 49e3, 741, 814, 0);
  _embind_register_function(11550, 2, 52568, 49408, 444, 815, 0);
  _embind_register_function(11566, 1, 48472, 48504, 24, 816, 0);
  _embind_register_function(11094, 4, 56e3, 48720, 817, 818, 0);
  _embind_register_function(11110, 1, 52564, 48614, 439, 819, 0);
  _embind_register_function(10119, 5, 56016, 56036, 820, 821, 0);
  _embind_register_function(16301, 3, 56044, 48740, 822, 823, 0);
  _embind_register_function(16575, 2, 52908, 49e3, 540, 824, 0);
  _embind_register_function(14785, 7, 56064, 56092, 825, 826, 0);
  _embind_register_function(15297, 7, 56064, 56092, 825, 827, 0);
  _embind_register_function(1412, 2, 55780, 49e3, 743, 828, 0);
  _embind_register_function(7138, 2, 52716, 49e3, 468, 829, 0);
  _embind_register_function(12049, 3, 56104, 48740, 830, 831, 0);
  _embind_register_function(12179, 2, 52716, 49e3, 468, 832, 0);
  _embind_register_function(2742, 4, 56128, 56144, 833, 834, 0);
  _embind_register_function(6843, 2, 52888, 49408, 524, 835, 0);
  _embind_register_function(7195, 2, 52716, 49e3, 468, 836, 0);
  _embind_register_function(12649, 3, 56104, 48740, 830, 837, 0);
  _embind_register_function(12193, 2, 52716, 49e3, 468, 838, 0);
  _embind_register_function(12664, 2, 52716, 49e3, 468, 839, 0);
  _embind_register_function(2914, 2, 55780, 49e3, 743, 840, 0);
  _embind_register_function(3783, 4, 56160, 48720, 841, 842, 0);
  _embind_register_function(11903, 2, 55904, 49e3, 804, 843, 0);
  _embind_register_function(7180, 1, 52528, 48504, 428, 844, 0);
  _embind_register_function(4573, 2, 49856, 49e3, 472, 845, 0);
  _embind_register_function(6697, 2, 49856, 49e3, 472, 846, 0);
  _embind_register_function(9039, 3, 56232, 51284, 847, 848, 0);
  _embind_register_function(13592, 4, 56256, 56272, 849, 850, 0);
  _embind_register_function(13572, 2, 52880, 49408, 520, 851, 0);
  _embind_register_function(6071, 1, 55768, 48504, 737, 852, 0);
  _embind_register_function(6056, 2, 52880, 49408, 520, 853, 0);
  _embind_register_function(6823, 2, 52888, 49408, 524, 854, 0);
  _embind_register_function(2121, 1, 52652, 48504, 454, 855, 0);
  _embind_register_function(2104, 2, 52568, 49408, 444, 856, 0);
  _embind_register_function(1133, 2, 52644, 49408, 450, 857, 0);
  _embind_register_function(1109, 1, 52652, 48504, 454, 858, 0);
  _embind_register_function(2162, 8, 56288, 53056, 859, 860, 0);
  _embind_register_function(4656, 4, 56320, 49104, 861, 862, 0);
  _embind_register_function(13426, 2, 56344, 49e3, 863, 864, 0);
  _embind_register_function(11598, 2, 52568, 49408, 444, 865, 0);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_0____invoke_28_29() {
  return ImGui__DebugCheckVersionAndDataLayout_28char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29(16215, 5408, 1048, 8, 16, 20, 2) | 0;
 }
 
 function emscripten__internal__Invoker_WrapImGuiContext__2c_20ImFontAtlas____invoke_28WrapImGuiContext__20_28__29_28ImFontAtlas__29_2c_20ImFontAtlas__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return FUNCTION_TABLE[$0 | 0]($1) | 0;
 }
 
 function embind_init_ImGui_28_29__$_1____invoke_28ImFontAtlas__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = operator_20new_28unsigned_20long_29(184);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ($2) {
   $2 = $2 + 876 | 0;
   SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) + 1 | 0);
  }
  $1 = (((wasm2js_i32$1 = 15880, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
  $2 = $1 + 8 | 0;
  SAFE_HEAP_STORE_i64_8_8($2, 8, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2, 160, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 220, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 892, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2, 872, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 900 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 908 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 916 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 924 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 932 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2 + 1072 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2 + 1080 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2 + 1088 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2 + 1096 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2 + 1104 | 0, 0, 0, 0);
  $3 = memset($2, 0, 5408);
  SAFE_HEAP_STORE_i64_8_8($3, 32, 1050253722, 1086324736);
  SAFE_HEAP_STORE_i32_4_4($3, 28, 1924);
  SAFE_HEAP_STORE_i32_4_4($3, 24, 8540);
  SAFE_HEAP_STORE_i64_8_8($3, 16, 1015580809, 1084227584);
  SAFE_HEAP_STORE_i64_8_8($3, 8, -1082130432, -1082130432);
  memset($3 + 44 | 0, 255, 88);
  SAFE_HEAP_STORE_i32_4_4($3, 156, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 148, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($3, 140, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($3, 132, 1049414861, 1028443341);
  SAFE_HEAP_STORE_i64_8_4($3, 180, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 176, 1114636288);
  SAFE_HEAP_STORE_i32_2_2($3, 172, 1);
  SAFE_HEAP_STORE_i32_1_1($3, 170, 1);
  SAFE_HEAP_STORE_i32_2_2($3, 168, 0);
  SAFE_HEAP_STORE_i64_8_8($3, 160, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i32_1_1($3, 152, 0);
  SAFE_HEAP_STORE_i64_8_4($3 + 188 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($3 + 196 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($3, 892, -8388609, -8388609);
  SAFE_HEAP_STORE_i32_4_4($3 + 224 | 0, 0, -8388609);
  SAFE_HEAP_STORE_i64_8_8($3, 216, 0, -8388609);
  SAFE_HEAP_STORE_i32_4_4($3, 212, 1);
  SAFE_HEAP_STORE_i32_4_4($3, 208, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 204, 2);
  SAFE_HEAP_STORE_i32_4_4($3, 200, 3);
  SAFE_HEAP_STORE_i32_4_4($3, 40, 1086324736);
  while (1) {
   $2 = $3 + ($4 << 2) | 0;
   SAFE_HEAP_STORE_i32_4_4($2 + 1032 | 0, 0, -1082130432);
   SAFE_HEAP_STORE_i32_4_4($2 + 1052 | 0, 0, -1082130432);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 5) {
    continue
   }
   break;
  };
  $4 = 0;
  while (1) {
   $2 = $3 + ($4 << 2) | 0;
   SAFE_HEAP_STORE_i32_4_4($2 + 1132 | 0, 0, -1082130432);
   SAFE_HEAP_STORE_i32_4_4($2 + 3180 | 0, 0, -1082130432);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 512) {
    continue
   }
   break;
  };
  $4 = 0;
  while (1) {
   SAFE_HEAP_STORE_i32_4_4(($3 + ($4 << 2) | 0) + 5228 | 0, 0, -1082130432);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 20) {
    continue
   }
   break;
  };
  ImGuiStyle__ImGuiStyle_28_29($1 + 5416 | 0);
  $2 = $1 + 6476 | 0;
  SAFE_HEAP_STORE_i64_8_4($2, 24, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 32 | 0, 0, 0, 0);
  memset($2 + 44 | 0, 0, 384);
  $3 = memset($2, 0, 500);
  $4 = 0;
  while (1) {
   $2 = ($4 << 3) + $3 | 0;
   $7 = Math_fround($4 | 0);
   $7 = Math_fround(Math_fround(Math_fround($7 + $7) * Math_fround(3.1415927410125732)) / Math_fround(48.0));
   SAFE_HEAP_STORE_f32_4_4($2 + 48 | 0, 0, sinf($7));
   SAFE_HEAP_STORE_f32_4_4($2 + 44 | 0, 0, cosf($7));
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 48) {
    continue
   }
   break;
  };
  SAFE_HEAP_STORE_f32_4_4($3, 428, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 20) / Math_fround(2.1410584449768066e-03)));
  SAFE_HEAP_STORE_i64_8_8($1, 7072, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7100, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7176, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7580, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7504 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7496, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7588 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7668, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7676 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7684 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7692 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7008, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7016 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7024 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7032 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7040 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7048 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7056 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7064 | 0, 0, 0);
  memset($1 + 7220 | 0, 0, 272);
  SAFE_HEAP_STORE_i64_8_8($1 + 7648 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7640 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7632 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7624, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7708 | 0, 0, 2139095039);
  SAFE_HEAP_STORE_i64_8_8($1, 7712, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7700 | 0, 0, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i64_8_8($1 + 7720 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7728 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7736 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7752 | 0, 0, 2139095039);
  SAFE_HEAP_STORE_i64_8_4($1, 7756, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7744 | 0, 0, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i64_8_4($1 + 7764 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7772 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7780 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7792 | 0, 0, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i32_4_4($1 + 7788 | 0, 0, 2139095039);
  SAFE_HEAP_STORE_i64_8_8($1 + 7824 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7816 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7808 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7800, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7836 | 0, 0, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i32_4_4($1 + 7832 | 0, 0, 2139095039);
  SAFE_HEAP_STORE_i64_8_8($1 + 7912 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7920 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7928 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7936 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_2_2($1 + 7944 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7892, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7900 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7908 | 0, 0, -1);
  SAFE_HEAP_STORE_i32_1_1($1 + 7946 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7948, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7956 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7996 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 8028 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 8e3 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7992, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8024, 0);
  memset($1 + 8044 | 0, 0, 68);
  memset($1 + 8116 | 0, 0, 3764);
  ImFont__ImFont_28_29($1 + 11880 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12256, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 12216 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 12208, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 11988, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 11996 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12004 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12012 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12020 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12028 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12036 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12044 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 12084, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12092 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12100 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12108 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12116 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 12132, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12140 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12148 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12156 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12164 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12172 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 12180 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 12188 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 12264 | 0, 0, -1, -1);
  SAFE_HEAP_STORE_i32_2_2($1 + 12260 | 0, 0, 257);
  SAFE_HEAP_STORE_i64_8_8($1, 12272, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 12280 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 12288 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 6464, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 1, !$0);
  SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 6468, 0, 0);
  if (!$0) {
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $0 = (((wasm2js_i32$2 = 1128, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   memset($0 + 36 | 0, 0, 1076);
   $0 = memset($0, 0, 1128);
   SAFE_HEAP_STORE_i32_4_4($0, 12, 1);
   SAFE_HEAP_STORE_i64_8_4($0, 1120, -1, -1);
  }
  SAFE_HEAP_STORE_i64_8_8($1, 6976, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7168, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7156, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7068, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7004, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 6984, 0, -1);
  SAFE_HEAP_STORE_i64_8_8($1, 6992, -1, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7080, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7108, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 152 | 0, 0, $0);
  SAFE_HEAP_STORE_i32_1_1($1 + 7e3 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1 + 7088 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7096 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7116 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7124 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7132 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7140 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_1($1 + 7147 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7492, 0);
  SAFE_HEAP_STORE_i32_2_2($1, 7200, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7192, -1, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7184, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7176, -1082130432, -1082130432);
  SAFE_HEAP_STORE_i64_8_4($1, 7204, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7212 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7508, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7516 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7524 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7532 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7540 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7548 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7556 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_2($1 + 7562 | 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7576, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7608, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7600, 0, 0);
  SAFE_HEAP_STORE_i32_2_2($1, 7596, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 7598, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 7570, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 7620, -1);
  SAFE_HEAP_STORE_i32_4_1($1, 7571, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7656, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7880, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 7664, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7612, -1, -1);
  SAFE_HEAP_STORE_i64_8_1($1 + 7857 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 7852 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7844, 0, 0);
  SAFE_HEAP_STORE_i32_4_1($1 + 7875 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7868, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 7980 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7884, -1, -1);
  SAFE_HEAP_STORE_i64_8_4($1 + 7972 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 7964, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8112, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 11968, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 7984, -1, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 8036, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 8020 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1 + 8012 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 8004, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 11980, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 11972, 177209344);
  SAFE_HEAP_STORE_i64_8_4($1, 12060, 0, 1008981770);
  SAFE_HEAP_STORE_i32_2_2($1, 12056, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12052, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 11984, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 11976, 0);
  SAFE_HEAP_STORE_i32_4_4($1 + 12076 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 12068, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($1, 12116, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i32_4_4($1, 12080, 1056964608);
  SAFE_HEAP_STORE_i32_4_4($1, 12224, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12200, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 12196, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12192, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12128, 0);
  SAFE_HEAP_STORE_i32_2_2($1, 12124, 46);
  SAFE_HEAP_STORE_i64_8_4($1, 12108, 2139095039, 2139095039);
  SAFE_HEAP_STORE_i32_4_4($1, 12220, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12244, 2);
  SAFE_HEAP_STORE_i32_4_4($1, 12236, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 12232, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12228, 2139095039);
  SAFE_HEAP_STORE_i32_4_4($1, 12204, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12252, 0);
  SAFE_HEAP_STORE_i32_1_1($1, 12248, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 12240, 2);
  memset($1 + 12296 | 0, 0, 492);
  SAFE_HEAP_STORE_i32_4_4($1, 12796, -1);
  SAFE_HEAP_STORE_i64_8_4($1, 12788, -1, -1);
  memset($1 + 12800 | 0, 0, 3073);
  if (!SAFE_HEAP_LOAD_i32_4_4(0, 73568)) {
   SAFE_HEAP_STORE_i32_4_4(0, 73568, $1)
  }
  $2 = 1800;
  $4 = -1;
  while (1) {
   $0 = $2;
   $2 = $0 + 1 | 0;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
   if ($3) {
    label$4 : {
     if (($3 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 35) {
      break label$4
     }
     $4 = (SAFE_HEAP_LOAD_i32_1_U_1($0, 2) | 0) == 35 ? -1 : $4;
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4((($3 ^ $4 & 255) << 2) + 19360 | 0, 0) ^ $4 >>> 8;
   }
   if (($0 | 0) != 1806) {
    continue
   }
   break;
  };
  $3 = $4 ^ -1;
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12144);
  $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 12148 | 0, 0);
  label$7 : {
   if (($0 | 0) != ($4 | 0)) {
    break label$7
   }
   $2 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
   $0 = $0 + 1 | 0;
   $6 = ($0 | 0) < ($2 | 0) ? $2 : $0;
   if (($4 | 0) >= ($6 | 0)) {
    break label$7
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $4 = (((wasm2js_i32$1 = Math_imul($6, 36), wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 12152 | 0, 0);
   if ($0) {
    __memcpy($4, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 12144), 36));
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 12152);
    label$12 : {
     if (!$2) {
      break label$12
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$0) {
      break label$12
     }
     $0 = $0 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) - 1 | 0);
    }
    ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 12148, $6);
   SAFE_HEAP_STORE_i32_4_4($1, 12152, $4);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 12152 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 12144), 36) | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 32, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 28, 4);
  SAFE_HEAP_STORE_i32_4_4($0, 24, 5);
  SAFE_HEAP_STORE_i32_4_4($0, 20, 6);
  SAFE_HEAP_STORE_i32_4_4($0, 16, 7);
  SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 8);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 1800);
  SAFE_HEAP_STORE_i32_4_4($1, 12144, SAFE_HEAP_LOAD_i32_4_4($1, 12144) + 1 | 0);
  $3 = ImHashStr_28char_20const__2c_20unsigned_20long_2c_20unsigned_20int_29(11432, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12144);
  $6 = SAFE_HEAP_LOAD_i32_4_4($1 + 12148 | 0, 0);
  label$11 : {
   if (($0 | 0) != ($6 | 0)) {
    break label$11
   }
   $2 = $6 ? $6 + (($6 | 0) / 2 | 0) | 0 : 8;
   $0 = $0 + 1 | 0;
   $4 = ($0 | 0) < ($2 | 0) ? $2 : $0;
   if (($6 | 0) >= ($4 | 0)) {
    break label$11
   }
   $2 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($4, 36));
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 12152 | 0, 0);
   if ($0) {
    __memcpy($2, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 12144), 36));
    ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 12152));
   }
   SAFE_HEAP_STORE_i32_4_4($1, 12148, $4);
   SAFE_HEAP_STORE_i32_4_4($1, 12152, $2);
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 12152 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 12144), 36) | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 32, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 28, 16);
  SAFE_HEAP_STORE_i32_4_4($0, 24, 17);
  SAFE_HEAP_STORE_i32_4_4($0, 20, 18);
  SAFE_HEAP_STORE_i32_4_4($0, 16, 19);
  SAFE_HEAP_STORE_i32_4_4($0, 12, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 20);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 11432);
  SAFE_HEAP_STORE_i32_4_4($1, 12144, SAFE_HEAP_LOAD_i32_4_4($1, 12144) + 1 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ($0) {
   $0 = $0 + 876 | 0;
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
  }
  $6 = (((wasm2js_i32$1 = 152, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 32 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6 + 8 | 0, 0, 0, 0);
  memset($6 + 52 | 0, 0, 100);
  SAFE_HEAP_STORE_i32_4_4($6 + 48 | 0, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 36, -1);
  SAFE_HEAP_STORE_i64_8_4($6 + 40 | 0, 0, -1, 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7496);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 7500 | 0, 0);
  label$14 : {
   if (($0 | 0) != ($3 | 0)) {
    break label$14
   }
   $2 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
   $0 = $0 + 1 | 0;
   $4 = ($0 | 0) < ($2 | 0) ? $2 : $0;
   if (($3 | 0) >= ($4 | 0)) {
    break label$14
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   if ($0) {
    $0 = $0 + 876 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
   }
   $3 = (((wasm2js_i32$2 = $4 << 2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0) | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 7504 | 0, 0);
   if ($0) {
    __memcpy($3, $0, SAFE_HEAP_LOAD_i32_4_4($1, 7496) << 2);
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7504);
    label$18 : {
     if (!$2) {
      break label$18
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     if (!$0) {
      break label$18
     }
     $0 = $0 + 876 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) - 1 | 0);
    }
    ((wasm2js_i32$1 = $2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 7500, $4);
   SAFE_HEAP_STORE_i32_4_4($1, 7504, $3);
  }
  SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1 + 7504 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 7496) << 2) | 0, 0, $6);
  SAFE_HEAP_STORE_i32_1_1($1, 0, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 7496, SAFE_HEAP_LOAD_i32_4_4($1, 7496) + 1 | 0);
  SAFE_HEAP_STORE_i32_4_4($5, 0, $1);
  SAFE_HEAP_STORE_i32_1_1($5, 27, 0);
  SAFE_HEAP_STORE_i32_1_1($5, 4, 0);
  SAFE_HEAP_STORE_i32_1_1($5, 63, 0);
  SAFE_HEAP_STORE_i64_8_4($5, 44, 2, 2);
  SAFE_HEAP_STORE_i64_8_4($5, 36, 2, 2);
  SAFE_HEAP_STORE_i64_8_4($5, 28, 2, 2);
  SAFE_HEAP_STORE_i32_2_1($5, 15, 0);
  SAFE_HEAP_STORE_i32_1_1($5, 119, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 104, 0);
  SAFE_HEAP_STORE_i64_8_4($5, 96, 1, 1);
  SAFE_HEAP_STORE_i64_8_4($5, 88, 1, 1);
  SAFE_HEAP_STORE_i64_8_4($5, 80, 1, 1);
  SAFE_HEAP_STORE_i64_8_4($5, 72, 2, 1);
  SAFE_HEAP_STORE_i64_8_4($5, 64, 2, 2);
  SAFE_HEAP_STORE_i32_1_1($5, 52, 0);
  SAFE_HEAP_STORE_i64_8_4($5, 128, 1, 0);
  SAFE_HEAP_STORE_i64_8_4($5, 120, 1, 1);
  SAFE_HEAP_STORE_i32_1_1($5, 147, 0);
  SAFE_HEAP_STORE_i32_1_1($5, 108, 0);
  SAFE_HEAP_STORE_i32_1_1($5, 171, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 156, 0);
  SAFE_HEAP_STORE_i64_8_4($5, 148, 1, 1);
  SAFE_HEAP_STORE_i32_1_1($5, 136, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 180, 1);
  SAFE_HEAP_STORE_i64_8_4($5, 172, 1, 1);
  SAFE_HEAP_STORE_i32_1_1($5, 160, 0);
  $0 = ImGui__GetCurrentContext_28_29();
  ImGui__SetCurrentContext_28ImGuiContext__29(SAFE_HEAP_LOAD_i32_4_4($5, 0));
  $2 = ImGui__GetIO_28_29();
  SAFE_HEAP_STORE_i32_4_4($2, 208, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 204, 877);
  SAFE_HEAP_STORE_i32_4_4($2, 200, 878);
  SAFE_HEAP_STORE_i64_8_8($2, 24, 0, 0);
  ImGui__SetCurrentContext_28ImGuiContext__29($0);
  return $5 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20WrapImGuiContext____invoke_28void_20_28__29_28WrapImGuiContext__29_2c_20WrapImGuiContext__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  FUNCTION_TABLE[$0 | 0]($1);
 }
 
 function embind_init_ImGui_28_29__$_3____invoke_28_29() {
  return SAFE_HEAP_LOAD_i32_4_4(0, 95660) | 0;
 }
 
 function embind_init_ImGui_28_29__$_4____invoke_28WrapImGuiContext__29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  SAFE_HEAP_STORE_i32_4_4(0, 95660, $0);
  if ($0) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0)
  }
  ImGui__SetCurrentContext_28ImGuiContext__29($1);
 }
 
 function embind_init_ImGui_28_29__$_5____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, ImGui__GetIO_28_29());
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(52172, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_6____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, ImGui__GetStyle_28_29());
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(52424, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void___invoke_28void_20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  FUNCTION_TABLE[$0 | 0]();
 }
 
 function embind_init_ImGui_28_29__$_7____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_1_U_1($2, 52) ? $2 + 52 | 0 : 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(51328, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_29_2c_20emscripten___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
  FUNCTION_TABLE[$0 | 0]($2 + 12 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_8____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $0 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($2 + 12 | 0, $0);
  SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52584);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
   $3 = $2 + 24 | 0;
   $0 = _emval_take_value(72652, $3 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 24, 0);
   $4 = $1;
   $1 = _emval_take_value(72760, $3 | 0) | 0;
   _emval_set_property($4 | 0, $1 | 0, $0 | 0);
   _emval_decref($1 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_9____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = Math_fround(0), $19 = 0, $20 = 0, $21 = 0, $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, $25 = 0, $26 = 0, $27 = Math_fround(0), $28 = Math_fround(0), $29 = Math_fround(0), $30 = 0, $31 = Math_fround(0), $32 = Math_fround(0), $33 = Math_fround(0), $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = Math_fround(0), $39 = Math_fround(0), $40 = Math_fround(0), $41 = Math_fround(0), $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = Math_fround(0), $49 = Math_fround(0), $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $80 = 0, $81 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $30 = __stack_pointer - 32 | 0;
  __stack_pointer = $30;
  $34 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($30 + 12 | 0, $0);
  $1 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($34, 8), 0) | 0) != 2 ? $34 + 4 | 0 : 0;
  $4 = __stack_pointer - 1184 | 0;
  __stack_pointer = $4;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = $6 + 12256 | 0;
  if (SAFE_HEAP_LOAD_i32_1_U_1($6, 12256)) {
   ImGui__ShowStackToolWindow_28bool__29($0)
  }
  label$2 : {
   if (!ImGui__Begin_28char_20const__2c_20bool__2c_20int_29(6280, $1, 0)) {
    break label$2
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
   SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
   if ((SAFE_HEAP_LOAD_i32_2_2($1, 150) | 0) >= 2) {
    break label$2
   }
   SAFE_HEAP_STORE_i32_4_4($4, 912, 16215);
   ImGui__Text_28char_20const__2c_20____29(5689, $4 + 912 | 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($6 + 856 | 0, 0);
   SAFE_HEAP_STORE_f64_8_8($4, 904, +$7);
   SAFE_HEAP_STORE_f64_8_8($4, 896, +Math_fround(Math_fround(1.0e3) / $7));
   ImGui__Text_28char_20const__2c_20____29(18577, $4 + 896 | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($6 + 860 | 0, 0);
   $2 = SAFE_HEAP_LOAD_i32_4_4($6 + 864 | 0, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 884, $2);
   SAFE_HEAP_STORE_i32_4_4($4, 880, $1);
   SAFE_HEAP_STORE_i32_4_4($4, 888, ($2 | 0) / 3 | 0);
   ImGui__Text_28char_20const__2c_20____29(17880, $4 + 880 | 0);
   $1 = SAFE_HEAP_LOAD_i32_4_4($6 + 868 | 0, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 868, SAFE_HEAP_LOAD_i32_4_4($6 + 876 | 0, 0));
   SAFE_HEAP_STORE_i32_4_4($4, 864, $1);
   ImGui__Text_28char_20const__2c_20____29(4678, $4 + 864 | 0);
   ImGui__Separator_28_29();
   $1 = $4 + 1152 | 0;
   SAFE_HEAP_STORE_i64_8_8($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 20808), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 20800), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 1160, SAFE_HEAP_LOAD_i64_8_8(0, 20792), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 1152, SAFE_HEAP_LOAD_i64_8_8(0, 20784), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($4 + 1136 | 0, 0, SAFE_HEAP_LOAD_i32_4_4(0, 20864));
   SAFE_HEAP_STORE_i64_8_8($4 + 1128 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 20856), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4 + 1120 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 20848), i64toi32_i32$HIGH_BITS);
   $1 = $4 + 1088 | 0;
   SAFE_HEAP_STORE_i64_8_8($1 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 20840), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8(0, 20832), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 1096, SAFE_HEAP_LOAD_i64_8_8(0, 20824), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($4, 1088, SAFE_HEAP_LOAD_i64_8_8(0, 20816), i64toi32_i32$HIGH_BITS);
   $37 = $6 + 12264 | 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($37, 0) | 0) < 0) {
    SAFE_HEAP_STORE_i32_4_4($37, 0, 4)
   }
   $35 = $6 + 12268 | 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($35, 0) | 0) < 0) {
    SAFE_HEAP_STORE_i32_4_4($35, 0, 2)
   }
   if (ImGui__TreeNode_28char_20const__29(4761)) {
    ImGui__Checkbox_28char_20const__2c_20bool__29(8079, $0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
    }
    MetricsHelpMarker_28char_20const__29(17167);
    ImGui__Checkbox_28char_20const__2c_20bool__29(6371, $6 + 12258 | 0);
    $2 = $6 + 12257 | 0;
    ImGui__Checkbox_28char_20const__2c_20bool__29(5142, $2);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
    }
    SAFE_HEAP_STORE_f32_4_4($1 + 7224 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 6468) * Math_fround(12.0)));
    SAFE_HEAP_STORE_i32_4_4($1, 7220, SAFE_HEAP_LOAD_i32_4_4($1, 7220) | 1);
    $0 = ImGui__Combo_28char_20const__2c_20int__2c_20char_20const__20const__2c_20int_2c_20int_29(10880, $37, $4 + 1152 | 0, 8, 8) | SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
    SAFE_HEAP_STORE_i32_1_1($2, 0, $0);
    label$8 : {
     if (!($0 & 255)) {
      break label$8
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7508);
     if (!$0) {
      break label$8
     }
     SAFE_HEAP_STORE_i32_4_4($4, 848, SAFE_HEAP_LOAD_i32_4_4($0, 0));
     ImGui__BulletText_28char_20const__2c_20____29(16161, $4 + 848 | 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
     SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
     $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0);
     $1 = $0 + 272 | 0;
     $7 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
     SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
     $0 = $4 + 784 | 0;
     $2 = $0 + 16 | 0;
     $5 = $0 + 24 | 0;
     $8 = $4 + 816 | 0;
     $9 = $0 + 40 | 0;
     $14 = $0 + 48 | 0;
     $1 = 0;
     while (1) {
      $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7508);
      $11 = Math_fround(0.0);
      $7 = Math_fround(0.0);
      $10 = Math_fround(0.0);
      $16 = Math_fround(0.0);
      label$10 : {
       label$11 : {
        switch ($1 | 0) {
        case 0:
         $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0);
         $11 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($0 + 24 | 0, 0));
         $16 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
         $7 = Math_fround($16 + SAFE_HEAP_LOAD_f32_4_4($0, 20));
         break label$10;
        case 1:
         $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 428 | 0, 0);
         $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 424 | 0, 0);
         $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 420 | 0, 0);
         $16 = SAFE_HEAP_LOAD_f32_4_4($0, 416);
         break label$10;
        case 2:
         $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 444 | 0, 0);
         $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 440 | 0, 0);
         $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 436 | 0, 0);
         $16 = SAFE_HEAP_LOAD_f32_4_4($0, 432);
         break label$10;
        case 3:
         $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 460 | 0, 0);
         $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 456 | 0, 0);
         $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 452 | 0, 0);
         $16 = SAFE_HEAP_LOAD_f32_4_4($0, 448);
         break label$10;
        case 4:
         $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 476 | 0, 0);
         $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 472 | 0, 0);
         $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 468 | 0, 0);
         $16 = SAFE_HEAP_LOAD_f32_4_4($0, 464);
         break label$10;
        case 5:
         $10 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 436 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0)) + SAFE_HEAP_LOAD_f32_4_4($0 - -64 | 0, 0));
         $11 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($0 + 40 | 0, 0));
         $16 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 432) - SAFE_HEAP_LOAD_f32_4_4($0, 88)) + SAFE_HEAP_LOAD_f32_4_4($0, 60));
         $7 = Math_fround($16 + SAFE_HEAP_LOAD_f32_4_4($0, 36));
         break label$10;
        case 6:
         $10 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 436 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0)) + SAFE_HEAP_LOAD_f32_4_4($0 - -64 | 0, 0));
         $11 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($0 + 48 | 0, 0));
         $16 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 432) - SAFE_HEAP_LOAD_f32_4_4($0, 88)) + SAFE_HEAP_LOAD_f32_4_4($0, 60));
         $7 = Math_fround($16 + SAFE_HEAP_LOAD_f32_4_4($0, 44));
         break label$10;
        case 7:
         break label$11;
        default:
         break label$10;
        };
       }
       $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 524 | 0, 0);
       $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 520 | 0, 0);
       $10 = SAFE_HEAP_LOAD_f32_4_4($0 + 516 | 0, 0);
       $16 = SAFE_HEAP_LOAD_f32_4_4($0, 512);
      }
      SAFE_HEAP_STORE_f64_8_8($2, 0, +$7);
      SAFE_HEAP_STORE_f64_8_8($5, 0, +$11);
      SAFE_HEAP_STORE_f64_8_8($8, 0, +Math_fround($7 - $16));
      SAFE_HEAP_STORE_f64_8_8($9, 0, +Math_fround($11 - $10));
      SAFE_HEAP_STORE_i32_4_4($14, 0, SAFE_HEAP_LOAD_i32_4_4(($4 + 1152 | 0) + ($1 << 2) | 0, 0));
      SAFE_HEAP_STORE_f64_8_8($4, 784, +$16);
      SAFE_HEAP_STORE_f64_8_8($4, 792, +$10);
      ImGui__Text_28char_20const__2c_20____29(5903, $4 + 784 | 0);
      $0 = $1 + 1 | 0;
      $1 = $0;
      if (($1 | 0) != 8) {
       continue
      }
      break;
     };
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
     SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
     $2 = $0 + 272 | 0;
     $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($2, 0, $7);
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    }
    $2 = $6 + 12259 | 0;
    ImGui__Checkbox_28char_20const__2c_20bool__29(5166, $2);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
    }
    SAFE_HEAP_STORE_f32_4_4($1 + 7224 | 0, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 6468) * Math_fround(12.0)));
    SAFE_HEAP_STORE_i32_4_4($1, 7220, SAFE_HEAP_LOAD_i32_4_4($1, 7220) | 1);
    $0 = ImGui__Combo_28char_20const__2c_20int__2c_20char_20const__20const__2c_20int_2c_20int_29(10905, $35, $4 + 1088 | 0, 13, 13) | SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
    SAFE_HEAP_STORE_i32_1_1($2, 0, $0);
    label$20 : {
     if (!($0 & 255)) {
      break label$20
     }
     if (!SAFE_HEAP_LOAD_i32_4_4($6, 7508)) {
      break label$20
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($6 + 8068 | 0, 0) | 0) <= 0) {
      break label$20
     }
     $0 = $4 + 640 | 0;
     $9 = $0 + 48 | 0;
     $14 = $4 + 692 | 0;
     $15 = $0 + 16 | 0;
     $19 = $0 + 24 | 0;
     $20 = $0 + 32 | 0;
     $24 = $0 + 40 | 0;
     $0 = 0;
     while (1) {
      $2 = $0;
      $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 8076) + ($0 << 3) | 0, 4);
      label$22 : {
       if (($0 | 0) == -1) {
        break label$22
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($6, 8064);
       if (!$1) {
        break label$22
       }
       $5 = $1 + Math_imul($0, 456) | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 80) | 0) < (SAFE_HEAP_LOAD_i32_4_4($6, 6984) - 1 | 0)) {
        break label$22
       }
       $0 = SAFE_HEAP_LOAD_i32_4_4($5, 356);
       $1 = SAFE_HEAP_LOAD_i32_4_4($6, 7508);
       if (($0 | 0) != ($1 | 0)) {
        if ((SAFE_HEAP_LOAD_i32_4_4($5, 360) | 0) != ($1 | 0)) {
         break label$22
        }
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($5, 84);
       $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       SAFE_HEAP_STORE_i32_4_4($4, 776, SAFE_HEAP_LOAD_i32_4_4($0, 0));
       SAFE_HEAP_STORE_i32_4_4($4, 772, $1);
       SAFE_HEAP_STORE_i32_4_4($4, 768, $8);
       ImGui__BulletText_28char_20const__2c_20____29(18663, $4 + 768 | 0);
       if (ImGui__IsItemHovered_28int_29(0)) {
        $0 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
        $7 = SAFE_HEAP_LOAD_f32_4_4($5, 212);
        SAFE_HEAP_STORE_f32_4_4($4, 964, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 216 | 0, 0) + Math_fround(-1.0)));
        SAFE_HEAP_STORE_f32_4_4($4, 960, Math_fround($7 + Math_fround(-1.0)));
        $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 220 | 0, 0);
        SAFE_HEAP_STORE_f32_4_4($4, 948, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 224 | 0, 0) + Math_fround(1.0)));
        SAFE_HEAP_STORE_f32_4_4($4, 944, Math_fround($7 + Math_fround(1.0)));
        ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $4 + 960 | 0, $4 + 944 | 0, -16711681, Math_fround(0.0), 0, Math_fround(2.0));
       }
       $8 = $5 + 84 | 0;
       $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
       SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
       $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0);
       $1 = $0 + 272 | 0;
       $7 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
       SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
       SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
       $0 = 0;
       while (1) {
        $1 = $0;
        label$26 : {
         if ($1 >>> 0 >= 6) {
          label$28 : {
           switch ($1 - 6 | 0) {
           case 0:
           case 2:
            break label$28;
           default:
            break label$26;
           };
          }
          if ((SAFE_HEAP_LOAD_i32_4_4($8, 0) | 0) <= 0) {
           break label$26
          }
          $25 = ($4 + 1088 | 0) + ($1 << 2) | 0;
          $0 = 0;
          while (1) {
           ImGui__ShowMetricsWindow_28bool__29__Funcs__GetTableRect_28ImGuiTable__2c_20int_2c_20int_29($4 + 944 | 0, $5, $1, $0);
           $26 = SAFE_HEAP_LOAD_i32_4_4($25, 0);
           SAFE_HEAP_STORE_i32_4_4($9, 0, $0);
           SAFE_HEAP_STORE_i32_4_4($14, 0, $26);
           $7 = SAFE_HEAP_LOAD_f32_4_4($4, 952);
           SAFE_HEAP_STORE_f64_8_8($15, 0, +$7);
           $10 = SAFE_HEAP_LOAD_f32_4_4($4, 956);
           SAFE_HEAP_STORE_f64_8_8($19, 0, +$10);
           $11 = SAFE_HEAP_LOAD_f32_4_4($4, 944);
           SAFE_HEAP_STORE_f64_8_8($20, 0, +Math_fround($7 - $11));
           $3 = $10;
           $10 = SAFE_HEAP_LOAD_f32_4_4($4, 948);
           SAFE_HEAP_STORE_f64_8_8($24, 0, +Math_fround($3 - $10));
           SAFE_HEAP_STORE_f64_8_8($4, 640, +$11);
           SAFE_HEAP_STORE_f64_8_8($4, 648, +$10);
           $26 = $4 + 960 | 0;
           ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($26, 128, 5703, $4 + 640 | 0);
           SAFE_HEAP_STORE_i64_8_4($4, 936, 0, 0);
           ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($26, 0, 0, $4 + 936 | 0);
           if (ImGui__IsItemHovered_28int_29(0)) {
            $26 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
            SAFE_HEAP_STORE_f32_4_4($4, 940, Math_fround($10 + Math_fround(-1.0)));
            SAFE_HEAP_STORE_f32_4_4($4, 936, Math_fround($11 + Math_fround(-1.0)));
            SAFE_HEAP_STORE_f32_4_4($4, 932, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 956) + Math_fround(1.0)));
            SAFE_HEAP_STORE_f32_4_4($4, 928, Math_fround($7 + Math_fround(1.0)));
            ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($26, $4 + 936 | 0, $4 + 928 | 0, -16711681, Math_fround(0.0), 0, Math_fround(2.0));
           }
           $0 = $0 + 1 | 0;
           if ((SAFE_HEAP_LOAD_i32_4_4($8, 0) | 0) > ($0 | 0)) {
            continue
           }
           break;
          };
          break label$26;
         }
         ImGui__ShowMetricsWindow_28bool__29__Funcs__GetTableRect_28ImGuiTable__2c_20int_2c_20int_29($4 + 944 | 0, $5, $1, -1);
         $0 = $4 + 704 | 0;
         $7 = SAFE_HEAP_LOAD_f32_4_4($4, 952);
         SAFE_HEAP_STORE_f64_8_8($0 + 16 | 0, 0, +$7);
         $10 = SAFE_HEAP_LOAD_f32_4_4($4, 956);
         SAFE_HEAP_STORE_f64_8_8($0 + 24 | 0, 0, +$10);
         SAFE_HEAP_STORE_i32_4_4($0 + 48 | 0, 0, SAFE_HEAP_LOAD_i32_4_4(($4 + 1088 | 0) + ($1 << 2) | 0, 0));
         $11 = SAFE_HEAP_LOAD_f32_4_4($4, 944);
         SAFE_HEAP_STORE_f64_8_8($0 + 32 | 0, 0, +Math_fround($7 - $11));
         $3 = $10;
         $10 = SAFE_HEAP_LOAD_f32_4_4($4, 948);
         SAFE_HEAP_STORE_f64_8_8($0 + 40 | 0, 0, +Math_fround($3 - $10));
         SAFE_HEAP_STORE_f64_8_8($4, 704, +$11);
         SAFE_HEAP_STORE_f64_8_8($4, 712, +$10);
         $25 = $4 + 960 | 0;
         ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($25, 128, 5903, $0);
         SAFE_HEAP_STORE_i64_8_4($4, 936, 0, 0);
         ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($25, 0, 0, $4 + 936 | 0);
         if (!ImGui__IsItemHovered_28int_29(0)) {
          break label$26
         }
         $0 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
         SAFE_HEAP_STORE_f32_4_4($4, 940, Math_fround($10 + Math_fround(-1.0)));
         SAFE_HEAP_STORE_f32_4_4($4, 936, Math_fround($11 + Math_fround(-1.0)));
         SAFE_HEAP_STORE_f32_4_4($4, 932, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 956) + Math_fround(1.0)));
         SAFE_HEAP_STORE_f32_4_4($4, 928, Math_fround($7 + Math_fround(1.0)));
         ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($0, $4 + 936 | 0, $4 + 928 | 0, -16711681, Math_fround(0.0), 0, Math_fround(2.0));
        }
        $0 = $1 + 1 | 0;
        if (($0 | 0) != 13) {
         continue
        }
        break;
       };
       $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
       $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
       SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
       $5 = $0 + 272 | 0;
       $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0));
       SAFE_HEAP_STORE_f32_4_4($5, 0, $7);
       SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
      }
      $0 = $2 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 8068) | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_i64_8_4($4, 960, 0, 0);
    if (ImGui__Button_28char_20const__2c_20ImVec2_20const__29(17668, $4 + 960 | 0)) {
     SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 12248, 1)
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
    }
    MetricsHelpMarker_28char_20const__29(17006);
    ImGui__TreePop_28_29();
   }
   SAFE_HEAP_STORE_i32_4_4($4, 624, SAFE_HEAP_LOAD_i32_4_4($6, 7008));
   if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(3956, 18413, $4 + 624 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($4, 612, SAFE_HEAP_LOAD_i32_4_4($6, 7008));
    SAFE_HEAP_STORE_i32_4_4($4, 608, 6342);
    if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(6342, 18512, $4 + 608 | 0)) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7008);
     if (($0 | 0) > 0) {
      while (1) {
       $1 = $0;
       $0 = $1 - 1 | 0;
       $2 = $0 << 2;
       ImGui__PushID_28void_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7016) + $2 | 0, 0));
       ImGui__DebugNodeWindow_28ImGuiWindow__2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7016) + $2 | 0, 0), 1800);
       $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
       SAFE_HEAP_STORE_i32_4_4($2, 196, SAFE_HEAP_LOAD_i32_4_4($2, 196) - 1 | 0);
       if (($1 | 0) > 1) {
        continue
       }
       break;
      }
     }
     ImGui__TreePop_28_29();
    }
    SAFE_HEAP_STORE_i32_4_4($4, 596, SAFE_HEAP_LOAD_i32_4_4($6, 7020));
    SAFE_HEAP_STORE_i32_4_4($4, 592, 17764);
    if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(17764, 18512, $4 + 592 | 0)) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7020);
     if (($0 | 0) > 0) {
      while (1) {
       $1 = $0;
       $0 = $1 - 1 | 0;
       $2 = $0 << 2;
       ImGui__PushID_28void_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7028) + $2 | 0, 0));
       ImGui__DebugNodeWindow_28ImGuiWindow__2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7028) + $2 | 0, 0), 1800);
       $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
       SAFE_HEAP_STORE_i32_4_4($2, 196, SAFE_HEAP_LOAD_i32_4_4($2, 196) - 1 | 0);
       if (($1 | 0) > 1) {
        continue
       }
       break;
      }
     }
     ImGui__TreePop_28_29();
    }
    if (ImGui__TreeNode_28char_20const__29(17975)) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($6 + 7036 | 0, 0);
     label$41 : {
      if (($0 | 0) >= 0) {
       break label$41
      }
      $1 = $0 + (($0 | 0) / 2 | 0) | 0;
      $1 = ($1 | 0) > 0 ? $1 : 0;
      if (($0 | 0) >= ($1 | 0)) {
       break label$41
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      if ($0) {
       $0 = $0 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) + 1 | 0);
      }
      $0 = (((wasm2js_i32$1 = $1 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
      $2 = SAFE_HEAP_LOAD_i32_4_4($6 + 7040 | 0, 0);
      if ($2) {
       __memcpy($0, $2, SAFE_HEAP_LOAD_i32_4_4($6, 7032) << 2);
       $2 = SAFE_HEAP_LOAD_i32_4_4($6, 7040);
       label$44 : {
        if (!$2) {
         break label$44
        }
        $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
        if (!$5) {
         break label$44
        }
        $5 = $5 + 876 | 0;
        SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0) - 1 | 0);
       }
       ((wasm2js_i32$2 = $2, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
      }
      SAFE_HEAP_STORE_i32_4_4($6, 7036, $1);
      SAFE_HEAP_STORE_i32_4_4($6, 7040, $0);
     }
     SAFE_HEAP_STORE_i32_4_4($6, 7032, 0);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 7008) | 0) > 0) {
      $0 = 0;
      while (1) {
       $5 = SAFE_HEAP_LOAD_i32_4_4($6, 7016) + ($0 << 2) | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 0), 536) + 1 | 0) >= (SAFE_HEAP_LOAD_i32_4_4($6, 6984) | 0)) {
        $2 = SAFE_HEAP_LOAD_i32_4_4($6, 7032);
        $1 = SAFE_HEAP_LOAD_i32_4_4($6, 7036);
        label$48 : {
         if (($2 | 0) != ($1 | 0)) {
          break label$48
         }
         $8 = $1 ? $1 + (($1 | 0) / 2 | 0) | 0 : 8;
         $2 = $2 + 1 | 0;
         $2 = ($2 | 0) < ($8 | 0) ? $8 : $2;
         if (($1 | 0) >= ($2 | 0)) {
          break label$48
         }
         $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         if ($1) {
          $1 = $1 + 876 | 0;
          SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
         }
         $1 = (((wasm2js_i32$1 = $2 << 2, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73256) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0) | 0);
         $8 = SAFE_HEAP_LOAD_i32_4_4($6, 7040);
         if ($8) {
          __memcpy($1, $8, SAFE_HEAP_LOAD_i32_4_4($6, 7032) << 2);
          $8 = SAFE_HEAP_LOAD_i32_4_4($6, 7040);
          label$53 : {
           if (!$8) {
            break label$53
           }
           $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
           if (!$9) {
            break label$53
           }
           $9 = $9 + 876 | 0;
           SAFE_HEAP_STORE_i32_4_4($9, 0, SAFE_HEAP_LOAD_i32_4_4($9, 0) - 1 | 0);
          }
          ((wasm2js_i32$2 = $8, wasm2js_i32$1 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$2 | 0, wasm2js_i32$1 | 0);
         }
         SAFE_HEAP_STORE_i32_4_4($6, 7036, $2);
         SAFE_HEAP_STORE_i32_4_4($6, 7040, $1);
        }
        SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7040) + (SAFE_HEAP_LOAD_i32_4_4($6, 7032) << 2) | 0, 0, SAFE_HEAP_LOAD_i32_4_4($5, 0));
        SAFE_HEAP_STORE_i32_4_4($6, 7032, SAFE_HEAP_LOAD_i32_4_4($6, 7032) + 1 | 0);
       }
       $0 = $0 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 7008) | 0) > ($0 | 0)) {
        continue
       }
       break;
      };
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7032);
     if ($0 >>> 0 >= 2) {
      qsort(SAFE_HEAP_LOAD_i32_4_4($6, 7040), $0, 4, 10)
     }
     ImGui__DebugNodeWindowsListByBeginStackParent_28ImGuiWindow___2c_20int_2c_20ImGuiWindow__29(SAFE_HEAP_LOAD_i32_4_4($6, 7040), SAFE_HEAP_LOAD_i32_4_4($6, 7032), 0);
     ImGui__TreePop_28_29();
    }
    ImGui__TreePop_28_29();
   }
   $9 = SAFE_HEAP_LOAD_i32_4_4($6, 7496);
   label$55 : {
    if (($9 | 0) <= 0) {
     $0 = 0;
     break label$55;
    }
    $14 = SAFE_HEAP_LOAD_i32_4_4($6 + 7504 | 0, 0);
    $0 = 0;
    $1 = 0;
    while (1) {
     $5 = $1;
     $15 = SAFE_HEAP_LOAD_i32_4_4($14 + ($1 << 2) | 0, 0) + 96 | 0;
     $1 = 0;
     $8 = 0;
     while (1) {
      $2 = $1;
      $1 = $1 + 1 | 0;
      $8 = SAFE_HEAP_LOAD_i32_4_4($15 + Math_imul($2, 12) | 0, 0) + $8 | 0;
      if (!$2) {
       continue
      }
      break;
     };
     $0 = $0 + $8 | 0;
     $1 = $5 + 1 | 0;
     if (($9 | 0) != ($1 | 0)) {
      continue
     }
     break;
    };
   }
   SAFE_HEAP_STORE_i32_4_4($4, 576, $0);
   if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(4149, 18426, $4 + 576 | 0)) {
    ImGui__Checkbox_28char_20const__2c_20bool__29(8966, $6 + 12260 | 0);
    ImGui__Checkbox_28char_20const__2c_20bool__29(8922, $6 + 12261 | 0);
    if ((SAFE_HEAP_LOAD_i32_4_4($6, 7496) | 0) > 0) {
     $0 = 0;
     while (1) {
      $2 = $0;
      $8 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7504) + ($0 << 2) | 0, 0) + 96 | 0;
      $0 = 0;
      while (1) {
       $1 = $0;
       $5 = $8 + Math_imul($1, 12) | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) > 0) {
        $9 = $5 + 8 | 0;
        $0 = 0;
        while (1) {
         ImGui__DebugNodeDrawList_28ImGuiWindow__2c_20ImDrawList_20const__2c_20char_20const__29(0, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 0) + ($0 << 2) | 0, 0));
         $0 = $0 + 1 | 0;
         if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) > ($0 | 0)) {
          continue
         }
         break;
        };
       }
       $0 = $1 + 1 | 0;
       if (!$1) {
        continue
       }
       break;
      };
      $0 = $2 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7496) | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__TreePop_28_29();
   }
   SAFE_HEAP_STORE_i32_4_4($4, 560, SAFE_HEAP_LOAD_i32_4_4($6, 7496));
   if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(4159, 18441, $4 + 560 | 0)) {
    $7 = ImGui__GetTreeNodeToLabelSpacing_28_29();
    $19 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $15 = SAFE_HEAP_LOAD_i32_4_4($19, 7080);
    SAFE_HEAP_STORE_i32_1_1($15, 140, 1);
    if ($7 == Math_fround(0.0)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($19 + 5524 | 0, 0)
    }
    $0 = $15 + 272 | 0;
    $7 = Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 0));
    SAFE_HEAP_STORE_f32_4_4($0, 0, $7);
    $18 = Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($15, 12)) + SAFE_HEAP_LOAD_f32_4_4($15 + 276 | 0, 0));
    SAFE_HEAP_STORE_f32_4_4($15, 208, $18);
    $2 = SAFE_HEAP_LOAD_i32_4_4($19, 7496);
    label$67 : {
     if (($2 | 0) <= 0) {
      $7 = Math_fround(3402823466385288598117041.0e14);
      $11 = Math_fround(3402823466385288598117041.0e14);
      $16 = Math_fround(-3402823466385288598117041.0e14);
      $10 = Math_fround(-3402823466385288598117041.0e14);
      break label$67;
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($19 + 7504 | 0, 0);
     $0 = 0;
     $10 = Math_fround(-3402823466385288598117041.0e14);
     $16 = Math_fround(-3402823466385288598117041.0e14);
     $11 = Math_fround(3402823466385288598117041.0e14);
     $7 = Math_fround(3402823466385288598117041.0e14);
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4($5 + ($0 << 2) | 0, 0);
      $3 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
      $7 = $3 < $7 ? $3 : $7;
      $13 = SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0);
      $11 = $11 > $13 ? $13 : $11;
      $3 = Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 12));
      $16 = $3 > $16 ? $3 : $16;
      $3 = Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0));
      $10 = $3 > $10 ? $3 : $10;
      $0 = $0 + 1 | 0;
      if (($2 | 0) != ($0 | 0)) {
       continue
      }
      break;
     };
    }
    if (($2 | 0) > 0) {
     $48 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($15 + 212 | 0, 0) - Math_fround($11 * Math_fround(.125)));
     $49 = Math_fround($18 - Math_fround($7 * Math_fround(.125)));
     $0 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($19, 7504) + ($0 << 2) | 0, 0);
      $13 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
      $18 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
      $3 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
      $22 = SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0);
      SAFE_HEAP_STORE_f32_4_4($4, 964, Math_fround($48 + Math_fround($22 * Math_fround(.125))));
      SAFE_HEAP_STORE_f32_4_4($4, 960, Math_fround($49 + Math_fround($3 * Math_fround(.125))));
      SAFE_HEAP_STORE_f32_4_4($4, 972, Math_fround($48 + Math_fround(Math_fround($22 + $18) * Math_fround(.125))));
      SAFE_HEAP_STORE_f32_4_4($4, 968, Math_fround($49 + Math_fround(Math_fround($3 + $13) * Math_fround(.125))));
      $25 = SAFE_HEAP_LOAD_i32_4_4($15, 580);
      $14 = $4 + 960 | 0;
      $8 = __stack_pointer - 32 | 0;
      __stack_pointer = $8;
      $9 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($9 + 5708 | 0, 0) * Math_fround(SAFE_HEAP_LOAD_f32_4_4($9, 5416) * Math_fround(.4000000059604645)));
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$1 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $2 = ~~$3;
        break label$1;
       }
       $2 = -2147483648;
      }
      $3 = SAFE_HEAP_LOAD_f32_4_4($9 + 5700 | 0, 0);
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$3 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $12 = ~~$3;
        break label$3;
       }
       $12 = -2147483648;
      }
      $5 = $12 << 8;
      $2 = $2 << 24;
      $3 = SAFE_HEAP_LOAD_f32_4_4($9 + 5696 | 0, 0);
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$5 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $12 = ~~$3;
        break label$5;
       }
       $12 = -2147483648;
      }
      $5 = $12 | $5;
      $3 = SAFE_HEAP_LOAD_f32_4_4($9 + 5704 | 0, 0);
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$7 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $24 = ~~$3;
        break label$7;
       }
       $24 = -2147483648;
      }
      $18 = SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0);
      $22 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
      $28 = SAFE_HEAP_LOAD_f32_4_4($14 + 12 | 0, 0);
      $23 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
      $31 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
      $3 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
      $27 = SAFE_HEAP_LOAD_f32_4_4($14, 8);
      $13 = SAFE_HEAP_LOAD_f32_4_4($14, 4);
      $20 = SAFE_HEAP_LOAD_i32_4_4($9, 7080);
      $26 = $14 + 8 | 0;
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($20, 580), $14, $26, $2 | ($5 | $24 << 16), Math_fround(0.0), 0);
      if (SAFE_HEAP_LOAD_i32_4_4($9, 7008)) {
       $32 = Math_fround(Math_fround($28 - $13) / $22);
       $41 = Math_fround($13 - Math_fround($32 * $18));
       $22 = Math_fround(Math_fround($27 - $3) / $31);
       $28 = Math_fround($3 - Math_fround($22 * $23));
       $42 = $8 + 8 | 0;
       $24 = $8 + 24 | 0;
       $1 = 0;
       while (1) {
        $5 = $1;
        $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 7016) + ($1 << 2) | 0, 0);
        label$111 : {
         if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
          break label$111
         }
         if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 1) {
          break label$111
         }
         $18 = SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0);
         $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
         $13 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
         $29 = Math_fround($13 + SAFE_HEAP_LOAD_f32_4_4($1, 20));
         SAFE_HEAP_STORE_f32_4_4($8, 24, $29);
         SAFE_HEAP_STORE_f32_4_4($8, 20, $3);
         SAFE_HEAP_STORE_f32_4_4($8, 16, $13);
         SAFE_HEAP_STORE_f32_4_4($8, 28, Math_fround($3 + $18));
         if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 8) & 1)) {
          SAFE_HEAP_LOAD_i32_4_4($1, 728)
         }
         $18 = SAFE_HEAP_LOAD_f32_4_4($1, 28);
         $33 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
         SAFE_HEAP_STORE_i64_8_8($8, 0, SAFE_HEAP_LOAD_i64_8_4($1, 12), i64toi32_i32$HIGH_BITS);
         $23 = Math_fround($41 + Math_fround($32 * SAFE_HEAP_LOAD_f32_4_4($8, 4)));
         label$132 : {
          if (Math_fround(Math_abs($23)) < Math_fround(2147483648.0)) {
           $2 = ~~$23;
           break label$132;
          }
          $2 = -2147483648;
         }
         $23 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($8, 4, $23);
         $31 = Math_fround($23 + Math_fround(5.0));
         SAFE_HEAP_STORE_f32_4_4($8, 12, $31);
         $27 = Math_fround($41 + Math_fround($32 * SAFE_HEAP_LOAD_f32_4_4($8, 28)));
         label$153 : {
          if (Math_fround(Math_abs($27)) < Math_fround(2147483648.0)) {
           $2 = ~~$27;
           break label$153;
          }
          $2 = -2147483648;
         }
         $27 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($8, 28, $27);
         $3 = Math_fround($41 + Math_fround($32 * $3));
         label$174 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$174;
          }
          $2 = -2147483648;
         }
         $38 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($8, 20, $38);
         $3 = Math_fround($28 + Math_fround($22 * Math_fround($33 + $18)));
         label$19 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$19;
          }
          $2 = -2147483648;
         }
         $33 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($8, 8, $33);
         $3 = Math_fround($28 + Math_fround($22 * SAFE_HEAP_LOAD_f32_4_4($8, 0)));
         label$215 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$215;
          }
          $2 = -2147483648;
         }
         $39 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($8, 0, $39);
         $3 = Math_fround($28 + Math_fround($22 * $29));
         label$23 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$23;
          }
          $2 = -2147483648;
         }
         $29 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($8, 24, $29);
         $3 = Math_fround($28 + Math_fround($22 * $13));
         label$256 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$256;
          }
          $2 = -2147483648;
         }
         $40 = Math_fround($2 | 0);
         SAFE_HEAP_STORE_f32_4_4($8, 16, $40);
         $3 = SAFE_HEAP_LOAD_f32_4_4($14, 4);
         $13 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
         $2 = SAFE_HEAP_LOAD_i64_8_4($14, 8);
         $12 = i64toi32_i32$HIGH_BITS;
         $18 = (wasm2js_scratch_store_i32(2, $2), wasm2js_scratch_load_f32());
         SAFE_HEAP_STORE_f32_4_4($8, 16, $13 > $40 ? $13 : $18 < $40 ? $18 : $40);
         SAFE_HEAP_STORE_f32_4_4($8, 24, $13 > $29 ? $13 : $18 < $29 ? $18 : $29);
         SAFE_HEAP_STORE_f32_4_4($8, 0, $13 > $39 ? $13 : $18 < $39 ? $18 : $39);
         SAFE_HEAP_STORE_f32_4_4($8, 8, $13 > $33 ? $13 : $18 < $33 ? $18 : $33);
         $13 = (wasm2js_scratch_store_i32(2, $12), wasm2js_scratch_load_f32());
         SAFE_HEAP_STORE_f32_4_4($8, 20, $3 > $38 ? $3 : $13 < $38 ? $13 : $38);
         SAFE_HEAP_STORE_f32_4_4($8, 28, $3 > $27 ? $3 : $13 < $27 ? $13 : $27);
         SAFE_HEAP_STORE_f32_4_4($8, 4, $3 > $23 ? $3 : $13 < $23 ? $13 : $23);
         SAFE_HEAP_STORE_f32_4_4($8, 12, $3 > $31 ? $3 : $13 < $31 ? $13 : $31);
         $2 = SAFE_HEAP_LOAD_i32_4_4($9, 7508);
         if ($2) {
          $12 = (SAFE_HEAP_LOAD_i32_4_4($1, 744) | 0) == (SAFE_HEAP_LOAD_i32_4_4($2, 744) | 0)
         } else {
          $12 = 0
         }
         $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5652 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$297 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $17 = ~~$3;
           break label$297;
          }
          $17 = -2147483648;
         }
         $17 = $17 << 8;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5648 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$31 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $21 = ~~$3;
           break label$31;
          }
          $21 = -2147483648;
         }
         $17 = $21 | $17;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5656 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$33 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $21 = ~~$3;
           break label$33;
          }
          $21 = -2147483648;
         }
         $17 = $17 | $21 << 16;
         $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5660 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$35 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$35;
          }
          $2 = -2147483648;
         }
         ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($20, 580), $8 + 16 | 0, $24, $17 | $2 << 24, Math_fround(0.0), 0);
         $17 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         $2 = ($17 + 5416 | 0) + ($12 ? 176 : 160) | 0;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 204 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$37 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $12 = ~~$3;
           break label$37;
          }
          $12 = -2147483648;
         }
         $12 = $12 << 8;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 200 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$398 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $21 = ~~$3;
           break label$398;
          }
          $21 = -2147483648;
         }
         $12 = $21 | $12;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 208 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$419 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $21 = ~~$3;
           break label$419;
          }
          $21 = -2147483648;
         }
         $12 = $12 | $21 << 16;
         $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 212 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($17, 5416));
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$43 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$43;
          }
          $2 = -2147483648;
         }
         ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($20, 580), $8, $42, $12 | $2 << 24, Math_fround(0.0), 0);
         $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5700 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$45 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $12 = ~~$3;
           break label$45;
          }
          $12 = -2147483648;
         }
         $12 = $12 << 8;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5696 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$47 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $17 = ~~$3;
           break label$47;
          }
          $17 = -2147483648;
         }
         $12 = $17 | $12;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5704 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$49 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $17 = ~~$3;
           break label$49;
          }
          $17 = -2147483648;
         }
         $12 = $12 | $17 << 16;
         $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5708 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$51 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$51;
          }
          $2 = -2147483648;
         }
         ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(SAFE_HEAP_LOAD_i32_4_4($20, 580), $8 + 16 | 0, $24, $12 | $2 << 24, Math_fround(0.0), 0, Math_fround(1.0));
         $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5620 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$5310 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $12 = ~~$3;
           break label$5310;
          }
          $12 = -2147483648;
         }
         $12 = $12 << 8;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5616 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$5511 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $17 = ~~$3;
           break label$5511;
          }
          $17 = -2147483648;
         }
         $12 = $17 | $12;
         $3 = SAFE_HEAP_LOAD_f32_4_4($2 + 5624 | 0, 0);
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$5712 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $17 = ~~$3;
           break label$5712;
          }
          $17 = -2147483648;
         }
         $12 = $12 | $17 << 16;
         $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 5628 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($2, 5416));
         $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
         label$59 : {
          if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
           $2 = ~~$3;
           break label$59;
          }
          $2 = -2147483648;
         }
         $12 = $12 | $2 << 24;
         $3 = SAFE_HEAP_LOAD_f32_4_4($9, 6468);
         $17 = SAFE_HEAP_LOAD_i32_4_4($9, 6464);
         $43 = SAFE_HEAP_LOAD_i32_4_4($20, 580);
         $21 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
         $1 = $21;
         $2 = $1;
         label$6113 : {
          if (($1 | 0) == -1) {
           break label$6113
          }
          while (1) {
           label$63 : {
            $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
            if (($2 | 0) != 35) {
             if ($2) {
              break label$63
             }
             $2 = $1;
             break label$6113;
            }
            if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 1) | 0) != 35) {
             break label$63
            }
            $2 = $1;
            break label$6113;
           }
           $2 = -1;
           $1 = $1 + 1 | 0;
           if (($1 | 0) != -1) {
            continue
           }
           break;
          };
         }
         ImDrawList__AddText_28ImFont_20const__2c_20float_2c_20ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__2c_20float_2c_20ImVec4_20const__29($43, $17, $3, $8, $12, $21, $2, Math_fround(0.0), 0);
        }
        $1 = $5 + 1 | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($9, 7008) | 0) != ($1 | 0)) {
         continue
        }
        break;
       };
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5700 | 0, 0);
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$65 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $2 = ~~$3;
        break label$65;
       }
       $2 = -2147483648;
      }
      $2 = $2 << 8;
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5696 | 0, 0);
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$6715 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $12 = ~~$3;
        break label$6715;
       }
       $12 = -2147483648;
      }
      $2 = $12 | $2;
      $3 = SAFE_HEAP_LOAD_f32_4_4($1 + 5704 | 0, 0);
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$6916 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $12 = ~~$3;
        break label$6916;
       }
       $12 = -2147483648;
      }
      $2 = $2 | $12 << 16;
      $3 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 5708 | 0, 0) * SAFE_HEAP_LOAD_f32_4_4($1, 5416));
      $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
      label$7117 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $1 = ~~$3;
        break label$7117;
       }
       $1 = -2147483648;
      }
      ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($25, $14, $26, $2 | $1 << 24, Math_fround(0.0), 0, Math_fround(1.0));
      __stack_pointer = $8 + 32 | 0;
      $0 = $0 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($19, 7496) | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    SAFE_HEAP_STORE_f32_4_4($4, 964, Math_fround(Math_fround($10 - $11) * Math_fround(.125)));
    SAFE_HEAP_STORE_f32_4_4($4, 960, Math_fround(Math_fround($16 - $7) * Math_fround(.125)));
    ImGui__Dummy_28ImVec2_20const__29($4 + 960 | 0);
    $7 = ImGui__GetTreeNodeToLabelSpacing_28_29();
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if ($7 == Math_fround(0.0)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0)
    }
    $1 = $0 + 272 | 0;
    $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 0) - $7);
    SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    if ((SAFE_HEAP_LOAD_i32_4_4($6, 7496) | 0) > 0) {
     $0 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7504) + ($0 << 2) | 0, 0);
      $5 = __stack_pointer - 96 | 0;
      __stack_pointer = $5;
      ImGui__SetNextItemOpen_28bool_2c_20int_29(1, 2);
      SAFE_HEAP_STORE_i32_4_4($5, 80, 0);
      if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(16634, 13e3, $5 + 80 | 0)) {
       $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0);
       $11 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
       $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 124 | 0, 0);
       $16 = SAFE_HEAP_LOAD_f32_4_4($1 + 132 | 0, 0);
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       $3 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
       $13 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
       $18 = SAFE_HEAP_LOAD_f32_4_4($1, 120);
       SAFE_HEAP_STORE_f64_8_8($5 - -64 | 0, 0, +SAFE_HEAP_LOAD_f32_4_4($1, 128));
       SAFE_HEAP_STORE_f64_8_8($5 + 48 | 0, 0, +$18);
       $8 = $5 + 16 | 0;
       SAFE_HEAP_STORE_f64_8_8($8 + 16 | 0, 0, +$13);
       SAFE_HEAP_STORE_f64_8_8($5 + 72 | 0, 0, +$16);
       SAFE_HEAP_STORE_f64_8_8($5 + 56 | 0, 0, +$10);
       SAFE_HEAP_STORE_f64_8_8($5 + 40 | 0, 0, +$11);
       SAFE_HEAP_STORE_f64_8_8($5, 16, +$3);
       SAFE_HEAP_STORE_f64_8_8($5, 24, +$7);
       ImGui__BulletText_28char_20const__2c_20____29(9913, $8);
       $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       SAFE_HEAP_STORE_i32_4_4($5, 12, $2 & 4 ? 6811 : 19354);
       SAFE_HEAP_STORE_i32_4_4($5, 8, $2 & 2 ? 5953 : 19354);
       SAFE_HEAP_STORE_i32_4_4($5, 4, $2 & 1 ? 1742 : 19354);
       SAFE_HEAP_STORE_i32_4_4($5, 0, $8);
       ImGui__BulletText_28char_20const__2c_20____29(5450, $5);
       $9 = $1 + 96 | 0;
       $2 = 0;
       while (1) {
        $1 = $2;
        $8 = Math_imul($1, 12) + $9 | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($8, 0) | 0) > 0) {
         $14 = $8 + 8 | 0;
         $2 = 0;
         while (1) {
          ImGui__DebugNodeDrawList_28ImGuiWindow__2c_20ImDrawList_20const__2c_20char_20const__29(0, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($14, 0) + ($2 << 2) | 0, 0));
          $2 = $2 + 1 | 0;
          if ((SAFE_HEAP_LOAD_i32_4_4($8, 0) | 0) > ($2 | 0)) {
           continue
          }
          break;
         };
        }
        $2 = $1 + 1 | 0;
        if (!$1) {
         continue
        }
        break;
       };
       ImGui__TreePop_28_29();
      }
      __stack_pointer = $5 + 96 | 0;
      $0 = $0 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7496) | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__TreePop_28_29();
   }
   SAFE_HEAP_STORE_i32_4_4($4, 544, SAFE_HEAP_LOAD_i32_4_4($6, 7468));
   if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(4375, 18488, $4 + 544 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($6, 7468) | 0) > 0) {
     $0 = 0;
     while (1) {
      $5 = SAFE_HEAP_LOAD_i32_4_4($6, 7476) + Math_imul($0, 36) | 0;
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
      if ($2) {
       $8 = SAFE_HEAP_LOAD_i32_4_4($2, 0)
      } else {
       $8 = 14877
      }
      $1 = 0;
      if ($2) {
       $1 = SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 1
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
      $9 = $1 ? 1780 : 19354;
      $1 = 0;
      if ($2) {
       $1 = (SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 16) >>> 4 | 0
      }
      SAFE_HEAP_STORE_i32_4_4($4, 536, $9);
      SAFE_HEAP_STORE_i32_4_4($4, 532, $8);
      SAFE_HEAP_STORE_i32_4_4($4, 528, $5);
      SAFE_HEAP_STORE_i32_4_4($4, 540, $1 ? 1905 : 19354);
      ImGui__BulletText_28char_20const__2c_20____29(5517, $4 + 528 | 0);
      $0 = $0 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 7468) | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__TreePop_28_29();
   }
   SAFE_HEAP_STORE_i32_4_4($4, 512, SAFE_HEAP_LOAD_i32_4_4($6 + 8144 | 0, 0));
   if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(4367, 18474, $4 + 512 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($6 + 8128 | 0, 0) | 0) > 0) {
     $0 = 0;
     while (1) {
      $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 8136) + ($0 << 3) | 0, 4);
      label$85 : {
       if (($1 | 0) == -1) {
        break label$85
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($6, 8124);
       if (!$2) {
        break label$85
       }
       $5 = $2 + Math_imul($1, 144) | 0;
       ImGui__PushID_28void_20const__29($5);
       $1 = __stack_pointer - 368 | 0;
       __stack_pointer = $1;
       $14 = SAFE_HEAP_LOAD_i32_4_4($5, 36);
       $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6984);
       $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       $9 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
       SAFE_HEAP_STORE_i32_4_4($1, 80, 6680);
       SAFE_HEAP_STORE_i32_4_4($1, 84, $9);
       SAFE_HEAP_STORE_i32_4_4($1, 88, $8);
       $19 = $2 - 2 | 0;
       $20 = ($19 | 0) > ($14 | 0);
       SAFE_HEAP_STORE_i32_4_4($1, 92, $20 ? 17707 : 19354);
       $2 = $1 + 112 | 0;
       $8 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($2, 256, 5620, $1 + 80 | 0);
       $9 = $2 + $8 | 0;
       $9 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($9, 256 - $8 | 0, 19041, 0) + $9 | 0;
       $15 = $2 + 256 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       if (($2 | 0) > 0) {
        $8 = 0;
        while (1) {
         $2 = $8 ? 19147 : 19354;
         $24 = $15 - $9 | 0;
         $25 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 8) + Math_imul($8, 40) | 0, 28);
         if (($25 | 0) == -1) {
          $12 = 15508
         } else {
          $12 = SAFE_HEAP_LOAD_i32_4_4($5, 140) + $25 | 0
         }
         SAFE_HEAP_STORE_i32_4_4($1, 68, $12);
         SAFE_HEAP_STORE_i32_4_4($1, 64, $2);
         $9 = ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($9, $24, 18702, $1 - -64 | 0) + $9 | 0;
         $8 = $8 + 1 | 0;
         $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
         if (($8 | 0) < ((($2 | 0) >= 3 ? 3 : $2) | 0)) {
          continue
         }
         break;
        };
       }
       ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($9, $15 - $9 | 0, ($2 | 0) > 3 ? 1051 : 19037, 0);
       if ($20) {
        ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 5632 | 0)
       }
       SAFE_HEAP_STORE_i32_4_4($1, 48, $1 + 112 | 0);
       $9 = ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(6680, 5950, $1 + 48 | 0);
       label$72 : {
        if (($14 | 0) < ($19 | 0)) {
         $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
         $8 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 7396), 20) + SAFE_HEAP_LOAD_i32_4_4($2 + 7404 | 0, 0) | 0) - 20 | 0;
         $14 = (SAFE_HEAP_LOAD_i32_4_4($8, 0) << 4) + $2 | 0;
         SAFE_HEAP_STORE_i64_8_4($14 + 5624 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8 + 12 | 0, 0), i64toi32_i32$HIGH_BITS);
         SAFE_HEAP_STORE_i64_8_4($14 + 5616 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8, 4), i64toi32_i32$HIGH_BITS);
         SAFE_HEAP_STORE_i32_4_4($2, 7396, SAFE_HEAP_LOAD_i32_4_4($2, 7396) - 1 | 0);
         break label$72;
        }
        if (!ImGui__IsItemHovered_28int_29(0)) {
         break label$72
        }
        $2 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
        ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($2, $5 + 40 | 0, $5 + 48 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
        $7 = SAFE_HEAP_LOAD_f32_4_4($5, 88);
        $8 = $5 + 44 | 0;
        SAFE_HEAP_STORE_f32_4_4($1, 108, SAFE_HEAP_LOAD_f32_4_4($8, 0));
        SAFE_HEAP_STORE_f32_4_4($1, 104, $7);
        $14 = $5 + 52 | 0;
        SAFE_HEAP_STORE_f32_4_4($1, 100, SAFE_HEAP_LOAD_f32_4_4($14, 0));
        SAFE_HEAP_STORE_f32_4_4($1, 96, $7);
        $15 = $1 + 104 | 0;
        $19 = $1 + 96 | 0;
        ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($2, $15, $19, -16711936, Math_fround(1.0));
        $7 = SAFE_HEAP_LOAD_f32_4_4($5, 92);
        SAFE_HEAP_STORE_f32_4_4($1, 108, SAFE_HEAP_LOAD_f32_4_4($8, 0));
        SAFE_HEAP_STORE_f32_4_4($1, 104, $7);
        SAFE_HEAP_STORE_f32_4_4($1, 100, SAFE_HEAP_LOAD_f32_4_4($14, 0));
        SAFE_HEAP_STORE_f32_4_4($1, 96, $7);
        ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($2, $15, $19, -16711936, Math_fround(1.0));
       }
       if ($9) {
        if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) > 0) {
         $14 = $1 + 24 | 0;
         $15 = $1 + 16 | 0;
         $8 = 0;
         while (1) {
          $9 = SAFE_HEAP_LOAD_i32_4_4($5, 8) + Math_imul($8, 40) | 0;
          ImGui__PushID_28void_20const__29($9);
          if (ImGui__SmallButton_28char_20const__29(16153)) {
           ImGui__TabBarQueueReorder_28ImGuiTabBar__2c_20ImGuiTabItem_20const__2c_20int_29($5, $9, -1)
          }
          $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
          SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
          if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
           SAFE_HEAP_STORE_f32_4_4($2 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2 + 220 | 0, 0));
           SAFE_HEAP_STORE_i64_8_4($2 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
           SAFE_HEAP_STORE_f32_4_4($2 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2 + 268 | 0, 0));
           SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2 + 216 | 0, 0) + Math_fround(2.0)));
          }
          if (ImGui__SmallButton_28char_20const__29(16149)) {
           ImGui__TabBarQueueReorder_28ImGuiTabBar__2c_20ImGuiTabItem_20const__2c_20int_29($5, $9, 1)
          }
          $19 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
          $2 = SAFE_HEAP_LOAD_i32_4_4($19, 7080);
          SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
          if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
           $7 = SAFE_HEAP_LOAD_f32_4_4($19 + 5492 | 0, 0);
           SAFE_HEAP_STORE_f32_4_4($2 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2 + 220 | 0, 0));
           SAFE_HEAP_STORE_i64_8_4($2 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($2 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
           SAFE_HEAP_STORE_f32_4_4($2 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($2 + 268 | 0, 0));
           SAFE_HEAP_STORE_f32_4_4($2, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($2 + 216 | 0, 0)));
          }
          $2 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
          $19 = (SAFE_HEAP_LOAD_i32_4_4($5, 20) | 0) == ($2 | 0) ? 42 : 32;
          $20 = SAFE_HEAP_LOAD_i32_4_4($9, 28);
          if (($20 | 0) == -1) {
           $20 = 15508
          } else {
           $20 = SAFE_HEAP_LOAD_i32_4_4($5, 140) + $20 | 0
          }
          $7 = SAFE_HEAP_LOAD_f32_4_4($9, 16);
          $11 = SAFE_HEAP_LOAD_f32_4_4($9, 20);
          SAFE_HEAP_STORE_f64_8_8($1 + 32 | 0, 0, +SAFE_HEAP_LOAD_f32_4_4($9, 24));
          SAFE_HEAP_STORE_f64_8_8($14, 0, +$11);
          SAFE_HEAP_STORE_f64_8_8($15, 0, +$7);
          SAFE_HEAP_STORE_i32_4_4($1, 12, $20);
          SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
          SAFE_HEAP_STORE_i32_4_4($1, 4, $19);
          SAFE_HEAP_STORE_i32_4_4($1, 0, $8);
          ImGui__Text_28char_20const__2c_20____29(9794, $1);
          $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
          SAFE_HEAP_STORE_i32_4_4($2, 196, SAFE_HEAP_LOAD_i32_4_4($2, 196) - 1 | 0);
          $2 = $8 + 1 | 0;
          $8 = $2;
          if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) > ($2 | 0)) {
           continue
          }
          break;
         };
        }
        ImGui__TreePop_28_29();
       }
       __stack_pointer = $1 + 368 | 0;
       $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
       SAFE_HEAP_STORE_i32_4_4($1, 196, SAFE_HEAP_LOAD_i32_4_4($1, 196) - 1 | 0);
      }
      $0 = $0 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 8128) | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__TreePop_28_29();
   }
   SAFE_HEAP_STORE_i32_4_4($4, 496, SAFE_HEAP_LOAD_i32_4_4($6 + 8084 | 0, 0));
   if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(5197, 18500, $4 + 496 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($6 + 8068 | 0, 0) | 0) > 0) {
     $0 = 0;
     while (1) {
      $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 8076) + ($0 << 3) | 0, 4);
      label$89 : {
       if (($2 | 0) == -1) {
        break label$89
       }
       $5 = SAFE_HEAP_LOAD_i32_4_4($6, 8064);
       if (!$5) {
        break label$89
       }
       $1 = __stack_pointer - 944 | 0;
       __stack_pointer = $1;
       $5 = $5 + Math_imul($2, 456) | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($5, 80);
       $8 = ImGui__GetFrameCount_28_29();
       $9 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
       $14 = SAFE_HEAP_LOAD_i32_4_4($5, 84);
       SAFE_HEAP_STORE_i32_4_4($1, 392, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($5, 356), 0));
       SAFE_HEAP_STORE_i32_4_4($1, 388, $14);
       SAFE_HEAP_STORE_i32_4_4($1, 384, $9);
       $8 = $8 - 2 | 0;
       SAFE_HEAP_STORE_i32_4_4($1, 396, ($8 | 0) > ($2 | 0) ? 17707 : 19354);
       ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($1 + 432 | 0, 512, 5642, $1 + 384 | 0);
       $2 = ($2 | 0) >= ($8 | 0);
       if (!$2) {
        ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29(0, ImGui__GetStyleColorVec4_28int_29(1))
       }
       SAFE_HEAP_STORE_i32_4_4($1, 368, $1 + 432 | 0);
       $8 = ImGui__TreeNode_28void_20const__2c_20char_20const__2c_20____29($5, 5950, $1 + 368 | 0);
       if (!$2) {
        ImGui__PopStyleColor_28int_29(1)
       }
       if (ImGui__IsItemHovered_28int_29(0)) {
        ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(ImGui__GetForegroundDrawList_28_29(), $5 + 212 | 0, $5 + 220 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0))
       }
       label$40 : {
        if (!ImGui__IsItemVisible_28_29()) {
         break label$40
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($5, 420) | 0) == 255) {
         break label$40
        }
        $2 = ImGui__GetForegroundDrawList_28_29();
        $9 = $1 + 408 | 0;
        ImGui__GetItemRectMin_28_29($9);
        $14 = $1 + 424 | 0;
        ImGui__GetItemRectMax_28_29($14);
        ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($2, $9, $14, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
       }
       if ($8) {
        $14 = ImGui__SmallButton_28char_20const__29(4846);
        $10 = SAFE_HEAP_LOAD_f32_4_4($5 + 224 | 0, 0);
        $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 216 | 0, 0);
        $44 = +Math_fround($10 - $7);
        $45 = +$7;
        $10 = SAFE_HEAP_LOAD_f32_4_4($5 + 220 | 0, 0);
        $7 = SAFE_HEAP_LOAD_f32_4_4($5, 212);
        $46 = +Math_fround($10 - $7);
        $47 = +$7;
        $8 = $1 + 352 | 0;
        $2 = (SAFE_HEAP_LOAD_i32_4_4($5, 4) & 57344) + -8192 | 0;
        if ($2 >>> 0 <= 32767) {
         $2 = SAFE_HEAP_LOAD_i32_4_4(($2 >>> 11 | 0) + 48144 | 0, 0)
        } else {
         $2 = 15504
        }
        SAFE_HEAP_STORE_i32_4_4($8, 0, $2);
        $2 = $1 + 320 | 0;
        SAFE_HEAP_STORE_f64_8_8($2 + 24 | 0, 0, $44);
        SAFE_HEAP_STORE_f64_8_8($2 + 16 | 0, 0, $46);
        SAFE_HEAP_STORE_f64_8_8($1, 328, $45);
        SAFE_HEAP_STORE_f64_8_8($1, 320, $47);
        ImGui__BulletText_28char_20const__2c_20____29(18854, $2);
        $7 = SAFE_HEAP_LOAD_f32_4_4($5, 192);
        $11 = SAFE_HEAP_LOAD_f32_4_4($5, 196);
        $2 = $1 + 288 | 0;
        $10 = SAFE_HEAP_LOAD_f32_4_4($5, 188);
        SAFE_HEAP_STORE_f64_8_8($2 + 16 | 0, 0, +$10);
        SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, $10 == Math_fround(0.0) ? 17950 : 19354);
        SAFE_HEAP_STORE_f64_8_8($1, 296, +$11);
        SAFE_HEAP_STORE_f64_8_8($1, 288, +$7);
        ImGui__BulletText_28char_20const__2c_20____29(5549, $2);
        $7 = SAFE_HEAP_LOAD_f32_4_4($5, 164);
        $11 = SAFE_HEAP_LOAD_f32_4_4($5, 172);
        $10 = SAFE_HEAP_LOAD_f32_4_4($5, 176);
        $2 = $1 + 256 | 0;
        SAFE_HEAP_STORE_f64_8_8($2 + 24 | 0, 0, +SAFE_HEAP_LOAD_f32_4_4($5, 160));
        SAFE_HEAP_STORE_f64_8_8($2 + 16 | 0, 0, +$10);
        SAFE_HEAP_STORE_f64_8_8($1, 264, +$11);
        SAFE_HEAP_STORE_f64_8_8($1, 256, +$7);
        ImGui__BulletText_28char_20const__2c_20____29(9848, $2);
        $2 = SAFE_HEAP_LOAD_i32_1_1($5, 420);
        SAFE_HEAP_STORE_i32_4_4($1, 244, SAFE_HEAP_LOAD_i32_1_1($5, 421));
        SAFE_HEAP_STORE_i32_4_4($1, 240, $2);
        ImGui__BulletText_28char_20const__2c_20____29(13224, $1 + 240 | 0);
        $2 = SAFE_HEAP_LOAD_i32_1_1($5, 423);
        $8 = SAFE_HEAP_LOAD_i32_1_1($5, 426);
        SAFE_HEAP_STORE_i32_4_4($1, 232, SAFE_HEAP_LOAD_i32_1_1($5, 425));
        SAFE_HEAP_STORE_i32_4_4($1, 228, $8);
        SAFE_HEAP_STORE_i32_4_4($1, 224, $2);
        ImGui__BulletText_28char_20const__2c_20____29(13318, $1 + 224 | 0);
        $11 = Math_fround(0.0);
        $2 = SAFE_HEAP_LOAD_i32_4_4($5, 84);
        if (($2 | 0) > 0) {
         $9 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
         $8 = 0;
         while (1) {
          $15 = $9 + Math_imul($8, 104) | 0;
          if (SAFE_HEAP_LOAD_i32_1_U_1($15, 0) & 8) {
           $11 = Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($15, 24))
          }
          $8 = $8 + 1 | 0;
          if (($2 | 0) != ($8 | 0)) {
           continue
          }
          break;
         };
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($5, 84);
        if (($2 | 0) > 0) {
         $15 = $1 + 416 | 0;
         $19 = $1 + 208 | 0;
         $20 = $1 + 204 | 0;
         $24 = $1 + 200 | 0;
         $25 = $1 + 196 | 0;
         $26 = $1 + 192 | 0;
         $42 = $1 + 184 | 0;
         $12 = $1 + 128 | 0;
         $17 = $1 + 120 | 0;
         $43 = $1 + 112 | 0;
         $21 = $1 + 96 | 0;
         $50 = $1 + 88 | 0;
         $51 = $1 + 80 | 0;
         $52 = $1 + 72 | 0;
         $53 = $1 - -64 | 0;
         $54 = $1 + 60 | 0;
         $55 = $1 + 56 | 0;
         $56 = $1 + 52 | 0;
         $57 = $1 + 48 | 0;
         $58 = $1 + 44 | 0;
         $59 = $1 + 36 | 0;
         $60 = $1 + 24 | 0;
         $61 = $1 + 176 | 0;
         $62 = $1 + 168 | 0;
         $63 = $1 + 160 | 0;
         $64 = $1 + 152 | 0;
         $65 = $1 + 136 | 0;
         $66 = $1 + 144 | 0;
         $67 = $1 + 188 | 0;
         $8 = 0;
         while (1) {
          $2 = SAFE_HEAP_LOAD_i32_4_4($5, 16) + Math_imul($8, 104) | 0;
          label$133 : {
           if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 441)) {
            $36 = 19354;
            if ((SAFE_HEAP_LOAD_i32_1_1($5, 419) | 0) <= ($8 | 0)) {
             break label$133
            }
           }
           $9 = SAFE_HEAP_LOAD_i32_2_2($2, 80);
           $36 = 19354;
           if (($9 | 0) == -1) {
            break label$133
           }
           $36 = SAFE_HEAP_LOAD_i32_4_4($5, 372) + $9 | 0;
          }
          $68 = (SAFE_HEAP_LOAD_i32_1_1($5, 435) | 0) > ($8 | 0) ? 17958 : 19354;
          $69 = SAFE_HEAP_LOAD_i32_1_U_1($2, 89);
          $70 = SAFE_HEAP_LOAD_i32_1_U_1($2, 88);
          $71 = SAFE_HEAP_LOAD_i32_1_U_1($2, 96);
          $72 = SAFE_HEAP_LOAD_i32_1_U_1($2, 95);
          $73 = SAFE_HEAP_LOAD_i32_1_U_1($2, 94);
          $74 = SAFE_HEAP_LOAD_i32_1_U_1($2, 93);
          $75 = SAFE_HEAP_LOAD_i32_1_U_1($2, 90);
          $76 = SAFE_HEAP_LOAD_i32_1_1($2, 82);
          $10 = SAFE_HEAP_LOAD_f32_4_4($2, 24);
          $44 = +$10;
          $45 = +SAFE_HEAP_LOAD_f32_4_4($2, 20);
          $46 = +SAFE_HEAP_LOAD_f32_4_4($2, 16);
          $47 = +SAFE_HEAP_LOAD_f32_4_4($2, 4);
          $16 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
          $7 = SAFE_HEAP_LOAD_f32_4_4($5, 244);
          $77 = +Math_fround($16 - $7);
          $3 = SAFE_HEAP_LOAD_f32_4_4($2, 8);
          $78 = +Math_fround($3 - $7);
          $79 = SAFE_HEAP_LOAD_i32_1_U_1($2, 101);
          $13 = SAFE_HEAP_LOAD_f32_4_4($2 + 40 | 0, 0);
          $22 = SAFE_HEAP_LOAD_f32_4_4($2, 64);
          $28 = SAFE_HEAP_LOAD_f32_4_4($2, 68);
          $23 = SAFE_HEAP_LOAD_f32_4_4($2, 72);
          $32 = SAFE_HEAP_LOAD_f32_4_4($2, 76);
          $7 = SAFE_HEAP_LOAD_f32_4_4($2, 52);
          $18 = SAFE_HEAP_LOAD_f32_4_4($2, 32);
          $80 = SAFE_HEAP_LOAD_i32_1_1($2, 86);
          $81 = SAFE_HEAP_LOAD_i32_4_4($2, 48);
          $9 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
          SAFE_HEAP_STORE_i32_4_4($19, 0, $9 & 32 ? 19118 : 19354);
          SAFE_HEAP_STORE_i32_4_4($20, 0, $9 & 16 ? 19135 : 19354);
          SAFE_HEAP_STORE_i32_4_4($24, 0, $9 & 8 ? 19104 : 19354);
          SAFE_HEAP_STORE_i32_4_4($25, 0, $9);
          SAFE_HEAP_STORE_i32_4_4($26, 0, $81);
          SAFE_HEAP_STORE_i32_4_4($42, 0, $80);
          SAFE_HEAP_STORE_f64_8_8($12, 0, +$18);
          SAFE_HEAP_STORE_f64_8_8($17, 0, +Math_fround($16 - $3));
          SAFE_HEAP_STORE_f64_8_8($43, 0, +$16);
          SAFE_HEAP_STORE_f64_8_8($1 + 104 | 0, 0, +$3);
          SAFE_HEAP_STORE_f64_8_8($21, 0, +($10 > Math_fround(0.0) ? Math_fround(Math_fround($10 / $11) * Math_fround(100.0)) : Math_fround(0.0)));
          SAFE_HEAP_STORE_f64_8_8($50, 0, $44);
          SAFE_HEAP_STORE_f64_8_8($51, 0, $45);
          SAFE_HEAP_STORE_f64_8_8($52, 0, $46);
          SAFE_HEAP_STORE_f64_8_8($53, 0, $47);
          SAFE_HEAP_STORE_i32_4_4($54, 0, $69);
          SAFE_HEAP_STORE_i32_4_4($55, 0, $70);
          SAFE_HEAP_STORE_i32_4_4($56, 0, $71);
          SAFE_HEAP_STORE_i32_4_4($57, 0, $72);
          SAFE_HEAP_STORE_i32_4_4($58, 0, $73);
          SAFE_HEAP_STORE_i32_4_4($1 + 40 | 0, 0, $74);
          SAFE_HEAP_STORE_i32_4_4($59, 0, $75);
          SAFE_HEAP_STORE_i32_4_4($1 + 32 | 0, 0, $68);
          SAFE_HEAP_STORE_f64_8_8($60, 0, $77);
          SAFE_HEAP_STORE_f64_8_8($1 + 16 | 0, 0, $78);
          SAFE_HEAP_STORE_f64_8_8($61, 0, +Math_fround($32 - $7));
          SAFE_HEAP_STORE_f64_8_8($62, 0, +Math_fround($23 - $7));
          SAFE_HEAP_STORE_f64_8_8($63, 0, +Math_fround($28 - $7));
          SAFE_HEAP_STORE_f64_8_8($64, 0, +Math_fround($22 - $7));
          SAFE_HEAP_STORE_f64_8_8($65, 0, +$13);
          SAFE_HEAP_STORE_f64_8_8($66, 0, +Math_fround($13 - $18));
          $9 = $79 & 3;
          SAFE_HEAP_STORE_i32_4_4($67, 0, ($9 | 0) == 1 ? 18570 : ($9 | 0) == 2 ? 17919 : 19354);
          SAFE_HEAP_STORE_i32_4_4($1, 8, $36);
          SAFE_HEAP_STORE_i32_4_4($1, 4, $76);
          SAFE_HEAP_STORE_i32_4_4($1, 0, $8);
          $9 = $1 + 432 | 0;
          ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($9, 512, 17293, $1);
          ImGui__Bullet_28_29();
          SAFE_HEAP_STORE_i64_8_4($1, 408, 0, 0);
          ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($9, 0, 0, $1 + 408 | 0);
          if (ImGui__IsItemHovered_28int_29(0)) {
           $7 = SAFE_HEAP_LOAD_f32_4_4($2 + 8 | 0, 0);
           $10 = SAFE_HEAP_LOAD_f32_4_4($5, 216);
           $16 = SAFE_HEAP_LOAD_f32_4_4($2 + 12 | 0, 0);
           SAFE_HEAP_STORE_f32_4_4($1, 420, SAFE_HEAP_LOAD_f32_4_4($5, 224));
           SAFE_HEAP_STORE_f32_4_4($1, 416, $16);
           SAFE_HEAP_STORE_f32_4_4($1, 412, $10);
           SAFE_HEAP_STORE_f32_4_4($1, 408, $7);
           ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29(ImGui__GetForegroundDrawList_28_29(), $1 + 408 | 0, $15, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
          }
          $8 = $8 + 1 | 0;
          $2 = SAFE_HEAP_LOAD_i32_4_4($5, 84);
          if (($8 | 0) < ($2 | 0)) {
           continue
          }
          break;
         };
        }
        $8 = SAFE_HEAP_LOAD_i32_4_4($5, 76);
        label$184 : {
         if (($8 | 0) == -1) {
          $8 = 0;
          break label$184;
         }
         $8 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 12176 | 0, 0) + $8 | 0;
         if ((SAFE_HEAP_LOAD_i32_1_1($8, 13) | 0) >= ($2 | 0)) {
          break label$184
         }
         SAFE_HEAP_STORE_i32_4_4($8, 0, 0);
         $8 = 0;
        }
        if ($8) {
         ImGui__DebugNodeTableSettings_28ImGuiTableSettings__29($8)
        }
        if ($14) {
         SAFE_HEAP_STORE_i32_1_1($5, 450, 1)
        }
        ImGui__TreePop_28_29();
       }
       __stack_pointer = $1 + 944 | 0;
      }
      $0 = $0 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($6, 8068) | 0) > ($0 | 0)) {
       continue
      }
      break;
     };
    }
    ImGui__TreePop_28_29();
   }
   if (ImGui__TreeNode_28char_20const__29(4872)) {
    label$91 : {
     if (!ImGui__SmallButton_28char_20const__29(6542)) {
      break label$91
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $1 = SAFE_HEAP_LOAD_i32_4_4($0 + 12140 | 0, 0);
     if ($1) {
      SAFE_HEAP_STORE_i64_8_4($0, 12132, 0, 0);
      if ($0) {
       $2 = $0 + 876 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($2, 0) - 1 | 0);
      }
      ((wasm2js_i32$1 = $1, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_4_4(0, 73576)), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(0, 73260) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0);
      SAFE_HEAP_STORE_i32_4_4($0, 12140, 0);
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 12144) | 0) <= 0) {
      break label$91
     }
     $1 = 0;
     while (1) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12152) + Math_imul($1, 36) | 0;
      $5 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
      if ($5) {
       FUNCTION_TABLE[$5 | 0]($0, $2)
      }
      $1 = $1 + 1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 12144) | 0) > ($1 | 0)) {
       continue
      }
      break;
     };
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
    }
    if (ImGui__SmallButton_28char_20const__29(1094)) {
     ImGui__SaveIniSettingsToMemory_28unsigned_20long__29(0)
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
    }
    label$99 : {
     if (!ImGui__SmallButton_28char_20const__29(8421)) {
      break label$99
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($6 + 32 | 0, 0);
     SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 12128, 0);
     if (!$0) {
      break label$99
     }
     SAFE_HEAP_STORE_i32_4_4($4, 960, 0);
     $1 = ImGui__SaveIniSettingsToMemory_28unsigned_20long__29($4 + 960 | 0);
     $0 = fopen($0, 2145);
     if (!$0) {
      break label$99
     }
     fwrite($1, SAFE_HEAP_LOAD_i32_4_4($4, 960), $0);
     fclose($0);
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
     $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 5492 | 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 220 | 0, 0));
     SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 256 | 0, 0), i64toi32_i32$HIGH_BITS);
     SAFE_HEAP_STORE_f32_4_4($0 + 264 | 0, 0, SAFE_HEAP_LOAD_f32_4_4($0 + 268 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0 + 216 | 0, 0)));
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($6 + 32 | 0, 0);
    label$101 : {
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($4, 480, $0);
      ImGui__Text_28char_20const__2c_20____29(18931, $4 + 480 | 0);
      break label$101;
     }
     ImGui__TextUnformatted_28char_20const__2c_20char_20const__29(16140);
    }
    SAFE_HEAP_STORE_f64_8_8($4, 464, +SAFE_HEAP_LOAD_f32_4_4($6, 12128));
    ImGui__Text_28char_20const__2c_20____29(9770, $4 + 464 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 448, SAFE_HEAP_LOAD_i32_4_4($6, 12144));
    if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(4308, 18520, $4 + 448 | 0)) {
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 12144) | 0) > 0) {
      $0 = 0;
      while (1) {
       SAFE_HEAP_STORE_i32_4_4($4, 432, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 12152) + Math_imul($0, 36) | 0, 0));
       ImGui__BulletText_28char_20const__2c_20____29(5950, $4 + 432 | 0);
       $0 = $0 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($6, 12144) | 0) > ($0 | 0)) {
        continue
       }
       break;
      };
     }
     ImGui__TreePop_28_29();
    }
    SAFE_HEAP_STORE_i32_4_4($4, 416, SAFE_HEAP_LOAD_i32_4_4($6, 12156));
    if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(3893, 4971, $4 + 416 | 0)) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($6 + 12164 | 0, 0);
     if ($0) {
      $1 = $4 + 408 | 0;
      $2 = $4 + 404 | 0;
      $0 = $0 + 4 | 0;
      while (1) {
       $5 = SAFE_HEAP_LOAD_i32_2_2($0 + 6 | 0, 0);
       $8 = SAFE_HEAP_LOAD_i32_2_2($0 + 10 | 0, 0);
       $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
       $14 = SAFE_HEAP_LOAD_i32_2_2($0, 4);
       $15 = SAFE_HEAP_LOAD_i32_2_2($0, 8);
       SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_1_U_1($0, 12));
       SAFE_HEAP_STORE_i32_4_4($2, 0, $8);
       $8 = $4 + 384 | 0;
       SAFE_HEAP_STORE_i32_4_4($8 + 16 | 0, 0, $15);
       SAFE_HEAP_STORE_i32_4_4($4, 396, $5);
       SAFE_HEAP_STORE_i32_4_4($4, 392, $14);
       SAFE_HEAP_STORE_i32_4_4($4, 388, $0 + 16 | 0);
       SAFE_HEAP_STORE_i32_4_4($4, 384, $9);
       ImGui__Text_28char_20const__2c_20____29(12940, $8);
       $0 = SAFE_HEAP_LOAD_i32_4_4($0 - 4 | 0, 0) + $0 | 0;
       $5 = ($0 | 0) == ((SAFE_HEAP_LOAD_i32_4_4($6, 12164) + SAFE_HEAP_LOAD_i32_4_4($6, 12156) | 0) + 4 | 0);
       $0 = $5 ? 0 : $0;
       if (!$5) {
        continue
       }
       break;
      };
     }
     ImGui__TreePop_28_29();
    }
    SAFE_HEAP_STORE_i32_4_4($4, 368, SAFE_HEAP_LOAD_i32_4_4($6, 12168));
    if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(5189, 5011, $4 + 368 | 0)) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($6 + 12176 | 0, 0);
     if ($0) {
      $0 = $0 + 4 | 0;
      while (1) {
       ImGui__DebugNodeTableSettings_28ImGuiTableSettings__29($0);
       $0 = SAFE_HEAP_LOAD_i32_4_4($0 - 4 | 0, 0) + $0 | 0;
       $0 = ($0 | 0) != ((SAFE_HEAP_LOAD_i32_4_4($6, 12176) + SAFE_HEAP_LOAD_i32_4_4($6, 12168) | 0) + 4 | 0) ? $0 : 0;
       if ($0) {
        continue
       }
       break;
      };
     }
     ImGui__TreePop_28_29();
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 12132);
    $1 = $0 - 1 | 0;
    SAFE_HEAP_STORE_i32_4_4($4, 352, $0 >>> 0 >= $1 >>> 0 ? $1 : 0);
    if (ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(13836, 5050, $4 + 352 | 0)) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($6 + 12140 | 0, 0);
     $1 = SAFE_HEAP_LOAD_i32_4_4($6, 12132);
     $7 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6468);
     SAFE_HEAP_STORE_i32_4_4($4, 960, -2139095040);
     SAFE_HEAP_STORE_f32_4_4($4, 964, Math_fround($7 * Math_fround(20.0)));
     ImGui__InputTextMultiline_28char_20const__2c_20char__2c_20unsigned_20long_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29(8550, $0 ? $0 : 73572, $1, $4 + 960 | 0, 16384, 0);
     ImGui__TreePop_28_29();
    }
    ImGui__TreePop_28_29();
   }
   if (ImGui__TreeNode_28char_20const__29(10677)) {
    ImGui__Text_28char_20const__2c_20____29(14905, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0);
    $1 = $0 + 272 | 0;
    $7 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
    SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7084);
    if ($0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0)
    } else {
     $0 = 14877
    }
    SAFE_HEAP_STORE_i32_4_4($4, 336, $0);
    ImGui__Text_28char_20const__2c_20____29(18762, $4 + 336 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7084);
    if ($0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 736), 0)
    } else {
     $0 = 14877
    }
    SAFE_HEAP_STORE_i32_4_4($4, 320, $0);
    ImGui__Text_28char_20const__2c_20____29(18803, $4 + 320 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7088);
    if ($0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0)
    } else {
     $0 = 14877
    }
    SAFE_HEAP_STORE_i32_4_4($4, 304, $0);
    ImGui__Text_28char_20const__2c_20____29(18725, $4 + 304 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7092);
    if ($0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0)
    } else {
     $0 = 14877
    }
    SAFE_HEAP_STORE_i32_4_4($4, 288, $0);
    ImGui__Text_28char_20const__2c_20____29(18743, $4 + 288 | 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    $2 = $0 + 272 | 0;
    $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0));
    SAFE_HEAP_STORE_f32_4_4($2, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    ImGui__Text_28char_20const__2c_20____29(14816, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0);
    $1 = $0 + 272 | 0;
    $7 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
    SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    $7 = SAFE_HEAP_LOAD_f32_4_4($6, 7144);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7136);
    $1 = SAFE_HEAP_LOAD_i32_4_4($6, 7196);
    $2 = SAFE_HEAP_LOAD_i32_4_4($6, 7188);
    $5 = $4 + 256 | 0;
    SAFE_HEAP_STORE_i32_4_4($5 + 16 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($6, 7149));
    SAFE_HEAP_STORE_i32_4_4($4 + 276 | 0, 0, SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + 20880 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($4, 260, $1);
    SAFE_HEAP_STORE_i32_4_4($4, 256, $0);
    SAFE_HEAP_STORE_f64_8_8($4, 264, +$7);
    ImGui__Text_28char_20const__2c_20____29(5838, $5);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7184);
    if ($0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0)
    } else {
     $0 = 14877
    }
    SAFE_HEAP_STORE_i32_4_4($4, 240, $0);
    ImGui__Text_28char_20const__2c_20____29(18782, $4 + 240 | 0);
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($6, 7154);
    $1 = SAFE_HEAP_LOAD_i64_8_4($6, 7156);
    $2 = i64toi32_i32$HIGH_BITS;
    $5 = $4 + 208 | 0;
    SAFE_HEAP_STORE_i64_8_8($5 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($6, 7168), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($4, 212, $1, $2);
    SAFE_HEAP_STORE_i32_4_4($4, 208, $0);
    ImGui__Text_28char_20const__2c_20____29(14211, $5);
    $7 = SAFE_HEAP_LOAD_f32_4_4($6, 7128);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7120);
    $1 = $4 + 176 | 0;
    SAFE_HEAP_STORE_i32_4_4($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($6, 7124));
    SAFE_HEAP_STORE_i32_4_4($4, 176, $0);
    SAFE_HEAP_STORE_f64_8_8($4, 184, +$7);
    ImGui__Text_28char_20const__2c_20____29(13271, $1);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6 + 7900 | 0, 0);
    $1 = SAFE_HEAP_LOAD_i32_1_U_1($6, 7876);
    SAFE_HEAP_STORE_i32_4_4($4, 172, SAFE_HEAP_LOAD_i32_4_4($6 + 7896 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($4, 168, $6 + 7912 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 164, $0);
    SAFE_HEAP_STORE_i32_4_4($4, 160, $1);
    ImGui__Text_28char_20const__2c_20____29(17823, $4 + 160 | 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    $2 = $0 + 272 | 0;
    $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0));
    SAFE_HEAP_STORE_f32_4_4($2, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    ImGui__Text_28char_20const__2c_20____29(14806, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0);
    $1 = $0 + 272 | 0;
    $7 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 0));
    SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7508);
    if ($0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0)
    } else {
     $0 = 14877
    }
    SAFE_HEAP_STORE_i32_4_4($4, 144, $0);
    ImGui__Text_28char_20const__2c_20____29(18709, $4 + 144 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7512);
    SAFE_HEAP_STORE_i32_4_4($4, 132, SAFE_HEAP_LOAD_i32_4_4($6, 7564));
    SAFE_HEAP_STORE_i32_4_4($4, 128, $0);
    ImGui__Text_28char_20const__2c_20____29(13146, $4 + 128 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 112, SAFE_HEAP_LOAD_i32_4_4((SAFE_HEAP_LOAD_i32_4_4($6, 7560) << 2) + 20880 | 0, 0));
    ImGui__Text_28char_20const__2c_20____29(5819, $4 + 112 | 0);
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($6 + 853 | 0, 0);
    SAFE_HEAP_STORE_i32_4_4($4, 100, SAFE_HEAP_LOAD_i32_1_U_1($6 + 854 | 0, 0));
    SAFE_HEAP_STORE_i32_4_4($4, 96, $0);
    ImGui__Text_28char_20const__2c_20____29(13377, $4 + 96 | 0);
    $0 = SAFE_HEAP_LOAD_i64_8_8($6, 7520);
    $1 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i64_8_8($4, 88, SAFE_HEAP_LOAD_i64_8_8($6, 7528), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($4, 80, $0, $1);
    ImGui__Text_28char_20const__2c_20____29(14583, $4 + 80 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 64, SAFE_HEAP_LOAD_i32_4_4($6, 7536));
    ImGui__Text_28char_20const__2c_20____29(14688, $4 - -64 | 0);
    $0 = SAFE_HEAP_LOAD_i32_1_U_1($6, 7570);
    SAFE_HEAP_STORE_i32_4_4($4, 52, SAFE_HEAP_LOAD_i32_1_U_1($6, 7571));
    SAFE_HEAP_STORE_i32_4_4($4, 48, $0);
    ImGui__Text_28char_20const__2c_20____29(13174, $4 + 48 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 32, SAFE_HEAP_LOAD_i32_4_4($6, 7516));
    ImGui__Text_28char_20const__2c_20____29(14430, $4 + 32 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 7844);
    if ($0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0)
    } else {
     $0 = 14877
    }
    SAFE_HEAP_STORE_i32_4_4($4, 16, $0);
    ImGui__Text_28char_20const__2c_20____29(18829, $4 + 16 | 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
    SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
    $2 = $0 + 272 | 0;
    $7 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 0) - SAFE_HEAP_LOAD_f32_4_4($1 + 5524 | 0, 0));
    SAFE_HEAP_STORE_f32_4_4($2, 0, $7);
    SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround(Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($0, 12)) + SAFE_HEAP_LOAD_f32_4_4($0 + 276 | 0, 0)));
    ImGui__TreePop_28_29();
   }
   label$1225 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1($6 + 12257 | 0, 0)) {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($6 + 12258 | 0, 0)) {
      break label$1225
     }
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($6, 7008) | 0) <= 0) {
     break label$1225
    }
    $2 = $4 + 968 | 0;
    $0 = 0;
    while (1) {
     $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 7016) + ($0 << 2) | 0, 0);
     label$125 : {
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 139)) {
       break label$125
      }
      $5 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
      if (SAFE_HEAP_LOAD_i32_1_U_1($6, 12257)) {
       label$127 : {
        label$128 : {
         switch (SAFE_HEAP_LOAD_i32_4_4($37, 0) | 0) {
         case 0:
          $11 = SAFE_HEAP_LOAD_f32_4_4($1 + 24 | 0, 0);
          $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
          $10 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
          SAFE_HEAP_STORE_f32_4_4($4, 968, Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($1, 20)));
          SAFE_HEAP_STORE_f32_4_4($4, 964, $7);
          SAFE_HEAP_STORE_f32_4_4($4, 960, $10);
          SAFE_HEAP_STORE_f32_4_4($4, 972, Math_fround($7 + $11));
          break label$127;
         case 1:
          SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 424 | 0, 0), i64toi32_i32$HIGH_BITS);
          SAFE_HEAP_STORE_i64_8_8($4, 960, SAFE_HEAP_LOAD_i64_8_4($1, 416), i64toi32_i32$HIGH_BITS);
          break label$127;
         case 2:
          SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 440 | 0, 0), i64toi32_i32$HIGH_BITS);
          SAFE_HEAP_STORE_i64_8_8($4, 960, SAFE_HEAP_LOAD_i64_8_4($1, 432), i64toi32_i32$HIGH_BITS);
          break label$127;
         case 3:
          SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 456 | 0, 0), i64toi32_i32$HIGH_BITS);
          SAFE_HEAP_STORE_i64_8_8($4, 960, SAFE_HEAP_LOAD_i64_8_4($1, 448), i64toi32_i32$HIGH_BITS);
          break label$127;
         case 4:
          SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 472 | 0, 0), i64toi32_i32$HIGH_BITS);
          SAFE_HEAP_STORE_i64_8_8($4, 960, SAFE_HEAP_LOAD_i64_8_4($1, 464), i64toi32_i32$HIGH_BITS);
          break label$127;
         case 5:
          $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 40 | 0, 0);
          $11 = SAFE_HEAP_LOAD_f32_4_4($1 - -64 | 0, 0);
          $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 92 | 0, 0);
          $16 = SAFE_HEAP_LOAD_f32_4_4($1 + 436 | 0, 0);
          $3 = SAFE_HEAP_LOAD_f32_4_4($1, 36);
          $13 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 432) - SAFE_HEAP_LOAD_f32_4_4($1, 88)) + SAFE_HEAP_LOAD_f32_4_4($1, 60));
          SAFE_HEAP_STORE_f32_4_4($4, 960, $13);
          SAFE_HEAP_STORE_f32_4_4($4, 968, Math_fround($13 + $3));
          $11 = Math_fround($11 + Math_fround($16 - $10));
          SAFE_HEAP_STORE_f32_4_4($4, 964, $11);
          SAFE_HEAP_STORE_f32_4_4($4, 972, Math_fround($11 + $7));
          break label$127;
         case 6:
          $7 = SAFE_HEAP_LOAD_f32_4_4($1 + 48 | 0, 0);
          $11 = SAFE_HEAP_LOAD_f32_4_4($1 - -64 | 0, 0);
          $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 92 | 0, 0);
          $16 = SAFE_HEAP_LOAD_f32_4_4($1 + 436 | 0, 0);
          $3 = SAFE_HEAP_LOAD_f32_4_4($1, 44);
          $13 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 432) - SAFE_HEAP_LOAD_f32_4_4($1, 88)) + SAFE_HEAP_LOAD_f32_4_4($1, 60));
          SAFE_HEAP_STORE_f32_4_4($4, 960, $13);
          SAFE_HEAP_STORE_f32_4_4($4, 968, Math_fround($13 + $3));
          $11 = Math_fround($11 + Math_fround($16 - $10));
          SAFE_HEAP_STORE_f32_4_4($4, 964, $11);
          SAFE_HEAP_STORE_f32_4_4($4, 972, Math_fround($11 + $7));
          break label$127;
         case 7:
          SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($1 + 520 | 0, 0), i64toi32_i32$HIGH_BITS);
          SAFE_HEAP_STORE_i64_8_8($4, 960, SAFE_HEAP_LOAD_i64_8_4($1, 512), i64toi32_i32$HIGH_BITS);
          break label$127;
         default:
          break label$128;
         };
        }
        SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 0);
        SAFE_HEAP_STORE_i64_8_8($4, 960, 0, 0);
       }
       ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($5, $4 + 960 | 0, $2, -8388353, Math_fround(0.0), 0, Math_fround(1.0));
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 12258)) {
       break label$125
      }
      if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 1) {
       break label$125
      }
      SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_2_2($1, 154));
      $8 = $4 + 960 | 0;
      ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($8, 32, 13404, $4);
      $7 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
      $11 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6468);
      SAFE_HEAP_STORE_f32_4_4($4, 948, Math_fround($11 + SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0)));
      SAFE_HEAP_STORE_f32_4_4($4, 944, Math_fround($11 + $7));
      $1 = $1 + 12 | 0;
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($5, $1, $4 + 944 | 0, -10197816, Math_fround(0.0), 0);
      ImDrawList__AddText_28ImVec2_20const__2c_20unsigned_20int_2c_20char_20const__2c_20char_20const__29($5, $1, -1, $8);
     }
     $0 = $0 + 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 7008) | 0) > ($0 | 0)) {
      continue
     }
     break;
    };
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($6 + 12259 | 0, 0)) {
    break label$2
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($6 + 8068 | 0, 0) | 0) <= 0) {
    break label$2
   }
   $5 = $4 + 968 | 0;
   $0 = 0;
   while (1) {
    $1 = $0;
    $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 8076) + ($1 << 3) | 0, 4);
    label$138 : {
     if (($0 | 0) == -1) {
      break label$138
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($6, 8064);
     if (!$2) {
      break label$138
     }
     $2 = $2 + Math_imul($0, 456) | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 80) | 0) < (SAFE_HEAP_LOAD_i32_4_4($6, 6984) - 1 | 0)) {
      break label$138
     }
     $8 = GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 1, 11768);
     $0 = SAFE_HEAP_LOAD_i32_4_4($35, 0);
     if (($0 | 0) >= 6) {
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 84) | 0) <= 0) {
       break label$138
      }
      $9 = $2 + 84 | 0;
      $14 = $2 + 420 | 0;
      $0 = 0;
      while (1) {
       $15 = $4 + 960 | 0;
       ImGui__ShowMetricsWindow_28bool__29__Funcs__GetTableRect_28ImGuiTable__2c_20int_2c_20int_29($15, $2, SAFE_HEAP_LOAD_i32_4_4($35, 0), $0);
       $12 = $15;
       $15 = (SAFE_HEAP_LOAD_i32_1_1($14, 0) | 0) == ($0 | 0);
       ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($8, $12, $5, $15 ? -8323073 : -8388353, Math_fround(0.0), 0, $15 ? Math_fround(3.0) : Math_fround(1.0));
       $0 = $0 + 1 | 0;
       if ((SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0) > ($0 | 0)) {
        continue
       }
       break;
      };
      break label$138;
     }
     $9 = $4 + 960 | 0;
     ImGui__ShowMetricsWindow_28bool__29__Funcs__GetTableRect_28ImGuiTable__2c_20int_2c_20int_29($9, $2, $0, -1);
     ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($8, $9, $5, -8388353, Math_fround(0.0), 0, Math_fround(1.0));
    }
    $0 = $1 + 1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($6, 8068) | 0) > ($0 | 0)) {
     continue
    }
    break;
   };
  }
  ImGui__End_28_29();
  __stack_pointer = $4 + 1184 | 0;
  SAFE_HEAP_STORE_i32_4_4($34, 0, 52584);
  $1 = SAFE_HEAP_LOAD_i32_4_4($34, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($30, 24, SAFE_HEAP_LOAD_i32_1_U_1($34, 4));
   $2 = $30 + 24 | 0;
   $0 = _emval_take_value(72652, $2 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($30, 24, 0);
   $8 = $1;
   $1 = _emval_take_value(72760, $2 | 0) | 0;
   _emval_set_property($8 | 0, $1 | 0, $0 | 0);
   _emval_decref($1 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $30 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_10____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $0 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($2 + 12 | 0, $0);
  ImGui__ShowStackToolWindow_28bool__29((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0) != 2 ? $0 + 4 | 0 : 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52584);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
   $3 = $2 + 24 | 0;
   $0 = _emval_take_value(72652, $3 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 24, 0);
   $4 = $1;
   $1 = _emval_take_value(72760, $3 | 0) | 0;
   _emval_set_property($4 | 0, $1 | 0, $0 | 0);
   _emval_decref($1 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_12____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if (!(($0 | 0) == 2)) {
   +_emval_as($0 | 0, 52424, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  }
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 15, $3);
     $4 = $2 + 4 | 0;
     break label$2;
    }
    $5 = ($3 | 15) + 1 | 0;
    $4 = operator_20new_28unsigned_20long_29($5);
    SAFE_HEAP_STORE_i32_4_4($2, 12, $5 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 4, $4);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   }
   if ($3) {
    __memcpy($4, $1 + 4 | 0, $3)
   }
   SAFE_HEAP_STORE_i32_1_1($3 + $4 | 0, 0, 0);
   FUNCTION_TABLE[$0 | 0]($2 + 4 | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 4))
   }
   __stack_pointer = $2 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function emscripten__internal__Invoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $4 = $1 + 4 | 0;
  FUNCTION_TABLE[$0 | 0]($4);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 15);
  $5 = $2 << 24 >> 24;
  $0 = ($5 | 0) < 0;
  $3 = $0 ? $3 : $2 & 127;
  $2 = dlmalloc($3 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, $3);
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
  __memcpy($2 + 4 | 0, $0 ? $6 : $4, $3);
  if (($5 | 0) < 0) {
   dlfree($6)
  }
  __stack_pointer = $1 + 16 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_15____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = strlen(16215);
  if ($1 >>> 0 < 2147483632) {
   label$2 : {
    if ($1 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($0, 11, $1);
     break label$2;
    }
    $2 = ($1 | 15) + 1 | 0;
    $3 = operator_20new_28unsigned_20long_29($2);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $2 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
    $0 = $3;
   }
   if ($1) {
    memmove($0, 16215, $1)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_16____invoke_28ImGuiStyle__29($0) {
  $0 = $0 | 0;
  ImGui__StyleColorsDark_28ImGuiStyle__29($0);
 }
 
 function embind_init_ImGui_28_29__$_17____invoke_28ImGuiStyle__29($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0);
  if (!$0) {
   $0 = ImGui__GetStyle_28_29()
  }
  SAFE_HEAP_STORE_i64_8_4($0, 200, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 240 | 0, 0, 1064346583, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 232 | 0, 0, 1064346583, 1064346583);
  SAFE_HEAP_STORE_i64_8_4($0 + 224 | 0, 0, 1058642330, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 216 | 0, 0, 1058642330, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 208 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 256 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 288 | 0, 0, 0, 1050253722);
  SAFE_HEAP_STORE_i64_8_4($0 + 280 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 272 | 0, 0, 1065353216, 1065017672);
  SAFE_HEAP_STORE_i64_8_4($0 + 264 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 296 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 304 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 312 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 320 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 328 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 336 | 0, 0, 1065017672, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 344 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 352 | 0, 0, 1065017672, 1059816735);
  $10 = $0 + 360 | 0;
  SAFE_HEAP_STORE_i64_8_4($10, 0, 1064682127, 1064682127);
  $11 = $0 + 368 | 0;
  SAFE_HEAP_STORE_i64_8_4($11, 0, 1064682127, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 376 | 0, 0, 1062333317, 1062333317);
  $12 = $0 + 384 | 0;
  SAFE_HEAP_STORE_i64_8_4($12, 0, 1062333317, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 392 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 400 | 0, 0, 1065353216, 1057132380);
  SAFE_HEAP_STORE_i64_8_4($0 + 408 | 0, 0, 1063004406, 1063004406);
  SAFE_HEAP_STORE_i64_8_4($0 + 416 | 0, 0, 1063004406, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 424 | 0, 0, 1065017672, 1065017672);
  SAFE_HEAP_STORE_i64_8_4($0 + 432 | 0, 0, 1065017672, 1057467924);
  SAFE_HEAP_STORE_i64_8_4($0 + 440 | 0, 0, 1060152279, 1060152279);
  SAFE_HEAP_STORE_i64_8_4($0 + 448 | 0, 0, 1060152279, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 456 | 0, 0, 1056629064, 1056629064);
  SAFE_HEAP_STORE_i64_8_4($0 + 464 | 0, 0, 1056629064, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 472 | 0, 0, 1056629064, 1056629064);
  SAFE_HEAP_STORE_i64_8_4($0 + 480 | 0, 0, 1056629064, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 488 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 496 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 504 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 512 | 0, 0, 1065017672, 1061662228);
  SAFE_HEAP_STORE_i64_8_4($0 + 520 | 0, 0, 1055622431, 1057635697);
  SAFE_HEAP_STORE_i64_8_4($0 + 528 | 0, 0, 1061997773, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 536 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 544 | 0, 0, 1065017672, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 552 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 560 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 568 | 0, 0, 1031127695, 1057467924);
  SAFE_HEAP_STORE_i64_8_4($0 + 576 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 584 | 0, 0, 1048911544, 1058474557);
  $13 = $0 + 592 | 0;
  SAFE_HEAP_STORE_i64_8_4($13, 0, 1065017672, 1050589266);
  $8 = $0 + 600 | 0;
  SAFE_HEAP_STORE_i64_8_4($8, 0, 1048911544, 1058474557);
  $9 = $0 + 608 | 0;
  SAFE_HEAP_STORE_i64_8_4($9, 0, 1065017672, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 616 | 0, 0, 1048911544, 1058474557);
  $14 = $0 + 624 | 0;
  SAFE_HEAP_STORE_i64_8_4($14, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 632 | 0, 0, 1053273620, 1053273620);
  SAFE_HEAP_STORE_i64_8_4($0 + 640 | 0, 0, 1053273620, 1058977874);
  SAFE_HEAP_STORE_i64_8_4($0 + 648 | 0, 0, 1041194025, 1054951342);
  SAFE_HEAP_STORE_i64_8_4($0 + 656 | 0, 0, 1061997773, 1061662228);
  SAFE_HEAP_STORE_i64_8_4($0 + 664 | 0, 0, 1041194025, 1054951342);
  SAFE_HEAP_STORE_i64_8_4($0 + 672 | 0, 0, 1061997773, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 680 | 0, 0, 1051931443, 1051931443);
  SAFE_HEAP_STORE_i64_8_4($0 + 688 | 0, 0, 1051931443, 1043207291);
  SAFE_HEAP_STORE_i64_8_4($0 + 696 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 704 | 0, 0, 1065017672, 1059816735);
  SAFE_HEAP_STORE_i64_8_4($0 + 712 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 720 | 0, 0, 1065017672, 1064514355);
  SAFE_HEAP_STORE_i32_4_4($0 + 728 | 0, 0, 1061393793);
  SAFE_HEAP_STORE_i32_4_4($0 + 760 | 0, 0, 1058575221);
  SAFE_HEAP_STORE_i64_8_4($0 + 752 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 744 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 388 | 0, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 596 | 0, 0);
  $7 = Math_fround(Math_fround(Math_fround($1 - $7) * Math_fround(.8999999761581421)) + $7);
  SAFE_HEAP_STORE_f32_4_4($0 + 740 | 0, 0, $7);
  $2 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
  $3 = SAFE_HEAP_LOAD_f32_4_4($13, 0);
  $3 = Math_fround(Math_fround(Math_fround($2 - $3) * Math_fround(.8999999761581421)) + $3);
  SAFE_HEAP_STORE_f32_4_4($0 + 736 | 0, 0, $3);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 380 | 0, 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 588 | 0, 0);
  $5 = Math_fround(Math_fround(Math_fround($4 - $5) * Math_fround(.8999999761581421)) + $5);
  SAFE_HEAP_STORE_f32_4_4($0 + 732 | 0, 0, $5);
  $6 = $1;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 628 | 0, 0);
  $1 = Math_fround(Math_fround(Math_fround($6 - $1) * Math_fround(.6000000238418579)) + $1);
  SAFE_HEAP_STORE_f32_4_4($0 + 772 | 0, 0, $1);
  $6 = $2;
  $2 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
  $2 = Math_fround(Math_fround(Math_fround($6 - $2) * Math_fround(.6000000238418579)) + $2);
  SAFE_HEAP_STORE_f32_4_4($0 + 768 | 0, 0, $2);
  $6 = $4;
  $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 620 | 0, 0);
  $4 = Math_fround(Math_fround(Math_fround($6 - $4) * Math_fround(.6000000238418579)) + $4);
  SAFE_HEAP_STORE_f32_4_4($0 + 764 | 0, 0, $4);
  SAFE_HEAP_STORE_i64_8_4($0 + 808 | 0, 0, 1053273620, 1053273620);
  SAFE_HEAP_STORE_i64_8_4($0 + 816 | 0, 0, 1053273620, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 824 | 0, 0, 1065353216, 1054615798);
  SAFE_HEAP_STORE_i64_8_4($0 + 832 | 0, 0, 1051931443, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 840 | 0, 0, 1063675494, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 848 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 856 | 0, 0, 1065353216, 1055286886);
  SAFE_HEAP_STORE_i64_8_4($0 + 864 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 872 | 0, 0, 1061662228, 1063172178);
  SAFE_HEAP_STORE_i64_8_4($0 + 880 | 0, 0, 1065017672, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 888 | 0, 0, 1058139013, 1058139013);
  SAFE_HEAP_STORE_i64_8_4($0 + 896 | 0, 0, 1059313418, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 904 | 0, 0, 1059984507, 1059984507);
  SAFE_HEAP_STORE_i64_8_4($0 + 912 | 0, 0, 1060991140, 1065353216);
  $6 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 776 | 0, 0, Math_fround(Math_fround(Math_fround($6 + Math_fround(-.7639999985694885)) * Math_fround(.800000011920929)) + Math_fround(.7639999985694885)));
  $15 = SAFE_HEAP_LOAD_f32_4_4($0 + 364 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 780 | 0, 0, Math_fround(Math_fround(Math_fround($15 - $5) * Math_fround(.800000011920929)) + $5));
  $5 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 784 | 0, 0, Math_fround(Math_fround(Math_fround($5 - $3) * Math_fround(.800000011920929)) + $3));
  $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 372 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 788 | 0, 0, Math_fround(Math_fround(Math_fround($3 - $7) * Math_fround(.800000011920929)) + $7));
  SAFE_HEAP_STORE_f32_4_4($0 + 792 | 0, 0, Math_fround(Math_fround(Math_fround($6 + Math_fround(-.5960000157356262)) * Math_fround(.4000000059604645)) + Math_fround(.5960000157356262)));
  SAFE_HEAP_STORE_f32_4_4($0 + 796 | 0, 0, Math_fround(Math_fround(Math_fround($15 - $4) * Math_fround(.4000000059604645)) + $4));
  SAFE_HEAP_STORE_f32_4_4($0 + 800 | 0, 0, Math_fround(Math_fround(Math_fround($5 - $2) * Math_fround(.4000000059604645)) + $2));
  SAFE_HEAP_STORE_f32_4_4($0 + 804 | 0, 0, Math_fround(Math_fround(Math_fround($3 - $1) * Math_fround(.4000000059604645)) + $1));
  SAFE_HEAP_STORE_i64_8_4($0 + 928 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 920 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 976 | 0, 0, 1065017672, 1064514355);
  SAFE_HEAP_STORE_i64_8_4($0 + 968 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 960 | 0, 0, 1065017672, 1051931443);
  SAFE_HEAP_STORE_i64_8_4($0 + 952 | 0, 0, 1048911544, 1058474557);
  SAFE_HEAP_STORE_i64_8_4($0 + 944 | 0, 0, 1050253722, 1035489772);
  SAFE_HEAP_STORE_i64_8_4($0 + 936 | 0, 0, 1050253722, 1050253722);
  SAFE_HEAP_STORE_i64_8_4($0 + 1e3 | 0, 0, 1060320051, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 1008 | 0, 0, 1060320051, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 1016 | 0, 0, 1045220557, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 1024 | 0, 0, 1045220557, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 1032 | 0, 0, 1045220557, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 1040 | 0, 0, 1045220557, 1051931443);
  SAFE_HEAP_STORE_i64_8_4($0 + 992 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 984 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function embind_init_ImGui_28_29__$_18____invoke_28ImGuiStyle__29($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = Math_fround(0), $3 = Math_fround(0), $4 = Math_fround(0), $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = Math_fround(0);
  if (!$0) {
   $0 = ImGui__GetStyle_28_29()
  }
  SAFE_HEAP_STORE_i64_8_4($0, 200, 1063675494, 1063675494);
  SAFE_HEAP_STORE_i64_8_4($0 + 248 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 240 | 0, 0, 0, 1062836634);
  SAFE_HEAP_STORE_i64_8_4($0 + 232 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 224 | 0, 0, 1058642330, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 216 | 0, 0, 1058642330, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 208 | 0, 0, 1063675494, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 256 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 288 | 0, 0, 1056964608, 1056964608);
  SAFE_HEAP_STORE_i64_8_4($0 + 280 | 0, 0, 1056964608, 1056964608);
  SAFE_HEAP_STORE_i64_8_4($0 + 272 | 0, 0, 1041194025, 1064011039);
  SAFE_HEAP_STORE_i64_8_4($0 + 264 | 0, 0, 1038174126, 1038174126);
  SAFE_HEAP_STORE_i64_8_4($0 + 296 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 304 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 312 | 0, 0, 1054615798, 1054615798);
  SAFE_HEAP_STORE_i64_8_4($0 + 320 | 0, 0, 1054615798, 1053273620);
  SAFE_HEAP_STORE_i64_8_4($0 + 328 | 0, 0, 1055957975, 1055957975);
  SAFE_HEAP_STORE_i64_8_4($0 + 336 | 0, 0, 1060152279, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 344 | 0, 0, 1054280253, 1053944709);
  SAFE_HEAP_STORE_i64_8_4($0 + 352 | 0, 0, 1059313418, 1060152279);
  $10 = $0 + 360 | 0;
  SAFE_HEAP_STORE_i64_8_4($10, 0, 1049247089, 1049247089);
  $11 = $0 + 368 | 0;
  SAFE_HEAP_STORE_i64_8_4($11, 0, 1057635697, 1062501089);
  SAFE_HEAP_STORE_i64_8_4($0 + 376 | 0, 0, 1050924810, 1050924810);
  $12 = $0 + 384 | 0;
  SAFE_HEAP_STORE_i64_8_4($12, 0, 1059145646, 1063172178);
  SAFE_HEAP_STORE_i64_8_4($0 + 392 | 0, 0, 1053609165, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 400 | 0, 0, 1061997773, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 408 | 0, 0, 1053609165, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 416 | 0, 0, 1057803469, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 424 | 0, 0, 1045220557, 1048576e3);
  SAFE_HEAP_STORE_i64_8_4($0 + 432 | 0, 0, 1050253722, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 440 | 0, 0, 1053609165, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 448 | 0, 0, 1061997773, 1050253722);
  SAFE_HEAP_STORE_i64_8_4($0 + 456 | 0, 0, 1053609165, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 464 | 0, 0, 1061997773, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 472 | 0, 0, 1053944709, 1053273620);
  SAFE_HEAP_STORE_i64_8_4($0 + 480 | 0, 0, 1061997773, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 488 | 0, 0, 1063675494, 1063675494);
  SAFE_HEAP_STORE_i64_8_4($0 + 496 | 0, 0, 1063675494, 1056964608);
  SAFE_HEAP_STORE_i64_8_4($0 + 504 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 512 | 0, 0, 1065353216, 1050253722);
  SAFE_HEAP_STORE_i64_8_4($0 + 520 | 0, 0, 1053944709, 1053273620);
  SAFE_HEAP_STORE_i64_8_4($0 + 528 | 0, 0, 1061997773, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 536 | 0, 0, 1051931443, 1053609165);
  SAFE_HEAP_STORE_i64_8_4($0 + 544 | 0, 0, 1058810102, 1058977874);
  SAFE_HEAP_STORE_i64_8_4($0 + 552 | 0, 0, 1053609165, 1056293519);
  SAFE_HEAP_STORE_i64_8_4($0 + 560 | 0, 0, 1060487823, 1061830001);
  SAFE_HEAP_STORE_i64_8_4($0 + 568 | 0, 0, 1055622431, 1057635697);
  SAFE_HEAP_STORE_i64_8_4($0 + 576 | 0, 0, 1061997773, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 584 | 0, 0, 1053609165, 1053609165);
  $13 = $0 + 592 | 0;
  SAFE_HEAP_STORE_i64_8_4($13, 0, 1063675494, 1055286886);
  $8 = $0 + 600 | 0;
  SAFE_HEAP_STORE_i64_8_4($8, 0, 1055286886, 1055286886);
  $9 = $0 + 608 | 0;
  SAFE_HEAP_STORE_i64_8_4($9, 0, 1063675494, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 616 | 0, 0, 1057467924, 1057467924);
  $14 = $0 + 624 | 0;
  SAFE_HEAP_STORE_i64_8_4($14, 0, 1063172178, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 632 | 0, 0, 1056964608, 1056964608);
  SAFE_HEAP_STORE_i64_8_4($0 + 640 | 0, 0, 1056964608, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 648 | 0, 0, 1058642330, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 656 | 0, 0, 1060320051, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 664 | 0, 0, 1060320051, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 672 | 0, 0, 1063675494, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 680 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 688 | 0, 0, 1065353216, 1036831949);
  SAFE_HEAP_STORE_i64_8_4($0 + 696 | 0, 0, 1061662228, 1062333317);
  SAFE_HEAP_STORE_i64_8_4($0 + 704 | 0, 0, 1065353216, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 712 | 0, 0, 1061662228, 1062333317);
  SAFE_HEAP_STORE_i64_8_4($0 + 720 | 0, 0, 1065353216, 1063675494);
  SAFE_HEAP_STORE_i32_4_4($0 + 728 | 0, 0, 1051461681);
  SAFE_HEAP_STORE_i32_4_4($0 + 760 | 0, 0, 1053743382);
  SAFE_HEAP_STORE_i64_8_4($0 + 752 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 744 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 388 | 0, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 596 | 0, 0);
  $7 = Math_fround(Math_fround(Math_fround($1 - $7) * Math_fround(.800000011920929)) + $7);
  SAFE_HEAP_STORE_f32_4_4($0 + 740 | 0, 0, $7);
  $2 = SAFE_HEAP_LOAD_f32_4_4($12, 0);
  $3 = SAFE_HEAP_LOAD_f32_4_4($13, 0);
  $3 = Math_fround(Math_fround(Math_fround($2 - $3) * Math_fround(.800000011920929)) + $3);
  SAFE_HEAP_STORE_f32_4_4($0 + 736 | 0, 0, $3);
  $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 380 | 0, 0);
  $5 = SAFE_HEAP_LOAD_f32_4_4($0 + 588 | 0, 0);
  $5 = Math_fround(Math_fround(Math_fround($4 - $5) * Math_fround(.800000011920929)) + $5);
  SAFE_HEAP_STORE_f32_4_4($0 + 732 | 0, 0, $5);
  $6 = $1;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0 + 628 | 0, 0);
  $1 = Math_fround(Math_fround(Math_fround($6 - $1) * Math_fround(.6000000238418579)) + $1);
  SAFE_HEAP_STORE_f32_4_4($0 + 772 | 0, 0, $1);
  $6 = $2;
  $2 = SAFE_HEAP_LOAD_f32_4_4($14, 0);
  $2 = Math_fround(Math_fround(Math_fround($6 - $2) * Math_fround(.6000000238418579)) + $2);
  SAFE_HEAP_STORE_f32_4_4($0 + 768 | 0, 0, $2);
  $6 = $4;
  $4 = SAFE_HEAP_LOAD_f32_4_4($0 + 620 | 0, 0);
  $4 = Math_fround(Math_fround(Math_fround($6 - $4) * Math_fround(.6000000238418579)) + $4);
  SAFE_HEAP_STORE_f32_4_4($0 + 764 | 0, 0, $4);
  SAFE_HEAP_STORE_i64_8_4($0 + 808 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 816 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 824 | 0, 0, 1063675494, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 832 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 840 | 0, 0, 1063675494, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 848 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 856 | 0, 0, 1065353216, 1058642330);
  SAFE_HEAP_STORE_i64_8_4($0 + 864 | 0, 0, 0, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 872 | 0, 0, 1049247089, 1049247089);
  SAFE_HEAP_STORE_i64_8_4($0 + 880 | 0, 0, 1052938076, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 888 | 0, 0, 1050589266, 1050589266);
  SAFE_HEAP_STORE_i64_8_4($0 + 896 | 0, 0, 1055286886, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 904 | 0, 0, 1048911544, 1048911544);
  SAFE_HEAP_STORE_i64_8_4($0 + 912 | 0, 0, 1049582633, 1065353216);
  $6 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 776 | 0, 0, Math_fround(Math_fround(Math_fround($6 + Math_fround(-.335999995470047)) * Math_fround(.800000011920929)) + Math_fround(.335999995470047)));
  $15 = SAFE_HEAP_LOAD_f32_4_4($0 + 364 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 780 | 0, 0, Math_fround(Math_fround(Math_fround($15 - $5) * Math_fround(.800000011920929)) + $5));
  $5 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 784 | 0, 0, Math_fround(Math_fround(Math_fround($5 - $3) * Math_fround(.800000011920929)) + $3));
  $3 = SAFE_HEAP_LOAD_f32_4_4($0 + 372 | 0, 0);
  SAFE_HEAP_STORE_f32_4_4($0 + 788 | 0, 0, Math_fround(Math_fround(Math_fround($3 - $7) * Math_fround(.800000011920929)) + $7));
  SAFE_HEAP_STORE_f32_4_4($0 + 792 | 0, 0, Math_fround(Math_fround(Math_fround($6 + Math_fround(-.4039999842643738)) * Math_fround(.4000000059604645)) + Math_fround(.4039999842643738)));
  SAFE_HEAP_STORE_f32_4_4($0 + 796 | 0, 0, Math_fround(Math_fround(Math_fround($15 - $4) * Math_fround(.4000000059604645)) + $4));
  SAFE_HEAP_STORE_f32_4_4($0 + 800 | 0, 0, Math_fround(Math_fround(Math_fround($5 - $2) * Math_fround(.4000000059604645)) + $2));
  SAFE_HEAP_STORE_f32_4_4($0 + 804 | 0, 0, Math_fround(Math_fround(Math_fround($3 - $1) * Math_fround(.4000000059604645)) + $1));
  SAFE_HEAP_STORE_i64_8_4($0 + 928 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 920 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 976 | 0, 0, 0, 1063675494);
  SAFE_HEAP_STORE_i64_8_4($0 + 968 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 960 | 0, 0, 1065353216, 1051931443);
  SAFE_HEAP_STORE_i64_8_4($0 + 952 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0 + 944 | 0, 0, 1065353216, 1032805417);
  SAFE_HEAP_STORE_i64_8_4($0 + 936 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 1e3 | 0, 0, 1065353216, 1065353216);
  SAFE_HEAP_STORE_i64_8_4($0 + 1008 | 0, 0, 1065353216, 1060320051);
  SAFE_HEAP_STORE_i64_8_4($0 + 1016 | 0, 0, 1061997773, 1061997773);
  SAFE_HEAP_STORE_i64_8_4($0 + 1024 | 0, 0, 1061997773, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 1032 | 0, 0, 1045220557, 1045220557);
  SAFE_HEAP_STORE_i64_8_4($0 + 1040 | 0, 0, 1045220557, 1051931443);
  SAFE_HEAP_STORE_i64_8_4($0 + 992 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($9, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_4($0 + 984 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($8, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($5 >>> 0 < 2147483632) {
   label$2 : {
    if ($5 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($4, 15, $5);
     $6 = $4 + 4 | 0;
     break label$2;
    }
    $7 = ($5 | 15) + 1 | 0;
    $6 = operator_20new_28unsigned_20long_29($7);
    SAFE_HEAP_STORE_i32_4_4($4, 12, $7 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
   }
   if ($5) {
    __memcpy($6, $1 + 4 | 0, $5)
   }
   SAFE_HEAP_STORE_i32_1_1($5 + $6 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($4 + 4 | 0, $4, $3) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 4))
   }
   __stack_pointer = $4 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_19____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $0 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($3 + 12 | 0, $1);
  $1 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($4, (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0) != 2 ? $0 + 4 | 0 : 0, $2);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52584);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($3, 24, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
   $5 = $3 + 24 | 0;
   $0 = _emval_take_value(72652, $5 | 0) | 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 24, 0);
   $4 = $2;
   $2 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($4 | 0, $2 | 0, $0 | 0);
   _emval_decref($2 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $3 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val_2c_20bool_2c_20int___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20bool_2c_20int_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i32_4_4($5, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($5, 12, $1);
  $0 = FUNCTION_TABLE[$0 | 0]($5 + 12 | 0, $5 + 8 | 0, $3, $4) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  __stack_pointer = $5 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_20____invoke_28emscripten__val_2c_20emscripten__val_2c_20bool_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $4 = _emval_typeof(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) | 0;
  $6 = _emval_new_cstring(8915) | 0;
  $7 = _emval_strictly_equals($4 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  _emval_decref($4 | 0);
  label$1 : {
   label$2 : {
    if ($7) {
     $8 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 49072, $5 + 12 | 0);
     label$4 : {
      if ($8 < 4294967296.0 & $8 >= 0.0) {
       $6 = ~~$8 >>> 0;
       break label$4;
      }
      $6 = 0;
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
     if ($4 >>> 0 >= 2147483632) {
      break label$1
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
     label$6 : {
      if ($4 >>> 0 <= 10) {
       SAFE_HEAP_STORE_i32_1_1($5, 31, $4);
       $0 = $5 + 20 | 0;
       break label$6;
      }
      $9 = ($4 | 15) + 1 | 0;
      $0 = operator_20new_28unsigned_20long_29($9);
      SAFE_HEAP_STORE_i32_4_4($5, 28, $9 | -2147483648);
      SAFE_HEAP_STORE_i32_4_4($5, 20, $0);
      SAFE_HEAP_STORE_i32_4_4($5, 24, $4);
     }
     if ($4) {
      __memcpy($0, $6 + 4 | 0, $4)
     }
     SAFE_HEAP_STORE_i32_1_1($0 + $4 | 0, 0, 0);
     _emval_run_destructors($7 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
     $4 = SAFE_HEAP_LOAD_i32_1_1($5, 31);
     SAFE_HEAP_STORE_i64_8_4($5, 12, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $5 + 12 | 0);
     $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $1 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
     SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
     $9 = ($4 | 0) < 0 ? $0 : $5 + 20 | 0;
     $0 = $9;
     $10 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($1, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($1 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
     $4 = $10;
     while (1) {
      $1 = $0;
      $0 = $0 + 1 | 0;
      $7 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
      if ($7) {
       label$41 : {
        if (($7 | 0) != 35) {
         break label$41
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
         break label$41
        }
        $4 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) == 35 ? $10 : $4;
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4((($7 ^ $4 & 255) << 2) + 19360 | 0, 0) ^ $4 >>> 8;
      }
      if ($7) {
       continue
      }
      break;
     };
     $0 = $4 ^ -1;
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 7136) | 0) == ($0 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($6, 7140, $0)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 7196) | 0) == ($0 | 0)) {
      SAFE_HEAP_STORE_i32_1_1($6, 7200, 1)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 7112) | 0) == ($0 | 0)) {
      ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, 11, $9)
     }
     $0 = ImGui__BeginChildEx_28char_20const__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20bool_2c_20int_29($9, $0, $11, $2, $3);
     if ((SAFE_HEAP_LOAD_i32_1_1($5, 31) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 20))
     }
     break label$2;
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    $0 = $5 + 20 | 0;
    $8 = +_emval_as($4 | 0, 72736, $0 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 20) | 0);
    SAFE_HEAP_STORE_i64_8_4($5, 20, 0, 0);
    $0 = ImGui__BeginChildEx_28char_20const__2c_20unsigned_20int_2c_20ImVec2_20const__2c_20bool_2c_20int_29(0, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $0), $2, $3);
   }
   __stack_pointer = $5 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_21____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($2, 580));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49796, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28emscripten__val_29_2c_20emscripten___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
  FUNCTION_TABLE[$0 | 0]($2 + 12 | 0, $2 + 8 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 8) | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_22____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 12), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_23____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080), 20), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_float___invoke_28float_20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0 | 0]()));
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20int_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20int_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
  FUNCTION_TABLE[$0 | 0]($4 + 12 | 0, $2, $4 + 8 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_24____invoke_28emscripten__val_2c_20int_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
  $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $3 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
  ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($0, $1, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $3));
  __stack_pointer = $3 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20int___invoke_28void_20_28__29_28emscripten__val_2c_20int_29_2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $2);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_25____invoke_28emscripten__val_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  ImGui__SetNextWindowSize_28ImVec2_20const__2c_20int_29(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $2 + 8 | 0), $1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i32_4_4($5, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($5, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($5, 4, $3);
  SAFE_HEAP_STORE_i32_4_4($5, 0, $4);
  FUNCTION_TABLE[$0 | 0]($5 + 12 | 0, $5 + 8 | 0, $5 + 4 | 0, $5);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_26____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  label$1 : {
   if (($4 | 0) != 2) {
    $5 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
    _emval_incref($4 | 0);
    _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 76) | 0);
    SAFE_HEAP_STORE_i32_4_4($5, 76, SAFE_HEAP_LOAD_i32_4_4($2, 0));
    SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
    $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $3 + 8 | 0);
    SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
    ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $3), 866);
    break label$1;
   }
   SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
   $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $3 + 8 | 0);
   SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
   ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $3), 0);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_27____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 0);
  ImGui__SetNextWindowContentSize_28ImVec2_20const__29(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $1 + 8 | 0));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20bool_2c_20int___invoke_28void_20_28__29_28bool_2c_20int_29_2c_20bool_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  FUNCTION_TABLE[$0 | 0]($1, $2);
 }
 
 function emscripten__internal__Invoker_void_2c_20float___invoke_28void_20_28__29_28float_29_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  FUNCTION_TABLE[$0 | 0]($1);
 }
 
 function embind_init_ImGui_28_29__$_28____invoke_28emscripten__val_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = Math_fround(0);
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  $4 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $6 + 8 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  label$1 : {
   if ($1) {
    if (!(SAFE_HEAP_LOAD_i32_1_1($0, 176) & $1)) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_i64_8_4($0, 180, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($0, 176, SAFE_HEAP_LOAD_i32_4_4($0, 176) & -15);
   $1 = $0 + 16 | 0;
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   $2 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   $5 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
   label$3 : {
    if (Math_fround(Math_abs($5)) < Math_fround(2147483648.0)) {
     $4 = ~~$5;
     break label$3;
    }
    $4 = -2147483648;
   }
   $5 = Math_fround($4 | 0);
   SAFE_HEAP_STORE_f32_4_4($1, 0, $5);
   $7 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   $2 = Math_fround((Math_fround(Math_abs($2)) < Math_fround(2147483648.0) ? ~~$2 : -2147483648) | 0);
   SAFE_HEAP_STORE_f32_4_4($0, 12, $2);
   $2 = Math_fround($2 - $7);
   SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($2 + SAFE_HEAP_LOAD_f32_4_4($0, 208)));
   $1 = $0 + 212 | 0;
   $3 = Math_fround($5 - $3);
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 232 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($2 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 236 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 240 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($2 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 244 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 224 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($2 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $0 = $0 + 228 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($3 + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
  }
  __stack_pointer = $6 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_29____invoke_28emscripten__val_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = 0, $4 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
  $4 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $3 + 8 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  __inlined_func$ImGui__SetWindowSize_28ImVec2_20const__2c_20int_29 : {
   if ($1) {
    if (!(SAFE_HEAP_LOAD_i32_4_4($0, 176) << 16 >> 24 & $1)) {
     break __inlined_func$ImGui__SetWindowSize_28ImVec2_20const__2c_20int_29
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 176, SAFE_HEAP_LOAD_i32_4_4($0, 176) & -3585);
   $2 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   label$3 : {
    if ($2 > Math_fround(0.0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 164, 0);
     SAFE_HEAP_STORE_f32_4_4($0, 28, Math_fround((Math_fround(Math_abs($2)) < Math_fround(2147483648.0) ? ~~$2 : -2147483648) | 0));
     break label$3;
    }
    SAFE_HEAP_STORE_i32_1_1($0, 167, 0);
    SAFE_HEAP_STORE_i32_1_1($0, 164, 2);
   }
   $2 = SAFE_HEAP_LOAD_f32_4_4($4, 4);
   if ($2 > Math_fround(0.0)) {
    SAFE_HEAP_STORE_i32_1_1($0, 165, 0);
    SAFE_HEAP_STORE_f32_4_4($0 + 32 | 0, 0, Math_fround((Math_fround(Math_abs($2)) < Math_fround(2147483648.0) ? ~~$2 : -2147483648) | 0));
    break __inlined_func$ImGui__SetWindowSize_28ImVec2_20const__2c_20int_29;
   }
   SAFE_HEAP_STORE_i32_1_1($0, 167, 0);
   SAFE_HEAP_STORE_i32_1_1($0, 165, 2);
  }
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_30____invoke_28bool_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  label$1 : {
   if ($1) {
    if (!(SAFE_HEAP_LOAD_i32_4_4($2, 176) << 8 >> 24 & $1)) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_i32_1_1($2, 141, $0);
   SAFE_HEAP_STORE_i32_4_4($2, 176, SAFE_HEAP_LOAD_i32_4_4($2, 176) & -917505);
  }
 }
 
 function embind_init_ImGui_28_29__$_31____invoke_28_29() {
  ImGui__FocusWindow_28ImGuiWindow__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080));
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($5 >>> 0 < 2147483632) {
   label$2 : {
    if ($5 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($4, 15, $5);
     $6 = $4 + 4 | 0;
     break label$2;
    }
    $7 = ($5 | 15) + 1 | 0;
    $6 = operator_20new_28unsigned_20long_29($7);
    SAFE_HEAP_STORE_i32_4_4($4, 12, $7 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
   }
   if ($5) {
    __memcpy($6, $1 + 4 | 0, $5)
   }
   SAFE_HEAP_STORE_i32_1_1($5 + $6 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $2);
   FUNCTION_TABLE[$0 | 0]($4 + 4 | 0, $4, $3);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 4))
   }
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_32____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = Math_fround(0);
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($8, 8, 0, 0);
  $10 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 8 | 0);
  $0 = ($5 | 0) < 0 ? $3 : $0;
  $3 = -1;
  while (1) {
   $1 = $0;
   $0 = $0 + 1 | 0;
   $5 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
   if ($5) {
    label$4 : {
     if (($5 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
      break label$4
     }
     $3 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) == 35 ? -1 : $3;
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4((($5 ^ $3 & 255) << 2) + 19360 | 0, 0) ^ $3 >>> 8;
   }
   if ($5) {
    continue
   }
   break;
  };
  $5 = $3 ^ -1;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $11 = SAFE_HEAP_LOAD_i32_4_4($1 + 7064 | 0, 0);
  $0 = $11;
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7056);
  if ($3) {
   $1 = $3;
   while (1) {
    $9 = $1 >>> 1 | 0;
    $12 = ($9 << 3) + $0 | 0;
    $13 = SAFE_HEAP_LOAD_i32_4_4($12, 0) >>> 0 < $5 >>> 0;
    $0 = $13 ? $12 + 8 | 0 : $0;
    $1 = $13 ? $1 + ($9 ^ -1) | 0 : $9;
    if ($1) {
     continue
    }
    break;
   };
  }
  $1 = 0;
  label$9 : {
   if ((($3 << 3) + $11 | 0) == ($0 | 0)) {
    break label$9
   }
   $1 = 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($5 | 0)) {
    break label$9
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  }
  $0 = $1;
  label$11 : {
   if (!$0) {
    break label$11
   }
   if ($2) {
    if (!(SAFE_HEAP_LOAD_i32_1_1($0, 176) & $2)) {
     break label$11
    }
   }
   SAFE_HEAP_STORE_i64_8_4($0, 180, 2139095039, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($0, 176, SAFE_HEAP_LOAD_i32_4_4($0, 176) & -15);
   $1 = $0 + 16 | 0;
   $6 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   $4 = SAFE_HEAP_LOAD_f32_4_4($10, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($10, 4);
   label$13 : {
    if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
     $2 = ~~$7;
     break label$13;
    }
    $2 = -2147483648;
   }
   $7 = Math_fround($2 | 0);
   SAFE_HEAP_STORE_f32_4_4($1, 0, $7);
   $14 = SAFE_HEAP_LOAD_f32_4_4($0, 12);
   $4 = Math_fround((Math_fround(Math_abs($4)) < Math_fround(2147483648.0) ? ~~$4 : -2147483648) | 0);
   SAFE_HEAP_STORE_f32_4_4($0, 12, $4);
   $4 = Math_fround($4 - $14);
   SAFE_HEAP_STORE_f32_4_4($0, 208, Math_fround($4 + SAFE_HEAP_LOAD_f32_4_4($0, 208)));
   $1 = $0 + 212 | 0;
   $6 = Math_fround($7 - $6);
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 232 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($4 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 236 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 240 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($4 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 244 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $1 = $0 + 224 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($4 + SAFE_HEAP_LOAD_f32_4_4($1, 0)));
   $0 = $0 + 228 | 0;
   SAFE_HEAP_STORE_f32_4_4($0, 0, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($0, 0)));
  }
  __stack_pointer = $8 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_33____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($6, 8, 0, 0);
  $8 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 8 | 0);
  $0 = ($3 | 0) < 0 ? $4 : $0;
  $1 = -1;
  while (1) {
   $4 = $0;
   $0 = $0 + 1 | 0;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   if ($3) {
    label$4 : {
     if (($3 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
      break label$4
     }
     $1 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) == 35 ? -1 : $1;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4((($3 ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $3 = $1 ^ -1;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $9 = SAFE_HEAP_LOAD_i32_4_4($1 + 7064 | 0, 0);
  $0 = $9;
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7056);
  if ($4) {
   $1 = $4;
   while (1) {
    $7 = $1 >>> 1 | 0;
    $10 = ($7 << 3) + $0 | 0;
    $11 = SAFE_HEAP_LOAD_i32_4_4($10, 0) >>> 0 < $3 >>> 0;
    $0 = $11 ? $10 + 8 | 0 : $0;
    $1 = $11 ? $1 + ($7 ^ -1) | 0 : $7;
    if ($1) {
     continue
    }
    break;
   };
  }
  $1 = 0;
  label$9 : {
   if ((($4 << 3) + $9 | 0) == ($0 | 0)) {
    break label$9
   }
   $1 = 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($3 | 0)) {
    break label$9
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  }
  $0 = $1;
  __inlined_func$ImGui__SetWindowSize_28char_20const__2c_20ImVec2_20const__2c_20int_29 : {
   if (!$0) {
    break __inlined_func$ImGui__SetWindowSize_28char_20const__2c_20ImVec2_20const__2c_20int_29
   }
   if ($2) {
    if (!(SAFE_HEAP_LOAD_i32_4_4($0, 176) << 16 >> 24 & $2)) {
     break __inlined_func$ImGui__SetWindowSize_28char_20const__2c_20ImVec2_20const__2c_20int_29
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 176, SAFE_HEAP_LOAD_i32_4_4($0, 176) & -3585);
   $5 = SAFE_HEAP_LOAD_f32_4_4($8, 0);
   label$13 : {
    if ($5 > Math_fround(0.0)) {
     SAFE_HEAP_STORE_i32_1_1($0, 164, 0);
     SAFE_HEAP_STORE_f32_4_4($0, 28, Math_fround((Math_fround(Math_abs($5)) < Math_fround(2147483648.0) ? ~~$5 : -2147483648) | 0));
     break label$13;
    }
    SAFE_HEAP_STORE_i32_1_1($0, 167, 0);
    SAFE_HEAP_STORE_i32_1_1($0, 164, 2);
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($8, 4);
   if ($5 > Math_fround(0.0)) {
    SAFE_HEAP_STORE_i32_1_1($0, 165, 0);
    SAFE_HEAP_STORE_f32_4_4($0 + 32 | 0, 0, Math_fround((Math_fround(Math_abs($5)) < Math_fround(2147483648.0) ? ~~$5 : -2147483648) | 0));
    break __inlined_func$ImGui__SetWindowSize_28char_20const__2c_20ImVec2_20const__2c_20int_29;
   }
   SAFE_HEAP_STORE_i32_1_1($0, 167, 0);
   SAFE_HEAP_STORE_i32_1_1($0, 165, 2);
  }
  __stack_pointer = $6 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($5 >>> 0 < 2147483632) {
   label$2 : {
    if ($5 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($4, 15, $5);
     $6 = $4 + 4 | 0;
     break label$2;
    }
    $7 = ($5 | 15) + 1 | 0;
    $6 = operator_20new_28unsigned_20long_29($7);
    SAFE_HEAP_STORE_i32_4_4($4, 12, $7 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
   }
   if ($5) {
    __memcpy($6, $1 + 4 | 0, $5)
   }
   SAFE_HEAP_STORE_i32_1_1($5 + $6 | 0, 0, 0);
   FUNCTION_TABLE[$0 | 0]($4 + 4 | 0, $2, $3);
   if ((SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 4))
   }
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_34____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $9 = $1;
  $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = -1;
  while (1) {
   $4 = $0;
   $0 = $0 + 1 | 0;
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   if ($3) {
    label$4 : {
     if (($3 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
      break label$4
     }
     $1 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) == 35 ? -1 : $1;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4((($3 ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $3 = $1 ^ -1;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($1 + 7064 | 0, 0);
  $0 = $6;
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 7056);
  if ($4) {
   $1 = $4;
   while (1) {
    $5 = $1 >>> 1 | 0;
    $7 = ($5 << 3) + $0 | 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($7, 0) >>> 0 < $3 >>> 0;
    $0 = $8 ? $7 + 8 | 0 : $0;
    $1 = $8 ? $1 + ($5 ^ -1) | 0 : $5;
    if ($1) {
     continue
    }
    break;
   };
  }
  $1 = 0;
  label$9 : {
   if (($0 | 0) == (($4 << 3) + $6 | 0)) {
    break label$9
   }
   $1 = 0;
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($3 | 0)) {
    break label$9
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  }
  $0 = $1;
  label$11 : {
   if (!$0) {
    break label$11
   }
   if ($2) {
    if (!(SAFE_HEAP_LOAD_i32_4_4($0, 176) << 8 >> 24 & $2)) {
     break label$11
    }
   }
   SAFE_HEAP_STORE_i32_1_1($0, 141, $9);
   SAFE_HEAP_STORE_i32_4_4($0, 176, SAFE_HEAP_LOAD_i32_4_4($0, 176) & -917505);
  }
 }
 
 function embind_init_ImGui_28_29__$_35____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  __inlined_func$ImGui__SetWindowFocus_28char_20const__29 : {
   $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
   if ($0) {
    $1 = -1;
    while (1) {
     $3 = $0;
     $0 = $0 + 1 | 0;
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
     if ($2) {
      label$6 : {
       if (($2 | 0) != 35) {
        break label$6
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
        break label$6
       }
       $1 = (SAFE_HEAP_LOAD_i32_1_U_1($3, 2) | 0) == 35 ? -1 : $1;
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4((($2 ^ $1 & 255) << 2) + 19360 | 0, 0) ^ $1 >>> 8;
     }
     if ($2) {
      continue
     }
     break;
    };
    $2 = $1 ^ -1;
    $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $5 = SAFE_HEAP_LOAD_i32_4_4($1 + 7064 | 0, 0);
    $0 = $5;
    $3 = SAFE_HEAP_LOAD_i32_4_4($1, 7056);
    if ($3) {
     $1 = $3;
     while (1) {
      $4 = $1 >>> 1 | 0;
      $6 = ($4 << 3) + $0 | 0;
      $7 = SAFE_HEAP_LOAD_i32_4_4($6, 0) >>> 0 < $2 >>> 0;
      $0 = $7 ? $6 + 8 | 0 : $0;
      $1 = $7 ? $1 + ($4 ^ -1) | 0 : $4;
      if ($1) {
       continue
      }
      break;
     };
    }
    $1 = 0;
    label$11 : {
     if (($0 | 0) == (($3 << 3) + $5 | 0)) {
      break label$11
     }
     $1 = 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($2 | 0)) {
      break label$11
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    }
    $0 = $1;
    if (!$0) {
     break __inlined_func$ImGui__SetWindowFocus_28char_20const__29
    }
    ImGui__FocusWindow_28ImGuiWindow__29($0);
    break __inlined_func$ImGui__SetWindowFocus_28char_20const__29;
   }
   ImGui__FocusWindow_28ImGuiWindow__29(0);
  }
 }
 
 function embind_init_ImGui_28_29__$_36____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  ImGui__GetContentRegionAvail_28_29($3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_37____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0), $7 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 520 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
  $4 = $2 + 8 | 0;
  SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 524 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0)));
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($7 - $6));
  label$1 : {
   if (!SAFE_HEAP_LOAD_i32_4_4($3 + 368 | 0, 0)) {
    if (!SAFE_HEAP_LOAD_i32_4_4($5, 8036)) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 472 | 0, 0) - $6));
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $4, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_38____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 516 | 0, 0);
  $4 = $2 + 8 | 0;
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 512) - SAFE_HEAP_LOAD_f32_4_4($3, 12)));
  SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround($6 - $5));
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $4, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_39____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 520 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
  $4 = $2 + 8 | 0;
  SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 524 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0)));
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($5 - $6));
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $4, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20float_2c_20float___invoke_28void_20_28__29_28float_2c_20float_29_2c_20float_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  FUNCTION_TABLE[$0 | 0]($1, $2);
 }
 
 function embind_init_ImGui_28_29__$_40____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if (($0 | 0) == 2) {
   $0 = 0
  } else {
   $2 = +_emval_as($0 | 0, 50504, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
   if ($2 < 4294967296.0 & $2 >= 0.0) {
    $0 = ~~$2 >>> 0
   } else {
    $0 = 0
   }
  }
  ImGui__PushFont_28ImFont__29($0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20int_2c_20emscripten__val___invoke_28void_20_28__29_28int_2c_20emscripten__val_29_2c_20int_2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $3 + 12 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_41____invoke_28int_2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = _emval_typeof(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) | 0;
  $5 = _emval_new_cstring(6425) | 0;
  $6 = _emval_strictly_equals($4 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  _emval_decref($4 | 0);
  label$1 : {
   if ($6) {
    $3 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 72736, $2 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
    if ($3 < 4294967296.0 & $3 >= 0.0) {
     $1 = ~~$3 >>> 0
    } else {
     $1 = 0
    }
    ImGui__PushStyleColor_28int_2c_20unsigned_20int_29($0, $1);
    break label$1;
   }
   SAFE_HEAP_STORE_i64_8_8($2 + 8 | 0, 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_8($2, 0, 0, 0);
   ImGui__PushStyleColor_28int_2c_20ImVec4_20const__29($0, import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($1, $2));
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_42____invoke_28int_2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $5 = _emval_typeof(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) | 0;
  $6 = _emval_new_cstring(6425) | 0;
  $7 = _emval_strictly_equals($5 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  _emval_decref($5 | 0);
  label$1 : {
   if ($7) {
    $4 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 72808, $2 + 12 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
    $3 = Math_fround(3402823466385288598117041.0e14);
    label$3 : {
     if ($4 >= 3402823466385288598117041.0e14) {
      break label$3
     }
     $3 = Math_fround(-3402823466385288598117041.0e14);
     if ($4 <= -3402823466385288598117041.0e14) {
      break label$3
     }
     $3 = Math_fround($4);
    }
    ImGui__PushStyleVar_28int_2c_20float_29($0, $3);
    break label$1;
   }
   SAFE_HEAP_STORE_i64_8_4($2, 4, 0, 0);
   ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $2 + 4 | 0));
  }
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_43____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 6464));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(50504, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_44____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  ImGui__GetFontTexUvWhitePixel_28_29($3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_unsigned_20int_2c_20int_2c_20emscripten__val___invoke_28unsigned_20int_20_28__29_28int_2c_20emscripten__val_29_2c_20int_2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  $0 = FUNCTION_TABLE[$0 | 0]($1, $3 + 12 | 0) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_45____invoke_28int_2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0, 72808, $3 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround($4);
  }
  $0 = ImGui__GetColorU32_28int_2c_20float_29($0, $2);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_unsigned_20int_2c_20emscripten__val___invoke_28unsigned_20int_20_28__29_28emscripten__val_29_2c_20emscripten___EM_VAL__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
  $0 = FUNCTION_TABLE[$0 | 0]($2 + 12 | 0) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_46____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i64_8_8($1 + 8 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 0, 0, 0);
  $0 = ImGui__GetColorU32_28ImVec4_20const__29(import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($0, $1));
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_47____invoke_28unsigned_20int_29($0) {
  $0 = $0 | 0;
  return ImGui__GetColorU32_28unsigned_20int_29($0) | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  FUNCTION_TABLE[$0 | 0]($2 + 12 | 0, $1);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_48____invoke_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, ImGui__GetStyleColorVec4_28int_29($1));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(48816, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_49____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 0);
  ImGui__Dummy_28ImVec2_20const__29(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $1 + 8 | 0));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_50____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 92 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0);
  $7 = SAFE_HEAP_LOAD_f32_4_4($3 + 212 | 0, 0);
  $4 = $2 + 8 | 0;
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($3, 208) - SAFE_HEAP_LOAD_f32_4_4($3, 12)) + SAFE_HEAP_LOAD_f32_4_4($3, 88)));
  SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround($5 + Math_fround($7 - $6)));
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $4, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_51____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = 0, $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0);
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_4($4, 8, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $4 + 8 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  $3 = SAFE_HEAP_LOAD_f32_4_4($2, 4);
  $1 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 12) - SAFE_HEAP_LOAD_f32_4_4($0, 88)) + SAFE_HEAP_LOAD_f32_4_4($2, 0));
  SAFE_HEAP_STORE_f32_4_4($0, 208, $1);
  $3 = Math_fround($3 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($0 + 16 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0)));
  SAFE_HEAP_STORE_f32_4_4($0 + 212 | 0, 0, $3);
  $2 = $0 + 232 | 0;
  $5 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
  SAFE_HEAP_STORE_f32_4_4($2, 0, $1 <= $5 ? $5 : $1);
  $0 = $0 + 236 | 0;
  $1 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
  SAFE_HEAP_STORE_f32_4_4($0, 0, $1 >= $3 ? $1 : $3);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_52____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 224 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3, 12);
  $4 = $2 + 8 | 0;
  SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 228 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3 + 16 | 0, 0)));
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($5 - $6));
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $4, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_53____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  ImGui__GetCursorScreenPos_28_29($3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_54____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i64_8_4($1, 8, 0, 0);
  ImGui__SetCursorScreenPos_28ImVec2_20const__29(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $1 + 8 | 0));
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_55____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = _emval_typeof(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) | 0;
  $3 = _emval_new_cstring(6425) | 0;
  $5 = _emval_strictly_equals($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  _emval_decref($2 | 0);
  label$1 : {
   label$2 : {
    if ($5) {
     $4 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 72724, $1 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
     ImGui__PushID_28int_29(Math_abs($4) < 2147483648.0 ? ~~$4 : -2147483648);
     break label$2;
    }
    $4 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 49072, $1 + 12 | 0);
    label$6 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $3 = ~~$4 >>> 0;
      break label$6;
     }
     $3 = 0;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    if ($2 >>> 0 >= 2147483632) {
     break label$1
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
    label$8 : {
     if ($2 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($1, 11, $2);
      $0 = $1;
      break label$8;
     }
     $6 = ($2 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($6);
     SAFE_HEAP_STORE_i32_4_4($1, 8, $6 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
    }
    if ($2) {
     __memcpy($0, $3 + 4 | 0, $2)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
    _emval_run_destructors($5 | 0);
    ImGui__PushID_28char_20const__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
    if ((SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) >= 0) {
     break label$2
    }
    dlfree(SAFE_HEAP_LOAD_i32_4_4($1, 0));
   }
   __stack_pointer = $1 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_56____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = _emval_typeof(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) | 0;
  $3 = _emval_new_cstring(6425) | 0;
  $4 = _emval_strictly_equals($1 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  _emval_decref($1 | 0);
  label$1 : {
   label$2 : {
    if ($4) {
     $5 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 72724, $2 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
     $4 = __stack_pointer - 16 | 0;
     __stack_pointer = $4;
     $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
     $8 = Math_abs($5) < 2147483648.0 ? ~~$5 : -2147483648;
     SAFE_HEAP_STORE_i32_4_4($4, 12, $8);
     $7 = 4;
     $0 = $4 + 12 | 0;
     $6 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($1, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($1 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
     while (1) {
      $1 = $0;
      $0 = $1 + 1 | 0;
      $1 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) ^ $6 & 255) << 2) + 19360 | 0, 0) ^ $6 >>> 8;
      $6 = $1;
      $7 = $7 - 1 | 0;
      if ($7) {
       continue
      }
      break;
     };
     $0 = $1 ^ -1;
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 7136) | 0) == ($0 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($3, 7140, $0)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 7196) | 0) == ($0 | 0)) {
      SAFE_HEAP_STORE_i32_1_1($3, 7200, 1)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($3, 7112) | 0) == ($0 | 0)) {
      ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($0, 12, $8)
     }
     __stack_pointer = $4 + 16 | 0;
     break label$2;
    }
    $5 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 49072, $2 + 12 | 0);
    label$6 : {
     if ($5 < 4294967296.0 & $5 >= 0.0) {
      $3 = ~~$5 >>> 0;
      break label$6;
     }
     $3 = 0;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    if ($1 >>> 0 >= 2147483632) {
     break label$1
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
    label$8 : {
     if ($1 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($2, 11, $1);
      $0 = $2;
      break label$8;
     }
     $6 = ($1 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($6);
     SAFE_HEAP_STORE_i32_4_4($2, 8, $6 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($2, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
    }
    if ($1) {
     __memcpy($0, $3 + 4 | 0, $1)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
    _emval_run_destructors($4 | 0);
    $0 = ImGui__GetID_28char_20const__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 0), wasm2js_i32$1 = $2, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
    if ((SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 0))
    }
   }
   __stack_pointer = $2 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_57____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  ImGui__TextUnformatted_28char_20const__2c_20char_20const__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 }
 
 function embind_init_ImGui_28_29__$_58____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  ImGui__Text_28char_20const__2c_20____29(5950, $1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28__29_28emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten___EM_VAL__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  if ($4 >>> 0 < 2147483632) {
   label$2 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($3, 11, $4);
     $1 = $3;
     break label$2;
    }
    $5 = ($4 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($5);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $5 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $4);
   }
   if ($4) {
    __memcpy($1, $2 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($1 + $4 | 0, 0, 0);
   FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $3);
   if ((SAFE_HEAP_LOAD_i32_1_1($3, 11) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 0))
   }
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
   __stack_pointer = $3 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_59____invoke_28emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i64_8_8($2 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($2, 16, 0, 0);
  $0 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($0, $2 + 16 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  ImGui__TextColored_28ImVec4_20const__2c_20char_20const__2c_20____29($0, 5950, $2);
  __stack_pointer = $2 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_60____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  ImGui__TextDisabled_28char_20const__2c_20____29(5950, $1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_61____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = Math_fround(0), $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  $3 = SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 388 | 0, 0);
  if ($3 < Math_fround(0.0)) {
   ImGui__PushTextWrapPos_28float_29(Math_fround(0.0))
  }
  label$2 : {
   label$3 : {
    if ((SAFE_HEAP_LOAD_i32_1_U_1(5950, 0) | 0) != 37) {
     break label$3
    }
    if ((SAFE_HEAP_LOAD_i32_1_U_1(5950, 1) | 0) != 115) {
     break label$3
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1(5950, 2)) {
     break label$3
    }
    ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29(SAFE_HEAP_LOAD_i32_4_4($1, 0), 0, 1);
    break label$2;
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
   SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
   if (SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
    break label$2
   }
   $2 = $2 + 12800 | 0;
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($2, ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($2, 5950, $1) + $2 | 0, 1);
  }
  if ($3 < Math_fround(0.0)) {
   ImGui__PopTextWrapPos_28_29()
  }
  __stack_pointer = $0 + 16 | 0;
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($4 >>> 0 < 2147483632) {
    label$3 : {
     if ($4 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($3, 31, $4);
      $5 = $3 + 20 | 0;
      break label$3;
     }
     $6 = ($4 | 15) + 1 | 0;
     $5 = operator_20new_28unsigned_20long_29($6);
     SAFE_HEAP_STORE_i32_4_4($3, 28, $6 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($3, 20, $5);
     SAFE_HEAP_STORE_i32_4_4($3, 24, $4);
    }
    if ($4) {
     __memcpy($5, $1 + 4 | 0, $4)
    }
    SAFE_HEAP_STORE_i32_1_1($4 + $5 | 0, 0, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    if ($4 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($4 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($3, 19, $4);
      $1 = $3 + 8 | 0;
      break label$6;
     }
     $5 = ($4 | 15) + 1 | 0;
     $1 = operator_20new_28unsigned_20long_29($5);
     SAFE_HEAP_STORE_i32_4_4($3, 16, $5 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
     SAFE_HEAP_STORE_i32_4_4($3, 12, $4);
    }
    if ($4) {
     __memcpy($1, $2 + 4 | 0, $4)
    }
    SAFE_HEAP_STORE_i32_1_1($1 + $4 | 0, 0, 0);
    FUNCTION_TABLE[$0 | 0]($3 + 20 | 0, $3 + 8 | 0);
    if ((SAFE_HEAP_LOAD_i32_1_1($3, 19) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 8))
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($3, 31) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 20))
    }
    __stack_pointer = $3 + 32 | 0;
    return;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_62____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0), $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = 0, $13 = 0, $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  $13 = ($3 | 0) < 0 ? $2 : $0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
  $0 = __stack_pointer - 80 | 0;
  __stack_pointer = $0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
    break label$1
   }
   $14 = ImGui__CalcItemWidth_28_29();
   $3 = $1 + 12800 | 0;
   $15 = $3 + ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($3, 5950, $4) | 0;
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($0 + 72 | 0, $3, $15, 0, Math_fround(-1.0));
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($0 - -64 | 0, $13, 0, 1, Math_fround(-1.0));
   $9 = SAFE_HEAP_LOAD_i32_4_4($2, 208);
   $10 = SAFE_HEAP_LOAD_f32_4_4($1 + 5480 | 0, 0);
   $5 = Math_fround($10 + $10);
   $11 = SAFE_HEAP_LOAD_f32_4_4($0, 76);
   $2 = SAFE_HEAP_LOAD_i32_4_4($2 + 212 | 0, 0);
   $16 = (wasm2js_scratch_store_i32(2, $2), wasm2js_scratch_load_f32());
   SAFE_HEAP_STORE_f32_4_4($0 + 60 | 0, 0, Math_fround(Math_fround($5 + $11) + $16));
   $17 = (wasm2js_scratch_store_i32(2, $9), wasm2js_scratch_load_f32());
   SAFE_HEAP_STORE_f32_4_4($0, 56, Math_fround($14 + $17));
   SAFE_HEAP_STORE_i32_4_4($0, 52, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 48, $9);
   $7 = SAFE_HEAP_LOAD_f32_4_4($0, 64);
   if ($7 > Math_fround(0.0)) {
    $6 = Math_fround($7 + SAFE_HEAP_LOAD_f32_4_4($1 + 5500 | 0, 0))
   }
   $12 = $0 + 32 | 0;
   $7 = $5;
   $5 = SAFE_HEAP_LOAD_f32_4_4($0, 68);
   SAFE_HEAP_STORE_f32_4_4($12 + 12 | 0, 0, Math_fround(Math_fround($7 + ($5 <= $11 ? $11 : $5)) + $16));
   SAFE_HEAP_STORE_i32_4_4($0, 36, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 32, $9);
   SAFE_HEAP_STORE_f32_4_4($0, 40, Math_fround(Math_fround($14 + $6) + $17));
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($12, $10);
   if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($12, 0, 0, 0)) {
    break label$1
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 5480 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 24, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 48) + SAFE_HEAP_LOAD_f32_4_4($1, 5476)));
   SAFE_HEAP_STORE_f32_4_4($0, 28, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($0, 52)));
   SAFE_HEAP_STORE_i64_8_4($0, 16, 0, 0);
   ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($0 + 24 | 0, $0 + 56 | 0, $3, $15, $0 + 72 | 0, $0 + 16 | 0, 0);
   if (!(SAFE_HEAP_LOAD_f32_4_4($0, 64) > Math_fround(0.0))) {
    break label$1
   }
   $6 = SAFE_HEAP_LOAD_f32_4_4($1 + 5500 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($0, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 52) + SAFE_HEAP_LOAD_f32_4_4($1, 5480)));
   SAFE_HEAP_STORE_f32_4_4($0, 8, Math_fround($6 + SAFE_HEAP_LOAD_f32_4_4($0, 56)));
   SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 8), i64toi32_i32$HIGH_BITS);
   ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($0, $13, 0, 1);
  }
  __stack_pointer = $0 + 80 | 0;
  __stack_pointer = $8 + 16 | 0;
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_63____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  ImGui__BulletText_28char_20const__2c_20____29(5950, $1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($4 >>> 0 < 2147483632) {
   label$2 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($3, 15, $4);
     $5 = $3 + 4 | 0;
     break label$2;
    }
    $6 = ($4 | 15) + 1 | 0;
    $5 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $5);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
   }
   if ($4) {
    __memcpy($5, $1 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($4 + $5 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($3 + 4 | 0, $3) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($3, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 4))
   }
   __stack_pointer = $3 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_64____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $4 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  $0 = ImGui__Button_28char_20const__2c_20ImVec2_20const__29(($4 | 0) < 0 ? $3 : $0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $2 + 8 | 0));
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($2, 15, $3);
     $4 = $2 + 4 | 0;
     break label$2;
    }
    $5 = ($3 | 15) + 1 | 0;
    $4 = operator_20new_28unsigned_20long_29($5);
    SAFE_HEAP_STORE_i32_4_4($2, 12, $5 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($2, 4, $4);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   }
   if ($3) {
    __memcpy($4, $1 + 4 | 0, $3)
   }
   SAFE_HEAP_STORE_i32_1_1($3 + $4 | 0, 0, 0);
   $0 = FUNCTION_TABLE[$0 | 0]($2 + 4 | 0) | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($2, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 4))
   }
   __stack_pointer = $2 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_65____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return ImGui__SmallButton_28char_20const__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) | 0;
 }
 
 function embind_init_ImGui_28_29__$_66____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
  $0 = ImGui__InvisibleButton_28char_20const__2c_20ImVec2_20const__2c_20int_29(($5 | 0) < 0 ? $4 : $0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $3 + 8 | 0), $2);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($4 >>> 0 < 2147483632) {
   label$2 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($3, 15, $4);
     $5 = $3 + 4 | 0;
     break label$2;
    }
    $6 = ($4 | 15) + 1 | 0;
    $5 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $5);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
   }
   if ($4) {
    __memcpy($5, $1 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($4 + $5 | 0, 0, 0);
   $0 = FUNCTION_TABLE[$0 | 0]($3 + 4 | 0, $2) | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($3, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 4))
   }
   __stack_pointer = $3 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_67____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = Math_fround(0), $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $2 = ImGui__GetFrameHeight_28_29();
  SAFE_HEAP_STORE_f32_4_4($0, 12, $2);
  SAFE_HEAP_STORE_f32_4_4($0, 8, $2);
  SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 8), i64toi32_i32$HIGH_BITS);
  $1 = ImGui__ArrowButtonEx_28char_20const__2c_20int_2c_20ImVec2_2c_20int_29($3, $1, $0, 0);
  __stack_pointer = $0 + 16 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  SAFE_HEAP_STORE_i32_4_4($7, 24, $2);
  SAFE_HEAP_STORE_i32_4_4($7, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
  SAFE_HEAP_STORE_i32_4_4($7, 16, $4);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $5);
  SAFE_HEAP_STORE_i32_4_4($7, 8, $6);
  FUNCTION_TABLE[$0 | 0]($7 + 28 | 0, $7 + 24 | 0, $7 + 20 | 0, $7 + 16 | 0, $7 + 12 | 0, $7 + 8 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 20) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 24) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 28) | 0);
  __stack_pointer = $7 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_68____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0);
  $6 = __stack_pointer + -64 | 0;
  __stack_pointer = $6;
  $7 = $6 + 24 | 0;
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 72724, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 24) | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 56, 0, 0);
  $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $6 + 56 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 48, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $6 + 48 | 0);
  SAFE_HEAP_STORE_i64_8_4($6, 40, 0, 0);
  $2 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $6 + 40 | 0);
  SAFE_HEAP_STORE_i64_8_8($7 + 8 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($6, 24, 0, 0);
  $3 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($4, $7);
  SAFE_HEAP_STORE_i64_8_8($6 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($6, 8, 0, 0);
  $10 = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
  $7 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($5, $6 + 8 | 0);
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($5, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
    break label$1
   }
   $11 = SAFE_HEAP_LOAD_i64_8_4($5, 208);
   $12 = i64toi32_i32$HIGH_BITS;
   $13 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $14 = SAFE_HEAP_LOAD_f32_4_4($5, 208);
   $8 = $4 + 28 | 0;
   SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($0, 4)));
   SAFE_HEAP_STORE_f32_4_4($4, 24, Math_fround($14 + $13));
   SAFE_HEAP_STORE_i64_8_8($4, 16, $11, $12);
   if (SAFE_HEAP_LOAD_f32_4_4($7, 12) > Math_fround(0.0)) {
    SAFE_HEAP_STORE_f32_4_4($8, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($8, 0) + Math_fround(2.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 24, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 24) + Math_fround(2.0)));
   }
   $0 = $4 + 16 | 0;
   ImGui__ItemSize_28ImRect_20const__2c_20float_29($0, Math_fround(-1.0));
   if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($0, 0, 0, 0)) {
    break label$1
   }
   $0 = $4 + 24 | 0;
   $8 = SAFE_HEAP_LOAD_i32_4_4($5, 580);
   if (SAFE_HEAP_LOAD_f32_4_4($7, 12) > Math_fround(0.0)) {
    ImDrawList__AddRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29($8, $4 + 16 | 0, $0, ImGui__GetColorU32_28ImVec4_20const__29($7), Math_fround(0.0), 0, Math_fround(1.0));
    $0 = SAFE_HEAP_LOAD_i32_4_4($5, 580);
    SAFE_HEAP_STORE_f32_4_4($4, 12, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 20) + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 8, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 16) + Math_fround(1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 28 | 0, 0) + Math_fround(-1.0)));
    SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 24) + Math_fround(-1.0)));
    ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($0, $10, $4 + 8 | 0, $4, $1, $2, ImGui__GetColorU32_28ImVec4_20const__29($3));
    break label$1;
   }
   ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($8, $10, $4 + 16 | 0, $0, $1, $2, ImGui__GetColorU32_28ImVec4_20const__29($3));
  }
  __stack_pointer = $4 + 32 | 0;
  __stack_pointer = $6 - -64 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  SAFE_HEAP_STORE_i32_4_4($8, 24, $2);
  SAFE_HEAP_STORE_i32_4_4($8, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($8, 20, $3);
  SAFE_HEAP_STORE_i32_4_4($8, 16, $4);
  SAFE_HEAP_STORE_i32_4_4($8, 12, $6);
  SAFE_HEAP_STORE_i32_4_4($8, 8, $7);
  $0 = FUNCTION_TABLE[$0 | 0]($8 + 28 | 0, $8 + 24 | 0, $8 + 20 | 0, $8 + 16 | 0, $5, $8 + 12 | 0, $8 + 8 | 0) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 20) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 24) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 28) | 0);
  __stack_pointer = $8 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_69____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = Math_fround(0), $22 = 0, $23 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $9 = __stack_pointer + -64 | 0;
  __stack_pointer = $9;
  $15 = $9 + 24 | 0;
  $18 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 72724, $15 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 24) | 0);
  SAFE_HEAP_STORE_i64_8_4($9, 56, 0, 0);
  $16 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $9 + 56 | 0);
  SAFE_HEAP_STORE_i64_8_4($9, 48, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $9 + 48 | 0);
  SAFE_HEAP_STORE_i64_8_4($9, 40, 0, 0);
  $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $9 + 40 | 0);
  SAFE_HEAP_STORE_i64_8_8($15 + 8 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($9, 24, 0, 0);
  $2 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($5, $15);
  SAFE_HEAP_STORE_i64_8_8($9 + 16 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($9, 8, 0, 0);
  $19 = Math_abs($18) < 2147483648.0 ? ~~$18 : -2147483648;
  $3 = $2;
  $22 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($6, $9 + 8 | 0);
  $2 = 0;
  $14 = __stack_pointer - 16 | 0;
  __stack_pointer = $14;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
   ImGui__PushID_28void_20const__29($19);
   $17 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($5, 11582);
   ImGui__PopID_28_29();
   label$2 : {
    if (($4 | 0) >= 0) {
     $8 = Math_fround($4 | 0);
     SAFE_HEAP_STORE_f32_4_4($14, 12, $8);
     SAFE_HEAP_STORE_f32_4_4($14, 8, $8);
     break label$2;
    }
    SAFE_HEAP_STORE_i64_8_8($14, 8, SAFE_HEAP_LOAD_i64_8_4($6 + 5476 | 0, 0), i64toi32_i32$HIGH_BITS);
   }
   $7 = __stack_pointer - 80 | 0;
   __stack_pointer = $7;
   $20 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $13 = SAFE_HEAP_LOAD_i32_4_4($20, 7080);
   SAFE_HEAP_STORE_i32_1_1($13, 140, 1);
   if (!SAFE_HEAP_LOAD_i32_1_U_1($13, 143)) {
    $11 = $14 + 8 | 0;
    $21 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
    $12 = SAFE_HEAP_LOAD_f32_4_4($16, 0);
    $10 = SAFE_HEAP_LOAD_f32_4_4($13, 208);
    $5 = SAFE_HEAP_LOAD_i64_8_4($13, 208);
    $4 = i64toi32_i32$HIGH_BITS;
    $23 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($13 + 212 | 0, 0) + SAFE_HEAP_LOAD_f32_4_4($16, 4));
    $8 = SAFE_HEAP_LOAD_f32_4_4($11, 4);
    SAFE_HEAP_STORE_f32_4_4($7 + 76 | 0, 0, Math_fround($23 + Math_fround($8 + $8)));
    SAFE_HEAP_STORE_i64_8_8($7, 64, $5, $4);
    SAFE_HEAP_STORE_f32_4_4($7, 72, Math_fround(Math_fround($10 + $12) + Math_fround($21 + $21)));
    $4 = $7 - -64 | 0;
    ImGui__ItemSize_28ImRect_20const__2c_20float_29($4, Math_fround(-1.0));
    if (ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($4, $17, 0, 0)) {
     $4 = $7 - -64 | 0;
     $2 = ImGui__ButtonBehavior_28ImRect_20const__2c_20unsigned_20int_2c_20bool__2c_20bool__2c_20int_29($4, $17, $7 + 63 | 0, $7 + 62 | 0, 0);
     $15 = ImGui__GetColorU32_28int_2c_20float_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_1_U_1($7, 62) ? 23 : 22, wasm2js_i32$1 = 21, wasm2js_i32$2 = SAFE_HEAP_LOAD_i32_1_U_1($7, 63), wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), Math_fround(1.0));
     ImGui__RenderNavHighlight_28ImRect_20const__2c_20unsigned_20int_2c_20int_29($4, $17, 1);
     $16 = SAFE_HEAP_LOAD_i64_8_8($7, 64);
     $6 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($7, 48, $16, $6);
     $5 = SAFE_HEAP_LOAD_i64_8_8($7, 72);
     $4 = i64toi32_i32$HIGH_BITS;
     SAFE_HEAP_STORE_i64_8_8($7, 40, $5, $4);
     $12 = SAFE_HEAP_LOAD_f32_4_4($20 + 5484 | 0, 0);
     $10 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($11, 4);
     SAFE_HEAP_STORE_i64_8_8($7, 8, $5, $4);
     SAFE_HEAP_STORE_i64_8_8($7, 16, $16, $6);
     $8 = $8 > $10 ? $10 : $8;
     ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($7 + 16 | 0, $7 + 8 | 0, $15, 1, $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > $12 ? $12 : $8);
     if (SAFE_HEAP_LOAD_f32_4_4($3, 12) > Math_fround(0.0)) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($13, 580);
      $10 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
      $12 = SAFE_HEAP_LOAD_f32_4_4($7, 68);
      $8 = SAFE_HEAP_LOAD_f32_4_4($11, 4);
      SAFE_HEAP_STORE_f32_4_4($7, 36, Math_fround($12 + $8));
      SAFE_HEAP_STORE_f32_4_4($7, 32, Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($7, 64)));
      SAFE_HEAP_STORE_f32_4_4($7, 28, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7 + 76 | 0, 0) - $8));
      SAFE_HEAP_STORE_f32_4_4($7, 24, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 72) - $10));
      ImDrawList__AddRectFilled_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_2c_20int_29($4, $7 + 32 | 0, $7 + 24 | 0, ImGui__GetColorU32_28ImVec4_20const__29($3), Math_fround(0.0), 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4($13, 580);
     $10 = SAFE_HEAP_LOAD_f32_4_4($11, 0);
     $12 = SAFE_HEAP_LOAD_f32_4_4($7, 68);
     $8 = SAFE_HEAP_LOAD_f32_4_4($11, 4);
     SAFE_HEAP_STORE_f32_4_4($7, 36, Math_fround($12 + $8));
     SAFE_HEAP_STORE_f32_4_4($7, 32, Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($7, 64)));
     SAFE_HEAP_STORE_f32_4_4($7, 28, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7 + 76 | 0, 0) - $8));
     SAFE_HEAP_STORE_f32_4_4($7, 24, Math_fround(SAFE_HEAP_LOAD_f32_4_4($7, 72) - $10));
     ImDrawList__AddImage_28void__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_29($3, $19, $7 + 32 | 0, $7 + 24 | 0, $1, $0, ImGui__GetColorU32_28ImVec4_20const__29($22));
    }
   }
   __stack_pointer = $7 + 80 | 0;
  }
  __stack_pointer = $14 + 16 | 0;
  __stack_pointer = $9 - -64 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_70____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53076);
  SAFE_HEAP_STORE_i32_4_4($2, 20, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 24, 0);
  $4 = $2 + 24 | 0;
  $5 = _emval_take_value(72760, $4 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  $7 = +_emval_as($1 | 0, 72652, $4 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 24) | 0);
  SAFE_HEAP_STORE_i32_1_1($2, 16, $7 != 0.0);
  _emval_decref($1 | 0);
  $1 = ImGui__Checkbox_28char_20const__2c_20bool__29(($6 | 0) < 0 ? $3 : $0, $2 + 16 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53076);
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
  SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_1_U_1($2, 16));
  $0 = _emval_take_value(72652, $4 | 0) | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 24, 0);
  $4 = $3;
  $3 = _emval_take_value(72760, $2 + 24 | 0) | 0;
  _emval_set_property($4 | 0, $3 | 0, $0 | 0);
  _emval_decref($3 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_71____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $4 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53160);
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 24, 0);
  $6 = $3 + 24 | 0;
  $8 = _emval_take_value(72760, $6 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $8 | 0) | 0;
  _emval_decref($8 | 0);
  $7 = +_emval_as($1 | 0, 72736, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 24) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 16, $7 < 4294967296.0 & $7 >= 0.0 ? ~~$7 >>> 0 : 0);
  _emval_decref($1 | 0);
  $5 = ($4 | 0) < 0 ? $5 : $0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $1 = $3 + 16 | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0) & $2;
  $6 = ($4 | 0) == ($2 | 0);
  SAFE_HEAP_STORE_i32_1_1($0, 15, $6);
  label$1 : {
   if (!(!$4 | $6)) {
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $6 = SAFE_HEAP_LOAD_i32_4_4($4, 7216);
    SAFE_HEAP_STORE_i32_4_4($4, 7216, $6 | 64);
    $5 = ImGui__Checkbox_28char_20const__2c_20bool__29($5, $0 + 15 | 0);
    SAFE_HEAP_STORE_i32_4_4($4, 7216, $6);
    break label$1;
   }
   $5 = ImGui__Checkbox_28char_20const__2c_20bool__29($5, $0 + 15 | 0);
  }
  if ($5) {
   label$4 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 15)) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) | $2;
     break label$4;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) & ($2 ^ -1);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
  }
  __stack_pointer = $0 + 16 | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53160);
  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
  SAFE_HEAP_STORE_i32_4_4($3, 24, SAFE_HEAP_LOAD_i32_4_4($3, 16));
  $2 = $3 + 24 | 0;
  $0 = _emval_take_value(72736, $2 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 24, 0);
  $4 = $1;
  $1 = _emval_take_value(72760, $2 | 0) | 0;
  _emval_set_property($4 | 0, $1 | 0, $0 | 0);
  _emval_decref($1 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $3 + 32 | 0;
  return $5 | 0;
 }
 
 function embind_init_ImGui_28_29__$_72____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return ImGui__RadioButton_28char_20const__2c_20bool_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1) | 0;
 }
 
 function embind_init_ImGui_28_29__$_73____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $8 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53228);
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 24, 0);
  $5 = $3 + 24 | 0;
  $6 = _emval_take_value(72760, $5 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  $7 = +_emval_as($1 | 0, 72724, $5 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 24) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 16, Math_abs($7) < 2147483648.0 ? ~~$7 : -2147483648);
  _emval_decref($1 | 0);
  $1 = ($8 | 0) < 0 ? $4 : $0;
  $0 = $3 + 16 | 0;
  $1 = ImGui__RadioButton_28char_20const__2c_20bool_29($1, (SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) == ($2 | 0));
  if ($1) {
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2)
  }
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53228);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
  SAFE_HEAP_STORE_i32_4_4($3, 24, SAFE_HEAP_LOAD_i32_4_4($3, 16));
  $4 = $3 + 24 | 0;
  $0 = _emval_take_value(72724, $4 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 24, 0);
  $5 = $2;
  $2 = _emval_take_value(72760, $4 | 0) | 0;
  _emval_set_property($5 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $3 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20float_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28float_2c_20emscripten__val_2c_20emscripten__val_29_2c_20float_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $4 + 12 | 0, $4 + 8 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_74____invoke_28float_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2) {
  $0 = Math_fround($0);
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0, $17 = Math_fround(0), $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = Math_fround(0), $22 = Math_fround(0), $23 = Math_fround(0), $24 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $14 = __stack_pointer - 32 | 0;
  __stack_pointer = $14;
  SAFE_HEAP_STORE_i64_8_4($14, 24, 0, 0);
  $1 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $14 + 24 | 0);
  SAFE_HEAP_STORE_i32_4_4($14 + 16 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($14, 8, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($14, 4, 53464);
  SAFE_HEAP_STORE_i32_4_4($14, 20, $2);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($14 + 4 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($14, 4, 53312);
  $19 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($14, 8), wasm2js_i32$4 = $14 + 8 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($14, 19) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($14, 20), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2 = __stack_pointer - 144 | 0;
  __stack_pointer = $2;
  $18 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($18, 7080);
  SAFE_HEAP_STORE_i32_1_1($6, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
    break label$1
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($6 + 212 | 0, 0);
   $16 = SAFE_HEAP_LOAD_i32_4_4($6, 208);
   SAFE_HEAP_STORE_i64_8_8($2, 128, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   $13 = ImGui__CalcItemWidth_28_29();
   $4 = $18 + 5480 | 0;
   $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   $12 = SAFE_HEAP_LOAD_f32_4_4($18, 6468);
   SAFE_HEAP_STORE_i64_8_8($2, 32, SAFE_HEAP_LOAD_i64_8_8($2, 128), i64toi32_i32$HIGH_BITS);
   $5 = $2 + 136 | 0;
   ImGui__CalcItemSize_28ImVec2_2c_20float_2c_20float_29($5, $2 + 32 | 0, $13, Math_fround($12 + Math_fround($10 + $10)));
   $1 = $2 + 124 | 0;
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 140) + (wasm2js_scratch_store_i32(2, $3), wasm2js_scratch_load_f32())));
   SAFE_HEAP_STORE_i32_4_4($2, 116, $3);
   SAFE_HEAP_STORE_i32_4_4($2, 112, $16);
   SAFE_HEAP_STORE_f32_4_4($2, 120, Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 136) + (wasm2js_scratch_store_i32(2, $16), wasm2js_scratch_load_f32())));
   ImGui__ItemSize_28ImVec2_20const__2c_20float_29($5, SAFE_HEAP_LOAD_f32_4_4($4, 0));
   if (!ImGui__ItemAdd_28ImRect_20const__2c_20unsigned_20int_2c_20ImRect_20const__2c_20int_29($2 + 112 | 0, 0, 0, 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i64_8_8($2, 104, SAFE_HEAP_LOAD_i64_8_8($2, 112), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($2, 96, SAFE_HEAP_LOAD_i64_8_8($2, 120), i64toi32_i32$HIGH_BITS);
   $3 = ImGui__GetColorU32_28int_2c_20float_29(7, Math_fround(1.0));
   $4 = $18 + 5484 | 0;
   $10 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   SAFE_HEAP_STORE_i64_8_8($2, 24, SAFE_HEAP_LOAD_i64_8_8($2, 104), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_8($2, 16, SAFE_HEAP_LOAD_i64_8_8($2, 96), i64toi32_i32$HIGH_BITS);
   ImGui__RenderFrame_28ImVec2_2c_20ImVec2_2c_20unsigned_20int_2c_20bool_2c_20float_29($2 + 24 | 0, $2 + 16 | 0, $3, 1, $10);
   $7 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   $10 = SAFE_HEAP_LOAD_f32_4_4($18 + 5488 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($1, 0, Math_fround($7 - $10));
   SAFE_HEAP_STORE_f32_4_4($2, 116, Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 116)));
   $21 = Math_fround($10 + SAFE_HEAP_LOAD_f32_4_4($2, 112));
   SAFE_HEAP_STORE_f32_4_4($2, 112, $21);
   $23 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 120) - $10);
   SAFE_HEAP_STORE_f32_4_4($2, 120, $23);
   $1 = SAFE_HEAP_LOAD_i32_4_4($6, 580);
   $3 = $2 + 112 | 0;
   $16 = ImGui__GetColorU32_28int_2c_20float_29(40, Math_fround(1.0));
   $7 = SAFE_HEAP_LOAD_f32_4_4($4, 0);
   $6 = __stack_pointer - 16 | 0;
   __stack_pointer = $6;
   $22 = $0 < Math_fround(0.0) ? Math_fround(0.0) : $0 > Math_fround(1.0) ? Math_fround(1.0) : $0;
   $0 = $22;
   label$10 : {
    if ($0 == Math_fround(0.0)) {
     break label$10
    }
    $15 = SAFE_HEAP_LOAD_f32_4_4($3, 8);
    $8 = SAFE_HEAP_LOAD_f32_4_4($3, 0);
    $9 = Math_fround($15 - $8);
    $4 = $0 < Math_fround(0.0);
    $12 = Math_fround(Math_fround($9 * ($4 ? Math_fround(0.0) : $0)) + $8);
    $15 = Math_fround(Math_fround($9 * ($4 ? $0 : Math_fround(0.0))) + $8);
    $10 = SAFE_HEAP_LOAD_f32_4_4($3 + 12 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($3, 4);
    if ($7 == Math_fround(0.0)) {
     if ($16 >>> 0 < 16777216) {
      break label$10
     }
     ImDrawList__PrimReserve_28int_2c_20int_29($1, 6, 4);
     $4 = SAFE_HEAP_LOAD_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($1, 44), 0);
     $5 = i64toi32_i32$HIGH_BITS;
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 56);
     $11 = SAFE_HEAP_LOAD_i32_2_U_2($1, 40);
     SAFE_HEAP_STORE_i32_2_2($3, 10, $11 + 3 | 0);
     $24 = $11 + 2 | 0;
     SAFE_HEAP_STORE_i32_2_2($3, 8, $24);
     SAFE_HEAP_STORE_i32_2_2($3, 6, $11);
     SAFE_HEAP_STORE_i32_2_2($3, 4, $24);
     SAFE_HEAP_STORE_i32_2_2($3, 2, $11 + 1 | 0);
     SAFE_HEAP_STORE_i32_2_2($3, 0, $11);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
     SAFE_HEAP_STORE_f32_4_4($3, 4, $13);
     SAFE_HEAP_STORE_f32_4_4($3, 0, $15);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($1, 52), 8, $4, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
     SAFE_HEAP_STORE_f32_4_4($3, 20, $12);
     SAFE_HEAP_STORE_i32_4_4($3, 16, $16);
     SAFE_HEAP_STORE_f32_4_4($3 + 24 | 0, 0, $13);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($1, 52) + 28 | 0, 0, $4, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
     SAFE_HEAP_STORE_f32_4_4($3, 40, $12);
     SAFE_HEAP_STORE_f32_4_4($3 + 44 | 0, 0, $10);
     SAFE_HEAP_STORE_i32_4_4($3 + 36 | 0, 0, $16);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($1, 52) + 48 | 0, 0, $4, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
     SAFE_HEAP_STORE_f32_4_4($3, 60, $15);
     SAFE_HEAP_STORE_f32_4_4($3 - -64 | 0, 0, $10);
     SAFE_HEAP_STORE_i32_4_4($3 + 56 | 0, 0, $16);
     SAFE_HEAP_STORE_i64_8_4(SAFE_HEAP_LOAD_i32_4_4($1, 52) + 68 | 0, 0, $4, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 52);
     SAFE_HEAP_STORE_i32_4_4($3 + 76 | 0, 0, $16);
     SAFE_HEAP_STORE_i32_4_4($1, 52, $3 + 80 | 0);
     SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40) + 4 | 0);
     SAFE_HEAP_STORE_i32_4_4($1, 56, SAFE_HEAP_LOAD_i32_4_4($1, 56) + 12 | 0);
     break label$10;
    }
    $0 = Math_fround($9 * Math_fround(.5));
    $9 = Math_fround(Math_fround($10 - $13) * Math_fround(.5));
    $0 = Math_fround(($0 < $9 ? $0 : $9) + Math_fround(-1.0));
    $0 = $0 < Math_fround(0.0) ? Math_fround(0.0) : $0 > $7 ? $7 : $0;
    $20 = Math_fround(Math_fround(1.0) / $0);
    $7 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($15 - $8) * $20));
    $9 = Math_fround(1.5707963705062866);
    label$3 : {
     if ($7 <= Math_fround(0.0)) {
      break label$3
     }
     $9 = Math_fround(0.0);
     if ($7 >= Math_fround(1.0)) {
      break label$3
     }
     $9 = acosf($7);
    }
    $7 = Math_fround($8 + $0);
    $7 = $7 <= $15 ? $15 : $7;
    $8 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($12 - $8) * $20));
    $17 = Math_fround(1.5707963705062866);
    label$4 : {
     if ($8 <= Math_fround(0.0)) {
      break label$4
     }
     $17 = Math_fround(0.0);
     if ($8 >= Math_fround(1.0)) {
      break label$4
     }
     $17 = acosf($8);
    }
    $8 = $17;
    label$5 : {
     if ($8 == $9) {
      $5 = SAFE_HEAP_LOAD_i32_4_4($1, 84);
      $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 88 | 0, 0);
      label$7 : {
       if (($5 | 0) != ($4 | 0)) {
        break label$7
       }
       $11 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
       $5 = $5 + 1 | 0;
       $5 = ($5 | 0) < ($11 | 0) ? $11 : $5;
       if (($4 | 0) >= ($5 | 0)) {
        break label$7
       }
       $4 = ImGui__MemAlloc_28unsigned_20long_29($5 << 3);
       $11 = SAFE_HEAP_LOAD_i32_4_4($1 + 92 | 0, 0);
       if ($11) {
        __memcpy($4, $11, SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3);
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 92));
       }
       SAFE_HEAP_STORE_i32_4_4($1, 88, $5);
       SAFE_HEAP_STORE_i32_4_4($1, 92, $4);
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($1 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3) | 0;
      SAFE_HEAP_STORE_f32_4_4($4, 4, $10);
      SAFE_HEAP_STORE_f32_4_4($4, 0, $7);
      $5 = SAFE_HEAP_LOAD_i32_4_4($1, 84);
      $11 = $5 + 1 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 84, $11);
      $4 = SAFE_HEAP_LOAD_i32_4_4($1, 88);
      label$11 : {
       if (($11 | 0) != ($4 | 0)) {
        break label$11
       }
       $11 = $4 ? $4 + (($4 | 0) / 2 | 0) | 0 : 8;
       $5 = $5 + 2 | 0;
       $5 = ($5 | 0) < ($11 | 0) ? $11 : $5;
       if (($4 | 0) >= ($5 | 0)) {
        break label$11
       }
       $4 = ImGui__MemAlloc_28unsigned_20long_29($5 << 3);
       $11 = SAFE_HEAP_LOAD_i32_4_4($1, 92);
       if ($11) {
        __memcpy($4, $11, SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3);
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 92));
       }
       SAFE_HEAP_STORE_i32_4_4($1, 88, $5);
       SAFE_HEAP_STORE_i32_4_4($1, 92, $4);
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($1, 92) + (SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3) | 0;
      SAFE_HEAP_STORE_f32_4_4($4, 4, $13);
      SAFE_HEAP_STORE_f32_4_4($4, 0, $7);
      SAFE_HEAP_STORE_i32_4_4($1, 84, SAFE_HEAP_LOAD_i32_4_4($1, 84) + 1 | 0);
      break label$5;
     }
     $17 = Math_fround($10 - $0);
     if (!($9 != Math_fround(0.0) | $8 != Math_fround(1.5707963705062866))) {
      SAFE_HEAP_STORE_f32_4_4($6, 12, $17);
      SAFE_HEAP_STORE_f32_4_4($6, 8, $7);
      $4 = $6 + 8 | 0;
      ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($1, $4, $0, 3, 6);
      SAFE_HEAP_STORE_f32_4_4($6, 12, Math_fround($13 + $0));
      SAFE_HEAP_STORE_f32_4_4($6, 8, $7);
      ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($1, $4, $0, 6, 9);
      break label$5;
     }
     SAFE_HEAP_STORE_f32_4_4($6, 12, $17);
     SAFE_HEAP_STORE_f32_4_4($6, 8, $7);
     $4 = $6 + 8 | 0;
     ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($1, $4, $0, Math_fround(Math_fround(3.1415927410125732) - $8), Math_fround(Math_fround(3.1415927410125732) - $9), 3);
     SAFE_HEAP_STORE_f32_4_4($6, 12, Math_fround($13 + $0));
     SAFE_HEAP_STORE_f32_4_4($6, 8, $7);
     ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($1, $4, $0, Math_fround($9 + Math_fround(3.1415927410125732)), Math_fround($8 + Math_fround(3.1415927410125732)), 3);
    }
    label$16 : {
     if (!($12 > Math_fround($0 + SAFE_HEAP_LOAD_f32_4_4($3, 0)))) {
      break label$16
     }
     $8 = SAFE_HEAP_LOAD_f32_4_4($3, 8);
     $7 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($8 - $12) * $20));
     $9 = Math_fround(1.5707963705062866);
     label$17 : {
      if ($7 <= Math_fround(0.0)) {
       break label$17
      }
      $9 = Math_fround(0.0);
      if ($7 >= Math_fround(1.0)) {
       break label$17
      }
      $9 = acosf($7);
     }
     $7 = $9;
     $9 = Math_fround($8 - $0);
     $12 = $12 < $9 ? $12 : $9;
     $15 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($8 - $15) * $20));
     $8 = Math_fround(1.5707963705062866);
     label$18 : {
      if ($15 <= Math_fround(0.0)) {
       break label$18
      }
      $8 = Math_fround(0.0);
      if ($15 >= Math_fround(1.0)) {
       break label$18
      }
      $8 = acosf($15);
     }
     $15 = $8;
     if ($15 == $7) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($1, 84);
      $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 88 | 0, 0);
      label$20 : {
       if (($4 | 0) != ($3 | 0)) {
        break label$20
       }
       $5 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
       $4 = $4 + 1 | 0;
       $4 = ($4 | 0) < ($5 | 0) ? $5 : $4;
       if (($3 | 0) >= ($4 | 0)) {
        break label$20
       }
       $3 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
       $5 = SAFE_HEAP_LOAD_i32_4_4($1 + 92 | 0, 0);
       if ($5) {
        __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3);
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 92));
       }
       SAFE_HEAP_STORE_i32_4_4($1, 88, $4);
       SAFE_HEAP_STORE_i32_4_4($1, 92, $3);
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($1 + 92 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3) | 0;
      SAFE_HEAP_STORE_f32_4_4($3, 4, $13);
      SAFE_HEAP_STORE_f32_4_4($3, 0, $12);
      $4 = SAFE_HEAP_LOAD_i32_4_4($1, 84);
      $5 = $4 + 1 | 0;
      SAFE_HEAP_STORE_i32_4_4($1, 84, $5);
      $3 = SAFE_HEAP_LOAD_i32_4_4($1, 88);
      label$24 : {
       if (($5 | 0) != ($3 | 0)) {
        break label$24
       }
       $5 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
       $4 = $4 + 2 | 0;
       $4 = ($4 | 0) < ($5 | 0) ? $5 : $4;
       if (($3 | 0) >= ($4 | 0)) {
        break label$24
       }
       $3 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
       $5 = SAFE_HEAP_LOAD_i32_4_4($1, 92);
       if ($5) {
        __memcpy($3, $5, SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3);
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 92));
       }
       SAFE_HEAP_STORE_i32_4_4($1, 88, $4);
       SAFE_HEAP_STORE_i32_4_4($1, 92, $3);
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($1, 92) + (SAFE_HEAP_LOAD_i32_4_4($1, 84) << 3) | 0;
      SAFE_HEAP_STORE_f32_4_4($3, 4, $10);
      SAFE_HEAP_STORE_f32_4_4($3, 0, $12);
      SAFE_HEAP_STORE_i32_4_4($1, 84, SAFE_HEAP_LOAD_i32_4_4($1, 84) + 1 | 0);
      break label$16;
     }
     $13 = Math_fround($13 + $0);
     if (!($7 != Math_fround(0.0) | $15 != Math_fround(1.5707963705062866))) {
      SAFE_HEAP_STORE_f32_4_4($6, 12, $13);
      SAFE_HEAP_STORE_f32_4_4($6, 8, $12);
      $3 = $6 + 8 | 0;
      ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($1, $3, $0, 9, 12);
      SAFE_HEAP_STORE_f32_4_4($6, 12, Math_fround($10 - $0));
      SAFE_HEAP_STORE_f32_4_4($6, 8, $12);
      ImDrawList__PathArcToFast_28ImVec2_20const__2c_20float_2c_20int_2c_20int_29($1, $3, $0, 0, 3);
      break label$16;
     }
     SAFE_HEAP_STORE_f32_4_4($6, 12, $13);
     SAFE_HEAP_STORE_f32_4_4($6, 8, $12);
     $3 = $6 + 8 | 0;
     ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($1, $3, $0, Math_fround(-$15), Math_fround(-$7), 3);
     SAFE_HEAP_STORE_f32_4_4($6, 12, Math_fround($10 - $0));
     SAFE_HEAP_STORE_f32_4_4($6, 8, $12);
     ImDrawList__PathArcTo_28ImVec2_20const__2c_20float_2c_20float_2c_20float_2c_20int_29($1, $3, $0, $7, $15, 3);
    }
    ImDrawList__AddConvexPolyFilled_28ImVec2_20const__2c_20int_2c_20unsigned_20int_29($1, SAFE_HEAP_LOAD_i32_4_4($1 + 92 | 0, 0), SAFE_HEAP_LOAD_i32_4_4($1, 84), $16);
    SAFE_HEAP_STORE_i32_4_4($1, 84, 0);
   }
   __stack_pointer = $6 + 16 | 0;
   if (!$19) {
    SAFE_HEAP_STORE_f64_8_8($2, 0, +Math_fround(Math_fround($22 * Math_fround(100.0)) + Math_fround(.009999999776482582)));
    $19 = $2 - -64 | 0;
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($19, 32, 18913, $2);
   }
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($2 + 56 | 0, $19, 0, 0, Math_fround(-1.0));
   $0 = SAFE_HEAP_LOAD_f32_4_4($2, 56);
   if (!($0 > Math_fround(0.0))) {
    break label$1
   }
   $10 = SAFE_HEAP_LOAD_f32_4_4($18 + 5492 | 0, 0);
   $13 = SAFE_HEAP_LOAD_f32_4_4($18 + 5500 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($2, 52, SAFE_HEAP_LOAD_f32_4_4($2, 116));
   $12 = SAFE_HEAP_LOAD_f32_4_4($2, 112);
   $13 = Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($2, 120) - $0) - $13);
   $0 = Math_fround($10 + Math_fround(Math_fround(Math_fround($23 - $21) * $22) + $21));
   SAFE_HEAP_STORE_f32_4_4($2, 48, $0 < $12 ? $12 : $0 > $13 ? $13 : $0);
   SAFE_HEAP_STORE_i64_8_4($2, 40, 0, 1056964608);
   ImGui__RenderTextClipped_28ImVec2_20const__2c_20ImVec2_20const__2c_20char_20const__2c_20char_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImRect_20const__29($2 + 48 | 0, $2 + 120 | 0, $19, 0, $2 + 56 | 0, $2 + 40 | 0, $2 + 112 | 0);
  }
  __stack_pointer = $2 + 144 | 0;
  SAFE_HEAP_STORE_i32_4_4($14, 4, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($14, 19) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($14, 8))
  }
  __stack_pointer = $14 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_75____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($3, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($3, 28, $1);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($3 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53312);
  $0 = ImGui__BeginCombo_28char_20const__2c_20char_20const__2c_20int_29(($5 | 0) < 0 ? $4 : $0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($3, 16), wasm2js_i32$4 = $3 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($3, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($3, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 16))
  }
  __stack_pointer = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($7, 31, $8);
     $9 = $7 + 20 | 0;
     break label$2;
    }
    $10 = ($8 | 15) + 1 | 0;
    $9 = operator_20new_28unsigned_20long_29($10);
    SAFE_HEAP_STORE_i32_4_4($7, 28, $10 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($7, 20, $9);
    SAFE_HEAP_STORE_i32_4_4($7, 24, $8);
   }
   if ($8) {
    __memcpy($9, $1 + 4 | 0, $8)
   }
   SAFE_HEAP_STORE_i32_1_1($8 + $9 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 12, $3);
   SAFE_HEAP_STORE_i32_4_4($7, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $4);
   $0 = FUNCTION_TABLE[$0 | 0]($7 + 20 | 0, $7 + 16 | 0, $7 + 12 | 0, $7 + 8 | 0, $5, $6) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($7, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 20))
   }
   __stack_pointer = $7 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_76____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = Math_fround(0), $9 = 0, $10 = 0.0, $11 = Math_fround(0), $12 = Math_fround(0);
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 96) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 96, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 100) | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 104, $4);
  SAFE_HEAP_STORE_i32_4_4($7, 100, $2);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $3 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 12, 53228);
  SAFE_HEAP_STORE_i32_4_4($6, 20, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 0);
  $7 = $6 + 24 | 0;
  $9 = _emval_take_value(72760, $7 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $9 | 0) | 0;
  _emval_decref($9 | 0);
  $10 = +_emval_as($1 | 0, 72724, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 24) | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 16, Math_abs($10) < 2147483648.0 ? ~~$10 : -2147483648);
  _emval_decref($1 | 0);
  $1 = ($3 | 0) < 0 ? $2 : $0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  SAFE_HEAP_STORE_i32_4_4($2, 28, 0);
  $7 = $6 + 16 | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
  if (!(($0 | 0) < 0 | ($0 | 0) >= ($4 | 0))) {
   FUNCTION_TABLE[867](0, $0, $2 + 28 | 0) | 0
  }
  label$2 : {
   if (($5 | 0) == -1) {
    break label$2
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($3, 7300) & 16) {
    break label$2
   }
   SAFE_HEAP_STORE_i64_8_4($2, 20, 0, 0);
   if (($5 | 0) <= 0) {
    $8 = Math_fround(3402823466385288598117041.0e14)
   } else {
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 5428 | 0, 0);
    $11 = Math_fround($8 + $8);
    $12 = SAFE_HEAP_LOAD_f32_4_4($0, 6468);
    $8 = SAFE_HEAP_LOAD_f32_4_4($0 + 5496 | 0, 0);
    $8 = Math_fround($11 + Math_fround(Math_fround(Math_fround($12 + $8) * Math_fround($5 | 0)) - $8));
   }
   SAFE_HEAP_STORE_f32_4_4($2, 16, $8);
   SAFE_HEAP_STORE_i32_4_4($2, 12, 2139095039);
   ImGui__SetNextWindowSizeConstraints_28ImVec2_20const__2c_20ImVec2_20const__2c_20void_20_28__29_28ImGuiSizeCallbackData__29_2c_20void__29($2 + 20 | 0, $2 + 12 | 0, 0);
  }
  $0 = 0;
  if (ImGui__BeginCombo_28char_20const__2c_20char_20const__2c_20int_29($1, SAFE_HEAP_LOAD_i32_4_4($2, 28), 0)) {
   label$6 : {
    if (($4 | 0) <= 0) {
     $1 = 0;
     break label$6;
    }
    $1 = 0;
    while (1) {
     ImGui__PushID_28int_29($0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
     if (!(FUNCTION_TABLE[867](0, $0, $2 + 12 | 0) | 0)) {
      SAFE_HEAP_STORE_i32_4_4($2, 12, 17692)
     }
     $9 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
     SAFE_HEAP_STORE_i64_8_4($2, 20, 0, 0);
     if (ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($9, ($0 | 0) == ($5 | 0), 0, $2 + 20 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($7, 0, $0);
      $1 = 1;
     }
     if (($0 | 0) == ($5 | 0)) {
      ImGui__SetItemDefaultFocus_28_29()
     }
     ImGui__PopID_28_29();
     $0 = $0 + 1 | 0;
     if (($0 | 0) != ($4 | 0)) {
      continue
     }
     break;
    };
   }
   ImGui__EndPopup_28_29();
   $0 = $1;
   if ($0) {
    ImGui__MarkItemEdited_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($3, 7240))
   }
  }
  __stack_pointer = $2 + 32 | 0;
  $1 = $0 & 1;
  SAFE_HEAP_STORE_i32_4_4($6, 12, 53228);
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 20);
  SAFE_HEAP_STORE_i32_4_4($6, 24, SAFE_HEAP_LOAD_i32_4_4($6, 16));
  $3 = $6 + 24 | 0;
  $0 = _emval_take_value(72724, $3 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 0);
  $4 = $2;
  $2 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($8, 31, $9);
     $10 = $8 + 20 | 0;
     break label$2;
    }
    $11 = ($9 | 15) + 1 | 0;
    $10 = operator_20new_28unsigned_20long_29($11);
    SAFE_HEAP_STORE_i32_4_4($8, 28, $11 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($8, 20, $10);
    SAFE_HEAP_STORE_i32_4_4($8, 24, $9);
   }
   if ($9) {
    __memcpy($10, $1 + 4 | 0, $9)
   }
   SAFE_HEAP_STORE_i32_1_1($9 + $10 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 12, $3);
   SAFE_HEAP_STORE_i32_4_4($8, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($8, 8, $4);
   SAFE_HEAP_STORE_i32_4_4($8, 4, $5);
   SAFE_HEAP_STORE_i32_4_4($8, 0, $6);
   $0 = FUNCTION_TABLE[$0 | 0]($8 + 20 | 0, $8 + 16 | 0, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $8, $7) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 0) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 4) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 20))
   }
   __stack_pointer = $8 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_77____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $14 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $15 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 20, 53576);
  access_value_float_2c_201ul____import_value_28_29($7 + 20 | 0);
  $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  $12 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  $13 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 16, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12);
  }
  $2 = ($15 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 4), wasm2js_i32$4 = $7 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $10 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround($13);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $10);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $9);
  $0 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $14 : $0, 8, $7 + 24 | 0, $8, $1 + 12 | 0, $1 + 8 | 0, $3, $6);
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 20, 53576);
  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 28);
  SAFE_HEAP_STORE_f32_4_4($7, 0, SAFE_HEAP_LOAD_f32_4_4($7, 24));
  $0 = _emval_take_value(72796, $7 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
  $3 = $2;
  $2 = _emval_take_value(72760, $7 | 0) | 0;
  _emval_set_property($3 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $7 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_78____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $14 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $15 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 32, 53632);
  access_value_float_2c_202ul____import_value_28_29($7 + 32 | 0);
  $1 = $7 + 8 | 0;
  $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  $12 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  $13 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 24, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 8 | 0)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12);
  }
  $2 = ($15 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$4 = $7 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $10 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround($13);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $10);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $9);
  $0 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $14 : $0, 8, $7 + 36 | 0, 2, $8, $1 + 12 | 0, $1 + 8 | 0, $3, $6);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 32, 53632);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($7, 44);
   SAFE_HEAP_STORE_f32_4_4($7, 8, SAFE_HEAP_LOAD_f32_4_4(($7 + ($0 << 2) | 0) + 36 | 0, 0));
   $4 = $7 + 8 | 0;
   $1 = _emval_take_value(72796, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_79____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $14 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $15 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53688);
  access_value_float_2c_203ul____import_value_28_29($7 + 28 | 0);
  $1 = $7 + 8 | 0;
  $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  $12 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  $13 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 24, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 8 | 0)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12);
  }
  $2 = ($15 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$4 = $7 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $10 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround($13);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $10);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $9);
  $0 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $14 : $0, 8, $7 + 32 | 0, 3, $8, $1 + 12 | 0, $1 + 8 | 0, $3, $6);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53688);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($7, 44);
   SAFE_HEAP_STORE_f32_4_4($7, 8, SAFE_HEAP_LOAD_f32_4_4(($7 + ($0 << 2) | 0) + 32 | 0, 0));
   $4 = $7 + 8 | 0;
   $1 = _emval_take_value(72796, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_80____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $14 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $15 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 24, 53744);
  access_value_float_2c_204ul____import_value_28_29($7 + 24 | 0);
  $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  $12 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  $13 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 16, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12);
  }
  $2 = ($15 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 4), wasm2js_i32$4 = $7 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $10 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10 = Math_fround($13);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $10);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $9);
  $0 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $14 : $0, 8, $7 + 28 | 0, 4, $8, $1 + 12 | 0, $1 + 8 | 0, $3, $6);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 24, 53744);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($7, 44);
   SAFE_HEAP_STORE_f32_4_4($7, 0, SAFE_HEAP_LOAD_f32_4_4(($7 + ($0 << 2) | 0) + 28 | 0, 0));
   $1 = _emval_take_value(72796, $7 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 0, $0);
   $4 = $3;
   $3 = _emval_take_value(72760, $7 | 0) | 0;
   _emval_set_property($4 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 48 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($11 >>> 0 < 2147483632) {
   label$2 : {
    if ($11 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($10, 47, $11);
     $12 = $10 + 36 | 0;
     break label$2;
    }
    $13 = ($11 | 15) + 1 | 0;
    $12 = operator_20new_28unsigned_20long_29($13);
    SAFE_HEAP_STORE_i32_4_4($10, 44, $13 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($10, 36, $12);
    SAFE_HEAP_STORE_i32_4_4($10, 40, $11);
   }
   if ($11) {
    __memcpy($12, $1 + 4 | 0, $11)
   }
   SAFE_HEAP_STORE_i32_1_1($11 + $12 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($10, 28, $3);
   SAFE_HEAP_STORE_i32_4_4($10, 32, $2);
   SAFE_HEAP_STORE_i32_4_4($10, 24, $4);
   SAFE_HEAP_STORE_i32_4_4($10, 20, $5);
   SAFE_HEAP_STORE_i32_4_4($10, 16, $6);
   SAFE_HEAP_STORE_i32_4_4($10, 12, $7);
   SAFE_HEAP_STORE_i32_4_4($10, 8, $8);
   $0 = FUNCTION_TABLE[$0 | 0]($10 + 36 | 0, $10 + 32 | 0, $10 + 28 | 0, $10 + 24 | 0, $10 + 20 | 0, $10 + 16 | 0, $10 + 12 | 0, $10 + 8 | 0, $9) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 16) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 20) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 24) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 28) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 32) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($10, 47) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($10, 36))
   }
   __stack_pointer = $10 + 48 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_81____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = Math_fround(0), $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = Math_fround(0), $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $9 = __stack_pointer - 80 | 0;
  __stack_pointer = $9;
  $19 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $14 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($9, 76, $1);
  SAFE_HEAP_STORE_i32_4_4($9, 68, 53576);
  access_value_float_2c_201ul____import_value_28_29($9 + 68 | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 64, $2);
  SAFE_HEAP_STORE_i32_4_4($9, 56, 53576);
  access_value_float_2c_201ul____import_value_28_29($9 + 56 | 0);
  $1 = $9 + 32 | 0;
  $16 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  $17 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  $18 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  $5 = $1;
  SAFE_HEAP_STORE_i32_4_4($1 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($9, 36, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 53464);
  SAFE_HEAP_STORE_i32_4_4($9, 48, $6);
  if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($9 + 32 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($9, 32, 53312);
  $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 48), 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($9, 36);
  $2 = SAFE_HEAP_LOAD_i32_1_1($9, 47);
  $1 = $9 + 12 | 0;
  SAFE_HEAP_STORE_i32_4_4($1 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($9, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($9, 28, $7);
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($9 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($9, 12, 53312);
  $14 = ($14 | 0) < 0 ? $19 : $0;
  $7 = $9 + 72 | 0;
  $6 = $9 + 60 | 0;
  $13 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($16 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $13 = Math_fround(-3402823466385288598117041.0e14);
   if ($16 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $13 = Math_fround($16);
  }
  $11 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($17 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $11 = Math_fround(-3402823466385288598117041.0e14);
   if ($17 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $11 = Math_fround($17);
  }
  $12 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($18 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $12 = Math_fround(-3402823466385288598117041.0e14);
   if ($18 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $12 = Math_fround($18);
  }
  $4 = ($4 | 0) != 2 ? (($2 | 0) < 0 ? $3 : $5 + 4 | 0) : 0;
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($9, 16), wasm2js_i32$4 = $1 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($9, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
   ImGui__PushID_28char_20const__29($14);
   ImGui__BeginGroup_28_29();
   ImGui__PushMultiItemsWidths_28int_2c_20float_29(2, ImGui__CalcItemWidth_28_29());
   $0 = $11 >= $12;
   $15 = $0 ? Math_fround(-3402823466385288598117041.0e14) : $11;
   SAFE_HEAP_STORE_f32_4_4($5, 12, $15);
   $10 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
   $10 = $0 ? $10 : $10 > $12 ? $12 : $10;
   SAFE_HEAP_STORE_f32_4_4($5, 8, $10);
   $2 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(7616, 8, $7, $13, $5 + 12 | 0, $5 + 8 | 0, $4, ($10 == $15) << 21 | $8);
   ImGui__PopItemWidth_28_29();
   $1 = $1 + 5500 | 0;
   ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($1, 0));
   $10 = SAFE_HEAP_LOAD_f32_4_4($7, 0);
   $15 = $0 ? $10 : $10 <= $11 ? $11 : $10;
   SAFE_HEAP_STORE_f32_4_4($5, 4, $15);
   $10 = $0 ? Math_fround(3402823466385288598117041.0e14) : $12;
   SAFE_HEAP_STORE_f32_4_4($5, 0, $10);
   $0 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(1521, 8, $6, $13, $5 + 4 | 0, $5, $3 ? $3 : $4, ($10 == $15) << 21 | $8);
   ImGui__PopItemWidth_28_29();
   ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($1, 0));
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($14, ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($14), 0);
   ImGui__EndGroup_28_29();
   ImGui__PopID_28_29();
   $2 = $0 | $2;
  }
  __stack_pointer = $5 + 16 | 0;
  SAFE_HEAP_STORE_i32_4_4($9, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($9, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 16))
  }
  SAFE_HEAP_STORE_i32_4_4($9, 32, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($9, 47) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 36))
  }
  SAFE_HEAP_STORE_i32_4_4($9, 56, 53576);
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 64);
  SAFE_HEAP_STORE_f32_4_4($9, 32, SAFE_HEAP_LOAD_f32_4_4($9, 60));
  $4 = $9 + 32 | 0;
  $1 = $4;
  $3 = _emval_take_value(72796, $1 | 0) | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 0);
  $5 = $0;
  $0 = _emval_take_value(72760, $1 | 0) | 0;
  _emval_set_property($5 | 0, $0 | 0, $3 | 0);
  _emval_decref($0 | 0);
  _emval_decref($3 | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 68, 53576);
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 76);
  SAFE_HEAP_STORE_f32_4_4($9, 32, SAFE_HEAP_LOAD_f32_4_4($9, 72));
  $1 = _emval_take_value(72796, $1 | 0) | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 0);
  $3 = $0;
  $0 = _emval_take_value(72760, $4 | 0) | 0;
  _emval_set_property($3 | 0, $0 | 0, $1 | 0);
  _emval_decref($0 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $9 + 80 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($8, 31, $9);
     $10 = $8 + 20 | 0;
     break label$2;
    }
    $11 = ($9 | 15) + 1 | 0;
    $10 = operator_20new_28unsigned_20long_29($11);
    SAFE_HEAP_STORE_i32_4_4($8, 28, $11 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($8, 20, $10);
    SAFE_HEAP_STORE_i32_4_4($8, 24, $9);
   }
   if ($9) {
    __memcpy($10, $1 + 4 | 0, $9)
   }
   SAFE_HEAP_STORE_i32_1_1($9 + $10 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 12, $3);
   SAFE_HEAP_STORE_i32_4_4($8, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($8, 8, $6);
   $0 = FUNCTION_TABLE[$0 | 0]($8 + 20 | 0, $8 + 16 | 0, $8 + 12 | 0, $4, $5, $8 + 8 | 0, $7) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 20))
   }
   __stack_pointer = $8 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_82____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0.0, $9 = Math_fround(0), $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $11 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $12 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 20, 53228);
  SAFE_HEAP_STORE_i32_4_4($7, 28, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
  $10 = _emval_take_value(72760, $7 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $10 | 0) | 0;
  _emval_decref($10 | 0);
  $8 = +_emval_as($1 | 0, 72724, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 24, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
  _emval_decref($1 | 0);
  $8 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 16, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7)
  }
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53312);
  $2 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 4), wasm2js_i32$4 = $7 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $3);
  $0 = ($12 | 0) < 0 ? $11 : $0;
  $3 = $7 + 24 | 0;
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($8 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($8 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $9 = Math_fround($8);
  }
  $0 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, 4, $3, $9, $1 + 12 | 0, $1 + 8 | 0, $2, $6);
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 20, 53228);
  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 28);
  SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 24));
  $0 = _emval_take_value(72724, $7 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
  $3 = $2;
  $2 = _emval_take_value(72760, $7 | 0) | 0;
  _emval_set_property($3 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $7 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_83____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = 0.0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $10 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $11 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 32, 53896);
  access_value_int_2c_202ul____import_value_28_29($7 + 32 | 0);
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $7 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 24, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 8 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53312);
  $2 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$4 = $7 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $3);
  $0 = ($11 | 0) < 0 ? $10 : $0;
  $3 = $7 + 36 | 0;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($9);
  }
  $0 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, 4, $3, 2, $8, $1 + 12 | 0, $1 + 8 | 0, $2, $6);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 32, 53896);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($7, 44);
   SAFE_HEAP_STORE_i32_4_4($7, 8, SAFE_HEAP_LOAD_i32_4_4(($7 + ($0 << 2) | 0) + 36 | 0, 0));
   $4 = $7 + 8 | 0;
   $1 = _emval_take_value(72724, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_84____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = 0.0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $10 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $11 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53952);
  access_value_int_2c_203ul____import_value_28_29($7 + 28 | 0);
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $7 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 24, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 8 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53312);
  $2 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$4 = $7 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $3);
  $0 = ($11 | 0) < 0 ? $10 : $0;
  $3 = $7 + 32 | 0;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($9);
  }
  $0 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, 4, $3, 3, $8, $1 + 12 | 0, $1 + 8 | 0, $2, $6);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53952);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($7, 44);
   SAFE_HEAP_STORE_i32_4_4($7, 8, SAFE_HEAP_LOAD_i32_4_4(($7 + ($0 << 2) | 0) + 32 | 0, 0));
   $4 = $7 + 8 | 0;
   $1 = _emval_take_value(72724, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_85____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = 0.0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $10 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $11 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($7, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($7, 24, 54008);
  access_value_int_2c_204ul____import_value_28_29($7 + 24 | 0);
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 16, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7)
  }
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53312);
  $2 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 4), wasm2js_i32$4 = $7 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $3);
  $0 = ($11 | 0) < 0 ? $10 : $0;
  $3 = $7 + 28 | 0;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($9);
  }
  $0 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($0, 4, $3, 4, $8, $1 + 12 | 0, $1 + 8 | 0, $2, $6);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 24, 54008);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($7, 44);
   SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4(($7 + ($0 << 2) | 0) + 28 | 0, 0));
   $1 = _emval_take_value(72724, $7 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 0, $0);
   $4 = $3;
   $3 = _emval_take_value(72760, $7 | 0) | 0;
   _emval_set_property($4 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $7 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_86____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $9 = __stack_pointer - 80 | 0;
  __stack_pointer = $9;
  $15 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $16 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($9, 68, 53228);
  SAFE_HEAP_STORE_i32_4_4($9, 76, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 0);
  $10 = $1;
  $12 = $9 + 32 | 0;
  $1 = _emval_take_value(72760, $12 | 0) | 0;
  $14 = _emval_get_property($10 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $13 = +_emval_as($14 | 0, 72724, $12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 72, Math_abs($13) < 2147483648.0 ? ~~$13 : -2147483648);
  _emval_decref($14 | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 56, 53228);
  SAFE_HEAP_STORE_i32_4_4($9, 64, $2);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 0);
  $10 = $1;
  $2 = $12;
  $1 = _emval_take_value(72760, $2 | 0) | 0;
  $12 = _emval_get_property($10 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $13 = +_emval_as($12 | 0, 72724, $2 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 60, Math_abs($13) < 2147483648.0 ? ~~$13 : -2147483648);
  _emval_decref($12 | 0);
  $18 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $2 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  $1 = $2;
  $20 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  $13 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 32) | 0);
  SAFE_HEAP_STORE_i32_4_4($9 + 44 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($9, 36, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 53464);
  SAFE_HEAP_STORE_i32_4_4($9, 48, $6);
  $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  $11 = Math_fround($20);
  label$6 : {
   if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
    $2 = ~~$11;
    break label$6;
   }
   $2 = -2147483648;
  }
  $3 = ($1 | 0) == 2;
  $11 = Math_fround($13);
  label$8 : {
   if (Math_fround(Math_abs($11)) < Math_fround(2147483648.0)) {
    $1 = ~~$11;
    break label$8;
   }
   $1 = -2147483648;
  }
  if (!$3) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($9 + 32 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($9, 32, 53312);
  $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 48), 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($9, 36);
  $3 = SAFE_HEAP_LOAD_i32_1_1($9, 47);
  SAFE_HEAP_STORE_i32_4_4($9 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($9, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($9, 28, $7);
  if ((SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($9 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($9, 12, 53312);
  $19 = ($16 | 0) < 0 ? $15 : $0;
  $14 = $9 + 72 | 0;
  $15 = $9 + 60 | 0;
  $11 = Math_fround(3402823466385288598117041.0e14);
  label$5 : {
   if ($18 >= 3402823466385288598117041.0e14) {
    break label$5
   }
   $11 = Math_fround(-3402823466385288598117041.0e14);
   if ($18 <= -3402823466385288598117041.0e14) {
    break label$5
   }
   $11 = Math_fround($18);
  }
  $16 = ($5 | 0) != 2 ? (($3 | 0) < 0 ? $4 : $9 + 36 | 0) : 0;
  $12 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($9, 16), wasm2js_i32$4 = $9 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($9, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $3 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($7, 7080);
  SAFE_HEAP_STORE_i32_1_1($0, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 143)) {
   ImGui__PushID_28char_20const__29($19);
   ImGui__BeginGroup_28_29();
   ImGui__PushMultiItemsWidths_28int_2c_20float_29(2, ImGui__CalcItemWidth_28_29());
   $0 = SAFE_HEAP_LOAD_i32_4_4($15, 0);
   $17 = ($1 | 0) > ($2 | 0);
   $3 = $17 ? (($0 | 0) > ($1 | 0) ? $1 : $0) : $0;
   SAFE_HEAP_STORE_i32_4_4($10, 8, $3);
   $0 = $17 ? $2 : -2147483648;
   SAFE_HEAP_STORE_i32_4_4($10, 12, $0);
   $6 = $10 + 12 | 0;
   $5 = $10 + 8 | 0;
   $4 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(7616, 4, $14, $11, $6, $5, $16, (($0 | 0) == ($3 | 0)) << 21 | $8);
   ImGui__PopItemWidth_28_29();
   $3 = $7 + 5500 | 0;
   ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($3, 0));
   $0 = SAFE_HEAP_LOAD_i32_4_4($14, 0);
   $2 = $17 ? (($0 | 0) < ($2 | 0) ? $2 : $0) : $0;
   SAFE_HEAP_STORE_i32_4_4($10, 12, $2);
   $0 = $17 ? $1 : 2147483647;
   SAFE_HEAP_STORE_i32_4_4($10, 8, $0);
   $0 = ImGui__DragScalar_28char_20const__2c_20int_2c_20void__2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(1521, 4, $15, $11, $6, $5, $12 ? $12 : $16, (($0 | 0) == ($2 | 0)) << 21 | $8);
   ImGui__PopItemWidth_28_29();
   ImGui__SameLine_28float_2c_20float_29(Math_fround(0.0), SAFE_HEAP_LOAD_f32_4_4($3, 0));
   ImGui__TextEx_28char_20const__2c_20char_20const__2c_20int_29($19, ImGui__FindRenderedTextEnd_28char_20const__2c_20char_20const__29($19), 0);
   ImGui__EndGroup_28_29();
   ImGui__PopID_28_29();
   $3 = $0 | $4;
  }
  __stack_pointer = $10 + 16 | 0;
  $2 = $3;
  SAFE_HEAP_STORE_i32_4_4($9, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($9, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 16))
  }
  SAFE_HEAP_STORE_i32_4_4($9, 32, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($9, 47) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 36))
  }
  SAFE_HEAP_STORE_i32_4_4($9, 56, 53228);
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 64);
  SAFE_HEAP_STORE_i32_4_4($9, 32, SAFE_HEAP_LOAD_i32_4_4($9, 60));
  $4 = $9 + 32 | 0;
  $1 = $4;
  $3 = _emval_take_value(72724, $1 | 0) | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 0);
  $5 = $0;
  $0 = _emval_take_value(72760, $1 | 0) | 0;
  _emval_set_property($5 | 0, $0 | 0, $3 | 0);
  _emval_decref($0 | 0);
  _emval_decref($3 | 0);
  SAFE_HEAP_STORE_i32_4_4($9, 68, 53228);
  $0 = SAFE_HEAP_LOAD_i32_4_4($9, 76);
  SAFE_HEAP_STORE_i32_4_4($9, 32, SAFE_HEAP_LOAD_i32_4_4($9, 72));
  $1 = _emval_take_value(72724, $1 | 0) | 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 32, 0);
  $3 = $0;
  $0 = _emval_take_value(72760, $4 | 0) | 0;
  _emval_set_property($3 | 0, $0 | 0, $1 | 0);
  _emval_decref($0 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $9 + 80 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  $10 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($10 >>> 0 < 2147483632) {
   label$2 : {
    if ($10 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($9, 31, $10);
     $11 = $9 + 20 | 0;
     break label$2;
    }
    $12 = ($10 | 15) + 1 | 0;
    $11 = operator_20new_28unsigned_20long_29($12);
    SAFE_HEAP_STORE_i32_4_4($9, 28, $12 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($9, 20, $11);
    SAFE_HEAP_STORE_i32_4_4($9, 24, $10);
   }
   if ($10) {
    __memcpy($11, $1 + 4 | 0, $10)
   }
   SAFE_HEAP_STORE_i32_1_1($10 + $11 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($9, 12, $4);
   SAFE_HEAP_STORE_i32_4_4($9, 16, $3);
   SAFE_HEAP_STORE_i32_4_4($9, 8, $5);
   SAFE_HEAP_STORE_i32_4_4($9, 4, $6);
   SAFE_HEAP_STORE_i32_4_4($9, 0, $7);
   $0 = FUNCTION_TABLE[$0 | 0]($9 + 20 | 0, $2, $9 + 16 | 0, $9 + 12 | 0, $9 + 8 | 0, $9 + 4 | 0, $9, $8) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 4) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($9, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 20))
   }
   __stack_pointer = $9 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_87____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = Math_fround(0), $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $8 = __stack_pointer - 96 | 0;
  __stack_pointer = $8;
  label$1 : {
   label$2 : {
    switch ($1 | 0) {
    case 0:
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_signed_20char___access_typed_array_28emscripten__val__29($8 + 32 | 0, $2);
     $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 54160);
     SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($2 | 0) != 2) {
      $10 = +_emval_as($2 | 0, 72688, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 16, Math_abs($10) < 2147483648.0 ? ~~$10 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 80, 54160);
     SAFE_HEAP_STORE_i32_4_4($8, 88, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($3 | 0) != 2) {
      $10 = +_emval_as($3 | 0, 72688, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 84, Math_abs($10) < 2147483648.0 ? ~~$10 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53312);
     $4 = ($13 | 0) < 0 ? $12 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 | 0;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$10 : {
      if ($11 >= 3402823466385288598117041.0e14) {
       break label$10
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11 <= -3402823466385288598117041.0e14) {
       break label$10
      }
      $9 = Math_fround($11);
     }
     $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 0, $0, $5, $9, ($2 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 60), wasm2js_i32$4 = $8 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95828) & 1)) {
      $4 = _emval_get_method_caller(2, 54204) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95828, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95824, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95824);
     SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 1:
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20char___access_typed_array_28emscripten__val__29($8 + 32 | 0, $2);
     $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 54220);
     SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($2 | 0) != 2) {
      $10 = +_emval_as($2 | 0, 72676, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 16, $10 < 4294967296.0 & $10 >= 0.0 ? ~~$10 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 80, 54220);
     SAFE_HEAP_STORE_i32_4_4($8, 88, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($3 | 0) != 2) {
      $10 = +_emval_as($3 | 0, 72676, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 84, $10 < 4294967296.0 & $10 >= 0.0 ? ~~$10 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53312);
     $4 = ($13 | 0) < 0 ? $12 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 | 0;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$21 : {
      if ($11 >= 3402823466385288598117041.0e14) {
       break label$21
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11 <= -3402823466385288598117041.0e14) {
       break label$21
      }
      $9 = Math_fround($11);
     }
     $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 1, $0, $5, $9, ($2 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 60), wasm2js_i32$4 = $8 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95836) & 1)) {
      $4 = _emval_get_method_caller(2, 54264) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95836, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95832, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95832);
     SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 2:
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_short___access_typed_array_28emscripten__val__29($8 + 32 | 0, $2);
     $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 54320);
     SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($2 | 0) != 2) {
      $10 = +_emval_as($2 | 0, 72700, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 16, Math_abs($10) < 2147483648.0 ? ~~$10 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 80, 54320);
     SAFE_HEAP_STORE_i32_4_4($8, 88, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($3 | 0) != 2) {
      $10 = +_emval_as($3 | 0, 72700, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 84, Math_abs($10) < 2147483648.0 ? ~~$10 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53312);
     $4 = ($13 | 0) < 0 ? $12 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 1;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$32 : {
      if ($11 >= 3402823466385288598117041.0e14) {
       break label$32
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11 <= -3402823466385288598117041.0e14) {
       break label$32
      }
      $9 = Math_fround($11);
     }
     $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 2, $0, $5, $9, ($2 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 60), wasm2js_i32$4 = $8 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95844) & 1)) {
      $4 = _emval_get_method_caller(2, 54364) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95844, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95840, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95840);
     SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 3:
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20short___access_typed_array_28emscripten__val__29($8 + 32 | 0, $2);
     $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 54420);
     SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($2 | 0) != 2) {
      $10 = +_emval_as($2 | 0, 72712, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 16, $10 < 4294967296.0 & $10 >= 0.0 ? ~~$10 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 80, 54420);
     SAFE_HEAP_STORE_i32_4_4($8, 88, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($3 | 0) != 2) {
      $10 = +_emval_as($3 | 0, 72712, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 84, $10 < 4294967296.0 & $10 >= 0.0 ? ~~$10 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53312);
     $4 = ($13 | 0) < 0 ? $12 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 1;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$43 : {
      if ($11 >= 3402823466385288598117041.0e14) {
       break label$43
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11 <= -3402823466385288598117041.0e14) {
       break label$43
      }
      $9 = Math_fround($11);
     }
     $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 3, $0, $5, $9, ($2 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 60), wasm2js_i32$4 = $8 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95852) & 1)) {
      $4 = _emval_get_method_caller(2, 54464) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95852, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95848, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95848);
     SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 4:
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_int___access_typed_array_28emscripten__val__29($8 + 32 | 0, $2);
     $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 54520);
     SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($2 | 0) != 2) {
      $10 = +_emval_as($2 | 0, 72724, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 16, Math_abs($10) < 2147483648.0 ? ~~$10 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 80, 54520);
     SAFE_HEAP_STORE_i32_4_4($8, 88, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($3 | 0) != 2) {
      $10 = +_emval_as($3 | 0, 72724, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 84, Math_abs($10) < 2147483648.0 ? ~~$10 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53312);
     $4 = ($13 | 0) < 0 ? $12 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$54 : {
      if ($11 >= 3402823466385288598117041.0e14) {
       break label$54
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11 <= -3402823466385288598117041.0e14) {
       break label$54
      }
      $9 = Math_fround($11);
     }
     $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 4, $0, $5, $9, ($2 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 60), wasm2js_i32$4 = $8 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95860) & 1)) {
      $4 = _emval_get_method_caller(2, 54564) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95860, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95856, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95856);
     SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 5:
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20int___access_typed_array_28emscripten__val__29($8 + 32 | 0, $2);
     $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 54620);
     SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($2 | 0) != 2) {
      $10 = +_emval_as($2 | 0, 72736, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 16, $10 < 4294967296.0 & $10 >= 0.0 ? ~~$10 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 80, 54620);
     SAFE_HEAP_STORE_i32_4_4($8, 88, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($3 | 0) != 2) {
      $10 = +_emval_as($3 | 0, 72736, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 84, $10 < 4294967296.0 & $10 >= 0.0 ? ~~$10 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53312);
     $4 = ($13 | 0) < 0 ? $12 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$65 : {
      if ($11 >= 3402823466385288598117041.0e14) {
       break label$65
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11 <= -3402823466385288598117041.0e14) {
       break label$65
      }
      $9 = Math_fround($11);
     }
     $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 5, $0, $5, $9, ($2 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 60), wasm2js_i32$4 = $8 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95868) & 1)) {
      $4 = _emval_get_method_caller(2, 54664) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95868, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95864, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95864);
     SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 8:
     $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_float___access_typed_array_28emscripten__val__29($8 + 32 | 0, $2);
     $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
     _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
     SAFE_HEAP_STORE_i32_4_4($8, 12, 54720);
     SAFE_HEAP_STORE_i32_4_4($8, 20, $4);
     $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($2 | 0) != 2) {
      $10 = +_emval_as($2 | 0, 72808, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      $9 = Math_fround(3402823466385288598117041.0e14);
      label$78 : {
       if ($10 >= 3402823466385288598117041.0e14) {
        break label$78
       }
       $9 = Math_fround(-3402823466385288598117041.0e14);
       if ($10 <= -3402823466385288598117041.0e14) {
        break label$78
       }
       $9 = Math_fround($10);
      }
      SAFE_HEAP_STORE_f32_4_4($8, 16, $9);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 80, 54720);
     SAFE_HEAP_STORE_i32_4_4($8, 88, $5);
     $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($3 | 0) != 2) {
      $10 = +_emval_as($3 | 0, 72808, $8 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
      $9 = Math_fround(3402823466385288598117041.0e14);
      label$80 : {
       if ($10 >= 3402823466385288598117041.0e14) {
        break label$80
       }
       $9 = Math_fround(-3402823466385288598117041.0e14);
       if ($10 <= -3402823466385288598117041.0e14) {
        break label$80
       }
       $9 = Math_fround($10);
      }
      SAFE_HEAP_STORE_f32_4_4($8, 84, $9);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 72, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53312);
     $4 = ($13 | 0) < 0 ? $12 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$76 : {
      if ($11 >= 3402823466385288598117041.0e14) {
       break label$76
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11 <= -3402823466385288598117041.0e14) {
       break label$76
      }
      $9 = Math_fround($11);
     }
     $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 8, $0, $5, $9, ($2 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 60), wasm2js_i32$4 = $8 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95876) & 1)) {
      $4 = _emval_get_method_caller(2, 54764) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95876, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95872, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95872);
     SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
   $1 = access_typed_array_double___access_typed_array_28emscripten__val__29($8 + 80 | 0, $2);
   $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $8 + 56 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 56) | 0);
   SAFE_HEAP_STORE_i32_4_4($8, 56, 54820);
   SAFE_HEAP_STORE_i32_4_4($8, 72, $4);
   $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   if (($2 | 0) != 2) {
    $10 = +_emval_as($2 | 0, 72808, $8 + 32 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 32) | 0);
    SAFE_HEAP_STORE_f64_8_8($8, 64, $10);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 72), 0);
   SAFE_HEAP_STORE_i32_4_4($8, 32, 54820);
   SAFE_HEAP_STORE_i32_4_4($8, 48, $5);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   if (($3 | 0) != 2) {
    $10 = +_emval_as($3 | 0, 72808, $8 + 12 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
    SAFE_HEAP_STORE_f64_8_8($8, 40, $10);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 48), 0);
   SAFE_HEAP_STORE_i32_4_4($8 + 24 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($8, 16, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 12, 53464);
   SAFE_HEAP_STORE_i32_4_4($8, 28, $6);
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
    import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 12 | 0)
   }
   SAFE_HEAP_STORE_i32_4_4($8, 12, 53312);
   $4 = ($13 | 0) < 0 ? $12 : $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 3;
   $9 = Math_fround(3402823466385288598117041.0e14);
   label$85 : {
    if ($11 >= 3402823466385288598117041.0e14) {
     break label$85
    }
    $9 = Math_fround(-3402823466385288598117041.0e14);
    if ($11 <= -3402823466385288598117041.0e14) {
     break label$85
    }
    $9 = Math_fround($11);
   }
   $12 = ImGui__DragScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20float_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 9, $0, $5, $9, ($2 | 0) != 2 ? $8 - -64 | 0 : 0, ($3 | 0) != 2 ? $8 + 40 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 16), wasm2js_i32$4 = $8 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
   SAFE_HEAP_STORE_i32_4_4($8, 12, 53464);
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 27) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 16))
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $2 = $2 - $0 >> 3;
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95884) & 1)) {
    $4 = _emval_get_method_caller(2, 54864) | 0;
    SAFE_HEAP_STORE_i32_1_1(0, 95884, 1);
    SAFE_HEAP_STORE_i32_4_4(0, 95880, $4);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95880);
   SAFE_HEAP_STORE_i32_4_4($8, 60, $0);
   SAFE_HEAP_STORE_i32_4_4($8, 56, $2);
   _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 56 | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($0) {
    SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
    dlfree($0);
   }
  }
  __stack_pointer = $8 + 96 | 0;
  return $12 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($7, 31, $8);
     $9 = $7 + 20 | 0;
     break label$2;
    }
    $10 = ($8 | 15) + 1 | 0;
    $9 = operator_20new_28unsigned_20long_29($10);
    SAFE_HEAP_STORE_i32_4_4($7, 28, $10 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($7, 20, $9);
    SAFE_HEAP_STORE_i32_4_4($7, 24, $8);
   }
   if ($8) {
    __memcpy($9, $1 + 4 | 0, $8)
   }
   SAFE_HEAP_STORE_i32_1_1($8 + $9 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 12, $3);
   SAFE_HEAP_STORE_i32_4_4($7, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $4);
   SAFE_HEAP_STORE_i32_4_4($7, 4, $5);
   $0 = FUNCTION_TABLE[$0 | 0]($7 + 20 | 0, $7 + 16 | 0, $7 + 12 | 0, $7 + 8 | 0, $7 + 4 | 0, $6) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 4) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($7, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 20))
   }
   __stack_pointer = $7 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_88____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $11 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $12 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53576);
  access_value_float_2c_201ul____import_value_28_29($6 + 20 | 0);
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  $10 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6)
  }
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround($9);
  }
  $2 = ($12 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 4), wasm2js_i32$4 = $6 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $8);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $7);
  $0 = ImGui__SliderScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $11 : $0, 8, $6 + 24 | 0, $1 + 12 | 0, $1 + 8 | 0, $3, $5);
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53576);
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 28);
  SAFE_HEAP_STORE_f32_4_4($6, 0, SAFE_HEAP_LOAD_f32_4_4($6, 24));
  $0 = _emval_take_value(72796, $6 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $3 = $2;
  $2 = _emval_take_value(72760, $6 | 0) | 0;
  _emval_set_property($3 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_89____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $11 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $12 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 32, 53632);
  access_value_float_2c_202ul____import_value_28_29($6 + 32 | 0);
  $1 = $6 + 8 | 0;
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  $10 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 24, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6 + 8 | 0)
  }
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround($9);
  }
  $2 = ($12 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 12), wasm2js_i32$4 = $6 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $8);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $7);
  $0 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $11 : $0, 8, $6 + 36 | 0, 2, $1 + 12 | 0, $1 + 8 | 0, $3, $5);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 32, 53632);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($6, 44);
   SAFE_HEAP_STORE_f32_4_4($6, 8, SAFE_HEAP_LOAD_f32_4_4(($6 + ($0 << 2) | 0) + 36 | 0, 0));
   $4 = $6 + 8 | 0;
   $1 = _emval_take_value(72796, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $6 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_90____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $11 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $12 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53688);
  access_value_float_2c_203ul____import_value_28_29($6 + 28 | 0);
  $1 = $6 + 8 | 0;
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  $10 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 24, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6 + 8 | 0)
  }
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround($9);
  }
  $2 = ($12 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 12), wasm2js_i32$4 = $6 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $8);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $7);
  $0 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $11 : $0, 8, $6 + 32 | 0, 3, $1 + 12 | 0, $1 + 8 | 0, $3, $5);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53688);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($6, 44);
   SAFE_HEAP_STORE_f32_4_4($6, 8, SAFE_HEAP_LOAD_f32_4_4(($6 + ($0 << 2) | 0) + 32 | 0, 0));
   $4 = $6 + 8 | 0;
   $1 = _emval_take_value(72796, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $6 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_91____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $11 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $12 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 53744);
  access_value_float_2c_204ul____import_value_28_29($6 + 24 | 0);
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  $10 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6)
  }
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround($9);
  }
  $2 = ($12 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 4), wasm2js_i32$4 = $6 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $8);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $7);
  $0 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $11 : $0, 8, $6 + 28 | 0, 4, $1 + 12 | 0, $1 + 8 | 0, $3, $5);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 24, 53744);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($6, 44);
   SAFE_HEAP_STORE_f32_4_4($6, 0, SAFE_HEAP_LOAD_f32_4_4(($6 + ($0 << 2) | 0) + 28 | 0, 0));
   $1 = _emval_take_value(72796, $6 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 0, $0);
   $4 = $3;
   $3 = _emval_take_value(72760, $6 | 0) | 0;
   _emval_set_property($4 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $6 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_92____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = 0.0, $9 = 0.0, $10 = 0, $11 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $10 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $11 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53576);
  access_value_float_2c_201ul____import_value_28_29($6 + 20 | 0);
  $8 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6)
  }
  $3 = ($11 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53312);
  $2 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 4), wasm2js_i32$4 = $6 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $4 = $6 + 24 | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 4, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) * Math_fround(360.0)) / Math_fround(6.2831854820251465)));
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($8 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround(-3402823466385288598117041.0e14);
   if ($8 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround($8);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 12, $7);
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $7 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $7 = Math_fround($9);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $7);
  $0 = ImGui__SliderScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($3 ? $10 : $0, 8, $1 + 4 | 0, $1 + 12 | 0, $1 + 8 | 0, $2 ? $2 : 9442, $5);
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround(Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 4) * Math_fround(6.2831854820251465)) / Math_fround(360.0)));
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53576);
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 28);
  SAFE_HEAP_STORE_f32_4_4($6, 0, SAFE_HEAP_LOAD_f32_4_4($6, 24));
  $0 = _emval_take_value(72796, $6 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $3 = $2;
  $2 = _emval_take_value(72760, $6 | 0) | 0;
  _emval_set_property($3 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($7, 31, $8);
     $9 = $7 + 20 | 0;
     break label$2;
    }
    $10 = ($8 | 15) + 1 | 0;
    $9 = operator_20new_28unsigned_20long_29($10);
    SAFE_HEAP_STORE_i32_4_4($7, 28, $10 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($7, 20, $9);
    SAFE_HEAP_STORE_i32_4_4($7, 24, $8);
   }
   if ($8) {
    __memcpy($9, $1 + 4 | 0, $8)
   }
   SAFE_HEAP_STORE_i32_1_1($8 + $9 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 12, $5);
   SAFE_HEAP_STORE_i32_4_4($7, 16, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($7 + 20 | 0, $7 + 16 | 0, $3, $4, $7 + 12 | 0, $6) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($7, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 20))
   }
   __stack_pointer = $7 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_93____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53228);
  SAFE_HEAP_STORE_i32_4_4($6, 28, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $7 = _emval_take_value(72760, $6 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $7 | 0) | 0;
  _emval_decref($7 | 0);
  $8 = +_emval_as($1 | 0, 72724, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 24, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
  _emval_decref($1 | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6)
  }
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53312);
  $1 = ImGui__SliderInt_28char_20const__2c_20int__2c_20int_2c_20int_2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $9 : $0, $6 + 24 | 0, $2, $3, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 4), wasm2js_i32$4 = $6 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $5);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53228);
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 28);
  SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 24));
  $0 = _emval_take_value(72724, $6 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $3 = $2;
  $2 = _emval_take_value(72760, $6 | 0) | 0;
  _emval_set_property($3 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_94____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $8 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $9 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 32, 53896);
  $7 = $6 + 32 | 0;
  access_value_int_2c_202ul____import_value_28_29($7);
  SAFE_HEAP_STORE_i32_4_4($6 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 24, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6 + 8 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53312);
  $4 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 12), wasm2js_i32$4 = $6 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
  $0 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($9 | 0) < 0 ? $8 : $0, 4, $7 + 4 | 0, 2, $1 + 12 | 0, $1 + 8 | 0, $4, $5);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 32, 53896);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($6, 44);
   SAFE_HEAP_STORE_i32_4_4($6, 8, SAFE_HEAP_LOAD_i32_4_4(($6 + ($0 << 2) | 0) + 36 | 0, 0));
   $4 = $6 + 8 | 0;
   $1 = _emval_take_value(72724, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $6 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_95____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $8 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $9 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53952);
  $7 = $6 + 28 | 0;
  access_value_int_2c_203ul____import_value_28_29($7);
  SAFE_HEAP_STORE_i32_4_4($6 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 24, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6 + 8 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53312);
  $4 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 12), wasm2js_i32$4 = $6 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
  $0 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($9 | 0) < 0 ? $8 : $0, 4, $7 + 4 | 0, 3, $1 + 12 | 0, $1 + 8 | 0, $4, $5);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53952);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($6, 44);
   SAFE_HEAP_STORE_i32_4_4($6, 8, SAFE_HEAP_LOAD_i32_4_4(($6 + ($0 << 2) | 0) + 32 | 0, 0));
   $4 = $6 + 8 | 0;
   $1 = _emval_take_value(72724, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 8, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $6 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_96____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $8 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $9 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 54008);
  $7 = $6 + 24 | 0;
  access_value_int_2c_204ul____import_value_28_29($7);
  SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6)
  }
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53312);
  $4 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 4), wasm2js_i32$4 = $6 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
  $0 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($9 | 0) < 0 ? $8 : $0, 4, $7 + 4 | 0, 4, $1 + 12 | 0, $1 + 8 | 0, $4, $5);
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 24, 54008);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($6, 44);
   SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4(($6 + ($0 << 2) | 0) + 28 | 0, 0));
   $1 = _emval_take_value(72724, $6 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 0, $0);
   $4 = $3;
   $3 = _emval_take_value(72760, $6 | 0) | 0;
   _emval_set_property($4 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $6 + 48 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($8, 31, $9);
     $10 = $8 + 20 | 0;
     break label$2;
    }
    $11 = ($9 | 15) + 1 | 0;
    $10 = operator_20new_28unsigned_20long_29($11);
    SAFE_HEAP_STORE_i32_4_4($8, 28, $11 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($8, 20, $10);
    SAFE_HEAP_STORE_i32_4_4($8, 24, $9);
   }
   if ($9) {
    __memcpy($10, $1 + 4 | 0, $9)
   }
   SAFE_HEAP_STORE_i32_1_1($9 + $10 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
   SAFE_HEAP_STORE_i32_4_4($8, 16, $3);
   SAFE_HEAP_STORE_i32_4_4($8, 8, $5);
   SAFE_HEAP_STORE_i32_4_4($8, 4, $6);
   $0 = FUNCTION_TABLE[$0 | 0]($8 + 20 | 0, $2, $8 + 16 | 0, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $7) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 4) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 20))
   }
   __stack_pointer = $8 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_97____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 96 | 0;
  __stack_pointer = $7;
  label$1 : {
   label$2 : {
    switch ($1 | 0) {
    case 0:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_signed_20char___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54160);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72688, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 16, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54160);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72688, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 84, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 0, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 | 0, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95828) & 1)) {
      $4 = _emval_get_method_caller(2, 54204) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95828, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95824, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95824);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 1:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20char___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54220);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72676, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 16, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54220);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72676, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 84, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 1, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 | 0, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95836) & 1)) {
      $4 = _emval_get_method_caller(2, 54264) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95836, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95832, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95832);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 2:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_short___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54320);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72700, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 16, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54320);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72700, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 84, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 2, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 1, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95844) & 1)) {
      $4 = _emval_get_method_caller(2, 54364) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95844, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95840, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95840);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 3:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20short___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54420);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72712, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 16, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54420);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72712, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 84, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 3, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 1, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95852) & 1)) {
      $4 = _emval_get_method_caller(2, 54464) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95852, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95848, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95848);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 4:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_int___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54520);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72724, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 16, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54520);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72724, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 84, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 4, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95860) & 1)) {
      $4 = _emval_get_method_caller(2, 54564) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95860, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95856, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95856);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 5:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20int___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54620);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72736, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 16, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54620);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72736, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 84, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 5, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95868) & 1)) {
      $4 = _emval_get_method_caller(2, 54664) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95868, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95864, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95864);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 8:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_float___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54720);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72808, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      $11 = Math_fround(3402823466385288598117041.0e14);
      label$71 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$71
       }
       $11 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$71
       }
       $11 = Math_fround($8);
      }
      SAFE_HEAP_STORE_f32_4_4($7, 16, $11);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54720);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72808, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      $11 = Math_fround(3402823466385288598117041.0e14);
      label$73 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$73
       }
       $11 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$73
       }
       $11 = Math_fround($8);
      }
      SAFE_HEAP_STORE_f32_4_4($7, 84, $11);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 8, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95876) & 1)) {
      $4 = _emval_get_method_caller(2, 54764) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95876, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95872, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95872);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
   $1 = access_typed_array_double___access_typed_array_28emscripten__val__29($7 + 80 | 0, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 56, 54820);
   SAFE_HEAP_STORE_i32_4_4($7, 72, $3);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   if (($2 | 0) != 2) {
    $8 = +_emval_as($2 | 0, 72808, $7 + 32 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 32) | 0);
    SAFE_HEAP_STORE_f64_8_8($7, 64, $8);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0);
   SAFE_HEAP_STORE_i32_4_4($7, 32, 54820);
   SAFE_HEAP_STORE_i32_4_4($7, 48, $4);
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   if (($3 | 0) != 2) {
    $8 = +_emval_as($3 | 0, 72808, $7 + 12 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
    SAFE_HEAP_STORE_f64_8_8($7, 40, $8);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 48), 0);
   SAFE_HEAP_STORE_i32_4_4($7 + 24 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($7, 16, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 12, 53464);
   SAFE_HEAP_STORE_i32_4_4($7, 28, $5);
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
    import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 12 | 0)
   }
   SAFE_HEAP_STORE_i32_4_4($7, 12, 53312);
   $4 = ($10 | 0) < 0 ? $9 : $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $9 = ImGui__SliderScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 9, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 3, ($2 | 0) != 2 ? $7 - -64 | 0 : 0, ($3 | 0) != 2 ? $7 + 40 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 16), wasm2js_i32$4 = $7 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
   SAFE_HEAP_STORE_i32_4_4($7, 12, 53464);
   if ((SAFE_HEAP_LOAD_i32_1_1($7, 27) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 16))
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $2 = $2 - $0 >> 3;
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95884) & 1)) {
    $4 = _emval_get_method_caller(2, 54864) | 0;
    SAFE_HEAP_STORE_i32_1_1(0, 95884, 1);
    SAFE_HEAP_STORE_i32_4_4(0, 95880, $4);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95880);
   SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
   SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
   _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($0) {
    SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
    dlfree($0);
   }
  }
  __stack_pointer = $7 + 96 | 0;
  return $9 | 0;
 }
 
 function embind_init_ImGui_28_29__$_98____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $12 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $13 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($7, 40, 0, 0);
  $14 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $7 + 40 | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 36, $2);
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53576);
  access_value_float_2c_201ul____import_value_28_29($7 + 28 | 0);
  $1 = $7 + 8 | 0;
  $10 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  $11 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 24, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 8 | 0)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($10 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($10);
  }
  $2 = ($13 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53312);
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$4 = $7 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($11 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($11 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($11);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $9);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $8);
  $0 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $12 : $0, $14, 8, $7 + 32 | 0, $1 + 12 | 0, $1 + 8 | 0, $3, $6);
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53576);
  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 36);
  SAFE_HEAP_STORE_f32_4_4($7, 8, SAFE_HEAP_LOAD_f32_4_4($7, 32));
  $3 = $7 + 8 | 0;
  $0 = _emval_take_value(72796, $3 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 0);
  $4 = $2;
  $2 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $7 + 48 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_99____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $10 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $11 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($7, 40, 0, 0);
  $12 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $7 + 40 | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53228);
  SAFE_HEAP_STORE_i32_4_4($7, 36, $2);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 0);
  $2 = $7 + 8 | 0;
  $8 = _emval_take_value(72760, $2 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $8 | 0) | 0;
  _emval_decref($8 | 0);
  $9 = +_emval_as($1 | 0, 72724, $2 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 32, Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648);
  _emval_decref($1 | 0);
  SAFE_HEAP_STORE_i32_4_4($7 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($7, 24, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 8 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53312);
  $2 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$4 = $7 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $3);
  $0 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($11 | 0) < 0 ? $10 : $0, $12, 4, $7 + 32 | 0, $1 + 12 | 0, $1 + 8 | 0, $2, $6);
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($7, 28, 53228);
  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 36);
  SAFE_HEAP_STORE_i32_4_4($7, 8, SAFE_HEAP_LOAD_i32_4_4($7, 32));
  $3 = $7 + 8 | 0;
  $0 = _emval_take_value(72724, $3 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 8, 0);
  $4 = $2;
  $2 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $7 + 48 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  $9 = __stack_pointer - 32 | 0;
  __stack_pointer = $9;
  $10 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($10 >>> 0 < 2147483632) {
   label$2 : {
    if ($10 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($9, 31, $10);
     $11 = $9 + 20 | 0;
     break label$2;
    }
    $12 = ($10 | 15) + 1 | 0;
    $11 = operator_20new_28unsigned_20long_29($12);
    SAFE_HEAP_STORE_i32_4_4($9, 28, $12 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($9, 20, $11);
    SAFE_HEAP_STORE_i32_4_4($9, 24, $10);
   }
   if ($10) {
    __memcpy($11, $1 + 4 | 0, $10)
   }
   SAFE_HEAP_STORE_i32_1_1($10 + $11 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($9, 12, $4);
   SAFE_HEAP_STORE_i32_4_4($9, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($9, 8, $5);
   SAFE_HEAP_STORE_i32_4_4($9, 4, $6);
   SAFE_HEAP_STORE_i32_4_4($9, 0, $7);
   $0 = FUNCTION_TABLE[$0 | 0]($9 + 20 | 0, $9 + 16 | 0, $3, $9 + 12 | 0, $9 + 8 | 0, $9 + 4 | 0, $9, $8) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 4) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($9, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($9, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 20))
   }
   __stack_pointer = $9 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_100____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $8 = __stack_pointer - 96 | 0;
  __stack_pointer = $8;
  label$1 : {
   label$2 : {
    switch ($2 | 0) {
    case 0:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
     $1 = access_typed_array_signed_20char___access_typed_array_28emscripten__val__29($8 + 24 | 0, $3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, 54160);
     SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($4 | 0) != 2) {
      $9 = +_emval_as($4 | 0, 72688, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 8, Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 12), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 72, 54160);
     SAFE_HEAP_STORE_i32_4_4($8, 80, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($5 | 0) != 2) {
      $9 = +_emval_as($5 | 0, 72688, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 76, Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 80), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 60 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 52, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 64, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 48 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53312);
     $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 0, $3, ($4 | 0) != 2 ? $8 + 8 | 0 : 0, ($5 | 0) != 2 ? $8 + 76 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 52), wasm2js_i32$4 = $8 + 52 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 52))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95828) & 1)) {
      $4 = _emval_get_method_caller(2, 54204) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95828, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95824, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95824);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 1:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
     $1 = access_typed_array_unsigned_20char___access_typed_array_28emscripten__val__29($8 + 24 | 0, $3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, 54220);
     SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($4 | 0) != 2) {
      $9 = +_emval_as($4 | 0, 72676, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 8, $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 12), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 72, 54220);
     SAFE_HEAP_STORE_i32_4_4($8, 80, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($5 | 0) != 2) {
      $9 = +_emval_as($5 | 0, 72676, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_1_1($8, 76, $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 80), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 60 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 52, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 64, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 48 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53312);
     $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 1, $3, ($4 | 0) != 2 ? $8 + 8 | 0 : 0, ($5 | 0) != 2 ? $8 + 76 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 52), wasm2js_i32$4 = $8 + 52 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 52))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95836) & 1)) {
      $4 = _emval_get_method_caller(2, 54264) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95836, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95832, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95832);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 2:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
     $1 = access_typed_array_short___access_typed_array_28emscripten__val__29($8 + 24 | 0, $3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, 54320);
     SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($4 | 0) != 2) {
      $9 = +_emval_as($4 | 0, 72700, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 8, Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 12), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 72, 54320);
     SAFE_HEAP_STORE_i32_4_4($8, 80, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($5 | 0) != 2) {
      $9 = +_emval_as($5 | 0, 72700, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 76, Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 80), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 60 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 52, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 64, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 48 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53312);
     $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 2, $3, ($4 | 0) != 2 ? $8 + 8 | 0 : 0, ($5 | 0) != 2 ? $8 + 76 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 52), wasm2js_i32$4 = $8 + 52 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 52))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95844) & 1)) {
      $4 = _emval_get_method_caller(2, 54364) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95844, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95840, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95840);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 3:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
     $1 = access_typed_array_unsigned_20short___access_typed_array_28emscripten__val__29($8 + 24 | 0, $3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, 54420);
     SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($4 | 0) != 2) {
      $9 = +_emval_as($4 | 0, 72712, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 8, $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 12), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 72, 54420);
     SAFE_HEAP_STORE_i32_4_4($8, 80, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($5 | 0) != 2) {
      $9 = +_emval_as($5 | 0, 72712, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_2_2($8, 76, $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 80), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 60 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 52, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 64, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 48 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53312);
     $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 3, $3, ($4 | 0) != 2 ? $8 + 8 | 0 : 0, ($5 | 0) != 2 ? $8 + 76 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 52), wasm2js_i32$4 = $8 + 52 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 52))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95852) & 1)) {
      $4 = _emval_get_method_caller(2, 54464) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95852, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95848, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95848);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 4:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
     $1 = access_typed_array_int___access_typed_array_28emscripten__val__29($8 + 24 | 0, $3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, 54520);
     SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($4 | 0) != 2) {
      $9 = +_emval_as($4 | 0, 72724, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 8, Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 12), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 72, 54520);
     SAFE_HEAP_STORE_i32_4_4($8, 80, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($5 | 0) != 2) {
      $9 = +_emval_as($5 | 0, 72724, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 76, Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 80), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 60 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 52, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 64, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 48 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53312);
     $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 4, $3, ($4 | 0) != 2 ? $8 + 8 | 0 : 0, ($5 | 0) != 2 ? $8 + 76 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 52), wasm2js_i32$4 = $8 + 52 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 52))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95860) & 1)) {
      $4 = _emval_get_method_caller(2, 54564) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95860, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95856, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95856);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 5:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
     $1 = access_typed_array_unsigned_20int___access_typed_array_28emscripten__val__29($8 + 24 | 0, $3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, 54620);
     SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($4 | 0) != 2) {
      $9 = +_emval_as($4 | 0, 72736, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 8, $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 12), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 72, 54620);
     SAFE_HEAP_STORE_i32_4_4($8, 80, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($5 | 0) != 2) {
      $9 = +_emval_as($5 | 0, 72736, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      SAFE_HEAP_STORE_i32_4_4($8, 76, $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 80), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 60 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 52, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 64, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 48 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53312);
     $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 5, $3, ($4 | 0) != 2 ? $8 + 8 | 0 : 0, ($5 | 0) != 2 ? $8 + 76 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 52), wasm2js_i32$4 = $8 + 52 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 52))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95868) & 1)) {
      $4 = _emval_get_method_caller(2, 54664) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95868, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95864, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95864);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 8:
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
     $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
     $1 = access_typed_array_float___access_typed_array_28emscripten__val__29($8 + 24 | 0, $3);
     $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 4, 54720);
     SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
     $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($4 | 0) != 2) {
      $9 = +_emval_as($4 | 0, 72808, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      $12 = Math_fround(3402823466385288598117041.0e14);
      label$71 : {
       if ($9 >= 3402823466385288598117041.0e14) {
        break label$71
       }
       $12 = Math_fround(-3402823466385288598117041.0e14);
       if ($9 <= -3402823466385288598117041.0e14) {
        break label$71
       }
       $12 = Math_fround($9);
      }
      SAFE_HEAP_STORE_f32_4_4($8, 8, $12);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 12), 0);
     SAFE_HEAP_STORE_i32_4_4($8, 72, 54720);
     SAFE_HEAP_STORE_i32_4_4($8, 80, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
     if (($5 | 0) != 2) {
      $9 = +_emval_as($5 | 0, 72808, $8 + 48 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 48) | 0);
      $12 = Math_fround(3402823466385288598117041.0e14);
      label$73 : {
       if ($9 >= 3402823466385288598117041.0e14) {
        break label$73
       }
       $12 = Math_fround(-3402823466385288598117041.0e14);
       if ($9 <= -3402823466385288598117041.0e14) {
        break label$73
       }
       $12 = Math_fround($9);
      }
      SAFE_HEAP_STORE_f32_4_4($8, 76, $12);
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 80), 0);
     SAFE_HEAP_STORE_i32_4_4($8 + 60 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($8, 52, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     SAFE_HEAP_STORE_i32_4_4($8, 64, $6);
     if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 48 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53312);
     $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 8, $3, ($4 | 0) != 2 ? $8 + 8 | 0 : 0, ($5 | 0) != 2 ? $8 + 76 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 52), wasm2js_i32$4 = $8 + 52 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
     SAFE_HEAP_STORE_i32_4_4($8, 48, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($8, 63) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 52))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95876) & 1)) {
      $4 = _emval_get_method_caller(2, 54764) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95876, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95872, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95872);
     SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
     SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
   SAFE_HEAP_STORE_i64_8_4($8, 88, 0, 0);
   $11 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $8 + 88 | 0);
   $1 = access_typed_array_double___access_typed_array_28emscripten__val__29($8 + 72 | 0, $3);
   $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 48, 54820);
   SAFE_HEAP_STORE_i32_4_4($8, 64, $4);
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   if (($4 | 0) != 2) {
    $9 = +_emval_as($4 | 0, 72808, $8 + 24 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 24) | 0);
    SAFE_HEAP_STORE_f64_8_8($8, 56, $9);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 64), 0);
   SAFE_HEAP_STORE_i32_4_4($8, 24, 54820);
   SAFE_HEAP_STORE_i32_4_4($8, 40, $5);
   $5 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
   if (($5 | 0) != 2) {
    $9 = +_emval_as($5 | 0, 72808, $8 + 4 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($8, 4) | 0);
    SAFE_HEAP_STORE_f64_8_8($8, 32, $9);
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 40), 0);
   SAFE_HEAP_STORE_i32_4_4($8 + 16 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($8, 8, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 4, 53464);
   SAFE_HEAP_STORE_i32_4_4($8, 20, $6);
   if ((SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0) != 2) {
    import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 4 | 0)
   }
   SAFE_HEAP_STORE_i32_4_4($8, 4, 53312);
   $10 = ImGui__VSliderScalar_28char_20const__2c_20ImVec2_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $2 : $0, $11, 9, $3, ($4 | 0) != 2 ? $8 + 56 | 0 : 0, ($5 | 0) != 2 ? $8 + 32 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 8), wasm2js_i32$4 = $8 + 8 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 19) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 20), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $7);
   SAFE_HEAP_STORE_i32_4_4($8, 4, 53464);
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 19) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 8))
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $2 = $2 - $0 >> 3;
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95884) & 1)) {
    $4 = _emval_get_method_caller(2, 54864) | 0;
    SAFE_HEAP_STORE_i32_1_1(0, 95884, 1);
    SAFE_HEAP_STORE_i32_4_4(0, 95880, $4);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95880);
   SAFE_HEAP_STORE_i32_4_4($8, 52, $0);
   SAFE_HEAP_STORE_i32_4_4($8, 48, $2);
   _emval_call_void_method($4 | 0, $3 | 0, 3559, $8 + 48 | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($0) {
    SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
    dlfree($0);
   }
  }
  __stack_pointer = $8 + 96 | 0;
  return $10 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20unsigned_20long_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($7, 31, $8);
     $9 = $7 + 20 | 0;
     break label$2;
    }
    $10 = ($8 | 15) + 1 | 0;
    $9 = operator_20new_28unsigned_20long_29($10);
    SAFE_HEAP_STORE_i32_4_4($7, 28, $10 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($7, 20, $9);
    SAFE_HEAP_STORE_i32_4_4($7, 24, $8);
   }
   if ($8) {
    __memcpy($9, $1 + 4 | 0, $8)
   }
   SAFE_HEAP_STORE_i32_1_1($8 + $9 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 12, $5);
   SAFE_HEAP_STORE_i32_4_4($7, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $6);
   $0 = FUNCTION_TABLE[$0 | 0]($7 + 20 | 0, $7 + 16 | 0, $3, $4, $7 + 12 | 0, $7 + 8 | 0) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($7, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 20))
   }
   __stack_pointer = $7 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_101____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 0);
  $8 = $5;
  $5 = _emval_take_value(72724, $6 + 24 | 0) | 0;
  $10 = _emval_get_property($8 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  label$3 : {
   $9 = +_emval_as($10 | 0, 49072, $6 + 12 | 0);
   label$1 : {
    if ($9 < 4294967296.0 & $9 >= 0.0) {
     $8 = ~~$9 >>> 0;
     break label$1;
    }
    $8 = 0;
   }
   $7 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
   if ($7 >>> 0 < 2147483632) {
    $12 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
    label$5 : {
     if ($7 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($6, 35, $7);
      $5 = $6 + 24 | 0;
      break label$5;
     }
     $11 = ($7 | 15) + 1 | 0;
     $5 = operator_20new_28unsigned_20long_29($11);
     SAFE_HEAP_STORE_i32_4_4($6, 32, $11 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($6, 24, $5);
     SAFE_HEAP_STORE_i32_4_4($6, 28, $7);
    }
    if ($7) {
     __memcpy($5, $8 + 4 | 0, $7)
    }
    SAFE_HEAP_STORE_i32_1_1($5 + $7 | 0, 0, 0);
    _emval_run_destructors($12 | 0);
    _emval_decref($10 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____reserve_28unsigned_20long_29($6 + 24 | 0, $2);
    $7 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
    label$8 : {
     if (($7 | 0) != 2) {
      $5 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
      _emval_incref($7 | 0);
      _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 120) | 0);
      SAFE_HEAP_STORE_i32_4_4($5, 120, SAFE_HEAP_LOAD_i32_4_4($4, 0));
      $4 = ImGui__InputText_28char_20const__2c_20char__2c_20unsigned_20long_2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($6, 24), wasm2js_i32$1 = $6 + 24 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($6, 35) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2, $3, 868);
      break label$8;
     }
     $4 = ImGui__InputText_28char_20const__2c_20char__2c_20unsigned_20long_2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($6, 24), wasm2js_i32$1 = $6 + 24 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($6, 35) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2, $3, 0);
    }
    $3 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($6, 24), wasm2js_i32$1 = $6 + 24 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($6, 35) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    $2 = strlen($3);
    if ($2 >>> 0 >= 2147483632) {
     break label$3
    }
    label$10 : {
     if ($2 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($6, 23, $2);
      $0 = $6 + 12 | 0;
      break label$10;
     }
     $5 = ($2 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($5);
     SAFE_HEAP_STORE_i32_4_4($6, 20, $5 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($6, 12, $0);
     SAFE_HEAP_STORE_i32_4_4($6, 16, $2);
    }
    if ($2) {
     memmove($0, $3, $2)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 40, 0);
    $7 = $6 + 40 | 0;
    $0 = _emval_take_value(72724, $7 | 0) | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
    $3 = SAFE_HEAP_LOAD_i32_1_1($6, 23);
    $1 = ($3 | 0) < 0;
    $2 = $1 ? $2 : $3 & 127;
    $3 = dlmalloc($2 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
    __memcpy($3 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($6, 12), wasm2js_i32$1 = $6 + 12 | 0, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2);
    SAFE_HEAP_STORE_i32_4_4($6, 40, $3);
    $1 = _emval_take_value(49072, $7 | 0) | 0;
    _emval_set_property($5 | 0, $0 | 0, $1 | 0);
    _emval_decref($1 | 0);
    _emval_decref($0 | 0);
    if ((SAFE_HEAP_LOAD_i32_1_1($6, 23) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 12))
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($6, 35) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 24))
    }
    __stack_pointer = $6 + 48 | 0;
    return $4 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20unsigned_20long_2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($8, 31, $9);
     $10 = $8 + 20 | 0;
     break label$2;
    }
    $11 = ($9 | 15) + 1 | 0;
    $10 = operator_20new_28unsigned_20long_29($11);
    SAFE_HEAP_STORE_i32_4_4($8, 28, $11 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($8, 20, $10);
    SAFE_HEAP_STORE_i32_4_4($8, 24, $9);
   }
   if ($9) {
    __memcpy($10, $1 + 4 | 0, $9)
   }
   SAFE_HEAP_STORE_i32_1_1($9 + $10 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($8, 12, $4);
   SAFE_HEAP_STORE_i32_4_4($8, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($8, 8, $6);
   SAFE_HEAP_STORE_i32_4_4($8, 4, $7);
   $0 = FUNCTION_TABLE[$0 | 0]($8 + 20 | 0, $8 + 16 | 0, $3, $8 + 12 | 0, $5, $8 + 8 | 0, $8 + 4 | 0) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 4) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 8) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 20))
   }
   __stack_pointer = $8 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_102____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 24, 0);
  $10 = $6;
  $6 = _emval_take_value(72724, $7 + 24 | 0) | 0;
  $9 = _emval_get_property($10 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  label$3 : {
   $11 = +_emval_as($9 | 0, 49072, $7 + 12 | 0);
   label$1 : {
    if ($11 < 4294967296.0 & $11 >= 0.0) {
     $10 = ~~$11 >>> 0;
     break label$1;
    }
    $10 = 0;
   }
   $8 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
   if ($8 >>> 0 < 2147483632) {
    $13 = SAFE_HEAP_LOAD_i32_4_4($7, 12);
    label$5 : {
     if ($8 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($7, 35, $8);
      $6 = $7 + 24 | 0;
      break label$5;
     }
     $12 = ($8 | 15) + 1 | 0;
     $6 = operator_20new_28unsigned_20long_29($12);
     SAFE_HEAP_STORE_i32_4_4($7, 32, $12 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($7, 24, $6);
     SAFE_HEAP_STORE_i32_4_4($7, 28, $8);
    }
    if ($8) {
     __memcpy($6, $10 + 4 | 0, $8)
    }
    SAFE_HEAP_STORE_i32_1_1($6 + $8 | 0, 0, 0);
    _emval_run_destructors($13 | 0);
    _emval_decref($9 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____reserve_28unsigned_20long_29($7 + 24 | 0, $2);
    $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    label$8 : {
     if (($8 | 0) != 2) {
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
      _emval_incref($8 | 0);
      _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 124) | 0);
      SAFE_HEAP_STORE_i32_4_4($6, 124, SAFE_HEAP_LOAD_i32_4_4($5, 0));
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
      $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
      $8 = SAFE_HEAP_LOAD_i32_4_4($7, 24);
      $9 = SAFE_HEAP_LOAD_i32_1_1($7, 35);
      SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
      $4 = ImGui__InputTextMultiline_28char_20const__2c_20char__2c_20unsigned_20long_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29(($6 | 0) < 0 ? $5 : $0, ($9 | 0) < 0 ? $8 : $7 + 24 | 0, $2, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $7 + 12 | 0), $4, 869);
      break label$8;
     }
     $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $8 = SAFE_HEAP_LOAD_i32_4_4($7, 24);
     $9 = SAFE_HEAP_LOAD_i32_1_1($7, 35);
     SAFE_HEAP_STORE_i64_8_4($7, 12, 0, 0);
     $4 = ImGui__InputTextMultiline_28char_20const__2c_20char__2c_20unsigned_20long_2c_20ImVec2_20const__2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29(($6 | 0) < 0 ? $5 : $0, ($9 | 0) < 0 ? $8 : $7 + 24 | 0, $2, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $7 + 12 | 0), $4, 0);
    }
    $3 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($7, 24), wasm2js_i32$1 = $7 + 24 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($7, 35) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    $2 = strlen($3);
    if ($2 >>> 0 >= 2147483632) {
     break label$3
    }
    label$10 : {
     if ($2 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($7, 23, $2);
      $0 = $7 + 12 | 0;
      break label$10;
     }
     $5 = ($2 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($5);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $5 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($7, 12, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 16, $2);
    }
    if ($2) {
     memmove($0, $3, $2)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($7, 40, 0);
    $6 = $7 + 40 | 0;
    $0 = _emval_take_value(72724, $6 | 0) | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4($7, 16);
    $3 = SAFE_HEAP_LOAD_i32_1_1($7, 23);
    $1 = ($3 | 0) < 0;
    $2 = $1 ? $2 : $3 & 127;
    $3 = dlmalloc($2 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
    __memcpy($3 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$1 = $7 + 12 | 0, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2);
    SAFE_HEAP_STORE_i32_4_4($7, 40, $3);
    $1 = _emval_take_value(49072, $6 | 0) | 0;
    _emval_set_property($5 | 0, $0 | 0, $1 | 0);
    _emval_decref($1 | 0);
    _emval_decref($0 | 0);
    if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($7, 35) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 24))
    }
    __stack_pointer = $7 + 48 | 0;
    return $4 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20unsigned_20long_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 48 | 0;
  __stack_pointer = $8;
  label$1 : {
   $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($9 >>> 0 < 2147483632) {
    label$3 : {
     if ($9 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($8, 47, $9);
      $10 = $8 + 36 | 0;
      break label$3;
     }
     $11 = ($9 | 15) + 1 | 0;
     $10 = operator_20new_28unsigned_20long_29($11);
     SAFE_HEAP_STORE_i32_4_4($8, 44, $11 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($8, 36, $10);
     SAFE_HEAP_STORE_i32_4_4($8, 40, $9);
    }
    if ($9) {
     __memcpy($10, $1 + 4 | 0, $9)
    }
    SAFE_HEAP_STORE_i32_1_1($9 + $10 | 0, 0, 0);
    $9 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    if ($9 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($9 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($8, 35, $9);
      $1 = $8 + 24 | 0;
      break label$6;
     }
     $10 = ($9 | 15) + 1 | 0;
     $1 = operator_20new_28unsigned_20long_29($10);
     SAFE_HEAP_STORE_i32_4_4($8, 32, $10 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($8, 24, $1);
     SAFE_HEAP_STORE_i32_4_4($8, 28, $9);
    }
    if ($9) {
     __memcpy($1, $2 + 4 | 0, $9)
    }
    SAFE_HEAP_STORE_i32_1_1($1 + $9 | 0, 0, 0);
    SAFE_HEAP_STORE_i32_4_4($8, 16, $6);
    SAFE_HEAP_STORE_i32_4_4($8, 20, $3);
    SAFE_HEAP_STORE_i32_4_4($8, 12, $7);
    $0 = FUNCTION_TABLE[$0 | 0]($8 + 36 | 0, $8 + 24 | 0, $8 + 20 | 0, $4, $5, $8 + 16 | 0, $8 + 12 | 0) | 0;
    _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 12) | 0);
    _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0);
    _emval_decref(SAFE_HEAP_LOAD_i32_4_4($8, 20) | 0);
    if ((SAFE_HEAP_LOAD_i32_1_1($8, 35) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 24))
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($8, 47) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 36))
    }
    __stack_pointer = $8 + 48 | 0;
    return $0 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_103____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = __stack_pointer - 48 | 0;
  __stack_pointer = $7;
  $6 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 24, 0);
  $9 = $6;
  $6 = _emval_take_value(72724, $7 + 24 | 0) | 0;
  $11 = _emval_get_property($9 | 0, $6 | 0) | 0;
  _emval_decref($6 | 0);
  label$3 : {
   $10 = +_emval_as($11 | 0, 49072, $7 + 12 | 0);
   label$1 : {
    if ($10 < 4294967296.0 & $10 >= 0.0) {
     $9 = ~~$10 >>> 0;
     break label$1;
    }
    $9 = 0;
   }
   $8 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
   if ($8 >>> 0 < 2147483632) {
    $13 = SAFE_HEAP_LOAD_i32_4_4($7, 12);
    label$5 : {
     if ($8 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($7, 35, $8);
      $6 = $7 + 24 | 0;
      break label$5;
     }
     $12 = ($8 | 15) + 1 | 0;
     $6 = operator_20new_28unsigned_20long_29($12);
     SAFE_HEAP_STORE_i32_4_4($7, 32, $12 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($7, 24, $6);
     SAFE_HEAP_STORE_i32_4_4($7, 28, $8);
    }
    if ($8) {
     __memcpy($6, $9 + 4 | 0, $8)
    }
    SAFE_HEAP_STORE_i32_1_1($6 + $8 | 0, 0, 0);
    _emval_run_destructors($13 | 0);
    _emval_decref($11 | 0);
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____reserve_28unsigned_20long_29($7 + 24 | 0, $3);
    $8 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    label$8 : {
     if (($8 | 0) != 2) {
      $6 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
      _emval_incref($8 | 0);
      _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 120) | 0);
      SAFE_HEAP_STORE_i32_4_4($6, 120, SAFE_HEAP_LOAD_i32_4_4($5, 0));
      $4 = ImGui__InputTextWithHint_28char_20const__2c_20char_20const__2c_20char__2c_20unsigned_20long_2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($7, 24), wasm2js_i32$1 = $7 + 24 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($7, 35) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3, $4, 870);
      break label$8;
     }
     $4 = ImGui__InputTextWithHint_28char_20const__2c_20char_20const__2c_20char__2c_20unsigned_20long_2c_20int_2c_20int_20_28__29_28ImGuiInputTextCallbackData__29_2c_20void__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($7, 24), wasm2js_i32$1 = $7 + 24 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($7, 35) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3, $4, 0);
    }
    $3 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($7, 24), wasm2js_i32$1 = $7 + 24 | 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($7, 35) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
    $0 = strlen($3);
    if ($0 >>> 0 >= 2147483632) {
     break label$3
    }
    label$10 : {
     if ($0 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($7, 23, $0);
      $1 = $7 + 12 | 0;
      break label$10;
     }
     $5 = ($0 | 15) + 1 | 0;
     $1 = operator_20new_28unsigned_20long_29($5);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $5 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($7, 12, $1);
     SAFE_HEAP_STORE_i32_4_4($7, 16, $0);
    }
    if ($0) {
     memmove($1, $3, $0)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($7, 40, 0);
    $6 = $7 + 40 | 0;
    $0 = _emval_take_value(72724, $6 | 0) | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4($7, 16);
    $3 = SAFE_HEAP_LOAD_i32_1_1($7, 23);
    $1 = ($3 | 0) < 0;
    $2 = $1 ? $2 : $3 & 127;
    $3 = dlmalloc($2 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
    __memcpy($3 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($7, 12), wasm2js_i32$1 = $7 + 12 | 0, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2);
    SAFE_HEAP_STORE_i32_4_4($7, 40, $3);
    $1 = _emval_take_value(49072, $6 | 0) | 0;
    _emval_set_property($5 | 0, $0 | 0, $1 | 0);
    _emval_decref($1 | 0);
    _emval_decref($0 | 0);
    if ((SAFE_HEAP_LOAD_i32_1_1($7, 23) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 12))
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($7, 35) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 24))
    }
    __stack_pointer = $7 + 48 | 0;
    return $4 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_104____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10 = 0.0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $11 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $12 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53576);
  access_value_float_2c_201ul____import_value_28_29($6 + 20 | 0);
  $9 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  $10 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6)
  }
  $2 = ($12 | 0) < 0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53312);
  $7 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7 = Math_fround($9);
  }
  $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 4), wasm2js_i32$4 = $6 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10);
  }
  SAFE_HEAP_STORE_f32_4_4($1, 8, $8);
  SAFE_HEAP_STORE_f32_4_4($1, 12, $7);
  $0 = ImGui__InputScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($2 ? $11 : $0, 8, $6 + 24 | 0, $7 > Math_fround(0.0) ? $1 + 12 | 0 : 0, $8 > Math_fround(0.0) ? $1 + 8 | 0 : 0, $3, $5 | 131072);
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 20, 53576);
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 28);
  SAFE_HEAP_STORE_f32_4_4($6, 0, SAFE_HEAP_LOAD_f32_4_4($6, 24));
  $0 = _emval_take_value(72796, $6 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $3 = $2;
  $2 = _emval_take_value(72760, $6 | 0) | 0;
  _emval_set_property($3 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($6 >>> 0 < 2147483632) {
   label$2 : {
    if ($6 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 31, $6);
     $7 = $5 + 20 | 0;
     break label$2;
    }
    $8 = ($6 | 15) + 1 | 0;
    $7 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($5, 28, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 20, $7);
    SAFE_HEAP_STORE_i32_4_4($5, 24, $6);
   }
   if ($6) {
    __memcpy($7, $1 + 4 | 0, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($6 + $7 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 12, $3);
   SAFE_HEAP_STORE_i32_4_4($5, 16, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($5 + 20 | 0, $5 + 16 | 0, $5 + 12 | 0, $4) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 20))
   }
   __stack_pointer = $5 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_105____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 32, 53632);
  $1 = $4 + 32 | 0;
  access_value_float_2c_202ul____import_value_28_29($1);
  SAFE_HEAP_STORE_i32_4_4($4 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($4, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($4, 24, $2);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($4 + 8 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($4, 8, 53312);
  $2 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($6 | 0) < 0 ? $5 : $0, 8, $1 + 4 | 0, 2, 0, 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($4, 12), wasm2js_i32$4 = $4 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($4, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3);
  SAFE_HEAP_STORE_i32_4_4($4, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($4, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($4, 32, 53632);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 44);
   SAFE_HEAP_STORE_f32_4_4($4, 8, SAFE_HEAP_LOAD_f32_4_4(($4 + ($0 << 2) | 0) + 36 | 0, 0));
   $5 = $4 + 8 | 0;
   $1 = _emval_take_value(72796, $5 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 8, $0);
   $6 = $3;
   $3 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $4 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_106____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 28, 53688);
  $1 = $4 + 28 | 0;
  access_value_float_2c_203ul____import_value_28_29($1);
  SAFE_HEAP_STORE_i32_4_4($4 + 20 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($4, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 8, 53464);
  SAFE_HEAP_STORE_i32_4_4($4, 24, $2);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($4 + 8 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($4, 8, 53312);
  $2 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($6 | 0) < 0 ? $5 : $0, 8, $1 + 4 | 0, 3, 0, 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($4, 12), wasm2js_i32$4 = $4 + 12 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($4, 23) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 24), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3);
  SAFE_HEAP_STORE_i32_4_4($4, 8, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($4, 23) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 12))
  }
  SAFE_HEAP_STORE_i32_4_4($4, 28, 53688);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 44);
   SAFE_HEAP_STORE_f32_4_4($4, 8, SAFE_HEAP_LOAD_f32_4_4(($4 + ($0 << 2) | 0) + 32 | 0, 0));
   $5 = $4 + 8 | 0;
   $1 = _emval_take_value(72796, $5 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 8, $0);
   $6 = $3;
   $3 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $4 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_107____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 24, 53744);
  $1 = $4 + 24 | 0;
  access_value_float_2c_204ul____import_value_28_29($1);
  SAFE_HEAP_STORE_i32_4_4($4 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($4, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($4, 16, $2);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($4)
  }
  SAFE_HEAP_STORE_i32_4_4($4, 0, 53312);
  $2 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($6 | 0) < 0 ? $5 : $0, 8, $1 + 4 | 0, 4, 0, 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($4, 4), wasm2js_i32$4 = $4 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3);
  SAFE_HEAP_STORE_i32_4_4($4, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($4, 24, 53744);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 44);
   SAFE_HEAP_STORE_f32_4_4($4, 0, SAFE_HEAP_LOAD_f32_4_4(($4 + ($0 << 2) | 0) + 28 | 0, 0));
   $1 = _emval_take_value(72796, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $4 + 48 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($7 >>> 0 < 2147483632) {
   label$2 : {
    if ($7 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($6, 15, $7);
     $8 = $6 + 4 | 0;
     break label$2;
    }
    $9 = ($7 | 15) + 1 | 0;
    $8 = operator_20new_28unsigned_20long_29($9);
    SAFE_HEAP_STORE_i32_4_4($6, 12, $9 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($6, 4, $8);
    SAFE_HEAP_STORE_i32_4_4($6, 8, $7);
   }
   if ($7) {
    __memcpy($8, $1 + 4 | 0, $7)
   }
   SAFE_HEAP_STORE_i32_1_1($7 + $8 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($6 + 4 | 0, $6, $3, $4, $5) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
   }
   __stack_pointer = $6 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_108____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($5, 12, 53228);
  SAFE_HEAP_STORE_i32_4_4($5, 20, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 24, 0);
  $6 = $5 + 24 | 0;
  $7 = _emval_take_value(72760, $6 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $7 | 0) | 0;
  _emval_decref($7 | 0);
  $8 = +_emval_as($1 | 0, 72724, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 24) | 0);
  SAFE_HEAP_STORE_i32_4_4($5, 16, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
  _emval_decref($1 | 0);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, $3);
  SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
  $2 = ImGui__InputScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($10 | 0) < 0 ? $9 : $0, 4, $5 + 16 | 0, ($2 | 0) > 0 ? $1 + 12 | 0 : 0, ($3 | 0) > 0 ? $1 + 8 | 0 : 0, $4 & 2 ? 14638 : 13404, $4);
  __stack_pointer = $1 + 16 | 0;
  SAFE_HEAP_STORE_i32_4_4($5, 12, 53228);
  $1 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
  SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_4_4($5, 16));
  $3 = $6;
  $0 = _emval_take_value(72724, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 24, 0);
  $4 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $1 | 0, $0 | 0);
  _emval_decref($1 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_109____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  SAFE_HEAP_STORE_i32_4_4($3, 8, 53896);
  $1 = $3 + 8 | 0;
  access_value_int_2c_202ul____import_value_28_29($1);
  $2 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($5 | 0) < 0 ? $4 : $0, 4, $1 + 4 | 0, 2, 0, 0, 13404, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, 53896);
  $0 = 0;
  while (1) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
   SAFE_HEAP_STORE_i32_4_4($3, 24, SAFE_HEAP_LOAD_i32_4_4(($3 + ($0 << 2) | 0) + 12 | 0, 0));
   $5 = $3 + 24 | 0;
   $1 = _emval_take_value(72724, $5 | 0) | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 24, $0);
   $6 = $4;
   $4 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $4 | 0, $1 | 0);
   _emval_decref($4 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_110____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  SAFE_HEAP_STORE_i32_4_4($3, 4, 53952);
  $1 = $3 + 4 | 0;
  access_value_int_2c_203ul____import_value_28_29($1);
  $2 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($5 | 0) < 0 ? $4 : $0, 4, $1 + 4 | 0, 3, 0, 0, 13404, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 4, 53952);
  $0 = 0;
  while (1) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
   SAFE_HEAP_STORE_i32_4_4($3, 24, SAFE_HEAP_LOAD_i32_4_4(($3 + ($0 << 2) | 0) + 8 | 0, 0));
   $5 = $3 + 24 | 0;
   $1 = _emval_take_value(72724, $5 | 0) | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 24, $0);
   $6 = $4;
   $4 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $4 | 0, $1 | 0);
   _emval_decref($4 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_111____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  SAFE_HEAP_STORE_i32_4_4($3, 0, 54008);
  access_value_int_2c_204ul____import_value_28_29($3);
  $2 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($5 | 0) < 0 ? $4 : $0, 4, $3 + 4 | 0, 4, 0, 0, 13404, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 0, 54008);
  $0 = 0;
  while (1) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
   SAFE_HEAP_STORE_i32_4_4($3, 24, SAFE_HEAP_LOAD_i32_4_4((($0 << 2) + $3 | 0) + 4 | 0, 0));
   $5 = $3 + 24 | 0;
   $1 = _emval_take_value(72724, $5 | 0) | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 24, $0);
   $6 = $4;
   $4 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $4 | 0, $1 | 0);
   _emval_decref($4 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20double_2c_20double_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20double_2c_20double_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20double_2c_20double_2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = +$3;
  $4 = +$4;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $8 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($7, 31, $8);
     $9 = $7 + 20 | 0;
     break label$2;
    }
    $10 = ($8 | 15) + 1 | 0;
    $9 = operator_20new_28unsigned_20long_29($10);
    SAFE_HEAP_STORE_i32_4_4($7, 28, $10 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($7, 20, $9);
    SAFE_HEAP_STORE_i32_4_4($7, 24, $8);
   }
   if ($8) {
    __memcpy($9, $1 + 4 | 0, $8)
   }
   SAFE_HEAP_STORE_i32_1_1($8 + $9 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 12, $5);
   SAFE_HEAP_STORE_i32_4_4($7, 16, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($7 + 20 | 0, $7 + 16 | 0, $3, $4, $7 + 12 | 0, $6) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($7, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 20))
   }
   __stack_pointer = $7 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_112____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20double_2c_20double_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = +$2;
  $3 = +$3;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0.0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  $8 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $9 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 55232);
  SAFE_HEAP_STORE_i32_4_4($6, 40, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $7 = _emval_take_value(72760, $6 | 0) | 0;
  $1 = _emval_get_property($1 | 0, $7 | 0) | 0;
  _emval_decref($7 | 0);
  $10 = +_emval_as($1 | 0, 72808, $6 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
  SAFE_HEAP_STORE_f64_8_8($6, 32, $10);
  _emval_decref($1 | 0);
  SAFE_HEAP_STORE_i32_4_4($6 + 12 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($6, 4, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  SAFE_HEAP_STORE_i32_4_4($6, 16, $4);
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($6)
  }
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53312);
  $4 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($6, 4), wasm2js_i32$4 = $6 + 4 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($6, 16), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_f64_8_8($1, 0, $3);
  SAFE_HEAP_STORE_f64_8_8($1, 8, $2);
  $0 = ImGui__InputScalar_28char_20const__2c_20int_2c_20void__2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29(($9 | 0) < 0 ? $8 : $0, 9, $6 + 32 | 0, $2 > 0.0 ? $1 + 8 | 0 : 0, $3 > 0.0 ? $1 : 0, $4, $5 | 131072);
  __stack_pointer = $1 + 16 | 0;
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
  }
  SAFE_HEAP_STORE_i32_4_4($6, 24, 55232);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 40);
  SAFE_HEAP_STORE_f64_8_8($6, 0, SAFE_HEAP_LOAD_f64_8_8($6, 32));
  $0 = _emval_take_value(72808, $6 | 0) | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $5 = $4;
  $4 = _emval_take_value(72760, $6 | 0) | 0;
  _emval_set_property($5 | 0, $4 | 0, $0 | 0);
  _emval_decref($4 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $6 + 48 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_113____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $7 = __stack_pointer - 96 | 0;
  __stack_pointer = $7;
  label$1 : {
   label$2 : {
    switch ($1 | 0) {
    case 0:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_signed_20char___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54160);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72688, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 16, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54160);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72688, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 84, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 0, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 | 0, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95828) & 1)) {
      $4 = _emval_get_method_caller(2, 54204) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95828, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95824, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95824);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 1:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20char___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54220);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72676, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 16, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54220);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72676, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_1_1($7, 84, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 1, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 | 0, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 | 0;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95836) & 1)) {
      $4 = _emval_get_method_caller(2, 54264) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95836, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95832, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95832);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 2:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_short___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54320);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72700, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 16, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54320);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72700, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 84, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 2, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 1, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95844) & 1)) {
      $4 = _emval_get_method_caller(2, 54364) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95844, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95840, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95840);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 3:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20short___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54420);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72712, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 16, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54420);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72712, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_2_2($7, 84, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 3, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 1, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 1;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95852) & 1)) {
      $4 = _emval_get_method_caller(2, 54464) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95852, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95848, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95848);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 4:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_int___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54520);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72724, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 16, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54520);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72724, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 84, Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 4, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95860) & 1)) {
      $4 = _emval_get_method_caller(2, 54564) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95860, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95856, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95856);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 5:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_unsigned_20int___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54620);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72736, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 16, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54620);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72736, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      SAFE_HEAP_STORE_i32_4_4($7, 84, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 5, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95868) & 1)) {
      $4 = _emval_get_method_caller(2, 54664) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95868, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95864, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95864);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 8:
     $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
     $1 = access_typed_array_float___access_typed_array_28emscripten__val__29($7 + 32 | 0, $2);
     SAFE_HEAP_STORE_i32_4_4($7, 12, 54720);
     SAFE_HEAP_STORE_i32_4_4($7, 20, $3);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
     if (($2 | 0) != 2) {
      $8 = +_emval_as($2 | 0, 72808, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      $11 = Math_fround(3402823466385288598117041.0e14);
      label$71 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$71
       }
       $11 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$71
       }
       $11 = Math_fround($8);
      }
      SAFE_HEAP_STORE_f32_4_4($7, 16, $11);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 20), 0);
     SAFE_HEAP_STORE_i32_4_4($7, 80, 54720);
     SAFE_HEAP_STORE_i32_4_4($7, 88, $4);
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
     if (($3 | 0) != 2) {
      $8 = +_emval_as($3 | 0, 72808, $7 + 56 | 0);
      _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 56) | 0);
      $11 = Math_fround(3402823466385288598117041.0e14);
      label$73 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$73
       }
       $11 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$73
       }
       $11 = Math_fround($8);
      }
      SAFE_HEAP_STORE_f32_4_4($7, 84, $11);
     }
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 88), 0);
     SAFE_HEAP_STORE_i32_4_4($7 + 68 | 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($7, 60, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     SAFE_HEAP_STORE_i32_4_4($7, 72, $5);
     if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
      import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 56 | 0)
     }
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53312);
     $4 = ($10 | 0) < 0 ? $9 : $0;
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 8, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 2, ($2 | 0) != 2 ? $7 + 16 | 0 : 0, ($3 | 0) != 2 ? $7 + 84 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 60), wasm2js_i32$4 = $7 + 60 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
     SAFE_HEAP_STORE_i32_4_4($7, 56, 53464);
     if ((SAFE_HEAP_LOAD_i32_1_1($7, 71) | 0) < 0) {
      dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 60))
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     $2 = $2 - $0 >> 2;
     $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
     if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95876) & 1)) {
      $4 = _emval_get_method_caller(2, 54764) | 0;
      SAFE_HEAP_STORE_i32_1_1(0, 95876, 1);
      SAFE_HEAP_STORE_i32_4_4(0, 95872, $4);
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95872);
     SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
     _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
      dlfree($0);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $9 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
   $1 = access_typed_array_double___access_typed_array_28emscripten__val__29($7 + 80 | 0, $2);
   SAFE_HEAP_STORE_i32_4_4($7, 56, 54820);
   SAFE_HEAP_STORE_i32_4_4($7, 72, $3);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   if (($2 | 0) != 2) {
    $8 = +_emval_as($2 | 0, 72808, $7 + 32 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 32) | 0);
    SAFE_HEAP_STORE_f64_8_8($7, 64, $8);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 72), 0);
   SAFE_HEAP_STORE_i32_4_4($7, 32, 54820);
   SAFE_HEAP_STORE_i32_4_4($7, 48, $4);
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   if (($3 | 0) != 2) {
    $8 = +_emval_as($3 | 0, 72808, $7 + 12 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
    SAFE_HEAP_STORE_f64_8_8($7, 40, $8);
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 48), 0);
   SAFE_HEAP_STORE_i32_4_4($7 + 24 | 0, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($7, 16, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($7, 12, 53464);
   SAFE_HEAP_STORE_i32_4_4($7, 28, $5);
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
    import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($7 + 12 | 0)
   }
   SAFE_HEAP_STORE_i32_4_4($7, 12, 53312);
   $4 = ($10 | 0) < 0 ? $9 : $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $9 = ImGui__InputScalarN_28char_20const__2c_20int_2c_20void__2c_20int_2c_20void_20const__2c_20void_20const__2c_20char_20const__2c_20int_29($4, 9, $0, SAFE_HEAP_LOAD_i32_4_4($1, 4) - $0 >> 3, ($2 | 0) != 2 ? $7 - -64 | 0 : 0, ($3 | 0) != 2 ? $7 + 40 | 0 : 0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($7, 16), wasm2js_i32$4 = $7 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($7, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $6);
   SAFE_HEAP_STORE_i32_4_4($7, 12, 53464);
   if ((SAFE_HEAP_LOAD_i32_1_1($7, 27) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 16))
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   $2 = $2 - $0 >> 3;
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 12), 0);
   if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95884) & 1)) {
    $4 = _emval_get_method_caller(2, 54864) | 0;
    SAFE_HEAP_STORE_i32_1_1(0, 95884, 1);
    SAFE_HEAP_STORE_i32_4_4(0, 95880, $4);
   }
   $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95880);
   SAFE_HEAP_STORE_i32_4_4($7, 60, $0);
   SAFE_HEAP_STORE_i32_4_4($7, 56, $2);
   _emval_call_void_method($4 | 0, $3 | 0, 3559, $7 + 56 | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($0) {
    SAFE_HEAP_STORE_i32_4_4($1, 4, $0);
    dlfree($0);
   }
  }
  __stack_pointer = $7 + 96 | 0;
  return $9 | 0;
 }
 
 function embind_init_ImGui_28_29__$_114____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  SAFE_HEAP_STORE_i32_4_4($3, 4, 53688);
  $1 = $3 + 4 | 0;
  access_value_float_2c_203ul____import_value_28_29($1);
  $2 = ImGui__ColorEdit4_28char_20const__2c_20float__2c_20int_29(($5 | 0) < 0 ? $4 : $0, $1 + 4 | 0, $2 | 2);
  SAFE_HEAP_STORE_i32_4_4($3, 4, 53688);
  $0 = 0;
  while (1) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
   SAFE_HEAP_STORE_f32_4_4($3, 24, SAFE_HEAP_LOAD_f32_4_4(($3 + ($0 << 2) | 0) + 8 | 0, 0));
   $5 = $3 + 24 | 0;
   $1 = _emval_take_value(72796, $5 | 0) | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 24, $0);
   $6 = $4;
   $4 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $4 | 0, $1 | 0);
   _emval_decref($4 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_115____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  SAFE_HEAP_STORE_i32_4_4($3, 0, 53744);
  access_value_float_2c_204ul____import_value_28_29($3);
  $2 = ImGui__ColorEdit4_28char_20const__2c_20float__2c_20int_29(($5 | 0) < 0 ? $4 : $0, $3 + 4 | 0, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 0, 53744);
  $0 = 0;
  while (1) {
   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
   SAFE_HEAP_STORE_f32_4_4($3, 24, SAFE_HEAP_LOAD_f32_4_4((($0 << 2) + $3 | 0) + 4 | 0, 0));
   $5 = $3 + 24 | 0;
   $1 = _emval_take_value(72796, $5 | 0) | 0;
   $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
   SAFE_HEAP_STORE_i32_4_4($3, 24, $0);
   $6 = $4;
   $4 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $4 | 0, $1 | 0);
   _emval_decref($4 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $3 + 32 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_116____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0);
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4, 20, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 4, 53688);
  $3 = $4 + 4 | 0;
  access_value_float_2c_203ul____import_value_28_29($3);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $3 = $3 + 4 | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 0, SAFE_HEAP_LOAD_f32_4_4($3, 0));
  SAFE_HEAP_STORE_f32_4_4($1, 4, SAFE_HEAP_LOAD_f32_4_4($3, 4));
  $7 = SAFE_HEAP_LOAD_f32_4_4($3, 8);
  SAFE_HEAP_STORE_i32_4_4($1, 12, 1065353216);
  SAFE_HEAP_STORE_f32_4_4($1, 8, $7);
  $0 = ImGui__ColorPicker4_28char_20const__2c_20float__2c_20int_2c_20float_20const__29(($6 | 0) < 0 ? $5 : $0, $1, $2 | 2, 0);
  if ($0) {
   SAFE_HEAP_STORE_f32_4_4($3, 0, SAFE_HEAP_LOAD_f32_4_4($1, 0));
   SAFE_HEAP_STORE_f32_4_4($3, 4, SAFE_HEAP_LOAD_f32_4_4($1, 4));
   SAFE_HEAP_STORE_f32_4_4($3, 8, SAFE_HEAP_LOAD_f32_4_4($1, 8));
  }
  __stack_pointer = $1 + 16 | 0;
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($4, 4, 53688);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 20);
   SAFE_HEAP_STORE_f32_4_4($4, 24, SAFE_HEAP_LOAD_f32_4_4(($4 + ($0 << 2) | 0) + 8 | 0, 0));
   $5 = $4 + 24 | 0;
   $1 = _emval_take_value(72796, $5 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 24, $0);
   $6 = $3;
   $3 = _emval_take_value(72760, $5 | 0) | 0;
   _emval_set_property($6 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $4 + 32 | 0;
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($6 >>> 0 < 2147483632) {
   label$2 : {
    if ($6 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 31, $6);
     $7 = $5 + 20 | 0;
     break label$2;
    }
    $8 = ($6 | 15) + 1 | 0;
    $7 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($5, 28, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 20, $7);
    SAFE_HEAP_STORE_i32_4_4($5, 24, $6);
   }
   if ($6) {
    __memcpy($7, $1 + 4 | 0, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($6 + $7 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 12, $4);
   SAFE_HEAP_STORE_i32_4_4($5, 16, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($5 + 20 | 0, $5 + 16 | 0, $3, $5 + 12 | 0) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 20))
   }
   __stack_pointer = $5 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_117____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4, 44, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 24, 53744);
  $1 = $4 + 24 | 0;
  access_value_float_2c_204ul____import_value_28_29($1);
  SAFE_HEAP_STORE_i32_4_4($4, 0, 55308);
  $0 = ($6 | 0) < 0 ? $5 : $0;
  SAFE_HEAP_STORE_i32_4_4($4, 20, $3);
  $1 = $1 + 4 | 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) != 2) {
   access_value_float_2c_204ul____import_value_28_29($4)
  }
  $2 = ImGui__ColorPicker4_28char_20const__2c_20float__2c_20int_2c_20float_20const__29($0, $1, $2, (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 20), 0) | 0) != 2 ? $4 + 4 | 0 : 0);
  access_maybe_null_value_float_2c_204ul____access_maybe_null_value_28_29($4);
  SAFE_HEAP_STORE_i32_4_4($4, 24, 53744);
  $0 = 0;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 44);
   SAFE_HEAP_STORE_f32_4_4($4, 0, SAFE_HEAP_LOAD_f32_4_4(($4 + ($0 << 2) | 0) + 28 | 0, 0));
   $1 = _emval_take_value(72796, $4 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $0);
   $5 = $3;
   $3 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($5 | 0, $3 | 0, $1 | 0);
   _emval_decref($3 | 0);
   _emval_decref($1 | 0);
   $0 = $0 + 1 | 0;
   if (($0 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $4 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_118____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_8($4 + 24 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($4, 16, 0, 0);
  $1 = import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($1, $4 + 16 | 0);
  SAFE_HEAP_STORE_i64_8_4($4, 8, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($4, 0, SAFE_HEAP_LOAD_i64_8_4(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $4 + 8 | 0), 0), i64toi32_i32$HIGH_BITS);
  $0 = ImGui__ColorButton_28char_20const__2c_20ImVec4_20const__2c_20int_2c_20ImVec2_29(($6 | 0) < 0 ? $5 : $0, $1, $2, $4);
  __stack_pointer = $4 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_119____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return ImGui__TreeNode_28char_20const__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1)) | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($4 >>> 0 < 2147483632) {
    label$3 : {
     if ($4 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($3, 31, $4);
      $5 = $3 + 20 | 0;
      break label$3;
     }
     $6 = ($4 | 15) + 1 | 0;
     $5 = operator_20new_28unsigned_20long_29($6);
     SAFE_HEAP_STORE_i32_4_4($3, 28, $6 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($3, 20, $5);
     SAFE_HEAP_STORE_i32_4_4($3, 24, $4);
    }
    if ($4) {
     __memcpy($5, $1 + 4 | 0, $4)
    }
    SAFE_HEAP_STORE_i32_1_1($4 + $5 | 0, 0, 0);
    $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    if ($4 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($4 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($3, 19, $4);
      $1 = $3 + 8 | 0;
      break label$6;
     }
     $5 = ($4 | 15) + 1 | 0;
     $1 = operator_20new_28unsigned_20long_29($5);
     SAFE_HEAP_STORE_i32_4_4($3, 16, $5 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
     SAFE_HEAP_STORE_i32_4_4($3, 12, $4);
    }
    if ($4) {
     __memcpy($1, $2 + 4 | 0, $4)
    }
    SAFE_HEAP_STORE_i32_1_1($1 + $4 | 0, 0, 0);
    $0 = FUNCTION_TABLE[$0 | 0]($3 + 20 | 0, $3 + 8 | 0) | 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($3, 19) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 8))
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($3, 31) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 20))
    }
    __stack_pointer = $3 + 32 | 0;
    return $0 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_120____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $4 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($2, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  $0 = ImGui__TreeNode_28char_20const__2c_20char_20const__2c_20____29(($4 | 0) < 0 ? $3 : $0, 5950, $2);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  if ($4 >>> 0 < 2147483632) {
   label$2 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($3, 15, $4);
     $5 = $3 + 4 | 0;
     break label$2;
    }
    $6 = ($4 | 15) + 1 | 0;
    $5 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $5);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
   }
   if ($4) {
    __memcpy($5, $2 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($4 + $5 | 0, 0, 0);
   $0 = FUNCTION_TABLE[$0 | 0]($1, $3 + 4 | 0) | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($3, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 4))
   }
   __stack_pointer = $3 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_121____invoke_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  $0 = ImGui__TreeNode_28void_20const__2c_20char_20const__2c_20____29($0, 5950, $2);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_122____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if (SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
   $0 = 0
  } else {
   $0 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29(ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($2, $0), $1, $0, 0)
  }
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  label$1 : {
   $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   if ($5 >>> 0 < 2147483632) {
    label$3 : {
     if ($5 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($4, 31, $5);
      $6 = $4 + 20 | 0;
      break label$3;
     }
     $7 = ($5 | 15) + 1 | 0;
     $6 = operator_20new_28unsigned_20long_29($7);
     SAFE_HEAP_STORE_i32_4_4($4, 28, $7 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($4, 20, $6);
     SAFE_HEAP_STORE_i32_4_4($4, 24, $5);
    }
    if ($5) {
     __memcpy($6, $1 + 4 | 0, $5)
    }
    SAFE_HEAP_STORE_i32_1_1($5 + $6 | 0, 0, 0);
    $5 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    if ($5 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($5 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($4, 19, $5);
      $1 = $4 + 8 | 0;
      break label$6;
     }
     $6 = ($5 | 15) + 1 | 0;
     $1 = operator_20new_28unsigned_20long_29($6);
     SAFE_HEAP_STORE_i32_4_4($4, 16, $6 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($4, 8, $1);
     SAFE_HEAP_STORE_i32_4_4($4, 12, $5);
    }
    if ($5) {
     __memcpy($1, $3 + 4 | 0, $5)
    }
    SAFE_HEAP_STORE_i32_1_1($1 + $5 | 0, 0, 0);
    $0 = FUNCTION_TABLE[$0 | 0]($4 + 20 | 0, $2, $4 + 8 | 0) | 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($4, 19) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 8))
    }
    if ((SAFE_HEAP_LOAD_i32_1_1($4, 31) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 20))
    }
    __stack_pointer = $4 + 32 | 0;
    return $0 | 0;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_123____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 0), wasm2js_i32$1 = $2, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  $0 = ImGui__TreeNodeEx_28char_20const__2c_20int_2c_20char_20const__2c_20____29(($5 | 0) < 0 ? $4 : $0, $1, 5950, $3);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20int_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  if ($5 >>> 0 < 2147483632) {
   label$2 : {
    if ($5 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($4, 15, $5);
     $6 = $4 + 4 | 0;
     break label$2;
    }
    $7 = ($5 | 15) + 1 | 0;
    $6 = operator_20new_28unsigned_20long_29($7);
    SAFE_HEAP_STORE_i32_4_4($4, 12, $7 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
   }
   if ($5) {
    __memcpy($6, $3 + 4 | 0, $5)
   }
   SAFE_HEAP_STORE_i32_1_1($5 + $6 | 0, 0, 0);
   $0 = FUNCTION_TABLE[$0 | 0]($1, $2, $4 + 4 | 0) | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 4))
   }
   __stack_pointer = $4 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_124____invoke_28int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($2, 0), wasm2js_i32$1 = $2, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($2, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  $2 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i32_4_4($5, 12, $3);
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  SAFE_HEAP_STORE_i32_1_1($6, 140, 1);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
   $2 = $4 + 12800 | 0;
   $4 = ImFormatStringV_28char__2c_20unsigned_20long_2c_20char_20const__2c_20void__29($2, 5950, $3);
   $2 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29(ImGuiWindow__GetID_28void_20const__29($6, $0), $1, $2, $2 + $4 | 0);
  }
  __stack_pointer = $5 + 16 | 0;
  __stack_pointer = $3 + 16 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_125____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  ImGui__Indent_28float_29(Math_fround(0.0));
  $1 = $1 + 344 | 0;
  SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
  ImGui__PushID_28char_20const__29($0);
 }
 
 function embind_init_ImGui_28_29__$_126____invoke_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($1, 140, 1);
  ImGui__Indent_28float_29(Math_fround(0.0));
  $1 = $1 + 344 | 0;
  SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) + 1 | 0);
  ImGui__PushID_28void_20const__29($0);
 }
 
 function embind_init_ImGui_28_29__$_127____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($2, 140, 1);
  if (SAFE_HEAP_LOAD_i32_1_U_1($2, 143)) {
   $0 = 0
  } else {
   $0 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29(ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($2, $0), $1 | 26, $0, 0)
  }
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_128____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), $19 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $3 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($5 + 12 | 0, $1);
  $8 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 8), 0) | 0) != 2 ? $3 + 4 | 0 : 0;
  $1 = __stack_pointer - 80 | 0;
  __stack_pointer = $1;
  $4 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($4, 143)) {
    break label$1
   }
   label$3 : {
    if (!$8) {
     $6 = 26;
     break label$3;
    }
    $6 = 1048606;
    if (!SAFE_HEAP_LOAD_i32_1_U_1($8, 0)) {
     break label$1
    }
   }
   $4 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($4, $0);
   $9 = ImGui__TreeNodeBehavior_28unsigned_20int_2c_20int_2c_20char_20const__2c_20char_20const__29($4, $2 | $6, $0, 0);
   if ($8) {
    $2 = $1 + 16 | 0;
    $6 = $2 + 56 | 0;
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($0 + 7296 | 0, 0));
    $10 = $2 + 48 | 0;
    SAFE_HEAP_STORE_i64_8_8($10, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 7288 | 0, 0), i64toi32_i32$HIGH_BITS);
    $11 = $2 + 40 | 0;
    SAFE_HEAP_STORE_i64_8_8($11, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 7280 | 0, 0), i64toi32_i32$HIGH_BITS);
    $12 = $2 + 32 | 0;
    SAFE_HEAP_STORE_i64_8_8($12, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 7272 | 0, 0), i64toi32_i32$HIGH_BITS);
    $13 = $2 + 24 | 0;
    SAFE_HEAP_STORE_i64_8_8($13, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 7264 | 0, 0), i64toi32_i32$HIGH_BITS);
    $14 = $2 + 16 | 0;
    $15 = $0 + 7256 | 0;
    SAFE_HEAP_STORE_i64_8_8($14, 0, SAFE_HEAP_LOAD_i64_8_4($15, 0), i64toi32_i32$HIGH_BITS);
    $2 = $2 + 8 | 0;
    SAFE_HEAP_STORE_i64_8_8($2, 0, SAFE_HEAP_LOAD_i64_8_4($0 + 7248 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_8($1, 16, SAFE_HEAP_LOAD_i64_8_4($0, 7240), i64toi32_i32$HIGH_BITS);
    $16 = SAFE_HEAP_LOAD_f32_4_4($0 + 7252 | 0, 0);
    $17 = SAFE_HEAP_LOAD_f32_4_4($0 + 7260 | 0, 0);
    $7 = SAFE_HEAP_LOAD_f32_4_4($0 + 5476 | 0, 0);
    $18 = SAFE_HEAP_LOAD_f32_4_4($15, 0);
    $19 = SAFE_HEAP_LOAD_f32_4_4($0, 6468);
    $4 = ImGui__GetIDWithSeed_28char_20const__2c_20char_20const__2c_20unsigned_20int_29($4);
    SAFE_HEAP_STORE_f32_4_4($1, 12, $18);
    $7 = Math_fround(Math_fround($17 - Math_fround($7 + $7)) - $19);
    SAFE_HEAP_STORE_f32_4_4($1, 8, $7 <= $16 ? $16 : $7);
    if (ImGui__CloseButton_28unsigned_20int_2c_20ImVec2_20const__29($4, $1 + 8 | 0)) {
     SAFE_HEAP_STORE_i32_1_1($8, 0, 0)
    }
    $0 = $0 + 7240 | 0;
    SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_8($1, 16), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($0 + 56 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0));
    SAFE_HEAP_STORE_i64_8_4($0 + 48 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($10, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($0 + 40 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($11, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($0 + 32 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($12, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($0 + 24 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($13, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($0 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($14, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i64_8_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS);
   }
  }
  __stack_pointer = $1 + 80 | 0;
  $1 = $9;
  SAFE_HEAP_STORE_i32_4_4($3, 0, 52584);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_1_U_1($3, 4));
   $3 = $5 + 24 | 0;
   $0 = _emval_take_value(72652, $3 | 0) | 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 24, 0);
   $9 = $2;
   $2 = _emval_take_value(72760, $3 | 0) | 0;
   _emval_set_property($9 | 0, $2 | 0, $0 | 0);
   _emval_decref($2 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $5 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_2c_20int_2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($6 >>> 0 < 2147483632) {
   label$2 : {
    if ($6 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 15, $6);
     $7 = $5 + 4 | 0;
     break label$2;
    }
    $8 = ($6 | 15) + 1 | 0;
    $7 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($5, 12, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $7);
    SAFE_HEAP_STORE_i32_4_4($5, 8, $6);
   }
   if ($6) {
    __memcpy($7, $1 + 4 | 0, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($6 + $7 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $4);
   $0 = FUNCTION_TABLE[$0 | 0]($5 + 4 | 0, $2, $3, $5) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 4))
   }
   __stack_pointer = $5 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_129____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_2c_20emscripten__val_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($4, 8, 0, 0);
  $0 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(($6 | 0) < 0 ? $5 : $0, $1, $2, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $4 + 8 | 0));
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_130____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  $1 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($4 + 12 | 0, $1);
  $7 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 8), 0);
  SAFE_HEAP_STORE_i64_8_4($4, 24, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $4 + 24 | 0);
  $5 = ($6 | 0) < 0 ? $5 : $0;
  $0 = ($7 | 0) != 2 ? $1 + 4 | 0 : 0;
  $2 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29($5, SAFE_HEAP_LOAD_i32_1_U_1($0, 0), $2, $3);
  if ($2) {
   SAFE_HEAP_STORE_i32_1_1($0, 0, SAFE_HEAP_LOAD_i32_1_U_1($0, 0) ^ 1)
  }
  SAFE_HEAP_STORE_i32_4_4($1, 0, 52584);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($4, 24, SAFE_HEAP_LOAD_i32_1_U_1($1, 4));
   $1 = $4 + 24 | 0;
   $0 = _emval_take_value(72652, $1 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 24, 0);
   $1 = _emval_take_value(72760, $1 | 0) | 0;
   _emval_set_property($3 | 0, $1 | 0, $0 | 0);
   _emval_decref($1 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $4 + 32 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_131____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $4 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  $0 = ImGui__BeginListBox_28char_20const__2c_20ImVec2_20const__29(($4 | 0) < 0 ? $3 : $0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $2 + 8 | 0));
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($7 >>> 0 < 2147483632) {
   label$2 : {
    if ($7 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($6, 31, $7);
     $8 = $6 + 20 | 0;
     break label$2;
    }
    $9 = ($7 | 15) + 1 | 0;
    $8 = operator_20new_28unsigned_20long_29($9);
    SAFE_HEAP_STORE_i32_4_4($6, 28, $9 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($6, 20, $8);
    SAFE_HEAP_STORE_i32_4_4($6, 24, $7);
   }
   if ($7) {
    __memcpy($8, $1 + 4 | 0, $7)
   }
   SAFE_HEAP_STORE_i32_1_1($7 + $8 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 12, $3);
   SAFE_HEAP_STORE_i32_4_4($6, 16, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($6 + 20 | 0, $6 + 16 | 0, $6 + 12 | 0, $4, $5) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 16) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($6, 31) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 20))
   }
   __stack_pointer = $6 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_132____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 128) | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 132, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 128, $2);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $9 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($5, 12, 53228);
  SAFE_HEAP_STORE_i32_4_4($5, 20, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 24, 0);
  $2 = $1;
  $7 = $5 + 24 | 0;
  $1 = _emval_take_value(72760, $7 | 0) | 0;
  $2 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $8 = +_emval_as($2 | 0, 72724, $7 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 24) | 0);
  if (Math_abs($8) < 2147483648.0) {
   $1 = ~~$8
  } else {
   $1 = -2147483648
  }
  SAFE_HEAP_STORE_i32_4_4($5, 16, $1);
  _emval_decref($2 | 0);
  $1 = ImGui__ListBox_28char_20const__2c_20int__2c_20bool_20_28__29_28void__2c_20int_2c_20char_20const___29_2c_20void__2c_20int_2c_20int_29(($9 | 0) < 0 ? $6 : $0, $5 + 16 | 0, 871, $3, $4);
  SAFE_HEAP_STORE_i32_4_4($5, 12, 53228);
  $2 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
  SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_4_4($5, 16));
  $3 = $5 + 24 | 0;
  $0 = _emval_take_value(72724, $3 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 24, 0);
  $4 = $2;
  $2 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $5 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_133____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0.0;
  $6 = __stack_pointer - 32 | 0;
  __stack_pointer = $6;
  $7 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 148) | 0);
  SAFE_HEAP_STORE_i32_4_4($7, 148, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 152) | 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 156, $4);
  SAFE_HEAP_STORE_i32_4_4($7, 152, $2);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $7 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($6, 12, 53228);
  SAFE_HEAP_STORE_i32_4_4($6, 20, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 0);
  $2 = $1;
  $8 = $6 + 24 | 0;
  $1 = _emval_take_value(72760, $8 | 0) | 0;
  $2 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $9 = +_emval_as($2 | 0, 72724, $8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($6, 24) | 0);
  if (Math_abs($9) < 2147483648.0) {
   $1 = ~~$9
  } else {
   $1 = -2147483648
  }
  SAFE_HEAP_STORE_i32_4_4($6, 16, $1);
  _emval_decref($2 | 0);
  $1 = ImGui__ListBox_28char_20const__2c_20int__2c_20bool_20_28__29_28void__2c_20int_2c_20char_20const___29_2c_20void__2c_20int_2c_20int_29(($7 | 0) < 0 ? $3 : $0, $6 + 16 | 0, 872, $4, $5);
  SAFE_HEAP_STORE_i32_4_4($6, 12, 53228);
  $2 = SAFE_HEAP_LOAD_i32_4_4($6, 20);
  SAFE_HEAP_STORE_i32_4_4($6, 24, SAFE_HEAP_LOAD_i32_4_4($6, 16));
  $3 = $6 + 24 | 0;
  $0 = _emval_take_value(72724, $3 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 24, 0);
  $4 = $2;
  $2 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $2 | 0, $0 | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $6 + 32 | 0;
  return $1 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10 = 0, $11 = 0, $12 = 0, $13 = 0;
  $10 = __stack_pointer - 48 | 0;
  __stack_pointer = $10;
  $11 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($11 >>> 0 < 2147483632) {
   label$2 : {
    if ($11 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($10, 47, $11);
     $12 = $10 + 36 | 0;
     break label$2;
    }
    $13 = ($11 | 15) + 1 | 0;
    $12 = operator_20new_28unsigned_20long_29($13);
    SAFE_HEAP_STORE_i32_4_4($10, 44, $13 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($10, 36, $12);
    SAFE_HEAP_STORE_i32_4_4($10, 40, $11);
   }
   if ($11) {
    __memcpy($12, $1 + 4 | 0, $11)
   }
   SAFE_HEAP_STORE_i32_1_1($11 + $12 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($10, 28, $3);
   SAFE_HEAP_STORE_i32_4_4($10, 32, $2);
   SAFE_HEAP_STORE_i32_4_4($10, 24, $6);
   SAFE_HEAP_STORE_i32_4_4($10, 20, $7);
   SAFE_HEAP_STORE_i32_4_4($10, 16, $8);
   SAFE_HEAP_STORE_i32_4_4($10, 12, $9);
   FUNCTION_TABLE[$0 | 0]($10 + 36 | 0, $10 + 32 | 0, $10 + 28 | 0, $4, $5, $10 + 24 | 0, $10 + 20 | 0, $10 + 16 | 0, $10 + 12 | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 12) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 16) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 20) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 24) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 28) | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 32) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($10, 47) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($10, 36))
   }
   __stack_pointer = $10 + 48 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_134____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0;
  $9 = __stack_pointer - 48 | 0;
  __stack_pointer = $9;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 80) | 0);
  SAFE_HEAP_STORE_i32_4_4($10, 80, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 84) | 0);
  SAFE_HEAP_STORE_i32_4_4($10, 84, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($9 + 40 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($9, 32, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 28, 53464);
  SAFE_HEAP_STORE_i32_4_4($9, 44, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($9 + 28 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($9, 28, 53312);
  $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 44), 0);
  $15 = SAFE_HEAP_LOAD_i32_4_4($9, 32);
  $16 = SAFE_HEAP_LOAD_i32_1_1($9, 43);
  $1 = $9 + 20 | 0;
  $13 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 20) | 0);
  $14 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 20) | 0);
  SAFE_HEAP_STORE_i64_8_4($9, 20, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($9, 8, SAFE_HEAP_LOAD_i64_8_4(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($8, $1), 0), i64toi32_i32$HIGH_BITS);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $6 = SAFE_HEAP_LOAD_i64_8_4($9 + 8 | 0, 0);
  $7 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($1, 0, $6, $7);
  SAFE_HEAP_STORE_i64_8_8($1, 8, $6, $7);
  $0 = ($10 | 0) < 0 ? $2 : $0;
  $2 = ($5 | 0) != 2 ? (($16 | 0) < 0 ? $15 : $9 + 32 | 0) : 0;
  $11 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $11 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $11 = Math_fround($13);
  }
  $12 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($14 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $12 = Math_fround(-3402823466385288598117041.0e14);
   if ($14 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $12 = Math_fround($14);
  }
  ImGui__PlotEx_28ImGuiPlotType_2c_20char_20const__2c_20float_20_28__29_28void__2c_20int_29_2c_20void__2c_20int_2c_20int_2c_20char_20const__2c_20float_2c_20float_2c_20ImVec2_29(0, $0, 873, $3, $4, $2, $11, $12, $1);
  __stack_pointer = $1 + 16 | 0;
  SAFE_HEAP_STORE_i32_4_4($9, 28, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($9, 43) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 32))
  }
  __stack_pointer = $9 + 48 | 0;
 }
 
 function embind_init_ImGui_28_29__$_135____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0;
  $9 = __stack_pointer - 48 | 0;
  __stack_pointer = $9;
  $10 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 88) | 0);
  SAFE_HEAP_STORE_i32_4_4($10, 88, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($10, 92) | 0);
  SAFE_HEAP_STORE_i32_4_4($10, 92, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $10 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($9 + 40 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($9, 32, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($9, 28, 53464);
  SAFE_HEAP_STORE_i32_4_4($9, 44, $5);
  if ((SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($9 + 28 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($9, 28, 53312);
  $5 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($9, 44), 0);
  $15 = SAFE_HEAP_LOAD_i32_4_4($9, 32);
  $16 = SAFE_HEAP_LOAD_i32_1_1($9, 43);
  $1 = $9 + 20 | 0;
  $13 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 20) | 0);
  $14 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($7, 0) | 0, 72808, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($9, 20) | 0);
  SAFE_HEAP_STORE_i64_8_4($9, 20, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($9, 8, SAFE_HEAP_LOAD_i64_8_4(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($8, $1), 0), i64toi32_i32$HIGH_BITS);
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $6 = SAFE_HEAP_LOAD_i64_8_4($9 + 8 | 0, 0);
  $7 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($1, 0, $6, $7);
  SAFE_HEAP_STORE_i64_8_8($1, 8, $6, $7);
  $0 = ($10 | 0) < 0 ? $2 : $0;
  $2 = ($5 | 0) != 2 ? (($16 | 0) < 0 ? $15 : $9 + 32 | 0) : 0;
  $11 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $11 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $11 = Math_fround($13);
  }
  $12 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($14 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $12 = Math_fround(-3402823466385288598117041.0e14);
   if ($14 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $12 = Math_fround($14);
  }
  ImGui__PlotEx_28ImGuiPlotType_2c_20char_20const__2c_20float_20_28__29_28void__2c_20int_29_2c_20void__2c_20int_2c_20int_2c_20char_20const__2c_20float_2c_20float_2c_20ImVec2_29(1, $0, 874, $3, $4, $2, $11, $12, $1);
  __stack_pointer = $1 + 16 | 0;
  SAFE_HEAP_STORE_i32_4_4($9, 28, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($9, 43) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($9, 32))
  }
  __stack_pointer = $9 + 48 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($4 >>> 0 < 2147483632) {
   label$2 : {
    if ($4 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($3, 15, $4);
     $5 = $3 + 4 | 0;
     break label$2;
    }
    $6 = ($4 | 15) + 1 | 0;
    $5 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $5);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
   }
   if ($4) {
    __memcpy($5, $1 + 4 | 0, $4)
   }
   SAFE_HEAP_STORE_i32_1_1($4 + $5 | 0, 0, 0);
   FUNCTION_TABLE[$0 | 0]($3 + 4 | 0, $2);
   if ((SAFE_HEAP_LOAD_i32_1_1($3, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 4))
   }
   __stack_pointer = $3 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_136____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $1 ? 10668 : 10805);
  ImGui__Text_28char_20const__2c_20____29(5812, $0);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_137____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $2 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
  ImGui__Text_28char_20const__2c_20____29(13139, $0);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20float_2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($5 >>> 0 < 2147483632) {
   label$2 : {
    if ($5 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($4, 15, $5);
     $6 = $4 + 4 | 0;
     break label$2;
    }
    $7 = ($5 | 15) + 1 | 0;
    $6 = operator_20new_28unsigned_20long_29($7);
    SAFE_HEAP_STORE_i32_4_4($4, 12, $7 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($4, 4, $6);
    SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
   }
   if ($5) {
    __memcpy($6, $1 + 4 | 0, $5)
   }
   SAFE_HEAP_STORE_i32_1_1($5 + $6 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
   FUNCTION_TABLE[$0 | 0]($4 + 4 | 0, $2, $4);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($4, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 4))
   }
   __stack_pointer = $4 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_139____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $5 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($3, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($3, 28, $2);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($3 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53312);
  $2 = ($5 | 0) < 0 ? $4 : $0;
  $4 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($3, 16), wasm2js_i32$4 = $3 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($3, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $0 = __stack_pointer - 112 | 0;
  __stack_pointer = $0;
  label$1 : {
   if ($4) {
    SAFE_HEAP_STORE_i32_4_4($0, 32, $4);
    $4 = $0 + 48 | 0;
    ImFormatString_28char__2c_20unsigned_20long_2c_20char_20const__2c_20____29($4, 64, 5811, $0 + 32 | 0);
    SAFE_HEAP_STORE_f64_8_8($0, 24, +$1);
    SAFE_HEAP_STORE_i32_4_4($0, 16, $2);
    ImGui__Text_28char_20const__2c_20____29($4, $0 + 16 | 0);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
   SAFE_HEAP_STORE_f64_8_8($0, 8, +$1);
   ImGui__Text_28char_20const__2c_20____29(9700, $0);
  }
  __stack_pointer = $0 + 112 | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($3, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 16))
  }
  __stack_pointer = $3 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_140____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10 = Math_fround(0), $11 = 0, $12 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15 = 0, $16 = Math_fround(0), $17 = 0, $18 = 0, $19 = 0, $20 = Math_fround(0), $21 = 0, $22 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $17 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $18 = $1;
  $0 = 0;
  $3 = __stack_pointer - 112 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  SAFE_HEAP_STORE_i32_1_1($5, 140, 1);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
    break label$1
   }
   $15 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($5, $17);
   $1 = ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($15);
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 12104 | 0, 0);
   $6 = SAFE_HEAP_LOAD_i32_4_4($4, 12096);
   $11 = $0 + ($6 << 2) | 0;
   $21 = SAFE_HEAP_LOAD_i32_1_U_1($5 + 11 | 0, 0) & 16 ? 285737285 : 268960069;
   label$2 : {
    while (1) {
     $2 = $0;
     $19 = $2 >>> 0 >= $11 >>> 0;
     if ($19) {
      break label$2
     }
     $0 = $2 + 4 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != ($15 | 0)) {
      continue
     }
     break;
    };
    if ($19) {
     break label$2
    }
    if ($1) {
     $0 = ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($15, $21);
     break label$1;
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7300, 0);
    $0 = $1;
    break label$1;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 12100 | 0, 0);
   label$5 : {
    if (($0 | 0) != ($6 | 0)) {
     break label$5
    }
    $2 = $0 ? $0 + (($0 | 0) / 2 | 0) | 0 : 8;
    $6 = $6 + 1 | 0;
    $2 = ($2 | 0) > ($6 | 0) ? $2 : $6;
    if (($0 | 0) >= ($2 | 0)) {
     break label$5
    }
    $0 = ImGui__MemAlloc_28unsigned_20long_29($2 << 2);
    $6 = SAFE_HEAP_LOAD_i32_4_4($4, 12104);
    if ($6) {
     __memcpy($0, $6, SAFE_HEAP_LOAD_i32_4_4($4, 12096) << 2);
     ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 12104));
    }
    SAFE_HEAP_STORE_i32_4_4($4, 12100, $2);
    SAFE_HEAP_STORE_i32_4_4($4, 12104, $0);
   }
   SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 12104) + (SAFE_HEAP_LOAD_i32_4_4($4, 12096) << 2) | 0, 0, $15);
   SAFE_HEAP_STORE_i32_4_4($4, 12096, SAFE_HEAP_LOAD_i32_4_4($4, 12096) + 1 | 0);
   ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($3 + 104 | 0, $17, 0, 1, Math_fround(-1.0));
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $11 = SAFE_HEAP_LOAD_i32_4_4($0, 7468);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7480);
   $6 = 0;
   label$9 : {
    if (($11 | 0) <= ($2 | 0)) {
     break label$9
    }
    $6 = 0;
    if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($0, 7080) + 11 | 0, 0) & 16) {
     break label$9
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0 + 7476 | 0, 0) + Math_imul($2, 36) | 0, 4);
    $6 = 0;
    if (!$0) {
     break label$9
    }
    $6 = (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 16) >>> 4 | 0;
   }
   $19 = SAFE_HEAP_LOAD_i32_4_4($4, 7508);
   if ($6) {
    SAFE_HEAP_STORE_i32_4_4($4, 7508, $5)
   }
   SAFE_HEAP_STORE_i64_8_8($3, 96, 0, 0);
   $8 = SAFE_HEAP_LOAD_f32_4_4($5 + 212 | 0, 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($5, 208);
   ImGui__PushID_28char_20const__29($17);
   if (!$18) {
    ImGui__BeginDisabled_28bool_29(1)
   }
   $10 = (wasm2js_scratch_store_i32(2, $0), wasm2js_scratch_load_f32());
   label$14 : {
    if (!SAFE_HEAP_LOAD_i32_4_4($5 + 376 | 0, 0)) {
     $9 = Math_fround($10 + Math_fround(-1.0));
     $7 = SAFE_HEAP_LOAD_f32_4_4($4 + 5492 | 0, 0);
     $10 = Math_fround($7 * Math_fround(.5));
     label$16 : {
      if (Math_fround(Math_abs($10)) < Math_fround(2147483648.0)) {
       $0 = ~~$10;
       break label$16;
      }
      $0 = -2147483648;
     }
     $10 = Math_fround($0 | 0);
     $9 = Math_fround($9 - $10);
     $12 = Math_fround($8 - SAFE_HEAP_LOAD_f32_4_4($4 + 5480 | 0, 0));
     $8 = Math_fround(0.0);
     if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 9 | 0, 0) & 4) {
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
      $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($0, 6472) * SAFE_HEAP_LOAD_f32_4_4($5, 572));
      $13 = SAFE_HEAP_LOAD_f32_4_4($5 + 312 | 0, 0);
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 728);
      if ($2) {
       $8 = Math_fround($8 * SAFE_HEAP_LOAD_f32_4_4($2, 572))
      }
      $16 = SAFE_HEAP_LOAD_f32_4_4($0 + 5480 | 0, 0);
      $8 = Math_fround(Math_fround($16 + $16) + Math_fround($13 + $8));
     }
     SAFE_HEAP_STORE_f32_4_4($3, 96, $9);
     SAFE_HEAP_STORE_f32_4_4($3, 100, Math_fround($12 + $8));
     SAFE_HEAP_STORE_f32_4_4($5, 208, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 208) + $10));
     SAFE_HEAP_STORE_f32_4_4($3, 92, SAFE_HEAP_LOAD_f32_4_4($4 + 5496 | 0, 0));
     SAFE_HEAP_STORE_f32_4_4($3, 88, Math_fround($7 + $7));
     $0 = $3 + 88 | 0;
     ImGui__PushStyleVar_28int_2c_20ImVec2_20const__29(14, $0);
     $2 = SAFE_HEAP_LOAD_i32_2_U_2($5 + 328 | 0, 0);
     $8 = SAFE_HEAP_LOAD_f32_4_4($5 + 264 | 0, 0);
     $7 = SAFE_HEAP_LOAD_f32_4_4($5 + 212 | 0, 0);
     $10 = SAFE_HEAP_LOAD_f32_4_4($5, 208);
     $9 = SAFE_HEAP_LOAD_f32_4_4($3, 104);
     SAFE_HEAP_STORE_i32_4_4($3, 92, 0);
     SAFE_HEAP_STORE_f32_4_4($3, 88, $9);
     $0 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(19354, $1, 5242881, $0);
     SAFE_HEAP_STORE_f32_4_4($3, 84, Math_fround($7 + $8));
     SAFE_HEAP_STORE_f32_4_4($3, 80, Math_fround($10 + Math_fround($2 >>> 0)));
     SAFE_HEAP_STORE_i64_8_8($3, 8, SAFE_HEAP_LOAD_i64_8_8($3, 80), i64toi32_i32$HIGH_BITS);
     ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($3 + 8 | 0, $17, 0, 1);
     ImGui__PopStyleVar_28int_29(1);
     $8 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 5492) * Math_fround(-.5));
     label$21 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $2 = ~~$8;
       break label$21;
      }
      $2 = -2147483648;
     }
     SAFE_HEAP_STORE_f32_4_4($5, 208, Math_fround(SAFE_HEAP_LOAD_f32_4_4($5, 208) + Math_fround($2 | 0)));
     break label$14;
    }
    $7 = SAFE_HEAP_LOAD_f32_4_4($4 + 5428 | 0, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 96, $0);
    SAFE_HEAP_STORE_f32_4_4($3, 100, Math_fround($8 - $7));
    $0 = $5 + 334 | 0;
    $2 = SAFE_HEAP_LOAD_i32_2_U_2($0, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($4, 6468);
    $7 = SAFE_HEAP_LOAD_f32_4_4($3, 104);
    SAFE_HEAP_STORE_i32_2_2($0, 0, $2);
    $2 = $5 + 336 | 0;
    $0 = SAFE_HEAP_LOAD_i32_2_U_2($2, 0);
    $11 = $2;
    $2 = $7 < Math_fround(4294967296.0) & $7 >= Math_fround(0.0) ? ~~$7 >>> 0 : 0;
    SAFE_HEAP_STORE_i32_2_2($11, 0, $0 >>> 0 > $2 >>> 0 ? $0 : $2);
    $2 = $5 + 340 | 0;
    $0 = SAFE_HEAP_LOAD_i32_2_U_2($2, 0);
    $11 = $2;
    $7 = Math_fround($9 * Math_fround(1.2000000476837158));
    label$28 : {
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $2 = ~~$7;
      break label$28;
     }
     $2 = -2147483648;
    }
    $2 = $2 & 65535;
    SAFE_HEAP_STORE_i32_2_2($11, 0, $0 >>> 0 > $2 >>> 0 ? $0 : $2);
    $22 = SAFE_HEAP_LOAD_i32_2_U_2($5 + 324 | 0, 0);
    $0 = 0;
    $2 = 0;
    while (1) {
     $11 = SAFE_HEAP_LOAD_i32_2_U_2(($5 + ($2 << 1) | 0) + 334 | 0, 0);
     $0 = ($11 + $0 | 0) + ($14 & 1 ? ($11 ? $22 : 0) : 0) | 0;
     $14 = ($11 | 0) != 0 | $14;
     $2 = $2 + 1 | 0;
     if (($2 | 0) != 4) {
      continue
     }
     break;
    };
    $0 = $0 & 65535;
    SAFE_HEAP_STORE_i32_4_4($5 + 320 | 0, 0, $0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 316);
    $14 = $3 + 88 | 0;
    ImGui__GetContentRegionAvail_28_29($14);
    $7 = SAFE_HEAP_LOAD_f32_4_4($3, 88);
    $11 = SAFE_HEAP_LOAD_i32_2_U_2($5 + 328 | 0, 0);
    $9 = SAFE_HEAP_LOAD_f32_4_4($5 + 264 | 0, 0);
    $12 = SAFE_HEAP_LOAD_f32_4_4($5 + 212 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($5, 208);
    SAFE_HEAP_STORE_i32_4_4($3, 92, 0);
    $16 = Math_fround(($0 >>> 0 < $2 >>> 0 ? $2 : $0) >>> 0);
    SAFE_HEAP_STORE_f32_4_4($3, 88, $16);
    $0 = ImGui__Selectable_28char_20const__2c_20bool_2c_20int_2c_20ImVec2_20const__29(19354, $1, 22020097, $14);
    SAFE_HEAP_STORE_f32_4_4($3, 76, Math_fround($12 + $9));
    SAFE_HEAP_STORE_f32_4_4($3, 72, Math_fround($13 + Math_fround($11 >>> 0)));
    SAFE_HEAP_STORE_i64_8_8($3, 32, SAFE_HEAP_LOAD_i64_8_8($3, 72), i64toi32_i32$HIGH_BITS);
    ImGui__RenderText_28ImVec2_2c_20char_20const__2c_20char_20const__2c_20bool_29($3 + 32 | 0, $17, 0, 1);
    $2 = SAFE_HEAP_LOAD_i32_2_U_2($5 + 332 | 0, 0);
    $14 = SAFE_HEAP_LOAD_i32_4_4($5, 580);
    $9 = SAFE_HEAP_LOAD_f32_4_4($4, 6468);
    SAFE_HEAP_STORE_f32_4_4($3, 60, Math_fround($8 + Math_fround(0.0)));
    $8 = Math_fround($7 - $16);
    SAFE_HEAP_STORE_f32_4_4($3, 56, Math_fround(Math_fround(Math_fround($9 * Math_fround(.30000001192092896)) + Math_fround(($8 <= Math_fround(0.0) ? Math_fround(0.0) : $8) + Math_fround($2 >>> 0))) + $10));
    $2 = ImGui__GetColorU32_28int_2c_20float_29(0, Math_fround(1.0));
    SAFE_HEAP_STORE_i64_8_8($3, 16, SAFE_HEAP_LOAD_i64_8_4($3, 56), i64toi32_i32$HIGH_BITS);
    ImGui__RenderArrow_28ImDrawList__2c_20ImVec2_2c_20unsigned_20int_2c_20int_2c_20float_29($14, $3 + 16 | 0, $2, 1, Math_fround(1.0));
   }
   if (!$18) {
    ImGui__EndDisabled_28_29()
   }
   $2 = (SAFE_HEAP_LOAD_i32_4_4($4, 7116) | 0) == ($15 | 0);
   if ($6) {
    SAFE_HEAP_STORE_i32_4_4($4, 7508, $19)
   }
   $14 = $2 & $18;
   label$34 : {
    label$35 : {
     label$37 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($5, 376) | 0) == 1) {
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7480);
       $6 = 0;
       label$39 : {
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 7468) | 0) <= ($2 | 0)) {
         break label$39
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($4 + 7476 | 0, 0) + Math_imul($2, 36) | 0;
        $6 = 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($2, 8) | 0) != ($5 | 0)) {
         break label$39
        }
        $6 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
       }
       $2 = $6;
       $6 = 1;
       label$41 : {
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 7084) | 0) != ($5 | 0)) {
         break label$41
        }
        $6 = 1;
        if (!$2) {
         break label$41
        }
        $6 = 1;
        if (SAFE_HEAP_LOAD_i32_1_U_1($5 + 9 | 0, 0) & 4) {
         break label$41
        }
        $16 = SAFE_HEAP_LOAD_f32_4_4($2 + 24 | 0, 0);
        $9 = SAFE_HEAP_LOAD_f32_4_4($2 + 16 | 0, 0);
        $8 = SAFE_HEAP_LOAD_f32_4_4($4, 6468);
        $13 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
        $7 = SAFE_HEAP_LOAD_f32_4_4($2, 12);
        $12 = SAFE_HEAP_LOAD_f32_4_4($4 + 880 | 0, 0);
        $6 = $4 + 228 | 0;
        $20 = SAFE_HEAP_LOAD_f32_4_4($6, 0);
        $10 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($4 + 884 | 0, 0));
        SAFE_HEAP_STORE_f32_4_4($3, 92, $10);
        $12 = Math_fround($20 - $12);
        SAFE_HEAP_STORE_f32_4_4($3, 88, $12);
        $13 = Math_fround($7 + $13);
        label$42 : {
         if (SAFE_HEAP_LOAD_f32_4_4($5, 12) < $7) {
          SAFE_HEAP_STORE_f32_4_4($3, 48, $7);
          break label$42;
         }
         SAFE_HEAP_STORE_f32_4_4($3, 48, $13);
        }
        $16 = Math_fround($9 + $16);
        SAFE_HEAP_STORE_f32_4_4($3, 52, $9);
        label$44 : {
         if (SAFE_HEAP_LOAD_f32_4_4($5, 12) < SAFE_HEAP_LOAD_f32_4_4($2, 12)) {
          SAFE_HEAP_STORE_f32_4_4($3, 40, $7);
          break label$44;
         }
         SAFE_HEAP_STORE_f32_4_4($3, 40, $13);
        }
        SAFE_HEAP_STORE_f32_4_4($3, 44, $16);
        SAFE_HEAP_STORE_f32_4_4($3, 88, Math_fround($12 + (SAFE_HEAP_LOAD_f32_4_4($5, 12) < SAFE_HEAP_LOAD_f32_4_4($2, 12) ? Math_fround(-.5) : Math_fround(.5))));
        $20 = SAFE_HEAP_LOAD_f32_4_4($3, 52);
        $9 = Math_fround($8 * Math_fround(.5));
        $13 = Math_fround($8 * Math_fround(2.5));
        $7 = Math_fround(Math_fround(Math_abs(Math_fround($12 - SAFE_HEAP_LOAD_f32_4_4($3, 48)))) * Math_fround(.30000001192092896));
        $7 = $7 < $9 ? $9 : $7 > $13 ? $13 : $7;
        $9 = Math_fround(Math_fround($20 - $7) - $10);
        $12 = Math_fround($8 * Math_fround(-8.0));
        SAFE_HEAP_STORE_f32_4_4($3, 52, Math_fround($10 + ($9 >= $12 ? $9 : $12)));
        $7 = Math_fround(Math_fround($16 + $7) - $10);
        $8 = Math_fround($8 * Math_fround(8.0));
        SAFE_HEAP_STORE_f32_4_4($3, 44, Math_fround($10 + ($7 < $8 ? $7 : $8)));
        $6 = ImTriangleContainsPoint_28ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__2c_20ImVec2_20const__29($3 + 88 | 0, $3 + 48 | 0, $3 + 40 | 0, $6) ^ 1;
       }
       $2 = 0;
       label$46 : {
        if ($14 | $1 ^ 1) {
         break label$46
        }
        $2 = 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($4, 7084) | 0) != ($5 | 0)) {
         break label$46
        }
        $2 = SAFE_HEAP_LOAD_i32_4_4($4, 7120);
        $2 = $6 & (($2 | 0) != 0 & ($2 | 0) != ($15 | 0));
       }
       $5 = ($1 ^ 1) & $0;
       $0 = $1 ? $5 : $0 ? $5 : $14 ? $6 : $5;
       if ((SAFE_HEAP_LOAD_i32_4_4($4, 7512) | 0) != ($15 | 0)) {
        break label$35
       }
       if ((SAFE_HEAP_LOAD_i32_4_4($4, 7612) | 0) != 1) {
        break label$35
       }
       break label$37;
      }
      if ($0) {
       $2 = $0 & $1 & $6;
       $0 = $2 ^ 1;
       $1 = $1 ^ $2;
       break label$34;
      }
      if (($6 & $14 ^ 1 | $1) != 1) {
       $0 = 1;
       $2 = 0;
       break label$35;
      }
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 7512) | 0) != ($15 | 0)) {
       $0 = 0;
       $2 = 0;
       break label$35;
      }
      $2 = 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($4, 7612) | 0) == 3) {
       break label$37
      }
      $0 = 0;
      break label$35;
     }
     ImGui__NavMoveRequestCancel_28_29();
     $0 = 1;
    }
   }
   label$51 : {
    if (!(!$18 | $2)) {
     break label$51
    }
    if (!ImGui__IsPopupOpen_28unsigned_20int_2c_20int_29($15)) {
     break label$51
    }
    ImGui__ClosePopupToLevel_28int_2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($4, 7480), 1);
   }
   ImGui__PopID_28_29();
   label$53 : {
    label$54 : {
     if ($1 | $0 ^ 1) {
      break label$54
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 7468) | 0) <= (SAFE_HEAP_LOAD_i32_4_4($4, 7480) | 0)) {
      break label$54
     }
     ImGui__OpenPopup_28char_20const__2c_20int_29($17, 0);
     $0 = 0;
     break label$53;
    }
    if ($0) {
     ImGui__OpenPopup_28char_20const__2c_20int_29($17, 0)
    }
    if ($0 | $1) {
     SAFE_HEAP_STORE_i64_8_4($3, 88, 0, 0);
     ImGui__SetNextWindowPos_28ImVec2_20const__2c_20int_2c_20ImVec2_20const__29($3 + 96 | 0, 1, $3 + 88 | 0);
     ImGui__PushStyleVar_28int_2c_20float_29(7, SAFE_HEAP_LOAD_f32_4_4($4 + 5468 | 0, 0));
     $0 = ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($15, $21);
     ImGui__PopStyleVar_28int_29(1);
     break label$53;
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7300, 0);
    $0 = 0;
   }
  }
  __stack_pointer = $3 + 112 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20bool_2c_20bool_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($6 >>> 0 < 2147483632) {
   label$2 : {
    if ($6 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 15, $6);
     $7 = $5 + 4 | 0;
     break label$2;
    }
    $8 = ($6 | 15) + 1 | 0;
    $7 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($5, 12, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $7);
    SAFE_HEAP_STORE_i32_4_4($5, 8, $6);
   }
   if ($6) {
    __memcpy($7, $1 + 4 | 0, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($6 + $7 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 0, $2);
   $0 = FUNCTION_TABLE[$0 | 0]($5 + 4 | 0, $5, $3, $4) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 4))
   }
   __stack_pointer = $5 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_141____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($4, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($4, 28, $1);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($4 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($4, 12, 53312);
  $0 = ImGui__MenuItem_28char_20const__2c_20char_20const__2c_20bool_2c_20bool_29(($6 | 0) < 0 ? $5 : $0, (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($4, 16), wasm2js_i32$4 = $4 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($4, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2, $3);
  SAFE_HEAP_STORE_i32_4_4($4, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($4, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 16))
  }
  __stack_pointer = $4 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_142____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $4 = __stack_pointer - 48 | 0;
  __stack_pointer = $4;
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $6 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i32_4_4($4 + 32 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($4, 24, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($4, 20, 53464);
  SAFE_HEAP_STORE_i32_4_4($4, 36, $1);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($4 + 20 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($4, 20, 53312);
  $7 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($4, 24), wasm2js_i32$4 = $4 + 24 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($4, 35) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 36), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $1 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($4 + 8 | 0, $2);
  $2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 8), 0) | 0) != 2 ? $1 + 4 | 0 : 0;
  $8 = !$2;
  $5 = ($6 | 0) < 0 ? $5 : $0;
  if ($2) {
   $0 = (SAFE_HEAP_LOAD_i32_1_U_1($2, 0) | 0) != 0
  } else {
   $0 = 0
  }
  $0 = ImGui__MenuItemEx_28char_20const__2c_20char_20const__2c_20char_20const__2c_20bool_2c_20bool_29($5, $7, $0, $3);
  if (!($8 | !$0)) {
   SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_1_U_1($2, 0) ^ 1)
  }
  $2 = $0;
  SAFE_HEAP_STORE_i32_4_4($1, 0, 52584);
  $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($4, 40, SAFE_HEAP_LOAD_i32_1_U_1($1, 4));
   $1 = $4 + 40 | 0;
   $0 = _emval_take_value(72652, $1 | 0) | 0;
   $3 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 40, 0);
   $1 = _emval_take_value(72760, $1 | 0) | 0;
   _emval_set_property($3 | 0, $1 | 0, $0 | 0);
   _emval_decref($1 | 0);
   _emval_decref($0 | 0);
  }
  SAFE_HEAP_STORE_i32_4_4($4, 20, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($4, 35) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($4, 24))
  }
  __stack_pointer = $4 + 48 | 0;
  return $2 | 0;
 }
 
 function embind_init_ImGui_28_29__$_143____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  ImGui__SetTooltip_28char_20const__2c_20____29(5950, $1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_144____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return ImGui__BeginPopup_28char_20const__2c_20int_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1) | 0;
 }
 
 function embind_init_ImGui_28_29__$_145____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $7 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($5 + 12 | 0, $1);
  $10 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($7, 8), 0) | 0) != 2 ? $7 + 4 | 0 : 0;
  $0 = $6;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  $8 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($1, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($1 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $3 = $8;
  while (1) {
   $1 = $0;
   $0 = $0 + 1 | 0;
   $9 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
   if ($9) {
    label$4 : {
     if (($9 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
      break label$4
     }
     $3 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) == 35 ? $8 : $3;
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4((($9 ^ $3 & 255) << 2) + 19360 | 0, 0) ^ $3 >>> 8;
   }
   if ($9) {
    continue
   }
   break;
  };
  $1 = $3 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 7136) | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($4, 7140, $1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 7196) | 0) == ($1 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($4, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($4, 7112) | 0) == ($1 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($1, 11, $6)
  }
  __inlined_func$ImGui__BeginPopupModal_28char_20const__2c_20bool__2c_20int_29 : {
   label$10 : {
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $8 = SAFE_HEAP_LOAD_i32_4_4($0, 7468);
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7480);
    if (($8 | 0) > ($3 | 0)) {
     if ((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0 + 7476 | 0, 0) + Math_imul($3, 36) | 0, 0) | 0) == ($1 | 0)) {
      break label$10
     }
    }
    SAFE_HEAP_STORE_i32_4_4($4, 7300, 0);
    $0 = 0;
    break __inlined_func$ImGui__BeginPopupModal_28char_20const__2c_20bool__2c_20int_29;
   }
   if (!(SAFE_HEAP_LOAD_i32_1_U_1($4, 7300) & 1)) {
    $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0 + 7504 | 0, 0), 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($1 + 8 | 0, 0);
    $12 = SAFE_HEAP_LOAD_f32_4_4($1 + 16 | 0, 0);
    $13 = SAFE_HEAP_LOAD_f32_4_4($1, 4);
    $14 = SAFE_HEAP_LOAD_f32_4_4($1, 12);
    SAFE_HEAP_STORE_i64_8_4($0 + 7324 | 0, 0, 1056964608, 1056964608);
    SAFE_HEAP_STORE_i32_4_4($0, 7300, SAFE_HEAP_LOAD_i32_4_4($0, 7300) | 1);
    SAFE_HEAP_STORE_i32_4_4($0 + 7304 | 0, 0, 4);
    SAFE_HEAP_STORE_f32_4_4($0 + 7316 | 0, 0, Math_fround($13 + Math_fround($14 * Math_fround(.5))));
    SAFE_HEAP_STORE_f32_4_4($0 + 7320 | 0, 0, Math_fround($11 + Math_fround($12 * Math_fround(.5))));
   }
   $1 = ImGui__Begin_28char_20const__2c_20bool__2c_20int_29($6, $10, $2 | 201326624);
   label$13 : {
    if ($1) {
     $0 = 1;
     if (!$10) {
      break __inlined_func$ImGui__BeginPopupModal_28char_20const__2c_20bool__2c_20int_29
     }
     $0 = 1;
     if (SAFE_HEAP_LOAD_i32_1_U_1($10, 0)) {
      break label$13
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
     $3 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
     label$16 : {
      if (($3 | 0) != ($2 | 0)) {
       break label$16
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 7597)) {
       break label$16
      }
      if (SAFE_HEAP_LOAD_i32_4_4($0, 7564)) {
       break label$16
      }
      SAFE_HEAP_STORE_i32_4_4($0, 7600, SAFE_HEAP_LOAD_i32_4_4($0, 7600) | 2);
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 1) {
      SAFE_HEAP_STORE_i32_1_1($0, 6998, 1)
     }
     ImGui__End_28_29();
     SAFE_HEAP_STORE_i32_1_1($0, 6998, 0);
     $0 = 0;
     if (!$1) {
      break __inlined_func$ImGui__BeginPopupModal_28char_20const__2c_20bool__2c_20int_29
     }
     ImGui__ClosePopupToLevel_28int_2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($4, 7480), 1);
     $0 = 0;
     break __inlined_func$ImGui__BeginPopupModal_28char_20const__2c_20bool__2c_20int_29;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 7080);
    label$19 : {
     if (($2 | 0) != ($1 | 0)) {
      break label$19
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 7597)) {
      break label$19
     }
     if (SAFE_HEAP_LOAD_i32_4_4($0, 7564)) {
      break label$19
     }
     SAFE_HEAP_STORE_i32_4_4($0, 7600, SAFE_HEAP_LOAD_i32_4_4($0, 7600) | 2);
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($1 + 11 | 0, 0) & 1) {
     SAFE_HEAP_STORE_i32_1_1($0, 6998, 1)
    }
    ImGui__End_28_29();
    SAFE_HEAP_STORE_i32_1_1($0, 6998, 0);
    $0 = 0;
   }
  }
  $1 = $0;
  SAFE_HEAP_STORE_i32_4_4($7, 0, 52584);
  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($5, 24, SAFE_HEAP_LOAD_i32_1_U_1($7, 4));
   $6 = $5 + 24 | 0;
   $0 = _emval_take_value(72652, $6 | 0) | 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 24, 0);
   $3 = $2;
   $2 = _emval_take_value(72760, $6 | 0) | 0;
   _emval_set_property($3 | 0, $2 | 0, $0 | 0);
   _emval_decref($2 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $5 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_146____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  ImGui__OpenPopup_28char_20const__2c_20int_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1);
 }
 
 function embind_init_ImGui_28_29__$_147____invoke_28emscripten__val_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($2, 28, $0);
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($2 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53312);
  ImGui__OpenPopupOnItemClick_28char_20const__2c_20int_29((wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 16), wasm2js_i32$4 = $2 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 16))
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28emscripten__val_2c_20int_29_2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  $0 = FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $2) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_148____invoke_28emscripten__val_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($2, 28, $0);
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($2 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53312);
  $7 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 16), wasm2js_i32$4 = $2 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($4, 7080);
  if (SAFE_HEAP_LOAD_i32_1_U_1($5, 143)) {
   $0 = 0
  } else {
   label$2 : {
    if ($7) {
     $0 = $7;
     $8 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($5, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($5 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
     $3 = $8;
     while (1) {
      $5 = $0;
      $0 = $5 + 1 | 0;
      $6 = SAFE_HEAP_LOAD_i32_1_U_1($5, 0);
      if ($6) {
       label$7 : {
        if (($6 | 0) != 35) {
         break label$7
        }
        if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
         break label$7
        }
        $3 = (SAFE_HEAP_LOAD_i32_1_U_1($5, 2) | 0) == 35 ? $8 : $3;
       }
       $3 = SAFE_HEAP_LOAD_i32_4_4((($6 ^ $3 & 255) << 2) + 19360 | 0, 0) ^ $3 >>> 8;
      }
      if ($6) {
       continue
      }
      break;
     };
     $3 = $3 ^ -1;
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 7136) | 0) == ($3 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($4, 7140, $3)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 7196) | 0) == ($3 | 0)) {
      SAFE_HEAP_STORE_i32_1_1($4, 7200, 1)
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($4, 7112) | 0) != ($3 | 0)) {
      break label$2
     }
     ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($3, 11, $7);
     break label$2;
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($4, 7240);
   }
   label$13 : {
    if (!SAFE_HEAP_LOAD_i32_1_U_1((SAFE_HEAP_LOAD_i32_4_4(0, 73568) + ($1 & 31) | 0) + 1022 | 0, 0)) {
     break label$13
    }
    if (!ImGui__IsItemHovered_28int_29(32)) {
     break label$13
    }
    ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($3, $1);
   }
   $0 = ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($3, 321);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 16))
  }
  __stack_pointer = $2 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_149____invoke_28emscripten__val_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($3, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($3, 28, $0);
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($3 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53312);
  $0 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($3, 16), wasm2js_i32$4 = $3 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($3, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $7 = $0 ? $0 : 1938;
  $0 = $7;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($2, 7080);
  $8 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($4, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($4 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $5 = $8;
  while (1) {
   $4 = $0;
   $0 = $0 + 1 | 0;
   $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
   if ($6) {
    label$4 : {
     if (($6 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
      break label$4
     }
     $5 = (SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) == 35 ? $8 : $5;
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4((($6 ^ $5 & 255) << 2) + 19360 | 0, 0) ^ $5 >>> 8;
   }
   if ($6) {
    continue
   }
   break;
  };
  $4 = $5 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7136) | 0) == ($4 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($2, 7140, $4)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7196) | 0) == ($4 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($2, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 7112) | 0) == ($4 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4, 11, $7)
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$10 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1(($0 + ($1 & 31) | 0) + 1022 | 0, 0)) {
    break label$10
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 7084);
   if (!$5) {
    break label$10
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 7080) | 0) != ($5 | 0)) {
    break label$10
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7508);
   label$11 : {
    if (!$2) {
     break label$11
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($2, 736);
    if (!$2) {
     break label$11
    }
    if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 139)) {
     break label$11
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($5, 736) | 0) == ($2 | 0)) {
     break label$11
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 11 | 0, 0) & 8) {
     break label$10
    }
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 7136);
   label$12 : {
    if (!$2) {
     break label$12
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 7149)) {
     break label$12
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($5, 80) | 0) != ($2 | 0)) {
     break label$10
    }
   }
   if ($1 & 64) {
    if (SAFE_HEAP_LOAD_i32_4_4($0, 7116)) {
     break label$10
    }
    if (SAFE_HEAP_LOAD_i32_4_4($0, 7120)) {
     break label$10
    }
   }
   ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($4, $1);
  }
  $0 = ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($4, 321);
  SAFE_HEAP_STORE_i32_4_4($3, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($3, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 16))
  }
  __stack_pointer = $3 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_150____invoke_28emscripten__val_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($2, 28, $0);
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($2 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53312);
  $7 = $1;
  $0 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 16), wasm2js_i32$4 = $2 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $6 = $0 ? $0 : 1953;
  $0 = $6;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 7080);
  $8 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($1, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($1 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
  $5 = $8;
  while (1) {
   $1 = $0;
   $0 = $0 + 1 | 0;
   $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
   if ($4) {
    label$4 : {
     if (($4 | 0) != 35) {
      break label$4
     }
     if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
      break label$4
     }
     $5 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) == 35 ? $8 : $5;
    }
    $5 = SAFE_HEAP_LOAD_i32_4_4((($4 ^ $5 & 255) << 2) + 19360 | 0, 0) ^ $5 >>> 8;
   }
   if ($4) {
    continue
   }
   break;
  };
  $4 = $5 ^ -1;
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7136) | 0) == ($4 | 0)) {
   SAFE_HEAP_STORE_i32_4_4($3, 7140, $4)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7196) | 0) == ($4 | 0)) {
   SAFE_HEAP_STORE_i32_1_1($3, 7200, 1)
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($3, 7112) | 0) == ($4 | 0)) {
   ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($4, 11, $6)
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$10 : {
   if (!SAFE_HEAP_LOAD_i32_1_U_1(($3 + ($7 & 31) | 0) + 1022 | 0, 0)) {
    break label$10
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($3, 7084);
   label$11 : {
    if (!$1) {
     break label$11
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($3, 7508);
    label$12 : {
     if (!$0) {
      break label$12
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 736);
     if (!$0) {
      break label$12
     }
     if (!SAFE_HEAP_LOAD_i32_1_U_1($0, 139)) {
      break label$12
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 736) | 0) == ($0 | 0)) {
      break label$12
     }
     if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 12) {
      break label$11
     }
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($3, 7136);
    if (!$0) {
     break label$10
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($3, 7149)) {
     break label$10
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 80) | 0) == ($0 | 0)) {
     break label$10
    }
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($3, 7468);
   while (1) {
    label$13 : {
     $1 = $0;
     if (($5 | 0) <= 0) {
      $0 = 0;
      break label$13;
     }
     $5 = $5 - 1 | 0;
     $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3, 7476) + Math_imul($5, 36) | 0, 4);
     label$16 : {
      if ($0) {
       $6 = 0;
       if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 11 | 0, 0) & 8) {
        break label$16
       }
      }
      $0 = $1;
      $6 = 1;
     }
     if ($6) {
      continue
     }
    }
    break;
   };
   if ($0) {
    break label$10
   }
   ImGui__OpenPopupEx_28unsigned_20int_2c_20int_29($4, $7);
  }
  $0 = ImGui__BeginPopupEx_28unsigned_20int_2c_20int_29($4, 321);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 16))
  }
  __stack_pointer = $2 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_151____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $7 = $1 & 128;
  if (!$7) {
   $0 = $4;
   $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $3 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
   $8 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($3, 196) << 2) + SAFE_HEAP_LOAD_i32_4_4($3 + 204 | 0, 0) | 0) - 4 | 0, 0) ^ -1;
   $2 = $8;
   while (1) {
    $3 = $0;
    $0 = $3 + 1 | 0;
    $6 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
    if ($6) {
     label$5 : {
      if (($6 | 0) != 35) {
       break label$5
      }
      if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) != 35) {
       break label$5
      }
      $2 = (SAFE_HEAP_LOAD_i32_1_U_1($3, 2) | 0) == 35 ? $8 : $2;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4((($6 ^ $2 & 255) << 2) + 19360 | 0, 0) ^ $2 >>> 8;
    }
    if ($6) {
     continue
    }
    break;
   };
   $2 = $2 ^ -1;
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7136) | 0) == ($2 | 0)) {
    SAFE_HEAP_STORE_i32_4_4($5, 7140, $2)
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7196) | 0) == ($2 | 0)) {
    SAFE_HEAP_STORE_i32_1_1($5, 7200, 1)
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($5, 7112) | 0) == ($2 | 0)) {
    ImGui__DebugHookIdInfo_28unsigned_20int_2c_20int_2c_20void_20const__2c_20void_20const__29($2, 11, $4)
   }
  }
  $1 = $1 & 256;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 7468);
  __inlined_func$ImGui__IsPopupOpen_28char_20const__2c_20int_29 : {
   if ($7) {
    $2 = ($4 | 0) > 0;
    if ($1) {
     break __inlined_func$ImGui__IsPopupOpen_28char_20const__2c_20int_29
    }
    $2 = (SAFE_HEAP_LOAD_i32_4_4($3, 7480) | 0) < ($4 | 0);
    break __inlined_func$ImGui__IsPopupOpen_28char_20const__2c_20int_29;
   }
   $0 = $2;
   label$13 : {
    if ($1) {
     $2 = ($4 | 0) > 0;
     if (($4 | 0) <= 0) {
      break __inlined_func$ImGui__IsPopupOpen_28char_20const__2c_20int_29
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 7476 | 0, 0);
     $2 = 1;
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($0 | 0)) {
      break label$13
     }
     $2 = 0;
     while (1) {
      $2 = $2 + 1 | 0;
      if (($4 | 0) != ($2 | 0)) {
       if ((SAFE_HEAP_LOAD_i32_4_4($1 + Math_imul($2, 36) | 0, 0) | 0) != ($0 | 0)) {
        continue
       }
      }
      break;
     };
     $2 = ($2 | 0) < ($4 | 0);
     break __inlined_func$ImGui__IsPopupOpen_28char_20const__2c_20int_29;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 7480);
    $2 = 0;
    if (($4 | 0) <= ($1 | 0)) {
     break label$13
    }
    $2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($3 + 7476 | 0, 0) + Math_imul($1, 36) | 0, 0) | 0) == ($0 | 0);
   }
  }
  return $2 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20int_2c_20emscripten__val_2c_20float___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20int_2c_20emscripten__val_2c_20float_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20float_29($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = Math_fround($5);
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $6 = __stack_pointer - 16 | 0;
  __stack_pointer = $6;
  $7 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($7 >>> 0 < 2147483632) {
   label$2 : {
    if ($7 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($6, 15, $7);
     $8 = $6 + 4 | 0;
     break label$2;
    }
    $9 = ($7 | 15) + 1 | 0;
    $8 = operator_20new_28unsigned_20long_29($9);
    SAFE_HEAP_STORE_i32_4_4($6, 12, $9 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($6, 4, $8);
    SAFE_HEAP_STORE_i32_4_4($6, 8, $7);
   }
   if ($7) {
    __memcpy($8, $1 + 4 | 0, $7)
   }
   SAFE_HEAP_STORE_i32_1_1($7 + $8 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($6, 0, $4);
   $0 = FUNCTION_TABLE[$0 | 0]($6 + 4 | 0, $2, $3, $6, $5) | 0;
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($6, 0) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($6, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($6, 4))
   }
   __stack_pointer = $6 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_152____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20int_2c_20emscripten__val_2c_20float_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = Math_fround($4);
  var $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $7 = SAFE_HEAP_LOAD_i32_1_1($0, 11);
  SAFE_HEAP_STORE_i64_8_4($5, 8, 0, 0);
  $0 = ImGui__BeginTable_28char_20const__2c_20int_2c_20int_2c_20ImVec2_20const__2c_20float_29(($7 | 0) < 0 ? $6 : $0, $1, $2, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($3, $5 + 8 | 0), $4);
  __stack_pointer = $5 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_153____invoke_28_29() {
  ImGui__EndTable_28_29();
 }
 
 function emscripten__internal__Invoker_void_2c_20int_2c_20float___invoke_28void_20_28__29_28int_2c_20float_29_2c_20int_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  FUNCTION_TABLE[$0 | 0]($1, $2);
 }
 
 function embind_init_ImGui_28_29__$_154____invoke_28int_2c_20float_29($0, $1) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  ImGui__TableNextRow_28int_2c_20float_29($0, $1);
 }
 
 function embind_init_ImGui_28_29__$_155____invoke_28_29() {
  return ImGui__TableNextColumn_28_29() | 0;
 }
 
 function embind_init_ImGui_28_29__$_156____invoke_28int_29($0) {
  $0 = $0 | 0;
  return ImGui__TableSetColumnIndex_28int_29($0) | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20float_2c_20unsigned_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20float_2c_20unsigned_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20float_2c_20unsigned_20int_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($6 >>> 0 < 2147483632) {
   label$2 : {
    if ($6 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 15, $6);
     $7 = $5 + 4 | 0;
     break label$2;
    }
    $8 = ($6 | 15) + 1 | 0;
    $7 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($5, 12, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $7);
    SAFE_HEAP_STORE_i32_4_4($5, 8, $6);
   }
   if ($6) {
    __memcpy($7, $1 + 4 | 0, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($6 + $7 | 0, 0, 0);
   FUNCTION_TABLE[$0 | 0]($5 + 4 | 0, $2, $3, $4);
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 4))
   }
   __stack_pointer = $5 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_157____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20float_2c_20unsigned_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  ImGui__TableSetupColumn_28char_20const__2c_20int_2c_20float_2c_20unsigned_20int_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1, $2, $3);
 }
 
 function embind_init_ImGui_28_29__$_158____invoke_28int_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = Math_fround(0);
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
  if ($4 & 16777216) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 84);
   $2 = ($0 | 0) < ($2 | 0) ? $0 : $2;
  }
  SAFE_HEAP_STORE_i32_1_1($3, 435, $2);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3, 360);
  $6 = SAFE_HEAP_LOAD_f32_4_4($0, 88);
  $1 = $4 << 6 >> 31 & $1;
  SAFE_HEAP_STORE_i32_1_1($3, 433, $1);
  SAFE_HEAP_STORE_i32_1_1($3, 436, $6 != Math_fround(0.0) ? $2 : 0);
  $0 = SAFE_HEAP_LOAD_f32_4_4($0 + 92 | 0, 0) != Math_fround(0.0) ? $1 : 0;
  SAFE_HEAP_STORE_i32_1_1($3, 434, $0);
  SAFE_HEAP_STORE_i32_1_1($3, 452, !($0 & 255));
  $1 = $2 << 24 >> 24;
  if (($1 | 0) > 0) {
   $2 = 0;
   while (1) {
    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
    $0 = SAFE_HEAP_LOAD_i32_1_1($4 + $2 | 0, 0);
    if (!(($0 | 0) == ($2 | 0) | ($0 | 0) < $1 << 24 >> 24)) {
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
     $4 = $1 + Math_imul(SAFE_HEAP_LOAD_i32_1_1($0 + $4 | 0, 0), 104) | 0;
     $5 = SAFE_HEAP_LOAD_i32_1_U_1($4, 82);
     $1 = $1 + Math_imul($0, 104) | 0;
     SAFE_HEAP_STORE_i32_1_1($4, 82, SAFE_HEAP_LOAD_i32_1_U_1($1, 82));
     SAFE_HEAP_STORE_i32_1_1($1, 82, $5);
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
     $0 = $0 + $1 | 0;
     $4 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
     $5 = $0;
     $0 = $1 + $2 | 0;
     SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($0, 0));
     SAFE_HEAP_STORE_i32_1_1($0, 0, $4);
    }
    $0 = SAFE_HEAP_LOAD_i32_1_1($3, 435);
    $1 = $0;
    $2 = $2 + 1 | 0;
    if (($0 | 0) > ($2 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function embind_init_ImGui_28_29__$_159____invoke_28_29() {
  ImGui__TableHeadersRow_28_29();
 }
 
 function embind_init_ImGui_28_29__$_160____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  ImGui__TableHeader_28char_20const__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
 }
 
 function embind_init_ImGui_28_29__$_161____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if (SAFE_HEAP_LOAD_i32_1_U_1($1, 4) & 8) {
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 441)) {
    ImGui__TableUpdateLayout_28ImGuiTable__29($1)
   }
   ImGui__TableSortSpecsBuild_28ImGuiTable__29($1);
   $1 = $1 + 404 | 0;
  } else {
   $1 = 0
  }
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49608, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_162____invoke_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($0) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 84)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_163____invoke_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($0) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 92)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_164____invoke_28_29() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($0) {
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 88)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int___invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = $2 + 4 | 0;
  FUNCTION_TABLE[$0 | 0]($4, $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
  $3 = SAFE_HEAP_LOAD_i32_1_U_1($2, 15);
  $5 = $3 << 24 >> 24;
  $0 = ($5 | 0) < 0;
  $1 = $0 ? $1 : $3 & 127;
  $3 = dlmalloc($1 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
  $6 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
  __memcpy($3 + 4 | 0, $0 ? $6 : $4, $1);
  if (($5 | 0) < 0) {
   dlfree($6)
  }
  __stack_pointer = $2 + 16 | 0;
  return $3 | 0;
 }
 
 function embind_init_ImGui_28_29__$_165____invoke_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  $3 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   if (($1 | 0) < 0) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 92)
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($2, 441)) {
    $3 = 19354;
    if ((SAFE_HEAP_LOAD_i32_1_1($2, 419) | 0) <= ($1 | 0)) {
     break label$1
    }
   }
   $1 = SAFE_HEAP_LOAD_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($2, 16) + Math_imul($1, 104) | 0, 80);
   $3 = 19354;
   if (($1 | 0) == -1) {
    break label$1
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($2 + 372 | 0, 0) + $1 | 0;
  }
  $2 = strlen($3);
  if ($2 >>> 0 < 2147483632) {
   label$2 : {
    if ($2 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($0, 11, $2);
     break label$2;
    }
    $4 = ($2 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $4 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
    $0 = $1;
   }
   if ($2) {
    memmove($0, $3, $2)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_166____invoke_28int_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($1) {
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 92)
   }
   __inlined_func$ImGui__TableGetColumnFlags_28int_29 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 84) | 0) == ($0 | 0)) {
     $0 = ((SAFE_HEAP_LOAD_i32_1_1($1, 420) | 0) == ($0 | 0)) << 27;
     break __inlined_func$ImGui__TableGetColumnFlags_28int_29;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 16) + Math_imul($0, 104) | 0, 0);
   }
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_167____invoke_28int_2c_20bool_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 8036);
  if ($2) {
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 92)
   }
   SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($2, 16) + Math_imul($0, 104) | 0, 92, $1);
  }
 }
 
 function emscripten__internal__Invoker_void_2c_20int_2c_20unsigned_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20unsigned_20int_2c_20int_29_2c_20int_2c_20unsigned_20int_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[$0 | 0]($1, $2, $3);
 }
 
 function embind_init_ImGui_28_29__$_168____invoke_28int_2c_20unsigned_20int_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  ImGui__TableSetBgColor_28int_2c_20unsigned_20int_2c_20int_29($0, $1, $2);
 }
 
 function emscripten__internal__Invoker_void_2c_20int_2c_20emscripten__val_2c_20bool___invoke_28void_20_28__29_28int_2c_20emscripten__val_2c_20bool_29_2c_20int_2c_20emscripten___EM_VAL__2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
  FUNCTION_TABLE[$0 | 0]($1, $4 + 12 | 0, $3);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_169____invoke_28int_2c_20emscripten__val_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = Math_fround(0), $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15 = 0, $16 = Math_fround(0), $17 = Math_fround(0), $18 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $8 = __stack_pointer - 32 | 0;
  __stack_pointer = $8;
  SAFE_HEAP_STORE_i32_4_4($8 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($8, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($8, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($8, 28, $1);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($8 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($8, 12, 53312);
  $1 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($8, 16), wasm2js_i32$4 = $8 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($8, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($8, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $11 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  SAFE_HEAP_STORE_i32_1_1($11, 140, 1);
  $7 = $2 ^ 1;
  $2 = SAFE_HEAP_LOAD_i32_4_4($11 + 368 | 0, 0);
  label$1 : {
   if ($2) {
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 16) | 0) == ($0 | 0)) {
     if ((SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0) == ($7 | 0)) {
      break label$1
     }
    }
    ImGui__EndColumns_28_29();
   }
   if (($0 | 0) == 1) {
    break label$1
   }
   $2 = 0;
   $6 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $4 = SAFE_HEAP_LOAD_i32_4_4($6, 7080);
   SAFE_HEAP_STORE_i32_1_1($4, 140, 1);
   $11 = $0;
   ImGui__PushID_28int_29($1 ? 287454023 : $0 + 287454023 | 0);
   $9 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($4, $1 ? $1 : 4745);
   ImGui__PopID_28_29();
   $15 = __stack_pointer - 128 | 0;
   __stack_pointer = $15;
   $10 = SAFE_HEAP_LOAD_i32_4_4($4, 560);
   $0 = ($10 | 0) > 0;
   label$10 : {
    if (($10 | 0) <= 0) {
     $2 = $0;
     break label$10;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($4 + 568 | 0, 0);
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($9 | 0)) {
     $2 = $0;
     $0 = $1;
     break label$10;
    }
    $0 = $1;
    while (1) {
     $2 = $2 + 1 | 0;
     if (($10 | 0) != ($2 | 0)) {
      $0 = Math_imul($2, 124) + $1 | 0;
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($9 | 0)) {
       continue
      }
     }
     break;
    };
    $2 = ($2 | 0) < ($10 | 0);
   }
   if (!$2) {
    memset($15 + 4 | 0, 0, 124);
    $12 = SAFE_HEAP_LOAD_i32_4_4($4 + 564 | 0, 0);
    label$7 : {
     if (($12 | 0) != ($10 | 0)) {
      break label$7
     }
     $1 = $12 ? $12 + (($12 | 0) / 2 | 0) | 0 : 8;
     $0 = $10 + 1 | 0;
     $2 = ($0 | 0) < ($1 | 0) ? $1 : $0;
     if (($12 | 0) >= ($2 | 0)) {
      break label$7
     }
     $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($2, 124));
     $0 = SAFE_HEAP_LOAD_i32_4_4($4 + 568 | 0, 0);
     if ($0) {
      __memcpy($1, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 560), 124));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($4, 568));
     }
     SAFE_HEAP_STORE_i32_4_4($4, 564, $2);
     SAFE_HEAP_STORE_i32_4_4($4, 568, $1);
    }
    __memcpy(SAFE_HEAP_LOAD_i32_4_4($4 + 568 | 0, 0) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 560), 124) | 0, $15 + 4 | 0, 124);
    SAFE_HEAP_STORE_i32_4_4($4, 560, SAFE_HEAP_LOAD_i32_4_4($4, 560) + 1 | 0);
    ImDrawListSplitter__ClearFreeMemory_28_29($15 + 108 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($15 + 124 | 0, 0);
    if ($0) {
     ImGui__MemFree_28void__29($0)
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($15 + 104 | 0, 0);
    if ($0) {
     ImGui__MemFree_28void__29($0)
    }
    $0 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 560), 124) + SAFE_HEAP_LOAD_i32_4_4($4, 568) | 0) - 124 | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 0, $9);
   }
   __stack_pointer = $15 + 128 | 0;
   $2 = $0;
   SAFE_HEAP_STORE_i32_4_4($2, 16, $11);
   SAFE_HEAP_STORE_i32_4_4($2, 12, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 4, $7);
   SAFE_HEAP_STORE_i32_4_4($4 + 368 | 0, 0, $2);
   $1 = $4 + 212 | 0;
   SAFE_HEAP_STORE_f32_4_4($2, 36, SAFE_HEAP_LOAD_f32_4_4($1, 0));
   SAFE_HEAP_STORE_f32_4_4($2, 40, SAFE_HEAP_LOAD_f32_4_4($4 + 232 | 0, 0));
   SAFE_HEAP_STORE_i64_8_4($2 + 52 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($4 + 504 | 0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($2, 44, SAFE_HEAP_LOAD_i64_8_4($4, 496), i64toi32_i32$HIGH_BITS);
   $0 = $4 + 488 | 0;
   SAFE_HEAP_STORE_i64_8_4($2 + 84 | 0, 0, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($2, 76, SAFE_HEAP_LOAD_i64_8_4($4, 480), i64toi32_i32$HIGH_BITS);
   $7 = $0;
   $0 = $4 + 472 | 0;
   SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_4($0, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i64_8_4($4, 480, SAFE_HEAP_LOAD_i64_8_4($4, 464), i64toi32_i32$HIGH_BITS);
   $13 = SAFE_HEAP_LOAD_f32_4_4($0, 0);
   $16 = SAFE_HEAP_LOAD_f32_4_4($4, 72);
   $18 = SAFE_HEAP_LOAD_f32_4_4($6 + 5492 | 0, 0);
   $17 = SAFE_HEAP_LOAD_f32_4_4($4, 60);
   $3 = Math_fround($18 - $17);
   $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
   $14 = Math_fround($3 + Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 272 | 0, 0) - $18));
   SAFE_HEAP_STORE_f32_4_4($2, 20, $14);
   $5 = Math_fround(Math_fround($18 + $13) - $3);
   $3 = Math_fround($17 * Math_fround(.5));
   $3 = $3 >= $16 ? $3 : $16;
   label$101 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$101;
    }
    $0 = -2147483648;
   }
   $3 = Math_fround($13 + Math_fround($0 | 0));
   $5 = Math_fround(($3 > $5 ? $5 : $3) - SAFE_HEAP_LOAD_f32_4_4($4, 12));
   $3 = Math_fround($14 + Math_fround(1.0));
   SAFE_HEAP_STORE_f32_4_4($2, 24, $3 <= $5 ? $5 : $3);
   $3 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
   SAFE_HEAP_STORE_f32_4_4($2, 28, $3);
   SAFE_HEAP_STORE_f32_4_4($2, 32, $3);
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 92);
   $6 = $11 + 1 | 0;
   if (!(!$0 | ($0 | 0) == ($6 | 0))) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($2 + 96 | 0, 0);
    label$4 : {
     if (($1 | 0) >= 0) {
      break label$4
     }
     $0 = $1 + (($1 | 0) / 2 | 0) | 0;
     $7 = ($0 | 0) > 0 ? $0 : 0;
     if (($1 | 0) >= ($7 | 0)) {
      break label$4
     }
     $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($7, 28));
     $0 = SAFE_HEAP_LOAD_i32_4_4($2 + 100 | 0, 0);
     if ($0) {
      __memcpy($1, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 92), 28));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 100));
     }
     SAFE_HEAP_STORE_i32_4_4($2, 96, $7);
     SAFE_HEAP_STORE_i32_4_4($2, 100, $1);
    }
    SAFE_HEAP_STORE_i32_4_4($2, 92, 0);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($2, 92);
   SAFE_HEAP_STORE_i32_1_1($2, 8, !$0);
   label$6 : {
    if ($0) {
     break label$6
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($2 + 96 | 0, 0) | 0) <= ($11 | 0)) {
     $1 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($6, 28));
     $0 = SAFE_HEAP_LOAD_i32_4_4($2 + 100 | 0, 0);
     if ($0) {
      __memcpy($1, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 92), 28));
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 100));
     }
     SAFE_HEAP_STORE_i32_4_4($2, 96, $6);
     SAFE_HEAP_STORE_i32_4_4($2, 100, $1);
    }
    if (($11 | 0) < 0) {
     break label$6
    }
    $5 = Math_fround($11 | 0);
    $0 = 0;
    while (1) {
     $1 = $0;
     $3 = Math_fround(Math_fround($0 | 0) / $5);
     $0 = SAFE_HEAP_LOAD_i32_4_4($2, 92);
     $9 = SAFE_HEAP_LOAD_i32_4_4($2, 96);
     label$1012 : {
      if (($0 | 0) != ($9 | 0)) {
       break label$1012
      }
      $7 = $9 ? $9 + (($9 | 0) / 2 | 0) | 0 : 8;
      $0 = $0 + 1 | 0;
      $6 = ($0 | 0) < ($7 | 0) ? $7 : $0;
      if (($9 | 0) >= ($6 | 0)) {
       break label$1012
      }
      $7 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($6, 28));
      $0 = SAFE_HEAP_LOAD_i32_4_4($2, 100);
      if ($0) {
       __memcpy($7, $0, Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 92), 28));
       ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($2, 100));
      }
      SAFE_HEAP_STORE_i32_4_4($2, 96, $6);
      SAFE_HEAP_STORE_i32_4_4($2, 100, $7);
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($2, 100) + Math_imul(SAFE_HEAP_LOAD_i32_4_4($2, 92), 28) | 0;
     SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
     SAFE_HEAP_STORE_f32_4_4($0, 0, $3);
     SAFE_HEAP_STORE_i64_8_4($0 + 12 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i64_8_4($0 + 20 | 0, 0, 0, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 92, SAFE_HEAP_LOAD_i32_4_4($2, 92) + 1 | 0);
     $0 = $1 + 1 | 0;
     if (($1 | 0) != ($11 | 0)) {
      continue
     }
     break;
    };
   }
   if (($11 | 0) > 0) {
    $0 = 0;
    while (1) {
     $5 = SAFE_HEAP_LOAD_f32_4_4($4, 12);
     $6 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
     if ($6) {
      $13 = SAFE_HEAP_LOAD_f32_4_4($6, 24);
      $3 = SAFE_HEAP_LOAD_f32_4_4($6, 20);
      $3 = Math_fround(Math_fround(Math_fround($13 - $3) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($6 + 100 | 0, 0) + Math_imul($0, 28) | 0, 0)) + $3);
     } else {
      $3 = Math_fround(0.0)
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($2, 100);
     $1 = $0 + 1 | 0;
     $3 = Math_fround(Math_fround($5 + $3) + Math_fround(.5));
     label$18 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $9 = ~~$3;
       break label$18;
      }
      $9 = -2147483648;
     }
     $16 = Math_fround($9 | 0);
     if ($6) {
      $13 = SAFE_HEAP_LOAD_f32_4_4($6, 24);
      $3 = SAFE_HEAP_LOAD_f32_4_4($6, 20);
      $3 = Math_fround(Math_fround(Math_fround($13 - $3) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($6 + 100 | 0, 0) + Math_imul($1, 28) | 0, 0)) + $3);
     } else {
      $3 = Math_fround(0.0)
     }
     $10 = $7 + Math_imul($0, 28) | 0;
     SAFE_HEAP_STORE_f32_4_4($10, 12, $16);
     $12 = $10 + 24 | 0;
     SAFE_HEAP_STORE_i32_4_4($12, 0, 2139095039);
     $9 = $10 + 16 | 0;
     SAFE_HEAP_STORE_i32_4_4($9, 0, -8388609);
     $6 = $10 + 20 | 0;
     $3 = Math_fround(Math_fround(Math_fround($5 + $3) + Math_fround(-1.0)) + Math_fround(.5));
     label$22 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $0 = ~~$3;
       break label$22;
      }
      $0 = -2147483648;
     }
     $17 = Math_fround($0 | 0);
     SAFE_HEAP_STORE_f32_4_4($6, 0, $17);
     $14 = SAFE_HEAP_LOAD_f32_4_4($4, 500);
     $5 = SAFE_HEAP_LOAD_f32_4_4($4, 496);
     $7 = SAFE_HEAP_LOAD_i64_8_4($4, 504);
     $0 = i64toi32_i32$HIGH_BITS;
     $3 = (wasm2js_scratch_store_i32(2, $7), wasm2js_scratch_load_f32());
     SAFE_HEAP_STORE_f32_4_4($10, 12, $5 > $16 ? $5 : $3 < $16 ? $3 : $16);
     $3 = (wasm2js_scratch_store_i32(2, $0), wasm2js_scratch_load_f32());
     SAFE_HEAP_STORE_f32_4_4($9, 0, $14 > Math_fround(-3402823466385288598117041.0e14) ? $14 : $3 < Math_fround(-3402823466385288598117041.0e14) ? $3 : Math_fround(-3402823466385288598117041.0e14));
     $14 = SAFE_HEAP_LOAD_f32_4_4($4, 500);
     $5 = SAFE_HEAP_LOAD_f32_4_4($4, 496);
     $7 = SAFE_HEAP_LOAD_i64_8_4($4, 504);
     $0 = i64toi32_i32$HIGH_BITS;
     $3 = (wasm2js_scratch_store_i32(2, $7), wasm2js_scratch_load_f32());
     SAFE_HEAP_STORE_f32_4_4($6, 0, $5 > $17 ? $5 : $3 < $17 ? $3 : $17);
     $3 = (wasm2js_scratch_store_i32(2, $0), wasm2js_scratch_load_f32());
     SAFE_HEAP_STORE_f32_4_4($12, 0, $14 > Math_fround(3402823466385288598117041.0e14) ? $14 : $3 < Math_fround(3402823466385288598117041.0e14) ? $3 : Math_fround(3402823466385288598117041.0e14));
     $0 = $1;
     if (($11 | 0) != ($0 | 0)) {
      continue
     }
     break;
    };
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
   if (($1 | 0) > 1) {
    $0 = $2 + 104 | 0;
    ImDrawListSplitter__Split_28ImDrawList__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($4, 580), $1 + 1 | 0);
    ImDrawListSplitter__SetCurrentChannel_28ImDrawList__2c_20int_29($0, SAFE_HEAP_LOAD_i32_4_4($4, 580), 1);
    $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0) + 100 | 0, 0);
    ImGui__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0 + 12 | 0, $0 + 20 | 0, 0);
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
   $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080) + 368 | 0, 0);
   if ($2) {
    $0 = $1;
    if (($0 | 0) < 0) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12)
    }
    $5 = SAFE_HEAP_LOAD_f32_4_4($2, 24);
    $3 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
    $5 = Math_fround(Math_fround(Math_fround($5 - $3) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($2 + 100 | 0, 0) + Math_imul($0, 28) | 0, 0)) + $3);
   } else {
    $5 = Math_fround(0.0)
   }
   $3 = Math_fround(0.0);
   if ($2) {
    if (($1 | 0) > -2) {
     $0 = $1 + 1 | 0
    } else {
     $0 = SAFE_HEAP_LOAD_i32_4_4($2, 12)
    }
    $13 = SAFE_HEAP_LOAD_f32_4_4($2, 24);
    $3 = SAFE_HEAP_LOAD_f32_4_4($2, 20);
    $3 = Math_fround(Math_fround(Math_fround($13 - $3) * SAFE_HEAP_LOAD_f32_4_4(SAFE_HEAP_LOAD_i32_4_4($2 + 100 | 0, 0) + Math_imul($0, 28) | 0, 0)) + $3);
   }
   ImGui__PushItemWidth_28float_29(Math_fround(Math_fround($3 - $5) * Math_fround(.6499999761581421)));
   $5 = SAFE_HEAP_LOAD_f32_4_4($4, 12);
   SAFE_HEAP_STORE_f32_4_4($4, 472, Math_fround(Math_fround($3 + $5) - $18));
   $3 = Math_fround($18 - SAFE_HEAP_LOAD_f32_4_4($4, 60));
   $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
   SAFE_HEAP_STORE_f32_4_4($4 + 276 | 0, 0, $3);
   $3 = Math_fround($3 + Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($4, 272)));
   label$30 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0 = ~~$3;
     break label$30;
    }
    $0 = -2147483648;
   }
   SAFE_HEAP_STORE_f32_4_4($4, 208, Math_fround($0 | 0));
  }
  SAFE_HEAP_STORE_i32_4_4($8, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($8, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 16))
  }
  __stack_pointer = $8 + 32 | 0;
 }
 
 function emscripten__internal__Invoker_float_2c_20int___invoke_28float_20_28__29_28int_29_2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0 | 0]($1)));
 }
 
 function embind_init_ImGui_28_29__$_170____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = 0, $9 = 0, $10 = 0, $11 = Math_fround(0), $12 = Math_fround(0), $13 = 0, $14 = 0, $15 = Math_fround(0), $16 = Math_fround(0), wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $0 = 0;
  $10 = __stack_pointer - 16 | 0;
  __stack_pointer = $10;
  $5 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $6 = SAFE_HEAP_LOAD_i32_4_4($5, 7080);
  if (!SAFE_HEAP_LOAD_i32_1_U_1($6, 143)) {
   $13 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29($6, $3);
   $0 = ImGuiStorage__GetIntRef_28unsigned_20int_2c_20int_29($5 + 8128 | 0, $13);
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   label$2 : {
    if (($3 | 0) != -1) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($5 + 8124 | 0, 0) + Math_imul($3, 144) | 0;
     break label$2;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($5 + 8140 | 0, 0));
    $0 = $5 + 8116 | 0;
    $8 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    label$1 : {
     if (($8 | 0) == ($4 | 0)) {
      $2 = $4 + 1 | 0;
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      label$3 : {
       if (($4 | 0) < ($3 | 0)) {
        break label$3
       }
       $4 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
       $4 = ($2 | 0) < ($4 | 0) ? $4 : $2;
       if (($3 | 0) >= ($4 | 0)) {
        break label$3
       }
       $3 = ImGui__MemAlloc_28unsigned_20long_29(Math_imul($4, 144));
       $9 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
       if ($9) {
        __memcpy($3, $9, Math_imul(SAFE_HEAP_LOAD_i32_4_4($0, 0), 144));
        ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($0, 8));
       }
       SAFE_HEAP_STORE_i32_4_4($0, 4, $4);
       SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
      }
      SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
      $9 = SAFE_HEAP_LOAD_i32_4_4($0, 24) + 1 | 0;
      break label$1;
     }
     $9 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8) + Math_imul($8, 144) | 0, 0);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 24, $9);
    $3 = Math_imul($8, 144);
    $2 = memset(SAFE_HEAP_LOAD_i32_4_4($0, 8) + $3 | 0, 0, 144);
    SAFE_HEAP_STORE_i32_2_2($2, 108, 65535);
    SAFE_HEAP_STORE_i64_8_4($2, 32, -1, -1);
    SAFE_HEAP_STORE_i32_4_4($0, 28, SAFE_HEAP_LOAD_i32_4_4($0, 28) + 1 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8) + $3 | 0;
   }
   $11 = SAFE_HEAP_LOAD_f32_4_4($6 + 472 | 0, 0);
   $7 = SAFE_HEAP_LOAD_f32_4_4($6, 208);
   $12 = SAFE_HEAP_LOAD_f32_4_4($5 + 5480 | 0, 0);
   $15 = Math_fround($12 + $12);
   $12 = SAFE_HEAP_LOAD_f32_4_4($6 + 212 | 0, 0);
   SAFE_HEAP_STORE_f32_4_4($10 + 12 | 0, 0, Math_fround($15 + Math_fround($12 + SAFE_HEAP_LOAD_f32_4_4($5, 6468))));
   SAFE_HEAP_STORE_f32_4_4($10, 8, $11);
   SAFE_HEAP_STORE_f32_4_4($10, 4, $12);
   SAFE_HEAP_STORE_f32_4_4($10, 0, $7);
   SAFE_HEAP_STORE_i32_4_4($0, 16, $13);
   $3 = $1 | 2097152;
   $5 = __stack_pointer - 16 | 0;
   __stack_pointer = $5;
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   $6 = SAFE_HEAP_LOAD_i32_4_4($1, 7080);
   $13 = SAFE_HEAP_LOAD_i32_1_U_1($6, 143);
   label$10 : {
    if ($13) {
     break label$10
    }
    if (!($3 & 1048576)) {
     ImGui__PushOverrideID_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4($0, 16))
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
    $2 = SAFE_HEAP_LOAD_i32_4_4($4 + 8124 | 0, 0);
    label$31 : {
     if ($0 >>> 0 < $2 >>> 0) {
      $8 = -1;
      $9 = $0;
      break label$31;
     }
     $8 = -1;
     $9 = $0;
     if ($2 + Math_imul(SAFE_HEAP_LOAD_i32_4_4($4, 8116), 144) >>> 0 <= $0 >>> 0) {
      break label$31
     }
     $8 = ($0 - $2 | 0) / 144 | 0;
     $9 = 0;
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8148);
    $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 8152 | 0, 0);
    label$5 : {
     if (($4 | 0) != ($2 | 0)) {
      break label$5
     }
     $14 = $2 ? $2 + (($2 | 0) / 2 | 0) | 0 : 8;
     $4 = $4 + 1 | 0;
     $4 = ($4 | 0) < ($14 | 0) ? $14 : $4;
     if (($2 | 0) >= ($4 | 0)) {
      break label$5
     }
     $2 = ImGui__MemAlloc_28unsigned_20long_29($4 << 3);
     $14 = SAFE_HEAP_LOAD_i32_4_4($1 + 8156 | 0, 0);
     if ($14) {
      __memcpy($2, $14, SAFE_HEAP_LOAD_i32_4_4($1, 8148) << 3);
      ImGui__MemFree_28void__29(SAFE_HEAP_LOAD_i32_4_4($1, 8156));
     }
     SAFE_HEAP_STORE_i32_4_4($1, 8152, $4);
     SAFE_HEAP_STORE_i32_4_4($1, 8156, $2);
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($1 + 8156 | 0, 0) + (SAFE_HEAP_LOAD_i32_4_4($1, 8148) << 3) | 0;
    SAFE_HEAP_STORE_i32_4_4($2, 4, $8);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $9);
    SAFE_HEAP_STORE_i32_4_4($1, 8112, $0);
    SAFE_HEAP_STORE_i32_4_4($1, 8148, SAFE_HEAP_LOAD_i32_4_4($1, 8148) + 1 | 0);
    SAFE_HEAP_STORE_i64_8_4($0, 124, SAFE_HEAP_LOAD_i64_8_4($6, 208), i64toi32_i32$HIGH_BITS);
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0) == (SAFE_HEAP_LOAD_i32_4_4($1, 6984) | 0)) {
     $11 = SAFE_HEAP_LOAD_f32_4_4($0 + 52 | 0, 0);
     $7 = SAFE_HEAP_LOAD_f32_4_4($0, 112);
     SAFE_HEAP_STORE_i32_4_4($6, 208, SAFE_HEAP_LOAD_i32_4_4($0, 40));
     SAFE_HEAP_STORE_f32_4_4($6 + 212 | 0, 0, Math_fround($11 + $7));
     SAFE_HEAP_STORE_i32_1_1($0, 102, SAFE_HEAP_LOAD_i32_1_U_1($0, 102) + 1 | 0);
     break label$10;
    }
    $2 = $3 & 1;
    label$102 : {
     if (($2 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 12) & 1)) {
      if ($2) {
       break label$102
      }
      if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 105) & 255)) {
       break label$102
      }
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     if ($2 >>> 0 < 2) {
      break label$102
     }
     qsort(SAFE_HEAP_LOAD_i32_4_4($0, 8), $2, 40, 22);
    }
    SAFE_HEAP_STORE_i32_1_1($0, 105, 0);
    $3 = $3 & 192 ? $3 : $3 | 64;
    SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
    SAFE_HEAP_STORE_i64_8_4($0, 40, SAFE_HEAP_LOAD_i64_8_4($10, 0), i64toi32_i32$HIGH_BITS);
    $2 = $0 + 48 | 0;
    SAFE_HEAP_STORE_i64_8_4($2, 0, SAFE_HEAP_LOAD_i64_8_4($10 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_1_1($0, 103, 1);
    SAFE_HEAP_STORE_i32_4_4($0, 36, SAFE_HEAP_LOAD_i32_4_4($0, 32));
    $8 = SAFE_HEAP_LOAD_i32_4_4($1, 6984);
    SAFE_HEAP_STORE_f32_4_4($0, 60, SAFE_HEAP_LOAD_f32_4_4($0, 56));
    SAFE_HEAP_STORE_i32_4_4($0, 32, $8);
    SAFE_HEAP_STORE_i32_4_4($0, 56, 0);
    $11 = SAFE_HEAP_LOAD_f32_4_4($1 + 5496 | 0, 0);
    SAFE_HEAP_STORE_f32_4_4($0, 112, $11);
    $1 = SAFE_HEAP_LOAD_i64_8_4($1 + 5476 | 0, 0);
    $8 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i32_2_2($0, 106, 0);
    SAFE_HEAP_STORE_i64_8_4($0, 116, $1, $8);
    SAFE_HEAP_STORE_i32_1_1($0, 102, 1);
    $1 = $0 + 52 | 0;
    $7 = SAFE_HEAP_LOAD_f32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($6, 208, SAFE_HEAP_LOAD_i32_4_4($0, 40));
    SAFE_HEAP_STORE_f32_4_4($6 + 212 | 0, 0, Math_fround($11 + $7));
    $3 = ImGui__GetColorU32_28int_2c_20float_29($3 & 2097152 ? 35 : 37, Math_fround(1.0));
    $11 = SAFE_HEAP_LOAD_f32_4_4($2, 0);
    $2 = SAFE_HEAP_LOAD_i32_4_4($6, 580);
    $7 = SAFE_HEAP_LOAD_f32_4_4($0, 40);
    $12 = SAFE_HEAP_LOAD_f32_4_4($6, 60);
    $16 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1, 0) + Math_fround(-1.0));
    SAFE_HEAP_STORE_f32_4_4($5, 12, $16);
    $15 = $7;
    $7 = Math_fround($12 * Math_fround(.5));
    label$12 : {
     if (Math_fround(Math_abs($7)) < Math_fround(2147483648.0)) {
      $0 = ~~$7;
      break label$12;
     }
     $0 = -2147483648;
    }
    $7 = Math_fround($0 | 0);
    SAFE_HEAP_STORE_f32_4_4($5, 8, Math_fround($15 - $7));
    SAFE_HEAP_STORE_f32_4_4($5, 4, $16);
    SAFE_HEAP_STORE_f32_4_4($5, 0, Math_fround($11 + $7));
    ImDrawList__AddLine_28ImVec2_20const__2c_20ImVec2_20const__2c_20unsigned_20int_2c_20float_29($2, $5 + 8 | 0, $5, $3, Math_fround(1.0));
   }
   __stack_pointer = $5 + 16 | 0;
   $0 = !$13;
  }
  __stack_pointer = $10 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_171____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  $5 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $0 = access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($4 + 12 | 0, $1);
  $6 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0) != 2 ? $0 + 4 | 0 : 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = 0;
  __inlined_func$ImGui__BeginTabItem_28char_20const__2c_20bool__2c_20int_29 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($1, 7080), 143)) {
    break __inlined_func$ImGui__BeginTabItem_28char_20const__2c_20bool__2c_20int_29
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 8112);
   if ($1) {
    $3 = ImGui__TabItemEx_28ImGuiTabBar__2c_20char_20const__2c_20bool__2c_20int_29($1, $5, $6, $2);
    if (!(!$3 | $2 & 8)) {
     ImGui__PushOverrideID_28unsigned_20int_29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 8) + Math_imul(SAFE_HEAP_LOAD_i32_2_2($1, 108), 40) | 0, 0))
    }
   }
  }
  $1 = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52584);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($4, 24, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
   $3 = $4 + 24 | 0;
   $0 = _emval_take_value(72652, $3 | 0) | 0;
   $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
   SAFE_HEAP_STORE_i32_4_4($4, 24, 0);
   $5 = $2;
   $2 = _emval_take_value(72760, $3 | 0) | 0;
   _emval_set_property($5 | 0, $2 | 0, $0 | 0);
   _emval_decref($2 | 0);
   _emval_decref($0 | 0);
  }
  __stack_pointer = $4 + 32 | 0;
  return $1 | 0;
 }
 
 function embind_init_ImGui_28_29__$_172____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $0 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $3 = 0;
  __inlined_func$ImGui__TabItemButton_28char_20const__2c_20int_29 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1(SAFE_HEAP_LOAD_i32_4_4($2, 7080), 143)) {
    break __inlined_func$ImGui__TabItemButton_28char_20const__2c_20int_29
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($2, 8112);
   if ($2) {
    $3 = ImGui__TabItemEx_28ImGuiTabBar__2c_20char_20const__2c_20bool__2c_20int_29($2, $0, 0, $1 | 2097184)
   } else {
    $3 = 0
   }
  }
  return $3 | 0;
 }
 
 function embind_init_ImGui_28_29__$_173____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3, 8112);
  label$1 : {
   if (!$0) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_1_U_1($0 + 14 | 0, 0) & 16) {
    break label$1
   }
   $5 = ImGuiWindow__GetID_28char_20const__2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4($3, 7080), $1);
   label$2 : {
    if ($5) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     label$4 : {
      if (($2 | 0) <= 0) {
       $1 = ($2 | 0) > 0;
       break label$4;
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($5 | 0)) {
       $0 = $1;
       $1 = 1;
       break label$4;
      }
      $3 = (Math_imul($2, 40) + $1 | 0) - 40 | 0;
      while (1) {
       label$7 : {
        $4 = $4 + 1 | 0;
        if (($2 | 0) == ($4 | 0)) {
         $0 = $3;
         break label$7;
        }
        $0 = Math_imul($4, 40) + $1 | 0;
        if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($5 | 0)) {
         continue
        }
       }
       break;
      };
      $1 = ($2 | 0) > ($4 | 0);
     }
     if ($1) {
      break label$2
     }
    }
    $0 = 0;
   }
   if (!$0) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0, 36, 1);
  }
 }
 
 function embind_init_ImGui_28_29__$_174____invoke_28int_2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0;
  $2 = __stack_pointer - 32 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2 + 24 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 16, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  SAFE_HEAP_STORE_i32_4_4($2, 28, $1);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($2 + 12 | 0)
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53312);
  $1 = (wasm2js_i32$0 = (wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 16), wasm2js_i32$4 = $2 + 16 | 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($2, 28), 0) | 0) != 2, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  label$1 : {
   if (SAFE_HEAP_LOAD_i32_1_U_1($3, 12196)) {
    break label$1
   }
   if (!$1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($3 + 36 | 0, 0)
   }
   if (!$1) {
    break label$1
   }
   if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
    break label$1
   }
   $4 = fopen($1, 13565);
   if (!$4) {
    break label$1
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
   SAFE_HEAP_STORE_i32_4_4($1, 12200, 2);
   SAFE_HEAP_STORE_i32_1_1($1, 12196, 1);
   SAFE_HEAP_STORE_i64_8_4($1, 12220, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 12236, SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 7080) + 344 | 0, 0));
   if (($0 | 0) < 0) {
    $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12244)
   }
   SAFE_HEAP_STORE_i32_1_1($1, 12232, 1);
   SAFE_HEAP_STORE_i32_4_4($1, 12228, 2139095039);
   SAFE_HEAP_STORE_i32_4_4($1, 12240, $0);
   SAFE_HEAP_STORE_i32_4_4($3, 12204, $4);
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12, 53464);
  if ((SAFE_HEAP_LOAD_i32_1_1($2, 27) | 0) < 0) {
   dlfree(SAFE_HEAP_LOAD_i32_4_4($2, 16))
  }
  __stack_pointer = $2 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_175____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var $1 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
  ImGui__LogText_28char_20const__2c_20____29(5950, $1);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_176____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return ImGui__SetDragDropPayload_28char_20const__2c_20void_20const__2c_20unsigned_20long_2c_20int_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0, 0, $3) | 0;
 }
 
 function embind_init_ImGui_28_29__$_177____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return (ImGui__AcceptDragDropPayload_28char_20const__2c_20int_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1) | 0) != 0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_178____invoke_28_29($0) {
  $0 = $0 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
  FUNCTION_TABLE[$0 | 0]($4 + 12 | 0, $4 + 8 | 0, $3);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_179____invoke_28emscripten__val_2c_20emscripten__val_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
  $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $3 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
  ImGui__PushClipRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $3), $2);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_180____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  ImGui__GetItemRectMin_28_29($3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_181____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  ImGui__GetItemRectMax_28_29($3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_182____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0), $6 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_f32_4_4($3 + 7252 | 0, 0);
  $6 = SAFE_HEAP_LOAD_f32_4_4($3 + 7260 | 0, 0);
  $4 = $2 + 8 | 0;
  SAFE_HEAP_STORE_f32_4_4($4, 4, Math_fround(SAFE_HEAP_LOAD_f32_4_4($3 + 7264 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4($3 + 7256 | 0, 0)));
  SAFE_HEAP_STORE_f32_4_4($4, 0, Math_fround($6 - $5));
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $4, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_183____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, ImGui__GetMainViewport_28_29());
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(52088, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_184____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = Math_fround(0);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  $3 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $2 + 8 | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568), 7080);
  $4 = $0 + 212 | 0;
  $1 = 0;
  __inlined_func$ImGui__IsRectVisible_28ImVec2_20const__29 : {
   if (!(SAFE_HEAP_LOAD_f32_4_4($4, 0) < SAFE_HEAP_LOAD_f32_4_4($0 + 508 | 0, 0))) {
    break __inlined_func$ImGui__IsRectVisible_28ImVec2_20const__29
   }
   $1 = 0;
   if (!(Math_fround(SAFE_HEAP_LOAD_f32_4_4($4, 0) + SAFE_HEAP_LOAD_f32_4_4($3, 4)) > SAFE_HEAP_LOAD_f32_4_4($0 + 500 | 0, 0))) {
    break __inlined_func$ImGui__IsRectVisible_28ImVec2_20const__29
   }
   $5 = SAFE_HEAP_LOAD_f32_4_4($0, 208);
   if ($5 < SAFE_HEAP_LOAD_f32_4_4($0, 504)) {
    $1 = Math_fround($5 + SAFE_HEAP_LOAD_f32_4_4($3, 0)) > SAFE_HEAP_LOAD_f32_4_4($0, 496)
   } else {
    $1 = 0
   }
  }
  $0 = $1;
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  $0 = FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $3 + 8 | 0) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_185____invoke_28emscripten__val_2c_20emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i64_8_4($2, 8, 0, 0);
  $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $2 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($2, 0, 0, 0);
  $0 = ImGui__IsRectVisible_28ImVec2_20const__2c_20ImVec2_20const__29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $2));
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_double___invoke_28double_20_28__29_28_29_29($0) {
  $0 = $0 | 0;
  return +FUNCTION_TABLE[$0 | 0]();
 }
 
 function embind_init_ImGui_28_29__$_186____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, GetViewportDrawList_28ImGuiViewportP__2c_20unsigned_20long_2c_20char_20const__29(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 7504 | 0, 0), 0), 0, 11755));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49796, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_187____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, ImGui__GetForegroundDrawList_28_29());
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(49796, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_188____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4(0, 73568) + 6476 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(55976, $1 + 8 | 0) | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_189____invoke_28int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0;
  if ($1 >>> 0 <= 52) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(($1 << 2) + 21212 | 0, 0)
  } else {
   $3 = 7130
  }
  $2 = strlen($3);
  if ($2 >>> 0 < 2147483632) {
   label$2 : {
    if ($2 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($0, 11, $2);
     break label$2;
    }
    $4 = ($2 | 15) + 1 | 0;
    $1 = operator_20new_28unsigned_20long_29($4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $4 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
    $0 = $1;
   }
   if ($2) {
    memmove($0, $3, $2)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_190____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 2202);
  iprintf(19180, $0);
  __stack_pointer = $0 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_191____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 0, 2383);
  iprintf(19180, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 2);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
  $0 = FUNCTION_TABLE[$0 | 0]($4 + 12 | 0, $4 + 8 | 0, $3) | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_192____invoke_28emscripten__val_2c_20emscripten__val_2c_20int_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0.0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  $4 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 72736, $3 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  SAFE_HEAP_STORE_i64_8_4($3, 4, 0, 0);
  if ($4 < 4294967296.0 & $4 >= 0.0) {
   $0 = ~~$4 >>> 0
  } else {
   $0 = 0
  }
  $0 = ImGui__BeginChildFrame_28unsigned_20int_2c_20ImVec2_20const__2c_20int_29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $3 + 4 | 0), $2);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20float_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20float_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_2c_20float_2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($6 >>> 0 < 2147483632) {
   label$2 : {
    if ($6 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($5, 27, $6);
     $7 = $5 + 16 | 0;
     break label$2;
    }
    $8 = ($6 | 15) + 1 | 0;
    $7 = operator_20new_28unsigned_20long_29($8);
    SAFE_HEAP_STORE_i32_4_4($5, 24, $8 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($5, 16, $7);
    SAFE_HEAP_STORE_i32_4_4($5, 20, $6);
   }
   if ($6) {
    __memcpy($7, $1 + 4 | 0, $6)
   }
   SAFE_HEAP_STORE_i32_1_1($6 + $7 | 0, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($5, 12, $4);
   FUNCTION_TABLE[$0 | 0]($5 + 28 | 0, $5 + 16 | 0, $2, $3, $5 + 12 | 0);
   _emval_incref(SAFE_HEAP_LOAD_i32_4_4($5, 28) | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
   _emval_decref($0 | 0);
   _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
   if ((SAFE_HEAP_LOAD_i32_1_1($5, 27) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($5, 16))
   }
   __stack_pointer = $5 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_193____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20float_2c_20emscripten__val_29($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = Math_fround($3);
  $4 = $4 | 0;
  var $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $6 = $5 + 8 | 0;
  ImGui__CalcTextSize_28char_20const__2c_20char_20const__2c_20bool_2c_20float_29($6, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0, $2, $3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $6, $5 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 4) | 0);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__val_2c_20unsigned_20int_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28unsigned_20int_2c_20emscripten__val_29_2c_20unsigned_20int_2c_20emscripten___EM_VAL__29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 8, $2);
  FUNCTION_TABLE[$0 | 0]($3 + 12 | 0, $1, $3 + 8 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_194____invoke_28unsigned_20int_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 32 | 0;
  __stack_pointer = $5;
  $3 = $5 + 16 | 0;
  SAFE_HEAP_STORE_f32_4_4($3, 12, Math_fround(Math_fround($1 >>> 24 >>> 0) * Math_fround(.003921568859368563)));
  SAFE_HEAP_STORE_f32_4_4($3, 0, Math_fround(Math_fround(($1 & 255) >>> 0) * Math_fround(.003921568859368563)));
  SAFE_HEAP_STORE_f32_4_4($3, 8, Math_fround(Math_fround(($1 >>> 16 & 255) >>> 0) * Math_fround(.003921568859368563)));
  SAFE_HEAP_STORE_f32_4_4($3, 4, Math_fround(Math_fround(($1 >>> 8 & 255) >>> 0) * Math_fround(.003921568859368563)));
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 12, $1);
  _emval_incref($1 | 0);
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_f32_4_4($4, 8, SAFE_HEAP_LOAD_f32_4_4($3, 0));
  $2 = _emval_take_value(72796, $4 + 8 | 0) | 0;
  $6 = $5 + 12 | 0;
  $7 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  $1 = _emval_new_cstring(1643) | 0;
  _emval_set_property($7 | 0, $1 | 0, $2 | 0);
  _emval_decref($1 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_f32_4_4($4, 8, SAFE_HEAP_LOAD_f32_4_4($3, 4));
  $2 = _emval_take_value(72796, $4 + 8 | 0) | 0;
  $7 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  $1 = _emval_new_cstring(1245) | 0;
  _emval_set_property($7 | 0, $1 | 0, $2 | 0);
  _emval_decref($1 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_f32_4_4($4, 8, SAFE_HEAP_LOAD_f32_4_4($3, 8));
  $2 = _emval_take_value(72796, $4 + 8 | 0) | 0;
  $7 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  $1 = _emval_new_cstring(1063) | 0;
  _emval_set_property($7 | 0, $1 | 0, $2 | 0);
  _emval_decref($1 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_f32_4_4($4, 8, SAFE_HEAP_LOAD_f32_4_4($3, 12));
  $2 = _emval_take_value(72796, $4 + 8 | 0) | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
  $1 = _emval_new_cstring(1857) | 0;
  _emval_set_property($3 | 0, $1 | 0, $2 | 0);
  _emval_decref($1 | 0);
  _emval_decref($2 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0));
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  __stack_pointer = $4 + 16 | 0;
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 12) | 0);
  __stack_pointer = $5 + 32 | 0;
 }
 
 function embind_init_ImGui_28_29__$_195____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i64_8_8($1 + 8 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_8($1, 0, 0, 0);
  $0 = ImGui__ColorConvertFloat4ToU32_28ImVec4_20const__29(import_ImVec4_28emscripten__val_20const__2c_20ImVec4__29($0, $1));
  __stack_pointer = $1 + 16 | 0;
  return $0 | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20float_2c_20float_2c_20float_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var $7 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  SAFE_HEAP_STORE_i32_4_4($7, 8, $5);
  SAFE_HEAP_STORE_i32_4_4($7, 12, $4);
  SAFE_HEAP_STORE_i32_4_4($7, 4, $6);
  FUNCTION_TABLE[$0 | 0]($1, $2, $3, $7 + 12 | 0, $7 + 8 | 0, $7 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($7, 12) | 0);
  __stack_pointer = $7 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_196____invoke_28float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i32_4_4($6, 36, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53576);
  $3 = $6 + 28 | 0;
  access_value_float_2c_201ul____import_value_28_29($3);
  SAFE_HEAP_STORE_i32_4_4($6, 24, $4);
  SAFE_HEAP_STORE_i32_4_4($6, 16, 53576);
  $7 = $6 + 16 | 0;
  access_value_float_2c_201ul____import_value_28_29($7);
  SAFE_HEAP_STORE_i32_4_4($6, 8, $5);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53576);
  access_value_float_2c_201ul____import_value_28_29($6);
  ImGui__ColorConvertRGBtoHSV_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3 + 4 | 0, $7 + 4 | 0, $6 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53576);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
  SAFE_HEAP_STORE_f32_4_4($6, 40, SAFE_HEAP_LOAD_f32_4_4($6, 4));
  $5 = $6 + 40 | 0;
  $3 = _emval_take_value(72796, $5 | 0) | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 40, 0);
  $8 = $4;
  $4 = _emval_take_value(72760, $5 | 0) | 0;
  _emval_set_property($8 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 16, 53576);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
  SAFE_HEAP_STORE_f32_4_4($6, 0, SAFE_HEAP_LOAD_f32_4_4($6, 20));
  $3 = _emval_take_value(72796, $6 | 0) | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $5 = $4;
  $4 = _emval_take_value(72760, $6 | 0) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53576);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 36);
  SAFE_HEAP_STORE_f32_4_4($6, 16, SAFE_HEAP_LOAD_f32_4_4($6, 32));
  $3 = _emval_take_value(72796, $7 | 0) | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 16, 0);
  $5 = $4;
  $4 = _emval_take_value(72760, $7 | 0) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  __stack_pointer = $6 + 48 | 0;
 }
 
 function embind_init_ImGui_28_29__$_197____invoke_28float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2, $3, $4, $5) {
  $0 = Math_fround($0);
  $1 = Math_fround($1);
  $2 = Math_fround($2);
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0;
  $6 = __stack_pointer - 48 | 0;
  __stack_pointer = $6;
  SAFE_HEAP_STORE_i32_4_4($6, 36, $3);
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53576);
  $3 = $6 + 28 | 0;
  access_value_float_2c_201ul____import_value_28_29($3);
  SAFE_HEAP_STORE_i32_4_4($6, 24, $4);
  SAFE_HEAP_STORE_i32_4_4($6, 16, 53576);
  $7 = $6 + 16 | 0;
  access_value_float_2c_201ul____import_value_28_29($7);
  SAFE_HEAP_STORE_i32_4_4($6, 8, $5);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53576);
  access_value_float_2c_201ul____import_value_28_29($6);
  ImGui__ColorConvertHSVtoRGB_28float_2c_20float_2c_20float_2c_20float__2c_20float__2c_20float__29($0, $1, $2, $3 + 4 | 0, $7 + 4 | 0, $6 + 4 | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 53576);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
  SAFE_HEAP_STORE_f32_4_4($6, 40, SAFE_HEAP_LOAD_f32_4_4($6, 4));
  $5 = $6 + 40 | 0;
  $3 = _emval_take_value(72796, $5 | 0) | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 40, 0);
  $8 = $4;
  $4 = _emval_take_value(72760, $5 | 0) | 0;
  _emval_set_property($8 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 16, 53576);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
  SAFE_HEAP_STORE_f32_4_4($6, 0, SAFE_HEAP_LOAD_f32_4_4($6, 20));
  $3 = _emval_take_value(72796, $6 | 0) | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
  $5 = $4;
  $4 = _emval_take_value(72760, $6 | 0) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  SAFE_HEAP_STORE_i32_4_4($6, 28, 53576);
  $4 = SAFE_HEAP_LOAD_i32_4_4($6, 36);
  SAFE_HEAP_STORE_f32_4_4($6, 16, SAFE_HEAP_LOAD_f32_4_4($6, 32));
  $3 = _emval_take_value(72796, $7 | 0) | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  SAFE_HEAP_STORE_i32_4_4($6, 16, 0);
  $5 = $4;
  $4 = _emval_take_value(72760, $7 | 0) | 0;
  _emval_set_property($5 | 0, $4 | 0, $3 | 0);
  _emval_decref($4 | 0);
  _emval_decref($3 | 0);
  __stack_pointer = $6 + 48 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20int_2c_20bool___invoke_28bool_20_28__29_28int_2c_20bool_29_2c_20int_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$0 | 0]($1, $2) | 0;
 }
 
 function emscripten__internal__Invoker_int_2c_20int_2c_20float_2c_20float___invoke_28int_20_28__29_28int_2c_20float_2c_20float_29_2c_20int_2c_20float_2c_20float_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = Math_fround($3);
  return FUNCTION_TABLE[$0 | 0]($1, $2, $3) | 0;
 }
 
 function embind_init_ImGui_28_29__$_198____invoke_28emscripten__val_2c_20emscripten__val_2c_20bool_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i64_8_4($3, 8, 0, 0);
  $0 = import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $3 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_4($3, 0, 0, 0);
  $0 = ImGui__IsMouseHoveringRect_28ImVec2_20const__2c_20ImVec2_20const__2c_20bool_29($0, import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($1, $3), $2);
  __stack_pointer = $3 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_199____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 32 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 20, $0);
  SAFE_HEAP_STORE_i64_8_4($1, 12, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, 56184);
  $2 = $1 + 12 | 0;
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i64_8_8($1, 24, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($1, 12, SAFE_HEAP_LOAD_i64_8_8(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($0, $1 + 24 | 0), 0), i64toi32_i32$HIGH_BITS);
  }
  $0 = ImGui__IsMousePosValid_28ImVec2_20const__29((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 20), 0) | 0) != 2 ? $2 : 0);
  __stack_pointer = $1 + 32 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_200____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = $2 + 8 | 0;
  ImGui__GetMousePos_28_29($3);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $3, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_201____invoke_28emscripten__val_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = $2 + 8 | 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  $5 = SAFE_HEAP_LOAD_i32_4_4($3, 7480);
  label$1 : {
   if (($5 | 0) > 0) {
    $3 = (SAFE_HEAP_LOAD_i32_4_4($3 + 7476 | 0, 0) + Math_imul($5, 36) | 0) - 8 | 0;
    break label$1;
   }
   $3 = $3 + 228 | 0;
  }
  SAFE_HEAP_STORE_i64_8_4($4, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $4, $2 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($2, 4) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function emscripten__internal__Invoker_bool_2c_20int_2c_20float___invoke_28bool_20_28__29_28int_2c_20float_29_2c_20int_2c_20float_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  return FUNCTION_TABLE[$0 | 0]($1, $2) | 0;
 }
 
 function emscripten__internal__Invoker_emscripten__val_2c_20int_2c_20float_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28int_2c_20float_2c_20emscripten__val_29_2c_20int_2c_20float_2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 8, $3);
  FUNCTION_TABLE[$0 | 0]($4 + 12 | 0, $1, $2, $4 + 8 | 0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  $0 = SAFE_HEAP_LOAD_i32_4_4($4, 12);
  _emval_decref($0 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  __stack_pointer = $4 + 16 | 0;
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_202____invoke_28int_2c_20float_2c_20emscripten__val_29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = Math_fround($2);
  $3 = $3 | 0;
  var $4 = 0, $5 = 0, $6 = 0, $7 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10 = Math_fround(0);
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $9 = $5 + 8 | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 73568);
  if ($2 < Math_fround(0.0)) {
   $2 = SAFE_HEAP_LOAD_f32_4_4($4 + 48 | 0, 0)
  }
  label$2 : {
   label$3 : {
    $6 = $1 + $4 | 0;
    if (SAFE_HEAP_LOAD_i32_1_U_1($6 + 236 | 0, 0)) {
     break label$3
    }
    if (SAFE_HEAP_LOAD_i32_1_U_1($6 + 1022 | 0, 0)) {
     break label$3
    }
    $2 = Math_fround(0.0);
    $7 = Math_fround(0.0);
    break label$2;
   }
   label$4 : {
    if (!(SAFE_HEAP_LOAD_f32_4_4((($1 << 2) + $4 | 0) + 1120 | 0, 0) >= Math_fround($2 * $2))) {
     break label$4
    }
    $8 = SAFE_HEAP_LOAD_f32_4_4($4 + 228 | 0, 0);
    if (!($8 >= Math_fround(-256.0e3))) {
     break label$4
    }
    if (!(SAFE_HEAP_LOAD_f32_4_4($4 + 232 | 0, 0) >= Math_fround(-256.0e3))) {
     break label$4
    }
    $6 = ($1 << 3) + $4 | 0;
    $10 = SAFE_HEAP_LOAD_f32_4_4($6 + 908 | 0, 0);
    if (!($10 >= Math_fround(-256.0e3))) {
     break label$4
    }
    $2 = Math_fround(0.0);
    $7 = Math_fround(0.0);
    if (!(SAFE_HEAP_LOAD_f32_4_4($6 + 912 | 0, 0) >= Math_fround(-256.0e3))) {
     break label$2
    }
    $2 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($4 + 232 | 0, 0) - SAFE_HEAP_LOAD_f32_4_4((($1 << 3) + $4 | 0) + 912 | 0, 0));
    $7 = Math_fround($8 - $10);
    break label$2;
   }
   $2 = Math_fround(0.0);
   $7 = Math_fround(0.0);
  }
  $8 = $7;
  SAFE_HEAP_STORE_f32_4_4($9, 4, $2);
  SAFE_HEAP_STORE_f32_4_4($9, 0, $8);
  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 4, $1);
  _emval_incref($1 | 0);
  export_ImVec2_28ImVec2_20const__2c_20emscripten__val_29($0, $9, $5 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($5, 4) | 0);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_203____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = ImGui__GetClipboardText_28_29();
  $3 = $2 ? $2 : 19354;
  $1 = strlen($3);
  if ($1 >>> 0 < 2147483632) {
   label$2 : {
    if ($1 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($0, 11, $1);
     break label$2;
    }
    $4 = ($1 | 15) + 1 | 0;
    $2 = operator_20new_28unsigned_20long_29($4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $4 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
    $0 = $2;
   }
   $2 = $0 + $1 | 0;
   if ($1) {
    memmove($0, $3, $1)
   }
   SAFE_HEAP_STORE_i32_1_1($2, 0, 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_204____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $3 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 49072, $1 + 12 | 0);
  label$1 : {
   if ($3 < 4294967296.0 & $3 >= 0.0) {
    $4 = ~~$3 >>> 0;
    break label$1;
   }
   $4 = 0;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  if ($2 >>> 0 < 2147483632) {
   $6 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
   label$4 : {
    if ($2 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($1, 11, $2);
     $0 = $1;
     break label$4;
    }
    $5 = ($2 | 15) + 1 | 0;
    $0 = operator_20new_28unsigned_20long_29($5);
    SAFE_HEAP_STORE_i32_4_4($1, 8, $5 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
    SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
   }
   if ($2) {
    __memcpy($0, $4 + 4 | 0, $2)
   }
   SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
   _emval_run_destructors($6 | 0);
   ImGui__SetClipboardText_28char_20const__29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($1, 0), wasm2js_i32$1 = $1, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
   if ((SAFE_HEAP_LOAD_i32_1_1($1, 11) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($1, 0))
   }
   __stack_pointer = $1 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_205____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29($0) {
  $0 = $0 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  ImGui__LoadIniSettingsFromMemory_28char_20const__2c_20unsigned_20long_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), 0);
 }
 
 function embind_init_ImGui_28_29__$_206____invoke_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $3 = ImGui__SaveIniSettingsToMemory_28unsigned_20long__29(0);
  $1 = strlen($3);
  if ($1 >>> 0 < 2147483632) {
   label$2 : {
    if ($1 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($0, 11, $1);
     break label$2;
    }
    $4 = ($1 | 15) + 1 | 0;
    $2 = operator_20new_28unsigned_20long_29($4);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $4 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
    $0 = $2;
   }
   $2 = $0 + $1 | 0;
   if ($1) {
    memmove($0, $3, $1)
   }
   SAFE_HEAP_STORE_i32_1_1($2, 0, 0);
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6, $7) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  $7 = $7 | 0;
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $8 = __stack_pointer - 16 | 0;
  __stack_pointer = $8;
  $9 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($8, 15, $9);
     $10 = $8 + 4 | 0;
     break label$2;
    }
    $11 = ($9 | 15) + 1 | 0;
    $10 = operator_20new_28unsigned_20long_29($11);
    SAFE_HEAP_STORE_i32_4_4($8, 12, $11 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($8, 4, $10);
    SAFE_HEAP_STORE_i32_4_4($8, 8, $9);
   }
   if ($9) {
    __memcpy($10, $1 + 4 | 0, $9)
   }
   SAFE_HEAP_STORE_i32_1_1($9 + $10 | 0, 0, 0);
   $0 = FUNCTION_TABLE[$0 | 0]($8 + 4 | 0, $2, $3, $4, $5, $6, $7) | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($8, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($8, 4))
   }
   __stack_pointer = $8 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_207____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29($0, $1, $2, $3, $4, $5, $6) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  $6 = $6 | 0;
  var wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  return ImGui__DebugCheckVersionAndDataLayout_28char_20const__2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29((wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 0), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($0, 11) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $1, $2, $3, $4, $5, $6) | 0;
 }
 
 function emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 4, $3);
  FUNCTION_TABLE[$0 | 0]($4 + 12 | 0, $4 + 8 | 0, $4 + 4 | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 4) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 8) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_208____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 172) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 172, SAFE_HEAP_LOAD_i32_4_4($0, 0));
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 176) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 176, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  _emval_decref(SAFE_HEAP_LOAD_i32_4_4($3, 180) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 180, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != 2) {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
     break label$1
    }
   }
   ImGui__SetAllocatorFunctions_28void__20_28__29_28unsigned_20long_2c_20void__29_2c_20void_20_28__29_28void__2c_20void__29_2c_20void__29(0, 0);
   return;
  }
  ImGui__SetAllocatorFunctions_28void__20_28__29_28unsigned_20long_2c_20void__29_2c_20void_20_28__29_28void__2c_20void__29_2c_20void__29(875, 876);
 }
 
 function embind_init_ImGui_28_29__$_209____invoke_28unsigned_20long_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 8, ImGui__MemAlloc_28unsigned_20long_29($1));
  SAFE_HEAP_STORE_i32_4_4($0, 0, _emval_take_value(72620, $2 + 8 | 0) | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_210____invoke_28emscripten__val_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0, 72620, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if ($2 < 4294967296.0 & $2 >= 0.0) {
   $0 = ~~$2 >>> 0
  } else {
   $0 = 0
  }
  ImGui__MemFree_28void__29($0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function WrapImGuiContext___SetClipboardText_28void__2c_20char_20const__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $7 = __stack_pointer - 16 | 0;
  __stack_pointer = $7;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  $4 = $0 + 52 | 0;
  $3 = strlen($1);
  $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_v15007_5d_28_29_20const($4);
  __inlined_func$std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______assign_external_28char_20const__2c_20unsigned_20long_29 : {
   if ($3 >>> 0 <= $6 >>> 0) {
    $2 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_v15007_5d_28_29($4);
    memmove($2, $1, $3);
    $1 = __stack_pointer - 16 | 0;
    __stack_pointer = $1;
    __inlined_func$std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_v15007_5d_28unsigned_20long_29 : {
     if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v15007_5d_28_29_20const($4)) {
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_v15007_5d_28unsigned_20long_29($4, $3);
      break __inlined_func$std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_size_5babi_v15007_5d_28unsigned_20long_29;
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_v15007_5d_28unsigned_20long_29($4, $3);
    }
    SAFE_HEAP_STORE_i32_1_1($1, 15, 0);
    std____2__char_traits_char___assign_28char__2c_20char_20const__29($2 + $3 | 0, $1 + 15 | 0);
    __stack_pointer = $1 + 16 | 0;
    break __inlined_func$std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______assign_external_28char_20const__2c_20unsigned_20long_29;
   }
   std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_v15007_5d_28_29_20const($4);
   $2 = __stack_pointer - 16 | 0;
   __stack_pointer = $2;
   __inlined_func$std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29 : {
    $8 = $3 - $6 | 0;
    $5 = 2147483631;
    if ($8 >>> 0 <= $5 + ($6 ^ -1) >>> 0) {
     $9 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_v15007_5d_28_29($4);
     $10 = $2 + 4 | 0;
     if ($6 >>> 0 < ($5 >>> 1 | 0) - 16 >>> 0) {
      SAFE_HEAP_STORE_i32_4_4($2, 12, $6 << 1);
      SAFE_HEAP_STORE_i32_4_4($2, 4, $6 + $8 | 0);
      $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_v15007_5d_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($2 + 4 | 0, $2 + 12 | 0), 0)) + 1 | 0;
     }
     std____2____allocation_result_std____2__allocator_traits_std____2__allocator_char____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($10, $4, $5);
     $5 = SAFE_HEAP_LOAD_i32_4_4($2, 4);
     SAFE_HEAP_LOAD_i32_4_4($2, 8);
     if ($3) {
      std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($5, $1, $3)
     }
     if (($6 | 0) != 10) {
      dlfree($9)
     }
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_v15007_5d_28char__29($4, $5);
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_v15007_5d_28unsigned_20long_29($4, SAFE_HEAP_LOAD_i32_4_4($2, 8));
     std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_v15007_5d_28unsigned_20long_29($4, $3);
     SAFE_HEAP_STORE_i32_1_1($2, 12, 0);
     std____2__char_traits_char___assign_28char__2c_20char_20const__29($3 + $5 | 0, $2 + 12 | 0);
     __stack_pointer = $2 + 16 | 0;
     break __inlined_func$std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______grow_by_and_replace_28unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20char_20const__29;
    }
    std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
    wasm2js_trap();
   }
  }
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 68) | 0) != 2) {
   _emval_incref(SAFE_HEAP_LOAD_i32_4_4($0, 72) | 0);
   SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($0, 72));
   $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 56 | 0, 0);
   $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 63);
   $1 = $3 << 24 >> 24 < 0;
   $2 = $1 ? $2 : $3 & 127;
   $3 = dlmalloc($2 + 4 | 0);
   SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
   __memcpy($3 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($0, 52), wasm2js_i32$1 = $4, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $2);
   SAFE_HEAP_STORE_i32_4_4($7, 8, $3);
   _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($0, 68) | 0, 2, 52544, $7 | 0) | 0);
  }
  __stack_pointer = $7 + 16 | 0;
 }
 
 function WrapImGuiContext___GetClipboardText_28void__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  label$1 : {
   $3 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
   if ((SAFE_HEAP_LOAD_i32_4_4($3, 64) | 0) != 2) {
    _emval_incref(SAFE_HEAP_LOAD_i32_4_4($3, 72) | 0);
    SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($3, 72));
    $6 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($3, 64) | 0, 1, 52540, $1 | 0) | 0;
    $4 = +_emval_as($6 | 0, 49072, $1 + 12 | 0);
    label$3 : {
     if ($4 < 4294967296.0 & $4 >= 0.0) {
      $5 = ~~$4 >>> 0;
      break label$3;
     }
     $5 = 0;
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
    if ($2 >>> 0 >= 2147483632) {
     break label$1
    }
    $8 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
    label$5 : {
     if ($2 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($1, 11, $2);
      $0 = $1;
      break label$5;
     }
     $7 = ($2 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($7);
     SAFE_HEAP_STORE_i32_4_4($1, 8, $7 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
    }
    if ($2) {
     __memcpy($0, $5 + 4 | 0, $2)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $2 | 0, 0, 0);
    _emval_run_destructors($8 | 0);
    $0 = $3 + 52 | 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($3, 63) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 0))
    }
    SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + 8 | 0, 0));
    SAFE_HEAP_STORE_i32_1_1($1, 11, 0);
    SAFE_HEAP_STORE_i32_1_1($1, 0, 0);
    _emval_decref($6 | 0);
   }
   $0 = SAFE_HEAP_LOAD_i32_1_1($3, 63);
   $2 = SAFE_HEAP_LOAD_i32_4_4($3, 52);
   __stack_pointer = $1 + 16 | 0;
   return (($0 | 0) < 0 ? $2 : $3 + 52 | 0) | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function access_maybe_null_value_bool_2c_201ul___access_maybe_null_value_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52584);
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  if (($1 | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
   $3 = _emval_take_value(72760, $2 | 0) | 0;
   $1 = _emval_get_property($1 | 0, $3 | 0) | 0;
   _emval_decref($3 | 0);
   $4 = +_emval_as($1 | 0, 72652, $2 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
   SAFE_HEAP_STORE_i32_1_1($0, 4, $4 != 0.0);
   _emval_decref($1 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function access_maybe_null_value_bool_2c_201ul____access_maybe_null_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52584);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
   $3 = $2 + 8 | 0;
   $4 = _emval_take_value(72652, $3 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
   $5 = $1;
   $1 = _emval_take_value(72760, $3 | 0) | 0;
   _emval_set_property($5 | 0, $1 | 0, $4 | 0);
   _emval_decref($1 | 0);
   _emval_decref($4 | 0);
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_maybe_null_value_bool_2c_201ul____access_maybe_null_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 52584);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) != 2) {
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
   $3 = $2 + 8 | 0;
   $4 = _emval_take_value(72652, $3 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
   $5 = $1;
   $1 = _emval_take_value(72760, $3 | 0) | 0;
   _emval_set_property($5 | 0, $1 | 0, $4 | 0);
   _emval_decref($1 | 0);
   _emval_decref($4 | 0);
  }
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_maybe_null_value_bool_2c_201ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  $3 = _emval_take_value(72760, $1 | 0) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $4 = +_emval_as($2 | 0, 72652, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  SAFE_HEAP_STORE_i32_1_1($0, 4, $4 != 0.0);
  _emval_decref($2 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_maybe_null_value_bool_2c_201ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
  $3 = $2 + 8 | 0;
  $0 = _emval_take_value(72652, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $4 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $1 | 0, $0 | 0);
  _emval_decref($1 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_26__operator_28_29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28ImGuiSizeCallbackData__29____invoke_28ImGuiSizeCallbackData__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
  $2 = $1 + 8 | 0;
  $0 = _emval_take_value(49204, $2 | 0) | 0;
  _emval_incref($0 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
  _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($3, 76) | 0, 1, 48472, $2 | 0) | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_bool_2c_201ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53076);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72652, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_bool_2c_201ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53076);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_1_U_1($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72652, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_unsigned_20int_2c_201ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53160);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72736, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_unsigned_20int_2c_201ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53160);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72736, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_unsigned_20int_2c_201ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  $2 = _emval_take_value(72760, $1 | 0) | 0;
  $3 = _emval_get_property($3 | 0, $2 | 0) | 0;
  _emval_decref($2 | 0);
  $4 = +_emval_as($3 | 0, 72736, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if ($4 < 4294967296.0 & $4 >= 0.0) {
   $2 = ~~$4 >>> 0
  } else {
   $2 = 0
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
  _emval_decref($3 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_unsigned_20int_2c_201ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $0 = _emval_take_value(72736, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $4 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $1 | 0, $0 | 0);
  _emval_decref($1 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_201ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53228);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72724, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_int_2c_201ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53228);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72724, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_201ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  $2 = _emval_take_value(72760, $1 | 0) | 0;
  $3 = _emval_get_property($3 | 0, $2 | 0) | 0;
  _emval_decref($2 | 0);
  $4 = +_emval_as($3 | 0, 72724, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if (Math_abs($4) < 2147483648.0) {
   $2 = ~~$4
  } else {
   $2 = -2147483648
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
  _emval_decref($3 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_int_2c_201ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $0 = _emval_take_value(72724, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $4 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $1 | 0, $0 | 0);
  _emval_decref($1 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $4 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16), 0) | 0, 49072, $1 + 12 | 0);
  label$1 : {
   if ($4 < 4294967296.0 & $4 >= 0.0) {
    $5 = ~~$4 >>> 0;
    break label$1;
   }
   $5 = 0;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
  if ($2 >>> 0 < 2147483632) {
   $7 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
   label$4 : {
    if ($2 >>> 0 <= 10) {
     SAFE_HEAP_STORE_i32_1_1($1, 11, $2);
     $3 = $1;
     break label$4;
    }
    $6 = ($2 | 15) + 1 | 0;
    $3 = operator_20new_28unsigned_20long_29($6);
    SAFE_HEAP_STORE_i32_4_4($1, 8, $6 | -2147483648);
    SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
    SAFE_HEAP_STORE_i32_4_4($1, 4, $2);
   }
   if ($2) {
    __memcpy($3, $5 + 4 | 0, $2)
   }
   SAFE_HEAP_STORE_i32_1_1($3 + $2 | 0, 0, 0);
   _emval_run_destructors($7 | 0);
   $3 = $0 + 4 | 0;
   if ((SAFE_HEAP_LOAD_i32_1_1($0, 15) | 0) < 0) {
    dlfree(SAFE_HEAP_LOAD_i32_4_4($3, 0))
   }
   SAFE_HEAP_STORE_i64_8_4($3, 0, SAFE_HEAP_LOAD_i64_8_4($1, 0), i64toi32_i32$HIGH_BITS);
   SAFE_HEAP_STORE_i32_4_4($3 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + 8 | 0, 0));
   __stack_pointer = $1 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_76__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_20const___lambda__28void__2c_20int_2c_20char_20const___29____invoke_28void__2c_20int_2c_20char_20const___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   $0 = 0;
   label$2 : {
    if (($1 | 0) < 0) {
     break label$2
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
    $0 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 104) | 0) <= ($1 | 0)) {
     break label$2
    }
    $7 = $4 + 108 | 0;
    label$4 : {
     if ((SAFE_HEAP_LOAD_i32_1_1($4, 119) | 0) < 0) {
      SAFE_HEAP_STORE_i32_4_4($4 + 112 | 0, 0, 0);
      $0 = SAFE_HEAP_LOAD_i32_4_4($4, 108);
      break label$4;
     }
     SAFE_HEAP_STORE_i32_1_1($4, 119, 0);
     $0 = $7;
    }
    SAFE_HEAP_STORE_i32_1_1($0, 0, 0);
    $8 = _emval_new_array() | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($4 + 112 | 0, 0);
    $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 119);
    $0 = $6 << 24 >> 24 < 0;
    $5 = $0 ? $5 : $6 & 127;
    $6 = dlmalloc($5 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($6, 0, $5);
    __memcpy($6 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 108), wasm2js_i32$1 = $7, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $5);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $6);
    $0 = _emval_take_value(49072, $3 | 0) | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
    $5 = _emval_take_value(72724, $3 | 0) | 0;
    _emval_set_property($8 | 0, $5 | 0, $0 | 0);
    _emval_decref($5 | 0);
    _emval_decref($0 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
    $0 = _emval_take_value(72724, $3 | 0) | 0;
    _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 100) | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($4, 100));
    _emval_incref($0 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
    _emval_incref($8 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 16, $8);
    $5 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($4, 96) | 0, 3, 53512, $3 | 0) | 0;
    _emval_decref($0 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
    $0 = _emval_take_value(72724, $3 | 0) | 0;
    $6 = _emval_get_property($8 | 0, $0 | 0) | 0;
    _emval_decref($0 | 0);
    $9 = +_emval_as($6 | 0, 49072, $3 + 28 | 0);
    label$6 : {
     if ($9 < 4294967296.0 & $9 >= 0.0) {
      $10 = ~~$9 >>> 0;
      break label$6;
     }
     $10 = 0;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    if ($1 >>> 0 >= 2147483632) {
     break label$1
    }
    $12 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
    label$8 : {
     if ($1 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($3, 11, $1);
      $0 = $3;
      break label$8;
     }
     $11 = ($1 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($11);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $11 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($3, 4, $1);
    }
    if ($1) {
     __memcpy($0, $10 + 4 | 0, $1)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
    _emval_run_destructors($12 | 0);
    if ((SAFE_HEAP_LOAD_i32_1_1($4, 119) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 0))
    }
    SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($7 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3 + 8 | 0, 0));
    SAFE_HEAP_STORE_i32_1_1($3, 11, 0);
    SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
    _emval_decref($6 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 108), wasm2js_i32$1 = $7, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($4, 119) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
    $9 = +_emval_as($5 | 0, 72652, $3 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
    _emval_decref($5 | 0);
    _emval_decref($8 | 0);
    $0 = $9 != 0.0;
   }
   __stack_pointer = $3 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function access_value_float_2c_201ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0.0, $5 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  $5 = _emval_take_value(72760, $1 | 0) | 0;
  $3 = _emval_get_property($3 | 0, $5 | 0) | 0;
  _emval_decref($5 | 0);
  $4 = +_emval_as($3 | 0, 72808, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  $2 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2 = Math_fround($4);
  }
  SAFE_HEAP_STORE_f32_4_4($0, 4, $2);
  _emval_decref($3 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_float_2c_201ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53576);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72796, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_float_2c_201ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53576);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72796, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_float_2c_201ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4($0, 4));
  $3 = $2 + 8 | 0;
  $0 = _emval_take_value(72796, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $4 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $1 | 0, $0 | 0);
  _emval_decref($1 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_float_2c_202ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 12), 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
   $5 = _emval_take_value(72760, $1 | 0) | 0;
   $3 = _emval_get_property($3 | 0, $5 | 0) | 0;
   _emval_decref($5 | 0);
   $6 = +_emval_as($3 | 0, 72808, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
   $5 = (($4 << 2) + $0 | 0) + 4 | 0;
   $2 = Math_fround(3402823466385288598117041.0e14);
   label$2 : {
    if ($6 >= 3402823466385288598117041.0e14) {
     break label$2
    }
    $2 = Math_fround(-3402823466385288598117041.0e14);
    if ($6 <= -3402823466385288598117041.0e14) {
     break label$2
    }
    $2 = Math_fround($6);
   }
   SAFE_HEAP_STORE_f32_4_4($5, 0, $2);
   _emval_decref($3 | 0);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_float_2c_202ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53632);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_float_2c_202ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53632);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_float_2c_202ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_float_2c_203ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16), 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
   $5 = _emval_take_value(72760, $1 | 0) | 0;
   $3 = _emval_get_property($3 | 0, $5 | 0) | 0;
   _emval_decref($5 | 0);
   $6 = +_emval_as($3 | 0, 72808, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
   $5 = (($4 << 2) + $0 | 0) + 4 | 0;
   $2 = Math_fround(3402823466385288598117041.0e14);
   label$2 : {
    if ($6 >= 3402823466385288598117041.0e14) {
     break label$2
    }
    $2 = Math_fround(-3402823466385288598117041.0e14);
    if ($6 <= -3402823466385288598117041.0e14) {
     break label$2
    }
    $2 = Math_fround($6);
   }
   SAFE_HEAP_STORE_f32_4_4($5, 0, $2);
   _emval_decref($3 | 0);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_float_2c_203ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53688);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_float_2c_203ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53688);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_float_2c_203ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_float_2c_204ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 20), 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
   $5 = _emval_take_value(72760, $1 | 0) | 0;
   $3 = _emval_get_property($3 | 0, $5 | 0) | 0;
   _emval_decref($5 | 0);
   $6 = +_emval_as($3 | 0, 72808, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
   $5 = (($4 << 2) + $0 | 0) + 4 | 0;
   $2 = Math_fround(3402823466385288598117041.0e14);
   label$2 : {
    if ($6 >= 3402823466385288598117041.0e14) {
     break label$2
    }
    $2 = Math_fround(-3402823466385288598117041.0e14);
    if ($6 <= -3402823466385288598117041.0e14) {
     break label$2
    }
    $2 = Math_fround($6);
   }
   SAFE_HEAP_STORE_f32_4_4($5, 0, $2);
   _emval_decref($3 | 0);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_float_2c_204ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53744);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_float_2c_204ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53744);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_float_2c_204ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72796, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_202ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 12), 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
   $2 = _emval_take_value(72760, $1 | 0) | 0;
   $3 = _emval_get_property($3 | 0, $2 | 0) | 0;
   _emval_decref($2 | 0);
   $5 = +_emval_as($3 | 0, 72724, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
   $6 = (($4 << 2) + $0 | 0) + 4 | 0;
   if (Math_abs($5) < 2147483648.0) {
    $2 = ~~$5
   } else {
    $2 = -2147483648
   }
   SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
   _emval_decref($3 | 0);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_int_2c_202ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53896);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_int_2c_202ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53896);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_202ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_203ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16), 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
   $2 = _emval_take_value(72760, $1 | 0) | 0;
   $3 = _emval_get_property($3 | 0, $2 | 0) | 0;
   _emval_decref($2 | 0);
   $5 = +_emval_as($3 | 0, 72724, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
   $6 = (($4 << 2) + $0 | 0) + 4 | 0;
   if (Math_abs($5) < 2147483648.0) {
    $2 = ~~$5
   } else {
    $2 = -2147483648
   }
   SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
   _emval_decref($3 | 0);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_int_2c_203ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53952);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_int_2c_203ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 53952);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_203ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_204ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  while (1) {
   $3 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 20), 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
   $2 = _emval_take_value(72760, $1 | 0) | 0;
   $3 = _emval_get_property($3 | 0, $2 | 0) | 0;
   _emval_decref($2 | 0);
   $5 = +_emval_as($3 | 0, 72724, $1 + 12 | 0);
   _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
   $6 = (($4 << 2) + $0 | 0) + 4 | 0;
   if (Math_abs($5) < 2147483648.0) {
    $2 = ~~$5
   } else {
    $2 = -2147483648
   }
   SAFE_HEAP_STORE_i32_4_4($6, 0, $2);
   _emval_decref($3 | 0);
   $4 = $4 + 1 | 0;
   if (($4 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_int_2c_204ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 54008);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_int_2c_204ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 54008);
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_int_2c_204ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  while (1) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
   SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
   $4 = $2 + 8 | 0;
   $5 = _emval_take_value(72724, $4 | 0) | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
   SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
   $6 = $1;
   $1 = _emval_take_value(72760, $4 | 0) | 0;
   _emval_set_property($6 | 0, $1 | 0, $5 | 0);
   _emval_decref($1 | 0);
   _emval_decref($5 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_typed_array_signed_20char___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $4 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $5 = +_emval_as($4 | 0, 72760, $3 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $6 | 0;
  if ($5 < 4294967296.0 & $5 >= 0.0) {
   $1 = ~~$5 >>> 0
  } else {
   $1 = 0
  }
  label$3 : {
   if ($1 >>> 0 > $2 >>> 0) {
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______append_28unsigned_20long_29($0, $1 - $2 | 0);
    break label$3;
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + $6 | 0);
  }
  _emval_decref($4 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1 - $2 | 0);
  $1 = _emval_take_value(54144, $3 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $4 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $4);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($4 | 0, $1 | 0, 3559, $3 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function access_typed_array_unsigned_20char___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $4 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $5 = +_emval_as($4 | 0, 72760, $3 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $6 | 0;
  if ($5 < 4294967296.0 & $5 >= 0.0) {
   $1 = ~~$5 >>> 0
  } else {
   $1 = 0
  }
  label$3 : {
   if ($1 >>> 0 > $2 >>> 0) {
    std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______append_28unsigned_20long_29($0, $1 - $2 | 0);
    break label$3;
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + $6 | 0);
  }
  _emval_decref($4 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1 - $2 | 0);
  $1 = _emval_take_value(51984, $3 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $4 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $4);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($4 | 0, $1 | 0, 3559, $3 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function access_typed_array_short___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $4 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $5 = +_emval_as($4 | 0, 72760, $3 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $6 >> 1;
  if ($5 < 4294967296.0 & $5 >= 0.0) {
   $1 = ~~$5 >>> 0
  } else {
   $1 = 0
  }
  label$3 : {
   if ($1 >>> 0 > $2 >>> 0) {
    std____2__vector_short_2c_20std____2__allocator_short______append_28unsigned_20long_29($0, $1 - $2 | 0);
    break label$3;
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, ($1 << 1) + $6 | 0);
  }
  _emval_decref($4 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1 - $2 >> 1);
  $1 = _emval_take_value(54304, $3 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $4 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $4);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($4 | 0, $1 | 0, 3559, $3 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function access_typed_array_unsigned_20short___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $4 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $5 = +_emval_as($4 | 0, 72760, $3 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $6 >> 1;
  if ($5 < 4294967296.0 & $5 >= 0.0) {
   $1 = ~~$5 >>> 0
  } else {
   $1 = 0
  }
  label$3 : {
   if ($1 >>> 0 > $2 >>> 0) {
    std____2__vector_short_2c_20std____2__allocator_short______append_28unsigned_20long_29($0, $1 - $2 | 0);
    break label$3;
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, ($1 << 1) + $6 | 0);
  }
  _emval_decref($4 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1 - $2 >> 1);
  $1 = _emval_take_value(54404, $3 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $4 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $4);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($4 | 0, $1 | 0, 3559, $3 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function access_typed_array_int___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $4 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $5 = +_emval_as($4 | 0, 72760, $3 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $6 >> 2;
  if ($5 < 4294967296.0 & $5 >= 0.0) {
   $1 = ~~$5 >>> 0
  } else {
   $1 = 0
  }
  label$3 : {
   if ($1 >>> 0 > $2 >>> 0) {
    std____2__vector_int_2c_20std____2__allocator_int______append_28unsigned_20long_29($0, $1 - $2 | 0);
    break label$3;
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, ($1 << 2) + $6 | 0);
  }
  _emval_decref($4 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1 - $2 >> 2);
  $1 = _emval_take_value(54504, $3 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $4 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $4);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($4 | 0, $1 | 0, 3559, $3 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function access_typed_array_unsigned_20int___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $4 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $5 = +_emval_as($4 | 0, 72760, $3 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $6 >> 2;
  if ($5 < 4294967296.0 & $5 >= 0.0) {
   $1 = ~~$5 >>> 0
  } else {
   $1 = 0
  }
  label$3 : {
   if ($1 >>> 0 > $2 >>> 0) {
    std____2__vector_int_2c_20std____2__allocator_int______append_28unsigned_20long_29($0, $1 - $2 | 0);
    break label$3;
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, ($1 << 2) + $6 | 0);
  }
  _emval_decref($4 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1 - $2 >> 2);
  $1 = _emval_take_value(54604, $3 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $4 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $4);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($4 | 0, $1 | 0, 3559, $3 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function access_typed_array_float___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $4 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $5 = +_emval_as($4 | 0, 72760, $3 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $6 >> 2;
  if ($5 < 4294967296.0 & $5 >= 0.0) {
   $1 = ~~$5 >>> 0
  } else {
   $1 = 0
  }
  label$3 : {
   if ($1 >>> 0 > $2 >>> 0) {
    std____2__vector_int_2c_20std____2__allocator_int______append_28unsigned_20long_29($0, $1 - $2 | 0);
    break label$3;
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, ($1 << 2) + $6 | 0);
  }
  _emval_decref($4 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 8, $1 - $2 >> 2);
  $1 = _emval_take_value(54704, $3 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $4 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $4);
  }
  $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($3, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($4 | 0, $1 | 0, 3559, $3 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $3 + 16 | 0;
  return $0;
 }
 
 function access_typed_array_double___access_typed_array_28emscripten__val__29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, $10 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i32_4_4($0, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 0, 0, 0);
  $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  $1 = _emval_new_cstring(8624) | 0;
  $8 = _emval_get_property($2 | 0, $1 | 0) | 0;
  _emval_decref($1 | 0);
  $7 = +_emval_as($8 | 0, 72760, $5 + 8 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($5, 8) | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $2 = $1 - $3 >> 3;
  $1 = $7 < 4294967296.0 & $7 >= 0.0 ? ~~$7 >>> 0 : 0;
  label$3 : {
   if ($2 >>> 0 < $1 >>> 0) {
    $1 = $1 - $2 | 0;
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    if ($1 >>> 0 <= $4 - $2 >> 3 >>> 0) {
     if ($1) {
      $1 = $1 << 3;
      $2 = memset($2, 0, $1) + $1 | 0;
     }
     SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
     break label$3;
    }
    label$4 : {
     $3 = $2;
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     $9 = $3 - $2 | 0;
     $6 = $9 >> 3;
     $3 = $6 + $1 | 0;
     if ($3 >>> 0 < 536870912) {
      $4 = $4 - $2 | 0;
      $10 = $4 >> 2;
      $3 = $4 >>> 0 >= 2147483640 ? 536870911 : $3 >>> 0 < $10 >>> 0 ? $10 : $3;
      label$6 : {
       if (!$3) {
        $3 = 0;
        $4 = 0;
        break label$6;
       }
       if ($3 >>> 0 >= 536870912) {
        break label$4
       }
       $4 = operator_20new_28unsigned_20long_29($3 << 3);
      }
      $1 = $1 << 3;
      $6 = memset($4 + ($6 << 3) | 0, 0, $1);
      $4 = memmove($4, $2, $9);
      SAFE_HEAP_STORE_i32_4_4($0, 8, $4 + ($3 << 3) | 0);
      SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + $6 | 0);
      SAFE_HEAP_STORE_i32_4_4($0, 0, $4);
      if ($2) {
       dlfree($2)
      }
      break label$3;
     }
     std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______throw_length_error_5babi_v15007_5d_28_29_20const();
     wasm2js_trap();
    }
    std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
    wasm2js_trap();
   }
   if ($1 >>> 0 >= $2 >>> 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, ($1 << 3) + $3 | 0);
  }
  _emval_decref($8 | 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  SAFE_HEAP_STORE_i32_4_4($5, 12, $2);
  SAFE_HEAP_STORE_i32_4_4($5, 8, $1 - $2 >> 3);
  $1 = _emval_take_value(54804, $5 + 8 | 0) | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 95820) & 1)) {
   $3 = _emval_get_method_caller(2, 51992) | 0;
   SAFE_HEAP_STORE_i32_1_1(0, 95820, 1);
   SAFE_HEAP_STORE_i32_4_4(0, 95816, $3);
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4(0, 95816);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0);
  SAFE_HEAP_STORE_i32_4_4($5, 8, SAFE_HEAP_LOAD_i32_4_4($2, 0));
  _emval_call_void_method($3 | 0, $1 | 0, 3559, $5 + 8 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $5 + 16 | 0;
  return $0;
 }
 
 function std____2__vector_short_2c_20std____2__allocator_short______append_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if ($1 >>> 0 <= $2 - $3 >> 1 >>> 0) {
   $2 = $0;
   if ($1) {
    $0 = $1 << 1;
    $3 = memset($3, 0, $0) + $0 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 4, $3);
   return;
  }
  label$4 : {
   $4 = $3;
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $6 = $4 - $3 | 0;
   $5 = $6 >> 1;
   $4 = $5 + $1 | 0;
   if (($4 | 0) >= 0) {
    $2 = $2 - $3 | 0;
    $4 = $2 >>> 0 >= 2147483646 ? 2147483647 : $2 >>> 0 > $4 >>> 0 ? $2 : $4;
    label$6 : {
     if (!$4) {
      $4 = 0;
      $2 = 0;
      break label$6;
     }
     if (($4 | 0) < 0) {
      break label$4
     }
     $2 = operator_20new_28unsigned_20long_29($4 << 1);
    }
    $1 = $1 << 1;
    $5 = memset($2 + ($5 << 1) | 0, 0, $1);
    $2 = memmove($2, $3, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $2 + ($4 << 1) | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + $5 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    if ($3) {
     dlfree($3)
    }
    return;
   }
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
  wasm2js_trap();
 }
 
 function std____2__vector_int_2c_20std____2__allocator_int______append_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  if ($1 >>> 0 <= $2 - $3 >> 2 >>> 0) {
   $2 = $0;
   if ($1) {
    $0 = $1 << 2;
    $3 = memset($3, 0, $0) + $0 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($2, 4, $3);
   return;
  }
  label$4 : {
   $4 = $3;
   $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $6 = $4 - $3 | 0;
   $5 = $6 >> 2;
   $4 = $5 + $1 | 0;
   if ($4 >>> 0 < 1073741824) {
    $2 = $2 - $3 | 0;
    $7 = $2 >> 1;
    $4 = $2 >>> 0 >= 2147483644 ? 1073741823 : $4 >>> 0 < $7 >>> 0 ? $7 : $4;
    label$6 : {
     if (!$4) {
      $4 = 0;
      $2 = 0;
      break label$6;
     }
     if ($4 >>> 0 >= 1073741824) {
      break label$4
     }
     $2 = operator_20new_28unsigned_20long_29($4 << 2);
    }
    $1 = $1 << 2;
    $5 = memset($2 + ($5 << 2) | 0, 0, $1);
    $2 = memmove($2, $3, $6);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $2 + ($4 << 2) | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + $5 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
    if ($3) {
     dlfree($3)
    }
    return;
   }
   std____2__vector_unsigned_20char_2c_20std____2__allocator_unsigned_20char______throw_length_error_5babi_v15007_5d_28_29_20const();
   wasm2js_trap();
  }
  std____throw_bad_array_new_length_5babi_v15007_5d_28_29();
  wasm2js_trap();
 }
 
 function import_maybe_null_value_signed_20char____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0, 72688, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if (Math_abs($2) < 2147483648.0) {
   $3 = ~~$2
  } else {
   $3 = -2147483648
  }
  SAFE_HEAP_STORE_i32_1_1($0, 4, $3);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function import_maybe_null_value_unsigned_20char____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0, 72676, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if ($2 < 4294967296.0 & $2 >= 0.0) {
   $3 = ~~$2 >>> 0
  } else {
   $3 = 0
  }
  SAFE_HEAP_STORE_i32_1_1($0, 4, $3);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function import_maybe_null_value_short____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0, 72700, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if (Math_abs($2) < 2147483648.0) {
   $3 = ~~$2
  } else {
   $3 = -2147483648
  }
  SAFE_HEAP_STORE_i32_2_2($0, 4, $3);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function import_maybe_null_value_unsigned_20short____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0, 72712, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if ($2 < 4294967296.0 & $2 >= 0.0) {
   $3 = ~~$2 >>> 0
  } else {
   $3 = 0
  }
  SAFE_HEAP_STORE_i32_2_2($0, 4, $3);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function import_maybe_null_value_int____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0, 72724, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if (Math_abs($2) < 2147483648.0) {
   $3 = ~~$2
  } else {
   $3 = -2147483648
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function import_maybe_null_value_unsigned_20int____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0, $3 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0, 72736, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  if ($2 < 4294967296.0 & $2 >= 0.0) {
   $3 = ~~$2 >>> 0
  } else {
   $3 = 0
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, $3);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function import_maybe_null_value_float____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = Math_fround(0), $2 = 0, $3 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 8), 0) | 0, 72808, $2 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($2, 12) | 0);
  $1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($3 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $1 = Math_fround(-3402823466385288598117041.0e14);
   if ($3 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $1 = Math_fround($3);
  }
  SAFE_HEAP_STORE_f32_4_4($0, 4, $1);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function import_maybe_null_value_double____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = +_emval_as(SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16), 0) | 0, 72808, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  SAFE_HEAP_STORE_f64_8_8($0, 8, $2);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_101__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28ImGuiInputTextCallbackData__29____invoke_28ImGuiInputTextCallbackData__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
  $3 = $1 + 8 | 0;
  $0 = _emval_take_value(48936, $3 | 0) | 0;
  _emval_incref($0 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
  $2 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($2, 120) | 0, 1, 48472, $3 | 0) | 0;
  $4 = +_emval_as($2 | 0, 72724, $3 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 8) | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $1 + 16 | 0;
  if (Math_abs($4) < 2147483648.0) {
   $0 = ~~$4
  } else {
   $0 = -2147483648
  }
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_102__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28ImGuiInputTextCallbackData__29____invoke_28ImGuiInputTextCallbackData__29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
  $3 = $1 + 8 | 0;
  $0 = _emval_take_value(48936, $3 | 0) | 0;
  _emval_incref($0 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, $0);
  $2 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($2, 124) | 0, 1, 48472, $3 | 0) | 0;
  $4 = +_emval_as($2 | 0, 72724, $3 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 8) | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $1 + 16 | 0;
  if (Math_abs($4) < 2147483648.0) {
   $0 = ~~$4
  } else {
   $0 = -2147483648
  }
  return $0 | 0;
 }
 
 function access_value_double_2c_201ul____access_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 55232);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
  SAFE_HEAP_STORE_f64_8_8($2, 8, SAFE_HEAP_LOAD_f64_8_8($0, 8));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72808, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_value_double_2c_201ul____access_value_28_29_1($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 55232);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
  SAFE_HEAP_STORE_f64_8_8($2, 8, SAFE_HEAP_LOAD_f64_8_8($0, 8));
  $3 = $2 + 8 | 0;
  $4 = _emval_take_value(72808, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $5 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($5 | 0, $1 | 0, $4 | 0);
  _emval_decref($1 | 0);
  _emval_decref($4 | 0);
  dlfree($0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_value_double_2c_201ul____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 16), 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, 0);
  $3 = _emval_take_value(72760, $1 | 0) | 0;
  $2 = _emval_get_property($2 | 0, $3 | 0) | 0;
  _emval_decref($3 | 0);
  $4 = +_emval_as($2 | 0, 72808, $1 + 12 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 12) | 0);
  SAFE_HEAP_STORE_f64_8_8($0, 8, $4);
  _emval_decref($2 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function access_value_double_2c_201ul____export_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
  SAFE_HEAP_STORE_f64_8_8($2, 8, SAFE_HEAP_LOAD_f64_8_8($0, 8));
  $3 = $2 + 8 | 0;
  $0 = _emval_take_value(72808, $3 | 0) | 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, 0);
  $4 = $1;
  $1 = _emval_take_value(72760, $3 | 0) | 0;
  _emval_set_property($4 | 0, $1 | 0, $0 | 0);
  _emval_decref($1 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function access_maybe_null_value_float_2c_204ul____access_maybe_null_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 55308);
  if ((SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 20), 0) | 0) != 2) {
   while (1) {
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
    SAFE_HEAP_STORE_f32_4_4($2, 8, SAFE_HEAP_LOAD_f32_4_4((($3 << 2) + $0 | 0) + 4 | 0, 0));
    $4 = $2 + 8 | 0;
    $5 = _emval_take_value(72796, $4 | 0) | 0;
    $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
    $6 = $1;
    $1 = _emval_take_value(72760, $4 | 0) | 0;
    _emval_set_property($6 | 0, $1 | 0, $5 | 0);
    _emval_decref($1 | 0);
    _emval_decref($5 | 0);
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 4) {
     continue
    }
    break;
   }
  }
  __stack_pointer = $2 + 16 | 0;
  return $0 | 0;
 }
 
 function access_maybe_null_value_float_2c_204ul____access_maybe_null_value_28_29_1($0) {
  $0 = $0 | 0;
  dlfree(access_maybe_null_value_float_2c_204ul____access_maybe_null_value_28_29($0));
 }
 
 function embind_init_ImGui_28_29__$_132__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_20const___lambda__28void__2c_20int_2c_20char_20const___29____invoke_28void__2c_20int_2c_20char_20const___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   $0 = 0;
   label$2 : {
    if (($1 | 0) < 0) {
     break label$2
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
    $0 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 132) | 0) < ($1 | 0)) {
     break label$2
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($4, 128);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
    $1 = $0;
    $0 = _emval_take_value(72724, $3 | 0) | 0;
    $7 = _emval_get_property($1 | 0, $0 | 0) | 0;
    _emval_decref($0 | 0);
    $5 = +_emval_as($7 | 0, 49072, $3 + 12 | 0);
    label$4 : {
     if ($5 < 4294967296.0 & $5 >= 0.0) {
      $6 = ~~$5 >>> 0;
      break label$4;
     }
     $6 = 0;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
    if ($1 >>> 0 >= 2147483632) {
     break label$1
    }
    $9 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
    label$6 : {
     if ($1 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($3, 11, $1);
      $0 = $3;
      break label$6;
     }
     $8 = ($1 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($8);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $8 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($3, 4, $1);
    }
    if ($1) {
     __memcpy($0, $6 + 4 | 0, $1)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
    _emval_run_destructors($9 | 0);
    $0 = $4 + 136 | 0;
    if ((SAFE_HEAP_LOAD_i32_1_1($4, 147) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 0))
    }
    SAFE_HEAP_STORE_i64_8_4($0, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($0 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3 + 8 | 0, 0));
    SAFE_HEAP_STORE_i32_1_1($3, 11, 0);
    SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
    _emval_decref($7 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 136), wasm2js_i32$1 = $0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($4, 147) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
    $0 = 1;
   }
   __stack_pointer = $3 + 16 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_133__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_20const___lambda__28void__2c_20int_2c_20char_20const___29____invoke_28void__2c_20int_2c_20char_20const___29($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  label$1 : {
   $0 = 0;
   label$2 : {
    if (($1 | 0) < 0) {
     break label$2
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
    $0 = 0;
    if ((SAFE_HEAP_LOAD_i32_4_4($4, 156) | 0) < ($1 | 0)) {
     break label$2
    }
    $7 = $4 + 160 | 0;
    label$4 : {
     if ((SAFE_HEAP_LOAD_i32_1_1($4, 171) | 0) < 0) {
      SAFE_HEAP_STORE_i32_4_4($4 + 164 | 0, 0, 0);
      $0 = SAFE_HEAP_LOAD_i32_4_4($4, 160);
      break label$4;
     }
     SAFE_HEAP_STORE_i32_1_1($4, 171, 0);
     $0 = $7;
    }
    SAFE_HEAP_STORE_i32_1_1($0, 0, 0);
    $8 = _emval_new_array() | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($4 + 164 | 0, 0);
    $6 = SAFE_HEAP_LOAD_i32_1_U_1($4, 171);
    $0 = $6 << 24 >> 24 < 0;
    $5 = $0 ? $5 : $6 & 127;
    $6 = dlmalloc($5 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($6, 0, $5);
    __memcpy($6 + 4 | 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 160), wasm2js_i32$1 = $7, wasm2js_i32$2 = $0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $5);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $6);
    $0 = _emval_take_value(49072, $3 | 0) | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
    $5 = _emval_take_value(72724, $3 | 0) | 0;
    _emval_set_property($8 | 0, $5 | 0, $0 | 0);
    _emval_decref($5 | 0);
    _emval_decref($0 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
    $0 = _emval_take_value(72724, $3 | 0) | 0;
    _emval_incref(SAFE_HEAP_LOAD_i32_4_4($4, 152) | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($4, 152));
    _emval_incref($0 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
    _emval_incref($8 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 16, $8);
    $5 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($4, 148) | 0, 3, 53512, $3 | 0) | 0;
    _emval_decref($0 | 0);
    SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
    $0 = _emval_take_value(72724, $3 | 0) | 0;
    $6 = _emval_get_property($8 | 0, $0 | 0) | 0;
    _emval_decref($0 | 0);
    $9 = +_emval_as($6 | 0, 49072, $3 + 28 | 0);
    label$6 : {
     if ($9 < 4294967296.0 & $9 >= 0.0) {
      $10 = ~~$9 >>> 0;
      break label$6;
     }
     $10 = 0;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
    if ($1 >>> 0 >= 2147483632) {
     break label$1
    }
    $12 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
    label$8 : {
     if ($1 >>> 0 <= 10) {
      SAFE_HEAP_STORE_i32_1_1($3, 11, $1);
      $0 = $3;
      break label$8;
     }
     $11 = ($1 | 15) + 1 | 0;
     $0 = operator_20new_28unsigned_20long_29($11);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $11 | -2147483648);
     SAFE_HEAP_STORE_i32_4_4($3, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($3, 4, $1);
    }
    if ($1) {
     __memcpy($0, $10 + 4 | 0, $1)
    }
    SAFE_HEAP_STORE_i32_1_1($0 + $1 | 0, 0, 0);
    _emval_run_destructors($12 | 0);
    if ((SAFE_HEAP_LOAD_i32_1_1($4, 171) | 0) < 0) {
     dlfree(SAFE_HEAP_LOAD_i32_4_4($7, 0))
    }
    SAFE_HEAP_STORE_i64_8_4($7, 0, SAFE_HEAP_LOAD_i64_8_4($3, 0), i64toi32_i32$HIGH_BITS);
    SAFE_HEAP_STORE_i32_4_4($7 + 8 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($3 + 8 | 0, 0));
    SAFE_HEAP_STORE_i32_1_1($3, 11, 0);
    SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
    _emval_decref($6 | 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4($4, 160), wasm2js_i32$1 = $7, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_1_1($4, 171) | 0) < 0, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1));
    $9 = +_emval_as($5 | 0, 72652, $3 | 0);
    _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0);
    _emval_decref($5 | 0);
    _emval_decref($8 | 0);
    $0 = $9 != 0.0;
   }
   __stack_pointer = $3 + 32 | 0;
   return $0 | 0;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function embind_init_ImGui_28_29__$_134__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28void__2c_20int_29____invoke_28void__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = 0.0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
  $1 = _emval_take_value(72724, $0 | 0) | 0;
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 84) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($2, 84));
  _emval_incref($1 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
  $2 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($2, 80) | 0, 2, 55540, $0 | 0) | 0;
  $4 = +_emval_as($2 | 0, 72808, $0 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0);
  _emval_decref($2 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $0 + 16 | 0;
  $3 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround($4);
  }
  return Math_fround($3);
 }
 
 function embind_init_ImGui_28_29__$_135__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28void__2c_20int_29____invoke_28void__2c_20int_29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = Math_fround(0), $4 = 0.0;
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
  $1 = _emval_take_value(72724, $0 | 0) | 0;
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 92) | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($2, 92));
  _emval_incref($1 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
  $2 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($2, 88) | 0, 2, 55540, $0 | 0) | 0;
  $4 = +_emval_as($2 | 0, 72808, $0 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0);
  _emval_decref($2 | 0);
  _emval_decref($1 | 0);
  __stack_pointer = $0 + 16 | 0;
  $3 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround(-3402823466385288598117041.0e14);
   if ($4 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround($4);
  }
  return Math_fround($3);
 }
 
 function import_maybe_null_value_ImVec2____import_value_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
  SAFE_HEAP_STORE_i64_8_8($1, 8, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($0, 4, SAFE_HEAP_LOAD_i64_8_8(import_ImVec2_28emscripten__val_20const__2c_20ImVec2__29($2, $1 + 8 | 0), 0), i64toi32_i32$HIGH_BITS);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function embind_init_ImGui_28_29__$_208__operator_28_29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28unsigned_20long_2c_20void__29____invoke_28unsigned_20long_2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0, $3 = 0.0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  $0 = _emval_take_value(72760, $1 | 0) | 0;
  _emval_incref($0 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 180) | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($2, 180));
  $2 = _emval_call(SAFE_HEAP_LOAD_i32_4_4($2, 172) | 0, 2, 56336, $1 | 0) | 0;
  $3 = +_emval_as($2 | 0, 72620, $1 | 0);
  _emval_run_destructors(SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0);
  _emval_decref($2 | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $1 + 16 | 0;
  if ($3 < 4294967296.0 & $3 >= 0.0) {
   $0 = ~~$3 >>> 0
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function embind_init_ImGui_28_29__$_208__operator_28_29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28void__2c_20void__29____invoke_28void__2c_20void__29($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $2 = SAFE_HEAP_LOAD_i32_4_4(0, 95660);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  $0 = _emval_take_value(72620, $1 | 0) | 0;
  _emval_incref($0 | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 0, $0);
  _emval_incref(SAFE_HEAP_LOAD_i32_4_4($2, 180) | 0);
  SAFE_HEAP_STORE_i32_4_4($1, 8, SAFE_HEAP_LOAD_i32_4_4($2, 180));
  _emval_decref(_emval_call(SAFE_HEAP_LOAD_i32_4_4($2, 176) | 0, 2, 56336, $1 | 0) | 0);
  _emval_decref($0 | 0);
  __stack_pointer = $1 + 16 | 0;
 }
 
 function __getTypeName($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $1 = strlen($0) + 1 | 0;
  $2 = dlmalloc($1);
  if ($2) {
   $0 = __memcpy($2, $0, $1)
  } else {
   $0 = 0
  }
  return $0 | 0;
 }
 
 function _embind_initialize_bindings() {
  var $0 = 0;
  $0 = SAFE_HEAP_LOAD_i32_4_4(0, 95888);
  if ($0) {
   while (1) {
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0]();
    $0 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    if ($0) {
     continue
    }
    break;
   }
  }
 }
 
 function _embind_register_bindings($0) {
  SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4(0, 95888));
  SAFE_HEAP_STORE_i32_4_4(0, 95888, $0);
 }
 
 function embind_init_builtin_28_29() {
  _embind_register_void(72608, 11876);
  _embind_register_bool(72652, 8095, 1, 1, 0);
  _embind_register_integer(72664, 6478, 1, -128, 127);
  _embind_register_integer(72688, 6471, 1, -128, 127);
  _embind_register_integer(72676, 6469, 1, 0, 255);
  _embind_register_integer(72700, 2708, 2, -32768, 32767);
  _embind_register_integer(72712, 2699, 2, 0, 65535);
  _embind_register_integer(72724, 3028, 4, -2147483648, 2147483647);
  _embind_register_integer(72736, 3019, 4, 0, -1);
  _embind_register_integer(72748, 8849, 4, -2147483648, 2147483647);
  _embind_register_integer(72760, 8840, 4, 0, -1);
  legalfunc$_embind_register_bigint(72772, 3885, -2147483648, 2147483647);
  legalfunc$_embind_register_bigint(72784, 3884, 0, -1);
  _embind_register_float(72796, 3811, 4);
  _embind_register_float(72808, 11336, 8);
  _embind_register_std_string(49072, 8880);
  _embind_register_std_string(56416, 15949);
  _embind_register_std_wstring(56488, 4, 8854);
  _embind_register_std_wstring(56564, 2, 8892);
  _embind_register_std_wstring(56640, 4, 8907);
  _embind_register_emval(48496, 8329);
  _embind_register_memory_view(49896, 0, 15880);
  _embind_register_memory_view(54144, 0, 15982);
  _embind_register_memory_view(51984, 1, 15910);
  _embind_register_memory_view(54304, 2, 15512);
  _embind_register_memory_view(54404, 3, 15543);
  _embind_register_memory_view(54504, 4, 15583);
  _embind_register_memory_view(54604, 5, 15612);
  _embind_register_memory_view(56680, 4, 16039);
  _embind_register_memory_view(56720, 5, 16069);
  _embind_register_memory_view(54144, 0, 15714);
  _embind_register_memory_view(51984, 1, 15681);
  _embind_register_memory_view(54304, 2, 15780);
  _embind_register_memory_view(54404, 3, 15746);
  _embind_register_memory_view(54504, 4, 15847);
  _embind_register_memory_view(54604, 5, 15813);
  _embind_register_memory_view(54704, 6, 15650);
  _embind_register_memory_view(54804, 7, 16108);
 }
 
 function acosf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = Math_fround(0);
  $3 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $2 = $3 & 2147483647;
  if ($2 >>> 0 >= 1065353216) {
   if (($2 | 0) == 1065353216) {
    return ($3 | 0) >= 0 ? Math_fround(0.0) : Math_fround(3.141592502593994)
   }
   return Math_fround(Math_fround(0.0) / Math_fround($0 - $0));
  }
  label$3 : {
   if ($2 >>> 0 <= 1056964607) {
    $1 = Math_fround(1.570796251296997);
    if ($2 >>> 0 < 847249409) {
     break label$3
    }
    return Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround($0 * R(Math_fround($0 * $0)))) - $0) + Math_fround(1.570796251296997));
   }
   if (($3 | 0) < 0) {
    $0 = Math_fround(Math_fround($0 + Math_fround(1.0)) * Math_fround(.5));
    $1 = Math_fround(Math_sqrt($0));
    $0 = Math_fround(Math_fround(1.570796251296997) - Math_fround($1 + Math_fround(Math_fround($1 * R($0)) + Math_fround(-7.549789415861596e-08))));
    return Math_fround($0 + $0);
   }
   $1 = Math_fround(Math_fround(Math_fround(1.0) - $0) * Math_fround(.5));
   $4 = Math_fround(Math_sqrt($1));
   $0 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($4), wasm2js_scratch_load_i32(2)) & -4096), wasm2js_scratch_load_f32());
   $0 = Math_fround(Math_fround(Math_fround($4 * R($1)) + Math_fround(Math_fround($1 - Math_fround($0 * $0)) / Math_fround($4 + $0))) + $0);
   $1 = Math_fround($0 + $0);
  }
  return $1;
 }
 
 function R($0) {
  return Math_fround(Math_fround(Math_fround(Math_fround($0 * Math_fround(Math_fround($0 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593)) * $0) / Math_fround(Math_fround($0 * Math_fround(-.7066296339035034)) + Math_fround(1.0)));
 }
 
 function atanf($0) {
  var $1 = 0, $2 = Math_fround(0), $3 = 0, $4 = Math_fround(0), $5 = 0, $6 = Math_fround(0);
  $5 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $1 = $5 & 2147483647;
  if ($1 >>> 0 >= 1283457024) {
   return ((wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095040 ? $0 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141402), wasm2js_scratch_load_f32())
  }
  label$2 : {
   label$3 : {
    if ($1 >>> 0 <= 1054867455) {
     $3 = -1;
     if ($1 >>> 0 >= 964689920) {
      break label$3
     }
     break label$2;
    }
    $0 = Math_fround(Math_abs($0));
    if ($1 >>> 0 <= 1066926079) {
     if ($1 >>> 0 <= 1060110335) {
      $0 = Math_fround(Math_fround(Math_fround($0 + $0) + Math_fround(-1.0)) / Math_fround($0 + Math_fround(2.0)));
      $3 = 0;
      break label$3;
     }
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.0)) / Math_fround($0 + Math_fround(1.0)));
     $3 = 1;
     break label$3;
    }
    if ($1 >>> 0 <= 1075576831) {
     $0 = Math_fround(Math_fround($0 + Math_fround(-1.5)) / Math_fround(Math_fround($0 * Math_fround(1.5)) + Math_fround(1.0)));
     $3 = 2;
     break label$3;
    }
    $0 = Math_fround(Math_fround(-1.0) / $0);
    $3 = 3;
   }
   $4 = Math_fround($0 * $0);
   $2 = Math_fround($4 * $4);
   $6 = Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $2 = Math_fround($4 * Math_fround(Math_fround($2 * Math_fround(Math_fround($2 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if ($1 >>> 0 <= 1054867455) {
    return Math_fround($0 - Math_fround($0 * Math_fround($6 + $2)))
   }
   $1 = $3 << 2;
   $0 = Math_fround(SAFE_HEAP_LOAD_f32_4_4($1 + 56768 | 0, 0) - Math_fround(Math_fround(Math_fround($0 * Math_fround($6 + $2)) - SAFE_HEAP_LOAD_f32_4_4($1 + 56784 | 0, 0)) - $0));
   $0 = ($5 | 0) < 0 ? Math_fround(-$0) : $0;
  }
  return $0;
 }
 
 function __cosdf($0) {
  var $1 = 0.0;
  $0 = $0 * $0;
  $1 = $0 * $0;
  return Math_fround($0 * $1 * ($0 * 2.439044879627741e-05 + -.001388676377460993) + ($1 * .04166662332373906 + ($0 * -.499999997251031 + 1.0)));
 }
 
 function __sindf($0) {
  var $1 = 0.0, $2 = 0.0;
  $1 = $0 * $0;
  $2 = $1 * $0;
  return Math_fround($2 * ($1 * $1) * ($1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2 * ($1 * .008333329385889463 + -.16666666641626524) + $0));
 }
 
 function __rem_pio2f($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $14 = __stack_pointer - 16 | 0;
  __stack_pointer = $14;
  $18 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $4 = $18 & 2147483647;
  label$1 : {
   if ($4 >>> 0 <= 1305022426) {
    $9 = +$0;
    $2 = $9 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $17 = $9 + $2 * -1.5707963109016418 + $2 * -1.5893254773528196e-08;
    SAFE_HEAP_STORE_f64_8_8($1, 0, $17);
    $4 = Math_abs($2) < 2147483648.0 ? ~~$2 : -2147483648;
    if ($17 < -.7853981852531433) {
     $2 = $2 + -1.0;
     SAFE_HEAP_STORE_f64_8_8($1, 0, $9 + $2 * -1.5707963109016418 + $2 * -1.5893254773528196e-08);
     $4 = $4 - 1 | 0;
     break label$1;
    }
    if (!($17 > .7853981852531433)) {
     break label$1
    }
    $2 = $2 + 1.0;
    SAFE_HEAP_STORE_f64_8_8($1, 0, $9 + $2 * -1.5707963109016418 + $2 * -1.5893254773528196e-08);
    $4 = $4 + 1 | 0;
    break label$1;
   }
   if ($4 >>> 0 >= 2139095040) {
    SAFE_HEAP_STORE_f64_8_8($1, 0, +Math_fround($0 - $0));
    $4 = 0;
    break label$1;
   }
   $3 = $4;
   $4 = ($4 >>> 23 | 0) - 150 | 0;
   SAFE_HEAP_STORE_f64_8_8($14, 8, +(wasm2js_scratch_store_i32(2, $3 - ($4 << 23) | 0), wasm2js_scratch_load_f32()));
   $19 = $14 + 8 | 0;
   $6 = __stack_pointer - 560 | 0;
   __stack_pointer = $6;
   $3 = ($4 - 3 | 0) / 24 | 0;
   $15 = ($3 | 0) > 0 ? $3 : 0;
   $8 = $4 + Math_imul($15, -24) | 0;
   $11 = SAFE_HEAP_LOAD_i32_4_4(56800, 0);
   if (($11 | 0) >= 0) {
    $4 = $11 + 1 | 0;
    $3 = $15;
    while (1) {
     $10 = ($6 + 320 | 0) + ($5 << 3) | 0;
     if (($3 | 0) < 0) {
      $2 = 0.0
     } else {
      $2 = +(SAFE_HEAP_LOAD_i32_4_4(($3 << 2) + 56816 | 0, 0) | 0)
     }
     SAFE_HEAP_STORE_f64_8_8($10, 0, $2);
     $3 = $3 + 1 | 0;
     $5 = $5 + 1 | 0;
     if (($4 | 0) != ($5 | 0)) {
      continue
     }
     break;
    };
   }
   $10 = $8 - 24 | 0;
   $4 = 0;
   $5 = ($11 | 0) > 0 ? $11 : 0;
   while (1) {
    $3 = 0;
    $2 = 0.0;
    while (1) {
     $2 = SAFE_HEAP_LOAD_f64_8_8(($3 << 3) + $19 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8(($6 + 320 | 0) + ($4 - $3 << 3) | 0, 0) + $2;
     $3 = $3 + 1 | 0;
     if (($3 | 0) != 1) {
      continue
     }
     break;
    };
    SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $6 | 0, 0, $2);
    $3 = ($4 | 0) == ($5 | 0);
    $4 = $4 + 1 | 0;
    if (!$3) {
     continue
    }
    break;
   };
   $23 = 47 - $8 | 0;
   $20 = 48 - $8 | 0;
   $24 = $8 - 25 | 0;
   $4 = $11;
   label$9 : {
    while (1) {
     $2 = SAFE_HEAP_LOAD_f64_8_8(($4 << 3) + $6 | 0, 0);
     $3 = 0;
     $5 = $4;
     $13 = ($4 | 0) <= 0;
     if (!$13) {
      while (1) {
       $12 = ($6 + 480 | 0) + ($3 << 2) | 0;
       $9 = $2 * 5.9604644775390625e-08;
       label$13 : {
        if (Math_abs($9) < 2147483648.0) {
         $7 = ~~$9;
         break label$13;
        }
        $7 = -2147483648;
       }
       $9 = +($7 | 0);
       $2 = $9 * -16777216.0 + $2;
       label$15 : {
        if (Math_abs($2) < 2147483648.0) {
         $7 = ~~$2;
         break label$15;
        }
        $7 = -2147483648;
       }
       SAFE_HEAP_STORE_i32_4_4($12, 0, $7);
       $5 = $5 - 1 | 0;
       $2 = SAFE_HEAP_LOAD_f64_8_8(($5 << 3) + $6 | 0, 0) + $9;
       $3 = $3 + 1 | 0;
       if (($4 | 0) != ($3 | 0)) {
        continue
       }
       break;
      }
     }
     $2 = scalbn($2, $10);
     $2 = $2 + Math_floor($2 * .125) * -8.0;
     label$17 : {
      if (Math_abs($2) < 2147483648.0) {
       $12 = ~~$2;
       break label$17;
      }
      $12 = -2147483648;
     }
     $2 = $2 - +($12 | 0);
     label$19 : {
      label$20 : {
       label$21 : {
        $21 = ($10 | 0) <= 0;
        label$22 : {
         if (!$21) {
          $5 = ($6 + ($4 << 2) | 0) + 476 | 0;
          $7 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
          $3 = $7 >> $20;
          $16 = $5;
          $5 = $7 - ($3 << $20) | 0;
          SAFE_HEAP_STORE_i32_4_4($16, 0, $5);
          $12 = $3 + $12 | 0;
          $7 = $5 >> $23;
          break label$22;
         }
         if ($10) {
          break label$21
         }
         $7 = SAFE_HEAP_LOAD_i32_4_4(($6 + ($4 << 2) | 0) + 476 | 0, 0) >> 23;
        }
        if (($7 | 0) <= 0) {
         break label$19
        }
        break label$20;
       }
       $7 = 2;
       if ($2 >= .5) {
        break label$20
       }
       $7 = 0;
       break label$19;
      }
      $3 = 0;
      $5 = 0;
      if (!$13) {
       while (1) {
        $16 = ($6 + 480 | 0) + ($3 << 2) | 0;
        $13 = SAFE_HEAP_LOAD_i32_4_4($16, 0);
        $22 = 16777215;
        label$26 : {
         label$27 : {
          if ($5) {
           break label$27
          }
          $22 = 16777216;
          if ($13) {
           break label$27
          }
          $5 = 0;
          break label$26;
         }
         SAFE_HEAP_STORE_i32_4_4($16, 0, $22 - $13 | 0);
         $5 = 1;
        }
        $3 = $3 + 1 | 0;
        if (($4 | 0) != ($3 | 0)) {
         continue
        }
        break;
       }
      }
      label$28 : {
       if ($21) {
        break label$28
       }
       $3 = 8388607;
       label$29 : {
        switch ($24 | 0) {
        case 1:
         $3 = 4194303;
         break;
        case 0:
         break label$29;
        default:
         break label$28;
        };
       }
       $13 = ($6 + ($4 << 2) | 0) + 476 | 0;
       SAFE_HEAP_STORE_i32_4_4($13, 0, SAFE_HEAP_LOAD_i32_4_4($13, 0) & $3);
      }
      $12 = $12 + 1 | 0;
      if (($7 | 0) != 2) {
       break label$19
      }
      $2 = 1.0 - $2;
      $7 = 2;
      if (!$5) {
       break label$19
      }
      $2 = $2 - scalbn(1.0, $10);
     }
     if ($2 == 0.0) {
      $5 = 0;
      label$32 : {
       $3 = $4;
       if (($11 | 0) >= ($4 | 0)) {
        break label$32
       }
       while (1) {
        $3 = $3 - 1 | 0;
        $5 = SAFE_HEAP_LOAD_i32_4_4(($6 + 480 | 0) + ($3 << 2) | 0, 0) | $5;
        if (($3 | 0) > ($11 | 0)) {
         continue
        }
        break;
       };
       if (!$5) {
        break label$32
       }
       $8 = $10;
       while (1) {
        $8 = $8 - 24 | 0;
        $4 = $4 - 1 | 0;
        if (!SAFE_HEAP_LOAD_i32_4_4(($6 + 480 | 0) + ($4 << 2) | 0, 0)) {
         continue
        }
        break;
       };
       break label$9;
      }
      $3 = 1;
      while (1) {
       $5 = $3;
       $3 = $3 + 1 | 0;
       if (!SAFE_HEAP_LOAD_i32_4_4(($6 + 480 | 0) + ($11 - $5 << 2) | 0, 0)) {
        continue
       }
       break;
      };
      $5 = $4 + $5 | 0;
      while (1) {
       $4 = $4 + 1 | 0;
       SAFE_HEAP_STORE_f64_8_8(($6 + 320 | 0) + ($4 << 3) | 0, 0, +(SAFE_HEAP_LOAD_i32_4_4(($4 + $15 << 2) + 56816 | 0, 0) | 0));
       $3 = 0;
       $2 = 0.0;
       while (1) {
        $2 = SAFE_HEAP_LOAD_f64_8_8(($3 << 3) + $19 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8(($6 + 320 | 0) + ($4 - $3 << 3) | 0, 0) + $2;
        $3 = $3 + 1 | 0;
        if (($3 | 0) != 1) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_f64_8_8(($4 << 3) + $6 | 0, 0, $2);
       if (($4 | 0) < ($5 | 0)) {
        continue
       }
       break;
      };
      $4 = $5;
      continue;
     }
     break;
    };
    $2 = scalbn($2, 24 - $8 | 0);
    label$39 : {
     if ($2 >= 16777216.0) {
      $10 = ($6 + 480 | 0) + ($4 << 2) | 0;
      $9 = $2 * 5.9604644775390625e-08;
      label$41 : {
       if (Math_abs($9) < 2147483648.0) {
        $3 = ~~$9;
        break label$41;
       }
       $3 = -2147483648;
      }
      $2 = +($3 | 0) * -16777216.0 + $2;
      label$43 : {
       if (Math_abs($2) < 2147483648.0) {
        $5 = ~~$2;
        break label$43;
       }
       $5 = -2147483648;
      }
      SAFE_HEAP_STORE_i32_4_4($10, 0, $5);
      $4 = $4 + 1 | 0;
      break label$39;
     }
     $3 = Math_abs($2) < 2147483648.0 ? ~~$2 : -2147483648;
     $8 = $10;
    }
    SAFE_HEAP_STORE_i32_4_4(($6 + 480 | 0) + ($4 << 2) | 0, 0, $3);
   }
   $2 = scalbn(1.0, $8);
   label$47 : {
    if (($4 | 0) < 0) {
     break label$47
    }
    $3 = $4;
    while (1) {
     $5 = $3;
     SAFE_HEAP_STORE_f64_8_8(($3 << 3) + $6 | 0, 0, $2 * +(SAFE_HEAP_LOAD_i32_4_4(($6 + 480 | 0) + ($3 << 2) | 0, 0) | 0));
     $3 = $3 - 1 | 0;
     $2 = $2 * 5.9604644775390625e-08;
     if ($5) {
      continue
     }
     break;
    };
    if (($4 | 0) < 0) {
     break label$47
    }
    $5 = $4;
    while (1) {
     $2 = 0.0;
     $3 = 0;
     $8 = $4 - $5 | 0;
     $10 = ($8 | 0) > ($11 | 0) ? $11 : $8;
     if (($10 | 0) >= 0) {
      while (1) {
       $2 = SAFE_HEAP_LOAD_f64_8_8(($3 << 3) + 59584 | 0, 0) * SAFE_HEAP_LOAD_f64_8_8(($3 + $5 << 3) + $6 | 0, 0) + $2;
       $15 = ($3 | 0) != ($10 | 0);
       $3 = $3 + 1 | 0;
       if ($15) {
        continue
       }
       break;
      }
     }
     SAFE_HEAP_STORE_f64_8_8(($6 + 160 | 0) + ($8 << 3) | 0, 0, $2);
     $3 = ($5 | 0) > 0;
     $5 = $5 - 1 | 0;
     if ($3) {
      continue
     }
     break;
    };
   }
   $2 = 0.0;
   if (($4 | 0) >= 0) {
    while (1) {
     $3 = $4;
     $4 = $4 - 1 | 0;
     $2 = $2 + SAFE_HEAP_LOAD_f64_8_8(($6 + 160 | 0) + ($3 << 3) | 0, 0);
     if ($3) {
      continue
     }
     break;
    }
   }
   SAFE_HEAP_STORE_f64_8_8($14, 0, $7 ? -$2 : $2);
   __stack_pointer = $6 + 560 | 0;
   $4 = $12 & 7;
   $2 = SAFE_HEAP_LOAD_f64_8_8($14, 0);
   if (($18 | 0) < 0) {
    SAFE_HEAP_STORE_f64_8_8($1, 0, -$2);
    $4 = 0 - $4 | 0;
    break label$1;
   }
   SAFE_HEAP_STORE_f64_8_8($1, 0, $2);
  }
  __stack_pointer = $14 + 16 | 0;
  return $4;
 }
 
 function cosf($0) {
  var $1 = Math_fround(0), $2 = 0, $3 = 0, $4 = 0, $5 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $3 = $4 & 2147483647;
  label$1 : {
   if ($3 >>> 0 <= 1061752794) {
    $1 = Math_fround(1.0);
    if ($3 >>> 0 < 964689920) {
     break label$1
    }
    $1 = __cosdf(+$0);
    break label$1;
   }
   if ($3 >>> 0 <= 1081824209) {
    if ($3 >>> 0 >= 1075235812) {
     $1 = Math_fround(-__cosdf((($4 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + +$0));
     break label$1;
    }
    $5 = +$0;
    if (($4 | 0) < 0) {
     $1 = __sindf($5 + 1.5707963267948966);
     break label$1;
    }
    $1 = __sindf(1.5707963267948966 - $5);
    break label$1;
   }
   if ($3 >>> 0 <= 1088565717) {
    if ($3 >>> 0 >= 1085271520) {
     $1 = __cosdf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
     break label$1;
    }
    if (($4 | 0) < 0) {
     $1 = __sindf(-4.71238898038469 - +$0);
     break label$1;
    }
    $1 = __sindf(+$0 + -4.71238898038469);
    break label$1;
   }
   $1 = Math_fround($0 - $0);
   if ($3 >>> 0 >= 2139095040) {
    break label$1
   }
   label$10 : {
    switch (__rem_pio2f($0, $2 + 8 | 0) & 3) {
    case 0:
     $1 = __cosdf(SAFE_HEAP_LOAD_f64_8_8($2, 8));
     break label$1;
    case 1:
     $1 = __sindf(-SAFE_HEAP_LOAD_f64_8_8($2, 8));
     break label$1;
    case 2:
     $1 = Math_fround(-__cosdf(SAFE_HEAP_LOAD_f64_8_8($2, 8)));
     break label$1;
    default:
     break label$10;
    };
   }
   $1 = __sindf(SAFE_HEAP_LOAD_f64_8_8($2, 8));
  }
  $0 = $1;
  __stack_pointer = $2 + 16 | 0;
  return $0;
 }
 
 function __memcpy($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  if ($2 >>> 0 >= 512) {
   emscripten_memcpy_big($0 | 0, $1 | 0, $2 | 0);
   return $0;
  }
  $4 = $0 + $2 | 0;
  label$2 : {
   if (!(($0 ^ $1) & 3)) {
    label$4 : {
     if (!($0 & 3)) {
      $2 = $0;
      break label$4;
     }
     if (!$2) {
      $2 = $0;
      break label$4;
     }
     $2 = $0;
     while (1) {
      SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
      $1 = $1 + 1 | 0;
      $2 = $2 + 1 | 0;
      if (!($2 & 3)) {
       break label$4
      }
      if ($2 >>> 0 < $4 >>> 0) {
       continue
      }
      break;
     };
    }
    $3 = $4 & -4;
    label$8 : {
     if ($3 >>> 0 < 64) {
      break label$8
     }
     $5 = $3 + -64 | 0;
     if ($5 >>> 0 < $2 >>> 0) {
      break label$8
     }
     while (1) {
      SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
      SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4));
      SAFE_HEAP_STORE_i32_4_4($2, 8, SAFE_HEAP_LOAD_i32_4_4($1, 8));
      SAFE_HEAP_STORE_i32_4_4($2, 12, SAFE_HEAP_LOAD_i32_4_4($1, 12));
      SAFE_HEAP_STORE_i32_4_4($2, 16, SAFE_HEAP_LOAD_i32_4_4($1, 16));
      SAFE_HEAP_STORE_i32_4_4($2, 20, SAFE_HEAP_LOAD_i32_4_4($1, 20));
      SAFE_HEAP_STORE_i32_4_4($2, 24, SAFE_HEAP_LOAD_i32_4_4($1, 24));
      SAFE_HEAP_STORE_i32_4_4($2, 28, SAFE_HEAP_LOAD_i32_4_4($1, 28));
      SAFE_HEAP_STORE_i32_4_4($2, 32, SAFE_HEAP_LOAD_i32_4_4($1, 32));
      SAFE_HEAP_STORE_i32_4_4($2, 36, SAFE_HEAP_LOAD_i32_4_4($1, 36));
      SAFE_HEAP_STORE_i32_4_4($2, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40));
      SAFE_HEAP_STORE_i32_4_4($2, 44, SAFE_HEAP_LOAD_i32_4_4($1, 44));
      SAFE_HEAP_STORE_i32_4_4($2, 48, SAFE_HEAP_LOAD_i32_4_4($1, 48));
      SAFE_HEAP_STORE_i32_4_4($2, 52, SAFE_HEAP_LOAD_i32_4_4($1, 52));
      SAFE_HEAP_STORE_i32_4_4($2, 56, SAFE_HEAP_LOAD_i32_4_4($1, 56));
      SAFE_HEAP_STORE_i32_4_4($2, 60, SAFE_HEAP_LOAD_i32_4_4($1, 60));
      $1 = $1 - -64 | 0;
      $2 = $2 - -64 | 0;
      if ($5 >>> 0 >= $2 >>> 0) {
       continue
      }
      break;
     };
    }
    if ($2 >>> 0 >= $3 >>> 0) {
     break label$2
    }
    while (1) {
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
     $1 = $1 + 4 | 0;
     $2 = $2 + 4 | 0;
     if ($3 >>> 0 > $2 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if ($4 >>> 0 < 4) {
    $2 = $0;
    break label$2;
   }
   $3 = $4 - 4 | 0;
   if ($0 >>> 0 > $3 >>> 0) {
    $2 = $0;
    break label$2;
   }
   $2 = $0;
   while (1) {
    SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
    SAFE_HEAP_STORE_i32_1_1($2, 1, SAFE_HEAP_LOAD_i32_1_U_1($1, 1));
    SAFE_HEAP_STORE_i32_1_1($2, 2, SAFE_HEAP_LOAD_i32_1_U_1($1, 2));
    SAFE_HEAP_STORE_i32_1_1($2, 3, SAFE_HEAP_LOAD_i32_1_U_1($1, 3));
    $1 = $1 + 4 | 0;
    $2 = $2 + 4 | 0;
    if ($3 >>> 0 >= $2 >>> 0) {
     continue
    }
    break;
   };
  }
  if ($2 >>> 0 < $4 >>> 0) {
   while (1) {
    SAFE_HEAP_STORE_i32_1_1($2, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
    $1 = $1 + 1 | 0;
    $2 = $2 + 1 | 0;
    if (($4 | 0) != ($2 | 0)) {
     continue
    }
    break;
   }
  }
  return $0;
 }
 
 function memmove($0, $1, $2) {
  var $3 = 0, $4 = 0;
  label$1 : {
   if (($0 | 0) == ($1 | 0)) {
    break label$1
   }
   $4 = $0 + $2 | 0;
   if ($1 - $4 >>> 0 <= 0 - ($2 << 1) >>> 0) {
    return __memcpy($0, $1, $2)
   }
   $3 = ($0 ^ $1) & 3;
   label$3 : {
    label$4 : {
     if ($0 >>> 0 < $1 >>> 0) {
      if ($3) {
       $3 = $0;
       break label$3;
      }
      if (!($0 & 3)) {
       $3 = $0;
       break label$4;
      }
      $3 = $0;
      while (1) {
       if (!$2) {
        break label$1
       }
       SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
       $1 = $1 + 1 | 0;
       $2 = $2 - 1 | 0;
       $3 = $3 + 1 | 0;
       if ($3 & 3) {
        continue
       }
       break;
      };
      break label$4;
     }
     label$9 : {
      if ($3) {
       break label$9
      }
      if ($4 & 3) {
       while (1) {
        if (!$2) {
         break label$1
        }
        $2 = $2 - 1 | 0;
        $3 = $2 + $0 | 0;
        SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_1_U_1($1 + $2 | 0, 0));
        if ($3 & 3) {
         continue
        }
        break;
       }
      }
      if ($2 >>> 0 <= 3) {
       break label$9
      }
      while (1) {
       $2 = $2 - 4 | 0;
       SAFE_HEAP_STORE_i32_4_4($2 + $0 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($1 + $2 | 0, 0));
       if ($2 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break label$1
     }
     while (1) {
      $2 = $2 - 1 | 0;
      SAFE_HEAP_STORE_i32_1_1($2 + $0 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($1 + $2 | 0, 0));
      if ($2) {
       continue
      }
      break;
     };
     break label$1;
    }
    if ($2 >>> 0 <= 3) {
     break label$3
    }
    while (1) {
     SAFE_HEAP_STORE_i32_4_4($3, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
     $1 = $1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2 = $2 - 4 | 0;
     if ($2 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$2) {
    break label$1
   }
   while (1) {
    SAFE_HEAP_STORE_i32_1_1($3, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
    $3 = $3 + 1 | 0;
    $1 = $1 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function memset($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$1 : {
   if (!$2) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0, 0, $1);
   $3 = $0 + $2 | 0;
   SAFE_HEAP_STORE_i32_1_1($3 - 1 | 0, 0, $1);
   if ($2 >>> 0 < 3) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0, 2, $1);
   SAFE_HEAP_STORE_i32_1_1($0, 1, $1);
   SAFE_HEAP_STORE_i32_1_1($3 - 3 | 0, 0, $1);
   SAFE_HEAP_STORE_i32_1_1($3 - 2 | 0, 0, $1);
   if ($2 >>> 0 < 7) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0, 3, $1);
   SAFE_HEAP_STORE_i32_1_1($3 - 4 | 0, 0, $1);
   if ($2 >>> 0 < 9) {
    break label$1
   }
   $3 = 0 - $0 & 3;
   $4 = $3 + $0 | 0;
   $1 = Math_imul($1 & 255, 16843009);
   SAFE_HEAP_STORE_i32_4_4($4, 0, $1);
   $3 = $2 - $3 & -4;
   $2 = $3 + $4 | 0;
   SAFE_HEAP_STORE_i32_4_4($2 - 4 | 0, 0, $1);
   if ($3 >>> 0 < 9) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($4, 8, $1);
   SAFE_HEAP_STORE_i32_4_4($4, 4, $1);
   SAFE_HEAP_STORE_i32_4_4($2 - 8 | 0, 0, $1);
   SAFE_HEAP_STORE_i32_4_4($2 - 12 | 0, 0, $1);
   if ($3 >>> 0 < 25) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($4, 24, $1);
   SAFE_HEAP_STORE_i32_4_4($4, 20, $1);
   SAFE_HEAP_STORE_i32_4_4($4, 16, $1);
   SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
   SAFE_HEAP_STORE_i32_4_4($2 - 16 | 0, 0, $1);
   SAFE_HEAP_STORE_i32_4_4($2 - 20 | 0, 0, $1);
   SAFE_HEAP_STORE_i32_4_4($2 - 24 | 0, 0, $1);
   SAFE_HEAP_STORE_i32_4_4($2 - 28 | 0, 0, $1);
   $6 = $4 & 4 | 24;
   $2 = $3 - $6 | 0;
   if ($2 >>> 0 < 32) {
    break label$1
   }
   $3 = __wasm_i64_mul($1, 0, 1, 1);
   $5 = i64toi32_i32$HIGH_BITS;
   $1 = $4 + $6 | 0;
   while (1) {
    SAFE_HEAP_STORE_i64_8_8($1, 24, $3, $5);
    SAFE_HEAP_STORE_i64_8_8($1, 16, $3, $5);
    SAFE_HEAP_STORE_i64_8_8($1, 8, $3, $5);
    SAFE_HEAP_STORE_i64_8_8($1, 0, $3, $5);
    $1 = $1 + 32 | 0;
    $2 = $2 - 32 | 0;
    if ($2 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0;
 }
 
 function fclose($0) {
  var $1 = 0, $2 = 0;
  SAFE_HEAP_LOAD_i32_4_4($0, 76);
  fflush($0);
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 12) | 0]($0) | 0;
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 1)) {
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 52);
   if ($1) {
    SAFE_HEAP_STORE_i32_4_4($1, 56, SAFE_HEAP_LOAD_i32_4_4($0, 56))
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
   if ($2) {
    SAFE_HEAP_STORE_i32_4_4($2, 52, $1)
   }
   if ((SAFE_HEAP_LOAD_i32_4_4(95964, 0) | 0) == ($0 | 0)) {
    SAFE_HEAP_STORE_i32_4_4(95964, 0, $2)
   }
   dlfree(SAFE_HEAP_LOAD_i32_4_4($0, 96));
   dlfree($0);
  }
 }
 
 function fflush($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  if (!$0) {
   if (SAFE_HEAP_LOAD_i32_4_4(0, 73408)) {
    $1 = fflush(SAFE_HEAP_LOAD_i32_4_4(0, 73408))
   }
   if (SAFE_HEAP_LOAD_i32_4_4(0, 73560)) {
    $1 = fflush(SAFE_HEAP_LOAD_i32_4_4(0, 73560)) | $1
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(95964, 0);
   if ($0) {
    while (1) {
     SAFE_HEAP_LOAD_i32_4_4($0, 76);
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) != (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
      $1 = fflush($0) | $1
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 56);
     if ($0) {
      continue
     }
     break;
    }
   }
   return $1;
  }
  $3 = (SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) >= 0;
  label$10 : {
   label$12 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
     break label$12
    }
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0;
    if (SAFE_HEAP_LOAD_i32_4_4($0, 20)) {
     break label$12
    }
    $1 = -1;
    break label$10;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if (($1 | 0) != ($2 | 0)) {
    $1 = $1 - $2 | 0;
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 40) | 0]($0, $1, $1 >> 31, 1) | 0;
   }
   $1 = 0;
   SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
   SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
   SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
   if (!$3) {
    break label$10
   }
  }
  return $1;
 }
 
 function fmodf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  label$1 : {
   $6 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
   $3 = $6 << 1;
   label$2 : {
    if (!$3) {
     break label$2
    }
    $2 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
    $7 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
    $4 = $7 >>> 23 & 255;
    if (($4 | 0) == 255) {
     break label$2
    }
    if (($2 & 2147483647) >>> 0 < 2139095041) {
     break label$1
    }
   }
   $0 = Math_fround($0 * $1);
   return Math_fround($0 / $0);
  }
  $2 = $7 << 1;
  if ($3 >>> 0 >= $2 >>> 0) {
   return ($2 | 0) == ($3 | 0) ? Math_fround($0 * Math_fround(0.0)) : $0
  }
  $5 = $6 >>> 23 & 255;
  label$4 : {
   if (!$4) {
    $4 = 0;
    $2 = $7 << 9;
    if (($2 | 0) >= 0) {
     while (1) {
      $4 = $4 - 1 | 0;
      $2 = $2 << 1;
      if (($2 | 0) >= 0) {
       continue
      }
      break;
     }
    }
    $2 = $7 << 1 - $4;
    break label$4;
   }
   $2 = $7 & 8388607 | 8388608;
  }
  label$8 : {
   if (!$5) {
    $5 = 0;
    $3 = $6 << 9;
    if (($3 | 0) >= 0) {
     while (1) {
      $5 = $5 - 1 | 0;
      $3 = $3 << 1;
      if (($3 | 0) >= 0) {
       continue
      }
      break;
     }
    }
    $6 = $6 << 1 - $5;
    break label$8;
   }
   $6 = $6 & 8388607 | 8388608;
  }
  if (($4 | 0) > ($5 | 0)) {
   while (1) {
    label$14 : {
     $3 = $2 - $6 | 0;
     if (($3 | 0) < 0) {
      break label$14
     }
     $2 = $3;
     if ($2) {
      break label$14
     }
     return Math_fround($0 * Math_fround(0.0));
    }
    $2 = $2 << 1;
    $4 = $4 - 1 | 0;
    if (($4 | 0) > ($5 | 0)) {
     continue
    }
    break;
   };
   $4 = $5;
  }
  label$15 : {
   $3 = $2 - $6 | 0;
   if (($3 | 0) < 0) {
    break label$15
   }
   $2 = $3;
   if ($2) {
    break label$15
   }
   return Math_fround($0 * Math_fround(0.0));
  }
  label$16 : {
   if ($2 >>> 0 > 8388607) {
    $3 = $2;
    break label$16;
   }
   while (1) {
    $4 = $4 - 1 | 0;
    $5 = $2 >>> 0 < 4194304;
    $3 = $2 << 1;
    $2 = $3;
    if ($5) {
     continue
    }
    break;
   };
  }
  return wasm2js_scratch_store_i32(2, $7 & -2147483648 | (($4 | 0) > 0 ? $3 - 8388608 | $4 << 23 : $3 >>> 1 - $4 | 0)), wasm2js_scratch_load_f32();
 }
 
 function __errno_location() {
  return 95900;
 }
 
 function __stdio_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  var $4 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 60);
  $0 = __stack_pointer - 16 | 0;
  __stack_pointer = $0;
  $1 = __wasi_syscall_ret(legalimport$__wasi_fd_seek($4 | 0, $1 | 0, $2 | 0, $3 & 255, $0 + 8 | 0) | 0);
  $2 = SAFE_HEAP_LOAD_i64_8_8($0, 8);
  __stack_pointer = $0 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $1 ? -1 : i64toi32_i32$HIGH_BITS;
  return ($1 ? -1 : $2) | 0;
 }
 
 function __stdio_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
  SAFE_HEAP_STORE_i32_4_4($3, 16, $4);
  $5 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  SAFE_HEAP_STORE_i32_4_4($3, 28, $2);
  SAFE_HEAP_STORE_i32_4_4($3, 24, $1);
  $1 = $5 - $4 | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 20, $1);
  $5 = $1 + $2 | 0;
  $1 = $3 + 16 | 0;
  $8 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (__wasi_syscall_ret(__wasi_fd_write(SAFE_HEAP_LOAD_i32_4_4($0, 60) | 0, $1 | 0, 2, $3 + 12 | 0) | 0)) {
       $4 = $1;
       break label$4;
      }
      while (1) {
       $6 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
       if (($6 | 0) == ($5 | 0)) {
        break label$3
       }
       if (($6 | 0) < 0) {
        $4 = $1;
        break label$2;
       }
       $7 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
       $9 = $7 >>> 0 < $6 >>> 0;
       $4 = ($9 << 3) + $1 | 0;
       $7 = $6 - ($9 ? $7 : 0) | 0;
       SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + $7 | 0);
       $1 = ($9 ? 12 : 4) + $1 | 0;
       SAFE_HEAP_STORE_i32_4_4($1, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0) - $7 | 0);
       $5 = $5 - $6 | 0;
       $1 = $4;
       $8 = $8 - $9 | 0;
       if (!__wasi_syscall_ret(__wasi_fd_write(SAFE_HEAP_LOAD_i32_4_4($0, 60) | 0, $1 | 0, $8 | 0, $3 + 12 | 0) | 0)) {
        continue
       }
       break;
      };
     }
     if (($5 | 0) != -1) {
      break label$2
     }
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
    SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
    SAFE_HEAP_STORE_i32_4_4($0, 16, SAFE_HEAP_LOAD_i32_4_4($0, 48) + $1 | 0);
    $1 = $2;
    break label$1;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
   SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) | 32);
   $1 = 0;
   if (($8 | 0) == 2) {
    break label$1
   }
   $1 = $2 - SAFE_HEAP_LOAD_i32_4_4($4, 4) | 0;
  }
  __stack_pointer = $3 + 32 | 0;
  return $1 | 0;
 }
 
 function __stdio_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 32 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 16, $1);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 48);
  SAFE_HEAP_STORE_i32_4_4($4, 20, $2 - (($3 | 0) != 0) | 0);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  SAFE_HEAP_STORE_i32_4_4($4, 28, $3);
  SAFE_HEAP_STORE_i32_4_4($4, 24, $6);
  $3 = 32;
  label$1 : {
   label$2 : {
    if (!__wasi_syscall_ret(__wasi_fd_read(SAFE_HEAP_LOAD_i32_4_4($0, 60) | 0, $4 + 16 | 0, 2, $4 + 12 | 0) | 0)) {
     $3 = SAFE_HEAP_LOAD_i32_4_4($4, 12);
     if (($3 | 0) > 0) {
      break label$2
     }
     $3 = $3 ? 32 : 16;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 0, $3 | SAFE_HEAP_LOAD_i32_4_4($0, 0));
    break label$1;
   }
   $5 = $3;
   $6 = SAFE_HEAP_LOAD_i32_4_4($4, 20);
   if ($6 >>> 0 >= $3 >>> 0) {
    break label$1
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   SAFE_HEAP_STORE_i32_4_4($0, 4, $5);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $5 + ($3 - $6 | 0) | 0);
   if (SAFE_HEAP_LOAD_i32_4_4($0, 48)) {
    SAFE_HEAP_STORE_i32_4_4($0, 4, $5 + 1 | 0);
    SAFE_HEAP_STORE_i32_1_1(($1 + $2 | 0) - 1 | 0, 0, SAFE_HEAP_LOAD_i32_1_U_1($5, 0));
   }
   $5 = $2;
  }
  __stack_pointer = $4 + 32 | 0;
  return $5 | 0;
 }
 
 function dummy_1($0) {
  return $0;
 }
 
 function __stdio_close($0) {
  $0 = $0 | 0;
  return __wasi_fd_close(SAFE_HEAP_LOAD_i32_4_4($0, 60) | 0) | 0;
 }
 
 function fopen($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  label$1 : {
   label$2 : {
    if (!strchr(13568, SAFE_HEAP_LOAD_i32_1_1($1, 0))) {
     SAFE_HEAP_STORE_i32_4_4(95900, 0, 28);
     break label$2;
    }
    $2 = 2;
    if (!strchr($1, 43)) {
     $2 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 114
    }
    $2 = strchr($1, 120) ? $2 | 128 : $2;
    $2 = strchr($1, 101) ? $2 | 524288 : $2;
    $4 = $2;
    $6 = $2 | 64;
    $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
    $4 = ($2 | 0) == 114 ? $4 : $6;
    $4 = ($2 | 0) == 119 ? $4 | 512 : $4;
    $2 = ($2 | 0) == 97 ? $4 | 1024 : $4;
    SAFE_HEAP_STORE_i64_8_8($5, 0, 438, 0);
    $0 = __syscall_openat(-100, $0 | 0, $2 | 32768, $5 | 0) | 0;
    if ($0 >>> 0 >= 4294963201) {
     SAFE_HEAP_STORE_i32_4_4(95900, 0, 0 - $0 | 0);
     $0 = -1;
    }
    if (($0 | 0) < 0) {
     break label$1
    }
    $3 = __stack_pointer - 32 | 0;
    __stack_pointer = $3;
    label$10 : {
     label$21 : {
      label$3 : {
       if (!strchr(13568, SAFE_HEAP_LOAD_i32_1_1($1, 0))) {
        SAFE_HEAP_STORE_i32_4_4(95900, 0, 28);
        break label$3;
       }
       $2 = dlmalloc(1176);
       if ($2) {
        break label$21
       }
      }
      $1 = 0;
      break label$10;
     }
     memset($2, 0, 144);
     if (!strchr($1, 43)) {
      SAFE_HEAP_STORE_i32_4_4($2, 0, (SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) == 114 ? 8 : 4)
     }
     label$6 : {
      if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 0) | 0) != 97) {
       $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
       break label$6;
      }
      $1 = __syscall_fcntl64($0 | 0, 3, 0) | 0;
      if (!($1 & 1024)) {
       $1 = $1 | 1024;
       SAFE_HEAP_STORE_i64_8_8($3, 16, $1, $1 >> 31);
       __syscall_fcntl64($0 | 0, 4, $3 + 16 | 0) | 0;
      }
      $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0) | 128;
      SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
     }
     SAFE_HEAP_STORE_i32_4_4($2, 80, -1);
     SAFE_HEAP_STORE_i32_4_4($2, 48, 1024);
     SAFE_HEAP_STORE_i32_4_4($2, 60, $0);
     SAFE_HEAP_STORE_i32_4_4($2, 44, $2 + 152 | 0);
     label$9 : {
      if ($1 & 8) {
       break label$9
      }
      SAFE_HEAP_STORE_i64_8_8($3, 0, $3 + 24 | 0, 0);
      if (__syscall_ioctl($0 | 0, 21523, $3 | 0) | 0) {
       break label$9
      }
      SAFE_HEAP_STORE_i32_4_4($2, 80, 10);
     }
     SAFE_HEAP_STORE_i32_4_4($2, 40, 963);
     SAFE_HEAP_STORE_i32_4_4($2, 36, 964);
     SAFE_HEAP_STORE_i32_4_4($2, 32, 965);
     SAFE_HEAP_STORE_i32_4_4($2, 12, 966);
     if (!SAFE_HEAP_LOAD_i32_1_U_1(0, 95905)) {
      SAFE_HEAP_STORE_i32_4_4($2, 76, -1)
     }
     SAFE_HEAP_STORE_i32_4_4($2, 56, SAFE_HEAP_LOAD_i32_4_4(95964, 0));
     $1 = SAFE_HEAP_LOAD_i32_4_4(95964, 0);
     if ($1) {
      SAFE_HEAP_STORE_i32_4_4($1, 52, $2)
     }
     SAFE_HEAP_STORE_i32_4_4(95964, 0, $2);
     $1 = $2;
    }
    __stack_pointer = $3 + 32 | 0;
    $3 = $1;
    if ($1) {
     break label$1
    }
    __wasi_fd_close($0 | 0) | 0;
   }
   $3 = 0;
  }
  __stack_pointer = $5 + 16 | 0;
  return $3;
 }
 
 function __toread($0) {
  var $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
  SAFE_HEAP_STORE_i32_4_4($0, 72, $1 - 1 | $1);
  if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) != (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
   FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0
  }
  SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
  SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if ($1 & 4) {
   SAFE_HEAP_STORE_i32_4_4($0, 0, $1 | 32);
   return -1;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44) + SAFE_HEAP_LOAD_i32_4_4($0, 48) | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
  return $1 << 27 >> 31;
 }
 
 function __fseeko_unlocked($0, $1, $2, $3) {
  var $4 = 0, $5 = 0;
  label$1 : {
   if ($3 >>> 0 >= 3) {
    SAFE_HEAP_STORE_i32_4_4(95900, 0, 28);
    break label$1;
   }
   label$3 : {
    if (($3 | 0) != 1) {
     break label$3
    }
    $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if (!$4) {
     break label$3
    }
    $5 = $1;
    $4 = $4 - SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0;
    $1 = $1 - $4 | 0;
    $2 = $2 - (($4 >> 31) + ($4 >>> 0 > $5 >>> 0) | 0) | 0;
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) != (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0)) {
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0;
    if (!SAFE_HEAP_LOAD_i32_4_4($0, 20)) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
   SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
   FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 40) | 0]($0, $1, $2, $3) | 0;
   if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
    break label$1
   }
   SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0) & -17);
   return 0;
  }
  return -1;
 }
 
 function fseek($0, $1, $2) {
  var $3 = 0;
  $3 = $1 >> 31;
  __inlined_func$__fseeko : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) < 0) {
    $0 = __fseeko_unlocked($0, $1, $3, $2);
    break __inlined_func$__fseeko;
   }
   $0 = __fseeko_unlocked($0, $1, $3, $2);
  }
  return $0;
 }
 
 function __ftello_unlocked($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 40);
  $1 = 1;
  if (SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 128) {
   $1 = (SAFE_HEAP_LOAD_i32_4_4($0, 20) | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) ? 1 : 2
  }
  $3 = FUNCTION_TABLE[$3 | 0]($0, 0, 0, $1) | 0;
  $2 = i64toi32_i32$HIGH_BITS;
  label$2 : {
   if (($2 | 0) < 0) {
    break label$2
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   if ($1) {
    $0 = $0 + 4 | 0
   } else {
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
    if (!$1) {
     break label$2
    }
    $0 = $0 + 20 | 0;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0) - $1 | 0;
   $3 = $0 + $3 | 0;
   $2 = ($0 >> 31) + $2 | 0;
   $2 = $0 >>> 0 > $3 >>> 0 ? $2 + 1 | 0 : $2;
  }
  i64toi32_i32$HIGH_BITS = $2;
  return $3;
 }
 
 function ftell($0) {
  var $1 = 0;
  __inlined_func$__ftello : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) < 0) {
    $0 = __ftello_unlocked($0);
    break __inlined_func$__ftello;
   }
   $0 = __ftello_unlocked($0);
  }
  $1 = i64toi32_i32$HIGH_BITS;
  if (!($0 >>> 0 < 2147483648 & ($1 | 0) <= 0 | ($1 | 0) < 0)) {
   SAFE_HEAP_STORE_i32_4_4(95900, 0, 61);
   return -1;
  }
  return $0;
 }
 
 function __towrite($0) {
  var $1 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 72);
  SAFE_HEAP_STORE_i32_4_4($0, 72, $1 - 1 | $1);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  if ($1 & 8) {
   SAFE_HEAP_STORE_i32_4_4($0, 0, $1 | 32);
   return -1;
  }
  SAFE_HEAP_STORE_i64_8_4($0, 4, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 16, SAFE_HEAP_LOAD_i32_4_4($0, 48) + $1 | 0);
  return 0;
 }
 
 function __fwritex($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
  label$1 : {
   if (!$3) {
    if (__towrite($2)) {
     break label$1
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
   }
   $5 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
   if ($1 >>> 0 > $3 - $5 >>> 0) {
    return FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0]($2, $0, $1) | 0
   }
   label$4 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 80) | 0) < 0) {
     $3 = 0;
     break label$4;
    }
    $4 = $1;
    while (1) {
     $3 = $4;
     if (!$3) {
      $3 = 0;
      break label$4;
     }
     $4 = $3 - 1 | 0;
     if ((SAFE_HEAP_LOAD_i32_1_U_1($4 + $0 | 0, 0) | 0) != 10) {
      continue
     }
     break;
    };
    $4 = FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0]($2, $0, $3) | 0;
    if ($4 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $0 = $0 + $3 | 0;
    $1 = $1 - $3 | 0;
    $5 = SAFE_HEAP_LOAD_i32_4_4($2, 20);
   }
   __memcpy($5, $0, $1);
   SAFE_HEAP_STORE_i32_4_4($2, 20, SAFE_HEAP_LOAD_i32_4_4($2, 20) + $1 | 0);
   $4 = $1 + $3 | 0;
  }
  return $4;
 }
 
 function fwrite($0, $1, $2) {
  SAFE_HEAP_LOAD_i32_4_4($2, 76);
  __fwritex($0, $1, $2);
 }
 
 function fp_barrier($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  SAFE_HEAP_STORE_f64_8_8($1, 8, $0);
  return SAFE_HEAP_LOAD_f64_8_8($1, 8);
 }
 
 function __math_invalid($0) {
  $0 = $0 - $0;
  return $0 / $0;
 }
 
 function log($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $10 = 0;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $1 = $2 >>> 16 | 0;
  wasm2js_scratch_store_f64(+$0);
  $2 = wasm2js_scratch_load_i32(1) | 0;
  $6 = wasm2js_scratch_load_i32(0) | 0;
  if ($2 - 1072562176 >>> 0 <= 198911) {
   if (!(($6 | 0) != 0 | ($2 | 0) != 1072693248)) {
    return 0.0
   }
   $0 = $0 + -1.0;
   $3 = $0 * 134217728.0;
   $3 = $0 + $3 - $3;
   $8 = SAFE_HEAP_LOAD_f64_8_8(0, 59704);
   $9 = $3 * $3 * $8;
   $7 = $0 + $9;
   $4 = $0 * $0;
   $5 = $0 * $4;
   return $7 + ($5 * ($5 * ($5 * ($5 * SAFE_HEAP_LOAD_f64_8_8(0, 59784) + ($4 * SAFE_HEAP_LOAD_f64_8_8(0, 59776) + ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 59768) + SAFE_HEAP_LOAD_f64_8_8(0, 59760)))) + ($4 * SAFE_HEAP_LOAD_f64_8_8(0, 59752) + ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 59744) + SAFE_HEAP_LOAD_f64_8_8(0, 59736)))) + ($4 * SAFE_HEAP_LOAD_f64_8_8(0, 59728) + ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 59720) + SAFE_HEAP_LOAD_f64_8_8(0, 59712)))) + (($0 - $3) * $8 * ($0 + $3) + ($9 + ($0 - $7))));
  }
  label$3 : {
   if ($1 - 32752 >>> 0 <= 4294934559) {
    if (!($2 & 2147483647 | $6)) {
     return fp_barrier(-1.0) / 0.0
    }
    if (!$6 & ($2 | 0) == 2146435072) {
     break label$3
    }
    if (!(($1 & 32752) != 32752 & $1 >>> 0 <= 32767)) {
     return __math_invalid($0)
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    $2 = wasm2js_scratch_load_i32(1) | 0;
    $6 = wasm2js_scratch_load_i32(0) | 0;
    $2 = $2 - 54525952 | 0;
   }
   $1 = $2 - 1072037888 | 0;
   $10 = $1;
   $5 = +($1 >> 20);
   $1 = ($1 >>> 13 & 127) << 4;
   $7 = $5 * SAFE_HEAP_LOAD_f64_8_8(0, 59648) + SAFE_HEAP_LOAD_f64_8_8($1 + 59800 | 0, 0);
   $0 = SAFE_HEAP_LOAD_f64_8_8($1 + 59792 | 0, 0);
   wasm2js_scratch_store_i32(0, $6 | 0);
   wasm2js_scratch_store_i32(1, $2 - ($10 & -1048576) | 0);
   $0 = $0 * (+wasm2js_scratch_load_f64() - SAFE_HEAP_LOAD_f64_8_8($1 + 61840 | 0, 0) - SAFE_HEAP_LOAD_f64_8_8($1 + 61848 | 0, 0));
   $3 = $7 + $0;
   $4 = $0 * $0;
   $8 = $4 * ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 59696) + SAFE_HEAP_LOAD_f64_8_8(0, 59688));
   $0 = $3 + ($0 * $4 * ($8 + ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 59680) + SAFE_HEAP_LOAD_f64_8_8(0, 59672))) + ($4 * SAFE_HEAP_LOAD_f64_8_8(0, 59664) + ($5 * SAFE_HEAP_LOAD_f64_8_8(0, 59656) + ($0 + ($7 - $3)))));
  }
  return $0;
 }
 
 function fp_barrierf($0) {
  var $1 = 0;
  $1 = __stack_pointer - 16 | 0;
  SAFE_HEAP_STORE_f32_4_4($1, 12, $0);
  return SAFE_HEAP_LOAD_f32_4_4($1, 12);
 }
 
 function __math_invalidf($0) {
  $0 = Math_fround($0 - $0);
  return Math_fround($0 / $0);
 }
 
 function logf($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0;
  $1 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  if (($1 | 0) == 1065353216) {
   return Math_fround(0.0)
  }
  label$2 : {
   if ($1 - 2139095040 >>> 0 <= 2164260863) {
    $2 = $1 << 1;
    if (!$2) {
     return Math_fround(fp_barrierf(Math_fround(-1.0)) / Math_fround(0.0))
    }
    if (($1 | 0) == 2139095040) {
     break label$2
    }
    if (!($2 >>> 0 < 4278190080 & ($1 | 0) >= 0)) {
     return __math_invalidf($0)
    }
    $1 = (wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) - 192937984 | 0;
   }
   $2 = $1 - 1060306944 | 0;
   $4 = $2 >>> 15 & 240;
   $6 = SAFE_HEAP_LOAD_f64_8_8(0, 64152);
   $3 = +(wasm2js_scratch_store_i32(2, $1 - ($2 & -8388608) | 0), wasm2js_scratch_load_f32()) * SAFE_HEAP_LOAD_f64_8_8($4 + 63888 | 0, 0) + -1.0;
   $5 = $3 * $3;
   $0 = Math_fround(($6 * $5 + (SAFE_HEAP_LOAD_f64_8_8(0, 64160) * $3 + SAFE_HEAP_LOAD_f64_8_8(0, 64168))) * $5 + (+($2 >> 23) * SAFE_HEAP_LOAD_f64_8_8(0, 64144) + SAFE_HEAP_LOAD_f64_8_8($4 + 63896 | 0, 0) + $3));
  }
  return $0;
 }
 
 function memchr($0, $1, $2) {
  var $3 = 0, $4 = 0;
  $3 = ($2 | 0) != 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0 & 3) | !$2) {
      break label$3
     }
     $4 = $1 & 255;
     while (1) {
      if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == ($4 | 0)) {
       break label$2
      }
      $2 = $2 - 1 | 0;
      $3 = ($2 | 0) != 0;
      $0 = $0 + 1 | 0;
      if (!($0 & 3)) {
       break label$3
      }
      if ($2) {
       continue
      }
      break;
     };
    }
    if (!$3) {
     break label$1
    }
    if (!((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == ($1 & 255) | $2 >>> 0 < 4)) {
     $3 = Math_imul($1 & 255, 16843009);
     while (1) {
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 0) ^ $3;
      if (($4 ^ -1) & $4 - 16843009 & -2139062144) {
       break label$2
      }
      $0 = $0 + 4 | 0;
      $2 = $2 - 4 | 0;
      if ($2 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   $1 = $1 & 255;
   while (1) {
    if ((SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == ($1 | 0)) {
     return $0
    }
    $0 = $0 + 1 | 0;
    $2 = $2 - 1 | 0;
    if ($2) {
     continue
    }
    break;
   };
  }
  return 0;
 }
 
 function memcmp($0, $1, $2) {
  var $3 = 0, $4 = 0;
  label$1 : {
   label$2 : {
    if ($2 >>> 0 >= 4) {
     if (($0 | $1) & 3) {
      break label$2
     }
     while (1) {
      if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != (SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0)) {
       break label$2
      }
      $1 = $1 + 4 | 0;
      $0 = $0 + 4 | 0;
      $2 = $2 - 4 | 0;
      if ($2 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2) {
     break label$1
    }
   }
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
    $4 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
    if (($3 | 0) == ($4 | 0)) {
     $1 = $1 + 1 | 0;
     $0 = $0 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break label$1;
    }
    break;
   };
   return $3 - $4 | 0;
  }
  return 0;
 }
 
 function __math_xflow($0, $1) {
  return fp_barrier($0 ? -$1 : $1) * $1;
 }
 
 function __math_oflow($0) {
  return __math_xflow($0, 3105036184601417870297958.0e207);
 }
 
 function __math_uflow($0) {
  return __math_xflow($0, 1.2882297539194267e-231);
 }
 
 function pow($0, $1) {
  var $2 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0.0, $9 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  $12 = __stack_pointer - 16 | 0;
  __stack_pointer = $12;
  $9 = top12($0);
  $13 = top12($1);
  $14 = $13 & 2047;
  $15 = $14 - 1086 | 0;
  wasm2js_scratch_store_f64(+$1);
  $5 = wasm2js_scratch_load_i32(1) | 0;
  $7 = wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_f64(+$0);
  $4 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  label$1 : {
   label$2 : {
    if ($15 >>> 0 > 4294967167 & $9 - 2047 >>> 0 >= 4294965250) {
     break label$2
    }
    if (zeroinfnan($7, $5)) {
     $2 = 1.0;
     if (!$3 & ($4 | 0) == 1072693248) {
      break label$1
     }
     $9 = $7 << 1;
     $7 = $5 << 1 | $7 >>> 31;
     if (!($9 | $7)) {
      break label$1
     }
     $4 = $4 << 1 | $3 >>> 31;
     $3 = $3 << 1;
     if (!(!(($4 | 0) == -2097152 & ($3 | 0) != 0 | $4 >>> 0 > 4292870144) & (!$9 & ($7 | 0) == -2097152 | $7 >>> 0 < 4292870144))) {
      $2 = $0 + $1;
      break label$1;
     }
     if (!$3 & ($4 | 0) == 2145386496) {
      break label$1
     }
     $2 = $4 >>> 0 > 2145386495 ^ ($5 | 0) >= 0 ? 0.0 : $1 * $1;
     break label$1;
    }
    if (zeroinfnan($3, $4)) {
     $2 = $0 * $0;
     if (($4 | 0) < 0) {
      $2 = (checkint($7, $5) | 0) == 1 ? -$2 : $2
     }
     if (($5 | 0) >= 0) {
      break label$1
     }
     $2 = fp_barrier(1.0 / $2);
     break label$1;
    }
    if (($4 | 0) < 0) {
     $10 = checkint($7, $5);
     if (!$10) {
      $2 = __math_invalid($0);
      break label$1;
     }
     $9 = $9 & 2047;
     $10 = (($10 | 0) == 1) << 18;
     $4 = $4 & 2147483647;
    }
    if ($15 >>> 0 <= 4294967167) {
     $2 = 1.0;
     if (!$3 & ($4 | 0) == 1072693248) {
      break label$1
     }
     if ($14 >>> 0 <= 957) {
      $2 = (($4 | 0) == 1072693248 & ($3 | 0) != 0 | $4 >>> 0 > 1072693248 ? $1 : -$1) + 1.0;
      break label$1;
     }
     if ((!$3 & ($4 | 0) == 1072693248 | $4 >>> 0 < 1072693248) != ($13 >>> 0 < 2048 | 0)) {
      $2 = __math_oflow(0);
      break label$1;
     }
     $2 = __math_uflow(0);
     break label$1;
    }
    if ($9) {
     break label$2
    }
    wasm2js_scratch_store_f64(+($0 * 4503599627370496.0));
    $4 = wasm2js_scratch_load_i32(1) | 0;
    $3 = wasm2js_scratch_load_i32(0) | 0;
    $4 = ($4 & 2147483647) - 54525952 | 0;
   }
   wasm2js_scratch_store_i32(0, $7 & -134217728);
   wasm2js_scratch_store_i32(1, $5 | 0);
   $16 = +wasm2js_scratch_load_f64();
   $5 = $4 - 1072076117 | 0;
   $7 = $5;
   $2 = +($5 >> 20);
   $5 = ($5 >>> 13 & 127) << 5;
   $21 = $2 * SAFE_HEAP_LOAD_f64_8_8(0, 66344) + SAFE_HEAP_LOAD_f64_8_8($5 + 66432 | 0, 0);
   wasm2js_scratch_store_i32(0, 0);
   $4 = $4 - ($7 & -1048576) | 0;
   wasm2js_scratch_store_i32(1, ($3 - -2147483648 >>> 0 < 2147483648 ? $4 + 1 | 0 : $4) | 0);
   $0 = +wasm2js_scratch_load_f64();
   $8 = SAFE_HEAP_LOAD_f64_8_8($5 + 66408 | 0, 0);
   $6 = $0 * $8 + -1.0;
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $17 = (+wasm2js_scratch_load_f64() - $0) * $8;
   $0 = $6 + $17;
   $18 = $2 * SAFE_HEAP_LOAD_f64_8_8(0, 66336) + SAFE_HEAP_LOAD_f64_8_8($5 + 66424 | 0, 0);
   $2 = $0 + $18;
   $11 = SAFE_HEAP_LOAD_f64_8_8(0, 66352);
   $19 = $0 * $11;
   $8 = $0 * $19;
   $11 = $6 * $11;
   $20 = $6 * $11;
   $6 = $2 + $20;
   $0 = $21 + ($0 + ($18 - $2)) + $17 * ($19 + $11) + ($20 + ($2 - $6)) + $0 * $8 * ($8 * ($8 * ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 66400) + SAFE_HEAP_LOAD_f64_8_8(0, 66392)) + ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 66384) + SAFE_HEAP_LOAD_f64_8_8(0, 66376))) + ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 66368) + SAFE_HEAP_LOAD_f64_8_8(0, 66360)));
   $2 = $6 + $0;
   SAFE_HEAP_STORE_f64_8_8($12 + 8 | 0, 0, $0 + ($6 - $2));
   wasm2js_scratch_store_f64(+$2);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_store_i32(0, wasm2js_scratch_load_i32(0) & -134217728);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $6 = +wasm2js_scratch_load_f64();
   $0 = $16 * $6;
   $1 = ($1 - $16) * $6 + (SAFE_HEAP_LOAD_f64_8_8($12, 8) + ($2 - $6)) * $1;
   __inlined_func$exp_inline : {
    label$10 : {
     $4 = top12($0) & 2047;
     $3 = top12(5.551115123125783e-17);
     if ($4 - $3 >>> 0 < top12(512.0) - $3 >>> 0) {
      break label$10
     }
     if ($4 >>> 0 < $3 >>> 0) {
      $0 = $0 + 1.0;
      $0 = $10 ? -$0 : $0;
      break __inlined_func$exp_inline;
     }
     $3 = top12(1024.0) >>> 0 > $4 >>> 0;
     $4 = 0;
     if ($3) {
      break label$10
     }
     wasm2js_scratch_store_f64(+$0);
     $3 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     if (($3 | 0) < 0) {
      $0 = __math_uflow($10);
      break __inlined_func$exp_inline;
     }
     $0 = __math_oflow($10);
     break __inlined_func$exp_inline;
    }
    $6 = SAFE_HEAP_LOAD_f64_8_8(0, 64176) * $0;
    $2 = SAFE_HEAP_LOAD_f64_8_8(0, 64184);
    $6 = $6 + $2;
    $2 = $6 - $2;
    $0 = $2 * SAFE_HEAP_LOAD_f64_8_8(0, 64200) + ($2 * SAFE_HEAP_LOAD_f64_8_8(0, 64192) + $0) + $1;
    $1 = $0 * $0;
    $2 = $1 * $1 * ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 64232) + SAFE_HEAP_LOAD_f64_8_8(0, 64224));
    $1 = $1 * ($0 * SAFE_HEAP_LOAD_f64_8_8(0, 64216) + SAFE_HEAP_LOAD_f64_8_8(0, 64208));
    wasm2js_scratch_store_f64(+$6);
    wasm2js_scratch_load_i32(1) | 0;
    $7 = wasm2js_scratch_load_i32(0) | 0;
    $3 = $7 << 4 & 2032;
    $0 = $2 + ($1 + (SAFE_HEAP_LOAD_f64_8_8($3 + 64288 | 0, 0) + $0));
    $3 = SAFE_HEAP_LOAD_i64_8_8($3 + 64296 | 0, 0);
    $5 = i64toi32_i32$HIGH_BITS + ($7 + $10 << 13) | 0;
    if (!$4) {
     __inlined_func$specialcase : {
      if (!($7 & -2147483648)) {
       wasm2js_scratch_store_i32(0, $3 | 0);
       wasm2js_scratch_store_i32(1, $5 - 1058013184 | 0);
       $1 = +wasm2js_scratch_load_f64();
       $0 = ($1 * $0 + $1) * 5486124068793688683255936.0e279;
       break __inlined_func$specialcase;
      }
      wasm2js_scratch_store_i32(0, $3 | 0);
      $3 = $5 + 1071644672 | 0;
      wasm2js_scratch_store_i32(1, $3 | 0);
      $1 = +wasm2js_scratch_load_f64();
      $6 = $1 * $0;
      $0 = $6 + $1;
      if (Math_abs($0) < 1.0) {
       $2 = fp_barrier(2.2250738585072014e-308) * 2.2250738585072014e-308;
       SAFE_HEAP_STORE_f64_8_8(__stack_pointer - 16 | 0, 8, $2);
       wasm2js_scratch_store_i32(0, 0);
       wasm2js_scratch_store_i32(1, $3 & -2147483648);
       $2 = $0 < 0.0 ? -1.0 : 1.0;
       $8 = $0 + $2;
       $0 = $8 + ($6 + ($1 - $0) + ($0 + ($2 - $8))) - $2;
       $0 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0, wasm2js_i32$0 = $0 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
      }
      $0 = $0 * 2.2250738585072014e-308;
     }
     break __inlined_func$exp_inline;
    }
    wasm2js_scratch_store_i32(0, $3 | 0);
    wasm2js_scratch_store_i32(1, $5 | 0);
    $1 = +wasm2js_scratch_load_f64();
    $0 = $1 * $0 + $1;
   }
   $2 = $0;
  }
  __stack_pointer = $12 + 16 | 0;
  return $2;
 }
 
 function top12($0) {
  var $1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  return $1 >>> 20 | 0;
 }
 
 function zeroinfnan($0, $1) {
  var $2 = 0;
  $1 = $1 << 1 | $0 >>> 31;
  $2 = !($0 << 1);
  $0 = $1 + 2097152 | 0;
  return $2 & ($0 | 0) == 2097152 | $0 >>> 0 < 2097152;
 }
 
 function checkint($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $2 = $1 >>> 20 & 2047;
  label$1 : {
   if ($2 >>> 0 < 1023) {
    break label$1
   }
   $5 = 2;
   if ($2 >>> 0 > 1075) {
    break label$1
   }
   $5 = 0;
   $2 = 1075 - $2 | 0;
   $3 = $2 & 31;
   if (($2 & 63) >>> 0 >= 32) {
    $2 = 1 << $3;
    $4 = 0;
   } else {
    $4 = 1 << $3;
    $2 = $4 - 1 & 1 >>> 32 - $3;
   }
   $3 = $2 - 1 | 0;
   $6 = $4 - 1 | 0;
   $3 = ($6 | 0) != -1 ? $3 + 1 | 0 : $3;
   if ($0 & $6 | $1 & $3) {
    break label$1
   }
   $5 = $0 & $4 | $1 & $2 ? 1 : 2;
  }
  return $5;
 }
 
 function __math_xflowf($0, $1) {
  return Math_fround(fp_barrierf($0 ? Math_fround(-$1) : $1) * $1);
 }
 
 function powf($0, $1) {
  var $2 = 0, $3 = 0.0, $4 = 0, $5 = Math_fround(0), $6 = 0, $7 = 0.0, $8 = 0, $9 = 0.0, $10 = 0.0;
  $4 = (wasm2js_scratch_store_f32($1), wasm2js_scratch_load_i32(2));
  $8 = zeroinfnan_1($4);
  label$1 : {
   label$2 : {
    label$3 : {
     $2 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
     label$4 : {
      if ($2 - 2139095040 >>> 0 >= 2164260864) {
       if ($8) {
        break label$4
       }
       break label$2;
      }
      if (!$8) {
       break label$3
      }
     }
     $5 = Math_fround(1.0);
     if (($2 | 0) == 1065353216) {
      break label$1
     }
     $6 = $4 << 1;
     if (!$6) {
      break label$1
     }
     $2 = $2 << 1;
     if (!($6 >>> 0 < 4278190081 & $2 >>> 0 <= 4278190080)) {
      return Math_fround($0 + $1)
     }
     if (($2 | 0) == 2130706432) {
      break label$1
     }
     return $2 >>> 0 > 2130706431 ^ ($4 | 0) >= 0 ? Math_fround(0.0) : Math_fround($1 * $1);
    }
    if (zeroinfnan_1($2)) {
     $5 = Math_fround($0 * $0);
     if (($2 | 0) < 0) {
      $5 = (checkint_1($4) | 0) == 1 ? Math_fround(-$5) : $5
     }
     if (($4 | 0) >= 0) {
      break label$1
     }
     return fp_barrierf(Math_fround(Math_fround(1.0) / $5));
    }
    if (($2 | 0) < 0) {
     $4 = checkint_1($4);
     if (!$4) {
      return __math_invalidf($0)
     }
     $6 = (($4 | 0) == 1) << 16;
     $2 = $2 & 2147483647;
    }
    if ($2 >>> 0 > 8388607) {
     break label$2
    }
    $2 = ((wasm2js_scratch_store_f32(Math_fround($0 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647) - 192937984 | 0;
   }
   $9 = SAFE_HEAP_LOAD_f64_8_8(0, 71088);
   $4 = $2 - 1060306944 | 0;
   $8 = $4 >>> 15 & 240;
   $3 = +(wasm2js_scratch_store_i32(2, $2 - ($4 & -8388608) | 0), wasm2js_scratch_load_f32()) * SAFE_HEAP_LOAD_f64_8_8($8 + 70832 | 0, 0) + -1.0;
   $7 = $3 * $3;
   $3 = (($9 * $3 + SAFE_HEAP_LOAD_f64_8_8(0, 71096)) * ($7 * $7) + ((SAFE_HEAP_LOAD_f64_8_8(0, 71104) * $3 + SAFE_HEAP_LOAD_f64_8_8(0, 71112)) * $7 + (SAFE_HEAP_LOAD_f64_8_8(0, 71120) * $3 + (SAFE_HEAP_LOAD_f64_8_8($8 + 70840 | 0, 0) + +($4 >> 23))))) * +$1;
   wasm2js_scratch_store_f64(+$3);
   $2 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   label$12 : {
    $2 = $2 & 2147450880;
    if (($2 | 0) == 1079967744 | $2 >>> 0 < 1079967744) {
     break label$12
    }
    if ($3 > 127.99999995700433) {
     return __math_xflowf($6, Math_fround(1584563250285286751870879.0e5))
    }
    if (!($3 <= -150.0)) {
     break label$12
    }
    return __math_xflowf($6, Math_fround(2.524354896707238e-29));
   }
   $10 = SAFE_HEAP_LOAD_f64_8_8(0, 70768);
   $7 = SAFE_HEAP_LOAD_f64_8_8(0, 70760);
   $9 = $7 + $3;
   $3 = $3 - ($9 - $7);
   $3 = ($10 * $3 + SAFE_HEAP_LOAD_f64_8_8(0, 70776)) * ($3 * $3) + (SAFE_HEAP_LOAD_f64_8_8(0, 70784) * $3 + 1.0);
   wasm2js_scratch_store_f64(+$9);
   wasm2js_scratch_load_i32(1) | 0;
   $2 = wasm2js_scratch_load_i32(0) | 0;
   $4 = $6 + $2 << 15;
   $2 = SAFE_HEAP_LOAD_i64_8_8((($2 & 31) << 3) + 70504 | 0, 0);
   $4 = i64toi32_i32$HIGH_BITS + $4 | 0;
   wasm2js_scratch_store_i32(0, $2 | 0);
   wasm2js_scratch_store_i32(1, $4 | 0);
   $5 = Math_fround($3 * +wasm2js_scratch_load_f64());
  }
  return $5;
 }
 
 function zeroinfnan_1($0) {
  return ($0 << 1) + 16777216 >>> 0 < 16777217;
 }
 
 function checkint_1($0) {
  var $1 = 0, $2 = 0;
  $2 = $0 >>> 23 & 255;
  $1 = 0;
  label$1 : {
   if ($2 >>> 0 < 127) {
    break label$1
   }
   $1 = 2;
   if ($2 >>> 0 > 150) {
    break label$1
   }
   $2 = 1 << 150 - $2;
   $1 = 0;
   if ($2 - 1 & $0) {
    break label$1
   }
   $1 = $0 & $2 ? 1 : 2;
  }
  return $1;
 }
 
 function iprintf($0, $1) {
  var $2 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
  __vfprintf_internal(73264, $0, $1, 0, 0);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function sift($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $7 = __stack_pointer - 240 | 0;
  __stack_pointer = $7;
  SAFE_HEAP_STORE_i32_4_4($7, 0, $0);
  $8 = 1;
  label$1 : {
   if (($3 | 0) < 2) {
    break label$1
   }
   $10 = 0 - $1 | 0;
   $5 = $0;
   while (1) {
    $5 = $5 + $10 | 0;
    $9 = $3 - 2 | 0;
    $6 = $5 - SAFE_HEAP_LOAD_i32_4_4(($9 << 2) + $4 | 0, 0) | 0;
    if ((FUNCTION_TABLE[967]($0, $6, $2) | 0) >= 0) {
     if ((FUNCTION_TABLE[967]($0, $5, $2) | 0) >= 0) {
      break label$1
     }
    }
    $11 = $6;
    $6 = (FUNCTION_TABLE[967]($6, $5, $2) | 0) >= 0;
    $5 = $6 ? $11 : $5;
    SAFE_HEAP_STORE_i32_4_4(($8 << 2) + $7 | 0, 0, $5);
    $8 = $8 + 1 | 0;
    $3 = $6 ? $3 - 1 | 0 : $9;
    if (($3 | 0) > 1) {
     continue
    }
    break;
   };
  }
  cycle($1, $7, $8);
  __stack_pointer = $7 + 240 | 0;
 }
 
 function shr($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$1 : {
   if ($1 >>> 0 <= 31) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    break label$1;
   }
   $1 = $1 - 32 | 0;
   $3 = $2;
   $2 = 0;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2 >>> $1 | 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $2 << 32 - $1 | $3 >>> $1);
 }
 
 function trinkle($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $7 = __stack_pointer - 240 | 0;
  __stack_pointer = $7;
  $8 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
  SAFE_HEAP_STORE_i32_4_4($7, 232, $8);
  $3 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
  SAFE_HEAP_STORE_i32_4_4($7, 0, $0);
  SAFE_HEAP_STORE_i32_4_4($7, 236, $3);
  $10 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($3 | ($8 | 0) != 1)) {
      $3 = $0;
      break label$3;
     }
     $11 = 0 - $1 | 0;
     $8 = $0;
     while (1) {
      $9 = ($4 << 2) + $6 | 0;
      $3 = $8 - SAFE_HEAP_LOAD_i32_4_4($9, 0) | 0;
      if ((FUNCTION_TABLE[967]($3, $0, $2) | 0) <= 0) {
       $3 = $8;
       break label$3;
      }
      label$7 : {
       if (!(($4 | 0) < 2 | $5)) {
        $5 = SAFE_HEAP_LOAD_i32_4_4($9 - 8 | 0, 0);
        $9 = $8 + $11 | 0;
        if ((FUNCTION_TABLE[967]($9, $3, $2) | 0) >= 0) {
         break label$7
        }
        if ((FUNCTION_TABLE[967]($9 - $5 | 0, $3, $2) | 0) >= 0) {
         break label$7
        }
       }
       SAFE_HEAP_STORE_i32_4_4(($10 << 2) + $7 | 0, 0, $3);
       $5 = $7 + 232 | 0;
       $8 = $5;
       $5 = pntz($5);
       shr($8, $5);
       $10 = $10 + 1 | 0;
       $4 = $4 + $5 | 0;
       $5 = 0;
       $8 = $3;
       if ((SAFE_HEAP_LOAD_i32_4_4($7, 232) | 0) != 1) {
        continue
       }
       if (SAFE_HEAP_LOAD_i32_4_4($7, 236)) {
        continue
       }
       break label$2;
      }
      break;
     };
     $3 = $8;
     break label$2;
    }
    if ($5) {
     break label$1
    }
   }
   cycle($1, $7, $10);
   sift($3, $1, $2, $4, $6);
  }
  __stack_pointer = $7 + 240 | 0;
 }
 
 function shl($0, $1) {
  var $2 = 0, $3 = 0;
  label$1 : {
   if ($1 >>> 0 <= 31) {
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    $2 = $0 + 4 | 0;
    break label$1;
   }
   $1 = $1 - 32 | 0;
   $2 = $0;
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $3 << $1);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2 << $1 | $3 >>> 32 - $1);
 }
 
 function pntz($0) {
  var $1 = 0;
  $1 = a_ctz_32(SAFE_HEAP_LOAD_i32_4_4($0, 0) - 1 | 0);
  if (!$1) {
   $0 = a_ctz_32(SAFE_HEAP_LOAD_i32_4_4($0, 4));
   $1 = $0 ? $0 + 32 | 0 : 0;
  }
  return $1;
 }
 
 function cycle($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  label$1 : {
   if (($2 | 0) < 2) {
    break label$1
   }
   $7 = ($2 << 2) + $1 | 0;
   SAFE_HEAP_STORE_i32_4_4($7, 0, $5);
   if (!$0) {
    break label$1
   }
   while (1) {
    $4 = $0 >>> 0 >= 256 ? 256 : $0;
    __memcpy(SAFE_HEAP_LOAD_i32_4_4($7, 0), SAFE_HEAP_LOAD_i32_4_4($1, 0), $4);
    $3 = 0;
    while (1) {
     $6 = ($3 << 2) + $1 | 0;
     $3 = $3 + 1 | 0;
     __memcpy(SAFE_HEAP_LOAD_i32_4_4($6, 0), SAFE_HEAP_LOAD_i32_4_4(($3 << 2) + $1 | 0, 0), $4);
     SAFE_HEAP_STORE_i32_4_4($6, 0, SAFE_HEAP_LOAD_i32_4_4($6, 0) + $4 | 0);
     if (($2 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
    $0 = $0 - $4 | 0;
    if ($0) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function a_ctz_32($0) {
  return SAFE_HEAP_LOAD_i32_1_1((Math_imul(0 - $0 & $0, 124511785) >>> 27 | 0) + 71136 | 0, 0);
 }
 
 function qsort($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0;
  $6 = $0;
  $4 = __stack_pointer - 208 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i64_8_8($4, 8, 1, 0);
  $7 = Math_imul($1, $2);
  label$1 : {
   if (!$7) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($4, 16, $2);
   SAFE_HEAP_STORE_i32_4_4($4, 20, $2);
   $9 = 0 - $2 | 0;
   $0 = $2;
   $1 = $0;
   $5 = 2;
   while (1) {
    $8 = $1 + $2 | 0;
    $1 = $0;
    $0 = $0 + $8 | 0;
    SAFE_HEAP_STORE_i32_4_4(($4 + 16 | 0) + ($5 << 2) | 0, 0, $0);
    $5 = $5 + 1 | 0;
    if ($0 >>> 0 < $7 >>> 0) {
     continue
    }
    break;
   };
   $1 = ($6 + $7 | 0) + $9 | 0;
   label$3 : {
    if ($6 >>> 0 >= $1 >>> 0) {
     $5 = 0;
     $0 = 1;
     $1 = 0;
     break label$3;
    }
    $5 = 1;
    $0 = 1;
    while (1) {
     label$6 : {
      if (($5 & 3) == 3) {
       sift($6, $2, $3, $0, $4 + 16 | 0);
       shr($4 + 8 | 0, 2);
       $0 = $0 + 2 | 0;
       break label$6;
      }
      $5 = $0 - 1 | 0;
      label$8 : {
       if (SAFE_HEAP_LOAD_i32_4_4(($4 + 16 | 0) + ($5 << 2) | 0, 0) >>> 0 >= $1 - $6 >>> 0) {
        trinkle($6, $2, $3, $4 + 8 | 0, $0, 0, $4 + 16 | 0);
        break label$8;
       }
       sift($6, $2, $3, $0, $4 + 16 | 0);
      }
      if (($0 | 0) == 1) {
       shl($4 + 8 | 0, 1);
       $0 = 0;
       break label$6;
      }
      shl($4 + 8 | 0, $5);
      $0 = 1;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
     $5 = $7 | 1;
     SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
     $6 = $2 + $6 | 0;
     if ($1 >>> 0 > $6 >>> 0) {
      continue
     }
     break;
    };
    $5 = $7 >>> 0 > 1;
    $1 = (SAFE_HEAP_LOAD_i32_4_4($4, 12) | 0) != 0;
   }
   trinkle($6, $2, $3, $4 + 8 | 0, $0, 0, $4 + 16 | 0);
   if (!($5 | ($0 | 0) != 1 | $1)) {
    break label$1
   }
   while (1) {
    label$13 : {
     if (($0 | 0) <= 1) {
      $1 = $4 + 8 | 0;
      $8 = $1;
      $1 = pntz($1);
      shr($8, $1);
      $5 = SAFE_HEAP_LOAD_i32_4_4($4, 8);
      $0 = $0 + $1 | 0;
      break label$13;
     }
     $1 = $4 + 8 | 0;
     shl($1, 2);
     SAFE_HEAP_STORE_i32_4_4($4, 8, SAFE_HEAP_LOAD_i32_4_4($4, 8) ^ 7);
     shr($1, 1);
     $10 = $6 + $9 | 0;
     $7 = $4 + 16 | 0;
     $8 = $0 - 2 | 0;
     trinkle($10 - SAFE_HEAP_LOAD_i32_4_4($7 + ($8 << 2) | 0, 0) | 0, $2, $3, $1, $0 - 1 | 0, 1, $7);
     shl($1, 1);
     $5 = SAFE_HEAP_LOAD_i32_4_4($4, 8) | 1;
     SAFE_HEAP_STORE_i32_4_4($4, 8, $5);
     trinkle($10, $2, $3, $1, $8, 1, $7);
     $0 = $8;
    }
    $6 = $6 + $9 | 0;
    if (($0 | 0) != 1) {
     continue
    }
    if (SAFE_HEAP_LOAD_i32_4_4($4, 12) | ($5 | 0) != 1) {
     continue
    }
    break;
   };
  }
  __stack_pointer = $4 + 208 | 0;
 }
 
 function wrapper_cmp($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return FUNCTION_TABLE[$2 | 0]($0, $1) | 0;
 }
 
 function scalbn($0, $1) {
  label$1 : {
   if (($1 | 0) >= 1024) {
    $0 = $0 * 8988465674311579538646525.0e283;
    if ($1 >>> 0 < 2047) {
     $1 = $1 - 1023 | 0;
     break label$1;
    }
    $0 = $0 * 8988465674311579538646525.0e283;
    $1 = (($1 | 0) >= 3069 ? 3069 : $1) - 2046 | 0;
    break label$1;
   }
   if (($1 | 0) > -1023) {
    break label$1
   }
   $0 = $0 * 2.004168360008973e-292;
   if ($1 >>> 0 > 4294965304) {
    $1 = $1 + 969 | 0;
    break label$1;
   }
   $0 = $0 * 2.004168360008973e-292;
   $1 = (($1 | 0) <= -2960 ? -2960 : $1) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1 + 1023 << 20);
  return $0 * +wasm2js_scratch_load_f64();
 }
 
 function sinf($0) {
  var $1 = 0, $2 = 0, $3 = 0.0, $4 = 0;
  $1 = __stack_pointer - 16 | 0;
  __stack_pointer = $1;
  $4 = (wasm2js_scratch_store_f32($0), wasm2js_scratch_load_i32(2));
  $2 = $4 & 2147483647;
  label$1 : {
   if ($2 >>> 0 <= 1061752794) {
    if ($2 >>> 0 < 964689920) {
     break label$1
    }
    $0 = __sindf(+$0);
    break label$1;
   }
   if ($2 >>> 0 <= 1081824209) {
    $3 = +$0;
    if ($2 >>> 0 <= 1075235811) {
     if (($4 | 0) < 0) {
      $0 = Math_fround(-__cosdf($3 + 1.5707963267948966));
      break label$1;
     }
     $0 = __cosdf($3 + -1.5707963267948966);
     break label$1;
    }
    $0 = __sindf(-((($4 | 0) >= 0 ? -3.141592653589793 : 3.141592653589793) + $3));
    break label$1;
   }
   if ($2 >>> 0 <= 1088565717) {
    if ($2 >>> 0 <= 1085271519) {
     $3 = +$0;
     if (($4 | 0) < 0) {
      $0 = __cosdf($3 + 4.71238898038469);
      break label$1;
     }
     $0 = Math_fround(-__cosdf($3 + -4.71238898038469));
     break label$1;
    }
    $0 = __sindf((($4 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0);
    break label$1;
   }
   if ($2 >>> 0 >= 2139095040) {
    $0 = Math_fround($0 - $0);
    break label$1;
   }
   label$10 : {
    switch (__rem_pio2f($0, $1 + 8 | 0) & 3) {
    case 0:
     $0 = __sindf(SAFE_HEAP_LOAD_f64_8_8($1, 8));
     break label$1;
    case 1:
     $0 = __cosdf(SAFE_HEAP_LOAD_f64_8_8($1, 8));
     break label$1;
    case 2:
     $0 = __sindf(-SAFE_HEAP_LOAD_f64_8_8($1, 8));
     break label$1;
    default:
     break label$10;
    };
   }
   $0 = Math_fround(-__cosdf(SAFE_HEAP_LOAD_f64_8_8($1, 8)));
  }
  __stack_pointer = $1 + 16 | 0;
  return $0;
 }
 
 function sscanf($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
  $25 = __stack_pointer - 16 | 0;
  __stack_pointer = $25;
  SAFE_HEAP_STORE_i32_4_4($25, 12, $2);
  $4 = __stack_pointer - 144 | 0;
  __stack_pointer = $4;
  $3 = memset($4, 0, 144);
  SAFE_HEAP_STORE_i32_4_4($3, 76, -1);
  SAFE_HEAP_STORE_i32_4_4($3, 44, $0);
  SAFE_HEAP_STORE_i32_4_4($3, 32, 973);
  SAFE_HEAP_STORE_i32_4_4($3, 84, $0);
  $4 = $1;
  $21 = $2;
  $0 = 0;
  $10 = __stack_pointer - 304 | 0;
  __stack_pointer = $10;
  SAFE_HEAP_LOAD_i32_4_4($3, 76);
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (SAFE_HEAP_LOAD_i32_4_4($3, 4)) {
       break label$5
      }
      __toread($3);
      if (SAFE_HEAP_LOAD_i32_4_4($3, 4)) {
       break label$5
      }
      break label$4;
     }
     $1 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
     if (!$1) {
      break label$2
     }
     $27 = $10 + 16 | 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         while (1) {
          label$11 : {
           label$13 : {
            if (isspace($1 & 255)) {
             while (1) {
              $1 = $4;
              $4 = $4 + 1 | 0;
              if (isspace(SAFE_HEAP_LOAD_i32_1_U_1($1, 1))) {
               continue
              }
              break;
             };
             __shlim($3, 0, 0);
             while (1) {
              $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
              label$17 : {
               if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                break label$17;
               }
               $2 = __shgetc($3);
              }
              if (isspace($2)) {
               continue
              }
              break;
             };
             $4 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
             SAFE_HEAP_LOAD_i64_8_8($3, 112);
             if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
              $4 = $4 - 1 | 0;
              SAFE_HEAP_STORE_i32_4_4($3, 4, $4);
             }
             $2 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
             $5 = $19 + i64toi32_i32$HIGH_BITS | 0;
             $6 = $5 + 1 | 0;
             $7 = $5;
             $5 = $2 + $14 | 0;
             $6 = $5 >>> 0 < $14 >>> 0 ? $6 : $7;
             $2 = $4 - SAFE_HEAP_LOAD_i32_4_4($3, 44) | 0;
             $14 = $5 + $2 | 0;
             $4 = ($2 >> 31) + $6 | 0;
             $19 = $2 >>> 0 > $14 >>> 0 ? $4 + 1 | 0 : $4;
             break label$13;
            }
            label$20 : {
             label$21 : {
              label$22 : {
               if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) == 37) {
                $1 = SAFE_HEAP_LOAD_i32_1_U_1($4, 1);
                if (($1 | 0) == 42) {
                 break label$22
                }
                if (($1 | 0) != 37) {
                 break label$21
                }
               }
               __shlim($3, 0, 0);
               label$24 : {
                if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) == 37) {
                 while (1) {
                  $1 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                  label$27 : {
                   if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($1 | 0)) {
                    SAFE_HEAP_STORE_i32_4_4($3, 4, $1 + 1 | 0);
                    $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
                    break label$27;
                   }
                   $1 = __shgetc($3);
                  }
                  if (isspace($1)) {
                   continue
                  }
                  break;
                 };
                 $4 = $4 + 1 | 0;
                 break label$24;
                }
                $1 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($1 | 0)) {
                 SAFE_HEAP_STORE_i32_4_4($3, 4, $1 + 1 | 0);
                 $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
                 break label$24;
                }
                $1 = __shgetc($3);
               }
               if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 0) | 0) != ($1 | 0)) {
                SAFE_HEAP_LOAD_i64_8_8($3, 112);
                if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
                 SAFE_HEAP_STORE_i32_4_4($3, 4, SAFE_HEAP_LOAD_i32_4_4($3, 4) - 1 | 0)
                }
                if (($1 | 0) >= 0) {
                 break label$2
                }
                $6 = 0;
                if ($22) {
                 break label$2
                }
                break label$4;
               }
               $1 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
               $2 = $19 + i64toi32_i32$HIGH_BITS | 0;
               $5 = $2 + 1 | 0;
               $7 = $2;
               $2 = $1 + $14 | 0;
               $5 = $2 >>> 0 < $14 >>> 0 ? $5 : $7;
               $1 = SAFE_HEAP_LOAD_i32_4_4($3, 4) - SAFE_HEAP_LOAD_i32_4_4($3, 44) | 0;
               $14 = $2 + $1 | 0;
               $2 = ($1 >> 31) + $5 | 0;
               $19 = $1 >>> 0 > $14 >>> 0 ? $2 + 1 | 0 : $2;
               $1 = $4;
               break label$13;
              }
              $12 = 0;
              $1 = $4 + 2 | 0;
              break label$20;
             }
             label$32 : {
              if (!isdigit($1)) {
               break label$32
              }
              if ((SAFE_HEAP_LOAD_i32_1_U_1($4, 2) | 0) != 36) {
               break label$32
              }
              $1 = SAFE_HEAP_LOAD_i32_1_U_1($4, 1) - 48 | 0;
              $2 = __stack_pointer - 16 | 0;
              SAFE_HEAP_STORE_i32_4_4($2, 12, $21);
              $1 = ($1 >>> 0 > 1 ? ($1 << 2) - 4 | 0 : 0) + $21 | 0;
              SAFE_HEAP_STORE_i32_4_4($2, 8, $1 + 4 | 0);
              $12 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
              $1 = $4 + 3 | 0;
              break label$20;
             }
             $12 = SAFE_HEAP_LOAD_i32_4_4($21, 0);
             $21 = $21 + 4 | 0;
             $1 = $4 + 1 | 0;
            }
            $11 = 0;
            $4 = 0;
            if (isdigit(SAFE_HEAP_LOAD_i32_1_U_1($1, 0))) {
             while (1) {
              $4 = (SAFE_HEAP_LOAD_i32_1_U_1($1, 0) + Math_imul($4, 10) | 0) - 48 | 0;
              $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
              $1 = $1 + 1 | 0;
              if (isdigit($2)) {
               continue
              }
              break;
             }
            }
            $8 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
            if (!(($8 | 0) != 109)) {
             $13 = 0;
             $11 = ($12 | 0) != 0;
             $8 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
             $0 = 0;
             $1 = $1 + 1 | 0;
            }
            $2 = $1;
            $1 = $2 + 1 | 0;
            $5 = 3;
            $6 = $11;
            label$37 : {
             label$38 : {
              switch (($8 & 255) - 65 | 0) {
              case 39:
               $7 = $2 + 2 | 0;
               $2 = (SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) == 104;
               $1 = $2 ? $7 : $1;
               $5 = $2 ? -2 : -1;
               break label$37;
              case 43:
               $7 = $2 + 2 | 0;
               $2 = (SAFE_HEAP_LOAD_i32_1_U_1($2, 1) | 0) == 108;
               $1 = $2 ? $7 : $1;
               $5 = $2 ? 3 : 1;
               break label$37;
              case 51:
              case 57:
               $5 = 1;
               break label$37;
              case 11:
               $5 = 2;
               break label$37;
              case 41:
               break label$37;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$38;
              default:
               break label$7;
              };
             }
             $5 = 0;
             $1 = $2;
            }
            $7 = $5;
            $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
            $5 = ($2 & 47) == 3;
            $20 = $5 ? 1 : $7;
            $15 = $5 ? $2 | 32 : $2;
            label$43 : {
             if (($15 | 0) == 91) {
              break label$43
             }
             label$44 : {
              if (($15 | 0) != 110) {
               if (($15 | 0) != 99) {
                break label$44
               }
               $4 = ($4 | 0) <= 1 ? 1 : $4;
               break label$43;
              }
              store_int($12, $20, $14, $19);
              break label$13;
             }
             __shlim($3, 0, 0);
             while (1) {
              $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
              label$47 : {
               if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                break label$47;
               }
               $2 = __shgetc($3);
              }
              if (isspace($2)) {
               continue
              }
              break;
             };
             $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
             SAFE_HEAP_LOAD_i64_8_8($3, 112);
             if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
              $2 = $2 - 1 | 0;
              SAFE_HEAP_STORE_i32_4_4($3, 4, $2);
             }
             $5 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
             $6 = $19 + i64toi32_i32$HIGH_BITS | 0;
             $5 = $5 + $14 | 0;
             $6 = $14 >>> 0 > $5 >>> 0 ? $6 + 1 | 0 : $6;
             $2 = $2 - SAFE_HEAP_LOAD_i32_4_4($3, 44) | 0;
             $14 = $2 + $5 | 0;
             $5 = ($2 >> 31) + $6 | 0;
             $19 = $2 >>> 0 > $14 >>> 0 ? $5 + 1 | 0 : $5;
            }
            $18 = $4 >> 31;
            __shlim($3, $4, $18);
            $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
            label$50 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
              break label$50;
             }
             if ((__shgetc($3) | 0) < 0) {
              break label$8
             }
            }
            SAFE_HEAP_LOAD_i64_8_8($3, 112);
            if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
             SAFE_HEAP_STORE_i32_4_4($3, 4, SAFE_HEAP_LOAD_i32_4_4($3, 4) - 1 | 0)
            }
            $9 = $4;
            $2 = 16;
            label$53 : {
             label$54 : {
              label$55 : {
               label$56 : {
                label$57 : {
                 switch ($15 - 88 | 0) {
                 default:
                  $2 = $15 - 65 | 0;
                  if ($2 >>> 0 > 6 | !(1 << $2 & 113)) {
                   break label$53
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  __floatscan($10 + 8 | 0, $3, $20, 0);
                  $4 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
                  $5 = i64toi32_i32$HIGH_BITS;
                  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4) - SAFE_HEAP_LOAD_i32_4_4($3, 44) | 0;
                  if (($4 | 0) != (0 - $2 | 0) | (0 - (($2 >> 31) + (($2 | 0) != 0) | 0) | 0) != ($5 | 0)) {
                   break label$55
                  }
                  break label$9;
                 case 3:
                 case 11:
                 case 27:
                  if (($15 | 16) == 115) {
                   memset($10 + 32 | 0, -1, 257);
                   SAFE_HEAP_STORE_i32_1_1($10, 32, 0);
                   if (($15 | 0) != 115) {
                    break label$54
                   }
                   SAFE_HEAP_STORE_i32_1_1($10, 65, 0);
                   SAFE_HEAP_STORE_i32_1_1($10, 46, 0);
                   SAFE_HEAP_STORE_i32_4_2($10, 42, 0);
                   break label$54;
                  }
                  $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
                  $5 = ($2 | 0) == 94;
                  memset($10 + 32 | 0, $5, 257);
                  SAFE_HEAP_STORE_i32_1_1($10, 32, 0);
                  $6 = $5 ? $1 + 2 | 0 : $1 + 1 | 0;
                  label$64 : {
                   label$65 : {
                    label$66 : {
                     $1 = SAFE_HEAP_LOAD_i32_1_U_1(($5 ? 2 : 1) + $1 | 0, 0);
                     if (($1 | 0) != 45) {
                      if (($1 | 0) == 93) {
                       break label$66
                      }
                      $5 = ($2 | 0) != 94;
                      $1 = $6;
                      break label$64;
                     }
                     $5 = ($2 | 0) != 94;
                     SAFE_HEAP_STORE_i32_1_1($10, 78, $5);
                     break label$65;
                    }
                    $5 = ($2 | 0) != 94;
                    SAFE_HEAP_STORE_i32_1_1($10, 126, $5);
                   }
                   $1 = $6 + 1 | 0;
                  }
                  while (1) {
                   $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
                   label$69 : {
                    if (($2 | 0) != 45) {
                     if (!$2) {
                      break label$8
                     }
                     if (($2 | 0) == 93) {
                      break label$54
                     }
                     break label$69;
                    }
                    $2 = 45;
                    $6 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
                    if (!$6 | ($6 | 0) == 93) {
                     break label$69
                    }
                    $8 = $1 + 1 | 0;
                    $1 = SAFE_HEAP_LOAD_i32_1_U_1($1 - 1 | 0, 0);
                    label$71 : {
                     if ($1 >>> 0 >= $6 >>> 0) {
                      $2 = $6;
                      break label$71;
                     }
                     while (1) {
                      $1 = $1 + 1 | 0;
                      SAFE_HEAP_STORE_i32_1_1($1 + ($10 + 32 | 0) | 0, 0, $5);
                      $2 = SAFE_HEAP_LOAD_i32_1_U_1($8, 0);
                      if ($2 >>> 0 > $1 >>> 0) {
                       continue
                      }
                      break;
                     };
                    }
                    $1 = $8;
                   }
                   SAFE_HEAP_STORE_i32_1_1(($2 + $10 | 0) + 33 | 0, 0, $5);
                   $1 = $1 + 1 | 0;
                   continue;
                  };
                 case 23:
                  $2 = 8;
                  break label$56;
                 case 12:
                 case 29:
                  $2 = 10;
                  break label$56;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$53;
                 case 0:
                 case 24:
                 case 32:
                  break label$56;
                 case 17:
                  break label$57;
                 };
                }
                $2 = 0;
               }
               $4 = 0;
               $6 = 0;
               $8 = 0;
               $16 = 0;
               $18 = -1;
               $17 = -1;
               $24 = __stack_pointer - 16 | 0;
               __stack_pointer = $24;
               $5 = $2;
               label$1 : {
                if (!(($2 | 0) != 1 & $2 >>> 0 <= 36)) {
                 SAFE_HEAP_STORE_i32_4_4(95900, 0, 28);
                 $17 = 0;
                 $18 = 0;
                 break label$1;
                }
                while (1) {
                 $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                 label$510 : {
                  if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                   SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                   $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                   break label$510;
                  }
                  $7 = __shgetc($3);
                 }
                 if (isspace($7)) {
                  continue
                 }
                 break;
                };
                label$711 : {
                 label$812 : {
                  switch ($7 - 43 | 0) {
                  case 0:
                  case 2:
                   break label$812;
                  default:
                   break label$711;
                  };
                 }
                 $16 = ($7 | 0) == 45 ? -1 : 0;
                 $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                 if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                  SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                  $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                  break label$711;
                 }
                 $7 = __shgetc($3);
                }
                label$1013 : {
                 label$1114 : {
                  label$1215 : {
                   label$1316 : {
                    if (!(($5 | 0) != 0 & ($5 | 0) != 16 | ($7 | 0) != 48)) {
                     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                     label$1517 : {
                      if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                       SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                       $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                       break label$1517;
                      }
                      $7 = __shgetc($3);
                     }
                     if (($7 & -33) == 88) {
                      $5 = 16;
                      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                      label$18 : {
                       if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                        SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                        $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                        break label$18;
                       }
                       $7 = __shgetc($3);
                      }
                      if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0) >>> 0 < 16) {
                       break label$1215
                      }
                      $17 = 0;
                      $18 = 0;
                      SAFE_HEAP_LOAD_i64_8_8($3, 112);
                      if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
                       SAFE_HEAP_STORE_i32_4_4($3, 4, SAFE_HEAP_LOAD_i32_4_4($3, 4) - 1 | 0)
                      }
                      __shlim($3, 0, 0);
                      break label$1;
                     }
                     if ($5) {
                      break label$1316
                     }
                     $5 = 8;
                     break label$1215;
                    }
                    $5 = $5 ? $5 : 10;
                    if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0) >>> 0 < $5 >>> 0) {
                     break label$1316
                    }
                    $17 = 0;
                    $18 = 0;
                    SAFE_HEAP_LOAD_i64_8_8($3, 112);
                    if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
                     SAFE_HEAP_STORE_i32_4_4($3, 4, SAFE_HEAP_LOAD_i32_4_4($3, 4) - 1 | 0)
                    }
                    __shlim($3, 0, 0);
                    SAFE_HEAP_STORE_i32_4_4(95900, 0, 28);
                    break label$1;
                   }
                   if (($5 | 0) != 10) {
                    break label$1215
                   }
                   $2 = 0;
                   $6 = $7 - 48 | 0;
                   if ($6 >>> 0 <= 9) {
                    $5 = 0;
                    while (1) {
                     $5 = Math_imul($5, 10) + $6 | 0;
                     $4 = $5 >>> 0 < 429496729;
                     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                     label$25 : {
                      if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                       SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                       $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                       break label$25;
                      }
                      $7 = __shgetc($3);
                     }
                     $6 = $7 - 48 | 0;
                     if ($4 & $6 >>> 0 <= 9) {
                      continue
                     }
                     break;
                    };
                    $2 = $5;
                   }
                   label$28 : {
                    if ($6 >>> 0 > 9) {
                     break label$28
                    }
                    $5 = __wasm_i64_mul($2, 0, 10, 0);
                    $4 = i64toi32_i32$HIGH_BITS;
                    while (1) {
                     $2 = $5 + $6 | 0;
                     $4 = $2 >>> 0 < $6 >>> 0 ? $4 + 1 | 0 : $4;
                     $8 = $4;
                     $5 = ($4 | 0) == 429496729 & $2 >>> 0 >= 2576980378 | $4 >>> 0 > 429496729;
                     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                     label$30 : {
                      if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($4 | 0)) {
                       SAFE_HEAP_STORE_i32_4_4($3, 4, $4 + 1 | 0);
                       $7 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
                       break label$30;
                      }
                      $7 = __shgetc($3);
                     }
                     $6 = $7 - 48 | 0;
                     if ($5 | $6 >>> 0 > 9) {
                      break label$28
                     }
                     $5 = __wasm_i64_mul($2, $8, 10, 0);
                     $4 = i64toi32_i32$HIGH_BITS;
                     if (($4 | 0) == -1 & ($6 ^ -1) >>> 0 >= $5 >>> 0 | ($4 | 0) != -1) {
                      continue
                     }
                     break;
                    };
                    $5 = 10;
                    break label$1114;
                   }
                   $5 = 10;
                   if ($6 >>> 0 <= 9) {
                    break label$1114
                   }
                   break label$1013;
                  }
                  if ($5 - 1 & $5) {
                   $2 = 0;
                   $4 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0);
                   if ($5 >>> 0 > $4 >>> 0) {
                    while (1) {
                     $6 = Math_imul($5, $6) + $4 | 0;
                     $9 = $6 >>> 0 < 119304647;
                     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                     label$35 : {
                      if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                       SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                       $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                       break label$35;
                      }
                      $7 = __shgetc($3);
                     }
                     $4 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0);
                     if ($9 & $5 >>> 0 > $4 >>> 0) {
                      continue
                     }
                     break;
                    };
                    $2 = $6;
                   }
                   if ($4 >>> 0 >= $5 >>> 0) {
                    break label$1114
                   }
                   while (1) {
                    $6 = __wasm_i64_mul($2, $8, $5, 0);
                    $9 = i64toi32_i32$HIGH_BITS;
                    $4 = $4 & 255;
                    if (($9 | 0) == -1 & ($4 ^ -1) >>> 0 < $6 >>> 0) {
                     break label$1114
                    }
                    $2 = $4 + $6 | 0;
                    $8 = $2 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
                    $4 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                    label$3921 : {
                     if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($4 | 0)) {
                      SAFE_HEAP_STORE_i32_4_4($3, 4, $4 + 1 | 0);
                      $7 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
                      break label$3921;
                     }
                     $7 = __shgetc($3);
                    }
                    $4 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0);
                    if ($4 >>> 0 >= $5 >>> 0) {
                     break label$1114
                    }
                    __multi3($24, $5, 0, 0, 0, $2, $8, 0, 0);
                    if (!(SAFE_HEAP_LOAD_i64_8_8($24, 8) | i64toi32_i32$HIGH_BITS)) {
                     continue
                    }
                    break;
                   };
                   break label$1114;
                  }
                  $23 = SAFE_HEAP_LOAD_i32_1_1((Math_imul($5, 23) >>> 5 & 7) + 72001 | 0, 0);
                  $2 = 0;
                  $6 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0);
                  if ($5 >>> 0 > $6 >>> 0) {
                   while (1) {
                    $4 = $4 << $23 | $6;
                    $9 = $4 >>> 0 < 134217728;
                    $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                    label$4323 : {
                     if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                      SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                      $7 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                      break label$4323;
                     }
                     $7 = __shgetc($3);
                    }
                    $6 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0);
                    if ($9 & $5 >>> 0 > $6 >>> 0) {
                     continue
                    }
                    break;
                   };
                   $2 = $4;
                  }
                  if ($5 >>> 0 <= $6 >>> 0) {
                   break label$1114
                  }
                  $9 = $23 & 31;
                  if (($23 & 63) >>> 0 >= 32) {
                   $4 = 0;
                   $26 = -1 >>> $9 | 0;
                  } else {
                   $4 = -1 >>> $9 | 0;
                   $26 = $4 | (1 << $9) - 1 << 32 - $9;
                  }
                  $9 = $4;
                  if (!$4 & $2 >>> 0 > $26 >>> 0) {
                   break label$1114
                  }
                  while (1) {
                   $7 = $23 & 31;
                   if (($23 & 63) >>> 0 >= 32) {
                    $4 = $2 << $7;
                    $2 = 0;
                   } else {
                    $4 = (1 << $7) - 1 & $2 >>> 32 - $7 | $8 << $7;
                    $2 = $2 << $7;
                   }
                   $8 = $4;
                   $2 = $6 & 255 | $2;
                   $4 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                   label$4725 : {
                    if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($4 | 0)) {
                     SAFE_HEAP_STORE_i32_4_4($3, 4, $4 + 1 | 0);
                     $7 = SAFE_HEAP_LOAD_i32_1_U_1($4, 0);
                     break label$4725;
                    }
                    $7 = __shgetc($3);
                   }
                   $6 = SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0);
                   if ($6 >>> 0 >= $5 >>> 0) {
                    break label$1114
                   }
                   if (($8 | 0) == ($9 | 0) & $2 >>> 0 <= $26 >>> 0 | $8 >>> 0 < $9 >>> 0) {
                    continue
                   }
                   break;
                  };
                 }
                 if (SAFE_HEAP_LOAD_i32_1_U_1($7 + 71745 | 0, 0) >>> 0 >= $5 >>> 0) {
                  break label$1013
                 }
                 while (1) {
                  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                  label$5026 : {
                   if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                    SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                    $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                    break label$5026;
                   }
                   $2 = __shgetc($3);
                  }
                  if (SAFE_HEAP_LOAD_i32_1_U_1($2 + 71745 | 0, 0) >>> 0 < $5 >>> 0) {
                   continue
                  }
                  break;
                 };
                 SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
                 $16 = 0;
                 $2 = -1;
                 $8 = -1;
                }
                SAFE_HEAP_LOAD_i64_8_8($3, 112);
                if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
                 SAFE_HEAP_STORE_i32_4_4($3, 4, SAFE_HEAP_LOAD_i32_4_4($3, 4) - 1 | 0)
                }
                label$5327 : {
                 if (($8 | 0) == -1 & ($2 | 0) != -1 | ($8 | 0) != -1) {
                  break label$5327
                 }
                 if (!($16 | 1)) {
                  SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
                  $17 = -2;
                  $18 = ($17 | 0) != -1 ? -1 : -2;
                  break label$1;
                 }
                 if (($8 | 0) == -1 | ($8 | 0) != -1) {
                  break label$5327
                 }
                 SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
                 break label$1;
                }
                $2 = $2 ^ $16;
                $17 = $2 - $16 | 0;
                $4 = $16 >> 31;
                $18 = ($4 ^ $8) - ($4 + ($2 >>> 0 < $16 >>> 0) | 0) | 0;
               }
               __stack_pointer = $24 + 16 | 0;
               i64toi32_i32$HIGH_BITS = $18;
               $2 = $17;
               $5 = i64toi32_i32$HIGH_BITS;
               $6 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
               $8 = i64toi32_i32$HIGH_BITS;
               $4 = SAFE_HEAP_LOAD_i32_4_4($3, 4) - SAFE_HEAP_LOAD_i32_4_4($3, 44) | 0;
               if (($6 | 0) == (0 - $4 | 0) & (0 - (($4 >> 31) + (($4 | 0) != 0) | 0) | 0) == ($8 | 0)) {
                break label$9
               }
               if (!(!$12 | ($15 | 0) != 112)) {
                SAFE_HEAP_STORE_i32_4_4($12, 0, $2);
                break label$53;
               }
               store_int($12, $20, $2, $5);
               break label$53;
              }
              if (!$12) {
               break label$53
              }
              $2 = SAFE_HEAP_LOAD_i64_8_8($27, 0);
              $4 = i64toi32_i32$HIGH_BITS;
              $5 = SAFE_HEAP_LOAD_i64_8_8($10, 8);
              $11 = i64toi32_i32$HIGH_BITS;
              label$75 : {
               switch ($20 | 0) {
               case 0:
                $8 = __stack_pointer - 32 | 0;
                __stack_pointer = $8;
                $9 = $4 & 2147483647;
                $6 = $9 - 1065418752 | 0;
                $7 = $9 - 1082064896 | 0;
                label$128 : {
                 if (!(($6 | 0) == ($7 | 0) | $6 >>> 0 > $7 >>> 0)) {
                  $9 = ($4 & 33554431) << 7 | $2 >>> 25;
                  $2 = $2 & 33554431;
                  if (!(($2 | 0) == 16777216 ? !($5 | $11) : $2 >>> 0 < 16777216)) {
                   $6 = $9 + 1073741825 | 0;
                   break label$128;
                  }
                  $6 = $9 + 1073741824 | 0;
                  if ($2 ^ 16777216 | $5 | $11) {
                   break label$128
                  }
                  $6 = ($9 & 1) + $6 | 0;
                  break label$128;
                 }
                 if (!(!$2 & ($9 | 0) == 2147418112 ? !($5 | $11) : $9 >>> 0 < 2147418112)) {
                  $6 = (($4 & 33554431) << 7 | $2 >>> 25) & 4194303 | 2143289344;
                  break label$128;
                 }
                 $6 = 2139095040;
                 if ($9 >>> 0 > 1082064895) {
                  break label$128
                 }
                 $6 = 0;
                 $9 = $9 >>> 16 | 0;
                 if ($9 >>> 0 < 16145) {
                  break label$128
                 }
                 $7 = $8 + 16 | 0;
                 $6 = $4 & 65535 | 65536;
                 __ashlti3($7, $5, $11, $2, $6, $9 - 16129 | 0);
                 __lshrti3($8, $5, $11, $2, $6, 16257 - $9 | 0);
                 $2 = SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0);
                 $6 = (i64toi32_i32$HIGH_BITS & 33554431) << 7 | $2 >>> 25;
                 $11 = SAFE_HEAP_LOAD_i64_8_8($8, 0);
                 $5 = i64toi32_i32$HIGH_BITS;
                 $9 = SAFE_HEAP_LOAD_i64_8_8($8, 16);
                 $15 = i64toi32_i32$HIGH_BITS;
                 $11 = (SAFE_HEAP_LOAD_i64_8_8($7 + 8 | 0, 0) | $9 | (i64toi32_i32$HIGH_BITS | $15)) != 0 | $11;
                 $2 = $2 & 33554431;
                 if (!(($2 | 0) == 16777216 ? !($5 | $11) : $2 >>> 0 < 16777216)) {
                  $6 = $6 + 1 | 0;
                  break label$128;
                 }
                 if ($2 ^ 16777216 | $11 | $5) {
                  break label$128
                 }
                 $6 = ($6 & 1) + $6 | 0;
                }
                __stack_pointer = $8 + 32 | 0;
                SAFE_HEAP_STORE_f32_4_4($12, 0, (wasm2js_scratch_store_i32(2, $4 & -2147483648 | $6), wasm2js_scratch_load_f32()));
                break label$53;
               case 1:
                SAFE_HEAP_STORE_f64_8_8($12, 0, __trunctfdf2($5, $11, $2, $4));
                break label$53;
               case 2:
                break label$75;
               default:
                break label$53;
               };
              }
              SAFE_HEAP_STORE_i64_8_8($12, 0, $5, $11);
              SAFE_HEAP_STORE_i64_8_8($12, 8, $2, $4);
              break label$53;
             }
             $17 = ($15 | 0) != 99;
             $5 = $17 ? 31 : $4 + 1 | 0;
             label$78 : {
              if (($20 | 0) == 1) {
               $2 = $12;
               if ($11) {
                $2 = dlmalloc($5 << 2);
                if (!$2) {
                 break label$10
                }
               }
               SAFE_HEAP_STORE_i64_8_4($10, 296, 0, 0);
               $4 = 0;
               while (1) {
                $0 = $2;
                label$82 : {
                 while (1) {
                  $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                  label$84 : {
                   if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                    SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                    $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                    break label$84;
                   }
                   $2 = __shgetc($3);
                  }
                  if (!SAFE_HEAP_LOAD_i32_1_U_1(($2 + $10 | 0) + 33 | 0, 0)) {
                   break label$82
                  }
                  SAFE_HEAP_STORE_i32_1_1($10, 27, $2);
                  $13 = $10 + 28 | 0;
                  $2 = $10 + 296 | 0;
                  $7 = $2 ? $2 : 97132;
                  $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
                  __inlined_func$mbrtowc : {
                   label$14 : {
                    $6 = $10 + 27 | 0;
                    label$210 : {
                     label$311 : {
                      if (!$6) {
                       if ($2) {
                        break label$311
                       }
                       $2 = 0;
                       break __inlined_func$mbrtowc;
                      }
                      label$512 : {
                       if ($2) {
                        $8 = 1;
                        break label$512;
                       }
                       $2 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
                       $8 = $2 << 24 >> 24;
                       if (($8 | 0) >= 0) {
                        if ($13) {
                         SAFE_HEAP_STORE_i32_4_4($13, 0, $2)
                        }
                        $2 = ($8 | 0) != 0;
                        break __inlined_func$mbrtowc;
                       }
                       if (!SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(97e3, 96), 0)) {
                        $2 = 1;
                        if (!$13) {
                         break label$210
                        }
                        SAFE_HEAP_STORE_i32_4_4($13, 0, SAFE_HEAP_LOAD_i32_1_1($6, 0) & 57343);
                        $2 = 1;
                        break __inlined_func$mbrtowc;
                       }
                       $2 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0) - 194 | 0;
                       if ($2 >>> 0 > 50) {
                        break label$311
                       }
                       $2 = SAFE_HEAP_LOAD_i32_4_4(($2 << 2) + 72016 | 0, 0);
                       $8 = 0;
                       if (!$8) {
                        break label$14
                       }
                       $6 = $6 + 1 | 0;
                      }
                      $16 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
                      $20 = $16 >>> 3 | 0;
                      if (($20 - 16 | ($2 >> 26) + $20) >>> 0 > 7) {
                       break label$311
                      }
                      while (1) {
                       $8 = $8 - 1 | 0;
                       $2 = ($16 & 255) - 128 | $2 << 6;
                       if (($2 | 0) >= 0) {
                        SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
                        if ($13) {
                         SAFE_HEAP_STORE_i32_4_4($13, 0, $2)
                        }
                        $2 = 1 - $8 | 0;
                        break __inlined_func$mbrtowc;
                       }
                       if (!$8) {
                        break label$14
                       }
                       $6 = $6 + 1 | 0;
                       $16 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
                       if (($16 & 192) == 128) {
                        continue
                       }
                       break;
                      };
                     }
                     SAFE_HEAP_STORE_i32_4_4($7, 0, 0);
                     SAFE_HEAP_STORE_i32_4_4(95900, 0, 25);
                     $2 = -1;
                    }
                    break __inlined_func$mbrtowc;
                   }
                   SAFE_HEAP_STORE_i32_4_4($7, 0, $2);
                   $2 = -2;
                  }
                  if (($2 | 0) == -2) {
                   continue
                  }
                  $13 = 0;
                  if (($2 | 0) == -1) {
                   break label$8
                  }
                  if ($0) {
                   SAFE_HEAP_STORE_i32_4_4(($4 << 2) + $0 | 0, 0, SAFE_HEAP_LOAD_i32_4_4($10, 28));
                   $4 = $4 + 1 | 0;
                  }
                  if (!$11 | ($4 | 0) != ($5 | 0)) {
                   continue
                  }
                  break;
                 };
                 $6 = 1;
                 $5 = $5 << 1 | 1;
                 $2 = dlrealloc($0, $5 << 2);
                 if ($2) {
                  continue
                 }
                 break label$7;
                }
                break;
               };
               $13 = 0;
               $5 = $0;
               $2 = $10 + 296 | 0;
               if ($2) {
                $2 = SAFE_HEAP_LOAD_i32_4_4($2, 0)
               } else {
                $2 = 0
               }
               if ($2) {
                break label$8
               }
               break label$78;
              }
              if ($11) {
               $4 = 0;
               $2 = dlmalloc($5);
               if (!$2) {
                break label$10
               }
               while (1) {
                $0 = $2;
                while (1) {
                 $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                 label$90 : {
                  if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($2 | 0)) {
                   SAFE_HEAP_STORE_i32_4_4($3, 4, $2 + 1 | 0);
                   $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                   break label$90;
                  }
                  $2 = __shgetc($3);
                 }
                 if (!SAFE_HEAP_LOAD_i32_1_U_1(($2 + $10 | 0) + 33 | 0, 0)) {
                  $5 = 0;
                  $13 = $0;
                  break label$78;
                 }
                 SAFE_HEAP_STORE_i32_1_1($0 + $4 | 0, 0, $2);
                 $4 = $4 + 1 | 0;
                 if (($5 | 0) != ($4 | 0)) {
                  continue
                 }
                 break;
                };
                $6 = 1;
                $5 = $5 << 1 | 1;
                $2 = dlrealloc($0, $5);
                if ($2) {
                 continue
                }
                break;
               };
               $13 = $0;
               $0 = 0;
               break label$7;
              }
              $4 = 0;
              if ($12) {
               while (1) {
                $0 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
                label$95 : {
                 if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($0 | 0)) {
                  SAFE_HEAP_STORE_i32_4_4($3, 4, $0 + 1 | 0);
                  $0 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
                  break label$95;
                 }
                 $0 = __shgetc($3);
                }
                if (SAFE_HEAP_LOAD_i32_1_U_1(($0 + $10 | 0) + 33 | 0, 0)) {
                 SAFE_HEAP_STORE_i32_1_1($4 + $12 | 0, 0, $0);
                 $4 = $4 + 1 | 0;
                 continue;
                } else {
                 $5 = 0;
                 $0 = $12;
                 $13 = $0;
                 break label$78;
                }
               }
              }
              while (1) {
               $0 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
               label$99 : {
                if ((SAFE_HEAP_LOAD_i32_4_4($3, 104) | 0) != ($0 | 0)) {
                 SAFE_HEAP_STORE_i32_4_4($3, 4, $0 + 1 | 0);
                 $0 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
                 break label$99;
                }
                $0 = __shgetc($3);
               }
               if (SAFE_HEAP_LOAD_i32_1_U_1(($0 + $10 | 0) + 33 | 0, 0)) {
                continue
               }
               break;
              };
              $0 = 0;
              $13 = 0;
              $5 = 0;
             }
             $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4);
             SAFE_HEAP_LOAD_i64_8_8($3, 112);
             if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
              $2 = $2 - 1 | 0;
              SAFE_HEAP_STORE_i32_4_4($3, 4, $2);
             }
             $6 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
             $8 = i64toi32_i32$HIGH_BITS;
             $2 = $2 - SAFE_HEAP_LOAD_i32_4_4($3, 44) | 0;
             $6 = $6 + $2 | 0;
             $8 = ($2 >> 31) + $8 | 0;
             $2 = $2 >>> 0 > $6 >>> 0 ? $8 + 1 | 0 : $8;
             if (!($6 | $2) | !($17 | ($6 | 0) == ($9 | 0) & ($2 | 0) == ($18 | 0))) {
              break label$11
             }
             if ($11) {
              SAFE_HEAP_STORE_i32_4_4($12, 0, $0)
             }
             label$103 : {
              if (($15 | 0) == 99) {
               break label$103
              }
              if ($5) {
               SAFE_HEAP_STORE_i32_4_4(($4 << 2) + $5 | 0, 0, 0)
              }
              if (!$13) {
               $13 = 0;
               break label$103;
              }
              SAFE_HEAP_STORE_i32_1_1($4 + $13 | 0, 0, 0);
             }
             $0 = $5;
            }
            $2 = SAFE_HEAP_LOAD_i64_8_8($3, 120);
            $4 = $19 + i64toi32_i32$HIGH_BITS | 0;
            $5 = $4 + 1 | 0;
            $7 = $4;
            $4 = $2 + $14 | 0;
            $5 = $4 >>> 0 < $14 >>> 0 ? $5 : $7;
            $2 = SAFE_HEAP_LOAD_i32_4_4($3, 4) - SAFE_HEAP_LOAD_i32_4_4($3, 44) | 0;
            $14 = $4 + $2 | 0;
            $4 = ($2 >> 31) + $5 | 0;
            $19 = $2 >>> 0 > $14 >>> 0 ? $4 + 1 | 0 : $4;
            $22 = (($12 | 0) != 0) + $22 | 0;
           }
           $4 = $1 + 1 | 0;
           $1 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
           if ($1) {
            continue
           }
           break label$2;
          }
          break;
         };
         $0 = $5;
         break label$9;
        }
        $6 = 1;
        $13 = 0;
        $0 = 0;
        break label$7;
       }
       $6 = $11;
       break label$3;
      }
      $6 = $11;
     }
     if ($22) {
      break label$3
     }
    }
    $22 = -1;
   }
   if (!$6) {
    break label$2
   }
   dlfree($13);
   dlfree($0);
  }
  __stack_pointer = $10 + 304 | 0;
  __stack_pointer = $3 + 144 | 0;
  __stack_pointer = $25 + 16 | 0;
  return $22;
 }
 
 function __emscripten_stdout_close($0) {
  $0 = $0 | 0;
  return 0;
 }
 
 function __emscripten_stdout_seek($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function strchr($0, $1) {
  var $2 = 0, $3 = 0;
  __inlined_func$__strchrnul : {
   label$1 : {
    $3 = $1 & 255;
    if ($3) {
     if ($0 & 3) {
      while (1) {
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
       if (!$2 | ($2 | 0) == ($1 & 255)) {
        break label$1
       }
       $0 = $0 + 1 | 0;
       if ($0 & 3) {
        continue
       }
       break;
      }
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
     label$5 : {
      if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
       break label$5
      }
      $3 = Math_imul($3, 16843009);
      while (1) {
       $2 = $2 ^ $3;
       if (($2 ^ -1) & $2 - 16843009 & -2139062144) {
        break label$5
       }
       $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
       $0 = $0 + 4 | 0;
       if (!($2 - 16843009 & ($2 ^ -1) & -2139062144)) {
        continue
       }
       break;
      };
     }
     while (1) {
      $2 = $0;
      $3 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
      if ($3) {
       $0 = $2 + 1 | 0;
       if (($3 | 0) != ($1 & 255)) {
        continue
       }
      }
      break;
     };
     $0 = $2;
     break __inlined_func$__strchrnul;
    }
    $0 = strlen($0) + $0 | 0;
    break __inlined_func$__strchrnul;
   }
  }
  return (SAFE_HEAP_LOAD_i32_1_U_1($0, 0) | 0) == ($1 & 255) ? $0 : 0;
 }
 
 function strcmp($0, $1) {
  var $2 = 0, $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
  $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 0);
  label$1 : {
   if (!$2 | ($3 & 255) != ($2 | 0)) {
    break label$1
   }
   while (1) {
    $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 1);
    $2 = SAFE_HEAP_LOAD_i32_1_U_1($0, 1);
    if (!$2) {
     break label$1
    }
    $1 = $1 + 1 | 0;
    $0 = $0 + 1 | 0;
    if (($3 & 255) == ($2 | 0)) {
     continue
    }
    break;
   };
  }
  return $2 - ($3 & 255) | 0;
 }
 
 function strlen($0) {
  var $1 = 0, $2 = 0, $3 = 0;
  $1 = $0;
  label$1 : {
   if ($1 & 3) {
    while (1) {
     if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
      break label$1
     }
     $1 = $1 + 1 | 0;
     if ($1 & 3) {
      continue
     }
     break;
    }
   }
   while (1) {
    $2 = $1;
    $1 = $1 + 4 | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
     continue
    }
    break;
   };
   while (1) {
    $1 = $2;
    $2 = $1 + 1 | 0;
    if (SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
     continue
    }
    break;
   };
  }
  return $1 - $0 | 0;
 }
 
 function strncpy($0, $1, $2) {
  var $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0 ^ $1) & 3) {
       break label$4
      }
      $3 = ($2 | 0) != 0;
      label$5 : {
       if (!($1 & 3) | !$2) {
        break label$5
       }
       while (1) {
        $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
        SAFE_HEAP_STORE_i32_1_1($0, 0, $3);
        if (!$3) {
         break label$1
        }
        $0 = $0 + 1 | 0;
        $2 = $2 - 1 | 0;
        $3 = ($2 | 0) != 0;
        $1 = $1 + 1 | 0;
        if (!($1 & 3)) {
         break label$5
        }
        if ($2) {
         continue
        }
        break;
       };
      }
      if (!$3) {
       break label$2
      }
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 0)) {
       break label$1
      }
      if ($2 >>> 0 < 4) {
       break label$4
      }
      while (1) {
       $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
        break label$3
       }
       SAFE_HEAP_STORE_i32_4_4($0, 0, $3);
       $0 = $0 + 4 | 0;
       $1 = $1 + 4 | 0;
       $2 = $2 - 4 | 0;
       if ($2 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2) {
      break label$2
     }
    }
    while (1) {
     $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
     SAFE_HEAP_STORE_i32_1_1($0, 0, $3);
     if (!$3) {
      break label$1
     }
     $0 = $0 + 1 | 0;
     $1 = $1 + 1 | 0;
     $2 = $2 - 1 | 0;
     if ($2) {
      continue
     }
     break;
    };
   }
   $2 = 0;
  }
  memset($0, 0, $2);
 }
 
 function __shlim($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  SAFE_HEAP_STORE_i64_8_8($0, 112, $1, $2);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $3 = $3 - $4 | 0;
  SAFE_HEAP_STORE_i64_8_8($0, 120, $3, $3 >> 31);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  label$1 : {
   if (!($1 | $2)) {
    break label$1
   }
   $5 = $3 - $4 | 0;
   $6 = $5 >> 31;
   if (($2 | 0) >= ($6 | 0) & $1 >>> 0 >= $5 >>> 0 | ($2 | 0) > ($6 | 0)) {
    break label$1
   }
   $3 = $1 + $4 | 0;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 104, $3);
 }
 
 function __shgetc($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = SAFE_HEAP_LOAD_i64_8_8($0, 120);
  $1 = i64toi32_i32$HIGH_BITS;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  $7 = $3 - $2 | 0;
  $4 = $4 + $7 | 0;
  label$1 : {
   $5 = SAFE_HEAP_LOAD_i64_8_8($0, 112);
   $6 = i64toi32_i32$HIGH_BITS;
   $1 = ($7 >> 31) + $1 | 0;
   $1 = $4 >>> 0 < $7 >>> 0 ? $1 + 1 | 0 : $1;
   if (!(($6 | 0) <= ($1 | 0) & $4 >>> 0 >= $5 >>> 0 | ($1 | 0) > ($6 | 0) ? $5 | $6 : 0)) {
    $3 = __stack_pointer - 16 | 0;
    __stack_pointer = $3;
    $2 = -1;
    label$10 : {
     if (__toread($0)) {
      break label$10
     }
     if ((FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 32) | 0]($0, $3 + 15 | 0, 1) | 0) != 1) {
      break label$10
     }
     $2 = SAFE_HEAP_LOAD_i32_1_U_1($3, 15);
    }
    __stack_pointer = $3 + 16 | 0;
    $6 = $2;
    if (($2 | 0) >= 0) {
     break label$1
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
   }
   SAFE_HEAP_STORE_i64_8_8($0, 112, -1, -1);
   SAFE_HEAP_STORE_i32_4_4($0, 104, $3);
   $6 = $0;
   $0 = $2 - $3 | 0;
   $4 = $0 + $4 | 0;
   $1 = ($0 >> 31) + $1 | 0;
   SAFE_HEAP_STORE_i64_8_8($6, 120, $4, $0 >>> 0 > $4 >>> 0 ? $1 + 1 | 0 : $1);
   return -1;
  }
  $2 = $1;
  $5 = $1 + 1 | 0;
  $1 = $4 + 1 | 0;
  $7 = $1 ? $2 : $5;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  $2 = SAFE_HEAP_LOAD_i64_8_8($0, 112);
  $5 = i64toi32_i32$HIGH_BITS;
  label$4 : {
   if (!($2 | $5)) {
    break label$4
   }
   $5 = $5 - ($7 + ($1 >>> 0 > $2 >>> 0) | 0) | 0;
   $8 = $3 - $4 | 0;
   $9 = $8 >> 31;
   $2 = $2 - $1 | 0;
   if (($5 | 0) >= ($9 | 0) & $2 >>> 0 >= $8 >>> 0 | ($5 | 0) > ($9 | 0)) {
    break label$4
   }
   $3 = $4 + $2 | 0;
  }
  SAFE_HEAP_STORE_i32_4_4($0, 104, $3);
  $5 = $0;
  $2 = $1;
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  $0 = $1 - $4 | 0;
  $3 = $2 + $0 | 0;
  $2 = ($0 >> 31) + $7 | 0;
  SAFE_HEAP_STORE_i64_8_8($5, 120, $3, $0 >>> 0 > $3 >>> 0 ? $2 + 1 | 0 : $2);
  if ($1 >>> 0 >= $4 >>> 0) {
   SAFE_HEAP_STORE_i32_1_1($4 - 1 | 0, 0, $6)
  }
  return $6;
 }
 
 function isspace($0) {
  return ($0 | 0) == 32 | $0 - 9 >>> 0 < 5;
 }
 
 function copysignl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $4 & 65535 | ($8 >>> 16 & 32768 | $4 >>> 16 & 32767) << 16);
 }
 
 function scalbnl($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0;
  $6 = __stack_pointer - 80 | 0;
  __stack_pointer = $6;
  label$1 : {
   if (($5 | 0) >= 16384) {
    $7 = $6 + 32 | 0;
    __multf3($7, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    $3 = SAFE_HEAP_LOAD_i64_8_8($7 + 8 | 0, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $1 = SAFE_HEAP_LOAD_i64_8_8($6, 32);
    $2 = i64toi32_i32$HIGH_BITS;
    if ($5 >>> 0 < 32767) {
     $5 = $5 - 16383 | 0;
     break label$1;
    }
    $7 = $6 + 16 | 0;
    __multf3($7, $1, $2, $3, $4, 0, 0, 0, 2147352576);
    $5 = (($5 | 0) >= 49149 ? 49149 : $5) - 32766 | 0;
    $3 = SAFE_HEAP_LOAD_i64_8_8($7 + 8 | 0, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $1 = SAFE_HEAP_LOAD_i64_8_8($6, 16);
    $2 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   if (($5 | 0) > -16383) {
    break label$1
   }
   $7 = $6 - -64 | 0;
   __multf3($7, $1, $2, $3, $4, 0, 0, 0, 7471104);
   $3 = SAFE_HEAP_LOAD_i64_8_8($7 + 8 | 0, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $1 = SAFE_HEAP_LOAD_i64_8_8($6, 64);
   $2 = i64toi32_i32$HIGH_BITS;
   if ($5 >>> 0 > 4294934644) {
    $5 = $5 + 16269 | 0;
    break label$1;
   }
   $7 = $6 + 48 | 0;
   __multf3($7, $1, $2, $3, $4, 0, 0, 0, 7471104);
   $5 = (($5 | 0) <= -48920 ? -48920 : $5) + 32538 | 0;
   $3 = SAFE_HEAP_LOAD_i64_8_8($7 + 8 | 0, 0);
   $4 = i64toi32_i32$HIGH_BITS;
   $1 = SAFE_HEAP_LOAD_i64_8_8($6, 48);
   $2 = i64toi32_i32$HIGH_BITS;
  }
  __multf3($6, $1, $2, $3, $4, 0, 0, 0, $5 + 16383 << 16);
  SAFE_HEAP_STORE_i64_8_8($0, 8, SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($6, 0), i64toi32_i32$HIGH_BITS);
  __stack_pointer = $6 + 80 | 0;
 }
 
 function fmodl($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
  $11 = __stack_pointer - 128 | 0;
  __stack_pointer = $11;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!__letf2($5, $6, $7, $8, 0, 0, 0, 0)) {
      break label$3
     }
     $9 = $8 & 65535;
     $10 = $8 >>> 16 & 32767;
     __inlined_func$__fpclassifyl : {
      label$10 : {
       if (($10 | 0) != 32767) {
        $12 = 4;
        if ($10) {
         break label$10
        }
        $10 = $5 | $7 | ($6 | $9) ? 3 : 2;
        break __inlined_func$__fpclassifyl;
       }
       $12 = !($5 | $7 | ($6 | $9));
      }
      $10 = $12;
     }
     $18 = $4 >>> 16 | 0;
     $13 = $18 & 32767;
     if (($13 | 0) == 32767) {
      break label$3
     }
     if ($10) {
      break label$2
     }
    }
    $10 = $11 + 16 | 0;
    __multf3($10, $1, $2, $3, $4, $5, $6, $7, $8);
    $4 = SAFE_HEAP_LOAD_i64_8_8($11, 16);
    $3 = i64toi32_i32$HIGH_BITS;
    $2 = SAFE_HEAP_LOAD_i64_8_8($10 + 8 | 0, 0);
    $1 = i64toi32_i32$HIGH_BITS;
    __divtf3($11, $4, $3, $2, $1, $4, $3, $2, $1);
    $3 = SAFE_HEAP_LOAD_i64_8_8($11 + 8 | 0, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $7 = SAFE_HEAP_LOAD_i64_8_8($11, 0);
    $8 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   $12 = $3;
   $14 = $4 & 2147483647;
   $10 = $7;
   $9 = $8 & 2147483647;
   if ((__letf2($1, $2, $12, $14, $5, $6, $7, $9) | 0) <= 0) {
    if (__letf2($1, $2, $12, $14, $5, $6, $10, $9)) {
     $7 = $1;
     $8 = $2;
     break label$1;
    }
    __multf3($11 + 112 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    $3 = SAFE_HEAP_LOAD_i64_8_8($11 + 120 | 0, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $7 = SAFE_HEAP_LOAD_i64_8_8($11, 112);
    $8 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   $15 = $8 >>> 16 & 32767;
   label$6 : {
    if ($13) {
     $7 = $1;
     $8 = $2;
     break label$6;
    }
    __multf3($11 + 96 | 0, $1, $2, $12, $14, 0, 0, 0, 1081540608);
    $12 = SAFE_HEAP_LOAD_i64_8_8($11 + 104 | 0, 0);
    $7 = i64toi32_i32$HIGH_BITS;
    $14 = $7;
    $13 = ($7 >>> 16 | 0) - 120 | 0;
    $7 = SAFE_HEAP_LOAD_i64_8_8($11, 96);
    $8 = i64toi32_i32$HIGH_BITS;
   }
   if (!$15) {
    __multf3($11 + 80 | 0, $5, $6, $10, $9, 0, 0, 0, 1081540608);
    $10 = SAFE_HEAP_LOAD_i64_8_8($11 + 88 | 0, 0);
    $5 = i64toi32_i32$HIGH_BITS;
    $9 = $5;
    $15 = ($9 >>> 16 | 0) - 120 | 0;
    $5 = SAFE_HEAP_LOAD_i64_8_8($11, 80);
    $6 = i64toi32_i32$HIGH_BITS;
   }
   $16 = $10;
   $19 = $9 & 65535 | 65536;
   $14 = $14 & 65535 | 65536;
   if (($13 | 0) > ($15 | 0)) {
    while (1) {
     $9 = $12 - $16 | 0;
     $10 = ($6 | 0) == ($8 | 0) & $5 >>> 0 > $7 >>> 0 | $6 >>> 0 > $8 >>> 0;
     $17 = $9 - $10 | 0;
     $9 = ($14 - (($12 >>> 0 < $16 >>> 0) + $19 | 0) | 0) - ($9 >>> 0 < $10 >>> 0) | 0;
     label$11 : {
      if (($9 | 0) >= 0) {
       $10 = $7;
       $7 = $7 - $5 | 0;
       $8 = $8 - (($5 >>> 0 > $10 >>> 0) + $6 | 0) | 0;
       if (!($7 | $17 | ($8 | $9))) {
        __multf3($11 + 32 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
        $3 = SAFE_HEAP_LOAD_i64_8_8($11 + 40 | 0, 0);
        $4 = i64toi32_i32$HIGH_BITS;
        $7 = SAFE_HEAP_LOAD_i64_8_8($11, 32);
        $8 = i64toi32_i32$HIGH_BITS;
        break label$1;
       }
       $12 = $17 << 1 | $8 >>> 31;
       $10 = $9 << 1 | $17 >>> 31;
       break label$11;
      }
      $10 = $14 << 1 | $12 >>> 31;
      $12 = $12 << 1 | $8 >>> 31;
     }
     $14 = $10;
     $8 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $13 = $13 - 1 | 0;
     if (($13 | 0) > ($15 | 0)) {
      continue
     }
     break;
    };
    $13 = $15;
   }
   $15 = $12 - $16 | 0;
   $9 = ($6 | 0) == ($8 | 0) & $5 >>> 0 > $7 >>> 0 | $6 >>> 0 > $8 >>> 0;
   $10 = $15 - $9 | 0;
   label$14 : {
    $9 = ($14 - (($12 >>> 0 < $16 >>> 0) + $19 | 0) | 0) - ($9 >>> 0 > $15 >>> 0) | 0;
    if (!(($9 | 0) > 0 | ($9 | 0) >= 0)) {
     $10 = $12;
     $9 = $14;
     break label$14;
    }
    $12 = $7;
    $7 = $7 - $5 | 0;
    $8 = $8 - (($5 >>> 0 > $12 >>> 0) + $6 | 0) | 0;
    if ($7 | $10 | ($8 | $9)) {
     break label$14
    }
    __multf3($11 + 48 | 0, $1, $2, $3, $4, 0, 0, 0, 0);
    $3 = SAFE_HEAP_LOAD_i64_8_8($11 + 56 | 0, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $7 = SAFE_HEAP_LOAD_i64_8_8($11, 48);
    $8 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   if ($9 >>> 0 <= 65535) {
    while (1) {
     $1 = $8 >>> 31 | 0;
     $13 = $13 - 1 | 0;
     $8 = $8 << 1 | $7 >>> 31;
     $7 = $7 << 1;
     $9 = $9 << 1 | $10 >>> 31;
     $10 = $1 | $10 << 1;
     if ($9 >>> 0 < 65536) {
      continue
     }
     break;
    }
   }
   $1 = $18 & 32768;
   if (($13 | 0) <= 0) {
    __multf3($11 - -64 | 0, $7, $8, $10, $9 & 65535 | ($1 | $13 + 120) << 16, 0, 0, 0, 1065811968);
    $3 = SAFE_HEAP_LOAD_i64_8_8($11 + 72 | 0, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $7 = SAFE_HEAP_LOAD_i64_8_8($11, 64);
    $8 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   $3 = $10;
   $4 = $9 & 65535 | ($1 | $13) << 16;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $7, $8);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $4);
  __stack_pointer = $11 + 128 | 0;
 }
 
 function __floatscan($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0.0, $29 = 0, $30 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0;
  $22 = __stack_pointer - 48 | 0;
  __stack_pointer = $22;
  label$1 : {
   if ($2 >>> 0 <= 2) {
    $7 = $1 + 4 | 0;
    $2 = $2 << 2;
    $19 = SAFE_HEAP_LOAD_i32_4_4($2 + 71244 | 0, 0);
    $16 = SAFE_HEAP_LOAD_i32_4_4($2 + 71232 | 0, 0);
    while (1) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     label$4 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($2 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($7, 0, $2 + 1 | 0);
       $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
       break label$4;
      }
      $2 = __shgetc($1);
     }
     if (isspace($2)) {
      continue
     }
     break;
    };
    $5 = 1;
    label$6 : {
     label$7 : {
      switch ($2 - 43 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $5 = ($2 | 0) == 45 ? -1 : 1;
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($2 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($7, 0, $2 + 1 | 0);
      $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
      break label$6;
     }
     $2 = __shgetc($1);
    }
    label$9 : {
     label$10 : {
      while (1) {
       if ((SAFE_HEAP_LOAD_i32_1_1($6 + 1085 | 0, 0) | 0) == ($2 | 32)) {
        label$13 : {
         if ($6 >>> 0 > 6) {
          break label$13
         }
         $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
         if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($2 | 0)) {
          SAFE_HEAP_STORE_i32_4_4($7, 0, $2 + 1 | 0);
          $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
          break label$13;
         }
         $2 = __shgetc($1);
        }
        $6 = $6 + 1 | 0;
        if (($6 | 0) != 8) {
         continue
        }
        break label$10;
       }
       break;
      };
      if (($6 | 0) != 3) {
       if (($6 | 0) == 8) {
        break label$10
       }
       if (!$3 | $6 >>> 0 < 4) {
        break label$9
       }
       if (($6 | 0) == 8) {
        break label$10
       }
      }
      SAFE_HEAP_LOAD_i64_8_8($1, 112);
      $1 = i64toi32_i32$HIGH_BITS;
      if (($1 | 0) >= 0) {
       SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0)
      }
      if (!$3 | $6 >>> 0 < 4) {
       break label$10
      }
      $1 = ($1 | 0) < 0;
      while (1) {
       if (!$1) {
        SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0)
       }
       $6 = $6 - 1 | 0;
       if ($6 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     $3 = 0;
     $2 = __stack_pointer - 16 | 0;
     __stack_pointer = $2;
     $5 = (wasm2js_scratch_store_f32(Math_fround(Math_fround($5 | 0) * Math_fround(Infinity))), wasm2js_scratch_load_i32(2));
     $1 = $5 & 2147483647;
     label$11 : {
      if ($1 - 8388608 >>> 0 <= 2130706431) {
       $16 = $1 << 25;
       $12 = ($1 >>> 7 | 0) + 1065353216 | 0;
       $1 = 0;
       break label$11;
      }
      if ($1 >>> 0 >= 2139095040) {
       $16 = $5 << 25;
       $12 = $5 >>> 7 | 2147418112;
       $1 = 0;
       break label$11;
      }
      if (!$1) {
       $16 = 0;
       $1 = 0;
       break label$11;
      }
      $3 = $1;
      $1 = Math_clz32($1);
      __ashlti3($2, $3, 0, 0, 0, $1 + 81 | 0);
      $16 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
      $12 = i64toi32_i32$HIGH_BITS ^ 65536 | 16265 - $1 << 16;
      $3 = SAFE_HEAP_LOAD_i64_8_8($2, 0);
      $1 = i64toi32_i32$HIGH_BITS;
     }
     SAFE_HEAP_STORE_i64_8_8($22, 0, $3, $1);
     SAFE_HEAP_STORE_i64_8_8($22, 8, $16, $5 & -2147483648 | $12);
     __stack_pointer = $2 + 16 | 0;
     $5 = SAFE_HEAP_LOAD_i64_8_8($22 + 8 | 0, 0);
     $2 = i64toi32_i32$HIGH_BITS;
     $12 = SAFE_HEAP_LOAD_i64_8_8($22, 0);
     $18 = i64toi32_i32$HIGH_BITS;
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($6) {
        break label$21
       }
       $6 = 0;
       while (1) {
        if ((SAFE_HEAP_LOAD_i32_1_1($6 + 7861 | 0, 0) | 0) != ($2 | 32)) {
         break label$21
        }
        label$23 : {
         if ($6 >>> 0 > 1) {
          break label$23
         }
         $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
         if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($2 | 0)) {
          SAFE_HEAP_STORE_i32_4_4($7, 0, $2 + 1 | 0);
          $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
          break label$23;
         }
         $2 = __shgetc($1);
        }
        $6 = $6 + 1 | 0;
        if (($6 | 0) != 3) {
         continue
        }
        break;
       };
       break label$20;
      }
      label$25 : {
       switch ($6 | 0) {
       case 0:
        label$27 : {
         if (($2 | 0) != 48) {
          break label$27
         }
         $6 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
         label$28 : {
          if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($6 | 0)) {
           SAFE_HEAP_STORE_i32_4_4($7, 0, $6 + 1 | 0);
           $14 = SAFE_HEAP_LOAD_i32_1_U_1($6, 0);
           break label$28;
          }
          $14 = __shgetc($1);
         }
         if (($14 & -33) == 88) {
          $25 = $22 + 16 | 0;
          $6 = 0;
          $7 = __stack_pointer - 432 | 0;
          __stack_pointer = $7;
          $9 = $1;
          $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
          label$14 : {
           if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($2 | 0)) {
            SAFE_HEAP_STORE_i32_4_4($9, 4, $2 + 1 | 0);
            $14 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
            break label$14;
           }
           $14 = __shgetc($9);
          }
          label$35 : {
           label$46 : {
            while (1) {
             label$5 : {
              if (($14 | 0) != 48) {
               if (($14 | 0) != 46) {
                break label$35
               }
               $1 = SAFE_HEAP_LOAD_i32_4_4($9, 4);
               if ((SAFE_HEAP_LOAD_i32_4_4($9, 104) | 0) == ($1 | 0)) {
                break label$5
               }
               SAFE_HEAP_STORE_i32_4_4($9, 4, $1 + 1 | 0);
               $14 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
               break label$46;
              }
              $1 = SAFE_HEAP_LOAD_i32_4_4($9, 4);
              if ((SAFE_HEAP_LOAD_i32_4_4($9, 104) | 0) != ($1 | 0)) {
               SAFE_HEAP_STORE_i32_4_4($9, 4, $1 + 1 | 0);
               $14 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
              } else {
               $14 = __shgetc($9)
              }
              $8 = 1;
              continue;
             }
             break;
            };
            $14 = __shgetc($9);
           }
           $24 = 1;
           if (($14 | 0) != 48) {
            break label$35
           }
           while (1) {
            $1 = $18 - 1 | 0;
            $12 = $12 - 1 | 0;
            $18 = ($12 | 0) != -1 ? $1 + 1 | 0 : $1;
            $1 = SAFE_HEAP_LOAD_i32_4_4($9, 4);
            label$109 : {
             if ((SAFE_HEAP_LOAD_i32_4_4($9, 104) | 0) != ($1 | 0)) {
              SAFE_HEAP_STORE_i32_4_4($9, 4, $1 + 1 | 0);
              $14 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
              break label$109;
             }
             $14 = __shgetc($9);
            }
            if (($14 | 0) == 48) {
             continue
            }
            break;
           };
           $8 = 1;
          }
          $13 = 1073676288;
          $1 = 0;
          $2 = 0;
          while (1) {
           label$1211 : {
            $26 = $14 | 32;
            label$1412 : {
             label$15 : {
              $27 = $14 - 48 | 0;
              if ($27 >>> 0 < 10) {
               break label$15
              }
              if (($14 | 0) != 46 & $26 - 97 >>> 0 >= 6) {
               break label$1211
              }
              if (($14 | 0) != 46) {
               break label$15
              }
              if ($24) {
               break label$1211
              }
              $24 = 1;
              $12 = $1;
              $18 = $2;
              break label$1412;
             }
             $8 = ($14 | 0) > 57 ? $26 - 87 | 0 : $27;
             label$1713 : {
              if (!($1 >>> 0 > 7 & ($2 | 0) >= 0 | ($2 | 0) > 0)) {
               $21 = $8 + ($21 << 4) | 0;
               break label$1713;
              }
              if (!(!$2 & $1 >>> 0 > 28 | ($2 | 0) != 0)) {
               $14 = $7 + 48 | 0;
               __floatsitf($14, $8);
               $8 = $7 + 32 | 0;
               __multf3($8, $20, $23, $6, $13, 0, 0, 0, 1073414144);
               $26 = $7 + 16 | 0;
               $27 = SAFE_HEAP_LOAD_i64_8_8($7, 48);
               $29 = i64toi32_i32$HIGH_BITS;
               $14 = SAFE_HEAP_LOAD_i64_8_8($14 + 8 | 0, 0);
               $30 = i64toi32_i32$HIGH_BITS;
               $20 = SAFE_HEAP_LOAD_i64_8_8($7, 32);
               $23 = i64toi32_i32$HIGH_BITS;
               $6 = SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0);
               $13 = i64toi32_i32$HIGH_BITS;
               __multf3($26, $27, $29, $14, $30, $20, $23, $6, $13);
               __addtf3($7, SAFE_HEAP_LOAD_i64_8_8($7, 16), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($26 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, $4, $10, $17, $15);
               $17 = SAFE_HEAP_LOAD_i64_8_8($7 + 8 | 0, 0);
               $15 = i64toi32_i32$HIGH_BITS;
               $4 = SAFE_HEAP_LOAD_i64_8_8($7, 0);
               $10 = i64toi32_i32$HIGH_BITS;
               break label$1713;
              }
              if ($11 | !$8) {
               break label$1713
              }
              $8 = $7 + 80 | 0;
              __multf3($8, $20, $23, $6, $13, 0, 0, 0, 1073610752);
              $11 = $7 - -64 | 0;
              __addtf3($11, SAFE_HEAP_LOAD_i64_8_8($7, 80), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, $4, $10, $17, $15);
              $17 = SAFE_HEAP_LOAD_i64_8_8($11 + 8 | 0, 0);
              $15 = i64toi32_i32$HIGH_BITS;
              $11 = 1;
              $4 = SAFE_HEAP_LOAD_i64_8_8($7, 64);
              $10 = i64toi32_i32$HIGH_BITS;
             }
             $1 = $1 + 1 | 0;
             $2 = $1 ? $2 : $2 + 1 | 0;
             $8 = 1;
            }
            $14 = SAFE_HEAP_LOAD_i32_4_4($9, 4);
            if ((SAFE_HEAP_LOAD_i32_4_4($9, 104) | 0) != ($14 | 0)) {
             SAFE_HEAP_STORE_i32_4_4($9, 4, $14 + 1 | 0);
             $14 = SAFE_HEAP_LOAD_i32_1_U_1($14, 0);
            } else {
             $14 = __shgetc($9)
            }
            continue;
           }
           break;
          };
          label$2114 : {
           if (!$8) {
            SAFE_HEAP_LOAD_i64_8_8($9, 112);
            label$2315 : {
             label$24 : {
              if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
               $1 = SAFE_HEAP_LOAD_i32_4_4($9, 4);
               SAFE_HEAP_STORE_i32_4_4($9, 4, $1 - 1 | 0);
               if (!$3) {
                break label$24
               }
               SAFE_HEAP_STORE_i32_4_4($9, 4, $1 - 2 | 0);
               if (!$24) {
                break label$2315
               }
               SAFE_HEAP_STORE_i32_4_4($9, 4, $1 - 3 | 0);
               break label$2315;
              }
              if ($3) {
               break label$2315
              }
             }
             __shlim($9, 0, 0);
            }
            __extenddftf2($7 + 96 | 0, +($5 | 0) * 0.0);
            $1 = SAFE_HEAP_LOAD_i64_8_8($7 + 104 | 0, 0);
            $2 = i64toi32_i32$HIGH_BITS;
            $4 = SAFE_HEAP_LOAD_i64_8_8($7, 96);
            $3 = i64toi32_i32$HIGH_BITS;
            break label$2114;
           }
           if (!($1 >>> 0 > 7 & ($2 | 0) >= 0 | ($2 | 0) > 0)) {
            $6 = $1;
            $13 = $2;
            while (1) {
             $21 = $21 << 4;
             $6 = $6 + 1 | 0;
             $13 = $6 ? $13 : $13 + 1 | 0;
             if ($13 | ($6 | 0) != 8) {
              continue
             }
             break;
            };
           }
           label$2817 : {
            label$29 : {
             label$30 : {
              if (($14 & -33) == 80) {
               $6 = scanexp($9, $3);
               $13 = i64toi32_i32$HIGH_BITS;
               if ($6 | ($13 | 0) != -2147483648) {
                break label$2817
               }
               if ($3) {
                SAFE_HEAP_LOAD_i64_8_8($9, 112);
                if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
                 break label$30
                }
                break label$29;
               }
               $4 = 0;
               __shlim($9, 0, 0);
               $1 = 0;
               $2 = 0;
               $3 = 0;
               break label$2114;
              }
              $6 = 0;
              $13 = 0;
              SAFE_HEAP_LOAD_i64_8_8($9, 112);
              if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
               break label$2817
              }
             }
             SAFE_HEAP_STORE_i32_4_4($9, 4, SAFE_HEAP_LOAD_i32_4_4($9, 4) - 1 | 0);
            }
            $6 = 0;
            $13 = 0;
           }
           if (!$21) {
            __extenddftf2($7 + 112 | 0, +($5 | 0) * 0.0);
            $1 = SAFE_HEAP_LOAD_i64_8_8($7 + 120 | 0, 0);
            $2 = i64toi32_i32$HIGH_BITS;
            $4 = SAFE_HEAP_LOAD_i64_8_8($7, 112);
            $3 = i64toi32_i32$HIGH_BITS;
            break label$2114;
           }
           $3 = $24 ? $12 : $1;
           $1 = $6 + ($3 << 2) | 0;
           $2 = (($24 ? $18 : $2) << 2 | $3 >>> 30) + $13 | 0;
           $2 = ($1 >>> 0 < $6 >>> 0 ? $2 + 1 | 0 : $2) - 1 | 0;
           $1 = $1 - 32 | 0;
           $2 = $1 >>> 0 < 4294967264 ? $2 + 1 | 0 : $2;
           if (!(($2 | 0) <= 0 & 0 - $19 >>> 0 >= $1 >>> 0 | ($2 | 0) < 0)) {
            SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
            $1 = $7 + 160 | 0;
            __floatsitf($1, $5);
            $2 = $7 + 144 | 0;
            __multf3($2, SAFE_HEAP_LOAD_i64_8_8($7, 160), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, -1, -1, -1, 2147418111);
            $1 = $7 + 128 | 0;
            __multf3($1, SAFE_HEAP_LOAD_i64_8_8($7, 144), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, -1, -1, -1, 2147418111);
            $1 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
            $2 = i64toi32_i32$HIGH_BITS;
            $4 = SAFE_HEAP_LOAD_i64_8_8($7, 128);
            $3 = i64toi32_i32$HIGH_BITS;
            break label$2114;
           }
           $3 = $19 - 226 | 0;
           $14 = $3 >>> 0 > $1 >>> 0;
           $3 = $3 >> 31;
           if (!($14 & ($3 | 0) >= ($2 | 0) | ($2 | 0) < ($3 | 0))) {
            if (($21 | 0) >= 0) {
             while (1) {
              $6 = $7 + 416 | 0;
              __addtf3($6, $4, $10, $17, $15, 0, 0, 0, -1073807360);
              $3 = __getf2($4, $10, $17, $15, 1073610752);
              $3 = ($3 | 0) >= 0;
              __addtf3($7 + 400 | 0, $4, $10, $17, $15, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i64_8_8($7, 416), wasm2js_i32$1 = $4, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3 ? i64toi32_i32$HIGH_BITS : $10, (wasm2js_i32$0 = SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0), wasm2js_i32$1 = $17, wasm2js_i32$2 = $3, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1), $3 ? i64toi32_i32$HIGH_BITS : $15);
              $2 = $2 - 1 | 0;
              $1 = $1 - 1 | 0;
              $2 = ($1 | 0) != -1 ? $2 + 1 | 0 : $2;
              $17 = SAFE_HEAP_LOAD_i64_8_8($7 + 408 | 0, 0);
              $15 = i64toi32_i32$HIGH_BITS;
              $4 = SAFE_HEAP_LOAD_i64_8_8($7, 400);
              $10 = i64toi32_i32$HIGH_BITS;
              $21 = $3 | $21 << 1;
              if (($21 | 0) >= 0) {
               continue
              }
              break;
             }
            }
            $2 = $2 - (($19 >> 31) + ($1 >>> 0 < $19 >>> 0) | 0) | 0;
            $14 = $2 + 1 | 0;
            $3 = $2;
            $2 = ($1 - $19 | 0) + 32 | 0;
            $3 = $2 >>> 0 < 32 ? $14 : $3;
            $2 = $2 >>> 0 < $16 >>> 0 & ($3 | 0) <= 0 | ($3 | 0) < 0 ? (($2 | 0) > 0 ? $2 : 0) : $16;
            label$38 : {
             if (($2 | 0) >= 113) {
              __floatsitf($7 + 384 | 0, $5);
              $12 = SAFE_HEAP_LOAD_i64_8_8($7 + 392 | 0, 0);
              $18 = i64toi32_i32$HIGH_BITS;
              $6 = 0;
              $20 = SAFE_HEAP_LOAD_i64_8_8($7, 384);
              $23 = i64toi32_i32$HIGH_BITS;
              $13 = 0;
              $5 = 0;
              $3 = 0;
              break label$38;
             }
             $3 = $7 + 352 | 0;
             __extenddftf2($3, scalbn(1.0, 144 - $2 | 0));
             $6 = $7 + 336 | 0;
             __floatsitf($6, $5);
             $5 = $7 + 368 | 0;
             $14 = SAFE_HEAP_LOAD_i64_8_8($7, 352);
             $8 = i64toi32_i32$HIGH_BITS;
             $3 = SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0);
             $9 = i64toi32_i32$HIGH_BITS;
             $20 = SAFE_HEAP_LOAD_i64_8_8($7, 336);
             $23 = i64toi32_i32$HIGH_BITS;
             $12 = SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0);
             $18 = i64toi32_i32$HIGH_BITS;
             copysignl($5, $14, $8, $3, $9, $20, $23, $12, $18);
             $13 = SAFE_HEAP_LOAD_i64_8_8($5 + 8 | 0, 0);
             $5 = i64toi32_i32$HIGH_BITS;
             $6 = SAFE_HEAP_LOAD_i64_8_8($7, 368);
             $3 = i64toi32_i32$HIGH_BITS;
            }
            $8 = $7 + 320 | 0;
            $2 = !($21 & 1) & ((__letf2($4, $10, $17, $15, 0, 0, 0, 0) | 0) != 0 & ($2 | 0) < 32);
            __floatunsitf($8, $2 + $21 | 0);
            $11 = $7 + 304 | 0;
            __multf3($11, $20, $23, $12, $18, SAFE_HEAP_LOAD_i64_8_8($7, 320), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
            $8 = $7 + 272 | 0;
            __addtf3($8, SAFE_HEAP_LOAD_i64_8_8($7, 304), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($11 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, $6, $3, $13, $5);
            $11 = $7 + 288 | 0;
            __multf3($11, $20, $23, $12, $18, $2 ? 0 : $4, $2 ? 0 : $10, $2 ? 0 : $17, $2 ? 0 : $15);
            $2 = $7 + 256 | 0;
            __addtf3($2, SAFE_HEAP_LOAD_i64_8_8($7, 288), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($11 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($7, 272), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
            $8 = $7 + 240 | 0;
            __subtf3($8, SAFE_HEAP_LOAD_i64_8_8($7, 256), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, $6, $3, $13, $5);
            $2 = SAFE_HEAP_LOAD_i64_8_8($7, 240);
            $3 = i64toi32_i32$HIGH_BITS;
            $5 = SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0);
            $6 = i64toi32_i32$HIGH_BITS;
            if (!__letf2($2, $3, $5, $6, 0, 0, 0, 0)) {
             SAFE_HEAP_STORE_i32_4_4(95900, 0, 68)
            }
            $8 = $7 + 224 | 0;
            scalbnl($8, $2, $3, $5, $6, $1);
            $1 = SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0);
            $2 = i64toi32_i32$HIGH_BITS;
            $4 = SAFE_HEAP_LOAD_i64_8_8($7, 224);
            $3 = i64toi32_i32$HIGH_BITS;
            break label$2114;
           }
           SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
           $1 = $7 + 208 | 0;
           __floatsitf($1, $5);
           $2 = $7 + 192 | 0;
           __multf3($2, SAFE_HEAP_LOAD_i64_8_8($7, 208), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, 0, 0, 0, 65536);
           $1 = $7 + 176 | 0;
           __multf3($1, SAFE_HEAP_LOAD_i64_8_8($7, 192), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, 0, 0, 0, 65536);
           $1 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
           $2 = i64toi32_i32$HIGH_BITS;
           $4 = SAFE_HEAP_LOAD_i64_8_8($7, 176);
           $3 = i64toi32_i32$HIGH_BITS;
          }
          SAFE_HEAP_STORE_i64_8_8($25, 0, $4, $3);
          SAFE_HEAP_STORE_i64_8_8($25, 8, $1, $2);
          __stack_pointer = $7 + 432 | 0;
          $5 = SAFE_HEAP_LOAD_i64_8_8($22 + 24 | 0, 0);
          $2 = i64toi32_i32$HIGH_BITS;
          $12 = SAFE_HEAP_LOAD_i64_8_8($22, 16);
          $18 = i64toi32_i32$HIGH_BITS;
          break label$1;
         }
         SAFE_HEAP_LOAD_i64_8_8($1, 112);
         if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
          break label$27
         }
         SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
        }
        $23 = $22 + 32 | 0;
        $12 = $1;
        $18 = $5;
        $7 = $3;
        $5 = 0;
        $1 = 0;
        $6 = 0;
        $4 = __stack_pointer - 8976 | 0;
        __stack_pointer = $4;
        $10 = 0 - $19 | 0;
        $24 = $10 - $16 | 0;
        label$16 : {
         label$2 : {
          while (1) {
           label$39 : {
            if (($2 | 0) != 48) {
             if (($2 | 0) != 46) {
              break label$16
             }
             $2 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
             if ((SAFE_HEAP_LOAD_i32_4_4($12, 104) | 0) == ($2 | 0)) {
              break label$39
             }
             SAFE_HEAP_STORE_i32_4_4($12, 4, $2 + 1 | 0);
             $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
             break label$2;
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
            if ((SAFE_HEAP_LOAD_i32_4_4($12, 104) | 0) != ($2 | 0)) {
             SAFE_HEAP_STORE_i32_4_4($12, 4, $2 + 1 | 0);
             $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
            } else {
             $2 = __shgetc($12)
            }
            $1 = 1;
            continue;
           }
           break;
          };
          $2 = __shgetc($12);
         }
         $11 = 1;
         if (($2 | 0) != 48) {
          break label$16
         }
         while (1) {
          $1 = $8 - 1 | 0;
          $5 = $5 - 1 | 0;
          $8 = ($5 | 0) != -1 ? $1 + 1 | 0 : $1;
          $1 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
          label$8 : {
           if ((SAFE_HEAP_LOAD_i32_4_4($12, 104) | 0) != ($1 | 0)) {
            SAFE_HEAP_STORE_i32_4_4($12, 4, $1 + 1 | 0);
            $2 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
            break label$8;
           }
           $2 = __shgetc($12);
          }
          if (($2 | 0) == 48) {
           continue
          }
          break;
         };
         $1 = 1;
        }
        SAFE_HEAP_STORE_i32_4_4($4, 784, 0);
        label$1011 : {
         label$1112 : {
          $3 = ($2 | 0) == 46;
          $15 = $2 - 48 | 0;
          label$1213 : {
           label$1314 : {
            label$1415 : {
             if ($3 | $15 >>> 0 <= 9) {
              while (1) {
               label$18 : {
                if ($3 & 1) {
                 if (!$11) {
                  $5 = $9;
                  $8 = $13;
                  $11 = 1;
                  break label$18;
                 }
                 $3 = !$1;
                 break label$1415;
                }
                $9 = $9 + 1 | 0;
                $13 = $9 ? $13 : $13 + 1 | 0;
                if (($6 | 0) <= 2044) {
                 $20 = ($2 | 0) == 48 ? $20 : $9;
                 $1 = ($4 + 784 | 0) + ($6 << 2) | 0;
                 if ($17) {
                  $15 = (Math_imul(SAFE_HEAP_LOAD_i32_4_4($1, 0), 10) + $2 | 0) - 48 | 0
                 }
                 SAFE_HEAP_STORE_i32_4_4($1, 0, $15);
                 $1 = 1;
                 $3 = $17 + 1 | 0;
                 $2 = ($3 | 0) == 9;
                 $17 = $2 ? 0 : $3;
                 $6 = $2 + $6 | 0;
                 break label$18;
                }
                if (($2 | 0) == 48) {
                 break label$18
                }
                SAFE_HEAP_STORE_i32_4_4($4, 8960, SAFE_HEAP_LOAD_i32_4_4($4, 8960) | 1);
                $20 = 18396;
               }
               $2 = SAFE_HEAP_LOAD_i32_4_4($12, 4);
               label$2319 : {
                if ((SAFE_HEAP_LOAD_i32_4_4($12, 104) | 0) != ($2 | 0)) {
                 SAFE_HEAP_STORE_i32_4_4($12, 4, $2 + 1 | 0);
                 $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
                 break label$2319;
                }
                $2 = __shgetc($12);
               }
               $3 = ($2 | 0) == 46;
               $15 = $2 - 48 | 0;
               if ($3 | $15 >>> 0 < 10) {
                continue
               }
               break;
              }
             }
             $5 = $11 ? $5 : $9;
             $8 = $11 ? $8 : $13;
             if (!(!$1 | ($2 & -33) != 69)) {
              $3 = scanexp($12, $7);
              $1 = i64toi32_i32$HIGH_BITS;
              $11 = $1;
              label$2620 : {
               if ($3 | ($1 | 0) != -2147483648) {
                break label$2620
               }
               if (!$7) {
                break label$1213
               }
               $3 = 0;
               $11 = 0;
               SAFE_HEAP_LOAD_i64_8_8($12, 112);
               if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
                break label$2620
               }
               SAFE_HEAP_STORE_i32_4_4($12, 4, SAFE_HEAP_LOAD_i32_4_4($12, 4) - 1 | 0);
              }
              $1 = $8 + $11 | 0;
              $2 = $5;
              $5 = $3 + $5 | 0;
              $8 = $2 >>> 0 > $5 >>> 0 ? $1 + 1 | 0 : $1;
              break label$1112;
             }
             $3 = !$1;
             if (($2 | 0) < 0) {
              break label$1314
             }
            }
            SAFE_HEAP_LOAD_i64_8_8($12, 112);
            if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
             break label$1314
            }
            SAFE_HEAP_STORE_i32_4_4($12, 4, SAFE_HEAP_LOAD_i32_4_4($12, 4) - 1 | 0);
           }
           if (!$3) {
            break label$1112
           }
           SAFE_HEAP_STORE_i32_4_4(95900, 0, 28);
          }
          $9 = 0;
          __shlim($12, 0, 0);
          $5 = 0;
          $8 = 0;
          $1 = 0;
          break label$1011;
         }
         $1 = SAFE_HEAP_LOAD_i32_4_4($4, 784);
         if (!$1) {
          __extenddftf2($4, +($18 | 0) * 0.0);
          $5 = SAFE_HEAP_LOAD_i64_8_8($4 + 8 | 0, 0);
          $8 = i64toi32_i32$HIGH_BITS;
          $9 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
          $1 = i64toi32_i32$HIGH_BITS;
          break label$1011;
         }
         if (!($9 >>> 0 > 9 & ($13 | 0) >= 0 | ($13 | 0) > 0 | (($5 | 0) != ($9 | 0) | ($8 | 0) != ($13 | 0)) | ($1 >>> $16 | 0 ? ($16 | 0) <= 30 : 0))) {
          $2 = $4 + 48 | 0;
          __floatsitf($2, $18);
          $3 = $4 + 32 | 0;
          __floatunsitf($3, $1);
          $1 = $4 + 16 | 0;
          __multf3($1, SAFE_HEAP_LOAD_i64_8_8($4, 48), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($4, 32), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
          $5 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
          $8 = i64toi32_i32$HIGH_BITS;
          $9 = SAFE_HEAP_LOAD_i64_8_8($4, 16);
          $1 = i64toi32_i32$HIGH_BITS;
          break label$1011;
         }
         if (!(($8 | 0) <= 0 & $10 >>> 1 >>> 0 >= $5 >>> 0 | ($8 | 0) < 0)) {
          SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
          $1 = $4 + 96 | 0;
          __floatsitf($1, $18);
          $2 = $4 + 80 | 0;
          __multf3($2, SAFE_HEAP_LOAD_i64_8_8($4, 96), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, -1, -1, -1, 2147418111);
          $1 = $4 - -64 | 0;
          __multf3($1, SAFE_HEAP_LOAD_i64_8_8($4, 80), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, -1, -1, -1, 2147418111);
          $5 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
          $8 = i64toi32_i32$HIGH_BITS;
          $9 = SAFE_HEAP_LOAD_i64_8_8($4, 64);
          $1 = i64toi32_i32$HIGH_BITS;
          break label$1011;
         }
         $1 = $19 - 226 | 0;
         $2 = $1 >> 31;
         if (!(($2 | 0) <= ($8 | 0) & $1 >>> 0 <= $5 >>> 0 | ($2 | 0) < ($8 | 0))) {
          SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
          $1 = $4 + 144 | 0;
          __floatsitf($1, $18);
          $2 = $4 + 128 | 0;
          __multf3($2, SAFE_HEAP_LOAD_i64_8_8($4, 144), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, 0, 0, 0, 65536);
          $1 = $4 + 112 | 0;
          __multf3($1, SAFE_HEAP_LOAD_i64_8_8($4, 128), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, 0, 0, 0, 65536);
          $5 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
          $8 = i64toi32_i32$HIGH_BITS;
          $9 = SAFE_HEAP_LOAD_i64_8_8($4, 112);
          $1 = i64toi32_i32$HIGH_BITS;
          break label$1011;
         }
         if ($17) {
          if (($17 | 0) <= 8) {
           $1 = ($4 + 784 | 0) + ($6 << 2) | 0;
           $10 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
           while (1) {
            $10 = Math_imul($10, 10);
            $17 = $17 + 1 | 0;
            if (($17 | 0) != 9) {
             continue
            }
            break;
           };
           SAFE_HEAP_STORE_i32_4_4($1, 0, $10);
          }
          $6 = $6 + 1 | 0;
         }
         label$3521 : {
          $11 = $5;
          if (($20 | 0) > ($5 | 0) | ($20 | 0) >= 9 | ($5 | 0) > 17) {
           break label$3521
          }
          if (($11 | 0) == 9) {
           $1 = $4 + 192 | 0;
           __floatsitf($1, $18);
           $2 = $4 + 176 | 0;
           __floatunsitf($2, SAFE_HEAP_LOAD_i32_4_4($4, 784));
           $3 = $4 + 160 | 0;
           __multf3($3, SAFE_HEAP_LOAD_i64_8_8($4, 192), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($4, 176), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
           $5 = SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0);
           $8 = i64toi32_i32$HIGH_BITS;
           $9 = SAFE_HEAP_LOAD_i64_8_8($4, 160);
           $1 = i64toi32_i32$HIGH_BITS;
           break label$1011;
          }
          if (($11 | 0) <= 8) {
           $1 = $4 + 272 | 0;
           __floatsitf($1, $18);
           $2 = $4 + 256 | 0;
           __floatunsitf($2, SAFE_HEAP_LOAD_i32_4_4($4, 784));
           $3 = $4 + 240 | 0;
           __multf3($3, SAFE_HEAP_LOAD_i64_8_8($4, 272), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($4, 256), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
           $1 = $4 + 224 | 0;
           __floatsitf($1, SAFE_HEAP_LOAD_i32_4_4((0 - $11 << 2) + 71232 | 0, 0));
           $2 = $4 + 208 | 0;
           __divtf3($2, SAFE_HEAP_LOAD_i64_8_8($4, 240), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($4, 224), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
           $5 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
           $8 = i64toi32_i32$HIGH_BITS;
           $9 = SAFE_HEAP_LOAD_i64_8_8($4, 208);
           $1 = i64toi32_i32$HIGH_BITS;
           break label$1011;
          }
          $1 = (Math_imul($11, -3) + $16 | 0) + 27 | 0;
          $2 = SAFE_HEAP_LOAD_i32_4_4($4, 784);
          if ($2 >>> $1 | 0 ? ($1 | 0) <= 30 : 0) {
           break label$3521
          }
          $1 = $4 + 352 | 0;
          __floatsitf($1, $18);
          $3 = $4 + 336 | 0;
          __floatunsitf($3, $2);
          $2 = $4 + 320 | 0;
          __multf3($2, SAFE_HEAP_LOAD_i64_8_8($4, 352), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($4, 336), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
          $1 = $4 + 304 | 0;
          __floatsitf($1, SAFE_HEAP_LOAD_i32_4_4(($11 << 2) + 71160 | 0, 0));
          $3 = $4 + 288 | 0;
          __multf3($3, SAFE_HEAP_LOAD_i64_8_8($4, 320), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($4, 304), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
          $5 = SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0);
          $8 = i64toi32_i32$HIGH_BITS;
          $9 = SAFE_HEAP_LOAD_i64_8_8($4, 288);
          $1 = i64toi32_i32$HIGH_BITS;
          break label$1011;
         }
         while (1) {
          $2 = $6;
          $6 = $2 - 1 | 0;
          if (!SAFE_HEAP_LOAD_i32_4_4(($4 + 784 | 0) + ($6 << 2) | 0, 0)) {
           continue
          }
          break;
         };
         $17 = 0;
         $1 = ($11 | 0) % 9 | 0;
         label$40 : {
          if (!$1) {
           $3 = 0;
           break label$40;
          }
          $3 = 0;
          $1 = ($11 | 0) < 0 ? $1 + 9 | 0 : $1;
          label$42 : {
           if (!$2) {
            $2 = 0;
            break label$42;
           }
           $5 = SAFE_HEAP_LOAD_i32_4_4((0 - $1 << 2) + 71232 | 0, 0);
           $8 = 1e9 / ($5 | 0) | 0;
           $15 = 0;
           $10 = 0;
           while (1) {
            $9 = ($4 + 784 | 0) + ($10 << 2) | 0;
            $13 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
            $12 = ($13 >>> 0) / ($5 >>> 0) | 0;
            $6 = $15 + $12 | 0;
            SAFE_HEAP_STORE_i32_4_4($9, 0, $6);
            $6 = !$6 & ($3 | 0) == ($10 | 0);
            $3 = $6 ? $3 + 1 & 2047 : $3;
            $11 = $6 ? $11 - 9 | 0 : $11;
            $15 = Math_imul($8, $13 - Math_imul($5, $12) | 0);
            $10 = $10 + 1 | 0;
            if (($2 | 0) != ($10 | 0)) {
             continue
            }
            break;
           };
           if (!$15) {
            break label$42
           }
           SAFE_HEAP_STORE_i32_4_4(($4 + 784 | 0) + ($2 << 2) | 0, 0, $15);
           $2 = $2 + 1 | 0;
          }
          $11 = ($11 - $1 | 0) + 9 | 0;
         }
         while (1) {
          $9 = ($4 + 784 | 0) + ($3 << 2) | 0;
          label$4623 : {
           while (1) {
            if (($11 | 0) >= 36) {
             if (($11 | 0) != 36) {
              break label$4623
             }
             if (SAFE_HEAP_LOAD_i32_4_4($9, 0) >>> 0 >= 10384593) {
              break label$4623
             }
            }
            $6 = $2 + 2047 | 0;
            $15 = 0;
            $1 = $2;
            while (1) {
             $2 = $1;
             $8 = $6 & 2047;
             $6 = ($4 + 784 | 0) + ($8 << 2) | 0;
             $1 = SAFE_HEAP_LOAD_i64_4_U_4($6, 0);
             $5 = $15 + ($1 << 29) | 0;
             $1 = i64toi32_i32$HIGH_BITS << 29 | $1 >>> 3;
             $1 = $5 >>> 0 < $15 >>> 0 ? $1 + 1 | 0 : $1;
             label$50 : {
              if (!(!$1 & $5 >>> 0 >= 1000000001 | ($1 | 0) != 0)) {
               $15 = 0;
               break label$50;
              }
              $15 = __wasm_i64_udiv($5, $1, 1e9);
              $5 = $5 - __wasm_i64_mul($15, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0;
             }
             SAFE_HEAP_STORE_i32_4_4($6, 0, $5);
             $1 = ($8 | 0) != ($2 - 1 & 2047) ? $2 : ($3 | 0) == ($8 | 0) ? $2 : $5 ? $2 : $8;
             $6 = $8 - 1 | 0;
             if (($3 | 0) != ($8 | 0)) {
              continue
             }
             break;
            };
            $17 = $17 - 29 | 0;
            if (!$15) {
             continue
            }
            break;
           };
           $3 = $3 - 1 & 2047;
           if (($1 | 0) == ($3 | 0)) {
            $2 = $4 + 784 | 0;
            $5 = $2 + (($1 + 2046 & 2047) << 2) | 0;
            $6 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
            $14 = $2;
            $2 = $1 - 1 & 2047;
            SAFE_HEAP_STORE_i32_4_4($5, 0, SAFE_HEAP_LOAD_i32_4_4($14 + ($2 << 2) | 0, 0) | $6);
           }
           $11 = $11 + 9 | 0;
           SAFE_HEAP_STORE_i32_4_4(($4 + 784 | 0) + ($3 << 2) | 0, 0, $15);
           continue;
          }
          break;
         };
         label$53 : {
          label$54 : while (1) {
           $5 = $2 + 1 & 2047;
           $8 = ($4 + 784 | 0) + (($2 - 1 & 2047) << 2) | 0;
           while (1) {
            $6 = ($11 | 0) > 45 ? 9 : 1;
            label$56 : {
             while (1) {
              $1 = $3;
              $10 = 0;
              label$58 : {
               while (1) {
                label$59 : {
                 $3 = $1 + $10 & 2047;
                 if (($3 | 0) == ($2 | 0)) {
                  break label$59
                 }
                 $3 = SAFE_HEAP_LOAD_i32_4_4(($4 + 784 | 0) + ($3 << 2) | 0, 0);
                 $9 = SAFE_HEAP_LOAD_i32_4_4(($10 << 2) + 71184 | 0, 0);
                 if ($3 >>> 0 < $9 >>> 0) {
                  break label$59
                 }
                 if ($3 >>> 0 > $9 >>> 0) {
                  break label$58
                 }
                 $10 = $10 + 1 | 0;
                 if (($10 | 0) != 4) {
                  continue
                 }
                }
                break;
               };
               if (($11 | 0) != 36) {
                break label$58
               }
               $5 = 0;
               $8 = 0;
               $10 = 0;
               $9 = 0;
               $13 = 0;
               while (1) {
                $3 = $1 + $10 & 2047;
                if (($2 | 0) == ($3 | 0)) {
                 $2 = $2 + 1 & 2047;
                 SAFE_HEAP_STORE_i32_4_4(($4 + ($2 << 2) | 0) + 780 | 0, 0, 0);
                }
                $6 = $4 + 768 | 0;
                __floatunsitf($6, SAFE_HEAP_LOAD_i32_4_4(($4 + 784 | 0) + ($3 << 2) | 0, 0));
                $3 = $4 + 752 | 0;
                __multf3($3, $5, $8, $9, $13, 0, 0, 1342177280, 1075633366);
                $5 = $4 + 736 | 0;
                __addtf3($5, SAFE_HEAP_LOAD_i64_8_8($4, 752), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($4, 768), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
                $9 = SAFE_HEAP_LOAD_i64_8_8($5 + 8 | 0, 0);
                $13 = i64toi32_i32$HIGH_BITS;
                $5 = SAFE_HEAP_LOAD_i64_8_8($4, 736);
                $8 = i64toi32_i32$HIGH_BITS;
                $10 = $10 + 1 | 0;
                if (($10 | 0) != 4) {
                 continue
                }
                break;
               };
               $3 = $4 + 720 | 0;
               __floatsitf($3, $18);
               $6 = $4 + 704 | 0;
               __multf3($6, $5, $8, $9, $13, SAFE_HEAP_LOAD_i64_8_8($4, 720), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
               $9 = SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0);
               $13 = i64toi32_i32$HIGH_BITS;
               $5 = 0;
               $8 = 0;
               $3 = SAFE_HEAP_LOAD_i64_8_8($4, 704);
               $11 = i64toi32_i32$HIGH_BITS;
               $25 = $17 + 113 | 0;
               $15 = $25 - $19 | 0;
               $14 = ($15 | 0) < ($16 | 0);
               $7 = $14 ? (($15 | 0) > 0 ? $15 : 0) : $16;
               if (($7 | 0) <= 112) {
                break label$56
               }
               $10 = 0;
               $16 = 0;
               $20 = 0;
               $6 = 0;
               $12 = 0;
               break label$53;
              }
              $17 = $6 + $17 | 0;
              $3 = $2;
              if (($1 | 0) == ($2 | 0)) {
               continue
              }
              break;
             };
             $13 = 1e9 >>> $6 | 0;
             $12 = -1 << $6 ^ -1;
             $10 = 0;
             $3 = $1;
             while (1) {
              $14 = $10;
              $7 = ($4 + 784 | 0) + ($1 << 2) | 0;
              $10 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
              $9 = $14 + ($10 >>> $6 | 0) | 0;
              SAFE_HEAP_STORE_i32_4_4($7, 0, $9);
              $9 = !$9 & ($1 | 0) == ($3 | 0);
              $3 = $9 ? $3 + 1 & 2047 : $3;
              $11 = $9 ? $11 - 9 | 0 : $11;
              $10 = Math_imul($13, $10 & $12);
              $1 = $1 + 1 & 2047;
              if (($1 | 0) != ($2 | 0)) {
               continue
              }
              break;
             };
             if (!$10) {
              continue
             }
             if (($3 | 0) != ($5 | 0)) {
              SAFE_HEAP_STORE_i32_4_4(($4 + 784 | 0) + ($2 << 2) | 0, 0, $10);
              $2 = $5;
              continue label$54;
             }
             SAFE_HEAP_STORE_i32_4_4($8, 0, SAFE_HEAP_LOAD_i32_4_4($8, 0) | 1);
             continue;
            }
            break;
           };
           break;
          };
          $5 = $4 + 656 | 0;
          __extenddftf2($5, scalbn(1.0, 225 - $7 | 0));
          $6 = $4 + 688 | 0;
          copysignl($6, SAFE_HEAP_LOAD_i64_8_8($4, 656), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($5 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, $3, $11, $9, $13);
          $12 = SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0);
          $21 = i64toi32_i32$HIGH_BITS;
          $20 = SAFE_HEAP_LOAD_i64_8_8($4, 688);
          $6 = i64toi32_i32$HIGH_BITS;
          $5 = $4 + 640 | 0;
          __extenddftf2($5, scalbn(1.0, 113 - $7 | 0));
          $16 = $4 + 672 | 0;
          fmodl($16, $3, $11, $9, $13, SAFE_HEAP_LOAD_i64_8_8($4, 640), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($5 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
          $19 = $4 + 624 | 0;
          $5 = SAFE_HEAP_LOAD_i64_8_8($4, 672);
          $8 = i64toi32_i32$HIGH_BITS;
          $10 = SAFE_HEAP_LOAD_i64_8_8($16 + 8 | 0, 0);
          $16 = i64toi32_i32$HIGH_BITS;
          __subtf3($19, $3, $11, $9, $13, $5, $8, $10, $16);
          $3 = $4 + 608 | 0;
          __addtf3($3, $20, $6, $12, $21, SAFE_HEAP_LOAD_i64_8_8($4, 624), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($19 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
          $9 = SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0);
          $13 = i64toi32_i32$HIGH_BITS;
          $3 = SAFE_HEAP_LOAD_i64_8_8($4, 608);
          $11 = i64toi32_i32$HIGH_BITS;
         }
         $19 = $1 + 4 & 2047;
         label$65 : {
          if (($19 | 0) == ($2 | 0)) {
           break label$65
          }
          $19 = SAFE_HEAP_LOAD_i32_4_4(($4 + 784 | 0) + ($19 << 2) | 0, 0);
          label$66 : {
           if ($19 >>> 0 <= 499999999) {
            if (!$19 & ($1 + 5 & 2047) == ($2 | 0)) {
             break label$66
            }
            $1 = $4 + 496 | 0;
            __extenddftf2($1, +($18 | 0) * .25);
            $2 = $4 + 480 | 0;
            __addtf3($2, $5, $8, $10, $16, SAFE_HEAP_LOAD_i64_8_8($4, 496), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
            $10 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
            $16 = i64toi32_i32$HIGH_BITS;
            $5 = SAFE_HEAP_LOAD_i64_8_8($4, 480);
            $8 = i64toi32_i32$HIGH_BITS;
            break label$66;
           }
           if (($19 | 0) != 5e8) {
            $1 = $4 + 592 | 0;
            __extenddftf2($1, +($18 | 0) * .75);
            $2 = $4 + 576 | 0;
            __addtf3($2, $5, $8, $10, $16, SAFE_HEAP_LOAD_i64_8_8($4, 592), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
            $10 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
            $16 = i64toi32_i32$HIGH_BITS;
            $5 = SAFE_HEAP_LOAD_i64_8_8($4, 576);
            $8 = i64toi32_i32$HIGH_BITS;
            break label$66;
           }
           $28 = +($18 | 0);
           if (($2 | 0) == ($1 + 5 & 2047)) {
            $1 = $4 + 528 | 0;
            __extenddftf2($1, $28 * .5);
            $2 = $4 + 512 | 0;
            __addtf3($2, $5, $8, $10, $16, SAFE_HEAP_LOAD_i64_8_8($4, 528), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
            $10 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
            $16 = i64toi32_i32$HIGH_BITS;
            $5 = SAFE_HEAP_LOAD_i64_8_8($4, 512);
            $8 = i64toi32_i32$HIGH_BITS;
            break label$66;
           }
           $1 = $4 + 560 | 0;
           __extenddftf2($1, $28 * .75);
           $2 = $4 + 544 | 0;
           __addtf3($2, $5, $8, $10, $16, SAFE_HEAP_LOAD_i64_8_8($4, 560), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
           $10 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
           $16 = i64toi32_i32$HIGH_BITS;
           $5 = SAFE_HEAP_LOAD_i64_8_8($4, 544);
           $8 = i64toi32_i32$HIGH_BITS;
          }
          if (($7 | 0) > 111) {
           break label$65
          }
          $1 = $4 + 464 | 0;
          fmodl($1, $5, $8, $10, $16, 0, 0, 0, 1073676288);
          if (__letf2(SAFE_HEAP_LOAD_i64_8_8($4, 464), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, 0, 0, 0, 0)) {
           break label$65
          }
          $1 = $4 + 448 | 0;
          __addtf3($1, $5, $8, $10, $16, 0, 0, 0, 1073676288);
          $10 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
          $16 = i64toi32_i32$HIGH_BITS;
          $5 = SAFE_HEAP_LOAD_i64_8_8($4, 448);
          $8 = i64toi32_i32$HIGH_BITS;
         }
         $1 = $4 + 432 | 0;
         __addtf3($1, $3, $11, $9, $13, $5, $8, $10, $16);
         $2 = $4 + 416 | 0;
         __subtf3($2, SAFE_HEAP_LOAD_i64_8_8($4, 432), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, $20, $6, $12, $21);
         $9 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
         $13 = i64toi32_i32$HIGH_BITS;
         $3 = SAFE_HEAP_LOAD_i64_8_8($4, 416);
         $11 = i64toi32_i32$HIGH_BITS;
         label$71 : {
          if (($24 - 2 | 0) >= ($25 & 2147483647)) {
           break label$71
          }
          $1 = $4 + 400 | 0;
          SAFE_HEAP_STORE_i64_8_8($1, 8, $9, $13 & 2147483647);
          SAFE_HEAP_STORE_i64_8_8($1, 0, $3, $11);
          $2 = $4 + 384 | 0;
          __multf3($2, $3, $11, $9, $13, 0, 0, 0, 1073610752);
          $1 = __getf2(SAFE_HEAP_LOAD_i64_8_8($4, 400), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS, 1081081856);
          $1 = ($1 | 0) >= 0;
          $9 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), wasm2js_i32$1 = $9, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
          $13 = $1 ? i64toi32_i32$HIGH_BITS : $13;
          $3 = (wasm2js_i32$0 = SAFE_HEAP_LOAD_i64_8_8($4, 384), wasm2js_i32$1 = $3, wasm2js_i32$2 = $1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
          $11 = $1 ? i64toi32_i32$HIGH_BITS : $11;
          $17 = $1 + $17 | 0;
          if (!((__letf2($5, $8, $10, $16, 0, 0, 0, 0) | 0) != 0 & ($1 ? $14 & ($7 | 0) != ($15 | 0) : $14)) & ($24 | 0) >= ($17 + 110 | 0)) {
           break label$71
          }
          SAFE_HEAP_STORE_i32_4_4(95900, 0, 68);
         }
         $1 = $4 + 368 | 0;
         scalbnl($1, $3, $11, $9, $13, $17);
         $5 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
         $8 = i64toi32_i32$HIGH_BITS;
         $9 = SAFE_HEAP_LOAD_i64_8_8($4, 368);
         $1 = i64toi32_i32$HIGH_BITS;
        }
        SAFE_HEAP_STORE_i64_8_8($23, 8, $5, $8);
        SAFE_HEAP_STORE_i64_8_8($23, 0, $9, $1);
        __stack_pointer = $4 + 8976 | 0;
        $5 = SAFE_HEAP_LOAD_i64_8_8($22 + 40 | 0, 0);
        $2 = i64toi32_i32$HIGH_BITS;
        $12 = SAFE_HEAP_LOAD_i64_8_8($22, 32);
        $18 = i64toi32_i32$HIGH_BITS;
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      SAFE_HEAP_LOAD_i64_8_8($1, 112);
      if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
       SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0)
      }
      break label$19;
     }
     label$3425 : {
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      label$32 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($2 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($7, 0, $2 + 1 | 0);
        $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        break label$32;
       }
       $2 = __shgetc($1);
      }
      if (($2 | 0) == 40) {
       $6 = 1;
       break label$3425;
      }
      $5 = 0;
      $2 = 2147450880;
      SAFE_HEAP_LOAD_i64_8_8($1, 112);
      if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
       break label$1
      }
      SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0);
      break label$1;
     }
     while (1) {
      $2 = SAFE_HEAP_LOAD_i32_4_4($1, 4);
      label$3718 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 104) | 0) != ($2 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($7, 0, $2 + 1 | 0);
        $8 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        break label$3718;
       }
       $8 = __shgetc($1);
      }
      if (!(!($8 - 48 >>> 0 < 10 | $8 - 65 >>> 0 < 26 | ($8 | 0) == 95) & $8 - 97 >>> 0 >= 26)) {
       $6 = $6 + 1 | 0;
       continue;
      }
      break;
     };
     $5 = 0;
     $2 = 2147450880;
     if (($8 | 0) == 41) {
      break label$1
     }
     SAFE_HEAP_LOAD_i64_8_8($1, 112);
     $8 = i64toi32_i32$HIGH_BITS;
     if (($8 | 0) >= 0) {
      SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0)
     }
     label$4227 : {
      if ($3) {
       if ($6) {
        break label$4227
       }
       break label$1;
      }
      break label$19;
     }
     while (1) {
      $6 = $6 - 1 | 0;
      if (($8 | 0) >= 0) {
       SAFE_HEAP_STORE_i32_4_4($7, 0, SAFE_HEAP_LOAD_i32_4_4($7, 0) - 1 | 0)
      }
      if ($6) {
       continue
      }
      break;
     };
     break label$1;
    }
    SAFE_HEAP_STORE_i32_4_4(95900, 0, 28);
    __shlim($1, 0, 0);
   }
   $5 = 0;
   $2 = 0;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $12, $18);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $5, $2);
  __stack_pointer = $22 + 48 | 0;
 }
 
 function scanexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
       label$1 : {
        if ((SAFE_HEAP_LOAD_i32_4_4($0, 104) | 0) != ($2 | 0)) {
         SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
         $2 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
         break label$1;
        }
        $2 = __shgetc($0);
       }
       switch ($2 - 43 | 0) {
       case 0:
       case 2:
        break label$7;
       default:
        break label$6;
       };
      }
      $2 = ($2 | 0) == 45;
      $5 = !$1;
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      label$8 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 104) | 0) != ($3 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + 1 | 0);
        $3 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
        break label$8;
       }
       $3 = __shgetc($0);
      }
      $4 = $3 - 58 | 0;
      $1 = $2;
      if ($5 | $4 >>> 0 > 4294967285) {
       break label$5
      }
      SAFE_HEAP_LOAD_i64_8_8($0, 112);
      if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
       break label$4
      }
      SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
      break label$4;
     }
     $4 = $2 - 58 | 0;
     $3 = $2;
     $1 = 0;
    }
    $5 = $1;
    if ($4 >>> 0 < 4294967286) {
     break label$4
    }
    $1 = 0;
    $2 = 0;
    $4 = $3 - 48 | 0;
    if ($4 >>> 0 < 10) {
     while (1) {
      $2 = (Math_imul($2, 10) + $3 | 0) - 48 | 0;
      $6 = ($2 | 0) < 214748364;
      $1 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      label$12 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 104) | 0) != ($1 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($0, 4, $1 + 1 | 0);
        $3 = SAFE_HEAP_LOAD_i32_1_U_1($1, 0);
        break label$12;
       }
       $3 = __shgetc($0);
      }
      $4 = $3 - 48 | 0;
      if ($6 & $4 >>> 0 <= 9) {
       continue
      }
      break;
     };
     $1 = $2;
     $2 = $2 >> 31;
    }
    label$15 : {
     if ($4 >>> 0 >= 10) {
      break label$15
     }
     while (1) {
      $4 = $3;
      $3 = __wasm_i64_mul($1, $2, 10, 0);
      $2 = $4 + $3 | 0;
      $1 = i64toi32_i32$HIGH_BITS;
      $1 = $2 >>> 0 < $3 >>> 0 ? $1 + 1 | 0 : $1;
      $4 = $2;
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      label$17 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 104) | 0) != ($2 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + 1 | 0);
        $3 = SAFE_HEAP_LOAD_i32_1_U_1($2, 0);
        break label$17;
       }
       $3 = __shgetc($0);
      }
      $2 = $1 - 1 | 0;
      $1 = $4 - 48 | 0;
      $2 = $1 >>> 0 < 4294967248 ? $2 + 1 | 0 : $2;
      $4 = $3 - 48 | 0;
      if ($4 >>> 0 > 9) {
       break label$15
      }
      if ($1 >>> 0 < 2061584302 & ($2 | 0) <= 21474836 | ($2 | 0) < 21474836) {
       continue
      }
      break;
     };
    }
    if ($4 >>> 0 < 10) {
     while (1) {
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
      label$21 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($0, 104) | 0) != ($3 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + 1 | 0);
        $3 = SAFE_HEAP_LOAD_i32_1_U_1($3, 0);
        break label$21;
       }
       $3 = __shgetc($0);
      }
      if ($3 - 48 >>> 0 < 10) {
       continue
      }
      break;
     }
    }
    SAFE_HEAP_LOAD_i64_8_8($0, 112);
    if ((i64toi32_i32$HIGH_BITS | 0) >= 0) {
     SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0)
    }
    $0 = $1;
    $1 = $5 ? 0 - $0 | 0 : $0;
    $2 = $5 ? 0 - ($2 + (($0 | 0) != 0) | 0) | 0 : $2;
    break label$3;
   }
   $1 = 0;
   $2 = -2147483648;
   SAFE_HEAP_LOAD_i64_8_8($0, 112);
   if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
    break label$3
   }
   SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) - 1 | 0);
   i64toi32_i32$HIGH_BITS = -2147483648;
   return 0;
  }
  i64toi32_i32$HIGH_BITS = $2;
  return $1;
 }
 
 function strtod($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $1 = __stack_pointer - 160 | 0;
  __stack_pointer = $1;
  SAFE_HEAP_STORE_i32_4_4($1, 60, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 20, $0);
  SAFE_HEAP_STORE_i32_4_4($1, 24, -1);
  $0 = $1 + 16 | 0;
  __shlim($0, 0, 0);
  __floatscan($1, $0, 1, 1);
  $0 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
  $3 = i64toi32_i32$HIGH_BITS;
  $4 = SAFE_HEAP_LOAD_i64_8_8($1, 0);
  $5 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($2, 8, $0, $3);
  SAFE_HEAP_STORE_i64_8_8($2, 0, $4, $5);
  __stack_pointer = $1 + 160 | 0;
  $6 = __trunctfdf2(SAFE_HEAP_LOAD_i64_8_8($2, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  __stack_pointer = $2 + 16 | 0;
  return $6;
 }
 
 function isdigit($0) {
  return $0 - 48 >>> 0 < 10;
 }
 
 function frexp($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0;
  wasm2js_scratch_store_f64(+$0);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $3 >>> 20 & 2047;
  if (($2 | 0) != 2047) {
   if (!$2) {
    if ($0 == 0.0) {
     $2 = 0
    } else {
     $0 = frexp($0 * 18446744073709551615.0, $1);
     $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + -64 | 0;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
    return $0;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 0, $2 - 1022 | 0);
   wasm2js_scratch_store_i32(0, $4 | 0);
   wasm2js_scratch_store_i32(1, $3 & -2146435073 | 1071644672);
   $0 = +wasm2js_scratch_load_f64();
  }
  return $0;
 }
 
 function __vfprintf_internal($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $5 = __stack_pointer - 208 | 0;
  __stack_pointer = $5;
  SAFE_HEAP_STORE_i32_4_4($5, 204, $2);
  $2 = $5 + 160 | 0;
  memset($2, 0, 40);
  SAFE_HEAP_STORE_i32_4_4($5, 200, SAFE_HEAP_LOAD_i32_4_4($5, 204));
  label$1 : {
   if ((printf_core(0, $1, $5 + 200 | 0, $5 + 80 | 0, $2, $3, $4) | 0) < 0) {
    $4 = -1;
    break label$1;
   }
   $6 = (SAFE_HEAP_LOAD_i32_4_4($0, 76) | 0) >= 0 ? 1 : $6;
   $7 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 72) | 0) <= 0) {
    SAFE_HEAP_STORE_i32_4_4($0, 0, $7 & -33)
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if (!SAFE_HEAP_LOAD_i32_4_4($0, 48)) {
       SAFE_HEAP_STORE_i32_4_4($0, 48, 80);
       SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
       SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
       $8 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
       SAFE_HEAP_STORE_i32_4_4($0, 44, $5);
       break label$7;
      }
      if (SAFE_HEAP_LOAD_i32_4_4($0, 16)) {
       break label$6
      }
     }
     $2 = -1;
     if (__towrite($0)) {
      break label$5
     }
    }
    $2 = printf_core($0, $1, $5 + 200 | 0, $5 + 80 | 0, $5 + 160 | 0, $3, $4);
   }
   if ($8) {
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4($0, 36) | 0]($0, 0, 0) | 0;
    SAFE_HEAP_STORE_i32_4_4($0, 48, 0);
    SAFE_HEAP_STORE_i32_4_4($0, 44, $8);
    SAFE_HEAP_STORE_i32_4_4($0, 28, 0);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
    SAFE_HEAP_STORE_i64_8_8($0, 16, 0, 0);
    $2 = $1 ? $2 : -1;
   }
   $1 = $0;
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   SAFE_HEAP_STORE_i32_4_4($1, 0, $0 | $7 & 32);
   $4 = $0 & 32 ? -1 : $2;
   if (!$6) {
    break label$1
   }
  }
  __stack_pointer = $5 + 208 | 0;
  return $4;
 }
 
 function printf_core($0, $1, $2, $3, $4, $5, $6) {
  var $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
  $10 = __stack_pointer - 80 | 0;
  __stack_pointer = $10;
  SAFE_HEAP_STORE_i32_4_4($10, 76, $1);
  $25 = $10 + 55 | 0;
  $18 = $10 + 56 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $12 = $1;
       if (($14 ^ 2147483647) < ($7 | 0)) {
        break label$4
       }
       $14 = $7 + $14 | 0;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $7 = $12;
           $8 = SAFE_HEAP_LOAD_i32_1_U_1($7, 0);
           if ($8) {
            while (1) {
             label$12 : {
              $1 = $8 & 255;
              label$13 : {
               if (!$1) {
                $1 = $7;
                break label$13;
               }
               if (($1 | 0) != 37) {
                break label$12
               }
               $8 = $7;
               while (1) {
                if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 1) | 0) != 37) {
                 $1 = $8;
                 break label$13;
                }
                $7 = $7 + 1 | 0;
                $9 = SAFE_HEAP_LOAD_i32_1_U_1($8, 2);
                $1 = $8 + 2 | 0;
                $8 = $1;
                if (($9 | 0) == 37) {
                 continue
                }
                break;
               };
              }
              $7 = $7 - $12 | 0;
              $24 = $14 ^ 2147483647;
              if (($7 | 0) > ($24 | 0)) {
               break label$4
              }
              if ($0) {
               out($0, $12, $7)
              }
              if ($7) {
               continue label$5
              }
              SAFE_HEAP_STORE_i32_4_4($10, 76, $1);
              $7 = $1 + 1 | 0;
              $17 = -1;
              label$18 : {
               if (!isdigit(SAFE_HEAP_LOAD_i32_1_1($1, 1))) {
                break label$18
               }
               if ((SAFE_HEAP_LOAD_i32_1_U_1($1, 2) | 0) != 36) {
                break label$18
               }
               $7 = $1 + 3 | 0;
               $17 = SAFE_HEAP_LOAD_i32_1_1($1, 1) - 48 | 0;
               $19 = 1;
              }
              SAFE_HEAP_STORE_i32_4_4($10, 76, $7);
              $13 = 0;
              $8 = SAFE_HEAP_LOAD_i32_1_1($7, 0);
              $1 = $8 - 32 | 0;
              label$19 : {
               if ($1 >>> 0 > 31) {
                $9 = $7;
                break label$19;
               }
               $9 = $7;
               $1 = 1 << $1;
               if (!($1 & 75913)) {
                break label$19
               }
               while (1) {
                $9 = $7 + 1 | 0;
                SAFE_HEAP_STORE_i32_4_4($10, 76, $9);
                $13 = $1 | $13;
                $8 = SAFE_HEAP_LOAD_i32_1_1($7, 1);
                $1 = $8 - 32 | 0;
                if ($1 >>> 0 >= 32) {
                 break label$19
                }
                $7 = $9;
                $1 = 1 << $1;
                if ($1 & 75913) {
                 continue
                }
                break;
               };
              }
              label$22 : {
               if (($8 | 0) == 42) {
                label$24 : {
                 label$25 : {
                  if (!isdigit(SAFE_HEAP_LOAD_i32_1_1($9, 1))) {
                   break label$25
                  }
                  if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 2) | 0) != 36) {
                   break label$25
                  }
                  SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($9, 1) << 2) + $4 | 0) - 192 | 0, 0, 10);
                  $8 = $9 + 3 | 0;
                  $19 = 1;
                  $15 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($9, 1) << 3) + $3 | 0) - 384 | 0, 0);
                  break label$24;
                 }
                 if ($19) {
                  break label$9
                 }
                 $8 = $9 + 1 | 0;
                 if (!$0) {
                  SAFE_HEAP_STORE_i32_4_4($10, 76, $8);
                  $19 = 0;
                  $15 = 0;
                  break label$22;
                 }
                 $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
                 SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
                 $19 = 0;
                 $15 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
                }
                SAFE_HEAP_STORE_i32_4_4($10, 76, $8);
                if (($15 | 0) >= 0) {
                 break label$22
                }
                $15 = 0 - $15 | 0;
                $13 = $13 | 8192;
                break label$22;
               }
               $15 = getint($10 + 76 | 0);
               if (($15 | 0) < 0) {
                break label$4
               }
               $8 = SAFE_HEAP_LOAD_i32_4_4($10, 76);
              }
              $7 = 0;
              $11 = -1;
              label$27 : {
               if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 0) | 0) != 46) {
                $1 = $8;
                $8 = 0;
                break label$27;
               }
               if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 1) | 0) == 42) {
                label$30 : {
                 label$31 : {
                  if (!isdigit(SAFE_HEAP_LOAD_i32_1_1($8, 2))) {
                   break label$31
                  }
                  if ((SAFE_HEAP_LOAD_i32_1_U_1($8, 3) | 0) != 36) {
                   break label$31
                  }
                  SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($8, 2) << 2) + $4 | 0) - 192 | 0, 0, 10);
                  $1 = $8 + 4 | 0;
                  $11 = SAFE_HEAP_LOAD_i32_4_4(((SAFE_HEAP_LOAD_i32_1_1($8, 2) << 3) + $3 | 0) - 384 | 0, 0);
                  break label$30;
                 }
                 if ($19) {
                  break label$9
                 }
                 $1 = $8 + 2 | 0;
                 $11 = 0;
                 if (!$0) {
                  break label$30
                 }
                 $9 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
                 SAFE_HEAP_STORE_i32_4_4($2, 0, $9 + 4 | 0);
                 $11 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
                }
                SAFE_HEAP_STORE_i32_4_4($10, 76, $1);
                $8 = ($11 ^ -1) >>> 31 | 0;
                break label$27;
               }
               SAFE_HEAP_STORE_i32_4_4($10, 76, $8 + 1 | 0);
               $11 = getint($10 + 76 | 0);
               $1 = SAFE_HEAP_LOAD_i32_4_4($10, 76);
               $8 = 1;
              }
              $22 = $8;
              while (1) {
               $20 = $7;
               $9 = 28;
               $16 = $1;
               $7 = SAFE_HEAP_LOAD_i32_1_1($1, 0);
               if ($7 - 123 >>> 0 < 4294967238) {
                break label$3
               }
               $1 = $16 + 1 | 0;
               $7 = SAFE_HEAP_LOAD_i32_1_U_1(($7 + Math_imul($20, 58) | 0) + 71199 | 0, 0);
               if ($7 - 1 >>> 0 < 8) {
                continue
               }
               break;
              };
              SAFE_HEAP_STORE_i32_4_4($10, 76, $1);
              label$34 : {
               label$35 : {
                if (($7 | 0) != 27) {
                 if (!$7) {
                  break label$3
                 }
                 if (($17 | 0) >= 0) {
                  SAFE_HEAP_STORE_i32_4_4(($17 << 2) + $4 | 0, 0, $7);
                  SAFE_HEAP_STORE_i64_8_8($10, 64, SAFE_HEAP_LOAD_i64_8_8(($17 << 3) + $3 | 0, 0), i64toi32_i32$HIGH_BITS);
                  break label$35;
                 }
                 if (!$0) {
                  break label$6
                 }
                 pop_arg($10 - -64 | 0, $7, $2, $6);
                 break label$34;
                }
                if (($17 | 0) >= 0) {
                 break label$3
                }
               }
               $7 = 0;
               if (!$0) {
                continue label$5
               }
              }
              $8 = $13 & -65537;
              $13 = $13 & 8192 ? $8 : $13;
              $17 = 0;
              $23 = 1616;
              $9 = $18;
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              $7 = SAFE_HEAP_LOAD_i32_1_1($16, 0);
                              $7 = $20 ? (($7 & 15) == 3 ? $7 & -33 : $7) : $7;
                              switch ($7 - 88 | 0) {
                              case 11:
                               break label$38;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$39;
                              case 27:
                               break label$44;
                              case 12:
                              case 17:
                               break label$47;
                              case 23:
                               break label$48;
                              case 0:
                              case 32:
                               break label$49;
                              case 24:
                               break label$50;
                              case 22:
                               break label$51;
                              case 29:
                               break label$52;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             label$54 : {
                              switch ($7 - 65 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$39;
                              case 2:
                               break label$42;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$54;
                              };
                             }
                             if (($7 | 0) == 83) {
                              break label$43
                             }
                             break label$8;
                            }
                            $7 = SAFE_HEAP_LOAD_i64_8_8($10, 64);
                            $9 = i64toi32_i32$HIGH_BITS;
                            $8 = 1616;
                            break label$46;
                           }
                           $7 = 0;
                           label$55 : {
                            switch ($20 & 255) {
                            case 0:
                             SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($10, 64), 0, $14);
                             continue label$5;
                            case 1:
                             SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($10, 64), 0, $14);
                             continue label$5;
                            case 2:
                             SAFE_HEAP_STORE_i64_8_8(SAFE_HEAP_LOAD_i32_4_4($10, 64), 0, $14, $14 >> 31);
                             continue label$5;
                            case 3:
                             SAFE_HEAP_STORE_i32_2_2(SAFE_HEAP_LOAD_i32_4_4($10, 64), 0, $14);
                             continue label$5;
                            case 4:
                             SAFE_HEAP_STORE_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($10, 64), 0, $14);
                             continue label$5;
                            case 6:
                             SAFE_HEAP_STORE_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($10, 64), 0, $14);
                             continue label$5;
                            case 7:
                             break label$55;
                            default:
                             continue label$5;
                            };
                           }
                           SAFE_HEAP_STORE_i64_8_8(SAFE_HEAP_LOAD_i32_4_4($10, 64), 0, $14, $14 >> 31);
                           continue label$5;
                          }
                          $11 = $11 >>> 0 <= 8 ? 8 : $11;
                          $13 = $13 | 8;
                          $7 = 120;
                         }
                         $12 = $18;
                         $20 = $7 & 32;
                         $21 = SAFE_HEAP_LOAD_i64_8_8($10, 64);
                         $8 = i64toi32_i32$HIGH_BITS;
                         if ($21 | $8) {
                          while (1) {
                           $12 = $12 - 1 | 0;
                           SAFE_HEAP_STORE_i32_1_1($12, 0, SAFE_HEAP_LOAD_i32_1_U_1(($21 & 15) + 71728 | 0, 0) | $20);
                           $16 = !$8 & $21 >>> 0 > 15 | ($8 | 0) != 0;
                           $9 = $8;
                           $8 = $8 >>> 4 | 0;
                           $21 = ($9 & 15) << 28 | $21 >>> 4;
                           if ($16) {
                            continue
                           }
                           break;
                          }
                         }
                         if (!(SAFE_HEAP_LOAD_i64_8_8($10, 64) | i64toi32_i32$HIGH_BITS) | !($13 & 8)) {
                          break label$45
                         }
                         $23 = ($7 >>> 4 | 0) + 1616 | 0;
                         $17 = 2;
                         break label$45;
                        }
                        $16 = SAFE_HEAP_LOAD_i64_8_8($10, 64);
                        $12 = i64toi32_i32$HIGH_BITS;
                        if ($16 | $12) {
                         while (1) {
                          $9 = $9 - 1 | 0;
                          SAFE_HEAP_STORE_i32_1_1($9, 0, $16 & 7 | 48);
                          $8 = !$12 & $16 >>> 0 > 7 | ($12 | 0) != 0;
                          $7 = $12;
                          $12 = $7 >>> 3 | 0;
                          $16 = ($7 & 7) << 29 | $16 >>> 3;
                          if ($8) {
                           continue
                          }
                          break;
                         }
                        }
                        $12 = $9;
                        if (!($13 & 8)) {
                         break label$45
                        }
                        $7 = $18 - $12 | 0;
                        $11 = ($7 | 0) < ($11 | 0) ? $11 : $7 + 1 | 0;
                        break label$45;
                       }
                       $7 = SAFE_HEAP_LOAD_i64_8_8($10, 64);
                       $9 = i64toi32_i32$HIGH_BITS;
                       if (($9 | 0) < 0) {
                        $9 = 0 - ($9 + (($7 | 0) != 0) | 0) | 0;
                        $7 = 0 - $7 | 0;
                        SAFE_HEAP_STORE_i64_8_8($10, 64, $7, $9);
                        $17 = 1;
                        $8 = 1616;
                        break label$46;
                       }
                       if ($13 & 2048) {
                        $17 = 1;
                        $8 = 1617;
                        break label$46;
                       }
                       $17 = $13 & 1;
                       $8 = $17 ? 1618 : 1616;
                      }
                      $23 = $8;
                      $12 = fmt_u($7, $9, $18);
                     }
                     if (!!$22 & ($11 | 0) < 0) {
                      break label$4
                     }
                     $13 = $22 ? $13 & -65537 : $13;
                     $9 = SAFE_HEAP_LOAD_i64_8_8($10, 64);
                     $7 = i64toi32_i32$HIGH_BITS;
                     if (!($11 | ($9 | $7) != 0)) {
                      $12 = $18;
                      $9 = $12;
                      $11 = 0;
                      break label$7;
                     }
                     $7 = !($7 | $9) + ($18 - $12 | 0) | 0;
                     $11 = ($7 | 0) < ($11 | 0) ? $11 : $7;
                     break label$8;
                    }
                    $7 = SAFE_HEAP_LOAD_i32_4_4($10, 64);
                    $12 = $7 ? $7 : 17968;
                    $9 = $11 >>> 0 >= 2147483647 ? 2147483647 : $11;
                    $7 = memchr($12, 0, $9);
                    $7 = $7 ? $7 - $12 | 0 : $9;
                    $9 = $7 + $12 | 0;
                    if (($11 | 0) >= 0) {
                     $13 = $8;
                     $11 = $7;
                     break label$7;
                    }
                    $13 = $8;
                    $11 = $7;
                    if (SAFE_HEAP_LOAD_i32_1_U_1($9, 0)) {
                     break label$4
                    }
                    break label$7;
                   }
                   if ($11) {
                    $7 = SAFE_HEAP_LOAD_i32_4_4($10, 64);
                    break label$41;
                   }
                   $7 = 0;
                   pad($0, 32, $15, 0, $13);
                   break label$40;
                  }
                  SAFE_HEAP_STORE_i32_4_4($10, 12, 0);
                  SAFE_HEAP_STORE_i32_4_4($10, 8, SAFE_HEAP_LOAD_i64_8_8($10, 64));
                  $7 = $10 + 8 | 0;
                  SAFE_HEAP_STORE_i32_4_4($10, 64, $7);
                  $11 = -1;
                 }
                 $8 = $7;
                 $7 = 0;
                 label$68 : {
                  while (1) {
                   $9 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
                   if (!$9) {
                    break label$68
                   }
                   $12 = wctomb($10 + 4 | 0, $9);
                   $9 = ($12 | 0) < 0;
                   if (!($9 | $12 >>> 0 > $11 - $7 >>> 0)) {
                    $8 = $8 + 4 | 0;
                    $7 = $7 + $12 | 0;
                    if ($11 >>> 0 > $7 >>> 0) {
                     continue
                    }
                    break label$68;
                   }
                   break;
                  };
                  if ($9) {
                   break label$2
                  }
                 }
                 $9 = 61;
                 if (($7 | 0) < 0) {
                  break label$3
                 }
                 pad($0, 32, $15, $7, $13);
                 if (!$7) {
                  $7 = 0;
                  break label$40;
                 }
                 $9 = 0;
                 $8 = SAFE_HEAP_LOAD_i32_4_4($10, 64);
                 while (1) {
                  $12 = SAFE_HEAP_LOAD_i32_4_4($8, 0);
                  if (!$12) {
                   break label$40
                  }
                  $12 = wctomb($10 + 4 | 0, $12);
                  $9 = $12 + $9 | 0;
                  if ($9 >>> 0 > $7 >>> 0) {
                   break label$40
                  }
                  out($0, $10 + 4 | 0, $12);
                  $8 = $8 + 4 | 0;
                  if ($7 >>> 0 > $9 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                pad($0, 32, $15, $7, $13 ^ 8192);
                $7 = ($7 | 0) < ($15 | 0) ? $15 : $7;
                continue label$5;
               }
               if (!!$22 & ($11 | 0) < 0) {
                break label$4
               }
               $9 = 61;
               $7 = FUNCTION_TABLE[$5 | 0]($0, SAFE_HEAP_LOAD_f64_8_8($10, 64), $15, $11, $13, $7) | 0;
               if (($7 | 0) >= 0) {
                continue label$5
               }
               break label$3;
              }
              SAFE_HEAP_STORE_i32_1_1($10, 55, SAFE_HEAP_LOAD_i64_8_8($10, 64));
              $11 = 1;
              $12 = $25;
              $13 = $8;
              break label$7;
             }
             $8 = SAFE_HEAP_LOAD_i32_1_U_1($7, 1);
             $7 = $7 + 1 | 0;
             continue;
            }
           }
           if ($0) {
            break label$1
           }
           if (!$19) {
            break label$6
           }
           $7 = 1;
           while (1) {
            $0 = SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $4 | 0, 0);
            if ($0) {
             pop_arg(($7 << 3) + $3 | 0, $0, $2, $6);
             $14 = 1;
             $7 = $7 + 1 | 0;
             if (($7 | 0) != 10) {
              continue
             }
             break label$1;
            }
            break;
           };
           $14 = 1;
           if ($7 >>> 0 >= 10) {
            break label$1
           }
           while (1) {
            if (SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + $4 | 0, 0)) {
             break label$9
            }
            $7 = $7 + 1 | 0;
            if (($7 | 0) != 10) {
             continue
            }
            break;
           };
           break label$1;
          }
          $9 = 28;
          break label$3;
         }
         $9 = $18;
        }
        $16 = $9 - $12 | 0;
        $8 = ($11 | 0) > ($16 | 0) ? $11 : $16;
        if (($8 | 0) > ($17 ^ 2147483647)) {
         break label$4
        }
        $9 = 61;
        $11 = $8 + $17 | 0;
        $7 = ($11 | 0) < ($15 | 0) ? $15 : $11;
        if (($24 | 0) < ($7 | 0)) {
         break label$3
        }
        pad($0, 32, $7, $11, $13);
        out($0, $23, $17);
        pad($0, 48, $7, $11, $13 ^ 65536);
        pad($0, 48, $8, $16, 0);
        out($0, $12, $16);
        pad($0, 32, $7, $11, $13 ^ 8192);
        continue;
       }
       break;
      };
      $14 = 0;
      break label$1;
     }
     $9 = 61;
    }
    SAFE_HEAP_STORE_i32_4_4(95900, 0, $9);
   }
   $14 = -1;
  }
  __stack_pointer = $10 + 80 | 0;
  return $14;
 }
 
 function out($0, $1, $2) {
  if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 0) & 32)) {
   __fwritex($1, $2, $0)
  }
 }
 
 function getint($0) {
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0;
  if (!isdigit(SAFE_HEAP_LOAD_i32_1_1(SAFE_HEAP_LOAD_i32_4_4($0, 0), 0))) {
   return 0
  }
  while (1) {
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
   $1 = -1;
   if ($3 >>> 0 <= 214748364) {
    $4 = SAFE_HEAP_LOAD_i32_1_1($2, 0) - 48 | 0;
    $1 = Math_imul($3, 10);
    $1 = ($4 | 0) > ($1 ^ 2147483647) ? -1 : $4 + $1 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 0, $2 + 1 | 0);
   $3 = $1;
   if (isdigit(SAFE_HEAP_LOAD_i32_1_1($2, 1))) {
    continue
   }
   break;
  };
  return $1;
 }
 
 function pop_arg($0, $1, $2, $3) {
  folding_inner2 : {
   switch ($1 - 9 | 0) {
   case 0:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
    return;
   case 6:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    $2 = $0;
    if (!$1 | HEAPU32[18353] < $1 + 2 >>> 0) {
     segfault()
    }
    if ($1 & 1) {
     alignfault()
    }
    $0 = HEAP16[$1 >> 1];
    i64toi32_i32$HIGH_BITS = $0 >> 31;
    SAFE_HEAP_STORE_i64_8_8($2, 0, $0, i64toi32_i32$HIGH_BITS);
    return;
   case 7:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    if (!$1 | HEAPU32[18353] < $1 + 2 >>> 0) {
     segfault()
    }
    if ($1 & 1) {
     alignfault()
    }
    i64toi32_i32$HIGH_BITS = 0;
    SAFE_HEAP_STORE_i64_8_8($0, 0, HEAPU16[$1 >> 1], 0);
    return;
   case 8:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_1_1($1, 0), i64toi32_i32$HIGH_BITS);
    return;
   case 9:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    if (!$1 | HEAPU32[18353] < $1 + 1 >>> 0) {
     segfault()
    }
    i64toi32_i32$HIGH_BITS = 0;
    SAFE_HEAP_STORE_i64_8_8($0, 0, HEAPU8[$1 | 0], 0);
    return;
   case 16:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0) + 7 & -8;
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 8 | 0);
    SAFE_HEAP_STORE_f64_8_8($0, 0, SAFE_HEAP_LOAD_f64_8_8($1, 0));
    return;
   case 17:
    FUNCTION_TABLE[$3 | 0]($0, $2);
   default:
    return;
   case 1:
   case 4:
   case 14:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_4_4($1, 0), i64toi32_i32$HIGH_BITS);
    return;
   case 2:
   case 5:
   case 11:
   case 15:
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 4 | 0);
    SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_4_U_4($1, 0), i64toi32_i32$HIGH_BITS);
    return;
   case 3:
   case 10:
   case 12:
   case 13:
    break folding_inner2;
   };
  }
  $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0) + 7 & -8;
  SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 8 | 0);
  SAFE_HEAP_STORE_i64_8_8($0, 0, SAFE_HEAP_LOAD_i64_8_8($1, 0), i64toi32_i32$HIGH_BITS);
 }
 
 function fmt_u($0, $1, $2) {
  var $3 = 0, $4 = 0;
  if (($1 | 0) == 1 | $1 >>> 0 > 1) {
   while (1) {
    $2 = $2 - 1 | 0;
    $4 = $0;
    $0 = __wasm_i64_udiv($0, $1, 10);
    $3 = i64toi32_i32$HIGH_BITS;
    SAFE_HEAP_STORE_i32_1_1($2, 0, $4 - __wasm_i64_mul($0, $3, 10, 0) | 48);
    $4 = $1 >>> 0 > 9;
    $1 = $3;
    if ($4) {
     continue
    }
    break;
   }
  }
  if ($0) {
   while (1) {
    $2 = $2 - 1 | 0;
    $1 = ($0 >>> 0) / 10 | 0;
    SAFE_HEAP_STORE_i32_1_1($2, 0, $0 - Math_imul($1, 10) | 48);
    $3 = $0 >>> 0 > 9;
    $0 = $1;
    if ($3) {
     continue
    }
    break;
   }
  }
  return $2;
 }
 
 function pad($0, $1, $2, $3, $4) {
  var $5 = 0;
  $5 = __stack_pointer - 256 | 0;
  __stack_pointer = $5;
  if (!($4 & 73728 | ($2 | 0) <= ($3 | 0))) {
   $3 = $2 - $3 | 0;
   $2 = $3 >>> 0 < 256;
   memset($5, $1 & 255, $2 ? $3 : 256);
   if (!$2) {
    while (1) {
     out($0, $5, 256);
     $3 = $3 - 256 | 0;
     if ($3 >>> 0 > 255) {
      continue
     }
     break;
    }
   }
   out($0, $5, $3);
  }
  __stack_pointer = $5 + 256 | 0;
 }
 
 function fmt_fp($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = +$1;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
  $12 = __stack_pointer - 560 | 0;
  __stack_pointer = $12;
  SAFE_HEAP_STORE_i32_4_4($12, 44, 0);
  __DOUBLE_BITS($1);
  $6 = i64toi32_i32$HIGH_BITS;
  label$1 : {
   if (($6 | 0) < 0) {
    $19 = 1;
    $22 = 1626;
    $1 = -$1;
    __DOUBLE_BITS($1);
    $6 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   if ($4 & 2048) {
    $19 = 1;
    $22 = 1629;
    break label$1;
   }
   $19 = $4 & 1;
   $22 = $19 ? 1632 : 1627;
   $23 = !$19;
  }
  label$4 : {
   if (($6 & 2146435072) == 2146435072) {
    $3 = $19 + 3 | 0;
    pad($0, 32, $2, $3, $4 & -65537);
    out($0, $22, $19);
    $5 = $5 & 32;
    out($0, $1 != $1 ? ($5 ? 7861 : 14869) : $5 ? 9623 : 14956, 3);
    pad($0, 32, $2, $3, $4 ^ 8192);
    $8 = ($2 | 0) < ($3 | 0) ? $3 : $2;
    break label$4;
   }
   $20 = $12 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      $1 = frexp($1, $12 + 44 | 0);
      $1 = $1 + $1;
      if ($1 != 0.0) {
       $6 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
       SAFE_HEAP_STORE_i32_4_4($12, 44, $6 - 1 | 0);
       $16 = $5 | 32;
       if (($16 | 0) != 97) {
        break label$8
       }
       break label$6;
      }
      $16 = $5 | 32;
      if (($16 | 0) == 97) {
       break label$6
      }
      $10 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
      $11 = ($3 | 0) < 0 ? 6 : $3;
      break label$7;
     }
     $10 = $6 - 29 | 0;
     SAFE_HEAP_STORE_i32_4_4($12, 44, $10);
     $1 = $1 * 268435456.0;
     $11 = ($3 | 0) < 0 ? 6 : $3;
    }
    $15 = ($12 + 48 | 0) + (($10 | 0) >= 0 ? 288 : 0) | 0;
    $7 = $15;
    while (1) {
     if ($1 < 4294967296.0 & $1 >= 0.0) {
      $6 = ~~$1 >>> 0
     } else {
      $6 = 0
     }
     SAFE_HEAP_STORE_i32_4_4($7, 0, $6);
     $7 = $7 + 4 | 0;
     $1 = ($1 - +($6 >>> 0)) * 1.0e9;
     if ($1 != 0.0) {
      continue
     }
     break;
    };
    label$13 : {
     if (($10 | 0) <= 0) {
      $3 = $10;
      $6 = $7;
      $9 = $15;
      break label$13;
     }
     $9 = $15;
     $3 = $10;
     while (1) {
      $8 = ($3 | 0) >= 29 ? 29 : $3;
      $6 = $7 - 4 | 0;
      label$16 : {
       if ($9 >>> 0 > $6 >>> 0) {
        break label$16
       }
       $3 = 0;
       while (1) {
        $14 = SAFE_HEAP_LOAD_i64_4_U_4($6, 0);
        $21 = i64toi32_i32$HIGH_BITS;
        $13 = $14;
        $14 = $8 & 31;
        if (($8 & 63) >>> 0 >= 32) {
         $21 = $13 << $14;
         $13 = 0;
        } else {
         $21 = (1 << $14) - 1 & $13 >>> 32 - $14 | $21 << $14;
         $13 = $13 << $14;
        }
        $14 = $13 + $3 | 0;
        $13 = $21;
        $13 = $3 >>> 0 > $14 >>> 0 ? $13 + 1 | 0 : $13;
        $3 = __wasm_i64_udiv($14, $13, 1e9);
        $21 = __wasm_i64_mul($3, i64toi32_i32$HIGH_BITS, 1e9, 0);
        SAFE_HEAP_STORE_i32_4_4($6, 0, $14 - $21 | 0);
        $6 = $6 - 4 | 0;
        if ($9 >>> 0 <= $6 >>> 0) {
         continue
        }
        break;
       };
       if (!$3) {
        break label$16
       }
       $9 = $9 - 4 | 0;
       SAFE_HEAP_STORE_i32_4_4($9, 0, $3);
      }
      while (1) {
       $6 = $7;
       if ($6 >>> 0 > $9 >>> 0) {
        $7 = $6 - 4 | 0;
        if (!SAFE_HEAP_LOAD_i32_4_4($7, 0)) {
         continue
        }
       }
       break;
      };
      $3 = SAFE_HEAP_LOAD_i32_4_4($12, 44) - $8 | 0;
      SAFE_HEAP_STORE_i32_4_4($12, 44, $3);
      $7 = $6;
      if (($3 | 0) > 0) {
       continue
      }
      break;
     };
    }
    if (($3 | 0) < 0) {
     $17 = (($11 + 25 >>> 0) / 9 | 0) + 1 | 0;
     $14 = ($16 | 0) == 102;
     while (1) {
      $3 = 0 - $3 | 0;
      $8 = ($3 | 0) >= 9 ? 9 : $3;
      label$22 : {
       if ($6 >>> 0 <= $9 >>> 0) {
        $7 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
        break label$22;
       }
       $13 = 1e9 >>> $8 | 0;
       $21 = -1 << $8 ^ -1;
       $3 = 0;
       $7 = $9;
       while (1) {
        $24 = $3;
        $3 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
        SAFE_HEAP_STORE_i32_4_4($7, 0, $24 + ($3 >>> $8 | 0) | 0);
        $3 = Math_imul($13, $3 & $21);
        $7 = $7 + 4 | 0;
        if ($7 >>> 0 < $6 >>> 0) {
         continue
        }
        break;
       };
       $7 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
       if (!$3) {
        break label$22
       }
       SAFE_HEAP_STORE_i32_4_4($6, 0, $3);
       $6 = $6 + 4 | 0;
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($12, 44) + $8 | 0;
      SAFE_HEAP_STORE_i32_4_4($12, 44, $3);
      $9 = (!$7 << 2) + $9 | 0;
      $7 = $14 ? $15 : $9;
      $6 = $6 - $7 >> 2 > ($17 | 0) ? $7 + ($17 << 2) | 0 : $6;
      if (($3 | 0) < 0) {
       continue
      }
      break;
     };
    }
    $3 = 0;
    label$25 : {
     if ($6 >>> 0 <= $9 >>> 0) {
      break label$25
     }
     $3 = Math_imul($15 - $9 >> 2, 9);
     $7 = 10;
     $8 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
     if ($8 >>> 0 < 10) {
      break label$25
     }
     while (1) {
      $3 = $3 + 1 | 0;
      $7 = Math_imul($7, 10);
      if ($8 >>> 0 >= $7 >>> 0) {
       continue
      }
      break;
     };
    }
    $7 = ($11 - (($16 | 0) != 102 ? $3 : 0) | 0) - (($16 | 0) == 103 & ($11 | 0) != 0) | 0;
    if (($7 | 0) < (Math_imul($6 - $15 >> 2, 9) - 9 | 0)) {
     $8 = $7 + 9216 | 0;
     $17 = ($8 | 0) / 9 | 0;
     $10 = (($12 + (($10 | 0) < 0 ? 4 : 292) | 0) + ($17 << 2) | 0) - 4048 | 0;
     $7 = 10;
     $8 = $8 - Math_imul($17, 9) | 0;
     if (($8 | 0) <= 7) {
      while (1) {
       $7 = Math_imul($7, 10);
       $8 = $8 + 1 | 0;
       if (($8 | 0) != 8) {
        continue
       }
       break;
      }
     }
     $14 = $10 + 4 | 0;
     $13 = SAFE_HEAP_LOAD_i32_4_4($10, 0);
     $17 = ($13 >>> 0) / ($7 >>> 0) | 0;
     $8 = $13 - Math_imul($7, $17) | 0;
     label$30 : {
      if (!$8) {
       if (($6 | 0) == ($14 | 0)) {
        break label$30
       }
      }
      label$32 : {
       if (!($17 & 1)) {
        $1 = 9007199254740992.0;
        if (($7 | 0) != 1e9 | $9 >>> 0 >= $10 >>> 0) {
         break label$32
        }
        if (!(SAFE_HEAP_LOAD_i32_1_U_1($10 - 4 | 0, 0) & 1)) {
         break label$32
        }
       }
       $1 = 9007199254740994.0;
      }
      $18 = ($6 | 0) == ($14 | 0) ? 1.0 : 1.5;
      $14 = $7 >>> 1 | 0;
      $18 = $8 >>> 0 < $14 >>> 0 ? .5 : ($14 | 0) == ($8 | 0) ? $18 : 1.5;
      label$34 : {
       if ($23) {
        break label$34
       }
       if ((SAFE_HEAP_LOAD_i32_1_U_1($22, 0) | 0) != 45) {
        break label$34
       }
       $18 = -$18;
       $1 = -$1;
      }
      $8 = $13 - $8 | 0;
      SAFE_HEAP_STORE_i32_4_4($10, 0, $8);
      if ($1 + $18 == $1) {
       break label$30
      }
      $3 = $7 + $8 | 0;
      SAFE_HEAP_STORE_i32_4_4($10, 0, $3);
      if ($3 >>> 0 >= 1e9) {
       while (1) {
        SAFE_HEAP_STORE_i32_4_4($10, 0, 0);
        $10 = $10 - 4 | 0;
        if ($9 >>> 0 > $10 >>> 0) {
         $9 = $9 - 4 | 0;
         SAFE_HEAP_STORE_i32_4_4($9, 0, 0);
        }
        $3 = SAFE_HEAP_LOAD_i32_4_4($10, 0) + 1 | 0;
        SAFE_HEAP_STORE_i32_4_4($10, 0, $3);
        if ($3 >>> 0 > 999999999) {
         continue
        }
        break;
       }
      }
      $3 = Math_imul($15 - $9 >> 2, 9);
      $7 = 10;
      $8 = SAFE_HEAP_LOAD_i32_4_4($9, 0);
      if ($8 >>> 0 < 10) {
       break label$30
      }
      while (1) {
       $3 = $3 + 1 | 0;
       $7 = Math_imul($7, 10);
       if ($8 >>> 0 >= $7 >>> 0) {
        continue
       }
       break;
      };
     }
     $7 = $10 + 4 | 0;
     $6 = $6 >>> 0 > $7 >>> 0 ? $7 : $6;
    }
    while (1) {
     label$39 : {
      $7 = $6;
      $8 = $6 >>> 0 <= $9 >>> 0;
      if ($8) {
       break label$39
      }
      $6 = $7 - 4 | 0;
      if (!SAFE_HEAP_LOAD_i32_4_4($6, 0)) {
       continue
      }
     }
     break;
    };
    label$41 : {
     if (($16 | 0) != 103) {
      $10 = $4 & 8;
      break label$41;
     }
     $6 = $11 ? $11 : 1;
     $10 = ($6 | 0) > ($3 | 0) & ($3 | 0) > -5;
     $11 = ($10 ? $3 ^ -1 : -1) + $6 | 0;
     $5 = ($10 ? -1 : -2) + $5 | 0;
     $10 = $4 & 8;
     if ($10) {
      break label$41
     }
     $6 = -9;
     label$43 : {
      if ($8) {
       break label$43
      }
      $16 = SAFE_HEAP_LOAD_i32_4_4($7 - 4 | 0, 0);
      if (!$16) {
       break label$43
      }
      $8 = 10;
      $6 = 0;
      if (($16 >>> 0) % 10 | 0) {
       break label$43
      }
      while (1) {
       $10 = $6;
       $6 = $6 + 1 | 0;
       $8 = Math_imul($8, 10);
       if (!(($16 >>> 0) % ($8 >>> 0) | 0)) {
        continue
       }
       break;
      };
      $6 = $10 ^ -1;
     }
     $8 = Math_imul($7 - $15 >> 2, 9);
     if (($5 & -33) == 70) {
      $10 = 0;
      $6 = ($6 + $8 | 0) - 9 | 0;
      $6 = ($6 | 0) > 0 ? $6 : 0;
      $11 = ($6 | 0) > ($11 | 0) ? $11 : $6;
      break label$41;
     }
     $10 = 0;
     $6 = (($3 + $8 | 0) + $6 | 0) - 9 | 0;
     $6 = ($6 | 0) > 0 ? $6 : 0;
     $11 = ($6 | 0) > ($11 | 0) ? $11 : $6;
    }
    $8 = -1;
    $14 = $10 | $11;
    if ((($14 ? 2147483645 : 2147483646) | 0) < ($11 | 0)) {
     break label$4
    }
    $16 = ((($14 | 0) != 0) + $11 | 0) + 1 | 0;
    $13 = $5 & -33;
    label$46 : {
     if (($13 | 0) == 70) {
      if (($16 ^ 2147483647) < ($3 | 0)) {
       break label$4
      }
      $6 = ($3 | 0) > 0 ? $3 : 0;
      break label$46;
     }
     $6 = $3 >> 31;
     $6 = fmt_u(($6 ^ $3) - $6 | 0, 0, $20);
     if (($20 - $6 | 0) <= 1) {
      while (1) {
       $6 = $6 - 1 | 0;
       SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
       if (($20 - $6 | 0) < 2) {
        continue
       }
       break;
      }
     }
     $17 = $6 - 2 | 0;
     SAFE_HEAP_STORE_i32_1_1($17, 0, $5);
     SAFE_HEAP_STORE_i32_1_1($6 - 1 | 0, 0, ($3 | 0) < 0 ? 45 : 43);
     $6 = $20 - $17 | 0;
     if (($6 | 0) > ($16 ^ 2147483647)) {
      break label$4
     }
    }
    $3 = $6 + $16 | 0;
    if (($3 | 0) > ($19 ^ 2147483647)) {
     break label$4
    }
    $5 = $3 + $19 | 0;
    pad($0, 32, $2, $5, $4);
    out($0, $22, $19);
    pad($0, 48, $2, $5, $4 ^ 65536);
    label$50 : {
     label$51 : {
      label$52 : {
       if (($13 | 0) == 70) {
        $6 = $12 + 16 | 0;
        $3 = $6 | 8;
        $10 = $6 | 9;
        $8 = $9 >>> 0 > $15 >>> 0 ? $15 : $9;
        $9 = $8;
        while (1) {
         $6 = fmt_u(SAFE_HEAP_LOAD_i64_4_U_4($9, 0), i64toi32_i32$HIGH_BITS, $10);
         label$55 : {
          if (($8 | 0) != ($9 | 0)) {
           if ($12 + 16 >>> 0 >= $6 >>> 0) {
            break label$55
           }
           while (1) {
            $6 = $6 - 1 | 0;
            SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
            if ($12 + 16 >>> 0 < $6 >>> 0) {
             continue
            }
            break;
           };
           break label$55;
          }
          if (($6 | 0) != ($10 | 0)) {
           break label$55
          }
          SAFE_HEAP_STORE_i32_1_1($12, 24, 48);
          $6 = $3;
         }
         out($0, $6, $10 - $6 | 0);
         $9 = $9 + 4 | 0;
         if ($15 >>> 0 >= $9 >>> 0) {
          continue
         }
         break;
        };
        if ($14) {
         out($0, 17684, 1)
        }
        if (($11 | 0) <= 0 | $7 >>> 0 <= $9 >>> 0) {
         break label$52
        }
        while (1) {
         $6 = fmt_u(SAFE_HEAP_LOAD_i64_4_U_4($9, 0), i64toi32_i32$HIGH_BITS, $10);
         if ($6 >>> 0 > $12 + 16 >>> 0) {
          while (1) {
           $6 = $6 - 1 | 0;
           SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
           if ($12 + 16 >>> 0 < $6 >>> 0) {
            continue
           }
           break;
          }
         }
         out($0, $6, ($11 | 0) >= 9 ? 9 : $11);
         $6 = $11 - 9 | 0;
         $9 = $9 + 4 | 0;
         if ($7 >>> 0 <= $9 >>> 0) {
          break label$51
         }
         $3 = ($11 | 0) > 9;
         $11 = $6;
         if ($3) {
          continue
         }
         break;
        };
        break label$51;
       }
       label$62 : {
        if (($11 | 0) < 0) {
         break label$62
        }
        $8 = $7 >>> 0 > $9 >>> 0 ? $7 : $9 + 4 | 0;
        $6 = $12 + 16 | 0;
        $3 = $6 | 8;
        $15 = $6 | 9;
        $7 = $9;
        while (1) {
         $6 = fmt_u(SAFE_HEAP_LOAD_i64_4_U_4($7, 0), i64toi32_i32$HIGH_BITS, $15);
         if (($6 | 0) == ($15 | 0)) {
          SAFE_HEAP_STORE_i32_1_1($12, 24, 48);
          $6 = $3;
         }
         label$65 : {
          if (($7 | 0) != ($9 | 0)) {
           if ($12 + 16 >>> 0 >= $6 >>> 0) {
            break label$65
           }
           while (1) {
            $6 = $6 - 1 | 0;
            SAFE_HEAP_STORE_i32_1_1($6, 0, 48);
            if ($12 + 16 >>> 0 < $6 >>> 0) {
             continue
            }
            break;
           };
           break label$65;
          }
          out($0, $6, 1);
          $6 = $6 + 1 | 0;
          if (!($10 | $11)) {
           break label$65
          }
          out($0, 17684, 1);
         }
         $13 = $6;
         $6 = $15 - $6 | 0;
         out($0, $13, ($6 | 0) > ($11 | 0) ? $11 : $6);
         $11 = $11 - $6 | 0;
         $7 = $7 + 4 | 0;
         if ($8 >>> 0 <= $7 >>> 0) {
          break label$62
         }
         if (($11 | 0) >= 0) {
          continue
         }
         break;
        };
       }
       pad($0, 48, $11 + 18 | 0, 18, 0);
       out($0, $17, $20 - $17 | 0);
       break label$50;
      }
      $6 = $11;
     }
     pad($0, 48, $6 + 9 | 0, 9, 0);
    }
    pad($0, 32, $2, $5, $4 ^ 8192);
    $8 = ($2 | 0) < ($5 | 0) ? $5 : $2;
    break label$4;
   }
   $9 = ($5 << 26 >> 31 & 9) + $22 | 0;
   label$68 : {
    if ($3 >>> 0 > 11) {
     break label$68
    }
    $6 = 12 - $3 | 0;
    $18 = 16.0;
    while (1) {
     $18 = $18 * 16.0;
     $6 = $6 - 1 | 0;
     if ($6) {
      continue
     }
     break;
    };
    if ((SAFE_HEAP_LOAD_i32_1_U_1($9, 0) | 0) == 45) {
     $1 = -($18 + (-$1 - $18));
     break label$68;
    }
    $1 = $1 + $18 - $18;
   }
   $7 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
   $6 = $7 >> 31;
   $6 = fmt_u(($6 ^ $7) - $6 | 0, 0, $20);
   if (($6 | 0) == ($20 | 0)) {
    SAFE_HEAP_STORE_i32_1_1($12, 15, 48);
    $6 = $12 + 15 | 0;
   }
   $11 = $19 | 2;
   $10 = $5 & 32;
   $7 = SAFE_HEAP_LOAD_i32_4_4($12, 44);
   $15 = $6 - 2 | 0;
   SAFE_HEAP_STORE_i32_1_1($15, 0, $5 + 15 | 0);
   SAFE_HEAP_STORE_i32_1_1($6 - 1 | 0, 0, ($7 | 0) < 0 ? 45 : 43);
   $6 = $4 & 8;
   $7 = $12 + 16 | 0;
   while (1) {
    $5 = $7;
    $5 = $7;
    if (Math_abs($1) < 2147483648.0) {
     $7 = ~~$1
    } else {
     $7 = -2147483648
    }
    SAFE_HEAP_STORE_i32_1_1($5, 0, SAFE_HEAP_LOAD_i32_1_U_1($7 + 71728 | 0, 0) | $10);
    $1 = ($1 - +($7 | 0)) * 16.0;
    $7 = $5 + 1 | 0;
    if (!(!(($3 | 0) > 0 | $6) & $1 == 0.0 | ($7 - ($12 + 16 | 0) | 0) != 1)) {
     SAFE_HEAP_STORE_i32_1_1($5, 1, 46);
     $7 = $5 + 2 | 0;
    }
    if ($1 != 0.0) {
     continue
    }
    break;
   };
   $8 = -1;
   $6 = $20 - $15 | 0;
   $5 = $6 + $11 | 0;
   if ((2147483645 - $5 | 0) < ($3 | 0)) {
    break label$4
   }
   $13 = $5;
   $10 = $12 + 16 | 0;
   $5 = $7 - $10 | 0;
   $7 = $3 ? (($5 - 2 | 0) < ($3 | 0) ? $3 + 2 | 0 : $5) : $5;
   $3 = $13 + $7 | 0;
   pad($0, 32, $2, $3, $4);
   out($0, $9, $11);
   pad($0, 48, $2, $3, $4 ^ 65536);
   out($0, $10, $5);
   pad($0, 48, $7 - $5 | 0, 0, 0);
   out($0, $15, $6);
   pad($0, 32, $2, $3, $4 ^ 8192);
   $8 = ($2 | 0) < ($3 | 0) ? $3 : $2;
  }
  __stack_pointer = $12 + 560 | 0;
  return $8 | 0;
 }
 
 function pop_arg_long_double($0, $1) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  var $2 = 0;
  $2 = $1;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0) + 7 & -8;
  SAFE_HEAP_STORE_i32_4_4($2, 0, $1 + 16 | 0);
  SAFE_HEAP_STORE_f64_8_8($0, 0, __trunctfdf2(SAFE_HEAP_LOAD_i64_8_8($1, 0), i64toi32_i32$HIGH_BITS, SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0), i64toi32_i32$HIGH_BITS));
 }
 
 function __DOUBLE_BITS($0) {
  var $1 = 0;
  wasm2js_scratch_store_f64(+$0);
  $1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1;
 }
 
 function vsnprintf($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0;
  $4 = __stack_pointer - 160 | 0;
  __stack_pointer = $4;
  $5 = $1 ? $0 : $4 + 158 | 0;
  SAFE_HEAP_STORE_i32_4_4($4, 148, $5);
  $0 = -1;
  $6 = $1 - 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($4, 152, $1 >>> 0 >= $6 >>> 0 ? $6 : 0);
  $4 = memset($4, 0, 144);
  SAFE_HEAP_STORE_i32_4_4($4, 76, -1);
  SAFE_HEAP_STORE_i32_4_4($4, 36, 972);
  SAFE_HEAP_STORE_i32_4_4($4, 80, -1);
  SAFE_HEAP_STORE_i32_4_4($4, 44, $4 + 159 | 0);
  SAFE_HEAP_STORE_i32_4_4($4, 84, $4 + 148 | 0);
  label$1 : {
   if (($1 | 0) < 0) {
    SAFE_HEAP_STORE_i32_4_4(95900, 0, 61);
    break label$1;
   }
   SAFE_HEAP_STORE_i32_1_1($5, 0, 0);
   $0 = __vfprintf_internal($4, $2, $3, 970, 971);
  }
  __stack_pointer = $4 + 160 | 0;
  return $0;
 }
 
 function sn_write($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $5 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
  $6 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
  $3 = $3 - $6 | 0;
  $3 = $3 >>> 0 > $5 >>> 0 ? $5 : $3;
  if ($3) {
   __memcpy(SAFE_HEAP_LOAD_i32_4_4($4, 0), $6, $3);
   SAFE_HEAP_STORE_i32_4_4($4, 0, SAFE_HEAP_LOAD_i32_4_4($4, 0) + $3 | 0);
   $5 = SAFE_HEAP_LOAD_i32_4_4($4, 4) - $3 | 0;
   SAFE_HEAP_STORE_i32_4_4($4, 4, $5);
  }
  $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
  $5 = $2 >>> 0 > $5 >>> 0 ? $5 : $2;
  if ($5) {
   __memcpy($3, $1, $5);
   $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0) + $5 | 0;
   SAFE_HEAP_STORE_i32_4_4($4, 0, $3);
   SAFE_HEAP_STORE_i32_4_4($4, 4, SAFE_HEAP_LOAD_i32_4_4($4, 4) - $5 | 0);
  }
  SAFE_HEAP_STORE_i32_1_1($3, 0, 0);
  $1 = SAFE_HEAP_LOAD_i32_4_4($0, 44);
  SAFE_HEAP_STORE_i32_4_4($0, 28, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 20, $1);
  return $2 | 0;
 }
 
 function store_int($0, $1, $2, $3) {
  label$1 : {
   if (!$0) {
    break label$1
   }
   label$2 : {
    switch ($1 + 2 | 0) {
    case 0:
     SAFE_HEAP_STORE_i32_1_1($0, 0, $2);
     return;
    case 1:
     if (!$0 | HEAPU32[18353] < $0 + 2 >>> 0) {
      segfault()
     }
     if ($0 & 1) {
      alignfault()
     }
     HEAP16[$0 >> 1] = $2;
     return;
    case 2:
    case 3:
     SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   SAFE_HEAP_STORE_i64_8_8($0, 0, $2, $3);
  }
 }
 
 function string_read($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($0, 84);
  $3 = $2 + 256 | 0;
  $5 = memchr($4, 0, $3);
  $3 = $5 ? $5 - $4 | 0 : $3;
  $2 = $2 >>> 0 > $3 >>> 0 ? $3 : $2;
  __memcpy($1, $4, $2);
  $1 = $4 + $3 | 0;
  SAFE_HEAP_STORE_i32_4_4($0, 84, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2 + $4 | 0);
  return $2 | 0;
 }
 
 function __wasi_syscall_ret($0) {
  if (!$0) {
   return 0
  }
  SAFE_HEAP_STORE_i32_4_4(95900, 0, $0);
  return -1;
 }
 
 function wctomb($0, $1) {
  if (!$0) {
   return 0
  }
  __inlined_func$wcrtomb : {
   label$1 : {
    if ($0) {
     if ($1 >>> 0 <= 127) {
      break label$1
     }
     label$3 : {
      if (!SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4(97e3, 96), 0)) {
       if (($1 & -128) == 57216) {
        break label$1
       }
       break label$3;
      }
      if ($1 >>> 0 <= 2047) {
       SAFE_HEAP_STORE_i32_1_1($0, 1, $1 & 63 | 128);
       SAFE_HEAP_STORE_i32_1_1($0, 0, $1 >>> 6 | 192);
       $0 = 2;
       break __inlined_func$wcrtomb;
      }
      if (!(($1 & -8192) != 57344 & $1 >>> 0 >= 55296)) {
       SAFE_HEAP_STORE_i32_1_1($0, 2, $1 & 63 | 128);
       SAFE_HEAP_STORE_i32_1_1($0, 0, $1 >>> 12 | 224);
       SAFE_HEAP_STORE_i32_1_1($0, 1, $1 >>> 6 & 63 | 128);
       $0 = 3;
       break __inlined_func$wcrtomb;
      }
      if ($1 - 65536 >>> 0 <= 1048575) {
       SAFE_HEAP_STORE_i32_1_1($0, 3, $1 & 63 | 128);
       SAFE_HEAP_STORE_i32_1_1($0, 0, $1 >>> 18 | 240);
       SAFE_HEAP_STORE_i32_1_1($0, 2, $1 >>> 6 & 63 | 128);
       SAFE_HEAP_STORE_i32_1_1($0, 1, $1 >>> 12 & 63 | 128);
       $0 = 4;
       break __inlined_func$wcrtomb;
      }
     }
     SAFE_HEAP_STORE_i32_4_4(95900, 0, 25);
     $0 = -1;
    } else {
     $0 = 1
    }
    break __inlined_func$wcrtomb;
   }
   SAFE_HEAP_STORE_i32_1_1($0, 0, $1);
   $0 = 1;
  }
  return $0;
 }
 
 function dlmalloc($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $11 = __stack_pointer - 16 | 0;
  __stack_pointer = $11;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           if ($0 >>> 0 <= 244) {
            $5 = SAFE_HEAP_LOAD_i32_4_4(0, 97136);
            $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8;
            $0 = $6 >>> 3 | 0;
            $1 = $5 >>> $0 | 0;
            if ($1 & 3) {
             $2 = $0 + (($1 ^ -1) & 1) | 0;
             $1 = $2 << 3;
             $0 = $1 + 97176 | 0;
             $1 = SAFE_HEAP_LOAD_i32_4_4($1 + 97184 | 0, 0);
             $3 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
             label$12 : {
              if (($0 | 0) == ($3 | 0)) {
               SAFE_HEAP_STORE_i32_4_4(0, 97136, __wasm_rotl_i32($2) & $5);
               break label$12;
              }
              SAFE_HEAP_STORE_i32_4_4($3, 12, $0);
              SAFE_HEAP_STORE_i32_4_4($0, 8, $3);
             }
             $0 = $1 + 8 | 0;
             $2 = $2 << 3;
             SAFE_HEAP_STORE_i32_4_4($1, 4, $2 | 3);
             $1 = $1 + $2 | 0;
             SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) | 1);
             break label$1;
            }
            $7 = SAFE_HEAP_LOAD_i32_4_4(0, 97144);
            if ($7 >>> 0 >= $6 >>> 0) {
             break label$9
            }
            if ($1) {
             $2 = 2 << $0;
             $0 = (0 - $2 | $2) & $1 << $0;
             $1 = __wasm_ctz_i32(0 - $0 & $0);
             $0 = $1 << 3;
             $2 = $0 + 97176 | 0;
             $0 = SAFE_HEAP_LOAD_i32_4_4($0 + 97184 | 0, 0);
             $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
             label$15 : {
              if (($2 | 0) == ($3 | 0)) {
               $5 = __wasm_rotl_i32($1) & $5;
               SAFE_HEAP_STORE_i32_4_4(0, 97136, $5);
               break label$15;
              }
              SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
              SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
             }
             SAFE_HEAP_STORE_i32_4_4($0, 4, $6 | 3);
             $8 = $0 + $6 | 0;
             $1 = $1 << 3;
             $3 = $1 - $6 | 0;
             SAFE_HEAP_STORE_i32_4_4($8, 4, $3 | 1);
             SAFE_HEAP_STORE_i32_4_4($0 + $1 | 0, 0, $3);
             if ($7) {
              $1 = ($7 & -8) + 97176 | 0;
              $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97156);
              $4 = 1 << ($7 >>> 3);
              label$18 : {
               if (!($4 & $5)) {
                SAFE_HEAP_STORE_i32_4_4(0, 97136, $4 | $5);
                $4 = $1;
                break label$18;
               }
               $4 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
              }
              SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
              SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
              SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
              SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
             }
             $0 = $0 + 8 | 0;
             SAFE_HEAP_STORE_i32_4_4(0, 97156, $8);
             SAFE_HEAP_STORE_i32_4_4(0, 97144, $3);
             break label$1;
            }
            $10 = SAFE_HEAP_LOAD_i32_4_4(0, 97140);
            if (!$10) {
             break label$9
            }
            $2 = SAFE_HEAP_LOAD_i32_4_4((__wasm_ctz_i32($10 & 0 - $10) << 2) + 97440 | 0, 0);
            $4 = (SAFE_HEAP_LOAD_i32_4_4($2, 4) & -8) - $6 | 0;
            $1 = $2;
            while (1) {
             label$20 : {
              $0 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
              if (!$0) {
               $0 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
               if (!$0) {
                break label$20
               }
              }
              $3 = (SAFE_HEAP_LOAD_i32_4_4($0, 4) & -8) - $6 | 0;
              $1 = $3 >>> 0 < $4 >>> 0;
              $4 = $1 ? $3 : $4;
              $2 = $1 ? $0 : $2;
              $1 = $0;
              continue;
             }
             break;
            };
            $9 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
            $3 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
            if (($2 | 0) != ($3 | 0)) {
             $0 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
             SAFE_HEAP_LOAD_i32_4_4(0, 97152);
             SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
             SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
             break label$2;
            }
            $1 = $2 + 20 | 0;
            $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
            if (!$0) {
             $0 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
             if (!$0) {
              break label$8
             }
             $1 = $2 + 16 | 0;
            }
            while (1) {
             $8 = $1;
             $3 = $0;
             $1 = $0 + 20 | 0;
             $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
             if ($0) {
              continue
             }
             $1 = $3 + 16 | 0;
             $0 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
             if ($0) {
              continue
             }
             break;
            };
            SAFE_HEAP_STORE_i32_4_4($8, 0, 0);
            break label$2;
           }
           $6 = -1;
           if ($0 >>> 0 > 4294967231) {
            break label$9
           }
           $0 = $0 + 11 | 0;
           $6 = $0 & -8;
           $8 = SAFE_HEAP_LOAD_i32_4_4(0, 97140);
           if (!$8) {
            break label$9
           }
           $4 = 0 - $6 | 0;
           $7 = 0;
           label$26 : {
            if ($6 >>> 0 < 256) {
             break label$26
            }
            $7 = 31;
            if ($6 >>> 0 > 16777215) {
             break label$26
            }
            $0 = Math_clz32($0 >>> 8 | 0);
            $7 = (($6 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
           }
           $1 = SAFE_HEAP_LOAD_i32_4_4(($7 << 2) + 97440 | 0, 0);
           label$27 : {
            label$28 : {
             label$29 : {
              if (!$1) {
               $0 = 0;
               break label$29;
              }
              $0 = 0;
              $2 = $6 << (($7 | 0) != 31 ? 25 - ($7 >>> 1 | 0) | 0 : 0);
              while (1) {
               label$32 : {
                $5 = (SAFE_HEAP_LOAD_i32_4_4($1, 4) & -8) - $6 | 0;
                if ($5 >>> 0 >= $4 >>> 0) {
                 break label$32
                }
                $3 = $1;
                $4 = $5;
                if ($4) {
                 break label$32
                }
                $4 = 0;
                $0 = $1;
                break label$28;
               }
               $5 = SAFE_HEAP_LOAD_i32_4_4($1 + 20 | 0, 0);
               $1 = SAFE_HEAP_LOAD_i32_4_4((($2 >>> 29 & 4) + $1 | 0) + 16 | 0, 0);
               $0 = $5 ? (($5 | 0) == ($1 | 0) ? $0 : $5) : $0;
               $2 = $2 << 1;
               if ($1) {
                continue
               }
               break;
              };
             }
             if (!($0 | $3)) {
              $3 = 0;
              $0 = 2 << $7;
              $0 = (0 - $0 | $0) & $8;
              if (!$0) {
               break label$9
              }
              $0 = SAFE_HEAP_LOAD_i32_4_4((__wasm_ctz_i32($0 & 0 - $0) << 2) + 97440 | 0, 0);
             }
             if (!$0) {
              break label$27
             }
            }
            while (1) {
             $2 = (SAFE_HEAP_LOAD_i32_4_4($0, 4) & -8) - $6 | 0;
             $1 = $2 >>> 0 < $4 >>> 0;
             $4 = $1 ? $2 : $4;
             $3 = $1 ? $0 : $3;
             $1 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
             if ($1) {
              $0 = $1
             } else {
              $0 = SAFE_HEAP_LOAD_i32_4_4($0 + 20 | 0, 0)
             }
             if ($0) {
              continue
             }
             break;
            };
           }
           if (!$3) {
            break label$9
           }
           if (SAFE_HEAP_LOAD_i32_4_4(0, 97144) - $6 >>> 0 <= $4 >>> 0) {
            break label$9
           }
           $7 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
           $2 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
           if (($2 | 0) != ($3 | 0)) {
            $0 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
            SAFE_HEAP_LOAD_i32_4_4(0, 97152);
            SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
            SAFE_HEAP_STORE_i32_4_4($2, 8, $0);
            break label$3;
           }
           $1 = $3 + 20 | 0;
           $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
           if (!$0) {
            $0 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
            if (!$0) {
             break label$7
            }
            $1 = $3 + 16 | 0;
           }
           while (1) {
            $5 = $1;
            $2 = $0;
            $1 = $0 + 20 | 0;
            $0 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
            if ($0) {
             continue
            }
            $1 = $2 + 16 | 0;
            $0 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
            if ($0) {
             continue
            }
            break;
           };
           SAFE_HEAP_STORE_i32_4_4($5, 0, 0);
           break label$3;
          }
          $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97144);
          if ($6 >>> 0 <= $3 >>> 0) {
           $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97156);
           $1 = $3 - $6 | 0;
           label$40 : {
            if ($1 >>> 0 >= 16) {
             $2 = $0 + $6 | 0;
             SAFE_HEAP_STORE_i32_4_4($2, 4, $1 | 1);
             SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $1);
             SAFE_HEAP_STORE_i32_4_4($0, 4, $6 | 3);
             break label$40;
            }
            SAFE_HEAP_STORE_i32_4_4($0, 4, $3 | 3);
            $1 = $0 + $3 | 0;
            SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) | 1);
            $2 = 0;
            $1 = 0;
           }
           SAFE_HEAP_STORE_i32_4_4(0, 97144, $1);
           SAFE_HEAP_STORE_i32_4_4(0, 97156, $2);
           $0 = $0 + 8 | 0;
           break label$1;
          }
          $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97148);
          if ($6 >>> 0 < $2 >>> 0) {
           $1 = $2 - $6 | 0;
           SAFE_HEAP_STORE_i32_4_4(0, 97148, $1);
           $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97160);
           $2 = $0 + $6 | 0;
           SAFE_HEAP_STORE_i32_4_4(0, 97160, $2);
           SAFE_HEAP_STORE_i32_4_4($2, 4, $1 | 1);
           SAFE_HEAP_STORE_i32_4_4($0, 4, $6 | 3);
           $0 = $0 + 8 | 0;
           break label$1;
          }
          $0 = 0;
          label$43 : {
           if (SAFE_HEAP_LOAD_i32_4_4(0, 97608)) {
            $1 = SAFE_HEAP_LOAD_i32_4_4(0, 97616);
            break label$43;
           }
           SAFE_HEAP_STORE_i64_8_4(0, 97620, -1, -1);
           SAFE_HEAP_STORE_i64_8_4(0, 97612, 4096, 4096);
           SAFE_HEAP_STORE_i32_4_4(0, 97608, $11 + 12 & -16 ^ 1431655768);
           SAFE_HEAP_STORE_i32_4_4(0, 97628, 0);
           SAFE_HEAP_STORE_i32_4_4(0, 97580, 0);
           $1 = 4096;
          }
          $4 = $6 + 47 | 0;
          $5 = $1 + $4 | 0;
          $8 = 0 - $1 | 0;
          $1 = $5 & $8;
          if ($1 >>> 0 <= $6 >>> 0) {
           break label$1
          }
          $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97576);
          if ($3) {
           $9 = $3;
           $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97568);
           $7 = $3 + $1 | 0;
           if ($9 >>> 0 < $7 >>> 0 | $3 >>> 0 >= $7 >>> 0) {
            break label$1
           }
          }
          label$46 : {
           if (!(SAFE_HEAP_LOAD_i32_1_U_1(0, 97580) & 4)) {
            label$48 : {
             label$49 : {
              label$50 : {
               label$51 : {
                $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97160);
                if ($3) {
                 $0 = 97584;
                 while (1) {
                  $7 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
                  if ($3 >>> 0 >= $7 >>> 0) {
                   if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4($0, 4) + $7 >>> 0) {
                    break label$51
                   }
                  }
                  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
                  if ($0) {
                   continue
                  }
                  break;
                 };
                }
                $2 = sbrk(0);
                if (($2 | 0) == -1) {
                 break label$48
                }
                $5 = $1;
                $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97612);
                $3 = $0 - 1 | 0;
                if ($3 & $2) {
                 $5 = ($1 - $2 | 0) + ($2 + $3 & 0 - $0) | 0
                }
                if ($6 >>> 0 >= $5 >>> 0) {
                 break label$48
                }
                $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97576);
                if ($0) {
                 $7 = $0;
                 $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97568);
                 $3 = $0 + $5 | 0;
                 if ($7 >>> 0 < $3 >>> 0 | $0 >>> 0 >= $3 >>> 0) {
                  break label$48
                 }
                }
                $0 = sbrk($5);
                if (($2 | 0) != ($0 | 0)) {
                 break label$50
                }
                break label$46;
               }
               $5 = $8 & $5 - $2;
               $2 = sbrk($5);
               if (($2 | 0) == (SAFE_HEAP_LOAD_i32_4_4($0, 0) + SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0)) {
                break label$49
               }
               $0 = $2;
              }
              if (($0 | 0) == -1) {
               break label$48
              }
              if ($5 >>> 0 >= $6 + 48 >>> 0) {
               $2 = $0;
               break label$46;
              }
              $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97616);
              $2 = $2 + ($4 - $5 | 0) & 0 - $2;
              if ((sbrk($2) | 0) == -1) {
               break label$48
              }
              $5 = $2 + $5 | 0;
              $2 = $0;
              break label$46;
             }
             if (($2 | 0) != -1) {
              break label$46
             }
            }
            SAFE_HEAP_STORE_i32_4_4(0, 97580, SAFE_HEAP_LOAD_i32_4_4(0, 97580) | 4);
           }
           $2 = sbrk($1);
           $0 = sbrk(0);
           if (($2 | 0) == -1 | ($0 | 0) == -1 | $0 >>> 0 <= $2 >>> 0) {
            break label$4
           }
           $5 = $0 - $2 | 0;
           if ($5 >>> 0 <= $6 + 40 >>> 0) {
            break label$4
           }
          }
          $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97568) + $5 | 0;
          SAFE_HEAP_STORE_i32_4_4(0, 97568, $0);
          if (SAFE_HEAP_LOAD_i32_4_4(0, 97572) >>> 0 < $0 >>> 0) {
           SAFE_HEAP_STORE_i32_4_4(0, 97572, $0)
          }
          label$59 : {
           $4 = SAFE_HEAP_LOAD_i32_4_4(0, 97160);
           if ($4) {
            $0 = 97584;
            while (1) {
             $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
             $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
             if (($1 + $3 | 0) == ($2 | 0)) {
              break label$59
             }
             $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
             if ($0) {
              continue
             }
             break;
            };
            break label$6;
           }
           $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97152);
           if (!(!!$0 & $0 >>> 0 <= $2 >>> 0)) {
            SAFE_HEAP_STORE_i32_4_4(0, 97152, $2)
           }
           $0 = 0;
           SAFE_HEAP_STORE_i32_4_4(0, 97588, $5);
           SAFE_HEAP_STORE_i32_4_4(0, 97584, $2);
           SAFE_HEAP_STORE_i32_4_4(0, 97168, -1);
           SAFE_HEAP_STORE_i32_4_4(0, 97172, SAFE_HEAP_LOAD_i32_4_4(0, 97608));
           SAFE_HEAP_STORE_i32_4_4(0, 97596, 0);
           while (1) {
            $1 = $0 << 3;
            $3 = $1 + 97176 | 0;
            SAFE_HEAP_STORE_i32_4_4($1 + 97184 | 0, 0, $3);
            SAFE_HEAP_STORE_i32_4_4($1 + 97188 | 0, 0, $3);
            $0 = $0 + 1 | 0;
            if (($0 | 0) != 32) {
             continue
            }
            break;
           };
           $0 = $5 - 40 | 0;
           $1 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
           $3 = $0 - $1 | 0;
           SAFE_HEAP_STORE_i32_4_4(0, 97148, $3);
           $1 = $1 + $2 | 0;
           SAFE_HEAP_STORE_i32_4_4(0, 97160, $1);
           SAFE_HEAP_STORE_i32_4_4($1, 4, $3 | 1);
           SAFE_HEAP_STORE_i32_4_4($0 + $2 | 0, 4, 40);
           SAFE_HEAP_STORE_i32_4_4(0, 97164, SAFE_HEAP_LOAD_i32_4_4(0, 97624));
           break label$5;
          }
          if (SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 8 | $1 >>> 0 > $4 >>> 0 | $2 >>> 0 <= $4 >>> 0) {
           break label$6
          }
          SAFE_HEAP_STORE_i32_4_4($0, 4, $3 + $5 | 0);
          $0 = $4 + 8 & 7 ? -8 - $4 & 7 : 0;
          $1 = $0 + $4 | 0;
          SAFE_HEAP_STORE_i32_4_4(0, 97160, $1);
          $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97148) + $5 | 0;
          $0 = $2 - $0 | 0;
          SAFE_HEAP_STORE_i32_4_4(0, 97148, $0);
          SAFE_HEAP_STORE_i32_4_4($1, 4, $0 | 1);
          SAFE_HEAP_STORE_i32_4_4($2 + $4 | 0, 4, 40);
          SAFE_HEAP_STORE_i32_4_4(0, 97164, SAFE_HEAP_LOAD_i32_4_4(0, 97624));
          break label$5;
         }
         $3 = 0;
         break label$2;
        }
        $2 = 0;
        break label$3;
       }
       if (SAFE_HEAP_LOAD_i32_4_4(0, 97152) >>> 0 > $2 >>> 0) {
        SAFE_HEAP_STORE_i32_4_4(0, 97152, $2)
       }
       $1 = $2 + $5 | 0;
       $0 = 97584;
       label$66 : {
        label$67 : {
         label$68 : {
          label$69 : {
           label$70 : {
            label$71 : {
             while (1) {
              if ((SAFE_HEAP_LOAD_i32_4_4($0, 0) | 0) != ($1 | 0)) {
               $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
               if ($0) {
                continue
               }
               break label$71;
              }
              break;
             };
             if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 12) & 8)) {
              break label$70
             }
            }
            $0 = 97584;
            while (1) {
             $1 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
             if ($4 >>> 0 >= $1 >>> 0) {
              $3 = SAFE_HEAP_LOAD_i32_4_4($0, 4) + $1 | 0;
              if ($3 >>> 0 > $4 >>> 0) {
               break label$69
              }
             }
             $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
             continue;
            };
           }
           SAFE_HEAP_STORE_i32_4_4($0, 0, $2);
           SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) + $5 | 0);
           $7 = ($2 + 8 & 7 ? -8 - $2 & 7 : 0) + $2 | 0;
           SAFE_HEAP_STORE_i32_4_4($7, 4, $6 | 3);
           $5 = $1 + ($1 + 8 & 7 ? -8 - $1 & 7 : 0) | 0;
           $6 = $6 + $7 | 0;
           $0 = $5 - $6 | 0;
           if (($4 | 0) == ($5 | 0)) {
            SAFE_HEAP_STORE_i32_4_4(0, 97160, $6);
            $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97148) + $0 | 0;
            SAFE_HEAP_STORE_i32_4_4(0, 97148, $0);
            SAFE_HEAP_STORE_i32_4_4($6, 4, $0 | 1);
            break label$67;
           }
           if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) == ($5 | 0)) {
            SAFE_HEAP_STORE_i32_4_4(0, 97156, $6);
            $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97144) + $0 | 0;
            SAFE_HEAP_STORE_i32_4_4(0, 97144, $0);
            SAFE_HEAP_STORE_i32_4_4($6, 4, $0 | 1);
            SAFE_HEAP_STORE_i32_4_4($0 + $6 | 0, 0, $0);
            break label$67;
           }
           $4 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
           if (($4 & 3) == 1) {
            $9 = $4 & -8;
            label$79 : {
             if ($4 >>> 0 <= 255) {
              $1 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
              $2 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
              if (($1 | 0) == ($2 | 0)) {
               SAFE_HEAP_STORE_i32_4_4(0, 97136, SAFE_HEAP_LOAD_i32_4_4(0, 97136) & __wasm_rotl_i32($4 >>> 3 | 0));
               break label$79;
              }
              SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
              SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
              break label$79;
             }
             $8 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
             $2 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
             label$82 : {
              if (($5 | 0) != ($2 | 0)) {
               $1 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
               SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
               SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
               break label$82;
              }
              label$84 : {
               $4 = $5 + 20 | 0;
               $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
               if ($1) {
                break label$84
               }
               $4 = $5 + 16 | 0;
               $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
               if ($1) {
                break label$84
               }
               $2 = 0;
               break label$82;
              }
              while (1) {
               $3 = $4;
               $2 = $1;
               $4 = $2 + 20 | 0;
               $1 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
               if ($1) {
                continue
               }
               $4 = $2 + 16 | 0;
               $1 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
               if ($1) {
                continue
               }
               break;
              };
              SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
             }
             if (!$8) {
              break label$79
             }
             $1 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
             $3 = ($1 << 2) + 97440 | 0;
             label$86 : {
              if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) == ($5 | 0)) {
               SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
               if ($2) {
                break label$86
               }
               SAFE_HEAP_STORE_i32_4_4(0, 97140, SAFE_HEAP_LOAD_i32_4_4(0, 97140) & __wasm_rotl_i32($1));
               break label$79;
              }
              SAFE_HEAP_STORE_i32_4_4($8 + ((SAFE_HEAP_LOAD_i32_4_4($8, 16) | 0) == ($5 | 0) ? 16 : 20) | 0, 0, $2);
              if (!$2) {
               break label$79
              }
             }
             SAFE_HEAP_STORE_i32_4_4($2, 24, $8);
             $1 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
             if ($1) {
              SAFE_HEAP_STORE_i32_4_4($2, 16, $1);
              SAFE_HEAP_STORE_i32_4_4($1, 24, $2);
             }
             $1 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
             if (!$1) {
              break label$79
             }
             SAFE_HEAP_STORE_i32_4_4($2 + 20 | 0, 0, $1);
             SAFE_HEAP_STORE_i32_4_4($1, 24, $2);
            }
            $5 = $5 + $9 | 0;
            $4 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
            $0 = $0 + $9 | 0;
           }
           SAFE_HEAP_STORE_i32_4_4($5, 4, $4 & -2);
           SAFE_HEAP_STORE_i32_4_4($6, 4, $0 | 1);
           SAFE_HEAP_STORE_i32_4_4($0 + $6 | 0, 0, $0);
           if ($0 >>> 0 <= 255) {
            $1 = ($0 & -8) + 97176 | 0;
            $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97136);
            $0 = 1 << ($0 >>> 3);
            label$90 : {
             if (!($2 & $0)) {
              SAFE_HEAP_STORE_i32_4_4(0, 97136, $0 | $2);
              $0 = $1;
              break label$90;
             }
             $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
            }
            SAFE_HEAP_STORE_i32_4_4($1, 8, $6);
            SAFE_HEAP_STORE_i32_4_4($0, 12, $6);
            SAFE_HEAP_STORE_i32_4_4($6, 12, $1);
            SAFE_HEAP_STORE_i32_4_4($6, 8, $0);
            break label$67;
           }
           $4 = 31;
           if ($0 >>> 0 <= 16777215) {
            $1 = Math_clz32($0 >>> 8 | 0);
            $4 = (($0 >>> 38 - $1 & 1) - ($1 << 1) | 0) + 62 | 0;
           }
           SAFE_HEAP_STORE_i32_4_4($6, 28, $4);
           SAFE_HEAP_STORE_i64_8_4($6, 16, 0, 0);
           $1 = ($4 << 2) + 97440 | 0;
           $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97140);
           $3 = 1 << $4;
           label$93 : {
            if (!($2 & $3)) {
             SAFE_HEAP_STORE_i32_4_4(0, 97140, $2 | $3);
             SAFE_HEAP_STORE_i32_4_4($1, 0, $6);
             break label$93;
            }
            $4 = $0 << (($4 | 0) != 31 ? 25 - ($4 >>> 1 | 0) | 0 : 0);
            $2 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
            while (1) {
             $1 = $2;
             if ((SAFE_HEAP_LOAD_i32_4_4($2, 4) & -8) == ($0 | 0)) {
              break label$68
             }
             $2 = $4 >>> 29 | 0;
             $4 = $4 << 1;
             $3 = ($1 + ($2 & 4) | 0) + 16 | 0;
             $2 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
             if ($2) {
              continue
             }
             break;
            };
            SAFE_HEAP_STORE_i32_4_4($3, 0, $6);
           }
           SAFE_HEAP_STORE_i32_4_4($6, 24, $1);
           SAFE_HEAP_STORE_i32_4_4($6, 12, $6);
           SAFE_HEAP_STORE_i32_4_4($6, 8, $6);
           break label$67;
          }
          $0 = $5 - 40 | 0;
          $1 = $2 + 8 & 7 ? -8 - $2 & 7 : 0;
          $8 = $0 - $1 | 0;
          SAFE_HEAP_STORE_i32_4_4(0, 97148, $8);
          $1 = $1 + $2 | 0;
          SAFE_HEAP_STORE_i32_4_4(0, 97160, $1);
          SAFE_HEAP_STORE_i32_4_4($1, 4, $8 | 1);
          SAFE_HEAP_STORE_i32_4_4($0 + $2 | 0, 4, 40);
          SAFE_HEAP_STORE_i32_4_4(0, 97164, SAFE_HEAP_LOAD_i32_4_4(0, 97624));
          $0 = ($3 + ($3 - 39 & 7 ? 39 - $3 & 7 : 0) | 0) - 47 | 0;
          $1 = $0 >>> 0 < $4 + 16 >>> 0 ? $4 : $0;
          SAFE_HEAP_STORE_i32_4_4($1, 4, 27);
          SAFE_HEAP_STORE_i64_8_4($1 + 16 | 0, 0, SAFE_HEAP_LOAD_i64_8_4(0, 97592), i64toi32_i32$HIGH_BITS);
          SAFE_HEAP_STORE_i64_8_4($1, 8, SAFE_HEAP_LOAD_i64_8_4(0, 97584), i64toi32_i32$HIGH_BITS);
          SAFE_HEAP_STORE_i32_4_4(0, 97592, $1 + 8 | 0);
          SAFE_HEAP_STORE_i32_4_4(0, 97588, $5);
          SAFE_HEAP_STORE_i32_4_4(0, 97584, $2);
          SAFE_HEAP_STORE_i32_4_4(0, 97596, 0);
          $0 = $1 + 24 | 0;
          while (1) {
           SAFE_HEAP_STORE_i32_4_4($0, 4, 7);
           $2 = $0 + 8 | 0;
           $0 = $0 + 4 | 0;
           if ($2 >>> 0 < $3 >>> 0) {
            continue
           }
           break;
          };
          if (($1 | 0) == ($4 | 0)) {
           break label$5
          }
          SAFE_HEAP_STORE_i32_4_4($1, 4, SAFE_HEAP_LOAD_i32_4_4($1, 4) & -2);
          $2 = $1 - $4 | 0;
          SAFE_HEAP_STORE_i32_4_4($4, 4, $2 | 1);
          SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
          if ($2 >>> 0 <= 255) {
           $0 = ($2 & -8) + 97176 | 0;
           $1 = SAFE_HEAP_LOAD_i32_4_4(0, 97136);
           $2 = 1 << ($2 >>> 3);
           label$98 : {
            if (!($1 & $2)) {
             SAFE_HEAP_STORE_i32_4_4(0, 97136, $1 | $2);
             $1 = $0;
             break label$98;
            }
            $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
           }
           SAFE_HEAP_STORE_i32_4_4($0, 8, $4);
           SAFE_HEAP_STORE_i32_4_4($1, 12, $4);
           SAFE_HEAP_STORE_i32_4_4($4, 12, $0);
           SAFE_HEAP_STORE_i32_4_4($4, 8, $1);
           break label$5;
          }
          $0 = 31;
          if ($2 >>> 0 <= 16777215) {
           $0 = Math_clz32($2 >>> 8 | 0);
           $0 = (($2 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
          }
          SAFE_HEAP_STORE_i32_4_4($4, 28, $0);
          SAFE_HEAP_STORE_i64_8_4($4, 16, 0, 0);
          $1 = ($0 << 2) + 97440 | 0;
          $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97140);
          $5 = 1 << $0;
          label$101 : {
           if (!($3 & $5)) {
            SAFE_HEAP_STORE_i32_4_4(0, 97140, $3 | $5);
            SAFE_HEAP_STORE_i32_4_4($1, 0, $4);
            break label$101;
           }
           $0 = $2 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
           $3 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
           while (1) {
            $1 = $3;
            if (($2 | 0) == (SAFE_HEAP_LOAD_i32_4_4($1, 4) & -8)) {
             break label$66
            }
            $3 = $0 >>> 29 | 0;
            $0 = $0 << 1;
            $5 = ($1 + ($3 & 4) | 0) + 16 | 0;
            $3 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
            if ($3) {
             continue
            }
            break;
           };
           SAFE_HEAP_STORE_i32_4_4($5, 0, $4);
          }
          SAFE_HEAP_STORE_i32_4_4($4, 24, $1);
          SAFE_HEAP_STORE_i32_4_4($4, 12, $4);
          SAFE_HEAP_STORE_i32_4_4($4, 8, $4);
          break label$5;
         }
         $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
         SAFE_HEAP_STORE_i32_4_4($0, 12, $6);
         SAFE_HEAP_STORE_i32_4_4($1, 8, $6);
         SAFE_HEAP_STORE_i32_4_4($6, 24, 0);
         SAFE_HEAP_STORE_i32_4_4($6, 12, $1);
         SAFE_HEAP_STORE_i32_4_4($6, 8, $0);
        }
        $0 = $7 + 8 | 0;
        break label$1;
       }
       $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
       SAFE_HEAP_STORE_i32_4_4($0, 12, $4);
       SAFE_HEAP_STORE_i32_4_4($1, 8, $4);
       SAFE_HEAP_STORE_i32_4_4($4, 24, 0);
       SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
       SAFE_HEAP_STORE_i32_4_4($4, 8, $0);
      }
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97148);
      if ($0 >>> 0 <= $6 >>> 0) {
       break label$4
      }
      $1 = $0 - $6 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 97148, $1);
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97160);
      $2 = $0 + $6 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 97160, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 4, $1 | 1);
      SAFE_HEAP_STORE_i32_4_4($0, 4, $6 | 3);
      $0 = $0 + 8 | 0;
      break label$1;
     }
     SAFE_HEAP_STORE_i32_4_4(95900, 0, 48);
     $0 = 0;
     break label$1;
    }
    label$104 : {
     if (!$7) {
      break label$104
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
     $1 = ($0 << 2) + 97440 | 0;
     label$105 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($3 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
       if ($2) {
        break label$105
       }
       $8 = __wasm_rotl_i32($0) & $8;
       SAFE_HEAP_STORE_i32_4_4(0, 97140, $8);
       break label$104;
      }
      SAFE_HEAP_STORE_i32_4_4($7 + ((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($3 | 0) ? 16 : 20) | 0, 0, $2);
      if (!$2) {
       break label$104
      }
     }
     SAFE_HEAP_STORE_i32_4_4($2, 24, $7);
     $0 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
     if ($0) {
      SAFE_HEAP_STORE_i32_4_4($2, 16, $0);
      SAFE_HEAP_STORE_i32_4_4($0, 24, $2);
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($3 + 20 | 0, 0);
     if (!$0) {
      break label$104
     }
     SAFE_HEAP_STORE_i32_4_4($2 + 20 | 0, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($0, 24, $2);
    }
    label$108 : {
     if ($4 >>> 0 <= 15) {
      $0 = $4 + $6 | 0;
      SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 3);
      $0 = $0 + $3 | 0;
      SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) | 1);
      break label$108;
     }
     SAFE_HEAP_STORE_i32_4_4($3, 4, $6 | 3);
     $2 = $3 + $6 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 4, $4 | 1);
     SAFE_HEAP_STORE_i32_4_4($2 + $4 | 0, 0, $4);
     if ($4 >>> 0 <= 255) {
      $0 = ($4 & -8) + 97176 | 0;
      $1 = SAFE_HEAP_LOAD_i32_4_4(0, 97136);
      $4 = 1 << ($4 >>> 3);
      label$111 : {
       if (!($1 & $4)) {
        SAFE_HEAP_STORE_i32_4_4(0, 97136, $1 | $4);
        $1 = $0;
        break label$111;
       }
       $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
      }
      SAFE_HEAP_STORE_i32_4_4($0, 8, $2);
      SAFE_HEAP_STORE_i32_4_4($1, 12, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 12, $0);
      SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
      break label$108;
     }
     $0 = 31;
     if ($4 >>> 0 <= 16777215) {
      $0 = Math_clz32($4 >>> 8 | 0);
      $0 = (($4 >>> 38 - $0 & 1) - ($0 << 1) | 0) + 62 | 0;
     }
     SAFE_HEAP_STORE_i32_4_4($2, 28, $0);
     SAFE_HEAP_STORE_i64_8_4($2, 16, 0, 0);
     $1 = ($0 << 2) + 97440 | 0;
     label$114 : {
      $5 = 1 << $0;
      label$115 : {
       if (!($5 & $8)) {
        SAFE_HEAP_STORE_i32_4_4(0, 97140, $5 | $8);
        SAFE_HEAP_STORE_i32_4_4($1, 0, $2);
        break label$115;
       }
       $0 = $4 << (($0 | 0) != 31 ? 25 - ($0 >>> 1 | 0) | 0 : 0);
       $6 = SAFE_HEAP_LOAD_i32_4_4($1, 0);
       while (1) {
        $1 = $6;
        if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) & -8) == ($4 | 0)) {
         break label$114
        }
        $5 = $0 >>> 29 | 0;
        $0 = $0 << 1;
        $5 = ($1 + ($5 & 4) | 0) + 16 | 0;
        $6 = SAFE_HEAP_LOAD_i32_4_4($5, 0);
        if ($6) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($5, 0, $2);
      }
      SAFE_HEAP_STORE_i32_4_4($2, 24, $1);
      SAFE_HEAP_STORE_i32_4_4($2, 12, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 8, $2);
      break label$108;
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
     SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
     SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
     SAFE_HEAP_STORE_i32_4_4($2, 24, 0);
     SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
     SAFE_HEAP_STORE_i32_4_4($2, 8, $0);
    }
    $0 = $3 + 8 | 0;
    break label$1;
   }
   label$118 : {
    if (!$9) {
     break label$118
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 28);
    $1 = ($0 << 2) + 97440 | 0;
    label$119 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 0) | 0) == ($2 | 0)) {
      SAFE_HEAP_STORE_i32_4_4($1, 0, $3);
      if ($3) {
       break label$119
      }
      SAFE_HEAP_STORE_i32_4_4(0, 97140, __wasm_rotl_i32($0) & $10);
      break label$118;
     }
     SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($9, 16) | 0) == ($2 | 0) ? 16 : 20) + $9 | 0, 0, $3);
     if (!$3) {
      break label$118
     }
    }
    SAFE_HEAP_STORE_i32_4_4($3, 24, $9);
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
    if ($0) {
     SAFE_HEAP_STORE_i32_4_4($3, 16, $0);
     SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($2 + 20 | 0, 0);
    if (!$0) {
     break label$118
    }
    SAFE_HEAP_STORE_i32_4_4($3 + 20 | 0, 0, $0);
    SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
   }
   label$122 : {
    if ($4 >>> 0 <= 15) {
     $0 = $4 + $6 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 4, $0 | 3);
     $0 = $0 + $2 | 0;
     SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($0, 4) | 1);
     break label$122;
    }
    SAFE_HEAP_STORE_i32_4_4($2, 4, $6 | 3);
    $3 = $2 + $6 | 0;
    SAFE_HEAP_STORE_i32_4_4($3, 4, $4 | 1);
    SAFE_HEAP_STORE_i32_4_4($3 + $4 | 0, 0, $4);
    if ($7) {
     $0 = ($7 & -8) + 97176 | 0;
     $1 = SAFE_HEAP_LOAD_i32_4_4(0, 97156);
     $6 = 1 << ($7 >>> 3);
     label$125 : {
      if (!($6 & $5)) {
       SAFE_HEAP_STORE_i32_4_4(0, 97136, $6 | $5);
       $5 = $0;
       break label$125;
      }
      $5 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
     SAFE_HEAP_STORE_i32_4_4($5, 12, $1);
     SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
     SAFE_HEAP_STORE_i32_4_4($1, 8, $5);
    }
    SAFE_HEAP_STORE_i32_4_4(0, 97156, $3);
    SAFE_HEAP_STORE_i32_4_4(0, 97144, $4);
   }
   $0 = $2 + 8 | 0;
  }
  __stack_pointer = $11 + 16 | 0;
  return $0 | 0;
 }
 
 function dlfree($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  label$1 : {
   if (!$0) {
    break label$1
   }
   $3 = $0 - 8 | 0;
   $1 = SAFE_HEAP_LOAD_i32_4_4($0 - 4 | 0, 0);
   $0 = $1 & -8;
   $5 = $3 + $0 | 0;
   label$2 : {
    if ($1 & 1) {
     break label$2
    }
    if (!($1 & 3)) {
     break label$1
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
    $3 = $3 - $1 | 0;
    if ($3 >>> 0 < SAFE_HEAP_LOAD_i32_4_4(0, 97152) >>> 0) {
     break label$1
    }
    $0 = $0 + $1 | 0;
    if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) != ($3 | 0)) {
     if ($1 >>> 0 <= 255) {
      $1 = $1 >>> 3 | 0;
      $4 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
      $2 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
      if (($4 | 0) == ($2 | 0)) {
       SAFE_HEAP_STORE_i32_4_4(0, 97136, SAFE_HEAP_LOAD_i32_4_4(0, 97136) & __wasm_rotl_i32($1));
       break label$2;
      }
      SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
      break label$2;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
     $1 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
     label$6 : {
      if (($3 | 0) != ($1 | 0)) {
       $2 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
       SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
       SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
       break label$6;
      }
      label$8 : {
       $4 = $3 + 20 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       if ($2) {
        break label$8
       }
       $4 = $3 + 16 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       if ($2) {
        break label$8
       }
       $1 = 0;
       break label$6;
      }
      while (1) {
       $6 = $4;
       $1 = $2;
       $4 = $1 + 20 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
       if ($2) {
        continue
       }
       $4 = $1 + 16 | 0;
       $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
       if ($2) {
        continue
       }
       break;
      };
      SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
     }
     if (!$7) {
      break label$2
     }
     $4 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
     $2 = ($4 << 2) + 97440 | 0;
     label$10 : {
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($3 | 0)) {
       SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
       if ($1) {
        break label$10
       }
       SAFE_HEAP_STORE_i32_4_4(0, 97140, SAFE_HEAP_LOAD_i32_4_4(0, 97140) & __wasm_rotl_i32($4));
       break label$2;
      }
      SAFE_HEAP_STORE_i32_4_4($7 + ((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($3 | 0) ? 16 : 20) | 0, 0, $1);
      if (!$1) {
       break label$2
      }
     }
     SAFE_HEAP_STORE_i32_4_4($1, 24, $7);
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 16);
     if ($2) {
      SAFE_HEAP_STORE_i32_4_4($1, 16, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 24, $1);
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($3, 20);
     if (!$2) {
      break label$2
     }
     SAFE_HEAP_STORE_i32_4_4($1 + 20 | 0, 0, $2);
     SAFE_HEAP_STORE_i32_4_4($2, 24, $1);
     break label$2;
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
    if (($1 & 3) != 3) {
     break label$2
    }
    SAFE_HEAP_STORE_i32_4_4(0, 97144, $0);
    SAFE_HEAP_STORE_i32_4_4($5, 4, $1 & -2);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
    SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $0);
    return;
   }
   if ($3 >>> 0 >= $5 >>> 0) {
    break label$1
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
   if (!($1 & 1)) {
    break label$1
   }
   label$13 : {
    if (!($1 & 2)) {
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97160) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 97160, $3);
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97148) + $0 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 97148, $0);
      SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
      if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) != ($3 | 0)) {
       break label$1
      }
      SAFE_HEAP_STORE_i32_4_4(0, 97144, 0);
      SAFE_HEAP_STORE_i32_4_4(0, 97156, 0);
      return;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 97156, $3);
      $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97144) + $0 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 97144, $0);
      SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
      SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $0);
      return;
     }
     $0 = ($1 & -8) + $0 | 0;
     label$17 : {
      if ($1 >>> 0 <= 255) {
       $1 = $1 >>> 3 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
       $2 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
       if (($4 | 0) == ($2 | 0)) {
        SAFE_HEAP_STORE_i32_4_4(0, 97136, SAFE_HEAP_LOAD_i32_4_4(0, 97136) & __wasm_rotl_i32($1));
        break label$17;
       }
       SAFE_HEAP_STORE_i32_4_4($4, 12, $2);
       SAFE_HEAP_STORE_i32_4_4($2, 8, $4);
       break label$17;
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
      $1 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
      label$20 : {
       if (($1 | 0) != ($5 | 0)) {
        $2 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
        SAFE_HEAP_LOAD_i32_4_4(0, 97152);
        SAFE_HEAP_STORE_i32_4_4($2, 12, $1);
        SAFE_HEAP_STORE_i32_4_4($1, 8, $2);
        break label$20;
       }
       label$22 : {
        $4 = $5 + 20 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
        if ($2) {
         break label$22
        }
        $4 = $5 + 16 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
        if ($2) {
         break label$22
        }
        $1 = 0;
        break label$20;
       }
       while (1) {
        $6 = $4;
        $1 = $2;
        $4 = $1 + 20 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
        if ($2) {
         continue
        }
        $4 = $1 + 16 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($1, 16);
        if ($2) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
      }
      if (!$7) {
       break label$17
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
      $2 = ($4 << 2) + 97440 | 0;
      label$24 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($5 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($2, 0, $1);
        if ($1) {
         break label$24
        }
        SAFE_HEAP_STORE_i32_4_4(0, 97140, SAFE_HEAP_LOAD_i32_4_4(0, 97140) & __wasm_rotl_i32($4));
        break label$17;
       }
       SAFE_HEAP_STORE_i32_4_4($7 + ((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($5 | 0) ? 16 : 20) | 0, 0, $1);
       if (!$1) {
        break label$17
       }
      }
      SAFE_HEAP_STORE_i32_4_4($1, 24, $7);
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
      if ($2) {
       SAFE_HEAP_STORE_i32_4_4($1, 16, $2);
       SAFE_HEAP_STORE_i32_4_4($2, 24, $1);
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
      if (!$2) {
       break label$17
      }
      SAFE_HEAP_STORE_i32_4_4($1 + 20 | 0, 0, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 24, $1);
     }
     SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
     SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $0);
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) != ($3 | 0)) {
      break label$13
     }
     SAFE_HEAP_STORE_i32_4_4(0, 97144, $0);
     return;
    }
    SAFE_HEAP_STORE_i32_4_4($5, 4, $1 & -2);
    SAFE_HEAP_STORE_i32_4_4($3, 4, $0 | 1);
    SAFE_HEAP_STORE_i32_4_4($0 + $3 | 0, 0, $0);
   }
   if ($0 >>> 0 <= 255) {
    $1 = ($0 & -8) + 97176 | 0;
    $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97136);
    $0 = 1 << ($0 >>> 3);
    label$28 : {
     if (!($2 & $0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 97136, $0 | $2);
      $0 = $1;
      break label$28;
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($1, 8);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 8, $3);
    SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
    return;
   }
   $4 = 31;
   if ($0 >>> 0 <= 16777215) {
    $1 = Math_clz32($0 >>> 8 | 0);
    $4 = (($0 >>> 38 - $1 & 1) - ($1 << 1) | 0) + 62 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($3, 28, $4);
   SAFE_HEAP_STORE_i64_8_4($3, 16, 0, 0);
   $6 = ($4 << 2) + 97440 | 0;
   label$31 : {
    label$32 : {
     $2 = SAFE_HEAP_LOAD_i32_4_4(0, 97140);
     $1 = 1 << $4;
     label$33 : {
      if (!($2 & $1)) {
       SAFE_HEAP_STORE_i32_4_4(0, 97140, $1 | $2);
       SAFE_HEAP_STORE_i32_4_4($6, 0, $3);
       SAFE_HEAP_STORE_i32_4_4($3, 24, $6);
       break label$33;
      }
      $4 = $0 << (($4 | 0) != 31 ? 25 - ($4 >>> 1 | 0) | 0 : 0);
      $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
      while (1) {
       $2 = $1;
       if ((SAFE_HEAP_LOAD_i32_4_4($1, 4) & -8) == ($0 | 0)) {
        break label$32
       }
       $1 = $4 >>> 29 | 0;
       $4 = $4 << 1;
       $6 = ($2 + ($1 & 4) | 0) + 16 | 0;
       $1 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
       if ($1) {
        continue
       }
       break;
      };
      SAFE_HEAP_STORE_i32_4_4($6, 0, $3);
      SAFE_HEAP_STORE_i32_4_4($3, 24, $2);
     }
     SAFE_HEAP_STORE_i32_4_4($3, 12, $3);
     SAFE_HEAP_STORE_i32_4_4($3, 8, $3);
     break label$31;
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
    SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
    SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
    SAFE_HEAP_STORE_i32_4_4($3, 24, 0);
    SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4(0, 97168) - 1 | 0;
   SAFE_HEAP_STORE_i32_4_4(0, 97168, $0 ? $0 : -1);
  }
 }
 
 function dlrealloc($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0, $12 = 0;
  if (!$0) {
   return dlmalloc($1)
  }
  if ($1 >>> 0 >= 4294967232) {
   SAFE_HEAP_STORE_i32_4_4(95900, 0, 48);
   return 0;
  }
  $5 = $1 >>> 0 < 11 ? 16 : $1 + 11 & -8;
  $4 = $0 - 8 | 0;
  $9 = SAFE_HEAP_LOAD_i32_4_4($4, 4);
  $3 = $9 & -8;
  __inlined_func$try_realloc_chunk : {
   label$1 : {
    if (!($9 & 3)) {
     $2 = 0;
     if ($5 >>> 0 < 256) {
      break __inlined_func$try_realloc_chunk
     }
     if ($5 + 4 >>> 0 <= $3 >>> 0) {
      $2 = $4;
      if ($3 - $5 >>> 0 <= SAFE_HEAP_LOAD_i32_4_4(0, 97616) << 1 >>> 0) {
       break label$1
      }
     }
     $2 = 0;
     break __inlined_func$try_realloc_chunk;
    }
    $6 = $3 + $4 | 0;
    label$5 : {
     if ($3 >>> 0 >= $5 >>> 0) {
      $3 = $3 - $5 | 0;
      if ($3 >>> 0 < 16) {
       break label$5
      }
      SAFE_HEAP_STORE_i32_4_4($4, 4, $9 & 1 | $5 | 2);
      $2 = $4 + $5 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 4, $3 | 3);
      SAFE_HEAP_STORE_i32_4_4($6, 4, SAFE_HEAP_LOAD_i32_4_4($6, 4) | 1);
      dispose_chunk($2, $3);
      break label$5;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97160) | 0) == ($6 | 0)) {
      $7 = SAFE_HEAP_LOAD_i32_4_4(0, 97148) + $3 | 0;
      if ($7 >>> 0 <= $5 >>> 0) {
       break label$1
      }
      SAFE_HEAP_STORE_i32_4_4($4, 4, $9 & 1 | $5 | 2);
      $3 = $4 + $5 | 0;
      $2 = $7 - $5 | 0;
      SAFE_HEAP_STORE_i32_4_4($3, 4, $2 | 1);
      SAFE_HEAP_STORE_i32_4_4(0, 97148, $2);
      SAFE_HEAP_STORE_i32_4_4(0, 97160, $3);
      break label$5;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) == ($6 | 0)) {
      $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97144) + $3 | 0;
      if ($3 >>> 0 < $5 >>> 0) {
       break label$1
      }
      $2 = $3 - $5 | 0;
      label$9 : {
       if ($2 >>> 0 >= 16) {
        SAFE_HEAP_STORE_i32_4_4($4, 4, $9 & 1 | $5 | 2);
        $7 = $4 + $5 | 0;
        SAFE_HEAP_STORE_i32_4_4($7, 4, $2 | 1);
        $3 = $3 + $4 | 0;
        SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
        SAFE_HEAP_STORE_i32_4_4($3, 4, SAFE_HEAP_LOAD_i32_4_4($3, 4) & -2);
        break label$9;
       }
       SAFE_HEAP_STORE_i32_4_4($4, 4, $3 | $9 & 1 | 2);
       $2 = $3 + $4 | 0;
       SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 1);
       $2 = 0;
      }
      SAFE_HEAP_STORE_i32_4_4(0, 97156, $7);
      SAFE_HEAP_STORE_i32_4_4(0, 97144, $2);
      break label$5;
     }
     $7 = SAFE_HEAP_LOAD_i32_4_4($6, 4);
     if ($7 & 2) {
      break label$1
     }
     $10 = $3 + ($7 & -8) | 0;
     if ($10 >>> 0 < $5 >>> 0) {
      break label$1
     }
     $12 = $10 - $5 | 0;
     label$11 : {
      if ($7 >>> 0 <= 255) {
       $3 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
       $2 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
       if (($3 | 0) == ($2 | 0)) {
        SAFE_HEAP_STORE_i32_4_4(0, 97136, SAFE_HEAP_LOAD_i32_4_4(0, 97136) & __wasm_rotl_i32($7 >>> 3 | 0));
        break label$11;
       }
       SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
       SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
       break label$11;
      }
      $11 = SAFE_HEAP_LOAD_i32_4_4($6, 24);
      $8 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
      label$14 : {
       if (($6 | 0) != ($8 | 0)) {
        $2 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
        SAFE_HEAP_LOAD_i32_4_4(0, 97152);
        SAFE_HEAP_STORE_i32_4_4($2, 12, $8);
        SAFE_HEAP_STORE_i32_4_4($8, 8, $2);
        break label$14;
       }
       label$16 : {
        $7 = $6 + 20 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
        if ($2) {
         break label$16
        }
        $7 = $6 + 16 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
        if ($2) {
         break label$16
        }
        $8 = 0;
        break label$14;
       }
       while (1) {
        $3 = $7;
        $8 = $2;
        $7 = $2 + 20 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($7, 0);
        if ($2) {
         continue
        }
        $7 = $8 + 16 | 0;
        $2 = SAFE_HEAP_LOAD_i32_4_4($8, 16);
        if ($2) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($3, 0, 0);
      }
      if (!$11) {
       break label$11
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($6, 28);
      $2 = ($3 << 2) + 97440 | 0;
      label$18 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($2, 0) | 0) == ($6 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($2, 0, $8);
        if ($8) {
         break label$18
        }
        SAFE_HEAP_STORE_i32_4_4(0, 97140, SAFE_HEAP_LOAD_i32_4_4(0, 97140) & __wasm_rotl_i32($3));
        break label$11;
       }
       SAFE_HEAP_STORE_i32_4_4(((SAFE_HEAP_LOAD_i32_4_4($11, 16) | 0) == ($6 | 0) ? 16 : 20) + $11 | 0, 0, $8);
       if (!$8) {
        break label$11
       }
      }
      SAFE_HEAP_STORE_i32_4_4($8, 24, $11);
      $2 = SAFE_HEAP_LOAD_i32_4_4($6, 16);
      if ($2) {
       SAFE_HEAP_STORE_i32_4_4($8, 16, $2);
       SAFE_HEAP_STORE_i32_4_4($2, 24, $8);
      }
      $2 = SAFE_HEAP_LOAD_i32_4_4($6, 20);
      if (!$2) {
       break label$11
      }
      SAFE_HEAP_STORE_i32_4_4($8 + 20 | 0, 0, $2);
      SAFE_HEAP_STORE_i32_4_4($2, 24, $8);
     }
     if ($12 >>> 0 <= 15) {
      SAFE_HEAP_STORE_i32_4_4($4, 4, $9 & 1 | $10 | 2);
      $2 = $4 + $10 | 0;
      SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 1);
      break label$5;
     }
     SAFE_HEAP_STORE_i32_4_4($4, 4, $9 & 1 | $5 | 2);
     $3 = $4 + $5 | 0;
     SAFE_HEAP_STORE_i32_4_4($3, 4, $12 | 3);
     $2 = $4 + $10 | 0;
     SAFE_HEAP_STORE_i32_4_4($2, 4, SAFE_HEAP_LOAD_i32_4_4($2, 4) | 1);
     dispose_chunk($3, $12);
    }
    $2 = $4;
   }
  }
  if ($2) {
   return $2 + 8 | 0
  }
  $4 = dlmalloc($1);
  if (!$4) {
   return 0
  }
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 - 4 | 0, 0);
  $2 = ($2 & 3 ? -4 : -8) + ($2 & -8) | 0;
  __memcpy($4, $0, $1 >>> 0 > $2 >>> 0 ? $2 : $1);
  dlfree($0);
  return $4;
 }
 
 function dispose_chunk($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = $0 + $1 | 0;
  $2 = SAFE_HEAP_LOAD_i32_4_4($0, 4);
  label$1 : {
   label$2 : {
    if ($2 & 1) {
     break label$2
    }
    if (!($2 & 3)) {
     break label$1
    }
    $2 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
    $1 = $2 + $1 | 0;
    label$3 : {
     $0 = $0 - $2 | 0;
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) != ($0 | 0)) {
      if ($2 >>> 0 <= 255) {
       $2 = $2 >>> 3 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
       $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
       if (($4 | 0) != ($3 | 0)) {
        break label$3
       }
       SAFE_HEAP_STORE_i32_4_4(0, 97136, SAFE_HEAP_LOAD_i32_4_4(0, 97136) & __wasm_rotl_i32($2));
       break label$2;
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
      $2 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
      label$6 : {
       if (($0 | 0) != ($2 | 0)) {
        $3 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
        SAFE_HEAP_LOAD_i32_4_4(0, 97152);
        SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
        SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
        break label$6;
       }
       label$8 : {
        $4 = $0 + 20 | 0;
        $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
        if ($3) {
         break label$8
        }
        $4 = $0 + 16 | 0;
        $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
        if ($3) {
         break label$8
        }
        $2 = 0;
        break label$6;
       }
       while (1) {
        $6 = $4;
        $2 = $3;
        $4 = $2 + 20 | 0;
        $3 = SAFE_HEAP_LOAD_i32_4_4($4, 0);
        if ($3) {
         continue
        }
        $4 = $2 + 16 | 0;
        $3 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
        if ($3) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
      }
      if (!$7) {
       break label$2
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($0, 28);
      $3 = ($4 << 2) + 97440 | 0;
      label$10 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) == ($0 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
        if ($2) {
         break label$10
        }
        SAFE_HEAP_STORE_i32_4_4(0, 97140, SAFE_HEAP_LOAD_i32_4_4(0, 97140) & __wasm_rotl_i32($4));
        break label$2;
       }
       SAFE_HEAP_STORE_i32_4_4($7 + ((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($0 | 0) ? 16 : 20) | 0, 0, $2);
       if (!$2) {
        break label$2
       }
      }
      SAFE_HEAP_STORE_i32_4_4($2, 24, $7);
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
      if ($3) {
       SAFE_HEAP_STORE_i32_4_4($2, 16, $3);
       SAFE_HEAP_STORE_i32_4_4($3, 24, $2);
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($0, 20);
      if (!$3) {
       break label$2
      }
      SAFE_HEAP_STORE_i32_4_4($2 + 20 | 0, 0, $3);
      SAFE_HEAP_STORE_i32_4_4($3, 24, $2);
      break label$2;
     }
     $2 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
     if (($2 & 3) != 3) {
      break label$2
     }
     SAFE_HEAP_STORE_i32_4_4(0, 97144, $1);
     SAFE_HEAP_STORE_i32_4_4($5, 4, $2 & -2);
     SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
     SAFE_HEAP_STORE_i32_4_4($5, 0, $1);
     return;
    }
    SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
    SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
   }
   $2 = SAFE_HEAP_LOAD_i32_4_4($5, 4);
   label$13 : {
    if (!($2 & 2)) {
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97160) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 97160, $0);
      $1 = SAFE_HEAP_LOAD_i32_4_4(0, 97148) + $1 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 97148, $1);
      SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
      if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) != ($0 | 0)) {
       break label$1
      }
      SAFE_HEAP_STORE_i32_4_4(0, 97144, 0);
      SAFE_HEAP_STORE_i32_4_4(0, 97156, 0);
      return;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) == ($5 | 0)) {
      SAFE_HEAP_STORE_i32_4_4(0, 97156, $0);
      $1 = SAFE_HEAP_LOAD_i32_4_4(0, 97144) + $1 | 0;
      SAFE_HEAP_STORE_i32_4_4(0, 97144, $1);
      SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
      SAFE_HEAP_STORE_i32_4_4($0 + $1 | 0, 0, $1);
      return;
     }
     $1 = ($2 & -8) + $1 | 0;
     label$17 : {
      if ($2 >>> 0 <= 255) {
       $2 = $2 >>> 3 | 0;
       $4 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
       $3 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
       if (($4 | 0) == ($3 | 0)) {
        SAFE_HEAP_STORE_i32_4_4(0, 97136, SAFE_HEAP_LOAD_i32_4_4(0, 97136) & __wasm_rotl_i32($2));
        break label$17;
       }
       SAFE_HEAP_STORE_i32_4_4($4, 12, $3);
       SAFE_HEAP_STORE_i32_4_4($3, 8, $4);
       break label$17;
      }
      $7 = SAFE_HEAP_LOAD_i32_4_4($5, 24);
      $2 = SAFE_HEAP_LOAD_i32_4_4($5, 12);
      label$20 : {
       if (($2 | 0) != ($5 | 0)) {
        $3 = SAFE_HEAP_LOAD_i32_4_4($5, 8);
        SAFE_HEAP_LOAD_i32_4_4(0, 97152);
        SAFE_HEAP_STORE_i32_4_4($3, 12, $2);
        SAFE_HEAP_STORE_i32_4_4($2, 8, $3);
        break label$20;
       }
       label$22 : {
        $3 = $5 + 20 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
        if ($4) {
         break label$22
        }
        $3 = $5 + 16 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
        if ($4) {
         break label$22
        }
        $2 = 0;
        break label$20;
       }
       while (1) {
        $6 = $3;
        $2 = $4;
        $3 = $2 + 20 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($3, 0);
        if ($4) {
         continue
        }
        $3 = $2 + 16 | 0;
        $4 = SAFE_HEAP_LOAD_i32_4_4($2, 16);
        if ($4) {
         continue
        }
        break;
       };
       SAFE_HEAP_STORE_i32_4_4($6, 0, 0);
      }
      if (!$7) {
       break label$17
      }
      $4 = SAFE_HEAP_LOAD_i32_4_4($5, 28);
      $3 = ($4 << 2) + 97440 | 0;
      label$24 : {
       if ((SAFE_HEAP_LOAD_i32_4_4($3, 0) | 0) == ($5 | 0)) {
        SAFE_HEAP_STORE_i32_4_4($3, 0, $2);
        if ($2) {
         break label$24
        }
        SAFE_HEAP_STORE_i32_4_4(0, 97140, SAFE_HEAP_LOAD_i32_4_4(0, 97140) & __wasm_rotl_i32($4));
        break label$17;
       }
       SAFE_HEAP_STORE_i32_4_4($7 + ((SAFE_HEAP_LOAD_i32_4_4($7, 16) | 0) == ($5 | 0) ? 16 : 20) | 0, 0, $2);
       if (!$2) {
        break label$17
       }
      }
      SAFE_HEAP_STORE_i32_4_4($2, 24, $7);
      $3 = SAFE_HEAP_LOAD_i32_4_4($5, 16);
      if ($3) {
       SAFE_HEAP_STORE_i32_4_4($2, 16, $3);
       SAFE_HEAP_STORE_i32_4_4($3, 24, $2);
      }
      $3 = SAFE_HEAP_LOAD_i32_4_4($5, 20);
      if (!$3) {
       break label$17
      }
      SAFE_HEAP_STORE_i32_4_4($2 + 20 | 0, 0, $3);
      SAFE_HEAP_STORE_i32_4_4($3, 24, $2);
     }
     SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
     SAFE_HEAP_STORE_i32_4_4($0 + $1 | 0, 0, $1);
     if ((SAFE_HEAP_LOAD_i32_4_4(0, 97156) | 0) != ($0 | 0)) {
      break label$13
     }
     SAFE_HEAP_STORE_i32_4_4(0, 97144, $1);
     return;
    }
    SAFE_HEAP_STORE_i32_4_4($5, 4, $2 & -2);
    SAFE_HEAP_STORE_i32_4_4($0, 4, $1 | 1);
    SAFE_HEAP_STORE_i32_4_4($0 + $1 | 0, 0, $1);
   }
   if ($1 >>> 0 <= 255) {
    $2 = ($1 & -8) + 97176 | 0;
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97136);
    $1 = 1 << ($1 >>> 3);
    label$28 : {
     if (!($3 & $1)) {
      SAFE_HEAP_STORE_i32_4_4(0, 97136, $1 | $3);
      $1 = $2;
      break label$28;
     }
     $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
    }
    SAFE_HEAP_STORE_i32_4_4($2, 8, $0);
    SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
    SAFE_HEAP_STORE_i32_4_4($0, 12, $2);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
    return;
   }
   $4 = 31;
   if ($1 >>> 0 <= 16777215) {
    $2 = Math_clz32($1 >>> 8 | 0);
    $4 = (($1 >>> 38 - $2 & 1) - ($2 << 1) | 0) + 62 | 0;
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, $4);
   SAFE_HEAP_STORE_i64_8_4($0, 16, 0, 0);
   $6 = ($4 << 2) + 97440 | 0;
   label$31 : {
    $3 = SAFE_HEAP_LOAD_i32_4_4(0, 97140);
    $2 = 1 << $4;
    label$32 : {
     if (!($3 & $2)) {
      SAFE_HEAP_STORE_i32_4_4(0, 97140, $2 | $3);
      SAFE_HEAP_STORE_i32_4_4($6, 0, $0);
      SAFE_HEAP_STORE_i32_4_4($0, 24, $6);
      break label$32;
     }
     $4 = $1 << (($4 | 0) != 31 ? 25 - ($4 >>> 1 | 0) | 0 : 0);
     $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
     while (1) {
      $3 = $2;
      if ((SAFE_HEAP_LOAD_i32_4_4($2, 4) & -8) == ($1 | 0)) {
       break label$31
      }
      $2 = $4 >>> 29 | 0;
      $4 = $4 << 1;
      $6 = ($3 + ($2 & 4) | 0) + 16 | 0;
      $2 = SAFE_HEAP_LOAD_i32_4_4($6, 0);
      if ($2) {
       continue
      }
      break;
     };
     SAFE_HEAP_STORE_i32_4_4($6, 0, $0);
     SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
    }
    SAFE_HEAP_STORE_i32_4_4($0, 12, $0);
    SAFE_HEAP_STORE_i32_4_4($0, 8, $0);
    return;
   }
   $1 = SAFE_HEAP_LOAD_i32_4_4($3, 8);
   SAFE_HEAP_STORE_i32_4_4($1, 12, $0);
   SAFE_HEAP_STORE_i32_4_4($3, 8, $0);
   SAFE_HEAP_STORE_i32_4_4($0, 24, 0);
   SAFE_HEAP_STORE_i32_4_4($0, 12, $3);
   SAFE_HEAP_STORE_i32_4_4($0, 8, $1);
  }
 }
 
 function emscripten_get_sbrk_ptr() {
  return 73412;
 }
 
 function sbrk($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0;
  $1 = SAFE_HEAP_LOAD_i32_4_4(0, 73412);
  $2 = $0 + 7 & -8;
  $0 = $1 + $2 | 0;
  label$1 : {
   if (!!$2 & $0 >>> 0 <= $1 >>> 0) {
    break label$1
   }
   if ($0 >>> 0 > __wasm_memory_size() << 16 >>> 0) {
    if (!(emscripten_resize_heap($0 | 0) | 0)) {
     break label$1
    }
   }
   SAFE_HEAP_STORE_i32_4_4(0, 73412, $0);
   return $1 | 0;
  }
  SAFE_HEAP_STORE_i32_4_4(95900, 0, 48);
  return -1;
 }
 
 function __addtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
  $12 = __stack_pointer - 112 | 0;
  __stack_pointer = $12;
  $9 = $8 & 2147483647;
  label$1 : {
   label$2 : {
    $13 = $4 & 2147483647;
    $10 = !($1 | $2);
    if (!($3 | $13 ? $13 - 2147418112 >>> 0 < 2147549184 : $10)) {
     $11 = $9 - 2147418112 | 0;
     if (!$7 & ($11 | 0) == -2147418112 ? $5 | $6 : ($11 | 0) == -2147418112 & ($7 | 0) != 0 | $11 >>> 0 > 2147549184) {
      break label$2
     }
    }
    if (!(!$3 & ($13 | 0) == 2147418112 ? $10 : $13 >>> 0 < 2147418112)) {
     $7 = $3;
     $8 = $4 | 32768;
     $5 = $1;
     $6 = $2;
     break label$1;
    }
    if (!(!$7 & ($9 | 0) == 2147418112 ? !($5 | $6) : $9 >>> 0 < 2147418112)) {
     $8 = $8 | 32768;
     break label$1;
    }
    if (!($1 | $3 | ($13 ^ 2147418112 | $2))) {
     $9 = $3;
     $3 = !($1 ^ $5 | $3 ^ $7 | ($2 ^ $6 | $4 ^ $8 ^ -2147483648));
     $7 = $3 ? 0 : $9;
     $8 = $3 ? 2147450880 : $4;
     $5 = $3 ? 0 : $1;
     $6 = $3 ? 0 : $2;
     break label$1;
    }
    if (!($5 | $7 | ($9 ^ 2147418112 | $6))) {
     break label$1
    }
    if (!($1 | $3 | ($2 | $13))) {
     if ($5 | $7 | ($6 | $9)) {
      break label$1
     }
     $5 = $1 & $5;
     $6 = $2 & $6;
     $7 = $3 & $7;
     $8 = $4 & $8;
     break label$1;
    }
    if ($5 | $7 | ($6 | $9)) {
     break label$2
    }
    $5 = $1;
    $6 = $2;
    $7 = $3;
    $8 = $4;
    break label$1;
   }
   $11 = ($9 | 0) == ($13 | 0);
   $13 = $11 & ($3 | 0) == ($7 | 0) ? ($2 | 0) == ($6 | 0) & $1 >>> 0 < $5 >>> 0 | $2 >>> 0 < $6 >>> 0 : $11 & $3 >>> 0 < $7 >>> 0 | $9 >>> 0 > $13 >>> 0;
   $9 = $13;
   $14 = $9 ? $5 : $1;
   $16 = $9 ? $6 : $2;
   $10 = $9 ? $8 : $4;
   $17 = $10;
   $11 = $9 ? $7 : $3;
   $10 = $10 & 65535;
   $4 = $9 ? $4 : $8;
   $15 = $4;
   $4 = $4 >>> 16 & 32767;
   $9 = $17 >>> 16 & 32767;
   if (!$9) {
    $8 = !($11 | $10);
    $9 = Math_clz32($8 ? $16 : $10);
    $8 = (($9 | 0) == 32 ? Math_clz32($8 ? $14 : $11) + 32 | 0 : $9) + ($8 << 6) | 0;
    __ashlti3($12 + 96 | 0, $14, $16, $11, $10, $8 - 15 | 0);
    $11 = SAFE_HEAP_LOAD_i64_8_8($12 + 104 | 0, 0);
    $10 = i64toi32_i32$HIGH_BITS;
    $14 = SAFE_HEAP_LOAD_i64_8_8($12, 96);
    $16 = i64toi32_i32$HIGH_BITS;
    $9 = 16 - $8 | 0;
   }
   $5 = $13 ? $1 : $5;
   $6 = $13 ? $2 : $6;
   $7 = $13 ? $3 : $7;
   $8 = $15 & 65535;
   if (!$4) {
    $1 = !($7 | $8);
    $2 = Math_clz32($1 ? $6 : $8);
    $1 = (($2 | 0) == 32 ? Math_clz32($1 ? $5 : $7) + 32 | 0 : $2) + ($1 << 6) | 0;
    __ashlti3($12 + 80 | 0, $5, $6, $7, $8, $1 - 15 | 0);
    $7 = SAFE_HEAP_LOAD_i64_8_8($12 + 88 | 0, 0);
    $8 = i64toi32_i32$HIGH_BITS;
    $5 = SAFE_HEAP_LOAD_i64_8_8($12, 80);
    $6 = i64toi32_i32$HIGH_BITS;
    $4 = 16 - $1 | 0;
   }
   $1 = $7 << 3 | $6 >>> 29;
   $2 = $8 << 3 | $7 >>> 29 | 524288;
   $13 = $11 << 3 | $16 >>> 29;
   $7 = $10 << 3 | $11 >>> 29;
   $11 = $5 << 3;
   $10 = $6 << 3 | $5 >>> 29;
   $5 = $15 ^ $17;
   label$10 : {
    if (($4 | 0) == ($9 | 0)) {
     break label$10
    }
    $3 = $9 - $4 | 0;
    if ($3 >>> 0 > 127) {
     $1 = 0;
     $2 = 0;
     $11 = 1;
     $10 = 0;
     break label$10;
    }
    $4 = $12 - -64 | 0;
    __ashlti3($4, $11, $10, $1, $2, 128 - $3 | 0);
    $6 = $12 + 48 | 0;
    __lshrti3($6, $11, $10, $1, $2, $3);
    $1 = SAFE_HEAP_LOAD_i64_8_8($12, 48);
    $10 = i64toi32_i32$HIGH_BITS;
    $2 = SAFE_HEAP_LOAD_i64_8_8($12, 64);
    $3 = i64toi32_i32$HIGH_BITS;
    $11 = (SAFE_HEAP_LOAD_i64_8_8($4 + 8 | 0, 0) | $2 | (i64toi32_i32$HIGH_BITS | $3)) != 0 | $1;
    $1 = SAFE_HEAP_LOAD_i64_8_8($6 + 8 | 0, 0);
    $2 = i64toi32_i32$HIGH_BITS;
   }
   $15 = $7 | 524288;
   $4 = $14 << 3;
   $14 = $16 << 3 | $14 >>> 29;
   label$12 : {
    if (($5 | 0) < 0) {
     $5 = 0;
     $6 = 0;
     $7 = 0;
     $8 = 0;
     if (!($4 ^ $11 | $1 ^ $13 | ($10 ^ $14 | $2 ^ $15))) {
      break label$1
     }
     $3 = $4 - $11 | 0;
     $5 = $4 >>> 0 < $11 >>> 0;
     $4 = $14 - ($5 + $10 | 0) | 0;
     $6 = $13 - $1 | 0;
     $5 = $5 & ($10 | 0) == ($14 | 0) | $10 >>> 0 > $14 >>> 0;
     $7 = $6 - $5 | 0;
     $1 = ($15 - (($1 >>> 0 > $13 >>> 0) + $2 | 0) | 0) - ($5 >>> 0 > $6 >>> 0) | 0;
     $8 = $1;
     if ($1 >>> 0 > 524287) {
      break label$12
     }
     $1 = !($7 | $8);
     $2 = Math_clz32($1 ? $4 : $8);
     $1 = ((($2 | 0) == 32 ? Math_clz32($1 ? $3 : $7) + 32 | 0 : $2) + ($1 << 6) | 0) - 12 | 0;
     __ashlti3($12 + 32 | 0, $3, $4, $7, $8, $1);
     $9 = $9 - $1 | 0;
     $7 = SAFE_HEAP_LOAD_i64_8_8($12 + 40 | 0, 0);
     $8 = i64toi32_i32$HIGH_BITS;
     $3 = SAFE_HEAP_LOAD_i64_8_8($12, 32);
     $4 = i64toi32_i32$HIGH_BITS;
     break label$12;
    }
    $2 = $2 + $15 | 0;
    $1 = $1 + $13 | 0;
    $2 = $1 >>> 0 < $13 >>> 0 ? $2 + 1 | 0 : $2;
    $6 = $2 + 1 | 0;
    $5 = $2;
    $2 = $10 + $14 | 0;
    $3 = $4 + $11 | 0;
    $4 = $3 >>> 0 < $4 >>> 0 ? $2 + 1 | 0 : $2;
    $2 = ($10 | 0) == ($4 | 0) & $3 >>> 0 < $11 >>> 0 | $4 >>> 0 < $10 >>> 0;
    $7 = $1 + $2 | 0;
    $8 = $2 >>> 0 > $7 >>> 0 ? $6 : $5;
    if (!($8 & 1048576)) {
     break label$12
    }
    $3 = $11 & 1 | (($4 & 1) << 31 | $3 >>> 1);
    $4 = $7 << 31 | $4 >>> 1;
    $9 = $9 + 1 | 0;
    $7 = ($8 & 1) << 31 | $7 >>> 1;
    $8 = $8 >>> 1 | 0;
   }
   $1 = $17 & -2147483648;
   if (($9 | 0) >= 32767) {
    $7 = 0;
    $8 = $1 | 2147418112;
    $5 = 0;
    $6 = 0;
    break label$1;
   }
   $2 = 0;
   label$15 : {
    if (($9 | 0) > 0) {
     $2 = $9;
     break label$15;
    }
    $5 = $12 + 16 | 0;
    __ashlti3($5, $3, $4, $7, $8, $9 + 127 | 0);
    __lshrti3($12, $3, $4, $7, $8, 1 - $9 | 0);
    $3 = SAFE_HEAP_LOAD_i64_8_8($12, 0);
    $4 = i64toi32_i32$HIGH_BITS;
    $6 = SAFE_HEAP_LOAD_i64_8_8($12, 16);
    $7 = i64toi32_i32$HIGH_BITS;
    $3 = (SAFE_HEAP_LOAD_i64_8_8($5 + 8 | 0, 0) | $6 | (i64toi32_i32$HIGH_BITS | $7)) != 0 | $3;
    $7 = SAFE_HEAP_LOAD_i64_8_8($12 + 8 | 0, 0);
    $8 = i64toi32_i32$HIGH_BITS;
   }
   $1 = $1 | ($8 >>> 3 & 65535 | $2 << 16);
   $10 = $1 + 1 | 0;
   $9 = $1;
   $1 = $7 << 29 | $4 >>> 3;
   $2 = $3 & 7;
   $5 = $2 >>> 0 > 4;
   $6 = $5;
   $3 = ($4 & 7) << 29 | $3 >>> 3;
   $5 = $5 + $3 | 0;
   $4 = $6 >>> 0 > $5 >>> 0 ? $1 + 1 | 0 : $1;
   $6 = $4;
   $1 = ($4 | 0) == ($1 | 0) & $3 >>> 0 > $5 >>> 0 | $1 >>> 0 > $4 >>> 0;
   $7 = $1 + (($8 & 7) << 29 | $7 >>> 3) | 0;
   $8 = $1 >>> 0 > $7 >>> 0 ? $10 : $9;
   label$17 : {
    if (($2 | 0) == 4) {
     $1 = $6;
     $3 = $1 + 1 | 0;
     $2 = $5;
     $1 = $5 & 1;
     $5 = $5 + $1 | 0;
     $6 = $2 >>> 0 > $5 >>> 0 ? $3 : $6;
     $1 = !$6 & $1 >>> 0 > $5 >>> 0;
     $7 = $1 + $7 | 0;
     $8 = $1 >>> 0 > $7 >>> 0 ? $8 + 1 | 0 : $8;
     break label$17;
    }
    if (!$2) {
     break label$1
    }
   }
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $5, $6);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $7, $8);
  __stack_pointer = $12 + 112 | 0;
 }
 
 function __ashlti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0;
  label$1 : {
   if ($5 & 64) {
    $3 = $1;
    $4 = $5 + -64 | 0;
    $1 = $4 & 31;
    if (($4 & 63) >>> 0 >= 32) {
     $4 = $3 << $1;
     $3 = 0;
    } else {
     $4 = (1 << $1) - 1 & $3 >>> 32 - $1 | $2 << $1;
     $3 = $3 << $1;
    }
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   if (!$5) {
    break label$1
   }
   $7 = 64 - $5 | 0;
   $6 = $7 & 31;
   if (($7 & 63) >>> 0 >= 32) {
    $7 = 0;
    $8 = $2 >>> $6 | 0;
   } else {
    $7 = $2 >>> $6 | 0;
    $8 = ((1 << $6) - 1 & $2) << 32 - $6 | $1 >>> $6;
   }
   $6 = $3;
   $3 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $4 = $6 << $3;
    $3 = 0;
   } else {
    $4 = (1 << $3) - 1 & $6 >>> 32 - $3 | $4 << $3;
    $3 = $6 << $3;
   }
   $3 = $8 | $3;
   $4 = $4 | $7;
   $6 = $1;
   $1 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $7 = $6 << $1;
    $1 = 0;
   } else {
    $7 = (1 << $1) - 1 & $6 >>> 32 - $1 | $2 << $1;
    $1 = $6 << $1;
   }
   $2 = $7;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $4);
 }
 
 function __letf2($0, $1, $2, $3, $4, $5, $6, $7) {
  var $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  $10 = 1;
  $8 = $3 & 2147483647;
  $11 = $8;
  $9 = ($8 | 0) == 2147418112;
  label$1 : {
   if ($9 & !$2 ? $0 | $1 : $9 & ($2 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break label$1
   }
   $8 = $7 & 2147483647;
   $9 = ($8 | 0) == 2147418112;
   if ($9 & !$6 ? $4 | $5 : $9 & ($6 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $4 | ($2 | $6) | ($1 | $5 | ($8 | $11)))) {
    return 0
   }
   if (($3 & $7) >= 0) {
    $10 = -1;
    if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 < $4 >>> 0 | $1 >>> 0 < $5 >>> 0 : $2 >>> 0 < $6 >>> 0 & ($3 | 0) <= ($7 | 0) | ($3 | 0) < ($7 | 0)) {
     break label$1
    }
    return ($0 ^ $4 | $2 ^ $6 | ($1 ^ $5 | $3 ^ $7)) != 0;
   }
   $10 = -1;
   if (($2 | 0) == ($6 | 0) & ($3 | 0) == ($7 | 0) ? ($1 | 0) == ($5 | 0) & $0 >>> 0 > $4 >>> 0 | $1 >>> 0 > $5 >>> 0 : $2 >>> 0 > $6 >>> 0 & ($3 | 0) >= ($7 | 0) | ($3 | 0) > ($7 | 0)) {
    break label$1
   }
   $10 = ($0 ^ $4 | $2 ^ $6 | ($1 ^ $5 | $3 ^ $7)) != 0;
  }
  return $10;
 }
 
 function __getf2($0, $1, $2, $3, $4) {
  var $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = -1;
  $5 = $3 & 2147483647;
  $8 = $5;
  $6 = ($5 | 0) == 2147418112;
  label$1 : {
   if ($6 & !$2 ? $0 | $1 : $6 & ($2 | 0) != 0 | $5 >>> 0 > 2147418112) {
    break label$1
   }
   $5 = $4 & 2147483647;
   $6 = ($5 | 0) == 2147418112;
   if ($6 ? 0 : $6 & 0 | $5 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0 | $2 | ($1 | ($5 | $8)))) {
    return 0
   }
   if (($3 & $4) >= 0) {
    if (!$2 & ($3 | 0) == ($4 | 0) ? 0 : ($3 | 0) < ($4 | 0)) {
     break label$1
    }
    return ($0 | $2 | ($1 | $3 ^ $4)) != 0;
   }
   if (!$2 & ($3 | 0) == ($4 | 0) ? $1 | !$1 & ($0 | 0) != 0 : ($2 | 0) != 0 & ($3 | 0) >= ($4 | 0) | ($3 | 0) > ($4 | 0)) {
    break label$1
   }
   $7 = ($0 | $2 | ($1 | $3 ^ $4)) != 0;
  }
  return $7;
 }
 
 function __divtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
  $12 = __stack_pointer - 336 | 0;
  __stack_pointer = $12;
  $10 = $7;
  $11 = $8 & 65535;
  $14 = $3;
  $15 = $4 & 65535;
  $19 = ($4 ^ $8) & -2147483648;
  $16 = $8 >>> 16 & 32767;
  $24 = $4 >>> 16 & 32767;
  label$1 : {
   label$2 : {
    if ($24 - 32767 >>> 0 >= 4294934530) {
     if ($16 - 32767 >>> 0 > 4294934529) {
      break label$2
     }
    }
    $9 = $4 & 2147483647;
    if (!(!$3 & ($9 | 0) == 2147418112 ? !($1 | $2) : $9 >>> 0 < 2147418112)) {
     $22 = $3;
     $19 = $4 | 32768;
     break label$1;
    }
    $4 = $8 & 2147483647;
    if (!(!$7 & ($4 | 0) == 2147418112 ? !($5 | $6) : $4 >>> 0 < 2147418112)) {
     $22 = $7;
     $19 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break label$1;
    }
    if (!($1 | $3 | ($9 ^ 2147418112 | $2))) {
     if (!($5 | $7 | ($4 ^ 2147418112 | $6))) {
      $1 = 0;
      $2 = 0;
      $19 = 2147450880;
      break label$1;
     }
     $19 = $19 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    if (!($5 | $7 | ($4 ^ 2147418112 | $6))) {
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    if (!($1 | $3 | ($2 | $9))) {
     $1 = !($5 | $7 | ($4 | $6));
     $22 = $1 ? 0 : $22;
     $19 = $1 ? 2147450880 : $19;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    if (!($5 | $7 | ($4 | $6))) {
     $19 = $19 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    if ($9 >>> 0 <= 65535) {
     $3 = !($14 | $15);
     $8 = $3;
     $9 = $3 ? $1 : $14;
     $3 = $3 << 6;
     $8 = Math_clz32($8 ? $2 : $15);
     $3 = $3 + (($8 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $8) | 0;
     __ashlti3($12 + 320 | 0, $1, $2, $14, $15, $3 - 15 | 0);
     $17 = 16 - $3 | 0;
     $14 = SAFE_HEAP_LOAD_i64_8_8($12 + 328 | 0, 0);
     $15 = i64toi32_i32$HIGH_BITS;
     $1 = SAFE_HEAP_LOAD_i64_8_8($12, 320);
     $2 = i64toi32_i32$HIGH_BITS;
    }
    if ($4 >>> 0 > 65535) {
     break label$2
    }
    $3 = !($10 | $11);
    $7 = $3;
    $8 = $3 ? $5 : $10;
    $3 = $3 << 6;
    $7 = Math_clz32($7 ? $6 : $11);
    $3 = $3 + (($7 | 0) == 32 ? Math_clz32($8) + 32 | 0 : $7) | 0;
    __ashlti3($12 + 304 | 0, $5, $6, $10, $11, $3 - 15 | 0);
    $17 = ($3 + $17 | 0) - 16 | 0;
    $10 = SAFE_HEAP_LOAD_i64_8_8($12 + 312 | 0, 0);
    $11 = i64toi32_i32$HIGH_BITS;
    $5 = SAFE_HEAP_LOAD_i64_8_8($12, 304);
    $6 = i64toi32_i32$HIGH_BITS;
   }
   $4 = 0;
   $7 = $11 | 65536;
   $25 = $7;
   $26 = $10;
   $3 = $10;
   $9 = $7 << 15 | $3 >>> 17;
   $3 = $3 << 15 | $6 >>> 17;
   $7 = 0 - $3 | 0;
   $4 = $4 | $9;
   $8 = 1963258675 - ($4 + (($3 | 0) != 0) | 0) | 0;
   $9 = $12 + 288 | 0;
   __multi3($9, $3, $4, 0, 0, $7, $8, 0, 0);
   $10 = $12 + 272 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0);
   __multi3($10, 0 - $9 | 0, 0 - (i64toi32_i32$HIGH_BITS + (($9 | 0) != 0) | 0) | 0, 0, 0, $7, $8, 0, 0);
   SAFE_HEAP_LOAD_i64_8_8($12, 272);
   $11 = i64toi32_i32$HIGH_BITS >>> 31 | 0;
   $8 = 0;
   $7 = SAFE_HEAP_LOAD_i64_8_8($10 + 8 | 0, 0);
   $9 = i64toi32_i32$HIGH_BITS << 1 | $7 >>> 31;
   $10 = $12 + 256 | 0;
   $7 = $7 << 1 | $11;
   $8 = $8 | $9;
   __multi3($10, $7, $8, 0, 0, $3, $4, 0, 0);
   $13 = $12 + 240 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_8($10 + 8 | 0, 0);
   __multi3($13, $7, $8, 0, 0, 0 - $9 | 0, 0 - (i64toi32_i32$HIGH_BITS + (($9 | 0) != 0) | 0) | 0, 0, 0);
   SAFE_HEAP_LOAD_i64_8_8($12, 240);
   $11 = i64toi32_i32$HIGH_BITS >>> 31 | 0;
   $8 = 0;
   $7 = SAFE_HEAP_LOAD_i64_8_8($13 + 8 | 0, 0);
   $9 = i64toi32_i32$HIGH_BITS << 1 | $7 >>> 31;
   $10 = $12 + 224 | 0;
   $7 = $7 << 1 | $11;
   $8 = $8 | $9;
   __multi3($10, $7, $8, 0, 0, $3, $4, 0, 0);
   $13 = $12 + 208 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_8($10 + 8 | 0, 0);
   __multi3($13, $7, $8, 0, 0, 0 - $9 | 0, 0 - (i64toi32_i32$HIGH_BITS + (($9 | 0) != 0) | 0) | 0, 0, 0);
   SAFE_HEAP_LOAD_i64_8_8($12, 208);
   $11 = i64toi32_i32$HIGH_BITS >>> 31 | 0;
   $8 = 0;
   $7 = SAFE_HEAP_LOAD_i64_8_8($13 + 8 | 0, 0);
   $9 = i64toi32_i32$HIGH_BITS << 1 | $7 >>> 31;
   $10 = $12 + 192 | 0;
   $7 = $7 << 1 | $11;
   $8 = $8 | $9;
   __multi3($10, $7, $8, 0, 0, $3, $4, 0, 0);
   $11 = $12 + 176 | 0;
   $9 = SAFE_HEAP_LOAD_i64_8_8($10 + 8 | 0, 0);
   __multi3($11, $7, $8, 0, 0, 0 - $9 | 0, 0 - (i64toi32_i32$HIGH_BITS + (($9 | 0) != 0) | 0) | 0, 0, 0);
   $7 = $3;
   $10 = $4;
   SAFE_HEAP_LOAD_i64_8_8($12, 176);
   $4 = i64toi32_i32$HIGH_BITS >>> 31 | 0;
   $3 = SAFE_HEAP_LOAD_i64_8_8($11 + 8 | 0, 0);
   $4 = ($4 | $3 << 1) - 1 | 0;
   $8 = (i64toi32_i32$HIGH_BITS << 1 | $3 >>> 31) - 1 | 0;
   $3 = ($4 | 0) != -1 ? $8 + 1 | 0 : $8;
   __multi3($12 + 160 | 0, $7, $10, 0, 0, $4, $3, 0, 0);
   $9 = $12 + 144 | 0;
   __multi3($9, $5 << 15, $6 << 15 | $5 >>> 17, 0, 0, $4, $3, 0, 0);
   $29 = SAFE_HEAP_LOAD_i64_8_8($12 + 168 | 0, 0);
   $8 = i64toi32_i32$HIGH_BITS;
   $7 = SAFE_HEAP_LOAD_i64_8_8($12, 160);
   $13 = i64toi32_i32$HIGH_BITS;
   $11 = $7;
   $7 = SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0);
   $10 = $11 + $7 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $13 | 0;
   $9 = $7 >>> 0 > $10 >>> 0 ? $9 + 1 | 0 : $9;
   $7 = $9;
   $11 = ($13 | 0) == ($9 | 0) & $10 >>> 0 < $11 >>> 0 | $9 >>> 0 < $13 >>> 0;
   $9 = $8;
   $13 = $11 + $29 | 0;
   $8 = $13 >>> 0 < $11 >>> 0 ? $9 + 1 | 0 : $9;
   $11 = !$7 & $10 >>> 0 > 1 | ($7 | 0) != 0;
   $9 = $11 + $13 | 0;
   $8 = $11 >>> 0 > $9 >>> 0 ? $8 + 1 | 0 : $8;
   __multi3($12 + 112 | 0, $4, $3, 0, 0, 0 - $9 | 0, 0 - ((($9 | 0) != 0) + $8 | 0) | 0, 0, 0);
   $13 = $12 + 128 | 0;
   __multi3($13, 1 - $10 | 0, 0 - (($10 >>> 0 > 1) + $7 | 0) | 0, 0, 0, $4, $3, 0, 0);
   $34 = ($24 - $16 | 0) + $17 | 0;
   $3 = SAFE_HEAP_LOAD_i64_8_8($12, 112);
   $4 = i64toi32_i32$HIGH_BITS;
   $20 = $4;
   $7 = $3 << 1;
   $9 = $4 << 1 | $3 >>> 31;
   $11 = $9;
   $4 = $9;
   SAFE_HEAP_LOAD_i64_8_8($12, 128);
   $10 = i64toi32_i32$HIGH_BITS >>> 31 | 0;
   $8 = 0;
   $3 = SAFE_HEAP_LOAD_i64_8_8($13 + 8 | 0, 0);
   $9 = i64toi32_i32$HIGH_BITS;
   $27 = $9;
   $9 = $9 << 1 | $3 >>> 31;
   $10 = $3 << 1 | $10;
   $3 = $10 + $7 | 0;
   $9 = ($8 | $9) + $4 | 0;
   $9 = $3 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $8 = $9 - 1 | 0;
   $16 = $3;
   $10 = $3 - 13927 | 0;
   $8 = $10 >>> 0 < 4294953369 ? $8 + 1 | 0 : $8;
   $18 = $8;
   $24 = $8;
   $3 = 0;
   $8 = $15 | 65536;
   $35 = $8;
   $36 = $14;
   $9 = $14;
   $8 = $8 << 1 | $9 >>> 31;
   $38 = $9 << 1;
   $39 = $8;
   $28 = $8;
   $3 = __wasm_i64_mul($18, $3, $8, 0);
   $8 = i64toi32_i32$HIGH_BITS;
   $23 = $3;
   $21 = $8;
   $31 = $1 << 1;
   $9 = $2 << 1 | $1 >>> 31;
   $17 = $9;
   $8 = 0;
   $29 = $8;
   $13 = $8;
   $3 = SAFE_HEAP_LOAD_i64_8_8($12 + 120 | 0, 0);
   $8 = i64toi32_i32$HIGH_BITS << 1 | $3 >>> 31;
   $3 = $3 << 1 | $20 >>> 31;
   $20 = $27 >>> 31 | 0;
   $3 = $3 + $20 | 0;
   $9 = $8;
   $9 = $3 >>> 0 < $20 >>> 0 ? $9 + 1 | 0 : $9;
   $7 = ($4 | 0) == ($11 | 0) & $7 >>> 0 > $16 >>> 0 | $4 >>> 0 < $11 >>> 0;
   $8 = $7;
   $7 = $3 + $7 | 0;
   $9 = $8 >>> 0 > $7 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = ($4 | 0) == ($18 | 0) & $10 >>> 0 < $16 >>> 0 | $4 >>> 0 > $18 >>> 0;
   $4 = $3;
   $3 = $3 + $7 | 0;
   $9 = ($4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9) - 1 | 0;
   $4 = $3 - 1 | 0;
   $30 = ($4 | 0) != -1 ? $9 + 1 | 0 : $9;
   $18 = 0;
   $7 = __wasm_i64_mul($17, $13, $30, $18);
   $3 = $7 + $23 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $21 | 0;
   $16 = $3;
   $9 = $3 >>> 0 < $7 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $27 = ($21 | 0) == ($9 | 0) & $3 >>> 0 < $23 >>> 0 | $9 >>> 0 < $21 >>> 0;
   $9 = 0;
   $20 = $4;
   $37 = $2 >>> 31 | 0;
   $23 = $37 | $14 << 1;
   $21 = 0;
   $9 = __wasm_i64_mul($4, $9, $23, $21);
   $4 = $9 + $3 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $3 = $4 >>> 0 < $9 >>> 0 ? $3 + 1 | 0 : $3;
   $11 = $4;
   $9 = 0;
   $7 = $3;
   $3 = ($8 | 0) == ($3 | 0) & $4 >>> 0 < $16 >>> 0 | $3 >>> 0 < $8 >>> 0;
   $4 = $3;
   $3 = $3 + $27 | 0;
   $9 = $4 >>> 0 > $3 >>> 0 ? 1 : $9;
   $4 = __wasm_i64_mul($30, $18, $28, $13);
   $3 = $4 + $3 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $16 = $3;
   $14 = $3 >>> 0 < $4 >>> 0 ? $8 + 1 | 0 : $8;
   $3 = __wasm_i64_mul($20, $21, $28, $13);
   $15 = i64toi32_i32$HIGH_BITS;
   $9 = $3;
   $4 = __wasm_i64_mul($23, $21, $30, $18);
   $8 = $9 + $4 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $15 | 0;
   $3 = $4 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
   $4 = $3;
   $3 = ($15 | 0) == ($3 | 0) & $8 >>> 0 < $9 >>> 0 | $3 >>> 0 < $15 >>> 0;
   $15 = $16 + $4 | 0;
   $9 = $3 + $14 | 0;
   $3 = $15 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = 0;
   $14 = $4 + $11 | 0;
   $9 = $7 + $8 | 0;
   $9 = $4 >>> 0 > $14 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $7 = ($7 | 0) == ($9 | 0) & $11 >>> 0 > $14 >>> 0 | $7 >>> 0 > $9 >>> 0;
   $8 = $7;
   $7 = $7 + $15 | 0;
   $3 = $8 >>> 0 > $7 >>> 0 ? $3 + 1 | 0 : $3;
   $16 = $7;
   $27 = $10;
   $7 = __wasm_i64_mul($10, 0, $23, $21);
   $11 = i64toi32_i32$HIGH_BITS;
   $9 = $7;
   $10 = __wasm_i64_mul($24, $13, $17, $13);
   $7 = $9 + $10 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $11 | 0;
   $8 = $7 >>> 0 < $10 >>> 0 ? $8 + 1 | 0 : $8;
   $10 = $7;
   $15 = ($8 | 0) == ($11 | 0) & $7 >>> 0 < $9 >>> 0 | $8 >>> 0 < $11 >>> 0;
   $32 = $31 & -2;
   $7 = __wasm_i64_mul($20, $21, $32, 0);
   $11 = $10 + $7 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $9 = $7 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
   $7 = $9;
   $8 = ($8 | 0) == ($9 | 0) & $10 >>> 0 > $11 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $9 = 0;
   $10 = $8;
   $8 = $8 + $15 | 0;
   $9 = ($10 >>> 0 > $8 >>> 0 ? 1 : $9) + $4 | 0;
   $15 = $8 + $14 | 0;
   $9 = $15 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $4 = ($4 | 0) == ($9 | 0) & $14 >>> 0 > $15 >>> 0 | $4 >>> 0 > $9 >>> 0;
   $9 = $3;
   $3 = $4 + $16 | 0;
   $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $40 = $3;
   $16 = $9;
   $3 = __wasm_i64_mul($27, $22, $28, $13);
   $33 = i64toi32_i32$HIGH_BITS;
   $28 = $3;
   $9 = __wasm_i64_mul($32, $22, $30, $18);
   $4 = $3 + $9 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $33 | 0;
   $3 = $4 >>> 0 < $9 >>> 0 ? $3 + 1 | 0 : $3;
   $18 = $4;
   $14 = __wasm_i64_mul($24, $13, $23, $21);
   $4 = $4 + $14 | 0;
   $10 = $3;
   $9 = $3 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $4 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $23 = $4;
   $3 = __wasm_i64_mul($20, $21, $17, $13);
   $14 = $4 + $3 | 0;
   $13 = $9;
   $9 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $3 >>> 0 > $14 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $20 = 0;
   $3 = ($10 | 0) == ($13 | 0) & $18 >>> 0 > $23 >>> 0 | $10 >>> 0 > $13 >>> 0;
   $10 = $3 + (($10 | 0) == ($33 | 0) & $18 >>> 0 < $28 >>> 0 | $10 >>> 0 < $33 >>> 0) | 0;
   $3 = ($4 | 0) == ($13 | 0) & $14 >>> 0 < $23 >>> 0 | $4 >>> 0 < $13 >>> 0;
   $3 = $3 + $10 | 0;
   $13 = $4 + $15 | 0;
   $9 = ($3 | $20) + $8 | 0;
   $9 = $4 >>> 0 > $13 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $9;
   $3 = ($8 | 0) == ($9 | 0) & $13 >>> 0 < $15 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $9 = $16;
   $4 = $3;
   $3 = $3 + $40 | 0;
   $9 = $4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $20 = $3;
   $15 = $9;
   $3 = __wasm_i64_mul($24, $29, $32, $22);
   $18 = i64toi32_i32$HIGH_BITS;
   $16 = $3;
   $8 = __wasm_i64_mul($27, $22, $17, $29);
   $3 = $3 + $8 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $18 | 0;
   $9 = $3 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $24 = 0;
   $8 = ($9 | 0) == ($18 | 0) & $3 >>> 0 < $16 >>> 0 | $9 >>> 0 < $18 >>> 0;
   $16 = $9;
   $3 = $9 + $11 | 0;
   $9 = ($8 | $24) + $7 | 0;
   $9 = $3 >>> 0 < $16 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $11 = ($7 | 0) == ($9 | 0) & $3 >>> 0 < $11 >>> 0 | $7 >>> 0 > $9 >>> 0;
   $9 = $14;
   $14 = 0;
   $4 = $14 + $3 | 0;
   $9 = $8 + $9 | 0;
   $9 = $4 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = ($8 | 0) == ($9 | 0) & $3 >>> 0 > $4 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $9 = 0;
   $4 = $3;
   $3 = $3 + $11 | 0;
   $9 = ($4 >>> 0 > $3 >>> 0 ? 1 : $9) + $10 | 0;
   $4 = $3;
   $3 = $3 + $13 | 0;
   $9 = $4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $9;
   $7 = ($10 | 0) == ($9 | 0) & $3 >>> 0 < $13 >>> 0 | $9 >>> 0 < $10 >>> 0;
   $9 = $15;
   $8 = $7;
   $7 = $7 + $20 | 0;
   $9 = $8 >>> 0 > $7 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   label$12 : {
    if ($9 >>> 0 <= 131071) {
     $36 = $38 | $37;
     $35 = $21 | $39;
     $2 = $12 + 80 | 0;
     __multi3($2, $3, $4, $7, $8, $5, $6, $26, $25);
     $9 = $1 << 17;
     $1 = 0;
     $10 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
     $2 = $1 - $10 | 0;
     $10 = $9 - (i64toi32_i32$HIGH_BITS + ($1 >>> 0 < $10 >>> 0) | 0) | 0;
     $1 = SAFE_HEAP_LOAD_i64_8_8($12, 80);
     $9 = i64toi32_i32$HIGH_BITS;
     $11 = $9;
     $9 = ($1 | $9) != 0;
     $14 = $2 - $9 | 0;
     $15 = $10 - ($2 >>> 0 < $9 >>> 0) | 0;
     $13 = $34 + 16382 | 0;
     $11 = 0 - ((($1 | 0) != 0) + $11 | 0) | 0;
     $10 = 0 - $1 | 0;
     break label$12;
    }
    $9 = $12 + 96 | 0;
    $3 = ($4 & 1) << 31 | $3 >>> 1;
    $4 = $7 << 31 | $4 >>> 1;
    $7 = ($8 & 1) << 31 | $7 >>> 1;
    $8 = $8 >>> 1 | 0;
    __multi3($9, $3, $4, $7, $8, $5, $6, $26, $25);
    $11 = SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0);
    $10 = 0 - $11 | 0;
    $15 = ($1 << 16) - (i64toi32_i32$HIGH_BITS + ($11 >>> 0 > $14 >>> 0) | 0) | 0;
    $9 = SAFE_HEAP_LOAD_i64_8_8($12, 96);
    $14 = i64toi32_i32$HIGH_BITS;
    $17 = $14;
    $11 = ($9 | $14) != 0;
    $14 = $10 - $11 | 0;
    $15 = $15 - ($10 >>> 0 < $11 >>> 0) | 0;
    $13 = $34 + 16383 | 0;
    $11 = 0 - ((($9 | 0) != 0) + $17 | 0) | 0;
    $31 = $1;
    $17 = $2;
    $10 = 0 - $9 | 0;
   }
   if (($13 | 0) >= 32767) {
    $19 = $19 | 2147418112;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   label$15 : {
    if (($13 | 0) > 0) {
     $1 = $15 << 1 | $14 >>> 31;
     $14 = $14 << 1 | $11 >>> 31;
     $15 = $1;
     $1 = $7;
     $17 = $8 & 65535 | $13 << 16;
     $8 = $11 << 1 | $10 >>> 31;
     $7 = $10 << 1;
     break label$15;
    }
    if (($13 | 0) <= -113) {
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $1 = $12 - -64 | 0;
    __lshrti3($1, $3, $4, $7, $8, 1 - $13 | 0);
    $2 = $12 + 48 | 0;
    __ashlti3($2, $31, $17, $36, $35, $13 + 112 | 0);
    $8 = $12 + 32 | 0;
    $3 = SAFE_HEAP_LOAD_i64_8_8($12, 64);
    $4 = i64toi32_i32$HIGH_BITS;
    $1 = SAFE_HEAP_LOAD_i64_8_8($1 + 8 | 0, 0);
    $17 = i64toi32_i32$HIGH_BITS;
    __multi3($8, $5, $6, $26, $25, $3, $4, $1, $17);
    $7 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0);
    $14 = i64toi32_i32$HIGH_BITS;
    $2 = SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0);
    $11 = $2 << 1;
    $8 = i64toi32_i32$HIGH_BITS << 1 | $2 >>> 31;
    $2 = SAFE_HEAP_LOAD_i64_8_8($12, 32);
    $10 = i64toi32_i32$HIGH_BITS;
    $15 = $10 >>> 31 | $11;
    $11 = $7 - $15 | 0;
    $15 = $14 - (($7 >>> 0 < $15 >>> 0) + $8 | 0) | 0;
    $9 = SAFE_HEAP_LOAD_i64_8_8($12, 48);
    $7 = i64toi32_i32$HIGH_BITS;
    $13 = $7;
    $8 = $10 << 1 | $2 >>> 31;
    $2 = $2 << 1;
    $10 = $2 >>> 0 > $9 >>> 0;
    $7 = $10 & ($7 | 0) == ($8 | 0) | $7 >>> 0 < $8 >>> 0;
    $14 = $11 - $7 | 0;
    $15 = $15 - ($7 >>> 0 > $11 >>> 0) | 0;
    $8 = $13 - ($8 + $10 | 0) | 0;
    $7 = $9 - $2 | 0;
   }
   __multi3($12 + 16 | 0, $5, $6, $26, $25, 3, 0, 0, 0);
   __multi3($12, $5, $6, $26, $25, 5, 0, 0, 0);
   $11 = $1;
   $2 = $17;
   $9 = 0;
   $8 = $8 + $9 | 0;
   $10 = $3 & 1;
   $1 = $7 + $10 | 0;
   $8 = $1 >>> 0 < $7 >>> 0 ? $8 + 1 | 0 : $8;
   $7 = $1;
   $17 = ($6 | 0) == ($8 | 0) & $5 >>> 0 < $7 >>> 0 | $6 >>> 0 < $8 >>> 0;
   $1 = ($8 | 0) == ($9 | 0) & $7 >>> 0 < $10 >>> 0 | $8 >>> 0 < $9 >>> 0;
   $9 = $15;
   $6 = $1 + $14 | 0;
   $9 = $6 >>> 0 < $1 >>> 0 ? $9 + 1 | 0 : $9;
   $5 = $9;
   $1 = ($6 | 0) == ($26 | 0) & ($9 | 0) == ($25 | 0) ? $17 : ($25 | 0) == ($9 | 0) & $6 >>> 0 > $26 >>> 0 | $9 >>> 0 > $25 >>> 0;
   $9 = $4;
   $10 = $1 + $3 | 0;
   $9 = $10 >>> 0 < $1 >>> 0 ? $9 + 1 | 0 : $9;
   $1 = $9;
   $3 = ($4 | 0) == ($9 | 0) & $3 >>> 0 > $10 >>> 0 | $4 >>> 0 > $9 >>> 0;
   $9 = $2;
   $2 = $3 + $11 | 0;
   $9 = $2 >>> 0 < $3 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = SAFE_HEAP_LOAD_i64_8_8($12, 16);
   $4 = i64toi32_i32$HIGH_BITS;
   $4 = ($4 | 0) == ($8 | 0) & $3 >>> 0 < $7 >>> 0 | $4 >>> 0 < $8 >>> 0;
   $3 = SAFE_HEAP_LOAD_i64_8_8($12 + 24 | 0, 0);
   $16 = $4;
   $4 = i64toi32_i32$HIGH_BITS;
   $4 = $9 >>> 0 < 2147418112 & (($3 | 0) == ($6 | 0) & ($4 | 0) == ($5 | 0) ? $16 : ($4 | 0) == ($5 | 0) & $3 >>> 0 < $6 >>> 0 | $4 >>> 0 < $5 >>> 0);
   $3 = $1;
   $14 = $4 + $10 | 0;
   $3 = $14 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
   $1 = ($1 | 0) == ($3 | 0) & $10 >>> 0 > $14 >>> 0 | $1 >>> 0 > $3 >>> 0;
   $4 = $1;
   $1 = $1 + $2 | 0;
   $9 = $4 >>> 0 > $1 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $1;
   $4 = $9;
   $1 = SAFE_HEAP_LOAD_i64_8_8($12, 0);
   $2 = i64toi32_i32$HIGH_BITS;
   $2 = ($2 | 0) == ($8 | 0) & $1 >>> 0 < $7 >>> 0 | $2 >>> 0 < $8 >>> 0;
   $1 = SAFE_HEAP_LOAD_i64_8_8($12 + 8 | 0, 0);
   $7 = $2;
   $2 = i64toi32_i32$HIGH_BITS;
   $1 = $9 >>> 0 < 2147418112 & (($1 | 0) == ($6 | 0) & ($2 | 0) == ($5 | 0) ? $7 : ($2 | 0) == ($5 | 0) & $1 >>> 0 < $6 >>> 0 | $2 >>> 0 < $5 >>> 0);
   $9 = $3;
   $2 = $1;
   $1 = $1 + $14 | 0;
   $9 = $2 >>> 0 > $1 >>> 0 ? $9 + 1 | 0 : $9;
   $2 = $9;
   $5 = ($3 | 0) == ($9 | 0) & $1 >>> 0 < $14 >>> 0 | $3 >>> 0 > $9 >>> 0;
   $3 = $4;
   $4 = $5 + $10 | 0;
   $3 = $4 >>> 0 < $5 >>> 0 ? $3 + 1 | 0 : $3;
   $22 = $4 | $22;
   $19 = $3 | $19;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $22, $19);
  __stack_pointer = $12 + 336 | 0;
 }
 
 function __extenddftf2($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  wasm2js_scratch_store_f64(+$1);
  $6 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  $2 = $6 & 2147483647;
  label$1 : {
   if ($2 + -1048576 >>> 0 <= 2145386495) {
    $5 = $3 << 28;
    $8 = $2 >>> 4 | 0;
    $2 = ($2 & 15) << 28 | $3 >>> 4;
    $3 = $8 + 1006632960 | 0;
    break label$1;
   }
   if ($2 >>> 0 >= 2146435072) {
    $5 = $3 << 28;
    $2 = ($6 & 15) << 28 | $3 >>> 4;
    $3 = $6 >>> 4 | 2147418112;
    break label$1;
   }
   if (!($2 | $3)) {
    $2 = 0;
    $3 = 0;
    break label$1;
   }
   $7 = $2;
   $2 = $2 ? Math_clz32($2) : Math_clz32($3) + 32 | 0;
   __ashlti3($4, $3, $7, 0, 0, $2 + 49 | 0);
   $5 = 15372 - $2 << 16;
   $2 = SAFE_HEAP_LOAD_i64_8_8($4 + 8 | 0, 0);
   $3 = $5 | i64toi32_i32$HIGH_BITS ^ 65536;
   $7 = SAFE_HEAP_LOAD_i64_8_8($4, 0);
   $5 = i64toi32_i32$HIGH_BITS;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $7, $5);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $2, $6 & -2147483648 | $3);
  __stack_pointer = $4 + 16 | 0;
 }
 
 function __floatsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  label$1 : {
   if (!$1) {
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   $2 = $1 >> 31;
   $4 = ($2 ^ $1) - $2 | 0;
   $2 = Math_clz32($4);
   __ashlti3($3, $4, 0, 0, 0, $2 + 81 | 0);
   $4 = SAFE_HEAP_LOAD_i64_8_8($3 + 8 | 0, 0) + 0 | 0;
   $2 = (i64toi32_i32$HIGH_BITS ^ 65536) + (16414 - $2 << 16) | 0;
   $2 = $4 >>> 0 < $5 >>> 0 ? $2 + 1 | 0 : $2;
   $5 = $1 & -2147483648 | $2;
   $1 = SAFE_HEAP_LOAD_i64_8_8($3, 0);
   $2 = i64toi32_i32$HIGH_BITS;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $4, $5);
  __stack_pointer = $3 + 16 | 0;
 }
 
 function __floatunsitf($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  label$1 : {
   if (!$1) {
    $1 = 0;
    $3 = 0;
    break label$1;
   }
   $4 = $1;
   $1 = Math_clz32($1);
   __ashlti3($2, $4, 0, 0, 0, $1 + 81 | 0);
   $5 = SAFE_HEAP_LOAD_i64_8_8($2 + 8 | 0, 0) + 0 | 0;
   $1 = (i64toi32_i32$HIGH_BITS ^ 65536) + (16414 - $1 << 16) | 0;
   $4 = $5 >>> 0 < $3 >>> 0 ? $1 + 1 | 0 : $1;
   $1 = SAFE_HEAP_LOAD_i64_8_8($2, 0);
   $3 = i64toi32_i32$HIGH_BITS;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $3);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $5, $4);
  __stack_pointer = $2 + 16 | 0;
 }
 
 function __lshrti3($0, $1, $2, $3, $4, $5) {
  var $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  label$1 : {
   if ($5 & 64) {
    $2 = $5 + -64 | 0;
    $1 = $2 & 31;
    if (($2 & 63) >>> 0 >= 32) {
     $2 = 0;
     $1 = $4 >>> $1 | 0;
    } else {
     $2 = $4 >>> $1 | 0;
     $1 = ((1 << $1) - 1 & $4) << 32 - $1 | $3 >>> $1;
    }
    $3 = 0;
    $4 = 0;
    break label$1;
   }
   if (!$5) {
    break label$1
   }
   $8 = $3;
   $7 = 64 - $5 | 0;
   $6 = $7 & 31;
   if (($7 & 63) >>> 0 >= 32) {
    $7 = $8 << $6;
    $9 = 0;
   } else {
    $7 = (1 << $6) - 1 & $8 >>> 32 - $6 | $4 << $6;
    $9 = $8 << $6;
   }
   $8 = $1;
   $1 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $6 = 0;
    $1 = $2 >>> $1 | 0;
   } else {
    $6 = $2 >>> $1 | 0;
    $1 = ((1 << $1) - 1 & $2) << 32 - $1 | $8 >>> $1;
   }
   $1 = $9 | $1;
   $2 = $6 | $7;
   $6 = $3;
   $3 = $5 & 31;
   if (($5 & 63) >>> 0 >= 32) {
    $7 = 0;
    $3 = $4 >>> $3 | 0;
   } else {
    $7 = $4 >>> $3 | 0;
    $3 = ((1 << $3) - 1 & $4) << 32 - $3 | $6 >>> $3;
   }
   $4 = $7;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $3, $4);
 }
 
 function __multf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
  $12 = __stack_pointer - 96 | 0;
  __stack_pointer = $12;
  $14 = $8 & 65535;
  $13 = ($4 ^ $8) & -2147483648;
  $15 = $4 & 65535;
  $26 = $15;
  $42 = $8 >>> 16 & 32767;
  $43 = $4 >>> 16 & 32767;
  label$1 : {
   label$2 : {
    if ($43 - 32767 >>> 0 >= 4294934530) {
     if ($42 - 32767 >>> 0 > 4294934529) {
      break label$2
     }
    }
    $10 = $4 & 2147483647;
    $16 = $10;
    $9 = $3;
    if (!(!$9 & ($10 | 0) == 2147418112 ? !($1 | $2) : $10 >>> 0 < 2147418112)) {
     $17 = $3;
     $13 = $4 | 32768;
     break label$1;
    }
    $10 = $8 & 2147483647;
    $19 = $10;
    $4 = $7;
    if (!(!$4 & ($10 | 0) == 2147418112 ? !($5 | $6) : $10 >>> 0 < 2147418112)) {
     $17 = $7;
     $13 = $8 | 32768;
     $1 = $5;
     $2 = $6;
     break label$1;
    }
    if (!($1 | $9 | ($16 ^ 2147418112 | $2))) {
     if (!($4 | $5 | ($6 | $19))) {
      $13 = 2147450880;
      $1 = 0;
      $2 = 0;
      break label$1;
     }
     $13 = $13 | 2147418112;
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    if (!($4 | $5 | ($19 ^ 2147418112 | $6))) {
     $4 = $1 | $9;
     $3 = $2 | $16;
     $1 = 0;
     $2 = 0;
     if (!($3 | $4)) {
      $13 = 2147450880;
      break label$1;
     }
     $13 = $13 | 2147418112;
     break label$1;
    }
    if (!($1 | $9 | ($2 | $16))) {
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    if (!($4 | $5 | ($6 | $19))) {
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    if ($16 >>> 0 <= 65535) {
     $9 = !($3 | $15);
     $8 = $9 ? $1 : $3;
     $10 = $9 << 6;
     $4 = Math_clz32($8) + 32 | 0;
     $8 = Math_clz32($9 ? $2 : $15);
     $8 = $10 + (($8 | 0) == 32 ? $4 : $8) | 0;
     __ashlti3($12 + 80 | 0, $1, $2, $3, $15, $8 - 15 | 0);
     $36 = 16 - $8 | 0;
     $3 = SAFE_HEAP_LOAD_i64_8_8($12 + 88 | 0, 0);
     $26 = i64toi32_i32$HIGH_BITS;
     $1 = SAFE_HEAP_LOAD_i64_8_8($12, 80);
     $2 = i64toi32_i32$HIGH_BITS;
    }
    if ($19 >>> 0 > 65535) {
     break label$2
    }
    $8 = !($7 | $14);
    $4 = $8 ? $5 : $7;
    $15 = $8 << 6;
    $9 = Math_clz32($4) + 32 | 0;
    $4 = Math_clz32($8 ? $6 : $14);
    $4 = $15 + (($4 | 0) == 32 ? $9 : $4) | 0;
    __ashlti3($12 - -64 | 0, $5, $6, $7, $14, $4 - 15 | 0);
    $36 = ($36 - $4 | 0) + 16 | 0;
    $7 = SAFE_HEAP_LOAD_i64_8_8($12 + 72 | 0, 0);
    $14 = i64toi32_i32$HIGH_BITS;
    $5 = SAFE_HEAP_LOAD_i64_8_8($12, 64);
    $6 = i64toi32_i32$HIGH_BITS;
   }
   $4 = $6 << 15 | $5 >>> 17;
   $8 = $5 << 15;
   $5 = 0;
   $20 = $8 & -32768;
   $37 = $2;
   $19 = __wasm_i64_mul($20, $5, $2, 0);
   $5 = i64toi32_i32$HIGH_BITS;
   $25 = $5;
   $38 = $4;
   $23 = $1;
   $1 = __wasm_i64_mul($4, 0, $1, 0);
   $8 = $1 + $19 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $5 | 0;
   $5 = $1 >>> 0 > $8 >>> 0 ? $5 + 1 | 0 : $5;
   $2 = 0;
   $1 = __wasm_i64_mul($20, $21, $23, $21);
   $16 = $2 + $1 | 0;
   $4 = $8;
   $9 = $4 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $1 >>> 0 > $16 >>> 0 ? $9 + 1 | 0 : $9;
   $15 = $9;
   $22 = ($4 | 0) == ($9 | 0) & $2 >>> 0 > $16 >>> 0 | $4 >>> 0 > $9 >>> 0;
   $39 = $3;
   $27 = __wasm_i64_mul($20, $21, $3, 0);
   $40 = i64toi32_i32$HIGH_BITS;
   $1 = __wasm_i64_mul($38, $24, $37, $24);
   $18 = $1 + $27 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $40 | 0;
   $9 = $1 >>> 0 > $18 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $9;
   $1 = $14 << 15 | $7 >>> 17;
   $28 = $7 << 15 | $6 >>> 17;
   $3 = __wasm_i64_mul($28, 0, $23, $21);
   $29 = $3 + $18 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $3 >>> 0 > $29 >>> 0 ? $9 + 1 | 0 : $9;
   $30 = $9;
   $3 = $9;
   $2 = 0;
   $9 = ($5 | 0) == ($25 | 0) & $4 >>> 0 < $19 >>> 0 | $5 >>> 0 < $25 >>> 0;
   $31 = $5 + $29 | 0;
   $4 = ($2 | $9) + $3 | 0;
   $4 = $5 >>> 0 > $31 >>> 0 ? $4 + 1 | 0 : $4;
   $8 = $4;
   $6 = $31;
   $32 = $26 | 65536;
   $26 = __wasm_i64_mul($20, $21, $32, $11);
   $41 = i64toi32_i32$HIGH_BITS;
   $3 = __wasm_i64_mul($38, $24, $39, $11);
   $33 = $3 + $26 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $41 | 0;
   $9 = $3 >>> 0 > $33 >>> 0 ? $9 + 1 | 0 : $9;
   $7 = $9;
   $34 = $1 | -2147483648;
   $1 = __wasm_i64_mul($34, 0, $23, $21);
   $20 = $1 + $33 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $1 >>> 0 > $20 >>> 0 ? $9 + 1 | 0 : $9;
   $1 = __wasm_i64_mul($28, $11, $37, $24);
   $25 = $1 + $20 | 0;
   $35 = $9;
   $5 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $19 = $1 >>> 0 > $25 >>> 0 ? $5 + 1 | 0 : $5;
   $1 = 0;
   $23 = $1 + $6 | 0;
   $9 = $4 + $25 | 0;
   $21 = $1 >>> 0 > $23 >>> 0 ? $9 + 1 | 0 : $9;
   $4 = $21;
   $1 = $22 + $23 | 0;
   $2 = $1 >>> 0 < $23 >>> 0 ? $4 + 1 | 0 : $4;
   $22 = (($42 + $43 | 0) + $36 | 0) - 16383 | 0;
   $4 = __wasm_i64_mul($34, $11, $37, $24);
   $6 = i64toi32_i32$HIGH_BITS;
   $5 = __wasm_i64_mul($38, $24, $32, $11);
   $3 = $5 + $4 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $6 | 0;
   $9 = $3 >>> 0 < $5 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = ($6 | 0) == ($9 | 0) & $3 >>> 0 < $4 >>> 0 | $6 >>> 0 > $9 >>> 0;
   $6 = __wasm_i64_mul($28, $11, $39, $11);
   $4 = $6 + $3 | 0;
   $5 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $5 = $4 >>> 0 < $6 >>> 0 ? $5 + 1 | 0 : $5;
   $6 = $5;
   $3 = ($9 | 0) == ($5 | 0) & $3 >>> 0 > $4 >>> 0 | $5 >>> 0 < $9 >>> 0;
   $9 = 0;
   $5 = $3;
   $3 = $3 + $14 | 0;
   $9 = $5 >>> 0 > $3 >>> 0 ? 1 : $9;
   $5 = $3;
   $3 = __wasm_i64_mul($34, $11, $32, $11);
   $5 = $5 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $24 = $5;
   $3 = $3 >>> 0 > $5 >>> 0 ? $9 + 1 | 0 : $9;
   $9 = ($10 | 0) == ($40 | 0) & $18 >>> 0 < $27 >>> 0 | $10 >>> 0 < $40 >>> 0;
   $5 = 0;
   $10 = ($10 | 0) == ($30 | 0) & $18 >>> 0 > $29 >>> 0 | $10 >>> 0 > $30 >>> 0;
   $14 = $10;
   $10 = $9 + $10 | 0;
   $9 = ($14 >>> 0 > $10 >>> 0 ? 1 : $5) + $6 | 0;
   $5 = $4 + $10 | 0;
   $9 = $5 >>> 0 < $10 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = $9;
   $27 = $5;
   $4 = ($6 | 0) == ($9 | 0) & $4 >>> 0 > $5 >>> 0 | $6 >>> 0 > $9 >>> 0;
   $9 = $3;
   $3 = $4 + $24 | 0;
   $9 = $3 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $3;
   $5 = __wasm_i64_mul($28, $11, $32, $11);
   $18 = i64toi32_i32$HIGH_BITS;
   $3 = __wasm_i64_mul($34, $11, $39, $11);
   $6 = $3 + $5 | 0;
   $4 = i64toi32_i32$HIGH_BITS + $18 | 0;
   $4 = $3 >>> 0 > $6 >>> 0 ? $4 + 1 | 0 : $4;
   $9 = (($18 | 0) == ($4 | 0) & $5 >>> 0 > $6 >>> 0 | $4 >>> 0 < $18 >>> 0) + $9 | 0;
   $10 = $4 + $10 | 0;
   $18 = $10;
   $5 = $10 >>> 0 < $4 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = 0;
   $11 = $3 + $27 | 0;
   $9 = $6 + $14 | 0;
   $4 = $5;
   $9 = $3 >>> 0 > $11 >>> 0 ? $9 + 1 | 0 : $9;
   $10 = $9;
   $3 = ($14 | 0) == ($9 | 0) & $11 >>> 0 < $27 >>> 0 | $9 >>> 0 < $14 >>> 0;
   $5 = $3;
   $3 = $3 + $18 | 0;
   $4 = $5 >>> 0 > $3 >>> 0 ? $4 + 1 | 0 : $4;
   $14 = $3;
   $3 = $4;
   $6 = $19;
   $4 = 0;
   $5 = ($7 | 0) == ($41 | 0) & $26 >>> 0 > $33 >>> 0 | $7 >>> 0 < $41 >>> 0;
   $7 = ($7 | 0) == ($35 | 0) & $20 >>> 0 < $33 >>> 0 | $7 >>> 0 > $35 >>> 0;
   $5 = $5 + $7 | 0;
   $7 = ($6 | 0) == ($35 | 0) & $20 >>> 0 > $25 >>> 0 | $6 >>> 0 < $35 >>> 0;
   $5 = $5 + $7 | 0;
   $7 = $6;
   $6 = $6 + $11 | 0;
   $4 = ($4 | $5) + $10 | 0;
   $9 = $3;
   $4 = $6 >>> 0 < $7 >>> 0 ? $4 + 1 | 0 : $4;
   $7 = $4;
   $4 = ($10 | 0) == ($4 | 0) & $6 >>> 0 < $11 >>> 0 | $4 >>> 0 < $10 >>> 0;
   $3 = $4 + $14 | 0;
   $9 = $4 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $11 = $3;
   $5 = $9;
   $9 = 0;
   $4 = ($8 | 0) == ($21 | 0) & $23 >>> 0 < $31 >>> 0 | $8 >>> 0 > $21 >>> 0;
   $3 = $4 + (($8 | 0) == ($30 | 0) & $29 >>> 0 > $31 >>> 0 | $8 >>> 0 < $30 >>> 0) | 0;
   $4 = ($4 >>> 0 > $3 >>> 0 ? 1 : $9) + $7 | 0;
   $9 = $5;
   $5 = $3;
   $3 = $3 + $6 | 0;
   $4 = $5 >>> 0 > $3 >>> 0 ? $4 + 1 | 0 : $4;
   $6 = ($7 | 0) == ($4 | 0) & $3 >>> 0 < $6 >>> 0 | $4 >>> 0 < $7 >>> 0;
   $7 = $6 + $11 | 0;
   $9 = $6 >>> 0 > $7 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   label$13 : {
    if ($9 & 65536) {
     $22 = $22 + 1 | 0;
     break label$13;
    }
    $11 = $15 >>> 31 | 0;
    $5 = 0;
    $9 = $8 << 1 | $7 >>> 31;
    $7 = $7 << 1 | $4 >>> 31;
    $8 = $9;
    $9 = $4 << 1 | $3 >>> 31;
    $3 = $3 << 1 | $2 >>> 31;
    $4 = $9;
    $9 = $15 << 1 | $16 >>> 31;
    $16 = $16 << 1;
    $15 = $9;
    $9 = $2 << 1 | $1 >>> 31;
    $1 = $1 << 1 | $11;
    $2 = $5 | $9;
   }
   if (($22 | 0) >= 32767) {
    $13 = $13 | 2147418112;
    $1 = 0;
    $2 = 0;
    break label$1;
   }
   label$16 : {
    if (($22 | 0) <= 0) {
     $6 = 1 - $22 | 0;
     if ($6 >>> 0 <= 127) {
      $9 = $12 + 48 | 0;
      $5 = $22 + 127 | 0;
      __ashlti3($9, $16, $15, $1, $2, $5);
      $11 = $12 + 32 | 0;
      __ashlti3($11, $3, $4, $7, $8, $5);
      $5 = $12 + 16 | 0;
      __lshrti3($5, $16, $15, $1, $2, $6);
      __lshrti3($12, $3, $4, $7, $8, $6);
      $2 = SAFE_HEAP_LOAD_i64_8_8($12, 32);
      $1 = i64toi32_i32$HIGH_BITS;
      $3 = SAFE_HEAP_LOAD_i64_8_8($12, 16) | $2;
      $15 = i64toi32_i32$HIGH_BITS | $1;
      $2 = SAFE_HEAP_LOAD_i64_8_8($12, 48);
      $1 = i64toi32_i32$HIGH_BITS;
      $16 = (SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0) | $2 | (i64toi32_i32$HIGH_BITS | $1)) != 0 | $3;
      $1 = SAFE_HEAP_LOAD_i64_8_8($11 + 8 | 0, 0);
      $2 = i64toi32_i32$HIGH_BITS;
      $1 = SAFE_HEAP_LOAD_i64_8_8($5 + 8 | 0, 0) | $1;
      $2 = i64toi32_i32$HIGH_BITS | $2;
      $7 = SAFE_HEAP_LOAD_i64_8_8($12 + 8 | 0, 0);
      $8 = i64toi32_i32$HIGH_BITS;
      $3 = SAFE_HEAP_LOAD_i64_8_8($12, 0);
      $4 = i64toi32_i32$HIGH_BITS;
      break label$16;
     }
     $1 = 0;
     $2 = 0;
     break label$1;
    }
    $8 = $8 & 65535 | $22 << 16;
   }
   $17 = $7 | $17;
   $13 = $8 | $13;
   if (!(!$1 & ($2 | 0) == -2147483648 ? !($16 | $15) : ($2 | 0) >= 0)) {
    $1 = $3 + 1 | 0;
    $4 = $1 ? $4 : $4 + 1 | 0;
    $2 = $4;
    $3 = !($4 | $1);
    $4 = $13;
    $17 = $3 + $17 | 0;
    $13 = $17 >>> 0 < $3 >>> 0 ? $4 + 1 | 0 : $4;
    break label$1;
   }
   if ($1 | $16 | ($2 ^ -2147483648 | $15)) {
    $1 = $3;
    $2 = $4;
    break label$1;
   }
   $9 = $13;
   $1 = $3 & 1;
   $2 = $1;
   $1 = $1 + $3 | 0;
   $2 = $2 >>> 0 > $1 >>> 0 ? $4 + 1 | 0 : $4;
   $3 = ($4 | 0) == ($2 | 0) & $1 >>> 0 < $3 >>> 0 | $2 >>> 0 < $4 >>> 0;
   $17 = $3 + $17 | 0;
   $13 = $3 >>> 0 > $17 >>> 0 ? $9 + 1 | 0 : $9;
  }
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
  SAFE_HEAP_STORE_i64_8_8($0, 8, $17, $13);
  __stack_pointer = $12 + 96 | 0;
 }
 
 function __multi3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0, $10 = 0, $11 = 0;
  $8 = __wasm_i64_mul($7, $8, $1, $2);
  $7 = i64toi32_i32$HIGH_BITS;
  $3 = __wasm_i64_mul($3, $4, $5, $6);
  $8 = $3 + $8 | 0;
  $4 = i64toi32_i32$HIGH_BITS + $7 | 0;
  $4 = $3 >>> 0 > $8 >>> 0 ? $4 + 1 | 0 : $4;
  $9 = $6;
  $3 = 0;
  $7 = $8;
  $8 = $2;
  $6 = 0;
  $2 = __wasm_i64_mul($9, $3, $8, $6);
  $3 = $7 + $2 | 0;
  $7 = i64toi32_i32$HIGH_BITS + $4 | 0;
  $10 = $3;
  $4 = $2 >>> 0 > $3 >>> 0 ? $7 + 1 | 0 : $7;
  $2 = $5;
  $3 = $1;
  $5 = __wasm_i64_mul($2, 0, $3, 0);
  $1 = i64toi32_i32$HIGH_BITS;
  $7 = 0;
  $8 = __wasm_i64_mul($2, $7, $8, $6);
  $1 = $1 + $8 | 0;
  $2 = i64toi32_i32$HIGH_BITS + $7 | 0;
  $2 = $1 >>> 0 < $8 >>> 0 ? $2 + 1 | 0 : $2;
  $8 = $2 + $10 | 0;
  $2 = $2 >>> 0 > $8 >>> 0 ? $4 + 1 | 0 : $4;
  $4 = __wasm_i64_mul($9, $6, $3, $11);
  $1 = $4 + $1 | 0;
  $3 = i64toi32_i32$HIGH_BITS;
  $6 = $1 >>> 0 < $4 >>> 0 ? $3 + 1 | 0 : $3;
  $8 = $6 + $8 | 0;
  SAFE_HEAP_STORE_i64_8_8($0, 8, $8, $6 >>> 0 > $8 >>> 0 ? $2 + 1 | 0 : $2);
  SAFE_HEAP_STORE_i64_8_8($0, 0, $5, $1);
 }
 
 function __subtf3($0, $1, $2, $3, $4, $5, $6, $7, $8) {
  var $9 = 0;
  $9 = __stack_pointer - 16 | 0;
  __stack_pointer = $9;
  __addtf3($9, $1, $2, $3, $4, $5, $6, $7, $8 ^ -2147483648);
  $1 = SAFE_HEAP_LOAD_i64_8_8($9, 0);
  $2 = i64toi32_i32$HIGH_BITS;
  SAFE_HEAP_STORE_i64_8_8($0, 8, SAFE_HEAP_LOAD_i64_8_8($9 + 8 | 0, 0), i64toi32_i32$HIGH_BITS);
  SAFE_HEAP_STORE_i64_8_8($0, 0, $1, $2);
  __stack_pointer = $9 + 16 | 0;
 }
 
 function __trunctfdf2($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $7 = __stack_pointer - 32 | 0;
  __stack_pointer = $7;
  $4 = $3 & 2147483647;
  $6 = $4;
  $5 = $4 - 1140785152 | 0;
  $4 = $4 - 1006698496 | 0;
  label$1 : {
   if (!(($4 | 0) == ($5 | 0) | $5 >>> 0 < $4 >>> 0)) {
    $4 = $2 << 4 | $1 >>> 28;
    $2 = $3 << 4 | $2 >>> 28;
    $1 = $1 & 268435455;
    if (!(!$0 & ($1 | 0) == 134217728 | $1 >>> 0 < 134217728)) {
     $5 = $2 + 1073741824 | 0;
     $4 = $4 + 1 | 0;
     $5 = $4 ? $5 : $5 + 1 | 0;
     break label$1;
    }
    $5 = $2 + 1073741824 | 0;
    if ($0 | ($1 | 0) != 134217728) {
     break label$1
    }
    $0 = $4 & 1;
    $4 = $0 + $4 | 0;
    $5 = $0 >>> 0 > $4 >>> 0 ? $5 + 1 | 0 : $5;
    break label$1;
   }
   if (!(!$2 & ($6 | 0) == 2147418112 ? !($0 | $1) : $6 >>> 0 < 2147418112)) {
    $4 = $2 << 4 | $1 >>> 28;
    $5 = ($3 << 4 | $2 >>> 28) & 524287 | 2146959360;
    break label$1;
   }
   $4 = 0;
   $5 = 2146435072;
   if ($6 >>> 0 > 1140785151) {
    break label$1
   }
   $5 = 0;
   $6 = $6 >>> 16 | 0;
   if ($6 >>> 0 < 15249) {
    break label$1
   }
   $8 = $7 + 16 | 0;
   $4 = $3 & 65535 | 65536;
   __ashlti3($8, $0, $1, $2, $4, $6 - 15233 | 0);
   __lshrti3($7, $0, $1, $2, $4, 15361 - $6 | 0);
   $2 = SAFE_HEAP_LOAD_i64_8_8($7, 0);
   $1 = i64toi32_i32$HIGH_BITS;
   $6 = $1;
   $0 = $1 >>> 28 | 0;
   $1 = SAFE_HEAP_LOAD_i64_8_8($7 + 8 | 0, 0);
   $4 = $0 | $1 << 4;
   $5 = i64toi32_i32$HIGH_BITS << 4 | $1 >>> 28;
   $0 = SAFE_HEAP_LOAD_i64_8_8($7, 16);
   $1 = i64toi32_i32$HIGH_BITS;
   $1 = (SAFE_HEAP_LOAD_i64_8_8($8 + 8 | 0, 0) | $0 | (i64toi32_i32$HIGH_BITS | $1)) != 0 | $2;
   $0 = $6 & 268435455;
   if (!(!$1 & ($0 | 0) == 134217728 | $0 >>> 0 < 134217728)) {
    $4 = $4 + 1 | 0;
    $5 = $4 ? $5 : $5 + 1 | 0;
    break label$1;
   }
   if ($1 | ($0 | 0) != 134217728) {
    break label$1
   }
   $0 = $4;
   $4 = $4 + ($4 & 1) | 0;
   $5 = $0 >>> 0 > $4 >>> 0 ? $5 + 1 | 0 : $5;
  }
  __stack_pointer = $7 + 32 | 0;
  wasm2js_scratch_store_i32(0, $4 | 0);
  wasm2js_scratch_store_i32(1, $3 & -2147483648 | $5);
  return +wasm2js_scratch_load_f64();
 }
 
 function operator_20new_28unsigned_20long_29($0) {
  var $1 = 0;
  $0 = $0 >>> 0 <= 1 ? 1 : $0;
  label$1 : {
   while (1) {
    $1 = dlmalloc($0);
    if ($1) {
     break label$1
    }
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v15007_5d_28_29(97640);
    if ($1) {
     FUNCTION_TABLE[$1 | 0]();
     continue;
    }
    break;
   };
   abort();
   wasm2js_trap();
  }
  return $1;
 }
 
 function operator_20delete_28void__2c_20std__align_val_t_29($0) {
  dlfree($0);
 }
 
 function std__exception__exception_5babi_v15007_5d_28_29($0) {
  SAFE_HEAP_STORE_i32_4_4($0, 0, 73024);
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v15007_5d_28_29_20const($0) {
  return SAFE_HEAP_LOAD_i32_1_U_1($0, 11) >>> 7 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_v15007_5d_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v15007_5d_28_29_20const($0)) {
   return SAFE_HEAP_LOAD_i32_4_4($0, 4)
  }
  return SAFE_HEAP_LOAD_i32_1_U_1($0, 11) & 127;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_v15007_5d_28_29_20const($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v15007_5d_28_29_20const($0)) {
   $0 = (SAFE_HEAP_LOAD_i32_4_4($0, 8) & 2147483647) - 1 | 0
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_v15007_5d_28_29($0) {
  if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v15007_5d_28_29_20const($0)) {
   return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v15007_5d_28_29($0)
  }
  return $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v15007_5d_28_29($0) {
  return SAFE_HEAP_LOAD_i32_4_4($0, 0);
 }
 
 function std____2__char_traits_char___assign_28char__2c_20char_20const__29($0, $1) {
  SAFE_HEAP_STORE_i32_1_1($0, 0, SAFE_HEAP_LOAD_i32_1_U_1($1, 0));
 }
 
 function unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($0, $1) {
  var $2 = 0, $3 = 0;
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0) >>> 0 < SAFE_HEAP_LOAD_i32_4_4($1, 0) >>> 0;
  __stack_pointer = $2 + 16 | 0;
  return $3 ? $1 : $0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_v15007_5d_28unsigned_20long_29($0) {
  var $1 = 0;
  if ($0 >>> 0 >= 11) {
   $1 = $0 + 16 & -16;
   $0 = $1 - 1 | 0;
   $0 = ($0 | 0) == 11 ? $1 : $0;
  } else {
   $0 = 10
  }
  return $0;
 }
 
 function std____2____allocation_result_std____2__allocator_traits_std____2__allocator_char____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($0, $1, $2) {
  $1 = operator_20new_28unsigned_20long_29($2);
  SAFE_HEAP_STORE_i32_4_4($0, 4, $2);
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 }
 
 function std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
  $5 = __stack_pointer - 16 | 0;
  __stack_pointer = $5;
  $3 = __stack_pointer - 32 | 0;
  __stack_pointer = $3;
  $4 = __stack_pointer - 16 | 0;
  __stack_pointer = $4;
  SAFE_HEAP_STORE_i32_4_4($4, 12, $1);
  SAFE_HEAP_STORE_i32_4_4($4, 8, $1 + $2 | 0);
  std____2__pair_char_20const__2c_20char____pair_5babi_v15007_5d_char_20const__2c_20char__2c_20_28void__290__28char_20const____2c_20char____29($3 + 24 | 0, $4 + 12 | 0, $4 + 8 | 0);
  __stack_pointer = $4 + 16 | 0;
  $4 = SAFE_HEAP_LOAD_i32_4_4($3, 24);
  $7 = SAFE_HEAP_LOAD_i32_4_4($3, 28);
  $2 = __stack_pointer - 16 | 0;
  __stack_pointer = $2;
  $6 = $7 - $4 | 0;
  if (($4 | 0) != ($7 | 0)) {
   memmove($0, $4, $6)
  }
  SAFE_HEAP_STORE_i32_4_4($2, 12, $4 + $6 | 0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, $0 + $6 | 0);
  std____2__pair_std____2____unwrap_ref_decay_char_20const____type_2c_20std____2____unwrap_ref_decay_char____type__20std____2__make_pair_5babi_v15007_5d_char_20const__2c_20char___28char_20const____2c_20char____29($3 + 16 | 0, $2 + 12 | 0, $2 + 8 | 0);
  __stack_pointer = $2 + 16 | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 12, char__20std____2____rewrap_iter_5babi_v15007_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($1, SAFE_HEAP_LOAD_i32_4_4($3, 16)));
  SAFE_HEAP_STORE_i32_4_4($3, 8, char__20std____2____rewrap_iter_5babi_v15007_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($0, SAFE_HEAP_LOAD_i32_4_4($3, 20)));
  std____2__pair_std____2____unwrap_ref_decay_char_20const____type_2c_20std____2____unwrap_ref_decay_char____type__20std____2__make_pair_5babi_v15007_5d_char_20const__2c_20char___28char_20const____2c_20char____29($5 + 8 | 0, $3 + 12 | 0, $3 + 8 | 0);
  __stack_pointer = $3 + 32 | 0;
  SAFE_HEAP_LOAD_i32_4_4($5, 12);
  __stack_pointer = $5 + 16 | 0;
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_v15007_5d_28char__29($0, $1) {
  SAFE_HEAP_STORE_i32_4_4($0, 0, $1);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) & -2147483648 | $1 & 2147483647);
  SAFE_HEAP_STORE_i32_4_4($0, 8, SAFE_HEAP_LOAD_i32_4_4($0, 8) | -2147483648);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  SAFE_HEAP_STORE_i32_4_4($0, 4, $1);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_v15007_5d_28unsigned_20long_29($0, $1) {
  SAFE_HEAP_STORE_i32_1_1($0, 11, SAFE_HEAP_LOAD_i32_1_U_1($0, 11) & 128 | $1);
  SAFE_HEAP_STORE_i32_1_1($0, 11, SAFE_HEAP_LOAD_i32_1_U_1($0, 11) & 127);
 }
 
 function std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____reserve_28unsigned_20long_29($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
  $3 = __stack_pointer - 16 | 0;
  __stack_pointer = $3;
  SAFE_HEAP_STORE_i32_4_4($3, 12, $1);
  if ($1 >>> 0 <= 2147483631) {
   label$2 : {
    if (std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_v15007_5d_28_29_20const($0) >>> 0 >= $1 >>> 0) {
     break label$2
    }
    SAFE_HEAP_STORE_i32_4_4($3, 8, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_v15007_5d_28_29_20const($0));
    $1 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______recommend_5babi_v15007_5d_28unsigned_20long_29(SAFE_HEAP_LOAD_i32_4_4(unsigned_20long_20const__20std____2__max_5babi_v15007_5d_unsigned_20long__28unsigned_20long_20const__2c_20unsigned_20long_20const__29($3 + 12 | 0, $3 + 8 | 0), 0));
    if ((std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_v15007_5d_28_29_20const($0) | 0) == ($1 | 0)) {
     break label$2
    }
    $2 = __stack_pointer - 16 | 0;
    __stack_pointer = $2;
    $4 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____capacity_5babi_v15007_5d_28_29_20const($0);
    $6 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_v15007_5d_28_29_20const($0);
    $7 = $1 >>> 0 < 11;
    label$1 : {
     label$20 : {
      if ($7) {
       $8 = 1;
       $4 = $1 + 1 | 0;
       $1 = $0;
       $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v15007_5d_28_29($0);
       break label$20;
      }
      label$4 : {
       if ($1 >>> 0 > $4 >>> 0) {
        std____2____allocation_result_std____2__allocator_traits_std____2__allocator_char____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($2 + 8 | 0, $0, $1 + 1 | 0);
        $4 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
        $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
        break label$4;
       }
       std____2____allocation_result_std____2__allocator_traits_std____2__allocator_char____pointer__20std____2____allocate_at_least_5babi_v15007_5d_std____2__allocator_char___28std____2__allocator_char___2c_20unsigned_20long_29($2 + 8 | 0, $0, $1 + 1 | 0);
       $1 = SAFE_HEAP_LOAD_i32_4_4($2, 8);
       if (!$1) {
        break label$1
       }
       $4 = SAFE_HEAP_LOAD_i32_4_4($2, 12);
      }
      $8 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______is_long_5babi_v15007_5d_28_29_20const($0);
      $5 = std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_pointer_5babi_v15007_5d_28_29($0);
     }
     std____2__char_traits_char___copy_28char__2c_20char_20const__2c_20unsigned_20long_29($1, $5, std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char____size_5babi_v15007_5d_28_29_20const($0) + 1 | 0);
     if ($8) {
      dlfree($5)
     }
     label$7 : {
      if (!$7) {
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_cap_5babi_v15007_5d_28unsigned_20long_29($0, $4);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_size_5babi_v15007_5d_28unsigned_20long_29($0, $6);
       std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_long_pointer_5babi_v15007_5d_28char__29($0, $1);
       break label$7;
      }
      std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______set_short_size_5babi_v15007_5d_28unsigned_20long_29($0, $6);
     }
    }
    __stack_pointer = $2 + 16 | 0;
   }
   __stack_pointer = $3 + 16 | 0;
   return;
  }
  std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______throw_length_error_5babi_v15007_5d_28_29_20const();
  wasm2js_trap();
 }
 
 function char__20std____2____rewrap_iter_5babi_v15007_5d_char__2c_20char__2c_20std____2____unwrap_iter_impl_char__2c_20true___28char__2c_20char__29($0, $1) {
  return ($1 - $0 | 0) + $0 | 0;
 }
 
 function std____2__pair_std____2____unwrap_ref_decay_char_20const____type_2c_20std____2____unwrap_ref_decay_char____type__20std____2__make_pair_5babi_v15007_5d_char_20const__2c_20char___28char_20const____2c_20char____29($0, $1, $2) {
  std____2__pair_char_20const__2c_20char____pair_5babi_v15007_5d_char_20const__2c_20char__2c_20_28void__290__28char_20const____2c_20char____29($0, $1, $2);
 }
 
 function std____2__pair_char_20const__2c_20char____pair_5babi_v15007_5d_char_20const__2c_20char__2c_20_28void__290__28char_20const____2c_20char____29($0, $1, $2) {
  SAFE_HEAP_STORE_i32_4_4($0, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0));
  SAFE_HEAP_STORE_i32_4_4($0, 4, SAFE_HEAP_LOAD_i32_4_4($2, 0));
 }
 
 function __cxa_allocate_exception($0) {
  return dlmalloc($0 + 80 | 0) + 80 | 0;
 }
 
 function __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  return is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0) | 0;
 }
 
 function is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $2) {
  if (!$2) {
   return (SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) == (SAFE_HEAP_LOAD_i32_4_4($1, 4) | 0)
  }
  if (($0 | 0) == ($1 | 0)) {
   return 1
  }
  return !strcmp(std__type_info__name_5babi_v15007_5d_28_29_20const($0), std__type_info__name_5babi_v15007_5d_28_29_20const($1));
 }
 
 function std__type_info__name_5babi_v15007_5d_28_29_20const($0) {
  return SAFE_HEAP_LOAD_i32_4_4($0, 4);
 }
 
 function __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  $3 = __stack_pointer + -64 | 0;
  __stack_pointer = $3;
  $4 = 1;
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, 0)) {
    break label$1
   }
   $4 = 0;
   if (!$1) {
    break label$1
   }
   $1 = __dynamic_cast($1, 72304);
   $4 = 0;
   if (!$1) {
    break label$1
   }
   memset($3 + 12 | 0, 0, 52);
   SAFE_HEAP_STORE_i32_4_4($3, 56, 1);
   SAFE_HEAP_STORE_i32_4_4($3, 20, -1);
   SAFE_HEAP_STORE_i32_4_4($3, 16, $0);
   SAFE_HEAP_STORE_i32_4_4($3, 8, $1);
   ((((wasm2js_i32$1 = $1, wasm2js_i32$2 = $3 + 8 | 0), wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 0)), wasm2js_i32$4 = 1), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($1, 0), 28) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
   $0 = SAFE_HEAP_LOAD_i32_4_4($3, 32);
   if (($0 | 0) == 1) {
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($3, 24))
   }
   $4 = ($0 | 0) == 1;
  }
  $0 = $4;
  __stack_pointer = $3 - -64 | 0;
  return $0 | 0;
 }
 
 function __dynamic_cast($0, $1) {
  var $2 = 0, $3 = 0, $4 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0, wasm2js_i32$5 = 0, wasm2js_i32$6 = 0, wasm2js_i32$7 = 0, wasm2js_i32$8 = 0;
  $2 = __stack_pointer + -64 | 0;
  __stack_pointer = $2;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 0);
  $4 = SAFE_HEAP_LOAD_i32_4_4($3 - 4 | 0, 0);
  $3 = SAFE_HEAP_LOAD_i32_4_4($3 - 8 | 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 32 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 40 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2 + 48 | 0, 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_1($2 + 55 | 0, 0, 0);
  SAFE_HEAP_STORE_i64_8_4($2, 24, 0, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 20, 0);
  SAFE_HEAP_STORE_i32_4_4($2, 16, 72256);
  SAFE_HEAP_STORE_i32_4_4($2, 12, $0);
  SAFE_HEAP_STORE_i32_4_4($2, 8, $1);
  $0 = $0 + $3 | 0;
  $3 = 0;
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($4, $1, 0)) {
    SAFE_HEAP_STORE_i32_4_4($2, 56, 1);
    FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 0), 20) | 0]($4, $2 + 8 | 0, $0, $0, 1, 0);
    $3 = (SAFE_HEAP_LOAD_i32_4_4($2, 32) | 0) == 1 ? $0 : 0;
    break label$1;
   }
   FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($4, 0), 24) | 0]($4, $2 + 8 | 0, $0, 1, 0);
   label$3 : {
    switch (SAFE_HEAP_LOAD_i32_4_4($2, 44) | 0) {
    case 0:
     $3 = (wasm2js_i32$0 = (wasm2js_i32$3 = (wasm2js_i32$6 = SAFE_HEAP_LOAD_i32_4_4($2, 28), wasm2js_i32$7 = 0, wasm2js_i32$8 = (SAFE_HEAP_LOAD_i32_4_4($2, 40) | 0) == 1, wasm2js_i32$8 ? wasm2js_i32$6 : wasm2js_i32$7), wasm2js_i32$4 = 0, wasm2js_i32$5 = (SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0) == 1, wasm2js_i32$5 ? wasm2js_i32$3 : wasm2js_i32$4), wasm2js_i32$1 = 0, wasm2js_i32$2 = (SAFE_HEAP_LOAD_i32_4_4($2, 48) | 0) == 1, wasm2js_i32$2 ? wasm2js_i32$0 : wasm2js_i32$1);
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($2, 32) | 0) != 1) {
    if (SAFE_HEAP_LOAD_i32_4_4($2, 48)) {
     break label$1
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 36) | 0) != 1) {
     break label$1
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($2, 40) | 0) != 1) {
     break label$1
    }
   }
   $3 = SAFE_HEAP_LOAD_i32_4_4($2, 24);
  }
  __stack_pointer = $2 - -64 | 0;
  return $3;
 }
 
 function __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2) {
  var $3 = 0;
  $3 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
  if (!$3) {
   SAFE_HEAP_STORE_i32_4_4($0, 36, 1);
   SAFE_HEAP_STORE_i32_4_4($0, 24, $2);
   SAFE_HEAP_STORE_i32_4_4($0, 16, $1);
   return;
  }
  label$2 : {
   if (($1 | 0) == ($3 | 0)) {
    if ((SAFE_HEAP_LOAD_i32_4_4($0, 24) | 0) != 2) {
     break label$2
    }
    SAFE_HEAP_STORE_i32_4_4($0, 24, $2);
    return;
   }
   SAFE_HEAP_STORE_i32_1_1($0, 54, 1);
   SAFE_HEAP_STORE_i32_4_4($0, 24, 2);
   SAFE_HEAP_STORE_i32_4_4($0, 36, SAFE_HEAP_LOAD_i32_4_4($0, 36) + 1 | 0);
  }
 }
 
 function __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3)
  }
 }
 
 function __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($0, $1, $2, $3) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), 0)) {
   __cxxabiv1____class_type_info__process_found_base_class_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const($1, $2, $3);
   return;
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0]($0, $1, $2, $3);
 }
 
 function __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const($0, $1, $2) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, wasm2js_i32$0 = 0, wasm2js_i32$1 = 0, wasm2js_i32$2 = 0, wasm2js_i32$3 = 0, wasm2js_i32$4 = 0;
  $5 = __stack_pointer + -64 | 0;
  __stack_pointer = $5;
  label$1 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($1, 72640, 0)) {
    SAFE_HEAP_STORE_i32_4_4($2, 0, 0);
    $4 = 1;
    break label$1;
   }
   label$10 : {
    if (SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 24) {
     $3 = 1
    } else {
     if (!$1) {
      break label$10
     }
     $3 = __dynamic_cast($1, 72352);
     if (!$3) {
      break label$10
     }
     $3 = (SAFE_HEAP_LOAD_i32_1_U_1($3, 8) & 24) != 0;
    }
    $6 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, $1, $3);
   }
   if ($6) {
    $4 = 1;
    $0 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    if (!$0) {
     break label$1
    }
    SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($0, 0));
    break label$1;
   }
   label$4 : {
    if (!$1) {
     break label$4
    }
    $6 = __dynamic_cast($1, 72400);
    if (!$6) {
     break label$1
    }
    $1 = SAFE_HEAP_LOAD_i32_4_4($2, 0);
    if ($1) {
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($1, 0))
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($6, 8);
    $1 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
    if ($3 & ($1 ^ -1) & 7 | $1 & ($3 ^ -1) & 96) {
     break label$1
    }
    $4 = 1;
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 12), SAFE_HEAP_LOAD_i32_4_4($6, 12), 0)) {
     break label$1
    }
    if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 12), 72608, 0)) {
     $0 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
     if (!$0) {
      break label$1
     }
     $4 = !__dynamic_cast($0, 72452);
     break label$1;
    }
    $3 = SAFE_HEAP_LOAD_i32_4_4($0, 12);
    if (!$3) {
     break label$4
    }
    $4 = 0;
    $1 = __dynamic_cast($3, 72400);
    if ($1) {
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
      break label$1
     }
     $0 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
     $2 = 0;
     __inlined_func$__cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const : {
      label$11 : {
       while (1) {
        $4 = 0;
        if (!$0) {
         break __inlined_func$__cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const
        }
        $3 = __dynamic_cast($0, 72400);
        if (!$3) {
         break label$11
        }
        if (SAFE_HEAP_LOAD_i32_4_4($3, 8) & (SAFE_HEAP_LOAD_i32_4_4($1, 8) ^ -1)) {
         break label$11
        }
        $4 = 1;
        if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($1, 12), SAFE_HEAP_LOAD_i32_4_4($3, 12), 0)) {
         break __inlined_func$__cxxabiv1____pointer_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const
        }
        if (!(SAFE_HEAP_LOAD_i32_1_U_1($1, 8) & 1)) {
         break label$11
        }
        $0 = SAFE_HEAP_LOAD_i32_4_4($1, 12);
        if (!$0) {
         break label$11
        }
        $1 = __dynamic_cast($0, 72400);
        if ($1) {
         $0 = SAFE_HEAP_LOAD_i32_4_4($3, 12);
         continue;
        }
        break;
       };
       $0 = __dynamic_cast($0, 72512);
       if (!$0) {
        break label$11
       }
       $2 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, SAFE_HEAP_LOAD_i32_4_4($3, 12));
      }
      $4 = $2;
     }
     break label$1;
    }
    $1 = __dynamic_cast($3, 72512);
    if ($1) {
     if (!(SAFE_HEAP_LOAD_i32_1_U_1($0, 8) & 1)) {
      break label$1
     }
     $4 = __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($1, SAFE_HEAP_LOAD_i32_4_4($6, 12));
     break label$1;
    }
    $1 = __dynamic_cast($3, 72304);
    if (!$1) {
     break label$1
    }
    $0 = SAFE_HEAP_LOAD_i32_4_4($6, 12);
    if (!$0) {
     break label$1
    }
    $0 = __dynamic_cast($0, 72304);
    if (!$0) {
     break label$1
    }
    memset($5 + 12 | 0, 0, 52);
    SAFE_HEAP_STORE_i32_4_4($5, 56, 1);
    SAFE_HEAP_STORE_i32_4_4($5, 20, -1);
    SAFE_HEAP_STORE_i32_4_4($5, 16, $1);
    SAFE_HEAP_STORE_i32_4_4($5, 8, $0);
    ((((wasm2js_i32$1 = $0, wasm2js_i32$2 = $5 + 8 | 0), wasm2js_i32$3 = SAFE_HEAP_LOAD_i32_4_4($2, 0)), wasm2js_i32$4 = 1), wasm2js_i32$0 = SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 28) | 0), FUNCTION_TABLE[wasm2js_i32$0](wasm2js_i32$1 | 0, wasm2js_i32$2 | 0, wasm2js_i32$3 | 0, wasm2js_i32$4 | 0);
    $0 = SAFE_HEAP_LOAD_i32_4_4($5, 32);
    label$9 : {
     if (($0 | 0) != 1) {
      break label$9
     }
     if (!SAFE_HEAP_LOAD_i32_4_4($2, 0)) {
      break label$9
     }
     SAFE_HEAP_STORE_i32_4_4($2, 0, SAFE_HEAP_LOAD_i32_4_4($5, 24));
    }
    $4 = ($0 | 0) == 1;
    break label$1;
   }
   $4 = 0;
  }
  __stack_pointer = $5 - -64 | 0;
  return $4 | 0;
 }
 
 function __cxxabiv1____pointer_to_member_type_info__can_catch_nested_28__cxxabiv1____shim_type_info_20const__29_20const($0, $1) {
  var $2 = 0;
  label$1 : {
   if (!$1) {
    break label$1
   }
   $1 = __dynamic_cast($1, 72512);
   if (!$1) {
    break label$1
   }
   if (SAFE_HEAP_LOAD_i32_4_4($1, 8) & (SAFE_HEAP_LOAD_i32_4_4($0, 8) ^ -1)) {
    break label$1
   }
   if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 12), SAFE_HEAP_LOAD_i32_4_4($1, 12), 0)) {
    break label$1
   }
   $2 = is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29(SAFE_HEAP_LOAD_i32_4_4($0, 16), SAFE_HEAP_LOAD_i32_4_4($1, 16), 0);
  }
  return $2;
 }
 
 function __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($0, $1, $2, $3) {
  SAFE_HEAP_STORE_i32_1_1($0, 53, 1);
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) != ($2 | 0)) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_1_1($0, 52, 1);
   $2 = SAFE_HEAP_LOAD_i32_4_4($0, 16);
   label$2 : {
    if (!$2) {
     SAFE_HEAP_STORE_i32_4_4($0, 36, 1);
     SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
     SAFE_HEAP_STORE_i32_4_4($0, 16, $1);
     if (($3 | 0) != 1) {
      break label$1
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 48) | 0) == 1) {
      break label$2
     }
     break label$1;
    }
    if (($1 | 0) == ($2 | 0)) {
     $2 = SAFE_HEAP_LOAD_i32_4_4($0, 24);
     if (($2 | 0) == 2) {
      SAFE_HEAP_STORE_i32_4_4($0, 24, $3);
      $2 = $3;
     }
     if ((SAFE_HEAP_LOAD_i32_4_4($0, 48) | 0) != 1) {
      break label$1
     }
     if (($2 | 0) == 1) {
      break label$2
     }
     break label$1;
    }
    SAFE_HEAP_STORE_i32_4_4($0, 36, SAFE_HEAP_LOAD_i32_4_4($0, 36) + 1 | 0);
   }
   SAFE_HEAP_STORE_i32_1_1($0, 54, 1);
  }
 }
 
 function __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($0, $1, $2) {
  label$1 : {
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 4) | 0) != ($1 | 0)) {
    break label$1
   }
   if ((SAFE_HEAP_LOAD_i32_4_4($0, 28) | 0) == 1) {
    break label$1
   }
   SAFE_HEAP_STORE_i32_4_4($0, 28, $2);
  }
 }
 
 function __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  label$2 : {
   if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 0), $4)) {
    label$4 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0) != ($2 | 0)) {
      if ((SAFE_HEAP_LOAD_i32_4_4($1, 20) | 0) != ($2 | 0)) {
       break label$4
      }
     }
     if (($3 | 0) != 1) {
      break label$2
     }
     SAFE_HEAP_STORE_i32_4_4($1, 32, 1);
     return;
    }
    SAFE_HEAP_STORE_i32_4_4($1, 32, $3);
    label$6 : {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 44) | 0) == 4) {
      break label$6
     }
     SAFE_HEAP_STORE_i32_2_2($1, 52, 0);
     $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
     FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $2, 1, $4);
     if (SAFE_HEAP_LOAD_i32_1_U_1($1, 53)) {
      SAFE_HEAP_STORE_i32_4_4($1, 44, 3);
      if (!SAFE_HEAP_LOAD_i32_1_U_1($1, 52)) {
       break label$6
      }
      break label$2;
     }
     SAFE_HEAP_STORE_i32_4_4($1, 44, 4);
    }
    SAFE_HEAP_STORE_i32_4_4($1, 20, $2);
    SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40) + 1 | 0);
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) != 1) {
     break label$2
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) != 2) {
     break label$2
    }
    SAFE_HEAP_STORE_i32_1_1($1, 54, 1);
    return;
   }
   $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
   FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 24) | 0]($0, $1, $2, $3, $4);
  }
 }
 
 function __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $4)) {
   __cxxabiv1____class_type_info__process_static_type_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_29_20const($1, $2, $3);
   return;
  }
  label$2 : {
   if (!is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 0), $4)) {
    break label$2
   }
   label$3 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 16) | 0) != ($2 | 0)) {
     if ((SAFE_HEAP_LOAD_i32_4_4($1, 20) | 0) != ($2 | 0)) {
      break label$3
     }
    }
    if (($3 | 0) != 1) {
     break label$2
    }
    SAFE_HEAP_STORE_i32_4_4($1, 32, 1);
    return;
   }
   SAFE_HEAP_STORE_i32_4_4($1, 20, $2);
   SAFE_HEAP_STORE_i32_4_4($1, 32, $3);
   SAFE_HEAP_STORE_i32_4_4($1, 40, SAFE_HEAP_LOAD_i32_4_4($1, 40) + 1 | 0);
   label$5 : {
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 36) | 0) != 1) {
     break label$5
    }
    if ((SAFE_HEAP_LOAD_i32_4_4($1, 24) | 0) != 2) {
     break label$5
    }
    SAFE_HEAP_STORE_i32_1_1($1, 54, 1);
   }
   SAFE_HEAP_STORE_i32_4_4($1, 44, 4);
  }
 }
 
 function __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4);
   return;
  }
  $0 = SAFE_HEAP_LOAD_i32_4_4($0, 8);
  FUNCTION_TABLE[SAFE_HEAP_LOAD_i32_4_4(SAFE_HEAP_LOAD_i32_4_4($0, 0), 20) | 0]($0, $1, $2, $3, $4, $5);
 }
 
 function __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const($0, $1, $2, $3, $4, $5) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $5 = $5 | 0;
  if (is_equal_28std__type_info_20const__2c_20std__type_info_20const__2c_20bool_29($0, SAFE_HEAP_LOAD_i32_4_4($1, 8), $5)) {
   __cxxabiv1____class_type_info__process_static_type_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_29_20const($1, $2, $3, $4)
  }
 }
 
 function __cxa_is_pointer_type($0) {
  $0 = $0 | 0;
  if (!$0) {
   return 0
  }
  return (__dynamic_cast($0, 72400) | 0) != 0 | 0;
 }
 
 function std__exception__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 7399;
 }
 
 function std__bad_alloc__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 13411;
 }
 
 function std__bad_array_new_length__what_28_29_20const($0) {
  $0 = $0 | 0;
  return 8610;
 }
 
 function std__logic_error___logic_error_28_29($0) {
  $0 = $0 | 0;
  var $1 = 0, $2 = 0, $3 = 0;
  SAFE_HEAP_STORE_i32_4_4($0, 0, 73136);
  $2 = SAFE_HEAP_LOAD_i32_4_4($0 + 4 | 0, 0) - 12 | 0;
  $1 = $2 + 8 | 0;
  $3 = $1;
  $1 = SAFE_HEAP_LOAD_i32_4_4($1, 0) - 1 | 0;
  SAFE_HEAP_STORE_i32_4_4($3, 0, $1);
  if (($1 | 0) < 0) {
   dlfree($2)
  }
  return $0 | 0;
 }
 
 function std__logic_error___logic_error_28_29_1($0) {
  $0 = $0 | 0;
  std__logic_error___logic_error_28_29($0);
  dlfree($0);
 }
 
 function std__logic_error__what_28_29_20const($0) {
  $0 = $0 | 0;
  return std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______get_long_pointer_5babi_v15007_5d_28_29($0 + 4 | 0) | 0;
 }
 
 function emscripten_stack_get_base() {
  return __stack_base | 0;
 }
 
 function stackSave() {
  return __stack_pointer | 0;
 }
 
 function stackRestore($0) {
  $0 = $0 | 0;
  __stack_pointer = $0;
 }
 
 function stackAlloc($0) {
  $0 = $0 | 0;
  $0 = __stack_pointer - $0 & -16;
  __stack_pointer = $0;
  return $0 | 0;
 }
 
 function setTempRet0($0) {
  $0 = $0 | 0;
  tempRet0 = $0;
 }
 
 function getTempRet0() {
  return tempRet0 | 0;
 }
 
 function legalstub$dynCall_jiji($0, $1, $2, $3, $4) {
  $0 = $0 | 0;
  $1 = $1 | 0;
  $2 = $2 | 0;
  $3 = $3 | 0;
  $4 = $4 | 0;
  $0 = FUNCTION_TABLE[$0 | 0]($1, $2, $3, $4) | 0;
  tempRet0 = i64toi32_i32$HIGH_BITS;
  return $0 | 0;
 }
 
 function legalfunc$_embind_register_bigint($0, $1, $2, $3) {
  legalimport$_embind_register_bigint($0 | 0, $1 | 0, 8, 0, $2 | 0, -1, $3 | 0);
 }
 
 function SAFE_HEAP_LOAD_i32_1_1($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 1 >>> 0) {
   segfault()
  }
  return HEAP8[$0 | 0];
 }
 
 function SAFE_HEAP_LOAD_i32_1_U_1($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 1 >>> 0) {
   segfault()
  }
  return HEAPU8[$0 | 0];
 }
 
 function SAFE_HEAP_LOAD_i32_2_2($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 2 >>> 0) {
   segfault()
  }
  if ($0 & 1) {
   alignfault()
  }
  return HEAP16[$0 >> 1];
 }
 
 function SAFE_HEAP_LOAD_i32_2_U_1($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 2 >>> 0) {
   segfault()
  }
  return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8;
 }
 
 function SAFE_HEAP_LOAD_i32_2_U_2($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 2 >>> 0) {
   segfault()
  }
  if ($0 & 1) {
   alignfault()
  }
  return HEAPU16[$0 >> 1];
 }
 
 function SAFE_HEAP_LOAD_i32_4_1($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 }
 
 function SAFE_HEAP_LOAD_i32_4_4($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  return HEAP32[$0 >> 2];
 }
 
 function SAFE_HEAP_LOAD_i64_1_1($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 1 >>> 0) {
   segfault()
  }
  $0 = HEAP8[$0 | 0];
  i64toi32_i32$HIGH_BITS = $0 >> 31;
  return $0;
 }
 
 function SAFE_HEAP_LOAD_i64_4_4($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  $0 = HEAP32[$0 >> 2];
  i64toi32_i32$HIGH_BITS = $0 >> 31;
  return $0;
 }
 
 function SAFE_HEAP_LOAD_i64_4_U_4($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  i64toi32_i32$HIGH_BITS = 0;
  return HEAP32[$0 >> 2];
 }
 
 function SAFE_HEAP_LOAD_i64_8_1($0) {
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  i64toi32_i32$HIGH_BITS = HEAPU8[$0 + 4 | 0] | HEAPU8[$0 + 5 | 0] << 8 | (HEAPU8[$0 + 6 | 0] << 16 | HEAPU8[$0 + 7 | 0] << 24);
  return HEAPU8[$0 | 0] | HEAPU8[$0 + 1 | 0] << 8 | (HEAPU8[$0 + 2 | 0] << 16 | HEAPU8[$0 + 3 | 0] << 24);
 }
 
 function SAFE_HEAP_LOAD_i64_8_4($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  return HEAP32[$0 >> 2];
 }
 
 function SAFE_HEAP_LOAD_i64_8_8($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  if ($0 & 7) {
   alignfault()
  }
  i64toi32_i32$HIGH_BITS = HEAP32[$0 + 4 >> 2];
  return HEAP32[$0 >> 2];
 }
 
 function SAFE_HEAP_LOAD_f32_4_4($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  return HEAPF32[$0 >> 2];
 }
 
 function SAFE_HEAP_LOAD_f64_8_8($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  if ($0 & 7) {
   alignfault()
  }
  return HEAPF64[$0 >> 3];
 }
 
 function SAFE_HEAP_STORE_i32_1_1($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 1 >>> 0) {
   segfault()
  }
  HEAP8[$0 | 0] = $2;
 }
 
 function SAFE_HEAP_STORE_i32_2_1($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 2 >>> 0) {
   segfault()
  }
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
 }
 
 function SAFE_HEAP_STORE_i32_2_2($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 2 >>> 0) {
   segfault()
  }
  if ($0 & 1) {
   alignfault()
  }
  HEAP16[$0 >> 1] = $2;
 }
 
 function SAFE_HEAP_STORE_i32_4_1($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  HEAP8[$0 | 0] = $2;
  HEAP8[$0 + 1 | 0] = $2 >>> 8;
  HEAP8[$0 + 2 | 0] = $2 >>> 16;
  HEAP8[$0 + 3 | 0] = $2 >>> 24;
 }
 
 function SAFE_HEAP_STORE_i32_4_2($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  if ($0 & 1) {
   alignfault()
  }
  HEAP16[$0 >> 1] = $2;
  HEAP16[$0 + 2 >> 1] = $2 >>> 16;
 }
 
 function SAFE_HEAP_STORE_i32_4_4($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  HEAP32[$0 >> 2] = $2;
 }
 
 function SAFE_HEAP_STORE_i64_8_1($0, $1, $2) {
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  HEAP8[$0 | 0] = $1;
  HEAP8[$0 + 1 | 0] = $1 >>> 8;
  HEAP8[$0 + 2 | 0] = $1 >>> 16;
  HEAP8[$0 + 3 | 0] = $1 >>> 24;
  HEAP8[$0 + 4 | 0] = $2;
  HEAP8[$0 + 5 | 0] = $2 >>> 8;
  HEAP8[$0 + 6 | 0] = $2 >>> 16;
  HEAP8[$0 + 7 | 0] = $2 >>> 24;
 }
 
 function SAFE_HEAP_STORE_i64_8_2($0, $1) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  if ($0 & 1) {
   alignfault()
  }
  HEAP16[$0 >> 1] = 0;
  HEAP16[$0 + 2 >> 1] = 0;
  HEAP16[$0 + 4 >> 1] = 0;
  HEAP16[$0 + 6 >> 1] = 0;
 }
 
 function SAFE_HEAP_STORE_i64_8_4($0, $1, $2, $3) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
 }
 
 function SAFE_HEAP_STORE_i64_8_8($0, $1, $2, $3) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  if ($0 & 7) {
   alignfault()
  }
  HEAP32[$0 >> 2] = $2;
  HEAP32[$0 + 4 >> 2] = $3;
 }
 
 function SAFE_HEAP_STORE_f32_4_4($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 4 >>> 0) {
   segfault()
  }
  if ($0 & 3) {
   alignfault()
  }
  HEAPF32[$0 >> 2] = $2;
 }
 
 function SAFE_HEAP_STORE_f64_8_8($0, $1, $2) {
  $0 = $0 + $1 | 0;
  if (!$0 | HEAPU32[18353] < $0 + 8 >>> 0) {
   segfault()
  }
  if ($0 & 7) {
   alignfault()
  }
  HEAPF64[$0 >> 3] = $2;
 }
 
 function __wasm_ctz_i32($0) {
  if ($0) {
   return 31 - Math_clz32($0 - 1 ^ $0) | 0
  }
  return 32;
 }
 
 function __wasm_i64_mul($0, $1, $2, $3) {
  var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
  $4 = $2 >>> 16 | 0;
  $5 = $0 >>> 16 | 0;
  $9 = Math_imul($4, $5);
  $6 = $2 & 65535;
  $7 = $0 & 65535;
  $8 = Math_imul($6, $7);
  $5 = ($8 >>> 16 | 0) + Math_imul($5, $6) | 0;
  $4 = ($5 & 65535) + Math_imul($4, $7) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1, $2) + $9 | 0) + Math_imul($0, $3) + ($5 >>> 16) + ($4 >>> 16) | 0;
  return $8 & 65535 | $4 << 16;
 }
 
 function __wasm_i64_udiv($0, $1, $2) {
  var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $10 = 0, $11 = 0;
  __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E : {
   label$1 : {
    label$2 : {
     label$3 : {
      label$4 : {
       label$5 : {
        label$6 : {
         label$7 : {
          label$9 : {
           label$11 : {
            if ($1) {
             if (!$2) {
              break label$11
             }
             break label$9;
            }
            i64toi32_i32$HIGH_BITS = 0;
            $0 = ($0 >>> 0) / ($2 >>> 0) | 0;
            break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
           }
           if (!$0) {
            break label$7
           }
           break label$6;
          }
          if (!($2 - 1 & $2)) {
           break label$5
          }
          $5 = (Math_clz32($2) + 33 | 0) - Math_clz32($1) | 0;
          $6 = 0 - $5 | 0;
          break label$3;
         }
         i64toi32_i32$HIGH_BITS = 0;
         $0 = ($1 >>> 0) / 0 | 0;
         break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
        }
        $3 = 32 - Math_clz32($1) | 0;
        if ($3 >>> 0 < 31) {
         break label$4
        }
        break label$2;
       }
       if (($2 | 0) == 1) {
        break label$1
       }
       $5 = __wasm_ctz_i32($2);
       $2 = $5 & 31;
       if (($5 & 63) >>> 0 >= 32) {
        $0 = $1 >>> $2 | 0
       } else {
        $3 = $1 >>> $2 | 0;
        $0 = ((1 << $2) - 1 & $1) << 32 - $2 | $0 >>> $2;
       }
       i64toi32_i32$HIGH_BITS = $3;
       break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
      }
      $5 = $3 + 1 | 0;
      $6 = 63 - $3 | 0;
     }
     $3 = $5 & 63;
     $4 = $3 & 31;
     if ($3 >>> 0 >= 32) {
      $3 = 0;
      $7 = $1 >>> $4 | 0;
     } else {
      $3 = $1 >>> $4 | 0;
      $7 = ((1 << $4) - 1 & $1) << 32 - $4 | $0 >>> $4;
     }
     $6 = $6 & 63;
     $4 = $6 & 31;
     if ($6 >>> 0 >= 32) {
      $1 = $0 << $4;
      $0 = 0;
     } else {
      $1 = (1 << $4) - 1 & $0 >>> 32 - $4 | $1 << $4;
      $0 = $0 << $4;
     }
     if ($5) {
      $6 = $2 - 1 | 0;
      $11 = ($6 | 0) == -1 ? -1 : 0;
      while (1) {
       $8 = $3 << 1 | $7 >>> 31;
       $3 = $7 << 1 | $1 >>> 31;
       $4 = $11 - ($8 + ($3 >>> 0 > $6 >>> 0) | 0) >> 31;
       $9 = $2 & $4;
       $7 = $3 - $9 | 0;
       $3 = $8 - ($3 >>> 0 < $9 >>> 0) | 0;
       $1 = $1 << 1 | $0 >>> 31;
       $0 = $10 | $0 << 1;
       $10 = $4 & 1;
       $5 = $5 - 1 | 0;
       if ($5) {
        continue
       }
       break;
      };
     }
     i64toi32_i32$HIGH_BITS = $1 << 1 | $0 >>> 31;
     $0 = $10 | $0 << 1;
     break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
    }
    $0 = 0;
    $1 = 0;
   }
   i64toi32_i32$HIGH_BITS = $1;
  }
  return $0;
 }
 
 function __wasm_rotl_i32($0) {
  var $1 = 0;
  $1 = $0 & 31;
  $0 = 0 - $0 & 31;
  return (-1 >>> $1 & -2) << $1 | (-1 << $0 & -2) >>> $0;
 }
 
 function __wasm_rotl_i64($0, $1) {
  i64toi32_i32$HIGH_BITS = $0;
  return $1;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, ImeSetInputScreenPosFn_DefaultImpl_28int_2c_20int_29, SetClipboardTextFn_DefaultImpl_28void__2c_20char_20const__29, GetClipboardTextFn_DefaultImpl_28void__29, WindowSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29, WindowSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, WindowSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29, WindowSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29, WindowSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, ChildWindowComparer_28void_20const__2c_20void_20const__29, ImGui__ShowMetricsWindow_28bool__29__Func__WindowComparerByBeginOrder_28void_20const__2c_20void_20const__29, MallocWrapper_28unsigned_20long_2c_20void__29, FreeWrapper_28void__2c_20void__29, ImFontAtlasBuildWithStbTruetype_28ImFontAtlas__29, rect_height_compare_28void_20const__2c_20void_20const__29, rect_original_order_28void_20const__2c_20void_20const__29, TableSettingsHandler_WriteAll_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20ImGuiTextBuffer__29, TableSettingsHandler_ApplyAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, TableSettingsHandler_ReadLine_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20void__2c_20char_20const__29, TableSettingsHandler_ReadOpen_28ImGuiContext__2c_20ImGuiSettingsHandler__2c_20char_20const__29, TableSettingsHandler_ClearAll_28ImGuiContext__2c_20ImGuiSettingsHandler__29, ShrinkWidthItemComparer_28void_20const__2c_20void_20const__29, TabItemComparerByBeginOrder_28void_20const__2c_20void_20const__29, TabItemComparerBySection_28void_20const__2c_20void_20const__29, emscripten__internal__Invoker_emscripten__val___invoke_28emscripten__val_20_28__29_28_29_29, get_mallinfo_28_29, void_20const__20emscripten__internal__getActualType_WrapImGuiContext__28WrapImGuiContext__29, void_20emscripten__internal__raw_destructor_WrapImGuiContext__28WrapImGuiContext__29, void_20const__20emscripten__internal__getActualType_ImVec2__28ImVec2__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, ImVec2_Set_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, ImVec2_Copy_28emscripten__val_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, ImVec2_Equals_28emscripten__val_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_bool_20_28__29_28emscripten__val_2c_20emscripten__val_29_2c_20bool_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28___29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, void_20const__20emscripten__internal__getActualType_ImVec4__28ImVec4__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, ImVec4_Set_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, ImVec4_Copy_28emscripten__val_2c_20emscripten__val_29, ImVec4_Equals_28emscripten__val_2c_20emscripten__val_29, void_20const__20emscripten__internal__getActualType_ImGuiInputTextCallbackData__28ImGuiInputTextCallbackData__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, unsigned_20short_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___getWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___setWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20unsigned_20short_29, embind_init_ImGuiInputTextCallbackData_28_29__$_0____invoke_28ImGuiInputTextCallbackData_20const__29, embind_init_ImGuiInputTextCallbackData_28_29__$_1____invoke_28ImGuiInputTextCallbackData__2c_20emscripten__val_29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29, ImGuiInputTextCallbackData__DeleteChars_28int_2c_20int_29, emscripten__internal__MethodInvoker_void_20_28ImGuiInputTextCallbackData____29_28int_2c_20int_29_2c_20void_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20int___invoke_28void_20_28ImGuiInputTextCallbackData____20const__29_28int_2c_20int_29_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20int_29, embind_init_ImGuiInputTextCallbackData_28_29__$_2____invoke_28ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20void_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28___29_28ImGuiInputTextCallbackData__2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, ImGuiInputTextCallbackData__HasSelection_28_29_20const, emscripten__internal__MethodInvoker_bool_20_28ImGuiInputTextCallbackData____29_28_29_20const_2c_20bool_2c_20ImGuiInputTextCallbackData_20const____invoke_28bool_20_28ImGuiInputTextCallbackData____20const__29_28_29_20const_2c_20ImGuiInputTextCallbackData_20const__29, std__logic_error___logic_error_28_29, dummy_1, void_20const__20emscripten__internal__getActualType_ImGuiSizeCallbackData__28ImGuiSizeCallbackData__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, embind_init_ImGuiSizeCallbackData_28_29__$_0____invoke_28ImGuiSizeCallbackData_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImGuiSizeCallbackData_28_29__$_1____invoke_28ImGuiSizeCallbackData_20const__29, embind_init_ImGuiSizeCallbackData_28_29__$_2____invoke_28ImGuiSizeCallbackData_20const__29, void_20const__20emscripten__internal__getActualType_ImGuiListClipper__28ImGuiListClipper__29, void_20emscripten__internal__raw_destructor_ImGuiListClipper__28ImGuiListClipper__29, emscripten__internal__Invoker_ImGuiListClipper____invoke_28ImGuiListClipper__20_28__29_28_29_29, ImGuiListClipper__20emscripten__internal__operator_new_ImGuiListClipper__28_29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, ImGuiListClipper__Begin_28int_2c_20float_29, emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28int_2c_20float_29_2c_20void_2c_20ImGuiListClipper__2c_20int_2c_20float___invoke_28void_20_28ImGuiListClipper____20const__29_28int_2c_20float_29_2c_20ImGuiListClipper__2c_20int_2c_20float_29, ImGuiListClipper__End_28_29, emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28_29_2c_20void_2c_20ImGuiListClipper____invoke_28void_20_28ImGuiListClipper____20const__29_28_29_2c_20ImGuiListClipper__29, ImGuiListClipper__Step_28_29, emscripten__internal__MethodInvoker_bool_20_28ImGuiInputTextCallbackData____29_28_29_20const_2c_20bool_2c_20ImGuiInputTextCallbackData_20const____invoke_28bool_20_28ImGuiInputTextCallbackData____20const__29_28_29_20const_2c_20ImGuiInputTextCallbackData_20const__29, void_20const__20emscripten__internal__getActualType_ImGuiTableColumnSortSpecs__28ImGuiTableColumnSortSpecs__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, short_20emscripten__internal__MemberAccess_ImGuiTableColumnSortSpecs_2c_20short___getWire_ImGuiTableColumnSortSpecs__28short_20ImGuiTableColumnSortSpecs____20const__2c_20ImGuiTableColumnSortSpecs_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___setWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20unsigned_20short_29, embind_init_ImGuiTableColumnSortSpecs_28_29__$_0____invoke_28ImGuiTableColumnSortSpecs_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, void_20const__20emscripten__internal__getActualType_ImGuiTableSortSpecs__28ImGuiTableSortSpecs__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, embind_init_ImGuiTableSortSpecs_28_29__$_0____invoke_28ImGuiTableSortSpecs__2c_20int_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImGuiTableSortSpecs__2c_20int_29_2c_20emscripten__val_2c_20ImGuiTableSortSpecs__2c_20int___invoke_28emscripten__val_20_28___29_28ImGuiTableSortSpecs__2c_20int_29_2c_20ImGuiTableSortSpecs__2c_20int_29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29, void_20const__20emscripten__internal__getActualType_ImDrawCmd__28ImDrawCmd__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImDrawCmd_28_29__$_0____invoke_28ImDrawCmd_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImDrawCmd_28_29__$_1____invoke_28ImDrawCmd_20const__29, void_20const__20emscripten__internal__getActualType_ImDrawList__28ImDrawList__29, void_20emscripten__internal__raw_destructor_ImDrawList__28ImDrawList__29, embind_init_ImDrawList_28_29__$_0____invoke_28ImDrawList_20const__2c_20emscripten__val_29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, embind_init_ImDrawList_28_29__$_1____invoke_28ImDrawList_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImDrawList_28_29__$_2____invoke_28ImDrawList_20const__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImDrawList_28_29__$_3____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29, ImDrawList__PushClipRectFullScreen_28_29, emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28_29_2c_20void_2c_20ImGuiListClipper____invoke_28void_20_28ImGuiListClipper____20const__29_28_29_2c_20ImGuiListClipper__29, ImDrawList__PopClipRect_28_29, embind_init_ImDrawList_28_29__$_4____invoke_28ImDrawList__2c_20emscripten__val_29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, ImDrawList__PopTextureID_28_29, embind_init_ImDrawList_28_29__$_5____invoke_28ImDrawList__2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImDrawList__2c_20emscripten__val_29_2c_20emscripten__val_2c_20ImDrawList__2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28ImDrawList__2c_20emscripten__val_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__29, embind_init_ImDrawList_28_29__$_6____invoke_28ImDrawList__2c_20emscripten__val_29, embind_init_ImDrawList_28_29__$_7____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_8____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_9____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29, embind_init_ImDrawList_28_29__$_10____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_11____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_12____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_13____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_14____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_15____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_16____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20unsigned_20int_2c_20int_29, embind_init_ImDrawList_28_29__$_17____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_18____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29, embind_init_ImDrawList_28_29__$_19____invoke_28ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImDrawList_28_29__$_20____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20float_2c_20emscripten___EM_VAL__29, embind_init_ImDrawList_28_29__$_21____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_22____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_23____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29, embind_init_ImDrawList_28_29__$_24____invoke_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20int_2c_20unsigned_20int_2c_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_25____invoke_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20int_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20int_2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_26____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29, embind_init_ImDrawList_28_29__$_27____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20float_2c_20int_29, ImDrawList__PathClear_28_29, embind_init_ImDrawList_28_29__$_28____invoke_28ImDrawList__2c_20emscripten__val_29, embind_init_ImDrawList_28_29__$_29____invoke_28ImDrawList__2c_20emscripten__val_29, embind_init_ImDrawList_28_29__$_30____invoke_28ImDrawList__2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20unsigned_20int_29_2c_20ImDrawList__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_31____invoke_28ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20void_2c_20ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float___invoke_28void_20_28___29_28ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29_2c_20ImDrawList__2c_20unsigned_20int_2c_20int_2c_20float_29, embind_init_ImDrawList_28_29__$_32____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20float_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20float_2c_20float_2c_20int_29, embind_init_ImDrawList_28_29__$_33____invoke_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20int_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20float_2c_20unsigned_20int_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20float_2c_20unsigned_20int_2c_20int_29, embind_init_ImDrawList_28_29__$_34____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_35____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29, embind_init_ImDrawList_28_29__$_36____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20float_2c_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20float_2c_20int_29, ImDrawList__ChannelsSplit_28int_29, emscripten__internal__MethodInvoker_void_20_28ImDrawList____29_28int_29_2c_20void_2c_20ImDrawList__2c_20int___invoke_28void_20_28ImDrawList____20const__29_28int_29_2c_20ImDrawList__2c_20int_29, ImDrawList__ChannelsMerge_28_29, ImDrawList__ChannelsSetCurrent_28int_29, embind_init_ImDrawList_28_29__$_37____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, ImDrawList__AddDrawCmd_28_29, ImDrawList__PrimReserve_28int_2c_20int_29, emscripten__internal__MethodInvoker_void_20_28ImGuiInputTextCallbackData____29_28int_2c_20int_29_2c_20void_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20int___invoke_28void_20_28ImGuiInputTextCallbackData____20const__29_28int_2c_20int_29_2c_20ImGuiInputTextCallbackData__2c_20int_2c_20int_29, ImDrawList__PrimUnreserve_28int_2c_20int_29, embind_init_ImDrawList_28_29__$_38____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29, embind_init_ImDrawList_28_29__$_39____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_40____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_41____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_42____invoke_28ImDrawList__2c_20unsigned_20short_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20unsigned_20int_29_2c_20ImDrawList__2c_20unsigned_20int_29, embind_init_ImDrawList_28_29__$_43____invoke_28ImDrawList__2c_20emscripten__val_2c_20emscripten__val_2c_20unsigned_20int_29, ImDrawList___CalcCircleAutoSegmentCount_28float_29_20const, emscripten__internal__MethodInvoker_int_20_28ImDrawList____29_28float_29_20const_2c_20int_2c_20ImDrawList_20const__2c_20float___invoke_28int_20_28ImDrawList____20const__29_28float_29_20const_2c_20ImDrawList_20const__2c_20float_29, void_20const__20emscripten__internal__getActualType_ImDrawData__28ImDrawData__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, embind_init_ImDrawData_28_29__$_0____invoke_28ImDrawData_20const__2c_20emscripten__val_29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImGuiSizeCallbackData_28_29__$_2____invoke_28ImGuiSizeCallbackData_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImDrawData_28_29__$_2____invoke_28ImDrawData_20const__29, embind_init_ImDrawData_28_29__$_3____invoke_28ImDrawData_20const__29, ImDrawData__DeIndexAllBuffers_28_29, emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28_29_2c_20void_2c_20ImGuiListClipper____invoke_28void_20_28ImGuiListClipper____20const__29_28_29_2c_20ImGuiListClipper__29, embind_init_ImDrawData_28_29__$_4____invoke_28ImDrawData__2c_20emscripten__val_29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, void_20const__20emscripten__internal__getActualType_ImFontGlyph__28ImFontGlyph__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, embind_init_ImFontGlyph_28_29__$_0____invoke_28ImFontGlyph_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImFontGlyph_28_29__$_1____invoke_28ImFontGlyph_20const__29, embind_init_ImFontGlyph_28_29__$_2____invoke_28ImFontGlyph_20const__29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, void_20const__20emscripten__internal__getActualType_ImFontConfig__28ImFontConfig__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, embind_init_ImFontConfig_28_29__$_0____invoke_28ImFontConfig_20const__29, embind_init_ImFontConfig_28_29__$_1____invoke_28ImFontConfig__2c_20emscripten__val_29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, embind_init_ImFontConfig_28_29__$_2____invoke_28ImFontConfig_20const__29, embind_init_ImFontConfig_28_29__$_3____invoke_28ImFontConfig_20const__29, embind_init_ImFontConfig_28_29__$_4____invoke_28ImFontConfig_20const__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImFontConfig_28_29__$_5____invoke_28ImFontConfig_20const__29, embind_init_ImFontConfig_28_29__$_6____invoke_28ImFontConfig__2c_20emscripten__val_29, embind_init_ImFontConfig_28_29__$_7____invoke_28ImFontConfig_20const__29, void_20const__20emscripten__internal__getActualType_ImFont__28ImFont__29, void_20emscripten__internal__raw_destructor_ImFont__28ImFont__29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, embind_init_ImFont_28_29__$_0____invoke_28ImFont__2c_20emscripten__val_29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, embind_init_ImFont_28_29__$_1____invoke_28ImFont_20const__29, embind_init_ImFont_28_29__$_2____invoke_28ImFont__2c_20emscripten__val_29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, unsigned_20short_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___getWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___setWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20unsigned_20short_29, short_20emscripten__internal__MemberAccess_ImGuiTableColumnSortSpecs_2c_20short___getWire_ImGuiTableColumnSortSpecs__28short_20ImGuiTableColumnSortSpecs____20const__2c_20ImGuiTableColumnSortSpecs_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20unsigned_20short___setWire_ImGuiInputTextCallbackData__28unsigned_20short_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20unsigned_20short_29, embind_init_ImFont_28_29__$_3____invoke_28ImFont__2c_20emscripten__val_29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, ImFont__ClearOutputData_28_29, emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28_29_2c_20void_2c_20ImGuiListClipper____invoke_28void_20_28ImGuiListClipper____20const__29_28_29_2c_20ImGuiListClipper__29, ImFont__BuildLookupTable_28_29, embind_init_ImFont_28_29__$_4____invoke_28ImFont_20const__2c_20unsigned_20short_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImGuiTableSortSpecs__2c_20int_29_2c_20emscripten__val_2c_20ImGuiTableSortSpecs__2c_20int___invoke_28emscripten__val_20_28___29_28ImGuiTableSortSpecs__2c_20int_29_2c_20ImGuiTableSortSpecs__2c_20int_29, embind_init_ImFont_28_29__$_5____invoke_28ImFont_20const__2c_20unsigned_20short_29, ImFont__GetCharAdvance_28unsigned_20short_29_20const, emscripten__internal__MethodInvoker_float_20_28ImFont____29_28unsigned_20short_29_20const_2c_20float_2c_20ImFont_20const__2c_20unsigned_20short___invoke_28float_20_28ImFont____20const__29_28unsigned_20short_29_20const_2c_20ImFont_20const__2c_20unsigned_20short_29, ImFont__IsLoaded_28_29_20const, emscripten__internal__MethodInvoker_bool_20_28ImGuiInputTextCallbackData____29_28_29_20const_2c_20bool_2c_20ImGuiInputTextCallbackData_20const____invoke_28bool_20_28ImGuiInputTextCallbackData____20const__29_28_29_20const_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImFont_28_29__$_6____invoke_28ImFont_20const__29, emscripten__internal__FunctionInvoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28__29_28ImFont_20const__29_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20ImFont_20const____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28___29_28ImFont_20const__29_2c_20ImFont__29, embind_init_ImFont_28_29__$_7____invoke_28ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28ImFont_20const__2c_20float_2c_20float_2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_29_2c_20ImFont__2c_20float_2c_20float_2c_20float_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImFont_28_29__$_8____invoke_28ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_29, emscripten__internal__FunctionInvoker_int_20_28__29_28ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_29_2c_20int_2c_20ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float___invoke_28int_20_28___29_28ImFont_20const__2c_20float_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_29_2c_20ImFont__2c_20float_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20float_29, embind_init_ImFont_28_29__$_9____invoke_28ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short_29_2c_20void_2c_20ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short___invoke_28void_20_28___29_28ImFont_20const__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20unsigned_20int_2c_20unsigned_20short_29_2c_20ImFont__2c_20emscripten___EM_VAL__2c_20float_2c_20emscripten___EM_VAL__2c_20unsigned_20int_2c_20unsigned_20short_29, void_20const__20emscripten__internal__getActualType_ImFontAtlas__28ImFontAtlas__29, void_20emscripten__internal__raw_destructor_ImFontAtlas__28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_0____invoke_28ImFontAtlas__2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImDrawList__2c_20emscripten__val_29_2c_20emscripten__val_2c_20ImDrawList__2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28ImDrawList__2c_20emscripten__val_29_2c_20ImDrawList__2c_20emscripten___EM_VAL__29, embind_init_ImFontAtlas_28_29__$_1____invoke_28ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__val_2c_20ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28___29_28ImFontAtlas__2c_20emscripten__val_2c_20float_2c_20emscripten__val_2c_20emscripten__val_29_2c_20ImFontAtlas__2c_20emscripten___EM_VAL__2c_20float_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, ImFontAtlas__ClearTexData_28_29, emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28_29_2c_20void_2c_20ImGuiListClipper____invoke_28void_20_28ImGuiListClipper____20const__29_28_29_2c_20ImGuiListClipper__29, ImFontAtlas__ClearInputData_28_29, ImFontAtlas__ClearFonts_28_29, ImFontAtlas__Clear_28_29, ImFontAtlas__Build_28_29, emscripten__internal__MethodInvoker_bool_20_28ImGuiInputTextCallbackData____29_28_29_20const_2c_20bool_2c_20ImGuiInputTextCallbackData_20const____invoke_28bool_20_28ImGuiInputTextCallbackData____20const__29_28_29_20const_2c_20ImGuiInputTextCallbackData_20const__29, ImFontAtlas__IsBuilt_28_29_20const, emscripten__internal__MethodInvoker_bool_20_28ImGuiInputTextCallbackData____29_28_29_20const_2c_20bool_2c_20ImGuiInputTextCallbackData_20const____invoke_28bool_20_28ImGuiInputTextCallbackData____20const__29_28_29_20const_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImFontAtlas_28_29__$_2____invoke_28ImFontAtlas__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImFontAtlas_28_29__$_3____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_4____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_5____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_6____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_7____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_8____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_9____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_10____invoke_28ImFontAtlas__29, embind_init_ImFontAtlas_28_29__$_11____invoke_28ImFontAtlas__29, bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImFontAtlas_28_29__$_12____invoke_28ImFontAtlas_20const__29, embind_init_ImFontAtlas_28_29__$_13____invoke_28ImFontAtlas__2c_20emscripten__val_29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, embind_init_ImDrawData_28_29__$_3____invoke_28ImDrawData_20const__29, embind_init_ImFontAtlas_28_29__$_15____invoke_28ImFontAtlas_20const__29, embind_init_ImFontAtlas_28_29__$_16____invoke_28ImFontAtlas__2c_20emscripten__val_29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, void_20const__20emscripten__internal__getActualType_ImGuiViewport__28ImGuiViewport__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImGuiSizeCallbackData_28_29__$_0____invoke_28ImGuiSizeCallbackData_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImGuiSizeCallbackData_28_29__$_1____invoke_28ImGuiSizeCallbackData_20const__29, embind_init_ImGuiSizeCallbackData_28_29__$_2____invoke_28ImGuiSizeCallbackData_20const__29, embind_init_ImDrawData_28_29__$_2____invoke_28ImDrawData_20const__29, void_20const__20emscripten__internal__getActualType_ImGuiIO__28ImGuiIO__29, void_20emscripten__internal__raw_destructor_ImGuiIO__28ImGuiIO__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImGuiIO_28_29__$_0____invoke_28ImGuiIO_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, embind_init_ImGuiIO_28_29__$_1____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_2____invoke_28ImGuiIO__2c_20emscripten__val_29, void_20emscripten__internal__SetterPolicy_void_20_28__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29___set_ImGuiInputTextCallbackData__28void_20_28__20const__29_28ImGuiInputTextCallbackData__2c_20emscripten__val_29_2c_20ImGuiInputTextCallbackData__2c_20emscripten___EM_VAL__29, embind_init_ImGuiIO_28_29__$_3____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_4____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_5____invoke_28ImGuiIO_20const__2c_20int_29, emscripten__internal__FunctionInvoker_int_20_28__29_28ImGuiIO_20const__2c_20int_29_2c_20int_2c_20ImGuiIO_20const__2c_20int___invoke_28int_20_28___29_28ImGuiIO_20const__2c_20int_29_2c_20ImGuiIO__2c_20int_29, embind_init_ImGuiIO_28_29__$_6____invoke_28ImGuiIO__2c_20int_2c_20int_29, emscripten__internal__FunctionInvoker_bool_20_28__29_28ImGuiIO__2c_20int_2c_20int_29_2c_20bool_2c_20ImGuiIO__2c_20int_2c_20int___invoke_28bool_20_28___29_28ImGuiIO__2c_20int_2c_20int_29_2c_20ImGuiIO__2c_20int_2c_20int_29, embind_init_ImGuiIO_28_29__$_7____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_8____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_9____invoke_28ImGuiIO_20const__29, bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29, embind_init_ImGuiIO_28_29__$_10____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_11____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_12____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_13____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_14____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_15____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_16____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_17____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_18____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_19____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_20____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_21____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_22____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_23____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_24____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_25____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_26____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_27____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_28____invoke_28ImGuiIO__2c_20emscripten__val_29, embind_init_ImGuiIO_28_29__$_29____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_30____invoke_28ImGuiIO_20const__2c_20int_29, emscripten__internal__FunctionInvoker_int_20_28__29_28ImGuiIO_20const__2c_20int_29_2c_20int_2c_20ImGuiIO_20const__2c_20int___invoke_28int_20_28___29_28ImGuiIO_20const__2c_20int_29_2c_20ImGuiIO__2c_20int_29, embind_init_ImGuiIO_28_29__$_31____invoke_28ImGuiIO__2c_20int_2c_20bool_29, emscripten__internal__FunctionInvoker_bool_20_28__29_28ImGuiIO__2c_20int_2c_20int_29_2c_20bool_2c_20ImGuiIO__2c_20int_2c_20int___invoke_28bool_20_28___29_28ImGuiIO__2c_20int_2c_20int_29_2c_20ImGuiIO__2c_20int_2c_20int_29, embind_init_ImGuiIO_28_29__$_32____invoke_28ImGuiIO_20const__2c_20int_29, embind_init_ImGuiIO_28_29__$_33____invoke_28ImGuiIO__2c_20int_2c_20bool_29, embind_init_ImGuiIO_28_29__$_34____invoke_28ImGuiIO_20const__2c_20int_29, emscripten__internal__FunctionInvoker_float_20_28__29_28ImGuiIO_20const__2c_20int_29_2c_20float_2c_20ImGuiIO_20const__2c_20int___invoke_28float_20_28___29_28ImGuiIO_20const__2c_20int_29_2c_20ImGuiIO__2c_20int_29, embind_init_ImGuiIO_28_29__$_35____invoke_28ImGuiIO__2c_20int_2c_20float_29, emscripten__internal__FunctionInvoker_bool_20_28__29_28ImGuiIO__2c_20int_2c_20float_29_2c_20bool_2c_20ImGuiIO__2c_20int_2c_20float___invoke_28bool_20_28___29_28ImGuiIO__2c_20int_2c_20float_29_2c_20ImGuiIO__2c_20int_2c_20float_29, ImGuiIO__AddInputCharacter_28unsigned_20int_29, emscripten__internal__MethodInvoker_void_20_28ImDrawList____29_28int_29_2c_20void_2c_20ImDrawList__2c_20int___invoke_28void_20_28ImDrawList____20const__29_28int_29_2c_20ImDrawList__2c_20int_29, embind_init_ImGuiIO_28_29__$_36____invoke_28ImGuiIO__2c_20int_29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImDrawList__2c_20unsigned_20int_29_2c_20void_2c_20ImDrawList__2c_20unsigned_20int___invoke_28void_20_28___29_28ImDrawList__2c_20unsigned_20int_29_2c_20ImDrawList__2c_20unsigned_20int_29, embind_init_ImGuiIO_28_29__$_37____invoke_28ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__FunctionInvoker_void_20_28__29_28ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20void_2c_20ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28___29_28ImGuiIO__2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20ImGuiIO__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, ImGuiIO__ClearInputCharacters_28_29, emscripten__internal__MethodInvoker_void_20_28ImGuiListClipper____29_28_29_2c_20void_2c_20ImGuiListClipper____invoke_28void_20_28ImGuiListClipper____20const__29_28_29_2c_20ImGuiListClipper__29, embind_init_ImGuiIO_28_29__$_38____invoke_28ImGuiIO_20const__29, embind_init_ImGuiIO_28_29__$_39____invoke_28ImGuiIO_20const__2c_20int_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImGuiTableSortSpecs__2c_20int_29_2c_20emscripten__val_2c_20ImGuiTableSortSpecs__2c_20int___invoke_28emscripten__val_20_28___29_28ImGuiTableSortSpecs__2c_20int_29_2c_20ImGuiTableSortSpecs__2c_20int_29, embind_init_ImGuiIO_28_29__$_40____invoke_28ImGuiIO_20const__2c_20int_29, embind_init_ImGuiIO_28_29__$_41____invoke_28ImGuiIO_20const__2c_20int_29, embind_init_ImGuiIO_28_29__$_42____invoke_28ImGuiIO_20const__2c_20int_29, void_20const__20emscripten__internal__getActualType_ImGuiStyle__28ImGuiStyle__29, void_20emscripten__internal__raw_destructor_ImVec2__28ImVec2__29, float_20emscripten__internal__MemberAccess_ImVec2_2c_20float___getWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2_20const__29, void_20emscripten__internal__MemberAccess_ImVec2_2c_20float___setWire_ImVec2__28float_20ImVec2____20const__2c_20ImVec2__2c_20float_29, embind_init_ImGuiIO_28_29__$_0____invoke_28ImGuiIO_20const__29, emscripten___EM_VAL__20emscripten__internal__GetterPolicy_emscripten__val_20_28__29_28ImGuiInputTextCallbackData_20const__29___get_ImGuiInputTextCallbackData__28emscripten__val_20_28__20const__29_28ImGuiInputTextCallbackData_20const__29_2c_20ImGuiInputTextCallbackData_20const__29, embind_init_ImGuiStyle_28_29__$_1____invoke_28ImGuiStyle_20const__29, embind_init_ImFontConfig_28_29__$_2____invoke_28ImFontConfig_20const__29, int_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___getWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20int___setWire_ImGuiInputTextCallbackData__28int_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20int_29, embind_init_ImGuiStyle_28_29__$_3____invoke_28ImGuiStyle_20const__29, embind_init_ImGuiStyle_28_29__$_4____invoke_28ImGuiStyle_20const__29, embind_init_ImGuiStyle_28_29__$_5____invoke_28ImGuiStyle_20const__29, embind_init_ImGuiStyle_28_29__$_6____invoke_28ImGuiStyle_20const__29, embind_init_ImGuiStyle_28_29__$_7____invoke_28ImGuiStyle_20const__29, embind_init_ImGuiStyle_28_29__$_8____invoke_28ImGuiStyle_20const__29, embind_init_ImGuiIO_28_29__$_12____invoke_28ImGuiIO_20const__29, embind_init_ImGuiStyle_28_29__$_10____invoke_28ImGuiStyle_20const__29, embind_init_ImGuiStyle_28_29__$_11____invoke_28ImGuiStyle_20const__29, bool_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___getWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData_20const__29, void_20emscripten__internal__MemberAccess_ImGuiInputTextCallbackData_2c_20bool___setWire_ImGuiInputTextCallbackData__28bool_20ImGuiInputTextCallbackData____20const__2c_20ImGuiInputTextCallbackData__2c_20bool_29, embind_init_ImGuiStyle_28_29__$_12____invoke_28ImGuiStyle__2c_20int_29, emscripten__internal__FunctionInvoker_emscripten__val_20_28__29_28ImGuiTableSortSpecs__2c_20int_29_2c_20emscripten__val_2c_20ImGuiTableSortSpecs__2c_20int___invoke_28emscripten__val_20_28___29_28ImGuiTableSortSpecs__2c_20int_29_2c_20ImGuiTableSortSpecs__2c_20int_29, embind_init_ImGuiStyle_28_29__$_13____invoke_28ImGuiStyle__2c_20int_2c_20emscripten__val_29, emscripten__internal__FunctionInvoker_bool_20_28__29_28ImGuiStyle__2c_20int_2c_20emscripten__val_29_2c_20bool_2c_20ImGuiStyle__2c_20int_2c_20emscripten__val___invoke_28bool_20_28___29_28ImGuiStyle__2c_20int_2c_20emscripten__val_29_2c_20ImGuiStyle__2c_20int_2c_20emscripten___EM_VAL__29, emscripten__internal__Invoker_ImGuiListClipper____invoke_28ImGuiListClipper__20_28__29_28_29_29, ImGuiStyle__20emscripten__internal__operator_new_ImGuiStyle__28_29, ImGuiStyle__ScaleAllSizes_28float_29, emscripten__internal__MethodInvoker_void_20_28ImGuiStyle____29_28float_29_2c_20void_2c_20ImGuiStyle__2c_20float___invoke_28void_20_28ImGuiStyle____20const__29_28float_29_2c_20ImGuiStyle__2c_20float_29, emscripten__internal__Invoker_ImGuiListClipper____invoke_28ImGuiListClipper__20_28__29_28_29_29, embind_init_ImGui_28_29__$_0____invoke_28_29, emscripten__internal__Invoker_WrapImGuiContext__2c_20ImFontAtlas____invoke_28WrapImGuiContext__20_28__29_28ImFontAtlas__29_2c_20ImFontAtlas__29, embind_init_ImGui_28_29__$_1____invoke_28ImFontAtlas__29, emscripten__internal__Invoker_void_2c_20WrapImGuiContext____invoke_28void_20_28__29_28WrapImGuiContext__29_2c_20WrapImGuiContext__29, void_20emscripten__internal__raw_destructor_WrapImGuiContext__28WrapImGuiContext__29, emscripten__internal__Invoker_ImGuiListClipper____invoke_28ImGuiListClipper__20_28__29_28_29_29, embind_init_ImGui_28_29__$_3____invoke_28_29, embind_init_ImGui_28_29__$_4____invoke_28WrapImGuiContext__29, embind_init_ImGui_28_29__$_5____invoke_28_29, embind_init_ImGui_28_29__$_6____invoke_28_29, emscripten__internal__Invoker_void___invoke_28void_20_28__29_28_29_29, ImGui__NewFrame_28_29, ImGui__EndFrame_28_29, ImGui__Render_28_29, embind_init_ImGui_28_29__$_7____invoke_28_29, emscripten__internal__Invoker_void_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_29_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_8____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_9____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_10____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_8____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_12____invoke_28emscripten__val_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, ImGui__ShowAboutWindow_28bool__29, ImGui__ShowAboutWindow_28bool__29, ImGui__ShowUserGuide_28_29, emscripten__internal__Invoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28__29_28_29_29, embind_init_ImGui_28_29__$_15____invoke_28_29, emscripten__internal__Invoker_void_2c_20WrapImGuiContext____invoke_28void_20_28__29_28WrapImGuiContext__29_2c_20WrapImGuiContext__29, embind_init_ImGui_28_29__$_16____invoke_28ImGuiStyle__29, embind_init_ImGui_28_29__$_17____invoke_28ImGuiStyle__29, embind_init_ImGui_28_29__$_18____invoke_28ImGuiStyle__29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_19____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, ImGui__End_28_29, emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val_2c_20bool_2c_20int___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20bool_2c_20int_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_2c_20int_29, embind_init_ImGui_28_29__$_20____invoke_28emscripten__val_2c_20emscripten__val_2c_20bool_2c_20int_29, ImGui__EndChild_28_29, ImGui__IsWindowAppearing_28_29, ImGui__IsWindowCollapsed_28_29, emscripten__internal__Invoker_WrapImGuiContext__2c_20ImFontAtlas____invoke_28WrapImGuiContext__20_28__29_28ImFontAtlas__29_2c_20ImFontAtlas__29, ImGui__IsWindowFocused_28int_29, ImGui__IsWindowHovered_28int_29, embind_init_ImGui_28_29__$_21____invoke_28_29, emscripten__internal__Invoker_emscripten__val_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28emscripten__val_29_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_22____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_23____invoke_28emscripten__val_29, emscripten__internal__Invoker_float___invoke_28float_20_28__29_28_29_29, ImGui__GetWindowWidth_28_29, ImGui__GetWindowHeight_28_29, emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20int_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20int_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_24____invoke_28emscripten__val_2c_20int_2c_20emscripten__val_29, emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20int___invoke_28void_20_28__29_28emscripten__val_2c_20int_29_2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_25____invoke_28emscripten__val_2c_20int_29, emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_26____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_27____invoke_28emscripten__val_29, emscripten__internal__Invoker_void_2c_20bool_2c_20int___invoke_28void_20_28__29_28bool_2c_20int_29_2c_20bool_2c_20int_29, ImGui__SetNextWindowCollapsed_28bool_2c_20int_29, ImGui__SetNextWindowFocus_28_29, emscripten__internal__Invoker_void_2c_20float___invoke_28void_20_28__29_28float_29_2c_20float_29, ImGui__SetNextWindowBgAlpha_28float_29, embind_init_ImGui_28_29__$_28____invoke_28emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_29____invoke_28emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_30____invoke_28bool_2c_20int_29, embind_init_ImGui_28_29__$_31____invoke_28_29, ImGui__SetWindowFontScale_28float_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_32____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_33____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_2c_20int_29, embind_init_ImGui_28_29__$_34____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_29, embind_init_ImGui_28_29__$_35____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_36____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_37____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_38____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_39____invoke_28emscripten__val_29, ImGui__GetScrollX_28_29, ImGui__GetScrollY_28_29, ImGui__SetScrollX_28float_29, ImGui__SetScrollY_28float_29, ImGui__GetScrollMaxX_28_29, ImGui__GetScrollMaxY_28_29, ImGui__SetScrollHereX_28float_29, ImGui__SetScrollHereY_28float_29, emscripten__internal__Invoker_void_2c_20float_2c_20float___invoke_28void_20_28__29_28float_2c_20float_29_2c_20float_2c_20float_29, ImGui__SetScrollFromPosX_28float_2c_20float_29, ImGui__SetScrollFromPosY_28float_2c_20float_29, embind_init_ImGui_28_29__$_40____invoke_28emscripten__val_29, ImGui__PopFont_28_29, emscripten__internal__Invoker_void_2c_20int_2c_20emscripten__val___invoke_28void_20_28__29_28int_2c_20emscripten__val_29_2c_20int_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_41____invoke_28int_2c_20emscripten__val_29, emscripten__internal__Invoker_void_2c_20WrapImGuiContext____invoke_28void_20_28__29_28WrapImGuiContext__29_2c_20WrapImGuiContext__29, ImGui__PopStyleColor_28int_29, embind_init_ImGui_28_29__$_42____invoke_28int_2c_20emscripten__val_29, ImGui__PopStyleVar_28int_29, emscripten__internal__Invoker_void_2c_20WrapImGuiContext____invoke_28void_20_28__29_28WrapImGuiContext__29_2c_20WrapImGuiContext__29, ImGui__PushAllowKeyboardFocus_28bool_29, ImGui__PopItemFlag_28_29, ImGui__PushButtonRepeat_28bool_29, ImGui__PopItemFlag_28_29, ImGui__PushItemWidth_28float_29, ImGui__PopItemWidth_28_29, ImGui__SetNextItemWidth_28float_29, ImGui__CalcItemWidth_28_29, ImGui__PushTextWrapPos_28float_29, ImGui__PopTextWrapPos_28_29, embind_init_ImGui_28_29__$_43____invoke_28_29, ImGui__GetFontSize_28_29, embind_init_ImGui_28_29__$_44____invoke_28emscripten__val_29, emscripten__internal__Invoker_unsigned_20int_2c_20int_2c_20emscripten__val___invoke_28unsigned_20int_20_28__29_28int_2c_20emscripten__val_29_2c_20int_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_45____invoke_28int_2c_20emscripten__val_29, emscripten__internal__Invoker_unsigned_20int_2c_20emscripten__val___invoke_28unsigned_20int_20_28__29_28emscripten__val_29_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_46____invoke_28emscripten__val_29, emscripten__internal__Invoker_WrapImGuiContext__2c_20ImFontAtlas____invoke_28WrapImGuiContext__20_28__29_28ImFontAtlas__29_2c_20ImFontAtlas__29, embind_init_ImGui_28_29__$_47____invoke_28unsigned_20int_29, emscripten__internal__Invoker_emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28int_29_2c_20int_29, embind_init_ImGui_28_29__$_48____invoke_28int_29, ImGui__Separator_28_29, ImGui__SameLine_28float_2c_20float_29, ImGui__NewLine_28_29, ImGui__Spacing_28_29, embind_init_ImGui_28_29__$_49____invoke_28emscripten__val_29, ImGui__Indent_28float_29, ImGui__Unindent_28float_29, ImGui__BeginGroup_28_29, ImGui__EndGroup_28_29, embind_init_ImGui_28_29__$_50____invoke_28emscripten__val_29, ImGui__GetCursorPosX_28_29, ImGui__GetCursorPosY_28_29, embind_init_ImGui_28_29__$_51____invoke_28emscripten__val_29, ImGui__SetCursorPosX_28float_29, ImGui__SetCursorPosY_28float_29, embind_init_ImGui_28_29__$_52____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_53____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_54____invoke_28emscripten__val_29, ImGui__AlignTextToFramePadding_28_29, ImGui__GetFontSize_28_29, ImGui__GetTextLineHeightWithSpacing_28_29, ImGui__GetFrameHeight_28_29, ImGui__GetFrameHeightWithSpacing_28_29, embind_init_ImGui_28_29__$_55____invoke_28emscripten__val_29, ImGui__PopID_28_29, embind_init_ImGui_28_29__$_56____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_57____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_58____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28__29_28emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten___EM_VAL__2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImGui_28_29__$_59____invoke_28emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_60____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_61____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImGui_28_29__$_62____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_63____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_64____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImGui_28_29__$_65____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_66____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_29, embind_init_ImGui_28_29__$_67____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_68____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_69____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_70____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_71____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_29, embind_init_ImGui_28_29__$_72____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29, embind_init_ImGui_28_29__$_73____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_void_2c_20float_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28float_2c_20emscripten__val_2c_20emscripten__val_29_2c_20float_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_74____invoke_28float_2c_20emscripten__val_2c_20emscripten__val_29, ImGui__Bullet_28_29, embind_init_ImGui_28_29__$_75____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, ImGui__EndCombo_28_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_29, embind_init_ImGui_28_29__$_76____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_77____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_78____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_79____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_80____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_81____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_82____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_83____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_84____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_85____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_86____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_87____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_88____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_89____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_90____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_91____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_92____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_93____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_94____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_95____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_96____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_97____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_98____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_99____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_100____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20unsigned_20long_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_101____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20unsigned_20long_2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_102____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20unsigned_20long_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_103____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_104____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_105____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_106____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_107____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20int_29, embind_init_ImGui_28_29__$_108____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20int_2c_20int_29, embind_init_ImGui_28_29__$_109____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_110____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_111____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20double_2c_20double_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20double_2c_20double_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20double_2c_20double_2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_112____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20double_2c_20double_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_113____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_114____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_115____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_116____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20int_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_117____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_118____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29, ImGui__SetColorEditOptions_28int_29, embind_init_ImGui_28_29__$_119____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImGui_28_29__$_120____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__Invoker_bool_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImGui_28_29__$_121____invoke_28int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_122____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImGui_28_29__$_123____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, emscripten__internal__Invoker_bool_2c_20int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char_____invoke_28bool_20_28__29_28int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29_2c_20int_2c_20int_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___29, embind_init_ImGui_28_29__$_124____invoke_28int_2c_20int_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_125____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_126____invoke_28int_29, ImGui__TreePop_28_29, ImGui__GetTreeNodeToLabelSpacing_28_29, embind_init_ImGui_28_29__$_127____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, embind_init_ImGui_28_29__$_128____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, ImGui__SetNextItemOpen_28bool_2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_2c_20emscripten__val___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_2c_20int_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_129____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20int_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_130____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_131____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_29, ImGui__EndListBox_28_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_29, embind_init_ImGui_28_29__$_132____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29, embind_init_ImGui_28_29__$_133____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_134____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_135____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_29, embind_init_ImGui_28_29__$_136____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_29, embind_init_ImGui_28_29__$_137____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_29, embind_init_ImGui_28_29__$_137____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20float_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_139____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20float_2c_20emscripten__val_29, ImGui__BeginMenuBar_28_29, ImGui__EndMenuBar_28_29, ImGui__BeginMainMenuBar_28_29, ImGui__EndMainMenuBar_28_29, embind_init_ImGui_28_29__$_140____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_29, ImGui__EndMenu_28_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20bool_2c_20bool_29, embind_init_ImGui_28_29__$_141____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_142____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20bool_29, ImGui__BeginTooltip_28_29, ImGui__EndTooltip_28_29, embind_init_ImGui_28_29__$_143____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_144____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, embind_init_ImGui_28_29__$_145____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, ImGui__EndPopup_28_29, embind_init_ImGui_28_29__$_146____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, embind_init_ImGui_28_29__$_147____invoke_28emscripten__val_2c_20int_29, ImGui__CloseCurrentPopup_28_29, emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28emscripten__val_2c_20int_29_2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_148____invoke_28emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_149____invoke_28emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_150____invoke_28emscripten__val_2c_20int_29, embind_init_ImGui_28_29__$_151____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20int_2c_20emscripten__val_2c_20float___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20int_2c_20emscripten__val_2c_20float_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20int_2c_20emscripten___EM_VAL__2c_20float_29, embind_init_ImGui_28_29__$_152____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20int_2c_20emscripten__val_2c_20float_29, embind_init_ImGui_28_29__$_153____invoke_28_29, emscripten__internal__Invoker_void_2c_20int_2c_20float___invoke_28void_20_28__29_28int_2c_20float_29_2c_20int_2c_20float_29, embind_init_ImGui_28_29__$_154____invoke_28int_2c_20float_29, embind_init_ImGui_28_29__$_155____invoke_28_29, embind_init_ImGui_28_29__$_156____invoke_28int_29, emscripten__internal__Invoker_void_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20float_2c_20unsigned_20int___invoke_28void_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20float_2c_20unsigned_20int_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20int_2c_20float_2c_20unsigned_20int_29, embind_init_ImGui_28_29__$_157____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_2c_20float_2c_20unsigned_20int_29, emscripten__internal__Invoker_void_2c_20bool_2c_20int___invoke_28void_20_28__29_28bool_2c_20int_29_2c_20bool_2c_20int_29, embind_init_ImGui_28_29__$_158____invoke_28int_2c_20int_29, embind_init_ImGui_28_29__$_159____invoke_28_29, embind_init_ImGui_28_29__$_160____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_161____invoke_28_29, emscripten__internal__Invoker_ImGuiListClipper____invoke_28ImGuiListClipper__20_28__29_28_29_29, embind_init_ImGui_28_29__$_162____invoke_28_29, embind_init_ImGui_28_29__$_163____invoke_28_29, embind_init_ImGui_28_29__$_164____invoke_28_29, emscripten__internal__Invoker_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int___invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___20_28__29_28int_29_2c_20int_29, embind_init_ImGui_28_29__$_165____invoke_28int_29, emscripten__internal__Invoker_WrapImGuiContext__2c_20ImFontAtlas____invoke_28WrapImGuiContext__20_28__29_28ImFontAtlas__29_2c_20ImFontAtlas__29, embind_init_ImGui_28_29__$_166____invoke_28int_29, emscripten__internal__Invoker_void_2c_20bool_2c_20int___invoke_28void_20_28__29_28bool_2c_20int_29_2c_20bool_2c_20int_29, embind_init_ImGui_28_29__$_167____invoke_28int_2c_20bool_29, emscripten__internal__Invoker_void_2c_20int_2c_20unsigned_20int_2c_20int___invoke_28void_20_28__29_28int_2c_20unsigned_20int_2c_20int_29_2c_20int_2c_20unsigned_20int_2c_20int_29, embind_init_ImGui_28_29__$_168____invoke_28int_2c_20unsigned_20int_2c_20int_29, emscripten__internal__Invoker_void_2c_20int_2c_20emscripten__val_2c_20bool___invoke_28void_20_28__29_28int_2c_20emscripten__val_2c_20bool_29_2c_20int_2c_20emscripten___EM_VAL__2c_20bool_29, embind_init_ImGui_28_29__$_169____invoke_28int_2c_20emscripten__val_2c_20bool_29, ImGui__NextColumn_28_29, ImGui__GetColumnIndex_28_29, emscripten__internal__Invoker_float_2c_20int___invoke_28float_20_28__29_28int_29_2c_20int_29, ImGui__GetColumnWidth_28int_29, ImGui__SetColumnWidth_28int_2c_20float_29, ImGui__GetColumnOffset_28int_29, ImGui__SetColumnOffset_28int_2c_20float_29, ImGui__GetColumnsCount_28_29, embind_init_ImGui_28_29__$_170____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, ImGui__EndTabBar_28_29, embind_init_ImGui_28_29__$_171____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20int_29, ImGui__EndTabItem_28_29, embind_init_ImGui_28_29__$_172____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, embind_init_ImGui_28_29__$_173____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, ImGui__LogToTTY_28int_29, embind_init_ImGui_28_29__$_174____invoke_28int_2c_20emscripten__val_29, ImGui__LogToClipboard_28int_29, ImGui__LogFinish_28_29, ImGui__LogButtons_28_29, embind_init_ImGui_28_29__$_175____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, ImGui__BeginDragDropSource_28int_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20bool_2c_20bool_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20emscripten___EM_VAL__2c_20bool_2c_20bool_29, embind_init_ImGui_28_29__$_176____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_29, ImGui__EndDragDropSource_28_29, ImGui__BeginDragDropTarget_28_29, embind_init_ImGui_28_29__$_177____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20int_29, ImGui__EndDragDropTarget_28_29, embind_init_ImGui_28_29__$_178____invoke_28_29, ImGui__BeginDisabled_28bool_29, ImGui__EndDisabled_28_29, emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20bool___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20bool_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20bool_29, embind_init_ImGui_28_29__$_179____invoke_28emscripten__val_2c_20emscripten__val_2c_20bool_29, ImGui__PopClipRect_28_29, ImGui__SetItemDefaultFocus_28_29, ImGui__SetKeyboardFocusHere_28int_29, ImGui__IsItemHovered_28int_29, ImGui__IsItemActive_28_29, ImGui__IsItemFocused_28_29, ImGui__IsItemClicked_28int_29, ImGui__IsItemVisible_28_29, ImGui__IsItemEdited_28_29, ImGui__IsItemActivated_28_29, ImGui__IsItemDeactivated_28_29, ImGui__IsItemDeactivatedAfterEdit_28_29, ImGui__IsItemToggledOpen_28_29, ImGui__IsAnyItemHovered_28_29, ImGui__IsAnyItemActive_28_29, ImGui__IsAnyItemFocused_28_29, embind_init_ImGui_28_29__$_180____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_181____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_182____invoke_28emscripten__val_29, ImGui__SetItemAllowOverlap_28_29, embind_init_ImGui_28_29__$_183____invoke_28_29, emscripten__internal__Invoker_unsigned_20int_2c_20emscripten__val___invoke_28unsigned_20int_20_28__29_28emscripten__val_29_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_184____invoke_28emscripten__val_29, emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_185____invoke_28emscripten__val_2c_20emscripten__val_29, emscripten__internal__Invoker_double___invoke_28double_20_28__29_28_29_29, ImGui__GetTime_28_29, ImGui__GetFrameCount_28_29, embind_init_ImGui_28_29__$_186____invoke_28_29, embind_init_ImGui_28_29__$_187____invoke_28_29, embind_init_ImGui_28_29__$_188____invoke_28_29, embind_init_ImGui_28_29__$_189____invoke_28int_29, embind_init_ImGui_28_29__$_190____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_191____invoke_28_29, emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_192____invoke_28emscripten__val_2c_20emscripten__val_2c_20int_29, ImGui__EndChildFrame_28_29, emscripten__internal__Invoker_emscripten__val_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20float_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20float_2c_20emscripten__val_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20bool_2c_20float_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_193____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20bool_2c_20float_2c_20emscripten__val_29, emscripten__internal__Invoker_emscripten__val_2c_20unsigned_20int_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28unsigned_20int_2c_20emscripten__val_29_2c_20unsigned_20int_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_194____invoke_28unsigned_20int_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_195____invoke_28emscripten__val_29, emscripten__internal__Invoker_void_2c_20float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20float_2c_20float_2c_20float_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_196____invoke_28float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, embind_init_ImGui_28_29__$_197____invoke_28float_2c_20float_2c_20float_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, ImGui__GetKeyIndex_28int_29, ImGui__IsKeyDown_28int_29, emscripten__internal__Invoker_bool_2c_20int_2c_20bool___invoke_28bool_20_28__29_28int_2c_20bool_29_2c_20int_2c_20bool_29, ImGui__IsKeyPressed_28int_2c_20bool_29, ImGui__IsKeyReleased_28int_29, emscripten__internal__Invoker_int_2c_20int_2c_20float_2c_20float___invoke_28int_20_28__29_28int_2c_20float_2c_20float_29_2c_20int_2c_20float_2c_20float_29, ImGui__GetKeyPressedAmount_28int_2c_20float_2c_20float_29, ImGui__CaptureKeyboardFromApp_28bool_29, ImGui__IsMouseDown_28int_29, ImGui__IsMouseClicked_28int_2c_20bool_29, ImGui__IsMouseReleased_28int_29, ImGui__IsMouseDoubleClicked_28int_29, ImGui__GetMouseClickedCount_28int_29, emscripten__internal__Invoker_bool_2c_20emscripten__val_2c_20emscripten__val_2c_20int___invoke_28bool_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20int_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20int_29, embind_init_ImGui_28_29__$_198____invoke_28emscripten__val_2c_20emscripten__val_2c_20bool_29, embind_init_ImGui_28_29__$_199____invoke_28emscripten__val_29, ImGui__IsAnyMouseDown_28_29, embind_init_ImGui_28_29__$_200____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_201____invoke_28emscripten__val_29, emscripten__internal__Invoker_bool_2c_20int_2c_20float___invoke_28bool_20_28__29_28int_2c_20float_29_2c_20int_2c_20float_29, ImGui__IsMouseDragging_28int_2c_20float_29, emscripten__internal__Invoker_emscripten__val_2c_20int_2c_20float_2c_20emscripten__val___invoke_28emscripten__val_20_28__29_28int_2c_20float_2c_20emscripten__val_29_2c_20int_2c_20float_2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_202____invoke_28int_2c_20float_2c_20emscripten__val_29, ImGui__ResetMouseDragDelta_28int_29, ImGui__GetMouseCursor_28_29, ImGui__SetMouseCursor_28int_29, ImGui__CaptureMouseFromApp_28bool_29, embind_init_ImGui_28_29__$_203____invoke_28_29, embind_init_ImGui_28_29__$_204____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_205____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___29, embind_init_ImGui_28_29__$_206____invoke_28_29, emscripten__internal__Invoker_bool_2c_20std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long___invoke_28bool_20_28__29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29_2c_20emscripten__internal__BindingType_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20void____unnamed___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29, embind_init_ImGui_28_29__$_207____invoke_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_2c_20unsigned_20long_29, emscripten__internal__Invoker_void_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val___invoke_28void_20_28__29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__2c_20emscripten___EM_VAL__29, embind_init_ImGui_28_29__$_208____invoke_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29, emscripten__internal__Invoker_emscripten__val_2c_20int___invoke_28emscripten__val_20_28__29_28int_29_2c_20int_29, embind_init_ImGui_28_29__$_209____invoke_28unsigned_20long_29, embind_init_ImGui_28_29__$_210____invoke_28emscripten__val_29, embind_init_ImGui_28_29__$_26__operator_28_29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28ImGuiSizeCallbackData__29____invoke_28ImGuiSizeCallbackData__29, embind_init_ImGui_28_29__$_76__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_20const___lambda__28void__2c_20int_2c_20char_20const___29____invoke_28void__2c_20int_2c_20char_20const___29, embind_init_ImGui_28_29__$_101__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28ImGuiInputTextCallbackData__29____invoke_28ImGuiInputTextCallbackData__29, embind_init_ImGui_28_29__$_102__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20emscripten__val_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28ImGuiInputTextCallbackData__29____invoke_28ImGuiInputTextCallbackData__29, embind_init_ImGui_28_29__$_101__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20unsigned_20long_2c_20int_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28ImGuiInputTextCallbackData__29____invoke_28ImGuiInputTextCallbackData__29, embind_init_ImGui_28_29__$_132__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_20const___lambda__28void__2c_20int_2c_20char_20const___29____invoke_28void__2c_20int_2c_20char_20const___29, embind_init_ImGui_28_29__$_133__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_29_20const___lambda__28void__2c_20int_2c_20char_20const___29____invoke_28void__2c_20int_2c_20char_20const___29, embind_init_ImGui_28_29__$_134__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28void__2c_20int_29____invoke_28void__2c_20int_29, embind_init_ImGui_28_29__$_135__operator_28_29_28std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char___2c_20emscripten__val_2c_20emscripten__val_2c_20int_2c_20int_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28void__2c_20int_29____invoke_28void__2c_20int_29, embind_init_ImGui_28_29__$_208__operator_28_29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28unsigned_20long_2c_20void__29____invoke_28unsigned_20long_2c_20void__29, embind_init_ImGui_28_29__$_208__operator_28_29_28emscripten__val_2c_20emscripten__val_2c_20emscripten__val_29_20const___lambda__28void__2c_20void__29____invoke_28void__2c_20void__29, WrapImGuiContext___SetClipboardText_28void__2c_20char_20const__29, WrapImGuiContext___GetClipboardText_28void__29, embind_init_mallinfo_28_29, embind_init_WrapImGuiContext_28_29, embind_init_ImVec2_28_29, embind_init_ImVec4_28_29, embind_init_ImGuiInputTextCallbackData_28_29, embind_init_ImGuiSizeCallbackData_28_29, embind_init_ImGuiListClipper_28_29, embind_init_ImGuiTableColumnSortSpecs_28_29, embind_init_ImGuiTableSortSpecs_28_29, embind_init_ImDrawCmd_28_29, embind_init_ImDrawList_28_29, embind_init_ImDrawData_28_29, embind_init_ImFontGlyph_28_29, embind_init_ImFontConfig_28_29, embind_init_ImFont_28_29, embind_init_ImFontAtlas_28_29, embind_init_ImGuiViewport_28_29, embind_init_ImGuiIO_28_29, embind_init_ImGuiStyle_28_29, embind_init_ImGui_28_29, import_maybe_null_value_ImVec4____import_value_28_29, access_maybe_null_value_bool_2c_201ul____access_maybe_null_value_28_29, access_maybe_null_value_bool_2c_201ul____access_maybe_null_value_28_29_1, access_maybe_null_value_bool_2c_201ul____import_value_28_29, access_maybe_null_value_bool_2c_201ul____export_value_28_29, access_value_bool_2c_201ul____access_value_28_29, access_value_bool_2c_201ul____access_value_28_29_1, access_maybe_null_value_bool_2c_201ul____import_value_28_29, access_maybe_null_value_bool_2c_201ul____export_value_28_29, access_value_unsigned_20int_2c_201ul____access_value_28_29, access_value_unsigned_20int_2c_201ul____access_value_28_29_1, access_value_unsigned_20int_2c_201ul____import_value_28_29, access_value_unsigned_20int_2c_201ul____export_value_28_29, access_value_int_2c_201ul____access_value_28_29, access_value_int_2c_201ul____access_value_28_29_1, access_value_int_2c_201ul____import_value_28_29, access_value_int_2c_201ul____export_value_28_29, import_maybe_null_value_std____2__basic_string_char_2c_20std____2__char_traits_char__2c_20std____2__allocator_char______import_value_28_29, access_value_float_2c_201ul____access_value_28_29, access_value_float_2c_201ul____access_value_28_29_1, access_value_float_2c_201ul____import_value_28_29, access_value_float_2c_201ul____export_value_28_29, access_value_float_2c_202ul____access_value_28_29, access_value_float_2c_202ul____access_value_28_29_1, access_value_float_2c_202ul____import_value_28_29, access_value_float_2c_202ul____export_value_28_29, access_value_float_2c_203ul____access_value_28_29, access_value_float_2c_203ul____access_value_28_29_1, access_value_float_2c_203ul____import_value_28_29, access_value_float_2c_203ul____export_value_28_29, access_value_float_2c_204ul____access_value_28_29, access_value_float_2c_204ul____access_value_28_29_1, access_value_float_2c_204ul____import_value_28_29, access_value_float_2c_204ul____export_value_28_29, access_value_int_2c_202ul____access_value_28_29, access_value_int_2c_202ul____access_value_28_29_1, access_value_int_2c_202ul____import_value_28_29, access_value_int_2c_202ul____export_value_28_29, access_value_int_2c_203ul____access_value_28_29, access_value_int_2c_203ul____access_value_28_29_1, access_value_int_2c_203ul____import_value_28_29, access_value_int_2c_203ul____export_value_28_29, access_value_int_2c_204ul____access_value_28_29, access_value_int_2c_204ul____access_value_28_29_1, access_value_int_2c_204ul____import_value_28_29, access_value_int_2c_204ul____export_value_28_29, import_maybe_null_value_signed_20char____import_value_28_29, import_maybe_null_value_unsigned_20char____import_value_28_29, import_maybe_null_value_short____import_value_28_29, import_maybe_null_value_unsigned_20short____import_value_28_29, import_maybe_null_value_int____import_value_28_29, import_maybe_null_value_unsigned_20int____import_value_28_29, import_maybe_null_value_float____import_value_28_29, import_maybe_null_value_double____import_value_28_29, access_value_double_2c_201ul____access_value_28_29, access_value_double_2c_201ul____access_value_28_29_1, access_value_double_2c_201ul____import_value_28_29, access_value_double_2c_201ul____export_value_28_29, access_maybe_null_value_float_2c_204ul____access_maybe_null_value_28_29, access_maybe_null_value_float_2c_204ul____access_maybe_null_value_28_29_1, access_value_float_2c_204ul____import_value_28_29, access_value_float_2c_204ul____export_value_28_29, import_maybe_null_value_ImVec2____import_value_28_29, embind_init_builtin_28_29, __stdio_seek, __stdio_write, __stdio_read, __stdio_close, wrapper_cmp, __emscripten_stdout_close, __emscripten_stdout_seek, fmt_fp, pop_arg_long_double, sn_write, string_read, dummy_1, operator_20delete_28void__2c_20std__align_val_t_29, ImGui__ShowAboutWindow_28bool__29, ImGui__ShowAboutWindow_28bool__29, __cxxabiv1____fundamental_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, operator_20delete_28void__2c_20std__align_val_t_29, __cxxabiv1____class_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, __cxxabiv1____class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, operator_20delete_28void__2c_20std__align_val_t_29, __cxxabiv1____si_class_type_info__search_above_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__search_below_dst_28__cxxabiv1____dynamic_cast_info__2c_20void_20const__2c_20int_2c_20bool_29_20const, __cxxabiv1____si_class_type_info__has_unambiguous_public_base_28__cxxabiv1____dynamic_cast_info__2c_20void__2c_20int_29_20const, operator_20delete_28void__2c_20std__align_val_t_29, __cxxabiv1____pointer_type_info__can_catch_28__cxxabiv1____shim_type_info_20const__2c_20void___29_20const, operator_20delete_28void__2c_20std__align_val_t_29, std__bad_alloc__what_28_29_20const, operator_20delete_28void__2c_20std__align_val_t_29, std__bad_array_new_length__what_28_29_20const, operator_20delete_28void__2c_20std__align_val_t_29, std__exception__what_28_29_20const, std__logic_error___logic_error_28_29_1, std__logic_error__what_28_29_20const, std__logic_error___logic_error_28_29_1]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": __wasm_call_ctors, 
  "malloc": dlmalloc, 
  "free": dlfree, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "__getTypeName": __getTypeName, 
  "_embind_initialize_bindings": _embind_initialize_bindings, 
  "__errno_location": __errno_location, 
  "sbrk": sbrk, 
  "emscripten_get_sbrk_ptr": emscripten_get_sbrk_ptr, 
  "setTempRet0": setTempRet0, 
  "getTempRet0": getTempRet0, 
  "emscripten_stack_get_base": emscripten_stack_get_base, 
  "stackSave": stackSave, 
  "stackRestore": stackRestore, 
  "stackAlloc": stackAlloc, 
  "__cxa_is_pointer_type": __cxa_is_pointer_type, 
  "dynCall_jiji": legalstub$dynCall_jiji
 };
}

  return asmFunc(info);
}

)(info);
 },
 instantiate: function(binary, info) {
  return {
   then: function(ok) {
    var module = new WebAssembly.Module(binary);
    ok({
     "instance": new WebAssembly.Instance(module, info)
    });
   }
  };
 },
 RuntimeError: Error
};

wasmBinary = [];

if (typeof WebAssembly != "object") {
 abort("no native wasm support detected");
}

function getSafeHeapType(bytes, isFloat) {
 switch (bytes) {
 case 1:
  return "i8";

 case 2:
  return "i16";

 case 4:
  return isFloat ? "float" : "i32";

 case 8:
  return isFloat ? "double" : "i64";

 default:
  assert(0, "getSafeHeapType() invalid bytes=" + bytes);
 }
}

function SAFE_HEAP_STORE(dest, value, bytes, isFloat) {
 if (dest <= 0) abort("segmentation fault storing " + bytes + " bytes to address " + dest);
 if (dest % bytes !== 0) abort("alignment error storing to address " + dest + ", which was expected to be aligned to a multiple of " + bytes);
 if (runtimeInitialized) {
  var brk = _sbrk() >>> 0;
  if (dest + bytes > brk) abort("segmentation fault, exceeded the top of the available dynamic heap when storing " + bytes + " bytes to address " + dest + ". DYNAMICTOP=" + brk);
  assert(brk >= _emscripten_stack_get_base(), "brk >= _emscripten_stack_get_base() (brk=" + brk + ", _emscripten_stack_get_base()=" + _emscripten_stack_get_base() + ")");
  assert(brk <= wasmMemory.buffer.byteLength, "brk <= wasmMemory.buffer.byteLength (brk=" + brk + ", wasmMemory.buffer.byteLength=" + wasmMemory.buffer.byteLength + ")");
 }
 setValue_safe(dest, value, getSafeHeapType(bytes, isFloat));
 return value;
}

function SAFE_HEAP_STORE_D(dest, value, bytes) {
 return SAFE_HEAP_STORE(dest, value, bytes, true);
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned, isFloat) {
 if (dest <= 0) abort("segmentation fault loading " + bytes + " bytes from address " + dest);
 if (dest % bytes !== 0) abort("alignment error loading from address " + dest + ", which was expected to be aligned to a multiple of " + bytes);
 if (runtimeInitialized) {
  var brk = _sbrk() >>> 0;
  if (dest + bytes > brk) abort("segmentation fault, exceeded the top of the available dynamic heap when loading " + bytes + " bytes from address " + dest + ". DYNAMICTOP=" + brk);
  assert(brk >= _emscripten_stack_get_base(), "brk >= _emscripten_stack_get_base() (brk=" + brk + ", _emscripten_stack_get_base()=" + _emscripten_stack_get_base() + ")");
  assert(brk <= wasmMemory.buffer.byteLength, "brk <= wasmMemory.buffer.byteLength (brk=" + brk + ", wasmMemory.buffer.byteLength=" + wasmMemory.buffer.byteLength + ")");
 }
 var type = getSafeHeapType(bytes, isFloat);
 var ret = getValue_safe(dest, type);
 if (unsigned) ret = unSign(ret, parseInt(type.substr(1), 10));
 return ret;
}

function SAFE_HEAP_LOAD_D(dest, bytes, unsigned) {
 return SAFE_HEAP_LOAD(dest, bytes, unsigned, true);
}

function SAFE_FT_MASK(value, mask) {
 var ret = value & mask;
 if (ret !== value) {
  abort("Function table mask error: function pointer is " + value + " which is masked by " + mask + ", the likely cause of this is that the function pointer is being called by the wrong type.");
 }
 return ret;
}

function segfault() {
 abort("segmentation fault");
}

function alignfault() {
 abort("alignment fault");
}

var wasmMemory;

var ABORT = false;

var EXITSTATUS;

function assert(condition, text) {
 if (!condition) {
  abort(text);
 }
}

var UTF8Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf8") : undefined;

function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
 var endIdx = idx + maxBytesToRead;
 var endPtr = idx;
 while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;
 if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
  return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
 }
 var str = "";
 while (idx < endPtr) {
  var u0 = heapOrArray[idx++];
  if (!(u0 & 128)) {
   str += String.fromCharCode(u0);
   continue;
  }
  var u1 = heapOrArray[idx++] & 63;
  if ((u0 & 224) == 192) {
   str += String.fromCharCode((u0 & 31) << 6 | u1);
   continue;
  }
  var u2 = heapOrArray[idx++] & 63;
  if ((u0 & 240) == 224) {
   u0 = (u0 & 15) << 12 | u1 << 6 | u2;
  } else {
   u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heapOrArray[idx++] & 63;
  }
  if (u0 < 65536) {
   str += String.fromCharCode(u0);
  } else {
   var ch = u0 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  }
 }
 return str;
}

function UTF8ToString(ptr, maxBytesToRead) {
 return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
}

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
 if (!(maxBytesToWrite > 0)) return 0;
 var startIdx = outIdx;
 var endIdx = outIdx + maxBytesToWrite - 1;
 for (var i = 0; i < str.length; ++i) {
  var u = str.charCodeAt(i);
  if (u >= 55296 && u <= 57343) {
   var u1 = str.charCodeAt(++i);
   u = 65536 + ((u & 1023) << 10) | u1 & 1023;
  }
  if (u <= 127) {
   if (outIdx >= endIdx) break;
   heap[outIdx++] = u;
  } else if (u <= 2047) {
   if (outIdx + 1 >= endIdx) break;
   heap[outIdx++] = 192 | u >> 6;
   heap[outIdx++] = 128 | u & 63;
  } else if (u <= 65535) {
   if (outIdx + 2 >= endIdx) break;
   heap[outIdx++] = 224 | u >> 12;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  } else {
   if (outIdx + 3 >= endIdx) break;
   heap[outIdx++] = 240 | u >> 18;
   heap[outIdx++] = 128 | u >> 12 & 63;
   heap[outIdx++] = 128 | u >> 6 & 63;
   heap[outIdx++] = 128 | u & 63;
  }
 }
 heap[outIdx] = 0;
 return outIdx - startIdx;
}

function stringToUTF8(str, outPtr, maxBytesToWrite) {
 return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}

function lengthBytesUTF8(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var c = str.charCodeAt(i);
  if (c <= 127) {
   len++;
  } else if (c <= 2047) {
   len += 2;
  } else if (c >= 55296 && c <= 57343) {
   len += 4;
   ++i;
  } else {
   len += 3;
  }
 }
 return len;
}

var HEAP, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateMemoryViews() {
 var b = wasmMemory.buffer;
 Module["HEAP8"] = HEAP8 = new Int8Array(b);
 Module["HEAP16"] = HEAP16 = new Int16Array(b);
 Module["HEAP32"] = HEAP32 = new Int32Array(b);
 Module["HEAPU8"] = HEAPU8 = new Uint8Array(b);
 Module["HEAPU16"] = HEAPU16 = new Uint16Array(b);
 Module["HEAPU32"] = HEAPU32 = new Uint32Array(b);
 Module["HEAPF32"] = HEAPF32 = new Float32Array(b);
 Module["HEAPF64"] = HEAPF64 = new Float64Array(b);
}

var INITIAL_MEMORY = Module["INITIAL_MEMORY"] || 16777216;

assert(INITIAL_MEMORY >= 65536, "INITIAL_MEMORY should be larger than STACK_SIZE, was " + INITIAL_MEMORY + "! (STACK_SIZE=" + 65536 + ")");

if (Module["wasmMemory"]) {
 wasmMemory = Module["wasmMemory"];
} else {
 wasmMemory = new WebAssembly.Memory({
  "initial": INITIAL_MEMORY / 65536,
  "maximum": INITIAL_MEMORY / 65536
 });
}

updateMemoryViews();

INITIAL_MEMORY = wasmMemory.buffer.byteLength;

var wasmTable;

var __ATPRERUN__ = [];

var __ATINIT__ = [];

var __ATEXIT__ = [];

var __ATPOSTRUN__ = [];

var runtimeInitialized = false;

var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
 return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {
 if (Module["preRun"]) {
  if (typeof Module["preRun"] == "function") Module["preRun"] = [ Module["preRun"] ];
  while (Module["preRun"].length) {
   addOnPreRun(Module["preRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
 runtimeInitialized = true;
 callRuntimeCallbacks(__ATINIT__);
}

function postRun() {
 if (Module["postRun"]) {
  if (typeof Module["postRun"] == "function") Module["postRun"] = [ Module["postRun"] ];
  while (Module["postRun"].length) {
   addOnPostRun(Module["postRun"].shift());
  }
 }
 callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
 __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
 __ATINIT__.unshift(cb);
}

function addOnExit(cb) {}

function addOnPostRun(cb) {
 __ATPOSTRUN__.unshift(cb);
}

var runDependencies = 0;

var runDependencyWatcher = null;

var dependenciesFulfilled = null;

function getUniqueRunDependency(id) {
 return id;
}

function addRunDependency(id) {
 runDependencies++;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
}

function removeRunDependency(id) {
 runDependencies--;
 if (Module["monitorRunDependencies"]) {
  Module["monitorRunDependencies"](runDependencies);
 }
 if (runDependencies == 0) {
  if (runDependencyWatcher !== null) {
   clearInterval(runDependencyWatcher);
   runDependencyWatcher = null;
  }
  if (dependenciesFulfilled) {
   var callback = dependenciesFulfilled;
   dependenciesFulfilled = null;
   callback();
  }
 }
}

function abort(what) {
 if (Module["onAbort"]) {
  Module["onAbort"](what);
 }
 what = "Aborted(" + what + ")";
 err(what);
 ABORT = true;
 EXITSTATUS = 1;
 what += ". Build with -sASSERTIONS for more info.";
 var e = new WebAssembly.RuntimeError(what);
 readyPromiseReject(e);
 throw e;
}

var dataURIPrefix = "data:application/octet-stream;base64,";

function isDataURI(filename) {
 return filename.startsWith(dataURIPrefix);
}

function isFileURI(filename) {
 return filename.startsWith("file://");
}

var wasmBinaryFile;

wasmBinaryFile = "<<< WASM_BINARY_FILE >>>";

if (!isDataURI(wasmBinaryFile)) {
 wasmBinaryFile = locateFile(wasmBinaryFile);
}

function getBinary(file) {
 try {
  if (file == wasmBinaryFile && wasmBinary) {
   return new Uint8Array(wasmBinary);
  }
  var binary = tryParseAsDataURI(file);
  if (binary) {
   return binary;
  }
  if (readBinary) {
   return readBinary(file);
  }
  throw "both async and sync fetching of the wasm failed";
 } catch (err) {
  abort(err);
 }
}

function getBinaryPromise(binaryFile) {
 if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
  if (typeof fetch == "function") {
   return fetch(binaryFile, {
    credentials: "same-origin"
   }).then(function(response) {
    if (!response["ok"]) {
     throw "failed to load wasm binary file at '" + binaryFile + "'";
    }
    return response["arrayBuffer"]();
   }).catch(function() {
    return getBinary(binaryFile);
   });
  }
 }
 return Promise.resolve().then(function() {
  return getBinary(binaryFile);
 });
}

function instantiateArrayBuffer(binaryFile, imports, receiver) {
 return getBinaryPromise(binaryFile).then(function(binary) {
  return WebAssembly.instantiate(binary, imports);
 }).then(function(instance) {
  return instance;
 }).then(receiver, function(reason) {
  err("failed to asynchronously prepare wasm: " + reason);
  abort(reason);
 });
}

function instantiateAsync(binary, binaryFile, imports, callback) {
 if (!binary && typeof WebAssembly.instantiateStreaming == "function" && !isDataURI(binaryFile) && typeof fetch == "function") {
  return fetch(binaryFile, {
   credentials: "same-origin"
  }).then(function(response) {
   var result = WebAssembly.instantiateStreaming(response, imports);
   return result.then(callback, function(reason) {
    err("wasm streaming compile failed: " + reason);
    err("falling back to ArrayBuffer instantiation");
    return instantiateArrayBuffer(binaryFile, imports, callback);
   });
  });
 } else {
  return instantiateArrayBuffer(binaryFile, imports, callback);
 }
}

function createWasm() {
 var info = {
  "env": wasmImports,
  "wasi_snapshot_preview1": wasmImports
 };
 function receiveInstance(instance, module) {
  var exports = instance.exports;
  Module["asm"] = exports;
  wasmTable = Module["asm"]["__indirect_function_table"];
  addOnInit(Module["asm"]["__wasm_call_ctors"]);
  removeRunDependency("wasm-instantiate");
  return exports;
 }
 addRunDependency("wasm-instantiate");
 function receiveInstantiationResult(result) {
  receiveInstance(result["instance"]);
 }
 if (Module["instantiateWasm"]) {
  try {
   return Module["instantiateWasm"](info, receiveInstance);
  } catch (e) {
   err("Module.instantiateWasm callback failed with error: " + e);
   readyPromiseReject(e);
  }
 }
 instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);
 return {};
}

var tempDouble;

var tempI64;

function ExitStatus(status) {
 this.name = "ExitStatus";
 this.message = "Program terminated with exit(" + status + ")";
 this.status = status;
}

function callRuntimeCallbacks(callbacks) {
 while (callbacks.length > 0) {
  callbacks.shift()(Module);
 }
}

function getValue(ptr, type = "i8") {
 if (type.endsWith("*")) type = "*";
 switch (type) {
 case "i1":
  return SAFE_HEAP_LOAD(ptr >> 0, 1, 0);

 case "i8":
  return SAFE_HEAP_LOAD(ptr >> 0, 1, 0);

 case "i16":
  return SAFE_HEAP_LOAD((ptr >> 1) * 2, 2, 0);

 case "i32":
  return SAFE_HEAP_LOAD((ptr >> 2) * 4, 4, 0);

 case "i64":
  return SAFE_HEAP_LOAD((ptr >> 2) * 4, 4, 0);

 case "float":
  return SAFE_HEAP_LOAD_D((ptr >> 2) * 4, 4, 0);

 case "double":
  return SAFE_HEAP_LOAD_D((ptr >> 3) * 8, 8, 0);

 case "*":
  return SAFE_HEAP_LOAD((ptr >> 2) * 4, 4, 1);

 default:
  abort("invalid type for getValue: " + type);
 }
}

function getValue_safe(ptr, type = "i8") {
 if (type.endsWith("*")) type = "*";
 switch (type) {
 case "i1":
  return HEAP8[ptr >> 0];

 case "i8":
  return HEAP8[ptr >> 0];

 case "i16":
  return HEAP16[ptr >> 1];

 case "i32":
  return HEAP32[ptr >> 2];

 case "i64":
  return HEAP32[ptr >> 2];

 case "float":
  return HEAPF32[ptr >> 2];

 case "double":
  return HEAPF64[ptr >> 3];

 case "*":
  return HEAPU32[ptr >> 2];

 default:
  abort("invalid type for getValue: " + type);
 }
}

function intArrayToString(array) {
 var ret = [];
 for (var i = 0; i < array.length; i++) {
  var chr = array[i];
  if (chr > 255) {
   chr &= 255;
  }
  ret.push(String.fromCharCode(chr));
 }
 return ret.join("");
}

function setValue(ptr, value, type = "i8") {
 if (type.endsWith("*")) type = "*";
 switch (type) {
 case "i1":
  SAFE_HEAP_STORE(ptr >> 0, value, 1);
  break;

 case "i8":
  SAFE_HEAP_STORE(ptr >> 0, value, 1);
  break;

 case "i16":
  SAFE_HEAP_STORE((ptr >> 1) * 2, value, 2);
  break;

 case "i32":
  SAFE_HEAP_STORE((ptr >> 2) * 4, value, 4);
  break;

 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  SAFE_HEAP_STORE((ptr >> 2) * 4, tempI64[0], 4), SAFE_HEAP_STORE((ptr + 4 >> 2) * 4, tempI64[1], 4);
  break;

 case "float":
  SAFE_HEAP_STORE_D((ptr >> 2) * 4, value, 4);
  break;

 case "double":
  SAFE_HEAP_STORE_D((ptr >> 3) * 8, value, 8);
  break;

 case "*":
  SAFE_HEAP_STORE((ptr >> 2) * 4, value, 4);
  break;

 default:
  abort("invalid type for setValue: " + type);
 }
}

function setValue_safe(ptr, value, type = "i8") {
 if (type.endsWith("*")) type = "*";
 switch (type) {
 case "i1":
  HEAP8[ptr >> 0] = value;
  break;

 case "i8":
  HEAP8[ptr >> 0] = value;
  break;

 case "i16":
  HEAP16[ptr >> 1] = value;
  break;

 case "i32":
  HEAP32[ptr >> 2] = value;
  break;

 case "i64":
  tempI64 = [ value >>> 0, (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0) ], 
  HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];
  break;

 case "float":
  HEAPF32[ptr >> 2] = value;
  break;

 case "double":
  HEAPF64[ptr >> 3] = value;
  break;

 case "*":
  HEAPU32[ptr >> 2] = value;
  break;

 default:
  abort("invalid type for setValue: " + type);
 }
}

function unSign(value, bits) {
 if (value >= 0) {
  return value;
 }
 return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value : Math.pow(2, bits) + value;
}

function ExceptionInfo(excPtr) {
 this.excPtr = excPtr;
 this.ptr = excPtr - 24;
 this.set_type = function(type) {
  SAFE_HEAP_STORE((this.ptr + 4 >> 2) * 4, type, 4);
 };
 this.get_type = function() {
  return SAFE_HEAP_LOAD((this.ptr + 4 >> 2) * 4, 4, 1);
 };
 this.set_destructor = function(destructor) {
  SAFE_HEAP_STORE((this.ptr + 8 >> 2) * 4, destructor, 4);
 };
 this.get_destructor = function() {
  return SAFE_HEAP_LOAD((this.ptr + 8 >> 2) * 4, 4, 1);
 };
 this.set_refcount = function(refcount) {
  SAFE_HEAP_STORE((this.ptr >> 2) * 4, refcount, 4);
 };
 this.set_caught = function(caught) {
  caught = caught ? 1 : 0;
  SAFE_HEAP_STORE(this.ptr + 12 >> 0, caught, 1);
 };
 this.get_caught = function() {
  return SAFE_HEAP_LOAD(this.ptr + 12 >> 0, 1, 0) != 0;
 };
 this.set_rethrown = function(rethrown) {
  rethrown = rethrown ? 1 : 0;
  SAFE_HEAP_STORE(this.ptr + 13 >> 0, rethrown, 1);
 };
 this.get_rethrown = function() {
  return SAFE_HEAP_LOAD(this.ptr + 13 >> 0, 1, 0) != 0;
 };
 this.init = function(type, destructor) {
  this.set_adjusted_ptr(0);
  this.set_type(type);
  this.set_destructor(destructor);
  this.set_refcount(0);
  this.set_caught(false);
  this.set_rethrown(false);
 };
 this.add_ref = function() {
  var value = SAFE_HEAP_LOAD((this.ptr >> 2) * 4, 4, 0);
  SAFE_HEAP_STORE((this.ptr >> 2) * 4, value + 1, 4);
 };
 this.release_ref = function() {
  var prev = SAFE_HEAP_LOAD((this.ptr >> 2) * 4, 4, 0);
  SAFE_HEAP_STORE((this.ptr >> 2) * 4, prev - 1, 4);
  return prev === 1;
 };
 this.set_adjusted_ptr = function(adjustedPtr) {
  SAFE_HEAP_STORE((this.ptr + 16 >> 2) * 4, adjustedPtr, 4);
 };
 this.get_adjusted_ptr = function() {
  return SAFE_HEAP_LOAD((this.ptr + 16 >> 2) * 4, 4, 1);
 };
 this.get_exception_ptr = function() {
  var isPointer = ___cxa_is_pointer_type(this.get_type());
  if (isPointer) {
   return SAFE_HEAP_LOAD((this.excPtr >> 2) * 4, 4, 1);
  }
  var adjusted = this.get_adjusted_ptr();
  if (adjusted !== 0) return adjusted;
  return this.excPtr;
 };
}

var exceptionLast = 0;

var uncaughtExceptionCount = 0;

function ___cxa_throw(ptr, type, destructor) {
 var info = new ExceptionInfo(ptr);
 info.init(type, destructor);
 exceptionLast = ptr;
 uncaughtExceptionCount++;
 throw ptr;
}

function setErrNo(value) {
 SAFE_HEAP_STORE((___errno_location() >> 2) * 4, value, 4);
 return value;
}

var SYSCALLS = {
 varargs: undefined,
 get: function() {
  SYSCALLS.varargs += 4;
  var ret = SAFE_HEAP_LOAD((SYSCALLS.varargs - 4 >> 2) * 4, 4, 0);
  return ret;
 },
 getStr: function(ptr) {
  var ret = UTF8ToString(ptr);
  return ret;
 }
};

function ___syscall_fcntl64(fd, cmd, varargs) {
 SYSCALLS.varargs = varargs;
 return 0;
}

function ___syscall_ioctl(fd, op, varargs) {
 SYSCALLS.varargs = varargs;
 return 0;
}

function ___syscall_openat(dirfd, path, flags, varargs) {
 SYSCALLS.varargs = varargs;
}

function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

function getShiftFromSize(size) {
 switch (size) {
 case 1:
  return 0;

 case 2:
  return 1;

 case 4:
  return 2;

 case 8:
  return 3;

 default:
  throw new TypeError("Unknown type size: " + size);
 }
}

function embind_init_charCodes() {
 var codes = new Array(256);
 for (var i = 0; i < 256; ++i) {
  codes[i] = String.fromCharCode(i);
 }
 embind_charCodes = codes;
}

var embind_charCodes = undefined;

function readLatin1String(ptr) {
 var ret = "";
 var c = ptr;
 while (SAFE_HEAP_LOAD(c, 1, 1)) {
  ret += embind_charCodes[SAFE_HEAP_LOAD(c++, 1, 1)];
 }
 return ret;
}

var awaitingDependencies = {};

var registeredTypes = {};

var typeDependencies = {};

var char_0 = 48;

var char_9 = 57;

function makeLegalFunctionName(name) {
 if (undefined === name) {
  return "_unknown";
 }
 name = name.replace(/[^a-zA-Z0-9_]/g, "$");
 var f = name.charCodeAt(0);
 if (f >= char_0 && f <= char_9) {
  return "_" + name;
 }
 return name;
}

function createNamedFunction(name, body) {
 name = makeLegalFunctionName(name);
 return {
  [name]: function() {
   return body.apply(this, arguments);
  }
 }[name];
}

function extendError(baseErrorType, errorName) {
 var errorClass = createNamedFunction(errorName, function(message) {
  this.name = errorName;
  this.message = message;
  var stack = new Error(message).stack;
  if (stack !== undefined) {
   this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
  }
 });
 errorClass.prototype = Object.create(baseErrorType.prototype);
 errorClass.prototype.constructor = errorClass;
 errorClass.prototype.toString = function() {
  if (this.message === undefined) {
   return this.name;
  } else {
   return this.name + ": " + this.message;
  }
 };
 return errorClass;
}

var BindingError = undefined;

function throwBindingError(message) {
 throw new BindingError(message);
}

var InternalError = undefined;

function throwInternalError(message) {
 throw new InternalError(message);
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
 myTypes.forEach(function(type) {
  typeDependencies[type] = dependentTypes;
 });
 function onComplete(typeConverters) {
  var myTypeConverters = getTypeConverters(typeConverters);
  if (myTypeConverters.length !== myTypes.length) {
   throwInternalError("Mismatched type converter count");
  }
  for (var i = 0; i < myTypes.length; ++i) {
   registerType(myTypes[i], myTypeConverters[i]);
  }
 }
 var typeConverters = new Array(dependentTypes.length);
 var unregisteredTypes = [];
 var registered = 0;
 dependentTypes.forEach((dt, i) => {
  if (registeredTypes.hasOwnProperty(dt)) {
   typeConverters[i] = registeredTypes[dt];
  } else {
   unregisteredTypes.push(dt);
   if (!awaitingDependencies.hasOwnProperty(dt)) {
    awaitingDependencies[dt] = [];
   }
   awaitingDependencies[dt].push(() => {
    typeConverters[i] = registeredTypes[dt];
    ++registered;
    if (registered === unregisteredTypes.length) {
     onComplete(typeConverters);
    }
   });
  }
 });
 if (0 === unregisteredTypes.length) {
  onComplete(typeConverters);
 }
}

function registerType(rawType, registeredInstance, options = {}) {
 if (!("argPackAdvance" in registeredInstance)) {
  throw new TypeError("registerType registeredInstance requires argPackAdvance");
 }
 var name = registeredInstance.name;
 if (!rawType) {
  throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
 }
 if (registeredTypes.hasOwnProperty(rawType)) {
  if (options.ignoreDuplicateRegistrations) {
   return;
  } else {
   throwBindingError("Cannot register type '" + name + "' twice");
  }
 }
 registeredTypes[rawType] = registeredInstance;
 delete typeDependencies[rawType];
 if (awaitingDependencies.hasOwnProperty(rawType)) {
  var callbacks = awaitingDependencies[rawType];
  delete awaitingDependencies[rawType];
  callbacks.forEach(cb => cb());
 }
}

function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(wt) {
   return !!wt;
  },
  "toWireType": function(destructors, o) {
   return o ? trueValue : falseValue;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": function(pointer) {
   var heap;
   if (size === 1) {
    heap = HEAP8;
   } else if (size === 2) {
    heap = HEAP16;
   } else if (size === 4) {
    heap = HEAP32;
   } else {
    throw new TypeError("Unknown boolean type size: " + name);
   }
   return this["fromWireType"](heap[pointer >> shift]);
  },
  destructorFunction: null
 });
}

function ClassHandle_isAliasOf(other) {
 if (!(this instanceof ClassHandle)) {
  return false;
 }
 if (!(other instanceof ClassHandle)) {
  return false;
 }
 var leftClass = this.$$.ptrType.registeredClass;
 var left = this.$$.ptr;
 var rightClass = other.$$.ptrType.registeredClass;
 var right = other.$$.ptr;
 while (leftClass.baseClass) {
  left = leftClass.upcast(left);
  leftClass = leftClass.baseClass;
 }
 while (rightClass.baseClass) {
  right = rightClass.upcast(right);
  rightClass = rightClass.baseClass;
 }
 return leftClass === rightClass && left === right;
}

function shallowCopyInternalPointer(o) {
 return {
  count: o.count,
  deleteScheduled: o.deleteScheduled,
  preservePointerOnDelete: o.preservePointerOnDelete,
  ptr: o.ptr,
  ptrType: o.ptrType,
  smartPtr: o.smartPtr,
  smartPtrType: o.smartPtrType
 };
}

function throwInstanceAlreadyDeleted(obj) {
 function getInstanceTypeName(handle) {
  return handle.$$.ptrType.registeredClass.name;
 }
 throwBindingError(getInstanceTypeName(obj) + " instance already deleted");
}

var finalizationRegistry = false;

function detachFinalizer(handle) {}

function runDestructor($$) {
 if ($$.smartPtr) {
  $$.smartPtrType.rawDestructor($$.smartPtr);
 } else {
  $$.ptrType.registeredClass.rawDestructor($$.ptr);
 }
}

function releaseClassHandle($$) {
 $$.count.value -= 1;
 var toDelete = 0 === $$.count.value;
 if (toDelete) {
  runDestructor($$);
 }
}

function downcastPointer(ptr, ptrClass, desiredClass) {
 if (ptrClass === desiredClass) {
  return ptr;
 }
 if (undefined === desiredClass.baseClass) {
  return null;
 }
 var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
 if (rv === null) {
  return null;
 }
 return desiredClass.downcast(rv);
}

var registeredPointers = {};

function getInheritedInstanceCount() {
 return Object.keys(registeredInstances).length;
}

function getLiveInheritedInstances() {
 var rv = [];
 for (var k in registeredInstances) {
  if (registeredInstances.hasOwnProperty(k)) {
   rv.push(registeredInstances[k]);
  }
 }
 return rv;
}

var deletionQueue = [];

function flushPendingDeletes() {
 while (deletionQueue.length) {
  var obj = deletionQueue.pop();
  obj.$$.deleteScheduled = false;
  obj["delete"]();
 }
}

var delayFunction = undefined;

function setDelayFunction(fn) {
 delayFunction = fn;
 if (deletionQueue.length && delayFunction) {
  delayFunction(flushPendingDeletes);
 }
}

function init_embind() {
 Module["getInheritedInstanceCount"] = getInheritedInstanceCount;
 Module["getLiveInheritedInstances"] = getLiveInheritedInstances;
 Module["flushPendingDeletes"] = flushPendingDeletes;
 Module["setDelayFunction"] = setDelayFunction;
}

var registeredInstances = {};

function getBasestPointer(class_, ptr) {
 if (ptr === undefined) {
  throwBindingError("ptr should not be undefined");
 }
 while (class_.baseClass) {
  ptr = class_.upcast(ptr);
  class_ = class_.baseClass;
 }
 return ptr;
}

function getInheritedInstance(class_, ptr) {
 ptr = getBasestPointer(class_, ptr);
 return registeredInstances[ptr];
}

function makeClassHandle(prototype, record) {
 if (!record.ptrType || !record.ptr) {
  throwInternalError("makeClassHandle requires ptr and ptrType");
 }
 var hasSmartPtrType = !!record.smartPtrType;
 var hasSmartPtr = !!record.smartPtr;
 if (hasSmartPtrType !== hasSmartPtr) {
  throwInternalError("Both smartPtrType and smartPtr must be specified");
 }
 record.count = {
  value: 1
 };
 return attachFinalizer(Object.create(prototype, {
  $$: {
   value: record
  }
 }));
}

function RegisteredPointer_fromWireType(ptr) {
 var rawPointer = this.getPointee(ptr);
 if (!rawPointer) {
  this.destructor(ptr);
  return null;
 }
 var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
 if (undefined !== registeredInstance) {
  if (0 === registeredInstance.$$.count.value) {
   registeredInstance.$$.ptr = rawPointer;
   registeredInstance.$$.smartPtr = ptr;
   return registeredInstance["clone"]();
  } else {
   var rv = registeredInstance["clone"]();
   this.destructor(ptr);
   return rv;
  }
 }
 function makeDefaultHandle() {
  if (this.isSmartPointer) {
   return makeClassHandle(this.registeredClass.instancePrototype, {
    ptrType: this.pointeeType,
    ptr: rawPointer,
    smartPtrType: this,
    smartPtr: ptr
   });
  } else {
   return makeClassHandle(this.registeredClass.instancePrototype, {
    ptrType: this,
    ptr: ptr
   });
  }
 }
 var actualType = this.registeredClass.getActualType(rawPointer);
 var registeredPointerRecord = registeredPointers[actualType];
 if (!registeredPointerRecord) {
  return makeDefaultHandle.call(this);
 }
 var toType;
 if (this.isConst) {
  toType = registeredPointerRecord.constPointerType;
 } else {
  toType = registeredPointerRecord.pointerType;
 }
 var dp = downcastPointer(rawPointer, this.registeredClass, toType.registeredClass);
 if (dp === null) {
  return makeDefaultHandle.call(this);
 }
 if (this.isSmartPointer) {
  return makeClassHandle(toType.registeredClass.instancePrototype, {
   ptrType: toType,
   ptr: dp,
   smartPtrType: this,
   smartPtr: ptr
  });
 } else {
  return makeClassHandle(toType.registeredClass.instancePrototype, {
   ptrType: toType,
   ptr: dp
  });
 }
}

function attachFinalizer(handle) {
 if ("undefined" === typeof FinalizationRegistry) {
  attachFinalizer = handle => handle;
  return handle;
 }
 finalizationRegistry = new FinalizationRegistry(info => {
  releaseClassHandle(info.$$);
 });
 attachFinalizer = handle => {
  var $$ = handle.$$;
  var hasSmartPtr = !!$$.smartPtr;
  if (hasSmartPtr) {
   var info = {
    $$: $$
   };
   finalizationRegistry.register(handle, info, handle);
  }
  return handle;
 };
 detachFinalizer = handle => finalizationRegistry.unregister(handle);
 return attachFinalizer(handle);
}

function ClassHandle_clone() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.preservePointerOnDelete) {
  this.$$.count.value += 1;
  return this;
 } else {
  var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
   $$: {
    value: shallowCopyInternalPointer(this.$$)
   }
  }));
  clone.$$.count.value += 1;
  clone.$$.deleteScheduled = false;
  return clone;
 }
}

function ClassHandle_delete() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
  throwBindingError("Object already scheduled for deletion");
 }
 detachFinalizer(this);
 releaseClassHandle(this.$$);
 if (!this.$$.preservePointerOnDelete) {
  this.$$.smartPtr = undefined;
  this.$$.ptr = undefined;
 }
}

function ClassHandle_isDeleted() {
 return !this.$$.ptr;
}

function ClassHandle_deleteLater() {
 if (!this.$$.ptr) {
  throwInstanceAlreadyDeleted(this);
 }
 if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
  throwBindingError("Object already scheduled for deletion");
 }
 deletionQueue.push(this);
 if (deletionQueue.length === 1 && delayFunction) {
  delayFunction(flushPendingDeletes);
 }
 this.$$.deleteScheduled = true;
 return this;
}

function init_ClassHandle() {
 ClassHandle.prototype["isAliasOf"] = ClassHandle_isAliasOf;
 ClassHandle.prototype["clone"] = ClassHandle_clone;
 ClassHandle.prototype["delete"] = ClassHandle_delete;
 ClassHandle.prototype["isDeleted"] = ClassHandle_isDeleted;
 ClassHandle.prototype["deleteLater"] = ClassHandle_deleteLater;
}

function ClassHandle() {}

function ensureOverloadTable(proto, methodName, humanName) {
 if (undefined === proto[methodName].overloadTable) {
  var prevFunc = proto[methodName];
  proto[methodName] = function() {
   if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
    throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
   }
   return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
  };
  proto[methodName].overloadTable = [];
  proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
 }
}

function exposePublicSymbol(name, value, numArguments) {
 if (Module.hasOwnProperty(name)) {
  if (undefined === numArguments || undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments]) {
   throwBindingError("Cannot register public name '" + name + "' twice");
  }
  ensureOverloadTable(Module, name, name);
  if (Module.hasOwnProperty(numArguments)) {
   throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
  }
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  if (undefined !== numArguments) {
   Module[name].numArguments = numArguments;
  }
 }
}

function RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast) {
 this.name = name;
 this.constructor = constructor;
 this.instancePrototype = instancePrototype;
 this.rawDestructor = rawDestructor;
 this.baseClass = baseClass;
 this.getActualType = getActualType;
 this.upcast = upcast;
 this.downcast = downcast;
 this.pureVirtualFunctions = [];
}

function upcastPointer(ptr, ptrClass, desiredClass) {
 while (ptrClass !== desiredClass) {
  if (!ptrClass.upcast) {
   throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
  }
  ptr = ptrClass.upcast(ptr);
  ptrClass = ptrClass.baseClass;
 }
 return ptr;
}

function constNoSmartPtrRawPointerToWireType(destructors, handle) {
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  return 0;
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 return ptr;
}

function genericPointerToWireType(destructors, handle) {
 var ptr;
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  if (this.isSmartPointer) {
   ptr = this.rawConstructor();
   if (destructors !== null) {
    destructors.push(this.rawDestructor, ptr);
   }
   return ptr;
  } else {
   return 0;
  }
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 if (!this.isConst && handle.$$.ptrType.isConst) {
  throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 if (this.isSmartPointer) {
  if (undefined === handle.$$.smartPtr) {
   throwBindingError("Passing raw pointer to smart pointer is illegal");
  }
  switch (this.sharingPolicy) {
  case 0:
   if (handle.$$.smartPtrType === this) {
    ptr = handle.$$.smartPtr;
   } else {
    throwBindingError("Cannot convert argument of type " + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + " to parameter type " + this.name);
   }
   break;

  case 1:
   ptr = handle.$$.smartPtr;
   break;

  case 2:
   if (handle.$$.smartPtrType === this) {
    ptr = handle.$$.smartPtr;
   } else {
    var clonedHandle = handle["clone"]();
    ptr = this.rawShare(ptr, Emval.toHandle(function() {
     clonedHandle["delete"]();
    }));
    if (destructors !== null) {
     destructors.push(this.rawDestructor, ptr);
    }
   }
   break;

  default:
   throwBindingError("Unsupporting sharing policy");
  }
 }
 return ptr;
}

function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
 if (handle === null) {
  if (this.isReference) {
   throwBindingError("null is not a valid " + this.name);
  }
  return 0;
 }
 if (!handle.$$) {
  throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
 }
 if (!handle.$$.ptr) {
  throwBindingError("Cannot pass deleted object as a pointer of type " + this.name);
 }
 if (handle.$$.ptrType.isConst) {
  throwBindingError("Cannot convert argument of type " + handle.$$.ptrType.name + " to parameter type " + this.name);
 }
 var handleClass = handle.$$.ptrType.registeredClass;
 var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
 return ptr;
}

function simpleReadValueFromPointer(pointer) {
 return this["fromWireType"](SAFE_HEAP_LOAD((pointer >> 2) * 4, 4, 0));
}

function RegisteredPointer_getPointee(ptr) {
 if (this.rawGetPointee) {
  ptr = this.rawGetPointee(ptr);
 }
 return ptr;
}

function RegisteredPointer_destructor(ptr) {
 if (this.rawDestructor) {
  this.rawDestructor(ptr);
 }
}

function RegisteredPointer_deleteObject(handle) {
 if (handle !== null) {
  handle["delete"]();
 }
}

function init_RegisteredPointer() {
 RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
 RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
 RegisteredPointer.prototype["argPackAdvance"] = 8;
 RegisteredPointer.prototype["readValueFromPointer"] = simpleReadValueFromPointer;
 RegisteredPointer.prototype["deleteObject"] = RegisteredPointer_deleteObject;
 RegisteredPointer.prototype["fromWireType"] = RegisteredPointer_fromWireType;
}

function RegisteredPointer(name, registeredClass, isReference, isConst, isSmartPointer, pointeeType, sharingPolicy, rawGetPointee, rawConstructor, rawShare, rawDestructor) {
 this.name = name;
 this.registeredClass = registeredClass;
 this.isReference = isReference;
 this.isConst = isConst;
 this.isSmartPointer = isSmartPointer;
 this.pointeeType = pointeeType;
 this.sharingPolicy = sharingPolicy;
 this.rawGetPointee = rawGetPointee;
 this.rawConstructor = rawConstructor;
 this.rawShare = rawShare;
 this.rawDestructor = rawDestructor;
 if (!isSmartPointer && registeredClass.baseClass === undefined) {
  if (isConst) {
   this["toWireType"] = constNoSmartPtrRawPointerToWireType;
   this.destructorFunction = null;
  } else {
   this["toWireType"] = nonConstNoSmartPtrRawPointerToWireType;
   this.destructorFunction = null;
  }
 } else {
  this["toWireType"] = genericPointerToWireType;
 }
}

function replacePublicSymbol(name, value, numArguments) {
 if (!Module.hasOwnProperty(name)) {
  throwInternalError("Replacing nonexistant public symbol");
 }
 if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
  Module[name].overloadTable[numArguments] = value;
 } else {
  Module[name] = value;
  Module[name].argCount = numArguments;
 }
}

function dynCallLegacy(sig, ptr, args) {
 var f = Module["dynCall_" + sig];
 return args && args.length ? f.apply(null, [ ptr ].concat(args)) : f.call(null, ptr);
}

var wasmTableMirror = [];

function getWasmTableEntry(funcPtr) {
 var func = wasmTableMirror[funcPtr];
 if (!func) {
  if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
  wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
 }
 return func;
}

function dynCall(sig, ptr, args) {
 if (sig.includes("j")) {
  return dynCallLegacy(sig, ptr, args);
 }
 var rtn = getWasmTableEntry(ptr).apply(null, args);
 return rtn;
}

function getDynCaller(sig, ptr) {
 var argCache = [];
 return function() {
  argCache.length = 0;
  Object.assign(argCache, arguments);
  return dynCall(sig, ptr, argCache);
 };
}

function embind__requireFunction(signature, rawFunction) {
 signature = readLatin1String(signature);
 function makeDynCaller() {
  if (signature.includes("j")) {
   return getDynCaller(signature, rawFunction);
  }
  return getWasmTableEntry(rawFunction);
 }
 var fp = makeDynCaller();
 if (typeof fp != "function") {
  throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
 }
 return fp;
}

var UnboundTypeError = undefined;

function getTypeName(type) {
 var ptr = ___getTypeName(type);
 var rv = readLatin1String(ptr);
 _free(ptr);
 return rv;
}

function throwUnboundTypeError(message, types) {
 var unboundTypes = [];
 var seen = {};
 function visit(type) {
  if (seen[type]) {
   return;
  }
  if (registeredTypes[type]) {
   return;
  }
  if (typeDependencies[type]) {
   typeDependencies[type].forEach(visit);
   return;
  }
  unboundTypes.push(type);
  seen[type] = true;
 }
 types.forEach(visit);
 throw new UnboundTypeError(message + ": " + unboundTypes.map(getTypeName).join([ ", " ]));
}

function __embind_register_class(rawType, rawPointerType, rawConstPointerType, baseClassRawType, getActualTypeSignature, getActualType, upcastSignature, upcast, downcastSignature, downcast, name, destructorSignature, rawDestructor) {
 name = readLatin1String(name);
 getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
 if (upcast) {
  upcast = embind__requireFunction(upcastSignature, upcast);
 }
 if (downcast) {
  downcast = embind__requireFunction(downcastSignature, downcast);
 }
 rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
 var legalFunctionName = makeLegalFunctionName(name);
 exposePublicSymbol(legalFunctionName, function() {
  throwUnboundTypeError("Cannot construct " + name + " due to unbound types", [ baseClassRawType ]);
 });
 whenDependentTypesAreResolved([ rawType, rawPointerType, rawConstPointerType ], baseClassRawType ? [ baseClassRawType ] : [], function(base) {
  base = base[0];
  var baseClass;
  var basePrototype;
  if (baseClassRawType) {
   baseClass = base.registeredClass;
   basePrototype = baseClass.instancePrototype;
  } else {
   basePrototype = ClassHandle.prototype;
  }
  var constructor = createNamedFunction(legalFunctionName, function() {
   if (Object.getPrototypeOf(this) !== instancePrototype) {
    throw new BindingError("Use 'new' to construct " + name);
   }
   if (undefined === registeredClass.constructor_body) {
    throw new BindingError(name + " has no accessible constructor");
   }
   var body = registeredClass.constructor_body[arguments.length];
   if (undefined === body) {
    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
   }
   return body.apply(this, arguments);
  });
  var instancePrototype = Object.create(basePrototype, {
   constructor: {
    value: constructor
   }
  });
  constructor.prototype = instancePrototype;
  var registeredClass = new RegisteredClass(name, constructor, instancePrototype, rawDestructor, baseClass, getActualType, upcast, downcast);
  var referenceConverter = new RegisteredPointer(name, registeredClass, true, false, false);
  var pointerConverter = new RegisteredPointer(name + "*", registeredClass, false, false, false);
  var constPointerConverter = new RegisteredPointer(name + " const*", registeredClass, false, true, false);
  registeredPointers[rawType] = {
   pointerType: pointerConverter,
   constPointerType: constPointerConverter
  };
  replacePublicSymbol(legalFunctionName, constructor);
  return [ referenceConverter, pointerConverter, constPointerConverter ];
 });
}

function heap32VectorToArray(count, firstElement) {
 var array = [];
 for (var i = 0; i < count; i++) {
  array.push(SAFE_HEAP_LOAD((firstElement + i * 4 >> 2) * 4, 4, 1));
 }
 return array;
}

function runDestructors(destructors) {
 while (destructors.length) {
  var ptr = destructors.pop();
  var del = destructors.pop();
  del(ptr);
 }
}

function new_(constructor, argumentList) {
 if (!(constructor instanceof Function)) {
  throw new TypeError("new_ called with constructor type " + typeof constructor + " which is not a function");
 }
 var dummy = createNamedFunction(constructor.name || "unknownFunctionName", function() {});
 dummy.prototype = constructor.prototype;
 var obj = new dummy();
 var r = constructor.apply(obj, argumentList);
 return r instanceof Object ? r : obj;
}

function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, isAsync) {
 var argCount = argTypes.length;
 if (argCount < 2) {
  throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
 }
 var isClassMethodFunc = argTypes[1] !== null && classType !== null;
 var needsDestructorStack = false;
 for (var i = 1; i < argTypes.length; ++i) {
  if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) {
   needsDestructorStack = true;
   break;
  }
 }
 var returns = argTypes[0].name !== "void";
 var argsList = "";
 var argsListWired = "";
 for (var i = 0; i < argCount - 2; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
  argsListWired += (i !== 0 ? ", " : "") + "arg" + i + "Wired";
 }
 var invokerFnBody = "return function " + makeLegalFunctionName(humanName) + "(" + argsList + ") {\n" + "if (arguments.length !== " + (argCount - 2) + ") {\n" + "throwBindingError('function " + humanName + " called with ' + arguments.length + ' arguments, expected " + (argCount - 2) + " args!');\n" + "}\n";
 if (needsDestructorStack) {
  invokerFnBody += "var destructors = [];\n";
 }
 var dtorStack = needsDestructorStack ? "destructors" : "null";
 var args1 = [ "throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam" ];
 var args2 = [ throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1] ];
 if (isClassMethodFunc) {
  invokerFnBody += "var thisWired = classParam.toWireType(" + dtorStack + ", this);\n";
 }
 for (var i = 0; i < argCount - 2; ++i) {
  invokerFnBody += "var arg" + i + "Wired = argType" + i + ".toWireType(" + dtorStack + ", arg" + i + "); // " + argTypes[i + 2].name + "\n";
  args1.push("argType" + i);
  args2.push(argTypes[i + 2]);
 }
 if (isClassMethodFunc) {
  argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
 }
 invokerFnBody += (returns || isAsync ? "var rv = " : "") + "invoker(fn" + (argsListWired.length > 0 ? ", " : "") + argsListWired + ");\n";
 if (needsDestructorStack) {
  invokerFnBody += "runDestructors(destructors);\n";
 } else {
  for (var i = isClassMethodFunc ? 1 : 2; i < argTypes.length; ++i) {
   var paramName = i === 1 ? "thisWired" : "arg" + (i - 2) + "Wired";
   if (argTypes[i].destructorFunction !== null) {
    invokerFnBody += paramName + "_dtor(" + paramName + "); // " + argTypes[i].name + "\n";
    args1.push(paramName + "_dtor");
    args2.push(argTypes[i].destructorFunction);
   }
  }
 }
 if (returns) {
  invokerFnBody += "var ret = retType.fromWireType(rv);\n" + "return ret;\n";
 } else {}
 invokerFnBody += "}\n";
 args1.push(invokerFnBody);
 var invokerFunction = new_(Function, args1).apply(null, args2);
 return invokerFunction;
}

function __embind_register_class_constructor(rawClassType, argCount, rawArgTypesAddr, invokerSignature, invoker, rawConstructor) {
 assert(argCount > 0);
 var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 invoker = embind__requireFunction(invokerSignature, invoker);
 var args = [ rawConstructor ];
 var destructors = [];
 whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {
  classType = classType[0];
  var humanName = "constructor " + classType.name;
  if (undefined === classType.registeredClass.constructor_body) {
   classType.registeredClass.constructor_body = [];
  }
  if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
   throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount - 1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
  }
  classType.registeredClass.constructor_body[argCount - 1] = () => {
   throwUnboundTypeError("Cannot construct " + classType.name + " due to unbound types", rawArgTypes);
  };
  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
   argTypes.splice(1, 0, null);
   classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
   return [];
  });
  return [];
 });
}

function __embind_register_class_function(rawClassType, methodName, argCount, rawArgTypesAddr, invokerSignature, rawInvoker, context, isPureVirtual, isAsync) {
 var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 methodName = readLatin1String(methodName);
 rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
 whenDependentTypesAreResolved([], [ rawClassType ], function(classType) {
  classType = classType[0];
  var humanName = classType.name + "." + methodName;
  if (methodName.startsWith("@@")) {
   methodName = Symbol[methodName.substring(2)];
  }
  if (isPureVirtual) {
   classType.registeredClass.pureVirtualFunctions.push(methodName);
  }
  function unboundTypesHandler() {
   throwUnboundTypeError("Cannot call " + humanName + " due to unbound types", rawArgTypes);
  }
  var proto = classType.registeredClass.instancePrototype;
  var method = proto[methodName];
  if (undefined === method || undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2) {
   unboundTypesHandler.argCount = argCount - 2;
   unboundTypesHandler.className = classType.name;
   proto[methodName] = unboundTypesHandler;
  } else {
   ensureOverloadTable(proto, methodName, humanName);
   proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
  }
  whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
   var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
   if (undefined === proto[methodName].overloadTable) {
    memberFunction.argCount = argCount - 2;
    proto[methodName] = memberFunction;
   } else {
    proto[methodName].overloadTable[argCount - 2] = memberFunction;
   }
   return [];
  });
  return [];
 });
}

function validateThis(this_, classType, humanName) {
 if (!(this_ instanceof Object)) {
  throwBindingError(humanName + ' with invalid "this": ' + this_);
 }
 if (!(this_ instanceof classType.registeredClass.constructor)) {
  throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
 }
 if (!this_.$$.ptr) {
  throwBindingError("cannot call emscripten binding method " + humanName + " on deleted object");
 }
 return upcastPointer(this_.$$.ptr, this_.$$.ptrType.registeredClass, classType.registeredClass);
}

function __embind_register_class_property(classType, fieldName, getterReturnType, getterSignature, getter, getterContext, setterArgumentType, setterSignature, setter, setterContext) {
 fieldName = readLatin1String(fieldName);
 getter = embind__requireFunction(getterSignature, getter);
 whenDependentTypesAreResolved([], [ classType ], function(classType) {
  classType = classType[0];
  var humanName = classType.name + "." + fieldName;
  var desc = {
   get: function() {
    throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [ getterReturnType, setterArgumentType ]);
   },
   enumerable: true,
   configurable: true
  };
  if (setter) {
   desc.set = () => {
    throwUnboundTypeError("Cannot access " + humanName + " due to unbound types", [ getterReturnType, setterArgumentType ]);
   };
  } else {
   desc.set = v => {
    throwBindingError(humanName + " is a read-only property");
   };
  }
  Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  whenDependentTypesAreResolved([], setter ? [ getterReturnType, setterArgumentType ] : [ getterReturnType ], function(types) {
   var getterReturnType = types[0];
   var desc = {
    get: function() {
     var ptr = validateThis(this, classType, humanName + " getter");
     return getterReturnType["fromWireType"](getter(getterContext, ptr));
    },
    enumerable: true
   };
   if (setter) {
    setter = embind__requireFunction(setterSignature, setter);
    var setterArgumentType = types[1];
    desc.set = function(v) {
     var ptr = validateThis(this, classType, humanName + " setter");
     var destructors = [];
     setter(setterContext, ptr, setterArgumentType["toWireType"](destructors, v));
     runDestructors(destructors);
    };
   }
   Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
   return [];
  });
  return [];
 });
}

function __embind_register_constant(name, type, value) {
 name = readLatin1String(name);
 whenDependentTypesAreResolved([], [ type ], function(type) {
  type = type[0];
  Module[name] = type["fromWireType"](value);
  return [];
 });
}

var emval_free_list = [];

var emval_handle_array = [ {}, {
 value: undefined
}, {
 value: null
}, {
 value: true
}, {
 value: false
} ];

function __emval_decref(handle) {
 if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
  emval_handle_array[handle] = undefined;
  emval_free_list.push(handle);
 }
}

function count_emval_handles() {
 var count = 0;
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   ++count;
  }
 }
 return count;
}

function get_first_emval() {
 for (var i = 5; i < emval_handle_array.length; ++i) {
  if (emval_handle_array[i] !== undefined) {
   return emval_handle_array[i];
  }
 }
 return null;
}

function init_emval() {
 Module["count_emval_handles"] = count_emval_handles;
 Module["get_first_emval"] = get_first_emval;
}

var Emval = {
 toValue: handle => {
  if (!handle) {
   throwBindingError("Cannot use deleted val. handle = " + handle);
  }
  return emval_handle_array[handle].value;
 },
 toHandle: value => {
  switch (value) {
  case undefined:
   return 1;

  case null:
   return 2;

  case true:
   return 3;

  case false:
   return 4;

  default:
   {
    var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
    emval_handle_array[handle] = {
     refcount: 1,
     value: value
    };
    return handle;
   }
  }
 }
};

function __embind_register_emval(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(handle) {
   var rv = Emval.toValue(handle);
   __emval_decref(handle);
   return rv;
  },
  "toWireType": function(destructors, value) {
   return Emval.toHandle(value);
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: null
 });
}

function embindRepr(v) {
 if (v === null) {
  return "null";
 }
 var t = typeof v;
 if (t === "object" || t === "array" || t === "function") {
  return v.toString();
 } else {
  return "" + v;
 }
}

function floatReadValueFromPointer(name, shift) {
 switch (shift) {
 case 2:
  return function(pointer) {
   return this["fromWireType"](SAFE_HEAP_LOAD_D((pointer >> 2) * 4, 4, 0));
  };

 case 3:
  return function(pointer) {
   return this["fromWireType"](SAFE_HEAP_LOAD_D((pointer >> 3) * 8, 8, 0));
  };

 default:
  throw new TypeError("Unknown float type: " + name);
 }
}

function __embind_register_float(rawType, name, size) {
 var shift = getShiftFromSize(size);
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   return value;
  },
  "toWireType": function(destructors, value) {
   return value;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": floatReadValueFromPointer(name, shift),
  destructorFunction: null
 });
}

function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync) {
 var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
 name = readLatin1String(name);
 rawInvoker = embind__requireFunction(signature, rawInvoker);
 exposePublicSymbol(name, function() {
  throwUnboundTypeError("Cannot call " + name + " due to unbound types", argTypes);
 }, argCount - 1);
 whenDependentTypesAreResolved([], argTypes, function(argTypes) {
  var invokerArgsArray = [ argTypes[0], null ].concat(argTypes.slice(1));
  replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null, rawInvoker, fn, isAsync), argCount - 1);
  return [];
 });
}

function integerReadValueFromPointer(name, shift, signed) {
 switch (shift) {
 case 0:
  return signed ? function readS8FromPointer(pointer) {
   return SAFE_HEAP_LOAD(pointer, 1, 0);
  } : function readU8FromPointer(pointer) {
   return SAFE_HEAP_LOAD(pointer, 1, 1);
  };

 case 1:
  return signed ? function readS16FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 1) * 2, 2, 0);
  } : function readU16FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 1) * 2, 2, 1);
  };

 case 2:
  return signed ? function readS32FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 2) * 4, 4, 0);
  } : function readU32FromPointer(pointer) {
   return SAFE_HEAP_LOAD((pointer >> 2) * 4, 4, 1);
  };

 default:
  throw new TypeError("Unknown integer type: " + name);
 }
}

function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
 name = readLatin1String(name);
 if (maxRange === -1) {
  maxRange = 4294967295;
 }
 var shift = getShiftFromSize(size);
 var fromWireType = value => value;
 if (minRange === 0) {
  var bitshift = 32 - 8 * size;
  fromWireType = value => value << bitshift >>> bitshift;
 }
 var isUnsignedType = name.includes("unsigned");
 var checkAssertions = (value, toTypeName) => {};
 var toWireType;
 if (isUnsignedType) {
  toWireType = function(destructors, value) {
   checkAssertions(value, this.name);
   return value >>> 0;
  };
 } else {
  toWireType = function(destructors, value) {
   checkAssertions(value, this.name);
   return value;
  };
 }
 registerType(primitiveType, {
  name: name,
  "fromWireType": fromWireType,
  "toWireType": toWireType,
  "argPackAdvance": 8,
  "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
  destructorFunction: null
 });
}

function __embind_register_memory_view(rawType, dataTypeIndex, name) {
 var typeMapping = [ Int8Array, Uint8Array, Int16Array, Uint16Array, Int32Array, Uint32Array, Float32Array, Float64Array ];
 var TA = typeMapping[dataTypeIndex];
 function decodeMemoryView(handle) {
  handle = handle >> 2;
  var heap = HEAPU32;
  var size = heap[handle];
  var data = heap[handle + 1];
  return new TA(heap.buffer, data, size);
 }
 name = readLatin1String(name);
 registerType(rawType, {
  name: name,
  "fromWireType": decodeMemoryView,
  "argPackAdvance": 8,
  "readValueFromPointer": decodeMemoryView
 }, {
  ignoreDuplicateRegistrations: true
 });
}

function __embind_register_std_string(rawType, name) {
 name = readLatin1String(name);
 var stdStringIsUTF8 = name === "std::string";
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   var length = SAFE_HEAP_LOAD((value >> 2) * 4, 4, 1);
   var payload = value + 4;
   var str;
   if (stdStringIsUTF8) {
    var decodeStartPtr = payload;
    for (var i = 0; i <= length; ++i) {
     var currentBytePtr = payload + i;
     if (i == length || SAFE_HEAP_LOAD(currentBytePtr, 1, 1) == 0) {
      var maxRead = currentBytePtr - decodeStartPtr;
      var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
      if (str === undefined) {
       str = stringSegment;
      } else {
       str += String.fromCharCode(0);
       str += stringSegment;
      }
      decodeStartPtr = currentBytePtr + 1;
     }
    }
   } else {
    var a = new Array(length);
    for (var i = 0; i < length; ++i) {
     a[i] = String.fromCharCode(SAFE_HEAP_LOAD(payload + i, 1, 1));
    }
    str = a.join("");
   }
   _free(value);
   return str;
  },
  "toWireType": function(destructors, value) {
   if (value instanceof ArrayBuffer) {
    value = new Uint8Array(value);
   }
   var length;
   var valueIsOfTypeString = typeof value == "string";
   if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
    throwBindingError("Cannot pass non-string to std::string");
   }
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    length = lengthBytesUTF8(value);
   } else {
    length = value.length;
   }
   var base = _malloc(4 + length + 1);
   var ptr = base + 4;
   SAFE_HEAP_STORE((base >> 2) * 4, length, 4);
   if (stdStringIsUTF8 && valueIsOfTypeString) {
    stringToUTF8(value, ptr, length + 1);
   } else {
    if (valueIsOfTypeString) {
     for (var i = 0; i < length; ++i) {
      var charCode = value.charCodeAt(i);
      if (charCode > 255) {
       _free(ptr);
       throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
      }
      SAFE_HEAP_STORE(ptr + i, charCode, 1);
     }
    } else {
     for (var i = 0; i < length; ++i) {
      SAFE_HEAP_STORE(ptr + i, value[i], 1);
     }
    }
   }
   if (destructors !== null) {
    destructors.push(_free, base);
   }
   return base;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: function(ptr) {
   _free(ptr);
  }
 });
}

var UTF16Decoder = typeof TextDecoder != "undefined" ? new TextDecoder("utf-16le") : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
 var endPtr = ptr;
 var idx = endPtr >> 1;
 var maxIdx = idx + maxBytesToRead / 2;
 while (!(idx >= maxIdx) && SAFE_HEAP_LOAD(idx * 2, 2, 1)) ++idx;
 endPtr = idx << 1;
 if (endPtr - ptr > 32 && UTF16Decoder) return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
 var str = "";
 for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
  var codeUnit = SAFE_HEAP_LOAD((ptr + i * 2 >> 1) * 2, 2, 0);
  if (codeUnit == 0) break;
  str += String.fromCharCode(codeUnit);
 }
 return str;
}

function stringToUTF16(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 2) return 0;
 maxBytesToWrite -= 2;
 var startPtr = outPtr;
 var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
 for (var i = 0; i < numCharsToWrite; ++i) {
  var codeUnit = str.charCodeAt(i);
  SAFE_HEAP_STORE((outPtr >> 1) * 2, codeUnit, 2);
  outPtr += 2;
 }
 SAFE_HEAP_STORE((outPtr >> 1) * 2, 0, 2);
 return outPtr - startPtr;
}

function lengthBytesUTF16(str) {
 return str.length * 2;
}

function UTF32ToString(ptr, maxBytesToRead) {
 var i = 0;
 var str = "";
 while (!(i >= maxBytesToRead / 4)) {
  var utf32 = SAFE_HEAP_LOAD((ptr + i * 4 >> 2) * 4, 4, 0);
  if (utf32 == 0) break;
  ++i;
  if (utf32 >= 65536) {
   var ch = utf32 - 65536;
   str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
  } else {
   str += String.fromCharCode(utf32);
  }
 }
 return str;
}

function stringToUTF32(str, outPtr, maxBytesToWrite) {
 if (maxBytesToWrite === undefined) {
  maxBytesToWrite = 2147483647;
 }
 if (maxBytesToWrite < 4) return 0;
 var startPtr = outPtr;
 var endPtr = startPtr + maxBytesToWrite - 4;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) {
   var trailSurrogate = str.charCodeAt(++i);
   codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
  }
  SAFE_HEAP_STORE((outPtr >> 2) * 4, codeUnit, 4);
  outPtr += 4;
  if (outPtr + 4 > endPtr) break;
 }
 SAFE_HEAP_STORE((outPtr >> 2) * 4, 0, 4);
 return outPtr - startPtr;
}

function lengthBytesUTF32(str) {
 var len = 0;
 for (var i = 0; i < str.length; ++i) {
  var codeUnit = str.charCodeAt(i);
  if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
  len += 4;
 }
 return len;
}

function __embind_register_std_wstring(rawType, charSize, name) {
 name = readLatin1String(name);
 var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
 if (charSize === 2) {
  decodeString = UTF16ToString;
  encodeString = stringToUTF16;
  lengthBytesUTF = lengthBytesUTF16;
  getHeap = () => HEAPU16;
  shift = 1;
 } else if (charSize === 4) {
  decodeString = UTF32ToString;
  encodeString = stringToUTF32;
  lengthBytesUTF = lengthBytesUTF32;
  getHeap = () => HEAPU32;
  shift = 2;
 }
 registerType(rawType, {
  name: name,
  "fromWireType": function(value) {
   var length = SAFE_HEAP_LOAD((value >> 2) * 4, 4, 1);
   var HEAP = getHeap();
   var str;
   var decodeStartPtr = value + 4;
   for (var i = 0; i <= length; ++i) {
    var currentBytePtr = value + 4 + i * charSize;
    if (i == length || HEAP[currentBytePtr >> shift] == 0) {
     var maxReadBytes = currentBytePtr - decodeStartPtr;
     var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
     if (str === undefined) {
      str = stringSegment;
     } else {
      str += String.fromCharCode(0);
      str += stringSegment;
     }
     decodeStartPtr = currentBytePtr + charSize;
    }
   }
   _free(value);
   return str;
  },
  "toWireType": function(destructors, value) {
   if (!(typeof value == "string")) {
    throwBindingError("Cannot pass non-string to C++ string type " + name);
   }
   var length = lengthBytesUTF(value);
   var ptr = _malloc(4 + length + charSize);
   SAFE_HEAP_STORE((ptr >> 2) * 4, length >> shift, 4);
   encodeString(value, ptr + 4, length + charSize);
   if (destructors !== null) {
    destructors.push(_free, ptr);
   }
   return ptr;
  },
  "argPackAdvance": 8,
  "readValueFromPointer": simpleReadValueFromPointer,
  destructorFunction: function(ptr) {
   _free(ptr);
  }
 });
}

function __embind_register_void(rawType, name) {
 name = readLatin1String(name);
 registerType(rawType, {
  isVoid: true,
  name: name,
  "argPackAdvance": 0,
  "fromWireType": function() {
   return undefined;
  },
  "toWireType": function(destructors, o) {
   return undefined;
  }
 });
}

function requireRegisteredType(rawType, humanName) {
 var impl = registeredTypes[rawType];
 if (undefined === impl) {
  throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
 }
 return impl;
}

function __emval_as(handle, returnType, destructorsRef) {
 handle = Emval.toValue(handle);
 returnType = requireRegisteredType(returnType, "emval::as");
 var destructors = [];
 var rd = Emval.toHandle(destructors);
 SAFE_HEAP_STORE((destructorsRef >> 2) * 4, rd, 4);
 return returnType["toWireType"](destructors, handle);
}

function emval_lookupTypes(argCount, argTypes) {
 var a = new Array(argCount);
 for (var i = 0; i < argCount; ++i) {
  a[i] = requireRegisteredType(SAFE_HEAP_LOAD((argTypes + i * 4 >> 2) * 4, 4, 1), "parameter " + i);
 }
 return a;
}

function __emval_call(handle, argCount, argTypes, argv) {
 handle = Emval.toValue(handle);
 var types = emval_lookupTypes(argCount, argTypes);
 var args = new Array(argCount);
 for (var i = 0; i < argCount; ++i) {
  var type = types[i];
  args[i] = type["readValueFromPointer"](argv);
  argv += type["argPackAdvance"];
 }
 var rv = handle.apply(undefined, args);
 return Emval.toHandle(rv);
}

function emval_allocateDestructors(destructorsRef) {
 var destructors = [];
 SAFE_HEAP_STORE((destructorsRef >> 2) * 4, Emval.toHandle(destructors), 4);
 return destructors;
}

var emval_symbols = {};

function getStringOrSymbol(address) {
 var symbol = emval_symbols[address];
 if (symbol === undefined) {
  return readLatin1String(address);
 }
 return symbol;
}

var emval_methodCallers = [];

function __emval_call_void_method(caller, handle, methodName, args) {
 caller = emval_methodCallers[caller];
 handle = Emval.toValue(handle);
 methodName = getStringOrSymbol(methodName);
 caller(handle, methodName, null, args);
}

function emval_addMethodCaller(caller) {
 var id = emval_methodCallers.length;
 emval_methodCallers.push(caller);
 return id;
}

var emval_registeredMethods = [];

function __emval_get_method_caller(argCount, argTypes) {
 var types = emval_lookupTypes(argCount, argTypes);
 var retType = types[0];
 var signatureName = retType.name + "_$" + types.slice(1).map(function(t) {
  return t.name;
 }).join("_") + "$";
 var returnId = emval_registeredMethods[signatureName];
 if (returnId !== undefined) {
  return returnId;
 }
 var params = [ "retType" ];
 var args = [ retType ];
 var argsList = "";
 for (var i = 0; i < argCount - 1; ++i) {
  argsList += (i !== 0 ? ", " : "") + "arg" + i;
  params.push("argType" + i);
  args.push(types[1 + i]);
 }
 var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
 var functionBody = "return function " + functionName + "(handle, name, destructors, args) {\n";
 var offset = 0;
 for (var i = 0; i < argCount - 1; ++i) {
  functionBody += "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? "+" + offset : "") + ");\n";
  offset += types[i + 1]["argPackAdvance"];
 }
 functionBody += "    var rv = handle[name](" + argsList + ");\n";
 for (var i = 0; i < argCount - 1; ++i) {
  if (types[i + 1]["deleteObject"]) {
   functionBody += "    argType" + i + ".deleteObject(arg" + i + ");\n";
  }
 }
 if (!retType.isVoid) {
  functionBody += "    return retType.toWireType(destructors, rv);\n";
 }
 functionBody += "};\n";
 params.push(functionBody);
 var invokerFunction = new_(Function, params).apply(null, args);
 returnId = emval_addMethodCaller(invokerFunction);
 emval_registeredMethods[signatureName] = returnId;
 return returnId;
}

function __emval_get_property(handle, key) {
 handle = Emval.toValue(handle);
 key = Emval.toValue(key);
 return Emval.toHandle(handle[key]);
}

function __emval_incref(handle) {
 if (handle > 4) {
  emval_handle_array[handle].refcount += 1;
 }
}

function __emval_new_array() {
 return Emval.toHandle([]);
}

function __emval_new_cstring(v) {
 return Emval.toHandle(getStringOrSymbol(v));
}

function __emval_new_object() {
 return Emval.toHandle({});
}

function __emval_run_destructors(handle) {
 var destructors = Emval.toValue(handle);
 runDestructors(destructors);
 __emval_decref(handle);
}

function __emval_set_property(handle, key, value) {
 handle = Emval.toValue(handle);
 key = Emval.toValue(key);
 value = Emval.toValue(value);
 handle[key] = value;
}

function __emval_strictly_equals(first, second) {
 first = Emval.toValue(first);
 second = Emval.toValue(second);
 return first === second;
}

function __emval_take_value(type, arg) {
 type = requireRegisteredType(type, "_emval_take_value");
 var v = type["readValueFromPointer"](arg);
 return Emval.toHandle(v);
}

function __emval_typeof(handle) {
 handle = Emval.toValue(handle);
 return Emval.toHandle(typeof handle);
}

function _abort() {
 abort("");
}

function _emscripten_memcpy_big(dest, src, num) {
 HEAPU8.copyWithin(dest, src, src + num);
}

function getHeapMax() {
 return HEAPU8.length;
}

function abortOnCannotGrowMemory(requestedSize) {
 abort("OOM");
}

function _emscripten_resize_heap(requestedSize) {
 var oldSize = HEAPU8.length;
 requestedSize = requestedSize >>> 0;
 abortOnCannotGrowMemory(requestedSize);
}

function _fd_close(fd) {
 return 52;
}

function _fd_read(fd, iov, iovcnt, pnum) {
 return 52;
}

function convertI32PairToI53Checked(lo, hi) {
 return hi + 2097152 >>> 0 < 4194305 - !!lo ? (lo >>> 0) + hi * 4294967296 : NaN;
}

function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
 return 70;
}

var printCharBuffers = [ null, [], [] ];

function printChar(stream, curr) {
 var buffer = printCharBuffers[stream];
 if (curr === 0 || curr === 10) {
  (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
  buffer.length = 0;
 } else {
  buffer.push(curr);
 }
}

function flush_NO_FILESYSTEM() {
 if (printCharBuffers[1].length) printChar(1, 10);
 if (printCharBuffers[2].length) printChar(2, 10);
}

function _fd_write(fd, iov, iovcnt, pnum) {
 var num = 0;
 for (var i = 0; i < iovcnt; i++) {
  var ptr = SAFE_HEAP_LOAD((iov >> 2) * 4, 4, 1);
  var len = SAFE_HEAP_LOAD((iov + 4 >> 2) * 4, 4, 1);
  iov += 8;
  for (var j = 0; j < len; j++) {
   printChar(fd, SAFE_HEAP_LOAD(ptr + j, 1, 1));
  }
  num += len;
 }
 SAFE_HEAP_STORE((pnum >> 2) * 4, num, 4);
 return 0;
}

embind_init_charCodes();

BindingError = Module["BindingError"] = extendError(Error, "BindingError");

InternalError = Module["InternalError"] = extendError(Error, "InternalError");

init_ClassHandle();

init_embind();

init_RegisteredPointer();

UnboundTypeError = Module["UnboundTypeError"] = extendError(Error, "UnboundTypeError");

init_emval();

var decodeBase64 = typeof atob == "function" ? atob : function(input) {
 var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
 var output = "";
 var chr1, chr2, chr3;
 var enc1, enc2, enc3, enc4;
 var i = 0;
 input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
 do {
  enc1 = keyStr.indexOf(input.charAt(i++));
  enc2 = keyStr.indexOf(input.charAt(i++));
  enc3 = keyStr.indexOf(input.charAt(i++));
  enc4 = keyStr.indexOf(input.charAt(i++));
  chr1 = enc1 << 2 | enc2 >> 4;
  chr2 = (enc2 & 15) << 4 | enc3 >> 2;
  chr3 = (enc3 & 3) << 6 | enc4;
  output = output + String.fromCharCode(chr1);
  if (enc3 !== 64) {
   output = output + String.fromCharCode(chr2);
  }
  if (enc4 !== 64) {
   output = output + String.fromCharCode(chr3);
  }
 } while (i < input.length);
 return output;
};

function intArrayFromBase64(s) {
 try {
  var decoded = decodeBase64(s);
  var bytes = new Uint8Array(decoded.length);
  for (var i = 0; i < decoded.length; ++i) {
   bytes[i] = decoded.charCodeAt(i);
  }
  return bytes;
 } catch (_) {
  throw new Error("Converting base64 string to bytes failed.");
 }
}

function tryParseAsDataURI(filename) {
 if (!isDataURI(filename)) {
  return;
 }
 return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}

var wasmImports = {
 "__cxa_throw": ___cxa_throw,
 "__syscall_fcntl64": ___syscall_fcntl64,
 "__syscall_ioctl": ___syscall_ioctl,
 "__syscall_openat": ___syscall_openat,
 "_embind_register_bigint": __embind_register_bigint,
 "_embind_register_bool": __embind_register_bool,
 "_embind_register_class": __embind_register_class,
 "_embind_register_class_constructor": __embind_register_class_constructor,
 "_embind_register_class_function": __embind_register_class_function,
 "_embind_register_class_property": __embind_register_class_property,
 "_embind_register_constant": __embind_register_constant,
 "_embind_register_emval": __embind_register_emval,
 "_embind_register_float": __embind_register_float,
 "_embind_register_function": __embind_register_function,
 "_embind_register_integer": __embind_register_integer,
 "_embind_register_memory_view": __embind_register_memory_view,
 "_embind_register_std_string": __embind_register_std_string,
 "_embind_register_std_wstring": __embind_register_std_wstring,
 "_embind_register_void": __embind_register_void,
 "_emval_as": __emval_as,
 "_emval_call": __emval_call,
 "_emval_call_void_method": __emval_call_void_method,
 "_emval_decref": __emval_decref,
 "_emval_get_method_caller": __emval_get_method_caller,
 "_emval_get_property": __emval_get_property,
 "_emval_incref": __emval_incref,
 "_emval_new_array": __emval_new_array,
 "_emval_new_cstring": __emval_new_cstring,
 "_emval_new_object": __emval_new_object,
 "_emval_run_destructors": __emval_run_destructors,
 "_emval_set_property": __emval_set_property,
 "_emval_strictly_equals": __emval_strictly_equals,
 "_emval_take_value": __emval_take_value,
 "_emval_typeof": __emval_typeof,
 "abort": _abort,
 "alignfault": alignfault,
 "emscripten_memcpy_big": _emscripten_memcpy_big,
 "emscripten_resize_heap": _emscripten_resize_heap,
 "fd_close": _fd_close,
 "fd_read": _fd_read,
 "fd_seek": _fd_seek,
 "fd_write": _fd_write,
 "memory": wasmMemory,
 "segfault": segfault
};

var asm = createWasm();

var ___wasm_call_ctors = function() {
 return (___wasm_call_ctors = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
};

var _malloc = function() {
 return (_malloc = Module["asm"]["malloc"]).apply(null, arguments);
};

var _free = function() {
 return (_free = Module["asm"]["free"]).apply(null, arguments);
};

var ___getTypeName = Module["___getTypeName"] = function() {
 return (___getTypeName = Module["___getTypeName"] = Module["asm"]["__getTypeName"]).apply(null, arguments);
};

var __embind_initialize_bindings = Module["__embind_initialize_bindings"] = function() {
 return (__embind_initialize_bindings = Module["__embind_initialize_bindings"] = Module["asm"]["_embind_initialize_bindings"]).apply(null, arguments);
};

var ___errno_location = function() {
 return (___errno_location = Module["asm"]["__errno_location"]).apply(null, arguments);
};

var _sbrk = function() {
 return (_sbrk = Module["asm"]["sbrk"]).apply(null, arguments);
};

var _emscripten_get_sbrk_ptr = function() {
 return (_emscripten_get_sbrk_ptr = Module["asm"]["emscripten_get_sbrk_ptr"]).apply(null, arguments);
};

var setTempRet0 = function() {
 return (setTempRet0 = Module["asm"]["setTempRet0"]).apply(null, arguments);
};

var getTempRet0 = function() {
 return (getTempRet0 = Module["asm"]["getTempRet0"]).apply(null, arguments);
};

var _emscripten_stack_get_base = function() {
 return (_emscripten_stack_get_base = Module["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
};

var stackSave = function() {
 return (stackSave = Module["asm"]["stackSave"]).apply(null, arguments);
};

var stackRestore = function() {
 return (stackRestore = Module["asm"]["stackRestore"]).apply(null, arguments);
};

var stackAlloc = function() {
 return (stackAlloc = Module["asm"]["stackAlloc"]).apply(null, arguments);
};

var ___cxa_is_pointer_type = function() {
 return (___cxa_is_pointer_type = Module["asm"]["__cxa_is_pointer_type"]).apply(null, arguments);
};

var dynCall_jiji = Module["dynCall_jiji"] = function() {
 return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
};

var calledRun;

dependenciesFulfilled = function runCaller() {
 if (!calledRun) run();
 if (!calledRun) dependenciesFulfilled = runCaller;
};

function run() {
 if (runDependencies > 0) {
  return;
 }
 preRun();
 if (runDependencies > 0) {
  return;
 }
 function doRun() {
  if (calledRun) return;
  calledRun = true;
  Module["calledRun"] = true;
  if (ABORT) return;
  initRuntime();
  readyPromiseResolve(Module);
  if (Module["onRuntimeInitialized"]) Module["onRuntimeInitialized"]();
  postRun();
 }
 if (Module["setStatus"]) {
  Module["setStatus"]("Running...");
  setTimeout(function() {
   setTimeout(function() {
    Module["setStatus"]("");
   }, 1);
   doRun();
  }, 1);
 } else {
  doRun();
 }
}

if (Module["preInit"]) {
 if (typeof Module["preInit"] == "function") Module["preInit"] = [ Module["preInit"] ];
 while (Module["preInit"].length > 0) {
  Module["preInit"].pop()();
 }
}

run();


  return Module.ready
}

);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return Module; });
else if (typeof exports === 'object')
  exports["Module"] = Module;
