
var Module = (() => {
  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
  
  return (
function(Module = {})  {

// include: shell.js
// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module != 'undefined' ? Module : {};

// Set up the promise that indicates the Module is initialized
var readyPromiseResolve, readyPromiseReject;
Module['ready'] = new Promise(function(resolve, reject) {
  readyPromiseResolve = resolve;
  readyPromiseReject = reject;
});

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)


// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = Object.assign({}, Module);

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = (status, toThrow) => {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

var ENVIRONMENT_IS_WEB = true;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document != 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // When MODULARIZE, this JS may be executed later, after document.currentScript
  // is gone, so we saved it, and we use it here instead of any other info.
  if (_scriptDir) {
    scriptDirectory = _scriptDir;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  // If scriptDirectory contains a query (starting with ?) or a fragment (starting with #),
  // they are removed because they could contain a slash.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.replace(/[?#].*/, "").lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {
// include: web_or_worker_shell_read.js
read_ = (url) => {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  }

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = (url) => {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = (url, onload, onerror) => {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = () => {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  }

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = (title) => document.title = title;
} else
{
}

var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
Object.assign(Module, moduleOverrides);
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];

if (Module['thisProgram']) thisProgram = Module['thisProgram'];

if (Module['quit']) quit_ = Module['quit'];

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message


// end include: shell.js
// include: preamble.js
// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
var noExitRuntime = Module['noExitRuntime'] || true;

// include: wasm2js.js
// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  /** @constructor */
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  /** @constructor */
  Instance: function(module, info) {
    // TODO: use the module somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(info) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "");
  base64DecodeToExistingUint8Array(bufferView, 73256, "CwAAAAwAAAAFAAAAAAAAAAAAAADIAwAAAAAAAAAAAAAAAAAAAAAAAAAAAADEAwAAyQMAAOh2AQAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAA/////woAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwHgEAcH0CAAUAAAAAAAAAAAAAAMYDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMQDAADDAwAAaH0BAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAAD//////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMgeAQA=");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      function wasm2js_trap() { throw new Error('abort'); }

  function wasm2js_scratch_store_f32(value) {
    f32ScratchView[2] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(imports) {
 var env = imports.env;
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var fimport$0 = env._emval_new_object;
 var fimport$1 = env._emval_take_value;
 var fimport$2 = env._emval_new_cstring;
 var fimport$3 = env._emval_set_property;
 var fimport$4 = env._emval_decref;
 var fimport$5 = env._emval_as;
 var fimport$6 = env._emval_run_destructors;
 var fimport$7 = env._emval_get_property;
 var fimport$8 = env._emval_strictly_equals;
 var fimport$9 = env._embind_register_function;
 var fimport$10 = env._emval_incref;
 var fimport$11 = env._embind_register_class;
 var fimport$12 = env._embind_register_class_property;
 var fimport$13 = env._embind_register_class_function;
 var fimport$14 = env.__cxa_throw;
 var fimport$15 = env._embind_register_class_constructor;
 var fimport$16 = env._emval_call;
 var fimport$17 = env._emval_get_method_caller;
 var fimport$18 = env._emval_call_void_method;
 var fimport$19 = env._embind_register_constant;
 var fimport$20 = env._emval_typeof;
 var fimport$21 = env._emval_new_array;
 var fimport$22 = env._embind_register_void;
 var fimport$23 = env._embind_register_bool;
 var fimport$24 = env._embind_register_integer;
 var fimport$25 = env._embind_register_float;
 var fimport$26 = env._embind_register_std_string;
 var fimport$27 = env._embind_register_std_wstring;
 var fimport$28 = env._embind_register_emval;
 var fimport$29 = env._embind_register_memory_view;
 var fimport$30 = env.emscripten_memcpy_big;
 var fimport$31 = env.__syscall_openat;
 var fimport$32 = env.__syscall_fcntl64;
 var fimport$33 = env.__syscall_ioctl;
 var wasi_snapshot_preview1 = imports.wasi_snapshot_preview1;
 var fimport$34 = wasi_snapshot_preview1.fd_write;
 var fimport$35 = wasi_snapshot_preview1.fd_read;
 var fimport$36 = wasi_snapshot_preview1.fd_close;
 var fimport$37 = env.emscripten_resize_heap;
 var fimport$38 = env.abort;
 var fimport$39 = env._embind_register_bigint;
 var fimport$40 = wasi_snapshot_preview1.fd_seek;
 var global$0 = 163184;
 var global$1 = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  HEAP32[23913] = 879;
  HEAP32[23914] = 0;
  fimport$9(7023, 1, 48472, 48504, 24, 25, 0);
  $1587(95652);
  HEAP32[23916] = 880;
  HEAP32[23917] = 0;
  fimport$11(48528, 48556, 48596, 0, 48504, 26, 48612, 0, 48612, 0, 2017, 48614, 27);
  $1587(95664);
  HEAP32[23918] = 881;
  HEAP32[23919] = 0;
  $781();
  $1587(95672);
  HEAP32[23920] = 882;
  HEAP32[23921] = 0;
  $789();
  $1587(95680);
  HEAP32[23922] = 883;
  HEAP32[23923] = 0;
  $795();
  $1587(95688);
  HEAP32[23924] = 884;
  HEAP32[23925] = 0;
  $816();
  $1587(95696);
  HEAP32[23926] = 885;
  HEAP32[23927] = 0;
  $823();
  $1587(95704);
  HEAP32[23928] = 886;
  HEAP32[23929] = 0;
  $835();
  $1587(95712);
  HEAP32[23930] = 887;
  HEAP32[23931] = 0;
  $844();
  $1587(95720);
  HEAP32[23932] = 888;
  HEAP32[23933] = 0;
  $853();
  $1587(95728);
  HEAP32[23934] = 889;
  HEAP32[23935] = 0;
  $861();
  $1587(95736);
  HEAP32[23936] = 890;
  HEAP32[23937] = 0;
  $956();
  $1587(95744);
  HEAP32[23938] = 891;
  HEAP32[23939] = 0;
  $972();
  $1587(95752);
  HEAP32[23940] = 892;
  HEAP32[23941] = 0;
  $981();
  $1587(95760);
  HEAP32[23942] = 893;
  HEAP32[23943] = 0;
  $1002();
  $1587(95768);
  HEAP32[23944] = 894;
  HEAP32[23945] = 0;
  $1036();
  $1587(95776);
  HEAP32[23946] = 895;
  HEAP32[23947] = 0;
  $1072();
  $1587(95784);
  HEAP32[23948] = 896;
  HEAP32[23949] = 0;
  $1082();
  $1587(95792);
  HEAP32[23950] = 897;
  HEAP32[23951] = 0;
  $1147();
  $1587(95800);
  HEAP32[23952] = 898;
  HEAP32[23953] = 0;
  $1176();
  $1587(95808);
  HEAP32[23973] = 962;
  HEAP32[23974] = 0;
  $1588();
  HEAP32[23974] = HEAP32[23972];
  HEAP32[23972] = 95892;
  HEAP32[24274] = 95936;
  HEAP32[24256] = 42;
 }
 
 function $1($0_1) {
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
  HEAP32[$0_1 + 64 >> 2] = 0;
  $1604($0_1 + 200 | 0, 0, 848);
  HEAP32[$0_1 + 76 >> 2] = 1090519040;
  HEAP32[$0_1 + 80 >> 2] = 1082130432;
  HEAP32[$0_1 + 84 >> 2] = 1082130432;
  HEAP32[$0_1 + 88 >> 2] = 1082130432;
  HEAP32[$0_1 + 92 >> 2] = 1082130432;
  HEAP32[$0_1 + 96 >> 2] = 1073741824;
  HEAP32[$0_1 + 100 >> 2] = 0;
  HEAP32[$0_1 + 104 >> 2] = 0;
  HEAP32[$0_1 + 152 >> 2] = 1056964608;
  HEAP32[$0_1 + 156 >> 2] = 1056964608;
  HEAP32[$0_1 + 160 >> 2] = 0;
  HEAP32[$0_1 + 164 >> 2] = 0;
  HEAP32[$0_1 + 168 >> 2] = 1100480512;
  HEAP32[$0_1 + 172 >> 2] = 1100480512;
  HEAP32[$0_1 + 176 >> 2] = 1077936128;
  HEAP32[$0_1 + 180 >> 2] = 1077936128;
  HEAP32[$0_1 + 192 >> 2] = 1067450368;
  HEAP32[$0_1 + 196 >> 2] = 1050253722;
  HEAP8[$0_1 + 190 | 0] = 1;
  HEAP16[$0_1 + 188 >> 1] = 257;
  HEAP32[$0_1 + 184 >> 2] = 1065353216;
  HEAP32[$0_1 + 148 >> 2] = 1;
  HEAP32[$0_1 + 140 >> 2] = 0;
  HEAP32[$0_1 + 144 >> 2] = 0;
  HEAP32[$0_1 + 132 >> 2] = 1082130432;
  HEAP32[$0_1 + 136 >> 2] = 1082130432;
  HEAP32[$0_1 + 124 >> 2] = 1092616192;
  HEAP32[$0_1 + 128 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 1096810496;
  HEAP32[$0_1 + 120 >> 2] = 1091567616;
  HEAP32[$0_1 + 108 >> 2] = 1101529088;
  HEAP32[$0_1 + 112 >> 2] = 1086324736;
  HEAP32[$0_1 + 68 >> 2] = 0;
  HEAP32[$0_1 + 72 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 1082130432;
  HEAP32[$0_1 + 64 >> 2] = 1077936128;
  HEAP32[$0_1 + 52 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = 1065353216;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 1065353216;
  HEAP32[$0_1 + 40 >> 2] = 0;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 1056964608;
  HEAP32[$0_1 + 24 >> 2] = 1107296256;
  HEAP32[$0_1 + 28 >> 2] = 1107296256;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 1065353216;
  HEAP32[$0_1 + 8 >> 2] = 1090519040;
  HEAP32[$0_1 + 12 >> 2] = 1090519040;
  HEAP32[$0_1 >> 2] = 1065353216;
  HEAP32[$0_1 + 4 >> 2] = 1058642330;
  $367($0_1);
  return $0_1;
 }
 
 function $2($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 8 >> 2] * $1_1);
  label$1 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$1;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 8 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 16 >> 2] * $1_1);
  label$3 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$3;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 16 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 24 >> 2] * $1_1);
  label$5 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$5;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 24 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 44 >> 2] * $1_1);
  label$7 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$7;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 44 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 52 >> 2] * $1_1);
  label$9 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$9;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 52 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 60 >> 2] * $1_1);
  label$11 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$11;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 60 >> 2] = $3 | 0;
  $4_1 = $0_1 + 12 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$13 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$13;
   }
   $3 = -2147483648;
  }
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $4_1 = $0_1 + 28 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$15 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$15;
   }
   $3 = -2147483648;
  }
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $4_1 = $0_1 - -64 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$17 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$17;
   }
   $3 = -2147483648;
  }
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 68 >> 2] * $1_1);
  label$19 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$19;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 68 >> 2] = $3 | 0;
  $4_1 = $0_1 + 80 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$21 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$21;
   }
   $3 = -2147483648;
  }
  $2_1 = HEAPF32[$0_1 + 76 >> 2];
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $2_1 = Math_fround($2_1 * $1_1);
  label$23 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$23;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 76 >> 2] = $3 | 0;
  $4_1 = $0_1 + 88 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$25 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$25;
   }
   $3 = -2147483648;
  }
  $2_1 = HEAPF32[$0_1 + 84 >> 2];
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $2_1 = Math_fround($2_1 * $1_1);
  label$27 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$27;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 84 >> 2] = $3 | 0;
  $4_1 = $0_1 + 96 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$29 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$29;
   }
   $3 = -2147483648;
  }
  $2_1 = HEAPF32[$0_1 + 92 >> 2];
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $2_1 = Math_fround($2_1 * $1_1);
  label$31 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$31;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 92 >> 2] = $3 | 0;
  $4_1 = $0_1 + 104 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$33 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$33;
   }
   $3 = -2147483648;
  }
  $2_1 = HEAPF32[$0_1 + 100 >> 2];
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $2_1 = Math_fround($2_1 * $1_1);
  label$35 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$35;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 100 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 108 >> 2] * $1_1);
  label$37 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$37;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 108 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 112 >> 2] * $1_1);
  label$39 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$39;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 112 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 116 >> 2] * $1_1);
  label$41 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$41;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 116 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 120 >> 2] * $1_1);
  label$43 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$43;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 120 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 124 >> 2] * $1_1);
  label$45 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$45;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 124 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 128 >> 2] * $1_1);
  label$47 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$47;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 128 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 132 >> 2] * $1_1);
  label$49 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$49;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 132 >> 2] = $3 | 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 136 >> 2] * $1_1);
  label$51 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$51;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 136 >> 2] = $3 | 0;
  $2_1 = HEAPF32[$0_1 + 144 >> 2];
  $4_1 = $2_1 != Math_fround(3402823466385288598117041.0e14);
  $2_1 = Math_fround($2_1 * $1_1);
  label$53 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$53;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 144 >> 2] = $4_1 ? Math_fround($3 | 0) : Math_fround(3402823466385288598117041.0e14);
  $4_1 = $0_1 + 172 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$55 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$55;
   }
   $3 = -2147483648;
  }
  $2_1 = HEAPF32[$0_1 + 168 >> 2];
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $2_1 = Math_fround($2_1 * $1_1);
  label$57 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$57;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 168 >> 2] = $3 | 0;
  $4_1 = $0_1 + 180 | 0;
  $2_1 = Math_fround(HEAPF32[$4_1 >> 2] * $1_1);
  label$59 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$59;
   }
   $3 = -2147483648;
  }
  $2_1 = HEAPF32[$0_1 + 176 >> 2];
  HEAPF32[$4_1 >> 2] = $3 | 0;
  $2_1 = Math_fround($2_1 * $1_1);
  label$61 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$61;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 176 >> 2] = $3 | 0;
  $1_1 = Math_fround(HEAPF32[$0_1 + 184 >> 2] * $1_1);
  label$63 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1_1;
    break label$63;
   }
   $3 = -2147483648;
  }
  HEAPF32[$0_1 + 184 >> 2] = $3 | 0;
 }
 
 function $4($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
 }
 
 function $5($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0_1 = HEAP32[18392];
  $2_1 = HEAP32[$0_1 + 12092 >> 2];
  if ($2_1) {
   HEAP32[$0_1 + 12084 >> 2] = 0;
   HEAP32[$0_1 + 12088 >> 2] = 0;
   if ($0_1) {
    $4_1 = $0_1 + 876 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   HEAP32[$0_1 + 12092 >> 2] = 0;
  }
  $4_1 = $1697($1_1);
  $7_1 = $4_1 + 1 | 0;
  $2_1 = HEAP32[$0_1 + 12088 >> 2];
  label$3 : {
   if (($2_1 | 0) > ($4_1 | 0)) {
    break label$3
   }
   $5_1 = $2_1;
   if ($2_1) {
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2_1 = ($3 | 0) > ($7_1 | 0) ? $3 : $7_1;
   if (($5_1 | 0) >= ($2_1 | 0)) {
    break label$3
   }
   $3 = HEAP32[18392];
   if ($3) {
    $3 = $3 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
   $6_1 = HEAP32[$0_1 + 12092 >> 2];
   if ($6_1) {
    $1602($3, $6_1, HEAP32[$0_1 + 12084 >> 2]);
    $6_1 = HEAP32[$0_1 + 12092 >> 2];
    label$8 : {
     if (!$6_1) {
      break label$8
     }
     $5_1 = HEAP32[18392];
     if (!$5_1) {
      break label$8
     }
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($6_1, HEAP32[18394]);
   }
   HEAP32[$0_1 + 12088 >> 2] = $2_1;
   HEAP32[$0_1 + 12092 >> 2] = $3;
  }
  HEAP32[$0_1 + 12084 >> 2] = $7_1;
  $1602(HEAP32[$0_1 + 12092 >> 2], $1_1, $4_1);
  HEAP8[$4_1 + HEAP32[$0_1 + 12092 >> 2] | 0] = 0;
 }
 
 function $6($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $0_1 = 0;
  $1_1 = HEAP32[18392];
  if (HEAP32[$1_1 + 12084 >> 2]) {
   $0_1 = HEAP32[$1_1 + 12092 >> 2]
  }
  return $0_1 | 0;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  if ($1_1) {
   $5_1 = $1_1 >>> 0 >= 65536 ? -3 : $1_1;
   $3 = HEAP32[$0_1 + 5396 >> 2];
   $1_1 = HEAP32[$0_1 + 5400 >> 2];
   label$2 : {
    if (($3 | 0) != ($1_1 | 0)) {
     break label$2
    }
    $2_1 = $3 + 1 | 0;
    $4_1 = $1_1;
    if ($1_1) {
     $3 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $1_1 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
    if (($4_1 | 0) >= ($1_1 | 0)) {
     break label$2
    }
    $3 = $1_1 << 1;
    $2_1 = HEAP32[18392];
    if ($2_1) {
     $2_1 = $2_1 + 876 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
    }
    $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
    $2_1 = HEAP32[$0_1 + 5404 >> 2];
    if ($2_1) {
     $1602($3, $2_1, HEAP32[$0_1 + 5396 >> 2] << 1);
     $2_1 = HEAP32[$0_1 + 5404 >> 2];
     label$7 : {
      if (!$2_1) {
       break label$7
      }
      $4_1 = HEAP32[18392];
      if (!$4_1) {
       break label$7
      }
      $4_1 = $4_1 + 876 | 0;
      HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    HEAP32[$0_1 + 5400 >> 2] = $1_1;
    HEAP32[$0_1 + 5404 >> 2] = $3;
   }
   HEAP16[HEAP32[$0_1 + 5404 >> 2] + (HEAP32[$0_1 + 5396 >> 2] << 1) >> 1] = $5_1;
   HEAP32[$0_1 + 5396 >> 2] = HEAP32[$0_1 + 5396 >> 2] + 1;
  }
 }
 
 function $10($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $3 = $1_1 + 1 | 0;
  $6_1 = HEAPU8[$1_1 | 0];
  $5_1 = $6_1 >>> 3 | 0;
  $8 = HEAP8[$5_1 + 20384 | 0];
  $5_1 = $8 + (-2130771968 >>> $5_1 & 1) | 0;
  $4_1 = $2_1 ? $2_1 : $5_1 + $1_1 | 0;
  if ($3 >>> 0 < $4_1 >>> 0) {
   $7_1 = HEAPU8[$3 | 0]
  }
  $3 = $1_1 >>> 0 < $4_1 >>> 0;
  $2_1 = 0;
  $9 = $1_1 + 2 | 0;
  if ($9 >>> 0 < $4_1 >>> 0) {
   $2_1 = HEAPU8[$9 | 0]
  }
  $6_1 = $3 ? $6_1 : 0;
  $3 = 0;
  $1_1 = $1_1 + 3 | 0;
  if ($4_1 >>> 0 > $1_1 >>> 0) {
   $3 = HEAPU8[$1_1 | 0]
  }
  $1_1 = $8 << 2;
  $4_1 = ($3 & 63 | ($2_1 << 6 & 4032 | ($7_1 << 12 & 258048 | ($6_1 & HEAP32[$1_1 + 20416 >> 2]) << 18))) >>> HEAP32[$1_1 + 20480 >> 2] | 0;
  HEAP32[$0_1 >> 2] = $4_1;
  if (!((($2_1 >>> 4 & 12 | $7_1 >>> 2 & 48 | ($3 & 192) >>> 6 | ($4_1 >>> 0 < HEAPU32[$1_1 + 20448 >> 2]) << 6 | ($4_1 >>> 0 > 65535) << 8 | (($4_1 & -2048) == 55296) << 7) ^ 42) >>> HEAP32[$1_1 + 20512 >> 2] | 0)) {
   return $5_1
  }
  HEAP32[$0_1 >> 2] = 65533;
  $0_1 = (((($7_1 | 0) != 0) + (($6_1 | 0) != 0) | 0) + (($2_1 | 0) != 0) | 0) + (($3 | 0) != 0) | 0;
  return ($0_1 | 0) > ($5_1 | 0) ? $5_1 : $0_1;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $1_1 = HEAP32[$0_1 + 5400 >> 2];
  label$1 : {
   if (($1_1 | 0) >= 0) {
    break label$1
   }
   $3 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($3 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   $3 = $1_1 << 1;
   $2_1 = HEAP32[18392];
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
   $2_1 = HEAP32[$0_1 + 5404 >> 2];
   if ($2_1) {
    $1602($3, $2_1, HEAP32[$0_1 + 5396 >> 2] << 1);
    $2_1 = HEAP32[$0_1 + 5404 >> 2];
    label$4 : {
     if (!$2_1) {
      break label$4
     }
     $4_1 = HEAP32[18392];
     if (!$4_1) {
      break label$4
     }
     $4_1 = $4_1 + 876 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   }
   HEAP32[$0_1 + 5400 >> 2] = $1_1;
   HEAP32[$0_1 + 5404 >> 2] = $3;
  }
  HEAP32[$0_1 + 5396 >> 2] = 0;
 }
 
 function $12($0_1, $1_1, $2_1, $3) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $4_1 = HEAPF32[$3 >> 2];
  $5_1 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $7_1 = HEAPF32[$2_1 + 4 >> 2];
  $8 = HEAPF32[$1_1 >> 2];
  $9 = HEAPF32[$3 + 4 >> 2];
  $1_1 = Math_fround(Math_fround(Math_fround($4_1 - $5_1) * Math_fround($6_1 - $7_1)) - Math_fround(Math_fround($8 - $5_1) * Math_fround($9 - $7_1))) < Math_fround(0.0);
  $10_1 = HEAPF32[$0_1 + 4 >> 2];
  $11_1 = HEAPF32[$0_1 >> 2];
  $0_1 = 0;
  label$1 : {
   if (($1_1 | 0) == (!(Math_fround(Math_fround(Math_fround($4_1 - $8) * Math_fround($10_1 - $6_1)) - Math_fround(Math_fround($11_1 - $8) * Math_fround($9 - $6_1))) < Math_fround(0.0)) | 0)) {
    break label$1
   }
   $0_1 = $1_1 ^ Math_fround(Math_fround(Math_fround($4_1 - $11_1) * Math_fround($7_1 - $10_1)) - Math_fround(Math_fround($5_1 - $11_1) * Math_fround($9 - $10_1))) < Math_fround(0.0) ^ 1;
  }
  return $0_1;
 }
 
 function $15($0_1, $1_1, $2_1) {
  label$1 : {
   switch ($2_1 | 0) {
   default:
    $1699($0_1, $1_1, $2_1 - 1 | 0);
   case 1:
    HEAP8[($0_1 + $2_1 | 0) - 1 | 0] = 0;
    break;
   case 0:
    break label$1;
   };
  }
 }
 
 function $16($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  if ($1_1) {
   $1_1 = $1_1 + 876 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
  }
  return FUNCTION_TABLE[HEAP32[18314]]($0_1, HEAP32[18394]) | 0;
 }
 
 function $17($0_1) {
  var $1_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = HEAP32[18392];
   if (!$1_1) {
    break label$1
   }
   $1_1 = $1_1 + 876 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
  }
  FUNCTION_TABLE[HEAP32[18315]]($0_1, HEAP32[18394]);
 }
 
 function $18($0_1, $1_1) {
  var $2_1 = 0;
  while (1) {
   $2_1 = $0_1;
   if ($1_1 >>> 0 < $2_1 >>> 0) {
    $0_1 = $2_1 - 2 | 0;
    if (HEAPU16[$0_1 >> 1] != 10) {
     continue
    }
   }
   break;
  };
  return $2_1;
 }
 
 function $20($0_1) {
  var $1_1 = 0;
  while (1) {
   $1_1 = HEAPU8[$0_1 | 0];
   if (!(($1_1 | 0) != 32 & ($1_1 | 0) != 9)) {
    $0_1 = $0_1 + 1 | 0;
    continue;
   }
   break;
  };
  return $0_1;
 }
 
 function $21($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $3;
  $2_1 = $1738($0_1, $1_1, $2_1, $3);
  label$1 : {
   if (!$0_1) {
    $0_1 = $2_1;
    break label$1;
   }
   $3 = $0_1;
   $0_1 = $1_1 - 1 | 0;
   $0_1 = ($2_1 | 0) != -1 ? (($1_1 | 0) > ($2_1 | 0) ? $2_1 : $0_1) : $0_1;
   HEAP8[$3 + $0_1 | 0] = 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $0_1;
 }
 
 function $22($0_1, $1_1, $2_1) {
  $1_1 = $1738($0_1, 3073, $1_1, $2_1);
  if (!$0_1) {
   return $1_1
  }
  $1_1 = ($1_1 | 0) == -1 ? 3072 : ($1_1 | 0) >= 3073 ? 3072 : $1_1;
  HEAP8[$0_1 + $1_1 | 0] = 0;
  return $1_1;
 }
 
 function $23($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = $1_1 ^ -1;
  $1_1 = $0_1;
  $0_1 = $3;
  while (1) {
   $4_1 = $1_1;
   $1_1 = $1_1 + 1 | 0;
   $2_1 = HEAPU8[$4_1 | 0];
   if ($2_1) {
    $0_1 = ($2_1 | 0) != 35 | HEAPU8[$1_1 | 0] != 35 ? $0_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? $3 : $0_1;
    $0_1 = HEAP32[(($2_1 ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
   }
   if ($2_1) {
    continue
   }
   break;
  };
  return $0_1 ^ -1;
 }
 
 function $25($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $7_1 = (($1_1 << 1) + $0_1 | 0) - 2 | 0;
  $5_1 = $0_1;
  $1_1 = $2_1;
  while (1) {
   label$1 : {
    if (!HEAPU8[$1_1 | 0] | (!(!$3 | $1_1 >>> 0 < $3 >>> 0) | $5_1 >>> 0 >= $7_1 >>> 0)) {
     break label$1
    }
    $8 = $10($6_1 + 12 | 0, $1_1, $3);
    $2_1 = HEAP32[$6_1 + 12 >> 2];
    if ($2_1) {
     HEAP16[$5_1 >> 1] = $2_1;
     $5_1 = $5_1 + 2 | 0;
    }
    $1_1 = $1_1 + $8 | 0;
    if ($2_1) {
     continue
    }
   }
   break;
  };
  HEAP16[$5_1 >> 1] = 0;
  if ($4_1) {
   HEAP32[$4_1 >> 2] = $1_1
  }
  global$0 = $6_1 + 16 | 0;
  return $5_1 - $0_1 >> 1;
 }
 
 function $26($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  while (1) {
   if (!(!(!$1_1 | $0_1 >>> 0 < $1_1 >>> 0) | !HEAPU8[$0_1 | 0])) {
    $0_1 = $10($2_1 + 12 | 0, $0_1, $1_1) + $0_1 | 0;
    $3 = HEAP32[$2_1 + 12 >> 2];
    $4_1 = (($3 | 0) != 0) + $4_1 | 0;
    if ($3) {
     continue
    }
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
  return $4_1;
 }
 
 function $27($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $6_1 = $0_1 + $1_1 | 0;
  $7_1 = $6_1 - 1 | 0;
  label$1 : {
   if ($7_1 >>> 0 <= $0_1 >>> 0) {
    break label$1
   }
   $1_1 = $0_1;
   while (1) {
    if (!(!$3 | $2_1 >>> 0 < $3 >>> 0)) {
     $0_1 = $1_1;
     break label$1;
    }
    $0_1 = HEAPU16[$2_1 >> 1];
    if (!$0_1) {
     $0_1 = $1_1;
     break label$1;
    }
    $2_1 = $2_1 + 2 | 0;
    label$5 : {
     if ($0_1 >>> 0 <= 127) {
      HEAP8[$1_1 | 0] = $0_1;
      $1_1 = $1_1 + 1 | 0;
      break label$5;
     }
     $5_1 = ($1_1 ^ -1) + $6_1 | 0;
     label$7 : {
      label$8 : {
       if ($0_1 >>> 0 <= 2047) {
        $4_1 = 0;
        if (($5_1 | 0) < 2) {
         break label$7
        }
        HEAP8[$1_1 | 0] = ($0_1 >>> 6 | 0) + -64;
        $5_1 = 2;
        $4_1 = 1;
        break label$8;
       }
       $4_1 = 0;
       if (($5_1 | 0) < 3) {
        break label$7
       }
       HEAP8[$1_1 | 0] = $0_1 >>> 12 | 224;
       HEAP8[$1_1 + 1 | 0] = $0_1 >>> 6 & 63 | 128;
       $5_1 = 3;
       $4_1 = 2;
      }
      HEAP8[$4_1 + $1_1 | 0] = $0_1 & 63 | 128;
      $4_1 = $5_1;
     }
     $1_1 = $4_1 + $1_1 | 0;
    }
    $0_1 = $1_1;
    if ($1_1 >>> 0 < $7_1 >>> 0) {
     continue
    }
    break;
   };
  }
  HEAP8[$0_1 | 0] = 0;
 }
 
 function $28($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    if ($0_1 >>> 0 >= $1_1 >>> 0) {
     break label$1
    }
   }
   while (1) {
    $2_1 = HEAPU16[$0_1 >> 1];
    if (!$2_1) {
     return $3
    }
    $0_1 = $0_1 + 2 | 0;
    $3 = $3 + ($2_1 >>> 0 < 128 ? 1 : $2_1 >>> 0 < 2048 ? 2 : 3) | 0;
    if (!$1_1 | $0_1 >>> 0 < $1_1 >>> 0) {
     continue
    }
    break;
   };
  }
  return $3;
 }
 
 function $29($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0;
  $2_1 = $0_1 >>> 8 & 255;
  $3 = Math_fround(Math_fround($1_1 >>> 24 >>> 0) / Math_fround(255.0));
  $4_1 = Math_fround(Math_fround(Math_fround(($1_1 >>> 8 & 255) - $2_1 | 0) * $3) + Math_fround($2_1 | 0));
  label$1 : {
   if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$4_1;
    break label$1;
   }
   $2_1 = -2147483648;
  }
  $5_1 = $2_1 << 8;
  $2_1 = $0_1 & 255;
  $4_1 = Math_fround(Math_fround(Math_fround(($1_1 & 255) - $2_1 | 0) * $3) + Math_fround($2_1 | 0));
  label$3 : {
   if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$4_1;
    break label$3;
   }
   $2_1 = -2147483648;
  }
  $2_1 = $2_1 | $5_1;
  $0_1 = $0_1 >>> 16 & 255;
  $3 = Math_fround(Math_fround(Math_fround(($1_1 >>> 16 & 255) - $0_1 | 0) * $3) + Math_fround($0_1 | 0));
  label$5 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $0_1 = ~~$3;
    break label$5;
   }
   $0_1 = -2147483648;
  }
  return $2_1 | $0_1 << 16 | -16777216;
 }
 
 function $31($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3 = 0;
  $1_1 = HEAPF32[$0_1 + 4 >> 2];
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$1 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$1_1;
    break label$1;
   }
   $2_1 = -2147483648;
  }
  $2_1 = $2_1 << 8;
  $1_1 = HEAPF32[$0_1 >> 2];
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$3 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1_1;
    break label$3;
   }
   $3 = -2147483648;
  }
  $2_1 = $3 | $2_1;
  $1_1 = HEAPF32[$0_1 + 8 >> 2];
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$5 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1_1;
    break label$5;
   }
   $3 = -2147483648;
  }
  $2_1 = $2_1 | $3 << 16;
  $1_1 = HEAPF32[$0_1 + 12 >> 2];
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$7 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $0_1 = ~~$1_1;
    break label$7;
   }
   $0_1 = -2147483648;
  }
  return $2_1 | $0_1 << 24;
 }
 
 function $32($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0);
  $6_1 = $1_1 < $2_1;
  $10_1 = $6_1 ? Math_fround(-1.0) : Math_fround(0.0);
  $7_1 = $6_1 ? $2_1 : $1_1;
  $8 = $7_1 > $0_1;
  $9 = $8 ? $7_1 : $0_1;
  $0_1 = $8 ? $0_1 : $7_1;
  $1_1 = $6_1 ? $1_1 : $2_1;
  $2_1 = Math_fround($9 - ($0_1 < $1_1 ? $0_1 : $1_1));
  HEAPF32[$3 >> 2] = Math_abs(Math_fround(($8 ? Math_fround(Math_fround(-.3333333432674408) - $10_1) : $10_1) + Math_fround(Math_fround($0_1 - $1_1) / Math_fround(Math_fround($2_1 * Math_fround(6.0)) + Math_fround(9.999999682655225e-21)))));
  HEAPF32[$4_1 >> 2] = $2_1 / Math_fround($9 + Math_fround(9.999999682655225e-21));
  HEAPF32[$5_1 >> 2] = $9;
 }
 
 function $33($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0);
  if ($1_1 == Math_fround(0.0)) {
   HEAPF32[$5_1 >> 2] = $2_1;
   HEAPF32[$4_1 >> 2] = $2_1;
   HEAPF32[$3 >> 2] = $2_1;
   return;
  }
  $0_1 = Math_fround($1612($0_1, Math_fround(1.0)) / Math_fround(.1666666716337204));
  label$2 : {
   if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
    $6_1 = ~~$0_1;
    break label$2;
   }
   $6_1 = -2147483648;
  }
  $0_1 = Math_fround($0_1 - Math_fround($6_1 | 0));
  $7_1 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround($1_1 * $0_1)) * $2_1);
  $0_1 = Math_fround(Math_fround(Math_fround(1.0) - Math_fround($1_1 * Math_fround(Math_fround(1.0) - $0_1))) * $2_1);
  $1_1 = Math_fround(Math_fround(Math_fround(1.0) - $1_1) * $2_1);
  label$4 : {
   switch ($6_1 | 0) {
   case 0:
    HEAPF32[$3 >> 2] = $2_1;
    HEAPF32[$4_1 >> 2] = $0_1;
    HEAPF32[$5_1 >> 2] = $1_1;
    return;
   case 1:
    HEAPF32[$3 >> 2] = $7_1;
    HEAPF32[$4_1 >> 2] = $2_1;
    HEAPF32[$5_1 >> 2] = $1_1;
    return;
   case 2:
    HEAPF32[$3 >> 2] = $1_1;
    HEAPF32[$4_1 >> 2] = $2_1;
    HEAPF32[$5_1 >> 2] = $0_1;
    return;
   case 3:
    HEAPF32[$3 >> 2] = $1_1;
    HEAPF32[$4_1 >> 2] = $7_1;
    HEAPF32[$5_1 >> 2] = $2_1;
    return;
   case 4:
    HEAPF32[$3 >> 2] = $0_1;
    HEAPF32[$4_1 >> 2] = $1_1;
    HEAPF32[$5_1 >> 2] = $2_1;
    return;
   default:
    break label$4;
   };
  }
  HEAPF32[$3 >> 2] = $2_1;
  HEAPF32[$4_1 >> 2] = $1_1;
  HEAPF32[$5_1 >> 2] = $7_1;
 }
 
 function $34($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $6_1 = HEAP32[$0_1 + 8 >> 2];
  $3 = $6_1;
  $4_1 = HEAP32[$0_1 >> 2];
  if ($4_1) {
   $0_1 = $4_1;
   while (1) {
    $5_1 = $0_1 >>> 1 | 0;
    $7_1 = ($5_1 << 3) + $3 | 0;
    $8 = HEAPU32[$7_1 >> 2] < $1_1 >>> 0;
    $3 = $8 ? $7_1 + 8 | 0 : $3;
    $0_1 = $8 ? $0_1 + ($5_1 ^ -1) | 0 : $5_1;
    if ($0_1) {
     continue
    }
    break;
   };
  }
  $0_1 = $3;
  if (($0_1 | 0) == (($4_1 << 3) + $6_1 | 0)) {
   return $2_1
  }
  $3 = $2_1;
  return ($1_1 | 0) == HEAP32[$0_1 >> 2] ? HEAP32[$0_1 + 4 >> 2] : $3;
 }
 
 function $35($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = HEAP32[$0_1 + 8 >> 2];
  $2_1 = $5_1;
  $3 = HEAP32[$0_1 >> 2];
  if ($3) {
   $4_1 = $3;
   while (1) {
    $6_1 = $4_1 >>> 1 | 0;
    $7_1 = ($6_1 << 3) + $2_1 | 0;
    $8 = HEAPU32[$7_1 >> 2] < $1_1 >>> 0;
    $2_1 = $8 ? $7_1 + 8 | 0 : $2_1;
    $4_1 = $8 ? $4_1 + ($6_1 ^ -1) | 0 : $6_1;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  $4_1 = $2_1;
  if (($2_1 | 0) == (($3 << 3) + $5_1 | 0) | HEAP32[$2_1 >> 2] != ($1_1 | 0)) {
   $4_1 = $4_1 - $5_1 >> 3;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   label$5 : {
    if (($2_1 | 0) != ($3 | 0)) {
     break label$5
    }
    $5_1 = $2_1;
    $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
    $3 = $3 + 1 | 0;
    $2_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$5
    }
    $3 = HEAP32[18392];
    if ($3) {
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $3 = FUNCTION_TABLE[HEAP32[18314]]($2_1 << 3, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$0_1 + 8 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$0_1 >> 2] << 3);
     $5_1 = HEAP32[$0_1 + 8 >> 2];
     label$10 : {
      if (!$5_1) {
       break label$10
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$10
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = $3;
   }
   $2_1 = HEAP32[$0_1 >> 2];
   if (($4_1 | 0) < ($2_1 | 0)) {
    $3 = HEAP32[$0_1 + 8 >> 2] + ($4_1 << 3) | 0;
    $1603($3 + 8 | 0, $3, $2_1 - $4_1 << 3);
   }
   $4_1 = $4_1 << 3;
   $2_1 = $4_1 + HEAP32[$0_1 + 8 >> 2] | 0;
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[$2_1 + 4 >> 2] = -1;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   $4_1 = $4_1 + HEAP32[$0_1 + 8 >> 2] | 0;
  }
  return $4_1 + 4 | 0;
 }
 
 function $36($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $7_1 = HEAP32[$0_1 + 8 >> 2];
  $4_1 = $7_1;
  $5_1 = HEAP32[$0_1 >> 2];
  if ($5_1) {
   $3 = $5_1;
   while (1) {
    $6_1 = $3 >>> 1 | 0;
    $8 = ($6_1 << 3) + $4_1 | 0;
    $9 = HEAPU32[$8 >> 2] < $1_1 >>> 0;
    $4_1 = $9 ? $8 + 8 | 0 : $4_1;
    $3 = $9 ? $3 + ($6_1 ^ -1) | 0 : $6_1;
    if ($3) {
     continue
    }
    break;
   };
  }
  label$3 : {
   if (($4_1 | 0) != (($5_1 << 3) + $7_1 | 0)) {
    if (HEAP32[$4_1 >> 2] == ($1_1 | 0)) {
     break label$3
    }
   }
   $7_1 = $4_1 - $7_1 >> 3;
   $3 = HEAP32[$0_1 + 4 >> 2];
   label$5 : {
    if (($3 | 0) != ($5_1 | 0)) {
     break label$5
    }
    $5_1 = $5_1 + 1 | 0;
    if ($3) {
     $4_1 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4_1 = 8
    }
    $4_1 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
    if (($4_1 | 0) <= ($3 | 0)) {
     break label$5
    }
    $5_1 = $4_1 << 3;
    $3 = HEAP32[18392];
    if ($3) {
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $5_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1, HEAP32[18394]) | 0;
    $3 = HEAP32[$0_1 + 8 >> 2];
    if ($3) {
     $1602($5_1, $3, HEAP32[$0_1 >> 2] << 3);
     $3 = HEAP32[$0_1 + 8 >> 2];
     label$10 : {
      if (!$3) {
       break label$10
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$10
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
    }
    HEAP32[$0_1 + 4 >> 2] = $4_1;
    HEAP32[$0_1 + 8 >> 2] = $5_1;
   }
   $4_1 = HEAP32[$0_1 >> 2];
   if (($7_1 | 0) < ($4_1 | 0)) {
    $5_1 = HEAP32[$0_1 + 8 >> 2] + ($7_1 << 3) | 0;
    $1603($5_1 + 8 | 0, $5_1, $4_1 - $7_1 << 3);
   }
   $4_1 = HEAP32[$0_1 + 8 >> 2] + ($7_1 << 3) | 0;
   HEAP32[$4_1 >> 2] = $1_1;
   HEAP32[$4_1 + 4 >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   return;
  }
  HEAP32[$4_1 + 4 >> 2] = $2_1;
 }
 
 function $38($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  HEAPF32[$1_1 + 7224 >> 2] = $0_1;
  HEAP32[$1_1 + 7220 >> 2] = HEAP32[$1_1 + 7220 >> 2] | 1;
 }
 
 function $39($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  if ($2_1) {
   $7_1 = $2_1 - $1_1 | 0
  } else {
   $7_1 = $1697($1_1)
  }
  $2_1 = HEAP32[$0_1 >> 2];
  $8 = $2_1 >>> 0 <= 1 ? 1 : $2_1;
  $2_1 = $7_1 + $8 | 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  label$3 : {
   if (($2_1 | 0) < ($4_1 | 0)) {
    break label$3
   }
   $3 = $4_1;
   $4_1 = $4_1 << 1;
   $4_1 = ($2_1 | 0) > ($4_1 | 0) ? $2_1 : $4_1;
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$3
   }
   $3 = HEAP32[18392];
   if ($3) {
    $3 = $3 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   if ($5_1) {
    $1602($3, $5_1, HEAP32[$0_1 >> 2]);
    $5_1 = HEAP32[$0_1 + 8 >> 2];
    label$6 : {
     if (!$5_1) {
      break label$6
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$6
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
   }
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   HEAP32[$0_1 + 8 >> 2] = $3;
  }
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  label$7 : {
   if (($4_1 | 0) >= ($2_1 | 0)) {
    break label$7
   }
   $5_1 = $4_1;
   if ($4_1) {
    $3 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $4_1 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
   if (($5_1 | 0) >= ($4_1 | 0)) {
    break label$7
   }
   $3 = HEAP32[18392];
   if ($3) {
    $3 = $3 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
   $5_1 = HEAP32[$0_1 + 8 >> 2];
   if ($5_1) {
    $1602($3, $5_1, HEAP32[$0_1 >> 2]);
    $5_1 = HEAP32[$0_1 + 8 >> 2];
    label$12 : {
     if (!$5_1) {
      break label$12
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$12
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
   }
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   HEAP32[$0_1 + 8 >> 2] = $3;
  }
  HEAP32[$0_1 >> 2] = $2_1;
  $2_1 = $8 - 1 | 0;
  $1602($2_1 + HEAP32[$0_1 + 8 >> 2] | 0, $1_1, $7_1);
  HEAP8[HEAP32[$0_1 + 8 >> 2] + ($2_1 + $7_1 | 0) | 0] = 0;
 }
 
 function $40($0_1, $1_1, $2_1) {
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $2_1;
  $41($0_1, $1_1, $2_1);
  global$0 = $3 + 16 | 0;
 }
 
 function $41($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  HEAP32[$7_1 + 8 >> 2] = $2_1;
  $8 = $1738(0, 0, $1_1, $2_1);
  label$1 : {
   if (($8 | 0) <= 0) {
    break label$1
   }
   $2_1 = HEAP32[$0_1 >> 2];
   $9 = $2_1 >>> 0 <= 1 ? 1 : $2_1;
   $2_1 = $9 + $8 | 0;
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   label$2 : {
    if (($2_1 | 0) < ($4_1 | 0)) {
     break label$2
    }
    $3 = $4_1;
    $4_1 = $4_1 << 1;
    $4_1 = ($2_1 | 0) > ($4_1 | 0) ? $2_1 : $4_1;
    if (($3 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    $3 = HEAP32[18392];
    if ($3) {
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $3 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$0_1 + 8 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$0_1 >> 2]);
     $5_1 = HEAP32[$0_1 + 8 >> 2];
     label$5 : {
      if (!$5_1) {
       break label$5
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$5
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$0_1 + 4 >> 2] = $4_1;
    HEAP32[$0_1 + 8 >> 2] = $3;
   }
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   label$6 : {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$6
    }
    $5_1 = $4_1;
    if ($4_1) {
     $3 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $4_1 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
    if (($5_1 | 0) >= ($4_1 | 0)) {
     break label$6
    }
    $3 = HEAP32[18392];
    if ($3) {
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $3 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$0_1 + 8 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$0_1 >> 2]);
     $5_1 = HEAP32[$0_1 + 8 >> 2];
     label$11 : {
      if (!$5_1) {
       break label$11
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$11
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$0_1 + 4 >> 2] = $4_1;
    HEAP32[$0_1 + 8 >> 2] = $3;
   }
   HEAP32[$0_1 >> 2] = $2_1;
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   $4_1 = ($2_1 + $9 | 0) - 1 | 0;
   $3 = $8 + 1 | 0;
   $0_1 = $1738($4_1, $3, $1_1, HEAP32[$7_1 + 8 >> 2]);
   if (!$2_1) {
    break label$1
   }
   HEAP8[$4_1 + (($0_1 | 0) != -1 ? (($0_1 | 0) < ($3 | 0) ? $0_1 : $8) : $8) | 0] = 0;
  }
  global$0 = $7_1 + 16 | 0;
 }
 
 function $42($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = -1;
  return $0_1;
 }
 
 function $43($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (!(HEAP32[$0_1 >> 2] < 0 | $1_1 >>> 0 > 2147483646)) {
   $44($0_1, $1_1)
  }
  HEAP32[$0_1 + 8 >> 2] = -1;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if ($1_1) {
   HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 16 >> 2];
   $1_1 = HEAP32[$2_1 + 8020 >> 2];
   HEAP32[$2_1 + 8020 >> 2] = $1_1 - 1;
   if (($1_1 | 0) >= 2) {
    $2_1 = (HEAP32[$2_1 + 8032 >> 2] + Math_imul($1_1, 28) | 0) - 56 | 0;
    HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2] = $2_1;
   }
   HEAP32[$0_1 + 20 >> 2] = 0;
  }
  return $0_1;
 }
 
 function $44($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0;
  $6_1 = HEAP32[18392];
  $3 = HEAP32[$6_1 + 7080 >> 2];
  $7_1 = $3 + 212 | 0;
  $9 = HEAPF32[$7_1 >> 2];
  $10_1 = $1_1;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  $5_1 = HEAPF32[$0_1 + 12 >> 2];
  $2_1 = Math_fround(+($10_1 - HEAP32[$1_1 + 12 >> 2] | 0) * +$5_1 + (+HEAPF32[$0_1 + 16 >> 2] + +HEAPF32[$1_1 + 4 >> 2]));
  HEAPF32[$7_1 >> 2] = $2_1;
  $4_1 = HEAPF32[$6_1 + 5496 >> 2];
  HEAPF32[$3 + 220 >> 2] = $2_1 - $5_1;
  HEAPF32[$3 + 260 >> 2] = $5_1 - $4_1;
  $0_1 = $3 + 236 | 0;
  $8 = HEAPF32[$0_1 >> 2];
  $4_1 = Math_fround($2_1 - $4_1);
  HEAPF32[$0_1 >> 2] = $4_1 <= $8 ? $8 : $4_1;
  $0_1 = HEAP32[$3 + 368 >> 2];
  if ($0_1) {
   HEAPF32[$0_1 + 28 >> 2] = $2_1
  }
  $0_1 = HEAP32[$6_1 + 8036 >> 2];
  if ($0_1) {
   $2_1 = Math_fround($2_1 - $9);
   if (HEAPU8[$0_1 + 442 | 0]) {
    $504($0_1)
   }
   HEAPF32[$0_1 + 104 >> 2] = HEAPF32[$3 + 212 >> 2];
   $2_1 = Math_fround(Math_fround($2_1 / $5_1) + Math_fround(.5));
   label$4 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$2_1;
     break label$4;
    }
    $1_1 = -2147483648;
   }
   HEAP32[$0_1 + 124 >> 2] = $1_1 + HEAP32[$0_1 + 124 >> 2];
  }
 }
 
 function $45($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (!(HEAP32[$0_1 >> 2] < 0 | $1_1 >>> 0 > 2147483646)) {
   $44($0_1, $1_1)
  }
  HEAP32[$0_1 + 8 >> 2] = -1;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if ($1_1) {
   HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 16 >> 2];
   $1_1 = HEAP32[$2_1 + 8020 >> 2];
   HEAP32[$2_1 + 8020 >> 2] = $1_1 - 1;
   if (($1_1 | 0) >= 2) {
    $2_1 = (HEAP32[$2_1 + 8032 >> 2] + Math_imul($1_1, 28) | 0) - 56 | 0;
    HEAP32[HEAP32[$2_1 >> 2] + 20 >> 2] = $2_1;
   }
   HEAP32[$0_1 + 20 >> 2] = 0;
  }
 }
 
 function $46($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0);
  $5_1 = HEAP32[18392];
  $10_1 = HEAP32[$5_1 + 7080 >> 2];
  $3 = HEAP32[$5_1 + 8036 >> 2];
  if (!(!$3 | !HEAPU8[$3 + 442 | 0])) {
   $504($3)
  }
  $11_1 = HEAPF32[$10_1 + 212 >> 2];
  HEAPF32[$0_1 + 12 >> 2] = $2_1;
  HEAPF32[$0_1 + 16 >> 2] = $11_1;
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = -1;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $8 = HEAP32[$5_1 + 8020 >> 2];
  $7_1 = $8 + 1 | 0;
  HEAP32[$5_1 + 8020 >> 2] = $7_1;
  if (HEAP32[$5_1 + 8024 >> 2] <= ($8 | 0)) {
   $3 = HEAP32[$5_1 + 8028 >> 2];
   label$3 : {
    if (($3 | 0) > ($8 | 0)) {
     break label$3
    }
    if ($3) {
     $1_1 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $1_1 = 8
    }
    $1_1 = ($1_1 | 0) > ($7_1 | 0) ? $1_1 : $7_1;
    if (($1_1 | 0) <= ($3 | 0)) {
     break label$3
    }
    $3 = Math_imul($1_1, 28);
    $4_1 = HEAP32[18392];
    if ($4_1) {
     $4_1 = $4_1 + 876 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
    }
    $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
    $4_1 = HEAP32[$5_1 + 8032 >> 2];
    if ($4_1) {
     $1602($3, $4_1, Math_imul(HEAP32[$5_1 + 8024 >> 2], 28));
     $4_1 = HEAP32[$5_1 + 8032 >> 2];
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $9 = HEAP32[18392];
      if (!$9) {
       break label$8
      }
      $9 = $9 + 876 | 0;
      HEAP32[$9 >> 2] = HEAP32[$9 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
    }
    HEAP32[$5_1 + 8028 >> 2] = $1_1;
    HEAP32[$5_1 + 8032 >> 2] = $3;
   }
   $1_1 = HEAP32[$5_1 + 8024 >> 2];
   if (($1_1 | 0) <= ($8 | 0)) {
    while (1) {
     $3 = HEAP32[$5_1 + 8032 >> 2] + Math_imul($1_1, 28) | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$3 + 24 >> 2] = 0;
     $4_1 = $3 + 16 | 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$4_1 + 4 >> 2] = 0;
     $3 = $3 + 8 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $1_1;
     $1_1 = $3 + 1 | 0;
     if (($3 | 0) != ($8 | 0)) {
      continue
     }
     break;
    }
   }
   HEAP32[$5_1 + 8024 >> 2] = $7_1;
  }
  $4_1 = HEAP32[$5_1 + 8032 >> 2];
  $7_1 = HEAP32[$5_1 + 8020 >> 2] - 1 | 0;
  $1_1 = $4_1 + Math_imul($7_1, 28) | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $5_1 = $1_1 + 16 | 0;
  $9 = $1_1 + 20 | 0;
  $3 = HEAP32[$9 >> 2];
  label$11 : {
   if (($3 | 0) >= 0) {
    break label$11
   }
   $6_1 = $3;
   $3 = $3 + (($3 | 0) / 2 | 0) | 0;
   $3 = ($3 | 0) > 0 ? $3 : 0;
   if (($6_1 | 0) >= ($3 | 0)) {
    break label$11
   }
   $8 = Math_imul($3, 12);
   $6_1 = HEAP32[18392];
   if ($6_1) {
    $6_1 = $6_1 + 876 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] + 1;
   }
   $8 = FUNCTION_TABLE[HEAP32[18314]]($8, HEAP32[18394]) | 0;
   $7_1 = ($4_1 + Math_imul($7_1, 28) | 0) + 24 | 0;
   $4_1 = HEAP32[$7_1 >> 2];
   if ($4_1) {
    $1602($8, $4_1, Math_imul(HEAP32[$5_1 >> 2], 12));
    $4_1 = HEAP32[$7_1 >> 2];
    label$14 : {
     if (!$4_1) {
      break label$14
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$14
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
   }
   HEAP32[$7_1 >> 2] = $8;
   HEAP32[$9 >> 2] = $3;
  }
  HEAP32[$5_1 >> 2] = 0;
  HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$10_1 + 288 >> 2];
  HEAP32[$0_1 + 20 >> 2] = $1_1;
 }
 
 function $47($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($3 | 0) != ($4_1 | 0)) {
    break label$1
   }
   $2_1 = $3 + 1 | 0;
   $5_1 = $4_1;
   if ($4_1) {
    $3 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $4_1 = ($3 | 0) > ($2_1 | 0) ? $3 : $2_1;
   if (($5_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   $3 = Math_imul($4_1, 12);
   $2_1 = HEAP32[18392];
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   if ($2_1) {
    $1602($3, $2_1, Math_imul(HEAP32[$0_1 >> 2], 12));
    $2_1 = HEAP32[$0_1 + 8 >> 2];
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     $5_1 = HEAP32[18392];
     if (!$5_1) {
      break label$6
     }
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   }
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   HEAP32[$0_1 + 8 >> 2] = $3;
  }
  $3 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 12) | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $3;
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
 }
 
 function $48($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = 0.0, $17_1 = 0, $18_1 = Math_fround(0), $19 = 0.0, $20_1 = 0.0, $21_1 = 0.0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $6_1 = HEAP32[$0_1 + 20 >> 2];
  $1_1 = HEAP32[18392];
  $3 = HEAP32[$1_1 + 7080 >> 2];
  $10_1 = HEAP32[$1_1 + 8036 >> 2];
  if (!(!$10_1 | !HEAPU8[$10_1 + 442 | 0])) {
   $504($10_1)
  }
  label$2 : {
   label$3 : {
    $2_1 = HEAP32[$0_1 + 8 >> 2];
    if ($2_1) {
     $4_1 = HEAP32[18392];
     $5_1 = HEAP32[$4_1 + 8036 >> 2];
     label$5 : {
      if ($5_1) {
       $5_1 = $5_1 + 455 | 0;
       break label$5;
      }
      $5_1 = HEAP32[$4_1 + 7080 >> 2] + 143 | 0;
     }
     if (!HEAPU8[$5_1 | 0]) {
      break label$3
     }
    }
    $1_1 = HEAP32[18392];
    if (!(HEAP32[$0_1 >> 2] < 0 | $2_1 >>> 0 > 2147483646)) {
     $44($0_1, $2_1)
    }
    HEAP32[$0_1 + 8 >> 2] = -1;
    $3 = HEAP32[$0_1 + 20 >> 2];
    $2_1 = 0;
    if (!$3) {
     break label$2
    }
    HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 16 >> 2];
    $3 = HEAP32[$1_1 + 8020 >> 2];
    HEAP32[$1_1 + 8020 >> 2] = $3 - 1;
    if (($3 | 0) >= 2) {
     $1_1 = (HEAP32[$1_1 + 8032 >> 2] + Math_imul($3, 28) | 0) - 56 | 0;
     HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2] = $1_1;
    }
    HEAP32[$0_1 + 20 >> 2] = 0;
    $2_1 = 0;
    break label$2;
   }
   $5_1 = HEAP32[$6_1 + 8 >> 2];
   if (!(HEAPU8[$10_1 + 452 | 0] | ($5_1 | !$10_1))) {
    $1_1 = HEAP32[$6_1 + 12 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    $3 = $1_1 + 1 | 0;
    HEAP32[$0_1 + 4 >> 2] = $3;
    if (($1_1 | 0) >= ($2_1 | 0)) {
     if (!(($1_1 | 0) < 0 | $2_1 >>> 0 > 2147483646)) {
      $44($0_1, $2_1)
     }
     HEAP32[$0_1 + 8 >> 2] = -1;
     $1_1 = HEAP32[$0_1 + 20 >> 2];
     $2_1 = 0;
     if (!$1_1) {
      break label$2
     }
     HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 16 >> 2];
     $1_1 = HEAP32[$4_1 + 8020 >> 2];
     HEAP32[$4_1 + 8020 >> 2] = $1_1 - 1;
     if (($1_1 | 0) >= 2) {
      $1_1 = (HEAP32[$4_1 + 8032 >> 2] + Math_imul($1_1, 28) | 0) - 56 | 0;
      HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2] = $1_1;
     }
     HEAP32[$0_1 + 20 >> 2] = 0;
     $2_1 = 0;
     break label$2;
    }
    HEAP32[$6_1 + 12 >> 2] = $3;
    $2_1 = 1;
    break label$2;
   }
   label$14 : {
    if ($5_1) {
     break label$14
    }
    HEAPF32[$0_1 + 16 >> 2] = HEAPF32[$3 + 212 >> 2];
    if (!(HEAPF32[$0_1 + 12 >> 2] <= Math_fround(0.0))) {
     break label$14
    }
    $1_1 = HEAP32[$6_1 + 12 >> 2];
    HEAP8[$8 + 10 | 0] = 0;
    HEAP16[$8 + 8 >> 1] = 0;
    HEAP32[$8 >> 2] = $1_1;
    HEAP32[$8 + 4 >> 2] = $1_1 + 1;
    $1_1 = $6_1 + 16 | 0;
    $3 = HEAP32[$1_1 >> 2];
    label$1 : {
     if (!$3) {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      label$30 : {
       if (($2_1 | 0) != ($3 | 0)) {
        break label$30
       }
       $4_1 = $2_1;
       $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
       $3 = $3 + 1 | 0;
       $3 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
       if (($4_1 | 0) >= ($3 | 0)) {
        break label$30
       }
       $2_1 = HEAP32[18392];
       if ($2_1) {
        $2_1 = $2_1 + 876 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
       }
       $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($3, 12), HEAP32[18394]) | 0;
       $4_1 = HEAP32[$1_1 + 8 >> 2];
       if ($4_1) {
        $1602($2_1, $4_1, Math_imul(HEAP32[$1_1 >> 2], 12));
        $4_1 = HEAP32[$1_1 + 8 >> 2];
        label$8 : {
         if (!$4_1) {
          break label$8
         }
         $10_1 = HEAP32[18392];
         if (!$10_1) {
          break label$8
         }
         $10_1 = $10_1 + 876 | 0;
         HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       HEAP32[$1_1 + 4 >> 2] = $3;
       HEAP32[$1_1 + 8 >> 2] = $2_1;
      }
      $3 = HEAP32[$1_1 + 8 >> 2] + Math_imul(HEAP32[$1_1 >> 2], 12) | 0;
      break label$1;
     }
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     label$9 : {
      if (($2_1 | 0) != ($3 | 0)) {
       break label$9
      }
      $4_1 = $2_1;
      $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
      $3 = $3 + 1 | 0;
      $3 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
      if (($4_1 | 0) >= ($3 | 0)) {
       break label$9
      }
      $2_1 = HEAP32[18392];
      if ($2_1) {
       $2_1 = $2_1 + 876 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
      }
      $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($3, 12), HEAP32[18394]) | 0;
      $4_1 = HEAP32[$1_1 + 8 >> 2];
      if ($4_1) {
       $1602($2_1, $4_1, Math_imul(HEAP32[$1_1 >> 2], 12));
       $4_1 = HEAP32[$1_1 + 8 >> 2];
       label$141 : {
        if (!$4_1) {
         break label$141
        }
        $10_1 = HEAP32[18392];
        if (!$10_1) {
         break label$141
        }
        $10_1 = $10_1 + 876 | 0;
        HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
      }
      HEAP32[$1_1 + 4 >> 2] = $3;
      HEAP32[$1_1 + 8 >> 2] = $2_1;
     }
     $3 = HEAP32[$1_1 >> 2];
     if (($3 | 0) > 0) {
      $2_1 = HEAP32[$1_1 + 8 >> 2];
      $1603($2_1 + 12 | 0, $2_1, Math_imul($3, 12));
     }
     $3 = HEAP32[$1_1 + 8 >> 2];
    }
    $2_1 = HEAP32[$8 + 4 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$3 + 4 >> 2] = $2_1;
    HEAP32[$3 + 8 >> 2] = HEAP32[$8 + 8 >> 2];
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
    $1_1 = HEAP32[$6_1 + 24 >> 2];
    $3 = HEAP32[$1_1 >> 2];
    $2_1 = HEAP32[$6_1 + 12 >> 2];
    $2_1 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
    HEAP32[$0_1 >> 2] = $2_1;
    $3 = HEAP32[$1_1 + 4 >> 2];
    $1_1 = HEAP32[$0_1 + 8 >> 2];
    $3 = ($1_1 | 0) > ($3 | 0) ? $3 : $1_1;
    HEAP32[$0_1 + 4 >> 2] = $3;
    if (($2_1 | 0) == ($3 | 0)) {
     $3 = HEAP32[18392];
     if (!(($2_1 | 0) < 0 | $1_1 >>> 0 > 2147483646)) {
      $44($0_1, $1_1)
     }
     HEAP32[$0_1 + 8 >> 2] = -1;
     $1_1 = HEAP32[$0_1 + 20 >> 2];
     $2_1 = 0;
     if (!$1_1) {
      break label$2
     }
     HEAP32[$1_1 + 8 >> 2] = HEAP32[$1_1 + 16 >> 2];
     $1_1 = HEAP32[$3 + 8020 >> 2];
     HEAP32[$3 + 8020 >> 2] = $1_1 - 1;
     if (($1_1 | 0) >= 2) {
      $1_1 = (HEAP32[$3 + 8032 >> 2] + Math_imul($1_1, 28) | 0) - 56 | 0;
      HEAP32[HEAP32[$1_1 >> 2] + 20 >> 2] = $1_1;
     }
     HEAP32[$0_1 + 20 >> 2] = 0;
     $2_1 = 0;
     break label$2;
    }
    HEAP32[$6_1 + 8 >> 2] = 1;
    $2_1 = 1;
    break label$2;
   }
   $5_1 = !$5_1;
   label$19 : {
    if (!(HEAPF32[$0_1 + 12 >> 2] <= Math_fround(0.0))) {
     break label$19
    }
    $11_1 = HEAPF32[$3 + 212 >> 2];
    $13 = HEAPF32[$0_1 + 16 >> 2];
    HEAPF32[$0_1 + 12 >> 2] = Math_fround($11_1 - $13) / Math_fround(HEAP32[$0_1 + 4 >> 2] - HEAP32[$0_1 >> 2] | 0);
    if (!($13 <= Math_fround(-16777216.0) | $13 >= Math_fround(16777216.0) | $11_1 <= Math_fround(-16777216.0))) {
     $5_1 = 1;
     if (!($11_1 >= Math_fround(16777216.0))) {
      break label$19
     }
    }
    HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$3 + 260 >> 2] + HEAPF32[$1_1 + 5496 >> 2];
    $5_1 = 1;
   }
   $10_1 = HEAP32[$0_1 + 4 >> 2];
   label$22 : {
    if (!$5_1) {
     break label$22
    }
    label$23 : {
     if (HEAPU8[$1_1 + 12196 | 0]) {
      $5_1 = HEAP32[$6_1 + 16 >> 2];
      $1_1 = HEAP32[$6_1 + 20 >> 2];
      label$25 : {
       if (($5_1 | 0) != ($1_1 | 0)) {
        break label$25
       }
       $7_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
       $5_1 = $5_1 + 1 | 0;
       $5_1 = ($5_1 | 0) < ($7_1 | 0) ? $7_1 : $5_1;
       if (($1_1 | 0) >= ($5_1 | 0)) {
        break label$25
       }
       if ($4_1) {
        $1_1 = $4_1 + 876 | 0;
        HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
       }
       $1_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($5_1, 12), HEAP32[18394]) | 0;
       $4_1 = HEAP32[$6_1 + 24 >> 2];
       if ($4_1) {
        $1602($1_1, $4_1, Math_imul(HEAP32[$6_1 + 16 >> 2], 12));
        $4_1 = HEAP32[$6_1 + 24 >> 2];
        label$302 : {
         if (!$4_1) {
          break label$302
         }
         $7_1 = HEAP32[18392];
         if (!$7_1) {
          break label$302
         }
         $7_1 = $7_1 + 876 | 0;
         HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       HEAP32[$6_1 + 20 >> 2] = $5_1;
       HEAP32[$6_1 + 24 >> 2] = $1_1;
      }
      $1_1 = HEAP32[$6_1 + 24 >> 2] + Math_imul(HEAP32[$6_1 + 16 >> 2], 12) | 0;
      HEAP32[$1_1 >> 2] = 0;
      $4_1 = 0;
      $5_1 = 0;
      $7_1 = 0;
      break label$23;
     }
     $4_1 = 0;
     label$31 : {
      if (!HEAPU8[$1_1 + 7597 | 0]) {
       break label$31
      }
      $2_1 = HEAP32[$1_1 + 7508 >> 2];
      $4_1 = 0;
      if (!$2_1) {
       break label$31
      }
      $4_1 = HEAP32[$2_1 + 748 >> 2] == HEAP32[$3 + 748 >> 2];
     }
     $2_1 = $4_1;
     label$33 : {
      if (!$2_1) {
       break label$33
      }
      $11_1 = HEAPF32[$1_1 + 7644 >> 2];
      $13 = HEAPF32[$1_1 + 7652 >> 2];
      HEAP8[$8 + 10 | 0] = 0;
      HEAP16[$8 + 8 >> 1] = 1;
      HEAP32[$8 + 4 >> 2] = Math_fround(Math_abs($13)) < Math_fround(2147483648.0) ? ~~$13 : -2147483648;
      HEAP32[$8 >> 2] = Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0) ? ~~$11_1 : -2147483648;
      $5_1 = $6_1 + 16 | 0;
      $47($5_1, $8);
      if (!(HEAPU8[$1_1 + 7601 | 0] & 4) | HEAP32[$1_1 + 7660 >> 2] != -1) {
       break label$33
      }
      $4_1 = HEAP32[$0_1 + 8 >> 2];
      HEAP8[$8 + 10 | 0] = 0;
      HEAP16[$8 + 8 >> 1] = 0;
      HEAP32[$8 + 4 >> 2] = $4_1;
      HEAP32[$8 >> 2] = $4_1 - 1;
      $47($5_1, $8);
     }
     $4_1 = HEAP32[$1_1 + 7512 >> 2];
     if (!(!$4_1 | ($4_1 | 0) != HEAP32[$3 + 756 >> 2])) {
      $13 = HEAPF32[$3 + 776 >> 2];
      $18_1 = HEAPF32[$3 + 228 >> 2];
      $11_1 = Math_fround($18_1 + HEAPF32[$3 + 768 >> 2]);
      HEAP8[$8 + 10 | 0] = 0;
      HEAP16[$8 + 8 >> 1] = 1;
      $13 = Math_fround($18_1 + $13);
      label$39 : {
       if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
        $4_1 = ~~$13;
        break label$39;
       }
       $4_1 = -2147483648;
      }
      HEAP32[$8 + 4 >> 2] = $4_1;
      HEAP32[$8 >> 2] = Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0) ? ~~$11_1 : -2147483648;
      $47($6_1 + 16 | 0, $8);
     }
     $4_1 = $2_1 ? (HEAP32[$1_1 + 7620 >> 2] == 2 ? -1 : 0) : 0;
     $5_1 = $2_1 ? HEAP32[$1_1 + 7620 >> 2] == 3 : 0;
     $1_1 = HEAP32[$6_1 + 20 >> 2];
     $7_1 = HEAP32[$6_1 + 16 >> 2];
     $11_1 = HEAPF32[$3 + 508 >> 2];
     label$45 : {
      if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$11_1;
       break label$45;
      }
      $2_1 = -2147483648;
     }
     $9 = ($1_1 | 0) != ($7_1 | 0);
     $11_1 = HEAPF32[$3 + 500 >> 2];
     label$47 : {
      if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
       $14 = ~~$11_1;
       break label$47;
      }
      $14 = -2147483648;
     }
     label$49 : {
      if ($9) {
       break label$49
      }
      $9 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
      $7_1 = $7_1 + 1 | 0;
      $7_1 = ($7_1 | 0) < ($9 | 0) ? $9 : $7_1;
      if (($1_1 | 0) >= ($7_1 | 0)) {
       break label$49
      }
      $1_1 = HEAP32[18392];
      if ($1_1) {
       $1_1 = $1_1 + 876 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
      }
      $1_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($7_1, 12), HEAP32[18394]) | 0;
      $9 = HEAP32[$6_1 + 24 >> 2];
      if ($9) {
       $1602($1_1, $9, Math_imul(HEAP32[$6_1 + 16 >> 2], 12));
       $9 = HEAP32[$6_1 + 24 >> 2];
       label$54 : {
        if (!$9) {
         break label$54
        }
        $12_1 = HEAP32[18392];
        if (!$12_1) {
         break label$54
        }
        $12_1 = $12_1 + 876 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$12_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($9, HEAP32[18394]);
      }
      HEAP32[$6_1 + 20 >> 2] = $7_1;
      HEAP32[$6_1 + 24 >> 2] = $1_1;
     }
     $1_1 = HEAP32[$6_1 + 24 >> 2] + Math_imul(HEAP32[$6_1 + 16 >> 2], 12) | 0;
     HEAP32[$1_1 >> 2] = $14;
     $7_1 = 1;
    }
    HEAP8[$1_1 + 10 | 0] = $5_1;
    HEAP8[$1_1 + 9 | 0] = $4_1;
    HEAP8[$1_1 + 8 | 0] = $7_1;
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $4_1 = HEAP32[$6_1 + 16 >> 2] + 1 | 0;
    HEAP32[$6_1 + 16 >> 2] = $4_1;
    if (($4_1 | 0) > 0) {
     $5_1 = HEAP32[$0_1 + 8 >> 2];
     $7_1 = $5_1 - 1 | 0;
     $14 = HEAP32[$6_1 + 24 >> 2];
     $19 = +HEAPF32[$0_1 + 12 >> 2];
     $1_1 = 0;
     while (1) {
      $2_1 = $14 + Math_imul($1_1, 12) | 0;
      if (HEAPU8[$2_1 + 8 | 0]) {
       $12_1 = $2_1 + 8 | 0;
       $9 = HEAP8[$2_1 + 9 | 0];
       $16_1 = +HEAPF32[$3 + 212 >> 2];
       $20_1 = +HEAPF32[$6_1 + 4 >> 2];
       $21_1 = (+HEAP32[$2_1 >> 2] - $16_1 - $20_1) / $19;
       label$58 : {
        if (Math_abs($21_1) < 2147483648.0) {
         $15_1 = ~~$21_1;
         break label$58;
        }
        $15_1 = -2147483648;
       }
       $9 = $9 + ($15_1 + $10_1 | 0) | 0;
       $9 = ($10_1 | 0) > ($9 | 0) ? $10_1 : ($7_1 | 0) > ($9 | 0) ? $9 : $7_1;
       HEAP32[$2_1 >> 2] = $9;
       $17_1 = HEAP8[$2_1 + 10 | 0] + $10_1 | 0;
       $15_1 = $2_1;
       $16_1 = (+HEAP32[$2_1 + 4 >> 2] - $16_1 - $20_1) / $19 + .9999989867210388;
       label$60 : {
        if (Math_abs($16_1) < 2147483648.0) {
         $2_1 = ~~$16_1;
         break label$60;
        }
        $2_1 = -2147483648;
       }
       $2_1 = $2_1 + $17_1 | 0;
       HEAP32[$15_1 + 4 >> 2] = ($2_1 | 0) > ($9 | 0) ? (($2_1 | 0) < ($5_1 | 0) ? $2_1 : $5_1) : $9 + 1 | 0;
       HEAP8[$12_1 | 0] = 0;
      }
      $1_1 = $1_1 + 1 | 0;
      if (($4_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
    }
    $3 = HEAP32[$6_1 + 8 >> 2];
    $1_1 = $4_1 - $3 | 0;
    if (($1_1 | 0) < 2) {
     break label$22
    }
    while (1) {
     $4_1 = $1_1;
     $2_1 = $1_1 - 1 | 0;
     if (($1_1 | 0) > 1) {
      $9 = $2_1 + $3 | 0;
      $1_1 = $3;
      while (1) {
       $5_1 = HEAP32[$6_1 + 24 >> 2] + Math_imul($1_1, 12) | 0;
       $7_1 = $5_1 + 12 | 0;
       if (HEAP32[$5_1 >> 2] > HEAP32[$7_1 >> 2]) {
        $14 = $8 + 8 | 0;
        $12_1 = $5_1 + 8 | 0;
        HEAP32[$14 >> 2] = HEAP32[$12_1 >> 2];
        $17_1 = HEAP32[$5_1 + 4 >> 2];
        HEAP32[$8 >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$8 + 4 >> 2] = $17_1;
        $15_1 = $12_1;
        $12_1 = $7_1 + 8 | 0;
        HEAP32[$15_1 >> 2] = HEAP32[$12_1 >> 2];
        $17_1 = HEAP32[$7_1 + 4 >> 2];
        HEAP32[$5_1 >> 2] = HEAP32[$7_1 >> 2];
        HEAP32[$5_1 + 4 >> 2] = $17_1;
        HEAP32[$12_1 >> 2] = HEAP32[$14 >> 2];
        $5_1 = HEAP32[$8 + 4 >> 2];
        HEAP32[$7_1 >> 2] = HEAP32[$8 >> 2];
        HEAP32[$7_1 + 4 >> 2] = $5_1;
       }
       $1_1 = $1_1 + 1 | 0;
       if (($9 | 0) > ($1_1 | 0)) {
        continue
       }
       break;
      };
     }
     $1_1 = $2_1;
     if (($4_1 | 0) >= 3) {
      continue
     }
     break;
    };
    $2_1 = HEAP32[$6_1 + 16 >> 2];
    $1_1 = $3 + 1 | 0;
    if (($2_1 | 0) <= ($1_1 | 0)) {
     break label$22
    }
    while (1) {
     $5_1 = HEAP32[$6_1 + 24 >> 2];
     $4_1 = $5_1 + Math_imul($3, 12) | 0;
     $7_1 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = $5_1 + Math_imul($1_1, 12) | 0;
     $9 = HEAP32[$5_1 >> 2];
     if (($7_1 | 0) >= ($9 | 0)) {
      $1_1 = HEAP32[$4_1 >> 2];
      HEAP32[$4_1 >> 2] = ($1_1 | 0) < ($9 | 0) ? $1_1 : $9;
      $1_1 = HEAP32[$5_1 + 4 >> 2];
      HEAP32[$4_1 + 4 >> 2] = ($1_1 | 0) < ($7_1 | 0) ? $7_1 : $1_1;
      $1603($5_1, $5_1 + 12 | 0, Math_imul($2_1 - $3 | 0, 12) - 24 | 0);
      HEAP32[$6_1 + 16 >> 2] = HEAP32[$6_1 + 16 >> 2] - 1;
      $1_1 = $3;
     }
     $3 = $1_1;
     $2_1 = HEAP32[$6_1 + 16 >> 2];
     $1_1 = $1_1 + 1 | 0;
     if (($2_1 | 0) > ($1_1 | 0)) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$6_1 + 8 >> 2];
   if (($1_1 | 0) < HEAP32[$6_1 + 16 >> 2]) {
    $3 = HEAP32[$6_1 + 24 >> 2] + Math_imul($1_1, 12) | 0;
    $1_1 = HEAP32[$3 >> 2];
    $2_1 = $1_1;
    $1_1 = ($1_1 | 0) > ($10_1 | 0);
    $2_1 = $1_1 ? $2_1 : $10_1;
    HEAP32[$0_1 >> 2] = $2_1;
    $3 = HEAP32[$3 + 4 >> 2];
    $4_1 = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$0_1 + 4 >> 2] = ($3 | 0) < ($4_1 | 0) ? $3 : $4_1;
    if ($1_1) {
     $44($0_1, $2_1)
    }
    HEAP32[$6_1 + 8 >> 2] = HEAP32[$6_1 + 8 >> 2] + 1;
    $2_1 = 1;
    break label$2;
   }
   $1_1 = HEAP32[$0_1 + 8 >> 2];
   if (($1_1 | 0) != 2147483647) {
    $44($0_1, $1_1)
   }
   HEAP32[$0_1 + 8 >> 2] = -1;
   $2_1 = 0;
  }
  $0_1 = $2_1;
  global$0 = $8 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $50() {
  return HEAP32[18392] + 5416 | 0;
 }
 
 function $51($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0;
  $5_1 = HEAP32[18392];
  $3 = ($5_1 + 5416 | 0) + ($0_1 << 4) | 0;
  $2_1 = HEAPF32[$3 + 204 >> 2];
  $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
  label$1 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $0_1 = ~~$2_1;
    break label$1;
   }
   $0_1 = -2147483648;
  }
  $0_1 = $0_1 << 8;
  $2_1 = HEAPF32[$3 + 200 >> 2];
  $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
  label$3 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $4_1 = ~~$2_1;
    break label$3;
   }
   $4_1 = -2147483648;
  }
  $0_1 = $4_1 | $0_1;
  $2_1 = HEAPF32[$3 + 208 >> 2];
  $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
  label$5 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $4_1 = ~~$2_1;
    break label$5;
   }
   $4_1 = -2147483648;
  }
  $0_1 = $0_1 | $4_1 << 16;
  $1_1 = Math_fround(HEAPF32[$3 + 212 >> 2] * Math_fround(HEAPF32[$5_1 + 5416 >> 2] * $1_1));
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$7 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1_1;
    break label$7;
   }
   $3 = -2147483648;
  }
  return $0_1 | $3 << 24;
 }
 
 function $52($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3 = 0;
  $1_1 = HEAPF32[$0_1 + 4 >> 2];
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$1 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$1_1;
    break label$1;
   }
   $2_1 = -2147483648;
  }
  $2_1 = $2_1 << 8;
  $1_1 = HEAPF32[$0_1 >> 2];
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$3 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1_1;
    break label$3;
   }
   $3 = -2147483648;
  }
  $2_1 = $3 | $2_1;
  $1_1 = HEAPF32[$0_1 + 8 >> 2];
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$5 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$1_1;
    break label$5;
   }
   $3 = -2147483648;
  }
  $2_1 = $2_1 | $3 << 16;
  $1_1 = Math_fround(HEAPF32[$0_1 + 12 >> 2] * HEAPF32[HEAP32[18392] + 5416 >> 2]);
  $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
  label$7 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $0_1 = ~~$1_1;
    break label$7;
   }
   $0_1 = -2147483648;
  }
  return $2_1 | $0_1 << 24;
 }
 
 function $53($0_1) {
  return (HEAP32[18392] + ($0_1 << 4) | 0) + 5616 | 0;
 }
 
 function $54($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0;
  $1_1 = HEAPF32[HEAP32[18392] + 5416 >> 2];
  if ($1_1 >= Math_fround(1.0)) {
   return $0_1
  }
  $2_1 = $0_1 & 16777215;
  $1_1 = Math_fround($1_1 * Math_fround($0_1 >>> 24 >>> 0));
  label$2 : {
   if ($1_1 < Math_fround(4294967296.0) & $1_1 >= Math_fround(0.0)) {
    $0_1 = ~~$1_1 >>> 0;
    break label$2;
   }
   $0_1 = 0;
  }
  return $2_1 | $0_1 << 24;
 }
 
 function $55($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $4_1 = HEAP32[18392];
  $2_1 = $4_1 + ($0_1 << 4) | 0;
  $3 = $2_1 + 5624 | 0;
  $5_1 = HEAP32[$3 + 4 >> 2];
  $9 = $7_1 + 8 | 0;
  $6_1 = $9;
  HEAP32[$6_1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $5_1;
  $6_1 = $2_1 + 5616 | 0;
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $2_1;
  $3 = HEAP32[$4_1 + 7396 >> 2];
  $2_1 = HEAP32[$4_1 + 7400 >> 2];
  label$1 : {
   if (($3 | 0) != ($2_1 | 0)) {
    break label$1
   }
   $5_1 = $3 + 1 | 0;
   $3 = 8;
   $8 = $2_1;
   $3 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : $3;
   $2_1 = ($3 | 0) > ($5_1 | 0) ? $3 : $5_1;
   if (($8 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   $3 = Math_imul($2_1, 20);
   if ($4_1) {
    $5_1 = $4_1 + 876 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
   $5_1 = HEAP32[$4_1 + 7404 >> 2];
   if ($5_1) {
    $1602($3, $5_1, Math_imul(HEAP32[$4_1 + 7396 >> 2], 20));
    $5_1 = HEAP32[$4_1 + 7404 >> 2];
    label$5 : {
     if (!$5_1) {
      break label$5
     }
     $8 = HEAP32[18392];
     if (!$8) {
      break label$5
     }
     $8 = $8 + 876 | 0;
     HEAP32[$8 >> 2] = HEAP32[$8 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
   }
   HEAP32[$4_1 + 7400 >> 2] = $2_1;
   HEAP32[$4_1 + 7404 >> 2] = $3;
  }
  $2_1 = HEAP32[$4_1 + 7404 >> 2] + Math_imul(HEAP32[$4_1 + 7396 >> 2], 20) | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  $0_1 = HEAP32[$7_1 + 4 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $0_1;
  $0_1 = $2_1 + 12 | 0;
  $2_1 = HEAP32[$9 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 + 7396 >> 2] = HEAP32[$4_1 + 7396 >> 2] + 1;
  HEAPF32[$6_1 + 12 >> 2] = Math_fround($1_1 >>> 24 >>> 0) * Math_fround(.003921568859368563);
  HEAPF32[$6_1 + 8 >> 2] = Math_fround(($1_1 >>> 16 & 255) >>> 0) * Math_fround(.003921568859368563);
  HEAPF32[$6_1 + 4 >> 2] = Math_fround(($1_1 >>> 8 & 255) >>> 0) * Math_fround(.003921568859368563);
  HEAPF32[$6_1 >> 2] = Math_fround(($1_1 & 255) >>> 0) * Math_fround(.003921568859368563);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $56($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $3 = HEAP32[18392];
  $7_1 = $3 + ($0_1 << 4) | 0;
  $4_1 = $7_1 + 5624 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $9 = $6_1 + 8 | 0;
  $2_1 = $9;
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $7_1 = $7_1 + 5616 | 0;
  $2_1 = $7_1;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$3 + 7396 >> 2];
  $2_1 = HEAP32[$3 + 7400 >> 2];
  label$1 : {
   if (($4_1 | 0) != ($2_1 | 0)) {
    break label$1
   }
   $5_1 = $4_1 + 1 | 0;
   $4_1 = 8;
   $8 = $2_1;
   $4_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : $4_1;
   $2_1 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
   if (($8 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   $4_1 = Math_imul($2_1, 20);
   if ($3) {
    $5_1 = $3 + 876 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
   }
   $4_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
   $5_1 = HEAP32[$3 + 7404 >> 2];
   if ($5_1) {
    $1602($4_1, $5_1, Math_imul(HEAP32[$3 + 7396 >> 2], 20));
    $5_1 = HEAP32[$3 + 7404 >> 2];
    label$5 : {
     if (!$5_1) {
      break label$5
     }
     $8 = HEAP32[18392];
     if (!$8) {
      break label$5
     }
     $8 = $8 + 876 | 0;
     HEAP32[$8 >> 2] = HEAP32[$8 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
   }
   HEAP32[$3 + 7400 >> 2] = $2_1;
   HEAP32[$3 + 7404 >> 2] = $4_1;
  }
  $2_1 = HEAP32[$3 + 7404 >> 2] + Math_imul(HEAP32[$3 + 7396 >> 2], 20) | 0;
  HEAP32[$2_1 >> 2] = $0_1;
  $0_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $0_1;
  $0_1 = $2_1 + 12 | 0;
  $2_1 = HEAP32[$9 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$3 + 7396 >> 2] = HEAP32[$3 + 7396 >> 2] + 1;
  $3 = $1_1 + 8 | 0;
  $2_1 = HEAP32[$3 + 4 >> 2];
  $0_1 = $7_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $0_1;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $57($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  if (($0_1 | 0) > 0) {
   $2_1 = HEAP32[18392];
   while (1) {
    $1_1 = (HEAP32[$2_1 + 7404 >> 2] + Math_imul(HEAP32[$2_1 + 7396 >> 2], 20) | 0) - 20 | 0;
    $3 = (HEAP32[$1_1 >> 2] << 4) + $2_1 | 0;
    $4_1 = $3 + 5624 | 0;
    $5_1 = $1_1 + 12 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    $4_1 = HEAP32[$1_1 + 8 >> 2];
    $3 = $3 + 5616 | 0;
    HEAP32[$3 >> 2] = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$3 + 4 >> 2] = $4_1;
    HEAP32[$2_1 + 7396 >> 2] = HEAP32[$2_1 + 7396 >> 2] - 1;
    $1_1 = $0_1;
    $0_1 = $1_1 - 1 | 0;
    if (($1_1 | 0) > 1) {
     continue
    }
    break;
   };
  }
 }
 
 function $58($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0);
  if (!(!(8206235 >>> $0_1 & 1) | HEAP32[Math_imul($0_1, 12) + 20912 >> 2] != 8)) {
   $2_1 = HEAP32[18392];
   $7_1 = ($2_1 + HEAP32[Math_imul($0_1, 12) + 20920 >> 2] | 0) + 5416 | 0;
   $8 = HEAPF32[$7_1 >> 2];
   $4_1 = HEAP32[$2_1 + 7408 >> 2];
   $3 = HEAP32[$2_1 + 7412 >> 2];
   label$2 : {
    if (($4_1 | 0) != ($3 | 0)) {
     break label$2
    }
    $5_1 = $4_1 + 1 | 0;
    $6_1 = $3;
    if ($3) {
     $4_1 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4_1 = 8
    }
    $3 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
    if (($6_1 | 0) >= ($3 | 0)) {
     break label$2
    }
    $4_1 = Math_imul($3, 12);
    if ($2_1) {
     $5_1 = $2_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
    }
    $4_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$2_1 + 7416 >> 2];
    if ($5_1) {
     $1602($4_1, $5_1, Math_imul(HEAP32[$2_1 + 7408 >> 2], 12));
     $5_1 = HEAP32[$2_1 + 7416 >> 2];
     label$7 : {
      if (!$5_1) {
       break label$7
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$7
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$2_1 + 7412 >> 2] = $3;
    HEAP32[$2_1 + 7416 >> 2] = $4_1;
   }
   $3 = HEAP32[$2_1 + 7416 >> 2] + Math_imul(HEAP32[$2_1 + 7408 >> 2], 12) | 0;
   HEAPF32[$3 + 4 >> 2] = $8;
   HEAP32[$3 >> 2] = $0_1;
   HEAP32[$2_1 + 7408 >> 2] = HEAP32[$2_1 + 7408 >> 2] + 1;
   HEAPF32[$7_1 >> 2] = $1_1;
  }
 }
 
 function $59($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  if (!(!(25348196 >>> $0_1 & 1) | HEAP32[Math_imul($0_1, 12) + 20912 >> 2] != 8)) {
   $2_1 = HEAP32[18392];
   $7_1 = ($2_1 + HEAP32[Math_imul($0_1, 12) + 20920 >> 2] | 0) + 5416 | 0;
   $8 = HEAP32[$7_1 >> 2];
   $9 = HEAP32[$7_1 + 4 >> 2];
   $4_1 = HEAP32[$2_1 + 7408 >> 2];
   $3 = HEAP32[$2_1 + 7412 >> 2];
   label$2 : {
    if (($4_1 | 0) != ($3 | 0)) {
     break label$2
    }
    $5_1 = $4_1 + 1 | 0;
    $6_1 = $3;
    if ($3) {
     $4_1 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4_1 = 8
    }
    $3 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
    if (($6_1 | 0) >= ($3 | 0)) {
     break label$2
    }
    $4_1 = Math_imul($3, 12);
    if ($2_1) {
     $5_1 = $2_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
    }
    $4_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$2_1 + 7416 >> 2];
    if ($5_1) {
     $1602($4_1, $5_1, Math_imul(HEAP32[$2_1 + 7408 >> 2], 12));
     $5_1 = HEAP32[$2_1 + 7416 >> 2];
     label$7 : {
      if (!$5_1) {
       break label$7
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$7
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$2_1 + 7412 >> 2] = $3;
    HEAP32[$2_1 + 7416 >> 2] = $4_1;
   }
   $3 = HEAP32[$2_1 + 7416 >> 2] + Math_imul(HEAP32[$2_1 + 7408 >> 2], 12) | 0;
   HEAP32[$3 + 8 >> 2] = $9;
   HEAP32[$3 + 4 >> 2] = $8;
   HEAP32[$3 >> 2] = $0_1;
   HEAP32[$2_1 + 7408 >> 2] = HEAP32[$2_1 + 7408 >> 2] + 1;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $0_1;
  }
 }
 
 function $60($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  if (($0_1 | 0) > 0) {
   $2_1 = HEAP32[18392];
   $7_1 = $2_1 + 5416 | 0;
   $8 = HEAP32[$2_1 + 7416 >> 2];
   $3 = HEAP32[$2_1 + 7408 >> 2];
   while (1) {
    $5_1 = $0_1;
    $3 = $3 - 1 | 0;
    $0_1 = Math_imul($3, 12) + $8 | 0;
    $4_1 = HEAP32[$0_1 >> 2];
    $1_1 = Math_imul($4_1, 12);
    $6_1 = HEAP32[$1_1 + 20912 >> 2] != 8;
    label$3 : {
     if ($6_1) {
      break label$3
     }
     $1_1 = HEAP32[$1_1 + 20920 >> 2] + $7_1 | 0;
     if (8206235 >>> $4_1 & 1) {
      HEAPF32[$1_1 >> 2] = HEAPF32[$0_1 + 4 >> 2];
      break label$3;
     }
     if (!(25348196 >>> $4_1 & 1) | $6_1) {
      break label$3
     }
     HEAPF32[$1_1 >> 2] = HEAPF32[$0_1 + 4 >> 2];
     HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$0_1 + 8 >> 2];
    }
    HEAP32[$2_1 + 7408 >> 2] = $3;
    $0_1 = $5_1 - 1 | 0;
    if (($5_1 | 0) > 1) {
     continue
    }
    break;
   };
  }
 }
 
 function $62($0_1) {
  var $1_1 = 0;
  if (($0_1 | 0) == -1) {
   return $0_1
  }
  while (1) {
   label$3 : {
    $1_1 = HEAPU8[$0_1 | 0];
    if (($1_1 | 0) != 35) {
     if ($1_1) {
      break label$3
     }
     return $0_1;
    }
    if (HEAPU8[$0_1 + 1 | 0] != 35) {
     break label$3
    }
    return $0_1;
   }
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != -1) {
    continue
   }
   break;
  };
  return -1;
 }
 
 function $63($0_1, $1_1, $2_1, $3) {
  var $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0);
  $5_1 = HEAP32[18392];
  $8 = HEAP32[$5_1 + 7080 >> 2];
  label$1 : {
   if ($3) {
    $3 = $1_1;
    $6_1 = $2_1 ? $2_1 : -1;
    if ($1_1 >>> 0 >= $6_1 >>> 0) {
     break label$1
    }
    $3 = $6_1;
    $2_1 = $1_1;
    while (1) {
     label$4 : {
      $7_1 = HEAPU8[$2_1 | 0];
      if (($7_1 | 0) != 35) {
       if ($7_1) {
        break label$4
       }
       $3 = $2_1;
       break label$1;
      }
      if (HEAPU8[$2_1 + 1 | 0] != 35) {
       break label$4
      }
      $3 = $2_1;
      break label$1;
     }
     $2_1 = $2_1 + 1 | 0;
     if (($6_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   $3 = $2_1;
   if ($2_1) {
    break label$1
   }
   $3 = $1697($1_1) + $1_1 | 0;
  }
  $2_1 = $3;
  label$6 : {
   if (($2_1 | 0) == ($1_1 | 0)) {
    break label$6
   }
   $4_1 = HEAPF32[$5_1 + 5620 >> 2];
   $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
   label$7 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$4_1;
     break label$7;
    }
    $3 = -2147483648;
   }
   $6_1 = $3 << 8;
   $4_1 = HEAPF32[$5_1 + 5616 >> 2];
   $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
   label$9 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$4_1;
     break label$9;
    }
    $3 = -2147483648;
   }
   $6_1 = $3 | $6_1;
   $4_1 = HEAPF32[$5_1 + 5624 >> 2];
   $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
   label$11 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$4_1;
     break label$11;
    }
    $3 = -2147483648;
   }
   $6_1 = $6_1 | $3 << 16;
   $7_1 = HEAP32[$8 + 580 >> 2];
   $8 = HEAP32[$5_1 + 6464 >> 2];
   $9 = HEAPF32[$5_1 + 6468 >> 2];
   $4_1 = Math_fround(HEAPF32[$5_1 + 5628 >> 2] * HEAPF32[$5_1 + 5416 >> 2]);
   $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
   label$13 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$4_1;
     break label$13;
    }
    $3 = -2147483648;
   }
   $413($7_1, $8, $9, $0_1, $6_1 | $3 << 24, $1_1, $2_1, Math_fround(0.0), 0);
   if (!HEAPU8[$5_1 + 12196 | 0]) {
    break label$6
   }
   $64($0_1, $1_1, $2_1);
  }
 }
 
 function $64($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  while (1) {
   $3 = $1_1;
   $4_1 = HEAP32[18392];
   $8 = HEAP32[$4_1 + 12224 >> 2];
   HEAP32[$4_1 + 12224 >> 2] = 0;
   $6_1 = HEAP32[$4_1 + 12220 >> 2];
   HEAP32[$4_1 + 12220 >> 2] = 0;
   $7_1 = HEAP32[$4_1 + 7080 >> 2];
   label$2 : {
    if ($2_1) {
     break label$2
    }
    $2_1 = $3;
    if (($1_1 | 0) == -1) {
     break label$2
    }
    while (1) {
     label$4 : {
      $2_1 = HEAPU8[$1_1 | 0];
      if (($2_1 | 0) != 35) {
       if ($2_1) {
        break label$4
       }
       $2_1 = $1_1;
       break label$2;
      }
      if (HEAPU8[$1_1 + 1 | 0] != 35) {
       break label$4
      }
      $2_1 = $1_1;
      break label$2;
     }
     $2_1 = -1;
     $1_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != -1) {
      continue
     }
     break;
    };
   }
   if ($0_1) {
    $1_1 = HEAPF32[$0_1 + 4 >> 2] > Math_fround(Math_fround(HEAPF32[$4_1 + 12228 >> 2] + HEAPF32[$4_1 + 5480 >> 2]) + Math_fround(1.0))
   } else {
    $1_1 = 0
   }
   if ($0_1) {
    HEAPF32[$4_1 + 12228 >> 2] = HEAPF32[$0_1 + 4 >> 2]
   }
   if ($1_1) {
    $65(19353, 0);
    HEAP8[$4_1 + 12232 | 0] = 1;
   }
   if ($6_1) {
    $64($0_1, $6_1, $1697($6_1) + $6_1 | 0)
   }
   $1_1 = HEAP32[$7_1 + 344 >> 2];
   if (($1_1 | 0) < HEAP32[$4_1 + 12236 >> 2]) {
    HEAP32[$4_1 + 12236 >> 2] = $1_1
   }
   $6_1 = $1_1 - HEAP32[$4_1 + 12236 >> 2] << 2;
   $1_1 = $3;
   while (1) {
    $3 = $1644($1_1, 10, $2_1 - $1_1 | 0);
    $3 = $3 ? $3 : $2_1;
    label$13 : {
     if (($1_1 | 0) == ($3 | 0) & ($2_1 | 0) == ($3 | 0)) {
      break label$13
     }
     $7_1 = HEAPU8[$4_1 + 12232 | 0];
     HEAP32[$5_1 + 4 >> 2] = 19354;
     HEAP32[$5_1 >> 2] = $7_1 ? $6_1 : 1;
     HEAP32[$5_1 + 12 >> 2] = $1_1;
     HEAP32[$5_1 + 8 >> 2] = $3 - $1_1;
     $65(5442, $5_1);
     HEAP8[$4_1 + 12232 | 0] = 0;
     if (HEAPU8[$3 | 0] != 10) {
      break label$13
     }
     $65(19353, 0);
     HEAP8[$4_1 + 12232 | 0] = 1;
    }
    $7_1 = $3 + 1 | 0;
    $3 = ($2_1 | 0) != ($3 | 0);
    $1_1 = $3 ? $7_1 : $1_1;
    if ($3) {
     continue
    }
    break;
   };
   if ($8) {
    $1_1 = $8;
    $2_1 = $1_1 + $1697($1_1) | 0;
    continue;
   }
   break;
  };
  global$0 = $5_1 + 16 | 0;
 }
 
 function $65($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3 = HEAP32[18392];
  if (HEAPU8[$3 + 12196 | 0]) {
   HEAP32[$5_1 + 12 >> 2] = $1_1;
   $7_1 = $3 + 12208 | 0;
   __inlined_func$340 : {
    if (HEAP32[$3 + 12204 >> 2]) {
     $4_1 = HEAP32[$3 + 12212 >> 2];
     label$2 : {
      if (($4_1 | 0) >= 0) {
       break label$2
      }
      $2_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0;
      $6_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
      if (($4_1 | 0) >= ($6_1 | 0)) {
       break label$2
      }
      $2_1 = HEAP32[18392];
      if ($2_1) {
       $2_1 = $2_1 + 876 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
      }
      $8 = FUNCTION_TABLE[HEAP32[18314]]($6_1, HEAP32[18394]) | 0;
      $2_1 = HEAP32[$3 + 12216 >> 2];
      if ($2_1) {
       $1602($8, $2_1, HEAP32[$3 + 12208 >> 2]);
       $4_1 = HEAP32[$3 + 12216 >> 2];
       label$5 : {
        if (!$4_1) {
         break label$5
        }
        $2_1 = HEAP32[18392];
        if (!$2_1) {
         break label$5
        }
        $2_1 = $2_1 + 876 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
      }
      HEAP32[$3 + 12212 >> 2] = $6_1;
      HEAP32[$3 + 12216 >> 2] = $8;
     }
     HEAP32[$3 + 12208 >> 2] = 0;
     $41($7_1, $0_1, $1_1);
     $0_1 = HEAP32[$3 + 12216 >> 2];
     $2_1 = $0_1 ? $0_1 : 73572;
     $1_1 = HEAP32[$3 + 12208 >> 2];
     $0_1 = $1_1 - 1 | 0;
     $1633($2_1, $0_1 >>> 0 <= $1_1 >>> 0 ? $0_1 : 0, HEAP32[$3 + 12204 >> 2]);
     break __inlined_func$340;
    }
    $41($7_1, $0_1, $1_1);
   }
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $67($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0);
  $9 = global$0 - 32 | 0;
  global$0 = $9;
  $11_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$9 + 24 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$9 + 28 >> 2] = $11_1;
  label$1 : {
   if ($5_1) {
    $11_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$9 + 16 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$9 + 20 >> 2] = $11_1;
    break label$1;
   }
   $5_1 = HEAP32[18392];
   $8 = HEAPF32[$5_1 + 6468 >> 2];
   if (($3 | 0) == ($4_1 | 0)) {
    HEAPF32[$9 + 20 >> 2] = $8;
    HEAP32[$9 + 16 >> 2] = 0;
    break label$1;
   }
   $474($9 + 16 | 0, HEAP32[$5_1 + 6464 >> 2], $8, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $3, $4_1, 0);
   $8 = Math_fround(HEAPF32[$9 + 16 >> 2] + Math_fround(.9999899864196777));
   label$4 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$8;
     break label$4;
    }
    $5_1 = -2147483648;
   }
   HEAPF32[$9 + 16 >> 2] = $5_1 | 0;
  }
  $5_1 = 1;
  $11_1 = $7_1 ? $7_1 + 8 | 0 : $2_1;
  $12_1 = HEAPF32[$11_1 >> 2];
  $8 = HEAPF32[$9 + 24 >> 2];
  $10_1 = HEAPF32[$9 + 16 >> 2];
  if (!($12_1 <= Math_fround($8 + $10_1))) {
   $5_1 = HEAPF32[$11_1 + 4 >> 2] <= Math_fround(HEAPF32[$9 + 28 >> 2] + HEAPF32[$9 + 20 >> 2])
  }
  $1_1 = $7_1 ? $7_1 : $1_1;
  if ($7_1) {
   $7_1 = 1;
   $5_1 = (($8 < HEAPF32[$1_1 >> 2] ? $7_1 : HEAPF32[$9 + 28 >> 2] < HEAPF32[$1_1 + 4 >> 2]) | $5_1) != 0;
  }
  $7_1 = $5_1;
  $13 = HEAPF32[$6_1 >> 2];
  if ($13 > Math_fround(0.0)) {
   $10_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 >> 2] - $8) - $10_1) * $13) + $8);
   HEAPF32[$9 + 24 >> 2] = $8 >= $10_1 ? $8 : $10_1;
  }
  $10_1 = HEAPF32[$6_1 + 4 >> 2];
  if ($10_1 > Math_fround(0.0)) {
   $8 = HEAPF32[$9 + 28 >> 2];
   $10_1 = Math_fround($8 + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 4 >> 2] - $8) - HEAPF32[$9 + 20 >> 2]) * $10_1));
   HEAPF32[$9 + 28 >> 2] = $8 >= $10_1 ? $8 : $10_1;
  }
  label$12 : {
   if ($7_1) {
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    $1_1 = HEAP32[$1_1 >> 2];
    HEAPF32[$9 + 12 >> 2] = HEAPF32[$11_1 + 4 >> 2];
    HEAPF32[$9 + 8 >> 2] = $12_1;
    HEAP32[$9 >> 2] = $1_1;
    HEAP32[$9 + 4 >> 2] = $2_1;
    $2_1 = HEAP32[18392];
    $8 = HEAPF32[$2_1 + 5620 >> 2];
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$14 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $1_1 = ~~$8;
      break label$14;
     }
     $1_1 = -2147483648;
    }
    $1_1 = $1_1 << 8;
    $8 = HEAPF32[$2_1 + 5616 >> 2];
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$16 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $5_1 = ~~$8;
      break label$16;
     }
     $5_1 = -2147483648;
    }
    $1_1 = $5_1 | $1_1;
    $8 = HEAPF32[$2_1 + 5624 >> 2];
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$18 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $5_1 = ~~$8;
      break label$18;
     }
     $5_1 = -2147483648;
    }
    $1_1 = $1_1 | $5_1 << 16;
    $5_1 = $9 + 24 | 0;
    $8 = Math_fround(HEAPF32[$2_1 + 5628 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
    $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
    label$20 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$8;
      break label$20;
     }
     $2_1 = -2147483648;
    }
    $413($0_1, 0, Math_fround(0.0), $5_1, $1_1 | $2_1 << 24, $3, $4_1, Math_fround(0.0), $9);
    break label$12;
   }
   $2_1 = HEAP32[18392];
   $8 = HEAPF32[$2_1 + 5620 >> 2];
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$22 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$8;
     break label$22;
    }
    $1_1 = -2147483648;
   }
   $1_1 = $1_1 << 8;
   $8 = HEAPF32[$2_1 + 5616 >> 2];
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$24 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$8;
     break label$24;
    }
    $5_1 = -2147483648;
   }
   $1_1 = $5_1 | $1_1;
   $8 = HEAPF32[$2_1 + 5624 >> 2];
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$26 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$8;
     break label$26;
    }
    $5_1 = -2147483648;
   }
   $1_1 = $1_1 | $5_1 << 16;
   $5_1 = $9 + 24 | 0;
   $8 = Math_fround(HEAPF32[$2_1 + 5628 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
   $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
   label$28 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$8;
     break label$28;
    }
    $2_1 = -2147483648;
   }
   $413($0_1, 0, Math_fround(0.0), $5_1, $1_1 | $2_1 << 24, $3, $4_1, Math_fround(0.0), 0);
  }
  global$0 = $9 + 32 | 0;
 }
 
 function $68($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0);
  $6_1 = HEAP32[18392];
  label$1 : {
   if (!$3) {
    $3 = $2_1;
    break label$1;
   }
   $3 = $1_1;
   $5_1 = $2_1 ? $2_1 : -1;
   if ($1_1 >>> 0 >= $5_1 >>> 0) {
    break label$1
   }
   $3 = $5_1;
   $2_1 = $1_1;
   while (1) {
    label$4 : {
     $7_1 = HEAPU8[$2_1 | 0];
     if (($7_1 | 0) != 35) {
      if ($7_1) {
       break label$4
      }
      $3 = $2_1;
      break label$1;
     }
     if (HEAPU8[$2_1 + 1 | 0] != 35) {
      break label$4
     }
     $3 = $2_1;
     break label$1;
    }
    $2_1 = $2_1 + 1 | 0;
    if (($5_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  $8 = HEAPF32[$6_1 + 6468 >> 2];
  if (($1_1 | 0) == ($3 | 0)) {
   HEAPF32[$0_1 + 4 >> 2] = $8;
   HEAP32[$0_1 >> 2] = 0;
   return;
  }
  $474($0_1, HEAP32[$6_1 + 6464 >> 2], $8, Math_fround(3402823466385288598117041.0e14), $4_1, $1_1, $3, 0);
  $4_1 = Math_fround(HEAPF32[$0_1 >> 2] + Math_fround(.9999899864196777));
  label$7 : {
   if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$4_1;
    break label$7;
   }
   $1_1 = -2147483648;
  }
  HEAPF32[$0_1 >> 2] = $1_1 | 0;
 }
 
 function $69($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0;
  $7_1 = $2_1;
  $8 = $3 ? $3 : -1;
  label$1 : {
   if ($2_1 >>> 0 >= $8 >>> 0) {
    break label$1
   }
   $7_1 = $8;
   $3 = $2_1;
   while (1) {
    label$3 : {
     $9 = HEAPU8[$3 | 0];
     if (($9 | 0) != 35) {
      if ($9) {
       break label$3
      }
      $7_1 = $3;
      break label$1;
     }
     if (HEAPU8[$3 + 1 | 0] != 35) {
      break label$3
     }
     $7_1 = $3;
     break label$1;
    }
    $3 = $3 + 1 | 0;
    if (($8 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  label$5 : {
   if (($2_1 | 0) == ($7_1 | 0)) {
    break label$5
   }
   $3 = HEAP32[18392];
   $67(HEAP32[HEAP32[$3 + 7080 >> 2] + 580 >> 2], $0_1, $1_1, $2_1, $7_1, $4_1, $5_1, $6_1);
   if (!HEAPU8[$3 + 12196 | 0]) {
    break label$5
   }
   $64($0_1, $2_1, $7_1);
  }
 }
 
 function $70($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = Math_fround(0);
  $8 = global$0 - 48 | 0;
  global$0 = $8;
  $9 = $6_1;
  label$1 : {
   if ($6_1) {
    break label$1
   }
   $9 = $5_1;
   if (($9 | 0) == -1) {
    break label$1
   }
   $6_1 = $5_1;
   while (1) {
    label$3 : {
     $9 = HEAPU8[$6_1 | 0];
     if (($9 | 0) != 35) {
      if ($9) {
       break label$3
      }
      $9 = $6_1;
      break label$1;
     }
     if (HEAPU8[$6_1 + 1 | 0] != 35) {
      break label$3
     }
     $9 = $6_1;
     break label$1;
    }
    $9 = -1;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != -1) {
     continue
    }
    break;
   };
  }
  $14 = $9;
  $16_1 = HEAP32[18392];
  label$5 : {
   if ($7_1) {
    $6_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$8 + 40 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$8 + 44 >> 2] = $6_1;
    break label$5;
   }
   $10_1 = HEAPF32[$16_1 + 6468 >> 2];
   if (($5_1 | 0) == ($14 | 0)) {
    HEAPF32[$8 + 44 >> 2] = $10_1;
    HEAP32[$8 + 40 >> 2] = 0;
    break label$5;
   }
   $474($8 + 40 | 0, HEAP32[$16_1 + 6464 >> 2], $10_1, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $5_1, $14, 0);
   $10_1 = Math_fround(HEAPF32[$8 + 40 >> 2] + Math_fround(.9999899864196777));
   label$8 : {
    if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
     $6_1 = ~~$10_1;
     break label$8;
    }
    $6_1 = -2147483648;
   }
   HEAPF32[$8 + 40 >> 2] = $6_1 | 0;
  }
  label$10 : {
   if (HEAPF32[$8 + 40 >> 2] > Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 >> 2])) {
    $6_1 = HEAP32[$0_1 + 44 >> 2];
    $15_1 = HEAPF32[$6_1 + 12 >> 2];
    $13 = HEAP32[$6_1 + 8 >> 2];
    HEAP32[$8 + 36 >> 2] = 0;
    $6_1 = 1;
    $9 = HEAPU16[$13 + 60 >> 1];
    $12_1 = ($9 | 0) != 65535;
    if (!$12_1) {
     $9 = HEAPU16[$13 + 62 >> 1];
     $6_1 = 3;
    }
    $7_1 = $6_1;
    $6_1 = $9;
    $9 = $472($13, $6_1 & 65535);
    $10_1 = HEAPF32[$9 + 16 >> 2];
    if ($12_1) {
     $11_1 = $10_1
    } else {
     $11_1 = Math_fround(HEAPF32[HEAP32[$0_1 + 44 >> 2] + 12 >> 2] / HEAPF32[$13 + 16 >> 2]);
     $10_1 = Math_fround($11_1 + Math_fround($10_1 - HEAPF32[$9 + 8 >> 2]));
     $11_1 = Math_fround(Math_fround($10_1 * Math_fround($7_1 | 0)) - $11_1);
    }
    $18_1 = $10_1;
    $10_1 = HEAPF32[$2_1 >> 2];
    $10_1 = Math_fround(Math_fround(($4_1 <= $10_1 ? $10_1 : $4_1) - $11_1) - HEAPF32[$1_1 >> 2]);
    $474($8 + 28 | 0, $13, $15_1, $10_1 >= Math_fround(1.0) ? $10_1 : Math_fround(1.0), Math_fround(0.0), $5_1, $14, $8 + 36 | 0);
    $10_1 = HEAPF32[$8 + 28 >> 2];
    $9 = HEAP32[$8 + 36 >> 2];
    if (!(($5_1 | 0) != ($9 | 0) | $9 >>> 0 >= $14 >>> 0)) {
     HEAP32[$8 + 28 >> 2] = 0;
     $12_1 = $8 + 28 | 0;
     $9 = $10($12_1, $5_1, $14) + $5_1 | 0;
     HEAP32[$8 + 36 >> 2] = $9;
     $474($12_1, $13, $15_1, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $5_1, $9, 0);
     $10_1 = HEAPF32[$8 + 28 >> 2];
    }
    $9 = HEAP32[$8 + 36 >> 2];
    label$17 : {
     if ($5_1 >>> 0 >= $9 >>> 0) {
      break label$17
     }
     while (1) {
      $12_1 = $9 - 1 | 0;
      $17_1 = HEAPU8[$12_1 | 0];
      if (!(($17_1 | 0) == 32 | ($17_1 | 0) == 9)) {
       break label$17
      }
      HEAP32[$8 + 36 >> 2] = $12_1;
      $474($8 + 28 | 0, $13, $15_1, Math_fround(3402823466385288598117041.0e14), Math_fround(0.0), $12_1, $9, 0);
      $10_1 = Math_fround($10_1 - HEAPF32[$8 + 28 >> 2]);
      $9 = HEAP32[$8 + 36 >> 2];
      if ($9 >>> 0 > $5_1 >>> 0) {
       continue
      }
      break;
     };
    }
    HEAPF32[$8 + 32 >> 2] = HEAPF32[$2_1 + 4 >> 2];
    HEAPF32[$8 + 28 >> 2] = $3;
    HEAP32[$8 + 20 >> 2] = 0;
    HEAP32[$8 + 24 >> 2] = 0;
    $67($0_1, $1_1, $8 + 28 | 0, $5_1, $9, $8 + 40 | 0, $8 + 20 | 0, 0);
    $10_1 = Math_fround($10_1 + HEAPF32[$1_1 >> 2]);
    if (!(Math_fround($11_1 + $10_1) <= $4_1)) {
     break label$10
    }
    $12_1 = $6_1 & 65535;
    $6_1 = 0;
    while (1) {
     $2_1 = $6_1;
     HEAPF32[$8 + 16 >> 2] = HEAPF32[$1_1 + 4 >> 2];
     $6_1 = HEAP32[18392];
     HEAPF32[$8 + 12 >> 2] = $10_1;
     $19 = HEAPF32[$6_1 + 5628 >> 2];
     $3 = HEAPF32[$6_1 + 5624 >> 2];
     $4_1 = HEAPF32[$6_1 + 5616 >> 2];
     $11_1 = HEAPF32[$6_1 + 5620 >> 2];
     $20_1 = HEAPF32[$6_1 + 5416 >> 2];
     $6_1 = HEAP32[$8 + 16 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$8 + 12 >> 2];
     HEAP32[$8 + 4 >> 2] = $6_1;
     $11_1 = Math_fround(Math_fround(($11_1 < Math_fround(0.0) ? Math_fround(0.0) : $11_1 > Math_fround(1.0) ? Math_fround(1.0) : $11_1) * Math_fround(255.0)) + Math_fround(.5));
     label$22 : {
      if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
       $6_1 = ~~$11_1;
       break label$22;
      }
      $6_1 = -2147483648;
     }
     $6_1 = $6_1 << 8;
     $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
     label$24 : {
      if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
       $9 = ~~$4_1;
       break label$24;
      }
      $9 = -2147483648;
     }
     $6_1 = $9 | $6_1;
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
     label$26 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $9 = ~~$3;
       break label$26;
      }
      $9 = -2147483648;
     }
     $6_1 = $6_1 | $9 << 16;
     $3 = Math_fround($19 * $20_1);
     $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
     label$28 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $9 = ~~$3;
       break label$28;
      }
      $9 = -2147483648;
     }
     $475($13, $0_1, $15_1, $8, $6_1 | $9 << 24, $12_1);
     $10_1 = Math_fround($18_1 + $10_1);
     $6_1 = $2_1 + 1 | 0;
     if (($7_1 | 0) != ($6_1 | 0)) {
      continue
     }
     break;
    };
    break label$10;
   }
   HEAPF32[$8 + 32 >> 2] = HEAPF32[$2_1 + 4 >> 2];
   HEAPF32[$8 + 28 >> 2] = $3;
   HEAP32[$8 + 20 >> 2] = 0;
   HEAP32[$8 + 24 >> 2] = 0;
   $67($0_1, $1_1, $8 + 28 | 0, $5_1, $14, $8 + 40 | 0, $8 + 20 | 0, 0);
  }
  if (HEAPU8[$16_1 + 12196 | 0]) {
   $64($1_1, $5_1, $14)
  }
  global$0 = $8 + 48 | 0;
 }
 
 function $71($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0);
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $6_1 = HEAP32[18392];
  $9 = HEAP32[$6_1 + 7080 >> 2];
  $401(HEAP32[$9 + 580 >> 2], $0_1, $1_1, $2_1, $4_1, 0);
  label$1 : {
   if (!$3) {
    break label$1
   }
   $10_1 = HEAPF32[$6_1 + 5488 >> 2];
   if (!($10_1 > Math_fround(0.0))) {
    break label$1
   }
   $6_1 = HEAP32[$9 + 580 >> 2];
   $5_1 = HEAPF32[$0_1 >> 2];
   HEAPF32[$7_1 + 12 >> 2] = HEAPF32[$0_1 + 4 >> 2] + Math_fround(1.0);
   HEAPF32[$7_1 + 8 >> 2] = $5_1 + Math_fround(1.0);
   $5_1 = HEAPF32[$1_1 >> 2];
   HEAPF32[$7_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] + Math_fround(1.0);
   HEAPF32[$7_1 >> 2] = $5_1 + Math_fround(1.0);
   $3 = HEAP32[18392];
   $5_1 = HEAPF32[$3 + 5716 >> 2];
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$2 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$5_1;
     break label$2;
    }
    $2_1 = -2147483648;
   }
   $2_1 = $2_1 << 8;
   $5_1 = HEAPF32[$3 + 5712 >> 2];
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$4 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $8 = ~~$5_1;
     break label$4;
    }
    $8 = -2147483648;
   }
   $2_1 = $8 | $2_1;
   $5_1 = HEAPF32[$3 + 5720 >> 2];
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$6 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $8 = ~~$5_1;
     break label$6;
    }
    $8 = -2147483648;
   }
   $2_1 = $2_1 | $8 << 16;
   $8 = $7_1 + 8 | 0;
   $5_1 = Math_fround(HEAPF32[$3 + 5724 >> 2] * HEAPF32[$3 + 5416 >> 2]);
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$8 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$5_1;
     break label$8;
    }
    $3 = -2147483648;
   }
   $400($6_1, $8, $7_1, $2_1 | $3 << 24, $4_1, 0, $10_1);
   $6_1 = HEAP32[18392];
   $5_1 = HEAPF32[$6_1 + 5700 >> 2];
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$10 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$5_1;
     break label$10;
    }
    $2_1 = -2147483648;
   }
   $3 = $2_1 << 8;
   $5_1 = HEAPF32[$6_1 + 5696 >> 2];
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$12 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$5_1;
     break label$12;
    }
    $2_1 = -2147483648;
   }
   $3 = $2_1 | $3;
   $5_1 = HEAPF32[$6_1 + 5704 >> 2];
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$14 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$5_1;
     break label$14;
    }
    $2_1 = -2147483648;
   }
   $3 = $3 | $2_1 << 16;
   $2_1 = HEAP32[$9 + 580 >> 2];
   $5_1 = Math_fround(HEAPF32[$6_1 + 5708 >> 2] * HEAPF32[$6_1 + 5416 >> 2]);
   $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
   label$16 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $6_1 = ~~$5_1;
     break label$16;
    }
    $6_1 = -2147483648;
   }
   $400($2_1, $0_1, $1_1, $3 | $6_1 << 24, $4_1, 0, $10_1);
  }
  global$0 = $7_1 + 16 | 0;
 }
 
 function $72($0_1, $1_1, $2_1) {
  var $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0);
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $5_1 = HEAP32[18392];
  $10_1 = HEAPF32[$5_1 + 5488 >> 2];
  if ($10_1 > Math_fround(0.0)) {
   $9 = HEAP32[$5_1 + 7080 >> 2];
   $6_1 = HEAP32[$9 + 580 >> 2];
   $3 = HEAPF32[$0_1 >> 2];
   HEAPF32[$7_1 + 12 >> 2] = HEAPF32[$0_1 + 4 >> 2] + Math_fround(1.0);
   HEAPF32[$7_1 + 8 >> 2] = $3 + Math_fround(1.0);
   $3 = HEAPF32[$1_1 >> 2];
   HEAPF32[$7_1 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2] + Math_fround(1.0);
   HEAPF32[$7_1 >> 2] = $3 + Math_fround(1.0);
   $3 = HEAPF32[$5_1 + 5716 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$2 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$3;
     break label$2;
    }
    $4_1 = -2147483648;
   }
   $4_1 = $4_1 << 8;
   $3 = HEAPF32[$5_1 + 5712 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$4 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $8 = ~~$3;
     break label$4;
    }
    $8 = -2147483648;
   }
   $4_1 = $8 | $4_1;
   $3 = HEAPF32[$5_1 + 5720 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$6 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $8 = ~~$3;
     break label$6;
    }
    $8 = -2147483648;
   }
   $4_1 = $4_1 | $8 << 16;
   $8 = $7_1 + 8 | 0;
   $3 = Math_fround(HEAPF32[$5_1 + 5724 >> 2] * HEAPF32[$5_1 + 5416 >> 2]);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$8 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$3;
     break label$8;
    }
    $5_1 = -2147483648;
   }
   $400($6_1, $8, $7_1, $4_1 | $5_1 << 24, $2_1, 0, $10_1);
   $5_1 = HEAP32[18392];
   $3 = HEAPF32[$5_1 + 5700 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$10 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $6_1 = ~~$3;
     break label$10;
    }
    $6_1 = -2147483648;
   }
   $6_1 = $6_1 << 8;
   $3 = HEAPF32[$5_1 + 5696 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$12 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$3;
     break label$12;
    }
    $4_1 = -2147483648;
   }
   $6_1 = $4_1 | $6_1;
   $3 = HEAPF32[$5_1 + 5704 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$14 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$3;
     break label$14;
    }
    $4_1 = -2147483648;
   }
   $6_1 = $6_1 | $4_1 << 16;
   $9 = HEAP32[$9 + 580 >> 2];
   $3 = Math_fround(HEAPF32[$5_1 + 5708 >> 2] * HEAPF32[$5_1 + 5416 >> 2]);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$16 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$3;
     break label$16;
    }
    $4_1 = -2147483648;
   }
   $400($9, $0_1, $1_1, $6_1 | $4_1 << 24, $2_1, 0, $10_1);
  }
  global$0 = $7_1 + 16 | 0;
 }
 
 function $73($0_1, $1_1, $2_1) {
  var $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  $5_1 = $1_1;
  $1_1 = HEAP32[18392];
  label$1 : {
   if (($5_1 | 0) != HEAP32[$1_1 + 7512 >> 2] | !(HEAPU8[$1_1 + 7570 | 0] ? $2_1 & 4 : 1)) {
    break label$1
   }
   $6_1 = HEAP32[$1_1 + 7080 >> 2];
   if (HEAPU8[$6_1 + 304 | 0]) {
    break label$1
   }
   $13 = $2_1 & 8 ? $13 : HEAPF32[$1_1 + 5484 >> 2];
   $10_1 = $0_1 + 8 | 0;
   $5_1 = HEAP32[$10_1 + 4 >> 2];
   $12_1 = $4_1 + 56 | 0;
   $1_1 = $12_1;
   HEAP32[$1_1 >> 2] = HEAP32[$10_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $5_1;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$4_1 + 48 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$4_1 + 52 >> 2] = $1_1;
   $3 = HEAPF32[$6_1 + 500 >> 2];
   $7_1 = HEAPF32[$4_1 + 48 >> 2];
   $14 = HEAPF32[$6_1 + 496 >> 2];
   $11_1 = $7_1 >= $14 ? $7_1 : $14;
   HEAPF32[$4_1 + 48 >> 2] = $11_1;
   $7_1 = HEAPF32[$4_1 + 52 >> 2];
   HEAPF32[$4_1 + 52 >> 2] = $3 <= $7_1 ? $7_1 : $3;
   $7_1 = HEAPF32[$6_1 + 504 >> 2];
   $0_1 = $4_1 + 60 | 0;
   $8 = HEAPF32[$0_1 >> 2];
   $15_1 = HEAPF32[$6_1 + 508 >> 2];
   $8 = $8 < $15_1 ? $8 : $15_1;
   HEAPF32[$0_1 >> 2] = $8;
   $9 = HEAPF32[$12_1 >> 2];
   $9 = $7_1 > $9 ? $9 : $7_1;
   HEAPF32[$12_1 >> 2] = $9;
   label$4 : {
    if (!($2_1 & 1)) {
     break label$4
    }
    $17_1 = Math_fround(HEAPF32[$4_1 + 52 >> 2] + Math_fround(-4.0));
    HEAPF32[$4_1 + 52 >> 2] = $17_1;
    $11_1 = Math_fround($11_1 + Math_fround(-4.0));
    HEAPF32[$4_1 + 48 >> 2] = $11_1;
    $9 = Math_fround($9 + Math_fround(4.0));
    HEAPF32[$4_1 + 56 >> 2] = $9;
    $8 = Math_fround($8 + Math_fround(4.0));
    HEAPF32[$4_1 + 60 >> 2] = $8;
    $18_1 = $3 <= $17_1 & $11_1 >= $14 & $7_1 >= $9 & $8 <= $15_1;
    if (!$18_1) {
     $16_1 = HEAP32[$6_1 + 580 >> 2];
     $10_1 = HEAP32[$4_1 + 52 >> 2];
     $0_1 = HEAP32[$4_1 + 48 >> 2];
     HEAP32[$4_1 + 40 >> 2] = $0_1;
     HEAP32[$4_1 + 44 >> 2] = $10_1;
     $5_1 = HEAP32[$4_1 + 60 >> 2];
     $1_1 = HEAP32[$4_1 + 56 >> 2];
     HEAP32[$4_1 + 32 >> 2] = $1_1;
     HEAP32[$4_1 + 36 >> 2] = $5_1;
     HEAP32[$4_1 + 8 >> 2] = $0_1;
     HEAP32[$4_1 + 12 >> 2] = $10_1;
     HEAP32[$4_1 >> 2] = $1_1;
     HEAP32[$4_1 + 4 >> 2] = $5_1;
     $378($16_1, $4_1 + 8 | 0, $4_1, 0);
    }
    $10_1 = HEAP32[$6_1 + 580 >> 2];
    HEAPF32[$4_1 + 28 >> 2] = HEAPF32[$4_1 + 52 >> 2] + Math_fround(1.0);
    HEAPF32[$4_1 + 24 >> 2] = HEAPF32[$4_1 + 48 >> 2] + Math_fround(1.0);
    HEAPF32[$4_1 + 20 >> 2] = HEAPF32[$4_1 + 60 >> 2] + Math_fround(-1.0);
    HEAPF32[$4_1 + 16 >> 2] = HEAPF32[$4_1 + 56 >> 2] + Math_fround(-1.0);
    $1_1 = HEAP32[18392];
    $3 = HEAPF32[$1_1 + 6404 >> 2];
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$3;
      break label$6;
     }
     $0_1 = -2147483648;
    }
    $5_1 = $0_1 << 8;
    $3 = HEAPF32[$1_1 + 6400 >> 2];
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$8 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$3;
      break label$8;
     }
     $0_1 = -2147483648;
    }
    $5_1 = $0_1 | $5_1;
    $3 = HEAPF32[$1_1 + 6408 >> 2];
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$10 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$3;
      break label$10;
     }
     $0_1 = -2147483648;
    }
    $5_1 = $5_1 | $0_1 << 16;
    $16_1 = $4_1 + 24 | 0;
    $19 = $4_1 + 16 | 0;
    $3 = Math_fround(HEAPF32[$1_1 + 6412 >> 2] * HEAPF32[$1_1 + 5416 >> 2]);
    $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
    label$12 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$3;
      break label$12;
     }
     $0_1 = -2147483648;
    }
    $400($10_1, $16_1, $19, $5_1 | $0_1 << 24, $13, 0, Math_fround(2.0));
    if ($18_1) {
     break label$4
    }
    $380(HEAP32[$6_1 + 580 >> 2]);
   }
   if (!($2_1 & 2)) {
    break label$1
   }
   $1_1 = HEAP32[18392];
   $3 = HEAPF32[$1_1 + 6404 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$14 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$3;
     break label$14;
    }
    $0_1 = -2147483648;
   }
   $2_1 = $0_1 << 8;
   $3 = HEAPF32[$1_1 + 6400 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$16 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$3;
     break label$16;
    }
    $0_1 = -2147483648;
   }
   $2_1 = $0_1 | $2_1;
   $3 = HEAPF32[$1_1 + 6408 >> 2];
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$18 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$3;
     break label$18;
    }
    $0_1 = -2147483648;
   }
   $0_1 = $2_1 | $0_1 << 16;
   $2_1 = HEAP32[$6_1 + 580 >> 2];
   $5_1 = $4_1 + 48 | 0;
   $3 = Math_fround(HEAPF32[$1_1 + 6412 >> 2] * HEAPF32[$1_1 + 5416 >> 2]);
   $3 = Math_fround(Math_fround(($3 < Math_fround(0.0) ? Math_fround(0.0) : $3 > Math_fround(1.0) ? Math_fround(1.0) : $3) * Math_fround(255.0)) + Math_fround(.5));
   label$20 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$3;
     break label$20;
    }
    $1_1 = -2147483648;
   }
   $400($2_1, $5_1, $12_1, $0_1 | $1_1 << 24, $13, 0, Math_fround(1.0));
  }
  global$0 = $4_1 - -64 | 0;
 }
 
 function $75($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 + -64 | 0;
  global$0 = $6_1;
  $3 = HEAP32[18392];
  $9 = HEAP32[$3 + 7080 >> 2];
  $5_1 = HEAP32[$3 + 12276 >> 2];
  label$1 : {
   if (($5_1 | 0) == -1) {
    HEAP32[$3 + 12276 >> 2] = 0;
    $5_1 = HEAP32[$9 + 196 >> 2];
    $7_1 = $5_1 + 1 | 0;
    $1_1 = HEAP32[$3 + 12288 >> 2];
    label$3 : {
     if (($1_1 | 0) > ($5_1 | 0)) {
      break label$3
     }
     $2_1 = $1_1;
     $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
     $1_1 = ($1_1 | 0) > ($7_1 | 0) ? $1_1 : $7_1;
     if (($2_1 | 0) >= ($1_1 | 0)) {
      break label$3
     }
     if ($3) {
      $2_1 = $3 + 876 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
     }
     $2_1 = FUNCTION_TABLE[HEAP32[18314]]($1_1 << 6, HEAP32[18394]) | 0;
     $4_1 = HEAP32[$3 + 12292 >> 2];
     if ($4_1) {
      $1602($2_1, $4_1, HEAP32[$3 + 12284 >> 2] << 6);
      $4_1 = HEAP32[$3 + 12292 >> 2];
      label$8 : {
       if (!$4_1) {
        break label$8
       }
       $8 = HEAP32[18392];
       if (!$8) {
        break label$8
       }
       $8 = $8 + 876 | 0;
       HEAP32[$8 >> 2] = HEAP32[$8 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
     }
     HEAP32[$3 + 12288 >> 2] = $1_1;
     HEAP32[$3 + 12292 >> 2] = $2_1;
    }
    $1_1 = HEAP32[$3 + 12284 >> 2];
    if (($1_1 | 0) <= ($5_1 | 0)) {
     while (1) {
      $2_1 = HEAP32[$3 + 12292 >> 2] + ($1_1 << 6) | 0;
      HEAP32[$2_1 >> 2] = 0;
      HEAP32[$2_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 56 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 48 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 40 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 32 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 24 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $4_1 = $2_1 + 16 | 0;
      HEAP32[$4_1 >> 2] = 0;
      HEAP32[$4_1 + 4 >> 2] = 0;
      $2_1 = $2_1 + 8 | 0;
      HEAP32[$2_1 >> 2] = 0;
      HEAP32[$2_1 + 4 >> 2] = 0;
      $2_1 = $1_1;
      $1_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($5_1 | 0)) {
       continue
      }
      break;
     }
    }
    HEAP32[$3 + 12284 >> 2] = $7_1;
    $5_1 = HEAP32[$9 + 196 >> 2];
    if (($5_1 | 0) < 0) {
     break label$1
    }
    $7_1 = HEAP32[$3 + 12292 >> 2];
    $3 = 0;
    while (1) {
     $1_1 = $0_1;
     $2_1 = $3;
     if (($5_1 | 0) > ($2_1 | 0)) {
      $1_1 = HEAP32[HEAP32[$9 + 204 >> 2] + ($2_1 << 2) >> 2]
     }
     HEAP32[$7_1 + ($2_1 << 6) >> 2] = $1_1;
     $3 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($5_1 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   if (($5_1 | 0) != HEAP32[$9 + 196 >> 2]) {
    break label$1
   }
   $3 = HEAP32[$3 + 12292 >> 2];
   label$13 : {
    label$14 : {
     switch ($1_1 - 4 | 0) {
     case 0:
      HEAP32[$6_1 >> 2] = $2_1;
      $21(($3 + ($5_1 << 6) | 0) + 6 | 0, 58, 13404, $6_1);
      break label$13;
     case 7:
      $0_1 = $1697($2_1);
      HEAP32[$6_1 + 20 >> 2] = $2_1;
      HEAP32[$6_1 + 16 >> 2] = $0_1;
      $21(($3 + ($5_1 << 6) | 0) + 6 | 0, 58, 18924, $6_1 + 16 | 0);
      break label$13;
     case 8:
      HEAP32[$6_1 + 32 >> 2] = $2_1;
      $21(($3 + ($5_1 << 6) | 0) + 6 | 0, 58, 6985, $6_1 + 32 | 0);
      break label$13;
     case 9:
      break label$14;
     default:
      break label$13;
     };
    }
    $1_1 = $3 + ($5_1 << 6) | 0;
    if (HEAPU8[$1_1 + 6 | 0]) {
     break label$13
    }
    HEAP32[$6_1 + 48 >> 2] = $0_1;
    $21($1_1 + 6 | 0, 58, 13961, $6_1 + 48 | 0);
   }
   HEAP8[($3 + ($5_1 << 6) | 0) + 5 | 0] = 1;
  }
  global$0 = $6_1 - -64 | 0;
 }
 
 function $76($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = $1_1;
  $4_1 = HEAP32[(HEAP32[$0_1 + 204 >> 2] + (HEAP32[$0_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
  $0_1 = $4_1;
  while (1) {
   $5_1 = $2_1;
   $2_1 = $2_1 + 1 | 0;
   $3 = HEAPU8[$5_1 | 0];
   if ($3) {
    $0_1 = ($3 | 0) != 35 | HEAPU8[$2_1 | 0] != 35 ? $0_1 : HEAPU8[$5_1 + 2 | 0] == 35 ? $4_1 : $0_1;
    $0_1 = HEAP32[(($3 ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $0_1 = $0_1 ^ -1;
  $2_1 = HEAP32[18392];
  if (($0_1 | 0) == HEAP32[$2_1 + 7136 >> 2]) {
   HEAP32[$2_1 + 7140 >> 2] = $0_1
  }
  if (HEAP32[$2_1 + 7196 >> 2] == ($0_1 | 0)) {
   HEAP8[$2_1 + 7200 | 0] = 1
  }
  if (HEAP32[$2_1 + 7112 >> 2] == ($0_1 | 0)) {
   $75($0_1, 11, $1_1)
  }
  return $0_1;
 }
 
 function $78($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $373($0_1);
  $374($0_1 + 120 | 0);
  $2_1 = HEAP32[$0_1 + 136 >> 2];
  if ($2_1) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
  }
  $2_1 = HEAP32[$0_1 + 92 >> 2];
  if ($2_1) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
  }
  $2_1 = HEAP32[$0_1 + 80 >> 2];
  if ($2_1) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
  }
  $2_1 = HEAP32[$0_1 + 68 >> 2];
  if ($2_1) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
  }
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  if ($2_1) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
  }
  $2_1 = HEAP32[$0_1 + 20 >> 2];
  if ($2_1) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
  }
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  if ($2_1) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
  }
  return $0_1;
 }
 
 function $79($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  if (($0_1 | 0) == HEAP32[$1_1 + 7136 >> 2]) {
   HEAP32[$1_1 + 7140 >> 2] = $0_1
  }
  if (($0_1 | 0) == HEAP32[$1_1 + 7196 >> 2]) {
   HEAP8[$1_1 + 7200 | 0] = 1
  }
 }
 
 function $80($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $4_1 = 4;
  $2_1 = $3 + 12 | 0;
  $0_1 = HEAP32[(HEAP32[$0_1 + 204 >> 2] + (HEAP32[$0_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
  while (1) {
   $5_1 = $2_1;
   $2_1 = $2_1 + 1 | 0;
   $0_1 = HEAP32[((HEAPU8[$5_1 | 0] ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
   $4_1 = $4_1 - 1 | 0;
   if ($4_1) {
    continue
   }
   break;
  };
  $0_1 = $0_1 ^ -1;
  $2_1 = HEAP32[18392];
  if (($0_1 | 0) == HEAP32[$2_1 + 7136 >> 2]) {
   HEAP32[$2_1 + 7140 >> 2] = $0_1
  }
  if (HEAP32[$2_1 + 7196 >> 2] == ($0_1 | 0)) {
   HEAP8[$2_1 + 7200 | 0] = 1
  }
  if (HEAP32[$2_1 + 7112 >> 2] == ($0_1 | 0)) {
   $75($0_1, 12, $1_1)
  }
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $81($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = $1_1;
  $5_1 = HEAP32[(HEAP32[$0_1 + 204 >> 2] + (HEAP32[$0_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
  $0_1 = $5_1;
  while (1) {
   $4_1 = $3;
   $3 = $4_1 + 1 | 0;
   $2_1 = HEAPU8[$4_1 | 0];
   if ($2_1) {
    $0_1 = ($2_1 | 0) != 35 | HEAPU8[$3 | 0] != 35 ? $0_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? $5_1 : $0_1;
    $0_1 = HEAP32[(($2_1 ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
   }
   if ($2_1) {
    continue
   }
   break;
  };
  $0_1 = $0_1 ^ -1;
  if (($0_1 | 0) == HEAP32[HEAP32[18392] + 7112 >> 2]) {
   $75($0_1, 11, $1_1)
  }
  return $0_1;
 }
 
 function $82($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0);
  $3 = HEAP32[(HEAP32[$0_1 + 204 >> 2] + (HEAP32[$0_1 + 196 >> 2] << 2) | 0) - 4 >> 2];
  $4_1 = HEAPF32[$0_1 + 224 >> 2];
  $6_1 = HEAPF32[$1_1 >> 2];
  $7_1 = HEAPF32[$1_1 + 4 >> 2];
  $8 = HEAPF32[$1_1 + 8 >> 2];
  $2_1 = global$0 - 16 | 0;
  $5_1 = HEAPF32[$0_1 + 228 >> 2];
  HEAPF32[$2_1 + 12 >> 2] = HEAPF32[$1_1 + 12 >> 2] - $5_1;
  HEAPF32[$2_1 + 8 >> 2] = $8 - $4_1;
  HEAPF32[$2_1 + 4 >> 2] = $7_1 - $5_1;
  HEAPF32[$2_1 >> 2] = $6_1 - $4_1;
  $0_1 = 16;
  $1_1 = $2_1;
  $3 = $3 ^ -1;
  while (1) {
   $2_1 = $1_1;
   $1_1 = $1_1 + 1 | 0;
   $2_1 = HEAP32[((HEAPU8[$2_1 | 0] ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
   $3 = $2_1;
   $0_1 = $0_1 - 1 | 0;
   if ($0_1) {
    continue
   }
   break;
  };
  $1_1 = $2_1 ^ -1;
  $0_1 = HEAP32[18392];
  if (($1_1 | 0) == HEAP32[$0_1 + 7136 >> 2]) {
   HEAP32[$0_1 + 7140 >> 2] = $1_1
  }
  if (HEAP32[$0_1 + 7196 >> 2] == ($1_1 | 0)) {
   HEAP8[$0_1 + 7200 | 0] = 1
  }
  return $1_1;
 }
 
 function $85($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[18392];
  $3 = HEAP32[$2_1 + 7136 >> 2];
  HEAP8[$2_1 + 7148 | 0] = ($0_1 | 0) != ($3 | 0);
  label$1 : {
   if (($0_1 | 0) == ($3 | 0)) {
    break label$1
   }
   HEAP32[$2_1 + 7192 >> 2] = -1;
   HEAP8[$2_1 + 7151 | 0] = 0;
   HEAP8[$2_1 + 7152 | 0] = 0;
   HEAP32[$2_1 + 7144 >> 2] = 0;
   if (!$0_1) {
    break label$1
   }
   HEAP32[$2_1 + 7212 >> 2] = 0;
   HEAP32[$2_1 + 7208 >> 2] = $0_1;
  }
  HEAP32[$2_1 + 7184 >> 2] = $1_1;
  HEAP8[$2_1 + 7149 | 0] = 0;
  HEAP8[$2_1 + 7150 | 0] = 0;
  HEAP32[$2_1 + 7136 >> 2] = $0_1;
  HEAP8[$2_1 + 7153 | 0] = 0;
  if ($0_1) {
   HEAP32[$2_1 + 7140 >> 2] = $0_1;
   $1_1 = 4;
   label$3 : {
    if (($0_1 | 0) == HEAP32[$2_1 + 7520 >> 2]) {
     break label$3
    }
    $1_1 = 4;
    if (HEAP32[$2_1 + 7532 >> 2] == ($0_1 | 0)) {
     break label$3
    }
    $1_1 = HEAP32[$2_1 + 7540 >> 2] == ($0_1 | 0) ? 4 : 1;
   }
   HEAP32[$2_1 + 7188 >> 2] = $1_1;
  }
  HEAP32[$2_1 + 7168 >> 2] = 0;
  HEAP32[$2_1 + 7172 >> 2] = 0;
  HEAP32[$2_1 + 7156 >> 2] = 0;
  HEAP32[$2_1 + 7160 >> 2] = 0;
  HEAP8[$2_1 + 7154 | 0] = 0;
 }
 
 function $86() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7136 >> 2];
  HEAP8[$0_1 + 7148 | 0] = ($1_1 | 0) != 0;
  if ($1_1) {
   HEAP32[$0_1 + 7192 >> 2] = -1;
   HEAP8[$0_1 + 7151 | 0] = 0;
   HEAP8[$0_1 + 7152 | 0] = 0;
   HEAP32[$0_1 + 7144 >> 2] = 0;
  }
  HEAP32[$0_1 + 7184 >> 2] = 0;
  HEAP8[$0_1 + 7149 | 0] = 0;
  HEAP8[$0_1 + 7150 | 0] = 0;
  HEAP32[$0_1 + 7136 >> 2] = 0;
  HEAP32[$0_1 + 7168 >> 2] = 0;
  HEAP32[$0_1 + 7172 >> 2] = 0;
  HEAP32[$0_1 + 7156 >> 2] = 0;
  HEAP32[$0_1 + 7160 >> 2] = 0;
  HEAP8[$0_1 + 7153 | 0] = 0;
  HEAP8[$0_1 + 7154 | 0] = 0;
 }
 
 function $87($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  HEAP16[$1_1 + 7124 >> 1] = 0;
  HEAP32[$1_1 + 7116 >> 2] = $0_1;
  if (!(!$0_1 | HEAP32[$1_1 + 7120 >> 2] == ($0_1 | 0))) {
   HEAP32[$1_1 + 7128 >> 2] = 0;
   HEAP32[$1_1 + 7132 >> 2] = 0;
  }
 }
 
 function $88() {
  var $0_1 = 0;
  $0_1 = HEAP32[18392];
  HEAP16[$0_1 + 7152 >> 1] = 257;
  $0_1 = $0_1 + 7248 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 4;
 }
 
 function $89($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[18392];
  $3 = HEAP32[$2_1 + 7080 >> 2];
  folding_inner0 : {
   label$1 : {
    label$2 : {
     if (!(HEAPU8[$2_1 + 7570 | 0] | !HEAPU8[$2_1 + 7571 | 0])) {
      if (!(!(HEAP32[$2_1 + 7244 >> 2] & 4) | $0_1 & 512)) {
       break folding_inner0
      }
      $3 = HEAP32[$2_1 + 7512 >> 2];
      if (!$3) {
       break folding_inner0
      }
      $0_1 = 0;
      if (($3 | 0) == HEAP32[$2_1 + 7240 >> 2]) {
       break label$2
      }
      break label$1;
     }
     $1_1 = HEAP32[$2_1 + 7248 >> 2];
     if (!($1_1 & 1) | !($1_1 & 128 | $0_1 & 256 | ($3 | 0) == HEAP32[$2_1 + 7084 >> 2])) {
      break folding_inner0
     }
     label$8 : {
      if ($0_1 & 128) {
       break label$8
      }
      $1_1 = HEAP32[$2_1 + 7136 >> 2];
      if (!$1_1 | ($1_1 | 0) == HEAP32[$2_1 + 7240 >> 2] | (HEAPU8[$2_1 + 7149 | 0] | ($1_1 | 0) == HEAP32[$3 + 80 >> 2])) {
       break label$8
      }
      break folding_inner0;
     }
     label$9 : {
      $1_1 = HEAP32[$2_1 + 7508 >> 2];
      if (!$1_1) {
       break label$9
      }
      $1_1 = HEAP32[$1_1 + 736 >> 2];
      if (!$1_1 | !HEAPU8[$1_1 + 139 | 0] | ($1_1 | 0) == HEAP32[$3 + 736 >> 2]) {
       break label$9
      }
      $1_1 = HEAP32[$1_1 + 8 >> 2];
      if ($1_1 & 134217728) {
       break folding_inner0
      }
      if (!($1_1 & 67108864) | $0_1 & 32) {
       break label$9
      }
      break folding_inner0;
     }
     if (!(!(HEAP32[$2_1 + 7244 >> 2] & 4) | $0_1 & 512)) {
      break folding_inner0
     }
     if (HEAP32[$2_1 + 7240 >> 2] != HEAP32[$3 + 80 >> 2]) {
      break label$2
     }
     $0_1 = 0;
     if (HEAPU8[$3 + 140 | 0]) {
      break label$1
     }
    }
    $0_1 = 1;
   }
   return $0_1 | 0;
  }
  return 0;
 }
 
 function $90() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7512 >> 2];
  return ($1_1 | 0) != 0 & HEAP32[$0_1 + 7240 >> 2] == ($1_1 | 0);
 }
 
 function $91($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0);
  folding_inner0 : {
   $2_1 = HEAP32[18392];
   $4_1 = HEAP32[$2_1 + 7116 >> 2];
   if (!(!$4_1 | ($1_1 | 0) == ($4_1 | 0) | HEAPU8[$2_1 + 7124 | 0])) {
    break folding_inner0
   }
   $4_1 = HEAP32[$2_1 + 7080 >> 2];
   if (($4_1 | 0) != HEAP32[$2_1 + 7084 >> 2]) {
    break folding_inner0
   }
   $10_1 = HEAP32[$2_1 + 7136 >> 2];
   if (!(HEAPU8[$2_1 + 7149 | 0] | (!$10_1 | ($1_1 | 0) == ($10_1 | 0)))) {
    break folding_inner0
   }
   $3 = HEAPF32[$0_1 >> 2];
   $5_1 = HEAPF32[$4_1 + 496 >> 2];
   $7_1 = $3 >= $5_1 ? $3 : $5_1;
   $3 = HEAPF32[$2_1 + 5516 >> 2];
   $5_1 = HEAPF32[$2_1 + 228 >> 2];
   if (!(Math_fround($7_1 - $3) <= $5_1)) {
    break folding_inner0
   }
   $11_1 = HEAPF32[$2_1 + 232 >> 2];
   $8 = HEAPF32[$0_1 + 4 >> 2];
   $9 = HEAPF32[$4_1 + 500 >> 2];
   $7_1 = $8 >= $9 ? $8 : $9;
   $8 = HEAPF32[$2_1 + 5520 >> 2];
   if (!($11_1 >= Math_fround($7_1 - $8))) {
    break folding_inner0
   }
   $7_1 = $3;
   $3 = HEAPF32[$0_1 + 8 >> 2];
   $9 = HEAPF32[$4_1 + 504 >> 2];
   if (!($5_1 < Math_fround($7_1 + ($3 < $9 ? $3 : $9)))) {
    break folding_inner0
   }
   $3 = HEAPF32[$0_1 + 12 >> 2];
   $5_1 = HEAPF32[$4_1 + 508 >> 2];
   if (!(Math_fround(($3 < $5_1 ? $3 : $5_1) + $8) > $11_1) | HEAPU8[$2_1 + 7571 | 0]) {
    break folding_inner0
   }
   label$9 : {
    $6_1 = HEAP32[$2_1 + 7508 >> 2];
    if (!$6_1) {
     break label$9
    }
    $6_1 = HEAP32[$6_1 + 736 >> 2];
    if (!$6_1 | !HEAPU8[$6_1 + 139 | 0] | (!(HEAPU8[$6_1 + 11 | 0] & 12) | ($6_1 | 0) == HEAP32[$4_1 + 736 >> 2])) {
     break label$9
    }
    HEAP8[$2_1 + 7127 | 0] = 1;
    break folding_inner0;
   }
   label$10 : {
    if (!$1_1) {
     break label$10
    }
    HEAP16[$2_1 + 7124 >> 1] = 0;
    HEAP32[$2_1 + 7116 >> 2] = $1_1;
    if (HEAP32[$2_1 + 7120 >> 2] == ($1_1 | 0)) {
     break label$10
    }
    HEAP32[$2_1 + 7128 >> 2] = 0;
    HEAP32[$2_1 + 7132 >> 2] = 0;
   }
   if (HEAPU8[(HEAP32[$2_1 + 7240 >> 2] == ($1_1 | 0) ? 7244 : 7216) + $2_1 | 0] & 4) {
    if (($1_1 | 0) == ($10_1 | 0)) {
     $86()
    }
    HEAP8[$2_1 + 7127 | 0] = 1;
    break folding_inner0;
   }
   label$13 : {
    if (!$1_1) {
     break label$13
    }
    if (!(!HEAPU8[$2_1 + 12248 | 0] | HEAP32[$2_1 + 7120 >> 2] != ($1_1 | 0))) {
     $400($92(HEAP32[HEAP32[$2_1 + 7504 >> 2] >> 2], 1, 11768), $0_1, $0_1 + 8 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0))
    }
    if (HEAP32[$2_1 + 12252 >> 2] != ($1_1 | 0)) {
     break label$13
    }
    wasm2js_trap();
   }
   return 1;
  }
  return 0;
 }
 
 function $92($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0);
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[18392];
  $5_1 = ($1_1 << 2) + $0_1 | 0;
  $6_1 = $5_1 + 44 | 0;
  $1_1 = HEAP32[$6_1 >> 2];
  if (!$1_1) {
   if ($4_1) {
    $1_1 = $4_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   }
   $1_1 = $1604(FUNCTION_TABLE[HEAP32[18314]](144, HEAP32[18394]) | 0, 0, 144);
   HEAP32[$1_1 + 48 >> 2] = $2_1;
   HEAP32[$1_1 + 44 >> 2] = $4_1 + 6476;
   HEAP32[$6_1 >> 2] = $1_1;
  }
  $6_1 = $5_1 + 36 | 0;
  if (HEAP32[$6_1 >> 2] != HEAP32[$4_1 + 6984 >> 2]) {
   $372($1_1);
   $381($1_1, HEAP32[HEAP32[$4_1 + 152 >> 2] + 4 >> 2]);
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   $5_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$3 + 24 >> 2] = $5_1;
   HEAP32[$3 + 28 >> 2] = $2_1;
   $7_1 = HEAPF32[$0_1 + 12 >> 2];
   $8 = HEAPF32[$0_1 + 4 >> 2];
   HEAPF32[$3 + 20 >> 2] = HEAPF32[$0_1 + 8 >> 2] + HEAPF32[$0_1 + 16 >> 2];
   HEAPF32[$3 + 16 >> 2] = $8 + $7_1;
   HEAP32[$3 + 8 >> 2] = $5_1;
   HEAP32[$3 + 12 >> 2] = $2_1;
   $0_1 = HEAP32[$3 + 20 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$3 + 16 >> 2];
   HEAP32[$3 + 4 >> 2] = $0_1;
   $378($1_1, $3 + 8 | 0, $3, 0);
   HEAP32[$6_1 >> 2] = HEAP32[$4_1 + 6984 >> 2];
  }
  global$0 = $3 + 32 | 0;
  return $1_1;
 }
 
 function $93($0_1, $1_1, $2_1) {
  var $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $7_1 = HEAPF32[$1_1 >> 2];
  $4_1 = HEAPF32[$0_1 + 4 >> 2];
  $5_1 = HEAPF32[$0_1 >> 2];
  $1_1 = HEAP32[18392];
  if ($2_1) {
   $0_1 = HEAP32[$1_1 + 7080 >> 2];
   $3 = HEAPF32[$0_1 + 496 >> 2];
   $5_1 = $3 <= $5_1 ? $5_1 : $3;
   $3 = HEAPF32[$0_1 + 500 >> 2];
   $4_1 = $3 <= $4_1 ? $4_1 : $3;
   $3 = HEAPF32[$0_1 + 504 >> 2];
   $7_1 = $3 > $7_1 ? $7_1 : $3;
   $3 = HEAPF32[$0_1 + 508 >> 2];
   $6_1 = $3 > $6_1 ? $6_1 : $3;
  }
  $0_1 = 0;
  $3 = HEAPF32[$1_1 + 228 >> 2];
  $8 = $5_1;
  $5_1 = HEAPF32[$1_1 + 5516 >> 2];
  if ($3 >= Math_fround($8 - $5_1)) {
   $9 = HEAPF32[$1_1 + 232 >> 2];
   $8 = $4_1;
   $4_1 = HEAPF32[$1_1 + 5520 >> 2];
   $0_1 = $3 < Math_fround($7_1 + $5_1) & $9 >= Math_fround($8 - $4_1) & Math_fround($6_1 + $4_1) > $9;
  }
  return $0_1;
 }
 
 function $94() {
  return $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
 }
 
 function $95($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  label$1 : {
   $2_1 = HEAP32[18392];
   $3 = HEAP32[$2_1 + 7080 >> 2];
   if (!(!(HEAPF32[$3 + 500 >> 2] < HEAPF32[$0_1 + 12 >> 2]) | !(HEAPF32[$3 + 508 >> 2] > HEAPF32[$0_1 + 4 >> 2]) | !(HEAPF32[$3 + 496 >> 2] < HEAPF32[$0_1 + 8 >> 2]))) {
    if (HEAPF32[$3 + 504 >> 2] > HEAPF32[$0_1 >> 2]) {
     break label$1
    }
   }
   if (HEAPU8[$2_1 + 12196 | 0] | !!$1_1 & (HEAP32[$2_1 + 7136 >> 2] == ($1_1 | 0) | HEAP32[$2_1 + 7512 >> 2] == ($1_1 | 0))) {
    break label$1
   }
   return 1;
  }
  return 0;
 }
 
 function $97() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 208 >> 2];
  if (!$1_1) {
   return 19354
  }
  return FUNCTION_TABLE[$1_1 | 0](HEAP32[$0_1 + 216 >> 2]) | 0;
 }
 
 function $98($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 212 >> 2];
  if ($2_1) {
   FUNCTION_TABLE[$2_1 | 0](HEAP32[$1_1 + 216 >> 2], $0_1)
  }
 }
 
 function $101($0_1) {
  HEAP32[18392] = $0_1;
 }
 
 function $102($0_1, $1_1) {
  HEAP32[18315] = $1_1;
  HEAP32[18314] = $0_1;
  HEAP32[18394] = 0;
 }
 
 function $106($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  if (HEAP32[$0_1 + 7008 >> 2]) {
   while (1) {
    $9 = $4_1;
    $8 = HEAP32[HEAP32[$0_1 + 7016 >> 2] + ($4_1 << 2) >> 2];
    if (!(HEAP8[$8 + 9 | 0] & 1)) {
     $3 = HEAP32[$8 + 576 >> 2];
     label$4 : {
      if (($3 | 0) != -1) {
       $3 = $3 + HEAP32[$0_1 + 12164 >> 2] | 0;
       break label$4;
      }
      $11_1 = HEAP32[18392];
      $4_1 = HEAP32[$11_1 + 12164 >> 2];
      $12_1 = $4_1 + 4 | 0;
      $3 = $4_1 ? $12_1 : 0;
      if (!$4_1) {
       break label$4
      }
      $6_1 = HEAP32[$8 + 4 >> 2];
      while (1) {
       if (($6_1 | 0) == HEAP32[$3 >> 2]) {
        break label$4
       }
       $10_1 = $3 + HEAP32[$3 - 4 >> 2] | 0;
       $4_1 = HEAP32[$11_1 + 12156 >> 2] + $12_1 | 0;
       $3 = ($4_1 | 0) != ($10_1 | 0) ? $10_1 : 0;
       if (($4_1 | 0) != ($10_1 | 0)) {
        continue
       }
       break;
      };
     }
     $4_1 = $3;
     if (!$3) {
      $4_1 = $156(HEAP32[$8 >> 2]);
      HEAP32[$8 + 576 >> 2] = $4_1 - HEAP32[$0_1 + 12164 >> 2];
     }
     $7_1 = HEAPF32[$8 + 12 >> 2];
     label$10 : {
      if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
       $3 = ~~$7_1;
       break label$10;
      }
      $3 = -2147483648;
     }
     $3 = $3 & 65535;
     $7_1 = HEAPF32[$8 + 16 >> 2];
     label$12 : {
      if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
       $6_1 = ~~$7_1;
       break label$12;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$4_1 + 4 >> 2] = $3 | $6_1 << 16;
     $7_1 = HEAPF32[$8 + 28 >> 2];
     label$14 : {
      if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
       $3 = ~~$7_1;
       break label$14;
      }
      $3 = -2147483648;
     }
     $3 = $3 & 65535;
     $7_1 = HEAPF32[$8 + 32 >> 2];
     label$16 : {
      if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
       $6_1 = ~~$7_1;
       break label$16;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$4_1 + 8 >> 2] = $3 | $6_1 << 16;
     HEAP8[$4_1 + 12 | 0] = HEAPU8[$8 + 141 | 0];
    }
    $4_1 = $9 + 1 | 0;
    if (($4_1 | 0) != HEAP32[$0_1 + 7008 >> 2]) {
     continue
    }
    break;
   }
  }
  $4_1 = HEAP32[$2_1 >> 2];
  $3 = $4_1 - 1 | 0;
  $6_1 = Math_imul(HEAP32[$0_1 + 12156 >> 2], 6) + ($3 >>> 0 <= $4_1 >>> 0 ? $3 : 0) | 0;
  if (($6_1 | 0) > HEAP32[$2_1 + 4 >> 2]) {
   $3 = HEAP32[18392];
   if ($3) {
    $3 = $3 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $9 = FUNCTION_TABLE[HEAP32[18314]]($6_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$2_1 + 8 >> 2];
   if ($3) {
    $1602($9, $3, HEAP32[$2_1 >> 2]);
    $4_1 = HEAP32[$2_1 + 8 >> 2];
    label$21 : {
     if (!$4_1) {
      break label$21
     }
     $3 = HEAP32[18392];
     if (!$3) {
      break label$21
     }
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
   }
   HEAP32[$2_1 + 4 >> 2] = $6_1;
   HEAP32[$2_1 + 8 >> 2] = $9;
  }
  $3 = HEAP32[$0_1 + 12164 >> 2];
  if ($3) {
   $4_1 = $3 + 4 | 0;
   while (1) {
    $3 = HEAP32[$1_1 >> 2];
    HEAP32[$5_1 + 52 >> 2] = $4_1 + 16;
    HEAP32[$5_1 + 48 >> 2] = $3;
    $40($2_1, 19240, $5_1 + 48 | 0);
    $3 = HEAP16[$4_1 + 4 >> 1];
    HEAP32[$5_1 + 36 >> 2] = HEAP16[$4_1 + 6 >> 1];
    HEAP32[$5_1 + 32 >> 2] = $3;
    $40($2_1, 19217, $5_1 + 32 | 0);
    $3 = HEAP16[$4_1 + 8 >> 1];
    HEAP32[$5_1 + 20 >> 2] = HEAP16[$4_1 + 10 >> 1];
    HEAP32[$5_1 + 16 >> 2] = $3;
    $40($2_1, 19228, $5_1 + 16 | 0);
    HEAP32[$5_1 >> 2] = HEAPU8[$4_1 + 12 | 0];
    $40($2_1, 19203, $5_1);
    $39($2_1, 19353, 0);
    $3 = HEAP32[$4_1 - 4 >> 2] + $4_1 | 0;
    $4_1 = ($3 | 0) != ((HEAP32[$0_1 + 12164 >> 2] + HEAP32[$0_1 + 12156 >> 2] | 0) + 4 | 0) ? $3 : 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 - -64 | 0;
 }
 
 function $107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $1_1 = HEAP32[$0_1 + 12164 >> 2];
  if ($1_1) {
   $6_1 = HEAP32[18392];
   $1_1 = $1_1 + 4 | 0;
   while (1) {
    $3 = $1_1;
    if (HEAPU8[$1_1 + 13 | 0]) {
     $4_1 = HEAP32[$3 >> 2];
     $7_1 = HEAP32[$6_1 + 7064 >> 2];
     $2_1 = $7_1;
     $8 = HEAP32[$6_1 + 7056 >> 2];
     $1_1 = $8;
     if ($1_1) {
      while (1) {
       $5_1 = $1_1 >>> 1 | 0;
       $9 = ($5_1 << 3) + $2_1 | 0;
       $10_1 = HEAPU32[$9 >> 2] < $4_1 >>> 0;
       $2_1 = $10_1 ? $9 + 8 | 0 : $2_1;
       $1_1 = $10_1 ? $1_1 + ($5_1 ^ -1) | 0 : $5_1;
       if ($1_1) {
        continue
       }
       break;
      }
     }
     $1_1 = 0;
     label$6 : {
      if (($2_1 | 0) == (($8 << 3) + $7_1 | 0)) {
       break label$6
      }
      $1_1 = 0;
      if (HEAP32[$2_1 >> 2] != ($4_1 | 0)) {
       break label$6
      }
      $1_1 = HEAP32[$2_1 + 4 >> 2];
     }
     if ($1_1) {
      $2_1 = HEAP16[$3 + 6 >> 1];
      HEAPF32[$1_1 + 12 >> 2] = HEAP16[$3 + 4 >> 1];
      HEAPF32[$1_1 + 16 >> 2] = $2_1 | 0;
      $2_1 = HEAP16[$3 + 8 >> 1];
      label$9 : {
       if (($2_1 | 0) <= 0) {
        break label$9
       }
       $4_1 = HEAP16[$3 + 10 >> 1];
       if (($4_1 | 0) <= 0) {
        break label$9
       }
       $11_1 = Math_fround($4_1 | 0);
       HEAPF32[$1_1 + 32 >> 2] = $11_1;
       $12_1 = Math_fround($2_1 | 0);
       HEAPF32[$1_1 + 28 >> 2] = $12_1;
       HEAPF32[$1_1 + 24 >> 2] = $11_1;
       HEAPF32[$1_1 + 20 >> 2] = $12_1;
      }
      HEAP8[$1_1 + 141 | 0] = HEAPU8[$3 + 12 | 0];
     }
     HEAP8[$3 + 13 | 0] = 0;
    }
    $1_1 = HEAP32[$3 - 4 >> 2] + $3 | 0;
    $1_1 = ($1_1 | 0) != ((HEAP32[$0_1 + 12164 >> 2] + HEAP32[$0_1 + 12156 >> 2] | 0) + 4 | 0) ? $1_1 : 0;
    if ($1_1) {
     continue
    }
    break;
   };
  }
 }
 
 function $108($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $0_1 = global$0 + -64 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 32 >> 2] = $0_1 + 60;
  HEAP32[$0_1 + 36 >> 2] = $0_1 + 56;
  label$1 : {
   if (($1690($3, 8575, $0_1 + 32 | 0) | 0) == 2) {
    HEAP32[$2_1 + 4 >> 2] = HEAPU16[$0_1 + 60 >> 1] | HEAP32[$0_1 + 56 >> 2] << 16;
    break label$1;
   }
   HEAP32[$0_1 + 20 >> 2] = $0_1 + 56;
   HEAP32[$0_1 + 16 >> 2] = $0_1 + 60;
   if (($1690($3, 8585, $0_1 + 16 | 0) | 0) == 2) {
    HEAP32[$2_1 + 8 >> 2] = HEAPU16[$0_1 + 60 >> 1] | HEAP32[$0_1 + 56 >> 2] << 16;
    break label$1;
   }
   HEAP32[$0_1 >> 2] = $0_1 + 52;
   if (($1690($3, 12977, $0_1) | 0) != 1) {
    break label$1
   }
   HEAP8[$2_1 + 12 | 0] = HEAP32[$0_1 + 52 >> 2] != 0;
  }
  global$0 = $0_1 - -64 | 0;
 }
 
 function $109($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = $2_1;
  $0_1 = -1;
  while (1) {
   $3 = $1_1;
   $1_1 = $1_1 + 1 | 0;
   $4_1 = HEAPU8[$3 | 0];
   if ($4_1) {
    if (!(($4_1 | 0) != 35 | HEAPU8[$1_1 | 0] != 35)) {
     $0_1 = HEAPU8[$3 + 2 | 0] == 35 ? -1 : $0_1
    }
    $0_1 = HEAP32[(($4_1 ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
   }
   if ($4_1) {
    continue
   }
   break;
  };
  $4_1 = HEAP32[18392];
  $3 = HEAP32[$4_1 + 12164 >> 2];
  $5_1 = $3 + 4 | 0;
  $1_1 = $3 ? $5_1 : 0;
  label$7 : {
   if (!$3) {
    break label$7
   }
   $3 = $0_1 ^ -1;
   while (1) {
    if (($3 | 0) == HEAP32[$1_1 >> 2]) {
     break label$7
    }
    $0_1 = $1_1 + HEAP32[$1_1 - 4 >> 2] | 0;
    $6_1 = HEAP32[$4_1 + 12156 >> 2] + $5_1 | 0;
    $1_1 = ($6_1 | 0) != ($0_1 | 0) ? $0_1 : 0;
    if (($0_1 | 0) != ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (!$1_1) {
   $1_1 = $156($2_1)
  }
  $0_1 = $1_1 + 6 | 0;
  HEAP16[$0_1 >> 1] = 0;
  HEAP16[$0_1 + 2 >> 1] = 0;
  HEAP16[$0_1 + 4 >> 1] = 0;
  HEAP16[$0_1 + 6 >> 1] = 0;
  $0_1 = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$1_1 + 13 | 0] = 1;
  HEAP32[$1_1 >> 2] = $0_1;
  return $1_1 | 0;
 }
 
 function $110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[$0_1 + 7008 >> 2];
  if ($2_1) {
   $3 = HEAP32[$0_1 + 7016 >> 2];
   $1_1 = 0;
   while (1) {
    HEAP32[HEAP32[($1_1 << 2) + $3 >> 2] + 576 >> 2] = -1;
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0_1 + 12164 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 12156 >> 2] = 0;
   HEAP32[$0_1 + 12160 >> 2] = 0;
   $2_1 = HEAP32[18392];
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
   HEAP32[$0_1 + 12164 >> 2] = 0;
  }
 }
 
 function $114($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[18392];
  HEAP32[$2_1 + 12128 >> 2] = 0;
  $1_1 = HEAP32[$2_1 + 12136 >> 2];
  label$1 : {
   if (($1_1 | 0) >= 0) {
    break label$1
   }
   $3 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($3 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   if ($2_1) {
    $4_1 = $2_1 + 876 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
   }
   $4_1 = FUNCTION_TABLE[HEAP32[18314]]($1_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$2_1 + 12140 >> 2];
   if ($3) {
    $1602($4_1, $3, HEAP32[$2_1 + 12132 >> 2]);
    $3 = HEAP32[$2_1 + 12140 >> 2];
    label$4 : {
     if (!$3) {
      break label$4
     }
     $5_1 = HEAP32[18392];
     if (!$5_1) {
      break label$4
     }
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$2_1 + 12136 >> 2] = $1_1;
   HEAP32[$2_1 + 12140 >> 2] = $4_1;
  }
  HEAP32[$2_1 + 12132 >> 2] = 0;
  if (!HEAP32[$2_1 + 12136 >> 2]) {
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   }
   $1_1 = FUNCTION_TABLE[HEAP32[18314]](8, HEAP32[18394]) | 0;
   $4_1 = HEAP32[$2_1 + 12140 >> 2];
   if ($4_1) {
    $1602($1_1, $4_1, HEAP32[$2_1 + 12132 >> 2]);
    $4_1 = HEAP32[$2_1 + 12140 >> 2];
    label$8 : {
     if (!$4_1) {
      break label$8
     }
     $3 = HEAP32[18392];
     if (!$3) {
      break label$8
     }
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
   }
   HEAP32[$2_1 + 12136 >> 2] = 8;
   HEAP32[$2_1 + 12140 >> 2] = $1_1;
  }
  $4_1 = $2_1 + 12132 | 0;
  HEAP8[HEAP32[$2_1 + 12140 >> 2] + HEAP32[$2_1 + 12132 >> 2] | 0] = 0;
  HEAP32[$2_1 + 12132 >> 2] = HEAP32[$2_1 + 12132 >> 2] + 1;
  if (HEAP32[$2_1 + 12144 >> 2] > 0) {
   $1_1 = 0;
   while (1) {
    $3 = HEAP32[$2_1 + 12152 >> 2] + Math_imul($1_1, 36) | 0;
    FUNCTION_TABLE[HEAP32[$3 + 28 >> 2]]($2_1, $3, $4_1);
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < HEAP32[$2_1 + 12144 >> 2]) {
     continue
    }
    break;
   };
  }
  if ($0_1) {
   $3 = $0_1;
   $0_1 = HEAP32[$4_1 >> 2];
   $1_1 = $0_1 - 1 | 0;
   HEAP32[$3 >> 2] = $0_1 >>> 0 >= $1_1 >>> 0 ? $1_1 : 0;
  }
  $0_1 = HEAP32[$2_1 + 12140 >> 2];
  return $0_1 ? $0_1 : 73572;
 }
 
 function $116($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 12 >> 2] > 0) {
   while (1) {
    $1_1 = HEAP32[(HEAP32[$0_1 + 20 >> 2] + ($2_1 << 3) | 0) + 4 >> 2];
    label$3 : {
     if (($1_1 | 0) == -1) {
      break label$3
     }
     $1_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul($1_1, 144) | 0;
     $3 = HEAP32[$1_1 + 140 >> 2];
     if ($3) {
      $4_1 = HEAP32[18392];
      if ($4_1) {
       $4_1 = $4_1 + 876 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
     }
     $1_1 = HEAP32[$1_1 + 8 >> 2];
     if (!$1_1) {
      break label$3
     }
     $3 = HEAP32[18392];
     if ($3) {
      $3 = $3 + 876 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < HEAP32[$0_1 + 12 >> 2]) {
     continue
    }
    break;
   }
  }
  $2_1 = HEAP32[$0_1 + 20 >> 2];
  if ($2_1) {
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 + 16 >> 2] = 0;
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   HEAP32[$0_1 + 20 >> 2] = 0;
  }
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  if ($2_1) {
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   HEAP32[$0_1 + 8 >> 2] = 0;
  }
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
 }
 
 function $117($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 12 >> 2] > 0) {
   while (1) {
    $1_1 = HEAP32[(HEAP32[$0_1 + 20 >> 2] + ($4_1 << 3) | 0) + 4 >> 2];
    label$3 : {
     if (($1_1 | 0) == -1) {
      break label$3
     }
     $1_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul($1_1, 456) | 0;
     $2_1 = HEAP32[$1_1 + 8 >> 2];
     label$4 : {
      if (!$2_1) {
       break label$4
      }
      $3 = HEAP32[18392];
      if (!$3) {
       break label$4
      }
      $3 = $3 + 876 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     $2_1 = HEAP32[$1_1 + 400 >> 2];
     if ($2_1) {
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     }
     $1_1 = HEAP32[$1_1 + 372 >> 2];
     if (!$1_1) {
      break label$3
     }
     $2_1 = HEAP32[18392];
     if ($2_1) {
      $2_1 = $2_1 + 876 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < HEAP32[$0_1 + 12 >> 2]) {
     continue
    }
    break;
   }
  }
  $4_1 = HEAP32[$0_1 + 20 >> 2];
  if ($4_1) {
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 + 16 >> 2] = 0;
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
   HEAP32[$0_1 + 20 >> 2] = 0;
  }
  $4_1 = HEAP32[$0_1 + 8 >> 2];
  if ($4_1) {
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
   HEAP32[$0_1 + 8 >> 2] = 0;
  }
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
 }
 
 function $118() {
  return HEAP32[18392] + 8 | 0;
 }
 
 function $120() {
  return +HEAPF64[HEAP32[18392] + 6976 >> 3];
 }
 
 function $121() {
  return HEAP32[HEAP32[18392] + 6984 >> 2];
 }
 
 function $124($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $4_1 = HEAP32[18392];
  $125($0_1);
  $1_1 = HEAP32[18392];
  $3 = HEAP32[$1_1 + 7136 >> 2];
  $2_1 = HEAP32[$0_1 + 80 >> 2];
  HEAP8[$1_1 + 7148 | 0] = ($2_1 | 0) != ($3 | 0);
  label$1 : {
   if (($2_1 | 0) == ($3 | 0)) {
    break label$1
   }
   HEAP32[$1_1 + 7192 >> 2] = -1;
   HEAP8[$1_1 + 7151 | 0] = 0;
   HEAP8[$1_1 + 7152 | 0] = 0;
   HEAP32[$1_1 + 7144 >> 2] = 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[$1_1 + 7212 >> 2] = 0;
   HEAP32[$1_1 + 7208 >> 2] = $2_1;
  }
  HEAP32[$1_1 + 7184 >> 2] = $0_1;
  HEAP8[$1_1 + 7149 | 0] = 0;
  HEAP8[$1_1 + 7150 | 0] = 0;
  HEAP32[$1_1 + 7136 >> 2] = $2_1;
  HEAP8[$1_1 + 7153 | 0] = 0;
  if ($2_1) {
   HEAP32[$1_1 + 7140 >> 2] = $2_1;
   $3 = 4;
   label$3 : {
    if (HEAP32[$1_1 + 7520 >> 2] == ($2_1 | 0)) {
     break label$3
    }
    $3 = 4;
    if (($2_1 | 0) == HEAP32[$1_1 + 7532 >> 2]) {
     break label$3
    }
    $3 = ($2_1 | 0) == HEAP32[$1_1 + 7540 >> 2] ? 4 : 1;
   }
   HEAP32[$1_1 + 7188 >> 2] = $3;
  }
  HEAP32[$1_1 + 7168 >> 2] = 0;
  HEAP32[$1_1 + 7172 >> 2] = 0;
  HEAP32[$1_1 + 7156 >> 2] = 0;
  HEAP32[$1_1 + 7160 >> 2] = 0;
  HEAP8[$1_1 + 7154 | 0] = 0;
  HEAP8[$4_1 + 7570 | 0] = 1;
  $2_1 = HEAP32[$0_1 + 736 >> 2];
  $5_1 = HEAPF32[$2_1 + 16 >> 2];
  HEAPF32[$4_1 + 7176 >> 2] = HEAPF32[$4_1 + 908 >> 2] - HEAPF32[$2_1 + 12 >> 2];
  HEAP8[$4_1 + 7150 | 0] = 1;
  HEAPF32[$4_1 + 7180 >> 2] = HEAPF32[$4_1 + 912 >> 2] - $5_1;
  HEAP32[$1_1 + 7168 >> 2] = -1;
  HEAP32[$1_1 + 7172 >> 2] = -1;
  HEAP32[$1_1 + 7156 >> 2] = -1;
  HEAP32[$1_1 + 7160 >> 2] = -1;
  HEAP16[$1_1 + 7596 >> 1] = 0;
  HEAP8[$1_1 + 7572 | 0] = HEAPU8[$1_1 + 7573 | 0];
  if (!(HEAPU8[$0_1 + 8 | 0] & 4 | HEAPU8[HEAP32[$0_1 + 736 >> 2] + 8 | 0] & 4)) {
   HEAP32[$4_1 + 7092 >> 2] = $0_1
  }
 }
 
 function $125($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $2_1 = HEAP32[18392];
  if (($0_1 | 0) != HEAP32[$2_1 + 7508 >> 2]) {
   HEAP32[$2_1 + 7508 >> 2] = $0_1;
   if ($0_1) {
    if (HEAPU8[$2_1 + 7571 | 0]) {
     HEAP8[$2_1 + 7569 | 0] = 1
    }
    $1_1 = HEAP32[$0_1 + 756 >> 2];
   }
   HEAP8[$2_1 + 7568 | 0] = 0;
   HEAP32[$2_1 + 7516 >> 2] = 0;
   HEAP32[$2_1 + 7512 >> 2] = $1_1;
   HEAP32[$2_1 + 7564 >> 2] = 0;
   HEAP16[$2_1 + 7596 >> 1] = 0;
   HEAP16[$2_1 + 7572 >> 1] = 0;
  }
  $1_1 = 0;
  $4_1 = HEAP32[18392];
  $5_1 = HEAP32[$4_1 + 7468 >> 2];
  label$1 : {
   if (!$5_1) {
    break label$1
   }
   $3 = 0;
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $3 = 0;
    if (($5_1 | 0) <= 0) {
     break label$2
    }
    $8 = HEAP32[$4_1 + 7476 >> 2];
    while (1) {
     $4_1 = $1_1;
     $3 = HEAP32[(Math_imul($1_1, 36) + $8 | 0) + 4 >> 2];
     $7_1 = 4;
     label$5 : {
      if (!$3) {
       break label$5
      }
      $6_1 = 0;
      $7_1 = 4;
      if (HEAP8[$3 + 11 | 0] & 1) {
       break label$5
      }
      while (1) {
       $3 = $1_1;
       $9 = HEAP32[(Math_imul($1_1, 36) + $8 | 0) + 4 >> 2];
       $1_1 = 1;
       label$8 : {
        if (!$9) {
         break label$8
        }
        $1_1 = $0_1;
        if (HEAP32[$1_1 + 736 >> 2] == ($9 | 0)) {
         $6_1 = 1;
         $1_1 = 0;
         break label$8;
        }
        while (1) {
         label$11 : {
          $7_1 = ($1_1 | 0) != ($9 | 0);
          if (!$7_1) {
           $6_1 = 1;
           break label$11;
          }
          $1_1 = HEAP32[$1_1 + 732 >> 2];
          if ($1_1) {
           continue
          }
         }
         break;
        };
        $1_1 = $7_1;
       }
       if ($1_1) {
        $1_1 = $3 + 1 | 0;
        if (($1_1 | 0) < ($5_1 | 0)) {
         continue
        }
       }
       break;
      };
      $7_1 = $6_1 ? 0 : 2;
     }
     if (($7_1 | 0) == 2) {
      $3 = $4_1;
      break label$2;
     }
     $1_1 = $4_1 + 1 | 0;
     if (($1_1 | 0) != ($5_1 | 0)) {
      continue
     }
     break;
    };
    $3 = $5_1;
   }
   $1_1 = $3;
   if (($1_1 | 0) >= ($5_1 | 0)) {
    break label$1
   }
   $132($1_1, 0);
  }
  $3 = $0_1 ? HEAP32[$0_1 + 736 >> 2] : 0;
  $4_1 = $3;
  label$6 : {
   if (!HEAP32[$2_1 + 7136 >> 2]) {
    break label$6
   }
   $1_1 = HEAP32[$2_1 + 7184 >> 2];
   if (HEAPU8[$2_1 + 7150 | 0] | (!$1_1 | HEAP32[$1_1 + 736 >> 2] == ($4_1 | 0))) {
    break label$6
   }
   $1_1 = HEAP32[18392];
   $2_1 = HEAP32[$1_1 + 7136 >> 2];
   HEAP8[$1_1 + 7148 | 0] = ($2_1 | 0) != 0;
   if ($2_1) {
    HEAP32[$1_1 + 7192 >> 2] = -1;
    HEAP8[$1_1 + 7151 | 0] = 0;
    HEAP8[$1_1 + 7152 | 0] = 0;
    HEAP32[$1_1 + 7144 >> 2] = 0;
   }
   HEAP32[$1_1 + 7184 >> 2] = 0;
   HEAP8[$1_1 + 7149 | 0] = 0;
   HEAP8[$1_1 + 7150 | 0] = 0;
   HEAP32[$1_1 + 7136 >> 2] = 0;
   HEAP32[$1_1 + 7168 >> 2] = 0;
   HEAP32[$1_1 + 7172 >> 2] = 0;
   HEAP32[$1_1 + 7156 >> 2] = 0;
   HEAP32[$1_1 + 7160 >> 2] = 0;
   HEAP8[$1_1 + 7153 | 0] = 0;
   HEAP8[$1_1 + 7154 | 0] = 0;
  }
  label$80 : {
   if (!$0_1) {
    break label$80
   }
   $5_1 = HEAP32[18392];
   $2_1 = HEAP32[$5_1 + 7020 >> 2] - 1 | 0;
   if (($4_1 | 0) != HEAP32[HEAP32[$5_1 + 7028 >> 2] + ($2_1 << 2) >> 2]) {
    $1_1 = HEAP16[$4_1 + 156 >> 1];
    if (($2_1 | 0) > ($1_1 | 0)) {
     while (1) {
      $6_1 = HEAP32[$5_1 + 7028 >> 2];
      $8 = $1_1 << 2;
      $1_1 = $1_1 + 1 | 0;
      HEAP32[$6_1 + $8 >> 2] = HEAP32[$6_1 + ($1_1 << 2) >> 2];
      $6_1 = HEAP32[$8 + HEAP32[$5_1 + 7028 >> 2] >> 2];
      HEAP16[$6_1 + 156 >> 1] = HEAPU16[$6_1 + 156 >> 1] - 1;
      if (($1_1 | 0) != ($2_1 | 0)) {
       continue
      }
      break;
     }
    }
    HEAP32[HEAP32[$5_1 + 7028 >> 2] + ($2_1 << 2) >> 2] = $4_1;
    HEAP16[$4_1 + 156 >> 1] = $2_1;
   }
   if ((HEAP32[$3 + 8 >> 2] | HEAP32[$0_1 + 8 >> 2]) & 8192) {
    break label$80
   }
   $4_1 = HEAP32[18392];
   $2_1 = HEAP32[$4_1 + 7008 >> 2];
   $5_1 = HEAP32[$4_1 + 7016 >> 2];
   $0_1 = HEAP32[(($2_1 << 2) + $5_1 | 0) - 4 >> 2];
   if (($0_1 | 0) == ($3 | 0) | HEAP32[$0_1 + 736 >> 2] == ($3 | 0) | ($2_1 | 0) < 2) {
    break label$80
   }
   $1_1 = $2_1 - 2 | 0;
   while (1) {
    $0_1 = $1_1;
    $1_1 = $5_1 + ($1_1 << 2) | 0;
    if (($3 | 0) == HEAP32[$1_1 >> 2]) {
     $1603($1_1, ($5_1 + ($0_1 << 2) | 0) + 4 | 0, $2_1 + ($0_1 ^ -1) << 2);
     HEAP32[(HEAP32[$4_1 + 7016 >> 2] + (HEAP32[$4_1 + 7008 >> 2] << 2) | 0) - 4 >> 2] = $3;
     return;
    }
    $1_1 = $0_1 - 1 | 0;
    if (($0_1 | 0) > 0) {
     continue
    }
    break;
   };
  }
 }
 
 function $128($0_1) {
  $0_1 = $0_1 ? $0_1 : HEAP32[18392] + 228 | 0;
  return HEAPF32[$0_1 >> 2] >= Math_fround(-256.0e3) & HEAPF32[$0_1 + 4 >> 2] >= Math_fround(-256.0e3);
 }
 
 function $132($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $2_1 = HEAP32[18392];
  $5_1 = HEAP32[$2_1 + 7476 >> 2] + Math_imul($0_1, 36) | 0;
  $8 = HEAP32[$5_1 + 4 >> 2];
  $5_1 = HEAP32[$5_1 + 8 >> 2];
  $4_1 = HEAP32[$2_1 + 7472 >> 2];
  label$1 : {
   if (($4_1 | 0) >= ($0_1 | 0)) {
    break label$1
   }
   $3 = $4_1;
   if ($4_1) {
    $6_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $6_1 = 8
   }
   $4_1 = ($0_1 | 0) < ($6_1 | 0) ? $6_1 : $0_1;
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   $6_1 = Math_imul($4_1, 36);
   if ($2_1) {
    $3 = $2_1 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $6_1 = FUNCTION_TABLE[HEAP32[18314]]($6_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$2_1 + 7476 >> 2];
   if ($3) {
    $1602($6_1, $3, Math_imul(HEAP32[$2_1 + 7468 >> 2], 36));
    $3 = HEAP32[$2_1 + 7476 >> 2];
    label$6 : {
     if (!$3) {
      break label$6
     }
     $7_1 = HEAP32[18392];
     if (!$7_1) {
      break label$6
     }
     $7_1 = $7_1 + 876 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$2_1 + 7472 >> 2] = $4_1;
   HEAP32[$2_1 + 7476 >> 2] = $6_1;
  }
  HEAP32[$2_1 + 7468 >> 2] = $0_1;
  if ($1_1) {
   if (!(!$8 | (HEAPU8[$5_1 + 139 | 0] | !$5_1))) {
    $144($8);
    return;
   }
   label$9 : {
    label$10 : {
     if (HEAP32[$2_1 + 7564 >> 2] | !$5_1) {
      break label$10
     }
     $0_1 = HEAP32[$5_1 + 752 >> 2];
     if (!$0_1) {
      break label$10
     }
     if (HEAPU8[$0_1 + 139 | 0]) {
      break label$9
     }
    }
    $0_1 = $5_1;
   }
   $125($0_1);
  }
 }
 
 function $133($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 7480 >> 2];
  if (HEAP32[$1_1 + 7468 >> 2] <= ($2_1 | 0)) {
   $0_1 = 0
  } else {
   $0_1 = HEAP32[HEAP32[$1_1 + 7476 >> 2] + Math_imul($2_1, 36) >> 2] == ($0_1 | 0)
  }
  return $0_1;
 }
 
 function $136() {
  var $0_1 = 0, $1_1 = Math_fround(0), $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19 = Math_fround(0), $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = Math_fround(0), $25_1 = 0.0;
  $23_1 = global$0 - 16 | 0;
  global$0 = $23_1;
  $7_1 = HEAP32[18392];
  $3 = HEAP32[$7_1 + 12180 >> 2];
  if (($3 | 0) > 0) {
   while (1) {
    $4_1 = HEAP32[$7_1 + 12188 >> 2];
    $0_1 = $3;
    $3 = $0_1 - 1 | 0;
    $2_1 = $4_1 + Math_imul($3, 20) | 0;
    if (HEAP32[$2_1 + 4 >> 2] == 7) {
     $1603($2_1, $4_1 + Math_imul($0_1, 20) | 0, Math_imul(HEAP32[$7_1 + 12180 >> 2] - $0_1 | 0, 20));
     HEAP32[$7_1 + 12180 >> 2] = HEAP32[$7_1 + 12180 >> 2] - 1;
    }
    if (($0_1 | 0) > 1) {
     continue
    }
    break;
   }
  }
  if (HEAP32[$7_1 + 12180 >> 2] > 0) {
   $0_1 = 0;
   while (1) {
    $3 = HEAP32[$7_1 + 12188 >> 2] + Math_imul($0_1, 20) | 0;
    if (!HEAP32[$3 + 4 >> 2]) {
     FUNCTION_TABLE[HEAP32[$3 + 12 >> 2]]($7_1, $3)
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$7_1 + 12180 >> 2]) {
     continue
    }
    break;
   };
  }
  $14 = HEAP32[18392];
  if (!(!HEAPU8[$14 + 180 | 0] | HEAPU8[$14 + 12 | 0] & 2)) {
   HEAP8[$14 + 180 | 0] = 0
  }
  if (!HEAPU8[$14 + 12125 | 0]) {
   $0_1 = HEAP32[$14 + 32 >> 2];
   label$9 : {
    if (!$0_1) {
     break label$9
    }
    HEAP32[$23_1 + 8 >> 2] = 0;
    $12_1 = $23_1 + 8 | 0;
    if ($12_1) {
     HEAP32[$12_1 >> 2] = 0
    }
    $15_1 = $1622($0_1, 13530);
    $0_1 = 0;
    __inlined_func$24 : {
     if (!$15_1) {
      break __inlined_func$24
     }
     $3 = $1630($15_1);
     $4_1 = -1;
     label$3 : {
      if (($3 | 0) == -1) {
       break label$3
      }
      $4_1 = -1;
      if ($1627($15_1, 0, 2)) {
       break label$3
      }
      $0_1 = $1630($15_1);
      $4_1 = -1;
      if (($0_1 | 0) == -1) {
       break label$3
      }
      $4_1 = $1627($15_1, $3, 0) ? -1 : $0_1;
     }
     if (($4_1 | 0) == -1) {
      $1609($15_1);
      $0_1 = 0;
      break __inlined_func$24;
     }
     $0_1 = HEAP32[18392];
     if ($0_1) {
      $0_1 = $0_1 + 876 | 0;
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
     }
     $0_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
     if (!$0_1) {
      $1609($15_1);
      $0_1 = 0;
      break __inlined_func$24;
     }
     $2_1 = $0_1;
     $3 = HEAP32[$15_1 + 72 >> 2];
     HEAP32[$15_1 + 72 >> 2] = $3 - 1 | $3;
     $9 = HEAP32[$15_1 + 4 >> 2];
     $3 = HEAP32[$15_1 + 8 >> 2];
     if (($9 | 0) == ($3 | 0)) {
      $3 = $4_1
     } else {
      $3 = $3 - $9 | 0;
      $3 = $3 >>> 0 < $4_1 >>> 0 ? $3 : $4_1;
      $1602($2_1, $9, $3);
      HEAP32[$15_1 + 4 >> 2] = $3 + HEAP32[$15_1 + 4 >> 2];
      $2_1 = $3 + $2_1 | 0;
      $3 = $4_1 - $3 | 0;
     }
     __inlined_func$1624 : {
      if ($3) {
       while (1) {
        label$6 : {
         if (!$1623($15_1)) {
          $9 = FUNCTION_TABLE[HEAP32[$15_1 + 32 >> 2]]($15_1, $2_1, $3) | 0;
          if ($9) {
           break label$6
          }
         }
         $2_1 = $4_1 - $3 | 0;
         break __inlined_func$1624;
        }
        $2_1 = $2_1 + $9 | 0;
        $3 = $3 - $9 | 0;
        if ($3) {
         continue
        }
        break;
       }
      }
      $2_1 = $4_1;
     }
     if (($2_1 | 0) != ($4_1 | 0)) {
      $1609($15_1);
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($0_1, HEAP32[18394]);
      $0_1 = 0;
      break __inlined_func$24;
     }
     $1609($15_1);
     if ($12_1) {
      HEAP32[$12_1 >> 2] = $4_1
     }
    }
    $3 = $0_1;
    if (!$3) {
     break label$9
    }
    $137($3, HEAP32[$23_1 + 8 >> 2]);
    $0_1 = HEAP32[18392];
    if ($0_1) {
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP8[$14 + 12125 | 0] = 1;
  }
  $1_1 = HEAPF32[$14 + 12128 >> 2];
  label$11 : {
   if (!($1_1 > Math_fround(0.0))) {
    break label$11
   }
   $1_1 = Math_fround($1_1 - HEAPF32[$14 + 24 >> 2]);
   HEAPF32[$14 + 12128 >> 2] = $1_1;
   if (!($1_1 <= Math_fround(0.0))) {
    break label$11
   }
   $3 = HEAP32[$14 + 32 >> 2];
   label$12 : {
    if ($3) {
     HEAP32[HEAP32[18392] + 12128 >> 2] = 0;
     HEAP32[$23_1 + 8 >> 2] = 0;
     $0_1 = $114($23_1 + 8 | 0);
     $3 = $1622($3, 2145);
     if (!$3) {
      break label$12
     }
     $1633($0_1, HEAP32[$23_1 + 8 >> 2], $3);
     $1609($3);
     break label$12;
    }
    HEAP8[$14 + 852 | 0] = 1;
   }
   HEAP32[$14 + 12128 >> 2] = 0;
  }
  HEAP8[$7_1 + 6996 | 0] = 1;
  HEAP16[$7_1 + 12078 >> 1] = 0;
  HEAP32[$7_1 + 7068 >> 2] = 0;
  HEAP32[$7_1 + 6984 >> 2] = HEAP32[$7_1 + 6984 >> 2] + 1;
  HEAPF64[$7_1 + 6976 >> 3] = HEAPF64[$7_1 + 6976 >> 3] + +HEAPF32[$7_1 + 24 >> 2];
  $3 = HEAP32[$7_1 + 12100 >> 2];
  label$14 : {
   if (($3 | 0) >= 0) {
    break label$14
   }
   $0_1 = $3 + (($3 | 0) / 2 | 0) | 0;
   $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$14
   }
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1 << 2, HEAP32[18394]) | 0;
   $0_1 = HEAP32[$7_1 + 12104 >> 2];
   if ($0_1) {
    $1602($2_1, $0_1, HEAP32[$7_1 + 12096 >> 2] << 2);
    $3 = HEAP32[$7_1 + 12104 >> 2];
    label$17 : {
     if (!$3) {
      break label$17
     }
     $0_1 = HEAP32[18392];
     if (!$0_1) {
      break label$17
     }
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$7_1 + 12100 >> 2] = $4_1;
   HEAP32[$7_1 + 12104 >> 2] = $2_1;
  }
  HEAP32[$7_1 + 12096 >> 2] = 0;
  $1_1 = HEAPF32[$7_1 + 24 >> 2];
  $3 = HEAP32[$7_1 + 12776 >> 2];
  $0_1 = (($3 << 2) + $7_1 | 0) + 12296 | 0;
  HEAPF32[$7_1 + 12784 >> 2] = HEAPF32[$7_1 + 12784 >> 2] + Math_fround($1_1 - HEAPF32[$0_1 >> 2]);
  HEAPF32[$0_1 >> 2] = $1_1;
  HEAP32[$7_1 + 12776 >> 2] = ($3 + 1 | 0) % 120;
  $0_1 = HEAP32[$7_1 + 12780 >> 2];
  $0_1 = (($0_1 | 0) >= 119 ? 119 : $0_1) + 1 | 0;
  HEAP32[$7_1 + 12780 >> 2] = $0_1;
  $2_1 = $7_1 + 856 | 0;
  $1_1 = HEAPF32[$7_1 + 12784 >> 2];
  if ($1_1 > Math_fround(0.0)) {
   $1_1 = Math_fround(Math_fround(1.0) / Math_fround($1_1 / Math_fround($0_1 | 0)))
  } else {
   $1_1 = Math_fround(3402823466385288598117041.0e14)
  }
  HEAPF32[$2_1 >> 2] = $1_1;
  $9 = HEAP32[18392];
  $2_1 = HEAP32[HEAP32[$9 + 7504 >> 2] >> 2];
  HEAP32[$2_1 >> 2] = 5;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 8 >> 2] = 0;
  $3 = $9 + 16 | 0;
  $0_1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$2_1 + 16 >> 2] = $0_1;
  if (HEAP32[$9 + 7496 >> 2] > 0) {
   $0_1 = 0;
   while (1) {
    $4_1 = HEAP32[HEAP32[$9 + 7504 >> 2] + ($0_1 << 2) >> 2];
    $3 = HEAP32[$4_1 + 140 >> 2];
    HEAP32[$4_1 + 120 >> 2] = HEAP32[$4_1 + 136 >> 2];
    HEAP32[$4_1 + 124 >> 2] = $3;
    $2_1 = $4_1 + 144 | 0;
    $3 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 + 128 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 132 >> 2] = $3;
    HEAP32[$4_1 + 136 >> 2] = 0;
    HEAP32[$4_1 + 140 >> 2] = 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $1_1 = HEAPF32[$4_1 + 124 >> 2];
    HEAPF32[$4_1 + 24 >> 2] = HEAPF32[$4_1 + 8 >> 2] + $1_1;
    $6_1 = HEAPF32[$4_1 + 120 >> 2];
    HEAPF32[$4_1 + 20 >> 2] = HEAPF32[$4_1 + 4 >> 2] + $6_1;
    $5_1 = HEAPF32[$4_1 + 128 >> 2];
    $8 = HEAPF32[$4_1 + 12 >> 2];
    $1_1 = Math_fround(Math_fround(HEAPF32[$4_1 + 16 >> 2] - $1_1) + HEAPF32[$4_1 + 132 >> 2]);
    HEAPF32[$4_1 + 32 >> 2] = $1_1 <= Math_fround(0.0) ? Math_fround(0.0) : $1_1;
    $1_1 = Math_fround($5_1 + Math_fround($8 - $6_1));
    HEAPF32[$4_1 + 28 >> 2] = $1_1 <= Math_fround(0.0) ? Math_fround(0.0) : $1_1;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$9 + 7496 >> 2]) {
     continue
    }
    break;
   };
  }
  HEAP8[HEAP32[$7_1 + 152 >> 2] + 16 | 0] = 1;
  $0_1 = HEAP32[$9 + 164 >> 2];
  if (!$0_1) {
   $0_1 = HEAP32[HEAP32[HEAP32[$9 + 152 >> 2] + 60 >> 2] >> 2]
  }
  HEAP32[$9 + 6464 >> 2] = $0_1;
  $1_1 = Math_fround(Math_fround(HEAPF32[$9 + 156 >> 2] * HEAPF32[$0_1 + 16 >> 2]) * HEAPF32[$0_1 + 68 >> 2]);
  $1_1 = $1_1 <= Math_fround(1.0) ? Math_fround(1.0) : $1_1;
  HEAPF32[$9 + 6472 >> 2] = $1_1;
  $3 = HEAP32[$9 + 7080 >> 2];
  label$22 : {
   if (!$3) {
    break label$22
   }
   $19 = Math_fround($1_1 * HEAPF32[$3 + 572 >> 2]);
   $3 = HEAP32[$3 + 728 >> 2];
   if (!$3) {
    break label$22
   }
   $19 = Math_fround($19 * HEAPF32[$3 + 572 >> 2]);
  }
  HEAPF32[$9 + 6468 >> 2] = $19;
  $4_1 = HEAP32[$0_1 + 48 >> 2];
  $2_1 = HEAP32[$4_1 + 44 >> 2];
  $3 = HEAP32[$4_1 + 48 >> 2];
  HEAP32[$9 + 6972 >> 2] = $4_1 + 88;
  HEAP32[$9 + 6476 >> 2] = $2_1;
  HEAP32[$9 + 6480 >> 2] = $3;
  HEAPF32[$9 + 6488 >> 2] = $19;
  HEAP32[$9 + 6484 >> 2] = $0_1;
  $2_1 = HEAP32[$7_1 + 7496 >> 2];
  label$25 : {
   if (($2_1 | 0) <= 0) {
    $19 = Math_fround(3402823466385288598117041.0e14);
    $8 = Math_fround(3402823466385288598117041.0e14);
    $6_1 = Math_fround(-3402823466385288598117041.0e14);
    $17_1 = Math_fround(-3402823466385288598117041.0e14);
    break label$25;
   }
   $3 = HEAP32[$7_1 + 7504 >> 2];
   $0_1 = 0;
   $17_1 = Math_fround(-3402823466385288598117041.0e14);
   $6_1 = Math_fround(-3402823466385288598117041.0e14);
   $8 = Math_fround(3402823466385288598117041.0e14);
   $16_1 = Math_fround(3402823466385288598117041.0e14);
   while (1) {
    $4_1 = HEAP32[$3 + ($0_1 << 2) >> 2];
    $1_1 = HEAPF32[$4_1 + 4 >> 2];
    $16_1 = $1_1 < $16_1 ? $1_1 : $16_1;
    $19 = $16_1;
    $5_1 = HEAPF32[$4_1 + 8 >> 2];
    $8 = $5_1 < $8 ? $5_1 : $8;
    $1_1 = Math_fround($1_1 + HEAPF32[$4_1 + 12 >> 2]);
    $6_1 = $1_1 > $6_1 ? $1_1 : $6_1;
    $1_1 = Math_fround($5_1 + HEAPF32[$4_1 + 16 >> 2]);
    $17_1 = $1_1 > $17_1 ? $1_1 : $17_1;
    $0_1 = $0_1 + 1 | 0;
    if (($2_1 | 0) != ($0_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAPF32[$7_1 + 6512 >> 2] = $17_1;
  HEAPF32[$7_1 + 6508 >> 2] = $6_1;
  HEAPF32[$7_1 + 6504 >> 2] = $8;
  HEAPF32[$7_1 + 6500 >> 2] = $19;
  HEAPF32[$7_1 + 6492 >> 2] = HEAPF32[$7_1 + 5608 >> 2];
  $0_1 = 0;
  $8 = HEAPF32[$7_1 + 5612 >> 2];
  $2_1 = $7_1 + 6476 | 0;
  if ($8 != HEAPF32[$2_1 + 20 >> 2]) {
   HEAPF32[$2_1 + 20 >> 2] = $8;
   while (1) {
    $4_1 = ($0_1 + $2_1 | 0) + 432 | 0;
    if ($0_1) {
     $1_1 = Math_fround($0_1 | 0);
     $1_1 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / $1590(Math_fround(Math_fround(1.0) - Math_fround(($1_1 > $8 ? $8 : $1_1) / $1_1))))));
     label$4 : {
      if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
       $3 = ~~$1_1;
       break label$4;
      }
      $3 = -2147483648;
     }
     $3 = ($3 + 1 | 0) / 2 << 1;
     $3 = ($3 | 0) >= 512 ? 512 : $3;
     $3 = ($3 | 0) <= 4 ? 4 : $3;
    } else {
     $3 = 0
    }
    HEAP8[$4_1 | 0] = $3;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != 64) {
     continue
    }
    break;
   };
   HEAPF32[$2_1 + 428 >> 2] = $8 / Math_fround(2.1410584449768066e-03);
  }
  $0_1 = HEAPU8[$7_1 + 5604 | 0];
  HEAP32[$7_1 + 6516 >> 2] = $0_1;
  if (!(!HEAPU8[$7_1 + 5605 | 0] | HEAPU8[HEAP32[HEAP32[$7_1 + 6464 >> 2] + 48 >> 2]] & 4)) {
   HEAP32[$7_1 + 6516 >> 2] = $0_1 | 2
  }
  if (HEAPU8[$7_1 + 5606 | 0]) {
   HEAP32[$7_1 + 6516 >> 2] = HEAP32[$7_1 + 6516 >> 2] | 4
  }
  if (HEAPU8[$7_1 + 12 | 0] & 8) {
   HEAP32[$7_1 + 6516 >> 2] = HEAP32[$7_1 + 6516 >> 2] | 8
  }
  if (HEAP32[$7_1 + 7496 >> 2] > 0) {
   $0_1 = 0;
   while (1) {
    $2_1 = HEAP32[HEAP32[$7_1 + 7504 >> 2] + ($0_1 << 2) >> 2];
    HEAP32[$2_1 + 52 >> 2] = 0;
    HEAP32[$2_1 + 56 >> 2] = 0;
    HEAP32[$2_1 + 92 >> 2] = 0;
    $3 = $2_1 + 84 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $2_1 + 76 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $2_1 + 68 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $3 = $2_1 + 60 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$7_1 + 7496 >> 2]) {
     continue
    }
    break;
   };
  }
  label$33 : {
   if (!HEAPU8[$7_1 + 7876 | 0]) {
    break label$33
   }
   $3 = HEAP32[$7_1 + 7900 >> 2];
   if (($3 | 0) != HEAP32[$7_1 + 7136 >> 2]) {
    break label$33
   }
   $0_1 = HEAP32[18392];
   if (HEAP32[$0_1 + 7136 >> 2] == ($3 | 0)) {
    HEAP32[$0_1 + 7140 >> 2] = $3
   }
   if (($3 | 0) != HEAP32[$0_1 + 7196 >> 2]) {
    break label$33
   }
   HEAP8[$0_1 + 7200 | 0] = 1;
  }
  label$35 : {
   label$36 : {
    if (!HEAP32[$7_1 + 7120 >> 2]) {
     HEAP32[$7_1 + 7128 >> 2] = 0;
     break label$36;
    }
    $0_1 = HEAP32[$7_1 + 7116 >> 2];
    if (!$0_1 | ($0_1 | 0) != HEAP32[$7_1 + 7136 >> 2]) {
     break label$35
    }
   }
   HEAP32[$7_1 + 7132 >> 2] = 0;
  }
  $0_1 = HEAP32[$7_1 + 7116 >> 2];
  label$38 : {
   if (!$0_1) {
    break label$38
   }
   HEAPF32[$7_1 + 7128 >> 2] = HEAPF32[$7_1 + 24 >> 2] + HEAPF32[$7_1 + 7128 >> 2];
   if (($0_1 | 0) == HEAP32[$7_1 + 7136 >> 2]) {
    break label$38
   }
   HEAPF32[$7_1 + 7132 >> 2] = HEAPF32[$7_1 + 24 >> 2] + HEAPF32[$7_1 + 7132 >> 2];
  }
  HEAP32[$7_1 + 7120 >> 2] = $0_1;
  HEAP8[$7_1 + 7127 | 0] = 0;
  HEAP32[$7_1 + 7116 >> 2] = 0;
  HEAP8[$7_1 + 7126 | 0] = HEAPU8[$7_1 + 7125 | 0];
  HEAP16[$7_1 + 7124 >> 1] = 0;
  $0_1 = HEAP32[$7_1 + 7136 >> 2];
  if (!(($0_1 | 0) == HEAP32[$7_1 + 7140 >> 2] | !$0_1 | ($0_1 | 0) != HEAP32[$7_1 + 7196 >> 2])) {
   $3 = HEAP32[18392];
   $0_1 = HEAP32[$3 + 7136 >> 2];
   HEAP8[$3 + 7148 | 0] = ($0_1 | 0) != 0;
   if ($0_1) {
    HEAP32[$3 + 7192 >> 2] = -1;
    HEAP8[$3 + 7151 | 0] = 0;
    HEAP8[$3 + 7152 | 0] = 0;
    HEAP32[$3 + 7144 >> 2] = 0;
   }
   HEAP32[$3 + 7184 >> 2] = 0;
   HEAP8[$3 + 7149 | 0] = 0;
   HEAP8[$3 + 7150 | 0] = 0;
   HEAP32[$3 + 7136 >> 2] = 0;
   HEAP32[$3 + 7168 >> 2] = 0;
   HEAP32[$3 + 7172 >> 2] = 0;
   HEAP32[$3 + 7156 >> 2] = 0;
   HEAP32[$3 + 7160 >> 2] = 0;
   HEAP8[$3 + 7153 | 0] = 0;
   HEAP8[$3 + 7154 | 0] = 0;
  }
  $3 = HEAP32[$7_1 + 7136 >> 2];
  if ($3) {
   HEAPF32[$7_1 + 7144 >> 2] = HEAPF32[$7_1 + 24 >> 2] + HEAPF32[$7_1 + 7144 >> 2]
  }
  HEAP32[$7_1 + 7196 >> 2] = $3;
  HEAP8[$7_1 + 7200 | 0] = 0;
  HEAP8[$7_1 + 7153 | 0] = 0;
  HEAP32[$7_1 + 7140 >> 2] = 0;
  HEAP8[$7_1 + 7148 | 0] = 0;
  HEAP32[$7_1 + 7204 >> 2] = HEAP32[$7_1 + 7184 >> 2];
  HEAP8[$7_1 + 7201 | 0] = HEAPU8[$7_1 + 7152 | 0];
  HEAPF32[$7_1 + 7212 >> 2] = HEAPF32[$7_1 + 24 >> 2] + HEAPF32[$7_1 + 7212 >> 2];
  $0_1 = HEAP32[$7_1 + 11968 >> 2];
  if (!(!$0_1 | ($0_1 | 0) == ($3 | 0))) {
   HEAP32[$7_1 + 11968 >> 2] = 0
  }
  if (!$3) {
   HEAP32[$7_1 + 7168 >> 2] = 0;
   HEAP32[$7_1 + 7172 >> 2] = 0;
   HEAP32[$7_1 + 7156 >> 2] = 0;
   HEAP32[$7_1 + 7160 >> 2] = 0;
  }
  HEAP32[$7_1 + 7988 >> 2] = 0;
  HEAP8[$7_1 + 7877 | 0] = 0;
  HEAP8[$7_1 + 7878 | 0] = 0;
  HEAP32[$7_1 + 7980 >> 2] = HEAP32[$7_1 + 7976 >> 2];
  HEAP32[$7_1 + 7972 >> 2] = 2139095039;
  HEAP32[$7_1 + 7976 >> 2] = 0;
  if (HEAPU8[$7_1 + 5400 | 0]) {
   $1604($7_1 + 256 | 0, 0, 512);
   $0_1 = 0;
   while (1) {
    $3 = ($0_1 << 2) + $7_1 | 0;
    HEAP32[$3 + 1140 >> 2] = -1082130432;
    HEAP32[$3 + 3188 >> 2] = -1082130432;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != 512) {
     continue
    }
    break;
   };
   $0_1 = $7_1 + 892 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$7_1 + 252 >> 2] = 0;
   $0_1 = 0;
   while (1) {
    $3 = ($0_1 << 2) + $7_1 | 0;
    HEAP32[$3 + 5236 >> 2] = -1082130432;
    HEAP32[$3 + 5316 >> 2] = -1082130432;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != 20) {
     continue
    }
    break;
   };
   HEAP8[$7_1 + 5400 | 0] = 0;
  }
  $11_1 = HEAP32[18392];
  $0_1 = HEAPU8[$11_1 + 252 | 0];
  $0_1 = HEAPU8[$11_1 + 253 | 0] ? $0_1 | 2 : $0_1;
  $0_1 = HEAPU8[$11_1 + 254 | 0] ? $0_1 | 4 : $0_1;
  HEAP32[$7_1 + 892 >> 2] = HEAPU8[$11_1 + 255 | 0] ? $0_1 | 8 : $0_1;
  $1602($7_1 + 3188 | 0, $7_1 + 1140 | 0, 2048);
  $0_1 = 0;
  while (1) {
   $2_1 = (($0_1 << 2) + $7_1 | 0) + 1140 | 0;
   $5_1 = Math_fround(-1.0);
   label$48 : {
    if (!HEAPU8[($0_1 + $7_1 | 0) + 256 | 0]) {
     break label$48
    }
    $1_1 = HEAPF32[(($0_1 << 2) + $7_1 | 0) + 1140 >> 2];
    $5_1 = Math_fround(0.0);
    if ($1_1 < Math_fround(0.0)) {
     break label$48
    }
    $5_1 = Math_fround($1_1 + HEAPF32[$7_1 + 24 >> 2]);
   }
   HEAPF32[$2_1 >> 2] = $5_1;
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 512) {
    continue
   }
   break;
  };
  HEAP8[$11_1 + 851 | 0] = 0;
  $0_1 = HEAP32[$11_1 + 8 >> 2];
  $10_1 = $0_1 & 2 ? HEAP8[$11_1 + 12 | 0] & 1 : 0;
  if (!(!(HEAPF32[$11_1 + 768 >> 2] > Math_fround(0.0) | HEAPF32[$11_1 + 776 >> 2] > Math_fround(0.0) | (HEAPF32[$11_1 + 772 >> 2] > Math_fround(0.0) | HEAPF32[$11_1 + 780 >> 2] > Math_fround(0.0)) | (HEAPF32[$11_1 + 784 >> 2] > Math_fround(0.0) | HEAPF32[$11_1 + 788 >> 2] > Math_fround(0.0) | HEAPF32[$11_1 + 792 >> 2] > Math_fround(0.0)) | HEAPF32[$11_1 + 796 >> 2] > Math_fround(0.0)) | (!$10_1 | HEAP32[$11_1 + 7560 >> 2] == 3))) {
   HEAP32[$11_1 + 7560 >> 2] = 3
  }
  $22_1 = $0_1 & 1;
  label$53 : {
   if (!$22_1) {
    break label$53
   }
   $0_1 = HEAP32[$11_1 + 100 >> 2];
   if (!(($0_1 | 0) < 0 | !HEAPU8[($0_1 + $11_1 | 0) + 256 | 0])) {
    HEAP32[$11_1 + 7560 >> 2] = 2;
    HEAP32[$11_1 + 768 >> 2] = 1065353216;
   }
   $0_1 = HEAP32[$11_1 + 104 >> 2];
   if (!(($0_1 | 0) < 0 | !HEAPU8[($0_1 + $11_1 | 0) + 256 | 0])) {
    HEAP32[$11_1 + 7560 >> 2] = 2;
    HEAP32[$11_1 + 776 >> 2] = 1065353216;
   }
   $0_1 = HEAP32[$11_1 + 108 >> 2];
   if (!(($0_1 | 0) < 0 | !HEAPU8[($0_1 + $11_1 | 0) + 256 | 0])) {
    HEAP32[$11_1 + 7560 >> 2] = 2;
    HEAP32[$11_1 + 772 >> 2] = 1065353216;
   }
   $0_1 = HEAP32[$11_1 + 56 >> 2];
   if (!(($0_1 | 0) < 0 | !HEAPU8[($0_1 + $11_1 | 0) + 256 | 0])) {
    HEAP32[$11_1 + 7560 >> 2] = 2;
    HEAP32[$11_1 + 832 >> 2] = 1065353216;
   }
   $0_1 = HEAP32[$11_1 + 60 >> 2];
   if (!(($0_1 | 0) < 0 | !HEAPU8[($0_1 + $11_1 | 0) + 256 | 0])) {
    HEAP32[$11_1 + 7560 >> 2] = 2;
    HEAP32[$11_1 + 836 >> 2] = 1065353216;
   }
   $0_1 = HEAP32[$11_1 - -64 >> 2];
   if (!(($0_1 | 0) < 0 | !HEAPU8[($0_1 + $11_1 | 0) + 256 | 0])) {
    HEAP32[$11_1 + 7560 >> 2] = 2;
    HEAP32[$11_1 + 840 >> 2] = 1065353216;
   }
   $0_1 = HEAP32[$11_1 + 68 >> 2];
   if (!(($0_1 | 0) < 0 | !HEAPU8[($0_1 + $11_1 | 0) + 256 | 0])) {
    HEAP32[$11_1 + 7560 >> 2] = 2;
    HEAP32[$11_1 + 844 >> 2] = 1065353216;
   }
   if (HEAPU8[$11_1 + 252 | 0]) {
    HEAP32[$11_1 + 824 >> 2] = 1065353216
   }
   if (!HEAPU8[$11_1 + 253 | 0]) {
    break label$53
   }
   HEAP32[$11_1 + 828 >> 2] = 1065353216;
  }
  $1602($11_1 + 5316 | 0, $11_1 + 5236 | 0, 80);
  $0_1 = 0;
  while (1) {
   $3 = $11_1 + ($0_1 << 2) | 0;
   $5_1 = Math_fround(-1.0);
   label$63 : {
    if (!(HEAPF32[$3 + 768 >> 2] > Math_fround(0.0))) {
     break label$63
    }
    $1_1 = HEAPF32[$3 + 5236 >> 2];
    $5_1 = Math_fround(0.0);
    if ($1_1 < Math_fround(0.0)) {
     break label$63
    }
    $5_1 = Math_fround($1_1 + HEAPF32[$11_1 + 24 >> 2]);
   }
   $1_1 = $5_1;
   HEAPF32[$3 + 5236 >> 2] = $1_1;
   $3 = $0_1 + 1 | 0;
   $0_1 = $3;
   if (($0_1 | 0) != 20) {
    continue
   }
   break;
  };
  $2_1 = HEAP32[$11_1 + 7576 >> 2];
  label$64 : {
   if (!$2_1) {
    break label$64
   }
   $3 = HEAP32[$11_1 + 7508 >> 2];
   if (!$3) {
    break label$64
   }
   HEAP32[$11_1 + 7516 >> 2] = 0;
   HEAP32[$11_1 + 7512 >> 2] = $2_1;
   $0_1 = HEAP32[$11_1 + 7564 >> 2];
   HEAP32[(($0_1 << 2) + $3 | 0) + 756 >> 2] = $2_1;
   $9 = $11_1 + 7588 | 0;
   $2_1 = HEAP32[$9 + 4 >> 2];
   $4_1 = ($0_1 << 4) + $3 | 0;
   $0_1 = $4_1 + 772 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   $2_1 = HEAP32[$11_1 + 7584 >> 2];
   $0_1 = $4_1 + 764 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$11_1 + 7580 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   HEAP8[$11_1 + 7568 | 0] = 1;
   if (!HEAPU8[$11_1 + 7574 | 0]) {
    break label$64
   }
   HEAP8[$11_1 + 7571 | 0] = 1;
   HEAP8[$11_1 + 7569 | 0] = 1;
   HEAP8[$11_1 + 7570 | 0] = 0;
  }
  HEAP32[$11_1 + 7576 >> 2] = 0;
  HEAP8[$11_1 + 7573 | 0] = 0;
  HEAP8[$11_1 + 7574 | 0] = 0;
  HEAP32[$11_1 + 7540 >> 2] = 0;
  if (HEAPU8[$11_1 + 7596 | 0]) {
   $20_1 = global$0 - 32 | 0;
   global$0 = $20_1;
   $4_1 = HEAP32[18392];
   label$1 : {
    if (HEAP32[$4_1 + 7672 >> 2]) {
     $0_1 = $4_1 + 7668 | 0;
     break label$1;
    }
    $0_1 = HEAP32[$4_1 + 7760 >> 2] ? $4_1 + 7756 | 0 : 0;
   }
   $9 = HEAP32[$4_1 + 7600 >> 2];
   $2_1 = $9 & 1024;
   $0_1 = !$2_1 | !(!HEAP32[$4_1 + 7660 >> 2] | HEAP32[$4_1 + 7664 >> 2] == 1) ? $0_1 : HEAP32[$4_1 + 7804 >> 2] ? $4_1 + 7800 | 0 : $0_1;
   label$61 : {
    label$7 : {
     if (!$0_1) {
      if ($2_1) {
       HEAP32[$4_1 + 7600 >> 2] = $9 | 4096
      }
      if (!HEAP32[$4_1 + 7512 >> 2]) {
       break label$61
      }
      $0_1 = $4_1;
      if (!(HEAPU8[$0_1 + 7601 | 0] & 16)) {
       break label$7
      }
      break label$61;
     }
     label$10 : {
      if (!($9 & 32)) {
       break label$10
      }
      $2_1 = HEAP32[$4_1 + 7716 >> 2];
      if (!$2_1) {
       break label$10
      }
      $0_1 = ($2_1 | 0) == HEAP32[$4_1 + 7512 >> 2] ? $0_1 : $4_1 + 7712 | 0;
     }
     $2_1 = $4_1 + 7756 | 0;
     label$13 : {
      if (!HEAP32[$4_1 + 7760 >> 2] | ($0_1 | 0) == ($2_1 | 0) | HEAP32[HEAP32[$4_1 + 7756 >> 2] + 728 >> 2] != HEAP32[$4_1 + 7508 >> 2]) {
       break label$13
      }
      $8 = HEAPF32[$4_1 + 7788 >> 2];
      $1_1 = HEAPF32[$0_1 + 32 >> 2];
      if (!($8 < $1_1) & (!(HEAPF32[$4_1 + 7792 >> 2] < HEAPF32[$0_1 + 36 >> 2]) | $1_1 != $8)) {
       break label$13
      }
      $0_1 = $2_1;
     }
     label$19 : {
      if (HEAP32[$4_1 + 7564 >> 2]) {
       break label$19
      }
      if ($9 & 64) {
       $1_1 = HEAP32[$4_1 + 7612 >> 2] == 2 ? HEAPF32[HEAP32[$0_1 >> 2] + 100 >> 2] : Math_fround(0.0);
       $2_1 = HEAP32[$0_1 >> 2];
       HEAP32[$2_1 + 124 >> 2] = 0;
       HEAP32[$2_1 + 116 >> 2] = 0;
       HEAPF32[$2_1 + 108 >> 2] = $1_1;
       break label$19;
      }
      $6_1 = HEAPF32[$0_1 + 16 >> 2];
      $5_1 = HEAPF32[$0_1 + 20 >> 2];
      $2_1 = HEAP32[$0_1 >> 2];
      $17_1 = HEAPF32[$2_1 + 224 >> 2];
      $8 = HEAPF32[$0_1 + 12 >> 2];
      $1_1 = HEAPF32[$2_1 + 228 >> 2];
      HEAPF32[$20_1 + 28 >> 2] = $1_1 + HEAPF32[$0_1 + 24 >> 2];
      HEAPF32[$20_1 + 24 >> 2] = $17_1 + $5_1;
      HEAPF32[$20_1 + 20 >> 2] = $1_1 + $6_1;
      HEAPF32[$20_1 + 16 >> 2] = $17_1 + $8;
      $264($20_1 + 8 | 0, $2_1, $20_1 + 16 | 0, HEAP32[$4_1 + 7604 >> 2]);
     }
     HEAP32[$4_1 + 7508 >> 2] = HEAP32[$0_1 >> 2];
     $14 = HEAP32[$0_1 + 4 >> 2];
     if (($14 | 0) != HEAP32[$4_1 + 7136 >> 2]) {
      $9 = HEAP32[18392];
      $2_1 = HEAP32[$9 + 7136 >> 2];
      HEAP8[$9 + 7148 | 0] = ($2_1 | 0) != 0;
      if ($2_1) {
       HEAP32[$9 + 7192 >> 2] = -1;
       HEAP8[$9 + 7151 | 0] = 0;
       HEAP8[$9 + 7152 | 0] = 0;
       HEAP32[$9 + 7144 >> 2] = 0;
      }
      HEAP32[$9 + 7184 >> 2] = 0;
      HEAP8[$9 + 7149 | 0] = 0;
      HEAP8[$9 + 7150 | 0] = 0;
      HEAP32[$9 + 7136 >> 2] = 0;
      HEAP32[$9 + 7168 >> 2] = 0;
      HEAP32[$9 + 7172 >> 2] = 0;
      HEAP32[$9 + 7156 >> 2] = 0;
      HEAP32[$9 + 7160 >> 2] = 0;
      HEAP8[$9 + 7153 | 0] = 0;
      HEAP8[$9 + 7154 | 0] = 0;
     }
     if (HEAP32[$4_1 + 7512 >> 2] != ($14 | 0)) {
      HEAP32[$4_1 + 7540 >> 2] = $14;
      HEAP32[$4_1 + 7544 >> 2] = HEAP32[$0_1 + 8 >> 2];
      HEAP32[$4_1 + 7548 >> 2] = HEAP32[$4_1 + 7608 >> 2];
     }
     $9 = HEAP32[$0_1 + 8 >> 2];
     $2_1 = HEAP32[18392];
     $12_1 = HEAP32[$4_1 + 7564 >> 2];
     HEAP32[$2_1 + 7564 >> 2] = $12_1;
     HEAP32[$2_1 + 7512 >> 2] = $14;
     HEAP32[$2_1 + 7516 >> 2] = $9;
     $9 = HEAP32[$2_1 + 7508 >> 2];
     HEAP32[($9 + ($12_1 << 2) | 0) + 756 >> 2] = $14;
     $15_1 = $9 + ($12_1 << 4) | 0;
     $14 = $15_1 + 772 | 0;
     $12_1 = $0_1 + 20 | 0;
     $9 = HEAP32[$12_1 + 4 >> 2];
     HEAP32[$14 >> 2] = HEAP32[$12_1 >> 2];
     HEAP32[$14 + 4 >> 2] = $9;
     $12_1 = HEAP32[$0_1 + 16 >> 2];
     $9 = $15_1 + 764 | 0;
     HEAP32[$9 >> 2] = HEAP32[$0_1 + 12 >> 2];
     HEAP32[$9 + 4 >> 2] = $12_1;
     $12_1 = HEAP32[$4_1 + 7600 >> 2];
     if (!(!($12_1 & 1024) | !(HEAP8[$0_1 + 29 | 0] & 1))) {
      $9 = HEAP32[$0_1 + 4 >> 2];
      HEAP32[$4_1 + 7600 >> 2] = $12_1 | 4096;
      HEAP32[$4_1 + 7556 >> 2] = 5;
      HEAP32[$4_1 + 7552 >> 2] = $9;
     }
     $9 = HEAP32[$4_1 + 7600 >> 2];
     if ($9 & 2048) {
      $0_1 = HEAP32[$0_1 + 4 >> 2];
      HEAP32[$4_1 + 7556 >> 2] = 0;
      HEAP32[$4_1 + 7552 >> 2] = $0_1;
     }
     $0_1 = $2_1;
     if ($9 & 4096) {
      break label$61
     }
    }
    HEAP8[$0_1 + 7571 | 0] = 1;
    HEAP8[$0_1 + 7569 | 0] = 1;
    HEAP8[$0_1 + 7570 | 0] = 0;
   }
   global$0 = $20_1 + 32 | 0;
  }
  HEAP32[$11_1 + 7664 >> 2] = 0;
  HEAP16[$11_1 + 7596 >> 1] = 0;
  $14 = 0;
  label$66 : {
   if (!HEAPU8[$11_1 + 7569 | 0]) {
    break label$66
   }
   $14 = 0;
   if (!HEAPU8[$11_1 + 7568 | 0]) {
    break label$66
   }
   $14 = 0;
   if (HEAPU8[$11_1 + 7570 | 0]) {
    break label$66
   }
   $14 = 0;
   if (!HEAPU8[$11_1 + 7571 | 0]) {
    break label$66
   }
   $14 = HEAP32[$11_1 + 7508 >> 2] != 0;
  }
  HEAP8[$11_1 + 7569 | 0] = 0;
  $2_1 = HEAP32[$11_1 + 7508 >> 2];
  label$70 : {
   if (!$2_1) {
    break label$70
   }
   $4_1 = HEAP32[$11_1 + 7564 >> 2];
   $0_1 = $2_1;
   label$71 : {
    while (1) {
     if (!(HEAPU8[$0_1 + 11 | 0] & 20 | HEAP32[$0_1 + 736 >> 2] == ($0_1 | 0))) {
      $3 = HEAP32[$0_1 + 728 >> 2];
      $0_1 = $3;
      if ($0_1) {
       continue
      }
      break label$71;
     }
     break;
    };
    if (($0_1 | 0) == ($2_1 | 0)) {
     break label$71
    }
    HEAP32[$0_1 + 752 >> 2] = $2_1;
   }
   if ($4_1 | (!$2_1 | !HEAP32[$2_1 + 752 >> 2])) {
    break label$70
   }
   HEAP32[$2_1 + 752 >> 2] = 0;
  }
  $13 = HEAP32[18392];
  $4_1 = HEAP32[$13 + 7468 >> 2];
  while (1) {
   label$74 : {
    if (($4_1 | 0) <= 0) {
     $2_1 = 0;
     break label$74;
    }
    $0_1 = $3;
    $4_1 = $4_1 - 1 | 0;
    $3 = HEAP32[(HEAP32[$13 + 7476 >> 2] + Math_imul($4_1, 36) | 0) + 4 >> 2];
    label$77 : {
     if ($3) {
      $2_1 = 0;
      if (HEAPU8[$3 + 11 | 0] & 8) {
       break label$77
      }
     }
     $3 = $0_1;
     $2_1 = 1;
    }
    $0_1 = $2_1;
    $2_1 = $3;
    if ($0_1) {
     continue
    }
   }
   break;
  };
  if ($2_1) {
   HEAP32[$13 + 7844 >> 2] = 0
  }
  label$80 : {
   if (HEAP32[$13 + 7844 >> 2] | !HEAP32[$13 + 7848 >> 2]) {
    break label$80
   }
   $1_1 = Math_fround(HEAPF32[$13 + 7860 >> 2] + Math_fround(HEAPF32[$13 + 24 >> 2] * Math_fround(-10.0)));
   $1_1 = $1_1 >= Math_fround(0.0) ? $1_1 : Math_fround(0.0);
   HEAPF32[$13 + 7860 >> 2] = $1_1;
   if (!(HEAPF32[$13 + 7868 >> 2] <= Math_fround(0.0)) | !($1_1 <= Math_fround(0.0))) {
    break label$80
   }
   HEAP32[$13 + 7848 >> 2] = 0;
  }
  $12_1 = 0;
  label$81 : {
   if ($2_1) {
    break label$81
   }
   $12_1 = 0;
   if (HEAP32[$13 + 7844 >> 2]) {
    break label$81
   }
   $1_1 = HEAPF32[$13 + 5248 >> 2];
   $12_1 = ($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0);
  }
  label$82 : {
   if ($2_1) {
    $0_1 = 0;
    break label$82;
   }
   if (HEAP32[$13 + 7844 >> 2]) {
    $0_1 = 0;
    break label$82;
   }
   $0_1 = 0;
   if (!HEAPU8[$13 + 252 | 0]) {
    break label$82
   }
   $0_1 = HEAP32[$13 + 52 >> 2];
   if (($0_1 | 0) < 0) {
    $0_1 = 0;
    break label$82;
   }
   $6_1 = HEAPF32[($13 + ($0_1 << 2) | 0) + 1140 >> 2];
   $0_1 = $6_1 == Math_fround(0.0);
   if ($0_1) {
    break label$82
   }
   $5_1 = HEAPF32[$13 + 140 >> 2];
   if (!($5_1 < $6_1)) {
    $0_1 = 0;
    break label$82;
   }
   $0_1 = 0;
   $1_1 = Math_fround($6_1 - HEAPF32[$13 + 24 >> 2]);
   if ($1_1 >= $6_1) {
    break label$82
   }
   $8 = HEAPF32[$13 + 144 >> 2];
   if ($8 <= Math_fround(0.0)) {
    $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
    break label$82;
   }
   if ($1_1 < $5_1) {
    $0_1 = -1
   } else {
    $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
    label$89 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$1_1;
      break label$89;
     }
     $0_1 = -2147483648;
    }
   }
   if ($5_1 > $6_1) {
    $2_1 = -1
   } else {
    $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
    label$92 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$1_1;
      break label$92;
     }
     $2_1 = -2147483648;
    }
   }
   $0_1 = ($2_1 | 0) > ($0_1 | 0);
  }
  label$94 : {
   if (($0_1 | $12_1) != 1) {
    break label$94
   }
   $4_1 = $0_1;
   $0_1 = HEAP32[$13 + 7508 >> 2];
   label$95 : {
    if ($0_1) {
     break label$95
    }
    $0_1 = HEAP32[$13 + 7020 >> 2];
    if (($0_1 | 0) > 0) {
     $9 = HEAP32[$13 + 7028 >> 2];
     while (1) {
      $2_1 = $0_1;
      $3 = $0_1 - 1 | 0;
      $0_1 = HEAP32[$9 + ($3 << 2) >> 2];
      if (!(!HEAPU8[$0_1 + 139 | 0] | ($0_1 | 0) != HEAP32[$0_1 + 736 >> 2] | HEAPU8[$0_1 + 10 | 0] & 8)) {
       break label$95
      }
      $0_1 = $3;
      if (($2_1 | 0) > 1) {
       continue
      }
      break;
     };
    }
    $0_1 = 0;
   }
   if (!$0_1) {
    break label$94
   }
   $0_1 = HEAP32[$0_1 + 736 >> 2];
   HEAP32[$13 + 7844 >> 2] = $0_1;
   HEAP32[$13 + 7848 >> 2] = $0_1;
   HEAP8[$13 + 7864 | 0] = $12_1;
   HEAP32[$13 + 7856 >> 2] = 0;
   HEAP32[$13 + 7860 >> 2] = 0;
   HEAP32[$13 + 7560 >> 2] = $4_1 ? 2 : 3;
  }
  $5_1 = HEAPF32[$13 + 24 >> 2];
  $1_1 = Math_fround($5_1 + HEAPF32[$13 + 7856 >> 2]);
  HEAPF32[$13 + 7856 >> 2] = $1_1;
  label$99 : {
   if (!HEAP32[$13 + 7844 >> 2]) {
    $0_1 = 0;
    $3 = 0;
    break label$99;
   }
   $0_1 = 0;
   $3 = 0;
   if (HEAP32[$13 + 7560 >> 2] != 3) {
    break label$99
   }
   $8 = HEAPF32[$13 + 7860 >> 2];
   $1_1 = Math_fround(Math_fround($1_1 + Math_fround(-.20000000298023224)) / Math_fround(.05000000074505806));
   $1_1 = $1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1;
   HEAPF32[$13 + 7860 >> 2] = $1_1 <= $8 ? $8 : $1_1;
   $16_1 = HEAPF32[$13 + 5284 >> 2];
   if ($16_1 < Math_fround(0.0)) {
    $1_1 = Math_fround(0.0)
   } else {
    $0_1 = 1;
    label$102 : {
     if ($16_1 == Math_fround(0.0)) {
      break label$102
     }
     $6_1 = Math_fround($16_1 - $5_1);
     $0_1 = 0;
     if ($6_1 >= $16_1) {
      break label$102
     }
     $17_1 = Math_fround(HEAPF32[$13 + 140 >> 2] * Math_fround(1.25));
     $1_1 = HEAPF32[$13 + 144 >> 2];
     $8 = Math_fround($1_1 + $1_1);
     $0_1 = $17_1 > $6_1 & $17_1 <= $16_1;
     if ($8 <= Math_fround(0.0)) {
      break label$102
     }
     if ($6_1 < $17_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($6_1 - $17_1) / $8);
      label$105 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$105;
       }
       $0_1 = -2147483648;
      }
     }
     if ($17_1 > $16_1) {
      $2_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($16_1 - $17_1) / $8);
      label$108 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$1_1;
        break label$108;
       }
       $2_1 = -2147483648;
      }
     }
     $0_1 = $2_1 - $0_1 | 0;
    }
    $1_1 = Math_fround($0_1 | 0);
   }
   $4_1 = $1_1 > Math_fround(0.0);
   $17_1 = HEAPF32[$13 + 5288 >> 2];
   if ($17_1 < Math_fround(0.0)) {
    $1_1 = Math_fround(0.0)
   } else {
    $0_1 = 1;
    label$111 : {
     if ($17_1 == Math_fround(0.0)) {
      break label$111
     }
     $5_1 = Math_fround($17_1 - $5_1);
     $0_1 = 0;
     if ($5_1 >= $17_1) {
      break label$111
     }
     $6_1 = Math_fround(HEAPF32[$13 + 140 >> 2] * Math_fround(1.25));
     $1_1 = HEAPF32[$13 + 144 >> 2];
     $8 = Math_fround($1_1 + $1_1);
     $0_1 = $6_1 > $5_1 & $6_1 <= $17_1;
     if ($8 <= Math_fround(0.0)) {
      break label$111
     }
     if ($5_1 < $6_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($5_1 - $6_1) / $8);
      label$114 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$114;
       }
       $0_1 = -2147483648;
      }
     }
     if ($6_1 > $17_1) {
      $2_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($17_1 - $6_1) / $8);
      label$117 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$1_1;
        break label$117;
       }
       $2_1 = -2147483648;
      }
     }
     $0_1 = $2_1 - $0_1 | 0;
    }
    $1_1 = Math_fround($0_1 | 0);
   }
   $0_1 = $4_1 - ($1_1 > Math_fround(0.0)) | 0;
   if ($0_1) {
    $139($0_1);
    HEAP32[$13 + 7860 >> 2] = 1065353216;
   }
   $0_1 = 0;
   if (HEAPF32[HEAP32[18392] + 780 >> 2] > Math_fround(0.0)) {
    break label$99
   }
   $0_1 = HEAPU8[$13 + 7864 | 0] != 0 & HEAPF32[$13 + 7860 >> 2] < Math_fround(1.0);
   HEAP8[$13 + 7864 | 0] = $0_1;
   if ($0_1) {
    $0_1 = HEAP32[$13 + 7508 >> 2] != 0
   } else {
    $3 = HEAP32[$13 + 7844 >> 2];
    $0_1 = 0;
   }
   HEAP32[$13 + 7844 >> 2] = 0;
  }
  $2_1 = $0_1;
  label$122 : {
   if (!HEAP32[$13 + 7844 >> 2]) {
    break label$122
   }
   if (HEAP32[$13 + 7560 >> 2] != 2) {
    break label$122
   }
   $8 = HEAPF32[$13 + 7860 >> 2];
   $1_1 = Math_fround(Math_fround(HEAPF32[$13 + 7856 >> 2] + Math_fround(-.20000000298023224)) / Math_fround(.05000000074505806));
   $1_1 = $1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1;
   HEAPF32[$13 + 7860 >> 2] = $1_1 <= $8 ? $8 : $1_1;
   $4_1 = HEAP32[18392];
   $0_1 = HEAP32[$4_1 + 52 >> 2];
   label$125 : {
    if (($0_1 | 0) < 0) {
     break label$125
    }
    $6_1 = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 1140 >> 2];
    $0_1 = $6_1 == Math_fround(0.0);
    label$126 : {
     if ($0_1) {
      break label$126
     }
     $5_1 = HEAPF32[$4_1 + 140 >> 2];
     if (!($5_1 < $6_1)) {
      break label$125
     }
     $1_1 = Math_fround($6_1 - HEAPF32[$4_1 + 24 >> 2]);
     if ($1_1 >= $6_1) {
      break label$125
     }
     $8 = HEAPF32[$4_1 + 144 >> 2];
     if ($8 <= Math_fround(0.0)) {
      $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
      break label$126;
     }
     if ($1_1 < $5_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
      label$129 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$129;
       }
       $0_1 = -2147483648;
      }
     }
     if ($5_1 > $6_1) {
      $4_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
      label$132 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $4_1 = ~~$1_1;
        break label$132;
       }
       $4_1 = -2147483648;
      }
     }
     $0_1 = ($4_1 | 0) > ($0_1 | 0);
    }
    if (!$0_1) {
     break label$125
    }
    $139(HEAPU8[$13 + 253 | 0] ? 1 : -1);
   }
   if (HEAPU8[$13 + 252 | 0]) {
    break label$122
   }
   $3 = HEAP32[$13 + 7844 >> 2];
  }
  if (!(HEAPU8[$13 + 896 | 0] & 4 | (!(HEAP8[$13 + 8 | 0] & 1) | HEAP32[$13 + 892 >> 2] != 4))) {
   HEAP32[$13 + 7560 >> 2] = 2;
   HEAP8[$13 + 7864 | 0] = 1;
  }
  label$135 : {
   if (!HEAPU8[$13 + 7864 | 0]) {
    $0_1 = $2_1;
    break label$135;
   }
   if (HEAP32[$13 + 7560 >> 2] != 2) {
    $0_1 = $2_1;
    break label$135;
   }
   if (HEAPU8[$13 + 255 | 0] | (HEAPU8[$13 + 253 | 0] | (HEAPU8[$13 + 252 | 0] | HEAP32[$13 + 5404 >> 2] > 0))) {
    HEAP8[$13 + 7864 | 0] = 0
   }
   label$140 : {
    if (HEAPU8[$13 + 892 | 0] & 4) {
     break label$140
    }
    if (!(HEAPU8[$13 + 896 | 0] & 4)) {
     break label$140
    }
    if (!HEAPU8[$13 + 7864 | 0]) {
     break label$140
    }
    if (!(HEAPU8[$13 + 7149 | 0] | !HEAP32[$13 + 7136 >> 2])) {
     break label$140
    }
    $2_1 = $2_1 | !(HEAPF32[$13 + 228 >> 2] >= Math_fround(-256.0e3) & HEAPF32[$13 + 232 >> 2] >= Math_fround(-256.0e3) ^ HEAPF32[$13 + 900 >> 2] >= Math_fround(-256.0e3) & HEAPF32[$13 + 904 >> 2] >= Math_fround(-256.0e3));
   }
   $0_1 = $2_1;
   if (!HEAPU8[$13 + 254 | 0]) {
    HEAP8[$13 + 7864 | 0] = 0
   }
  }
  $9 = $0_1;
  $4_1 = HEAP32[$13 + 7844 >> 2];
  label$146 : {
   if (!$4_1 | HEAPU8[$4_1 + 8 | 0] & 4) {
    break label$146
   }
   $2_1 = HEAP32[$13 + 7560 >> 2];
   label$147 : {
    if (($2_1 | 0) != 2) {
     $16_1 = Math_fround(0.0);
     $19 = Math_fround(0.0);
     break label$147;
    }
    $16_1 = Math_fround(0.0);
    $19 = Math_fround(0.0);
    if (HEAPU8[$13 + 253 | 0]) {
     break label$147
    }
    $12_1 = HEAP32[18392];
    $0_1 = HEAP32[$12_1 + 60 >> 2];
    if (($0_1 | 0) >= 0) {
     $1_1 = HEAPU8[($0_1 + $12_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $1_1 = Math_fround(0.0)
    }
    $0_1 = HEAP32[$12_1 + 56 >> 2];
    if (($0_1 | 0) >= 0) {
     $5_1 = HEAPU8[($0_1 + $12_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $5_1 = Math_fround(0.0)
    }
    $1_1 = Math_fround($1_1 - $5_1);
    $0_1 = HEAP32[$12_1 + 68 >> 2];
    if (($0_1 | 0) >= 0) {
     $5_1 = HEAPU8[($0_1 + $12_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $5_1 = Math_fround(0.0)
    }
    $0_1 = HEAP32[$12_1 - -64 >> 2];
    if (($0_1 | 0) >= 0) {
     $8 = HEAPU8[($0_1 + $12_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
    } else {
     $8 = Math_fround(0.0)
    }
    $16_1 = Math_fround(Math_fround($5_1 - $8) + Math_fround(0.0));
    $19 = Math_fround($1_1 + Math_fround(0.0));
   }
   if (($2_1 | 0) == 3) {
    $0_1 = HEAP32[18392];
    $19 = Math_fround(Math_fround(HEAPF32[$0_1 + 804 >> 2] - HEAPF32[$0_1 + 800 >> 2]) + Math_fround(0.0));
    $16_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 812 >> 2] - HEAPF32[$0_1 + 808 >> 2]) + Math_fround(0.0));
   }
   if ($19 == Math_fround(0.0) & $16_1 == Math_fround(0.0)) {
    break label$146
   }
   $4_1 = HEAP32[$4_1 + 736 >> 2];
   $0_1 = HEAP32[$4_1 + 176 >> 2];
   if ($0_1 & 1) {
    $5_1 = HEAPF32[$13 + 172 >> 2];
    $8 = HEAPF32[$13 + 168 >> 2];
    $1_1 = HEAPF32[$13 + 24 >> 2];
    HEAP32[$4_1 + 180 >> 2] = 2139095039;
    HEAP32[$4_1 + 184 >> 2] = 2139095039;
    HEAP32[$4_1 + 176 >> 2] = $0_1 & -15;
    $2_1 = $4_1 + 16 | 0;
    $17_1 = HEAPF32[$2_1 >> 2];
    $1_1 = Math_fround(Math_fround($1_1 * Math_fround(800.0)) * ($5_1 > $8 ? $8 : $5_1));
    label$156 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$1_1;
      break label$156;
     }
     $0_1 = -2147483648;
    }
    $6_1 = Math_fround($0_1 | 0);
    $1_1 = Math_fround($17_1 + Math_fround($16_1 * $6_1));
    label$158 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$1_1;
      break label$158;
     }
     $0_1 = -2147483648;
    }
    $5_1 = Math_fround($0_1 | 0);
    HEAPF32[$2_1 >> 2] = $5_1;
    $8 = HEAPF32[$4_1 + 12 >> 2];
    $1_1 = Math_fround($8 + Math_fround($19 * $6_1));
    label$160 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$1_1;
      break label$160;
     }
     $0_1 = -2147483648;
    }
    $1_1 = Math_fround($0_1 | 0);
    HEAPF32[$4_1 + 12 >> 2] = $1_1;
    $8 = Math_fround($1_1 - $8);
    HEAPF32[$4_1 + 208 >> 2] = HEAPF32[$4_1 + 208 >> 2] + $8;
    $0_1 = $4_1 + 212 | 0;
    $1_1 = Math_fround($5_1 - $17_1);
    HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] + $1_1;
    $0_1 = $4_1 + 232 | 0;
    HEAPF32[$0_1 >> 2] = $8 + HEAPF32[$0_1 >> 2];
    $0_1 = $4_1 + 236 | 0;
    HEAPF32[$0_1 >> 2] = $1_1 + HEAPF32[$0_1 >> 2];
    $0_1 = $4_1 + 240 | 0;
    HEAPF32[$0_1 >> 2] = $8 + HEAPF32[$0_1 >> 2];
    $0_1 = $4_1 + 244 | 0;
    HEAPF32[$0_1 >> 2] = $1_1 + HEAPF32[$0_1 >> 2];
    $0_1 = $4_1 + 224 | 0;
    HEAPF32[$0_1 >> 2] = $8 + HEAPF32[$0_1 >> 2];
    $0_1 = $4_1 + 228 | 0;
    HEAPF32[$0_1 >> 2] = $1_1 + HEAPF32[$0_1 >> 2];
   }
   label$162 : {
    if (HEAP8[$4_1 + 9 | 0] & 1) {
     break label$162
    }
    $0_1 = HEAP32[18392];
    if (!(HEAPF32[$0_1 + 12128 >> 2] <= Math_fround(0.0))) {
     break label$162
    }
    HEAPF32[$0_1 + 12128 >> 2] = HEAPF32[$0_1 + 28 >> 2];
   }
   HEAP8[$13 + 7571 | 0] = 1;
  }
  if ($3) {
   $0_1 = HEAP32[$13 + 7508 >> 2];
   label$164 : {
    if (!!$0_1 & ($3 | 0) == HEAP32[$0_1 + 736 >> 2]) {
     break label$164
    }
    $4_1 = HEAP32[18392];
    $0_1 = HEAP32[$4_1 + 7136 >> 2];
    HEAP8[$4_1 + 7148 | 0] = ($0_1 | 0) != 0;
    if ($0_1) {
     HEAP32[$4_1 + 7192 >> 2] = -1;
     HEAP8[$4_1 + 7151 | 0] = 0;
     HEAP8[$4_1 + 7152 | 0] = 0;
     HEAP32[$4_1 + 7144 >> 2] = 0;
    }
    HEAP32[$4_1 + 7184 >> 2] = 0;
    HEAP8[$4_1 + 7149 | 0] = 0;
    HEAP8[$4_1 + 7150 | 0] = 0;
    HEAP32[$4_1 + 7136 >> 2] = 0;
    HEAP32[$4_1 + 7168 >> 2] = 0;
    HEAP32[$4_1 + 7172 >> 2] = 0;
    HEAP32[$4_1 + 7156 >> 2] = 0;
    HEAP32[$4_1 + 7160 >> 2] = 0;
    HEAP8[$4_1 + 7153 | 0] = 0;
    HEAP8[$4_1 + 7154 | 0] = 0;
    HEAP8[$4_1 + 7571 | 0] = 1;
    HEAP8[$4_1 + 7569 | 0] = 1;
    HEAP8[$4_1 + 7570 | 0] = 0;
    $2_1 = HEAP32[$3 + 752 >> 2];
    if (!(HEAPU8[$2_1 + 139 | 0] ? $2_1 : 0)) {
     $2_1 = $3
    }
    $21_1 = HEAP32[$4_1 + 7468 >> 2];
    label$169 : {
     if (!$21_1) {
      break label$169
     }
     $0_1 = 0;
     label$170 : {
      if (($21_1 | 0) <= 0) {
       break label$170
      }
      $15_1 = HEAP32[$4_1 + 7476 >> 2];
      $0_1 = 0;
      while (1) {
       $12_1 = $0_1;
       $4_1 = HEAP32[($15_1 + Math_imul($0_1, 36) | 0) + 4 >> 2];
       $20_1 = 4;
       label$173 : {
        if (!$4_1) {
         break label$173
        }
        $3 = 0;
        $20_1 = 4;
        if (HEAP8[$4_1 + 11 | 0] & 1) {
         break label$173
        }
        while (1) {
         $4_1 = $0_1;
         $20_1 = HEAP32[($15_1 + Math_imul($0_1, 36) | 0) + 4 >> 2];
         $0_1 = 1;
         label$176 : {
          if (!$20_1) {
           break label$176
          }
          $0_1 = $2_1;
          if (HEAP32[$0_1 + 736 >> 2] == ($20_1 | 0)) {
           $3 = 1;
           $0_1 = 0;
           break label$176;
          }
          while (1) {
           if (($0_1 | 0) == ($20_1 | 0)) {
            $3 = 1;
            $0_1 = ($0_1 | 0) != ($20_1 | 0);
            break label$176;
           }
           $0_1 = HEAP32[$0_1 + 732 >> 2];
           if ($0_1) {
            continue
           }
           break;
          };
          $0_1 = 1;
         }
         if ($0_1) {
          $0_1 = $4_1 + 1 | 0;
          if (($21_1 | 0) > ($0_1 | 0)) {
           continue
          }
         }
         break;
        };
        $20_1 = $3 & 1 ? 0 : 2;
       }
       if (($20_1 | 0) == 2) {
        $0_1 = $12_1;
        break label$170;
       }
       $0_1 = $12_1 + 1 | 0;
       if (($21_1 | 0) != ($0_1 | 0)) {
        continue
       }
       break;
      };
      $0_1 = $21_1;
     }
     if (($21_1 | 0) <= ($0_1 | 0)) {
      break label$169
     }
     $132($0_1, 0);
    }
    $125($2_1);
    label$183 : {
     if (HEAP32[$2_1 + 756 >> 2]) {
      break label$183
     }
     $4_1 = HEAP32[18392];
     if (HEAPU8[$2_1 + 10 | 0] & 4) {
      HEAP32[$4_1 + 7512 >> 2] = 0;
      HEAP32[$4_1 + 7516 >> 2] = 0;
      break label$183;
     }
     HEAP32[$4_1 + 7512 >> 2] = 0;
     HEAP32[$4_1 + 7516 >> 2] = 0;
     $3 = HEAP32[$4_1 + 7508 >> 2];
     $0_1 = HEAP32[$4_1 + 7564 >> 2];
     HEAP32[($3 + ($0_1 << 2) | 0) + 756 >> 2] = 0;
     $3 = $3 + ($0_1 << 4) | 0;
     $0_1 = $3 + 772 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     $0_1 = $3 + 764 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     HEAP32[$4_1 + 7576 >> 2] = 0;
     HEAP32[$4_1 + 7580 >> 2] = 0;
     HEAP8[$4_1 + 7574 | 0] = 0;
     HEAP16[$4_1 + 7572 >> 1] = 257;
     $0_1 = $4_1 + 7584 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     HEAP32[$4_1 + 7592 >> 2] = 0;
    }
    if (HEAPU16[$2_1 + 298 >> 1] != 2) {
     break label$164
    }
    HEAP32[$13 + 7564 >> 2] = 1;
   }
   HEAP32[$13 + 7844 >> 2] = 0;
  }
  label$185 : {
   if (!$9) {
    break label$185
   }
   $0_1 = HEAP32[$13 + 7508 >> 2];
   if (!$0_1) {
    break label$185
   }
   $2_1 = HEAP32[18392];
   $3 = HEAP32[$2_1 + 7136 >> 2];
   HEAP8[$2_1 + 7148 | 0] = ($3 | 0) != 0;
   if ($3) {
    HEAP32[$2_1 + 7192 >> 2] = -1;
    HEAP8[$2_1 + 7151 | 0] = 0;
    HEAP8[$2_1 + 7152 | 0] = 0;
    HEAP32[$2_1 + 7144 >> 2] = 0;
   }
   HEAP32[$2_1 + 7184 >> 2] = 0;
   HEAP8[$2_1 + 7149 | 0] = 0;
   HEAP8[$2_1 + 7150 | 0] = 0;
   HEAP32[$2_1 + 7136 >> 2] = 0;
   HEAP32[$2_1 + 7168 >> 2] = 0;
   HEAP32[$2_1 + 7172 >> 2] = 0;
   HEAP32[$2_1 + 7156 >> 2] = 0;
   HEAP32[$2_1 + 7160 >> 2] = 0;
   HEAP8[$2_1 + 7153 | 0] = 0;
   HEAP8[$2_1 + 7154 | 0] = 0;
   $3 = $0_1;
   while (1) {
    $2_1 = $3;
    $3 = HEAP32[$3 + 728 >> 2];
    if (!(!$3 | HEAPU8[$2_1 + 296 | 0] & 2) & (HEAP32[$2_1 + 8 >> 2] & 352321536) == 16777216) {
     continue
    }
    break;
   };
   if (($0_1 | 0) != ($2_1 | 0)) {
    $125($2_1);
    HEAP32[$2_1 + 752 >> 2] = $0_1;
   }
   $0_1 = HEAP32[$13 + 7508 >> 2];
   $4_1 = HEAPU8[$0_1 + 296 | 0] & 2 ? HEAP32[$13 + 7564 >> 2] ^ 1 : 0;
   if (($4_1 | 0) == HEAP32[$13 + 7564 >> 2]) {
    break label$185
   }
   if (($4_1 | 0) == 1) {
    HEAP32[$0_1 + 760 >> 2] = 0
   }
   $9 = HEAP32[18392];
   if (!$4_1) {
    $0_1 = HEAP32[$9 + 7508 >> 2];
    $3 = HEAP32[$0_1 + 752 >> 2];
    if (HEAPU8[$3 + 139 | 0] ? $3 : 0) {
     $0_1 = $3
    }
    HEAP32[$9 + 7508 >> 2] = $0_1;
   }
   $2_1 = HEAP32[$9 + 7508 >> 2];
   $3 = ($2_1 + ($4_1 << 2) | 0) + 756 | 0;
   $0_1 = HEAP32[$3 >> 2];
   label$195 : {
    if ($0_1) {
     HEAP32[$9 + 7564 >> 2] = $4_1;
     HEAP32[$9 + 7512 >> 2] = $0_1;
     HEAP32[$9 + 7516 >> 2] = 0;
     HEAP32[$3 >> 2] = $0_1;
     break label$195;
    }
    HEAP32[$9 + 7564 >> 2] = $4_1;
    if (HEAPU8[$2_1 + 10 | 0] & 4) {
     HEAP32[$9 + 7512 >> 2] = 0;
     HEAP32[$9 + 7516 >> 2] = 0;
     break label$195;
    }
    HEAP32[$9 + 7512 >> 2] = 0;
    HEAP32[$9 + 7516 >> 2] = 0;
    HEAP32[$3 >> 2] = 0;
    $3 = $2_1 + ($4_1 << 4) | 0;
    $0_1 = $3 + 772 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    $0_1 = $3 + 764 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$9 + 7576 >> 2] = 0;
    HEAP32[$9 + 7580 >> 2] = 0;
    HEAP8[$9 + 7574 | 0] = 0;
    HEAP16[$9 + 7572 >> 1] = 257;
    $0_1 = $9 + 7584 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$9 + 7592 >> 2] = 0;
   }
   HEAP8[$9 + 7571 | 0] = 1;
   HEAP8[$9 + 7569 | 0] = 1;
   HEAP8[$9 + 7570 | 0] = 0;
  }
  $2_1 = $11_1 + 854 | 0;
  label$198 : {
   label$199 : {
    label$200 : {
     $9 = $10_1 | $22_1;
     if (($9 | 0) != 1) {
      break label$200
     }
     $0_1 = HEAP32[$11_1 + 7508 >> 2];
     if (!$0_1) {
      break label$200
     }
     $0_1 = HEAP32[$0_1 + 8 >> 2] & 262144;
     HEAP8[$11_1 + 853 | 0] = !$0_1;
     if (HEAPU8[$11_1 + 7570 | 0] | (!HEAP32[$11_1 + 7512 >> 2] | $0_1)) {
      break label$199
     }
     $0_1 = 1;
     break label$198;
    }
    HEAP8[$11_1 + 853 | 0] = 0;
   }
   $0_1 = HEAP32[$11_1 + 7844 >> 2] != 0;
  }
  HEAP8[$2_1 | 0] = $0_1;
  $2_1 = HEAP32[18392];
  $1_1 = HEAPF32[$2_1 + 5240 >> 2];
  label$201 : {
   if (!(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0))) {
    break label$201
   }
   if (HEAP32[$2_1 + 7136 >> 2]) {
    if (HEAPU8[$2_1 + 7160 | 0] & 2) {
     break label$201
    }
    HEAP32[$2_1 + 7192 >> 2] = -1;
    HEAP8[$2_1 + 7152 | 0] = 0;
    HEAP32[$2_1 + 7184 >> 2] = 0;
    HEAP32[$2_1 + 7144 >> 2] = 0;
    HEAP32[$2_1 + 7148 >> 2] = 1;
    HEAP32[$2_1 + 7136 >> 2] = 0;
    HEAP32[$2_1 + 7168 >> 2] = 0;
    HEAP32[$2_1 + 7172 >> 2] = 0;
    HEAP32[$2_1 + 7156 >> 2] = 0;
    HEAP32[$2_1 + 7160 >> 2] = 0;
    HEAP8[$2_1 + 7153 | 0] = 0;
    HEAP8[$2_1 + 7154 | 0] = 0;
    break label$201;
   }
   $3 = HEAP32[$2_1 + 7508 >> 2];
   if (HEAP32[$2_1 + 7564 >> 2]) {
    $0_1 = HEAP32[$3 + 752 >> 2];
    if (!(HEAPU8[$0_1 + 139 | 0] ? $0_1 : 0)) {
     $0_1 = $3
    }
    HEAP32[$2_1 + 7508 >> 2] = $0_1;
    $3 = HEAP32[$0_1 + 756 >> 2];
    label$206 : {
     if ($3) {
      HEAP32[$2_1 + 7564 >> 2] = 0;
      HEAP32[$2_1 + 7512 >> 2] = $3;
      HEAP32[$2_1 + 7516 >> 2] = 0;
      HEAP32[$0_1 + 756 >> 2] = $3;
      break label$206;
     }
     HEAP32[$2_1 + 7564 >> 2] = 0;
     if (HEAPU8[$0_1 + 10 | 0] & 4) {
      HEAP32[$2_1 + 7512 >> 2] = 0;
      HEAP32[$2_1 + 7516 >> 2] = 0;
      break label$206;
     }
     HEAP32[$2_1 + 7512 >> 2] = 0;
     HEAP32[$2_1 + 7516 >> 2] = 0;
     HEAP32[$0_1 + 764 >> 2] = 0;
     HEAP32[$0_1 + 768 >> 2] = 0;
     HEAP32[$0_1 + 756 >> 2] = 0;
     $0_1 = $0_1 + 772 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 7576 >> 2] = 0;
     HEAP32[$2_1 + 7580 >> 2] = 0;
     HEAP8[$2_1 + 7574 | 0] = 0;
     HEAP16[$2_1 + 7572 >> 1] = 257;
     $0_1 = $2_1 + 7584 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 7592 >> 2] = 0;
    }
    HEAP8[$2_1 + 7571 | 0] = 1;
    HEAP8[$2_1 + 7569 | 0] = 1;
    HEAP8[$2_1 + 7570 | 0] = 0;
    break label$201;
   }
   label$209 : {
    if (HEAPU8[$3 + 11 | 0] & 4 | (!$3 | ($3 | 0) == HEAP32[$3 + 736 >> 2])) {
     break label$209
    }
    $0_1 = HEAP32[$3 + 728 >> 2];
    if (!$0_1) {
     break label$209
    }
    $8 = HEAPF32[$3 + 24 >> 2];
    $16_1 = HEAPF32[$3 + 16 >> 2];
    $1_1 = HEAPF32[$3 + 20 >> 2];
    $17_1 = HEAPF32[$3 + 12 >> 2];
    $125($0_1);
    $6_1 = HEAPF32[$0_1 + 224 >> 2];
    $5_1 = HEAPF32[$0_1 + 228 >> 2];
    $0_1 = HEAP32[$3 + 84 >> 2];
    $2_1 = HEAP32[18392];
    HEAP32[$2_1 + 7564 >> 2] = 0;
    HEAP32[$2_1 + 7512 >> 2] = $0_1;
    HEAP32[$2_1 + 7516 >> 2] = 0;
    $3 = HEAP32[$2_1 + 7508 >> 2];
    HEAPF32[$3 + 776 >> 2] = Math_fround($16_1 + $8) - $5_1;
    HEAPF32[$3 + 772 >> 2] = Math_fround($17_1 + $1_1) - $6_1;
    HEAPF32[$3 + 768 >> 2] = $16_1 - $5_1;
    HEAPF32[$3 + 764 >> 2] = $17_1 - $6_1;
    HEAP32[$3 + 756 >> 2] = $0_1;
    HEAP8[$2_1 + 7571 | 0] = 1;
    HEAP8[$2_1 + 7569 | 0] = 1;
    HEAP8[$2_1 + 7570 | 0] = 0;
    break label$201;
   }
   $0_1 = HEAP32[$2_1 + 7468 >> 2];
   if (($0_1 | 0) > 0) {
    $0_1 = $0_1 - 1 | 0;
    if (HEAPU8[HEAP32[(HEAP32[$2_1 + 7476 >> 2] + Math_imul($0_1, 36) | 0) + 4 >> 2] + 11 | 0] & 8) {
     break label$201
    }
    $132($0_1, 1);
    break label$201;
   }
   if (!(!$3 | (HEAP32[$3 + 8 >> 2] & 83886080) == 16777216)) {
    HEAP32[$3 + 756 >> 2] = 0
   }
   HEAP32[$2_1 + 7512 >> 2] = 0;
   HEAP32[$2_1 + 7516 >> 2] = 0;
  }
  HEAP32[$11_1 + 7520 >> 2] = 0;
  HEAP32[$11_1 + 7524 >> 2] = 0;
  HEAP32[$11_1 + 7536 >> 2] = 0;
  $0_1 = $11_1 + 7528 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$11_1 + 7512 >> 2];
  label$212 : {
   if (HEAP32[$11_1 + 7844 >> 2] | (HEAPU8[$11_1 + 7570 | 0] | !$2_1)) {
    break label$212
   }
   $0_1 = HEAP32[$11_1 + 7508 >> 2];
   if (!$0_1 | HEAPU8[$0_1 + 10 | 0] & 4) {
    break label$212
   }
   $3 = HEAP32[18392];
   $8 = HEAPF32[$3 + 776 >> 2];
   $4_1 = 0;
   $5_1 = HEAPF32[$3 + 768 >> 2];
   if ($5_1 > Math_fround(0.0)) {
    $1_1 = HEAPF32[$3 + 5236 >> 2];
    $4_1 = ($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0);
   }
   $0_1 = 0;
   if ($8 > Math_fround(0.0)) {
    $1_1 = HEAPF32[$3 + 5244 >> 2];
    $0_1 = ($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)) > Math_fround(0.0);
   }
   $3 = HEAP32[$11_1 + 7136 >> 2];
   if (!($4_1 ^ 1 | ($3 | 0) != 0)) {
    HEAP32[$11_1 + 7536 >> 2] = 2;
    HEAP32[$11_1 + 7520 >> 2] = $2_1;
   }
   label$216 : {
    label$217 : {
     if ($3) {
      if (($3 | 0) == ($2_1 | 0) & $0_1) {
       break label$217
      }
      break label$216;
     }
     if (!$0_1) {
      break label$216
     }
    }
    HEAP32[$11_1 + 7536 >> 2] = 1;
    HEAP32[$11_1 + 7532 >> 2] = $2_1;
   }
   label$219 : {
    label$220 : {
     if ($3) {
      if (!($5_1 > Math_fround(0.0))) {
       break label$219
      }
      if (($3 | 0) == ($2_1 | 0)) {
       break label$220
      }
      break label$219;
     }
     if (!($5_1 > Math_fround(0.0))) {
      break label$219
     }
    }
    HEAP32[$11_1 + 7524 >> 2] = $2_1;
   }
   label$222 : {
    if ($3) {
     if (($3 | 0) == ($2_1 | 0) & $4_1) {
      break label$222
     }
     break label$212;
    }
    if (!$4_1) {
     break label$212
    }
   }
   HEAP32[$11_1 + 7528 >> 2] = $2_1;
  }
  $0_1 = HEAP32[$11_1 + 7508 >> 2];
  if (!(!$0_1 | !(HEAPU8[$0_1 + 10 | 0] & 4))) {
   HEAP8[$11_1 + 7570 | 0] = 1
  }
  $3 = HEAP32[$11_1 + 7552 >> 2];
  if ($3) {
   $0_1 = HEAP32[$11_1 + 7556 >> 2];
   label$226 : {
    if ($0_1 & 1) {
     HEAP32[$11_1 + 7532 >> 2] = $3;
     break label$226;
    }
    HEAP32[$11_1 + 7524 >> 2] = $3;
    HEAP32[$11_1 + 7528 >> 2] = $3;
    HEAP32[$11_1 + 7520 >> 2] = $3;
   }
   HEAP32[$11_1 + 7536 >> 2] = $0_1;
  }
  HEAP32[$11_1 + 7552 >> 2] = 0;
  $10_1 = HEAP32[18392];
  $3 = HEAP32[$10_1 + 7508 >> 2];
  if (!($3 ? HEAPU8[$10_1 + 7598 | 0] : 0)) {
   HEAP32[$10_1 + 7600 >> 2] = 0;
   HEAP32[$10_1 + 7604 >> 2] = 0;
   HEAP32[$10_1 + 7612 >> 2] = -1;
   label$230 : {
    if (HEAPU8[$3 + 10 | 0] & 4 | (HEAP32[$10_1 + 7844 >> 2] | !$3)) {
     break label$230
    }
    $2_1 = HEAP32[$10_1 + 7156 >> 2];
    label$231 : {
     if ($2_1 & 1) {
      break label$231
     }
     $6_1 = HEAPF32[$10_1 + 5252 >> 2];
     if ($6_1 < Math_fround(0.0)) {
      $1_1 = Math_fround(0.0)
     } else {
      $0_1 = 1;
      label$233 : {
       if ($6_1 == Math_fround(0.0)) {
        break label$233
       }
       $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
       $0_1 = 0;
       if ($1_1 >= $6_1) {
        break label$233
       }
       $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
       $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
       $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
       if ($8 <= Math_fround(0.0)) {
        break label$233
       }
       if ($1_1 < $5_1) {
        $0_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
        label$236 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $0_1 = ~~$1_1;
          break label$236;
         }
         $0_1 = -2147483648;
        }
       }
       if ($5_1 > $6_1) {
        $4_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
        label$239 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $4_1 = ~~$1_1;
          break label$239;
         }
         $4_1 = -2147483648;
        }
       }
       $0_1 = $4_1 - $0_1 | 0;
      }
      $1_1 = Math_fround($0_1 | 0);
     }
     if (!($1_1 > Math_fround(0.0))) {
      $6_1 = HEAPF32[$10_1 + 5300 >> 2];
      if ($6_1 < Math_fround(0.0)) {
       $1_1 = Math_fround(0.0)
      } else {
       $0_1 = 1;
       label$243 : {
        if ($6_1 == Math_fround(0.0)) {
         break label$243
        }
        $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
        $0_1 = 0;
        if ($1_1 >= $6_1) {
         break label$243
        }
        $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
        $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
        $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
        if ($8 <= Math_fround(0.0)) {
         break label$243
        }
        if ($1_1 < $5_1) {
         $0_1 = -1
        } else {
         $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
         label$246 : {
          if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
           $0_1 = ~~$1_1;
           break label$246;
          }
          $0_1 = -2147483648;
         }
        }
        if ($5_1 > $6_1) {
         $4_1 = -1
        } else {
         $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
         label$249 : {
          if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
           $4_1 = ~~$1_1;
           break label$249;
          }
          $4_1 = -2147483648;
         }
        }
        $0_1 = $4_1 - $0_1 | 0;
       }
       $1_1 = Math_fround($0_1 | 0);
      }
      if (!($1_1 > Math_fround(0.0))) {
       break label$231
      }
     }
     HEAP32[$10_1 + 7612 >> 2] = 0;
    }
    label$251 : {
     if ($2_1 & 2) {
      break label$251
     }
     $6_1 = HEAPF32[$10_1 + 5256 >> 2];
     if ($6_1 < Math_fround(0.0)) {
      $1_1 = Math_fround(0.0)
     } else {
      $0_1 = 1;
      label$253 : {
       if ($6_1 == Math_fround(0.0)) {
        break label$253
       }
       $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
       $0_1 = 0;
       if ($1_1 >= $6_1) {
        break label$253
       }
       $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
       $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
       $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
       if ($8 <= Math_fround(0.0)) {
        break label$253
       }
       if ($1_1 < $5_1) {
        $0_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
        label$256 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $0_1 = ~~$1_1;
          break label$256;
         }
         $0_1 = -2147483648;
        }
       }
       if ($5_1 > $6_1) {
        $4_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
        label$259 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $4_1 = ~~$1_1;
          break label$259;
         }
         $4_1 = -2147483648;
        }
       }
       $0_1 = $4_1 - $0_1 | 0;
      }
      $1_1 = Math_fround($0_1 | 0);
     }
     if (!($1_1 > Math_fround(0.0))) {
      $6_1 = HEAPF32[$10_1 + 5304 >> 2];
      if ($6_1 < Math_fround(0.0)) {
       $1_1 = Math_fround(0.0)
      } else {
       $0_1 = 1;
       label$263 : {
        if ($6_1 == Math_fround(0.0)) {
         break label$263
        }
        $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
        $0_1 = 0;
        if ($1_1 >= $6_1) {
         break label$263
        }
        $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
        $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
        $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
        if ($8 <= Math_fround(0.0)) {
         break label$263
        }
        if ($1_1 < $5_1) {
         $0_1 = -1
        } else {
         $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
         label$266 : {
          if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
           $0_1 = ~~$1_1;
           break label$266;
          }
          $0_1 = -2147483648;
         }
        }
        if ($5_1 > $6_1) {
         $4_1 = -1
        } else {
         $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
         label$269 : {
          if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
           $4_1 = ~~$1_1;
           break label$269;
          }
          $4_1 = -2147483648;
         }
        }
        $0_1 = $4_1 - $0_1 | 0;
       }
       $1_1 = Math_fround($0_1 | 0);
      }
      if (!($1_1 > Math_fround(0.0))) {
       break label$251
      }
     }
     HEAP32[$10_1 + 7612 >> 2] = 1;
    }
    label$271 : {
     if ($2_1 & 4) {
      break label$271
     }
     $6_1 = HEAPF32[$10_1 + 5260 >> 2];
     if ($6_1 < Math_fround(0.0)) {
      $1_1 = Math_fround(0.0)
     } else {
      $0_1 = 1;
      label$273 : {
       if ($6_1 == Math_fround(0.0)) {
        break label$273
       }
       $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
       $0_1 = 0;
       if ($1_1 >= $6_1) {
        break label$273
       }
       $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
       $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
       $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
       if ($8 <= Math_fround(0.0)) {
        break label$273
       }
       if ($1_1 < $5_1) {
        $0_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
        label$276 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $0_1 = ~~$1_1;
          break label$276;
         }
         $0_1 = -2147483648;
        }
       }
       if ($5_1 > $6_1) {
        $4_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
        label$279 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $4_1 = ~~$1_1;
          break label$279;
         }
         $4_1 = -2147483648;
        }
       }
       $0_1 = $4_1 - $0_1 | 0;
      }
      $1_1 = Math_fround($0_1 | 0);
     }
     if (!($1_1 > Math_fround(0.0))) {
      $6_1 = HEAPF32[$10_1 + 5308 >> 2];
      if ($6_1 < Math_fround(0.0)) {
       $1_1 = Math_fround(0.0)
      } else {
       $0_1 = 1;
       label$283 : {
        if ($6_1 == Math_fround(0.0)) {
         break label$283
        }
        $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
        $0_1 = 0;
        if ($1_1 >= $6_1) {
         break label$283
        }
        $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
        $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
        $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
        if ($8 <= Math_fround(0.0)) {
         break label$283
        }
        if ($1_1 < $5_1) {
         $0_1 = -1
        } else {
         $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
         label$286 : {
          if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
           $0_1 = ~~$1_1;
           break label$286;
          }
          $0_1 = -2147483648;
         }
        }
        if ($5_1 > $6_1) {
         $4_1 = -1
        } else {
         $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
         label$289 : {
          if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
           $4_1 = ~~$1_1;
           break label$289;
          }
          $4_1 = -2147483648;
         }
        }
        $0_1 = $4_1 - $0_1 | 0;
       }
       $1_1 = Math_fround($0_1 | 0);
      }
      if (!($1_1 > Math_fround(0.0))) {
       break label$271
      }
     }
     HEAP32[$10_1 + 7612 >> 2] = 2;
    }
    if ($2_1 & 8) {
     break label$230
    }
    $6_1 = HEAPF32[$10_1 + 5264 >> 2];
    if ($6_1 < Math_fround(0.0)) {
     $1_1 = Math_fround(0.0)
    } else {
     $0_1 = 1;
     label$292 : {
      if ($6_1 == Math_fround(0.0)) {
       break label$292
      }
      $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
      $0_1 = 0;
      if ($1_1 >= $6_1) {
       break label$292
      }
      $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
      $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
      $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
      if ($8 <= Math_fround(0.0)) {
       break label$292
      }
      if ($1_1 < $5_1) {
       $0_1 = -1
      } else {
       $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
       label$295 : {
        if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
         $0_1 = ~~$1_1;
         break label$295;
        }
        $0_1 = -2147483648;
       }
      }
      if ($5_1 > $6_1) {
       $2_1 = -1
      } else {
       $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
       label$298 : {
        if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
         $2_1 = ~~$1_1;
         break label$298;
        }
        $2_1 = -2147483648;
       }
      }
      $0_1 = $2_1 - $0_1 | 0;
     }
     $1_1 = Math_fround($0_1 | 0);
    }
    if (!($1_1 > Math_fround(0.0))) {
     $6_1 = HEAPF32[$10_1 + 5312 >> 2];
     if ($6_1 < Math_fround(0.0)) {
      $1_1 = Math_fround(0.0)
     } else {
      $0_1 = 1;
      label$302 : {
       if ($6_1 == Math_fround(0.0)) {
        break label$302
       }
       $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
       $0_1 = 0;
       if ($1_1 >= $6_1) {
        break label$302
       }
       $5_1 = Math_fround(HEAPF32[$10_1 + 140 >> 2] * Math_fround(.7200000286102295));
       $8 = Math_fround(HEAPF32[$10_1 + 144 >> 2] * Math_fround(.800000011920929));
       $0_1 = $5_1 > $1_1 & $5_1 <= $6_1;
       if ($8 <= Math_fround(0.0)) {
        break label$302
       }
       if ($1_1 < $5_1) {
        $0_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
        label$305 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $0_1 = ~~$1_1;
          break label$305;
         }
         $0_1 = -2147483648;
        }
       }
       if ($5_1 > $6_1) {
        $2_1 = -1
       } else {
        $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
        label$308 : {
         if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
          $2_1 = ~~$1_1;
          break label$308;
         }
         $2_1 = -2147483648;
        }
       }
       $0_1 = $2_1 - $0_1 | 0;
      }
      $1_1 = Math_fround($0_1 | 0);
     }
     if (!($1_1 > Math_fround(0.0))) {
      break label$230
     }
    }
    HEAP32[$10_1 + 7612 >> 2] = 3;
   }
   HEAP32[$10_1 + 7640 >> 2] = 2139095039;
   HEAP32[$10_1 + 7644 >> 2] = 2139095039;
   $0_1 = $10_1 + 7648 | 0;
   HEAP32[$0_1 >> 2] = -8388609;
   HEAP32[$0_1 + 4 >> 2] = -8388609;
   HEAP32[$10_1 + 7620 >> 2] = HEAP32[$10_1 + 7612 >> 2];
  }
  $19 = Math_fround(0.0);
  label$310 : {
   if (HEAP32[$10_1 + 7844 >> 2] | (!$3 | HEAP32[$10_1 + 7612 >> 2] != -1 | (!(HEAP32[$10_1 + 8 >> 2] & 1) | HEAPU8[$3 + 10 | 0] & 4))) {
    break label$310
   }
   $0_1 = HEAP32[$10_1 + 72 >> 2];
   $4_1 = 0;
   label$311 : {
    if (($0_1 | 0) < 0) {
     break label$311
    }
    $4_1 = 0;
    if (!HEAPU8[($0_1 + $10_1 | 0) + 256 | 0]) {
     break label$311
    }
    $4_1 = !(HEAPU8[$10_1 + 7168 | 0] & 32);
   }
   $0_1 = HEAP32[$10_1 + 76 >> 2];
   $2_1 = 0;
   label$312 : {
    if (($0_1 | 0) < 0) {
     break label$312
    }
    $2_1 = 0;
    if (!HEAPU8[($0_1 + $10_1 | 0) + 256 | 0]) {
     break label$312
    }
    $2_1 = !(HEAPU8[$10_1 + 7168 | 0] & 64);
   }
   $0_1 = HEAP32[$10_1 + 80 >> 2];
   $15_1 = 0;
   label$314 : {
    if (($0_1 | 0) < 0) {
     break label$314
    }
    $6_1 = HEAPF32[($10_1 + ($0_1 << 2) | 0) + 1140 >> 2];
    $0_1 = $6_1 == Math_fround(0.0);
    label$315 : {
     if ($0_1) {
      break label$315
     }
     $5_1 = HEAPF32[$10_1 + 140 >> 2];
     $15_1 = 0;
     if (!($5_1 < $6_1)) {
      break label$314
     }
     $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
     $15_1 = 0;
     if ($1_1 >= $6_1) {
      break label$314
     }
     $8 = HEAPF32[$10_1 + 144 >> 2];
     if ($8 <= Math_fround(0.0)) {
      $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
      break label$315;
     }
     if ($1_1 < $5_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
      label$318 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$318;
       }
       $0_1 = -2147483648;
      }
     }
     if ($5_1 > $6_1) {
      $12_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
      label$321 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $12_1 = ~~$1_1;
        break label$321;
       }
       $12_1 = -2147483648;
      }
     }
     $0_1 = ($12_1 | 0) > ($0_1 | 0);
    }
    $15_1 = 0;
    if (!$0_1) {
     break label$314
    }
    $15_1 = !(HEAPU8[$10_1 + 7168 | 0] & 128);
   }
   $0_1 = HEAP32[$10_1 + 84 >> 2];
   $12_1 = 0;
   label$323 : {
    if (($0_1 | 0) < 0) {
     break label$323
    }
    $6_1 = HEAPF32[($10_1 + ($0_1 << 2) | 0) + 1140 >> 2];
    $0_1 = $6_1 == Math_fround(0.0);
    label$325 : {
     if ($0_1) {
      break label$325
     }
     $5_1 = HEAPF32[$10_1 + 140 >> 2];
     $12_1 = 0;
     if (!($5_1 < $6_1)) {
      break label$323
     }
     $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
     $12_1 = 0;
     if ($6_1 <= $1_1) {
      break label$323
     }
     $8 = HEAPF32[$10_1 + 144 >> 2];
     if ($8 <= Math_fround(0.0)) {
      $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
      break label$325;
     }
     if ($1_1 < $5_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
      label$330 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$330;
       }
       $0_1 = -2147483648;
      }
     }
     if ($5_1 > $6_1) {
      $12_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
      label$333 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $12_1 = ~~$1_1;
        break label$333;
       }
       $12_1 = -2147483648;
      }
     }
     $0_1 = ($12_1 | 0) > ($0_1 | 0);
    }
    $12_1 = 0;
    if (!$0_1) {
     break label$323
    }
    $12_1 = !(HEAP8[$10_1 + 7169 | 0] & 1);
   }
   if (($2_1 | 0) == ($4_1 | 0)) {
    if (!($12_1 ^ $15_1)) {
     break label$310
    }
   }
   label$336 : {
    if (!HEAP32[$10_1 + 7564 >> 2]) {
     break label$336
    }
    $0_1 = HEAP32[$3 + 752 >> 2];
    if (!(HEAPU8[$0_1 + 139 | 0] ? $0_1 : 0)) {
     $0_1 = $3
    }
    HEAP32[$10_1 + 7508 >> 2] = $0_1;
    $2_1 = HEAP32[$0_1 + 756 >> 2];
    if ($2_1) {
     HEAP32[$10_1 + 7564 >> 2] = 0;
     HEAP32[$10_1 + 7512 >> 2] = $2_1;
     HEAP32[$10_1 + 7516 >> 2] = 0;
     HEAP32[$0_1 + 756 >> 2] = $2_1;
     break label$336;
    }
    HEAP32[$10_1 + 7564 >> 2] = 0;
    if (HEAPU8[$0_1 + 10 | 0] & 4) {
     HEAP32[$10_1 + 7512 >> 2] = 0;
     HEAP32[$10_1 + 7516 >> 2] = 0;
     break label$336;
    }
    HEAP32[$10_1 + 7512 >> 2] = 0;
    HEAP32[$10_1 + 7516 >> 2] = 0;
    HEAP32[$0_1 + 764 >> 2] = 0;
    HEAP32[$0_1 + 768 >> 2] = 0;
    HEAP32[$0_1 + 756 >> 2] = 0;
    $0_1 = $0_1 + 772 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$10_1 + 7576 >> 2] = 0;
    HEAP32[$10_1 + 7580 >> 2] = 0;
    HEAP8[$10_1 + 7574 | 0] = 0;
    HEAP16[$10_1 + 7572 >> 1] = 257;
    $0_1 = $10_1 + 7584 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$10_1 + 7592 >> 2] = 0;
   }
   if (!(HEAPU16[$3 + 296 >> 1] | !HEAPU8[$3 + 305 | 0])) {
    label$342 : {
     $0_1 = HEAP32[$10_1 + 72 >> 2];
     if (($0_1 | 0) < 0) {
      break label$342
     }
     $6_1 = HEAPF32[($10_1 + ($0_1 << 2) | 0) + 1140 >> 2];
     $0_1 = $6_1 == Math_fround(0.0);
     label$343 : {
      if ($0_1) {
       break label$343
      }
      $5_1 = HEAPF32[$10_1 + 140 >> 2];
      if (!($5_1 < $6_1)) {
       break label$342
      }
      $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
      if ($1_1 >= $6_1) {
       break label$342
      }
      $8 = HEAPF32[$10_1 + 144 >> 2];
      if ($8 <= Math_fround(0.0)) {
       $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
       break label$343;
      }
      if ($1_1 < $5_1) {
       $0_1 = -1
      } else {
       $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
       label$346 : {
        if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
         $0_1 = ~~$1_1;
         break label$346;
        }
        $0_1 = -2147483648;
       }
      }
      if ($5_1 > $6_1) {
       $2_1 = -1
      } else {
       $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
       label$349 : {
        if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
         $2_1 = ~~$1_1;
         break label$349;
        }
        $2_1 = -2147483648;
       }
      }
      $0_1 = ($2_1 | 0) > ($0_1 | 0);
     }
     if (!$0_1) {
      break label$342
     }
     HEAP32[$3 + 124 >> 2] = 0;
     HEAP32[$3 + 116 >> 2] = 0;
     HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 92 >> 2] - Math_fround(HEAPF32[$3 + 444 >> 2] - HEAPF32[$3 + 436 >> 2]);
     break label$310;
    }
    label$351 : {
     $0_1 = HEAP32[$10_1 + 76 >> 2];
     if (($0_1 | 0) < 0) {
      break label$351
     }
     $6_1 = HEAPF32[($10_1 + ($0_1 << 2) | 0) + 1140 >> 2];
     $0_1 = $6_1 == Math_fround(0.0);
     label$352 : {
      if ($0_1) {
       break label$352
      }
      $5_1 = HEAPF32[$10_1 + 140 >> 2];
      if (!($5_1 < $6_1)) {
       break label$351
      }
      $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
      if ($1_1 >= $6_1) {
       break label$351
      }
      $8 = HEAPF32[$10_1 + 144 >> 2];
      if ($8 <= Math_fround(0.0)) {
       $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
       break label$352;
      }
      if ($1_1 < $5_1) {
       $0_1 = -1
      } else {
       $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
       label$355 : {
        if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
         $0_1 = ~~$1_1;
         break label$355;
        }
        $0_1 = -2147483648;
       }
      }
      if ($5_1 > $6_1) {
       $2_1 = -1
      } else {
       $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
       label$358 : {
        if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
         $2_1 = ~~$1_1;
         break label$358;
        }
        $2_1 = -2147483648;
       }
      }
      $0_1 = ($2_1 | 0) > ($0_1 | 0);
     }
     if (!$0_1) {
      break label$351
     }
     HEAP32[$3 + 124 >> 2] = 0;
     HEAP32[$3 + 116 >> 2] = 0;
     HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 92 >> 2] + Math_fround(HEAPF32[$3 + 444 >> 2] - HEAPF32[$3 + 436 >> 2]);
     break label$310;
    }
    if ($15_1) {
     HEAP32[$3 + 124 >> 2] = 0;
     HEAP32[$3 + 116 >> 2] = 0;
     HEAP32[$3 + 108 >> 2] = 0;
     break label$310;
    }
    if (!$12_1) {
     break label$310
    }
    HEAP32[$3 + 124 >> 2] = 0;
    HEAP32[$3 + 116 >> 2] = 0;
    HEAPF32[$3 + 108 >> 2] = HEAPF32[$3 + 100 >> 2];
    break label$310;
   }
   $1_1 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$3 + 572 >> 2]);
   $4_1 = HEAP32[$10_1 + 7564 >> 2];
   $2_1 = $3 + ($4_1 << 4) | 0;
   $22_1 = $2_1 + 764 | 0;
   $5_1 = Math_fround(HEAPF32[$3 + 444 >> 2] - HEAPF32[$3 + 436 >> 2]);
   $0_1 = HEAP32[$3 + 728 >> 2];
   if ($0_1) {
    $1_1 = Math_fround($1_1 * HEAPF32[$0_1 + 572 >> 2])
   }
   $2_1 = $2_1 + 776 | 0;
   $1_1 = Math_fround(Math_fround($5_1 - $1_1) + Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$22_1 + 4 >> 2]));
   $19 = $1_1 <= Math_fround(0.0) ? Math_fround(0.0) : $1_1;
   label$363 : {
    $0_1 = HEAP32[$10_1 + 72 >> 2];
    if (($0_1 | 0) < 0) {
     break label$363
    }
    $6_1 = HEAPF32[($10_1 + ($0_1 << 2) | 0) + 1140 >> 2];
    $0_1 = $6_1 == Math_fround(0.0);
    label$364 : {
     if ($0_1) {
      break label$364
     }
     $5_1 = HEAPF32[$10_1 + 140 >> 2];
     if (!($5_1 < $6_1)) {
      break label$363
     }
     $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
     if ($1_1 >= $6_1) {
      break label$363
     }
     $8 = HEAPF32[$10_1 + 144 >> 2];
     if ($8 <= Math_fround(0.0)) {
      $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
      break label$364;
     }
     if ($1_1 < $5_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
      label$367 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$367;
       }
       $0_1 = -2147483648;
      }
     }
     if ($5_1 > $6_1) {
      $21_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
      label$370 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $21_1 = ~~$1_1;
        break label$370;
       }
       $21_1 = -2147483648;
      }
     }
     $0_1 = ($21_1 | 0) > ($0_1 | 0);
    }
    if (!$0_1) {
     break label$363
    }
    HEAP32[$10_1 + 7620 >> 2] = 2;
    HEAP32[$10_1 + 7612 >> 2] = 3;
    HEAP32[$10_1 + 7600 >> 2] = 48;
    $19 = Math_fround(-$19);
    break label$310;
   }
   label$372 : {
    $0_1 = HEAP32[$10_1 + 76 >> 2];
    if (($0_1 | 0) < 0) {
     break label$372
    }
    $6_1 = HEAPF32[($10_1 + ($0_1 << 2) | 0) + 1140 >> 2];
    $0_1 = $6_1 == Math_fround(0.0);
    label$373 : {
     if ($0_1) {
      break label$373
     }
     $5_1 = HEAPF32[$10_1 + 140 >> 2];
     if (!($5_1 < $6_1)) {
      break label$372
     }
     $1_1 = Math_fround($6_1 - HEAPF32[$10_1 + 24 >> 2]);
     if ($1_1 >= $6_1) {
      break label$372
     }
     $8 = HEAPF32[$10_1 + 144 >> 2];
     if ($8 <= Math_fround(0.0)) {
      $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
      break label$373;
     }
     if ($1_1 < $5_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
      label$376 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$376;
       }
       $0_1 = -2147483648;
      }
     }
     if ($5_1 > $6_1) {
      $21_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
      label$379 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $21_1 = ~~$1_1;
        break label$379;
       }
       $21_1 = -2147483648;
      }
     }
     $0_1 = ($21_1 | 0) > ($0_1 | 0);
    }
    if (!$0_1) {
     break label$372
    }
    HEAP32[$10_1 + 7620 >> 2] = 3;
    HEAP32[$10_1 + 7612 >> 2] = 2;
    HEAP32[$10_1 + 7600 >> 2] = 48;
    break label$310;
   }
   if ($15_1) {
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$22_1 + 4 >> 2] = 0;
    $0_1 = ($3 + ($4_1 << 4) | 0) + 772 | 0;
    if (HEAPF32[$22_1 >> 2] > HEAPF32[$0_1 >> 2]) {
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$22_1 >> 2] = 0;
    }
    HEAP32[$10_1 + 7600 >> 2] = 80;
    HEAP32[$10_1 + 7612 >> 2] = 3;
    $19 = Math_fround(0.0);
    break label$310;
   }
   if ($12_1) {
    $1_1 = HEAPF32[$3 + 40 >> 2];
    HEAPF32[$2_1 >> 2] = $1_1;
    HEAPF32[$22_1 + 4 >> 2] = $1_1;
    $0_1 = ($3 + ($4_1 << 4) | 0) + 772 | 0;
    if (HEAPF32[$22_1 >> 2] > HEAPF32[$0_1 >> 2]) {
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$22_1 >> 2] = 0;
    }
    HEAP32[$10_1 + 7600 >> 2] = 80;
    HEAP32[$10_1 + 7612 >> 2] = 2;
   }
   $19 = Math_fround(0.0);
  }
  if ($19 != Math_fround(0.0)) {
   $0_1 = HEAP32[$3 + 436 >> 2];
   HEAP32[$10_1 + 7640 >> 2] = HEAP32[$3 + 432 >> 2];
   HEAP32[$10_1 + 7644 >> 2] = $0_1;
   $4_1 = $3 + 440 | 0;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $10_1 + 7648 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   $0_1 = $10_1 + 7644 | 0;
   HEAPF32[$0_1 >> 2] = $19 + HEAPF32[$0_1 >> 2];
   $0_1 = $10_1 + 7652 | 0;
   HEAPF32[$0_1 >> 2] = $19 + HEAPF32[$0_1 >> 2];
  }
  HEAP8[$10_1 + 7598 | 0] = 0;
  $0_1 = HEAP32[$10_1 + 7612 >> 2];
  if (($0_1 | 0) != -1) {
   HEAP32[$10_1 + 7616 >> 2] = $0_1;
   HEAP16[$10_1 + 7596 >> 1] = 257;
   HEAP8[$10_1 + 7598 | 0] = 0;
   HEAP32[$10_1 + 7664 >> 2] = 0;
   HEAP32[$10_1 + 7668 >> 2] = 0;
   HEAP32[$10_1 + 7712 >> 2] = 0;
   HEAP32[$10_1 + 7716 >> 2] = 0;
   HEAP32[$10_1 + 7756 >> 2] = 0;
   HEAP32[$10_1 + 7696 >> 2] = 0;
   $0_1 = $10_1 + 7672 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$10_1 + 7708 >> 2] = 2139095039;
   HEAP32[$10_1 + 7720 >> 2] = 0;
   $0_1 = $10_1 + 7700 | 0;
   HEAP32[$0_1 >> 2] = 2139095039;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   $0_1 = $10_1 + 7740 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   $0_1 = $10_1 + 7748 | 0;
   HEAP32[$0_1 >> 2] = 2139095039;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   HEAP32[$10_1 + 7764 >> 2] = 0;
   HEAP32[$10_1 + 7608 >> 2] = HEAP32[$10_1 + 892 >> 2];
   $0_1 = HEAP32[$10_1 + 7600 >> 2];
   HEAP32[$10_1 + 7600 >> 2] = $0_1 >>> 6 & 16 | $0_1;
   HEAP32[$10_1 + 7760 >> 2] = 0;
   $0_1 = $10_1 + 7792 | 0;
   HEAP32[$0_1 >> 2] = 2139095039;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   $0_1 = $10_1 + 7784 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   HEAP8[$10_1 + 7572 | 0] = 1;
  }
  label$387 : {
   if (!HEAPU8[$10_1 + 7596 | 0]) {
    break label$387
   }
   if (!HEAP32[$10_1 + 7512 >> 2]) {
    HEAP32[$10_1 + 7576 >> 2] = 0;
    HEAP8[$10_1 + 7573 | 0] = 1;
    HEAP8[$10_1 + 7574 | 0] = 1;
    HEAP8[$10_1 + 7570 | 0] = 0;
   }
   if (HEAP32[$10_1 + 7560 >> 2] != 3) {
    break label$387
   }
   $2_1 = HEAP32[$10_1 + 7564 >> 2];
   if ($2_1 | !$3) {
    break label$387
   }
   $8 = HEAPF32[$3 + 228 >> 2];
   $6_1 = Math_fround(Math_fround(HEAPF32[$3 + 444 >> 2] + Math_fround(1.0)) - $8);
   $1_1 = HEAPF32[$3 + 224 >> 2];
   $24 = Math_fround(Math_fround(HEAPF32[$3 + 440 >> 2] + Math_fround(1.0)) - $1_1);
   $4_1 = ($3 + ($2_1 << 4) | 0) + 764 | 0;
   $16_1 = HEAPF32[$4_1 >> 2];
   $5_1 = Math_fround(Math_fround(HEAPF32[$3 + 432 >> 2] + Math_fround(-1.0)) - $1_1);
   $1_1 = Math_fround(Math_fround(HEAPF32[$3 + 436 >> 2] + Math_fround(-1.0)) - $8);
   label$389 : {
    if (!($16_1 >= $5_1) | !($1_1 <= HEAPF32[$4_1 + 4 >> 2])) {
     break label$389
    }
    $0_1 = $3 + ($2_1 << 4) | 0;
    if (!($24 >= HEAPF32[$0_1 + 772 >> 2])) {
     break label$389
    }
    if ($6_1 >= HEAPF32[$0_1 + 776 >> 2]) {
     break label$387
    }
   }
   $8 = Math_fround(HEAPF32[HEAP32[18392] + 6472 >> 2] * HEAPF32[$3 + 572 >> 2]);
   $17_1 = $1_1;
   $1_1 = Math_fround($6_1 - $1_1);
   $0_1 = HEAP32[$3 + 728 >> 2];
   if ($0_1) {
    $8 = Math_fround($8 * HEAPF32[$0_1 + 572 >> 2])
   }
   $8 = Math_fround($8 * Math_fround(.5));
   $1_1 = $1_1 < $8 ? $1_1 : $8;
   $17_1 = Math_fround($17_1 + $1_1);
   $6_1 = Math_fround($6_1 - $1_1);
   $1_1 = HEAPF32[$4_1 + 4 >> 2];
   HEAPF32[$4_1 + 4 >> 2] = $1_1 < $17_1 ? $17_1 : $1_1 > $6_1 ? $6_1 : $1_1;
   $1_1 = Math_fround($24 - $5_1);
   $1_1 = $1_1 < $8 ? $1_1 : $8;
   $5_1 = Math_fround($5_1 + $1_1);
   $8 = Math_fround($24 - $1_1);
   HEAPF32[$4_1 >> 2] = $5_1 > $16_1 ? $5_1 : $8 < $16_1 ? $8 : $16_1;
   $2_1 = $3 + ($2_1 << 4) | 0;
   $0_1 = $2_1 + 776 | 0;
   $1_1 = HEAPF32[$0_1 >> 2];
   HEAPF32[$0_1 >> 2] = $1_1 < $17_1 ? $17_1 : $1_1 > $6_1 ? $6_1 : $1_1;
   $0_1 = $2_1 + 772 | 0;
   $1_1 = HEAPF32[$0_1 >> 2];
   HEAPF32[$0_1 >> 2] = $1_1 < $5_1 ? $5_1 : $1_1 > $8 ? $8 : $1_1;
   HEAP32[$10_1 + 7512 >> 2] = 0;
   HEAP32[$10_1 + 7516 >> 2] = 0;
  }
  label$392 : {
   if (!$3) {
    $16_1 = Math_fround(0.0);
    $17_1 = Math_fround(0.0);
    $1_1 = Math_fround(0.0);
    break label$392;
   }
   $2_1 = $3 + (HEAP32[$10_1 + 7564 >> 2] << 4) | 0;
   $0_1 = $2_1 + 764 | 0;
   $1_1 = HEAPF32[$0_1 >> 2];
   label$394 : {
    if ($1_1 > HEAPF32[$2_1 + 772 >> 2]) {
     $6_1 = Math_fround(0.0);
     $17_1 = Math_fround(0.0);
     $8 = Math_fround(0.0);
     $5_1 = Math_fround(0.0);
     break label$394;
    }
    $6_1 = Math_fround(0.0);
    $17_1 = Math_fround(0.0);
    $8 = Math_fround(0.0);
    $5_1 = Math_fround(0.0);
    if (HEAPF32[$2_1 + 768 >> 2] > HEAPF32[$2_1 + 776 >> 2]) {
     break label$394
    }
    $6_1 = HEAPF32[$0_1 + 12 >> 2];
    $17_1 = HEAPF32[$0_1 + 4 >> 2];
    $8 = $1_1;
    $5_1 = HEAPF32[$0_1 + 8 >> 2];
   }
   $1_1 = HEAPF32[$3 + 224 >> 2];
   $8 = Math_fround(Math_fround($8 + $1_1) + Math_fround(1.0));
   $1_1 = Math_fround($5_1 + $1_1);
   $16_1 = $1_1 > $8 ? $8 : $1_1;
   $1_1 = HEAPF32[$3 + 228 >> 2];
   $17_1 = Math_fround($19 + Math_fround($17_1 + $1_1));
   $1_1 = Math_fround($19 + Math_fround($6_1 + $1_1));
  }
  HEAPF32[$10_1 + 7624 >> 2] = $16_1;
  HEAPF32[$10_1 + 7636 >> 2] = $1_1;
  HEAPF32[$10_1 + 7632 >> 2] = $16_1;
  HEAPF32[$10_1 + 7628 >> 2] = $17_1;
  if (HEAPF32[$10_1 + 7640 >> 2] > $16_1) {
   HEAPF32[$10_1 + 7640 >> 2] = $16_1
  }
  if ($17_1 < HEAPF32[$10_1 + 7644 >> 2]) {
   HEAPF32[$10_1 + 7644 >> 2] = $17_1
  }
  if (HEAPF32[$10_1 + 7648 >> 2] < $16_1) {
   HEAPF32[$10_1 + 7648 >> 2] = $16_1
  }
  if (HEAPF32[$10_1 + 7652 >> 2] < $1_1) {
   HEAPF32[$10_1 + 7652 >> 2] = $1_1
  }
  label$400 : {
   if (HEAP32[$11_1 + 7612 >> 2] != -1) {
    break label$400
   }
   $2_1 = HEAP32[18392];
   $3 = HEAP32[$2_1 + 7508 >> 2];
   if (!$3 | HEAP32[$2_1 + 7844 >> 2] | HEAPU8[$3 + 10 | 0] & 4) {
    break label$400
   }
   $0_1 = HEAP32[$2_1 + 52 >> 2];
   if (($0_1 | 0) < 0) {
    break label$400
   }
   $6_1 = HEAPF32[($2_1 + ($0_1 << 2) | 0) + 1140 >> 2];
   $0_1 = $6_1 == Math_fround(0.0);
   label$401 : {
    if ($0_1) {
     break label$401
    }
    $5_1 = HEAPF32[$2_1 + 140 >> 2];
    if (!($5_1 < $6_1)) {
     break label$400
    }
    $1_1 = Math_fround($6_1 - HEAPF32[$2_1 + 24 >> 2]);
    if ($1_1 >= $6_1) {
     break label$400
    }
    $8 = HEAPF32[$2_1 + 144 >> 2];
    if ($8 <= Math_fround(0.0)) {
     $0_1 = $1_1 < $5_1 & $5_1 <= $6_1;
     break label$401;
    }
    if ($1_1 < $5_1) {
     $0_1 = -1
    } else {
     $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
     label$404 : {
      if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$1_1;
       break label$404;
      }
      $0_1 = -2147483648;
     }
    }
    if ($5_1 > $6_1) {
     $4_1 = -1
    } else {
     $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
     label$407 : {
      if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
       $4_1 = ~~$1_1;
       break label$407;
      }
      $4_1 = -2147483648;
     }
    }
    $0_1 = ($4_1 | 0) > ($0_1 | 0);
   }
   if (!$0_1 | HEAP8[$2_1 + 7168 | 0] & 1 | (HEAPU8[$2_1 + 252 | 0] | HEAPU8[$2_1 + 254 | 0])) {
    break label$400
   }
   $0_1 = HEAPU8[$2_1 + 253 | 0] ? -1 : HEAP32[$2_1 + 7136 >> 2] != 0;
   HEAP32[$2_1 + 7660 >> 2] = $0_1;
   $3 = HEAPU8[$3 + 144 | 0];
   HEAP32[$2_1 + 7620 >> 2] = ($0_1 | 0) < 0 ? 2 : 3;
   HEAP32[$2_1 + 7612 >> 2] = -1;
   HEAP32[$2_1 + 7616 >> 2] = -1;
   HEAP8[$2_1 + 7596 | 0] = 1;
   HEAP8[$2_1 + 7597 | 0] = 1;
   HEAP8[$2_1 + 7598 | 0] = 0;
   HEAP32[$2_1 + 7600 >> 2] = 1040;
   HEAP32[$2_1 + 7696 >> 2] = 0;
   HEAP32[$2_1 + 7608 >> 2] = HEAP32[$2_1 + 892 >> 2];
   HEAP32[$2_1 + 7664 >> 2] = 0;
   HEAP32[$2_1 + 7668 >> 2] = 0;
   $0_1 = $2_1 + 7672 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 7708 >> 2] = 2139095039;
   HEAP32[$2_1 + 7720 >> 2] = 0;
   $0_1 = $2_1 + 7700 | 0;
   HEAP32[$0_1 >> 2] = 2139095039;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   HEAP32[$2_1 + 7752 >> 2] = 2139095039;
   HEAP32[$2_1 + 7740 >> 2] = 0;
   HEAP32[$2_1 + 7712 >> 2] = 0;
   HEAP32[$2_1 + 7716 >> 2] = 0;
   HEAP32[$2_1 + 7604 >> 2] = $3 ? 33 : 3;
   HEAP32[$2_1 + 7756 >> 2] = 0;
   $0_1 = $2_1 + 7744 | 0;
   HEAP32[$0_1 >> 2] = 2139095039;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   $0_1 = $2_1 + 7760 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = $2_1 + 7792 | 0;
   HEAP32[$0_1 >> 2] = 2139095039;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   $0_1 = $2_1 + 7784 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   HEAP32[$2_1 + 7800 >> 2] = 0;
   HEAP8[$2_1 + 7572 | 0] = 1;
   $0_1 = $2_1 + 7804 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = $2_1 + 7836 | 0;
   HEAP32[$0_1 >> 2] = 2139095039;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   $0_1 = $2_1 + 7828 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 2139095039;
   HEAP32[$2_1 + 7664 >> 2] = -1;
  }
  $3 = 1;
  $2_1 = HEAP32[18392];
  if (!HEAPU8[$2_1 + 7597 | 0]) {
   $3 = HEAPU8[$2_1 + 7573 | 0]
  }
  HEAP8[$2_1 + 7572 | 0] = $3;
  HEAP8[$11_1 + 7568 | 0] = 0;
  $4_1 = HEAP32[$11_1 + 7508 >> 2];
  label$411 : {
   if (HEAP32[$11_1 + 7844 >> 2] | (!$4_1 | HEAPU8[$4_1 + 10 | 0] & 4)) {
    break label$411
   }
   $1_1 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
   $0_1 = HEAP32[$4_1 + 728 >> 2];
   if ($0_1) {
    $1_1 = Math_fround($1_1 * HEAPF32[$0_1 + 572 >> 2])
   }
   $1_1 = Math_fround(Math_fround(Math_fround($1_1 * Math_fround(100.0)) * HEAPF32[$11_1 + 24 >> 2]) + Math_fround(.5));
   label$414 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$1_1;
     break label$414;
    }
    $0_1 = -2147483648;
   }
   $5_1 = Math_fround($0_1 | 0);
   label$416 : {
    if (HEAPU16[$4_1 + 296 >> 1] | !HEAPU8[$4_1 + 305 | 0]) {
     break label$416
    }
    $0_1 = HEAP32[$11_1 + 7612 >> 2];
    if (($0_1 | 0) == -1) {
     break label$416
    }
    if ($0_1 >>> 0 <= 1) {
     HEAP32[$4_1 + 120 >> 2] = 0;
     HEAP32[$4_1 + 112 >> 2] = 0;
     $1_1 = Math_fround(Math_fround(($0_1 ? Math_fround(1.0) : Math_fround(-1.0)) * $5_1) + HEAPF32[$4_1 + 88 >> 2]);
     label$418 : {
      if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
       $3 = ~~$1_1;
       break label$418;
      }
      $3 = -2147483648;
     }
     HEAPF32[$4_1 + 104 >> 2] = $3 | 0;
    }
    if (($0_1 & -2) != 2) {
     break label$416
    }
    HEAP32[$4_1 + 124 >> 2] = 0;
    HEAP32[$4_1 + 116 >> 2] = 0;
    $3 = $4_1 + 108 | 0;
    $1_1 = Math_fround(Math_fround((($0_1 | 0) == 2 ? Math_fround(-1.0) : Math_fround(1.0)) * $5_1) + HEAPF32[$4_1 + 92 >> 2]);
    label$420 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$1_1;
      break label$420;
     }
     $0_1 = -2147483648;
    }
    HEAPF32[$3 >> 2] = $0_1 | 0;
   }
   $1_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 812 >> 2] - HEAPF32[$2_1 + 808 >> 2]) + Math_fround(0.0));
   $3 = HEAPF32[$2_1 + 824 >> 2] > Math_fround(0.0);
   $1_1 = $3 ? Math_fround($1_1 * Math_fround(.10000000149011612)) : $1_1;
   $0_1 = HEAPF32[$2_1 + 828 >> 2] > Math_fround(0.0);
   $8 = $0_1 ? Math_fround($1_1 * Math_fround(10.0)) : $1_1;
   $1_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 804 >> 2] - HEAPF32[$2_1 + 800 >> 2]) + Math_fround(0.0));
   $1_1 = $3 ? Math_fround($1_1 * Math_fround(.10000000149011612)) : $1_1;
   $1_1 = $0_1 ? Math_fround($1_1 * Math_fround(10.0)) : $1_1;
   if (!(!HEAPU8[$4_1 + 136 | 0] | $1_1 == Math_fround(0.0))) {
    HEAP32[$4_1 + 120 >> 2] = 0;
    HEAP32[$4_1 + 112 >> 2] = 0;
    $1_1 = Math_fround(Math_fround($1_1 * $5_1) + HEAPF32[$4_1 + 88 >> 2]);
    label$423 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$1_1;
      break label$423;
     }
     $0_1 = -2147483648;
    }
    HEAPF32[$4_1 + 104 >> 2] = $0_1 | 0;
   }
   if ($8 == Math_fround(0.0)) {
    break label$411
   }
   HEAP32[$4_1 + 124 >> 2] = 0;
   HEAP32[$4_1 + 116 >> 2] = 0;
   $2_1 = $4_1 + 108 | 0;
   $1_1 = Math_fround(Math_fround($8 * $5_1) + HEAPF32[$4_1 + 92 >> 2]);
   label$425 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$1_1;
     break label$425;
    }
    $0_1 = -2147483648;
   }
   HEAPF32[$2_1 >> 2] = $0_1 | 0;
  }
  label$427 : {
   if (!$9) {
    HEAP16[$11_1 + 7570 >> 1] = 1;
    break label$427;
   }
   if (!(HEAPU8[$11_1 + 12 | 0] & 4) | (!$14 | !(HEAPU8[$11_1 + 8 | 0] & 4))) {
    break label$427
   }
   $140($23_1 + 8 | 0);
   $2_1 = HEAP32[$23_1 + 12 >> 2];
   $0_1 = $11_1 + 228 | 0;
   $3 = HEAP32[$23_1 + 8 >> 2];
   HEAP32[$0_1 >> 2] = $3;
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   $0_1 = $11_1 + 900 | 0;
   HEAP32[$0_1 >> 2] = $3;
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   HEAP8[$11_1 + 851 | 0] = 1;
  }
  HEAP32[$11_1 + 7656 >> 2] = 0;
  $3 = HEAP32[18392];
  $5_1 = HEAPF32[$3 + 228 >> 2];
  label$429 : {
   if (!($5_1 >= Math_fround(-256.0e3))) {
    break label$429
   }
   $1_1 = HEAPF32[$3 + 232 >> 2];
   if (!($1_1 >= Math_fround(-256.0e3))) {
    break label$429
   }
   $8 = Math_fround((Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0) ? ~~$1_1 : -2147483648) | 0);
   HEAPF32[$3 + 8176 >> 2] = $8;
   $1_1 = Math_fround((Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0) ? ~~$5_1 : -2147483648) | 0);
   HEAPF32[$3 + 8172 >> 2] = $1_1;
   HEAPF32[$3 + 232 >> 2] = $8;
   HEAPF32[$3 + 228 >> 2] = $1_1;
  }
  label$434 : {
   label$435 : {
    $5_1 = HEAPF32[$3 + 228 >> 2];
    $6_1 = HEAPF32[$3 + 232 >> 2];
    if (!($5_1 >= Math_fround(-256.0e3)) | !($6_1 >= Math_fround(-256.0e3))) {
     break label$435
    }
    $8 = HEAPF32[$3 + 900 >> 2];
    if (!($8 >= Math_fround(-256.0e3))) {
     break label$435
    }
    $1_1 = HEAPF32[$3 + 904 >> 2];
    if (!($1_1 >= Math_fround(-256.0e3))) {
     break label$435
    }
    HEAPF32[$3 + 884 >> 2] = $6_1 - $1_1;
    HEAPF32[$3 + 880 >> 2] = $5_1 - $8;
    break label$434;
   }
   $0_1 = $3 + 880 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
  }
  if (!(HEAPF32[$3 + 880 >> 2] == Math_fround(0.0) & HEAPF32[$3 + 884 >> 2] == Math_fround(0.0))) {
   HEAP8[$3 + 7571 | 0] = 0
  }
  $2_1 = HEAP32[$3 + 232 >> 2];
  $10_1 = $2_1;
  $0_1 = $3 + 900 | 0;
  $22_1 = HEAP32[$3 + 228 >> 2];
  HEAP32[$0_1 >> 2] = $22_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $18_1 = $3 + 8 | 0;
  $0_1 = 0;
  while (1) {
   $2_1 = $0_1 + $18_1 | 0;
   $14 = $2_1 + 984 | 0;
   $9 = $0_1 << 2;
   $15_1 = $0_1 + $3 | 0;
   $11_1 = HEAPU8[$15_1 + 236 | 0];
   $4_1 = $11_1 ? HEAPF32[($9 + $3 | 0) + 1040 >> 2] < Math_fround(0.0) : 0;
   HEAP8[$14 | 0] = $4_1;
   $21_1 = $0_1 << 1;
   $12_1 = $21_1 + $18_1 | 0;
   $20_1 = $12_1 + 994 | 0;
   HEAP16[$20_1 >> 1] = 0;
   HEAP8[$2_1 + 1014 | 0] = $11_1 ? 0 : HEAPF32[($3 + $9 | 0) + 1040 >> 2] >= Math_fround(0.0);
   $13 = $9 + $18_1 | 0;
   $2_1 = $13 + 1032 | 0;
   $1_1 = HEAPF32[$2_1 >> 2];
   HEAPF32[$13 + 1052 >> 2] = $1_1;
   $5_1 = Math_fround(-1.0);
   label$441 : {
    if (!$11_1) {
     break label$441
    }
    $5_1 = Math_fround(0.0);
    if ($1_1 < Math_fround(0.0)) {
     break label$441
    }
    $5_1 = Math_fround($1_1 + HEAPF32[$3 + 24 >> 2]);
   }
   HEAPF32[$2_1 >> 2] = $5_1;
   label$443 : {
    if ($4_1) {
     label$445 : {
      label$446 : {
       $25_1 = HEAPF64[$3 + 6976 >> 3];
       $9 = $0_1 << 3;
       $2_1 = $9 + $3 | 0;
       $4_1 = $2_1 + 952 | 0;
       if (!(HEAPF32[$3 + 40 >> 2] > Math_fround($25_1 - HEAPF64[$4_1 >> 3]))) {
        break label$446
       }
       $1_1 = HEAPF32[$3 + 228 >> 2];
       label$447 : {
        if (!($1_1 >= Math_fround(-256.0e3))) {
         $16_1 = Math_fround(0.0);
         $5_1 = Math_fround(0.0);
         break label$447;
        }
        $16_1 = Math_fround(0.0);
        $5_1 = Math_fround(0.0);
        if (!($6_1 >= Math_fround(-256.0e3))) {
         break label$447
        }
        $16_1 = Math_fround(HEAPF32[$3 + 232 >> 2] - HEAPF32[$2_1 + 912 >> 2]);
        $5_1 = Math_fround($1_1 - HEAPF32[$2_1 + 908 >> 2]);
       }
       $1_1 = $5_1;
       $5_1 = Math_fround(Math_fround($1_1 * $1_1) + Math_fround($16_1 * $16_1));
       $1_1 = HEAPF32[$3 + 44 >> 2];
       if (!($5_1 < Math_fround($1_1 * $1_1))) {
        break label$446
       }
       $2_1 = ($3 + $21_1 | 0) + 1012 | 0;
       HEAP16[$2_1 >> 1] = HEAPU16[$2_1 >> 1] + 1;
       break label$445;
      }
      HEAP16[($3 + $21_1 | 0) + 1012 >> 1] = 1;
     }
     HEAPF64[$4_1 >> 3] = $25_1;
     $4_1 = $9 + $18_1 | 0;
     $2_1 = $4_1 + 900 | 0;
     HEAP32[$2_1 >> 2] = $22_1;
     HEAP32[$2_1 + 4 >> 2] = $10_1;
     HEAP16[$20_1 >> 1] = HEAPU16[$12_1 + 1004 >> 1];
     $2_1 = $4_1 + 1072 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     HEAP32[$13 + 1112 >> 2] = 0;
     break label$443;
    }
    if (!$11_1) {
     break label$443
    }
    $2_1 = $13 + 1112 | 0;
    $8 = HEAPF32[$2_1 >> 2];
    $4_1 = $2_1;
    $1_1 = HEAPF32[$3 + 228 >> 2];
    label$449 : {
     if (!($1_1 >= Math_fround(-256.0e3))) {
      $16_1 = Math_fround(0.0);
      $5_1 = Math_fround(0.0);
      break label$449;
     }
     $16_1 = Math_fround(0.0);
     $5_1 = Math_fround(0.0);
     if (!($6_1 >= Math_fround(-256.0e3))) {
      break label$449
     }
     $2_1 = ($0_1 << 3) + $3 | 0;
     $16_1 = Math_fround(HEAPF32[$3 + 232 >> 2] - HEAPF32[$2_1 + 912 >> 2]);
     $5_1 = Math_fround($1_1 - HEAPF32[$2_1 + 908 >> 2]);
    }
    $1_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($16_1 * $16_1));
    HEAPF32[$4_1 >> 2] = $1_1 <= $8 ? $8 : $1_1;
    $4_1 = $18_1 + ($0_1 << 3) | 0;
    $2_1 = $4_1 + 1072 | 0;
    $8 = HEAPF32[$2_1 >> 2];
    $1_1 = $5_1 < Math_fround(0.0) ? Math_fround(-$5_1) : $5_1;
    HEAPF32[$2_1 >> 2] = $1_1 <= $8 ? $8 : $1_1;
    $2_1 = $4_1 + 1076 | 0;
    $8 = HEAPF32[$2_1 >> 2];
    $1_1 = $16_1 < Math_fround(0.0) ? Math_fround(-$16_1) : $16_1;
    HEAPF32[$2_1 >> 2] = $1_1 <= $8 ? $8 : $1_1;
   }
   HEAP8[$15_1 + 997 | 0] = HEAPU16[$20_1 >> 1] == 2;
   if (HEAPU8[$14 | 0]) {
    HEAP8[$3 + 7571 | 0] = 0
   }
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 5) {
    continue
   }
   break;
  };
  $14 = 0;
  $18_1 = HEAP32[18392];
  $2_1 = $18_1 + 5520 | 0;
  $1_1 = HEAPF32[$2_1 >> 2];
  HEAPF32[$18_1 + 7076 >> 2] = $1_1 >= Math_fround(4.0) ? $1_1 : Math_fround(4.0);
  $1_1 = HEAPF32[$18_1 + 5516 >> 2];
  $1_1 = $1_1 >= Math_fround(4.0) ? $1_1 : Math_fround(4.0);
  HEAPF32[$18_1 + 7072 >> 2] = $1_1;
  $11_1 = HEAP32[$18_1 + 7092 >> 2];
  if ($11_1) {
   $0_1 = HEAPU8[$11_1 + 9 | 0] & 2 ? 0 : $11_1
  } else {
   $0_1 = 0
  }
  $13 = HEAP32[$2_1 >> 2];
  $2_1 = HEAPU8[$18_1 + 180 | 0];
  $21_1 = $2_1 ? HEAP32[$18_1 + 7076 >> 2] : $13;
  $9 = HEAP32[$18_1 + 7008 >> 2];
  label$34 : {
   if (($9 | 0) <= 0) {
    break label$34
   }
   $20_1 = HEAP32[$18_1 + 5516 >> 2];
   $10_1 = $2_1 ? (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2)) : $20_1;
   $22_1 = HEAP32[$18_1 + 7016 >> 2];
   $2_1 = $0_1;
   $4_1 = 0;
   while (1) {
    $12_1 = $9;
    label$616 : {
     label$72 : {
      $9 = $9 - 1 | 0;
      $14 = HEAP32[$22_1 + ($9 << 2) >> 2];
      if (!HEAPU8[$14 + 138 | 0] | HEAPU8[$14 + 145 | 0]) {
       break label$72
      }
      $0_1 = HEAP32[$14 + 8 >> 2];
      if ($0_1 & 512) {
       break label$72
      }
      $6_1 = HEAPF32[$18_1 + 228 >> 2];
      $0_1 = $0_1 & 16777282;
      $8 = (wasm2js_scratch_store_i32(2, $0_1 ? $20_1 : $10_1), wasm2js_scratch_load_f32());
      if (!($6_1 >= Math_fround(HEAPF32[$14 + 416 >> 2] - $8))) {
       break label$72
      }
      $5_1 = HEAPF32[$18_1 + 232 >> 2];
      $1_1 = (wasm2js_scratch_store_i32(2, $0_1 ? $13 : $21_1), wasm2js_scratch_load_f32());
      if (!($5_1 >= Math_fround(HEAPF32[$14 + 420 >> 2] - $1_1)) | !($6_1 < Math_fround(HEAPF32[$14 + 424 >> 2] + $8)) | !(Math_fround(HEAPF32[$14 + 428 >> 2] + $1_1) > $5_1)) {
       break label$72
      }
      label$8 : {
       $15_1 = HEAPU16[$14 + 528 >> 1];
       if (!$15_1) {
        break label$8
       }
       $0_1 = 0;
       $1_1 = Math_fround(HEAPF32[$14 + 12 >> 2] + Math_fround(HEAP16[$14 + 532 >> 1]));
       if ($6_1 >= $1_1) {
        $0_1 = $6_1 < Math_fround($1_1 + Math_fround($15_1 << 16 >> 16));
        $1_1 = Math_fround(HEAPF32[$14 + 16 >> 2] + Math_fround(HEAP16[$14 + 534 >> 1]));
        $0_1 = $0_1 & $1_1 <= $5_1 & Math_fround($1_1 + Math_fround(HEAP16[$14 + 530 >> 1])) > $5_1;
       }
       if (!$0_1) {
        break label$8
       }
       $15_1 = $0_1 ? 4 : 0;
       break label$616;
      }
      $2_1 = $2_1 ? $2_1 : $14;
      $0_1 = $4_1;
      label$103 : {
       if ($0_1) {
        break label$103
       }
       if (!(!$11_1 | HEAP32[$14 + 736 >> 2] != HEAP32[$11_1 + 736 >> 2])) {
        $0_1 = 0;
        break label$103;
       }
       $0_1 = $14;
      }
      $4_1 = $0_1;
      $15_1 = $2_1 ? (($0_1 | 0) != 0) << 1 : 0;
      break label$616;
     }
     $15_1 = 4;
    }
    $14 = $4_1;
    $0_1 = $2_1;
    label$124 : {
     switch ($15_1 | 0) {
     case 0:
     case 4:
      break label$124;
     default:
      break label$34;
     };
    }
    if (($12_1 | 0) > 1) {
     continue
    }
    break;
   };
  }
  HEAP32[$18_1 + 7088 >> 2] = $14;
  $9 = $0_1;
  HEAP32[$18_1 + 7084 >> 2] = $0_1;
  $12_1 = HEAP32[$18_1 + 7468 >> 2];
  $14 = $12_1;
  while (1) {
   label$136 : {
    if (($14 | 0) <= 0) {
     $0_1 = 0;
     break label$136;
    }
    $0_1 = $2_1;
    $14 = $14 - 1 | 0;
    $2_1 = HEAP32[(HEAP32[$18_1 + 7476 >> 2] + Math_imul($14, 36) | 0) + 4 >> 2];
    label$16 : {
     if ($2_1) {
      $4_1 = 0;
      if (HEAPU8[$2_1 + 11 | 0] & 8) {
       break label$16
      }
     }
     $2_1 = $0_1;
     $4_1 = 1;
    }
    $0_1 = $2_1;
    if ($4_1) {
     continue
    }
   }
   break;
  };
  $21_1 = 0;
  label$18 : {
   if (!$0_1) {
    break label$18
   }
   $21_1 = 0;
   if (!$9) {
    break label$18
   }
   $14 = 1;
   $4_1 = HEAP32[$9 + 736 >> 2];
   label$197 : {
    if (($0_1 | 0) == HEAP32[$4_1 + 736 >> 2]) {
     break label$197
    }
    if ($4_1) {
     while (1) {
      $2_1 = ($0_1 | 0) == ($4_1 | 0);
      $14 = $2_1;
      if ($2_1) {
       break label$197
      }
      $4_1 = HEAP32[$4_1 + 732 >> 2];
      if ($4_1) {
       continue
      }
      break;
     }
    }
    $14 = 0;
   }
   $21_1 = $14 ^ 1;
  }
  $20_1 = ($12_1 | 0) > 0;
  $10_1 = $20_1 | ($9 | 0) != 0;
  $22_1 = ($0_1 | $9) != 0;
  $15_1 = HEAP32[$18_1 + 8 >> 2];
  $12_1 = $15_1 & 16;
  $13 = $18_1 + 952 | 0;
  $4_1 = -1;
  $14 = 0;
  $2_1 = 0;
  while (1) {
   $9 = $2_1 + $18_1 | 0;
   if (HEAPU8[$9 + 992 | 0]) {
    HEAP8[$9 + 1032 | 0] = $22_1;
    HEAP8[$9 + 1027 | 0] = $10_1;
   }
   $9 = HEAPU8[$9 + 236 | 0];
   $11_1 = $9 | $14 & 1;
   $4_1 = !$9 | !(HEAPF64[$13 + ($2_1 << 3) >> 3] < HEAPF64[$13 + ($4_1 << 3) >> 3]) & ($4_1 | 0) != -1 ? $4_1 : $2_1;
   $9 = $4_1;
   $14 = ($11_1 | 0) != 0;
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != 5) {
    continue
   }
   break;
  };
  $2_1 = ($12_1 | 0) != 0 | $21_1;
  $4_1 = ($9 | 0) == -1;
  $9 = $9 + $18_1 | 0;
  $12_1 = $4_1 | HEAPU8[$9 + 1027 | 0] != 0;
  $2_1 = $12_1 ? $2_1 : !(HEAPU8[$18_1 + 7876 | 0] ? HEAPU8[$18_1 + 7880 | 0] & 16 : 0) | $2_1;
  $9 = HEAPU8[$9 + 1032 | 0] != 0 | $4_1;
  if ($2_1) {
   HEAP32[$18_1 + 7084 >> 2] = 0;
   HEAP32[$18_1 + 7088 >> 2] = 0;
  }
  $4_1 = ($0_1 | 0) != 0;
  $2_1 = HEAP32[$18_1 + 12788 >> 2];
  label$347 : {
   if (($2_1 | 0) != -1) {
    $2_1 = ($2_1 | 0) != 0;
    HEAP8[$18_1 + 848 | 0] = $2_1;
    HEAP8[$18_1 + 888 | 0] = $2_1;
    break label$347;
   }
   $14 = $18_1 + 848 | 0;
   label$3610 : {
    if ($12_1) {
     $2_1 = 1;
     if (HEAP32[$18_1 + 7084 >> 2]) {
      break label$3610
     }
     $2_1 = 1;
     if ($11_1) {
      break label$3610
     }
    }
    $2_1 = $20_1;
   }
   HEAP8[$14 | 0] = $2_1;
   $12_1 = $18_1 + 888 | 0;
   label$39 : {
    if ($9) {
     $2_1 = 1;
     if (HEAP32[$18_1 + 7084 >> 2]) {
      break label$39
     }
     $2_1 = 1;
     if ($11_1) {
      break label$39
     }
    }
    $2_1 = $4_1;
   }
   HEAP8[$12_1 | 0] = $2_1;
  }
  $4_1 = $18_1 + 849 | 0;
  $2_1 = HEAP32[$18_1 + 12792 >> 2];
  label$42 : {
   if (($2_1 | 0) != -1) {
    $0_1 = ($2_1 | 0) != 0;
    break label$42;
   }
   $0_1 = ($0_1 | HEAP32[$18_1 + 7136 >> 2]) != 0;
  }
  HEAP8[$4_1 | 0] = $0_1;
  if (!(!HEAPU8[$18_1 + 853 | 0] | ($15_1 & 9) != 1)) {
   HEAP8[$18_1 + 849 | 0] = 1
  }
  HEAP8[$18_1 + 850 | 0] = HEAP32[$18_1 + 12796 >> 2] - 1 >>> 0 < 4294967294;
  $4_1 = HEAP32[18392];
  $0_1 = HEAP32[$4_1 + 7092 >> 2];
  __inlined_func$127 : {
   if ($0_1) {
    $2_1 = HEAP32[$4_1 + 7136 >> 2];
    HEAP32[$4_1 + 7140 >> 2] = $2_1;
    if (HEAP32[$4_1 + 7196 >> 2] == ($2_1 | 0)) {
     HEAP8[$4_1 + 7200 | 0] = 1
    }
    label$30 : {
     if (!HEAPU8[$4_1 + 236 | 0]) {
      break label$30
     }
     $1_1 = HEAPF32[$4_1 + 228 >> 2];
     if (!($1_1 >= Math_fround(-256.0e3)) | !(HEAPF32[$4_1 + 232 >> 2] >= Math_fround(-256.0e3))) {
      break label$30
     }
     $8 = Math_fround($1_1 - HEAPF32[$4_1 + 7176 >> 2]);
     $2_1 = HEAP32[$0_1 + 736 >> 2];
     $1_1 = Math_fround(HEAPF32[$4_1 + 232 >> 2] - HEAPF32[$4_1 + 7180 >> 2]);
     label$41 : {
      if ($8 == HEAPF32[$2_1 + 12 >> 2] & $1_1 == HEAPF32[$2_1 + 16 >> 2]) {
       break label$41
      }
      if (!(!(HEAPF32[$4_1 + 12128 >> 2] <= Math_fround(0.0)) | HEAP8[$2_1 + 9 | 0] & 1)) {
       HEAPF32[$4_1 + 12128 >> 2] = HEAPF32[$4_1 + 28 >> 2]
      }
      $0_1 = HEAP32[$2_1 + 176 >> 2];
      if (!($0_1 & 1)) {
       break label$41
      }
      HEAP32[$2_1 + 180 >> 2] = 2139095039;
      HEAP32[$2_1 + 184 >> 2] = 2139095039;
      HEAP32[$2_1 + 176 >> 2] = $0_1 & -15;
      $6_1 = HEAPF32[$2_1 + 12 >> 2];
      $5_1 = Math_fround((Math_fround(Math_abs($8)) < Math_fround(2147483648.0) ? ~~$8 : -2147483648) | 0);
      HEAPF32[$2_1 + 12 >> 2] = $5_1;
      $0_1 = $2_1 + 16 | 0;
      $8 = HEAPF32[$0_1 >> 2];
      $1_1 = Math_fround((Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0) ? ~~$1_1 : -2147483648) | 0);
      HEAPF32[$0_1 >> 2] = $1_1;
      $5_1 = Math_fround($5_1 - $6_1);
      HEAPF32[$2_1 + 208 >> 2] = $5_1 + HEAPF32[$2_1 + 208 >> 2];
      $0_1 = $2_1 + 212 | 0;
      $1_1 = Math_fround($1_1 - $8);
      HEAPF32[$0_1 >> 2] = $1_1 + HEAPF32[$0_1 >> 2];
      $0_1 = $2_1 + 232 | 0;
      HEAPF32[$0_1 >> 2] = $5_1 + HEAPF32[$0_1 >> 2];
      $0_1 = $2_1 + 236 | 0;
      HEAPF32[$0_1 >> 2] = $1_1 + HEAPF32[$0_1 >> 2];
      $0_1 = $2_1 + 240 | 0;
      HEAPF32[$0_1 >> 2] = $5_1 + HEAPF32[$0_1 >> 2];
      $0_1 = $2_1 + 244 | 0;
      HEAPF32[$0_1 >> 2] = $1_1 + HEAPF32[$0_1 >> 2];
      $0_1 = $2_1 + 224 | 0;
      HEAPF32[$0_1 >> 2] = $5_1 + HEAPF32[$0_1 >> 2];
      $0_1 = $2_1 + 228 | 0;
      HEAPF32[$0_1 >> 2] = $1_1 + HEAPF32[$0_1 >> 2];
     }
     $125(HEAP32[$4_1 + 7092 >> 2]);
     break __inlined_func$127;
    }
    HEAP32[$4_1 + 7092 >> 2] = 0;
    HEAP8[$4_1 + 7148 | 0] = ($2_1 | 0) != 0;
    if ($2_1) {
     HEAP32[$4_1 + 7192 >> 2] = -1;
     HEAP8[$4_1 + 7151 | 0] = 0;
     HEAP8[$4_1 + 7152 | 0] = 0;
     HEAP32[$4_1 + 7144 >> 2] = 0;
    }
    HEAP32[$4_1 + 7184 >> 2] = 0;
    HEAP8[$4_1 + 7149 | 0] = 0;
    HEAP8[$4_1 + 7150 | 0] = 0;
    HEAP32[$4_1 + 7136 >> 2] = 0;
    HEAP32[$4_1 + 7168 >> 2] = 0;
    HEAP32[$4_1 + 7172 >> 2] = 0;
    HEAP32[$4_1 + 7156 >> 2] = 0;
    HEAP32[$4_1 + 7160 >> 2] = 0;
    HEAP8[$4_1 + 7153 | 0] = 0;
    HEAP8[$4_1 + 7154 | 0] = 0;
    break __inlined_func$127;
   }
   $0_1 = HEAP32[$4_1 + 7184 >> 2];
   label$123 : {
    if (!$0_1) {
     break label$123
    }
    $2_1 = HEAP32[$4_1 + 7136 >> 2];
    if (($2_1 | 0) != HEAP32[$0_1 + 80 >> 2]) {
     break label$123
    }
    HEAP32[$4_1 + 7140 >> 2] = $2_1;
    if (HEAP32[$4_1 + 7196 >> 2] == ($2_1 | 0)) {
     HEAP8[$4_1 + 7200 | 0] = 1
    }
    if (HEAPU8[$4_1 + 236 | 0]) {
     break label$123
    }
    HEAP8[$4_1 + 7148 | 0] = ($2_1 | 0) != 0;
    if ($2_1) {
     HEAP32[$4_1 + 7192 >> 2] = -1;
     HEAP8[$4_1 + 7151 | 0] = 0;
     HEAP8[$4_1 + 7152 | 0] = 0;
     HEAP32[$4_1 + 7144 >> 2] = 0;
    }
    HEAP32[$4_1 + 7184 >> 2] = 0;
    HEAP8[$4_1 + 7149 | 0] = 0;
    HEAP8[$4_1 + 7150 | 0] = 0;
    HEAP32[$4_1 + 7136 >> 2] = 0;
    HEAP32[$4_1 + 7168 >> 2] = 0;
    HEAP32[$4_1 + 7172 >> 2] = 0;
    HEAP32[$4_1 + 7156 >> 2] = 0;
    HEAP32[$4_1 + 7160 >> 2] = 0;
    HEAP8[$4_1 + 7153 | 0] = 0;
    HEAP8[$4_1 + 7154 | 0] = 0;
   }
  }
  $9 = HEAP32[18392];
  $4_1 = HEAP32[$9 + 7468 >> 2];
  while (1) {
   label$452 : {
    $0_1 = $3;
    if (($4_1 | 0) <= 0) {
     $3 = 0;
     break label$452;
    }
    $4_1 = $4_1 - 1 | 0;
    $3 = HEAP32[(HEAP32[$9 + 7476 >> 2] + Math_imul($4_1, 36) | 0) + 4 >> 2];
    label$455 : {
     if ($3) {
      $2_1 = 0;
      if (HEAPU8[$3 + 11 | 0] & 8) {
       break label$455
      }
     }
     $3 = $0_1;
     $2_1 = 1;
    }
    if ($2_1) {
     continue
    }
   }
   break;
  };
  label$457 : {
   if (!(!$3 & (!HEAP32[$7_1 + 7844 >> 2] | !(HEAPF32[$7_1 + 7860 >> 2] > Math_fround(0.0))))) {
    $1_1 = Math_fround(Math_fround(HEAPF32[$7_1 + 24 >> 2] * Math_fround(6.0)) + HEAPF32[$7_1 + 7868 >> 2]);
    HEAPF32[$7_1 + 7868 >> 2] = $1_1 < Math_fround(1.0) ? $1_1 : Math_fround(1.0);
    break label$457;
   }
   $1_1 = Math_fround(HEAPF32[$7_1 + 7868 >> 2] + Math_fround(HEAPF32[$7_1 + 24 >> 2] * Math_fround(-10.0)));
   HEAPF32[$7_1 + 7868 >> 2] = $1_1 >= Math_fround(0.0) ? $1_1 : Math_fround(0.0);
  }
  HEAP32[$7_1 + 12796 >> 2] = -1;
  HEAP32[$7_1 + 7872 >> 2] = 0;
  HEAP32[$7_1 + 12788 >> 2] = -1;
  HEAP32[$7_1 + 12792 >> 2] = -1;
  HEAP32[$7_1 + 12108 >> 2] = 1065353216;
  HEAP32[$7_1 + 12112 >> 2] = 1065353216;
  label$460 : {
   if (!HEAP32[$9 + 7096 >> 2]) {
    break label$460
   }
   HEAPF32[$9 + 7108 >> 2] = HEAPF32[$9 + 7108 >> 2] - HEAPF32[$9 + 24 >> 2];
   $1_1 = HEAPF32[$9 + 228 >> 2];
   label$461 : {
    if (!($1_1 >= Math_fround(-256.0e3))) {
     break label$461
    }
    $8 = HEAPF32[$9 + 232 >> 2];
    if (!($8 >= Math_fround(-256.0e3))) {
     break label$461
    }
    $1_1 = Math_fround($1_1 - HEAPF32[$9 + 7100 >> 2]);
    $5_1 = Math_fround($1_1 * $1_1);
    $1_1 = Math_fround($8 - HEAPF32[$9 + 7104 >> 2]);
    $5_1 = Math_fround($5_1 + Math_fround($1_1 * $1_1));
    $1_1 = HEAPF32[$9 + 48 >> 2];
    if (!($5_1 > Math_fround($1_1 * $1_1))) {
     break label$461
    }
    HEAP32[$9 + 7108 >> 2] = 0;
   }
   if (!(HEAPF32[$9 + 7108 >> 2] <= Math_fround(0.0))) {
    break label$460
   }
   HEAP32[$9 + 7108 >> 2] = 0;
   HEAP32[$9 + 7096 >> 2] = 0;
  }
  $1_1 = HEAPF32[$9 + 244 >> 2];
  label$462 : {
   if ($1_1 == Math_fround(0.0) & HEAPF32[$9 + 248 >> 2] == Math_fround(0.0) | (HEAPU8[$9 + 7154 | 0] ? HEAP32[$9 + 7136 >> 2] : 0) | (HEAPU8[$9 + 7126 | 0] ? HEAP32[$9 + 7120 >> 2] : 0)) {
    break label$462
   }
   $2_1 = HEAP32[$9 + 7096 >> 2];
   $0_1 = $2_1;
   if (!$0_1) {
    $0_1 = HEAP32[$9 + 7084 >> 2]
   }
   if (HEAPU8[$0_1 + 141 | 0] | !$0_1) {
    break label$462
   }
   if (!(!HEAPU8[$9 + 160 | 0] | (!HEAPU8[$9 + 252 | 0] | $1_1 == Math_fround(0.0)))) {
    if (($0_1 | 0) != ($2_1 | 0)) {
     HEAP32[$9 + 7096 >> 2] = $0_1;
     HEAP32[$9 + 7108 >> 2] = 1073741824;
     $2_1 = $9 + 228 | 0;
     $3 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$9 + 7100 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$9 + 7104 >> 2] = $3;
    }
    $5_1 = HEAPF32[$0_1 + 572 >> 2];
    $1_1 = Math_fround(Math_fround(HEAPF32[$9 + 244 >> 2] * Math_fround(.10000000149011612)) + $5_1);
    $8 = $1_1 < Math_fround(.5) ? Math_fround(.5) : $1_1 > Math_fround(2.5) ? Math_fround(2.5) : $1_1;
    HEAPF32[$0_1 + 572 >> 2] = $8;
    if (HEAP32[$0_1 + 736 >> 2] != ($0_1 | 0)) {
     break label$462
    }
    $6_1 = HEAPF32[$9 + 228 >> 2];
    $1_1 = HEAPF32[$9 + 232 >> 2];
    HEAP32[$0_1 + 180 >> 2] = 2139095039;
    HEAP32[$0_1 + 184 >> 2] = 2139095039;
    HEAP32[$0_1 + 176 >> 2] = HEAP32[$0_1 + 176 >> 2] & -15;
    $4_1 = $0_1 + 16 | 0;
    $24 = HEAPF32[$4_1 >> 2];
    $19 = Math_fround($8 / $5_1);
    $5_1 = Math_fround(Math_fround(1.0) - $19);
    $2_1 = $0_1 + 24 | 0;
    $16_1 = HEAPF32[$2_1 >> 2];
    $1_1 = Math_fround($24 + Math_fround(Math_fround(Math_fround($5_1 * $16_1) * Math_fround($1_1 - $24)) / $16_1));
    label$469 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$1_1;
      break label$469;
     }
     $3 = -2147483648;
    }
    $8 = Math_fround($3 | 0);
    HEAPF32[$4_1 >> 2] = $8;
    $17_1 = HEAPF32[$0_1 + 12 >> 2];
    $1_1 = $5_1;
    $5_1 = HEAPF32[$0_1 + 20 >> 2];
    $1_1 = Math_fround($17_1 + Math_fround(Math_fround(Math_fround($1_1 * $5_1) * Math_fround($6_1 - $17_1)) / $5_1));
    label$471 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$1_1;
      break label$471;
     }
     $3 = -2147483648;
    }
    $1_1 = Math_fround($3 | 0);
    HEAPF32[$0_1 + 12 >> 2] = $1_1;
    $6_1 = Math_fround($1_1 - $17_1);
    HEAPF32[$0_1 + 208 >> 2] = $6_1 + HEAPF32[$0_1 + 208 >> 2];
    $3 = $0_1 + 212 | 0;
    $1_1 = Math_fround($8 - $24);
    HEAPF32[$3 >> 2] = $1_1 + HEAPF32[$3 >> 2];
    $3 = $0_1 + 232 | 0;
    HEAPF32[$3 >> 2] = $6_1 + HEAPF32[$3 >> 2];
    $3 = $0_1 + 236 | 0;
    HEAPF32[$3 >> 2] = $1_1 + HEAPF32[$3 >> 2];
    $3 = $0_1 + 240 | 0;
    HEAPF32[$3 >> 2] = $6_1 + HEAPF32[$3 >> 2];
    $3 = $0_1 + 244 | 0;
    HEAPF32[$3 >> 2] = $1_1 + HEAPF32[$3 >> 2];
    $3 = $0_1 + 224 | 0;
    HEAPF32[$3 >> 2] = $6_1 + HEAPF32[$3 >> 2];
    $3 = $0_1 + 228 | 0;
    HEAPF32[$3 >> 2] = $1_1 + HEAPF32[$3 >> 2];
    $1_1 = Math_fround($19 * $16_1);
    label$473 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$1_1;
      break label$473;
     }
     $3 = -2147483648;
    }
    HEAPF32[$2_1 >> 2] = $3 | 0;
    $1_1 = Math_fround($19 * $5_1);
    label$475 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$1_1;
      break label$475;
     }
     $2_1 = -2147483648;
    }
    HEAPF32[$0_1 + 20 >> 2] = $2_1 | 0;
    $2_1 = $0_1 + 32 | 0;
    $1_1 = Math_fround($19 * HEAPF32[$2_1 >> 2]);
    label$477 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$1_1;
      break label$477;
     }
     $3 = -2147483648;
    }
    $1_1 = HEAPF32[$0_1 + 28 >> 2];
    HEAPF32[$2_1 >> 2] = $3 | 0;
    $1_1 = Math_fround($19 * $1_1);
    label$479 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$1_1;
      break label$479;
     }
     $2_1 = -2147483648;
    }
    HEAPF32[$0_1 + 28 >> 2] = $2_1 | 0;
    break label$462;
   }
   if (HEAPU8[$9 + 252 | 0]) {
    break label$462
   }
   $3 = !(HEAPU8[$9 + 253 | 0] ? HEAPU8[$9 + 177 | 0] : 1);
   $5_1 = HEAPF32[$9 + ($3 ? 244 : 248) >> 2];
   $1_1 = $3 ? Math_fround(0.0) : $1_1;
   if ($1_1 != Math_fround(0.0)) {
    if (($0_1 | 0) != ($2_1 | 0)) {
     HEAP32[$9 + 7096 >> 2] = $0_1;
     HEAP32[$9 + 7108 >> 2] = 1073741824;
     $2_1 = $9 + 228 | 0;
     $3 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$9 + 7100 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$9 + 7104 >> 2] = $3;
    }
    $4_1 = HEAP32[$0_1 + 8 >> 2];
    label$486 : {
     if (!($4_1 & 16777216)) {
      $2_1 = $4_1;
      break label$486;
     }
     $3 = $0_1;
     while (1) {
      $0_1 = $3;
      if (!(($4_1 & 528) == 16 | HEAPF32[$0_1 + 100 >> 2] == Math_fround(0.0))) {
       $2_1 = $4_1;
       break label$486;
      }
      $0_1 = HEAP32[$0_1 + 728 >> 2];
      $2_1 = HEAP32[$0_1 + 8 >> 2];
      $4_1 = $2_1;
      $3 = $0_1;
      if ($2_1 & 16777216) {
       continue
      }
      break;
     };
    }
    if (!($2_1 & 528)) {
     $6_1 = Math_fround(HEAPF32[$9 + 6472 >> 2] * HEAPF32[$0_1 + 572 >> 2]);
     $3 = HEAP32[$0_1 + 728 >> 2];
     if ($3) {
      $6_1 = Math_fround($6_1 * HEAPF32[$3 + 572 >> 2])
     }
     $8 = Math_fround(Math_fround(HEAPF32[$0_1 + 444 >> 2] - HEAPF32[$0_1 + 436 >> 2]) * Math_fround(.6700000166893005));
     HEAP32[$0_1 + 124 >> 2] = 0;
     HEAP32[$0_1 + 116 >> 2] = 0;
     $3 = $0_1 + 108 | 0;
     $19 = HEAPF32[$0_1 + 92 >> 2];
     $16_1 = $1_1;
     $1_1 = Math_fround($6_1 * Math_fround(5.0));
     $1_1 = $1_1 < $8 ? $1_1 : $8;
     label$493 : {
      if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$1_1;
       break label$493;
      }
      $2_1 = -2147483648;
     }
     HEAPF32[$3 >> 2] = $19 - Math_fround($16_1 * Math_fround($2_1 | 0));
    }
   }
   if ($5_1 == Math_fround(0.0)) {
    break label$462
   }
   if (($0_1 | 0) != HEAP32[$9 + 7096 >> 2]) {
    HEAP32[$9 + 7096 >> 2] = $0_1;
    HEAP32[$9 + 7108 >> 2] = 1073741824;
    $2_1 = $9 + 228 | 0;
    $3 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$9 + 7100 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$9 + 7104 >> 2] = $3;
   }
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   label$496 : {
    if (!($4_1 & 16777216)) {
     $2_1 = $4_1;
     break label$496;
    }
    $3 = $0_1;
    while (1) {
     $0_1 = $3;
     if (!(($4_1 & 528) == 16 | HEAPF32[$0_1 + 96 >> 2] == Math_fround(0.0))) {
      $2_1 = $4_1;
      break label$496;
     }
     $0_1 = HEAP32[$0_1 + 728 >> 2];
     $2_1 = HEAP32[$0_1 + 8 >> 2];
     $4_1 = $2_1;
     $3 = $0_1;
     if ($2_1 & 16777216) {
      continue
     }
     break;
    };
   }
   if ($2_1 & 528) {
    break label$462
   }
   $17_1 = Math_fround(HEAPF32[$9 + 6472 >> 2] * HEAPF32[$0_1 + 572 >> 2]);
   $3 = HEAP32[$0_1 + 728 >> 2];
   if ($3) {
    $17_1 = Math_fround($17_1 * HEAPF32[$3 + 572 >> 2])
   }
   $8 = Math_fround(Math_fround(HEAPF32[$0_1 + 440 >> 2] - HEAPF32[$0_1 + 432 >> 2]) * Math_fround(.6700000166893005));
   HEAP32[$0_1 + 120 >> 2] = 0;
   HEAP32[$0_1 + 112 >> 2] = 0;
   $16_1 = HEAPF32[$0_1 + 88 >> 2];
   $1_1 = Math_fround($17_1 + $17_1);
   $1_1 = $1_1 < $8 ? $1_1 : $8;
   label$502 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$1_1;
     break label$502;
    }
    $2_1 = -2147483648;
   }
   HEAPF32[$0_1 + 104 >> 2] = $16_1 - Math_fround($5_1 * Math_fround($2_1 | 0));
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$504 : {
   if (HEAPU8[$7_1 + 6999 | 0]) {
    break label$504
   }
   $1_1 = HEAPF32[$7_1 + 184 >> 2];
   $8 = Math_fround(3402823466385288598117041.0e14);
   if ($1_1 < Math_fround(0.0)) {
    break label$504
   }
   $8 = Math_fround(Math_fround(HEAPF64[$7_1 + 6976 >> 3]) - $1_1);
  }
  if (HEAP32[$7_1 + 7008 >> 2]) {
   $0_1 = 0;
   while (1) {
    $4_1 = HEAP32[HEAP32[$7_1 + 7016 >> 2] + ($0_1 << 2) >> 2];
    HEAP16[$4_1 + 150 >> 1] = 0;
    HEAP8[$4_1 + 140 | 0] = 0;
    $3 = HEAPU8[$4_1 + 138 | 0];
    HEAP8[$4_1 + 139 | 0] = $3;
    HEAP8[$4_1 + 138 | 0] = 0;
    if (!(!($8 > HEAPF32[$4_1 + 540 >> 2]) | (HEAPU8[$4_1 + 804 | 0] | $3))) {
     HEAP8[$4_1 + 804 | 0] = 1;
     $3 = HEAP32[$4_1 + 580 >> 2];
     HEAP32[$4_1 + 796 >> 2] = HEAP32[$3 + 16 >> 2];
     HEAP32[$4_1 + 800 >> 2] = HEAP32[$3 + 28 >> 2];
     $2_1 = HEAP32[$4_1 + 204 >> 2];
     if ($2_1) {
      HEAP32[$4_1 + 196 >> 2] = 0;
      HEAP32[$4_1 + 200 >> 2] = 0;
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
      HEAP32[$4_1 + 204 >> 2] = 0;
     }
     $373(HEAP32[$4_1 + 580 >> 2]);
     $2_1 = HEAP32[$4_1 + 360 >> 2];
     if ($2_1) {
      $3 = $4_1 + 352 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
      HEAP32[$4_1 + 360 >> 2] = 0;
     }
     $2_1 = HEAP32[$4_1 + 400 >> 2];
     if ($2_1) {
      $3 = $4_1 + 392 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
      HEAP32[$4_1 + 400 >> 2] = 0;
     }
     $2_1 = HEAP32[$4_1 + 412 >> 2];
     if ($2_1) {
      $3 = $4_1 + 404 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
      HEAP32[$4_1 + 412 >> 2] = 0;
     }
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != HEAP32[$7_1 + 7008 >> 2]) {
     continue
    }
    break;
   };
  }
  if (HEAP32[$7_1 + 8088 >> 2] > 0) {
   $0_1 = 0;
   while (1) {
    $1_1 = HEAPF32[HEAP32[$7_1 + 8096 >> 2] + ($0_1 << 2) >> 2];
    if (!(!($1_1 >= Math_fround(0.0)) | !($1_1 < $8))) {
     $9 = HEAP32[18392];
     $12_1 = HEAP32[$7_1 + 8064 >> 2] + Math_imul($0_1, 456) | 0;
     HEAP32[$12_1 + 404 >> 2] = 0;
     $3 = HEAP32[$12_1 + 400 >> 2];
     if ($3) {
      HEAP32[$12_1 + 392 >> 2] = 0;
      HEAP32[$12_1 + 396 >> 2] = 0;
      $17($3);
      HEAP32[$12_1 + 400 >> 2] = 0;
     }
     HEAP8[$12_1 + 444 | 0] = 1;
     $3 = HEAP32[$12_1 + 372 >> 2];
     if ($3) {
      HEAP32[$12_1 + 364 >> 2] = 0;
      HEAP32[$12_1 + 368 >> 2] = 0;
      $17($3);
      HEAP32[$12_1 + 372 >> 2] = 0;
     }
     HEAP8[$12_1 + 454 | 0] = 1;
     $4_1 = HEAP32[$12_1 + 84 >> 2];
     if (($4_1 | 0) > 0) {
      $3 = HEAP32[$12_1 + 16 >> 2];
      $2_1 = 0;
      while (1) {
       HEAP16[(Math_imul($2_1, 104) + $3 | 0) + 80 >> 1] = 65535;
       $2_1 = $2_1 + 1 | 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
     }
     HEAP32[HEAP32[$9 + 8096 >> 2] + (($12_1 - HEAP32[$9 + 8064 >> 2] | 0) / 456 << 2) >> 2] = -1082130432;
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$7_1 + 8088 >> 2]) {
     continue
    }
    break;
   };
  }
  if (HEAP32[$7_1 + 8044 >> 2] > 0) {
   $0_1 = 0;
   while (1) {
    $3 = HEAP32[$7_1 + 8052 >> 2] + Math_imul($0_1, 104) | 0;
    $1_1 = HEAPF32[$3 + 4 >> 2];
    if (!(!($1_1 >= Math_fround(0.0)) | !($1_1 < $8))) {
     $374($3 + 16 | 0);
     HEAP32[$3 + 4 >> 2] = -1082130432;
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$7_1 + 8044 >> 2]) {
     continue
    }
    break;
   };
  }
  if (HEAPU8[$7_1 + 6999 | 0]) {
   $2_1 = HEAP32[18392];
   $3 = HEAP32[$2_1 + 7452 >> 2];
   if ($3) {
    HEAP32[$2_1 + 7444 >> 2] = 0;
    HEAP32[$2_1 + 7448 >> 2] = 0;
    if ($2_1) {
     $0_1 = $2_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
    HEAP32[$2_1 + 7452 >> 2] = 0;
   }
   $3 = HEAP32[$2_1 + 7464 >> 2];
   if ($3) {
    HEAP32[$2_1 + 7456 >> 2] = 0;
    HEAP32[$2_1 + 7460 >> 2] = 0;
    $0_1 = HEAP32[18392];
    if ($0_1) {
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
    HEAP32[$2_1 + 7464 >> 2] = 0;
   }
   $2_1 = 0;
   $15_1 = HEAP32[18392];
   $0_1 = HEAP32[$15_1 + 12176 >> 2];
   if ($0_1) {
    $4_1 = $0_1 + 4 | 0;
    $9 = $4_1 + HEAP32[$15_1 + 12168 >> 2] | 0;
    $0_1 = 0;
    while (1) {
     $0_1 = HEAP32[$4_1 >> 2] ? (Math_imul(HEAP8[$4_1 + 12 | 0], 12) + $0_1 | 0) + 16 | 0 : $0_1;
     $2_1 = $0_1;
     $3 = HEAP32[$4_1 - 4 >> 2] + $4_1 | 0;
     $12_1 = ($3 | 0) == ($9 | 0);
     $4_1 = $12_1 ? 0 : $3;
     if (!$12_1) {
      continue
     }
     break;
    };
   }
   $4_1 = $2_1;
   label$54 : {
    if (($2_1 | 0) == HEAP32[$15_1 + 12168 >> 2]) {
     break label$54
    }
    label$65 : {
     if (($4_1 | 0) <= 0) {
      $4_1 = 0;
      $2_1 = 0;
      break label$65;
     }
     $2_1 = $16($4_1);
    }
    $3 = $4_1;
    $0_1 = HEAP32[$15_1 + 12176 >> 2];
    label$86 : {
     if (!$0_1) {
      $9 = 0;
      break label$86;
     }
     $4_1 = $0_1 + 4 | 0;
     $9 = 0;
     $0_1 = $3;
     while (1) {
      if (HEAP32[$4_1 >> 2]) {
       label$139 : {
        label$1410 : {
         $14 = Math_imul(HEAP8[$4_1 + 12 | 0], 12) + 23 & -4;
         $12_1 = $14 + $9 | 0;
         if (($12_1 | 0) <= ($0_1 | 0)) {
          break label$1410
         }
         $3 = $0_1 ? (($0_1 | 0) / 2 | 0) + $0_1 | 0 : 8;
         $3 = ($3 | 0) > ($12_1 | 0) ? $3 : $12_1;
         if (($3 | 0) <= ($0_1 | 0)) {
          break label$1410
         }
         $0_1 = $16($3);
         if ($2_1) {
          $1602($0_1, $2_1, $9);
          $17($2_1);
         }
         $2_1 = $0_1;
         break label$139;
        }
        $3 = $0_1;
       }
       $0_1 = $2_1 + $9 | 0;
       HEAP32[$0_1 >> 2] = $14;
       $1602($0_1 + 4 | 0, $4_1, Math_imul(HEAP8[$4_1 + 12 | 0], 12) + 16 | 0);
       $9 = $12_1;
       $0_1 = $3;
      }
      $3 = $0_1;
      $4_1 = HEAP32[$4_1 - 4 >> 2] + $4_1 | 0;
      $12_1 = ($4_1 | 0) == ((HEAP32[$15_1 + 12176 >> 2] + HEAP32[$15_1 + 12168 >> 2] | 0) + 4 | 0);
      $4_1 = $12_1 ? 0 : $4_1;
      if (!$12_1) {
       continue
      }
      break;
     };
    }
    HEAP32[$15_1 + 12168 >> 2] = $9;
    HEAP32[$15_1 + 12172 >> 2] = $3;
    $0_1 = HEAP32[$15_1 + 12176 >> 2];
    HEAP32[$15_1 + 12176 >> 2] = $2_1;
    if (!$0_1) {
     break label$54
    }
    $17($0_1);
   }
  }
  HEAP8[$7_1 + 6999 | 0] = 0;
  $0_1 = HEAP32[$7_1 + 7508 >> 2];
  label$520 : {
   if (!$0_1 | HEAPU8[$0_1 + 139 | 0]) {
    break label$520
   }
   $3 = HEAP32[18392];
   $0_1 = HEAP32[$3 + 7020 >> 2];
   if (($0_1 | 0) > 0) {
    $4_1 = HEAP32[$3 + 7028 >> 2];
    while (1) {
     $2_1 = $0_1 - 1 | 0;
     $3 = HEAP32[$4_1 + ($2_1 << 2) >> 2];
     if (!(!$3 | !HEAPU8[$3 + 139 | 0] | (HEAP32[$3 + 8 >> 2] & 262656) == 262656)) {
      $0_1 = HEAP32[$3 + 752 >> 2];
      if (!(HEAPU8[$0_1 + 139 | 0] ? $0_1 : 0)) {
       $0_1 = $3
      }
      $125($0_1);
      break label$520;
     }
     $3 = $0_1;
     $0_1 = $2_1;
     if (($3 | 0) > 1) {
      continue
     }
     break;
    };
   }
   $125(0);
  }
  $3 = HEAP32[$7_1 + 7048 >> 2];
  label$526 : {
   if (($3 | 0) >= 0) {
    break label$526
   }
   $0_1 = $3 + (($3 | 0) / 2 | 0) | 0;
   $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$526
   }
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($4_1, 84), HEAP32[18394]) | 0;
   $0_1 = HEAP32[$7_1 + 7052 >> 2];
   if ($0_1) {
    $1602($2_1, $0_1, Math_imul(HEAP32[$7_1 + 7044 >> 2], 84));
    $3 = HEAP32[$7_1 + 7052 >> 2];
    label$529 : {
     if (!$3) {
      break label$529
     }
     $0_1 = HEAP32[18392];
     if (!$0_1) {
      break label$529
     }
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$7_1 + 7048 >> 2] = $4_1;
   HEAP32[$7_1 + 7052 >> 2] = $2_1;
  }
  HEAP32[$7_1 + 7044 >> 2] = 0;
  $3 = HEAP32[$7_1 + 7484 >> 2];
  label$530 : {
   if (($3 | 0) >= 0) {
    break label$530
   }
   $0_1 = $3 + (($3 | 0) / 2 | 0) | 0;
   $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$530
   }
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($4_1, 36), HEAP32[18394]) | 0;
   $0_1 = HEAP32[$7_1 + 7488 >> 2];
   if ($0_1) {
    $1602($2_1, $0_1, Math_imul(HEAP32[$7_1 + 7480 >> 2], 36));
    $3 = HEAP32[$7_1 + 7488 >> 2];
    label$533 : {
     if (!$3) {
      break label$533
     }
     $0_1 = HEAP32[18392];
     if (!$0_1) {
      break label$533
     }
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$7_1 + 7484 >> 2] = $4_1;
   HEAP32[$7_1 + 7488 >> 2] = $2_1;
  }
  HEAP32[$7_1 + 7480 >> 2] = 0;
  $3 = HEAP32[$7_1 + 7448 >> 2];
  label$534 : {
   if (($3 | 0) >= 0) {
    break label$534
   }
   $0_1 = $3 + (($3 | 0) / 2 | 0) | 0;
   $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$534
   }
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1 << 2, HEAP32[18394]) | 0;
   $0_1 = HEAP32[$7_1 + 7452 >> 2];
   if ($0_1) {
    $1602($2_1, $0_1, HEAP32[$7_1 + 7444 >> 2] << 2);
    $3 = HEAP32[$7_1 + 7452 >> 2];
    label$537 : {
     if (!$3) {
      break label$537
     }
     $0_1 = HEAP32[18392];
     if (!$0_1) {
      break label$537
     }
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$7_1 + 7448 >> 2] = $4_1;
   HEAP32[$7_1 + 7452 >> 2] = $2_1;
  }
  HEAP32[$7_1 + 7444 >> 2] = 0;
  if (!HEAP32[$7_1 + 7448 >> 2]) {
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]](32, HEAP32[18394]) | 0;
   $0_1 = HEAP32[$7_1 + 7452 >> 2];
   if ($0_1) {
    $1602($2_1, $0_1, HEAP32[$7_1 + 7444 >> 2] << 2);
    $3 = HEAP32[$7_1 + 7452 >> 2];
    label$541 : {
     if (!$3) {
      break label$541
     }
     $0_1 = HEAP32[18392];
     if (!$0_1) {
      break label$541
     }
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$7_1 + 7448 >> 2] = 8;
   HEAP32[$7_1 + 7452 >> 2] = $2_1;
  }
  HEAP32[HEAP32[$7_1 + 7452 >> 2] + (HEAP32[$7_1 + 7444 >> 2] << 2) >> 2] = 0;
  HEAP32[$7_1 + 7444 >> 2] = HEAP32[$7_1 + 7444 >> 2] + 1;
  $3 = HEAP32[$7_1 + 7460 >> 2];
  label$542 : {
   if (($3 | 0) >= 0) {
    break label$542
   }
   $0_1 = $3 + (($3 | 0) / 2 | 0) | 0;
   $4_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$542
   }
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($4_1, 48), HEAP32[18394]) | 0;
   $0_1 = HEAP32[$7_1 + 7464 >> 2];
   if ($0_1) {
    $1602($2_1, $0_1, Math_imul(HEAP32[$7_1 + 7456 >> 2], 48));
    $3 = HEAP32[$7_1 + 7464 >> 2];
    label$545 : {
     if (!$3) {
      break label$545
     }
     $0_1 = HEAP32[18392];
     if (!$0_1) {
      break label$545
     }
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$7_1 + 7460 >> 2] = $4_1;
   HEAP32[$7_1 + 7464 >> 2] = $2_1;
  }
  HEAP32[$7_1 + 7456 >> 2] = 0;
  $4_1 = HEAP32[18392];
  HEAP32[$4_1 + 12252 >> 2] = 0;
  if (HEAPU8[$4_1 + 12248 | 0]) {
   HEAP32[$4_1 + 7872 >> 2] = 7;
   $2_1 = HEAP32[$4_1 + 7120 >> 2];
   $0_1 = HEAP32[$4_1 + 108 >> 2];
   label$547 : {
    if (($0_1 | 0) < 0) {
     break label$547
    }
    $6_1 = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 1140 >> 2];
    $3 = $6_1 == Math_fround(0.0);
    label$548 : {
     if ($3) {
      break label$548
     }
     $5_1 = HEAPF32[$4_1 + 140 >> 2];
     if (!($5_1 < $6_1)) {
      break label$547
     }
     $1_1 = Math_fround($6_1 - HEAPF32[$4_1 + 24 >> 2]);
     if ($1_1 >= $6_1) {
      break label$547
     }
     $8 = HEAPF32[$4_1 + 144 >> 2];
     if ($8 <= Math_fround(0.0)) {
      $3 = $1_1 < $5_1 & $5_1 <= $6_1;
      break label$548;
     }
     if ($1_1 < $5_1) {
      $0_1 = -1
     } else {
      $1_1 = Math_fround(Math_fround($1_1 - $5_1) / $8);
      label$551 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$551;
       }
       $0_1 = -2147483648;
      }
     }
     if ($5_1 > $6_1) {
      $3 = -1
     } else {
      $1_1 = Math_fround(Math_fround($6_1 - $5_1) / $8);
      label$554 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $3 = ~~$1_1;
        break label$554;
       }
       $3 = -2147483648;
      }
     }
     $3 = ($3 | 0) > ($0_1 | 0);
    }
    if (!$3) {
     break label$547
    }
    HEAP8[$4_1 + 12248 | 0] = 0;
   }
   if (!(!$2_1 | HEAPF32[$4_1 + 1040 >> 2] != Math_fround(0.0))) {
    HEAP8[$4_1 + 12248 | 0] = 0;
    HEAP32[$4_1 + 12252 >> 2] = $2_1;
   }
   HEAP32[$4_1 + 7384 >> 2] = 1058642330;
   HEAP32[$4_1 + 7300 >> 2] = HEAP32[$4_1 + 7300 >> 2] | 64;
   $141(0);
   HEAP32[$23_1 >> 2] = $2_1;
   $557(14473, $23_1);
   $557(17139, 0);
   $559((HEAP32[18392] + (!$2_1 << 4) | 0) + 5616 | 0, 18936, 0);
   $142();
  }
  $12_1 = HEAP32[18392];
  HEAP32[$12_1 + 7112 >> 2] = 0;
  label$557 : {
   if (HEAP32[$12_1 + 6984 >> 2] != (HEAP32[$12_1 + 12272 >> 2] + 1 | 0)) {
    break label$557
   }
   $3 = HEAP32[$12_1 + 7120 >> 2];
   if (!$3) {
    $3 = HEAP32[$12_1 + 7136 >> 2]
   }
   if (($3 | 0) != HEAP32[$12_1 + 12280 >> 2]) {
    HEAP32[$12_1 + 12280 >> 2] = $3;
    HEAP32[$12_1 + 12276 >> 2] = -1;
    $2_1 = HEAP32[$12_1 + 12288 >> 2];
    label$560 : {
     if (($2_1 | 0) >= 0) {
      break label$560
     }
     $0_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0;
     $9 = ($0_1 | 0) > 0 ? $0_1 : 0;
     if (($2_1 | 0) >= ($9 | 0)) {
      break label$560
     }
     if ($12_1) {
      $0_1 = $12_1 + 876 | 0;
      HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
     }
     $4_1 = FUNCTION_TABLE[HEAP32[18314]]($9 << 6, HEAP32[18394]) | 0;
     $0_1 = HEAP32[$12_1 + 12292 >> 2];
     if ($0_1) {
      $1602($4_1, $0_1, HEAP32[$12_1 + 12284 >> 2] << 6);
      $2_1 = HEAP32[$12_1 + 12292 >> 2];
      label$563 : {
       if (!$2_1) {
        break label$563
       }
       $0_1 = HEAP32[18392];
       if (!$0_1) {
        break label$563
       }
       $0_1 = $0_1 + 876 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     }
     HEAP32[$12_1 + 12288 >> 2] = $9;
     HEAP32[$12_1 + 12292 >> 2] = $4_1;
    }
    HEAP32[$12_1 + 12284 >> 2] = 0;
   }
   if (!$3) {
    break label$557
   }
   $2_1 = HEAP32[$12_1 + 12276 >> 2];
   label$564 : {
    if (($2_1 | 0) < 0 | ($2_1 | 0) >= HEAP32[$12_1 + 12284 >> 2]) {
     break label$564
    }
    $0_1 = HEAP32[$12_1 + 12292 >> 2] + ($2_1 << 6) | 0;
    if (!HEAPU8[$0_1 + 5 | 0] & HEAP8[$0_1 + 4 | 0] < 3) {
     break label$564
    }
    HEAP32[$12_1 + 12276 >> 2] = $2_1 + 1;
   }
   $0_1 = HEAP32[$12_1 + 12276 >> 2];
   if (($0_1 | 0) == -1) {
    HEAP32[$12_1 + 7112 >> 2] = $3
   }
   if (($0_1 | 0) < 0 | ($0_1 | 0) >= HEAP32[$12_1 + 12284 >> 2]) {
    break label$557
   }
   $0_1 = HEAP32[$12_1 + 12292 >> 2] + ($0_1 << 6) | 0;
   HEAP32[$12_1 + 7112 >> 2] = HEAP32[$0_1 >> 2];
   HEAP8[$0_1 + 4 | 0] = HEAPU8[$0_1 + 4 | 0] + 1;
  }
  HEAP8[$7_1 + 6997 | 0] = 1;
  $3 = HEAP32[18392];
  $0_1 = $3 + 7332 | 0;
  HEAP32[$0_1 >> 2] = 1137180672;
  HEAP32[$0_1 + 4 >> 2] = 1137180672;
  HEAP32[$3 + 7308 >> 2] = 4;
  HEAP32[$3 + 7300 >> 2] = HEAP32[$3 + 7300 >> 2] | 2;
  $143(3172, 0, 0);
  if (HEAP32[$7_1 + 12180 >> 2] > 0) {
   $0_1 = 0;
   while (1) {
    $3 = HEAP32[$7_1 + 12188 >> 2] + Math_imul($0_1, 20) | 0;
    if (HEAP32[$3 + 4 >> 2] == 1) {
     FUNCTION_TABLE[HEAP32[$3 + 12 >> 2]]($7_1, $3)
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$7_1 + 12180 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $23_1 + 16 | 0;
 }
 
 function $137($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = HEAP32[18392];
  $3 = $1_1;
  if (!$1_1) {
   $3 = $1697($0_1)
  }
  $6_1 = $3 + 1 | 0;
  $10_1 = $3;
  $1_1 = HEAP32[$4_1 + 12136 >> 2];
  label$2 : {
   if (($3 | 0) < ($1_1 | 0)) {
    break label$2
   }
   if ($1_1) {
    $2_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $5_1 = ($2_1 | 0) > ($6_1 | 0) ? $2_1 : $6_1;
   if (($5_1 | 0) <= ($1_1 | 0)) {
    break label$2
   }
   if ($4_1) {
    $1_1 = $4_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($5_1, HEAP32[18394]) | 0;
   $1_1 = HEAP32[$4_1 + 12140 >> 2];
   if ($1_1) {
    $1602($3, $1_1, HEAP32[$4_1 + 12132 >> 2]);
    $2_1 = HEAP32[$4_1 + 12140 >> 2];
    label$7 : {
     if (!$2_1) {
      break label$7
     }
     $1_1 = HEAP32[18392];
     if (!$1_1) {
      break label$7
     }
     $1_1 = $1_1 + 876 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   }
   HEAP32[$4_1 + 12136 >> 2] = $5_1;
   HEAP32[$4_1 + 12140 >> 2] = $3;
  }
  HEAP32[$4_1 + 12132 >> 2] = $6_1;
  $11_1 = $1602(HEAP32[$4_1 + 12140 >> 2], $0_1, $10_1);
  $8 = $11_1 + $10_1 | 0;
  HEAP8[$8 | 0] = 0;
  if (HEAP32[$4_1 + 12144 >> 2] > 0) {
   $1_1 = 0;
   while (1) {
    $3 = HEAP32[$4_1 + 12152 >> 2] + Math_imul($1_1, 36) | 0;
    $2_1 = HEAP32[$3 + 12 >> 2];
    if ($2_1) {
     FUNCTION_TABLE[$2_1 | 0]($4_1, $3)
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < HEAP32[$4_1 + 12144 >> 2]) {
     continue
    }
    break;
   };
  }
  label$11 : {
   if (($10_1 | 0) <= 0) {
    break label$11
   }
   $3 = 0;
   $2_1 = $11_1;
   $1_1 = 0;
   label$12 : while (1) {
    $6_1 = $1_1;
    $5_1 = $3;
    $1_1 = $2_1;
    while (1) {
     label$14 : {
      switch (HEAPU8[$1_1 | 0] - 10 | 0) {
      default:
       $2_1 = $1_1;
       label$16 : {
        if ($1_1 >>> 0 >= $8 >>> 0) {
         break label$16
        }
        $9 = $8;
        $3 = $1_1;
        while (1) {
         label$18 : {
          $2_1 = $3;
          switch (HEAPU8[$2_1 | 0] - 10 | 0) {
          case 0:
          case 3:
           break label$16;
          default:
           break label$18;
          };
         }
         $3 = $3 + 1 | 0;
         if ($8 >>> 0 > $3 >>> 0) {
          continue
         }
         break;
        };
        $2_1 = $9;
       }
       $9 = $2_1;
       HEAP8[$2_1 | 0] = 0;
       $2_1 = HEAPU8[$1_1 | 0];
       label$19 : {
        label$20 : {
         if (($2_1 | 0) == 59) {
          break label$20
         }
         label$21 : {
          if (($2_1 | 0) != 91 | $1_1 >>> 0 >= $9 >>> 0) {
           break label$21
          }
          $3 = $9 - 1 | 0;
          if (HEAPU8[$3 | 0] != 93) {
           break label$21
          }
          HEAP8[$3 | 0] = 0;
          $12_1 = 0;
          $2_1 = $1_1 + 1 | 0;
          $7_1 = $1644($2_1, 93, $3 - $2_1 | 0);
          if ($7_1) {
           $1_1 = $7_1 + 1 | 0;
           $12_1 = $1644($1_1, 91, $3 - $1_1 | 0);
          }
          if (!$7_1) {
           break label$20
          }
          $1_1 = $6_1;
          if (!$12_1) {
           break label$19
          }
          HEAP8[$7_1 | 0] = 0;
          $7_1 = HEAP32[18392];
          $3 = $2_1;
          $2_1 = -1;
          while (1) {
           $1_1 = $3;
           $3 = $1_1 + 1 | 0;
           $5_1 = HEAPU8[$1_1 | 0];
           if ($5_1) {
            if (!(($5_1 | 0) != 35 | HEAPU8[$3 | 0] != 35)) {
             $2_1 = HEAPU8[$1_1 + 2 | 0] == 35 ? -1 : $2_1
            }
            $2_1 = HEAP32[(($5_1 ^ $2_1 & 255) << 2) + 19360 >> 2] ^ $2_1 >>> 8;
           }
           if ($5_1) {
            continue
           }
           break;
          };
          $6_1 = HEAP32[$7_1 + 12144 >> 2];
          $1_1 = 0;
          label$29 : {
           if (($6_1 | 0) <= 0) {
            break label$29
           }
           $5_1 = $2_1 ^ -1;
           $3 = HEAP32[$7_1 + 12152 >> 2];
           $1_1 = 0;
           label$30 : {
            while (1) {
             $2_1 = $3 + Math_imul($1_1, 36) | 0;
             if (($5_1 | 0) == HEAP32[$2_1 + 4 >> 2]) {
              break label$30
             }
             $1_1 = $1_1 + 1 | 0;
             if (($1_1 | 0) != ($6_1 | 0)) {
              continue
             }
             break;
            };
            $1_1 = 0;
            break label$29;
           }
           $1_1 = $2_1;
          }
          $5_1 = 0;
          if (!$1_1) {
           break label$19
          }
          $5_1 = FUNCTION_TABLE[HEAP32[$1_1 + 16 >> 2]]($4_1, $1_1, $12_1 + 1 | 0) | 0;
          break label$19;
         }
         if (!$6_1 | !$5_1) {
          break label$20
         }
         FUNCTION_TABLE[HEAP32[$6_1 + 20 >> 2]]($4_1, $6_1, $5_1, $1_1);
        }
        $1_1 = $6_1;
       }
       $3 = $5_1;
       $2_1 = $9 + 1 | 0;
       if ($8 >>> 0 > $2_1 >>> 0) {
        continue label$12
       }
       break label$11;
      case 0:
      case 3:
       break label$14;
      };
     }
     $1_1 = $1_1 + 1 | 0;
     continue;
    };
   };
  }
  HEAP8[$4_1 + 12125 | 0] = 1;
  $1602($11_1, $0_1, $10_1);
  if (HEAP32[$4_1 + 12144 >> 2] > 0) {
   $1_1 = 0;
   while (1) {
    $2_1 = HEAP32[$4_1 + 12152 >> 2] + Math_imul($1_1, 36) | 0;
    $0_1 = HEAP32[$2_1 + 24 >> 2];
    if ($0_1) {
     FUNCTION_TABLE[$0_1 | 0]($4_1, $2_1)
    }
    $0_1 = $1_1 + 1 | 0;
    $1_1 = $0_1;
    if (($1_1 | 0) < HEAP32[$4_1 + 12144 >> 2]) {
     continue
    }
    break;
   };
  }
 }
 
 function $139($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[18392];
  $1_1 = HEAP32[$3 + 7844 >> 2];
  if (!(HEAPU8[$1_1 + 11 | 0] & 8)) {
   $5_1 = HEAP16[$1_1 + 156 >> 1];
   $2_1 = $5_1 + $0_1 | 0;
   label$2 : {
    label$3 : {
     if (($2_1 | 0) < 0) {
      break label$3
     }
     $4_1 = HEAP32[$3 + 7020 >> 2];
     while (1) {
      if (($2_1 | 0) >= ($4_1 | 0)) {
       break label$3
      }
      $1_1 = HEAP32[HEAP32[$3 + 7028 >> 2] + ($2_1 << 2) >> 2];
      if (!(!HEAPU8[$1_1 + 139 | 0] | ($1_1 | 0) != HEAP32[$1_1 + 736 >> 2] | HEAPU8[$1_1 + 10 | 0] & 8)) {
       break label$2
      }
      $2_1 = $0_1 + $2_1 | 0;
      if (($2_1 | 0) >= 0) {
       continue
      }
      break;
     };
    }
    $1_1 = 0;
   }
   label$6 : {
    if ($1_1) {
     break label$6
    }
    $2_1 = 0;
    $2_1 = ($0_1 | 0) < 0 ? HEAP32[$3 + 7020 >> 2] - 1 | 0 : $2_1;
    label$8 : {
     if (($2_1 | 0) < 0) {
      break label$8
     }
     $4_1 = HEAP32[$3 + 7020 >> 2];
     while (1) {
      if (($2_1 | 0) == ($5_1 | 0) | ($2_1 | 0) >= ($4_1 | 0)) {
       break label$8
      }
      $1_1 = HEAP32[HEAP32[$3 + 7028 >> 2] + ($2_1 << 2) >> 2];
      if (!(!HEAPU8[$1_1 + 139 | 0] | ($1_1 | 0) != HEAP32[$1_1 + 736 >> 2] | HEAPU8[$1_1 + 10 | 0] & 8)) {
       break label$6
      }
      $2_1 = $0_1 + $2_1 | 0;
      if (($2_1 | 0) >= 0) {
       continue
      }
      break;
     };
    }
    $1_1 = 0;
   }
   if ($1_1) {
    HEAP32[$3 + 7844 >> 2] = $1_1;
    HEAP32[$3 + 7848 >> 2] = $1_1;
   }
   HEAP8[$3 + 7864 | 0] = 0;
  }
 }
 
 function $140($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $9 = global$0 - 16 | 0;
  global$0 = $9;
  label$1 : {
   label$2 : {
    $3 = HEAP32[18392];
    if (!(HEAPU8[$3 + 7570 | 0] | !HEAPU8[$3 + 7571 | 0])) {
     $1_1 = HEAP32[$3 + 7508 >> 2];
     if ($1_1) {
      break label$2
     }
    }
    if (!(!(HEAPF32[$3 + 228 >> 2] >= Math_fround(-256.0e3)) | !(HEAPF32[$3 + 232 >> 2] >= Math_fround(-256.0e3)))) {
     $1_1 = HEAP32[$3 + 232 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$3 + 228 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     break label$1;
    }
    $1_1 = HEAP32[$3 + 8176 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$3 + 8172 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    break label$1;
   }
   $8 = HEAPF32[$1_1 + 228 >> 2];
   $6_1 = $1_1 + (HEAP32[$3 + 7564 >> 2] << 4) | 0;
   $2_1 = Math_fround($8 + HEAPF32[$6_1 + 776 >> 2]);
   $4_1 = HEAPF32[$1_1 + 224 >> 2];
   $5_1 = Math_fround($4_1 + HEAPF32[$6_1 + 772 >> 2]);
   $7_1 = Math_fround($8 + HEAPF32[$6_1 + 768 >> 2]);
   $8 = Math_fround($4_1 + HEAPF32[$6_1 + 764 >> 2]);
   label$5 : {
    if (HEAPF32[$1_1 + 104 >> 2] == Math_fround(3402823466385288598117041.0e14) & HEAPF32[$1_1 + 108 >> 2] == Math_fround(3402823466385288598117041.0e14) | HEAP32[$1_1 + 536 >> 2] == HEAP32[$3 + 6984 >> 2]) {
     break label$5
    }
    $155($9 + 8 | 0, $1_1);
    $4_1 = Math_fround(HEAPF32[$1_1 + 88 >> 2] - HEAPF32[$9 + 8 >> 2]);
    $8 = Math_fround($8 + $4_1);
    $10_1 = Math_fround(HEAPF32[$1_1 + 92 >> 2] - HEAPF32[$9 + 12 >> 2]);
    $7_1 = Math_fround($7_1 + $10_1);
    $5_1 = Math_fround($5_1 + $4_1);
    $2_1 = Math_fround($2_1 + $10_1);
   }
   $1_1 = HEAP32[HEAP32[$3 + 7504 >> 2] >> 2];
   $4_1 = HEAPF32[$1_1 + 8 >> 2];
   $10_1 = Math_fround($4_1 + HEAPF32[$1_1 + 16 >> 2]);
   $12_1 = $2_1;
   $11_1 = HEAPF32[$3 + 5480 >> 2];
   $2_1 = Math_fround($2_1 - $7_1);
   $2_1 = Math_fround($12_1 - ($2_1 > $11_1 ? $11_1 : $2_1));
   $2_1 = $2_1 < $4_1 ? $4_1 : $2_1 > $10_1 ? $10_1 : $2_1;
   label$8 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $6_1 = ~~$2_1;
     break label$8;
    }
    $6_1 = -2147483648;
   }
   $7_1 = HEAPF32[$3 + 5476 >> 2];
   $4_1 = HEAPF32[$1_1 + 12 >> 2];
   $2_1 = HEAPF32[$1_1 + 4 >> 2];
   HEAPF32[$0_1 + 4 >> 2] = $6_1 | 0;
   $4_1 = Math_fround($2_1 + $4_1);
   $7_1 = Math_fround($7_1 * Math_fround(4.0));
   $5_1 = Math_fround($5_1 - $8);
   $5_1 = Math_fround($8 + ($5_1 > $7_1 ? $7_1 : $5_1));
   $5_1 = $2_1 > $5_1 ? $2_1 : $4_1 < $5_1 ? $4_1 : $5_1;
   label$10 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $6_1 = ~~$5_1;
     break label$10;
    }
    $6_1 = -2147483648;
   }
   HEAPF32[$0_1 >> 2] = $6_1 | 0;
  }
  global$0 = $9 + 16 | 0;
 }
 
 function $141($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = 0;
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $1_1 = HEAP32[18392];
  if (HEAPU8[$1_1 + 7877 | 0] | HEAPU8[$1_1 + 7878 | 0]) {
   $0_1 = $1_1 + 7324 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 7304 >> 2] = 1;
   HEAP32[$1_1 + 7300 >> 2] = HEAP32[$1_1 + 7300 >> 2] | 65;
   HEAPF32[$1_1 + 7384 >> 2] = HEAPF32[$1_1 + 5692 >> 2] * Math_fround(.6000000238418579);
   $7_1 = HEAPF32[$1_1 + 5600 >> 2];
   HEAPF32[$1_1 + 7320 >> 2] = Math_fround($7_1 * Math_fround(8.0)) + HEAPF32[$1_1 + 232 >> 2];
   HEAPF32[$1_1 + 7316 >> 2] = HEAPF32[$1_1 + 228 >> 2] + Math_fround($7_1 * Math_fround(16.0));
   $0_1 = 1;
  }
  HEAP32[$3 + 16 >> 2] = HEAP16[$1_1 + 12078 >> 1];
  $21($3 + 32 | 0, 16, 12868, $3 + 16 | 0);
  label$3 : {
   if (!($0_1 & 1)) {
    break label$3
   }
   $2_1 = $3 + 32 | 0;
   $0_1 = -1;
   while (1) {
    $5_1 = $2_1;
    $2_1 = $2_1 + 1 | 0;
    $4_1 = HEAPU8[$5_1 | 0];
    if ($4_1) {
     $0_1 = ($4_1 | 0) != 35 | HEAPU8[$2_1 | 0] != 35 ? $0_1 : HEAPU8[$5_1 + 2 | 0] == 35 ? -1 : $0_1;
     $0_1 = HEAP32[(($4_1 ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
    }
    if ($4_1) {
     continue
    }
    break;
   };
   $4_1 = $0_1 ^ -1;
   $0_1 = HEAP32[18392];
   $8 = HEAP32[$0_1 + 7064 >> 2];
   $2_1 = $8;
   $5_1 = HEAP32[$0_1 + 7056 >> 2];
   if ($5_1) {
    $0_1 = $5_1;
    while (1) {
     $6_1 = $0_1 >>> 1 | 0;
     $9 = ($6_1 << 3) + $2_1 | 0;
     $10_1 = HEAPU32[$9 >> 2] < $4_1 >>> 0;
     $2_1 = $10_1 ? $9 + 8 | 0 : $2_1;
     $0_1 = $10_1 ? $0_1 + ($6_1 ^ -1) | 0 : $6_1;
     if ($0_1) {
      continue
     }
     break;
    };
   }
   $0_1 = 0;
   label$12 : {
    if (($2_1 | 0) == (($5_1 << 3) + $8 | 0)) {
     break label$12
    }
    $0_1 = 0;
    if (HEAP32[$2_1 >> 2] != ($4_1 | 0)) {
     break label$12
    }
    $0_1 = HEAP32[$2_1 + 4 >> 2];
   }
   if (!$0_1 | !HEAPU8[$0_1 + 138 | 0]) {
    break label$3
   }
   HEAP8[$0_1 + 172 | 0] = 1;
   HEAP8[$0_1 + 145 | 0] = 1;
   $0_1 = HEAPU16[$1_1 + 12078 >> 1] + 1 | 0;
   HEAP16[$1_1 + 12078 >> 1] = $0_1;
   HEAP32[$3 >> 2] = $0_1 << 16 >> 16;
   $21($3 + 32 | 0, 16, 12868, $3);
  }
  $143($3 + 32 | 0, 0, 34341703);
  global$0 = $3 + 48 | 0;
 }
 
 function $142() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0);
  $1_1 = HEAP32[18392];
  $6_1 = HEAP32[$1_1 + 7080 >> 2];
  if (!(HEAPU8[$1_1 + 6997 | 0] ? HEAP32[$1_1 + 7044 >> 2] <= 1 : 0)) {
   if (HEAP32[$6_1 + 368 >> 2]) {
    $553()
   }
   $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
   HEAP8[$0_1 + 140 | 0] = 1;
   $380(HEAP32[$0_1 + 580 >> 2]);
   $4_1 = HEAP32[$0_1 + 580 >> 2];
   $4_1 = ((HEAP32[$4_1 + 60 >> 2] << 4) + HEAP32[$4_1 + 68 >> 2] | 0) - 16 | 0;
   $7_1 = HEAP32[$4_1 >> 2];
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   $5_1 = HEAP32[$4_1 + 12 >> 2];
   $3 = $0_1 + 504 | 0;
   HEAP32[$3 >> 2] = HEAP32[$4_1 + 8 >> 2];
   HEAP32[$3 + 4 >> 2] = $5_1;
   HEAP32[$0_1 + 496 >> 2] = $7_1;
   HEAP32[$0_1 + 500 >> 2] = $2_1;
   if (!(HEAP8[$6_1 + 11 | 0] & 1)) {
    $164()
   }
   $7_1 = HEAP32[$1_1 + 7044 >> 2];
   $4_1 = $7_1 - 1 | 0;
   $0_1 = HEAP32[$1_1 + 7052 >> 2] + Math_imul($4_1, 84) | 0;
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$1_1 + 7240 >> 2] = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$1_1 + 7244 >> 2] = $2_1;
   HEAP32[$1_1 + 7296 >> 2] = HEAP32[$0_1 + 60 >> 2];
   $3 = $0_1 + 52 | 0;
   $5_1 = HEAP32[$3 + 4 >> 2];
   $2_1 = $1_1 + 7288 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $3 = $0_1 + 44 | 0;
   $5_1 = HEAP32[$3 + 4 >> 2];
   $2_1 = $1_1 + 7280 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $3 = $0_1 + 36 | 0;
   $5_1 = HEAP32[$3 + 4 >> 2];
   $2_1 = $1_1 + 7272 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $3 = $0_1 + 28 | 0;
   $5_1 = HEAP32[$3 + 4 >> 2];
   $2_1 = $1_1 + 7264 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $3 = $0_1 + 20 | 0;
   $5_1 = HEAP32[$3 + 4 >> 2];
   $2_1 = $1_1 + 7256 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $0_1 = $0_1 + 12 | 0;
   $3 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = $1_1 + 7248 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3;
   $0_1 = HEAP32[$6_1 + 8 >> 2];
   if ($0_1 & 268435456) {
    HEAP32[$1_1 + 7492 >> 2] = HEAP32[$1_1 + 7492 >> 2] - 1
   }
   if ($0_1 & 67108864) {
    HEAP32[$1_1 + 7480 >> 2] = HEAP32[$1_1 + 7480 >> 2] - 1
   }
   HEAP32[$1_1 + 7044 >> 2] = $4_1;
   $0_1 = 0;
   $0_1 = $4_1 ? HEAP32[(HEAP32[$1_1 + 7052 >> 2] + Math_imul($7_1, 84) | 0) - 168 >> 2] : $0_1;
   $1_1 = HEAP32[18392];
   HEAP32[$1_1 + 7080 >> 2] = $0_1;
   if ($0_1) {
    $6_1 = HEAP32[$0_1 + 372 >> 2];
    if (($6_1 | 0) == -1) {
     $2_1 = 0
    } else {
     $2_1 = HEAP32[$1_1 + 8064 >> 2] + Math_imul($6_1, 456) | 0
    }
    HEAP32[$1_1 + 8036 >> 2] = $2_1;
    $8 = Math_fround(HEAPF32[$1_1 + 6472 >> 2] * HEAPF32[$0_1 + 572 >> 2]);
    $0_1 = HEAP32[$0_1 + 728 >> 2];
    if ($0_1) {
     $8 = Math_fround($8 * HEAPF32[$0_1 + 572 >> 2])
    }
    HEAPF32[$1_1 + 6468 >> 2] = $8;
    HEAPF32[$1_1 + 6488 >> 2] = $8;
    return;
   }
   HEAP32[$1_1 + 8036 >> 2] = 0;
  }
 }
 
 function $143($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = 0, $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32_1 = Math_fround(0), $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = Math_fround(0), $37 = 0, $38_1 = 0, $39_1 = 0, $40_1 = Math_fround(0), $41_1 = 0, $42_1 = Math_fround(0), $43_1 = 0, $44_1 = 0.0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49 = Math_fround(0), $50_1 = 0, $51_1 = 0.0, $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = 0, $55_1 = 0, $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = 0, $61 = 0;
  $9 = global$0 - 272 | 0;
  global$0 = $9;
  $15_1 = HEAP32[18392];
  $3 = $0_1;
  $5_1 = -1;
  while (1) {
   $7_1 = $3;
   $3 = $3 + 1 | 0;
   $4_1 = HEAPU8[$7_1 | 0];
   if ($4_1) {
    $5_1 = ($4_1 | 0) != 35 | HEAPU8[$3 | 0] != 35 ? $5_1 : HEAPU8[$7_1 + 2 | 0] == 35 ? -1 : $5_1;
    $5_1 = HEAP32[(($4_1 ^ $5_1 & 255) << 2) + 19360 >> 2] ^ $5_1 >>> 8;
   }
   if ($4_1) {
    continue
   }
   break;
  };
  $18_1 = $5_1 ^ -1;
  $4_1 = HEAP32[$15_1 + 7064 >> 2];
  $7_1 = $4_1;
  $10_1 = HEAP32[$15_1 + 7056 >> 2];
  if ($10_1) {
   $3 = $4_1;
   $5_1 = $10_1;
   while (1) {
    $12_1 = $5_1 >>> 1 | 0;
    $7_1 = ($12_1 << 3) + $3 | 0;
    $20_1 = $18_1 >>> 0 > HEAPU32[$7_1 >> 2];
    $3 = $20_1 ? $7_1 + 8 | 0 : $3;
    $7_1 = $3;
    $5_1 = $20_1 ? $5_1 + ($12_1 ^ -1) | 0 : $12_1;
    if ($5_1) {
     continue
    }
    break;
   };
  }
  $3 = 0;
  label$9 : {
   if (($4_1 + ($10_1 << 3) | 0) == ($7_1 | 0)) {
    break label$9
   }
   $3 = 0;
   if (($18_1 | 0) != HEAP32[$7_1 >> 2]) {
    break label$9
   }
   $3 = HEAP32[$7_1 + 4 >> 2];
  }
  $31_1 = $3;
  label$11 : {
   if (!$3) {
    if ($15_1) {
     $3 = $15_1 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $10_1 = $15_1 + 7056 | 0;
    $7_1 = FUNCTION_TABLE[HEAP32[18314]](808, HEAP32[18394]) | 0;
    $3 = $7_1;
    HEAP32[$3 + 12 >> 2] = 0;
    HEAP32[$3 + 16 >> 2] = 0;
    HEAP32[$3 + 360 >> 2] = 0;
    $5_1 = $3 + 352 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 272 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 280 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$3 + 288 >> 2] = 0;
    $5_1 = $3 + 308 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 316 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 324 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 332 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$3 + 340 >> 2] = 0;
    $5_1 = $3 + 764 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 772 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 780 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 788 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 20 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 28 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 36 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 44 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 52 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 60 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 128 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 120 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 112 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 104 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 96 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$3 + 88 >> 2] = 0;
    HEAP32[$3 + 92 >> 2] = 0;
    $1604($3 + 180 | 0, 0, 84);
    $1604($3 + 392 | 0, 0, 144);
    $5_1 = $3 + 564 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $5_1 = $3 + 556 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$3 + 548 >> 2] = 0;
    HEAP32[$3 + 552 >> 2] = 0;
    $20_1 = $1604($3 + 584 | 0, 0, 144);
    $5_1 = $1604($3, 0, 808);
    $3 = $0_1;
    $4_1 = $1697($3);
    $18_1 = HEAP32[18392];
    if ($18_1) {
     $18_1 = $18_1 + 876 | 0;
     HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] + 1;
    }
    $4_1 = $4_1 + 1 | 0;
    HEAP32[$5_1 >> 2] = $1602(FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0, $3, $4_1);
    HEAP32[$5_1 + 76 >> 2] = $1697($3) + 1;
    $18_1 = -1;
    while (1) {
     $4_1 = $3;
     $3 = $4_1 + 1 | 0;
     $12_1 = HEAPU8[$4_1 | 0];
     if ($12_1) {
      $4_1 = ($12_1 | 0) != 35 | HEAPU8[$3 | 0] != 35 ? $18_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? -1 : $18_1;
      $18_1 = HEAP32[(($12_1 ^ $4_1 & 255) << 2) + 19360 >> 2] ^ $4_1 >>> 8;
     }
     if ($12_1) {
      continue
     }
     break;
    };
    HEAP32[$5_1 + 4 >> 2] = $18_1 ^ -1;
    $4_1 = HEAP32[$5_1 + 196 >> 2];
    $3 = HEAP32[$5_1 + 200 >> 2];
    label$80 : {
     if (($4_1 | 0) != ($3 | 0)) {
      break label$80
     }
     $18_1 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
     $4_1 = $4_1 + 1 | 0;
     $4_1 = ($4_1 | 0) < ($18_1 | 0) ? $18_1 : $4_1;
     if (($3 | 0) >= ($4_1 | 0)) {
      break label$80
     }
     $3 = HEAP32[18392];
     if ($3) {
      $3 = $3 + 876 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
     }
     $3 = FUNCTION_TABLE[HEAP32[18314]]($4_1 << 2, HEAP32[18394]) | 0;
     $18_1 = HEAP32[$5_1 + 204 >> 2];
     if ($18_1) {
      $1602($3, $18_1, HEAP32[$5_1 + 196 >> 2] << 2);
      $18_1 = HEAP32[$5_1 + 204 >> 2];
      label$13 : {
       if (!$18_1) {
        break label$13
       }
       $12_1 = HEAP32[18392];
       if (!$12_1) {
        break label$13
       }
       $12_1 = $12_1 + 876 | 0;
       HEAP32[$12_1 >> 2] = HEAP32[$12_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($18_1, HEAP32[18394]);
     }
     HEAP32[$5_1 + 200 >> 2] = $4_1;
     HEAP32[$5_1 + 204 >> 2] = $3;
    }
    $4_1 = $5_1 + 204 | 0;
    HEAP32[HEAP32[$4_1 >> 2] + (HEAP32[$5_1 + 196 >> 2] << 2) >> 2] = HEAP32[$5_1 + 4 >> 2];
    $18_1 = HEAP32[$5_1 + 196 >> 2];
    HEAP32[$5_1 + 196 >> 2] = $18_1 + 1;
    $3 = 14982;
    $19 = HEAP32[HEAP32[$4_1 >> 2] + ($18_1 << 2) >> 2] ^ -1;
    $18_1 = $19;
    while (1) {
     $4_1 = $3;
     $3 = $4_1 + 1 | 0;
     $12_1 = HEAPU8[$4_1 | 0];
     if ($12_1) {
      $18_1 = ($12_1 | 0) != 35 | HEAPU8[$3 | 0] != 35 ? $18_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? $19 : $18_1;
      $18_1 = HEAP32[(($12_1 ^ $18_1 & 255) << 2) + 19360 >> 2] ^ $18_1 >>> 8;
     }
     if (($4_1 | 0) != 14987) {
      continue
     }
     break;
    };
    $4_1 = $18_1 ^ -1;
    $3 = HEAP32[18392];
    if (($4_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
     HEAP32[$3 + 7140 >> 2] = $4_1
    }
    if (HEAP32[$3 + 7196 >> 2] == ($4_1 | 0)) {
     HEAP8[$3 + 7200 | 0] = 1
    }
    if (HEAP32[$3 + 7112 >> 2] == ($4_1 | 0)) {
     $75($4_1, 11, 14982)
    }
    $3 = $5_1;
    HEAP32[$3 + 112 >> 2] = 1056964608;
    HEAP32[$3 + 116 >> 2] = 1056964608;
    HEAP32[$3 + 104 >> 2] = 2139095039;
    HEAP32[$3 + 108 >> 2] = 2139095039;
    HEAP32[$3 + 80 >> 2] = $4_1;
    HEAP32[$3 + 168 >> 2] = -1;
    HEAP16[$3 + 164 >> 1] = 65535;
    HEAP32[$3 + 188 >> 2] = 2139095039;
    HEAP32[$3 + 192 >> 2] = 2139095039;
    HEAP32[$3 + 580 >> 2] = $20_1;
    HEAP32[$3 + 572 >> 2] = 1065353216;
    HEAP32[$3 + 576 >> 2] = -1;
    HEAP32[$3 + 536 >> 2] = -1;
    HEAP32[$3 + 540 >> 2] = -1082130432;
    HEAP32[$3 + 180 >> 2] = 2139095039;
    HEAP32[$3 + 184 >> 2] = 2139095039;
    HEAP32[$3 + 628 >> 2] = $15_1 + 6476;
    HEAP32[$3 + 632 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$3 + 176 >> 2] = HEAPU8[$3 + 179 | 0] << 24 | 986895;
    HEAP32[$9 + 144 >> 2] = $7_1;
    HEAP32[$7_1 + 8 >> 2] = $2_1;
    $18_1 = HEAP32[$7_1 + 4 >> 2];
    $4_1 = $7_1;
    $3 = $10_1;
    $12_1 = HEAP32[$3 + 8 >> 2];
    $10_1 = $12_1;
    $5_1 = HEAP32[$3 >> 2];
    if ($5_1) {
     $7_1 = $5_1;
     while (1) {
      $20_1 = $7_1 >>> 1 | 0;
      $22_1 = ($20_1 << 3) + $10_1 | 0;
      $19 = HEAPU32[$22_1 >> 2] < $18_1 >>> 0;
      $10_1 = $19 ? $22_1 + 8 | 0 : $10_1;
      $7_1 = $19 ? $7_1 + ($20_1 ^ -1) | 0 : $20_1;
      if ($7_1) {
       continue
      }
      break;
     };
    }
    __inlined_func$37 : {
     if (!(HEAP32[$10_1 >> 2] == ($18_1 | 0) & ($10_1 | 0) != (($5_1 << 3) + $12_1 | 0))) {
      $7_1 = $10_1 - $12_1 >> 3;
      $10_1 = HEAP32[$3 + 4 >> 2];
      label$5 : {
       if (($10_1 | 0) != ($5_1 | 0)) {
        break label$5
       }
       $12_1 = $10_1;
       $10_1 = $10_1 ? $10_1 + (($10_1 | 0) / 2 | 0) | 0 : 8;
       $5_1 = $5_1 + 1 | 0;
       $5_1 = ($5_1 | 0) < ($10_1 | 0) ? $10_1 : $5_1;
       if (($12_1 | 0) >= ($5_1 | 0)) {
        break label$5
       }
       $10_1 = HEAP32[18392];
       if ($10_1) {
        $10_1 = $10_1 + 876 | 0;
        HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] + 1;
       }
       $10_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1 << 3, HEAP32[18394]) | 0;
       $12_1 = HEAP32[$3 + 8 >> 2];
       if ($12_1) {
        $1602($10_1, $12_1, HEAP32[$3 >> 2] << 3);
        $12_1 = HEAP32[$3 + 8 >> 2];
        label$10 : {
         if (!$12_1) {
          break label$10
         }
         $20_1 = HEAP32[18392];
         if (!$20_1) {
          break label$10
         }
         $20_1 = $20_1 + 876 | 0;
         HEAP32[$20_1 >> 2] = HEAP32[$20_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($12_1, HEAP32[18394]);
       }
       HEAP32[$3 + 4 >> 2] = $5_1;
       HEAP32[$3 + 8 >> 2] = $10_1;
      }
      $5_1 = HEAP32[$3 >> 2];
      if (($7_1 | 0) < ($5_1 | 0)) {
       $10_1 = HEAP32[$3 + 8 >> 2] + ($7_1 << 3) | 0;
       $1603($10_1 + 8 | 0, $10_1, $5_1 - $7_1 << 3);
      }
      $5_1 = HEAP32[$3 + 8 >> 2] + ($7_1 << 3) | 0;
      HEAP32[$5_1 + 4 >> 2] = $4_1;
      HEAP32[$5_1 >> 2] = $18_1;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
      break __inlined_func$37;
     }
     HEAP32[$10_1 + 4 >> 2] = $4_1;
    }
    $4_1 = HEAP32[18392];
    $3 = HEAP32[HEAP32[$4_1 + 7504 >> 2] >> 2];
    $6_1 = HEAPF32[$3 + 8 >> 2];
    $7_1 = HEAP32[$9 + 144 >> 2];
    HEAPF32[$7_1 + 12 >> 2] = HEAPF32[$3 + 4 >> 2] + Math_fround(60.0);
    HEAPF32[$7_1 + 16 >> 2] = $6_1 + Math_fround(60.0);
    label$141 : {
     if ($2_1 & 256) {
      break label$141
     }
     $3 = HEAP32[$4_1 + 12164 >> 2];
     $18_1 = $3 + 4 | 0;
     $5_1 = $3 ? $18_1 : 0;
     label$15 : {
      if (!$3) {
       $3 = $5_1;
       break label$15;
      }
      $12_1 = HEAP32[$7_1 + 4 >> 2];
      while (1) {
       if (HEAP32[$5_1 >> 2] == ($12_1 | 0)) {
        $3 = $5_1;
        break label$15;
       }
       $10_1 = $5_1 + HEAP32[$5_1 - 4 >> 2] | 0;
       $20_1 = $18_1 + HEAP32[$4_1 + 12156 >> 2] | 0;
       $5_1 = ($20_1 | 0) != ($10_1 | 0) ? $10_1 : 0;
       $3 = $5_1;
       if (($10_1 | 0) != ($20_1 | 0)) {
        continue
       }
       break;
      };
     }
     if (!$3) {
      break label$141
     }
     $5_1 = HEAP32[$15_1 + 12164 >> 2];
     HEAP32[$7_1 + 176 >> 2] = HEAP32[$7_1 + 176 >> 2] & -263173;
     HEAP32[$7_1 + 576 >> 2] = $3 - $5_1;
     $5_1 = HEAP16[$3 + 4 >> 1];
     HEAPF32[$7_1 + 16 >> 2] = HEAP16[$3 + 6 >> 1];
     HEAPF32[$7_1 + 12 >> 2] = $5_1 | 0;
     $5_1 = HEAP16[$3 + 8 >> 1];
     label$19 : {
      if (($5_1 | 0) <= 0) {
       break label$19
      }
      $10_1 = HEAP16[$3 + 10 >> 1];
      if (($10_1 | 0) <= 0) {
       break label$19
      }
      $6_1 = Math_fround($10_1 | 0);
      HEAPF32[$7_1 + 32 >> 2] = $6_1;
      $8 = Math_fround($5_1 | 0);
      HEAPF32[$7_1 + 28 >> 2] = $8;
      HEAPF32[$7_1 + 24 >> 2] = $6_1;
      HEAPF32[$7_1 + 20 >> 2] = $8;
     }
     HEAP8[$7_1 + 141 | 0] = HEAPU8[$3 + 12 | 0];
    }
    $3 = HEAP32[$7_1 + 16 >> 2];
    $5_1 = $7_1 + 232 | 0;
    $10_1 = HEAP32[$7_1 + 12 >> 2];
    HEAP32[$5_1 >> 2] = $10_1;
    HEAP32[$5_1 + 4 >> 2] = $3;
    $5_1 = $7_1 + 224 | 0;
    HEAP32[$5_1 >> 2] = $10_1;
    HEAP32[$5_1 + 4 >> 2] = $3;
    label$201 : {
     if ($2_1 & 64) {
      HEAP8[$7_1 + 167 | 0] = 0;
      HEAP16[$7_1 + 164 >> 1] = 514;
      break label$201;
     }
     if (HEAPF32[$7_1 + 20 >> 2] <= Math_fround(0.0)) {
      HEAP8[$7_1 + 164 | 0] = 2
     }
     if (HEAPF32[$7_1 + 24 >> 2] <= Math_fround(0.0)) {
      HEAP8[$7_1 + 165 | 0] = 2
     }
     HEAP8[$7_1 + 167 | 0] = HEAP8[$7_1 + 165 | 0] > 0 | HEAP8[$7_1 + 164 | 0] > 0;
    }
    label$25 : {
     if ($2_1 & 8192) {
      $4_1 = $9 + 144 | 0;
      $3 = $15_1 + 7008 | 0;
      $5_1 = HEAP32[$3 >> 2];
      label$12 : {
       if (!$5_1) {
        $7_1 = HEAP32[$3 + 4 >> 2];
        label$33 : {
         if (($7_1 | 0) != ($5_1 | 0)) {
          break label$33
         }
         $12_1 = $7_1;
         $7_1 = $7_1 ? $7_1 + (($7_1 | 0) / 2 | 0) | 0 : 8;
         $5_1 = $5_1 + 1 | 0;
         $5_1 = ($5_1 | 0) < ($7_1 | 0) ? $7_1 : $5_1;
         if (($12_1 | 0) >= ($5_1 | 0)) {
          break label$33
         }
         $7_1 = HEAP32[18392];
         if ($7_1) {
          $7_1 = $7_1 + 876 | 0;
          HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] + 1;
         }
         $7_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1 << 2, HEAP32[18394]) | 0;
         $10_1 = HEAP32[$3 + 8 >> 2];
         if ($10_1) {
          $1602($7_1, $10_1, HEAP32[$3 >> 2] << 2);
          $10_1 = HEAP32[$3 + 8 >> 2];
          label$84 : {
           if (!$10_1) {
            break label$84
           }
           $18_1 = HEAP32[18392];
           if (!$18_1) {
            break label$84
           }
           $18_1 = $18_1 + 876 | 0;
           HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] - 1;
          }
          FUNCTION_TABLE[HEAP32[18315]]($10_1, HEAP32[18394]);
         }
         HEAP32[$3 + 4 >> 2] = $5_1;
         HEAP32[$3 + 8 >> 2] = $7_1;
        }
        $5_1 = HEAP32[$3 + 8 >> 2] + (HEAP32[$3 >> 2] << 2) | 0;
        break label$12;
       }
       $7_1 = HEAP32[$3 + 4 >> 2];
       label$95 : {
        if (($7_1 | 0) != ($5_1 | 0)) {
         break label$95
        }
        $12_1 = $7_1;
        $7_1 = $7_1 ? $7_1 + (($7_1 | 0) / 2 | 0) | 0 : 8;
        $5_1 = $5_1 + 1 | 0;
        $5_1 = ($5_1 | 0) < ($7_1 | 0) ? $7_1 : $5_1;
        if (($12_1 | 0) >= ($5_1 | 0)) {
         break label$95
        }
        $7_1 = HEAP32[18392];
        if ($7_1) {
         $7_1 = $7_1 + 876 | 0;
         HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] + 1;
        }
        $7_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1 << 2, HEAP32[18394]) | 0;
        $10_1 = HEAP32[$3 + 8 >> 2];
        if ($10_1) {
         $1602($7_1, $10_1, HEAP32[$3 >> 2] << 2);
         $10_1 = HEAP32[$3 + 8 >> 2];
         label$146 : {
          if (!$10_1) {
           break label$146
          }
          $18_1 = HEAP32[18392];
          if (!$18_1) {
           break label$146
          }
          $18_1 = $18_1 + 876 | 0;
          HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] - 1;
         }
         FUNCTION_TABLE[HEAP32[18315]]($10_1, HEAP32[18394]);
        }
        HEAP32[$3 + 4 >> 2] = $5_1;
        HEAP32[$3 + 8 >> 2] = $7_1;
       }
       $5_1 = HEAP32[$3 >> 2];
       if (($5_1 | 0) > 0) {
        $7_1 = HEAP32[$3 + 8 >> 2];
        $1603($7_1 + 4 | 0, $7_1, $5_1 << 2);
       }
       $5_1 = HEAP32[$3 + 8 >> 2];
      }
      HEAP32[$5_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
      break label$25;
     }
     $5_1 = HEAP32[$15_1 + 7008 >> 2];
     $3 = HEAP32[$15_1 + 7012 >> 2];
     label$27 : {
      if (($5_1 | 0) != ($3 | 0)) {
       break label$27
      }
      $7_1 = $3;
      $3 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
      $5_1 = $5_1 + 1 | 0;
      $3 = ($3 | 0) > ($5_1 | 0) ? $3 : $5_1;
      if (($7_1 | 0) >= ($3 | 0)) {
       break label$27
      }
      if ($4_1) {
       $5_1 = $4_1 + 876 | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
      }
      $5_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 2, HEAP32[18394]) | 0;
      $7_1 = HEAP32[$15_1 + 7016 >> 2];
      if ($7_1) {
       $1602($5_1, $7_1, HEAP32[$15_1 + 7008 >> 2] << 2);
       $7_1 = HEAP32[$15_1 + 7016 >> 2];
       label$32 : {
        if (!$7_1) {
         break label$32
        }
        $4_1 = HEAP32[18392];
        if (!$4_1) {
         break label$32
        }
        $4_1 = $4_1 + 876 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($7_1, HEAP32[18394]);
      }
      HEAP32[$15_1 + 7012 >> 2] = $3;
      HEAP32[$15_1 + 7016 >> 2] = $5_1;
     }
     HEAP32[HEAP32[$15_1 + 7016 >> 2] + (HEAP32[$15_1 + 7008 >> 2] << 2) >> 2] = HEAP32[$9 + 144 >> 2];
     HEAP32[$15_1 + 7008 >> 2] = HEAP32[$15_1 + 7008 >> 2] + 1;
    }
    $3 = HEAP32[$9 + 144 >> 2];
    $147($3, 1, HEAP32[$3 + 8 >> 2]);
    $4_1 = HEAP32[$9 + 144 >> 2];
    break label$11;
   }
   $147($31_1, 0, $2_1);
   $4_1 = $31_1;
  }
  $5_1 = HEAP32[$15_1 + 6984 >> 2];
  $7_1 = HEAP32[$4_1 + 536 >> 2];
  HEAP8[$4_1 + 146 | 0] = HEAP32[$15_1 + 7044 >> 2] ? 0 : HEAPU8[$15_1 + 6997 | 0] != 0;
  $10_1 = $5_1 - 1 | 0;
  $3 = ($2_1 & 786944) == 786944 ? $2_1 | 6 : $2_1;
  if ($3 & 67108864) {
   $2_1 = HEAP32[$15_1 + 7476 >> 2] + Math_imul(HEAP32[$15_1 + 7480 >> 2], 36) | 0;
   $2_1 = HEAP32[$4_1 + 160 >> 2] != HEAP32[$2_1 >> 2] | HEAP32[$2_1 + 4 >> 2] != ($4_1 | 0) | ($7_1 | 0) < ($10_1 | 0);
  } else {
   $2_1 = ($7_1 | 0) < ($10_1 | 0)
  }
  $43_1 = $2_1;
  HEAP8[$4_1 + 144 | 0] = $2_1;
  if ($2_1) {
   HEAP32[$4_1 + 176 >> 2] = HEAP32[$4_1 + 176 >> 2] | 526344
  }
  $41_1 = ($5_1 | 0) == ($7_1 | 0);
  label$37 : {
   if (!$41_1) {
    HEAP32[$4_1 + 536 >> 2] = $5_1;
    HEAP32[$4_1 + 8 >> 2] = $3;
    $44_1 = HEAPF64[$15_1 + 6976 >> 3];
    HEAP16[$4_1 + 152 >> 1] = 0;
    HEAPF32[$4_1 + 540 >> 2] = $44_1;
    $2_1 = HEAP32[$15_1 + 7068 >> 2];
    HEAP32[$15_1 + 7068 >> 2] = $2_1 + 1;
    HEAP16[$4_1 + 154 >> 1] = $2_1;
    break label$37;
   }
   $3 = HEAP32[$4_1 + 8 >> 2];
  }
  $18_1 = $3;
  $3 = HEAP32[$4_1 + 728 >> 2];
  $2_1 = HEAP32[$15_1 + 7044 >> 2];
  if ($2_1) {
   $22_1 = HEAP32[(HEAP32[$15_1 + 7052 >> 2] + Math_imul($2_1, 84) | 0) - 84 >> 2]
  } else {
   $22_1 = 0
  }
  $26_1 = $41_1 ? $3 : $18_1 & 83886080 ? $22_1 : 0;
  $3 = HEAP32[$4_1 + 196 >> 2];
  if (!$3) {
   $2_1 = HEAP32[$4_1 + 200 >> 2];
   label$44 : {
    if (($2_1 | 0) != ($3 | 0)) {
     break label$44
    }
    $5_1 = $2_1;
    $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
    $3 = $3 + 1 | 0;
    $2_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
    if (($5_1 | 0) >= ($2_1 | 0)) {
     break label$44
    }
    $3 = HEAP32[18392];
    if ($3) {
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $3 = FUNCTION_TABLE[HEAP32[18314]]($2_1 << 2, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$4_1 + 204 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$4_1 + 196 >> 2] << 2);
     $5_1 = HEAP32[$4_1 + 204 >> 2];
     label$49 : {
      if (!$5_1) {
       break label$49
      }
      $7_1 = HEAP32[18392];
      if (!$7_1) {
       break label$49
      }
      $7_1 = $7_1 + 876 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 200 >> 2] = $2_1;
    HEAP32[$4_1 + 204 >> 2] = $3;
   }
   HEAP32[HEAP32[$4_1 + 204 >> 2] + (HEAP32[$4_1 + 196 >> 2] << 2) >> 2] = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$4_1 + 196 >> 2] = HEAP32[$4_1 + 196 >> 2] + 1;
  }
  HEAP32[$15_1 + 7080 >> 2] = $4_1;
  $25_1 = $9 + 200 | 0;
  HEAP32[$25_1 >> 2] = HEAP32[$15_1 + 7296 >> 2];
  $2_1 = $15_1 + 7288 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $9 + 192 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $3;
  $2_1 = $15_1 + 7280 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  $7_1 = $9 + 184 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $3;
  $2_1 = $15_1 + 7272 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  $10_1 = $9 + 176 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $3;
  $2_1 = $15_1 + 7264 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  $12_1 = $9 + 168 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $3;
  $2_1 = $15_1 + 7256 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  $20_1 = $9 + 160 | 0;
  HEAP32[$20_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$20_1 + 4 >> 2] = $3;
  $2_1 = $15_1 + 7248 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  $19 = $9 + 152 | 0;
  HEAP32[$19 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$19 + 4 >> 2] = $3;
  $2_1 = HEAP32[$15_1 + 7244 >> 2];
  HEAP32[$9 + 144 >> 2] = HEAP32[$15_1 + 7240 >> 2];
  HEAP32[$9 + 148 >> 2] = $2_1;
  $2_1 = HEAP32[18392];
  $34_1 = HEAPU16[$2_1 + 12076 >> 1];
  $33_1 = HEAP32[$2_1 + 7480 >> 2];
  $38_1 = HEAP32[$2_1 + 7444 >> 2];
  $39_1 = HEAP32[$2_1 + 7456 >> 2];
  $45_1 = HEAP32[$2_1 + 7432 >> 2];
  $37 = HEAP32[$2_1 + 7420 >> 2];
  $46_1 = HEAP32[$2_1 + 7408 >> 2];
  $47_1 = HEAP32[$2_1 + 7396 >> 2];
  $48_1 = HEAP32[HEAP32[$2_1 + 7080 >> 2] + 196 >> 2];
  $28_1 = HEAP32[$15_1 + 7044 >> 2];
  $3 = HEAP32[$15_1 + 7048 >> 2];
  label$50 : {
   if (($28_1 | 0) != ($3 | 0)) {
    break label$50
   }
   $35_1 = $3;
   $3 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
   $28_1 = $28_1 + 1 | 0;
   $3 = ($3 | 0) > ($28_1 | 0) ? $3 : $28_1;
   if (($35_1 | 0) >= ($3 | 0)) {
    break label$50
   }
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($3, 84), HEAP32[18394]) | 0;
   $28_1 = HEAP32[$15_1 + 7052 >> 2];
   if ($28_1) {
    $1602($2_1, $28_1, Math_imul(HEAP32[$15_1 + 7044 >> 2], 84));
    $28_1 = HEAP32[$15_1 + 7052 >> 2];
    label$54 : {
     if (!$28_1) {
      break label$54
     }
     $35_1 = HEAP32[18392];
     if (!$35_1) {
      break label$54
     }
     $35_1 = $35_1 + 876 | 0;
     HEAP32[$35_1 >> 2] = HEAP32[$35_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($28_1, HEAP32[18394]);
   }
   HEAP32[$15_1 + 7048 >> 2] = $3;
   HEAP32[$15_1 + 7052 >> 2] = $2_1;
  }
  $2_1 = HEAP32[$15_1 + 7052 >> 2] + Math_imul(HEAP32[$15_1 + 7044 >> 2], 84) | 0;
  HEAP32[$2_1 >> 2] = $4_1;
  $3 = HEAP32[$9 + 148 >> 2];
  HEAP32[$2_1 + 4 >> 2] = HEAP32[$9 + 144 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $3;
  $3 = HEAP32[$19 + 4 >> 2];
  $28_1 = $2_1 + 12 | 0;
  HEAP32[$28_1 >> 2] = HEAP32[$19 >> 2];
  HEAP32[$28_1 + 4 >> 2] = $3;
  $3 = HEAP32[$20_1 + 4 >> 2];
  $19 = $2_1 + 20 | 0;
  HEAP32[$19 >> 2] = HEAP32[$20_1 >> 2];
  HEAP32[$19 + 4 >> 2] = $3;
  $3 = HEAP32[$12_1 + 4 >> 2];
  $20_1 = $2_1 + 28 | 0;
  HEAP32[$20_1 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$20_1 + 4 >> 2] = $3;
  $3 = HEAP32[$10_1 + 4 >> 2];
  $12_1 = $2_1 + 36 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $3;
  $3 = HEAP32[$7_1 + 4 >> 2];
  $10_1 = $2_1 + 44 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$10_1 + 4 >> 2] = $3;
  $3 = HEAP32[$5_1 + 4 >> 2];
  $7_1 = $2_1 + 52 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $3;
  HEAP32[$2_1 + 60 >> 2] = HEAP32[$25_1 >> 2];
  HEAP16[$2_1 + 80 >> 1] = $34_1;
  HEAP16[$2_1 + 78 >> 1] = $33_1;
  HEAP16[$2_1 + 76 >> 1] = $38_1;
  HEAP16[$2_1 + 74 >> 1] = $39_1;
  HEAP16[$2_1 + 72 >> 1] = $45_1;
  HEAP16[$2_1 + 70 >> 1] = $37;
  HEAP16[$2_1 + 68 >> 1] = $46_1;
  HEAP16[$2_1 + 66 >> 1] = $47_1;
  HEAP16[$2_1 + 64 >> 1] = $48_1;
  HEAP32[$15_1 + 7080 >> 2] = 0;
  HEAP32[$15_1 + 7044 >> 2] = HEAP32[$15_1 + 7044 >> 2] + 1;
  $19 = $18_1 & 268435456;
  if ($19) {
   HEAP32[$15_1 + 7492 >> 2] = HEAP32[$15_1 + 7492 >> 2] + 1
  }
  $33_1 = $18_1 & 67108864;
  if ($33_1) {
   $5_1 = HEAP32[$15_1 + 7480 >> 2];
   $2_1 = HEAP32[$15_1 + 7476 >> 2] + Math_imul($5_1, 36) | 0;
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   $3 = HEAP32[$15_1 + 7484 >> 2];
   label$57 : {
    if (($3 | 0) != ($5_1 | 0)) {
     break label$57
    }
    $7_1 = $3;
    $3 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
    $5_1 = $5_1 + 1 | 0;
    $3 = ($3 | 0) > ($5_1 | 0) ? $3 : $5_1;
    if (($7_1 | 0) >= ($3 | 0)) {
     break label$57
    }
    $5_1 = HEAP32[18392];
    if ($5_1) {
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
    }
    $5_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($3, 36), HEAP32[18394]) | 0;
    $7_1 = HEAP32[$15_1 + 7488 >> 2];
    if ($7_1) {
     $1602($5_1, $7_1, Math_imul(HEAP32[$15_1 + 7480 >> 2], 36));
     $7_1 = HEAP32[$15_1 + 7488 >> 2];
     label$62 : {
      if (!$7_1) {
       break label$62
      }
      $10_1 = HEAP32[18392];
      if (!$10_1) {
       break label$62
      }
      $10_1 = $10_1 + 876 | 0;
      HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($7_1, HEAP32[18394]);
    }
    HEAP32[$15_1 + 7484 >> 2] = $3;
    HEAP32[$15_1 + 7488 >> 2] = $5_1;
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   $3 = HEAP32[$15_1 + 7488 >> 2] + Math_imul(HEAP32[$15_1 + 7480 >> 2], 36) | 0;
   HEAP32[$3 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $5_1;
   HEAP32[$3 + 32 >> 2] = HEAP32[$2_1 + 32 >> 2];
   $5_1 = $2_1 + 24 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $10_1 = $3 + 24 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $5_1 = $2_1 + 16 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $10_1 = $3 + 16 | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $7_1;
   $5_1 = $2_1 + 8 | 0;
   $7_1 = HEAP32[$5_1 + 4 >> 2];
   $3 = $3 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $7_1;
   HEAP32[$15_1 + 7480 >> 2] = HEAP32[$15_1 + 7480 >> 2] + 1;
   HEAP32[$4_1 + 160 >> 2] = HEAP32[$2_1 >> 2];
  }
  if (!$41_1) {
   HEAP32[$4_1 + 728 >> 2] = $26_1;
   HEAP32[$4_1 + 748 >> 2] = $4_1;
   HEAP32[$4_1 + 744 >> 2] = $4_1;
   HEAP32[$4_1 + 740 >> 2] = $4_1;
   HEAP32[$4_1 + 736 >> 2] = $4_1;
   if (!(!$26_1 | ($18_1 & 50331648) != 16777216)) {
    HEAP32[$4_1 + 736 >> 2] = HEAP32[$26_1 + 736 >> 2]
   }
   if (!(!$33_1 | !$26_1)) {
    HEAP32[$4_1 + 740 >> 2] = HEAP32[$26_1 + 740 >> 2]
   }
   if (!(!$26_1 | (!($18_1 & 83886080) | $18_1 & 134217728))) {
    HEAP32[$4_1 + 744 >> 2] = HEAP32[$26_1 + 744 >> 2]
   }
   if (HEAPU8[$4_1 + 10 | 0] & 128) {
    $3 = $4_1;
    while (1) {
     $3 = HEAP32[$3 + 728 >> 2];
     if (HEAPU8[$3 + 10 | 0] & 128) {
      continue
     }
     break;
    };
    HEAP32[$4_1 + 748 >> 2] = $3;
   }
   HEAP32[$4_1 + 732 >> 2] = $22_1;
  }
  $12_1 = 0;
  label$69 : {
   if (!(HEAP8[$15_1 + 7300 | 0] & 1)) {
    break label$69
   }
   label$70 : {
    $5_1 = HEAP32[$15_1 + 7304 >> 2];
    $2_1 = HEAP32[$4_1 + 176 >> 2];
    $3 = $5_1 & $2_1 << 24 >> 24;
    if (!$3) {
     break label$70
    }
    $6_1 = HEAPF32[$15_1 + 7324 >> 2];
    $8 = Math_fround($6_1 * $6_1);
    $6_1 = HEAPF32[$15_1 + 7328 >> 2];
    if (!(Math_fround($8 + Math_fround($6_1 * $6_1)) > Math_fround(9.999999747378752e-06))) {
     break label$70
    }
    $3 = $15_1 + 7316 | 0;
    $5_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$4_1 + 180 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$4_1 + 184 >> 2] = $5_1;
    $3 = HEAP32[$15_1 + 7324 >> 2];
    $5_1 = HEAP32[$15_1 + 7328 >> 2];
    HEAP32[$4_1 + 176 >> 2] = $2_1 & -15;
    HEAP32[$4_1 + 188 >> 2] = $3;
    HEAP32[$4_1 + 192 >> 2] = $5_1;
    $12_1 = 1;
    break label$69;
   }
   if (!$5_1 | $3) {
    HEAP32[$4_1 + 180 >> 2] = 2139095039;
    HEAP32[$4_1 + 184 >> 2] = 2139095039;
    HEAP32[$4_1 + 176 >> 2] = $2_1 & -15;
    $2_1 = $4_1 + 16 | 0;
    $8 = HEAPF32[$2_1 >> 2];
    $6_1 = HEAPF32[$15_1 + 7316 >> 2];
    $14 = HEAPF32[$15_1 + 7320 >> 2];
    label$73 : {
     if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
      $5_1 = ~~$14;
      break label$73;
     }
     $5_1 = -2147483648;
    }
    $14 = Math_fround($5_1 | 0);
    HEAPF32[$2_1 >> 2] = $14;
    $11_1 = HEAPF32[$4_1 + 12 >> 2];
    $6_1 = Math_fround((Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0) ? ~~$6_1 : -2147483648) | 0);
    HEAPF32[$4_1 + 12 >> 2] = $6_1;
    $6_1 = Math_fround($6_1 - $11_1);
    HEAPF32[$4_1 + 208 >> 2] = $6_1 + HEAPF32[$4_1 + 208 >> 2];
    $2_1 = $4_1 + 212 | 0;
    $8 = Math_fround($14 - $8);
    HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
    $2_1 = $4_1 + 232 | 0;
    HEAPF32[$2_1 >> 2] = $6_1 + HEAPF32[$2_1 >> 2];
    $2_1 = $4_1 + 236 | 0;
    HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
    $2_1 = $4_1 + 240 | 0;
    HEAPF32[$2_1 >> 2] = $6_1 + HEAPF32[$2_1 >> 2];
    $2_1 = $4_1 + 244 | 0;
    HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
    $2_1 = $4_1 + 224 | 0;
    HEAPF32[$2_1 >> 2] = $6_1 + HEAPF32[$2_1 >> 2];
    $2_1 = $4_1 + 228 | 0;
    HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
   }
   $12_1 = ($3 | 0) != 0;
  }
  $3 = 0;
  $5_1 = 0;
  if (HEAPU8[$15_1 + 7300 | 0] & 2) {
   $7_1 = HEAP32[$15_1 + 7308 >> 2];
   $10_1 = HEAP32[$4_1 + 176 >> 2];
   $2_1 = $7_1 & $10_1 << 16 >> 24;
   $5_1 = $2_1 ? HEAPF32[$15_1 + 7332 >> 2] > Math_fround(0.0) : 0;
   $3 = $2_1 ? HEAPF32[$15_1 + 7336 >> 2] > Math_fround(0.0) : 0;
   label$802 : {
    if (!(!$7_1 | $2_1)) {
     break label$802
    }
    HEAP32[$4_1 + 176 >> 2] = $10_1 & -3585;
    $6_1 = HEAPF32[$15_1 + 7332 >> 2];
    label$82 : {
     if ($6_1 > Math_fround(0.0)) {
      HEAP8[$4_1 + 164 | 0] = 0;
      HEAPF32[$4_1 + 28 >> 2] = (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0) ? ~~$6_1 : -2147483648) | 0;
      break label$82;
     }
     HEAP8[$4_1 + 167 | 0] = 0;
     HEAP8[$4_1 + 164 | 0] = 2;
    }
    $6_1 = HEAPF32[$15_1 + 7336 >> 2];
    if ($6_1 > Math_fround(0.0)) {
     HEAP8[$4_1 + 165 | 0] = 0;
     HEAPF32[$4_1 + 32 >> 2] = (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0) ? ~~$6_1 : -2147483648) | 0;
     break label$802;
    }
    HEAP8[$4_1 + 167 | 0] = 0;
    HEAP8[$4_1 + 165 | 0] = 2;
   }
  }
  $2_1 = HEAP32[$15_1 + 7300 >> 2];
  label$89 : {
   if (!($2_1 & 128)) {
    break label$89
   }
   $6_1 = HEAPF32[$15_1 + 7348 >> 2];
   if ($6_1 >= Math_fround(0.0)) {
    HEAP32[$4_1 + 112 >> 2] = 0;
    HEAPF32[$4_1 + 104 >> 2] = $6_1;
   }
   $6_1 = HEAPF32[$15_1 + 7352 >> 2];
   if (!($6_1 >= Math_fround(0.0))) {
    break label$89
   }
   HEAP32[$4_1 + 116 >> 2] = 0;
   HEAPF32[$4_1 + 108 >> 2] = $6_1;
  }
  label$91 : {
   if ($2_1 & 4) {
    $2_1 = $15_1 + 7340 | 0;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$4_1 + 52 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 56 >> 2] = $7_1;
    break label$91;
   }
   if ($41_1) {
    break label$91
   }
   HEAP32[$4_1 + 52 >> 2] = 0;
   HEAP32[$4_1 + 56 >> 2] = 0;
  }
  label$93 : {
   if (!(HEAPU8[$15_1 + 7300 | 0] & 8)) {
    break label$93
   }
   $2_1 = HEAP32[$15_1 + 7312 >> 2];
   if (!(!$2_1 | $2_1 & HEAP32[$4_1 + 176 >> 2] << 8 >> 24)) {
    break label$93
   }
   HEAP8[$4_1 + 141 | 0] = HEAPU8[$15_1 + 7356 | 0];
   HEAP32[$4_1 + 176 >> 2] = HEAP32[$4_1 + 176 >> 2] & -917505;
  }
  if (HEAPU8[$15_1 + 7300 | 0] & 32) {
   $125($4_1)
  }
  if (HEAPU8[$4_1 + 144 | 0]) {
   HEAP32[$4_1 + 176 >> 2] = HEAP32[$4_1 + 176 >> 2] & -526345
  }
  $7_1 = $3;
  $34_1 = $18_1 & 16777216;
  label$97 : {
   label$98 : {
    label$99 : {
     label$100 : {
      if (!$41_1) {
       HEAP32[$4_1 + 496 >> 2] = -8388609;
       HEAP32[$4_1 + 500 >> 2] = -8388609;
       HEAP8[$4_1 + 138 | 0] = 1;
       $2_1 = $4_1 + 504 | 0;
       HEAP32[$2_1 >> 2] = 2139095039;
       HEAP32[$2_1 + 4 >> 2] = 2139095039;
       HEAP8[$4_1 + 148 | 0] = ($1_1 | 0) != 0;
       $2_1 = HEAP32[$4_1 + 200 >> 2];
       label$102 : {
        if (($2_1 | 0) > 0) {
         break label$102
        }
        $3 = $2_1;
        $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
        $2_1 = ($2_1 | 0) <= 1 ? 1 : $2_1;
        if (($3 | 0) >= ($2_1 | 0)) {
         break label$102
        }
        $3 = HEAP32[18392];
        if ($3) {
         $3 = $3 + 876 | 0;
         HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
        }
        $3 = FUNCTION_TABLE[HEAP32[18314]]($2_1 << 2, HEAP32[18394]) | 0;
        $10_1 = HEAP32[$4_1 + 204 >> 2];
        if ($10_1) {
         $1602($3, $10_1, HEAP32[$4_1 + 196 >> 2] << 2);
         $10_1 = HEAP32[$4_1 + 204 >> 2];
         label$107 : {
          if (!$10_1) {
           break label$107
          }
          $20_1 = HEAP32[18392];
          if (!$20_1) {
           break label$107
          }
          $20_1 = $20_1 + 876 | 0;
          HEAP32[$20_1 >> 2] = HEAP32[$20_1 >> 2] - 1;
         }
         FUNCTION_TABLE[HEAP32[18315]]($10_1, HEAP32[18394]);
        }
        HEAP32[$4_1 + 200 >> 2] = $2_1;
        HEAP32[$4_1 + 204 >> 2] = $3;
       }
       HEAP32[$4_1 + 196 >> 2] = 1;
       $372(HEAP32[$4_1 + 580 >> 2]);
       HEAP32[$4_1 + 372 >> 2] = -1;
       if (HEAPU8[$4_1 + 804 | 0]) {
        HEAP8[$4_1 + 804 | 0] = 0;
        $3 = HEAP32[$4_1 + 796 >> 2];
        $2_1 = HEAP32[$4_1 + 580 >> 2];
        if (($3 | 0) > HEAP32[$2_1 + 16 >> 2]) {
         $10_1 = HEAP32[18392];
         if ($10_1) {
          $10_1 = $10_1 + 876 | 0;
          HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] + 1;
         }
         $10_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 1, HEAP32[18394]) | 0;
         $20_1 = HEAP32[$2_1 + 20 >> 2];
         if ($20_1) {
          $1602($10_1, $20_1, HEAP32[$2_1 + 12 >> 2] << 1);
          $20_1 = HEAP32[$2_1 + 20 >> 2];
          label$4 : {
           if (!$20_1) {
            break label$4
           }
           $22_1 = HEAP32[18392];
           if (!$22_1) {
            break label$4
           }
           $22_1 = $22_1 + 876 | 0;
           HEAP32[$22_1 >> 2] = HEAP32[$22_1 >> 2] - 1;
          }
          FUNCTION_TABLE[HEAP32[18315]]($20_1, HEAP32[18394]);
         }
         HEAP32[$2_1 + 16 >> 2] = $3;
         HEAP32[$2_1 + 20 >> 2] = $10_1;
        }
        $3 = HEAP32[$4_1 + 800 >> 2];
        $2_1 = HEAP32[$4_1 + 580 >> 2];
        if (($3 | 0) > HEAP32[$2_1 + 28 >> 2]) {
         $10_1 = HEAP32[18392];
         if ($10_1) {
          $10_1 = $10_1 + 876 | 0;
          HEAP32[$10_1 >> 2] = HEAP32[$10_1 >> 2] + 1;
         }
         $10_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($3, 20), HEAP32[18394]) | 0;
         $20_1 = HEAP32[$2_1 + 32 >> 2];
         if ($20_1) {
          $1602($10_1, $20_1, Math_imul(HEAP32[$2_1 + 24 >> 2], 20));
          $20_1 = HEAP32[$2_1 + 32 >> 2];
          label$81 : {
           if (!$20_1) {
            break label$81
           }
           $22_1 = HEAP32[18392];
           if (!$22_1) {
            break label$81
           }
           $22_1 = $22_1 + 876 | 0;
           HEAP32[$22_1 >> 2] = HEAP32[$22_1 >> 2] - 1;
          }
          FUNCTION_TABLE[HEAP32[18315]]($20_1, HEAP32[18394]);
         }
         HEAP32[$2_1 + 28 >> 2] = $3;
         HEAP32[$2_1 + 32 >> 2] = $10_1;
        }
        HEAP32[$4_1 + 796 >> 2] = 0;
        HEAP32[$4_1 + 800 >> 2] = 0;
       }
       label$109 : {
        if (HEAP32[$4_1 + 8 >> 2] & 524288 | (!HEAP32[$15_1 + 7852 >> 2] | !$31_1)) {
         break label$109
        }
        $3 = HEAP32[$4_1 >> 2];
        if (!$1695($0_1, $3)) {
         break label$109
        }
        $2_1 = HEAP32[$4_1 + 76 >> 2];
        $10_1 = $1697($0_1) + 1 | 0;
        if ($2_1 >>> 0 < $10_1 >>> 0) {
         label$112 : {
          if (!$3) {
           break label$112
          }
          $2_1 = HEAP32[18392];
          if (!$2_1) {
           break label$112
          }
          $2_1 = $2_1 + 876 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
         }
         FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
         $2_1 = HEAP32[18392];
         if ($2_1) {
          $2_1 = $2_1 + 876 | 0;
          HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
         }
         $2_1 = $10_1;
         $3 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
        }
        $3 = $1602($3, $0_1, $10_1);
        HEAP32[$4_1 + 76 >> 2] = $2_1;
        HEAP32[$4_1 >> 2] = $3;
       }
       $22_1 = HEAP8[$4_1 + 173 | 0];
       $39_1 = $4_1 + 36 | 0;
       $10_1 = $4_1 + 44 | 0;
       $148($4_1, $39_1, $10_1);
       $2_1 = HEAP8[$4_1 + 172 | 0];
       if (($2_1 | 0) > 0) {
        HEAP8[$4_1 + 172 | 0] = $2_1 - 1
       }
       $2_1 = HEAP8[$4_1 + 173 | 0];
       if (($2_1 | 0) > 0) {
        HEAP8[$4_1 + 173 | 0] = $2_1 - 1
       }
       $2_1 = HEAP8[$4_1 + 174 | 0];
       if (($2_1 | 0) > 0) {
        HEAP8[$4_1 + 174 | 0] = $2_1 - 1
       }
       if (!($5_1 & $7_1 | $31_1)) {
        HEAP8[$4_1 + 173 | 0] = 1
       }
       $3 = $18_1 & 100663296;
       label$118 : {
        if (!($43_1 & ($3 | 0) != 0)) {
         break label$118
        }
        HEAP8[$4_1 + 173 | 0] = 1;
        if (!($18_1 & 64)) {
         break label$118
        }
        if (!$5_1) {
         HEAP32[$4_1 + 20 >> 2] = 0;
         HEAP32[$4_1 + 28 >> 2] = 0;
        }
        if (!$7_1) {
         HEAP32[$4_1 + 24 >> 2] = 0;
         HEAP32[$4_1 + 32 >> 2] = 0;
        }
        HEAP32[$39_1 >> 2] = 0;
        HEAP32[$39_1 + 4 >> 2] = 0;
        $2_1 = $39_1 + 8 | 0;
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
       }
       $2_1 = HEAP32[18392];
       HEAP32[$2_1 + 7080 >> 2] = $4_1;
       label$121 : {
        if ($4_1) {
         $20_1 = HEAP32[$4_1 + 372 >> 2];
         if (($20_1 | 0) == -1) {
          $20_1 = 0
         } else {
          $20_1 = HEAP32[$2_1 + 8064 >> 2] + Math_imul($20_1, 456) | 0
         }
         HEAP32[$2_1 + 8036 >> 2] = $20_1;
         $8 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
         $20_1 = HEAP32[$4_1 + 728 >> 2];
         if ($20_1) {
          $8 = Math_fround($8 * HEAPF32[$20_1 + 572 >> 2])
         }
         HEAPF32[$2_1 + 6468 >> 2] = $8;
         HEAPF32[$2_1 + 6488 >> 2] = $8;
         break label$121;
        }
        HEAP32[$2_1 + 8036 >> 2] = 0;
       }
       if ($34_1) {
        $3 = $15_1 + 5464 | 0
       } else {
        $20_1 = $15_1 + 5436 | 0;
        $3 = $3 ? ($18_1 & 134217728 ? $20_1 : $15_1 + 5472 | 0) : $20_1;
       }
       HEAPF32[$4_1 + 72 >> 2] = HEAPF32[$3 >> 2];
       $3 = $15_1 + 5424 | 0;
       $20_1 = HEAP32[$3 + 4 >> 2];
       HEAP32[$4_1 + 60 >> 2] = HEAP32[$3 >> 2];
       HEAP32[$4_1 + 64 >> 2] = $20_1;
       if (!(($18_1 & 83951616) != 16777216 | HEAPF32[$4_1 + 72 >> 2] != Math_fround(0.0))) {
        $6_1 = $18_1 & 1024 ? HEAPF32[$15_1 + 5428 >> 2] : Math_fround(0.0);
        HEAP32[$4_1 + 60 >> 2] = 0;
        HEAPF32[$4_1 - -64 >> 2] = $6_1;
       }
       $6_1 = HEAPF32[$4_1 + 60 >> 2];
       $8 = HEAPF32[$15_1 + 5492 >> 2];
       $6_1 = $6_1 >= $8 ? $6_1 : $8;
       $8 = HEAPF32[$15_1 + 7388 >> 2];
       HEAPF32[$4_1 + 308 >> 2] = $6_1 >= $8 ? $6_1 : $8;
       HEAPF32[$4_1 + 312 >> 2] = HEAPF32[$15_1 + 7392 >> 2];
       label$131 : {
        if (!($18_1 & 33)) {
         $8 = Math_fround(0.0);
         if (!(HEAP8[$4_1 + 8 | 0] & 1)) {
          $14 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
          $6_1 = HEAPF32[$2_1 + 5480 >> 2];
          $6_1 = Math_fround($6_1 + $6_1);
          $3 = HEAP32[$4_1 + 728 >> 2];
          if ($3) {
           $14 = Math_fround($14 * HEAPF32[$3 + 572 >> 2])
          }
          $8 = Math_fround($6_1 + $14);
         }
         $6_1 = HEAPF32[$4_1 + 28 >> 2];
         $14 = HEAPF32[$4_1 + 12 >> 2];
         $3 = HEAP32[$4_1 + 12 >> 2];
         $20_1 = HEAP32[$4_1 + 16 >> 2];
         HEAPF32[$9 + 244 >> 2] = HEAPF32[$4_1 + 16 >> 2] + $8;
         HEAPF32[$9 + 240 >> 2] = $14 + $6_1;
         HEAP32[$9 + 232 >> 2] = $3;
         HEAP32[$9 + 236 >> 2] = $20_1;
         label$136 : {
          if (HEAP32[$15_1 + 7120 >> 2] | (HEAP32[$15_1 + 7116 >> 2] | HEAP32[$15_1 + 7084 >> 2] != ($4_1 | 0))) {
           break label$136
          }
          if (!$93($9 + 232 | 0, $9 + 240 | 0, 1) | HEAPU16[$15_1 + 1002 >> 1] != 2) {
           break label$136
          }
          HEAP8[$4_1 + 142 | 0] = 1;
         }
         if (!HEAPU8[$4_1 + 142 | 0]) {
          break label$131
         }
         HEAP8[$4_1 + 141 | 0] = HEAPU8[$4_1 + 141 | 0] ^ 1;
         if (!(HEAPF32[$2_1 + 12128 >> 2] <= Math_fround(0.0)) | HEAP8[$4_1 + 9 | 0] & 1) {
          break label$131
         }
         HEAPF32[$2_1 + 12128 >> 2] = HEAPF32[$2_1 + 28 >> 2];
         break label$131;
        }
        HEAP8[$4_1 + 141 | 0] = 0;
       }
       $3 = !$31_1;
       HEAP8[$4_1 + 142 | 0] = 0;
       $149($9 + 136 | 0, $4_1, $10_1);
       $48_1 = $18_1 & 64;
       label$137 : {
        if (!(HEAPU8[$4_1 + 141 | 0] | !$48_1)) {
         $2_1 = $3;
         if (!$5_1) {
          HEAPF32[$4_1 + 28 >> 2] = HEAPF32[$9 + 136 >> 2];
          $2_1 = 1;
         }
         if ($7_1) {
          $5_1 = $3;
          $3 = $2_1;
          break label$137;
         }
         HEAPF32[$4_1 + 32 >> 2] = HEAPF32[$9 + 140 >> 2];
         $5_1 = 1;
         $3 = $2_1;
         break label$137;
        }
        $10_1 = HEAP8[$4_1 + 164 | 0];
        if (!(($10_1 | 0) > 0 | HEAP8[$4_1 + 165 | 0] > 0)) {
         $5_1 = $3;
         break label$137;
        }
        $2_1 = $3;
        if (!(($10_1 | 0) <= 0 | $5_1)) {
         label$143 : {
          if (HEAPU8[$4_1 + 167 | 0]) {
           $6_1 = HEAPF32[$4_1 + 28 >> 2];
           $8 = HEAPF32[$9 + 136 >> 2];
           $6_1 = $6_1 >= $8 ? $6_1 : $8;
           break label$143;
          }
          $6_1 = HEAPF32[$9 + 136 >> 2];
         }
         HEAPF32[$4_1 + 28 >> 2] = $6_1;
         $2_1 = 1;
        }
        if (!(!!$7_1 | HEAP8[$4_1 + 165 | 0] <= 0)) {
         $3 = $4_1 + 32 | 0;
         label$147 : {
          if (HEAPU8[$4_1 + 167 | 0]) {
           $6_1 = HEAPF32[$4_1 + 32 >> 2];
           $8 = HEAPF32[$9 + 140 >> 2];
           $6_1 = $6_1 >= $8 ? $6_1 : $8;
           break label$147;
          }
          $6_1 = HEAPF32[$9 + 140 >> 2];
         }
         HEAPF32[$3 >> 2] = $6_1;
         $3 = 1;
        }
        label$149 : {
         if (HEAPU8[$4_1 + 141 | 0] | HEAP8[$4_1 + 9 | 0] & 1) {
          break label$149
         }
         $5_1 = HEAP32[18392];
         if (!(HEAPF32[$5_1 + 12128 >> 2] <= Math_fround(0.0))) {
          break label$149
         }
         HEAPF32[$5_1 + 12128 >> 2] = HEAPF32[$5_1 + 28 >> 2];
        }
        $5_1 = $3;
        $3 = $2_1;
       }
       $10_1 = $3;
       $20_1 = $5_1;
       $28_1 = $4_1 + 28 | 0;
       $150($9 + 232 | 0, $4_1, $28_1);
       $2_1 = HEAP32[$9 + 236 >> 2];
       HEAP32[$4_1 + 28 >> 2] = HEAP32[$9 + 232 >> 2];
       HEAP32[$4_1 + 32 >> 2] = $2_1;
       label$150 : {
        if (!($34_1 | !HEAPU8[$4_1 + 141 | 0])) {
         $6_1 = HEAPF32[$4_1 + 28 >> 2];
         $8 = HEAPF32[$4_1 + 12 >> 2];
         $2_1 = $4_1 + 16 | 0;
         $16_1 = HEAPF32[$2_1 >> 2];
         if (HEAP8[$4_1 + 8 | 0] & 1) {
          $11_1 = Math_fround(0.0)
         } else {
          $3 = HEAP32[18392];
          $13 = Math_fround(HEAPF32[$3 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
          $14 = HEAPF32[$3 + 5480 >> 2];
          $11_1 = Math_fround($14 + $14);
          $5_1 = HEAP32[$4_1 + 728 >> 2];
          if ($5_1) {
           $13 = Math_fround($13 * HEAPF32[$5_1 + 572 >> 2])
          }
          $11_1 = Math_fround($11_1 + $13);
         }
         $13 = Math_fround(Math_fround($16_1 + $11_1) - HEAPF32[$2_1 >> 2]);
         $6_1 = Math_fround(Math_fround($8 + $6_1) - HEAPF32[$4_1 + 12 >> 2]);
         break label$150;
        }
        $13 = HEAPF32[$4_1 + 32 >> 2];
        $6_1 = HEAPF32[$4_1 + 28 >> 2];
       }
       HEAPF32[$4_1 + 20 >> 2] = $6_1;
       HEAPF32[$4_1 + 24 >> 2] = $13;
       $2_1 = HEAP32[$4_1 + 8 >> 2];
       if ($2_1 & 1) {
        $6_1 = Math_fround(0.0)
       } else {
        $3 = HEAP32[18392];
        $8 = Math_fround(HEAPF32[$3 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
        $6_1 = HEAPF32[$3 + 5480 >> 2];
        $6_1 = Math_fround($6_1 + $6_1);
        $5_1 = HEAP32[$4_1 + 728 >> 2];
        if ($5_1) {
         $8 = Math_fround($8 * HEAPF32[$5_1 + 572 >> 2])
        }
        $6_1 = Math_fround($6_1 + $8);
       }
       $52_1 = $6_1;
       if ($2_1 & 1024) {
        $2_1 = HEAP32[18392];
        $8 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
        $6_1 = HEAPF32[$2_1 + 5480 >> 2];
        $6_1 = Math_fround($6_1 + $6_1);
        $11_1 = HEAPF32[$4_1 + 312 >> 2];
        $3 = HEAP32[$4_1 + 728 >> 2];
        if ($3) {
         $8 = Math_fround($8 * HEAPF32[$3 + 572 >> 2])
        }
        $6_1 = Math_fround($6_1 + Math_fround($11_1 + $8));
       } else {
        $6_1 = Math_fround(0.0)
       }
       $53_1 = $6_1;
       label$161 : {
        if (!$43_1) {
         break label$161
        }
        HEAP32[$4_1 + 168 >> 2] = -1;
        if ($12_1 | ($18_1 & 201326592) != 67108864) {
         break label$161
        }
        $2_1 = (HEAP32[$15_1 + 7488 >> 2] + Math_imul(HEAP32[$15_1 + 7480 >> 2], 36) | 0) - 16 | 0;
        $3 = HEAP32[$2_1 + 4 >> 2];
        HEAP32[$4_1 + 12 >> 2] = HEAP32[$2_1 >> 2];
        HEAP32[$4_1 + 16 >> 2] = $3;
       }
       $38_1 = $18_1 & 50331648;
       label$162 : {
        if (!$34_1) {
         break label$162
        }
        $3 = HEAP32[$26_1 + 352 >> 2];
        HEAP16[$4_1 + 152 >> 1] = $3;
        $2_1 = HEAP32[$26_1 + 356 >> 2];
        label$163 : {
         if (($2_1 | 0) != ($3 | 0)) {
          break label$163
         }
         $5_1 = $2_1;
         $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
         $3 = $3 + 1 | 0;
         $2_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
         if (($5_1 | 0) >= ($2_1 | 0)) {
          break label$163
         }
         $3 = HEAP32[18392];
         if ($3) {
          $3 = $3 + 876 | 0;
          HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
         }
         $3 = FUNCTION_TABLE[HEAP32[18314]]($2_1 << 2, HEAP32[18394]) | 0;
         $5_1 = HEAP32[$26_1 + 360 >> 2];
         if ($5_1) {
          $1602($3, $5_1, HEAP32[$26_1 + 352 >> 2] << 2);
          $5_1 = HEAP32[$26_1 + 360 >> 2];
          label$168 : {
           if (!$5_1) {
            break label$168
           }
           $7_1 = HEAP32[18392];
           if (!$7_1) {
            break label$168
           }
           $7_1 = $7_1 + 876 | 0;
           HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
          }
          FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
         }
         HEAP32[$26_1 + 356 >> 2] = $2_1;
         HEAP32[$26_1 + 360 >> 2] = $3;
        }
        HEAP32[HEAP32[$26_1 + 360 >> 2] + (HEAP32[$26_1 + 352 >> 2] << 2) >> 2] = $4_1;
        HEAP32[$26_1 + 352 >> 2] = HEAP32[$26_1 + 352 >> 2] + 1;
        if ($12_1 | $33_1 | ($38_1 | 0) == 50331648) {
         break label$162
        }
        $2_1 = HEAP32[$26_1 + 212 >> 2];
        HEAP32[$4_1 + 12 >> 2] = HEAP32[$26_1 + 208 >> 2];
        HEAP32[$4_1 + 16 >> 2] = $2_1;
       }
       $45_1 = $18_1 & 33554432;
       $3 = ($34_1 | 0) != 0;
       $6_1 = HEAPF32[$4_1 + 180 >> 2];
       label$169 : {
        if (!(HEAPU8[$4_1 + 173 | 0] | $6_1 == Math_fround(3402823466385288598117041.0e14))) {
         $8 = HEAPF32[$4_1 + 184 >> 2];
         HEAP32[$4_1 + 180 >> 2] = 2139095039;
         HEAP32[$4_1 + 184 >> 2] = 2139095039;
         HEAP32[$4_1 + 176 >> 2] = HEAP32[$4_1 + 176 >> 2] & -15;
         $14 = HEAPF32[$4_1 + 12 >> 2];
         $6_1 = Math_fround($6_1 - Math_fround(HEAPF32[$4_1 + 20 >> 2] * HEAPF32[$4_1 + 188 >> 2]));
         label$171 : {
          if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$6_1;
           break label$171;
          }
          $2_1 = -2147483648;
         }
         $6_1 = Math_fround($2_1 | 0);
         HEAPF32[$4_1 + 12 >> 2] = $6_1;
         $2_1 = $4_1 + 16 | 0;
         $11_1 = HEAPF32[$2_1 >> 2];
         $8 = Math_fround($8 - Math_fround(HEAPF32[$4_1 + 24 >> 2] * HEAPF32[$4_1 + 192 >> 2]));
         label$173 : {
          if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
           $5_1 = ~~$8;
           break label$173;
          }
          $5_1 = -2147483648;
         }
         $8 = Math_fround($5_1 | 0);
         HEAPF32[$2_1 >> 2] = $8;
         $6_1 = Math_fround($6_1 - $14);
         HEAPF32[$4_1 + 208 >> 2] = $6_1 + HEAPF32[$4_1 + 208 >> 2];
         $2_1 = $4_1 + 232 | 0;
         HEAPF32[$2_1 >> 2] = $6_1 + HEAPF32[$2_1 >> 2];
         $2_1 = $4_1 + 212 | 0;
         $8 = Math_fround($8 - $11_1);
         HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
         $2_1 = $4_1 + 236 | 0;
         HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
         $2_1 = $4_1 + 240 | 0;
         HEAPF32[$2_1 >> 2] = $6_1 + HEAPF32[$2_1 >> 2];
         $2_1 = $4_1 + 244 | 0;
         HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
         $2_1 = $4_1 + 224 | 0;
         HEAPF32[$2_1 >> 2] = $6_1 + HEAPF32[$2_1 >> 2];
         $2_1 = $4_1 + 228 | 0;
         HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$2_1 >> 2];
         break label$169;
        }
        if ($19) {
         $151($9 + 232 | 0, $4_1);
         $2_1 = HEAP32[$9 + 236 >> 2];
         HEAP32[$4_1 + 12 >> 2] = HEAP32[$9 + 232 >> 2];
         HEAP32[$4_1 + 16 >> 2] = $2_1;
         break label$169;
        }
        if (!($12_1 | !$33_1 | ($22_1 | 0) <= 0)) {
         $151($9 + 232 | 0, $4_1);
         $2_1 = HEAP32[$9 + 236 >> 2];
         HEAP32[$4_1 + 12 >> 2] = HEAP32[$9 + 232 >> 2];
         HEAP32[$4_1 + 16 >> 2] = $2_1;
         break label$169;
        }
        if ($12_1 | !$45_1 | ($38_1 | 0) == 50331648) {
         break label$169
        }
        $151($9 + 232 | 0, $4_1);
        $2_1 = HEAP32[$9 + 236 >> 2];
        HEAP32[$4_1 + 12 >> 2] = HEAP32[$9 + 232 >> 2];
        HEAP32[$4_1 + 16 >> 2] = $2_1;
       }
       $2_1 = HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2];
       $14 = HEAPF32[$2_1 + 12 >> 2];
       $6_1 = HEAPF32[$2_1 + 4 >> 2];
       $8 = HEAPF32[$2_1 + 8 >> 2];
       $16_1 = Math_fround($8 + HEAPF32[$2_1 + 16 >> 2]);
       HEAPF32[$9 + 132 >> 2] = $16_1;
       HEAPF32[$9 + 124 >> 2] = $8;
       HEAPF32[$9 + 120 >> 2] = $6_1;
       $17_1 = Math_fround($6_1 + $14);
       HEAPF32[$9 + 128 >> 2] = $17_1;
       $21_1 = HEAPF32[$2_1 + 28 >> 2];
       $14 = HEAPF32[$2_1 + 20 >> 2];
       $11_1 = HEAPF32[$15_1 + 5592 >> 2];
       $13 = HEAPF32[$15_1 + 5584 >> 2];
       $23_1 = HEAPF32[$2_1 + 24 >> 2];
       $27_1 = HEAPF32[$15_1 + 5588 >> 2];
       $24 = HEAPF32[$15_1 + 5596 >> 2];
       $27_1 = $24 <= $27_1 ? $27_1 : $24;
       HEAPF32[$9 + 116 >> 2] = Math_fround($23_1 + HEAPF32[$2_1 + 32 >> 2]) - $27_1;
       $11_1 = $11_1 <= $13 ? $13 : $11_1;
       HEAPF32[$9 + 112 >> 2] = Math_fround($14 + $21_1) - $11_1;
       HEAPF32[$9 + 108 >> 2] = $23_1 + $27_1;
       HEAPF32[$9 + 104 >> 2] = $14 + $11_1;
       if (!(!(Math_fround($16_1 - $8) > Math_fround(0.0)) | ($3 | $12_1 | HEAP8[$4_1 + 164 | 0] > 0 | (!(Math_fround($17_1 - $6_1) > Math_fround(0.0)) | HEAP8[$4_1 + 165 | 0] > 0)))) {
        $2_1 = $9 + 104 | 0;
        $6_1 = HEAPF32[$4_1 + 24 >> 2];
        $3 = HEAP32[18392];
        if (!(!HEAPU8[$3 + 181 | 0] | HEAP8[$4_1 + 8 | 0] & 1)) {
         $6_1 = Math_fround(HEAPF32[$3 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
         $8 = HEAPF32[$3 + 5480 >> 2];
         $8 = Math_fround($8 + $8);
         $5_1 = HEAP32[$4_1 + 728 >> 2];
         if ($5_1) {
          $6_1 = Math_fround($6_1 * HEAPF32[$5_1 + 572 >> 2])
         }
         $6_1 = Math_fround($8 + $6_1);
        }
        $14 = HEAPF32[$2_1 + 4 >> 2];
        $16_1 = HEAPF32[$2_1 + 12 >> 2];
        $11_1 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$4_1 + 20 >> 2]);
        $13 = HEAPF32[$2_1 + 8 >> 2];
        $8 = HEAPF32[$4_1 + 12 >> 2];
        HEAPF32[$4_1 + 12 >> 2] = $8 < $11_1 ? $11_1 : $8 > $13 ? $13 : $8;
        $2_1 = $4_1 + 16 | 0;
        $8 = Math_fround($14 - $6_1);
        $14 = $16_1;
        $6_1 = HEAPF32[$2_1 >> 2];
        HEAPF32[$2_1 >> 2] = $6_1 < $8 ? $8 : $6_1 > $14 ? $14 : $6_1;
       }
       $6_1 = HEAPF32[$4_1 + 12 >> 2];
       label$178 : {
        if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
         $2_1 = ~~$6_1;
         break label$178;
        }
        $2_1 = -2147483648;
       }
       HEAPF32[$4_1 + 12 >> 2] = $2_1 | 0;
       $2_1 = $4_1 + 16 | 0;
       $6_1 = HEAPF32[$2_1 >> 2];
       label$180 : {
        if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
         $5_1 = ~~$6_1;
         break label$180;
        }
        $5_1 = -2147483648;
       }
       HEAPF32[$2_1 >> 2] = $5_1 | 0;
       $2_1 = $15_1 + 5460 | 0;
       label$182 : {
        if ($34_1) {
         break label$182
        }
        $2_1 = $15_1 + 5468 | 0;
        if (($18_1 & 201326592) == 67108864) {
         break label$182
        }
        $2_1 = $15_1 + 5432 | 0;
       }
       HEAPF32[$4_1 + 68 >> 2] = HEAPF32[$2_1 >> 2];
       $19 = 0;
       if (!($43_1 & !($18_1 & 4096))) {
        break label$98
       }
       $19 = !$38_1 | ($33_1 | 0) != 0;
       $25_1 = HEAP32[18392];
       $12_1 = HEAP32[$25_1 + 7468 >> 2];
       $7_1 = $12_1;
       while (1) {
        label$185 : {
         if (($7_1 | 0) <= 0) {
          $3 = 0;
          break label$185;
         }
         $2_1 = $5_1;
         $7_1 = $7_1 - 1 | 0;
         $5_1 = HEAP32[(HEAP32[$25_1 + 7476 >> 2] + Math_imul($7_1, 36) | 0) + 4 >> 2];
         label$188 : {
          if ($5_1) {
           $3 = 0;
           if (HEAPU8[$5_1 + 11 | 0] & 8) {
            break label$188
           }
          }
          $5_1 = $2_1;
          $3 = 1;
         }
         $2_1 = $3;
         $3 = $5_1;
         if ($2_1) {
          continue
         }
        }
        break;
       };
       $2_1 = $3;
       if (!$2_1) {
        break label$98
       }
       $22_1 = HEAP32[$4_1 + 736 >> 2];
       $3 = ($22_1 | 0) == ($2_1 | 0);
       if (!$4_1 | ($2_1 | 0) == ($22_1 | 0)) {
        break label$100
       }
       $3 = $4_1;
       while (1) {
        $5_1 = $3;
        $3 = ($2_1 | 0) == ($3 | 0);
        if ($3) {
         break label$100
        }
        $5_1 = HEAP32[$5_1 + 732 >> 2];
        $3 = $5_1;
        if ($3) {
         continue
        }
        break;
       };
       break label$99;
      }
      $0_1 = HEAP32[18392];
      HEAP32[$0_1 + 7080 >> 2] = $4_1;
      if ($4_1) {
       $1_1 = HEAP32[$4_1 + 372 >> 2];
       if (($1_1 | 0) != -1) {
        $1_1 = HEAP32[$0_1 + 8064 >> 2] + Math_imul($1_1, 456) | 0
       } else {
        $1_1 = 0
       }
       HEAP32[$0_1 + 8036 >> 2] = $1_1;
       $8 = Math_fround(HEAPF32[$0_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
       $1_1 = HEAP32[$4_1 + 728 >> 2];
       if ($1_1) {
        $8 = Math_fround($8 * HEAPF32[$1_1 + 572 >> 2])
       }
       HEAPF32[$0_1 + 6468 >> 2] = $8;
       HEAPF32[$0_1 + 6488 >> 2] = $8;
       break label$97;
      }
      HEAP32[$0_1 + 8036 >> 2] = 0;
      break label$97;
     }
     if ($3) {
      break label$98
     }
    }
    $19 = 0;
    if (($4_1 | 0) != ($22_1 | 0)) {
     break label$98
    }
    $37 = HEAP32[$25_1 + 7476 >> 2];
    $3 = $12_1;
    label$197 : {
     while (1) {
      $2_1 = $5_1;
      $12_1 = $3;
      $19 = $3 - 1 | 0;
      $3 = HEAP32[($37 + Math_imul($19, 36) | 0) + 4 >> 2];
      label$199 : {
       label$200 : {
        if (!(!$3 | !HEAPU8[$3 + 139 | 0] | !(HEAPU8[$3 + 11 | 0] & 8))) {
         label$202 : {
          if (($3 | 0) == ($22_1 | 0)) {
           break label$202
          }
          $5_1 = $4_1;
          if ($4_1) {
           while (1) {
            if (($3 | 0) == ($5_1 | 0)) {
             break label$202
            }
            $5_1 = HEAP32[$5_1 + 732 >> 2];
            if ($5_1) {
             continue
            }
            break;
           }
          }
          $5_1 = HEAP32[HEAP32[$3 + 732 >> 2] + 736 >> 2];
          if ($5_1) {
           while (1) {
            $7_1 = $5_1;
            label$207 : {
             label$208 : {
              if (($5_1 | 0) == ($22_1 | 0)) {
               break label$208
              }
              $5_1 = $4_1;
              if (!$4_1) {
               break label$207
              }
              while (1) {
               if (($5_1 | 0) == ($7_1 | 0)) {
                break label$208
               }
               $5_1 = HEAP32[$5_1 + 732 >> 2];
               if ($5_1) {
                continue
               }
               break;
              };
              break label$207;
             }
             $5_1 = 1;
             break label$199;
            }
            $5_1 = HEAP32[HEAP32[$7_1 + 732 >> 2] + 736 >> 2];
            if ($5_1) {
             continue
            }
            break;
           }
          }
          $5_1 = 0;
          break label$200;
         }
         $5_1 = 2;
         break label$200;
        }
        $5_1 = 4;
       }
       $3 = $2_1;
      }
      $7_1 = $3;
      label$210 : {
       switch ($5_1 | 0) {
       case 0:
       case 4:
        break label$210;
       default:
        break label$197;
       };
      }
      $3 = $19;
      $5_1 = $7_1;
      if (($12_1 | 0) > 1) {
       continue
      }
      break;
     };
     $5_1 = 2;
    }
    $12_1 = $5_1;
    $5_1 = HEAP32[$25_1 + 7016 >> 2];
    $3 = HEAP32[$25_1 + 7008 >> 2];
    $19 = $5_1 + ($3 << 2) | 0;
    $2_1 = $5_1;
    $37 = ($3 | 0) <= 0;
    label$211 : {
     if ($37) {
      break label$211
     }
     $3 = $5_1;
     while (1) {
      $2_1 = $3;
      if (HEAP32[$2_1 >> 2] == ($22_1 | 0)) {
       break label$211
      }
      $2_1 = $2_1 + 4 | 0;
      $3 = $2_1;
      if ($2_1 >>> 0 < $19 >>> 0) {
       continue
      }
      break;
     };
    }
    $2_1 = $2_1 - $5_1 >> 2;
    $3 = $5_1;
    label$214 : {
     if ($37) {
      break label$214
     }
     $12_1 = HEAP32[(($12_1 | 0) != 2 ? $7_1 : 0) + 736 >> 2];
     $7_1 = $5_1;
     while (1) {
      if (HEAP32[$7_1 >> 2] == ($12_1 | 0)) {
       $3 = $7_1;
       break label$214;
      }
      $3 = $7_1 + 4 | 0;
      $7_1 = $3;
      if ($3 >>> 0 < $19 >>> 0) {
       continue
      }
      break;
     };
    }
    $3 = $3 - $5_1 >> 2;
    label$217 : {
     if (($3 | 0) > ($2_1 | 0)) {
      $5_1 = $5_1 + ($2_1 << 2) | 0;
      $1603($5_1, $5_1 + 4 | 0, ($2_1 ^ -1) + $3 << 2);
      $3 = $3 - 1 | 0;
      break label$217;
     }
     $5_1 = $5_1 + ($3 << 2) | 0;
     $1603($5_1 + 4 | 0, $5_1, $2_1 - $3 << 2);
    }
    HEAP32[HEAP32[$25_1 + 7016 >> 2] + ($3 << 2) >> 2] = $22_1;
    $19 = 0;
   }
   $37 = $19;
   HEAP32[$9 + 88 >> 2] = 0;
   HEAP32[$9 + 92 >> 2] = 0;
   HEAP32[$9 + 80 >> 2] = 0;
   HEAP32[$9 + 84 >> 2] = 0;
   $6_1 = HEAPF32[$15_1 + 6468 >> 2];
   $8 = Math_fround($6_1 * Math_fround(1.100000023841858));
   $14 = Math_fround(HEAPF32[$4_1 + 68 >> 2] + Math_fround(1.0));
   $6_1 = Math_fround(Math_fround($6_1 * Math_fround(.20000000298023224)) + $14);
   $6_1 = $6_1 <= $8 ? $8 : $6_1;
   label$219 : {
    if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
     $35_1 = ~~$6_1;
     break label$219;
    }
    $35_1 = -2147483648;
   }
   $46_1 = HEAPU8[$15_1 + 180 | 0] ? 2 : 1;
   label$221 : {
    if (HEAPU8[$4_1 + 141 | 0]) {
     $3 = -1;
     $7_1 = $10_1;
     $2_1 = $20_1;
     break label$221;
    }
    label$223 : {
     if (HEAPU8[$4_1 + 8 | 0] & 66) {
      $3 = -1;
      $2_1 = 0;
      break label$223;
     }
     if (HEAP8[$4_1 + 164 | 0] > 0) {
      $3 = -1;
      $2_1 = 0;
      break label$223;
     }
     if (HEAP8[$4_1 + 165 | 0] > 0) {
      $3 = -1;
      $2_1 = 0;
      break label$223;
     }
     $3 = -1;
     $2_1 = 0;
     if (!HEAPU8[$4_1 + 139 | 0]) {
      break label$223
     }
     $25_1 = HEAP32[18392];
     $22_1 = HEAPU8[$25_1 + 180 | 0];
     $6_1 = HEAPF32[$25_1 + 6468 >> 2];
     HEAP32[$4_1 + 292 >> 2] = 1;
     $153(14974);
     $8 = Math_fround($6_1 * Math_fround(1.350000023841858));
     $6_1 = Math_fround(Math_fround($6_1 * Math_fround(.20000000298023224)) + $14);
     $6_1 = $6_1 <= $8 ? $8 : $6_1;
     label$227 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$6_1;
       break label$227;
      }
      $2_1 = -2147483648;
     }
     $6_1 = Math_fround(Math_fround($2_1 | 0) * Math_fround(.75));
     label$229 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$6_1;
       break label$229;
      }
      $2_1 = -2147483648;
     }
     $23_1 = Math_fround($2_1 | 0);
     $27_1 = Math_fround(-$23_1);
     $24 = $22_1 ? Math_fround(4.0) : Math_fround(0.0);
     $54_1 = $25_1 + 7176 | 0;
     $55_1 = $25_1 + 228 | 0;
     $56_1 = HEAPF32[$9 + 116 >> 2];
     $57_1 = HEAPF32[$9 + 112 >> 2];
     $58_1 = HEAPF32[$9 + 108 >> 2];
     $59_1 = HEAPF32[$9 + 104 >> 2];
     $3 = 0;
     $5_1 = 0;
     $8 = Math_fround(3402823466385288598117041.0e14);
     $11_1 = Math_fround(3402823466385288598117041.0e14);
     $6_1 = Math_fround(3402823466385288598117041.0e14);
     $14 = Math_fround(3402823466385288598117041.0e14);
     while (1) {
      $13 = $14;
      $16_1 = $6_1;
      $6_1 = $11_1;
      $14 = $8;
      $29_1 = HEAPF32[$4_1 + 20 >> 2];
      $11_1 = HEAPF32[$4_1 + 12 >> 2];
      $17_1 = HEAPF32[$4_1 + 16 >> 2];
      $2_1 = Math_imul($5_1, 24);
      $8 = HEAPF32[$2_1 + 20548 >> 2];
      $32_1 = Math_fround(Math_fround(Math_fround(Math_fround($17_1 + HEAPF32[$4_1 + 24 >> 2]) - $17_1) * $8) + $17_1);
      $17_1 = HEAPF32[$2_1 + 20556 >> 2];
      $21_1 = Math_fround($32_1 + Math_fround($17_1 * $23_1));
      HEAPF32[$9 + 244 >> 2] = $21_1;
      $36_1 = $11_1;
      $40_1 = Math_fround(Math_fround($11_1 + $29_1) - $11_1);
      $11_1 = HEAPF32[$2_1 + 20544 >> 2];
      $36_1 = Math_fround($36_1 + Math_fround($40_1 * $11_1));
      $29_1 = HEAPF32[$2_1 + 20552 >> 2];
      $30 = Math_fround($36_1 + Math_fround($29_1 * $23_1));
      HEAPF32[$9 + 240 >> 2] = $30;
      $40_1 = $32_1;
      $32_1 = Math_fround($24 * $17_1);
      HEAPF32[$9 + 236 >> 2] = $40_1 - $32_1;
      $40_1 = $36_1;
      $36_1 = Math_fround($24 * $29_1);
      $42_1 = Math_fround($40_1 - $36_1);
      HEAPF32[$9 + 232 >> 2] = $42_1;
      if ($30 < $42_1) {
       HEAPF32[$9 + 240 >> 2] = $42_1;
       HEAPF32[$9 + 232 >> 2] = $30;
      }
      $30 = HEAPF32[$9 + 236 >> 2];
      if ($21_1 < $30) {
       HEAPF32[$9 + 244 >> 2] = $30;
       HEAPF32[$9 + 236 >> 2] = $21_1;
      }
      $12_1 = $3;
      $2_1 = $5_1;
      HEAP32[$9 + 216 >> 2] = $2_1;
      $3 = 4;
      $5_1 = $9 + 216 | 0;
      $7_1 = HEAP32[(HEAP32[$4_1 + 204 >> 2] + (HEAP32[$4_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
      while (1) {
       $19 = $5_1;
       $5_1 = $5_1 + 1 | 0;
       $7_1 = HEAP32[((HEAPU8[$19 | 0] ^ $7_1 & 255) << 2) + 19360 >> 2] ^ $7_1 >>> 8;
       $3 = $3 - 1 | 0;
       if ($3) {
        continue
       }
       break;
      };
      $3 = $7_1 ^ -1;
      $5_1 = HEAP32[18392];
      if (($3 | 0) == HEAP32[$5_1 + 7136 >> 2]) {
       HEAP32[$5_1 + 7140 >> 2] = $3
      }
      if (HEAP32[$5_1 + 7196 >> 2] == ($3 | 0)) {
       HEAP8[$5_1 + 7200 | 0] = 1
      }
      if (HEAP32[$5_1 + 7112 >> 2] == ($3 | 0)) {
       $75($3, 4, $2_1)
      }
      $569($9 + 232 | 0, $3, $9 + 264 | 0, $9 + 256 | 0, 264192);
      $3 = HEAPU8[$9 + 256 | 0];
      if ($3 | HEAPU8[$9 + 264 | 0]) {
       HEAP32[$25_1 + 7872 >> 2] = $2_1 & 1 ? 5 : 6
      }
      label$239 : {
       label$240 : {
        if (!$3) {
         $8 = $13;
         $11_1 = $16_1;
         break label$240;
        }
        if (!($2_1 | HEAPU16[$25_1 + 1002 >> 1] != 2)) {
         $150($9 + 216 | 0, $4_1, $9 + 136 | 0);
         $11_1 = HEAPF32[$9 + 220 >> 2];
         $8 = HEAPF32[$9 + 216 >> 2];
         $3 = HEAP32[18392];
         $5_1 = HEAP32[$3 + 7136 >> 2];
         HEAP8[$3 + 7148 | 0] = ($5_1 | 0) != 0;
         if ($5_1) {
          HEAP32[$3 + 7192 >> 2] = -1;
          HEAP8[$3 + 7151 | 0] = 0;
          HEAP8[$3 + 7152 | 0] = 0;
          HEAP32[$3 + 7144 >> 2] = 0;
         }
         HEAP32[$3 + 7184 >> 2] = 0;
         HEAP8[$3 + 7149 | 0] = 0;
         HEAP8[$3 + 7150 | 0] = 0;
         HEAP32[$3 + 7136 >> 2] = 0;
         HEAP32[$3 + 7168 >> 2] = 0;
         HEAP32[$3 + 7172 >> 2] = 0;
         HEAP32[$3 + 7156 >> 2] = 0;
         HEAP32[$3 + 7160 >> 2] = 0;
         HEAP8[$3 + 7153 | 0] = 0;
         HEAP8[$3 + 7154 | 0] = 0;
         $12_1 = 1;
         break label$239;
        }
        $21_1 = HEAPF32[$4_1 + 24 >> 2];
        $6_1 = HEAPF32[$4_1 + 16 >> 2];
        $30 = HEAPF32[$25_1 + 7180 >> 2];
        $42_1 = HEAPF32[$25_1 + 232 >> 2];
        $13 = HEAPF32[$4_1 + 12 >> 2];
        $14 = Math_fround($13 + HEAPF32[$4_1 + 20 >> 2]);
        $40_1 = $13;
        $16_1 = $11_1 == Math_fround(1.0) ? $59_1 : Math_fround(-3402823466385288598117041.0e14);
        $3 = $11_1 == Math_fround(0.0);
        $49 = $3 ? $57_1 : Math_fround(3402823466385288598117041.0e14);
        $13 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($29_1 * $27_1) - $36_1) * $11_1) + $36_1) + Math_fround(HEAPF32[$25_1 + 228 >> 2] - HEAPF32[$25_1 + 7176 >> 2]));
        $13 = $13 < $16_1 ? $16_1 : $13 > $49 ? $49 : $13;
        $16_1 = Math_fround(Math_fround(Math_fround($40_1 - $13) * $11_1) + $13);
        $13 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $14) * $11_1) + $14) - $16_1);
        HEAPF32[$9 + 216 >> 2] = $13;
        $11_1 = $8 == Math_fround(1.0) ? $58_1 : Math_fround(-3402823466385288598117041.0e14);
        $5_1 = $8 == Math_fround(0.0);
        $29_1 = $5_1 ? $56_1 : Math_fround(3402823466385288598117041.0e14);
        $14 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($17_1 * $27_1) - $32_1) * $8) + $32_1) + Math_fround($42_1 - $30));
        $14 = $11_1 > $14 ? $11_1 : $14 > $29_1 ? $29_1 : $14;
        $11_1 = Math_fround(Math_fround(Math_fround($6_1 - $14) * $8) + $14);
        $6_1 = Math_fround($6_1 + $21_1);
        $14 = Math_fround(Math_fround(Math_fround(Math_fround($14 - $6_1) * $8) + $6_1) - $11_1);
        HEAPF32[$9 + 220 >> 2] = $14;
        $150($9 - -64 | 0, $4_1, $9 + 216 | 0);
        $8 = HEAPF32[$9 + 64 >> 2];
        $6_1 = Math_fround($16_1 - ($3 ? Math_fround($8 - $13) : Math_fround(0.0)));
        $13 = $11_1;
        $11_1 = HEAPF32[$9 + 68 >> 2];
        $14 = Math_fround($13 - ($5_1 ? Math_fround($11_1 - $14) : Math_fround(0.0)));
       }
      }
      $19 = $12_1;
      $21_1 = $14;
      $17_1 = $6_1;
      $6_1 = $11_1;
      $14 = $8;
      $3 = HEAPU8[$9 + 264 | 0];
      $5_1 = HEAPU8[$9 + 256 | 0];
      if ($3 | ($5_1 | !$2_1)) {
       $7_1 = HEAP32[18392];
       $3 = ($7_1 + 5416 | 0) + (($5_1 ? 32 : $3 ? 31 : 30) << 4) | 0;
       $8 = HEAPF32[$3 + 204 >> 2];
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$246 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $5_1 = ~~$8;
         break label$246;
        }
        $5_1 = -2147483648;
       }
       $5_1 = $5_1 << 8;
       $8 = HEAPF32[$3 + 200 >> 2];
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$248 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $12_1 = ~~$8;
         break label$248;
        }
        $12_1 = -2147483648;
       }
       $5_1 = $12_1 | $5_1;
       $8 = HEAPF32[$3 + 208 >> 2];
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$250 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $12_1 = ~~$8;
         break label$250;
        }
        $12_1 = -2147483648;
       }
       $5_1 = $5_1 | $12_1 << 16;
       $12_1 = ($9 + 80 | 0) + ($2_1 << 2) | 0;
       $8 = Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$7_1 + 5416 >> 2]);
       $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
       label$252 : {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $3 = ~~$8;
         break label$252;
        }
        $3 = -2147483648;
       }
       HEAP32[$12_1 >> 2] = $5_1 | $3 << 24;
      }
      $3 = $19;
      $8 = $21_1;
      $11_1 = $17_1;
      $5_1 = $2_1 + 1 | 0;
      if (($46_1 | 0) != ($5_1 | 0)) {
       continue
      }
      break;
     };
     label$254 : {
      if (!$22_1) {
       $3 = -1;
       $13 = $14;
       $16_1 = $6_1;
       break label$254;
      }
      $60_1 = HEAP32[$9 + 116 >> 2];
      $61 = HEAP32[$9 + 112 >> 2];
      $27_1 = HEAPF32[$9 + 108 >> 2];
      $24 = HEAPF32[$9 + 104 >> 2];
      $47_1 = $9 + 240 | 0;
      $3 = -1;
      $5_1 = 0;
      while (1) {
       $12_1 = $3;
       $13 = HEAPF32[$4_1 + 16 >> 2];
       $16_1 = Math_fround($13 + HEAPF32[$4_1 + 24 >> 2]);
       $17_1 = HEAPF32[$4_1 + 12 >> 2];
       $21_1 = Math_fround($17_1 + HEAPF32[$4_1 + 20 >> 2]);
       label$257 : {
        label$258 : {
         label$259 : {
          label$260 : {
           label$261 : {
            label$262 : {
             $2_1 = $5_1;
             switch ($2_1 | 0) {
             case 3:
              break label$259;
             case 2:
              break label$260;
             case 1:
              break label$261;
             case 0:
              break label$262;
             default:
              break label$258;
             };
            }
            HEAPF32[$9 + 244 >> 2] = $16_1 - $23_1;
            HEAPF32[$9 + 240 >> 2] = $17_1 + Math_fround(4.0);
            HEAPF32[$9 + 236 >> 2] = $13 + $23_1;
            HEAPF32[$9 + 232 >> 2] = $17_1 + Math_fround(-4.0);
            break label$257;
           }
           HEAPF32[$9 + 244 >> 2] = $16_1 - $23_1;
           HEAPF32[$9 + 240 >> 2] = $21_1 + Math_fround(4.0);
           HEAPF32[$9 + 236 >> 2] = $13 + $23_1;
           HEAPF32[$9 + 232 >> 2] = $21_1 + Math_fround(-4.0);
           break label$257;
          }
          HEAPF32[$9 + 244 >> 2] = $13 + Math_fround(4.0);
          HEAPF32[$9 + 240 >> 2] = $21_1 - $23_1;
          HEAPF32[$9 + 236 >> 2] = $13 + Math_fround(-4.0);
          HEAPF32[$9 + 232 >> 2] = $17_1 + $23_1;
          break label$257;
         }
         HEAPF32[$9 + 244 >> 2] = $16_1 + Math_fround(4.0);
         HEAPF32[$9 + 240 >> 2] = $21_1 - $23_1;
         HEAPF32[$9 + 236 >> 2] = $16_1 + Math_fround(-4.0);
         HEAPF32[$9 + 232 >> 2] = $17_1 + $23_1;
         break label$257;
        }
        HEAP32[$47_1 >> 2] = 0;
        HEAP32[$47_1 + 4 >> 2] = 0;
        HEAP32[$9 + 232 >> 2] = 0;
        HEAP32[$9 + 236 >> 2] = 0;
       }
       $50_1 = $2_1 + 4 | 0;
       HEAP32[$9 + 216 >> 2] = $50_1;
       $3 = 4;
       $5_1 = $9 + 216 | 0;
       $7_1 = HEAP32[(HEAP32[$4_1 + 204 >> 2] + (HEAP32[$4_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
       while (1) {
        $22_1 = $5_1;
        $5_1 = $5_1 + 1 | 0;
        $7_1 = HEAP32[((HEAPU8[$22_1 | 0] ^ $7_1 & 255) << 2) + 19360 >> 2] ^ $7_1 >>> 8;
        $3 = $3 - 1 | 0;
        if ($3) {
         continue
        }
        break;
       };
       $3 = $7_1 ^ -1;
       $5_1 = HEAP32[18392];
       if (($3 | 0) == HEAP32[$5_1 + 7136 >> 2]) {
        HEAP32[$5_1 + 7140 >> 2] = $3
       }
       if (HEAP32[$5_1 + 7196 >> 2] == ($3 | 0)) {
        HEAP8[$5_1 + 7200 | 0] = 1
       }
       if (HEAP32[$5_1 + 7112 >> 2] == ($3 | 0)) {
        $75($3, 4, $50_1)
       }
       $13 = $11_1;
       $16_1 = $8;
       $5_1 = $2_1 >>> 0 > 1;
       $569($9 + 232 | 0, $3, $9 + 256 | 0, $9 + 248 | 0, 264192);
       label$267 : {
        label$268 : {
         if (HEAPU8[$9 + 256 | 0]) {
          if (HEAPU8[$9 + 248 | 0] | HEAPF32[$25_1 + 7128 >> 2] > Math_fround(.03999999910593033)) {
           break label$268
          }
          break label$267;
         }
         if (HEAPU8[$9 + 248 | 0]) {
          break label$268
         }
         break label$267;
        }
        HEAP32[$25_1 + 7872 >> 2] = $5_1 ? 3 : 4;
        $12_1 = HEAPU8[$9 + 248 | 0] ? $2_1 : $12_1;
       }
       $3 = $12_1;
       $8 = $14;
       $11_1 = $6_1;
       $6_1 = $13;
       $14 = $16_1;
       if (HEAPU8[$9 + 248 | 0]) {
        $7_1 = HEAP32[$4_1 + 16 >> 2];
        HEAP32[$9 + 264 >> 2] = HEAP32[$4_1 + 12 >> 2];
        HEAP32[$9 + 268 >> 2] = $7_1;
        $5_1 = $5_1 << 2;
        HEAPF32[($5_1 | $9 + 264) >> 2] = Math_fround(HEAPF32[$5_1 + $55_1 >> 2] - HEAPF32[$5_1 + $54_1 >> 2]) + Math_fround(4.0);
        $8 = ($2_1 | 0) == 1 ? $24 : Math_fround(-3402823466385288598117041.0e14);
        $14 = (wasm2js_scratch_store_i32(2, $2_1 ? 2139095039 : $61), wasm2js_scratch_load_f32());
        $6_1 = HEAPF32[$9 + 264 >> 2];
        $6_1 = $6_1 < $8 ? $8 : $6_1 > $14 ? $14 : $6_1;
        HEAPF32[$9 + 264 >> 2] = $6_1;
        $5_1 = Math_imul($2_1, 28);
        $14 = HEAPF32[$5_1 + 20660 >> 2];
        $11_1 = HEAPF32[$5_1 + 20652 >> 2];
        $13 = ($2_1 | 0) == 3 ? $27_1 : Math_fround(-3402823466385288598117041.0e14);
        $16_1 = (wasm2js_scratch_store_i32(2, ($2_1 | 0) != 2 ? 2139095039 : $60_1), wasm2js_scratch_load_f32());
        $8 = HEAPF32[$9 + 268 >> 2];
        $8 = $8 < $13 ? $13 : $8 > $16_1 ? $16_1 : $8;
        HEAPF32[$9 + 268 >> 2] = $8;
        $17_1 = HEAPF32[$4_1 + 20 >> 2];
        $13 = HEAPF32[$4_1 + 12 >> 2];
        $21_1 = HEAPF32[$4_1 + 16 >> 2];
        $16_1 = Math_fround($21_1 + HEAPF32[$4_1 + 24 >> 2]);
        $14 = $11_1 < $14 ? $11_1 : $14;
        $11_1 = Math_fround(Math_fround(Math_fround($21_1 - $8) * $14) + $8);
        $21_1 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $16_1) * $14) + $16_1) - $11_1);
        HEAPF32[$9 + 220 >> 2] = $21_1;
        $8 = HEAPF32[$5_1 + 20648 >> 2];
        $16_1 = HEAPF32[$5_1 + 20656 >> 2];
        $16_1 = $8 < $16_1 ? $8 : $16_1;
        $8 = Math_fround(Math_fround(Math_fround($13 - $6_1) * $16_1) + $6_1);
        $32_1 = $6_1;
        $6_1 = Math_fround($13 + $17_1);
        $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($32_1 - $6_1) * $16_1) + $6_1) - $8);
        HEAPF32[$9 + 216 >> 2] = $6_1;
        $150($9 - -64 | 0, $4_1, $9 + 216 | 0);
        $13 = $11_1;
        $11_1 = HEAPF32[$9 + 68 >> 2];
        $14 = Math_fround($13 - ($14 == Math_fround(0.0) ? Math_fround($11_1 - $21_1) : Math_fround(0.0)));
        $13 = $8;
        $8 = HEAPF32[$9 + 64 >> 2];
        $6_1 = Math_fround($13 - ($16_1 == Math_fround(0.0) ? Math_fround($8 - $6_1) : Math_fround(0.0)));
       }
       $13 = $8;
       $16_1 = $11_1;
       $11_1 = $6_1;
       $17_1 = $6_1;
       $8 = $14;
       $21_1 = $8;
       $6_1 = $16_1;
       $14 = $13;
       $5_1 = $2_1 + 1 | 0;
       if (($5_1 | 0) != 4) {
        continue
       }
       break;
      };
     }
     $11_1 = $16_1;
     $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
     HEAP32[$2_1 + 196 >> 2] = HEAP32[$2_1 + 196 >> 2] - 1;
     HEAP32[$4_1 + 292 >> 2] = 0;
     $2_1 = HEAP32[$25_1 + 7844 >> 2];
     label$271 : {
      if (!$2_1 | HEAP32[$2_1 + 736 >> 2] != ($4_1 | 0)) {
       break label$271
      }
      $2_1 = HEAP32[$25_1 + 7560 >> 2];
      label$273 : {
       if (($2_1 | 0) != 2) {
        $6_1 = Math_fround(0.0);
        $14 = Math_fround(0.0);
        break label$273;
       }
       $6_1 = Math_fround(0.0);
       $14 = Math_fround(0.0);
       if (!HEAPU8[$25_1 + 253 | 0]) {
        break label$273
       }
       $154($9 + 232 | 0, 1, 0, Math_fround(0.0), Math_fround(0.0));
       $6_1 = HEAPF32[$9 + 236 >> 2];
       $14 = HEAPF32[$9 + 232 >> 2];
      }
      if (($2_1 | 0) == 3) {
       $154($9 + 232 | 0, 4, 0, Math_fround(0.0), Math_fround(0.0));
       $14 = HEAPF32[$9 + 232 >> 2];
       $6_1 = HEAPF32[$9 + 236 >> 2];
      }
      if ($14 == Math_fround(0.0) & $6_1 == Math_fround(0.0)) {
       break label$271
      }
      $13 = HEAPF32[$4_1 + 20 >> 2];
      $16_1 = HEAPF32[$4_1 + 12 >> 2];
      $23_1 = HEAPF32[$4_1 + 24 >> 2];
      $27_1 = HEAPF32[$4_1 + 16 >> 2];
      $24 = HEAPF32[$9 + 104 >> 2];
      $29_1 = HEAPF32[$9 + 108 >> 2];
      HEAP8[$25_1 + 7864 | 0] = 0;
      HEAP8[$25_1 + 7571 | 0] = 1;
      $30 = HEAPF32[$25_1 + 24 >> 2];
      $8 = HEAPF32[$25_1 + 172 >> 2];
      $11_1 = HEAPF32[$25_1 + 168 >> 2];
      HEAP32[$9 + 80 >> 2] = $51(32, Math_fround(1.0));
      $32_1 = HEAPF32[$4_1 + 28 >> 2];
      $36_1 = $6_1;
      $6_1 = Math_fround(Math_fround($30 * Math_fround(600.0)) * ($8 > $11_1 ? $11_1 : $8));
      label$277 : {
       if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$6_1;
        break label$277;
       }
       $2_1 = -2147483648;
      }
      $6_1 = Math_fround($2_1 | 0);
      $8 = Math_fround($36_1 * $6_1);
      $11_1 = Math_fround(Math_fround($29_1 - $27_1) - $23_1);
      HEAPF32[$9 + 220 >> 2] = ($8 >= $11_1 ? $8 : $11_1) + HEAPF32[$4_1 + 32 >> 2];
      $6_1 = Math_fround($14 * $6_1);
      $8 = Math_fround(Math_fround($24 - $16_1) - $13);
      HEAPF32[$9 + 216 >> 2] = $32_1 + ($6_1 >= $8 ? $6_1 : $8);
      $150($9 + 232 | 0, $4_1, $9 + 216 | 0);
      $13 = HEAPF32[$9 + 232 >> 2];
      $11_1 = HEAPF32[$9 + 236 >> 2];
     }
     label$279 : {
      if ($13 == Math_fround(3402823466385288598117041.0e14)) {
       break label$279
      }
      HEAPF32[$4_1 + 28 >> 2] = $13;
      HEAPF32[$4_1 + 32 >> 2] = $11_1;
      if (HEAP8[$4_1 + 9 | 0] & 1) {
       break label$279
      }
      $2_1 = HEAP32[18392];
      if (!(HEAPF32[$2_1 + 12128 >> 2] <= Math_fround(0.0))) {
       break label$279
      }
      HEAPF32[$2_1 + 12128 >> 2] = HEAPF32[$2_1 + 28 >> 2];
     }
     label$280 : {
      if ($17_1 == Math_fround(3402823466385288598117041.0e14)) {
       break label$280
      }
      HEAPF32[$4_1 + 16 >> 2] = (Math_fround(Math_abs($21_1)) < Math_fround(2147483648.0) ? ~~$21_1 : -2147483648) | 0;
      HEAPF32[$4_1 + 12 >> 2] = (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0) ? ~~$17_1 : -2147483648) | 0;
      if (HEAP8[$4_1 + 9 | 0] & 1) {
       break label$280
      }
      $2_1 = HEAP32[18392];
      if (!(HEAPF32[$2_1 + 12128 >> 2] <= Math_fround(0.0))) {
       break label$280
      }
      HEAPF32[$2_1 + 12128 >> 2] = HEAPF32[$2_1 + 28 >> 2];
     }
     $2_1 = HEAP32[$4_1 + 32 >> 2];
     HEAP32[$4_1 + 20 >> 2] = HEAP32[$4_1 + 28 >> 2];
     HEAP32[$4_1 + 24 >> 2] = $2_1;
     $2_1 = $19;
    }
    $7_1 = $10_1 | $2_1;
    $2_1 = $2_1 | $20_1;
   }
   $27_1 = Math_fround($52_1 + $53_1);
   HEAP8[$4_1 + 149 | 0] = $3;
   if (!HEAPU8[$4_1 + 141 | 0]) {
    $8 = Math_fround(Math_fround(HEAPF32[$4_1 + 444 >> 2] - HEAPF32[$4_1 + 436 >> 2]) + HEAPF32[$4_1 + 132 >> 2]);
    $14 = Math_fround(HEAPF32[$4_1 + 32 >> 2] - $27_1);
    $11_1 = HEAPF32[$4_1 + 440 >> 2];
    $13 = HEAPF32[$4_1 + 432 >> 2];
    $16_1 = HEAPF32[$4_1 + 128 >> 2];
    $17_1 = HEAPF32[$4_1 + 28 >> 2];
    $3 = !($18_1 & 8);
    label$286 : {
     if (!$31_1) {
      $6_1 = Math_fround(0.0);
      $21_1 = Math_fround(0.0);
      break label$286;
     }
     $6_1 = HEAPF32[$4_1 + 60 >> 2];
     $6_1 = Math_fround(Math_fround($6_1 + $6_1) + HEAPF32[$4_1 + 36 >> 2]);
     $21_1 = HEAPF32[$4_1 - -64 >> 2];
     $21_1 = Math_fround(Math_fround($21_1 + $21_1) + HEAPF32[$4_1 + 40 >> 2]);
    }
    $8 = $2_1 & 1 ? $14 : $8;
    $2_1 = $18_1 & 16384 ? 1 : $3 & $21_1 > $8;
    HEAP8[$4_1 + 137 | 0] = $2_1;
    $3 = 1;
    label$289 : {
     if ($18_1 & 32768) {
      break label$289
     }
     $3 = 0;
     if (!(Math_fround(($7_1 & 1 ? $17_1 : Math_fround(Math_fround($11_1 - $13) + $16_1)) - ($2_1 ? HEAPF32[$15_1 + 5532 >> 2] : Math_fround(0.0))) < $6_1)) {
      break label$289
     }
     $3 = 0;
     if ($18_1 & 8) {
      break label$289
     }
     $3 = ($18_1 & 2048) >>> 11 | 0;
    }
    HEAP8[$4_1 + 136 | 0] = $3;
    if (!($2_1 | $3 ^ 1)) {
     HEAP8[$4_1 + 137 | 0] = !($18_1 & 8) & $8 < $21_1
    }
    $8 = HEAPF32[$15_1 + 5532 >> 2];
    $6_1 = $3 ? $8 : Math_fround(0.0);
    HEAPF32[$4_1 + 128 >> 2] = HEAPU8[$4_1 + 137 | 0] ? $8 : Math_fround(0.0);
    HEAPF32[$4_1 + 132 >> 2] = $6_1;
   }
   $16_1 = HEAPF32[$4_1 + 16 >> 2];
   $17_1 = Math_fround($16_1 + HEAPF32[$4_1 + 24 >> 2]);
   $2_1 = $9 + 120 | 0;
   $5_1 = !$34_1 | ($33_1 | 0) != 0;
   $2_1 = $5_1 ? $2_1 : ($38_1 | 0) == 50331648 ? $2_1 : $26_1 + 496 | 0;
   $11_1 = HEAPF32[$2_1 + 12 >> 2];
   $23_1 = HEAPF32[$4_1 + 12 >> 2];
   $21_1 = HEAPF32[$4_1 + 20 >> 2];
   $24 = Math_fround($23_1 + $21_1);
   $6_1 = Math_fround(0.0);
   if (!(HEAP8[$4_1 + 8 | 0] & 1)) {
    $3 = HEAP32[18392];
    $6_1 = Math_fround(HEAPF32[$3 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
    $8 = HEAPF32[$3 + 5480 >> 2];
    $8 = Math_fround($8 + $8);
    $7_1 = HEAP32[$4_1 + 728 >> 2];
    if ($7_1) {
     $6_1 = Math_fround($6_1 * HEAPF32[$7_1 + 572 >> 2])
    }
    $6_1 = Math_fround($8 + $6_1);
   }
   $3 = HEAP32[$2_1 + 12 >> 2];
   $13 = HEAPF32[$2_1 + 8 >> 2];
   $7_1 = HEAP32[$2_1 + 8 >> 2];
   $8 = HEAPF32[$2_1 + 4 >> 2];
   $14 = HEAPF32[$2_1 >> 2];
   $29_1 = HEAPF32[$4_1 + 28 >> 2];
   $30 = HEAPF32[$4_1 + 12 >> 2];
   $2_1 = HEAP32[$4_1 + 12 >> 2];
   $10_1 = HEAP32[$4_1 + 16 >> 2];
   HEAPF32[$9 + 76 >> 2] = $16_1 + $6_1;
   HEAPF32[$9 + 72 >> 2] = $30 + $29_1;
   HEAP32[$9 + 64 >> 2] = $2_1;
   HEAP32[$9 + 68 >> 2] = $10_1;
   HEAPF32[$4_1 + 420 >> 2] = $8 <= $16_1 ? $16_1 : $8;
   HEAPF32[$4_1 + 416 >> 2] = $14 <= $23_1 ? $23_1 : $14;
   $23_1 = Math_fround($27_1 + $16_1);
   HEAPF32[$4_1 + 436 >> 2] = $23_1;
   HEAPF32[$4_1 + 424 >> 2] = $13 > $24 ? $24 : $13;
   HEAPF32[$4_1 + 428 >> 2] = $11_1 > $17_1 ? $17_1 : $11_1;
   $6_1 = HEAPF32[$4_1 + 12 >> 2];
   HEAPF32[$4_1 + 432 >> 2] = $6_1;
   $16_1 = Math_fround($17_1 - HEAPF32[$4_1 + 132 >> 2]);
   HEAPF32[$4_1 + 444 >> 2] = $16_1;
   $24 = Math_fround(Math_fround($21_1 + $6_1) - HEAPF32[$4_1 + 128 >> 2]);
   HEAPF32[$4_1 + 440 >> 2] = $24;
   $29_1 = HEAPF32[(($18_1 & 1025) == 1 ? $4_1 + 72 | 0 : $15_1 + 5488 | 0) >> 2];
   $12_1 = $4_1 + 460 | 0;
   $17_1 = Math_fround($16_1 + Math_fround(.5));
   $16_1 = HEAPF32[$4_1 + 72 >> 2];
   $17_1 = Math_fround($17_1 - $16_1);
   label$299 : {
    if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$17_1;
     break label$299;
    }
    $2_1 = -2147483648;
   }
   $17_1 = Math_fround($2_1 | 0);
   HEAPF32[$12_1 >> 2] = $8 > $17_1 ? $8 : $11_1 < $17_1 ? $11_1 : $17_1;
   $12_1 = $4_1 + 452 | 0;
   $17_1 = Math_fround(Math_fround($23_1 + Math_fround(.5)) + $29_1);
   label$301 : {
    if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$17_1;
     break label$301;
    }
    $2_1 = -2147483648;
   }
   $17_1 = Math_fround($2_1 | 0);
   HEAPF32[$12_1 >> 2] = $8 > $17_1 ? $8 : $11_1 < $17_1 ? $11_1 : $17_1;
   $12_1 = $4_1 + 456 | 0;
   $17_1 = Math_fround($24 + Math_fround(.5));
   $11_1 = Math_fround(HEAPF32[$4_1 + 60 >> 2] * Math_fround(.5));
   label$303 : {
    if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$11_1;
     break label$303;
    }
    $2_1 = -2147483648;
   }
   $11_1 = Math_fround($2_1 | 0);
   $16_1 = $11_1 >= $16_1 ? $11_1 : $16_1;
   $11_1 = Math_fround($17_1 - $16_1);
   label$305 : {
    if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$11_1;
     break label$305;
    }
    $2_1 = -2147483648;
   }
   $11_1 = Math_fround($2_1 | 0);
   HEAPF32[$12_1 >> 2] = $11_1 < $14 ? $14 : $11_1 > $13 ? $13 : $11_1;
   $6_1 = Math_fround(Math_fround($6_1 + Math_fround(.5)) + $16_1);
   label$307 : {
    if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$6_1;
     break label$307;
    }
    $2_1 = -2147483648;
   }
   $6_1 = Math_fround($2_1 | 0);
   HEAPF32[$4_1 + 448 >> 2] = $6_1 < $14 ? $14 : $6_1 > $13 ? $13 : $6_1;
   $6_1 = $45_1 | (!($21_1 > Math_fround(0.0)) | $48_1) ? Math_fround(HEAPF32[$15_1 + 6468 >> 2] * Math_fround(16.0)) : Math_fround($21_1 * Math_fround(.6499999761581421));
   label$311 : {
    if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$6_1;
     break label$311;
    }
    $2_1 = -2147483648;
   }
   HEAPF32[$4_1 + 544 >> 2] = $2_1 | 0;
   $6_1 = HEAPF32[$4_1 + 60 >> 2];
   $6_1 = Math_fround(Math_fround(Math_fround($6_1 + $6_1) + HEAPF32[$4_1 + 36 >> 2]) - Math_fround(HEAPF32[$4_1 + 440 >> 2] - HEAPF32[$4_1 + 432 >> 2]));
   HEAPF32[$4_1 + 96 >> 2] = $6_1 <= Math_fround(0.0) ? Math_fround(0.0) : $6_1;
   $6_1 = HEAPF32[$4_1 - -64 >> 2];
   $6_1 = Math_fround(Math_fround(Math_fround($6_1 + $6_1) + HEAPF32[$4_1 + 40 >> 2]) - Math_fround(HEAPF32[$4_1 + 444 >> 2] - HEAPF32[$4_1 + 436 >> 2]));
   HEAPF32[$4_1 + 100 >> 2] = $6_1 <= Math_fround(0.0) ? Math_fround(0.0) : $6_1;
   $155($9 + 232 | 0, $4_1);
   $2_1 = HEAP32[$9 + 236 >> 2];
   HEAP32[$4_1 + 88 >> 2] = HEAP32[$9 + 232 >> 2];
   HEAP32[$4_1 + 92 >> 2] = $2_1;
   HEAP32[$4_1 + 104 >> 2] = 2139095039;
   HEAP32[$4_1 + 108 >> 2] = 2139095039;
   $381(HEAP32[$4_1 + 580 >> 2], HEAP32[HEAP32[HEAP32[$15_1 + 6464 >> 2] + 48 >> 2] + 4 >> 2]);
   $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
   HEAP8[$2_1 + 140 | 0] = 1;
   $10_1 = HEAP32[$2_1 + 580 >> 2];
   HEAPF32[$9 + 236 >> 2] = $8;
   HEAPF32[$9 + 232 >> 2] = $14;
   HEAP32[$9 + 220 >> 2] = $3;
   HEAP32[$9 + 216 >> 2] = $7_1;
   $3 = HEAP32[$9 + 236 >> 2];
   HEAP32[$9 + 56 >> 2] = HEAP32[$9 + 232 >> 2];
   HEAP32[$9 + 60 >> 2] = $3;
   $3 = HEAP32[$9 + 220 >> 2];
   HEAP32[$9 + 48 >> 2] = HEAP32[$9 + 216 >> 2];
   HEAP32[$9 + 52 >> 2] = $3;
   $378($10_1, $9 + 56 | 0, $9 + 48 | 0, 0);
   $3 = HEAP32[$2_1 + 580 >> 2];
   $3 = ((HEAP32[$3 + 60 >> 2] << 4) + HEAP32[$3 + 68 >> 2] | 0) - 16 | 0;
   $7_1 = HEAP32[$3 >> 2];
   $10_1 = HEAP32[$3 + 4 >> 2];
   $12_1 = HEAP32[$3 + 12 >> 2];
   $20_1 = $2_1 + 504 | 0;
   HEAP32[$20_1 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$20_1 + 4 >> 2] = $12_1;
   HEAP32[$2_1 + 496 >> 2] = $7_1;
   HEAP32[$2_1 + 500 >> 2] = $10_1;
   $7_1 = 0;
   label$313 : {
    if ($5_1 | ($38_1 | 0) == 50331648) {
     break label$313
    }
    $3 = 0;
    $2_1 = HEAP32[$26_1 + 352 >> 2];
    if (($2_1 | 0) >= 2) {
     $3 = HEAP32[(HEAP32[$26_1 + 360 >> 2] + ($2_1 << 2) | 0) - 8 >> 2]
    }
    $2_1 = 0;
    label$315 : {
     if (!$3) {
      break label$315
     }
     $6_1 = HEAPF32[$4_1 + 16 >> 2];
     $8 = HEAPF32[$3 + 16 >> 2];
     $2_1 = 0;
     if (!($6_1 < Math_fround($8 + HEAPF32[$3 + 24 >> 2]))) {
      break label$315
     }
     $2_1 = 0;
     if (!($8 < Math_fround($6_1 + HEAPF32[$4_1 + 24 >> 2]))) {
      break label$315
     }
     $6_1 = HEAPF32[$4_1 + 12 >> 2];
     $8 = HEAPF32[$3 + 12 >> 2];
     $2_1 = 0;
     if (!($6_1 < Math_fround($8 + HEAPF32[$3 + 20 >> 2]))) {
      break label$315
     }
     $2_1 = $8 < Math_fround($6_1 + HEAPF32[$4_1 + 20 >> 2]);
    }
    $3 = HEAP32[$4_1 + 580 >> 2];
    $7_1 = 0;
    if (HEAP32[(Math_imul(HEAP32[$3 >> 2], 40) + HEAP32[$3 + 8 >> 2] | 0) - 12 >> 2]) {
     break label$313
    }
    $7_1 = 0;
    if (HEAP32[HEAP32[$26_1 + 580 >> 2] + 24 >> 2] <= 0) {
     break label$313
    }
    $7_1 = $2_1 ^ 1;
   }
   $2_1 = $7_1;
   $20_1 = $2_1;
   if ($2_1) {
    HEAP32[$4_1 + 580 >> 2] = HEAP32[$26_1 + 580 >> 2]
   }
   $2_1 = HEAP32[$15_1 + 7844 >> 2];
   if (!$2_1) {
    $2_1 = HEAP32[$15_1 + 7508 >> 2]
   }
   $7_1 = 1;
   label$322 : {
    if ($37) {
     break label$322
    }
    $7_1 = 0;
    if (!$2_1) {
     break label$322
    }
    $7_1 = HEAP32[$4_1 + 744 >> 2] == HEAP32[$2_1 + 744 >> 2];
   }
   $2_1 = HEAP32[18392];
   HEAP8[$4_1 + 143 | 0] = 0;
   $14 = HEAPF32[$4_1 + 72 >> 2];
   $11_1 = HEAPF32[$4_1 + 68 >> 2];
   label$324 : {
    if (HEAPU8[$4_1 + 141 | 0]) {
     $3 = $2_1 + 5488 | 0;
     $13 = HEAPF32[$3 >> 2];
     HEAPF32[$3 >> 2] = $14;
     $3 = ($2_1 + 5416 | 0) + (($7_1 ? (HEAPU8[$2_1 + 7570 | 0] ? 12 : 11) : 12) << 4) | 0;
     $16_1 = HEAPF32[$3 + 212 >> 2];
     $6_1 = HEAPF32[$3 + 208 >> 2];
     $8 = HEAPF32[$3 + 200 >> 2];
     $14 = HEAPF32[$3 + 204 >> 2];
     $17_1 = HEAPF32[$2_1 + 5416 >> 2];
     $3 = HEAP32[$9 + 68 >> 2];
     $7_1 = HEAP32[$9 + 64 >> 2];
     HEAP32[$9 + 232 >> 2] = $7_1;
     HEAP32[$9 + 236 >> 2] = $3;
     $5_1 = HEAP32[$9 + 76 >> 2];
     $10_1 = HEAP32[$9 + 72 >> 2];
     HEAP32[$9 + 216 >> 2] = $10_1;
     HEAP32[$9 + 220 >> 2] = $5_1;
     HEAP32[$9 + 40 >> 2] = $7_1;
     HEAP32[$9 + 44 >> 2] = $3;
     HEAP32[$9 + 32 >> 2] = $10_1;
     HEAP32[$9 + 36 >> 2] = $5_1;
     $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : $14 > Math_fround(1.0) ? Math_fround(1.0) : $14) * Math_fround(255.0)) + Math_fround(.5));
     label$327 : {
      if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
       $3 = ~~$14;
       break label$327;
      }
      $3 = -2147483648;
     }
     $3 = $3 << 8;
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$329 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$8;
       break label$329;
      }
      $5_1 = -2147483648;
     }
     $3 = $5_1 | $3;
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$331 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$6_1;
       break label$331;
      }
      $5_1 = -2147483648;
     }
     $3 = $3 | $5_1 << 16;
     $7_1 = $9 + 40 | 0;
     $12_1 = $9 + 32 | 0;
     $6_1 = Math_fround($16_1 * $17_1);
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$333 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$6_1;
       break label$333;
      }
      $5_1 = -2147483648;
     }
     $71($7_1, $12_1, $3 | $5_1 << 24, 1, $11_1);
     HEAPF32[$2_1 + 5488 >> 2] = $13;
     break label$324;
    }
    $5_1 = HEAP32[$4_1 + 8 >> 2];
    if (!($5_1 & 128)) {
     $3 = ($2_1 + 5416 | 0) + (($5_1 & 100663296 ? 4 : $5_1 & 16777216 ? 3 : 2) << 4) | 0;
     $6_1 = HEAPF32[$3 + 204 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$336 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $10_1 = ~~$6_1;
       break label$336;
      }
      $10_1 = -2147483648;
     }
     $6_1 = HEAPF32[$3 + 200 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$338 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $12_1 = ~~$6_1;
       break label$338;
      }
      $12_1 = -2147483648;
     }
     $6_1 = HEAPF32[$3 + 208 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$340 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $19 = ~~$6_1;
       break label$340;
      }
      $19 = -2147483648;
     }
     $10_1 = $10_1 << 8;
     $6_1 = Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$342 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $22_1 = ~~$6_1;
       break label$342;
      }
      $22_1 = -2147483648;
     }
     $25_1 = HEAP32[$2_1 + 7300 >> 2] & 64;
     $6_1 = $25_1 ? HEAPF32[$2_1 + 7384 >> 2] : Math_fround(1.0);
     $3 = $10_1 | $12_1 | $19 << 16;
     if ($25_1) {
      $12_1 = $3 & 16777215;
      $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
      label$347 : {
       if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
        $3 = ~~$6_1;
        break label$347;
       }
       $3 = -2147483648;
      }
      $10_1 = $12_1 | $3 << 24;
     } else {
      $10_1 = $3 | $22_1 << 24
     }
     $3 = 0;
     $13 = Math_fround(0.0);
     if (!($5_1 & 1)) {
      $8 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
      $6_1 = HEAPF32[$2_1 + 5480 >> 2];
      $6_1 = Math_fround($6_1 + $6_1);
      $3 = HEAP32[$4_1 + 728 >> 2];
      if ($3) {
       $8 = Math_fround($8 * HEAPF32[$3 + 572 >> 2])
      }
      $13 = Math_fround($6_1 + $8);
      $3 = 192;
     }
     $12_1 = HEAP32[$4_1 + 580 >> 2];
     $6_1 = HEAPF32[$4_1 + 12 >> 2];
     $8 = HEAPF32[$4_1 + 16 >> 2];
     HEAPF32[$9 + 236 >> 2] = $13 + $8;
     HEAPF32[$9 + 232 >> 2] = $6_1 + Math_fround(0.0);
     $13 = HEAPF32[$4_1 + 20 >> 2];
     HEAPF32[$9 + 220 >> 2] = $8 + HEAPF32[$4_1 + 24 >> 2];
     HEAPF32[$9 + 216 >> 2] = $6_1 + $13;
     $401($12_1, $9 + 232 | 0, $9 + 216 | 0, $10_1, $11_1, $3);
    }
    $12_1 = $5_1 & 1;
    if (!$12_1) {
     $10_1 = HEAP32[18392];
     $3 = ($10_1 + 5416 | 0) + ($7_1 ? 176 : 160) | 0;
     $6_1 = HEAPF32[$3 + 204 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$353 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$6_1;
       break label$353;
      }
      $7_1 = -2147483648;
     }
     $7_1 = $7_1 << 8;
     $6_1 = HEAPF32[$3 + 200 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$355 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $19 = ~~$6_1;
       break label$355;
      }
      $19 = -2147483648;
     }
     $7_1 = $19 | $7_1;
     $19 = $9 + 72 | 0;
     $6_1 = HEAPF32[$3 + 208 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$357 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $22_1 = ~~$6_1;
       break label$357;
      }
      $22_1 = -2147483648;
     }
     $7_1 = $7_1 | $22_1 << 16;
     $22_1 = HEAP32[$4_1 + 580 >> 2];
     $31_1 = $9 - -64 | 0;
     $6_1 = Math_fround(HEAPF32[$3 + 212 >> 2] * HEAPF32[$10_1 + 5416 >> 2]);
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$359 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $3 = ~~$6_1;
       break label$359;
      }
      $3 = -2147483648;
     }
     $401($22_1, $31_1, $19, $7_1 | $3 << 24, $11_1, 48);
    }
    $10_1 = $4_1 + 12 | 0;
    label$361 : {
     if (!($5_1 & 1024)) {
      break label$361
     }
     $8 = Math_fround(0.0);
     $3 = HEAP32[$4_1 + 8 >> 2];
     if (!($3 & 1)) {
      $7_1 = HEAP32[18392];
      $8 = Math_fround(HEAPF32[$7_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
      $6_1 = HEAPF32[$7_1 + 5480 >> 2];
      $6_1 = Math_fround($6_1 + $6_1);
      $19 = HEAP32[$4_1 + 728 >> 2];
      if ($19) {
       $8 = Math_fround($8 * HEAPF32[$19 + 572 >> 2])
      }
      $8 = Math_fround($6_1 + $8);
     }
     $6_1 = Math_fround(0.0);
     if ($3 & 1024) {
      $3 = HEAP32[18392];
      $6_1 = Math_fround(HEAPF32[$3 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
      $13 = HEAPF32[$3 + 5480 >> 2];
      $13 = Math_fround($13 + $13);
      $16_1 = HEAPF32[$4_1 + 312 >> 2];
      $7_1 = HEAP32[$4_1 + 728 >> 2];
      if ($7_1) {
       $6_1 = Math_fround($6_1 * HEAPF32[$7_1 + 572 >> 2])
      }
      $6_1 = Math_fround($13 + Math_fround($16_1 + $6_1));
     }
     $13 = HEAPF32[$4_1 + 16 >> 2];
     $17_1 = HEAPF32[$28_1 >> 2];
     $7_1 = HEAP32[$4_1 + 580 >> 2];
     $21_1 = HEAPF32[$4_1 + 20 >> 2];
     $23_1 = HEAPF32[$4_1 + 24 >> 2];
     $16_1 = HEAPF32[$10_1 >> 2];
     HEAPF32[$9 + 232 >> 2] = $14 + $16_1;
     $8 = Math_fround($13 + $8);
     HEAPF32[$9 + 236 >> 2] = ($8 >= $13 ? $8 : $13) + Math_fround(0.0);
     $6_1 = Math_fround($8 + $6_1);
     $8 = Math_fround($13 + $23_1);
     $6_1 = $6_1 < $8 ? $6_1 : $8;
     HEAPF32[$9 + 220 >> 2] = $6_1;
     $8 = Math_fround($16_1 + $17_1);
     $13 = Math_fround($16_1 + $21_1);
     $13 = $8 < $13 ? $8 : $13;
     HEAPF32[$9 + 216 >> 2] = $13 - $14;
     $3 = HEAP32[18392];
     $8 = HEAPF32[$3 + 5828 >> 2];
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$368 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $19 = ~~$8;
       break label$368;
      }
      $19 = -2147483648;
     }
     $19 = $19 << 8;
     $8 = HEAPF32[$3 + 5824 >> 2];
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$370 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $22_1 = ~~$8;
       break label$370;
      }
      $22_1 = -2147483648;
     }
     $19 = $22_1 | $19;
     $8 = HEAPF32[$3 + 5832 >> 2];
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$372 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $22_1 = ~~$8;
       break label$372;
      }
      $22_1 = -2147483648;
     }
     $19 = $19 | $22_1 << 16;
     $22_1 = $9 + 232 | 0;
     $31_1 = $9 + 216 | 0;
     $8 = Math_fround(HEAPF32[$3 + 5836 >> 2] * HEAPF32[$3 + 5416 >> 2]);
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$374 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $3 = ~~$8;
       break label$374;
      }
      $3 = -2147483648;
     }
     $401($7_1, $22_1, $31_1, $19 | $3 << 24, $12_1 ? $11_1 : Math_fround(0.0), 48);
     $8 = HEAPF32[$2_1 + 5488 >> 2];
     if (!($8 > Math_fround(0.0)) | !($6_1 < Math_fround(HEAPF32[$4_1 + 16 >> 2] + HEAPF32[$4_1 + 24 >> 2]))) {
      break label$361
     }
     $3 = HEAP32[$4_1 + 580 >> 2];
     HEAPF32[$9 + 236 >> 2] = $6_1;
     HEAPF32[$9 + 232 >> 2] = $16_1;
     HEAPF32[$9 + 220 >> 2] = $6_1;
     HEAPF32[$9 + 216 >> 2] = $13;
     $2_1 = HEAP32[18392];
     $6_1 = HEAPF32[$2_1 + 5700 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$376 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$6_1;
       break label$376;
      }
      $7_1 = -2147483648;
     }
     $7_1 = $7_1 << 8;
     $6_1 = HEAPF32[$2_1 + 5696 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$378 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $12_1 = ~~$6_1;
       break label$378;
      }
      $12_1 = -2147483648;
     }
     $7_1 = $12_1 | $7_1;
     $6_1 = HEAPF32[$2_1 + 5704 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$380 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $12_1 = ~~$6_1;
       break label$380;
      }
      $12_1 = -2147483648;
     }
     $7_1 = $7_1 | $12_1 << 16;
     $12_1 = $9 + 232 | 0;
     $19 = $9 + 216 | 0;
     $6_1 = Math_fround(HEAPF32[$2_1 + 5708 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$382 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$6_1;
       break label$382;
      }
      $2_1 = -2147483648;
     }
     $399($3, $12_1, $19, $7_1 | $2_1 << 24, $8);
    }
    if (HEAPU8[$4_1 + 136 | 0]) {
     $578(0)
    }
    if (HEAPU8[$4_1 + 137 | 0]) {
     $578(1)
    }
    if (!($5_1 & 2)) {
     $6_1 = Math_fround($35_1 | 0);
     $8 = Math_fround($11_1 + $14);
     $3 = 0;
     while (1) {
      $13 = HEAPF32[$4_1 + 16 >> 2];
      $5_1 = Math_imul($3, 24);
      $13 = Math_fround(Math_fround(Math_fround(Math_fround($13 + HEAPF32[$4_1 + 24 >> 2]) - $13) * HEAPF32[$5_1 + 20548 >> 2]) + $13);
      $2_1 = $3 & 1;
      $23_1 = $2_1 ? $6_1 : $14;
      $16_1 = HEAPF32[$5_1 + 20556 >> 2];
      $24 = Math_fround($13 + Math_fround($23_1 * $16_1));
      $17_1 = HEAPF32[$4_1 + 12 >> 2];
      $17_1 = Math_fround(Math_fround(Math_fround(Math_fround($17_1 + HEAPF32[$4_1 + 20 >> 2]) - $17_1) * HEAPF32[$5_1 + 20544 >> 2]) + $17_1);
      $29_1 = $2_1 ? $14 : $6_1;
      $21_1 = HEAPF32[$5_1 + 20552 >> 2];
      $30 = Math_fround($17_1 + Math_fround($29_1 * $21_1));
      $2_1 = HEAP32[$4_1 + 580 >> 2];
      $12_1 = HEAP32[$2_1 + 84 >> 2];
      $7_1 = HEAP32[$2_1 + 88 >> 2];
      label$388 : {
       if (($12_1 | 0) != ($7_1 | 0)) {
        break label$388
       }
       $19 = $7_1;
       $7_1 = $7_1 ? $7_1 + (($7_1 | 0) / 2 | 0) | 0 : 8;
       $12_1 = $12_1 + 1 | 0;
       $7_1 = ($7_1 | 0) > ($12_1 | 0) ? $7_1 : $12_1;
       if (($19 | 0) >= ($7_1 | 0)) {
        break label$388
       }
       $12_1 = HEAP32[18392];
       if ($12_1) {
        $12_1 = $12_1 + 876 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$12_1 >> 2] + 1;
       }
       $12_1 = FUNCTION_TABLE[HEAP32[18314]]($7_1 << 3, HEAP32[18394]) | 0;
       $19 = HEAP32[$2_1 + 92 >> 2];
       if ($19) {
        $1602($12_1, $19, HEAP32[$2_1 + 84 >> 2] << 3);
        $19 = HEAP32[$2_1 + 92 >> 2];
        label$393 : {
         if (!$19) {
          break label$393
         }
         $22_1 = HEAP32[18392];
         if (!$22_1) {
          break label$393
         }
         $22_1 = $22_1 + 876 | 0;
         HEAP32[$22_1 >> 2] = HEAP32[$22_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($19, HEAP32[18394]);
       }
       HEAP32[$2_1 + 88 >> 2] = $7_1;
       HEAP32[$2_1 + 92 >> 2] = $12_1;
      }
      $7_1 = HEAP32[$2_1 + 92 >> 2] + (HEAP32[$2_1 + 84 >> 2] << 3) | 0;
      HEAPF32[$7_1 + 4 >> 2] = $24;
      HEAPF32[$7_1 >> 2] = $30;
      HEAP32[$2_1 + 84 >> 2] = HEAP32[$2_1 + 84 >> 2] + 1;
      $24 = Math_fround($13 + Math_fround($29_1 * $16_1));
      $23_1 = Math_fround($17_1 + Math_fround($23_1 * $21_1));
      $2_1 = HEAP32[$4_1 + 580 >> 2];
      $12_1 = HEAP32[$2_1 + 84 >> 2];
      $7_1 = HEAP32[$2_1 + 88 >> 2];
      label$394 : {
       if (($12_1 | 0) != ($7_1 | 0)) {
        break label$394
       }
       $19 = $7_1;
       $7_1 = $7_1 ? $7_1 + (($7_1 | 0) / 2 | 0) | 0 : 8;
       $12_1 = $12_1 + 1 | 0;
       $7_1 = ($7_1 | 0) > ($12_1 | 0) ? $7_1 : $12_1;
       if (($19 | 0) >= ($7_1 | 0)) {
        break label$394
       }
       $12_1 = HEAP32[18392];
       if ($12_1) {
        $12_1 = $12_1 + 876 | 0;
        HEAP32[$12_1 >> 2] = HEAP32[$12_1 >> 2] + 1;
       }
       $12_1 = FUNCTION_TABLE[HEAP32[18314]]($7_1 << 3, HEAP32[18394]) | 0;
       $19 = HEAP32[$2_1 + 92 >> 2];
       if ($19) {
        $1602($12_1, $19, HEAP32[$2_1 + 84 >> 2] << 3);
        $19 = HEAP32[$2_1 + 92 >> 2];
        label$399 : {
         if (!$19) {
          break label$399
         }
         $22_1 = HEAP32[18392];
         if (!$22_1) {
          break label$399
         }
         $22_1 = $22_1 + 876 | 0;
         HEAP32[$22_1 >> 2] = HEAP32[$22_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($19, HEAP32[18394]);
       }
       HEAP32[$2_1 + 88 >> 2] = $7_1;
       HEAP32[$2_1 + 92 >> 2] = $12_1;
      }
      $7_1 = HEAP32[$2_1 + 92 >> 2] + (HEAP32[$2_1 + 84 >> 2] << 3) | 0;
      HEAPF32[$7_1 + 4 >> 2] = $24;
      HEAPF32[$7_1 >> 2] = $23_1;
      HEAP32[$2_1 + 84 >> 2] = HEAP32[$2_1 + 84 >> 2] + 1;
      $2_1 = HEAP32[$4_1 + 580 >> 2];
      HEAPF32[$9 + 236 >> 2] = Math_fround($16_1 * $8) + $13;
      HEAPF32[$9 + 232 >> 2] = Math_fround($21_1 * $8) + $17_1;
      $392($2_1, $9 + 232 | 0, $11_1, HEAP32[$5_1 + 20560 >> 2], HEAP32[$5_1 + 20564 >> 2]);
      $2_1 = HEAP32[$4_1 + 580 >> 2];
      $389($2_1, HEAP32[$2_1 + 92 >> 2], HEAP32[$2_1 + 84 >> 2], HEAP32[($9 + 80 | 0) + ($3 << 2) >> 2]);
      HEAP32[$2_1 + 84 >> 2] = 0;
      $3 = $3 + 1 | 0;
      if (($46_1 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
    }
    $23_1 = HEAPF32[$4_1 + 68 >> 2];
    $2_1 = HEAP32[18392];
    $24 = HEAPF32[$4_1 + 72 >> 2];
    if (!(!($24 > Math_fround(0.0)) | HEAPU8[$4_1 + 8 | 0] & 128)) {
     $3 = HEAP32[$4_1 + 580 >> 2];
     $6_1 = HEAPF32[$4_1 + 20 >> 2];
     $8 = HEAPF32[$4_1 + 12 >> 2];
     HEAPF32[$9 + 236 >> 2] = HEAPF32[$4_1 + 16 >> 2] + HEAPF32[$4_1 + 24 >> 2];
     HEAPF32[$9 + 232 >> 2] = $8 + $6_1;
     $6_1 = HEAPF32[$2_1 + 5700 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$401 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$6_1;
       break label$401;
      }
      $5_1 = -2147483648;
     }
     $5_1 = $5_1 << 8;
     $6_1 = HEAPF32[$2_1 + 5696 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$403 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$6_1;
       break label$403;
      }
      $7_1 = -2147483648;
     }
     $5_1 = $7_1 | $5_1;
     $6_1 = HEAPF32[$2_1 + 5704 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$405 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$6_1;
       break label$405;
      }
      $7_1 = -2147483648;
     }
     $5_1 = $5_1 | $7_1 << 16;
     $12_1 = $9 + 232 | 0;
     $6_1 = Math_fround(HEAPF32[$2_1 + 5708 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$407 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$6_1;
       break label$407;
      }
      $7_1 = -2147483648;
     }
     $400($3, $10_1, $12_1, $5_1 | $7_1 << 24, $23_1, 0, $24);
    }
    $5_1 = HEAP8[$4_1 + 149 | 0];
    if (($5_1 | 0) != -1) {
     $3 = Math_imul($5_1, 28);
     $7_1 = $3 + 20640 | 0;
     $13 = HEAPF32[$4_1 + 16 >> 2];
     $16_1 = Math_fround(Math_fround($13 + HEAPF32[$4_1 + 24 >> 2]) + Math_fround(-1.0));
     $17_1 = HEAPF32[$4_1 + 12 >> 2];
     $21_1 = Math_fround(Math_fround($17_1 + HEAPF32[$4_1 + 20 >> 2]) + Math_fround(-1.0));
     $11_1 = Math_fround(0.0);
     $14 = Math_fround(0.0);
     $6_1 = Math_fround(0.0);
     $8 = Math_fround(0.0);
     label$410 : {
      label$411 : {
       switch ($5_1 | 0) {
       case 0:
        $11_1 = Math_fround($16_1 - $23_1);
        $14 = Math_fround($17_1 + Math_fround(0.0));
        $6_1 = Math_fround($23_1 + $13);
        $8 = $17_1;
        break label$410;
       case 1:
        $11_1 = Math_fround($16_1 - $23_1);
        $14 = Math_fround($21_1 + Math_fround(0.0));
        $6_1 = Math_fround($23_1 + $13);
        $8 = $21_1;
        break label$410;
       case 2:
        $11_1 = Math_fround($13 + Math_fround(0.0));
        $14 = Math_fround($21_1 - $23_1);
        $6_1 = $13;
        $8 = Math_fround($23_1 + $17_1);
        break label$410;
       case 3:
        break label$411;
       default:
        break label$410;
       };
      }
      $11_1 = Math_fround($16_1 + Math_fround(0.0));
      $14 = Math_fround($21_1 - $23_1);
      $6_1 = $16_1;
      $8 = Math_fround($23_1 + $17_1);
     }
     $5_1 = HEAP32[$4_1 + 580 >> 2];
     $11_1 = Math_fround($11_1 - $6_1);
     $13 = Math_fround($23_1 * HEAPF32[$7_1 + 4 >> 2]);
     HEAPF32[$9 + 236 >> 2] = Math_fround(Math_fround(Math_fround($11_1 * HEAPF32[$3 + 20652 >> 2]) + $6_1) + Math_fround(.5)) + $13;
     $16_1 = Math_fround($14 - $8);
     $17_1 = Math_fround($23_1 * HEAPF32[$7_1 >> 2]);
     HEAPF32[$9 + 232 >> 2] = Math_fround(Math_fround(Math_fround($16_1 * HEAPF32[$3 + 20648 >> 2]) + $8) + Math_fround(.5)) + $17_1;
     $7_1 = $5_1;
     $5_1 = $9 + 232 | 0;
     $14 = HEAPF32[$3 + 20664 >> 2];
     $393($7_1, $5_1, $23_1, Math_fround($14 + Math_fround(-.7853981852531433)), $14, 0);
     $7_1 = HEAP32[$4_1 + 580 >> 2];
     HEAPF32[$9 + 236 >> 2] = $13 + Math_fround(Math_fround(Math_fround($11_1 * HEAPF32[$3 + 20660 >> 2]) + $6_1) + Math_fround(.5));
     HEAPF32[$9 + 232 >> 2] = $17_1 + Math_fround(Math_fround(Math_fround($16_1 * HEAPF32[$3 + 20656 >> 2]) + $8) + Math_fround(.5));
     $393($7_1, $5_1, $23_1, $14, Math_fround($14 + Math_fround(.7853981852531433)), 0);
     $3 = HEAP32[18392];
     $6_1 = HEAPF32[$3 + 6084 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$415 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$6_1;
       break label$415;
      }
      $5_1 = -2147483648;
     }
     $5_1 = $5_1 << 8;
     $6_1 = HEAPF32[$3 + 6080 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$417 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$6_1;
       break label$417;
      }
      $7_1 = -2147483648;
     }
     $5_1 = $7_1 | $5_1;
     $6_1 = HEAPF32[$3 + 6088 >> 2];
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$419 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$6_1;
       break label$419;
      }
      $7_1 = -2147483648;
     }
     $7_1 = $5_1 | $7_1 << 16;
     $5_1 = HEAP32[$4_1 + 580 >> 2];
     $12_1 = HEAP32[$5_1 + 92 >> 2];
     $19 = HEAP32[$5_1 + 84 >> 2];
     $6_1 = Math_fround(HEAPF32[$3 + 6092 >> 2] * HEAPF32[$3 + 5416 >> 2]);
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$421 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $3 = ~~$6_1;
       break label$421;
      }
      $3 = -2147483648;
     }
     $388($5_1, $12_1, $19, $7_1 | $3 << 24, 0, $24 <= Math_fround(2.0) ? Math_fround(2.0) : $24);
     HEAP32[$5_1 + 84 >> 2] = 0;
    }
    $8 = HEAPF32[$2_1 + 5488 >> 2];
    if (!($8 > Math_fround(0.0)) | HEAP8[$4_1 + 8 | 0] & 1) {
     break label$324
    }
    $2_1 = HEAP32[18392];
    $14 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
    $3 = HEAP32[$4_1 + 728 >> 2];
    if ($3) {
     $14 = Math_fround($14 * HEAPF32[$3 + 572 >> 2])
    }
    $11_1 = HEAPF32[$4_1 + 16 >> 2];
    $6_1 = HEAPF32[$2_1 + 5480 >> 2];
    $3 = HEAP32[$4_1 + 580 >> 2];
    $13 = HEAPF32[$4_1 + 12 >> 2];
    HEAPF32[$9 + 232 >> 2] = $24 + $13;
    $6_1 = Math_fround(Math_fround($11_1 + Math_fround(Math_fround($6_1 + $6_1) + $14)) + Math_fround(-1.0));
    HEAPF32[$9 + 236 >> 2] = $6_1;
    $14 = HEAPF32[$4_1 + 20 >> 2];
    HEAPF32[$9 + 220 >> 2] = $6_1;
    HEAPF32[$9 + 216 >> 2] = Math_fround($13 + $14) - $24;
    $6_1 = HEAPF32[$2_1 + 5700 >> 2];
    $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
    label$425 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $5_1 = ~~$6_1;
      break label$425;
     }
     $5_1 = -2147483648;
    }
    $5_1 = $5_1 << 8;
    $6_1 = HEAPF32[$2_1 + 5696 >> 2];
    $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
    label$427 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $7_1 = ~~$6_1;
      break label$427;
     }
     $7_1 = -2147483648;
    }
    $5_1 = $7_1 | $5_1;
    $6_1 = HEAPF32[$2_1 + 5704 >> 2];
    $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
    label$429 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $7_1 = ~~$6_1;
      break label$429;
     }
     $7_1 = -2147483648;
    }
    $5_1 = $5_1 | $7_1 << 16;
    $7_1 = $9 + 232 | 0;
    $12_1 = $9 + 216 | 0;
    $6_1 = Math_fround(HEAPF32[$2_1 + 5708 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
    $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
    label$431 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$6_1;
      break label$431;
     }
     $2_1 = -2147483648;
    }
    $399($3, $7_1, $12_1, $5_1 | $2_1 << 24, $8);
   }
   if ($20_1) {
    HEAP32[$4_1 + 580 >> 2] = $4_1 + 584
   }
   $6_1 = HEAPF32[$4_1 + 52 >> 2];
   if ($6_1 == Math_fround(0.0)) {
    $8 = ($18_1 & 2056) == 2048 ? HEAPF32[$39_1 >> 2] : Math_fround(0.0);
    $14 = HEAPF32[$4_1 + 60 >> 2];
    $14 = Math_fround(Math_fround(HEAPF32[$4_1 + 20 >> 2] - Math_fround($14 + $14)) - HEAPF32[$4_1 + 128 >> 2]);
    $14 = $8 >= $14 ? $8 : $14;
   } else {
    $14 = $6_1
   }
   $21_1 = HEAPF32[$4_1 + 56 >> 2];
   $8 = $21_1;
   if ($8 == Math_fround(0.0)) {
    $8 = $18_1 & 8 ? Math_fround(0.0) : HEAPF32[$4_1 + 40 >> 2];
    $11_1 = HEAPF32[$4_1 + 64 >> 2];
    $11_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 24 >> 2] - Math_fround($11_1 + $11_1)) - $27_1) - HEAPF32[$4_1 + 132 >> 2]);
    $8 = $8 >= $11_1 ? $8 : $11_1;
   }
   $16_1 = HEAPF32[$4_1 + 88 >> 2];
   $11_1 = HEAPF32[$4_1 + 60 >> 2];
   $17_1 = HEAPF32[$4_1 + 72 >> 2];
   $13 = Math_fround(Math_fround(HEAPF32[$4_1 + 432 >> 2] - $16_1) + ($11_1 >= $17_1 ? $11_1 : $17_1));
   label$438 : {
    if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$13;
     break label$438;
    }
    $2_1 = -2147483648;
   }
   $24 = Math_fround($2_1 | 0);
   HEAPF32[$4_1 + 464 >> 2] = $24;
   $3 = $4_1 + 468 | 0;
   $23_1 = HEAPF32[$4_1 + 92 >> 2];
   $13 = HEAPF32[$4_1 + 64 >> 2];
   $17_1 = Math_fround(Math_fround(HEAPF32[$4_1 + 436 >> 2] - $23_1) + ($13 >= $17_1 ? $13 : $17_1));
   label$440 : {
    if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$17_1;
     break label$440;
    }
    $2_1 = -2147483648;
   }
   $17_1 = Math_fround($2_1 | 0);
   HEAPF32[$3 >> 2] = $17_1;
   HEAPF32[$4_1 + 476 >> 2] = $8 + $17_1;
   $2_1 = $4_1 + 472 | 0;
   HEAPF32[$2_1 >> 2] = $14 + $24;
   $3 = HEAP32[$4_1 + 468 >> 2];
   HEAP32[$4_1 + 480 >> 2] = HEAP32[$4_1 + 464 >> 2];
   HEAP32[$4_1 + 484 >> 2] = $3;
   $3 = HEAP32[$2_1 + 4 >> 2];
   $5_1 = $4_1 + 488 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $3;
   $8 = HEAPF32[$4_1 + 12 >> 2];
   $14 = Math_fround($11_1 + Math_fround($8 - $16_1));
   HEAPF32[$4_1 + 512 >> 2] = $14;
   $17_1 = HEAPF32[$4_1 + 16 >> 2];
   $24 = Math_fround($27_1 + Math_fround($13 + Math_fround($17_1 - $23_1)));
   HEAPF32[$4_1 + 516 >> 2] = $24;
   HEAPF32[$4_1 + 520 >> 2] = $14 + ($6_1 == Math_fround(0.0) ? Math_fround(Math_fround(HEAPF32[$4_1 + 20 >> 2] - Math_fround($11_1 + $11_1)) - HEAPF32[$4_1 + 128 >> 2]) : $6_1);
   $6_1 = $21_1 == Math_fround(0.0) ? Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 24 >> 2] - Math_fround($13 + $13)) - $27_1) - HEAPF32[$4_1 + 132 >> 2]) : $21_1;
   $44_1 = +$13 + +$17_1 - +$23_1 + +$27_1;
   $14 = Math_fround($44_1);
   HEAPF32[$4_1 + 228 >> 2] = $14;
   $3 = $4_1 + 224 | 0;
   $51_1 = +$11_1 + +$8 - +$16_1 + 0.0;
   $8 = Math_fround($51_1);
   HEAPF32[$3 >> 2] = $8;
   HEAPF32[$4_1 + 524 >> 2] = $24 + $6_1;
   $2_1 = $4_1 + 276 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 292 >> 2] = 0;
   $2_1 = $4_1 + 248 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   $2_1 = $4_1 + 256 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   $2_1 = $4_1 + 264 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAPF32[$4_1 + 272 >> 2] = Math_fround($11_1 + Math_fround(0.0)) - $16_1;
   $2_1 = HEAP32[$3 + 4 >> 2];
   $5_1 = $4_1 + 240 | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$5_1 >> 2] = $3;
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $5_1 = $4_1 + 232 | 0;
   HEAP32[$5_1 >> 2] = $3;
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $5_1 = $4_1 + 216 | 0;
   HEAP32[$5_1 >> 2] = $3;
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   HEAP32[$4_1 + 208 >> 2] = $3;
   HEAP32[$4_1 + 212 >> 2] = $2_1;
   HEAPF32[$4_1 + 288 >> 2] = $44_1 - +$14;
   HEAPF32[$4_1 + 284 >> 2] = $51_1 - +$8;
   $2_1 = $4_1 + 298 | 0;
   $3 = HEAPU16[$2_1 >> 1];
   HEAP16[$2_1 >> 1] = 0;
   HEAP8[$4_1 + 304 | 0] = 0;
   HEAP16[$4_1 + 296 >> 1] = $3;
   $6_1 = HEAPF32[$4_1 + 100 >> 2];
   HEAP8[$4_1 + 306 | 0] = 0;
   HEAP8[$4_1 + 305 | 0] = $6_1 > Math_fround(0.0);
   $2_1 = $4_1 + 316 | 0;
   $6_1 = HEAPF32[$15_1 + 5492 >> 2];
   $5_1 = 0;
   $7_1 = 0;
   if ($43_1) {
    HEAP16[$2_1 + 18 >> 1] = 0;
    HEAP16[$2_1 + 20 >> 1] = 0;
    HEAP16[$2_1 + 22 >> 1] = 0;
    HEAP16[$2_1 + 24 >> 1] = 0;
   }
   $3 = $6_1 < Math_fround(4294967296.0) & $6_1 >= Math_fround(0.0) ? ~~$6_1 >>> 0 : 0;
   $12_1 = $3;
   HEAP16[$2_1 + 8 >> 1] = $3;
   $3 = 0;
   while (1) {
    $10_1 = HEAPU16[(($3 << 1) + $2_1 | 0) + 18 >> 1];
    $5_1 = ($7_1 & 1 ? ($10_1 ? $12_1 : 0) : 0) + $5_1 | 0;
    $20_1 = ($10_1 | 0) != 0;
    label$51 : {
     label$6 : {
      switch ($3 - 1 | 0) {
      case 0:
       HEAP16[$2_1 + 12 >> 1] = $5_1;
       break label$51;
      case 1:
       HEAP16[$2_1 + 14 >> 1] = $5_1;
       break label$51;
      case 2:
       break label$6;
      default:
       break label$51;
      };
     }
     HEAP16[$2_1 + 16 >> 1] = $5_1;
    }
    $5_1 = $5_1 + $10_1 | 0;
    $7_1 = $7_1 | $20_1;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 4) {
     continue
    }
    break;
   };
   HEAP16[$2_1 + 18 >> 1] = 0;
   HEAP16[$2_1 + 20 >> 1] = 0;
   HEAP16[$2_1 + 22 >> 1] = 0;
   HEAP16[$2_1 + 24 >> 1] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$2_1 >> 2] = $5_1 & 65535;
   $2_1 = $4_1 + 344 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   $2_1 = HEAP32[$4_1 + 356 >> 2];
   label$444 : {
    if (($2_1 | 0) >= 0) {
     break label$444
    }
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0;
    $3 = ($3 | 0) > 0 ? $3 : 0;
    if (($2_1 | 0) >= ($3 | 0)) {
     break label$444
    }
    $2_1 = HEAP32[18392];
    if ($2_1) {
     $2_1 = $2_1 + 876 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
    }
    $2_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 2, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$4_1 + 360 >> 2];
    if ($5_1) {
     $1602($2_1, $5_1, HEAP32[$4_1 + 352 >> 2] << 2);
     $5_1 = HEAP32[$4_1 + 360 >> 2];
     label$447 : {
      if (!$5_1) {
       break label$447
      }
      $7_1 = HEAP32[18392];
      if (!$7_1) {
       break label$447
      }
      $7_1 = $7_1 + 876 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 356 >> 2] = $3;
    HEAP32[$4_1 + 360 >> 2] = $2_1;
   }
   HEAP32[$4_1 + 352 >> 2] = 0;
   HEAP32[$4_1 + 376 >> 2] = 1;
   HEAP32[$4_1 + 368 >> 2] = 0;
   HEAP32[$4_1 + 364 >> 2] = $4_1 + 548;
   HEAP32[$4_1 + 380 >> 2] = $26_1 ? HEAP32[$26_1 + 376 >> 2] : 1;
   HEAP32[$4_1 + 388 >> 2] = -1082130432;
   HEAPF32[$4_1 + 384 >> 2] = HEAPF32[$4_1 + 544 >> 2];
   $2_1 = HEAP32[$4_1 + 396 >> 2];
   label$449 : {
    if (($2_1 | 0) >= 0) {
     break label$449
    }
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0;
    $3 = ($3 | 0) > 0 ? $3 : 0;
    if (($2_1 | 0) >= ($3 | 0)) {
     break label$449
    }
    $2_1 = HEAP32[18392];
    if ($2_1) {
     $2_1 = $2_1 + 876 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
    }
    $2_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 2, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$4_1 + 400 >> 2];
    if ($5_1) {
     $1602($2_1, $5_1, HEAP32[$4_1 + 392 >> 2] << 2);
     $5_1 = HEAP32[$4_1 + 400 >> 2];
     label$452 : {
      if (!$5_1) {
       break label$452
      }
      $7_1 = HEAP32[18392];
      if (!$7_1) {
       break label$452
      }
      $7_1 = $7_1 + 876 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 396 >> 2] = $3;
    HEAP32[$4_1 + 400 >> 2] = $2_1;
   }
   HEAP32[$4_1 + 392 >> 2] = 0;
   $2_1 = HEAP32[$4_1 + 408 >> 2];
   label$453 : {
    if (($2_1 | 0) >= 0) {
     break label$453
    }
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0;
    $3 = ($3 | 0) > 0 ? $3 : 0;
    if (($2_1 | 0) >= ($3 | 0)) {
     break label$453
    }
    $2_1 = HEAP32[18392];
    if ($2_1) {
     $2_1 = $2_1 + 876 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
    }
    $2_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 2, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$4_1 + 412 >> 2];
    if ($5_1) {
     $1602($2_1, $5_1, HEAP32[$4_1 + 404 >> 2] << 2);
     $5_1 = HEAP32[$4_1 + 412 >> 2];
     label$456 : {
      if (!$5_1) {
       break label$456
      }
      $7_1 = HEAP32[18392];
      if (!$7_1) {
       break label$456
      }
      $7_1 = $7_1 + 876 | 0;
      HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 408 >> 2] = $3;
    HEAP32[$4_1 + 412 >> 2] = $2_1;
   }
   HEAP32[$4_1 + 404 >> 2] = 0;
   $2_1 = HEAP8[$4_1 + 164 | 0];
   if (($2_1 | 0) > 0) {
    HEAP8[$4_1 + 164 | 0] = $2_1 - 1
   }
   $2_1 = HEAP8[$4_1 + 165 | 0];
   if (($2_1 | 0) > 0) {
    HEAP8[$4_1 + 165 | 0] = $2_1 - 1
   }
   $3 = $18_1 & 1;
   label$459 : {
    if (!$37) {
     break label$459
    }
    $125($4_1);
    $2_1 = HEAP32[18392];
    $5_1 = HEAP32[$4_1 + 8 >> 2];
    if ($5_1 & 262144) {
     HEAP32[$2_1 + 7512 >> 2] = 0;
     HEAP32[$2_1 + 7516 >> 2] = 0;
     break label$459;
    }
    label$461 : {
     if (!($5_1 & 67108864 | HEAP32[$4_1 + 736 >> 2] == ($4_1 | 0))) {
      $5_1 = HEAP32[$4_1 + 756 >> 2];
      if ($5_1) {
       break label$461
      }
     }
     HEAP32[$2_1 + 7512 >> 2] = 0;
     HEAP32[$2_1 + 7516 >> 2] = 0;
     $5_1 = HEAP32[$2_1 + 7508 >> 2];
     $7_1 = HEAP32[$2_1 + 7564 >> 2];
     HEAP32[($5_1 + ($7_1 << 2) | 0) + 756 >> 2] = 0;
     $5_1 = $5_1 + ($7_1 << 4) | 0;
     $7_1 = $5_1 + 772 | 0;
     HEAP32[$7_1 >> 2] = 0;
     HEAP32[$7_1 + 4 >> 2] = 0;
     $5_1 = $5_1 + 764 | 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 7576 >> 2] = 0;
     HEAP32[$2_1 + 7580 >> 2] = 0;
     HEAP8[$2_1 + 7574 | 0] = 0;
     HEAP16[$2_1 + 7572 >> 1] = 257;
     $5_1 = $2_1 + 7584 | 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 7592 >> 2] = 0;
     break label$459;
    }
    HEAP32[$2_1 + 7516 >> 2] = 0;
    HEAP32[$2_1 + 7512 >> 2] = $5_1;
   }
   label$463 : {
    if ($3) {
     break label$463
    }
    $10_1 = HEAP32[18392];
    $19 = HEAP32[$4_1 + 8 >> 2];
    $2_1 = $19 & 32 ? 0 : HEAP32[$10_1 + 5456 >> 2] != -1;
    $17_1 = HEAPF32[$9 + 64 >> 2];
    $21_1 = HEAPF32[$4_1 + 72 >> 2];
    $8 = Math_fround(HEAPF32[$9 + 72 >> 2] - $21_1);
    $16_1 = HEAPF32[$9 + 76 >> 2];
    $14 = HEAPF32[$9 + 68 >> 2];
    $22_1 = HEAP32[$10_1 + 7216 >> 2];
    HEAP32[$10_1 + 7216 >> 2] = $22_1 | 16;
    HEAP32[$4_1 + 292 >> 2] = 1;
    $13 = HEAPF32[$10_1 + 5476 >> 2];
    $11_1 = HEAPF32[$10_1 + 6468 >> 2];
    HEAP32[$9 + 264 >> 2] = 0;
    HEAP32[$9 + 268 >> 2] = 0;
    HEAP32[$9 + 256 >> 2] = 0;
    HEAP32[$9 + 260 >> 2] = 0;
    $6_1 = $13;
    if ($1_1) {
     HEAPF32[$9 + 268 >> 2] = $14;
     $6_1 = Math_fround($13 + $11_1);
     HEAPF32[$9 + 264 >> 2] = Math_fround($8 - $6_1) - $13;
    }
    if (!(!$2_1 | HEAP32[$10_1 + 5456 >> 2] != 1)) {
     $23_1 = HEAPF32[$10_1 + 5476 >> 2];
     HEAPF32[$9 + 260 >> 2] = $14;
     $6_1 = Math_fround($11_1 + $6_1);
     HEAPF32[$9 + 256 >> 2] = Math_fround($8 - $6_1) - $23_1;
    }
    $17_1 = Math_fround($17_1 + $21_1);
    if (!(!$2_1 | !!HEAP32[$10_1 + 5456 >> 2])) {
     $21_1 = HEAPF32[$10_1 + 5476 >> 2];
     HEAPF32[$9 + 260 >> 2] = $14;
     HEAPF32[$9 + 256 >> 2] = Math_fround($17_1 + $13) - $21_1;
     $13 = Math_fround($13 + $11_1);
    }
    label$472 : {
     if (!$2_1) {
      break label$472
     }
     $5_1 = 14988;
     $12_1 = HEAP32[(HEAP32[$4_1 + 204 >> 2] + (HEAP32[$4_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
     $7_1 = $12_1;
     while (1) {
      $3 = $7_1;
      $2_1 = $5_1;
      $5_1 = $2_1 + 1 | 0;
      $7_1 = HEAPU8[$2_1 | 0];
      if ($7_1) {
       $3 = ($7_1 | 0) != 35 | HEAPU8[$5_1 | 0] != 35 ? $3 : HEAPU8[$2_1 + 2 | 0] == 35 ? $12_1 : $3;
       $3 = HEAP32[(($7_1 ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
      }
      $7_1 = $3;
      if (($2_1 | 0) != 14997) {
       continue
      }
      break;
     };
     $3 = $7_1 ^ -1;
     if (($3 | 0) == HEAP32[$10_1 + 7136 >> 2]) {
      HEAP32[$10_1 + 7140 >> 2] = $3
     }
     if (HEAP32[$10_1 + 7196 >> 2] == ($3 | 0)) {
      HEAP8[$10_1 + 7200 | 0] = 1
     }
     if (HEAP32[$10_1 + 7112 >> 2] == ($3 | 0)) {
      $75($3, 11, 14988)
     }
     $2_1 = global$0 - 48 | 0;
     global$0 = $2_1;
     $5_1 = HEAP32[18392];
     $7_1 = HEAP32[$5_1 + 7080 >> 2];
     $21_1 = HEAPF32[$5_1 + 5476 >> 2];
     $12_1 = $9 + 256 | 0;
     $23_1 = HEAPF32[$12_1 >> 2];
     $25_1 = HEAP32[$12_1 + 4 >> 2];
     $31_1 = HEAP32[$12_1 >> 2];
     $20_1 = $2_1 + 32 | 0;
     $33_1 = $20_1 + 12 | 0;
     $27_1 = HEAPF32[$5_1 + 6468 >> 2];
     $24 = HEAPF32[$5_1 + 5480 >> 2];
     HEAPF32[$33_1 >> 2] = Math_fround($27_1 + HEAPF32[$12_1 + 4 >> 2]) + Math_fround($24 + $24);
     HEAP32[$2_1 + 32 >> 2] = $31_1;
     HEAP32[$2_1 + 36 >> 2] = $25_1;
     HEAPF32[$2_1 + 40 >> 2] = Math_fround($27_1 + $23_1) + Math_fround($21_1 + $21_1);
     $213($20_1, $3, 0, 0);
     $3 = $569($20_1, $3, $2_1 + 31 | 0, $2_1 + 30 | 0, 0);
     $12_1 = $51(HEAPU8[$2_1 + 31 | 0] ? (HEAPU8[$2_1 + 30 | 0] ? 23 : 22) : 21, Math_fround(1.0));
     $20_1 = $51(0, Math_fround(1.0));
     HEAPF32[$2_1 + 24 >> 2] = Math_fround(HEAPF32[$2_1 + 36 >> 2] + HEAPF32[$33_1 >> 2]) * Math_fround(.5);
     HEAPF32[$2_1 + 20 >> 2] = Math_fround(HEAPF32[$2_1 + 32 >> 2] + HEAPF32[$2_1 + 40 >> 2]) * Math_fround(.5);
     if (HEAPU8[$2_1 + 31 | 0] | HEAPU8[$2_1 + 30 | 0]) {
      $408(HEAP32[$7_1 + 580 >> 2], $2_1 + 20 | 0, Math_fround(Math_fround(HEAPF32[$5_1 + 6468 >> 2] * Math_fround(.5)) + Math_fround(1.0)), $12_1, 12)
     }
     $12_1 = HEAP32[$7_1 + 580 >> 2];
     $21_1 = HEAPF32[$5_1 + 5476 >> 2];
     HEAPF32[$2_1 + 16 >> 2] = HEAPF32[$2_1 + 36 >> 2] + HEAPF32[$5_1 + 5480 >> 2];
     HEAPF32[$2_1 + 12 >> 2] = $21_1 + HEAPF32[$2_1 + 32 >> 2];
     $5_1 = HEAPU8[$7_1 + 141 | 0];
     $25_1 = HEAP32[$2_1 + 16 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 + 12 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $25_1;
     $476($12_1, $2_1, $20_1, $5_1 ? 1 : 3, Math_fround(1.0));
     label$21 : {
      if (!$191()) {
       break label$21
      }
      if (!$181(0, Math_fround(-1.0))) {
       break label$21
      }
      $124($7_1);
     }
     global$0 = $2_1 + 48 | 0;
     if (!$3) {
      break label$472
     }
     HEAP8[$4_1 + 142 | 0] = 1;
    }
    label$482 : {
     if (!$1_1) {
      break label$482
     }
     $5_1 = 14998;
     $12_1 = HEAP32[(HEAP32[$4_1 + 204 >> 2] + (HEAP32[$4_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
     $7_1 = $12_1;
     while (1) {
      $3 = $7_1;
      $2_1 = $5_1;
      $5_1 = $2_1 + 1 | 0;
      $7_1 = HEAPU8[$2_1 | 0];
      if ($7_1) {
       $3 = ($7_1 | 0) != 35 | HEAPU8[$5_1 | 0] != 35 ? $3 : HEAPU8[$2_1 + 2 | 0] == 35 ? $12_1 : $3;
       $3 = HEAP32[(($7_1 ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
      }
      $7_1 = $3;
      if (($2_1 | 0) != 15004) {
       continue
      }
      break;
     };
     $2_1 = $7_1 ^ -1;
     $3 = HEAP32[18392];
     if (($2_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
      HEAP32[$3 + 7140 >> 2] = $2_1
     }
     if (HEAP32[$3 + 7196 >> 2] == ($2_1 | 0)) {
      HEAP8[$3 + 7200 | 0] = 1
     }
     if (HEAP32[$3 + 7112 >> 2] == ($2_1 | 0)) {
      $75($2_1, 11, 14998)
     }
     if (!$576($2_1, $9 + 264 | 0)) {
      break label$482
     }
     HEAP8[$1_1 | 0] = 0;
    }
    HEAP32[$4_1 + 292 >> 2] = 0;
    HEAP32[$10_1 + 7216 >> 2] = $22_1;
    $1_1 = $19 & 1048576;
    $11_1 = Math_fround($11_1 * Math_fround(.800000011920929));
    $2_1 = HEAP32[18392];
    $7_1 = $0_1;
    label$492 : {
     if (($7_1 | 0) == -1) {
      break label$492
     }
     $3 = $0_1;
     while (1) {
      label$494 : {
       $5_1 = HEAPU8[$3 | 0];
       if (($5_1 | 0) != 35) {
        if ($5_1) {
         break label$494
        }
        $7_1 = $3;
        break label$492;
       }
       if (HEAPU8[$3 + 1 | 0] != 35) {
        break label$494
       }
       $7_1 = $3;
       break label$492;
      }
      $7_1 = -1;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != -1) {
       continue
      }
      break;
     };
    }
    $27_1 = $1_1 ? $11_1 : Math_fround(0.0);
    $11_1 = HEAPF32[$2_1 + 6468 >> 2];
    label$496 : {
     if (($0_1 | 0) == ($7_1 | 0)) {
      HEAPF32[$9 + 236 >> 2] = $11_1;
      HEAP32[$9 + 232 >> 2] = 0;
      break label$496;
     }
     $474($9 + 232 | 0, HEAP32[$2_1 + 6464 >> 2], $11_1, Math_fround(3402823466385288598117041.0e14), Math_fround(-1.0), $0_1, $7_1, 0);
     $11_1 = Math_fround(HEAPF32[$9 + 232 >> 2] + Math_fround(.9999899864196777));
     label$498 : {
      if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$11_1;
       break label$498;
      }
      $2_1 = -2147483648;
     }
     HEAPF32[$9 + 232 >> 2] = $2_1 | 0;
    }
    HEAPF32[$9 + 252 >> 2] = HEAPF32[$9 + 236 >> 2] + Math_fround(0.0);
    $21_1 = Math_fround($27_1 + HEAPF32[$9 + 232 >> 2]);
    HEAPF32[$9 + 248 >> 2] = $21_1;
    $11_1 = HEAPF32[$10_1 + 5476 >> 2];
    $13 = $13 > $11_1 ? Math_fround($13 + HEAPF32[$10_1 + 5500 >> 2]) : $13;
    $6_1 = $6_1 > $11_1 ? Math_fround($6_1 + HEAPF32[$10_1 + 5500 >> 2]) : $6_1;
    $2_1 = $10_1 + 5448 | 0;
    $23_1 = HEAPF32[$2_1 >> 2];
    if (!(!($23_1 > Math_fround(0.0)) | !($23_1 < Math_fround(1.0)))) {
     $11_1 = $6_1 <= $13 ? $13 : $6_1;
     $24 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $17_1) - $13) - $6_1) - $21_1);
     $32_1 = $11_1 < $24 ? $11_1 : $24;
     $11_1 = Math_fround(Math_abs(Math_fround($23_1 + Math_fround(-.5))));
     $11_1 = Math_fround(Math_fround(1.0) - Math_fround($11_1 + $11_1));
     $11_1 = Math_fround($32_1 * ($11_1 < Math_fround(0.0) ? Math_fround(0.0) : $11_1 > Math_fround(1.0) ? Math_fround(1.0) : $11_1));
     $6_1 = $6_1 >= $11_1 ? $6_1 : $11_1;
     $13 = $11_1 <= $13 ? $13 : $11_1;
    }
    HEAPF32[$9 + 244 >> 2] = $16_1;
    HEAPF32[$9 + 236 >> 2] = $14;
    $11_1 = Math_fround($8 - $6_1);
    HEAPF32[$9 + 240 >> 2] = $11_1;
    $6_1 = Math_fround($17_1 + $13);
    HEAPF32[$9 + 232 >> 2] = $6_1;
    $13 = HEAPF32[$10_1 + 5500 >> 2];
    HEAPF32[$9 + 228 >> 2] = $16_1;
    HEAPF32[$9 + 220 >> 2] = $14;
    HEAPF32[$9 + 216 >> 2] = $6_1;
    $13 = Math_fround($11_1 + $13);
    HEAPF32[$9 + 224 >> 2] = $8 > $13 ? $13 : $8;
    label$506 : {
     if (!$1_1) {
      break label$506
     }
     $8 = Math_fround($21_1 + Math_fround(Math_fround(Math_fround(Math_fround($11_1 - $6_1) - $21_1) * $23_1) + $6_1));
     $11_1 = $6_1 > $8 ? $6_1 : $8 > $11_1 ? $11_1 : $8;
     if (!($11_1 > $6_1)) {
      break label$506
     }
     $3 = HEAP32[$4_1 + 580 >> 2];
     HEAPF32[$9 + 212 >> 2] = Math_fround($14 + $16_1) * Math_fround(.5);
     $1_1 = HEAP32[18392];
     HEAPF32[$9 + 208 >> 2] = $11_1;
     $13 = HEAPF32[$1_1 + 5628 >> 2];
     $6_1 = HEAPF32[$1_1 + 5624 >> 2];
     $8 = HEAPF32[$1_1 + 5616 >> 2];
     $14 = HEAPF32[$1_1 + 5620 >> 2];
     $16_1 = HEAPF32[$1_1 + 5416 >> 2];
     $1_1 = HEAP32[$9 + 212 >> 2];
     HEAP32[$9 + 24 >> 2] = HEAP32[$9 + 208 >> 2];
     HEAP32[$9 + 28 >> 2] = $1_1;
     $14 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : $14 > Math_fround(1.0) ? Math_fround(1.0) : $14) * Math_fround(255.0)) + Math_fround(.5));
     label$507 : {
      if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
       $1_1 = ~~$14;
       break label$507;
      }
      $1_1 = -2147483648;
     }
     $1_1 = $1_1 << 8;
     $8 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
     label$509 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$8;
       break label$509;
      }
      $5_1 = -2147483648;
     }
     $1_1 = $5_1 | $1_1;
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$511 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$6_1;
       break label$511;
      }
      $5_1 = -2147483648;
     }
     $1_1 = $1_1 | $5_1 << 16;
     $7_1 = $9 + 24 | 0;
     $6_1 = Math_fround($13 * $16_1);
     $6_1 = Math_fround(Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * Math_fround(255.0)) + Math_fround(.5));
     label$513 : {
      if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$6_1;
       break label$513;
      }
      $5_1 = -2147483648;
     }
     $477($3, $7_1, $1_1 | $5_1 << 24);
     $6_1 = HEAPF32[$9 + 224 >> 2];
     $8 = Math_fround($27_1 * Math_fround(.5));
     label$515 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $1_1 = ~~$8;
       break label$515;
      }
      $1_1 = -2147483648;
     }
     $8 = Math_fround($11_1 - Math_fround($1_1 | 0));
     HEAPF32[$9 + 224 >> 2] = $6_1 < $8 ? $6_1 : $8;
    }
    $7_1 = $0_1;
    label$517 : {
     if (($7_1 | 0) == -1) {
      break label$517
     }
     $3 = $0_1;
     while (1) {
      label$519 : {
       $1_1 = HEAPU8[$3 | 0];
       if (($1_1 | 0) != 35) {
        if ($1_1) {
         break label$519
        }
        $7_1 = $3;
        break label$517;
       }
       if (HEAPU8[$3 + 1 | 0] != 35) {
        break label$519
       }
       $7_1 = $3;
       break label$517;
      }
      $7_1 = -1;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != -1) {
       continue
      }
      break;
     };
    }
    if (($0_1 | 0) == ($7_1 | 0)) {
     break label$463
    }
    $1_1 = HEAP32[18392];
    $67(HEAP32[HEAP32[$1_1 + 7080 >> 2] + 580 >> 2], $9 + 232 | 0, $9 + 240 | 0, $0_1, $7_1, $9 + 248 | 0, $2_1, $9 + 216 | 0);
    if (!HEAPU8[$1_1 + 12196 | 0]) {
     break label$463
    }
    $64($9 + 232 | 0, $0_1, $7_1);
   }
   HEAP32[$4_1 + 528 >> 2] = 0;
   $1_1 = HEAP32[$4_1 + 80 >> 2];
   $2_1 = HEAP32[$15_1 + 7216 >> 2];
   $0_1 = HEAP32[18392];
   $6_1 = HEAPF32[$0_1 + 228 >> 2];
   $8 = HEAPF32[$0_1 + 5516 >> 2];
   $3 = 0;
   label$521 : {
    if (!($6_1 >= Math_fround(HEAPF32[$9 + 64 >> 2] - $8))) {
     break label$521
    }
    $3 = $6_1 < Math_fround($8 + HEAPF32[$9 + 72 >> 2]);
    $6_1 = HEAPF32[$0_1 + 232 >> 2];
    $8 = HEAPF32[$0_1 + 5520 >> 2];
    $3 = $3 & $6_1 >= Math_fround(HEAPF32[$9 + 68 >> 2] - $8) & $6_1 < Math_fround(HEAPF32[$9 + 76 >> 2] + $8);
   }
   HEAP32[$0_1 + 7240 >> 2] = $1_1;
   HEAP32[$0_1 + 7248 >> 2] = $3;
   HEAP32[$0_1 + 7244 >> 2] = $2_1;
   $1_1 = HEAP32[$9 + 68 >> 2];
   $2_1 = $0_1 + 7252 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$9 + 64 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $1_1 = $9 + 72 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $0_1 + 7260 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $2_1;
  }
  label$522 : {
   if ($34_1) {
    $3 = HEAP32[$26_1 + 300 >> 2];
    break label$522;
   }
   $5_1 = 15005;
   $2_1 = HEAP32[(HEAP32[$4_1 + 204 >> 2] + (HEAP32[$4_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
   $7_1 = $2_1;
   while (1) {
    $3 = $7_1;
    $0_1 = $5_1;
    $5_1 = $5_1 + 1 | 0;
    $1_1 = HEAPU8[$0_1 | 0];
    if ($1_1) {
     $3 = ($1_1 | 0) != 35 | HEAPU8[$5_1 | 0] != 35 ? $3 : HEAPU8[$0_1 + 2 | 0] == 35 ? $2_1 : $3;
     $3 = HEAP32[(($1_1 ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
    }
    $7_1 = $3;
    if (($0_1 | 0) != 15016) {
     continue
    }
    break;
   };
   $3 = $7_1 ^ -1;
   $0_1 = HEAP32[18392];
   if (($3 | 0) == HEAP32[$0_1 + 7136 >> 2]) {
    HEAP32[$0_1 + 7140 >> 2] = $3
   }
   if (($3 | 0) == HEAP32[$0_1 + 7196 >> 2]) {
    HEAP8[$0_1 + 7200 | 0] = 1
   }
   if (($3 | 0) == HEAP32[$0_1 + 7112 >> 2]) {
    $75($3, 11, 15005)
   }
  }
  HEAP32[$4_1 + 300 >> 2] = $3;
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  $5_1 = HEAP32[$0_1 + 580 >> 2];
  $1_1 = HEAP32[$4_1 + 452 >> 2];
  $7_1 = HEAP32[$4_1 + 448 >> 2];
  HEAP32[$9 + 232 >> 2] = $7_1;
  HEAP32[$9 + 236 >> 2] = $1_1;
  $3 = $4_1 + 456 | 0;
  $2_1 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$9 + 216 >> 2] = $2_1;
  HEAP32[$9 + 220 >> 2] = $3;
  HEAP32[$9 + 16 >> 2] = $7_1;
  HEAP32[$9 + 20 >> 2] = $1_1;
  HEAP32[$9 + 8 >> 2] = $2_1;
  HEAP32[$9 + 12 >> 2] = $3;
  $378($5_1, $9 + 16 | 0, $9 + 8 | 0, 1);
  $1_1 = HEAP32[$0_1 + 580 >> 2];
  $1_1 = ((HEAP32[$1_1 + 60 >> 2] << 4) + HEAP32[$1_1 + 68 >> 2] | 0) - 16 | 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $3 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = HEAP32[$1_1 + 12 >> 2];
  $7_1 = $0_1 + 504 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$1_1 + 8 >> 2];
  HEAP32[$7_1 + 4 >> 2] = $5_1;
  HEAP32[$0_1 + 496 >> 2] = $2_1;
  HEAP32[$0_1 + 500 >> 2] = $3;
  HEAP8[$4_1 + 140 | 0] = 0;
  HEAP16[$4_1 + 150 >> 1] = HEAPU16[$4_1 + 150 >> 1] + 1;
  HEAP32[$15_1 + 7300 >> 2] = 0;
  if (!$41_1) {
   label$534 : {
    if (!$34_1) {
     break label$534
    }
    label$535 : {
     if ($18_1 & 64 | HEAP8[$4_1 + 164 | 0] > 0 | HEAP8[$4_1 + 165 | 0] > 0) {
      break label$535
     }
     $2_1 = !(HEAPF32[$4_1 + 416 >> 2] >= HEAPF32[$4_1 + 424 >> 2] | HEAPF32[$4_1 + 420 >> 2] >= HEAPF32[$4_1 + 428 >> 2]);
     $1_1 = 0;
     label$536 : {
      if (!($18_1 & 8388608)) {
       break label$536
      }
      $1_1 = 0;
      if (!HEAPU8[$15_1 + 7572 | 0]) {
       break label$536
      }
      $0_1 = HEAP32[$15_1 + 7508 >> 2];
      $1_1 = 0;
      if (!$0_1) {
       break label$536
      }
      $1_1 = HEAP32[$0_1 + 748 >> 2] == HEAP32[$4_1 + 748 >> 2];
     }
     if ($2_1 | ($1_1 | HEAPU8[$15_1 + 12196 | 0])) {
      break label$535
     }
     HEAP8[$4_1 + 172 | 0] = 1;
    }
    if (!$26_1) {
     break label$534
    }
    $0_1 = HEAPU8[$26_1 + 141 | 0];
    if (!(!$0_1 & HEAP8[$26_1 + 172 | 0] <= 0)) {
     HEAP8[$4_1 + 172 | 0] = 1
    }
    if (!$0_1 & HEAP8[$26_1 + 173 | 0] <= 0) {
     break label$534
    }
    HEAP8[$4_1 + 173 | 0] = 1;
   }
   if (HEAPF32[$15_1 + 5416 >> 2] <= Math_fround(0.0)) {
    HEAP8[$4_1 + 172 | 0] = 1
   }
   $0_1 = HEAP8[$4_1 + 173 | 0] > 0 | HEAP8[$4_1 + 172 | 0] > 0;
   HEAP8[$4_1 + 145 | 0] = $0_1 | HEAP8[$4_1 + 174 | 0] > 0;
   $1_1 = HEAP8[$4_1 + 175 | 0];
   if (($1_1 | 0) > 0) {
    HEAP8[$4_1 + 175 | 0] = $1_1 - 1;
    HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2] | 786944;
   }
   label$547 : {
    if (!HEAPU8[$4_1 + 141 | 0]) {
     $1_1 = 0;
     if (($0_1 ^ -1) & HEAPU8[$4_1 + 138 | 0] != 0) {
      break label$547
     }
    }
    $1_1 = 0;
    if (HEAP8[$4_1 + 164 | 0] > 0) {
     break label$547
    }
    $1_1 = 0;
    if (HEAP8[$4_1 + 165 | 0] > 0) {
     break label$547
    }
    $1_1 = HEAP8[$4_1 + 173 | 0] <= 0;
   }
   HEAP8[$4_1 + 143 | 0] = $1_1;
  }
  global$0 = $9 + 272 | 0;
  return !HEAPU8[$4_1 + 143 | 0];
 }
 
 function $144($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = HEAP32[18392];
  if ($0_1) {
   if (HEAP8[$0_1 + 11 | 0] & 1) {
    while (1) {
     $0_1 = HEAP32[$0_1 + 728 >> 2];
     if (HEAP8[$0_1 + 11 | 0] & 1) {
      continue
     }
     break;
    };
    $3 = 0;
   } else {
    $3 = -1
   }
   $0_1 = $3 + HEAP16[$0_1 + 156 >> 1] | 0;
  } else {
   $0_1 = HEAP32[$1_1 + 7020 >> 2] - 1 | 0
  }
  label$6 : {
   if (($0_1 | 0) < 0) {
    break label$6
   }
   $3 = HEAP32[$1_1 + 7028 >> 2];
   while (1) {
    $1_1 = $0_1;
    $0_1 = HEAP32[$3 + ($0_1 << 2) >> 2];
    if (!(!$0_1 | !HEAPU8[$0_1 + 139 | 0] | (HEAP32[$0_1 + 8 >> 2] & 262656) == 262656)) {
     $2_1 = HEAP32[$0_1 + 752 >> 2];
     if (!$2_1) {
      $2_1 = $0_1;
      break label$6;
     }
     if (HEAPU8[$2_1 + 139 | 0]) {
      break label$6
     }
     $2_1 = $0_1;
     break label$6;
    }
    $0_1 = $1_1 - 1 | 0;
    if (($1_1 | 0) > 0) {
     continue
    }
    break;
   };
  }
  $125($2_1);
 }
 
 function $145($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[18392];
  HEAP32[$2_1 + 7300 >> 2] = HEAP32[$2_1 + 7300 >> 2] | 2;
  $3 = HEAP32[$0_1 + 4 >> 2];
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$2_1 + 7308 >> 2] = $1_1 >>> 0 <= 1 ? 1 : $1_1;
  $1_1 = $2_1 + 7332 | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  HEAP32[$1_1 + 4 >> 2] = $3;
 }
 
 function $147($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = HEAP32[18392];
  $2_1 = $2_1 & 16777216;
  $6_1 = $2_1 >>> 24 | 0;
  $3 = ($6_1 | 0) == HEAPU8[$0_1 + 147 | 0];
  if (!($3 & ($1_1 ^ -1) | $2_1)) {
   $2_1 = HEAP32[$4_1 + 7020 >> 2];
   $1_1 = HEAP32[$4_1 + 7024 >> 2];
   label$2 : {
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$2
    }
    $3 = $2_1 + 1 | 0;
    $5_1 = $1_1;
    if ($1_1) {
     $2_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $2_1 = 8
    }
    $1_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
    if (($5_1 | 0) >= ($1_1 | 0)) {
     break label$2
    }
    $2_1 = $1_1 << 2;
    if ($4_1) {
     $3 = $4_1 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $2_1 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
    $3 = HEAP32[$4_1 + 7028 >> 2];
    if ($3) {
     $1602($2_1, $3, HEAP32[$4_1 + 7020 >> 2] << 2);
     $3 = HEAP32[$4_1 + 7028 >> 2];
     label$7 : {
      if (!$3) {
       break label$7
      }
      $5_1 = HEAP32[18392];
      if (!$5_1) {
       break label$7
      }
      $5_1 = $5_1 + 876 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
    }
    HEAP32[$4_1 + 7024 >> 2] = $1_1;
    HEAP32[$4_1 + 7028 >> 2] = $2_1;
   }
   HEAP32[HEAP32[$4_1 + 7028 >> 2] + (HEAP32[$4_1 + 7020 >> 2] << 2) >> 2] = $0_1;
   $1_1 = HEAP32[$4_1 + 7020 >> 2];
   HEAP32[$4_1 + 7020 >> 2] = $1_1 + 1;
   HEAP16[$0_1 + 156 >> 1] = $1_1;
   HEAP8[$0_1 + 147 | 0] = $6_1;
   return;
  }
  if (!($3 | ($1_1 | !$2_1))) {
   $5_1 = $4_1 + 7028 | 0;
   $2_1 = HEAP32[$5_1 >> 2];
   $1_1 = HEAP16[$0_1 + 156 >> 1] + 1 | 0;
   $3 = HEAP32[$4_1 + 7020 >> 2];
   if (($1_1 | 0) < ($3 | 0)) {
    while (1) {
     $7_1 = HEAP32[$2_1 + ($1_1 << 2) >> 2];
     HEAP16[$7_1 + 156 >> 1] = HEAPU16[$7_1 + 156 >> 1] - 1;
     $1_1 = $1_1 + 1 | 0;
     if (($3 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    }
   }
   $1_1 = HEAP32[$5_1 >> 2] + (HEAP16[$0_1 + 156 >> 1] << 2) | 0;
   $1603($1_1, $1_1 + 4 | 0, $3 + (($1_1 - $2_1 ^ -1) >>> 2 | 0) << 2);
   HEAP32[$4_1 + 7020 >> 2] = HEAP32[$4_1 + 7020 >> 2] - 1;
   HEAP16[$0_1 + 156 >> 1] = 65535;
  }
  HEAP8[$0_1 + 147 | 0] = $6_1;
 }
 
 function $148($0_1, $1_1, $2_1) {
  var $3 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0);
  label$1 : {
   if (!(!(!HEAPU8[$0_1 + 141 | 0] | HEAP8[$0_1 + 164 | 0] > 0) & HEAP8[$0_1 + 165 | 0] <= 0)) {
    if (HEAPU8[$0_1 + 173 | 0] | !HEAPU8[$0_1 + 145 | 0] | HEAP8[$0_1 + 172 | 0] <= 0) {
     break label$1
    }
   }
   $4_1 = HEAP32[$0_1 + 40 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 36 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $4_1;
   $1_1 = HEAP32[$0_1 + 48 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 + 44 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   return;
  }
  $3 = HEAPF32[$0_1 + 52 >> 2];
  if ($3 == Math_fround(0.0)) {
   $3 = Math_fround(HEAPF32[$0_1 + 232 >> 2] - HEAPF32[$0_1 + 224 >> 2]);
   label$5 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$3;
     break label$5;
    }
    $4_1 = -2147483648;
   }
   $3 = Math_fround($4_1 | 0);
  }
  HEAPF32[$1_1 >> 2] = $3;
  $3 = HEAPF32[$0_1 + 56 >> 2];
  if ($3 == Math_fround(0.0)) {
   $3 = Math_fround(HEAPF32[$0_1 + 236 >> 2] - HEAPF32[$0_1 + 228 >> 2]);
   label$8 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$3;
     break label$8;
    }
    $4_1 = -2147483648;
   }
   $3 = Math_fround($4_1 | 0);
  }
  HEAPF32[$1_1 + 4 >> 2] = $3;
  $3 = HEAPF32[$0_1 + 52 >> 2];
  if ($3 == Math_fround(0.0)) {
   $3 = HEAPF32[$0_1 + 232 >> 2];
   $5_1 = HEAPF32[$0_1 + 240 >> 2];
   $3 = Math_fround(($3 >= $5_1 ? $3 : $5_1) - HEAPF32[$0_1 + 224 >> 2]);
   label$11 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$3;
     break label$11;
    }
    $1_1 = -2147483648;
   }
   $3 = Math_fround($1_1 | 0);
  }
  HEAPF32[$2_1 >> 2] = $3;
  $3 = HEAPF32[$0_1 + 56 >> 2];
  if ($3 == Math_fround(0.0)) {
   $3 = HEAPF32[$0_1 + 236 >> 2];
   $5_1 = HEAPF32[$0_1 + 244 >> 2];
   $3 = Math_fround(($3 >= $5_1 ? $3 : $5_1) - HEAPF32[$0_1 + 228 >> 2]);
   label$14 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$3;
     break label$14;
    }
    $0_1 = -2147483648;
   }
   $3 = Math_fround($0_1 | 0);
  }
  HEAPF32[$2_1 + 4 >> 2] = $3;
 }
 
 function $149($0_1, $1_1, $2_1) {
  var $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0);
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $6_1 = HEAP32[18392];
  $9 = HEAP32[$1_1 + 8 >> 2];
  if (!($9 & 1)) {
   $4_1 = Math_fround(HEAPF32[$6_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
   $5_1 = HEAP32[$1_1 + 728 >> 2];
   if ($5_1) {
    $4_1 = Math_fround($4_1 * HEAPF32[$5_1 + 572 >> 2])
   }
   $3 = HEAPF32[$6_1 + 5480 >> 2];
   $4_1 = Math_fround(Math_fround($3 + $3) + $4_1);
  }
  $3 = $4_1;
  $4_1 = Math_fround(0.0);
  if ($9 & 1024) {
   $4_1 = Math_fround(HEAPF32[$6_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
   $10_1 = HEAPF32[$1_1 + 312 >> 2];
   $5_1 = HEAP32[$1_1 + 728 >> 2];
   if ($5_1) {
    $4_1 = Math_fround($4_1 * HEAPF32[$5_1 + 572 >> 2])
   }
   $11_1 = HEAPF32[$6_1 + 5480 >> 2];
   $4_1 = Math_fround(Math_fround($11_1 + $11_1) + Math_fround($10_1 + $4_1));
  }
  $14 = Math_fround($3 + $4_1);
  $3 = HEAPF32[$1_1 - -64 >> 2];
  $15_1 = Math_fround($3 + $3);
  $12_1 = Math_fround($14 + Math_fround($15_1 + HEAPF32[$2_1 + 4 >> 2]));
  $3 = HEAPF32[$1_1 + 60 >> 2];
  $10_1 = Math_fround($3 + $3);
  $13 = Math_fround(Math_fround($10_1 + HEAPF32[$2_1 >> 2]) + Math_fround(0.0));
  label$7 : {
   if ($9 & 33554432) {
    HEAPF32[$0_1 + 4 >> 2] = $12_1;
    HEAPF32[$0_1 >> 2] = $13;
    break label$7;
   }
   $16_1 = HEAP32[HEAP32[$6_1 + 7504 >> 2] >> 2];
   $11_1 = HEAPF32[$16_1 + 16 >> 2];
   $17_1 = HEAPF32[$6_1 + 5596 >> 2];
   $7_1 = HEAPF32[$6_1 + 5444 >> 2];
   $3 = HEAPF32[$6_1 + 5440 >> 2];
   $5_1 = $9 & 335544320;
   $4_1 = $5_1 ? ($3 < Math_fround(4.0) ? $3 : Math_fround(4.0)) : $3;
   $3 = HEAPF32[$6_1 + 5592 >> 2];
   $3 = Math_fround(HEAPF32[$16_1 + 12 >> 2] - Math_fround($3 + $3));
   $3 = $3 <= $4_1 ? $4_1 : $3;
   $4_1 = $4_1 > $13 ? $4_1 : $3 < $13 ? $3 : $13;
   HEAPF32[$0_1 >> 2] = $4_1;
   $7_1 = $5_1 ? ($7_1 < Math_fround(4.0) ? $7_1 : Math_fround(4.0)) : $7_1;
   $3 = Math_fround($11_1 - Math_fround($17_1 + $17_1));
   $3 = $3 <= $7_1 ? $7_1 : $3;
   $3 = $7_1 > $12_1 ? $7_1 : $3 < $12_1 ? $3 : $12_1;
   HEAPF32[$0_1 + 4 >> 2] = $3;
   $150($8 + 8 | 0, $1_1, $0_1);
   label$9 : {
    if (HEAPF32[$2_1 >> 2] > Math_fround(HEAPF32[$8 + 8 >> 2] - $10_1)) {
     $5_1 = 1;
     if ((HEAP32[$1_1 + 8 >> 2] & 2056) == 2048) {
      break label$9
     }
    }
    $5_1 = HEAPU8[$1_1 + 9 | 0] >>> 7 | 0;
   }
   label$11 : {
    if (HEAPF32[$2_1 + 4 >> 2] > Math_fround(Math_fround(HEAPF32[$8 + 12 >> 2] - $15_1) - $14)) {
     $2_1 = 1;
     if (!(HEAPU8[$1_1 + 8 | 0] & 8)) {
      break label$11
     }
    }
    $2_1 = (HEAPU8[$1_1 + 9 | 0] & 64) >>> 6 | 0;
   }
   if ($5_1) {
    HEAPF32[$0_1 + 4 >> 2] = $3 + HEAPF32[$6_1 + 5532 >> 2]
   }
   if (!$2_1) {
    break label$7
   }
   HEAPF32[$0_1 >> 2] = $4_1 + HEAPF32[$6_1 + 5532 >> 2];
  }
  global$0 = $8 + 16 | 0;
 }
 
 function $150($0_1, $1_1, $2_1) {
  var $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8 = HEAP32[18392];
  $5_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  if (HEAPU8[$8 + 7300 | 0] & 16) {
   $2_1 = $8 + 7372 | 0;
   $9 = HEAPF32[$8 + 7364 >> 2];
   label$2 : {
    label$3 : {
     $6_1 = HEAPF32[$8 + 7360 >> 2];
     if (!($6_1 >= Math_fround(0.0))) {
      break label$3
     }
     $4_1 = HEAPF32[$8 + 7368 >> 2];
     if (!($4_1 >= Math_fround(0.0))) {
      break label$3
     }
     $3 = HEAPF32[$0_1 >> 2];
     $11_1 = $3 < $6_1 ? $6_1 : $4_1 < $3 ? $4_1 : $3;
     break label$2;
    }
    $11_1 = HEAPF32[$1_1 + 28 >> 2];
   }
   $4_1 = HEAPF32[$2_1 >> 2];
   HEAPF32[$0_1 >> 2] = $11_1;
   label$4 : {
    if (!(!($9 >= Math_fround(0.0)) | !($4_1 >= Math_fround(0.0)))) {
     $3 = HEAPF32[$0_1 + 4 >> 2];
     $3 = $3 < $9 ? $9 : $4_1 < $3 ? $4_1 : $3;
     break label$4;
    }
    $3 = HEAPF32[$1_1 + 32 >> 2];
   }
   HEAPF32[$0_1 + 4 >> 2] = $3;
   $10_1 = HEAP32[$8 + 7376 >> 2];
   if ($10_1) {
    $2_1 = $7_1 + 24 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $12_1 = $7_1 + 16 | 0;
    $5_1 = $12_1;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$7_1 + 8 >> 2] = 0;
    HEAP32[$7_1 + 12 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = HEAP32[$8 + 7380 >> 2];
    $5_1 = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$7_1 + 8 >> 2] = HEAP32[$1_1 + 12 >> 2];
    HEAP32[$7_1 + 12 >> 2] = $5_1;
    $5_1 = HEAP32[$1_1 + 32 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$1_1 + 28 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $5_1;
    FUNCTION_TABLE[$10_1 | 0]($7_1 + 4 | 0);
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $5_1;
   }
   $3 = HEAPF32[$0_1 >> 2];
   label$7 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$3;
     break label$7;
    }
    $2_1 = -2147483648;
   }
   HEAPF32[$0_1 >> 2] = $2_1 | 0;
   $3 = HEAPF32[$0_1 + 4 >> 2];
   label$9 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$3;
     break label$9;
    }
    $2_1 = -2147483648;
   }
   HEAPF32[$0_1 + 4 >> 2] = $2_1 | 0;
  }
  $10_1 = HEAP32[$1_1 + 8 >> 2];
  if (!($10_1 & 16777280)) {
   $4_1 = Math_fround(0.0);
   if ($10_1 & 1) {
    $3 = $4_1
   } else {
    $5_1 = HEAP32[18392];
    $4_1 = Math_fround(HEAPF32[$5_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
    $2_1 = HEAP32[$1_1 + 728 >> 2];
    if ($2_1) {
     $4_1 = Math_fround($4_1 * HEAPF32[$2_1 + 572 >> 2])
    }
    $3 = HEAPF32[$5_1 + 5480 >> 2];
    $3 = Math_fround(Math_fround($3 + $3) + $4_1);
   }
   $11_1 = Math_fround(0.0);
   if ($10_1 & 1024) {
    $2_1 = HEAP32[18392];
    $4_1 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
    $9 = HEAPF32[$1_1 + 312 >> 2];
    $1_1 = HEAP32[$1_1 + 728 >> 2];
    if ($1_1) {
     $4_1 = Math_fround($4_1 * HEAPF32[$1_1 + 572 >> 2])
    }
    $6_1 = HEAPF32[$2_1 + 5480 >> 2];
    $11_1 = Math_fround(Math_fround($6_1 + $6_1) + Math_fround($9 + $4_1));
   }
   $9 = HEAPF32[$8 + 5440 >> 2];
   $6_1 = HEAPF32[$0_1 + 4 >> 2];
   $4_1 = HEAPF32[$8 + 5444 >> 2];
   $6_1 = $4_1 <= $6_1 ? $6_1 : $4_1;
   HEAPF32[$0_1 + 4 >> 2] = $6_1;
   $4_1 = HEAPF32[$0_1 >> 2];
   HEAPF32[$0_1 >> 2] = $4_1 >= $9 ? $4_1 : $9;
   $4_1 = Math_fround($3 + $11_1);
   $3 = Math_fround(HEAPF32[$8 + 5432 >> 2] + Math_fround(-1.0));
   $3 = Math_fround($4_1 + ($3 <= Math_fround(0.0) ? Math_fround(0.0) : $3));
   HEAPF32[$0_1 + 4 >> 2] = $3 <= $6_1 ? $6_1 : $3;
  }
  global$0 = $7_1 + 32 | 0;
 }
 
 function $151($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0);
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $7_1 = HEAP32[18392];
  $3 = HEAP32[HEAP32[$7_1 + 7504 >> 2] >> 2];
  $5_1 = HEAPF32[$3 + 12 >> 2];
  $8 = HEAPF32[$3 + 4 >> 2];
  $11_1 = $2_1 + 44 | 0;
  $4_1 = HEAPF32[$3 + 8 >> 2];
  $6_1 = Math_fround($4_1 + HEAPF32[$3 + 16 >> 2]);
  HEAPF32[$11_1 >> 2] = $6_1;
  HEAPF32[$2_1 + 36 >> 2] = $4_1;
  HEAPF32[$2_1 + 32 >> 2] = $8;
  $9 = Math_fround($8 + $5_1);
  HEAPF32[$2_1 + 40 >> 2] = $9;
  $5_1 = HEAPF32[$7_1 + 5592 >> 2];
  $12_1 = $6_1;
  $10_1 = HEAPF32[$7_1 + 5596 >> 2];
  $6_1 = Math_fround($10_1 + $10_1) < Math_fround($6_1 - $4_1) ? Math_fround(-$10_1) : Math_fround(0.0);
  HEAPF32[$11_1 >> 2] = $12_1 + $6_1;
  $5_1 = Math_fround($5_1 + $5_1) < Math_fround($9 - $8) ? Math_fround(-$5_1) : Math_fround(0.0);
  HEAPF32[$2_1 + 40 >> 2] = $9 + $5_1;
  HEAPF32[$2_1 + 36 >> 2] = $4_1 - $6_1;
  HEAPF32[$2_1 + 32 >> 2] = $8 - $5_1;
  $3 = HEAP32[$1_1 + 8 >> 2];
  label$1 : {
   if ($3 & 268435456) {
    $3 = HEAP32[(HEAP32[$7_1 + 7052 >> 2] + Math_imul(HEAP32[$7_1 + 7044 >> 2], 84) | 0) - 168 >> 2];
    $5_1 = HEAPF32[$7_1 + 5500 >> 2];
    $7_1 = $2_1 + 24 | 0;
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    HEAP32[$2_1 + 16 >> 2] = 0;
    HEAP32[$2_1 + 20 >> 2] = 0;
    label$3 : {
     if (HEAPU8[$3 + 306 | 0]) {
      $8 = Math_fround(-3402823466385288598117041.0e14);
      $5_1 = Math_fround(3402823466385288598117041.0e14);
      $6_1 = HEAPF32[$3 + 508 >> 2];
      $4_1 = HEAPF32[$3 + 500 >> 2];
      break label$3;
     }
     $6_1 = HEAPF32[$3 + 12 >> 2];
     $8 = Math_fround($5_1 + $6_1);
     $5_1 = Math_fround(Math_fround(Math_fround($6_1 + HEAPF32[$3 + 20 >> 2]) - $5_1) - HEAPF32[$3 + 128 >> 2]);
     $6_1 = Math_fround(3402823466385288598117041.0e14);
     $4_1 = Math_fround(-3402823466385288598117041.0e14);
    }
    HEAPF32[$2_1 + 28 >> 2] = $6_1;
    HEAPF32[$2_1 + 24 >> 2] = $5_1;
    HEAPF32[$2_1 + 20 >> 2] = $4_1;
    HEAPF32[$2_1 + 16 >> 2] = $8;
    $220($0_1, $1_1 + 12 | 0, $1_1 + 20 | 0, $1_1 + 168 | 0, $2_1 + 32 | 0, $2_1 + 16 | 0, 0);
    break label$1;
   }
   if ($3 & 67108864) {
    $8 = HEAPF32[$1_1 + 12 >> 2];
    $3 = $2_1 + 16 | 0;
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    HEAPF32[$3 + 12 >> 2] = $4_1 + Math_fround(1.0);
    HEAPF32[$2_1 + 24 >> 2] = $8 + Math_fround(1.0);
    HEAPF32[$2_1 + 16 >> 2] = $8 + Math_fround(-1.0);
    HEAPF32[$2_1 + 20 >> 2] = $4_1 + Math_fround(-1.0);
    $220($0_1, $1_1 + 12 | 0, $1_1 + 20 | 0, $1_1 + 168 | 0, $2_1 + 32 | 0, $3, 0);
    break label$1;
   }
   if ($3 & 33554432) {
    $4_1 = HEAPF32[$7_1 + 5600 >> 2];
    $140($2_1 + 8 | 0);
    $3 = $2_1 + 24 | 0;
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$2_1 + 16 >> 2] = 0;
    HEAP32[$2_1 + 20 >> 2] = 0;
    label$7 : {
     if (!(HEAPU8[$7_1 + 8 | 0] & 4 | (HEAPU8[$7_1 + 7570 | 0] | !HEAPU8[$7_1 + 7571 | 0]))) {
      $8 = HEAPF32[$2_1 + 8 >> 2];
      $5_1 = Math_fround($8 + Math_fround(16.0));
      $4_1 = HEAPF32[$2_1 + 12 >> 2];
      $6_1 = Math_fround($4_1 + Math_fround(8.0));
      break label$7;
     }
     $4_1 = Math_fround($4_1 * Math_fround(24.0));
     $8 = HEAPF32[$2_1 + 8 >> 2];
     $5_1 = Math_fround($4_1 + $8);
     $6_1 = $4_1;
     $4_1 = HEAPF32[$2_1 + 12 >> 2];
     $6_1 = Math_fround($6_1 + $4_1);
    }
    HEAPF32[$2_1 + 28 >> 2] = $6_1;
    HEAPF32[$2_1 + 24 >> 2] = $5_1;
    HEAPF32[$2_1 + 20 >> 2] = $4_1 + Math_fround(-8.0);
    HEAPF32[$2_1 + 16 >> 2] = $8 + Math_fround(-16.0);
    $220($0_1, $2_1 + 8 | 0, $1_1 + 20 | 0, $1_1 + 168 | 0, $2_1 + 32 | 0, $2_1 + 16 | 0, 2);
    break label$1;
   }
   $7_1 = HEAP32[$1_1 + 16 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $7_1;
  }
  global$0 = $2_1 + 48 | 0;
 }
 
 function $153($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = $0_1;
  $7_1 = HEAP32[18392];
  $3 = HEAP32[$7_1 + 7080 >> 2];
  $6_1 = HEAP32[((HEAP32[$3 + 196 >> 2] << 2) + HEAP32[$3 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
  $1_1 = $6_1;
  while (1) {
   $2_1 = $5_1;
   $5_1 = $2_1 + 1 | 0;
   $4_1 = HEAPU8[$2_1 | 0];
   if ($4_1) {
    if (!(($4_1 | 0) != 35 | HEAPU8[$5_1 | 0] != 35)) {
     $1_1 = HEAPU8[$2_1 + 2 | 0] == 35 ? $6_1 : $1_1
    }
    $1_1 = HEAP32[(($4_1 ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
   }
   if ($4_1) {
    continue
   }
   break;
  };
  $5_1 = $1_1 ^ -1;
  if (($5_1 | 0) == HEAP32[$7_1 + 7112 >> 2]) {
   $75($5_1, 11, $0_1)
  }
  $1_1 = HEAP32[$3 + 196 >> 2];
  $0_1 = HEAP32[$3 + 200 >> 2];
  label$8 : {
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$8
   }
   $2_1 = $1_1 + 1 | 0;
   $6_1 = $0_1;
   if ($0_1) {
    $1_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0
   } else {
    $1_1 = 8
   }
   $0_1 = ($1_1 | 0) > ($2_1 | 0) ? $1_1 : $2_1;
   if (($6_1 | 0) >= ($0_1 | 0)) {
    break label$8
   }
   $1_1 = $0_1 << 2;
   $2_1 = HEAP32[18392];
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
   }
   $1_1 = FUNCTION_TABLE[HEAP32[18314]]($1_1, HEAP32[18394]) | 0;
   $2_1 = HEAP32[$3 + 204 >> 2];
   if ($2_1) {
    $1602($1_1, $2_1, HEAP32[$3 + 196 >> 2] << 2);
    $2_1 = HEAP32[$3 + 204 >> 2];
    label$13 : {
     if (!$2_1) {
      break label$13
     }
     $4_1 = HEAP32[18392];
     if (!$4_1) {
      break label$13
     }
     $4_1 = $4_1 + 876 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   }
   HEAP32[$3 + 200 >> 2] = $0_1;
   HEAP32[$3 + 204 >> 2] = $1_1;
  }
  HEAP32[HEAP32[$3 + 204 >> 2] + (HEAP32[$3 + 196 >> 2] << 2) >> 2] = $5_1;
  HEAP32[$3 + 196 >> 2] = HEAP32[$3 + 196 >> 2] + 1;
 }
 
 function $154($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0);
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  if ($1_1 & 1) {
   $9 = HEAP32[18392];
   $6_1 = HEAP32[$9 + 60 >> 2];
   if (($6_1 | 0) >= 0) {
    $5_1 = HEAPU8[($9 + $6_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
   } else {
    $5_1 = $7_1
   }
   $8 = $5_1;
   $6_1 = HEAP32[$9 + 56 >> 2];
   if (($6_1 | 0) >= 0) {
    $5_1 = HEAPU8[($9 + $6_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
   } else {
    $5_1 = $7_1
   }
   $10_1 = $5_1;
   $6_1 = HEAP32[$9 + 68 >> 2];
   if (($6_1 | 0) >= 0) {
    $5_1 = HEAPU8[($9 + $6_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
   } else {
    $5_1 = $7_1
   }
   $8 = Math_fround($8 - $10_1);
   $6_1 = HEAP32[$9 - -64 >> 2];
   if (($6_1 | 0) >= 0) {
    $7_1 = HEAPU8[($9 + $6_1 | 0) + 256 | 0] ? Math_fround(1.0) : Math_fround(0.0)
   }
   HEAPF32[$0_1 >> 2] = $8 + Math_fround(0.0);
   HEAPF32[$0_1 + 4 >> 2] = Math_fround($5_1 - $7_1) + Math_fround(0.0);
  }
  if ($1_1 & 2) {
   $7_1 = $333(17, $2_1);
   $8 = $333(16, $2_1);
   $10_1 = $333(19, $2_1);
   $5_1 = $333(18, $2_1);
   HEAPF32[$0_1 >> 2] = Math_fround($7_1 - $8) + HEAPF32[$0_1 >> 2];
   HEAPF32[$0_1 + 4 >> 2] = Math_fround($10_1 - $5_1) + HEAPF32[$0_1 + 4 >> 2];
  }
  if ($1_1 & 4) {
   $7_1 = $333(5, $2_1);
   $8 = $333(4, $2_1);
   $10_1 = $333(7, $2_1);
   $5_1 = $333(6, $2_1);
   HEAPF32[$0_1 >> 2] = Math_fround($7_1 - $8) + HEAPF32[$0_1 >> 2];
   HEAPF32[$0_1 + 4 >> 2] = Math_fround($10_1 - $5_1) + HEAPF32[$0_1 + 4 >> 2];
  }
  if ($1_1 & 8) {
   $7_1 = $333(9, $2_1);
   $8 = $333(8, $2_1);
   $10_1 = $333(11, $2_1);
   $5_1 = $333(10, $2_1);
   HEAPF32[$0_1 >> 2] = Math_fround($7_1 - $8) + HEAPF32[$0_1 >> 2];
   HEAPF32[$0_1 + 4 >> 2] = Math_fround($10_1 - $5_1) + HEAPF32[$0_1 + 4 >> 2];
  }
  if (!(!(HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0)) | $3 == Math_fround(0.0))) {
   HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] * $3;
   HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$0_1 + 4 >> 2] * $3;
  }
  if (!(!(HEAPF32[HEAP32[18392] + 828 >> 2] > Math_fround(0.0)) | $4_1 == Math_fround(0.0))) {
   HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] * $4_1;
   HEAPF32[$0_1 + 4 >> 2] = HEAPF32[$0_1 + 4 >> 2] * $4_1;
  }
 }
 
 function $155($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = 0;
  $8 = HEAP32[$1_1 + 92 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 88 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $8;
  $3 = HEAPF32[$1_1 + 104 >> 2];
  if ($3 < Math_fround(3402823466385288598117041.0e14)) {
   $2_1 = HEAPF32[$1_1 + 112 >> 2];
   $4_1 = HEAPF32[$1_1 + 128 >> 2];
   $5_1 = HEAPF32[$1_1 + 120 >> 2];
   label$2 : {
    if (!($5_1 > Math_fround(0.0))) {
     break label$2
    }
    if ($3 <= Math_fround($5_1 + Math_fround(0.0))) {
     $3 = Math_fround(Math_fround($3 * $2_1) + Math_fround(0.0));
     break label$2;
    }
    $6_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 96 >> 2] + HEAPF32[$1_1 + 28 >> 2]) - $4_1);
    if (!(Math_fround($6_1 - $5_1) <= $3)) {
     break label$2
    }
    $3 = Math_fround(Math_fround(Math_fround($6_1 - $3) * $2_1) + $3);
   }
   HEAPF32[$0_1 >> 2] = $3 - Math_fround($2_1 * Math_fround(HEAPF32[$1_1 + 28 >> 2] - $4_1));
  }
  $3 = HEAPF32[$1_1 + 108 >> 2];
  if ($3 < Math_fround(3402823466385288598117041.0e14)) {
   $2_1 = Math_fround(0.0);
   $8 = HEAP32[$1_1 + 8 >> 2];
   if ($8 & 1) {
    $4_1 = $2_1
   } else {
    $9 = HEAP32[18392];
    $2_1 = Math_fround(HEAPF32[$9 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
    $7_1 = HEAP32[$1_1 + 728 >> 2];
    if ($7_1) {
     $2_1 = Math_fround($2_1 * HEAPF32[$7_1 + 572 >> 2])
    }
    $4_1 = HEAPF32[$9 + 5480 >> 2];
    $4_1 = Math_fround(Math_fround($4_1 + $4_1) + $2_1);
   }
   $2_1 = Math_fround(0.0);
   if ($8 & 1024) {
    $8 = HEAP32[18392];
    $2_1 = Math_fround(HEAPF32[$8 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
    $5_1 = HEAPF32[$1_1 + 312 >> 2];
    $9 = HEAP32[$1_1 + 728 >> 2];
    if ($9) {
     $2_1 = Math_fround($2_1 * HEAPF32[$9 + 572 >> 2])
    }
    $6_1 = HEAPF32[$8 + 5480 >> 2];
    $2_1 = Math_fround(Math_fround($6_1 + $6_1) + Math_fround($5_1 + $2_1));
   }
   $4_1 = Math_fround(Math_fround($4_1 + $2_1) + HEAPF32[$1_1 + 132 >> 2]);
   $2_1 = HEAPF32[$1_1 + 116 >> 2];
   $5_1 = HEAPF32[$1_1 + 124 >> 2];
   label$13 : {
    if (!($5_1 > Math_fround(0.0))) {
     break label$13
    }
    if ($3 <= Math_fround($5_1 + Math_fround(0.0))) {
     $3 = Math_fround(Math_fround($3 * $2_1) + Math_fround(0.0));
     break label$13;
    }
    $6_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 100 >> 2] + HEAPF32[$1_1 + 32 >> 2]) - $4_1);
    if (!(Math_fround($6_1 - $5_1) <= $3)) {
     break label$13
    }
    $3 = Math_fround(Math_fround(Math_fround($6_1 - $3) * $2_1) + $3);
   }
   HEAPF32[$0_1 + 4 >> 2] = $3 - Math_fround($2_1 * Math_fround(HEAPF32[$1_1 + 32 >> 2] - $4_1));
  }
  $2_1 = HEAPF32[$0_1 >> 2];
  $2_1 = $2_1 >= Math_fround(0.0) ? $2_1 : Math_fround(0.0);
  label$17 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $7_1 = ~~$2_1;
    break label$17;
   }
   $7_1 = -2147483648;
  }
  $2_1 = Math_fround($7_1 | 0);
  HEAPF32[$0_1 >> 2] = $2_1;
  $4_1 = HEAPF32[$0_1 + 4 >> 2];
  $4_1 = $4_1 >= Math_fround(0.0) ? $4_1 : Math_fround(0.0);
  label$19 : {
   if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
    $7_1 = ~~$4_1;
    break label$19;
   }
   $7_1 = -2147483648;
  }
  $4_1 = Math_fround($7_1 | 0);
  HEAPF32[$0_1 + 4 >> 2] = $4_1;
  if (!(HEAPU8[$1_1 + 141 | 0] | HEAPU8[$1_1 + 143 | 0])) {
   $3 = HEAPF32[$1_1 + 96 >> 2];
   HEAPF32[$0_1 >> 2] = $2_1 < $3 ? $2_1 : $3;
   $2_1 = HEAPF32[$1_1 + 100 >> 2];
   HEAPF32[$0_1 + 4 >> 2] = $2_1 > $4_1 ? $4_1 : $2_1;
  }
 }
 
 function $156($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  $11_1 = HEAP32[18392];
  $13 = HEAP32[$11_1 + 12160 >> 2];
  $1_1 = HEAP8[18920];
  $2_1 = $0_1;
  __inlined_func$1700 : {
   if (!$1_1) {
    break __inlined_func$1700
   }
   $1_1 = $1693($0_1, $1_1);
   label$2 : {
    if (!$1_1) {
     break label$2
    }
    $2_1 = $1_1;
    if (!HEAPU8[18921]) {
     break __inlined_func$1700
    }
    if (!HEAPU8[$1_1 + 1 | 0]) {
     break label$2
    }
    if (!HEAPU8[18922]) {
     $4_1 = HEAPU8[$1_1 + 1 | 0];
     $2_1 = ($4_1 | 0) != 0;
     label$10 : {
      if (!$4_1) {
       break label$10
      }
      $5_1 = $4_1 | HEAPU8[$1_1 | 0] << 8;
      $6_1 = HEAPU8[18921] | HEAPU8[18920] << 8;
      if (($5_1 | 0) == ($6_1 | 0)) {
       break label$10
      }
      $4_1 = $1_1 + 1 | 0;
      while (1) {
       $1_1 = $4_1;
       $3 = HEAPU8[$1_1 + 1 | 0];
       $2_1 = ($3 | 0) != 0;
       if (!$3) {
        break label$10
       }
       $4_1 = $1_1 + 1 | 0;
       $5_1 = $3 | $5_1 << 8 & 65280;
       if (($6_1 | 0) != ($5_1 | 0)) {
        continue
       }
       break;
      };
     }
     $2_1 = $2_1 ? $1_1 : 0;
     break __inlined_func$1700;
    }
    if (!HEAPU8[$1_1 + 2 | 0]) {
     break label$2
    }
    if (!HEAPU8[18923]) {
     $4_1 = $1_1 + 2 | 0;
     $2_1 = HEAPU8[$1_1 + 2 | 0];
     $5_1 = ($2_1 | 0) != 0;
     label$11 : {
      label$22 : {
       if (!$2_1) {
        break label$22
       }
       $2_1 = HEAPU8[$1_1 + 1 | 0] << 16 | HEAPU8[$1_1 | 0] << 24 | $2_1 << 8;
       $6_1 = HEAPU8[18921] << 16 | HEAPU8[18920] << 24 | HEAPU8[18922] << 8;
       if (($2_1 | 0) == ($6_1 | 0)) {
        break label$22
       }
       while (1) {
        $1_1 = $4_1 + 1 | 0;
        $3 = HEAPU8[$4_1 + 1 | 0];
        $5_1 = ($3 | 0) != 0;
        if (!$3) {
         break label$11
        }
        $4_1 = $1_1;
        $2_1 = ($3 | $2_1) << 8;
        if (($6_1 | 0) != ($2_1 | 0)) {
         continue
        }
        break;
       };
       break label$11;
      }
      $1_1 = $4_1;
     }
     $2_1 = $5_1 ? $1_1 - 2 | 0 : 0;
     break __inlined_func$1700;
    }
    if (!HEAPU8[$1_1 + 3 | 0]) {
     break label$2
    }
    if (!HEAPU8[18924]) {
     $4_1 = $1_1 + 3 | 0;
     $2_1 = HEAPU8[$1_1 + 3 | 0];
     $5_1 = ($2_1 | 0) != 0;
     label$12 : {
      label$23 : {
       if (!$2_1) {
        break label$23
       }
       $2_1 = $2_1 | (HEAPU8[$1_1 + 1 | 0] << 16 | HEAPU8[$1_1 | 0] << 24 | HEAPU8[$1_1 + 2 | 0] << 8);
       $1_1 = HEAPU8[18920] | HEAPU8[18921] << 8 | (HEAPU8[18922] << 16 | HEAPU8[18923] << 24);
       $6_1 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
       if (($2_1 | 0) == ($6_1 | 0)) {
        break label$23
       }
       while (1) {
        $1_1 = $4_1 + 1 | 0;
        $3 = HEAPU8[$4_1 + 1 | 0];
        $5_1 = ($3 | 0) != 0;
        if (!$3) {
         break label$12
        }
        $4_1 = $1_1;
        $2_1 = $3 | $2_1 << 8;
        if (($6_1 | 0) != ($2_1 | 0)) {
         continue
        }
        break;
       };
       break label$12;
      }
      $1_1 = $4_1;
     }
     $2_1 = $5_1 ? $1_1 - 3 | 0 : 0;
     break __inlined_func$1700;
    }
    $5_1 = $1_1;
    $10_1 = global$0 - 1056 | 0;
    global$0 = $10_1;
    $1_1 = $10_1 + 1048 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $10_1 + 1040 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$10_1 + 1032 >> 2] = 0;
    HEAP32[$10_1 + 1036 >> 2] = 0;
    HEAP32[$10_1 + 1024 >> 2] = 0;
    HEAP32[$10_1 + 1028 >> 2] = 0;
    label$13 : {
     label$24 : {
      label$35 : {
       label$4 : {
        $3 = HEAPU8[18920];
        label$5 : {
         if (!$3) {
          $7_1 = -1;
          $1_1 = 1;
          break label$5;
         }
         while (1) {
          if (!HEAPU8[$5_1 + $8 | 0]) {
           break label$24
          }
          $8 = $8 + 1 | 0;
          HEAP32[(($3 & 255) << 2) + $10_1 >> 2] = $8;
          $1_1 = ($10_1 + 1024 | 0) + ($3 >>> 3 & 28) | 0;
          HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 1 << $3;
          $3 = HEAPU8[$8 + 18920 | 0];
          if ($3) {
           continue
          }
          break;
         };
         $1_1 = 1;
         $7_1 = -1;
         if ($8 >>> 0 > 1) {
          break label$4
         }
        }
        $6_1 = -1;
        $4_1 = 1;
        break label$35;
       }
       $2_1 = 1;
       $3 = 1;
       while (1) {
        $6_1 = HEAPU8[($3 + $7_1 | 0) + 18920 | 0];
        $9 = HEAPU8[$1_1 + 18920 | 0];
        label$9 : {
         if (($6_1 | 0) == ($9 | 0)) {
          if (($3 | 0) == ($2_1 | 0)) {
           $4_1 = $4_1 + $2_1 | 0;
           $3 = 1;
           break label$9;
          }
          $3 = $3 + 1 | 0;
          break label$9;
         }
         if ($6_1 >>> 0 > $9 >>> 0) {
          $2_1 = $1_1 - $7_1 | 0;
          $4_1 = $1_1;
          $3 = 1;
          break label$9;
         }
         $7_1 = $4_1;
         $4_1 = $4_1 + 1 | 0;
         $2_1 = 1;
         $3 = 1;
        }
        $1_1 = $3 + $4_1 | 0;
        if ($1_1 >>> 0 < $8 >>> 0) {
         continue
        }
        break;
       };
       $4_1 = 1;
       $6_1 = -1;
       if ($8 >>> 0 <= 1) {
        $1_1 = $2_1;
        break label$35;
       }
       $1_1 = 0;
       $9 = 1;
       $3 = 1;
       while (1) {
        $12_1 = HEAPU8[($3 + $6_1 | 0) + 18920 | 0];
        $14 = HEAPU8[$4_1 + 18920 | 0];
        label$15 : {
         if (($12_1 | 0) == ($14 | 0)) {
          if (($3 | 0) == ($9 | 0)) {
           $1_1 = $1_1 + $9 | 0;
           $3 = 1;
           break label$15;
          }
          $3 = $3 + 1 | 0;
          break label$15;
         }
         if ($12_1 >>> 0 < $14 >>> 0) {
          $9 = $4_1 - $6_1 | 0;
          $1_1 = $4_1;
          $3 = 1;
          break label$15;
         }
         $6_1 = $1_1;
         $1_1 = $1_1 + 1 | 0;
         $9 = 1;
         $3 = 1;
        }
        $4_1 = $3 + $1_1 | 0;
        if ($4_1 >>> 0 < $8 >>> 0) {
         continue
        }
        break;
       };
       $1_1 = $2_1;
       $4_1 = $9;
      }
      $2_1 = $1_1;
      $1_1 = $6_1 + 1 >>> 0 > $7_1 + 1 >>> 0;
      $2_1 = $1_1 ? $4_1 : $2_1;
      $12_1 = $1_1 ? $6_1 : $7_1;
      $9 = $12_1 + 1 | 0;
      label$19 : {
       if ($1645(18920, $2_1 + 18920 | 0, $9)) {
        $1_1 = ($12_1 ^ -1) + $8 | 0;
        $2_1 = ($1_1 >>> 0 < $12_1 >>> 0 ? $12_1 : $1_1) + 1 | 0;
        $15_1 = 0;
        break label$19;
       }
       $15_1 = $8 - $2_1 | 0;
      }
      $16_1 = $8 - 1 | 0;
      $14 = $8 | 63;
      $6_1 = 0;
      $1_1 = $5_1;
      while (1) {
       label$227 : {
        if ($5_1 - $1_1 >>> 0 >= $8 >>> 0) {
         break label$227
        }
        $4_1 = $1644($5_1, 0, $14);
        if ($4_1) {
         $5_1 = $4_1;
         if ($4_1 - $1_1 >>> 0 < $8 >>> 0) {
          break label$24
         }
         break label$227;
        }
        $5_1 = $5_1 + $14 | 0;
       }
       $4_1 = HEAPU8[$1_1 + $16_1 | 0];
       $3 = $8;
       label$248 : {
        label$25 : {
         if (!(HEAP32[($10_1 + 1024 | 0) + ($4_1 >>> 3 & 28) >> 2] >>> $4_1 & 1)) {
          break label$25
         }
         $4_1 = HEAP32[($4_1 << 2) + $10_1 >> 2];
         if (($8 | 0) != ($4_1 | 0)) {
          $4_1 = $8 - $4_1 | 0;
          $3 = $4_1 >>> 0 > $6_1 >>> 0 ? $4_1 : $6_1;
          break label$25;
         }
         label$28 : {
          $3 = $9;
          $4_1 = $3 >>> 0 > $6_1 >>> 0 ? $3 : $6_1;
          $7_1 = HEAPU8[$4_1 + 18920 | 0];
          if ($7_1) {
           while (1) {
            if (HEAPU8[$1_1 + $4_1 | 0] != ($7_1 & 255)) {
             break label$28
            }
            $4_1 = $4_1 + 1 | 0;
            $7_1 = HEAPU8[$4_1 + 18920 | 0];
            if ($7_1) {
             continue
            }
            break;
           }
          }
          while (1) {
           if ($3 >>> 0 <= $6_1 >>> 0) {
            break label$13
           }
           $3 = $3 - 1 | 0;
           if (HEAPU8[$3 + 18920 | 0] == HEAPU8[$1_1 + $3 | 0]) {
            continue
           }
           break;
          };
          $3 = $2_1;
          $4_1 = $15_1;
          break label$248;
         }
         $3 = $4_1 - $12_1 | 0;
        }
        $4_1 = 0;
       }
       $6_1 = $4_1;
       $1_1 = $1_1 + $3 | 0;
       continue;
      };
     }
     $1_1 = 0;
    }
    global$0 = $10_1 + 1056 | 0;
    $4_1 = $1_1;
   }
   $2_1 = $4_1;
  }
  $1_1 = $2_1;
  $1_1 = $1_1 ? $1_1 : $0_1;
  $4_1 = $1697($1_1);
  $3 = ($4_1 & -4) + 24 | 0;
  $6_1 = HEAP32[$11_1 + 12156 >> 2];
  $0_1 = $3 + $6_1 | 0;
  label$1 : {
   if (($13 | 0) >= ($0_1 | 0)) {
    break label$1
   }
   $2_1 = $13 ? $13 + (($13 | 0) / 2 | 0) | 0 : 8;
   $2_1 = ($0_1 | 0) < ($2_1 | 0) ? $2_1 : $0_1;
   if (($13 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   if ($11_1) {
    $5_1 = $11_1 + 876 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] + 1;
   }
   $5_1 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
   $7_1 = HEAP32[$11_1 + 12164 >> 2];
   if ($7_1) {
    $1602($5_1, $7_1, HEAP32[$11_1 + 12156 >> 2]);
    $7_1 = HEAP32[$11_1 + 12164 >> 2];
    label$6 : {
     if (!$7_1) {
      break label$6
     }
     $9 = HEAP32[18392];
     if (!$9) {
      break label$6
     }
     $9 = $9 + 876 | 0;
     HEAP32[$9 >> 2] = HEAP32[$9 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($7_1, HEAP32[18394]);
   }
   HEAP32[$11_1 + 12160 >> 2] = $2_1;
   HEAP32[$11_1 + 12164 >> 2] = $5_1;
  }
  HEAP32[$11_1 + 12156 >> 2] = $0_1;
  $0_1 = $6_1 + HEAP32[$11_1 + 12164 >> 2] | 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = $3;
  $2_1 = $0_1 + 12 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $6_1 = $0_1 + 4 | 0;
  label$79 : {
   if (!$4_1) {
    $0_1 = $1_1;
    $3 = -1;
    while (1) {
     $2_1 = $0_1;
     $0_1 = $2_1 + 1 | 0;
     $5_1 = HEAPU8[$2_1 | 0];
     if ($5_1) {
      $2_1 = ($5_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $3 : HEAPU8[$2_1 + 2 | 0] == 35 ? -1 : $3;
      $3 = HEAP32[(($5_1 ^ $2_1 & 255) << 2) + 19360 >> 2] ^ $2_1 >>> 8;
     }
     if ($5_1) {
      continue
     }
     break;
    };
    break label$79;
   }
   $2_1 = $4_1;
   $3 = -1;
   $0_1 = $1_1;
   while (1) {
    $5_1 = $0_1;
    $0_1 = $5_1 + 1 | 0;
    $15_1 = HEAPU8[$5_1 + 2 | 0] == 35 ? -1 : $3;
    $5_1 = HEAPU8[$5_1 | 0];
    $2_1 = $2_1 - 1 | 0;
    $3 = ($5_1 | 0) != 35 | $2_1 >>> 0 < 2 | HEAPU8[$0_1 | 0] != 35 ? $3 : $15_1;
    $3 = HEAP32[(($3 & 255 ^ $5_1) << 2) + 19360 >> 2] ^ $3 >>> 8;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  HEAP32[$6_1 >> 2] = $3 ^ -1;
  $1602($6_1 + 16 | 0, $1_1, $4_1 + 1 | 0);
  return $6_1;
 }
 
 function $158($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $5_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$5_1 + 140 | 0] = 1;
  $6_1 = HEAP32[$5_1 + 580 >> 2];
  $7_1 = HEAP32[$0_1 + 4 >> 2];
  $8 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 24 >> 2] = $8;
  HEAP32[$3 + 28 >> 2] = $7_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 16 >> 2] = $0_1;
  HEAP32[$3 + 20 >> 2] = $4_1;
  HEAP32[$3 + 8 >> 2] = $8;
  HEAP32[$3 + 12 >> 2] = $7_1;
  HEAP32[$3 >> 2] = $0_1;
  HEAP32[$3 + 4 >> 2] = $4_1;
  $378($6_1, $3 + 8 | 0, $3, $2_1);
  $0_1 = HEAP32[$5_1 + 580 >> 2];
  $4_1 = ((HEAP32[$0_1 + 60 >> 2] << 4) + HEAP32[$0_1 + 68 >> 2] | 0) - 16 | 0;
  $6_1 = HEAP32[$4_1 >> 2];
  $2_1 = HEAP32[$4_1 + 4 >> 2];
  $0_1 = HEAP32[$4_1 + 12 >> 2];
  $1_1 = $5_1 + 504 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 + 8 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  HEAP32[$5_1 + 496 >> 2] = $6_1;
  HEAP32[$5_1 + 500 >> 2] = $2_1;
  global$0 = $3 + 32 | 0;
 }
 
 function $159() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  $380(HEAP32[$1_1 + 580 >> 2]);
  $0_1 = HEAP32[$1_1 + 580 >> 2];
  $0_1 = ((HEAP32[$0_1 + 60 >> 2] << 4) + HEAP32[$0_1 + 68 >> 2] | 0) - 16 | 0;
  $3 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = HEAP32[$0_1 + 12 >> 2];
  $2_1 = $1_1 + 504 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  HEAP32[$1_1 + 496 >> 2] = $3;
  HEAP32[$1_1 + 500 >> 2] = $4_1;
 }
 
 function $161() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0);
  $14 = global$0 - 16 | 0;
  global$0 = $14;
  $4_1 = HEAP32[18392];
  label$1 : {
   if (HEAP32[$4_1 + 6988 >> 2] == HEAP32[$4_1 + 6984 >> 2]) {
    break label$1
   }
   if (HEAP32[$4_1 + 12180 >> 2] > 0) {
    while (1) {
     $1_1 = HEAP32[$4_1 + 12188 >> 2] + Math_imul($0_1, 20) | 0;
     if (HEAP32[$1_1 + 4 >> 2] == 2) {
      FUNCTION_TABLE[HEAP32[$1_1 + 12 >> 2]]($4_1, $1_1)
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) < HEAP32[$4_1 + 12180 >> 2]) {
      continue
     }
     break;
    }
   }
   $0_1 = HEAP32[18392];
   if (HEAP32[$0_1 + 7044 >> 2] >= 2) {
    while (1) {
     $142();
     if (HEAP32[$0_1 + 7044 >> 2] > 1) {
      continue
     }
     break;
    }
   }
   $0_1 = HEAP32[$4_1 + 220 >> 2];
   label$7 : {
    if (!$0_1) {
     break label$7
    }
    $6_1 = HEAPF32[$4_1 + 12116 >> 2];
    if ($6_1 != Math_fround(3402823466385288598117041.0e14)) {
     $6_1 = Math_fround($6_1 - HEAPF32[$4_1 + 12108 >> 2]);
     $9 = Math_fround($6_1 * $6_1);
     $6_1 = Math_fround(HEAPF32[$4_1 + 12120 >> 2] - HEAPF32[$4_1 + 12112 >> 2]);
     if (!(Math_fround($9 + Math_fround($6_1 * $6_1)) > Math_fround(9.999999747378752e-05))) {
      break label$7
     }
    }
    $6_1 = HEAPF32[$4_1 + 12112 >> 2];
    label$9 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $1_1 = ~~$6_1;
      break label$9;
     }
     $1_1 = -2147483648;
    }
    $6_1 = HEAPF32[$4_1 + 12108 >> 2];
    label$11 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$6_1;
      break label$11;
     }
     $2_1 = -2147483648;
    }
    FUNCTION_TABLE[$0_1 | 0]($2_1, $1_1);
    $0_1 = HEAP32[$4_1 + 12112 >> 2];
    HEAP32[$4_1 + 12116 >> 2] = HEAP32[$4_1 + 12108 >> 2];
    HEAP32[$4_1 + 12120 >> 2] = $0_1;
   }
   HEAP8[$4_1 + 6997 | 0] = 0;
   $0_1 = HEAP32[$4_1 + 7080 >> 2];
   if (!(!$0_1 | HEAPU8[$0_1 + 140 | 0])) {
    HEAP8[$0_1 + 138 | 0] = 0
   }
   $142();
   $7_1 = HEAP32[18392];
   if (!(!HEAP32[$7_1 + 7844 >> 2] | HEAPF32[$7_1 + 7856 >> 2] < Math_fround(.15000000596046448))) {
    if (!HEAP32[$7_1 + 7852 >> 2]) {
     $2_1 = 2611;
     $1_1 = -1;
     while (1) {
      $0_1 = $2_1;
      $2_1 = $0_1 + 1 | 0;
      $3 = HEAPU8[$0_1 | 0];
      if ($3) {
       $1_1 = ($3 | 0) != 35 | HEAPU8[$2_1 | 0] != 35 ? $1_1 : HEAPU8[$0_1 + 2 | 0] == 35 ? -1 : $1_1;
       $1_1 = HEAP32[(($3 ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
      }
      if (($0_1 | 0) != 2630) {
       continue
      }
      break;
     };
     $10_1 = $1_1 ^ -1;
     $3 = HEAP32[$7_1 + 7064 >> 2];
     $1_1 = $3;
     $5_1 = HEAP32[$7_1 + 7056 >> 2];
     if ($5_1) {
      $2_1 = $3;
      $0_1 = $5_1;
      while (1) {
       $8 = $0_1 >>> 1 | 0;
       $1_1 = ($8 << 3) + $2_1 | 0;
       $13 = $10_1 >>> 0 > HEAPU32[$1_1 >> 2];
       $2_1 = $13 ? $1_1 + 8 | 0 : $2_1;
       $1_1 = $2_1;
       $0_1 = $13 ? $0_1 + ($8 ^ -1) | 0 : $8;
       if ($0_1) {
        continue
       }
       break;
      };
     }
     $0_1 = 0;
     label$24 : {
      if (($3 + ($5_1 << 3) | 0) == ($1_1 | 0)) {
       break label$24
      }
      $0_1 = 0;
      if (($10_1 | 0) != HEAP32[$1_1 >> 2]) {
       break label$24
      }
      $0_1 = HEAP32[$1_1 + 4 >> 2];
     }
     HEAP32[$7_1 + 7852 >> 2] = $0_1;
    }
    $0_1 = HEAP32[HEAP32[$7_1 + 7504 >> 2] >> 2];
    $1_1 = $0_1 + 16 | 0;
    $6_1 = HEAPF32[$1_1 >> 2];
    $9 = HEAPF32[$0_1 + 12 >> 2];
    $2_1 = $7_1 + 7376 | 0;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    $2_1 = $7_1 + 7368 | 0;
    HEAP32[$2_1 >> 2] = 2139095039;
    HEAP32[$2_1 + 4 >> 2] = 2139095039;
    HEAPF32[$7_1 + 7360 >> 2] = $9 * Math_fround(.20000000298023224);
    $2_1 = HEAP32[$7_1 + 7300 >> 2];
    HEAP32[$7_1 + 7300 >> 2] = $2_1 | 16;
    HEAPF32[$7_1 + 7364 >> 2] = $6_1 * Math_fround(.20000000298023224);
    $6_1 = HEAPF32[$0_1 + 4 >> 2];
    $9 = HEAPF32[$0_1 + 12 >> 2];
    $12_1 = HEAPF32[$0_1 + 8 >> 2];
    $11_1 = HEAPF32[$1_1 >> 2];
    $0_1 = $7_1 + 7324 | 0;
    HEAP32[$0_1 >> 2] = 1056964608;
    HEAP32[$0_1 + 4 >> 2] = 1056964608;
    HEAP32[$7_1 + 7304 >> 2] = 1;
    HEAP32[$7_1 + 7300 >> 2] = $2_1 | 17;
    HEAPF32[$7_1 + 7320 >> 2] = $12_1 + Math_fround($11_1 * Math_fround(.5));
    HEAPF32[$7_1 + 7316 >> 2] = $6_1 + Math_fround($9 * Math_fround(.5));
    $6_1 = HEAPF32[$7_1 + 5424 >> 2];
    $9 = HEAPF32[$7_1 + 5428 >> 2];
    HEAPF32[$14 + 12 >> 2] = $9 + $9;
    HEAPF32[$14 + 8 >> 2] = $6_1 + $6_1;
    $59(2, $14 + 8 | 0);
    $143(2611, 0, 791367);
    $0_1 = HEAP32[$7_1 + 7020 >> 2];
    if (($0_1 | 0) > 0) {
     while (1) {
      $2_1 = $0_1;
      $3 = $0_1 - 1 | 0;
      $5_1 = HEAP32[HEAP32[$7_1 + 7028 >> 2] + ($3 << 2) >> 2];
      label$28 : {
       if (!HEAPU8[$5_1 + 139 | 0] | ($5_1 | 0) != HEAP32[$5_1 + 736 >> 2]) {
        break label$28
       }
       $8 = HEAP32[$5_1 + 8 >> 2];
       if ($8 & 524288) {
        break label$28
       }
       $10_1 = HEAP32[$5_1 >> 2];
       $0_1 = $10_1;
       $1_1 = $0_1;
       label$29 : {
        if (($0_1 | 0) == -1) {
         break label$29
        }
        while (1) {
         label$31 : {
          $1_1 = HEAPU8[$0_1 | 0];
          if (($1_1 | 0) != 35) {
           if ($1_1) {
            break label$31
           }
           $1_1 = $0_1;
           break label$29;
          }
          if (HEAPU8[$0_1 + 1 | 0] != 35) {
           break label$31
          }
          $1_1 = $0_1;
          break label$29;
         }
         $1_1 = -1;
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) != -1) {
          continue
         }
         break;
        };
       }
       $0_1 = $10_1;
       label$33 : {
        if (($1_1 | 0) != ($10_1 | 0)) {
         break label$33
        }
        $0_1 = 17942;
        if ($8 & 67108864) {
         break label$33
        }
        label$35 : {
         if (!($8 & 1024)) {
          break label$35
         }
         if ($1695($10_1, 6628)) {
          break label$35
         }
         $0_1 = 17926;
         break label$33;
        }
        $0_1 = 18388;
       }
       $1_1 = HEAP32[$7_1 + 7844 >> 2];
       HEAP32[$14 + 8 >> 2] = 0;
       HEAP32[$14 + 12 >> 2] = 0;
       $601($0_1, ($1_1 | 0) == ($5_1 | 0), 0, $14 + 8 | 0);
      }
      $0_1 = $3;
      if (($2_1 | 0) > 1) {
       continue
      }
      break;
     }
    }
    $142();
    $0_1 = HEAP32[18392];
    $1_1 = HEAP32[$0_1 + 7416 >> 2];
    $2_1 = HEAP32[$0_1 + 7408 >> 2] - 1 | 0;
    $5_1 = HEAP32[$1_1 + Math_imul($2_1, 12) >> 2];
    $3 = Math_imul($5_1, 12);
    label$36 : {
     if (HEAP32[$3 + 20912 >> 2] != 8) {
      break label$36
     }
     $3 = ($0_1 + HEAP32[$3 + 20920 >> 2] | 0) + 5416 | 0;
     if (8206235 >>> $5_1 & 1) {
      HEAPF32[$3 >> 2] = HEAPF32[($1_1 + Math_imul($2_1, 12) | 0) + 4 >> 2];
      break label$36;
     }
     if (!(25348196 >>> $5_1 & 1)) {
      break label$36
     }
     $1_1 = $1_1 + Math_imul($2_1, 12) | 0;
     HEAPF32[$3 >> 2] = HEAPF32[$1_1 + 4 >> 2];
     HEAPF32[$3 + 4 >> 2] = HEAPF32[$1_1 + 8 >> 2];
    }
    HEAP32[$0_1 + 7408 >> 2] = $2_1;
   }
   label$38 : {
    if (!HEAP32[$7_1 + 7508 >> 2]) {
     break label$38
    }
    $3 = HEAP32[18392];
    if (!HEAPU8[$3 + 7597 | 0] | HEAP32[$3 + 7672 >> 2] | HEAP32[$3 + 7760 >> 2]) {
     break label$38
    }
    $0_1 = HEAP32[$7_1 + 7600 >> 2];
    if (!($0_1 & 15) | $0_1 & 128) {
     break label$38
    }
    $7_1 = HEAP32[$3 + 7508 >> 2];
    $0_1 = $7_1 + (HEAP32[$3 + 7564 >> 2] << 4) | 0;
    $12_1 = HEAPF32[$0_1 + 776 >> 2];
    $6_1 = HEAPF32[$0_1 + 772 >> 2];
    $11_1 = HEAPF32[$0_1 + 768 >> 2];
    $10_1 = $0_1 + 764 | 0;
    $9 = HEAPF32[$10_1 >> 2];
    $5_1 = HEAP32[$3 + 7600 >> 2];
    $8 = HEAP32[$3 + 7612 >> 2];
    label$39 : {
     if ($8) {
      $1_1 = 0;
      $0_1 = $8;
      break label$39;
     }
     if (!($5_1 & 5)) {
      $1_1 = 0;
      $0_1 = 0;
      break label$39;
     }
     $6_1 = Math_fround(HEAPF32[$7_1 + 36 >> 2] + HEAPF32[$7_1 + 60 >> 2]);
     $1_1 = 1;
     label$42 : {
      if (!($5_1 & 4)) {
       $9 = $6_1;
       $0_1 = 0;
       break label$42;
      }
      $9 = Math_fround($12_1 - $11_1);
      $12_1 = Math_fround($12_1 - $9);
      $11_1 = Math_fround($11_1 - $9);
      $9 = $6_1;
      $0_1 = 2;
     }
    }
    $16_1 = $9;
    label$44 : {
     if (!(!($5_1 & 5) | ($8 | 0) != 1)) {
      $9 = Math_fround(-HEAPF32[$7_1 + 60 >> 2]);
      $1_1 = 1;
      label$46 : {
       if (!($5_1 & 4)) {
        $6_1 = $11_1;
        break label$46;
       }
       $6_1 = Math_fround($12_1 - $11_1);
       $12_1 = Math_fround($12_1 + $6_1);
       $6_1 = Math_fround($11_1 + $6_1);
       $0_1 = 3;
      }
      $11_1 = $9;
      break label$44;
     }
     $9 = $6_1;
     $6_1 = $11_1;
     $11_1 = $16_1;
    }
    $2_1 = $1_1;
    $1_1 = $0_1;
    $0_1 = $5_1 & 10;
    if (!(!$0_1 | ($8 | 0) != 2)) {
     $6_1 = Math_fround(HEAPF32[$7_1 + 40 >> 2] + HEAPF32[$7_1 - -64 >> 2]);
     if ($5_1 & 8) {
      $12_1 = Math_fround($9 - $11_1);
      $9 = Math_fround($9 - $12_1);
      $11_1 = Math_fround($11_1 - $12_1);
      $1_1 = 0;
     }
     $12_1 = $6_1;
     $2_1 = 1;
    }
    label$52 : {
     if (!(!$0_1 | ($8 | 0) != 3)) {
      $6_1 = Math_fround(-HEAPF32[$7_1 - -64 >> 2]);
      if (!($5_1 & 8)) {
       $12_1 = $6_1;
       $0_1 = $1_1;
       $2_1 = 1;
       break label$52;
      }
      $12_1 = $6_1;
      $16_1 = Math_fround($9 - $11_1);
      $9 = Math_fround($9 + $16_1);
      $11_1 = Math_fround($11_1 + $16_1);
      $0_1 = 1;
      $2_1 = 1;
      break label$52;
     }
     $0_1 = $1_1;
    }
    if (!$2_1) {
     break label$38
    }
    HEAPF32[$10_1 + 12 >> 2] = $12_1;
    HEAPF32[$10_1 + 8 >> 2] = $9;
    HEAPF32[$10_1 + 4 >> 2] = $6_1;
    HEAPF32[$10_1 >> 2] = $11_1;
    $2_1 = HEAP32[$3 + 7604 >> 2];
    $3 = HEAP32[$3 + 7612 >> 2];
    $1_1 = HEAP32[18392];
    HEAP8[$1_1 + 7596 | 0] = 0;
    HEAP8[$1_1 + 7597 | 0] = 0;
    HEAP8[$1_1 + 7598 | 0] = 1;
    HEAP32[$1_1 + 7620 >> 2] = $0_1;
    HEAP32[$1_1 + 7612 >> 2] = $3;
    HEAP32[$1_1 + 7604 >> 2] = $2_1;
    HEAP32[$1_1 + 7600 >> 2] = $5_1 | 128;
    HEAP8[$1_1 + 7572 | 0] = HEAPU8[$1_1 + 7573 | 0];
   }
   $1_1 = !HEAPU8[$4_1 + 7876 | 0];
   $0_1 = 0;
   label$56 : {
    if (HEAP32[$4_1 + 6984 >> 2] <= (HEAP32[$4_1 + 7908 >> 2] + 1 | 0)) {
     break label$56
    }
    $0_1 = 1;
    if (HEAPU8[$4_1 + 7880 | 0] & 32) {
     break label$56
    }
    $0_1 = !HEAPU8[(HEAP32[18392] + HEAP32[$4_1 + 7888 >> 2] | 0) + 236 | 0];
   }
   if (!($1_1 | !($0_1 | HEAPU8[$4_1 + 7946 | 0]))) {
    $0_1 = HEAP32[18392];
    HEAP8[$0_1 + 7876 | 0] = 0;
    HEAP32[$0_1 + 7892 >> 2] = 0;
    HEAP32[$0_1 + 7896 >> 2] = 0;
    HEAP32[$0_1 + 7968 >> 2] = 0;
    HEAP32[$0_1 + 7980 >> 2] = 0;
    HEAP32[$0_1 + 7984 >> 2] = -1;
    HEAP32[$0_1 + 7972 >> 2] = 2139095039;
    HEAP32[$0_1 + 7976 >> 2] = 0;
    $1_1 = $0_1 + 7912 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $0_1 + 7920 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $0_1 + 7928 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $0_1 + 7936 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP8[$0_1 + 7944 | 0] = 0;
    $1_1 = $0_1 + 7900 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$0_1 + 7908 >> 2] = -1;
    $1_1 = $0_1 + 7945 | 0;
    HEAP8[$1_1 | 0] = 0;
    HEAP8[$1_1 + 1 | 0] = 0;
    $1_1 = HEAP32[$0_1 + 8e3 >> 2];
    if ($1_1) {
     HEAP32[$0_1 + 7992 >> 2] = 0;
     HEAP32[$0_1 + 7996 >> 2] = 0;
     if ($0_1) {
      $2_1 = $0_1 + 876 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
     HEAP32[$0_1 + 8e3 >> 2] = 0;
    }
    HEAP32[$0_1 + 8004 >> 2] = 0;
    HEAP32[$0_1 + 8008 >> 2] = 0;
    $0_1 = $0_1 + 8012 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
   }
   if (!(HEAP8[$4_1 + 7880 | 0] & 1 | (!HEAPU8[$4_1 + 7876 | 0] | HEAP32[$4_1 + 7884 >> 2] >= HEAP32[$4_1 + 6984 >> 2]))) {
    HEAP8[$4_1 + 7877 | 0] = 1;
    $162(17682, 0);
    HEAP8[$4_1 + 7877 | 0] = 0;
   }
   HEAP8[$4_1 + 6996 | 0] = 0;
   HEAP32[$4_1 + 6988 >> 2] = HEAP32[$4_1 + 6984 >> 2];
   $3 = 0;
   $1_1 = 0;
   $6_1 = Math_fround(0.0);
   $7_1 = global$0 - 16 | 0;
   global$0 = $7_1;
   $5_1 = HEAP32[18392];
   label$10 : {
    if (HEAP32[$5_1 + 7136 >> 2] | HEAP32[$5_1 + 7116 >> 2]) {
     break label$10
    }
    $2_1 = HEAP32[$5_1 + 7508 >> 2];
    if (HEAPU8[$2_1 + 144 | 0] ? $2_1 : 0) {
     break label$10
    }
    label$32 : {
     if (!HEAPU8[$5_1 + 992 | 0]) {
      break label$32
     }
     $10_1 = HEAP32[$5_1 + 7084 >> 2];
     if ($10_1) {
      $0_1 = HEAP32[$10_1 + 736 >> 2]
     } else {
      $0_1 = 0
     }
     $1_1 = 0;
     label$5 : {
      if (!$0_1) {
       break label$5
      }
      $1_1 = 0;
      if (!(HEAPU8[$0_1 + 11 | 0] & 4)) {
       break label$5
      }
      $1_1 = HEAP32[$5_1 + 7468 >> 2];
      label$73 : {
       if (($1_1 | 0) <= 0) {
        $15_1 = ($1_1 | 0) > 0;
        break label$73;
       }
       $8 = HEAP32[$0_1 + 160 >> 2];
       $13 = HEAP32[$5_1 + 7476 >> 2];
       $15_1 = 1;
       if (($8 | 0) == HEAP32[$13 >> 2]) {
        break label$73
       }
       while (1) {
        $3 = $3 + 1 | 0;
        if (($1_1 | 0) != ($3 | 0) & ($8 | 0) != HEAP32[$13 + Math_imul($3, 36) >> 2]) {
         continue
        }
        break;
       };
       $15_1 = ($1_1 | 0) > ($3 | 0);
      }
      $1_1 = $15_1 ^ 1;
     }
     if (!($1_1 | !$0_1)) {
      $124($10_1);
      label$12 : {
       if (!HEAPU8[$5_1 + 181 | 0] | HEAP8[$0_1 + 8 | 0] & 1) {
        break label$12
       }
       if (!(HEAP8[$0_1 + 8 | 0] & 1)) {
        $2_1 = HEAP32[18392];
        $6_1 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$0_1 + 572 >> 2]);
        $9 = HEAPF32[$2_1 + 5480 >> 2];
        $9 = Math_fround($9 + $9);
        $2_1 = HEAP32[$0_1 + 728 >> 2];
        if ($2_1) {
         $6_1 = Math_fround($6_1 * HEAPF32[$2_1 + 572 >> 2])
        }
        $6_1 = Math_fround($9 + $6_1);
       }
       $9 = HEAPF32[$0_1 + 28 >> 2];
       $12_1 = HEAPF32[$0_1 + 12 >> 2];
       $2_1 = HEAP32[$0_1 + 16 >> 2];
       $3 = HEAP32[$0_1 + 12 >> 2];
       HEAPF32[$7_1 + 12 >> 2] = HEAPF32[$0_1 + 16 >> 2] + $6_1;
       HEAPF32[$7_1 + 8 >> 2] = $12_1 + $9;
       HEAP32[$7_1 >> 2] = $3;
       HEAP32[$7_1 + 4 >> 2] = $2_1;
       $6_1 = HEAPF32[$5_1 + 908 >> 2];
       label$13 : {
        if (!($6_1 >= HEAPF32[$7_1 >> 2])) {
         break label$13
        }
        $9 = HEAPF32[$5_1 + 912 >> 2];
        if (!($9 >= HEAPF32[$7_1 + 4 >> 2]) | !(HEAPF32[$7_1 + 8 >> 2] > $6_1)) {
         break label$13
        }
        if (HEAPF32[$7_1 + 12 >> 2] > $9) {
         break label$12
        }
       }
       HEAP32[$5_1 + 7092 >> 2] = 0;
      }
      if (!HEAPU8[$5_1 + 7127 | 0]) {
       break label$32
      }
      HEAP32[$5_1 + 7092 >> 2] = 0;
      break label$32;
     }
     if ($0_1 | !$2_1) {
      break label$32
     }
     $0_1 = 0;
     $10_1 = HEAP32[18392];
     $3 = HEAP32[$10_1 + 7468 >> 2];
     __inlined_func$131 : {
      while (1) {
       $2_1 = 0;
       if (($3 | 0) <= 0) {
        break __inlined_func$131
       }
       $2_1 = $0_1;
       $3 = $3 - 1 | 0;
       $0_1 = HEAP32[(HEAP32[$10_1 + 7476 >> 2] + Math_imul($3, 36) | 0) + 4 >> 2];
       label$326 : {
        if ($0_1) {
         $8 = 0;
         if (HEAPU8[$0_1 + 11 | 0] & 8) {
          break label$326
         }
        }
        $0_1 = $2_1;
        $8 = 1;
       }
       if ($8) {
        continue
       }
       break;
      };
      $2_1 = $0_1;
     }
     if ($2_1) {
      break label$32
     }
     $125(0);
    }
    if (!HEAPU8[$5_1 + 993 | 0]) {
     break label$10
    }
    $8 = HEAP32[18392];
    $10_1 = HEAP32[$8 + 7468 >> 2];
    $0_1 = $10_1;
    while (1) {
     label$14 : {
      $2_1 = $1_1;
      if (($0_1 | 0) <= 0) {
       $3 = 0;
       break label$14;
      }
      $0_1 = $0_1 - 1 | 0;
      $1_1 = HEAP32[(HEAP32[$8 + 7476 >> 2] + Math_imul($0_1, 36) | 0) + 4 >> 2];
      label$17 : {
       if ($1_1) {
        $13 = 0;
        if (HEAPU8[$1_1 + 11 | 0] & 8) {
         break label$17
        }
       }
       $1_1 = $2_1;
       $13 = 1;
      }
      $3 = $1_1;
      if ($13) {
       continue
      }
     }
     break;
    };
    $0_1 = $3;
    $5_1 = HEAP32[$5_1 + 7084 >> 2];
    label$19 : {
     if (!$5_1) {
      break label$19
     }
     if ($0_1) {
      $1_1 = HEAP32[$5_1 + 8 >> 2] >>> 25 & 1;
      $3 = HEAP32[$0_1 + 8 >> 2] >>> 25 & 1;
      label$22 : {
       if (($1_1 | 0) != ($3 | 0)) {
        $1_1 = $1_1 >>> 0 > $3 >>> 0;
        break label$22;
       }
       $3 = HEAP32[$8 + 7008 >> 2];
       while (1) {
        if (($3 | 0) <= 0) {
         break label$19
        }
        $3 = $3 - 1 | 0;
        $13 = HEAP32[HEAP32[$8 + 7016 >> 2] + ($3 << 2) >> 2];
        $15_1 = ($0_1 | 0) != ($13 | 0);
        $1_1 = ($13 | 0) == ($5_1 | 0) | $2_1 & $15_1;
        if (!$15_1) {
         break label$22
        }
        $2_1 = $1_1;
        if (($5_1 | 0) != ($13 | 0)) {
         continue
        }
        break;
       };
      }
      if (!$1_1) {
       break label$19
      }
     }
     $0_1 = $5_1;
    }
    if (!$10_1) {
     break label$10
    }
    $2_1 = $0_1;
    $3 = 0;
    label$278 : {
     if (!$0_1) {
      break label$278
     }
     $3 = 0;
     if (($10_1 | 0) <= 0) {
      break label$278
     }
     $13 = HEAP32[$8 + 7476 >> 2];
     $0_1 = 0;
     while (1) {
      $3 = $0_1;
      $5_1 = HEAP32[($13 + Math_imul($0_1, 36) | 0) + 4 >> 2];
      $8 = 4;
      label$3010 : {
       if (!$5_1) {
        break label$3010
       }
       $1_1 = 0;
       $8 = 4;
       if (HEAP8[$5_1 + 11 | 0] & 1) {
        break label$3010
       }
       while (1) {
        $5_1 = $0_1;
        $8 = HEAP32[($13 + Math_imul($0_1, 36) | 0) + 4 >> 2];
        $0_1 = 1;
        label$3311 : {
         if (!$8) {
          break label$3311
         }
         $0_1 = $2_1;
         if (HEAP32[$0_1 + 736 >> 2] == ($8 | 0)) {
          $1_1 = 1;
          $0_1 = 0;
          break label$3311;
         }
         while (1) {
          if (($0_1 | 0) == ($8 | 0)) {
           $1_1 = 1;
           $0_1 = ($0_1 | 0) != ($8 | 0);
           break label$3311;
          }
          $0_1 = HEAP32[$0_1 + 732 >> 2];
          if ($0_1) {
           continue
          }
          break;
         };
         $0_1 = 1;
        }
        if ($0_1) {
         $0_1 = $5_1 + 1 | 0;
         if (($10_1 | 0) > ($0_1 | 0)) {
          continue
         }
        }
        break;
       };
       $8 = $1_1 & 1 ? 0 : 2;
      }
      if (($8 | 0) == 2) {
       break label$278
      }
      $0_1 = $3 + 1 | 0;
      if (($10_1 | 0) != ($0_1 | 0)) {
       continue
      }
      break;
     };
     $3 = $10_1;
    }
    $0_1 = $3;
    if (($10_1 | 0) <= ($0_1 | 0)) {
     break label$10
    }
    $132($0_1, 1);
   }
   global$0 = $7_1 + 16 | 0;
   $0_1 = HEAP32[$4_1 + 7036 >> 2];
   label$61 : {
    if (($0_1 | 0) >= 0) {
     break label$61
    }
    $1_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0;
    $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
    if (($0_1 | 0) >= ($1_1 | 0)) {
     break label$61
    }
    $0_1 = HEAP32[18392];
    if ($0_1) {
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
    }
    $0_1 = FUNCTION_TABLE[HEAP32[18314]]($1_1 << 2, HEAP32[18394]) | 0;
    $2_1 = HEAP32[$4_1 + 7040 >> 2];
    if ($2_1) {
     $1602($0_1, $2_1, HEAP32[$4_1 + 7032 >> 2] << 2);
     $2_1 = HEAP32[$4_1 + 7040 >> 2];
     label$64 : {
      if (!$2_1) {
       break label$64
      }
      $3 = HEAP32[18392];
      if (!$3) {
       break label$64
      }
      $3 = $3 + 876 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 7036 >> 2] = $1_1;
    HEAP32[$4_1 + 7040 >> 2] = $0_1;
   }
   HEAP32[$4_1 + 7032 >> 2] = 0;
   $0_1 = HEAP32[$4_1 + 7008 >> 2];
   if (($0_1 | 0) > HEAP32[$4_1 + 7036 >> 2]) {
    $1_1 = HEAP32[18392];
    if ($1_1) {
     $1_1 = $1_1 + 876 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
    }
    $1_1 = FUNCTION_TABLE[HEAP32[18314]]($0_1 << 2, HEAP32[18394]) | 0;
    $2_1 = HEAP32[$4_1 + 7040 >> 2];
    if ($2_1) {
     $1602($1_1, $2_1, HEAP32[$4_1 + 7032 >> 2] << 2);
     $2_1 = HEAP32[$4_1 + 7040 >> 2];
     label$68 : {
      if (!$2_1) {
       break label$68
      }
      $3 = HEAP32[18392];
      if (!$3) {
       break label$68
      }
      $3 = $3 + 876 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 7036 >> 2] = $0_1;
    HEAP32[$4_1 + 7040 >> 2] = $1_1;
   }
   $0_1 = HEAP32[$4_1 + 7008 >> 2];
   $1_1 = $0_1;
   if ($0_1) {
    $2_1 = $4_1 + 7032 | 0;
    $0_1 = 0;
    while (1) {
     $1_1 = HEAP32[HEAP32[$4_1 + 7016 >> 2] + ($0_1 << 2) >> 2];
     if (!(HEAP8[$1_1 + 11 | 0] & 1 ? HEAPU8[$1_1 + 138 | 0] : 0)) {
      $163($2_1, $1_1)
     }
     $0_1 = $0_1 + 1 | 0;
     $1_1 = HEAP32[$4_1 + 7008 >> 2];
     if (($0_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$4_1 + 7008 >> 2] = HEAP32[$4_1 + 7032 >> 2];
   HEAP32[$4_1 + 7032 >> 2] = $1_1;
   HEAP32[$4_1 + 872 >> 2] = HEAP32[$4_1 + 7068 >> 2];
   $1_1 = HEAP32[$4_1 + 7036 >> 2];
   $2_1 = HEAP32[$4_1 + 7040 >> 2];
   $0_1 = $4_1 + 7012 | 0;
   $3 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$4_1 + 7036 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$4_1 + 7040 >> 2] = $3;
   HEAP32[$0_1 >> 2] = $1_1;
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   HEAP8[HEAP32[$4_1 + 152 >> 2] + 16 | 0] = 0;
   $0_1 = $4_1 + 244 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = HEAP32[$4_1 + 5408 >> 2];
   label$7313 : {
    if (($0_1 | 0) >= 0) {
     break label$7313
    }
    $1_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0;
    $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
    if (($0_1 | 0) >= ($1_1 | 0)) {
     break label$7313
    }
    $0_1 = HEAP32[18392];
    if ($0_1) {
     $0_1 = $0_1 + 876 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
    }
    $0_1 = FUNCTION_TABLE[HEAP32[18314]]($1_1 << 1, HEAP32[18394]) | 0;
    $2_1 = HEAP32[$4_1 + 5412 >> 2];
    if ($2_1) {
     $1602($0_1, $2_1, HEAP32[$4_1 + 5404 >> 2] << 1);
     $2_1 = HEAP32[$4_1 + 5412 >> 2];
     label$76 : {
      if (!$2_1) {
       break label$76
      }
      $3 = HEAP32[18392];
      if (!$3) {
       break label$76
      }
      $3 = $3 + 876 | 0;
      HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 5408 >> 2] = $1_1;
    HEAP32[$4_1 + 5412 >> 2] = $0_1;
   }
   HEAP32[$4_1 + 5404 >> 2] = 0;
   HEAP32[$4_1 + 896 >> 2] = HEAP32[$4_1 + 892 >> 2];
   $1604($4_1 + 768 | 0, 0, 80);
   if (HEAP32[$4_1 + 12180 >> 2] <= 0) {
    break label$1
   }
   $0_1 = 0;
   while (1) {
    $1_1 = HEAP32[$4_1 + 12188 >> 2] + Math_imul($0_1, 20) | 0;
    if (HEAP32[$1_1 + 4 >> 2] == 3) {
     FUNCTION_TABLE[HEAP32[$1_1 + 12 >> 2]]($4_1, $1_1)
    }
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$4_1 + 12180 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $14 + 16 | 0;
 }
 
 function $162($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $141(1);
  $2_1 = HEAP32[18392];
  $4_1 = HEAP32[$2_1 + 7080 >> 2];
  HEAP8[$4_1 + 140 | 0] = 1;
  if (!HEAPU8[$4_1 + 143 | 0]) {
   $2_1 = $2_1 + 12800 | 0;
   $555($2_1, $22($2_1, $0_1, $1_1) + $2_1 | 0, 1);
  }
  $142();
  global$0 = $3 + 16 | 0;
 }
 
 function $163($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($3 | 0) != ($4_1 | 0)) {
    break label$1
   }
   $2_1 = $3 + 1 | 0;
   $5_1 = $4_1;
   if ($4_1) {
    $3 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $4_1 = ($3 | 0) > ($2_1 | 0) ? $3 : $2_1;
   if (($5_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   $3 = $4_1 << 2;
   $2_1 = HEAP32[18392];
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   if ($2_1) {
    $1602($3, $2_1, HEAP32[$0_1 >> 2] << 2);
    $2_1 = HEAP32[$0_1 + 8 >> 2];
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     $5_1 = HEAP32[18392];
     if (!$5_1) {
      break label$6
     }
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   }
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   HEAP32[$0_1 + 8 >> 2] = $3;
  }
  HEAP32[HEAP32[$0_1 + 8 >> 2] + (HEAP32[$0_1 >> 2] << 2) >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
  label$7 : {
   if (!HEAPU8[$1_1 + 138 | 0]) {
    break label$7
   }
   $4_1 = HEAP32[$1_1 + 352 >> 2];
   if ($4_1 >>> 0 >= 2) {
    $1685(HEAP32[$1_1 + 360 >> 2], $4_1, 4, 9)
   }
   if (($4_1 | 0) <= 0) {
    break label$7
   }
   $3 = 0;
   while (1) {
    $2_1 = HEAP32[HEAP32[$1_1 + 360 >> 2] + ($3 << 2) >> 2];
    if (HEAPU8[$2_1 + 138 | 0]) {
     $163($0_1, $2_1)
    }
    $3 = $3 + 1 | 0;
    if (($4_1 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $164() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0;
  label$1 : {
   $0_1 = HEAP32[18392];
   if (!HEAPU8[$0_1 + 12196 | 0]) {
    break label$1
   }
   $65(19353, 0);
   label$2 : {
    label$3 : {
     switch (HEAP32[$0_1 + 12200 >> 2] - 1 | 0) {
     case 0:
      $1610(HEAP32[$0_1 + 12204 >> 2]);
      break label$2;
     case 1:
      $1609(HEAP32[$0_1 + 12204 >> 2]);
      break label$2;
     case 3:
      break label$3;
     default:
      break label$2;
     };
    }
    if (HEAP32[$0_1 + 12208 >> 2] < 2) {
     break label$2
    }
    $1_1 = HEAP32[18392];
    $2_1 = HEAP32[$1_1 + 212 >> 2];
    if (!$2_1) {
     break label$2
    }
    $3 = HEAP32[$1_1 + 216 >> 2];
    $1_1 = HEAP32[$0_1 + 12216 >> 2];
    FUNCTION_TABLE[$2_1 | 0]($3, $1_1 ? $1_1 : 73572);
   }
   HEAP32[$0_1 + 12200 >> 2] = 0;
   HEAP32[$0_1 + 12204 >> 2] = 0;
   HEAP8[$0_1 + 12196 | 0] = 0;
   $1_1 = HEAP32[$0_1 + 12216 >> 2];
   if (!$1_1) {
    break label$1
   }
   HEAP32[$0_1 + 12208 >> 2] = 0;
   HEAP32[$0_1 + 12212 >> 2] = 0;
   $2_1 = HEAP32[18392];
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
   }
   FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
   HEAP32[$0_1 + 12216 >> 2] = 0;
  }
 }
 
 function $165($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(HEAP32[18392] + $0_1 | 0) + 236 | 0];
 }
 
 function $166($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $4_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$4_1 + 8 >> 2];
  $1_1 = HEAP32[$1_1 >> 2];
  $0_1 = HEAP32[$1_1 + 8 >> 2];
  $3 = ($2_1 & 67108864) - ($0_1 & 67108864) | 0;
  if ($3) {
   return $3 | 0
  }
  $2_1 = $2_1 & 33554432;
  $0_1 = $0_1 & 33554432;
  if (($2_1 | 0) != ($0_1 | 0)) {
   return (($0_1 | 0) == ($2_1 | 0) ? $3 : $2_1 - $0_1 | 0) | 0
  }
  return HEAP16[$4_1 + 152 >> 1] - HEAP16[$1_1 + 152 >> 1] | 0;
 }
 
 function $167() {
  var $0_1 = 0, $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = Math_fround(0);
  $8 = global$0 + -64 | 0;
  global$0 = $8;
  $9 = HEAP32[18392];
  if (HEAP32[$9 + 6988 >> 2] != HEAP32[$9 + 6984 >> 2]) {
   $161()
  }
  $19 = HEAP32[$9 + 6992 >> 2];
  $17_1 = HEAP32[$9 + 6984 >> 2];
  HEAP32[$9 + 6992 >> 2] = $17_1;
  HEAP32[$9 + 868 >> 2] = 0;
  if (HEAP32[$9 + 12180 >> 2] > 0) {
   while (1) {
    $0_1 = HEAP32[$9 + 12188 >> 2] + Math_imul($4_1, 20) | 0;
    if (HEAP32[$0_1 + 4 >> 2] == 4) {
     FUNCTION_TABLE[HEAP32[$0_1 + 12 >> 2]]($9, $0_1)
    }
    $0_1 = $4_1 + 1 | 0;
    $4_1 = $0_1;
    if (HEAP32[$9 + 12180 >> 2] > ($0_1 | 0)) {
     continue
    }
    break;
   }
  }
  if (HEAP32[$9 + 7496 >> 2]) {
   $4_1 = 0;
   while (1) {
    $7_1 = HEAP32[HEAP32[$9 + 7504 >> 2] + ($4_1 << 2) >> 2];
    $5_1 = $7_1 + 96 | 0;
    $0_1 = 0;
    while (1) {
     $1_1 = $0_1;
     $0_1 = $5_1 + Math_imul($0_1, 12) | 0;
     $3 = HEAP32[$0_1 + 4 >> 2];
     label$8 : {
      if (($3 | 0) >= 0) {
       break label$8
      }
      $6_1 = $3 + (($3 | 0) / 2 | 0) | 0;
      $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
      if (($3 | 0) >= ($6_1 | 0)) {
       break label$8
      }
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
      }
      $3 = $0_1 + 8 | 0;
      $10_1 = FUNCTION_TABLE[HEAP32[18314]]($6_1 << 2, HEAP32[18394]) | 0;
      $15_1 = HEAP32[$0_1 + 8 >> 2];
      if ($15_1) {
       $1602($10_1, $15_1, HEAP32[$0_1 >> 2] << 2);
       $15_1 = HEAP32[$3 >> 2];
       label$11 : {
        if (!$15_1) {
         break label$11
        }
        $18_1 = HEAP32[18392];
        if (!$18_1) {
         break label$11
        }
        $18_1 = $18_1 + 876 | 0;
        HEAP32[$18_1 >> 2] = HEAP32[$18_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($15_1, HEAP32[18394]);
      }
      HEAP32[$3 >> 2] = $10_1;
      HEAP32[$0_1 + 4 >> 2] = $6_1;
     }
     HEAP32[$0_1 >> 2] = 0;
     $0_1 = $1_1 + 1 | 0;
     if (!$1_1) {
      continue
     }
     break;
    };
    if (HEAP32[$7_1 + 44 >> 2]) {
     $168($5_1, $92($7_1, 0, 11755))
    }
    $0_1 = $4_1 + 1 | 0;
    $4_1 = $0_1;
    if (HEAP32[$9 + 7496 >> 2] != ($0_1 | 0)) {
     continue
    }
    break;
   };
  }
  $19 = ($19 | 0) == ($17_1 | 0);
  label$13 : {
   if ($19) {
    break label$13
   }
   $5_1 = HEAP32[18392];
   $4_1 = HEAP32[$5_1 + 7468 >> 2];
   while (1) {
    label$14 : {
     $1_1 = $0_1;
     if (($4_1 | 0) <= 0) {
      $1_1 = 0;
      break label$14;
     }
     $4_1 = $4_1 - 1 | 0;
     $0_1 = HEAP32[(HEAP32[$5_1 + 7476 >> 2] + Math_imul($4_1, 36) | 0) + 4 >> 2];
     label$17 : {
      if (!(!$0_1 | !(HEAPU8[$0_1 + 11 | 0] & 8) | (HEAPU8[$0_1 + 145 | 0] | !HEAPU8[$0_1 + 138 | 0]))) {
       $1_1 = $0_1;
       $3 = 0;
       break label$17;
      }
      $3 = 1;
     }
     $0_1 = $1_1;
     if ($3) {
      continue
     }
    }
    break;
   };
   $0_1 = HEAP32[$5_1 + 7848 >> 2];
   if ($0_1) {
    $4_1 = HEAPU8[$0_1 + 138 | 0] != 0
   } else {
    $4_1 = 0
   }
   if (!($4_1 | $1_1)) {
    break label$13
   }
   if ($1_1) {
    $4_1 = HEAP32[18392];
    $3 = HEAP32[$4_1 + 7016 >> 2];
    $0_1 = $3;
    $7_1 = HEAP32[$4_1 + 7008 >> 2];
    label$1 : {
     if (($7_1 | 0) <= 0) {
      break label$1
     }
     $7_1 = $3 + ($7_1 << 2) | 0;
     while (1) {
      if (($1_1 | 0) == HEAP32[$0_1 >> 2]) {
       break label$1
      }
      $0_1 = $0_1 + 4 | 0;
      if ($0_1 >>> 0 < $7_1 >>> 0) {
       continue
      }
      break;
     };
    }
    $3 = $0_1 - $3 | 0;
    $0_1 = $1_1;
    __inlined_func$160 : {
     if (($3 | 0) < -3) {
      break __inlined_func$160
     }
     $6_1 = HEAP32[$4_1 + 7016 >> 2];
     $0_1 = $1_1;
     $4_1 = $3 >> 2;
     while (1) {
      $3 = $0_1;
      $7_1 = $4_1;
      $4_1 = HEAP32[($4_1 << 2) + $6_1 >> 2];
      $10_1 = HEAP32[$4_1 + 8 >> 2];
      label$60 : {
       if ($10_1 & 16777216) {
        $0_1 = 4;
        break label$60;
       }
       label$81 : {
        label$9 : {
         if (HEAP32[$4_1 + 736 >> 2] == ($1_1 | 0)) {
          break label$9
         }
         $0_1 = $4_1;
         if (!$0_1) {
          break label$81
         }
         while (1) {
          if (($0_1 | 0) == ($1_1 | 0)) {
           break label$9
          }
          $0_1 = HEAP32[$0_1 + 732 >> 2];
          if ($0_1) {
           continue
          }
          break;
         };
         break label$81;
        }
        if (!(HEAPU8[$4_1 + 145 | 0] | !HEAPU8[$4_1 + 138 | 0])) {
         $0_1 = 0;
         $3 = ($10_1 >>> 25 & 1) >>> 0 > (HEAP32[$1_1 + 8 >> 2] >>> 25 & 1) >>> 0 ? $3 : $4_1;
         break label$60;
        }
        $0_1 = 0;
        break label$60;
       }
       $0_1 = 2;
      }
      label$12 : {
       switch ($0_1 | 0) {
       case 0:
       case 4:
        $0_1 = $3;
        $4_1 = $7_1 - 1 | 0;
        if (($7_1 | 0) > 0) {
         continue
        }
        break;
       default:
        break label$12;
       };
      }
      break;
     };
     $0_1 = $3;
    }
    $2_1 = Math_fround(HEAPF32[$5_1 + 6460 >> 2] * Math_fround(HEAPF32[$5_1 + 7868 >> 2] * HEAPF32[$5_1 + 5416 >> 2]));
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$23 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $1_1 = ~~$2_1;
      break label$23;
     }
     $1_1 = -2147483648;
    }
    $2_1 = HEAPF32[$5_1 + 6452 >> 2];
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$25 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$2_1;
      break label$25;
     }
     $3 = -2147483648;
    }
    $4_1 = $3 << 8;
    $1_1 = $1_1 << 24;
    $2_1 = HEAPF32[$5_1 + 6448 >> 2];
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$27 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$2_1;
      break label$27;
     }
     $3 = -2147483648;
    }
    $4_1 = $3 | $4_1;
    $2_1 = HEAPF32[$5_1 + 6456 >> 2];
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$29 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$2_1;
      break label$29;
     }
     $3 = -2147483648;
    }
    $169($0_1, $1_1 | ($4_1 | $3 << 16));
    break label$13;
   }
   if (!$4_1) {
    break label$13
   }
   $2_1 = Math_fround(HEAPF32[$5_1 + 6444 >> 2] * Math_fround(HEAPF32[$5_1 + 7868 >> 2] * HEAPF32[$5_1 + 5416 >> 2]));
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$31 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$2_1;
     break label$31;
    }
    $1_1 = -2147483648;
   }
   $2_1 = HEAPF32[$5_1 + 6436 >> 2];
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$33 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$2_1;
     break label$33;
    }
    $3 = -2147483648;
   }
   $4_1 = $3 << 8;
   $1_1 = $1_1 << 24;
   $2_1 = HEAPF32[$5_1 + 6432 >> 2];
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$35 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$2_1;
     break label$35;
    }
    $3 = -2147483648;
   }
   $4_1 = $3 | $4_1;
   $2_1 = HEAPF32[$5_1 + 6440 >> 2];
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$37 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$2_1;
     break label$37;
    }
    $3 = -2147483648;
   }
   $169($0_1, $1_1 | ($4_1 | $3 << 16));
   $0_1 = HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2];
   $1_1 = HEAP32[$5_1 + 7848 >> 2];
   $16_1 = HEAPF32[$1_1 + 20 >> 2];
   $11_1 = HEAPF32[$1_1 + 12 >> 2];
   $2_1 = HEAPF32[$5_1 + 6468 >> 2];
   $13 = HEAPF32[$1_1 + 16 >> 2];
   $12_1 = Math_fround($2_1 + Math_fround($13 + HEAPF32[$1_1 + 24 >> 2]));
   HEAPF32[$8 + 60 >> 2] = $12_1;
   $13 = Math_fround($13 - $2_1);
   HEAPF32[$8 + 52 >> 2] = $13;
   $14 = Math_fround($11_1 - $2_1);
   HEAPF32[$8 + 48 >> 2] = $14;
   $11_1 = Math_fround($2_1 + Math_fround($11_1 + $16_1));
   HEAPF32[$8 + 56 >> 2] = $11_1;
   if (!(!(HEAPF32[$0_1 + 12 >> 2] <= Math_fround($11_1 - $14)) | !(HEAPF32[$0_1 + 16 >> 2] <= Math_fround($12_1 - $13)))) {
    $2_1 = Math_fround(Math_fround(-1.0) - $2_1);
    HEAPF32[$8 + 60 >> 2] = $2_1 + $12_1;
    HEAPF32[$8 + 56 >> 2] = $2_1 + $11_1;
    HEAPF32[$8 + 52 >> 2] = $13 - $2_1;
    HEAPF32[$8 + 48 >> 2] = $14 - $2_1;
   }
   $4_1 = HEAP32[$1_1 + 580 >> 2];
   if (!HEAP32[$4_1 >> 2]) {
    $375($4_1)
   }
   $3 = HEAP32[$1_1 + 580 >> 2];
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   $7_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$8 + 40 >> 2] = $7_1;
   HEAP32[$8 + 44 >> 2] = $4_1;
   $2_1 = HEAPF32[$0_1 + 12 >> 2];
   $11_1 = HEAPF32[$0_1 + 4 >> 2];
   HEAPF32[$8 + 36 >> 2] = HEAPF32[$0_1 + 8 >> 2] + HEAPF32[$0_1 + 16 >> 2];
   HEAPF32[$8 + 32 >> 2] = $11_1 + $2_1;
   HEAP32[$8 + 16 >> 2] = $7_1;
   HEAP32[$8 + 20 >> 2] = $4_1;
   $0_1 = HEAP32[$8 + 36 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$8 + 32 >> 2];
   HEAP32[$8 + 12 >> 2] = $0_1;
   $378($3, $8 + 16 | 0, $8 + 8 | 0, 0);
   $0_1 = HEAP32[18392];
   $2_1 = Math_fround(HEAPF32[$0_1 + 6428 >> 2] * Math_fround(HEAPF32[$5_1 + 7860 >> 2] * HEAPF32[$0_1 + 5416 >> 2]));
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$41 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$2_1;
     break label$41;
    }
    $4_1 = -2147483648;
   }
   $2_1 = HEAPF32[$0_1 + 6420 >> 2];
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$43 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $3 = ~~$2_1;
     break label$43;
    }
    $3 = -2147483648;
   }
   $3 = $3 << 8;
   $7_1 = $8 + 56 | 0;
   $4_1 = $4_1 << 24;
   $2_1 = HEAPF32[$0_1 + 6416 >> 2];
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$45 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $17_1 = ~~$2_1;
     break label$45;
    }
    $17_1 = -2147483648;
   }
   $3 = $17_1 | $3;
   $17_1 = HEAP32[$1_1 + 580 >> 2];
   $6_1 = $8 + 48 | 0;
   $2_1 = HEAPF32[$0_1 + 6424 >> 2];
   $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
   label$47 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$2_1;
     break label$47;
    }
    $0_1 = -2147483648;
   }
   $400($17_1, $6_1, $7_1, $4_1 | ($3 | $0_1 << 16), HEAPF32[$1_1 + 68 >> 2], 0, Math_fround(3.0));
   $380(HEAP32[$1_1 + 580 >> 2]);
  }
  $0_1 = HEAP32[$9 + 7844 >> 2];
  $1_1 = 0;
  label$49 : {
   if (!$0_1) {
    break label$49
   }
   $1_1 = 0;
   if (HEAPU8[$0_1 + 9 | 0] & 32) {
    break label$49
   }
   $1_1 = HEAP32[$0_1 + 736 >> 2];
  }
  HEAP32[$8 + 48 >> 2] = $1_1;
  $0_1 = $0_1 ? HEAP32[$9 + 7852 >> 2] : 0;
  $3 = $0_1;
  HEAP32[$8 + 52 >> 2] = $0_1;
  if (HEAP32[$9 + 7008 >> 2]) {
   $4_1 = 0;
   while (1) {
    $0_1 = HEAP32[HEAP32[$9 + 7016 >> 2] + ($4_1 << 2) >> 2];
    label$53 : {
     if (!HEAPU8[$0_1 + 138 | 0] | HEAPU8[$0_1 + 145 | 0]) {
      break label$53
     }
     $7_1 = HEAP32[$0_1 + 8 >> 2];
     if ($7_1 & 16777216 | ($0_1 | 0) == ($1_1 | 0) | ($0_1 | 0) == ($3 | 0)) {
      break label$53
     }
     $170($0_1, $7_1 >>> 25 & 1);
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != HEAP32[$9 + 7008 >> 2]) {
     continue
    }
    break;
   };
  }
  $0_1 = 0;
  while (1) {
   $1_1 = $0_1;
   $0_1 = HEAP32[($8 + 48 | 0) + ($0_1 << 2) >> 2];
   if (!(!$0_1 | !HEAPU8[$0_1 + 138 | 0] | HEAPU8[$0_1 + 145 | 0])) {
    $170($0_1, HEAP32[$0_1 + 8 >> 2] >>> 25 & 1)
   }
   $0_1 = $1_1 + 1 | 0;
   if (!$1_1) {
    continue
   }
   break;
  };
  $0_1 = $9 + 860 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  if (HEAP32[$9 + 7496 >> 2] > 0) {
   $4_1 = 0;
   while (1) {
    $7_1 = HEAP32[HEAP32[$9 + 7504 >> 2] + ($4_1 << 2) >> 2];
    $17_1 = $7_1 + 96 | 0;
    $0_1 = $17_1;
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    $6_1 = HEAP32[$0_1 >> 2];
    $3 = $6_1 + HEAP32[$0_1 + 12 >> 2] | 0;
    label$16 : {
     if (($1_1 | 0) >= ($3 | 0)) {
      break label$16
     }
     $5_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
     $5_1 = ($3 | 0) < ($5_1 | 0) ? $5_1 : $3;
     if (($1_1 | 0) >= ($5_1 | 0)) {
      break label$16
     }
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
     }
     $1_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1 << 2, HEAP32[18394]) | 0;
     $10_1 = HEAP32[$0_1 + 8 >> 2];
     if ($10_1) {
      $1602($1_1, $10_1, HEAP32[$0_1 >> 2] << 2);
      $10_1 = HEAP32[$0_1 + 8 >> 2];
      label$67 : {
       if (!$10_1) {
        break label$67
       }
       $15_1 = HEAP32[18392];
       if (!$15_1) {
        break label$67
       }
       $15_1 = $15_1 + 876 | 0;
       HEAP32[$15_1 >> 2] = HEAP32[$15_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($10_1, HEAP32[18394]);
     }
     HEAP32[$0_1 + 4 >> 2] = $5_1;
     HEAP32[$0_1 + 8 >> 2] = $1_1;
    }
    HEAP32[$0_1 >> 2] = $3;
    $1_1 = HEAP32[$0_1 + 12 >> 2];
    if ($1_1) {
     $1602(HEAP32[$0_1 + 8 >> 2] + ($6_1 << 2) | 0, HEAP32[$0_1 + 20 >> 2], $1_1 << 2);
     $1_1 = HEAP32[$0_1 + 16 >> 2];
     label$88 : {
      if (($1_1 | 0) >= 0) {
       break label$88
      }
      $3 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
      $3 = ($3 | 0) > 0 ? $3 : 0;
      if (($1_1 | 0) >= ($3 | 0)) {
       break label$88
      }
      $1_1 = HEAP32[18392];
      if ($1_1) {
       $1_1 = $1_1 + 876 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
      }
      $1_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 2, HEAP32[18394]) | 0;
      $5_1 = HEAP32[$0_1 + 20 >> 2];
      if ($5_1) {
       $1602($1_1, $5_1, HEAP32[$0_1 + 12 >> 2] << 2);
       $5_1 = HEAP32[$0_1 + 20 >> 2];
       label$119 : {
        if (!$5_1) {
         break label$119
        }
        $6_1 = HEAP32[18392];
        if (!$6_1) {
         break label$119
        }
        $6_1 = $6_1 + 876 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
      }
      HEAP32[$0_1 + 16 >> 2] = $3;
      HEAP32[$0_1 + 20 >> 2] = $1_1;
     }
     HEAP32[$0_1 + 12 >> 2] = 0;
    }
    if (!($19 | !HEAPU8[$9 + 176 | 0])) {
     $0_1 = $92($7_1, 1, 11768);
     $3 = HEAP32[$9 + 232 >> 2];
     $5_1 = HEAP32[$9 + 228 >> 2];
     HEAP32[$8 + 24 >> 2] = $5_1;
     HEAP32[$8 + 28 >> 2] = $3;
     $1_1 = HEAP32[$9 + 7872 >> 2];
     $2_1 = HEAPF32[$9 + 5600 >> 2];
     HEAP32[$8 >> 2] = $5_1;
     HEAP32[$8 + 4 >> 2] = $3;
     $14 = Math_fround(0.0);
     $11_1 = Math_fround(0.0);
     $10_1 = 0;
     $13 = Math_fround(0.0);
     $3 = global$0 - 48 | 0;
     global$0 = $3;
     label$18 : {
      if (($1_1 | 0) == -1) {
       break label$18
      }
      $5_1 = HEAP32[HEAP32[HEAP32[$0_1 + 44 >> 2] + 8 >> 2] + 48 >> 2];
      $6_1 = $3 + 40 | 0;
      HEAP32[$6_1 >> 2] = 0;
      HEAP32[$6_1 + 4 >> 2] = 0;
      $6_1 = $3 + 32 | 0;
      HEAP32[$6_1 >> 2] = 0;
      HEAP32[$6_1 + 4 >> 2] = 0;
      HEAP32[$3 + 24 >> 2] = 0;
      HEAP32[$3 + 28 >> 2] = 0;
      HEAP32[$3 + 16 >> 2] = 0;
      HEAP32[$3 + 20 >> 2] = 0;
      $12_1 = Math_fround(0.0);
      label$210 : {
       if ($1_1 >>> 0 > 8) {
        break label$210
       }
       $12_1 = Math_fround(0.0);
       if (HEAPU8[$5_1 | 0] & 2) {
        break label$210
       }
       $10_1 = HEAP32[$5_1 + 72 >> 2] + Math_imul(HEAP32[$5_1 + 1120 >> 2], 28) | 0;
       $15_1 = HEAPU16[$10_1 + 4 >> 1];
       $12_1 = HEAPF32[$5_1 + 36 >> 2];
       $1_1 = Math_imul($1_1, 24);
       $11_1 = Math_fround(HEAPF32[$1_1 + 21428 >> 2] + Math_fround(HEAPU16[$10_1 + 6 >> 1]));
       $13 = HEAPF32[$5_1 + 40 >> 2];
       $14 = Math_fround($11_1 * $13);
       HEAPF32[$3 + 36 >> 2] = $14;
       $16_1 = $13;
       $13 = HEAPF32[$1_1 + 21436 >> 2];
       $16_1 = Math_fround($16_1 * Math_fround($11_1 + $13));
       HEAPF32[$3 + 44 >> 2] = $16_1;
       HEAPF32[$3 + 20 >> 2] = $14;
       $11_1 = Math_fround(HEAPF32[$1_1 + 21424 >> 2] + Math_fround($15_1 >>> 0));
       HEAPF32[$3 + 16 >> 2] = $12_1 * $11_1;
       $14 = Math_fround($11_1 + Math_fround(123.0));
       HEAPF32[$3 + 32 >> 2] = $12_1 * $14;
       HEAPF32[$3 + 28 >> 2] = $16_1;
       $16_1 = $11_1;
       $11_1 = HEAPF32[$1_1 + 21432 >> 2];
       HEAPF32[$3 + 24 >> 2] = $12_1 * Math_fround($16_1 + $11_1);
       HEAPF32[$3 + 40 >> 2] = $12_1 * Math_fround($14 + $11_1);
       $14 = HEAPF32[$1_1 + 21444 >> 2];
       $10_1 = 1;
       $12_1 = HEAPF32[$1_1 + 21440 >> 2];
      }
      if (!$10_1) {
       break label$18
      }
      $12_1 = Math_fround(HEAPF32[$8 >> 2] - $12_1);
      HEAPF32[$8 >> 2] = $12_1;
      $14 = Math_fround(HEAPF32[$8 + 4 >> 2] - $14);
      HEAPF32[$8 + 4 >> 2] = $14;
      $1_1 = HEAP32[$5_1 + 4 >> 2];
      $381($0_1, $1_1);
      $16_1 = Math_fround(Math_fround($2_1 * Math_fround(0.0)) + $14);
      HEAPF32[$3 + 12 >> 2] = $16_1;
      HEAPF32[$3 + 8 >> 2] = $12_1 + $2_1;
      $20_1 = Math_fround(Math_fround(Math_fround($13 + Math_fround(0.0)) * $2_1) + $14);
      HEAPF32[$3 + 4 >> 2] = $20_1;
      HEAPF32[$3 >> 2] = Math_fround(Math_fround($11_1 + Math_fround(1.0)) * $2_1) + $12_1;
      $5_1 = $3 + 8 | 0;
      $10_1 = $3 + 40 | 0;
      $417($0_1, $1_1, $5_1, $3, $6_1, $10_1, 805306368);
      HEAPF32[$3 + 12 >> 2] = $16_1;
      HEAPF32[$3 + 8 >> 2] = Math_fround($2_1 + $2_1) + $12_1;
      HEAPF32[$3 + 4 >> 2] = $20_1;
      HEAPF32[$3 >> 2] = Math_fround(Math_fround($11_1 + Math_fround(2.0)) * $2_1) + $12_1;
      $417($0_1, $1_1, $5_1, $3, $6_1, $10_1, 805306368);
      $13 = Math_fround(Math_fround($13 * $2_1) + $14);
      HEAPF32[$3 + 12 >> 2] = $13;
      $2_1 = Math_fround(Math_fround($11_1 * $2_1) + $12_1);
      HEAPF32[$3 + 8 >> 2] = $2_1;
      $417($0_1, $1_1, $8, $5_1, $6_1, $10_1, -16777216);
      HEAPF32[$3 + 12 >> 2] = $13;
      HEAPF32[$3 + 8 >> 2] = $2_1;
      $6_1 = $1_1;
      $1_1 = $3 + 16 | 0;
      $417($0_1, $6_1, $8, $5_1, $1_1, $1_1 | 8, -1);
      $1_1 = HEAP32[$0_1 + 72 >> 2];
      $5_1 = $1_1 - 1 | 0;
      HEAP32[$0_1 + 72 >> 2] = $5_1;
      $1_1 = $5_1 ? HEAP32[(HEAP32[$0_1 + 80 >> 2] + ($1_1 << 2) | 0) - 8 >> 2] : 0;
      HEAP32[$0_1 + 112 >> 2] = $1_1;
      $10_1 = HEAP32[$0_1 + 8 >> 2];
      $15_1 = HEAP32[$0_1 >> 2];
      $5_1 = $15_1 - 1 | 0;
      $6_1 = $10_1 + Math_imul($5_1, 40) | 0;
      $18_1 = HEAP32[$6_1 + 28 >> 2];
      if (!(!$18_1 | HEAP32[$6_1 + 16 >> 2] == ($1_1 | 0))) {
       $375($0_1);
       break label$18;
      }
      label$711 : {
       if (($15_1 | 0) < 2 | $18_1) {
        break label$711
       }
       $6_1 = $6_1 - 40 | 0;
       if ($1645($0_1 + 96 | 0, $6_1, 24) | HEAP32[$6_1 + 32 >> 2]) {
        break label$711
       }
       HEAP32[$0_1 >> 2] = $5_1;
       break label$18;
      }
      HEAP32[($10_1 + Math_imul($5_1, 40) | 0) + 16 >> 2] = $1_1;
     }
     global$0 = $3 + 48 | 0;
    }
    if (HEAP32[$7_1 + 48 >> 2]) {
     $168($17_1, $92($7_1, 1, 11768))
    }
    $3 = $4_1;
    $0_1 = HEAP32[18392];
    HEAP8[$7_1 + 52 | 0] = 1;
    $5_1 = HEAP32[$7_1 + 96 >> 2];
    $1_1 = ($5_1 | 0) <= 0;
    $4_1 = $1_1 ? 0 : HEAP32[$7_1 + 104 >> 2];
    $6_1 = $7_1 + 60 | 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    HEAP32[$7_1 + 56 >> 2] = $5_1;
    HEAP32[$7_1 + 68 >> 2] = $4_1;
    $4_1 = HEAP32[$7_1 + 8 >> 2];
    $6_1 = $7_1 + 72 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$7_1 + 16 >> 2];
    $6_1 = $7_1 + 80 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 + 12 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    $0_1 = $0_1 + 168 | 0;
    $4_1 = HEAP32[$0_1 + 4 >> 2];
    $6_1 = $7_1 + 88 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $4_1;
    if (!$1_1) {
     $6_1 = HEAP32[$7_1 + 104 >> 2];
     $4_1 = 0;
     $0_1 = 0;
     $1_1 = 0;
     while (1) {
      $10_1 = HEAP32[$6_1 + ($1_1 << 2) >> 2];
      $4_1 = HEAP32[$10_1 + 12 >> 2] + $4_1 | 0;
      $0_1 = HEAP32[$10_1 + 24 >> 2] + $0_1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if (($5_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     HEAP32[$7_1 + 60 >> 2] = $4_1;
     HEAP32[$7_1 + 64 >> 2] = $0_1;
    }
    HEAP32[$9 + 860 >> 2] = HEAP32[$9 + 860 >> 2] + HEAP32[$7_1 + 64 >> 2];
    HEAP32[$9 + 864 >> 2] = HEAP32[$9 + 864 >> 2] + HEAP32[$7_1 + 60 >> 2];
    $4_1 = $3 + 1 | 0;
    if (($4_1 | 0) < HEAP32[$9 + 7496 >> 2]) {
     continue
    }
    break;
   };
  }
  if (HEAP32[$9 + 12180 >> 2] > 0) {
   $4_1 = 0;
   while (1) {
    $0_1 = HEAP32[$9 + 12188 >> 2] + Math_imul($4_1, 20) | 0;
    if (HEAP32[$0_1 + 4 >> 2] == 5) {
     FUNCTION_TABLE[HEAP32[$0_1 + 12 >> 2]]($9, $0_1)
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) < HEAP32[$9 + 12180 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $8 - -64 | 0;
 }
 
 function $168($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $2_1 = $2_1 - 1 | 0;
   $3 = HEAP32[$1_1 + 8 >> 2] + Math_imul($2_1, 40) | 0;
   if (HEAP32[$3 + 28 >> 2] | HEAP32[$3 + 32 >> 2]) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $2_1;
  }
  if (HEAP32[$1_1 >> 2]) {
   $3 = HEAP32[$0_1 >> 2];
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   label$2 : {
    if (($3 | 0) != ($2_1 | 0)) {
     break label$2
    }
    $4_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
    $3 = $3 + 1 | 0;
    $3 = ($3 | 0) < ($4_1 | 0) ? $4_1 : $3;
    if (($2_1 | 0) >= ($3 | 0)) {
     break label$2
    }
    $2_1 = HEAP32[18392];
    if ($2_1) {
     $2_1 = $2_1 + 876 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
    }
    $2_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 2, HEAP32[18394]) | 0;
    $4_1 = HEAP32[$0_1 + 8 >> 2];
    if ($4_1) {
     $1602($2_1, $4_1, HEAP32[$0_1 >> 2] << 2);
     $4_1 = HEAP32[$0_1 + 8 >> 2];
     label$7 : {
      if (!$4_1) {
       break label$7
      }
      $5_1 = HEAP32[18392];
      if (!$5_1) {
       break label$7
      }
      $5_1 = $5_1 + 876 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
    }
    HEAP32[$0_1 + 4 >> 2] = $3;
    HEAP32[$0_1 + 8 >> 2] = $2_1;
   }
   HEAP32[HEAP32[$0_1 + 8 >> 2] + (HEAP32[$0_1 >> 2] << 2) >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
  }
 }
 
 function $169($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  if ($1_1 >>> 0 >= 16777216) {
   $3 = HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2];
   $9 = HEAPF32[$3 + 12 >> 2];
   $7_1 = HEAPF32[$3 + 4 >> 2];
   $2_1 = $5_1 + 92 | 0;
   $8 = HEAPF32[$3 + 8 >> 2];
   HEAPF32[$2_1 >> 2] = $8 + HEAPF32[$3 + 16 >> 2];
   HEAPF32[$5_1 + 84 >> 2] = $8;
   HEAPF32[$5_1 + 80 >> 2] = $7_1;
   HEAPF32[$5_1 + 88 >> 2] = $7_1 + $9;
   $0_1 = HEAP32[HEAP32[$0_1 + 736 >> 2] + 580 >> 2];
   if (!HEAP32[$0_1 >> 2]) {
    $375($0_1)
   }
   HEAPF32[$5_1 + 76 >> 2] = HEAPF32[$5_1 + 84 >> 2] + Math_fround(-1.0);
   HEAPF32[$5_1 + 72 >> 2] = HEAPF32[$5_1 + 80 >> 2] + Math_fround(-1.0);
   HEAPF32[$5_1 + 64 >> 2] = HEAPF32[$5_1 + 88 >> 2] + Math_fround(1.0);
   HEAPF32[$5_1 + 68 >> 2] = HEAPF32[$2_1 >> 2] + Math_fround(1.0);
   $3 = HEAP32[$5_1 + 76 >> 2];
   HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 72 >> 2];
   HEAP32[$5_1 + 20 >> 2] = $3;
   $3 = HEAP32[$5_1 + 68 >> 2];
   HEAP32[$5_1 + 8 >> 2] = HEAP32[$5_1 + 64 >> 2];
   HEAP32[$5_1 + 12 >> 2] = $3;
   $378($0_1, $5_1 + 16 | 0, $5_1 + 8 | 0, 0);
   $401($0_1, $5_1 + 80 | 0, $5_1 + 88 | 0, $1_1, Math_fround(0.0), 0);
   $3 = (HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0) - 40 | 0;
   $2_1 = $3 + 32 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $5_1 + 24 | 0;
   $4_1 = $1_1 + 32 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $2_1 = $3 + 24 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = $1_1 + 24 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $2_1 = $3 + 16 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = $1_1 + 16 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $2_1 = $3 + 8 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = $1_1 + 8 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$5_1 + 24 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5_1 + 28 >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] - 1;
   $3 = HEAP32[$0_1 >> 2];
   label$1 : {
    if (!$3) {
     $2_1 = HEAP32[$0_1 + 4 >> 2];
     label$3 : {
      if (($2_1 | 0) != ($3 | 0)) {
       break label$3
      }
      $4_1 = $2_1;
      $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
      $3 = $3 + 1 | 0;
      $3 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
      if (($4_1 | 0) >= ($3 | 0)) {
       break label$3
      }
      $2_1 = HEAP32[18392];
      if ($2_1) {
       $2_1 = $2_1 + 876 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
      }
      $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($3, 40), HEAP32[18394]) | 0;
      $6_1 = HEAP32[$0_1 + 8 >> 2];
      if ($6_1) {
       $1602($2_1, $6_1, Math_imul(HEAP32[$0_1 >> 2], 40));
       $6_1 = HEAP32[$0_1 + 8 >> 2];
       label$8 : {
        if (!$6_1) {
         break label$8
        }
        $4_1 = HEAP32[18392];
        if (!$4_1) {
         break label$8
        }
        $4_1 = $4_1 + 876 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($6_1, HEAP32[18394]);
      }
      HEAP32[$0_1 + 4 >> 2] = $3;
      HEAP32[$0_1 + 8 >> 2] = $2_1;
     }
     $3 = HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0;
     break label$1;
    }
    $2_1 = HEAP32[$0_1 + 4 >> 2];
    label$9 : {
     if (($2_1 | 0) != ($3 | 0)) {
      break label$9
     }
     $4_1 = $2_1;
     $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
     $3 = $3 + 1 | 0;
     $3 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
     if (($4_1 | 0) >= ($3 | 0)) {
      break label$9
     }
     $2_1 = HEAP32[18392];
     if ($2_1) {
      $2_1 = $2_1 + 876 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
     }
     $2_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($3, 40), HEAP32[18394]) | 0;
     $6_1 = HEAP32[$0_1 + 8 >> 2];
     if ($6_1) {
      $1602($2_1, $6_1, Math_imul(HEAP32[$0_1 >> 2], 40));
      $6_1 = HEAP32[$0_1 + 8 >> 2];
      label$14 : {
       if (!$6_1) {
        break label$14
       }
       $4_1 = HEAP32[18392];
       if (!$4_1) {
        break label$14
       }
       $4_1 = $4_1 + 876 | 0;
       HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($6_1, HEAP32[18394]);
     }
     HEAP32[$0_1 + 4 >> 2] = $3;
     HEAP32[$0_1 + 8 >> 2] = $2_1;
    }
    $3 = HEAP32[$0_1 >> 2];
    if (($3 | 0) > 0) {
     $2_1 = HEAP32[$0_1 + 8 >> 2];
     $1603($2_1 + 40 | 0, $2_1, Math_imul($3, 40));
    }
    $3 = HEAP32[$0_1 + 8 >> 2];
   }
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$3 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $2_1;
   $2_1 = $1_1 + 32 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = $3 + 32 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $2_1 = $1_1 + 24 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = $3 + 24 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $2_1 = $1_1 + 16 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = $3 + 16 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $6_1;
   $1_1 = $1_1 + 8 | 0;
   $2_1 = HEAP32[$1_1 + 4 >> 2];
   $3 = $3 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   $380($0_1);
  }
  global$0 = $5_1 + 96 | 0;
 }
 
 function $170($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[18392];
  $3 = HEAP32[HEAP32[$2_1 + 7504 >> 2] >> 2];
  $2_1 = $2_1 + 868 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
  $168(($3 + Math_imul($1_1, 12) | 0) + 96 | 0, HEAP32[$0_1 + 580 >> 2]);
  if (HEAP32[$0_1 + 352 >> 2] > 0) {
   $2_1 = 0;
   while (1) {
    $3 = HEAP32[HEAP32[$0_1 + 360 >> 2] + ($2_1 << 2) >> 2];
    if (!(!HEAPU8[$3 + 138 | 0] | HEAPU8[$3 + 145 | 0])) {
     $170($3, $1_1)
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < HEAP32[$0_1 + 352 >> 2]) {
     continue
    }
    break;
   };
  }
 }
 
 function $171($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[(HEAP32[18392] + ($0_1 << 2) | 0) + 52 >> 2];
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  return (($0_1 | 0) >= 0 ? HEAPU8[(HEAP32[18392] + $0_1 | 0) + 256 | 0] != 0 : $1_1) | 0;
 }
 
 function $173($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  var $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $3 = 0;
  label$1 : {
   if (($0_1 | 0) < 0) {
    break label$1
   }
   $4_1 = HEAP32[18392];
   $6_1 = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 1140 >> 2];
   $3 = 1;
   if ($6_1 == Math_fround(0.0)) {
    break label$1
   }
   $5_1 = Math_fround($6_1 - HEAPF32[$4_1 + 24 >> 2]);
   $3 = 0;
   if ($5_1 >= $6_1) {
    break label$1
   }
   if ($2_1 <= Math_fround(0.0)) {
    return $1_1 <= $6_1 & $1_1 > $5_1
   }
   $4_1 = -1;
   if ($1_1 > $5_1) {
    $0_1 = $4_1
   } else {
    $5_1 = Math_fround(Math_fround($5_1 - $1_1) / $2_1);
    label$4 : {
     if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$5_1;
      break label$4;
     }
     $0_1 = -2147483648;
    }
   }
   if (!($1_1 > $6_1)) {
    $1_1 = Math_fround(Math_fround($6_1 - $1_1) / $2_1);
    label$7 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $4_1 = ~~$1_1;
      break label$7;
     }
     $4_1 = -2147483648;
    }
   }
   $3 = $4_1 - $0_1 | 0;
  }
  return $3 | 0;
 }
 
 function $174($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  label$1 : {
   if (($0_1 | 0) < 0) {
    break label$1
   }
   $6_1 = HEAP32[18392];
   $2_1 = HEAPF32[($6_1 + ($0_1 << 2) | 0) + 1140 >> 2];
   $5_1 = $2_1 == Math_fround(0.0);
   if ($5_1) {
    return $5_1 | 0
   }
   if (!$1_1) {
    break label$1
   }
   $3 = HEAPF32[$6_1 + 140 >> 2];
   if (!($2_1 > $3)) {
    return 0
   }
   $5_1 = 0;
   $4_1 = Math_fround($2_1 - HEAPF32[$6_1 + 24 >> 2]);
   if ($4_1 >= $2_1) {
    break label$1
   }
   $7_1 = HEAPF32[$6_1 + 144 >> 2];
   if ($7_1 <= Math_fround(0.0)) {
    return $3 > $4_1 & $2_1 >= $3
   }
   $0_1 = -1;
   if ($3 > $4_1) {
    $1_1 = $0_1
   } else {
    $4_1 = Math_fround(Math_fround($4_1 - $3) / $7_1);
    label$6 : {
     if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
      $1_1 = ~~$4_1;
      break label$6;
     }
     $1_1 = -2147483648;
    }
   }
   if (!($2_1 < $3)) {
    $2_1 = Math_fround(Math_fround($2_1 - $3) / $7_1);
    label$9 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$2_1;
      break label$9;
     }
     $0_1 = -2147483648;
    }
   }
   $5_1 = ($0_1 | 0) > ($1_1 | 0);
  }
  return $5_1 | 0;
 }
 
 function $175($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (($0_1 | 0) < 0) {
    break label$1
   }
   $2_1 = HEAP32[18392];
   $1_1 = 0;
   if (!(HEAPF32[($2_1 + ($0_1 << 2) | 0) + 3188 >> 2] >= Math_fround(0.0))) {
    break label$1
   }
   $1_1 = !HEAPU8[($0_1 + $2_1 | 0) + 256 | 0];
  }
  return $1_1 | 0;
 }
 
 function $176($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  $5_1 = HEAP32[18392];
  $2_1 = HEAPF32[($5_1 + ($0_1 << 2) | 0) + 1040 >> 2];
  if ($2_1 == Math_fround(0.0)) {
   return 1
  }
  label$2 : {
   label$3 : {
    if (!$1_1) {
     break label$3
    }
    $3 = HEAPF32[$5_1 + 140 >> 2];
    if (!($2_1 > $3)) {
     break label$3
    }
    $4_1 = Math_fround($2_1 - HEAPF32[$5_1 + 24 >> 2]);
    $1_1 = 0;
    label$4 : {
     if ($4_1 >= $2_1) {
      break label$4
     }
     $6_1 = Math_fround(HEAPF32[$5_1 + 144 >> 2] * Math_fround(.5));
     $1_1 = $3 > $4_1 & $2_1 >= $3;
     if ($6_1 <= Math_fround(0.0)) {
      break label$4
     }
     $0_1 = -1;
     if ($3 > $4_1) {
      $1_1 = $0_1
     } else {
      $4_1 = Math_fround(Math_fround($4_1 - $3) / $6_1);
      label$7 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $1_1 = ~~$4_1;
        break label$7;
       }
       $1_1 = -2147483648;
      }
     }
     if (!($2_1 < $3)) {
      $2_1 = Math_fround(Math_fround($2_1 - $3) / $6_1);
      label$10 : {
       if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$2_1;
        break label$10;
       }
       $0_1 = -2147483648;
      }
     }
     $1_1 = $0_1 - $1_1 | 0;
    }
    $0_1 = 1;
    if (($1_1 | 0) > 0) {
     break label$2
    }
   }
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $177($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[(HEAP32[18392] + $0_1 | 0) + 1022 | 0];
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU16[(HEAP32[18392] + ($0_1 << 1) | 0) + 1002 >> 1] == 2 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU16[(HEAP32[18392] + ($0_1 << 1) | 0) + 1002 >> 1];
 }
 
 function $180($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  $0_1 = $0_1 < Math_fround(0.0) ? HEAPF32[$1_1 + 48 >> 2] : $0_1;
  return HEAPF32[$1_1 + 1120 >> 2] >= Math_fround($0_1 * $0_1);
 }
 
 function $181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[18392];
  if (HEAPU8[($2_1 + $0_1 | 0) + 236 | 0]) {
   $1_1 = $1_1 < Math_fround(0.0) ? HEAPF32[$2_1 + 48 >> 2] : $1_1;
   $3 = HEAPF32[(($0_1 << 2) + $2_1 | 0) + 1120 >> 2] >= Math_fround($1_1 * $1_1);
  }
  return $3 | 0;
 }
 
 function $182($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392] + 228 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $184() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = 1;
  $1_1 = HEAP32[18392];
  if (!HEAPU8[$1_1 + 236 | 0]) {
   $0_1 = 0;
   while (1) {
    $2_1 = $0_1;
    $0_1 = $0_1 + 1 | 0;
    if (($0_1 | 0) != 5) {
     if (!HEAPU8[($0_1 + $1_1 | 0) + 236 | 0]) {
      continue
     }
    }
    break;
   };
   $0_1 = $2_1 >>> 0 < 4;
  }
  return $0_1 | 0;
 }
 
 function $186($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  $0_1 = ($1_1 + ($0_1 << 3) | 0) + 908 | 0;
  $1_1 = $1_1 + 228 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $187() {
  return HEAP32[HEAP32[18392] + 7872 >> 2];
 }
 
 function $188($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[HEAP32[18392] + 7872 >> 2] = $0_1;
 }
 
 function $189($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[HEAP32[18392] + 12792 >> 2] = $0_1;
 }
 
 function $190($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[HEAP32[18392] + 12788 >> 2] = $0_1;
 }
 
 function $191() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7136 >> 2];
  if ($1_1) {
   $2_1 = HEAP32[$0_1 + 7240 >> 2] == ($1_1 | 0)
  }
  return $2_1 | 0;
 }
 
 function $192() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  $0_1 = HEAP32[$1_1 + 7136 >> 2];
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    $2_1 = HEAP32[$1_1 + 7240 >> 2];
    if (($0_1 | 0) != ($2_1 | 0)) {
     break label$2
    }
    $0_1 = 1;
    if (HEAP32[$1_1 + 7196 >> 2] != ($2_1 | 0)) {
     break label$1
    }
   }
   $0_1 = 0;
  }
  return $0_1 | 0;
 }
 
 function $193() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[18392];
  $0_1 = HEAP32[$2_1 + 7248 >> 2];
  if ($0_1 & 32) {
   return ($0_1 & 64) >>> 6 | 0
  }
  $1_1 = HEAP32[$2_1 + 7196 >> 2];
  if (!$1_1) {
   return 0
  }
  $0_1 = 0;
  $3 = $1_1;
  $1_1 = HEAP32[$2_1 + 7240 >> 2];
  if (($3 | 0) == ($1_1 | 0)) {
   $0_1 = HEAP32[$2_1 + 7136 >> 2] != ($1_1 | 0)
  }
  return $0_1 | 0;
 }
 
 function $194() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = HEAP32[18392];
  $0_1 = HEAP32[$1_1 + 7248 >> 2];
  label$1 : {
   label$2 : {
    if ($0_1 & 32) {
     $3 = ($0_1 & 64) >>> 6 | 0;
     break label$2;
    }
    $0_1 = HEAP32[$1_1 + 7196 >> 2];
    if (!$0_1) {
     return 0
    }
    $3 = $0_1;
    $0_1 = HEAP32[$1_1 + 7240 >> 2];
    $2_1 = 0;
    if (($3 | 0) != ($0_1 | 0)) {
     break label$1
    }
    $3 = HEAP32[$1_1 + 7136 >> 2] != ($0_1 | 0);
   }
   if (!$3) {
    return 0
   }
   $2_1 = 1;
   if (HEAPU8[$1_1 + 7201 | 0]) {
    break label$1
   }
   $2_1 = 0;
   if (HEAP32[$1_1 + 7136 >> 2]) {
    break label$1
   }
   $2_1 = HEAPU8[$1_1 + 7152 | 0] != 0;
  }
  return $2_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  if (HEAPF32[(HEAP32[18392] + ($0_1 << 2) | 0) + 1040 >> 2] == Math_fround(0.0)) {
   $1_1 = $89(0)
  }
  return $1_1 | 0;
 }
 
 function $196() {
  return (HEAPU8[HEAP32[18392] + 7248 | 0] & 16) >>> 4 | 0;
 }
 
 function $197() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = 1;
  $1_1 = HEAP32[18392];
  if (!HEAP32[$1_1 + 7116 >> 2]) {
   $0_1 = HEAP32[$1_1 + 7120 >> 2] != 0
  }
  return $0_1 | 0;
 }
 
 function $198() {
  return HEAP32[HEAP32[18392] + 7136 >> 2] != 0 | 0;
 }
 
 function $199() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  if (HEAP32[$0_1 + 7512 >> 2]) {
   $1_1 = !HEAPU8[$0_1 + 7570 | 0]
  }
  return $1_1 | 0;
 }
 
 function $200() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7080 >> 2];
  if (!(HEAPF32[$0_1 + 7256 >> 2] < HEAPF32[$1_1 + 508 >> 2])) {
   return 0
  }
  if (!(HEAPF32[$0_1 + 7264 >> 2] > HEAPF32[$1_1 + 500 >> 2])) {
   return 0
  }
  return (HEAPF32[$0_1 + 7252 >> 2] < HEAPF32[$1_1 + 504 >> 2] ? HEAPF32[$0_1 + 7260 >> 2] > HEAPF32[$1_1 + 496 >> 2] : $2_1) | 0;
 }
 
 function $201() {
  return (HEAPU8[HEAP32[18392] + 7248 | 0] & 4) >>> 2 | 0;
 }
 
 function $202() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7240 >> 2];
  if (($1_1 | 0) == HEAP32[$0_1 + 7116 >> 2]) {
   HEAP8[$0_1 + 7124 | 0] = 1
  }
  if (($1_1 | 0) == HEAP32[$0_1 + 7136 >> 2]) {
   HEAP8[$0_1 + 7149 | 0] = 1
  }
 }
 
 function $203() {
  var $0_1 = 0;
  $0_1 = HEAP32[18392];
  HEAP16[$0_1 + 7596 >> 1] = 0;
  HEAP8[$0_1 + 7572 | 0] = HEAPU8[$0_1 + 7573 | 0];
 }
 
 function $204($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392] + 7252 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $205($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392] + 7260 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $207($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $6_1 = HEAP32[18392];
  $7_1 = HEAP32[$6_1 + 7080 >> 2];
  $11_1 = HEAPF32[$7_1 + 524 >> 2];
  $12_1 = HEAP32[$7_1 + 8 >> 2];
  $13 = HEAPF32[$7_1 + 212 >> 2];
  $10_1 = HEAPF32[$2_1 >> 2];
  $14 = HEAPF32[$7_1 + 208 >> 2];
  if (HEAP32[$7_1 + 368 >> 2] | HEAP32[$6_1 + 8036 >> 2]) {
   $5_1 = $7_1 + 472 | 0
  } else {
   $5_1 = $7_1 + 520 | 0
  }
  $15_1 = HEAPF32[$5_1 >> 2];
  $9 = HEAPF32[$2_1 + 4 >> 2];
  HEAP32[$6_1 + 7300 >> 2] = HEAP32[$6_1 + 7300 >> 2] | 2;
  HEAP32[$6_1 + 7308 >> 2] = 1;
  $12_1 = $12_1 & 4;
  $13 = Math_fround($11_1 - $13);
  if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
   $2_1 = ~~$9
  } else {
   $2_1 = -2147483648
  }
  $11_1 = Math_fround($2_1 | 0);
  $9 = Math_fround($13 + $11_1);
  HEAPF32[$6_1 + 7336 >> 2] = ($2_1 | 0) > 0 ? $11_1 : $9 >= Math_fround(4.0) ? $9 : Math_fround(4.0);
  $16_1 = $4_1 | $12_1;
  $11_1 = Math_fround($15_1 - $14);
  if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
   $5_1 = ~~$10_1
  } else {
   $5_1 = -2147483648
  }
  $9 = Math_fround($5_1 | 0);
  $10_1 = Math_fround($11_1 + $9);
  HEAPF32[$6_1 + 7332 >> 2] = ($5_1 | 0) > 0 ? $9 : $10_1 >= Math_fround(4.0) ? $10_1 : Math_fround(4.0);
  $12_1 = $6_1 + 12800 | 0;
  $17_1 = !$2_1 << 1;
  $5_1 = !$5_1;
  $2_1 = HEAP32[$7_1 >> 2];
  label$7 : {
   if ($0_1) {
    HEAP32[$8 + 24 >> 2] = $1_1;
    HEAP32[$8 + 20 >> 2] = $0_1;
    HEAP32[$8 + 16 >> 2] = $2_1;
    $21($12_1, 3073, 14551, $8 + 16 | 0);
    break label$7;
   }
   HEAP32[$8 + 4 >> 2] = $1_1;
   HEAP32[$8 >> 2] = $2_1;
   $21($12_1, 3073, 14575, $8);
  }
  $0_1 = $16_1 | 16777475;
  $5_1 = $5_1 | $17_1;
  $10_1 = HEAPF32[$6_1 + 5464 >> 2];
  if (!$3) {
   HEAP32[$6_1 + 5464 >> 2] = 0
  }
  $3 = $143($6_1 + 12800 | 0, 0, $0_1);
  HEAPF32[$6_1 + 5464 >> 2] = $10_1;
  $2_1 = HEAP32[$6_1 + 7080 >> 2];
  HEAP8[$2_1 + 166 | 0] = $5_1;
  HEAP32[$2_1 + 84 >> 2] = $1_1;
  if (HEAPU16[$2_1 + 150 >> 1] == 1) {
   $0_1 = HEAP32[$2_1 + 16 >> 2];
   HEAP32[$7_1 + 208 >> 2] = HEAP32[$2_1 + 12 >> 2];
   HEAP32[$7_1 + 212 >> 2] = $0_1;
  }
  if (!(!(HEAPU16[$2_1 + 296 >> 1] | HEAPU8[$2_1 + 305 | 0]) | ($4_1 & 8388608 | HEAP32[$6_1 + 7520 >> 2] != ($1_1 | 0)))) {
   $125($2_1);
   $0_1 = HEAP32[18392];
   $4_1 = HEAP32[$2_1 + 8 >> 2];
   label$13 : {
    if ($4_1 & 262144) {
     HEAP32[$0_1 + 7512 >> 2] = 0;
     HEAP32[$0_1 + 7516 >> 2] = 0;
     break label$13;
    }
    label$15 : {
     if (!($4_1 & 67108864 | ($2_1 | 0) == HEAP32[$2_1 + 736 >> 2])) {
      $4_1 = HEAP32[$2_1 + 756 >> 2];
      if ($4_1) {
       break label$15
      }
     }
     HEAP32[$0_1 + 7512 >> 2] = 0;
     HEAP32[$0_1 + 7516 >> 2] = 0;
     $5_1 = HEAP32[$0_1 + 7508 >> 2];
     $4_1 = HEAP32[$0_1 + 7564 >> 2];
     HEAP32[($5_1 + ($4_1 << 2) | 0) + 756 >> 2] = 0;
     $4_1 = $5_1 + ($4_1 << 4) | 0;
     $5_1 = $4_1 + 772 | 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     $4_1 = $4_1 + 764 | 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$4_1 + 4 >> 2] = 0;
     HEAP32[$0_1 + 7576 >> 2] = 0;
     HEAP32[$0_1 + 7580 >> 2] = 0;
     HEAP8[$0_1 + 7574 | 0] = 0;
     HEAP16[$0_1 + 7572 >> 1] = 257;
     $4_1 = $0_1 + 7584 | 0;
     HEAP32[$4_1 >> 2] = 0;
     HEAP32[$4_1 + 4 >> 2] = 0;
     HEAP32[$0_1 + 7592 >> 2] = 0;
     break label$13;
    }
    HEAP32[$0_1 + 7516 >> 2] = 0;
    HEAP32[$0_1 + 7512 >> 2] = $4_1;
   }
   $4_1 = HEAP32[$0_1 + 7136 >> 2];
   $1_1 = $1_1 + 1 | 0;
   HEAP8[$0_1 + 7148 | 0] = ($4_1 | 0) != ($1_1 | 0);
   label$17 : {
    if (($1_1 | 0) == ($4_1 | 0)) {
     break label$17
    }
    HEAP32[$0_1 + 7192 >> 2] = -1;
    HEAP8[$0_1 + 7151 | 0] = 0;
    HEAP8[$0_1 + 7152 | 0] = 0;
    HEAP32[$0_1 + 7144 >> 2] = 0;
    if (!$1_1) {
     break label$17
    }
    HEAP32[$0_1 + 7212 >> 2] = 0;
    HEAP32[$0_1 + 7208 >> 2] = $1_1;
   }
   HEAP32[$0_1 + 7184 >> 2] = $2_1;
   HEAP8[$0_1 + 7149 | 0] = 0;
   HEAP8[$0_1 + 7150 | 0] = 0;
   HEAP32[$0_1 + 7136 >> 2] = $1_1;
   HEAP8[$0_1 + 7153 | 0] = 0;
   if ($1_1) {
    HEAP32[$0_1 + 7140 >> 2] = $1_1;
    $2_1 = 4;
    label$19 : {
     if (HEAP32[$0_1 + 7520 >> 2] == ($1_1 | 0)) {
      break label$19
     }
     $2_1 = 4;
     if (($1_1 | 0) == HEAP32[$0_1 + 7532 >> 2]) {
      break label$19
     }
     $2_1 = ($1_1 | 0) == HEAP32[$0_1 + 7540 >> 2] ? 4 : 1;
    }
    HEAP32[$0_1 + 7188 >> 2] = $2_1;
   }
   HEAP32[$0_1 + 7168 >> 2] = 0;
   HEAP32[$0_1 + 7172 >> 2] = 0;
   HEAP32[$0_1 + 7156 >> 2] = 0;
   HEAP32[$0_1 + 7160 >> 2] = 0;
   HEAP8[$0_1 + 7154 | 0] = 0;
   HEAP32[$6_1 + 7188 >> 2] = 4;
  }
  global$0 = $8 + 32 | 0;
  return $3;
 }
 
 function $208($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = HEAP32[18392];
  $1_1 = HEAP32[$2_1 + 7080 >> 2];
  $3 = HEAPF32[$1_1 + 524 >> 2];
  $4_1 = HEAPF32[$1_1 + 212 >> 2];
  if (HEAP32[$1_1 + 368 >> 2] | HEAP32[$2_1 + 8036 >> 2]) {
   $2_1 = $1_1 + 472 | 0
  } else {
   $2_1 = $1_1 + 520 | 0
  }
  HEAPF32[$0_1 >> 2] = HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 + 208 >> 2];
  HEAPF32[$0_1 + 4 >> 2] = $3 - $4_1;
 }
 
 function $211() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0;
  $0_1 = global$0 - 48 | 0;
  global$0 = $0_1;
  $3 = HEAP32[18392];
  HEAP8[$3 + 6998 | 0] = 1;
  $1_1 = HEAP32[$3 + 7080 >> 2];
  label$1 : {
   if (HEAP16[$1_1 + 150 >> 1] >= 2) {
    $142();
    break label$1;
   }
   $2_1 = HEAP32[$1_1 + 24 >> 2];
   HEAP32[$0_1 + 40 >> 2] = HEAP32[$1_1 + 20 >> 2];
   HEAP32[$0_1 + 44 >> 2] = $2_1;
   $2_1 = HEAPU8[$1_1 + 166 | 0];
   if ($2_1 & 1) {
    $4_1 = HEAPF32[$0_1 + 40 >> 2];
    HEAPF32[$0_1 + 40 >> 2] = $4_1 <= Math_fround(4.0) ? Math_fround(4.0) : $4_1;
   }
   if ($2_1 & 2) {
    $4_1 = HEAPF32[$0_1 + 44 >> 2];
    HEAPF32[$0_1 + 44 >> 2] = $4_1 <= Math_fround(4.0) ? Math_fround(4.0) : $4_1;
   }
   $142();
   $2_1 = HEAP32[$3 + 7080 >> 2];
   $4_1 = HEAPF32[$2_1 + 208 >> 2];
   $5_1 = HEAP32[$2_1 + 212 >> 2];
   $6_1 = HEAP32[$2_1 + 208 >> 2];
   HEAPF32[$0_1 + 36 >> 2] = HEAPF32[$2_1 + 212 >> 2] + HEAPF32[$0_1 + 44 >> 2];
   HEAP32[$0_1 + 24 >> 2] = $6_1;
   HEAP32[$0_1 + 28 >> 2] = $5_1;
   HEAPF32[$0_1 + 32 >> 2] = $4_1 + HEAPF32[$0_1 + 40 >> 2];
   $212($0_1 + 40 | 0, Math_fround(-1.0));
   label$5 : {
    if (!(!(HEAPU16[$1_1 + 296 >> 1] | HEAPU8[$1_1 + 305 | 0]) | HEAPU8[$1_1 + 10 | 0] & 128)) {
     $2_1 = $0_1 + 24 | 0;
     $213($2_1, HEAP32[$1_1 + 84 >> 2], 0, 0);
     $73($2_1, HEAP32[$1_1 + 84 >> 2], 1);
     if (HEAPU16[$1_1 + 296 >> 1] | ($1_1 | 0) != HEAP32[$3 + 7508 >> 2]) {
      break label$5
     }
     $2_1 = $0_1 + 8 | 0;
     HEAPF32[$2_1 + 12 >> 2] = HEAPF32[$0_1 + 36 >> 2] + Math_fround(2.0);
     HEAPF32[$0_1 + 16 >> 2] = HEAPF32[$0_1 + 32 >> 2] + Math_fround(2.0);
     HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$0_1 + 28 >> 2] + Math_fround(-2.0);
     HEAPF32[$0_1 + 8 >> 2] = HEAPF32[$0_1 + 24 >> 2] + Math_fround(-2.0);
     $73($2_1, HEAP32[$3 + 7512 >> 2], 2);
     break label$5;
    }
    $213($0_1 + 24 | 0, 0, 0, 0);
   }
   if (($1_1 | 0) != HEAP32[$3 + 7084 >> 2]) {
    break label$1
   }
   $1_1 = $3 + 7248 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 128;
  }
  HEAP32[$3 + 12228 >> 2] = -8388609;
  HEAP8[$3 + 6998 | 0] = 0;
  global$0 = $0_1 + 48 | 0;
 }
 
 function $212($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  label$1 : {
   $5_1 = HEAP32[18392];
   $2_1 = HEAP32[$5_1 + 7080 >> 2];
   if (HEAPU8[$2_1 + 143 | 0]) {
    break label$1
   }
   if ($1_1 >= Math_fround(0.0)) {
    $3 = Math_fround(HEAPF32[$2_1 + 264 >> 2] - $1_1);
    $3 = $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3;
   }
   $11_1 = HEAPF32[$0_1 + 4 >> 2];
   $7_1 = Math_fround(HEAPF32[$2_1 + 208 >> 2] + HEAPF32[$0_1 >> 2]);
   HEAPF32[$2_1 + 216 >> 2] = $7_1;
   $8 = $2_1 + 212 | 0;
   $9 = HEAPF32[$8 >> 2];
   HEAPF32[$2_1 + 220 >> 2] = $9;
   $4_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 12 >> 2] + HEAPF32[$2_1 + 272 >> 2]) + HEAPF32[$2_1 + 276 >> 2]);
   label$3 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$4_1;
     break label$3;
    }
    $0_1 = -2147483648;
   }
   HEAPF32[$2_1 + 208 >> 2] = $0_1 | 0;
   $4_1 = HEAPF32[$5_1 + 5496 >> 2];
   $0_1 = $2_1 + 252 | 0;
   $6_1 = HEAPF32[$0_1 >> 2];
   HEAP32[$0_1 >> 2] = 0;
   $0_1 = $2_1 + 232 | 0;
   $10_1 = HEAPF32[$0_1 >> 2];
   HEAPF32[$0_1 >> 2] = $7_1 <= $10_1 ? $10_1 : $7_1;
   $3 = Math_fround($3 + $11_1);
   $3 = $3 <= $6_1 ? $6_1 : $3;
   HEAPF32[$2_1 + 260 >> 2] = $3;
   $3 = Math_fround($4_1 + Math_fround($3 + $9));
   label$5 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$3;
     break label$5;
    }
    $0_1 = -2147483648;
   }
   $6_1 = Math_fround($0_1 | 0);
   HEAPF32[$8 >> 2] = $6_1;
   $0_1 = $2_1 + 236 | 0;
   $3 = HEAPF32[$0_1 >> 2];
   $4_1 = Math_fround($6_1 - $4_1);
   HEAPF32[$0_1 >> 2] = $3 >= $4_1 ? $3 : $4_1;
   $0_1 = $2_1 + 264 | 0;
   $3 = HEAPF32[$0_1 >> 2];
   HEAP32[$0_1 >> 2] = 0;
   $1_1 = $1_1 <= $3 ? $3 : $1_1;
   HEAPF32[$2_1 + 268 >> 2] = $1_1;
   if (HEAP32[$2_1 + 376 >> 2]) {
    break label$1
   }
   HEAP8[$2_1 + 140 | 0] = 1;
   $3 = HEAPF32[$5_1 + 5492 >> 2];
   HEAPF32[$2_1 + 212 >> 2] = $9;
   HEAPF32[$2_1 + 264 >> 2] = $1_1;
   $5_1 = $2_1 + 256 | 0;
   $8 = HEAP32[$5_1 + 4 >> 2];
   $0_1 = $2_1 + 248 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $8;
   HEAPF32[$2_1 + 208 >> 2] = $7_1 + $3;
  }
 }
 
 function $213($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0;
  $4_1 = HEAP32[18392];
  HEAP32[$4_1 + 7240 >> 2] = $1_1;
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  $8 = $4_1 + 7252 | 0;
  HEAP32[$8 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$8 + 4 >> 2] = $5_1;
  $5_1 = $0_1 + 8 | 0;
  $8 = HEAP32[$5_1 + 4 >> 2];
  $13 = $4_1 + 7260 | 0;
  HEAP32[$13 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$13 + 4 >> 2] = $8;
  $2_1 = $2_1 ? $2_1 : $0_1;
  $5_1 = HEAP32[$2_1 >> 2];
  $8 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = $2_1 + 8 | 0;
  $13 = HEAP32[$2_1 >> 2];
  $17_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = HEAP32[$4_1 + 7216 >> 2] | $3;
  HEAP32[$4_1 + 7244 >> 2] = $2_1;
  HEAP32[$4_1 + 7248 >> 2] = 0;
  $3 = $4_1 + 7276 | 0;
  HEAP32[$3 >> 2] = $13;
  HEAP32[$3 + 4 >> 2] = $17_1;
  $3 = $4_1 + 7268 | 0;
  HEAP32[$3 >> 2] = $5_1;
  HEAP32[$3 + 4 >> 2] = $8;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $3 = HEAP32[$4_1 + 7080 >> 2];
   $5_1 = $3 + 298 | 0;
   $8 = HEAP32[$3 + 292 >> 2];
   HEAP16[$5_1 >> 1] = HEAPU16[$5_1 >> 1] | 1 << $8;
   if (!HEAPU8[$4_1 + 7572 | 0] & ($1_1 | 0) != HEAP32[$4_1 + 7512 >> 2]) {
    break label$1
   }
   $5_1 = HEAP32[$4_1 + 7508 >> 2];
   if (HEAP32[$5_1 + 748 >> 2] != HEAP32[$3 + 748 >> 2] | !((HEAP32[$5_1 + 8 >> 2] | HEAP32[$3 + 8 >> 2]) & 8388608) & ($3 | 0) != ($5_1 | 0)) {
    break label$1
   }
   $10_1 = HEAPF32[$4_1 + 7280 >> 2];
   $14 = HEAPF32[$4_1 + 7276 >> 2];
   $11_1 = HEAPF32[$4_1 + 7272 >> 2];
   $9 = HEAPF32[$4_1 + 7268 >> 2];
   label$4 : {
    if (!HEAPU8[$4_1 + 7573 | 0] | ($8 | 0) != HEAP32[$4_1 + 7564 >> 2]) {
     break label$4
    }
    $5_1 = $2_1 & 20;
    if (!(HEAP32[$4_1 + 7576 >> 2] ? $5_1 : 0)) {
     HEAP32[$4_1 + 7576 >> 2] = $1_1;
     $6_1 = HEAPF32[$3 + 224 >> 2];
     $7_1 = HEAPF32[$3 + 228 >> 2];
     HEAPF32[$4_1 + 7592 >> 2] = $10_1 - $7_1;
     HEAPF32[$4_1 + 7588 >> 2] = $14 - $6_1;
     HEAPF32[$4_1 + 7584 >> 2] = $11_1 - $7_1;
     HEAPF32[$4_1 + 7580 >> 2] = $9 - $6_1;
    }
    if ($5_1) {
     break label$4
    }
    HEAP8[$4_1 + 7573 | 0] = 0;
    HEAP8[$4_1 + 7572 | 0] = HEAPU8[$4_1 + 7597 | 0];
   }
   label$7 : {
    if (!HEAPU8[$4_1 + 7597 | 0]) {
     break label$7
    }
    $5_1 = HEAP32[$4_1 + 7600 >> 2];
    if ($5_1 & 1024) {
     if (!($5_1 & 512) & ($2_1 & 261) != 256) {
      break label$7
     }
     label$10 : {
      switch (HEAP32[$4_1 + 7660 >> 2] + 1 | 0) {
      case 2:
       if (!HEAP32[$4_1 + 7804 >> 2]) {
        HEAP32[$4_1 + 7804 >> 2] = $1_1;
        HEAP32[$4_1 + 7800 >> 2] = $3;
        $5_1 = HEAP32[$3 + 300 >> 2];
        HEAP32[$4_1 + 7828 >> 2] = $2_1;
        HEAP32[$4_1 + 7808 >> 2] = $5_1;
        $6_1 = HEAPF32[$3 + 224 >> 2];
        $7_1 = HEAPF32[$3 + 228 >> 2];
        HEAPF32[$4_1 + 7824 >> 2] = HEAPF32[$4_1 + 7280 >> 2] - $7_1;
        HEAPF32[$4_1 + 7820 >> 2] = HEAPF32[$4_1 + 7276 >> 2] - $6_1;
        HEAPF32[$4_1 + 7816 >> 2] = HEAPF32[$4_1 + 7272 >> 2] - $7_1;
        HEAPF32[$4_1 + 7812 >> 2] = $9 - $6_1;
       }
       $5_1 = HEAP32[$4_1 + 7664 >> 2] - 1 | 0;
       HEAP32[$4_1 + 7664 >> 2] = $5_1;
       if (!$5_1) {
        HEAP32[$4_1 + 7668 >> 2] = $3;
        HEAP8[$4_1 + 7597 | 0] = 0;
        HEAP32[$4_1 + 7672 >> 2] = $1_1;
        $5_1 = HEAP32[$3 + 300 >> 2];
        HEAP32[$4_1 + 7696 >> 2] = $2_1;
        HEAP32[$4_1 + 7676 >> 2] = $5_1;
        $6_1 = HEAPF32[$3 + 224 >> 2];
        $7_1 = HEAPF32[$3 + 228 >> 2];
        HEAP8[$4_1 + 7572 | 0] = HEAPU8[$4_1 + 7573 | 0];
        HEAPF32[$4_1 + 7692 >> 2] = HEAPF32[$4_1 + 7280 >> 2] - $7_1;
        HEAPF32[$4_1 + 7688 >> 2] = HEAPF32[$4_1 + 7276 >> 2] - $6_1;
        HEAPF32[$4_1 + 7684 >> 2] = HEAPF32[$4_1 + 7272 >> 2] - $7_1;
        HEAPF32[$4_1 + 7680 >> 2] = $9 - $6_1;
        break label$7;
       }
       if (HEAP32[$4_1 + 7512 >> 2] != ($1_1 | 0)) {
        break label$7
       }
       HEAP32[$4_1 + 7664 >> 2] = 1;
       break label$7;
      case 0:
       if (($1_1 | 0) == HEAP32[$4_1 + 7512 >> 2]) {
        if (!HEAP32[$4_1 + 7672 >> 2]) {
         break label$7
        }
        HEAP8[$4_1 + 7597 | 0] = 0;
        HEAP8[$4_1 + 7572 | 0] = HEAPU8[$4_1 + 7573 | 0];
        break label$7;
       }
       HEAP32[$4_1 + 7668 >> 2] = $3;
       HEAP32[$4_1 + 7672 >> 2] = $1_1;
       $5_1 = HEAP32[$3 + 300 >> 2];
       HEAP32[$4_1 + 7696 >> 2] = $2_1;
       HEAP32[$4_1 + 7676 >> 2] = $5_1;
       $6_1 = HEAPF32[$3 + 224 >> 2];
       $7_1 = HEAPF32[$3 + 228 >> 2];
       HEAPF32[$4_1 + 7692 >> 2] = HEAPF32[$4_1 + 7280 >> 2] - $7_1;
       HEAPF32[$4_1 + 7688 >> 2] = HEAPF32[$4_1 + 7276 >> 2] - $6_1;
       HEAPF32[$4_1 + 7684 >> 2] = HEAPF32[$4_1 + 7272 >> 2] - $7_1;
       HEAPF32[$4_1 + 7680 >> 2] = $9 - $6_1;
       break label$7;
      case 1:
       break label$10;
      default:
       break label$7;
      };
     }
     if (HEAP32[$4_1 + 7804 >> 2]) {
      break label$7
     }
     HEAP32[$4_1 + 7804 >> 2] = $1_1;
     HEAP32[$4_1 + 7800 >> 2] = $3;
     HEAP8[$4_1 + 7597 | 0] = 0;
     $5_1 = HEAP32[$3 + 300 >> 2];
     HEAP32[$4_1 + 7828 >> 2] = $2_1;
     HEAP32[$4_1 + 7808 >> 2] = $5_1;
     $6_1 = HEAPF32[$3 + 224 >> 2];
     $7_1 = HEAPF32[$3 + 228 >> 2];
     HEAP8[$4_1 + 7572 | 0] = HEAPU8[$4_1 + 7573 | 0];
     HEAPF32[$4_1 + 7824 >> 2] = HEAPF32[$4_1 + 7280 >> 2] - $7_1;
     HEAPF32[$4_1 + 7820 >> 2] = HEAPF32[$4_1 + 7276 >> 2] - $6_1;
     HEAPF32[$4_1 + 7816 >> 2] = HEAPF32[$4_1 + 7272 >> 2] - $7_1;
     HEAPF32[$4_1 + 7812 >> 2] = $9 - $6_1;
     break label$7;
    }
    if (!(($5_1 & 16) >>> 4 | HEAP32[$4_1 + 7512 >> 2] != ($1_1 | 0)) | $2_1 & 12) {
     break label$7
    }
    $5_1 = ($3 | 0) == HEAP32[$4_1 + 7508 >> 2];
    $2_1 = $5_1 ? $4_1 + 7668 | 0 : $4_1 + 7756 | 0;
    if ($214($2_1)) {
     $13 = ($5_1 ? 7668 : 7756) + $4_1 | 0;
     $5_1 = HEAP32[18392];
     $8 = HEAP32[$5_1 + 7080 >> 2];
     HEAP32[$13 >> 2] = $8;
     HEAP32[$2_1 + 4 >> 2] = HEAP32[$5_1 + 7240 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$8 + 300 >> 2];
     HEAP32[$2_1 + 28 >> 2] = HEAP32[$5_1 + 7244 >> 2];
     $7_1 = HEAPF32[$5_1 + 7268 >> 2];
     $15_1 = HEAPF32[$5_1 + 7272 >> 2];
     $16_1 = HEAPF32[$5_1 + 7276 >> 2];
     $6_1 = HEAPF32[$8 + 224 >> 2];
     $12_1 = HEAPF32[$8 + 228 >> 2];
     HEAPF32[$2_1 + 24 >> 2] = HEAPF32[$5_1 + 7280 >> 2] - $12_1;
     HEAPF32[$2_1 + 20 >> 2] = $16_1 - $6_1;
     HEAPF32[$2_1 + 16 >> 2] = $15_1 - $12_1;
     HEAPF32[$2_1 + 12 >> 2] = $7_1 - $6_1;
    }
    if (!(HEAPU8[$4_1 + 7600 | 0] & 32)) {
     break label$7
    }
    $6_1 = HEAPF32[$3 + 508 >> 2];
    if (!($6_1 > $11_1)) {
     break label$7
    }
    $7_1 = HEAPF32[$3 + 500 >> 2];
    if (!($7_1 < $10_1) | !($9 < HEAPF32[$3 + 504 >> 2]) | (!($14 > HEAPF32[$3 + 496 >> 2]) | !(Math_fround(($7_1 > $10_1 ? $7_1 : $6_1 < $10_1 ? $6_1 : $10_1) - ($7_1 > $11_1 ? $7_1 : $6_1 < $11_1 ? $6_1 : $11_1)) >= Math_fround(Math_fround($10_1 - $11_1) * Math_fround(.699999988079071))))) {
     break label$7
    }
    $2_1 = $4_1 + 7712 | 0;
    if (!$214($2_1)) {
     break label$7
    }
    $5_1 = HEAP32[18392];
    $8 = HEAP32[$5_1 + 7080 >> 2];
    HEAP32[$2_1 >> 2] = $8;
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$5_1 + 7240 >> 2];
    HEAP32[$2_1 + 8 >> 2] = HEAP32[$8 + 300 >> 2];
    HEAP32[$2_1 + 28 >> 2] = HEAP32[$5_1 + 7244 >> 2];
    $7_1 = HEAPF32[$5_1 + 7268 >> 2];
    $15_1 = HEAPF32[$5_1 + 7272 >> 2];
    $16_1 = HEAPF32[$5_1 + 7276 >> 2];
    $6_1 = HEAPF32[$8 + 224 >> 2];
    $12_1 = HEAPF32[$8 + 228 >> 2];
    HEAPF32[$2_1 + 24 >> 2] = HEAPF32[$5_1 + 7280 >> 2] - $12_1;
    HEAPF32[$2_1 + 20 >> 2] = $16_1 - $6_1;
    HEAPF32[$2_1 + 16 >> 2] = $15_1 - $12_1;
    HEAPF32[$2_1 + 12 >> 2] = $7_1 - $6_1;
   }
   if (HEAP32[$4_1 + 7512 >> 2] != ($1_1 | 0)) {
    break label$1
   }
   HEAP32[$4_1 + 7508 >> 2] = $3;
   $2_1 = HEAP32[$3 + 292 >> 2];
   HEAP32[$4_1 + 7564 >> 2] = $2_1;
   $5_1 = HEAP32[$3 + 300 >> 2];
   HEAP8[$4_1 + 7568 | 0] = 1;
   HEAP32[$4_1 + 7516 >> 2] = $5_1;
   $6_1 = HEAPF32[$3 + 224 >> 2];
   $2_1 = $3 + ($2_1 << 4) | 0;
   $12_1 = $10_1;
   $10_1 = HEAPF32[$3 + 228 >> 2];
   HEAPF32[$2_1 + 776 >> 2] = $12_1 - $10_1;
   HEAPF32[$2_1 + 772 >> 2] = $14 - $6_1;
   HEAPF32[$2_1 + 768 >> 2] = $11_1 - $10_1;
   HEAPF32[$2_1 + 764 >> 2] = $9 - $6_1;
  }
  HEAP32[$4_1 + 7220 >> 2] = 0;
  $2_1 = HEAP32[18392];
  $3 = HEAP32[$2_1 + 7080 >> 2];
  $10_1 = HEAPF32[$3 + 500 >> 2];
  $1_1 = !(!(!($10_1 < HEAPF32[$0_1 + 12 >> 2]) | !(HEAPF32[$3 + 508 >> 2] > HEAPF32[$0_1 + 4 >> 2]) | !(HEAPF32[$3 + 496 >> 2] < HEAPF32[$0_1 + 8 >> 2])) & HEAPF32[$3 + 504 >> 2] > HEAPF32[$0_1 >> 2] | (HEAPU8[$2_1 + 12196 | 0] | !!$1_1 & (HEAP32[$2_1 + 7136 >> 2] == ($1_1 | 0) | HEAP32[$2_1 + 7512 >> 2] == ($1_1 | 0))));
  label$21 : {
   if ($1_1) {
    break label$21
   }
   $11_1 = HEAPF32[$2_1 + 228 >> 2];
   $9 = HEAPF32[$0_1 >> 2];
   $6_1 = HEAPF32[$3 + 496 >> 2];
   $12_1 = $6_1 <= $9 ? $9 : $6_1;
   $9 = HEAPF32[$2_1 + 5516 >> 2];
   if (!($11_1 >= Math_fround($12_1 - $9))) {
    break label$21
   }
   $6_1 = HEAPF32[$2_1 + 232 >> 2];
   $7_1 = HEAPF32[$0_1 + 4 >> 2];
   $12_1 = $7_1 >= $10_1 ? $7_1 : $10_1;
   $10_1 = HEAPF32[$2_1 + 5520 >> 2];
   if (!($6_1 >= Math_fround($12_1 - $10_1))) {
    break label$21
   }
   $12_1 = $9;
   $9 = HEAPF32[$0_1 + 8 >> 2];
   $7_1 = HEAPF32[$3 + 504 >> 2];
   if (!($11_1 < Math_fround($12_1 + ($7_1 > $9 ? $9 : $7_1)))) {
    break label$21
   }
   $11_1 = HEAPF32[$0_1 + 12 >> 2];
   $9 = HEAPF32[$3 + 508 >> 2];
   if (!($6_1 < Math_fround(($9 > $11_1 ? $11_1 : $9) + $10_1))) {
    break label$21
   }
   HEAP32[$4_1 + 7248 >> 2] = HEAP32[$4_1 + 7248 >> 2] | 1;
  }
  return $1_1 ^ 1;
 }
 
 function $214($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0);
  $4_1 = HEAP32[18392];
  $15_1 = HEAP32[$4_1 + 7564 >> 2];
  $3 = HEAP32[$4_1 + 7080 >> 2];
  if (($15_1 | 0) != HEAP32[$3 + 292 >> 2]) {
   return 0
  }
  HEAP32[$4_1 + 7656 >> 2] = HEAP32[$4_1 + 7656 >> 2] + 1;
  $16_1 = HEAPF32[$4_1 + 7636 >> 2];
  $13 = HEAPF32[$4_1 + 7632 >> 2];
  $11_1 = HEAPF32[$4_1 + 7628 >> 2];
  $1_1 = HEAPF32[$4_1 + 7280 >> 2];
  $8 = HEAPF32[$4_1 + 7276 >> 2];
  $7_1 = HEAPF32[$4_1 + 7272 >> 2];
  $6_1 = HEAPF32[$4_1 + 7268 >> 2];
  $14 = HEAPF32[$4_1 + 7624 >> 2];
  $17_1 = HEAP32[$4_1 + 7508 >> 2];
  label$2 : {
   if (($17_1 | 0) == HEAP32[$3 + 728 >> 2]) {
    if (!($7_1 < HEAPF32[$3 + 508 >> 2])) {
     return 0
    }
    if (!($1_1 > HEAPF32[$3 + 500 >> 2])) {
     return 0
    }
    if (!($6_1 < HEAPF32[$3 + 504 >> 2])) {
     return 0
    }
    if (!(HEAPF32[$3 + 496 >> 2] < $8)) {
     break label$2
    }
    $5_1 = HEAPF32[$3 + 500 >> 2];
    $9 = HEAPF32[$3 + 508 >> 2];
    $1_1 = $1_1 < $5_1 ? $5_1 : $1_1 > $9 ? $9 : $1_1;
    $12_1 = HEAPF32[$3 + 496 >> 2];
    $2_1 = HEAPF32[$3 + 504 >> 2];
    $8 = $8 < $12_1 ? $12_1 : $2_1 < $8 ? $2_1 : $8;
    $7_1 = $5_1 > $7_1 ? $5_1 : $7_1 > $9 ? $9 : $7_1;
    $6_1 = $6_1 < $12_1 ? $12_1 : $2_1 < $6_1 ? $2_1 : $6_1;
   }
   $2_1 = $8;
   $8 = $1_1;
   label$8 : {
    if (HEAPU32[$4_1 + 7620 >> 2] <= 1) {
     $1_1 = HEAPF32[$3 + 500 >> 2];
     $5_1 = HEAPF32[$3 + 508 >> 2];
     $8 = $1_1 > $8 ? $1_1 : $5_1 < $8 ? $5_1 : $8;
     $7_1 = $1_1 > $7_1 ? $1_1 : $5_1 < $7_1 ? $5_1 : $7_1;
     break label$8;
    }
    $1_1 = HEAPF32[$3 + 496 >> 2];
    $5_1 = HEAPF32[$3 + 504 >> 2];
    $2_1 = $1_1 > $2_1 ? $1_1 : $2_1 > $5_1 ? $5_1 : $2_1;
    $6_1 = $1_1 > $6_1 ? $1_1 : $5_1 < $6_1 ? $5_1 : $6_1;
   }
   $5_1 = $6_1;
   $9 = $2_1;
   label$10 : {
    if ($2_1 < $14) {
     $2_1 = Math_fround($9 - $14);
     break label$10;
    }
    $2_1 = Math_fround(0.0);
    if (!($5_1 > $13)) {
     break label$10
    }
    $2_1 = Math_fround($5_1 - $13);
   }
   $1_1 = Math_fround($8 - $7_1);
   $6_1 = Math_fround(Math_fround($1_1 * Math_fround(.800000011920929)) + $7_1);
   $12_1 = Math_fround($16_1 - $11_1);
   $18_1 = Math_fround(Math_fround($12_1 * Math_fround(.20000000298023224)) + $11_1);
   label$12 : {
    if ($6_1 < $18_1) {
     $6_1 = Math_fround($6_1 - $18_1);
     break label$12;
    }
    $12_1 = Math_fround(Math_fround($12_1 * Math_fround(.800000011920929)) + $11_1);
    $1_1 = Math_fround(Math_fround($1_1 * Math_fround(.20000000298023224)) + $7_1);
    $6_1 = Math_fround(0.0);
    if (!($12_1 < $1_1)) {
     break label$12
    }
    $6_1 = Math_fround($1_1 - $12_1);
   }
   if (!($2_1 == Math_fround(0.0) | $6_1 == Math_fround(0.0))) {
    $2_1 = Math_fround(Math_fround($2_1 / Math_fround(1.0e3)) + ($2_1 > Math_fround(0.0) ? Math_fround(1.0) : Math_fround(-1.0)))
   }
   $1_1 = Math_fround(Math_fround($8 + $7_1) - Math_fround($11_1 + $16_1));
   $11_1 = Math_fround(Math_abs($1_1));
   $7_1 = Math_fround(Math_fround($9 + $5_1) - Math_fround($14 + $13));
   $13 = Math_fround(Math_abs($7_1));
   $5_1 = Math_fround($11_1 + $13);
   $8 = $2_1;
   $14 = Math_fround(Math_abs($6_1));
   $2_1 = Math_fround(Math_abs($2_1));
   $9 = Math_fround($14 + $2_1);
   label$17 : {
    if (!($6_1 == Math_fround(0.0) & $8 == Math_fround(0.0))) {
     $10_1 = $2_1 > $14 ? $8 > Math_fround(0.0) : $6_1 > Math_fround(0.0) ? 3 : 2;
     $7_1 = $8;
     $1_1 = $6_1;
     $2_1 = $9;
     break label$17;
    }
    if (!($7_1 == Math_fround(0.0) & $1_1 == Math_fround(0.0))) {
     $10_1 = $11_1 < $13 ? $7_1 > Math_fround(0.0) : $1_1 > Math_fround(0.0) ? 3 : 2;
     $2_1 = $5_1;
     break label$17;
    }
    $10_1 = HEAPU32[$4_1 + 7240 >> 2] >= HEAPU32[$4_1 + 7512 >> 2];
    $7_1 = Math_fround(0.0);
    $1_1 = Math_fround(0.0);
    $2_1 = Math_fround(0.0);
   }
   $4_1 = HEAP32[$4_1 + 7612 >> 2];
   $3 = 0;
   label$22 : {
    if (($10_1 | 0) != ($4_1 | 0)) {
     break label$22
    }
    $11_1 = HEAPF32[$0_1 + 32 >> 2];
    if ($9 < $11_1) {
     HEAPF32[$0_1 + 36 >> 2] = $5_1;
     HEAPF32[$0_1 + 32 >> 2] = $9;
     return 1;
    }
    $3 = 0;
    if ($9 != $11_1) {
     break label$22
    }
    $9 = HEAPF32[$0_1 + 36 >> 2];
    if ($5_1 < $9) {
     HEAPF32[$0_1 + 36 >> 2] = $5_1;
     $3 = 1;
     break label$22;
    }
    $3 = 0;
    if ($5_1 != $9) {
     break label$22
    }
    $3 = 0;
    if (!((($4_1 & -2) == 2 ? $6_1 : $8) < Math_fround(0.0))) {
     break label$22
    }
    $3 = 1;
   }
   $10_1 = $3;
   if (HEAPF32[$0_1 + 32 >> 2] != Math_fround(3402823466385288598117041.0e14)) {
    return $10_1
   }
   if (!(HEAPF32[$0_1 + 40 >> 2] > $2_1)) {
    return $10_1
   }
   if (($15_1 | 0) != 1) {
    return $10_1
   }
   if (HEAPU8[$17_1 + 11 | 0] & 16) {
    return $10_1
   }
   label$32 : {
    if (!$4_1 & $7_1 < Math_fround(0.0) | ($4_1 | 0) == 1 & $7_1 > Math_fround(0.0)) {
     break label$32
    }
    if (($4_1 | 0) == 2 & $1_1 < Math_fround(0.0)) {
     break label$32
    }
    if (($4_1 | 0) != 3) {
     return $10_1
    }
    if (!($1_1 > Math_fround(0.0))) {
     break label$2
    }
   }
   HEAPF32[$0_1 + 40 >> 2] = $2_1;
   $10_1 = 1;
  }
  return $10_1;
 }
 
 function $216($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $3 = HEAP32[18392];
  $56(3, $3 + 5728 | 0);
  $58(7, HEAPF32[$3 + 5484 >> 2]);
  $58(8, HEAPF32[$3 + 5488 >> 2]);
  $59(2, $3 + 5476 | 0);
  $6_1 = $207(0, $0_1, $1_1, 1, $2_1 | 65540);
  $3 = HEAP32[18392];
  $7_1 = $3 + 5416 | 0;
  $8 = HEAP32[$3 + 7416 >> 2];
  $2_1 = HEAP32[$3 + 7408 >> 2];
  $1_1 = 3;
  while (1) {
   $0_1 = $1_1;
   $2_1 = $2_1 - 1 | 0;
   $1_1 = Math_imul($2_1, 12) + $8 | 0;
   $5_1 = HEAP32[$1_1 >> 2];
   $4_1 = Math_imul($5_1, 12);
   label$2 : {
    if (HEAP32[$4_1 + 20912 >> 2] != 8) {
     break label$2
    }
    $4_1 = HEAP32[$4_1 + 20920 >> 2] + $7_1 | 0;
    if (8206235 >>> $5_1 & 1) {
     HEAPF32[$4_1 >> 2] = HEAPF32[$1_1 + 4 >> 2];
     break label$2;
    }
    if (!(25348196 >>> $5_1 & 1)) {
     break label$2
    }
    HEAPF32[$4_1 >> 2] = HEAPF32[$1_1 + 4 >> 2];
    HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$1_1 + 8 >> 2];
   }
   HEAP32[$3 + 7408 >> 2] = $2_1;
   $1_1 = $0_1 - 1 | 0;
   if ($0_1 >>> 0 > 1) {
    continue
   }
   break;
  };
  $0_1 = (HEAP32[$3 + 7404 >> 2] + Math_imul(HEAP32[$3 + 7396 >> 2], 20) | 0) - 20 | 0;
  $1_1 = (HEAP32[$0_1 >> 2] << 4) + $3 | 0;
  $2_1 = $1_1 + 5624 | 0;
  $4_1 = $0_1 + 12 | 0;
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  $1_1 = $1_1 + 5616 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  HEAP32[$3 + 7396 >> 2] = HEAP32[$3 + 7396 >> 2] - 1;
  return $6_1;
 }
 
 function $217() {
  $211();
 }
 
 function $218($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = $0_1;
  $0_1 = -1;
  while (1) {
   $3 = $1_1;
   $1_1 = $1_1 + 1 | 0;
   $2_1 = HEAPU8[$3 | 0];
   if ($2_1) {
    if (!(($2_1 | 0) != 35 | HEAPU8[$1_1 | 0] != 35)) {
     $0_1 = HEAPU8[$3 + 2 | 0] == 35 ? -1 : $0_1
    }
    $0_1 = HEAP32[(($2_1 ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
   }
   if ($2_1) {
    continue
   }
   break;
  };
  $5_1 = $0_1 ^ -1;
  $0_1 = HEAP32[18392];
  $3 = HEAP32[$0_1 + 7064 >> 2];
  $1_1 = $3;
  $2_1 = HEAP32[$0_1 + 7056 >> 2];
  if ($2_1) {
   $0_1 = $2_1;
   while (1) {
    $4_1 = $0_1 >>> 1 | 0;
    $6_1 = ($4_1 << 3) + $1_1 | 0;
    $7_1 = HEAPU32[$6_1 >> 2] < $5_1 >>> 0;
    $1_1 = $7_1 ? $6_1 + 8 | 0 : $1_1;
    $0_1 = $7_1 ? $0_1 + ($4_1 ^ -1) | 0 : $4_1;
    if ($0_1) {
     continue
    }
    break;
   };
  }
  $0_1 = $1_1;
  if (($0_1 | 0) == (($2_1 << 3) + $3 | 0)) {
   return 0
  }
  $1_1 = 0;
  return ($5_1 | 0) == HEAP32[$0_1 >> 2] ? HEAP32[$0_1 + 4 >> 2] : $1_1;
 }
 
 function $220($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24 = Math_fround(0), $25_1 = Math_fround(0);
  $9 = HEAPF32[$2_1 >> 2];
  $15_1 = HEAPF32[$4_1 + 8 >> 2];
  $16_1 = HEAPF32[$1_1 >> 2];
  $10_1 = HEAPF32[$4_1 >> 2];
  $8 = $4_1 + 12 | 0;
  $7_1 = HEAPF32[$8 >> 2];
  $11_1 = HEAPF32[$2_1 + 4 >> 2];
  $17_1 = HEAPF32[$1_1 + 4 >> 2];
  $12_1 = HEAPF32[$4_1 + 4 >> 2];
  if (($6_1 | 0) == 1) {
   $13 = HEAPF32[$8 >> 2];
   $18_1 = HEAP32[$5_1 >> 2];
   $14 = HEAP32[$5_1 + 12 >> 2];
   $19 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - $11_1);
   $20_1 = Math_fround(HEAPF32[$5_1 + 8 >> 2] - $9);
   $23_1 = HEAP32[$3 >> 2];
   $2_1 = ($23_1 | 0) != -1 ? -1 : 0;
   while (1) {
    $8 = HEAP32[(($2_1 | 0) != -1 ? ($2_1 << 2) + 20752 | 0 : $3) >> 2];
    label$3 : {
     if (($8 | 0) == ($23_1 | 0) & ($2_1 | 0) != -1) {
      break label$3
     }
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     label$5 : {
      label$6 : {
       switch ($8 | 0) {
       case 3:
        HEAP32[$0_1 + 4 >> 2] = $14;
        HEAP32[$0_1 >> 2] = $18_1;
        break label$5;
       case 1:
        HEAPF32[$0_1 + 4 >> 2] = $19;
        HEAP32[$0_1 >> 2] = $18_1;
        break label$5;
       case 0:
        HEAP32[$0_1 + 4 >> 2] = $14;
        HEAPF32[$0_1 >> 2] = $20_1;
        break label$5;
       case 2:
        break label$6;
       default:
        break label$5;
       };
      }
      HEAPF32[$0_1 + 4 >> 2] = $19;
      HEAPF32[$0_1 >> 2] = $20_1;
     }
     $21_1 = HEAPF32[$0_1 >> 2];
     if (!($21_1 >= $10_1)) {
      break label$3
     }
     $22_1 = HEAPF32[$0_1 + 4 >> 2];
     if (!($22_1 >= $12_1) | !(Math_fround($9 + $21_1) <= $15_1) | !($13 >= Math_fround($11_1 + $22_1))) {
      break label$3
     }
     HEAP32[$3 >> 2] = $8;
     return;
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != 4) {
     continue
    }
    break;
   };
  }
  label$10 : {
   switch ($6_1 | 0) {
   case 0:
   case 2:
    $13 = Math_fround($15_1 - $9);
    $13 = $10_1 > $16_1 ? $10_1 : $13 < $16_1 ? $13 : $16_1;
    $7_1 = Math_fround($7_1 - $11_1);
    $7_1 = $12_1 > $17_1 ? $12_1 : $7_1 < $17_1 ? $7_1 : $17_1;
    $18_1 = $5_1 + 8 | 0;
    $19 = HEAPF32[$4_1 + 12 >> 2];
    $20_1 = HEAPF32[$5_1 + 4 >> 2];
    $21_1 = HEAPF32[$4_1 >> 2];
    $22_1 = HEAPF32[$5_1 + 8 >> 2];
    $24 = HEAPF32[$4_1 + 8 >> 2];
    $25_1 = HEAPF32[$5_1 >> 2];
    $2_1 = HEAP32[$3 >> 2] != -1 ? -1 : 0;
    while (1) {
     $14 = ($2_1 | 0) == -1;
     $8 = HEAP32[($14 ? $3 : ($2_1 << 2) + 20768 | 0) >> 2];
     label$13 : {
      if (!$14 & ($8 | 0) == HEAP32[$3 >> 2] | $8 >>> 0 < 2 & Math_fround(($8 ? $24 : $25_1) - (($8 | 0) == 1 ? $22_1 : $21_1)) < $9) {
       break label$13
      }
      if (($8 & -2) == 2 & $11_1 > Math_fround((($8 | 0) == 2 ? $20_1 : $19) - HEAPF32[(($8 | 0) == 3 ? $18_1 : $4_1) + 4 >> 2])) {
       break label$13
      }
      HEAP32[$0_1 >> 2] = 0;
      HEAP32[$0_1 + 4 >> 2] = 0;
      $9 = $8 ? (($8 | 0) == 1 ? HEAPF32[$5_1 + 8 >> 2] : $13) : Math_fround(HEAPF32[$5_1 >> 2] - $9);
      HEAPF32[$0_1 >> 2] = $9;
      label$17 : {
       if (($8 | 0) == 2) {
        $7_1 = Math_fround(HEAPF32[$5_1 + 4 >> 2] - $11_1);
        break label$17;
       }
       if (($8 | 0) != 3) {
        break label$17
       }
       $7_1 = HEAPF32[$5_1 + 12 >> 2];
      }
      HEAPF32[$0_1 + 4 >> 2] = $7_1 >= $12_1 ? $7_1 : $12_1;
      HEAPF32[$0_1 >> 2] = $9 >= $10_1 ? $9 : $10_1;
      HEAP32[$3 >> 2] = $8;
      return;
     }
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != 4) {
      continue
     }
     break;
    };
    break;
   default:
    break label$10;
   };
  }
  HEAP32[$3 >> 2] = -1;
  if (($6_1 | 0) == 2) {
   HEAPF32[$0_1 + 4 >> 2] = $17_1 + Math_fround(2.0);
   HEAPF32[$0_1 >> 2] = $16_1 + Math_fround(2.0);
   return;
  }
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  $7_1 = Math_fround($9 + HEAPF32[$0_1 >> 2]);
  $7_1 = Math_fround(($7_1 < $15_1 ? $7_1 : $15_1) - $9);
  HEAPF32[$0_1 >> 2] = $7_1 >= $10_1 ? $7_1 : $10_1;
  $7_1 = Math_fround($11_1 + HEAPF32[$0_1 + 4 >> 2]);
  $9 = HEAPF32[$4_1 + 12 >> 2];
  $7_1 = Math_fround(($7_1 < $9 ? $7_1 : $9) - $11_1);
  HEAPF32[$0_1 + 4 >> 2] = $7_1 >= $12_1 ? $7_1 : $12_1;
 }
 
 function $221() {
  return HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2];
 }
 
 function $222($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0;
  $1_1 = HEAP32[18392];
  label$1 : {
   if ($0_1) {
    break label$1
   }
   $0_1 = HEAP32[$1_1 + 164 >> 2];
   if ($0_1) {
    break label$1
   }
   $0_1 = HEAP32[HEAP32[HEAP32[$1_1 + 152 >> 2] + 60 >> 2] >> 2];
  }
  HEAP32[$1_1 + 6464 >> 2] = $0_1;
  $5_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 156 >> 2] * HEAPF32[$0_1 + 16 >> 2]) * HEAPF32[$0_1 + 68 >> 2]);
  $5_1 = $5_1 <= Math_fround(1.0) ? Math_fround(1.0) : $5_1;
  HEAPF32[$1_1 + 6472 >> 2] = $5_1;
  $2_1 = HEAP32[$1_1 + 7080 >> 2];
  label$2 : {
   if (!$2_1) {
    $5_1 = Math_fround(0.0);
    break label$2;
   }
   $5_1 = Math_fround($5_1 * HEAPF32[$2_1 + 572 >> 2]);
   $2_1 = HEAP32[$2_1 + 728 >> 2];
   if (!$2_1) {
    break label$2
   }
   $5_1 = Math_fround($5_1 * HEAPF32[$2_1 + 572 >> 2]);
  }
  HEAPF32[$1_1 + 6468 >> 2] = $5_1;
  $2_1 = HEAP32[$0_1 + 48 >> 2];
  $3 = HEAP32[$2_1 + 44 >> 2];
  $4_1 = HEAP32[$2_1 + 48 >> 2];
  HEAP32[$1_1 + 6972 >> 2] = $2_1 + 88;
  HEAP32[$1_1 + 6476 >> 2] = $3;
  HEAP32[$1_1 + 6480 >> 2] = $4_1;
  HEAPF32[$1_1 + 6488 >> 2] = $5_1;
  HEAP32[$1_1 + 6484 >> 2] = $0_1;
  $3 = HEAP32[$1_1 + 7420 >> 2];
  $2_1 = HEAP32[$1_1 + 7424 >> 2];
  label$5 : {
   if (($3 | 0) != ($2_1 | 0)) {
    break label$5
   }
   $4_1 = $3 + 1 | 0;
   $6_1 = $2_1;
   if ($2_1) {
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2_1 = ($3 | 0) > ($4_1 | 0) ? $3 : $4_1;
   if (($6_1 | 0) >= ($2_1 | 0)) {
    break label$5
   }
   $3 = $2_1 << 2;
   if ($1_1) {
    $4_1 = $1_1 + 876 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
   }
   $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
   $4_1 = HEAP32[$1_1 + 7428 >> 2];
   if ($4_1) {
    $1602($3, $4_1, HEAP32[$1_1 + 7420 >> 2] << 2);
    $4_1 = HEAP32[$1_1 + 7428 >> 2];
    label$10 : {
     if (!$4_1) {
      break label$10
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$10
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
   }
   HEAP32[$1_1 + 7424 >> 2] = $2_1;
   HEAP32[$1_1 + 7428 >> 2] = $3;
  }
  HEAP32[HEAP32[$1_1 + 7428 >> 2] + (HEAP32[$1_1 + 7420 >> 2] << 2) >> 2] = $0_1;
  HEAP32[$1_1 + 7420 >> 2] = HEAP32[$1_1 + 7420 >> 2] + 1;
  $381(HEAP32[HEAP32[$1_1 + 7080 >> 2] + 580 >> 2], HEAP32[HEAP32[$0_1 + 48 >> 2] + 4 >> 2]);
 }
 
 function $223() {
  var $0_1 = 0, $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0;
  $0_1 = HEAP32[18392];
  $382(HEAP32[HEAP32[$0_1 + 7080 >> 2] + 580 >> 2]);
  $3 = HEAP32[$0_1 + 7420 >> 2];
  $1_1 = $3 - 1 | 0;
  HEAP32[$0_1 + 7420 >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!$1_1) {
     $0_1 = HEAP32[18392];
     $3 = HEAP32[$0_1 + 164 >> 2];
     if ($3) {
      break label$1
     }
     $0_1 = HEAP32[HEAP32[$0_1 + 152 >> 2] + 60 >> 2];
     break label$2;
    }
    $0_1 = (HEAP32[$0_1 + 7428 >> 2] + ($3 << 2) | 0) - 8 | 0;
   }
   $3 = HEAP32[$0_1 >> 2];
  }
  $0_1 = HEAP32[18392];
  HEAP32[$0_1 + 6464 >> 2] = $3;
  $2_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 156 >> 2] * HEAPF32[$3 + 16 >> 2]) * HEAPF32[$3 + 68 >> 2]);
  $2_1 = $2_1 <= Math_fround(1.0) ? Math_fround(1.0) : $2_1;
  HEAPF32[$0_1 + 6472 >> 2] = $2_1;
  $1_1 = HEAP32[$0_1 + 7080 >> 2];
  label$4 : {
   if (!$1_1) {
    $2_1 = Math_fround(0.0);
    break label$4;
   }
   $2_1 = Math_fround($2_1 * HEAPF32[$1_1 + 572 >> 2]);
   $1_1 = HEAP32[$1_1 + 728 >> 2];
   if (!$1_1) {
    break label$4
   }
   $2_1 = Math_fround($2_1 * HEAPF32[$1_1 + 572 >> 2]);
  }
  HEAPF32[$0_1 + 6468 >> 2] = $2_1;
  $1_1 = HEAP32[$3 + 48 >> 2];
  $4_1 = HEAP32[$1_1 + 44 >> 2];
  $5_1 = HEAP32[$1_1 + 48 >> 2];
  HEAP32[$0_1 + 6972 >> 2] = $1_1 + 88;
  HEAP32[$0_1 + 6476 >> 2] = $4_1;
  HEAP32[$0_1 + 6480 >> 2] = $5_1;
  HEAPF32[$0_1 + 6488 >> 2] = $2_1;
  HEAP32[$0_1 + 6484 >> 2] = $3;
 }
 
 function $224($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[18392];
  $5_1 = HEAP32[$2_1 + 7216 >> 2];
  $5_1 = $1_1 ? $5_1 | $0_1 : $5_1 & ($0_1 ^ -1);
  HEAP32[$2_1 + 7216 >> 2] = $5_1;
  $1_1 = HEAP32[$2_1 + 7444 >> 2];
  $0_1 = HEAP32[$2_1 + 7448 >> 2];
  label$1 : {
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$1
   }
   $3 = $1_1 + 1 | 0;
   $4_1 = $0_1;
   if ($0_1) {
    $1_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0
   } else {
    $1_1 = 8
   }
   $0_1 = ($1_1 | 0) > ($3 | 0) ? $1_1 : $3;
   if (($4_1 | 0) >= ($0_1 | 0)) {
    break label$1
   }
   $1_1 = $0_1 << 2;
   if ($2_1) {
    $3 = $2_1 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $1_1 = FUNCTION_TABLE[HEAP32[18314]]($1_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$2_1 + 7452 >> 2];
   if ($3) {
    $1602($1_1, $3, HEAP32[$2_1 + 7444 >> 2] << 2);
    $3 = HEAP32[$2_1 + 7452 >> 2];
    label$6 : {
     if (!$3) {
      break label$6
     }
     $4_1 = HEAP32[18392];
     if (!$4_1) {
      break label$6
     }
     $4_1 = $4_1 + 876 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$2_1 + 7448 >> 2] = $0_1;
   HEAP32[$2_1 + 7452 >> 2] = $1_1;
  }
  HEAP32[HEAP32[$2_1 + 7452 >> 2] + (HEAP32[$2_1 + 7444 >> 2] << 2) >> 2] = $5_1;
  HEAP32[$2_1 + 7444 >> 2] = HEAP32[$2_1 + 7444 >> 2] + 1;
 }
 
 function $225() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7444 >> 2];
  HEAP32[$0_1 + 7444 >> 2] = $1_1 - 1;
  HEAP32[$0_1 + 7216 >> 2] = HEAP32[(HEAP32[$0_1 + 7452 >> 2] + ($1_1 << 2) | 0) - 8 >> 2];
 }
 
 function $226($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 7216 >> 2];
  $3 = $2_1 & 4;
  if (!($3 | !$0_1)) {
   $5_1 = HEAPF32[$1_1 + 5416 >> 2];
   HEAPF32[$1_1 + 12072 >> 2] = $5_1;
   HEAPF32[$1_1 + 5416 >> 2] = $5_1 * HEAPF32[$1_1 + 5420 >> 2];
  }
  if ($3 | $0_1) {
   HEAP32[$1_1 + 7216 >> 2] = $2_1 | 4
  }
  $2_1 = HEAP32[$1_1 + 7444 >> 2];
  $0_1 = HEAP32[$1_1 + 7448 >> 2];
  label$4 : {
   if (($2_1 | 0) != ($0_1 | 0)) {
    break label$4
   }
   $3 = $2_1 + 1 | 0;
   $4_1 = $0_1;
   if ($0_1) {
    $2_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $0_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
   if (($4_1 | 0) >= ($0_1 | 0)) {
    break label$4
   }
   $2_1 = $0_1 << 2;
   if ($1_1) {
    $3 = $1_1 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$1_1 + 7452 >> 2];
   if ($3) {
    $1602($2_1, $3, HEAP32[$1_1 + 7444 >> 2] << 2);
    $3 = HEAP32[$1_1 + 7452 >> 2];
    label$9 : {
     if (!$3) {
      break label$9
     }
     $4_1 = HEAP32[18392];
     if (!$4_1) {
      break label$9
     }
     $4_1 = $4_1 + 876 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$1_1 + 7448 >> 2] = $0_1;
   HEAP32[$1_1 + 7452 >> 2] = $2_1;
  }
  HEAP32[HEAP32[$1_1 + 7452 >> 2] + (HEAP32[$1_1 + 7444 >> 2] << 2) >> 2] = HEAP32[$1_1 + 7216 >> 2];
  HEAP32[$1_1 + 7444 >> 2] = HEAP32[$1_1 + 7444 >> 2] + 1;
  HEAP16[$1_1 + 12076 >> 1] = HEAPU16[$1_1 + 12076 >> 1] + 1;
 }
 
 function $227() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $0_1 = HEAP32[18392];
  HEAP16[$0_1 + 12076 >> 1] = HEAPU16[$0_1 + 12076 >> 1] - 1;
  $1_1 = HEAP32[$0_1 + 7444 >> 2];
  HEAP32[$0_1 + 7444 >> 2] = $1_1 - 1;
  $2_1 = HEAP32[$0_1 + 7216 >> 2];
  $1_1 = HEAP32[(HEAP32[$0_1 + 7452 >> 2] + ($1_1 << 2) | 0) - 8 >> 2];
  HEAP32[$0_1 + 7216 >> 2] = $1_1;
  if (!(!($2_1 & 4) | $1_1 & 4)) {
   HEAPF32[$0_1 + 5416 >> 2] = HEAPF32[$0_1 + 12072 >> 2]
  }
 }
 
 function $228($0_1) {
  $0_1 = $0_1 | 0;
  $224(1, $0_1 ^ 1);
 }
 
 function $230($0_1) {
  $0_1 = $0_1 | 0;
  $224(2, $0_1);
 }
 
 function $232($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[18392];
  $1_1 = HEAP32[$2_1 + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  $4_1 = HEAP32[$1_1 + 404 >> 2];
  $3 = HEAP32[$1_1 + 408 >> 2];
  label$1 : {
   if (($4_1 | 0) != ($3 | 0)) {
    break label$1
   }
   $5_1 = $4_1 + 1 | 0;
   $6_1 = $3;
   if ($3) {
    $4_1 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $4_1 = 8
   }
   $3 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
   if (($6_1 | 0) >= ($3 | 0)) {
    break label$1
   }
   $4_1 = $3 << 2;
   if ($2_1) {
    $2_1 = $2_1 + 876 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
   }
   $4_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
   $2_1 = HEAP32[$1_1 + 412 >> 2];
   if ($2_1) {
    $1602($4_1, $2_1, HEAP32[$1_1 + 404 >> 2] << 2);
    $2_1 = HEAP32[$1_1 + 412 >> 2];
    label$6 : {
     if (!$2_1) {
      break label$6
     }
     $5_1 = HEAP32[18392];
     if (!$5_1) {
      break label$6
     }
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   }
   HEAP32[$1_1 + 408 >> 2] = $3;
   HEAP32[$1_1 + 412 >> 2] = $4_1;
  }
  $3 = $1_1 + 388 | 0;
  HEAP32[HEAP32[$1_1 + 412 >> 2] + (HEAP32[$1_1 + 404 >> 2] << 2) >> 2] = HEAP32[$3 >> 2];
  HEAPF32[$3 >> 2] = $0_1;
  HEAP32[$1_1 + 404 >> 2] = HEAP32[$1_1 + 404 >> 2] + 1;
 }
 
 function $233() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = Math_fround(0);
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 404 | 0;
  $2_1 = HEAP32[$1_1 >> 2] - 1 | 0;
  $3 = HEAPF32[HEAP32[$0_1 + 412 >> 2] + ($2_1 << 2) >> 2];
  HEAP32[$1_1 >> 2] = $2_1;
  HEAPF32[$0_1 + 388 >> 2] = $3;
 }
 
 function $234($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $6_1 = HEAP32[18392];
  $4_1 = HEAP32[$6_1 + 7084 >> 2];
  if (!$4_1) {
   return 0
  }
  label$2 : {
   if ($0_1 & 4) {
    break label$2
   }
   $5_1 = HEAP32[$6_1 + 7080 >> 2];
   $7_1 = $0_1 & 8;
   if (!(!($0_1 & 2) | !$5_1)) {
    $1_1 = $5_1;
    while (1) {
     $3 = $1_1;
     $2_1 = HEAP32[$1_1 + 736 >> 2];
     if (!$7_1) {
      $2_1 = HEAP32[$2_1 + 740 >> 2]
     }
     $1_1 = $2_1;
     $5_1 = $1_1;
     if (($1_1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   label$9 : {
    if ($0_1 & 1) {
     $1_1 = $4_1;
     while (1) {
      $3 = $1_1;
      $2_1 = HEAP32[$1_1 + 736 >> 2];
      if (!$7_1) {
       $2_1 = HEAP32[$2_1 + 740 >> 2]
      }
      $1_1 = $2_1;
      if (($3 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
     if (($2_1 | 0) == ($5_1 | 0)) {
      break label$2
     }
     $3 = $4_1;
     while (1) {
      $1_1 = ($3 | 0) == ($5_1 | 0);
      if ($1_1 | ($2_1 | 0) == ($3 | 0)) {
       break label$9
      }
      $1_1 = HEAP32[$3 + 728 >> 2];
      $3 = $1_1;
      if ($1_1) {
       continue
      }
      break;
     };
     return 0;
    }
    $1_1 = ($5_1 | 0) == ($4_1 | 0);
   }
   if ($1_1) {
    break label$2
   }
   return 0;
  }
  label$16 : {
   $1_1 = HEAP32[$6_1 + 7508 >> 2];
   if (!$1_1) {
    break label$16
   }
   $1_1 = HEAP32[$1_1 + 736 >> 2];
   if (!$1_1 | !HEAPU8[$1_1 + 139 | 0] | ($1_1 | 0) == HEAP32[$4_1 + 736 >> 2]) {
    break label$16
   }
   $1_1 = HEAP32[$1_1 + 8 >> 2];
   if ($1_1 & 134217728) {
    return 0
   }
   if (!($1_1 & 67108864) | $0_1 & 32) {
    break label$16
   }
   return 0;
  }
  label$18 : {
   label$19 : {
    if ($0_1 & 128) {
     break label$19
    }
    $0_1 = HEAP32[$6_1 + 7136 >> 2];
    if (HEAPU8[$6_1 + 7149 | 0] | !$0_1) {
     break label$19
    }
    $1_1 = 0;
    if (($0_1 | 0) != HEAP32[$4_1 + 80 >> 2]) {
     break label$18
    }
   }
   $1_1 = 1;
  }
  return $1_1 | 0;
 }
 
 function $235($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = HEAP32[18392];
  $4_1 = HEAP32[$3 + 7508 >> 2];
  if (!$4_1) {
   return 0
  }
  $1_1 = 1;
  label$2 : {
   if ($0_1 & 4) {
    break label$2
   }
   $1_1 = HEAP32[$3 + 7080 >> 2];
   $5_1 = $0_1 & 8;
   label$3 : {
    if (!($0_1 & 2)) {
     $3 = $1_1;
     break label$3;
    }
    if (!$1_1) {
     $3 = $1_1;
     break label$3;
    }
    while (1) {
     $6_1 = $1_1;
     $2_1 = HEAP32[$1_1 + 736 >> 2];
     if (!$5_1) {
      $2_1 = HEAP32[$2_1 + 740 >> 2]
     }
     $1_1 = $2_1;
     $3 = $1_1;
     if (($1_1 | 0) != ($6_1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($0_1 & 1) {
    $1_1 = $4_1;
    while (1) {
     $0_1 = $1_1;
     $2_1 = HEAP32[$1_1 + 736 >> 2];
     if (!$5_1) {
      $2_1 = HEAP32[$2_1 + 740 >> 2]
     }
     $1_1 = $2_1;
     if (($0_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
    if (($2_1 | 0) == ($3 | 0)) {
     return 1
    }
    while (1) {
     $1_1 = ($3 | 0) == ($4_1 | 0);
     if ($1_1) {
      return $1_1 | 0
     }
     if (($2_1 | 0) == ($4_1 | 0)) {
      break label$2
     }
     $0_1 = HEAP32[$4_1 + 728 >> 2];
     $4_1 = $0_1;
     if ($0_1) {
      continue
     }
     break;
    };
    return 0;
   }
   $1_1 = ($3 | 0) == ($4_1 | 0);
  }
  return $1_1 | 0;
 }
 
 function $236() {
  return Math_fround(HEAPF32[HEAP32[HEAP32[18392] + 7080 >> 2] + 20 >> 2]);
 }
 
 function $237() {
  return Math_fround(HEAPF32[HEAP32[HEAP32[18392] + 7080 >> 2] + 24 >> 2]);
 }
 
 function $245() {
  return HEAPU8[HEAP32[HEAP32[18392] + 7080 >> 2] + 141 | 0];
 }
 
 function $246() {
  return HEAPU8[HEAP32[HEAP32[18392] + 7080 >> 2] + 144 | 0];
 }
 
 function $250($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[18392];
  HEAP32[$3 + 7300 >> 2] = HEAP32[$3 + 7300 >> 2] | 1;
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  $4_1 = $3 + 7316 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $0_1 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$3 + 7304 >> 2] = $1_1 >>> 0 <= 1 ? 1 : $1_1;
  $1_1 = $3 + 7324 | 0;
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$1_1 + 4 >> 2] = $0_1;
 }
 
 function $251($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[18392];
  HEAP32[$3 + 7300 >> 2] = HEAP32[$3 + 7300 >> 2] | 16;
  $4_1 = HEAP32[$0_1 >> 2];
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 7380 >> 2] = 0;
  HEAP32[$3 + 7376 >> 2] = $2_1;
  $2_1 = $3 + 7368 | 0;
  HEAP32[$2_1 >> 2] = $1_1;
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  $1_1 = $3 + 7360 | 0;
  HEAP32[$1_1 >> 2] = $4_1;
  HEAP32[$1_1 + 4 >> 2] = $0_1;
 }
 
 function $252($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = 0;
  $1_1 = HEAP32[18392];
  HEAP32[$1_1 + 7300 >> 2] = HEAP32[$1_1 + 7300 >> 2] | 4;
  $2_1 = HEAPF32[$0_1 >> 2];
  $4_1 = $1_1 + 7344 | 0;
  $3 = HEAPF32[$0_1 + 4 >> 2];
  label$1 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $0_1 = ~~$3;
    break label$1;
   }
   $0_1 = -2147483648;
  }
  HEAPF32[$4_1 >> 2] = $0_1 | 0;
  $1_1 = $1_1 + 7340 | 0;
  if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
   $0_1 = ~~$2_1
  } else {
   $0_1 = -2147483648
  }
  HEAPF32[$1_1 >> 2] = $0_1 | 0;
 }
 
 function $254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[18392];
  HEAP8[$2_1 + 7356 | 0] = $0_1;
  HEAP32[$2_1 + 7312 >> 2] = $1_1 >>> 0 <= 1 ? 1 : $1_1;
  HEAP32[$2_1 + 7300 >> 2] = HEAP32[$2_1 + 7300 >> 2] | 8;
 }
 
 function $255() {
  var $0_1 = 0;
  $0_1 = HEAP32[18392];
  HEAP32[$0_1 + 7300 >> 2] = HEAP32[$0_1 + 7300 >> 2] | 32;
 }
 
 function $256($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  HEAPF32[$1_1 + 7384 >> 2] = $0_1;
  HEAP32[$1_1 + 7300 >> 2] = HEAP32[$1_1 + 7300 >> 2] | 64;
 }
 
 function $259() {
  return Math_fround(HEAPF32[HEAP32[18392] + 6468 >> 2]);
 }
 
 function $260($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 6480 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 6476 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $261($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = 0;
  $2_1 = HEAP32[18392];
  $1_1 = HEAP32[$2_1 + 7080 >> 2];
  HEAPF32[$1_1 + 572 >> 2] = $0_1;
  HEAP8[$1_1 + 140 | 0] = 1;
  $0_1 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * $0_1);
  $1_1 = HEAP32[$1_1 + 728 >> 2];
  if ($1_1) {
   $0_1 = Math_fround($0_1 * HEAPF32[$1_1 + 572 >> 2])
  }
  HEAPF32[$2_1 + 6468 >> 2] = $0_1;
  HEAPF32[$2_1 + 6488 >> 2] = $0_1;
 }
 
 function $262($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $1_1 = HEAP32[18392];
  $3 = HEAP32[$1_1 + 7080 >> 2];
  HEAP32[$1_1 + 7508 >> 2] = $3;
  $2_1 = HEAPU8[$3 + 144 | 0];
  HEAP32[$1_1 + 7740 >> 2] = 0;
  HEAP32[$1_1 + 7752 >> 2] = 2139095039;
  HEAP32[$1_1 + 7720 >> 2] = 0;
  HEAP32[$1_1 + 7712 >> 2] = 0;
  HEAP32[$1_1 + 7716 >> 2] = 0;
  $4_1 = $1_1 + 7700 | 0;
  HEAP32[$4_1 >> 2] = 2139095039;
  HEAP32[$4_1 + 4 >> 2] = 2139095039;
  HEAP32[$1_1 + 7708 >> 2] = 2139095039;
  $4_1 = $1_1 + 7672 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$1_1 + 7664 >> 2] = 0;
  HEAP32[$1_1 + 7668 >> 2] = 0;
  HEAP32[$1_1 + 7608 >> 2] = HEAP32[$1_1 + 892 >> 2];
  $5_1 = $1_1 + 7696 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP8[$1_1 + 7597 | 0] = 1;
  HEAP8[$1_1 + 7598 | 0] = 0;
  HEAP32[$1_1 + 7600 >> 2] = 1552;
  HEAP8[$1_1 + 7596 | 0] = 1;
  HEAP32[$1_1 + 7620 >> 2] = ($0_1 | 0) < 0 ? 2 : 3;
  HEAP32[$1_1 + 7612 >> 2] = -1;
  HEAP32[$1_1 + 7616 >> 2] = -1;
  HEAP32[$1_1 + 7604 >> 2] = $2_1 ? 33 : 3;
  HEAP32[$1_1 + 7756 >> 2] = 0;
  $2_1 = $1_1 + 7744 | 0;
  HEAP32[$2_1 >> 2] = 2139095039;
  HEAP32[$2_1 + 4 >> 2] = 2139095039;
  $2_1 = $1_1 + 7760 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 7792 | 0;
  HEAP32[$2_1 >> 2] = 2139095039;
  HEAP32[$2_1 + 4 >> 2] = 2139095039;
  $2_1 = $1_1 + 7784 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 2139095039;
  HEAP8[$1_1 + 7572 | 0] = 1;
  if (($0_1 | 0) == -1) {
   HEAP32[$1_1 + 7668 >> 2] = $3;
   HEAP8[$1_1 + 7597 | 0] = 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 7240 >> 2];
   HEAP32[$1_1 + 7676 >> 2] = HEAP32[$3 + 300 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 + 7244 >> 2];
   $6_1 = HEAPF32[$3 + 228 >> 2];
   $7_1 = HEAPF32[$3 + 224 >> 2];
   HEAPF32[$1_1 + 7680 >> 2] = HEAPF32[$1_1 + 7268 >> 2] - $7_1;
   HEAPF32[$1_1 + 7684 >> 2] = HEAPF32[$1_1 + 7272 >> 2] - $6_1;
   HEAPF32[$1_1 + 7688 >> 2] = HEAPF32[$1_1 + 7276 >> 2] - $7_1;
   HEAPF32[$1_1 + 7692 >> 2] = HEAPF32[$1_1 + 7280 >> 2] - $6_1;
   HEAP8[$1_1 + 7572 | 0] = HEAPU8[$1_1 + 7573 | 0];
   return;
  }
  HEAP32[$1_1 + 7660 >> 2] = 1;
  HEAP32[$1_1 + 7664 >> 2] = $0_1 + 1;
 }
 
 function $263() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7080 >> 2];
  label$1 : {
   if (!HEAPU8[$1_1 + 144 | 0] | HEAP32[$0_1 + 7508 >> 2] != HEAP32[$1_1 + 748 >> 2] | !(HEAPU8[$0_1 + 7573 | 0] | HEAP32[$0_1 + 7576 >> 2])) {
    break label$1
   }
   if (HEAP32[$0_1 + 7564 >> 2] != HEAP32[$1_1 + 292 >> 2]) {
    break label$1
   }
   HEAP8[$0_1 + 7573 | 0] = 0;
   HEAP32[$0_1 + 7576 >> 2] = HEAP32[$0_1 + 7240 >> 2];
   $4_1 = HEAPF32[$1_1 + 224 >> 2];
   $5_1 = HEAPF32[$1_1 + 228 >> 2];
   HEAP8[$0_1 + 7572 | 0] = HEAPU8[$0_1 + 7597 | 0];
   $6_1 = $0_1 + 7264 | 0;
   HEAPF32[$0_1 + 7592 >> 2] = HEAPF32[$6_1 >> 2] - $5_1;
   HEAPF32[$0_1 + 7588 >> 2] = HEAPF32[$0_1 + 7260 >> 2] - $4_1;
   $7_1 = HEAPF32[$0_1 + 7256 >> 2];
   HEAPF32[$0_1 + 7584 >> 2] = $7_1 - $5_1;
   $3 = $0_1 + 7252 | 0;
   HEAPF32[$0_1 + 7580 >> 2] = HEAPF32[$3 >> 2] - $4_1;
   if (!(!(HEAPF32[$3 >> 2] < HEAPF32[$1_1 + 504 >> 2]) | (!(HEAPF32[$1_1 + 508 >> 2] > $7_1) | !(HEAPF32[$6_1 >> 2] > HEAPF32[$1_1 + 500 >> 2])))) {
    if (HEAPF32[$0_1 + 7260 >> 2] > HEAPF32[$1_1 + 496 >> 2]) {
     break label$1
    }
   }
   $264($2_1 + 8 | 0, $1_1, $3, 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $264($0_1, $1_1, $2_1, $3) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = Math_fround(0);
  $11_1 = global$0 - 32 | 0;
  global$0 = $11_1;
  $22_1 = HEAPF32[$1_1 + 432 >> 2];
  $18_1 = Math_fround($22_1 + Math_fround(-1.0));
  $19 = Math_fround(HEAPF32[$1_1 + 444 >> 2] + Math_fround(1.0));
  $20_1 = Math_fround(HEAPF32[$1_1 + 440 >> 2] + Math_fround(1.0));
  $23_1 = HEAPF32[$1_1 + 436 >> 2];
  $21_1 = Math_fround($23_1 + Math_fround(-1.0));
  $10_1 = HEAP32[18392];
  $12_1 = $3;
  if (!($12_1 & 21)) {
   $12_1 = HEAPU8[$1_1 + 136 | 0] | $3
  }
  if (!($12_1 & 42)) {
   $12_1 = (HEAPU8[$1_1 + 144 | 0] ? 32 : 2) | $12_1
  }
  $5_1 = HEAPF32[$2_1 >> 2];
  $14 = HEAPF32[$2_1 + 8 >> 2];
  $9 = $5_1 >= $18_1 & $20_1 >= $14;
  $15_1 = HEAPF32[$2_1 + 12 >> 2];
  $7_1 = HEAPF32[$2_1 + 4 >> 2];
  $13 = Math_fround($15_1 - $7_1);
  $16_1 = HEAPF32[$10_1 + 5496 >> 2];
  $8 = Math_fround($16_1 + $16_1);
  $17_1 = HEAPF32[$10_1 + 5492 >> 2];
  $24 = Math_fround(Math_fround($17_1 + $17_1) + Math_fround($14 - $5_1));
  $6_1 = $15_1 <= $19 & $7_1 >= $21_1;
  $4_1 = Math_fround($20_1 - $18_1);
  label$4 : {
   label$5 : {
    if (!($9 | !($12_1 & 1))) {
     if (!(!($5_1 < $18_1) & $4_1 >= $24)) {
      $5_1 = Math_fround($5_1 - $17_1);
      $4_1 = Math_fround(0.0);
      break label$5;
     }
     if (!($14 >= $20_1)) {
      break label$4
     }
     $5_1 = Math_fround($14 + $17_1);
     $4_1 = Math_fround(1.0);
     break label$5;
    }
    if (!($9 | !($12_1 & 4) ? $12_1 & 16 : 1)) {
     break label$4
    }
    if ($4_1 >= $24) {
     $4_1 = Math_fround(Math_fround(Math_fround($5_1 + $14) - Math_fround(HEAPF32[$1_1 + 440 >> 2] - $22_1)) * Math_fround(.5));
     label$12 : {
      if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
       $9 = ~~$4_1;
       break label$12;
      }
      $9 = -2147483648;
     }
     $5_1 = Math_fround($9 | 0);
    }
    $4_1 = Math_fround(0.0);
   }
   HEAP32[$1_1 + 120 >> 2] = 0;
   HEAPF32[$1_1 + 112 >> 2] = $4_1;
   $4_1 = Math_fround(HEAPF32[$1_1 + 88 >> 2] + Math_fround($5_1 - HEAPF32[$1_1 + 12 >> 2]));
   label$14 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $9 = ~~$4_1;
     break label$14;
    }
    $9 = -2147483648;
   }
   HEAPF32[$1_1 + 104 >> 2] = $9 | 0;
  }
  $5_1 = Math_fround($8 + $13);
  $4_1 = Math_fround($19 - $21_1);
  label$16 : {
   label$17 : {
    if (!($6_1 | !($12_1 & 2))) {
     if (!(!($7_1 < $21_1) & $4_1 >= $5_1)) {
      $8 = Math_fround($7_1 - $16_1);
      $7_1 = HEAPF32[$1_1 + 16 >> 2];
      $4_1 = Math_fround(0.0);
      $9 = HEAP32[$1_1 + 8 >> 2];
      if (!($9 & 1)) {
       $4_1 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
       $6_1 = HEAP32[$1_1 + 728 >> 2];
       if ($6_1) {
        $4_1 = Math_fround($4_1 * HEAPF32[$6_1 + 572 >> 2])
       }
       $5_1 = HEAPF32[$10_1 + 5480 >> 2];
       $4_1 = Math_fround(Math_fround($5_1 + $5_1) + $4_1);
      }
      $5_1 = $4_1;
      $4_1 = Math_fround(0.0);
      $13 = Math_fround($8 - $7_1);
      if ($9 & 1024) {
       $4_1 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
       $8 = HEAPF32[$1_1 + 312 >> 2];
       $6_1 = HEAP32[$1_1 + 728 >> 2];
       if ($6_1) {
        $4_1 = Math_fround($4_1 * HEAPF32[$6_1 + 572 >> 2])
       }
       $7_1 = HEAPF32[$10_1 + 5480 >> 2];
       $4_1 = Math_fround(Math_fround($7_1 + $7_1) + Math_fround($8 + $4_1));
      }
      $4_1 = Math_fround($13 - Math_fround($5_1 + $4_1));
      $5_1 = Math_fround(0.0);
      break label$17;
     }
     if (!($15_1 >= $19)) {
      break label$16
     }
     $8 = Math_fround($15_1 + $16_1);
     $7_1 = HEAPF32[$1_1 + 16 >> 2];
     $4_1 = Math_fround(0.0);
     $9 = HEAP32[$1_1 + 8 >> 2];
     if (!($9 & 1)) {
      $4_1 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
      $6_1 = HEAP32[$1_1 + 728 >> 2];
      if ($6_1) {
       $4_1 = Math_fround($4_1 * HEAPF32[$6_1 + 572 >> 2])
      }
      $5_1 = HEAPF32[$10_1 + 5480 >> 2];
      $4_1 = Math_fround(Math_fround($5_1 + $5_1) + $4_1);
     }
     $5_1 = $4_1;
     $4_1 = Math_fround(0.0);
     $13 = Math_fround($8 - $7_1);
     if ($9 & 1024) {
      $4_1 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
      $8 = HEAPF32[$1_1 + 312 >> 2];
      $6_1 = HEAP32[$1_1 + 728 >> 2];
      if ($6_1) {
       $4_1 = Math_fround($4_1 * HEAPF32[$6_1 + 572 >> 2])
      }
      $7_1 = HEAPF32[$10_1 + 5480 >> 2];
      $4_1 = Math_fround(Math_fround($7_1 + $7_1) + Math_fround($8 + $4_1));
     }
     $4_1 = Math_fround($13 - Math_fround($5_1 + $4_1));
     $5_1 = Math_fround(1.0);
     break label$17;
    }
    if (!($6_1 | !($12_1 & 8) ? $12_1 & 32 : 1)) {
     break label$16
    }
    if ($4_1 >= $5_1) {
     $4_1 = Math_fround(Math_fround(Math_fround($7_1 + $15_1) - Math_fround(HEAPF32[$1_1 + 444 >> 2] - $23_1)) * Math_fround(.5));
     label$36 : {
      if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
       $6_1 = ~~$4_1;
       break label$36;
      }
      $6_1 = -2147483648;
     }
     $7_1 = Math_fround($6_1 | 0);
    }
    $8 = HEAPF32[$1_1 + 16 >> 2];
    $4_1 = Math_fround(0.0);
    $9 = HEAP32[$1_1 + 8 >> 2];
    if (!($9 & 1)) {
     $4_1 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
     $6_1 = HEAP32[$1_1 + 728 >> 2];
     if ($6_1) {
      $4_1 = Math_fround($4_1 * HEAPF32[$6_1 + 572 >> 2])
     }
     $5_1 = HEAPF32[$10_1 + 5480 >> 2];
     $4_1 = Math_fround(Math_fround($5_1 + $5_1) + $4_1);
    }
    $5_1 = $4_1;
    $4_1 = Math_fround(0.0);
    $13 = Math_fround($7_1 - $8);
    if ($9 & 1024) {
     $4_1 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
     $8 = HEAPF32[$1_1 + 312 >> 2];
     $6_1 = HEAP32[$1_1 + 728 >> 2];
     if ($6_1) {
      $4_1 = Math_fround($4_1 * HEAPF32[$6_1 + 572 >> 2])
     }
     $7_1 = HEAPF32[$10_1 + 5480 >> 2];
     $4_1 = Math_fround(Math_fround($7_1 + $7_1) + Math_fround($8 + $4_1));
    }
    $4_1 = Math_fround($13 - Math_fround($5_1 + $4_1));
    $5_1 = Math_fround(0.0);
   }
   HEAP32[$1_1 + 124 >> 2] = 0;
   HEAPF32[$1_1 + 116 >> 2] = $5_1;
   $10_1 = $1_1 + 108 | 0;
   $4_1 = Math_fround(HEAPF32[$1_1 + 92 >> 2] + $4_1);
   label$44 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $6_1 = ~~$4_1;
     break label$44;
    }
    $6_1 = -2147483648;
   }
   HEAPF32[$10_1 >> 2] = $6_1 | 0;
  }
  $155($11_1 + 24 | 0, $1_1);
  $5_1 = HEAPF32[$1_1 + 92 >> 2];
  $4_1 = HEAPF32[$11_1 + 28 >> 2];
  $13 = Math_fround(HEAPF32[$11_1 + 24 >> 2] - HEAPF32[$1_1 + 88 >> 2]);
  HEAPF32[$0_1 >> 2] = $13;
  $8 = Math_fround($4_1 - $5_1);
  HEAPF32[$0_1 + 4 >> 2] = $8;
  if (!(!(HEAP8[$1_1 + 11 | 0] & 1) | $12_1 & 64)) {
   $1_1 = HEAP32[$1_1 + 728 >> 2];
   $7_1 = HEAPF32[$2_1 >> 2];
   $5_1 = HEAPF32[$2_1 + 4 >> 2];
   $4_1 = HEAPF32[$2_1 + 8 >> 2];
   HEAPF32[$11_1 + 12 >> 2] = HEAPF32[$2_1 + 12 >> 2] - $8;
   HEAPF32[$11_1 + 8 >> 2] = $4_1 - $13;
   HEAPF32[$11_1 + 4 >> 2] = $5_1 - $8;
   HEAPF32[$11_1 >> 2] = $7_1 - $13;
   $2_1 = $1_1;
   $1_1 = $3 & 20 ? $3 & -22 | 1 : $3;
   $264($11_1 + 16 | 0, $2_1, $11_1, $1_1 & 40 ? $1_1 & -43 | 2 : $1_1);
   HEAPF32[$0_1 >> 2] = $13 + HEAPF32[$11_1 + 16 >> 2];
   HEAPF32[$0_1 + 4 >> 2] = $8 + HEAPF32[$11_1 + 20 >> 2];
  }
  global$0 = $11_1 + 32 | 0;
 }
 
 function $265($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[18392];
  $3 = HEAP32[$7_1 + 7080 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $0_1;
  $4_1 = 4;
  $2_1 = $6_1 + 12 | 0;
  $1_1 = HEAP32[(HEAP32[$3 + 204 >> 2] + (HEAP32[$3 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
  while (1) {
   $5_1 = $2_1;
   $2_1 = $2_1 + 1 | 0;
   $5_1 = HEAP32[((HEAPU8[$5_1 | 0] ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
   $1_1 = $5_1;
   $4_1 = $4_1 - 1 | 0;
   if ($4_1) {
    continue
   }
   break;
  };
  $5_1 = $5_1 ^ -1;
  if (($5_1 | 0) == HEAP32[$7_1 + 7112 >> 2]) {
   $75($5_1, 12, $0_1)
  }
  $2_1 = HEAP32[$3 + 196 >> 2];
  $0_1 = HEAP32[$3 + 200 >> 2];
  label$3 : {
   if (($2_1 | 0) != ($0_1 | 0)) {
    break label$3
   }
   $1_1 = $2_1 + 1 | 0;
   $4_1 = $0_1;
   if ($0_1) {
    $2_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $0_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
   if (($4_1 | 0) >= ($0_1 | 0)) {
    break label$3
   }
   $2_1 = $0_1 << 2;
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
   $1_1 = HEAP32[$3 + 204 >> 2];
   if ($1_1) {
    $1602($2_1, $1_1, HEAP32[$3 + 196 >> 2] << 2);
    $1_1 = HEAP32[$3 + 204 >> 2];
    label$8 : {
     if (!$1_1) {
      break label$8
     }
     $4_1 = HEAP32[18392];
     if (!$4_1) {
      break label$8
     }
     $4_1 = $4_1 + 876 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
   }
   HEAP32[$3 + 200 >> 2] = $0_1;
   HEAP32[$3 + 204 >> 2] = $2_1;
  }
  HEAP32[HEAP32[$3 + 204 >> 2] + (HEAP32[$3 + 196 >> 2] << 2) >> 2] = $5_1;
  HEAP32[$3 + 196 >> 2] = HEAP32[$3 + 196 >> 2] + 1;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $266($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[18392];
  $3 = HEAP32[$7_1 + 7080 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $0_1;
  $4_1 = 4;
  $2_1 = $6_1 + 12 | 0;
  $1_1 = HEAP32[(HEAP32[$3 + 204 >> 2] + (HEAP32[$3 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
  while (1) {
   $5_1 = $2_1;
   $2_1 = $2_1 + 1 | 0;
   $5_1 = HEAP32[((HEAPU8[$5_1 | 0] ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
   $1_1 = $5_1;
   $4_1 = $4_1 - 1 | 0;
   if ($4_1) {
    continue
   }
   break;
  };
  $5_1 = $5_1 ^ -1;
  if (($5_1 | 0) == HEAP32[$7_1 + 7112 >> 2]) {
   $75($5_1, 4, $0_1)
  }
  $2_1 = HEAP32[$3 + 196 >> 2];
  $0_1 = HEAP32[$3 + 200 >> 2];
  label$3 : {
   if (($2_1 | 0) != ($0_1 | 0)) {
    break label$3
   }
   $1_1 = $2_1 + 1 | 0;
   $4_1 = $0_1;
   if ($0_1) {
    $2_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $0_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
   if (($4_1 | 0) >= ($0_1 | 0)) {
    break label$3
   }
   $2_1 = $0_1 << 2;
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
   $1_1 = HEAP32[$3 + 204 >> 2];
   if ($1_1) {
    $1602($2_1, $1_1, HEAP32[$3 + 196 >> 2] << 2);
    $1_1 = HEAP32[$3 + 204 >> 2];
    label$8 : {
     if (!$1_1) {
      break label$8
     }
     $4_1 = HEAP32[18392];
     if (!$4_1) {
      break label$8
     }
     $4_1 = $4_1 + 876 | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
   }
   HEAP32[$3 + 200 >> 2] = $0_1;
   HEAP32[$3 + 204 >> 2] = $2_1;
  }
  HEAP32[HEAP32[$3 + 204 >> 2] + (HEAP32[$3 + 196 >> 2] << 2) >> 2] = $5_1;
  HEAP32[$3 + 196 >> 2] = HEAP32[$3 + 196 >> 2] + 1;
  global$0 = $6_1 + 16 | 0;
 }
 
 function $267($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[18392];
  $3 = HEAP32[$2_1 + 7080 >> 2];
  if (($0_1 | 0) == HEAP32[$2_1 + 7112 >> 2]) {
   $75($0_1, 13, 0)
  }
  $4_1 = HEAP32[$3 + 196 >> 2];
  $2_1 = HEAP32[$3 + 200 >> 2];
  label$2 : {
   if (($4_1 | 0) != ($2_1 | 0)) {
    break label$2
   }
   $1_1 = $4_1 + 1 | 0;
   $5_1 = $2_1;
   if ($2_1) {
    $4_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $4_1 = 8
   }
   $2_1 = ($1_1 | 0) < ($4_1 | 0) ? $4_1 : $1_1;
   if (($5_1 | 0) >= ($2_1 | 0)) {
    break label$2
   }
   $4_1 = $2_1 << 2;
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   }
   $4_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
   $1_1 = HEAP32[$3 + 204 >> 2];
   if ($1_1) {
    $1602($4_1, $1_1, HEAP32[$3 + 196 >> 2] << 2);
    $1_1 = HEAP32[$3 + 204 >> 2];
    label$7 : {
     if (!$1_1) {
      break label$7
     }
     $5_1 = HEAP32[18392];
     if (!$5_1) {
      break label$7
     }
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
   }
   HEAP32[$3 + 200 >> 2] = $2_1;
   HEAP32[$3 + 204 >> 2] = $4_1;
  }
  HEAP32[HEAP32[$3 + 204 >> 2] + (HEAP32[$3 + 196 >> 2] << 2) >> 2] = $0_1;
  HEAP32[$3 + 196 >> 2] = HEAP32[$3 + 196 >> 2] + 1;
 }
 
 function $268($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $1_1 = 14998;
  $3 = $0_1 ^ -1;
  $0_1 = $3;
  while (1) {
   $4_1 = $1_1;
   $1_1 = $1_1 + 1 | 0;
   $2_1 = HEAPU8[$4_1 | 0];
   if ($2_1) {
    $0_1 = ($2_1 | 0) != 35 | HEAPU8[$1_1 | 0] != 35 ? $0_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? $3 : $0_1;
    $0_1 = HEAP32[(($2_1 ^ $0_1 & 255) << 2) + 19360 >> 2] ^ $0_1 >>> 8;
   }
   if ($2_1) {
    continue
   }
   break;
  };
  $0_1 = $0_1 ^ -1;
  $1_1 = HEAP32[18392];
  if (($0_1 | 0) == HEAP32[$1_1 + 7136 >> 2]) {
   HEAP32[$1_1 + 7140 >> 2] = $0_1
  }
  if (HEAP32[$1_1 + 7196 >> 2] == ($0_1 | 0)) {
   HEAP8[$1_1 + 7200 | 0] = 1
  }
  if (HEAP32[$1_1 + 7112 >> 2] == ($0_1 | 0)) {
   $75($0_1, 11, 14998)
  }
  return $0_1;
 }
 
 function $269() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP32[$0_1 + 196 >> 2] = HEAP32[$0_1 + 196 >> 2] - 1;
 }
 
 function $270($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = $0_1;
  $2_1 = HEAP32[18392];
  $1_1 = HEAP32[$2_1 + 7080 >> 2];
  $6_1 = HEAP32[((HEAP32[$1_1 + 196 >> 2] << 2) + HEAP32[$1_1 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
  $1_1 = $6_1;
  while (1) {
   $5_1 = $4_1;
   $4_1 = $5_1 + 1 | 0;
   $3 = HEAPU8[$5_1 | 0];
   if ($3) {
    if (!(($3 | 0) != 35 | HEAPU8[$4_1 | 0] != 35)) {
     $1_1 = HEAPU8[$5_1 + 2 | 0] == 35 ? $6_1 : $1_1
    }
    $1_1 = HEAP32[(($3 ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $1_1 = $1_1 ^ -1;
  if (($1_1 | 0) == HEAP32[$2_1 + 7136 >> 2]) {
   HEAP32[$2_1 + 7140 >> 2] = $1_1
  }
  if (HEAP32[$2_1 + 7196 >> 2] == ($1_1 | 0)) {
   HEAP8[$2_1 + 7200 | 0] = 1
  }
  if (HEAP32[$2_1 + 7112 >> 2] == ($1_1 | 0)) {
   $75($1_1, 11, $0_1)
  }
  return $1_1;
 }
 
 function $273($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  if (!(HEAPF32[$0_1 + 4 >> 2] < HEAPF32[$2_1 + 508 >> 2])) {
   return 0
  }
  if (!(HEAPF32[$1_1 + 4 >> 2] > HEAPF32[$2_1 + 500 >> 2])) {
   return 0
  }
  return HEAPF32[$0_1 >> 2] < HEAPF32[$2_1 + 504 >> 2] ? HEAPF32[$1_1 >> 2] > HEAPF32[$2_1 + 496 >> 2] : $3;
 }
 
 function $274($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  return !$1695($0_1, 16215) & (($1_1 | 0) == 5408 & ($2_1 | 0) == 1048 & ($3 | 0) == 8 & ($4_1 | 0) == 16 & ($5_1 | 0) == 20 & ($6_1 | 0) == 2);
 }
 
 function $275() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[18392];
  $11_1 = HEAP32[$1_1 + 7464 >> 2];
  $12_1 = HEAP32[$1_1 + 7456 >> 2] - 1 | 0;
  $0_1 = $11_1 + Math_imul($12_1, 48) | 0;
  $8 = HEAPF32[$0_1 + 4 >> 2];
  $5_1 = HEAP32[$0_1 + 8 >> 2];
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $3 = HEAP32[$1_1 + 7080 >> 2];
  $10_1 = $3 + 232 | 0;
  $6_1 = HEAPF32[$10_1 >> 2];
  $13 = $3 + 236 | 0;
  $7_1 = HEAPF32[$13 >> 2];
  $9 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 28 >> 2] = $7_1 >= $9 ? $7_1 : $9;
  HEAP32[$2_1 + 16 >> 2] = $4_1;
  HEAP32[$2_1 + 20 >> 2] = $5_1;
  HEAPF32[$2_1 + 24 >> 2] = $6_1 >= $8 ? $6_1 : $8;
  HEAP32[$3 + 208 >> 2] = $4_1;
  HEAP32[$3 + 212 >> 2] = $5_1;
  $8 = HEAPF32[$0_1 + 12 >> 2];
  $9 = HEAPF32[$0_1 + 16 >> 2];
  HEAPF32[$13 >> 2] = $7_1 <= $9 ? $9 : $7_1;
  HEAPF32[$10_1 >> 2] = $6_1 <= $8 ? $8 : $6_1;
  HEAP32[$3 + 272 >> 2] = HEAP32[$0_1 + 20 >> 2];
  HEAP32[$3 + 280 >> 2] = HEAP32[$0_1 + 24 >> 2];
  $4_1 = HEAP32[$0_1 + 32 >> 2];
  $5_1 = $3 + 248 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$0_1 + 28 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $6_1 = HEAPF32[$0_1 + 36 >> 2];
  HEAPF32[$3 + 264 >> 2] = $6_1;
  if (HEAPU8[$1_1 + 12196 | 0]) {
   HEAP32[$1_1 + 12228 >> 2] = -8388609
  }
  label$2 : {
   if (!HEAPU8[$0_1 + 46 | 0]) {
    break label$2
   }
   $7_1 = HEAPF32[$3 + 268 >> 2];
   HEAPF32[$3 + 264 >> 2] = $6_1 <= $7_1 ? $7_1 : $6_1;
   HEAPF32[$2_1 + 12 >> 2] = HEAPF32[$2_1 + 28 >> 2] - HEAPF32[$2_1 + 20 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$2_1 + 24 >> 2] - HEAPF32[$2_1 + 16 >> 2];
   $212($2_1 + 8 | 0, Math_fround(-1.0));
   $213($2_1 + 16 | 0, 0, 0, 1);
   $3 = 0;
   $0_1 = HEAP32[$1_1 + 7136 >> 2];
   $4_1 = Math_imul($12_1, 48) + $11_1 | 0;
   if (($0_1 | 0) != HEAP32[$4_1 + 40 >> 2]) {
    $3 = HEAP32[$1_1 + 7140 >> 2] == ($0_1 | 0) & ($0_1 | 0) != 0
   }
   $5_1 = 0;
   $5_1 = HEAPU8[$4_1 + 44 | 0] ? $5_1 : HEAPU8[$1_1 + 7200 | 0] != 0;
   label$5 : {
    if (!$3) {
     if (!$5_1) {
      break label$5
     }
     $0_1 = HEAP32[$1_1 + 7196 >> 2];
    }
    HEAP32[$1_1 + 7240 >> 2] = $0_1;
   }
   $4_1 = HEAP32[$2_1 + 20 >> 2];
   $0_1 = $1_1 + 7252 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   $4_1 = $2_1 + 24 | 0;
   $10_1 = HEAP32[$4_1 + 4 >> 2];
   $0_1 = $1_1 + 7260 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $10_1;
   if (!(HEAPU8[(Math_imul($12_1, 48) + $11_1 | 0) + 45 | 0] | !HEAP32[$1_1 + 7116 >> 2])) {
    $0_1 = $1_1 + 7248 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 128;
   }
   if (!(!$3 | !HEAPU8[$1_1 + 7153 | 0])) {
    $0_1 = $1_1 + 7248 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 4;
   }
   $3 = $1_1 + 7248 | 0;
   $0_1 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = $0_1 | 32;
   if (!$5_1 | HEAP32[$1_1 + 7136 >> 2] == HEAP32[$1_1 + 7196 >> 2]) {
    break label$2
   }
   HEAP32[$1_1 + 7248 >> 2] = $0_1 | 96;
  }
  HEAP32[$1_1 + 7456 >> 2] = HEAP32[$1_1 + 7456 >> 2] - 1;
  global$0 = $2_1 + 32 | 0;
 }
 
 function $276($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[18392];
  $2_1 = HEAP32[$3 + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  if (!HEAPU8[$2_1 + 143 | 0]) {
   label$2 : {
    if ($0_1 != Math_fround(0.0)) {
     $1_1 = Math_fround(HEAPF32[$2_1 + 280 >> 2] + Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1) + Math_fround(Math_fround(HEAPF32[$2_1 + 12 >> 2] - HEAPF32[$2_1 + 88 >> 2]) + $0_1)));
     $0_1 = HEAPF32[$2_1 + 276 >> 2];
     break label$2;
    }
    $0_1 = $1_1 < Math_fround(0.0) ? HEAPF32[$3 + 5492 >> 2] : $1_1;
    $1_1 = HEAPF32[$2_1 + 216 >> 2];
   }
   HEAPF32[$2_1 + 208 >> 2] = $0_1 + $1_1;
   HEAPF32[$2_1 + 212 >> 2] = HEAPF32[$2_1 + 220 >> 2];
   $4_1 = $2_1 + 256 | 0;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $3 = $2_1 + 248 | 0;
   HEAP32[$3 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $5_1;
   HEAPF32[$2_1 + 264 >> 2] = HEAPF32[$2_1 + 268 >> 2];
  }
 }
 
 function $277($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAPF32[$0_1 + 12 >> 2];
  $4_1 = HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$0_1 + 8 >> 2] - HEAPF32[$0_1 >> 2];
  HEAPF32[$2_1 + 12 >> 2] = $3 - $4_1;
  $212($2_1 + 8 | 0, $1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $278($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $2_1 = HEAP32[$1_1 + 212 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 208 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $279($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$1_1 + 208 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 212 >> 2] = $4_1;
  $0_1 = $1_1 + 232 | 0;
  $2_1 = HEAPF32[$0_1 >> 2];
  $3 = HEAPF32[$1_1 + 208 >> 2];
  HEAPF32[$0_1 >> 2] = $2_1 >= $3 ? $2_1 : $3;
  $0_1 = $1_1 + 236 | 0;
  $2_1 = HEAPF32[$0_1 >> 2];
  $3 = HEAPF32[$1_1 + 212 >> 2];
  HEAPF32[$0_1 >> 2] = $2_1 >= $3 ? $2_1 : $3;
 }
 
 function $281() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  return Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 208 >> 2] - HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 88 >> 2]));
 }
 
 function $282() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  return Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 212 >> 2] - HEAPF32[$0_1 + 16 >> 2]) + HEAPF32[$0_1 + 92 >> 2]));
 }
 
 function $284($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = Math_fround(0);
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  $0_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 12 >> 2] - HEAPF32[$1_1 + 88 >> 2]) + $0_1);
  HEAPF32[$1_1 + 208 >> 2] = $0_1;
  $1_1 = $1_1 + 232 | 0;
  $2_1 = HEAPF32[$1_1 >> 2];
  HEAPF32[$1_1 >> 2] = $0_1 <= $2_1 ? $2_1 : $0_1;
 }
 
 function $285($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = Math_fround(0);
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  $0_1 = Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] - HEAPF32[$1_1 + 92 >> 2]) + $0_1);
  HEAPF32[$1_1 + 212 >> 2] = $0_1;
  $1_1 = $1_1 + 236 | 0;
  $2_1 = HEAPF32[$1_1 >> 2];
  HEAPF32[$1_1 >> 2] = $0_1 <= $2_1 ? $2_1 : $0_1;
 }
 
 function $287($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  $0_1 = $0_1 == Math_fround(0.0) ? HEAPF32[$1_1 + 5524 >> 2] : $0_1;
  $1_1 = $2_1 + 272 | 0;
  $0_1 = Math_fround($0_1 + HEAPF32[$1_1 >> 2]);
  HEAPF32[$1_1 >> 2] = $0_1;
  HEAPF32[$2_1 + 208 >> 2] = Math_fround($0_1 + HEAPF32[$2_1 + 12 >> 2]) + HEAPF32[$2_1 + 276 >> 2];
 }
 
 function $288($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  $0_1 = $0_1 == Math_fround(0.0) ? HEAPF32[$1_1 + 5524 >> 2] : $0_1;
  $1_1 = $2_1 + 272 | 0;
  $0_1 = Math_fround(HEAPF32[$1_1 >> 2] - $0_1);
  HEAPF32[$1_1 >> 2] = $0_1;
  HEAPF32[$2_1 + 208 >> 2] = Math_fround($0_1 + HEAPF32[$2_1 + 12 >> 2]) + HEAPF32[$2_1 + 276 >> 2];
 }
 
 function $289($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $6_1 = HEAP32[18392];
  $1_1 = HEAP32[$6_1 + 7080 >> 2];
  $2_1 = HEAP32[$1_1 + 392 >> 2];
  $4_1 = HEAP32[$1_1 + 396 >> 2];
  label$1 : {
   if (($2_1 | 0) != ($4_1 | 0)) {
    break label$1
   }
   $3 = $2_1 + 1 | 0;
   $5_1 = $4_1;
   if ($4_1) {
    $2_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $4_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
   if (($5_1 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   $2_1 = $4_1 << 2;
   if ($6_1) {
    $3 = $6_1 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $2_1 = FUNCTION_TABLE[HEAP32[18314]]($2_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$1_1 + 400 >> 2];
   if ($3) {
    $1602($2_1, $3, HEAP32[$1_1 + 392 >> 2] << 2);
    $3 = HEAP32[$1_1 + 400 >> 2];
    label$6 : {
     if (!$3) {
      break label$6
     }
     $5_1 = HEAP32[18392];
     if (!$5_1) {
      break label$6
     }
     $5_1 = $5_1 + 876 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$1_1 + 396 >> 2] = $4_1;
   HEAP32[$1_1 + 400 >> 2] = $2_1;
  }
  HEAP32[HEAP32[$1_1 + 400 >> 2] + (HEAP32[$1_1 + 392 >> 2] << 2) >> 2] = HEAP32[$1_1 + 384 >> 2];
  HEAP32[$1_1 + 392 >> 2] = HEAP32[$1_1 + 392 >> 2] + 1;
  HEAPF32[$1_1 + 384 >> 2] = $0_1 == Math_fround(0.0) ? HEAPF32[$1_1 + 544 >> 2] : $0_1;
  HEAP32[$6_1 + 7220 >> 2] = HEAP32[$6_1 + 7220 >> 2] & -2;
 }
 
 function $290($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  $10_1 = HEAP32[18392];
  $7_1 = HEAPF32[$10_1 + 5500 >> 2];
  $12_1 = Math_fround($0_1 - 1 | 0);
  $11_1 = Math_fround(Math_fround($1_1 - Math_fround($7_1 * $12_1)) / Math_fround($0_1 | 0));
  label$1 : {
   if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$11_1;
    break label$1;
   }
   $2_1 = -2147483648;
  }
  $11_1 = $1_1;
  $1_1 = Math_fround($2_1 | 0);
  $1_1 = $1_1 <= Math_fround(1.0) ? Math_fround(1.0) : $1_1;
  $7_1 = Math_fround($11_1 - Math_fround(Math_fround($7_1 + $1_1) * $12_1));
  label$3 : {
   if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$7_1;
    break label$3;
   }
   $2_1 = -2147483648;
  }
  $7_1 = Math_fround($2_1 | 0);
  $6_1 = $7_1 <= Math_fround(1.0);
  $4_1 = HEAP32[$10_1 + 7080 >> 2];
  $5_1 = HEAP32[$4_1 + 392 >> 2];
  $2_1 = HEAP32[$4_1 + 396 >> 2];
  label$5 : {
   if (($5_1 | 0) != ($2_1 | 0)) {
    break label$5
   }
   $3 = $5_1 + 1 | 0;
   $8 = $2_1;
   if ($2_1) {
    $5_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $5_1 = 8
   }
   $2_1 = ($3 | 0) < ($5_1 | 0) ? $5_1 : $3;
   if (($8 | 0) >= ($2_1 | 0)) {
    break label$5
   }
   $5_1 = $2_1 << 2;
   if ($10_1) {
    $3 = $10_1 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $5_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$4_1 + 400 >> 2];
   if ($3) {
    $1602($5_1, $3, HEAP32[$4_1 + 392 >> 2] << 2);
    $3 = HEAP32[$4_1 + 400 >> 2];
    label$10 : {
     if (!$3) {
      break label$10
     }
     $9 = HEAP32[18392];
     if (!$9) {
      break label$10
     }
     $9 = $9 + 876 | 0;
     HEAP32[$9 >> 2] = HEAP32[$9 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$4_1 + 396 >> 2] = $2_1;
   HEAP32[$4_1 + 400 >> 2] = $5_1;
  }
  $7_1 = $6_1 ? Math_fround(1.0) : $7_1;
  HEAP32[HEAP32[$4_1 + 400 >> 2] + (HEAP32[$4_1 + 392 >> 2] << 2) >> 2] = HEAP32[$4_1 + 384 >> 2];
  $5_1 = HEAP32[$4_1 + 392 >> 2];
  $2_1 = $5_1 + 1 | 0;
  HEAP32[$4_1 + 392 >> 2] = $2_1;
  $3 = $2_1;
  $2_1 = HEAP32[$4_1 + 396 >> 2];
  label$11 : {
   if (($3 | 0) != ($2_1 | 0)) {
    break label$11
   }
   $3 = $5_1 + 2 | 0;
   $8 = $2_1;
   if ($2_1) {
    $5_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $5_1 = 8
   }
   $2_1 = ($3 | 0) < ($5_1 | 0) ? $5_1 : $3;
   if (($8 | 0) >= ($2_1 | 0)) {
    break label$11
   }
   $5_1 = $2_1 << 2;
   $3 = HEAP32[18392];
   if ($3) {
    $3 = $3 + 876 | 0;
    HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
   }
   $5_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1, HEAP32[18394]) | 0;
   $3 = HEAP32[$4_1 + 400 >> 2];
   if ($3) {
    $1602($5_1, $3, HEAP32[$4_1 + 392 >> 2] << 2);
    $3 = HEAP32[$4_1 + 400 >> 2];
    label$16 : {
     if (!$3) {
      break label$16
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$16
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$4_1 + 396 >> 2] = $2_1;
   HEAP32[$4_1 + 400 >> 2] = $5_1;
  }
  HEAPF32[HEAP32[$4_1 + 400 >> 2] + (HEAP32[$4_1 + 392 >> 2] << 2) >> 2] = $7_1;
  HEAP32[$4_1 + 392 >> 2] = HEAP32[$4_1 + 392 >> 2] + 1;
  if (($0_1 | 0) >= 3) {
   $9 = $0_1 - 3 | 0;
   $2_1 = 0;
   while (1) {
    $5_1 = $2_1;
    $3 = HEAP32[$4_1 + 392 >> 2];
    $2_1 = HEAP32[$4_1 + 396 >> 2];
    label$19 : {
     if (($3 | 0) != ($2_1 | 0)) {
      break label$19
     }
     $6_1 = $3 + 1 | 0;
     $8 = $2_1;
     if ($2_1) {
      $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
     } else {
      $3 = 8
     }
     $2_1 = ($3 | 0) > ($6_1 | 0) ? $3 : $6_1;
     if (($8 | 0) >= ($2_1 | 0)) {
      break label$19
     }
     $3 = $2_1 << 2;
     $6_1 = HEAP32[18392];
     if ($6_1) {
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] + 1;
     }
     $3 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
     $6_1 = HEAP32[$4_1 + 400 >> 2];
     if ($6_1) {
      $1602($3, $6_1, HEAP32[$4_1 + 392 >> 2] << 2);
      $6_1 = HEAP32[$4_1 + 400 >> 2];
      label$24 : {
       if (!$6_1) {
        break label$24
       }
       $8 = HEAP32[18392];
       if (!$8) {
        break label$24
       }
       $8 = $8 + 876 | 0;
       HEAP32[$8 >> 2] = HEAP32[$8 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($6_1, HEAP32[18394]);
     }
     HEAP32[$4_1 + 396 >> 2] = $2_1;
     HEAP32[$4_1 + 400 >> 2] = $3;
    }
    HEAPF32[HEAP32[$4_1 + 400 >> 2] + (HEAP32[$4_1 + 392 >> 2] << 2) >> 2] = $1_1;
    HEAP32[$4_1 + 392 >> 2] = HEAP32[$4_1 + 392 >> 2] + 1;
    $2_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
  }
  HEAPF32[$4_1 + 384 >> 2] = ($0_1 | 0) == 1 ? $7_1 : $1_1;
  HEAP32[$10_1 + 7220 >> 2] = HEAP32[$10_1 + 7220 >> 2] & -2;
 }
 
 function $291() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = Math_fround(0);
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  $1_1 = $0_1 + 392 | 0;
  $2_1 = HEAP32[$1_1 >> 2] - 1 | 0;
  $3 = HEAPF32[HEAP32[$0_1 + 400 >> 2] + ($2_1 << 2) >> 2];
  HEAP32[$1_1 >> 2] = $2_1;
  HEAPF32[$0_1 + 384 >> 2] = $3;
 }
 
 function $292() {
  var $0_1 = 0, $1_1 = Math_fround(0), $2_1 = 0;
  $0_1 = HEAP32[18392];
  $2_1 = HEAP32[$0_1 + 7080 >> 2];
  $1_1 = HEAPF32[(HEAP8[$0_1 + 7220 | 0] & 1 ? $0_1 + 7224 | 0 : $2_1 + 384 | 0) >> 2];
  label$1 : {
   if (!($1_1 < Math_fround(0.0))) {
    break label$1
   }
   if (HEAP32[$2_1 + 368 >> 2] | HEAP32[$0_1 + 8036 >> 2]) {
    $0_1 = $2_1 + 472 | 0
   } else {
    $0_1 = $2_1 + 520 | 0
   }
   $1_1 = Math_fround($1_1 + Math_fround(HEAPF32[$0_1 >> 2] - HEAPF32[$2_1 + 208 >> 2]));
   $1_1 = $1_1 <= Math_fround(1.0) ? Math_fround(1.0) : $1_1;
  }
  if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
   $0_1 = ~~$1_1
  } else {
   $0_1 = -2147483648
  }
  return Math_fround(Math_fround($0_1 | 0));
 }
 
 function $293($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $5_1 = HEAP32[18392];
  $4_1 = HEAP32[$5_1 + 7080 >> 2];
  $7_1 = HEAPF32[$1_1 >> 2];
  label$1 : {
   if (!($7_1 < Math_fround(0.0))) {
    $8 = Math_fround(0.0);
    if (!($6_1 < Math_fround(0.0))) {
     break label$1
    }
   }
   $9 = HEAPF32[$4_1 + 524 >> 2];
   if (HEAP32[$4_1 + 368 >> 2] | HEAP32[$5_1 + 8036 >> 2]) {
    $5_1 = $4_1 + 472 | 0
   } else {
    $5_1 = $4_1 + 520 | 0
   }
   $8 = HEAPF32[$5_1 >> 2];
  }
  label$5 : {
   if ($7_1 != Math_fround(0.0)) {
    if (!($7_1 < Math_fround(0.0))) {
     break label$5
    }
    $2_1 = Math_fround($7_1 + Math_fround($8 - HEAPF32[$4_1 + 208 >> 2]));
    $2_1 = $2_1 <= Math_fround(4.0) ? Math_fround(4.0) : $2_1;
   }
   HEAPF32[$1_1 >> 2] = $2_1;
  }
  label$7 : {
   if ($6_1 != Math_fround(0.0)) {
    if (!($6_1 < Math_fround(0.0))) {
     break label$7
    }
    $2_1 = Math_fround($6_1 + Math_fround($9 - HEAPF32[$4_1 + 212 >> 2]));
    $3 = $2_1 <= Math_fround(4.0) ? Math_fround(4.0) : $2_1;
   }
   HEAPF32[$1_1 + 4 >> 2] = $3;
  }
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
 }
 
 function $295() {
  var $0_1 = 0;
  $0_1 = HEAP32[18392];
  return Math_fround(Math_fround(HEAPF32[$0_1 + 6468 >> 2] + HEAPF32[$0_1 + 5496 >> 2]));
 }
 
 function $296() {
  var $0_1 = 0, $1_1 = Math_fround(0);
  $0_1 = HEAP32[18392];
  $1_1 = HEAPF32[$0_1 + 5480 >> 2];
  return Math_fround(Math_fround(Math_fround($1_1 + $1_1) + HEAPF32[$0_1 + 6468 >> 2]));
 }
 
 function $297() {
  var $0_1 = 0, $1_1 = Math_fround(0);
  $0_1 = HEAP32[18392];
  $1_1 = HEAPF32[$0_1 + 5480 >> 2];
  return Math_fround(Math_fround(Math_fround(Math_fround($1_1 + $1_1) + HEAPF32[$0_1 + 6468 >> 2]) + HEAPF32[$0_1 + 5496 >> 2]));
 }
 
 function $301() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0);
  $1_1 = HEAP32[18392];
  $7_1 = HEAP32[$1_1 + 7456 >> 2];
  $2_1 = $7_1 + 1 | 0;
  $3 = HEAP32[$1_1 + 7080 >> 2];
  $0_1 = HEAP32[$1_1 + 7460 >> 2];
  label$1 : {
   if (($0_1 | 0) > ($7_1 | 0)) {
    break label$1
   }
   $4_1 = $0_1;
   if ($0_1) {
    $5_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0
   } else {
    $5_1 = 8
   }
   $0_1 = ($2_1 | 0) < ($5_1 | 0) ? $5_1 : $2_1;
   if (($4_1 | 0) >= ($0_1 | 0)) {
    break label$1
   }
   $5_1 = Math_imul($0_1, 48);
   if ($1_1) {
    $4_1 = $1_1 + 876 | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
   }
   $5_1 = FUNCTION_TABLE[HEAP32[18314]]($5_1, HEAP32[18394]) | 0;
   $4_1 = HEAP32[$1_1 + 7464 >> 2];
   if ($4_1) {
    $1602($5_1, $4_1, Math_imul(HEAP32[$1_1 + 7456 >> 2], 48));
    $4_1 = HEAP32[$1_1 + 7464 >> 2];
    label$6 : {
     if (!$4_1) {
      break label$6
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$6
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
   }
   HEAP32[$1_1 + 7460 >> 2] = $0_1;
   HEAP32[$1_1 + 7464 >> 2] = $5_1;
  }
  HEAP32[$1_1 + 7456 >> 2] = $2_1;
  $0_1 = HEAP32[$1_1 + 7464 >> 2] + Math_imul($7_1, 48) | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3 + 4 >> 2];
  $2_1 = HEAP32[$3 + 212 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$3 + 208 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  $5_1 = $3 + 232 | 0;
  $2_1 = $5_1;
  $7_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 12 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 16 >> 2] = $7_1;
  $7_1 = $3 + 272 | 0;
  HEAP32[$0_1 + 20 >> 2] = HEAP32[$7_1 >> 2];
  $4_1 = $3 + 280 | 0;
  HEAP32[$0_1 + 24 >> 2] = HEAP32[$4_1 >> 2];
  $2_1 = $3 + 248 | 0;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 28 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 32 >> 2] = $6_1;
  HEAPF32[$0_1 + 36 >> 2] = HEAPF32[$3 + 264 >> 2];
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$1_1 + 7140 >> 2];
  HEAP8[$0_1 + 45 | 0] = HEAP32[$1_1 + 7116 >> 2] != 0;
  $6_1 = HEAPU8[$1_1 + 7200 | 0];
  HEAP8[$0_1 + 46 | 0] = 1;
  HEAP8[$0_1 + 44 | 0] = $6_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $0_1 = HEAP32[$3 + 212 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$3 + 208 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $0_1;
  $8 = Math_fround(Math_fround(HEAPF32[$3 + 208 >> 2] - HEAPF32[$3 + 12 >> 2]) - HEAPF32[$3 + 276 >> 2]);
  HEAPF32[$4_1 >> 2] = $8;
  HEAPF32[$7_1 >> 2] = $8;
  if (HEAPU8[$1_1 + 12196 | 0]) {
   HEAP32[$1_1 + 12228 >> 2] = -8388609
  }
 }
 
 function $302($0_1, $1_1) {
  var $2_1 = 0;
  HEAP32[$0_1 + 120 >> 2] = 0;
  HEAPF32[$0_1 + 112 >> 2] = 1;
  $1_1 = Math_fround(HEAPF32[$0_1 + 88 >> 2] + $1_1);
  label$1 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$1_1;
    break label$1;
   }
   $2_1 = -2147483648;
  }
  HEAPF32[$0_1 + 104 >> 2] = $2_1 | 0;
 }
 
 function $303() {
  return Math_fround(HEAPF32[HEAP32[HEAP32[18392] + 7080 >> 2] + 88 >> 2]);
 }
 
 function $304() {
  return Math_fround(HEAPF32[HEAP32[HEAP32[18392] + 7080 >> 2] + 92 >> 2]);
 }
 
 function $305() {
  return Math_fround(HEAPF32[HEAP32[HEAP32[18392] + 7080 >> 2] + 96 >> 2]);
 }
 
 function $306() {
  return Math_fround(HEAPF32[HEAP32[HEAP32[18392] + 7080 >> 2] + 100 >> 2]);
 }
 
 function $307($0_1, $1_1) {
  HEAP32[$0_1 + 124 >> 2] = 0;
  HEAP32[$0_1 + 116 >> 2] = 0;
  HEAPF32[$0_1 + 108 >> 2] = $1_1;
 }
 
 function $308($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP32[$1_1 + 120 >> 2] = 0;
  HEAP32[$1_1 + 112 >> 2] = 0;
  HEAPF32[$1_1 + 104 >> 2] = $0_1;
 }
 
 function $309($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP32[$1_1 + 124 >> 2] = 0;
  HEAP32[$1_1 + 116 >> 2] = 0;
  HEAPF32[$1_1 + 108 >> 2] = $0_1;
 }
 
 function $310($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP32[$2_1 + 120 >> 2] = 0;
  HEAPF32[$2_1 + 112 >> 2] = $1_1;
  $0_1 = Math_fround(HEAPF32[$2_1 + 88 >> 2] + $0_1);
  label$1 : {
   if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$0_1;
    break label$1;
   }
   $3 = -2147483648;
  }
  HEAPF32[$2_1 + 104 >> 2] = $3 | 0;
 }
 
 function $311($0_1, $1_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0);
  $4_1 = HEAP32[18392];
  $2_1 = HEAP32[$4_1 + 7080 >> 2];
  $7_1 = HEAP32[$2_1 + 8 >> 2];
  if (!($7_1 & 1)) {
   $3 = Math_fround(HEAPF32[$4_1 + 6472 >> 2] * HEAPF32[$2_1 + 572 >> 2]);
   $5_1 = HEAP32[$2_1 + 728 >> 2];
   if ($5_1) {
    $3 = Math_fround($3 * HEAPF32[$5_1 + 572 >> 2])
   }
   $6_1 = HEAPF32[$4_1 + 5480 >> 2];
   $3 = Math_fround(Math_fround($6_1 + $6_1) + $3);
  }
  $6_1 = $3;
  $3 = Math_fround(0.0);
  if ($7_1 & 1024) {
   $3 = Math_fround(HEAPF32[$4_1 + 6472 >> 2] * HEAPF32[$2_1 + 572 >> 2]);
   $9 = HEAPF32[$2_1 + 312 >> 2];
   $5_1 = HEAP32[$2_1 + 728 >> 2];
   if ($5_1) {
    $3 = Math_fround($3 * HEAPF32[$5_1 + 572 >> 2])
   }
   $8 = HEAPF32[$4_1 + 5480 >> 2];
   $3 = Math_fround(Math_fround($8 + $8) + Math_fround($9 + $3));
  }
  HEAP32[$2_1 + 124 >> 2] = 0;
  HEAPF32[$2_1 + 116 >> 2] = $1_1;
  $4_1 = $2_1 + 108 | 0;
  $0_1 = Math_fround(HEAPF32[$2_1 + 92 >> 2] + Math_fround($0_1 - Math_fround($6_1 + $3)));
  label$7 : {
   if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$0_1;
    break label$7;
   }
   $2_1 = -2147483648;
  }
  HEAPF32[$4_1 >> 2] = $2_1 | 0;
 }
 
 function $312($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  $1_1 = HEAP32[18392];
  $4_1 = HEAPF32[$1_1 + 7260 >> 2];
  $6_1 = HEAPF32[$1_1 + 7252 >> 2];
  $2_1 = HEAPF32[$1_1 + 5492 >> 2];
  $1_1 = HEAP32[$1_1 + 7080 >> 2];
  HEAPF32[$1_1 + 112 >> 2] = $0_1;
  $3 = HEAPF32[$1_1 + 60 >> 2];
  $2_1 = $2_1 <= $3 ? $3 : $2_1;
  $3 = Math_fround($3 - $2_1);
  HEAPF32[$1_1 + 120 >> 2] = $3 <= Math_fround(0.0) ? Math_fround(0.0) : $3;
  $4_1 = Math_fround($4_1 + $2_1);
  $2_1 = Math_fround($6_1 - $2_1);
  $0_1 = Math_fround(HEAPF32[$1_1 + 88 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround($4_1 - $2_1) * $0_1) + $2_1) - HEAPF32[$1_1 + 12 >> 2]));
  label$1 : {
   if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
    $5_1 = ~~$0_1;
    break label$1;
   }
   $5_1 = -2147483648;
  }
  HEAPF32[$1_1 + 104 >> 2] = $5_1 | 0;
 }
 
 function $313($0_1) {
  $0_1 = Math_fround($0_1);
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $4_1 = HEAP32[18392];
  $8 = $4_1 + 5496 | 0;
  $1_1 = HEAP32[$4_1 + 7080 >> 2];
  $12_1 = $1_1 + 16 | 0;
  $13 = $1_1 + 260 | 0;
  $14 = $1_1 + 220 | 0;
  $15_1 = $1_1 - -64 | 0;
  $9 = HEAP32[$1_1 + 8 >> 2];
  if (!($9 & 1)) {
   $6_1 = Math_fround(HEAPF32[$4_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
   $10_1 = HEAP32[$1_1 + 728 >> 2];
   if ($10_1) {
    $6_1 = Math_fround($6_1 * HEAPF32[$10_1 + 572 >> 2])
   }
   $3 = HEAPF32[$4_1 + 5480 >> 2];
   $6_1 = Math_fround(Math_fround($3 + $3) + $6_1);
  }
  $7_1 = HEAPF32[$8 >> 2];
  $16_1 = HEAPF32[$12_1 >> 2];
  $17_1 = HEAPF32[$13 >> 2];
  $11_1 = HEAPF32[$14 >> 2];
  $2_1 = HEAPF32[$15_1 >> 2];
  $3 = Math_fround(0.0);
  if ($9 & 1024) {
   $3 = Math_fround(HEAPF32[$4_1 + 6472 >> 2] * HEAPF32[$1_1 + 572 >> 2]);
   $18_1 = HEAPF32[$1_1 + 312 >> 2];
   $8 = HEAP32[$1_1 + 728 >> 2];
   if ($8) {
    $3 = Math_fround($3 * HEAPF32[$8 + 572 >> 2])
   }
   $5_1 = HEAPF32[$4_1 + 5480 >> 2];
   $3 = Math_fround(Math_fround($5_1 + $5_1) + Math_fround($18_1 + $3));
  }
  HEAPF32[$1_1 + 116 >> 2] = $0_1;
  $5_1 = $2_1;
  $2_1 = $2_1 >= $7_1 ? $2_1 : $7_1;
  $7_1 = Math_fround($5_1 - $2_1);
  HEAPF32[$1_1 + 124 >> 2] = $7_1 <= Math_fround(0.0) ? Math_fround(0.0) : $7_1;
  $4_1 = $1_1 + 108 | 0;
  $5_1 = Math_fround($2_1 + Math_fround($11_1 + $17_1));
  $2_1 = Math_fround($11_1 - $2_1);
  $0_1 = Math_fround(HEAPF32[$1_1 + 92 >> 2] + Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($5_1 - $2_1) * $0_1) + $2_1) - $16_1) - Math_fround($6_1 + $3)));
  label$7 : {
   if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$0_1;
    break label$7;
   }
   $1_1 = -2147483648;
  }
  HEAPF32[$4_1 >> 2] = $1_1 | 0;
 }
 
 function $314() {
  $141(0);
 }
 
 function $315() {
  $142();
 }
 
 function $317($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = $0_1;
  $3 = HEAP32[18392];
  $2_1 = HEAP32[$3 + 7080 >> 2];
  $7_1 = HEAP32[((HEAP32[$2_1 + 196 >> 2] << 2) + HEAP32[$2_1 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
  $2_1 = $7_1;
  while (1) {
   $6_1 = $5_1;
   $5_1 = $6_1 + 1 | 0;
   $4_1 = HEAPU8[$6_1 | 0];
   if ($4_1) {
    if (!(($4_1 | 0) != 35 | HEAPU8[$5_1 | 0] != 35)) {
     $2_1 = HEAPU8[$6_1 + 2 | 0] == 35 ? $7_1 : $2_1
    }
    $2_1 = HEAP32[(($4_1 ^ $2_1 & 255) << 2) + 19360 >> 2] ^ $2_1 >>> 8;
   }
   if ($4_1) {
    continue
   }
   break;
  };
  $2_1 = $2_1 ^ -1;
  if (($2_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
   HEAP32[$3 + 7140 >> 2] = $2_1
  }
  if (HEAP32[$3 + 7196 >> 2] == ($2_1 | 0)) {
   HEAP8[$3 + 7200 | 0] = 1
  }
  if (HEAP32[$3 + 7112 >> 2] == ($2_1 | 0)) {
   $75($2_1, 11, $0_1)
  }
  $318($2_1, $1_1);
 }
 
 function $318($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $5_1 = HEAP32[18392];
  $4_1 = HEAP32[$5_1 + 7480 >> 2];
  $2_1 = HEAP32[$5_1 + 7080 >> 2];
  label$1 : {
   if (!!($1_1 & 32) & ($4_1 | 0) < HEAP32[$5_1 + 7468 >> 2]) {
    break label$1
   }
   HEAP32[$8 + 8 >> 2] = 0;
   HEAP32[$8 + 12 >> 2] = 0;
   $11_1 = HEAP32[(HEAP32[$2_1 + 204 >> 2] + (HEAP32[$2_1 + 196 >> 2] << 2) | 0) - 4 >> 2];
   $10_1 = HEAP32[$5_1 + 6984 >> 2];
   $12_1 = HEAP32[$5_1 + 7508 >> 2];
   $2_1 = $8 + 8 | 0;
   $140($2_1);
   $1_1 = $5_1 + 228 | 0;
   $2_1 = HEAPF32[$1_1 >> 2] >= Math_fround(-256.0e3) ? (HEAPF32[$5_1 + 232 >> 2] >= Math_fround(-256.0e3) ? $1_1 : $2_1) : $2_1;
   $1_1 = HEAP32[$2_1 >> 2];
   $13 = HEAP32[$2_1 + 4 >> 2];
   $2_1 = HEAP32[18392];
   $3 = HEAP32[$5_1 + 7468 >> 2];
   if (($4_1 | 0) >= ($3 | 0)) {
    $4_1 = HEAP32[$5_1 + 7472 >> 2];
    label$4 : {
     if (($4_1 | 0) != ($3 | 0)) {
      break label$4
     }
     $6_1 = $3 + 1 | 0;
     $7_1 = $4_1;
     if ($4_1) {
      $3 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
     } else {
      $3 = 8
     }
     $4_1 = ($3 | 0) > ($6_1 | 0) ? $3 : $6_1;
     if (($7_1 | 0) >= ($4_1 | 0)) {
      break label$4
     }
     $3 = Math_imul($4_1, 36);
     if ($2_1) {
      $2_1 = $2_1 + 876 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
     }
     $2_1 = FUNCTION_TABLE[HEAP32[18314]]($3, HEAP32[18394]) | 0;
     $3 = HEAP32[$5_1 + 7476 >> 2];
     if ($3) {
      $1602($2_1, $3, Math_imul(HEAP32[$5_1 + 7468 >> 2], 36));
      $3 = HEAP32[$5_1 + 7476 >> 2];
      label$9 : {
       if (!$3) {
        break label$9
       }
       $6_1 = HEAP32[18392];
       if (!$6_1) {
        break label$9
       }
       $6_1 = $6_1 + 876 | 0;
       HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
     }
     HEAP32[$5_1 + 7472 >> 2] = $4_1;
     HEAP32[$5_1 + 7476 >> 2] = $2_1;
    }
    $2_1 = HEAP32[$5_1 + 7476 >> 2] + Math_imul(HEAP32[$5_1 + 7468 >> 2], 36) | 0;
    HEAP32[$2_1 + 16 >> 2] = $11_1;
    HEAP32[$2_1 + 12 >> 2] = $10_1;
    HEAP32[$2_1 + 8 >> 2] = $12_1;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$2_1 >> 2] = $0_1;
    $0_1 = HEAP32[$8 + 8 >> 2];
    $4_1 = HEAP32[$8 + 12 >> 2];
    HEAP32[$2_1 + 28 >> 2] = $1_1;
    HEAP32[$2_1 + 32 >> 2] = $13;
    HEAP32[$2_1 + 20 >> 2] = $0_1;
    HEAP32[$2_1 + 24 >> 2] = $4_1;
    HEAP32[$5_1 + 7468 >> 2] = HEAP32[$5_1 + 7468 >> 2] + 1;
    break label$1;
   }
   $3 = HEAP32[$5_1 + 7476 >> 2] + Math_imul($4_1, 36) | 0;
   if (!(HEAP32[$3 >> 2] != ($0_1 | 0) | HEAP32[$3 + 12 >> 2] != (HEAP32[$5_1 + 6984 >> 2] - 1 | 0))) {
    HEAP32[$3 + 12 >> 2] = $10_1;
    break label$1;
   }
   $6_1 = HEAP32[$2_1 + 7472 >> 2];
   label$11 : {
    if (($6_1 | 0) >= ($4_1 | 0)) {
     break label$11
    }
    if ($6_1) {
     $3 = $6_1 + (($6_1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $3 = ($3 | 0) > ($4_1 | 0) ? $3 : $4_1;
    if (($3 | 0) <= ($6_1 | 0)) {
     break label$11
    }
    $6_1 = Math_imul($3, 36);
    if ($2_1) {
     $7_1 = $2_1 + 876 | 0;
     HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] + 1;
    }
    $6_1 = FUNCTION_TABLE[HEAP32[18314]]($6_1, HEAP32[18394]) | 0;
    $7_1 = HEAP32[$2_1 + 7476 >> 2];
    if ($7_1) {
     $1602($6_1, $7_1, Math_imul(HEAP32[$2_1 + 7468 >> 2], 36));
     $7_1 = HEAP32[$2_1 + 7476 >> 2];
     label$16 : {
      if (!$7_1) {
       break label$16
      }
      $9 = HEAP32[18392];
      if (!$9) {
       break label$16
      }
      $9 = $9 + 876 | 0;
      HEAP32[$9 >> 2] = HEAP32[$9 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($7_1, HEAP32[18394]);
    }
    HEAP32[$2_1 + 7472 >> 2] = $3;
    HEAP32[$2_1 + 7476 >> 2] = $6_1;
   }
   HEAP32[$2_1 + 7468 >> 2] = $4_1;
   $4_1 = HEAP32[$5_1 + 7468 >> 2];
   $2_1 = HEAP32[$5_1 + 7472 >> 2];
   label$17 : {
    if (($4_1 | 0) != ($2_1 | 0)) {
     break label$17
    }
    $3 = $4_1 + 1 | 0;
    $7_1 = $2_1;
    if ($2_1) {
     $4_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
    } else {
     $4_1 = 8
    }
    $2_1 = ($3 | 0) < ($4_1 | 0) ? $4_1 : $3;
    if (($7_1 | 0) >= ($2_1 | 0)) {
     break label$17
    }
    $4_1 = Math_imul($2_1, 36);
    $3 = HEAP32[18392];
    if ($3) {
     $3 = $3 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $4_1 = FUNCTION_TABLE[HEAP32[18314]]($4_1, HEAP32[18394]) | 0;
    $3 = HEAP32[$5_1 + 7476 >> 2];
    if ($3) {
     $1602($4_1, $3, Math_imul(HEAP32[$5_1 + 7468 >> 2], 36));
     $3 = HEAP32[$5_1 + 7476 >> 2];
     label$22 : {
      if (!$3) {
       break label$22
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$22
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
    }
    HEAP32[$5_1 + 7472 >> 2] = $2_1;
    HEAP32[$5_1 + 7476 >> 2] = $4_1;
   }
   $2_1 = HEAP32[$5_1 + 7476 >> 2] + Math_imul(HEAP32[$5_1 + 7468 >> 2], 36) | 0;
   HEAP32[$2_1 + 16 >> 2] = $11_1;
   HEAP32[$2_1 + 12 >> 2] = $10_1;
   HEAP32[$2_1 + 8 >> 2] = $12_1;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$2_1 >> 2] = $0_1;
   $0_1 = HEAP32[$8 + 8 >> 2];
   $4_1 = HEAP32[$8 + 12 >> 2];
   HEAP32[$2_1 + 28 >> 2] = $1_1;
   HEAP32[$2_1 + 32 >> 2] = $13;
   HEAP32[$2_1 + 20 >> 2] = $0_1;
   HEAP32[$2_1 + 24 >> 2] = $4_1;
   HEAP32[$5_1 + 7468 >> 2] = HEAP32[$5_1 + 7468 >> 2] + 1;
  }
  global$0 = $8 + 16 | 0;
 }
 
 function $319() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  label$1 : {
   $2_1 = HEAP32[18392];
   $0_1 = HEAP32[$2_1 + 7480 >> 2];
   if (($0_1 | 0) <= 0 | ($0_1 | 0) > HEAP32[$2_1 + 7468 >> 2]) {
    break label$1
   }
   $0_1 = $0_1 - 1 | 0;
   $1_1 = Math_imul($0_1, 36);
   $4_1 = HEAP32[$2_1 + 7476 >> 2];
   if (HEAP32[$1_1 + HEAP32[$2_1 + 7488 >> 2] >> 2] != HEAP32[$1_1 + $4_1 >> 2]) {
    break label$1
   }
   while (1) {
    label$2 : {
     if (($0_1 | 0) <= 0) {
      $0_1 = 0;
      break label$2;
     }
     label$5 : {
      label$6 : {
       $1_1 = Math_imul($0_1, 36) + $4_1 | 0;
       $3 = HEAP32[$1_1 + 4 >> 2];
       if (!$3 | !(HEAPU8[$3 + 11 | 0] & 16)) {
        break label$6
       }
       $1_1 = HEAP32[$1_1 - 32 >> 2];
       if (!$1_1) {
        break label$6
       }
       $3 = HEAPU8[$1_1 + 9 | 0] & 4;
       $1_1 = !$3;
       $0_1 = $3 ? $0_1 : $0_1 - 1 | 0;
       break label$5;
      }
      $1_1 = 0;
     }
     if ($1_1) {
      continue
     }
    }
    break;
   };
   $132($0_1, 1);
   $0_1 = HEAP32[$2_1 + 7508 >> 2];
   if (!$0_1) {
    break label$1
   }
   HEAP8[$0_1 + 304 | 0] = 1;
  }
 }
 
 function $320($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $3 = HEAP32[18392];
  $4_1 = HEAP32[$3 + 7480 >> 2];
  label$1 : {
   if (!(($4_1 | 0) < HEAP32[$3 + 7468 >> 2] & HEAP32[HEAP32[$3 + 7476 >> 2] + Math_imul($4_1, 36) >> 2] == ($0_1 | 0))) {
    HEAP32[$3 + 7300 >> 2] = 0;
    $0_1 = 0;
    break label$1;
   }
   label$4 : {
    if ($1_1 & 268435456) {
     HEAP32[$2_1 + 16 >> 2] = HEAP32[$3 + 7492 >> 2];
     $21($2_1 + 32 | 0, 20, 12856, $2_1 + 16 | 0);
     break label$4;
    }
    HEAP32[$2_1 >> 2] = $0_1;
    $21($2_1 + 32 | 0, 20, 1603, $2_1);
   }
   $0_1 = $143($2_1 + 32 | 0, 0, $1_1 | 67108864);
   if (!$0_1) {
    $1_1 = HEAP32[18392];
    $3 = HEAP32[$1_1 + 7080 >> 2];
    if (!(HEAP32[$1_1 + 7564 >> 2] | (!HEAPU8[$1_1 + 7597 | 0] | ($3 | 0) != HEAP32[$1_1 + 7508 >> 2]))) {
     HEAP32[$1_1 + 7600 >> 2] = HEAP32[$1_1 + 7600 >> 2] | 2
    }
    if (HEAP8[$3 + 11 | 0] & 1) {
     HEAP8[$1_1 + 6998 | 0] = 1
    }
    $142();
    HEAP8[$1_1 + 6998 | 0] = 0;
   }
  }
  global$0 = $2_1 - -64 | 0;
  return $0_1;
 }
 
 function $321() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7080 >> 2];
  if (!(($1_1 | 0) != HEAP32[$0_1 + 7508 >> 2] | !HEAPU8[$0_1 + 7597 | 0] | HEAP32[$0_1 + 7564 >> 2])) {
   HEAP32[$0_1 + 7600 >> 2] = HEAP32[$0_1 + 7600 >> 2] | 2
  }
  if (HEAP8[$1_1 + 11 | 0] & 1) {
   HEAP8[$0_1 + 6998 | 0] = 1
  }
  $142();
  HEAP8[$0_1 + 6998 | 0] = 0;
 }
 
 function $322($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $3 = HEAP32[18392];
  if (HEAP32[$3 + 7468 >> 2] <= HEAP32[$3 + 7480 >> 2]) {
   HEAP32[$3 + 7300 >> 2] = 0;
   return 0;
  }
  $5_1 = $0_1;
  $2_1 = HEAP32[$3 + 7080 >> 2];
  $7_1 = HEAP32[((HEAP32[$2_1 + 196 >> 2] << 2) + HEAP32[$2_1 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
  $2_1 = $7_1;
  while (1) {
   $6_1 = $5_1;
   $5_1 = $6_1 + 1 | 0;
   $4_1 = HEAPU8[$6_1 | 0];
   if ($4_1) {
    if (!(($4_1 | 0) != 35 | HEAPU8[$5_1 | 0] != 35)) {
     $2_1 = HEAPU8[$6_1 + 2 | 0] == 35 ? $7_1 : $2_1
    }
    $2_1 = HEAP32[(($4_1 ^ $2_1 & 255) << 2) + 19360 >> 2] ^ $2_1 >>> 8;
   }
   if ($4_1) {
    continue
   }
   break;
  };
  $2_1 = $2_1 ^ -1;
  if (($2_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
   HEAP32[$3 + 7140 >> 2] = $2_1
  }
  if (HEAP32[$3 + 7196 >> 2] == ($2_1 | 0)) {
   HEAP8[$3 + 7200 | 0] = 1
  }
  $1_1 = $1_1 | 321;
  if (HEAP32[$3 + 7112 >> 2] == ($2_1 | 0)) {
   $75($2_1, 11, $0_1)
  }
  return $320($2_1, $1_1);
 }
 
 function $324($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $3 = HEAP32[18392];
   if (!HEAPU8[($3 + ($1_1 & 31) | 0) + 1022 | 0]) {
    break label$1
   }
   $2_1 = HEAP32[$3 + 7080 >> 2];
   if (!$89(32)) {
    break label$1
   }
   label$2 : {
    if ($0_1) {
     $5_1 = $0_1;
     $7_1 = HEAP32[(HEAP32[$2_1 + 204 >> 2] + (HEAP32[$2_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
     $2_1 = $7_1;
     while (1) {
      $6_1 = $5_1;
      $5_1 = $6_1 + 1 | 0;
      $4_1 = HEAPU8[$6_1 | 0];
      if ($4_1) {
       if (!(($4_1 | 0) != 35 | HEAPU8[$5_1 | 0] != 35)) {
        $2_1 = HEAPU8[$6_1 + 2 | 0] == 35 ? $7_1 : $2_1
       }
       $2_1 = HEAP32[(($4_1 ^ $2_1 & 255) << 2) + 19360 >> 2] ^ $2_1 >>> 8;
      }
      if ($4_1) {
       continue
      }
      break;
     };
     $2_1 = $2_1 ^ -1;
     if (($2_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
      HEAP32[$3 + 7140 >> 2] = $2_1
     }
     if (($2_1 | 0) == HEAP32[$3 + 7196 >> 2]) {
      HEAP8[$3 + 7200 | 0] = 1
     }
     if (($2_1 | 0) != HEAP32[$3 + 7112 >> 2]) {
      break label$2
     }
     $75($2_1, 11, $0_1);
     break label$2;
    }
    $2_1 = HEAP32[$3 + 7240 >> 2];
   }
   $318($2_1, $1_1);
  }
 }
 
 function $329($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0;
  $4_1 = HEAP32[18392];
  HEAP32[$4_1 + 7564 >> 2] = $1_1;
  HEAP32[$4_1 + 7512 >> 2] = $0_1;
  HEAP32[$4_1 + 7516 >> 2] = $2_1;
  $2_1 = HEAP32[$4_1 + 7508 >> 2];
  HEAP32[($2_1 + ($1_1 << 2) | 0) + 756 >> 2] = $0_1;
  $0_1 = $2_1 + ($1_1 << 4) | 0;
  $1_1 = $0_1 + 772 | 0;
  $2_1 = $3 + 8 | 0;
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$3 + 4 >> 2];
  $0_1 = $0_1 + 764 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $330($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0);
  $3 = HEAP32[$1_1 + 292 >> 2];
  $2_1 = HEAP32[18392];
  if (($1_1 | 0) != HEAP32[$2_1 + 7508 >> 2]) {
   HEAP8[$2_1 + 7573 | 0] = 0
  }
  HEAP32[$2_1 + 7564 >> 2] = $3;
  HEAP32[$2_1 + 7512 >> 2] = $0_1;
  HEAP32[$2_1 + 7508 >> 2] = $1_1;
  HEAP32[$2_1 + 7516 >> 2] = HEAP32[$1_1 + 300 >> 2];
  HEAP32[(($3 << 2) + $1_1 | 0) + 756 >> 2] = $0_1;
  if (($0_1 | 0) == HEAP32[$2_1 + 7240 >> 2]) {
   $6_1 = HEAPF32[$2_1 + 7268 >> 2];
   $7_1 = HEAPF32[$2_1 + 7272 >> 2];
   $8 = HEAPF32[$2_1 + 7276 >> 2];
   $4_1 = HEAPF32[$1_1 + 224 >> 2];
   $0_1 = ($3 << 4) + $1_1 | 0;
   $5_1 = HEAPF32[$1_1 + 228 >> 2];
   HEAPF32[$0_1 + 776 >> 2] = HEAPF32[$2_1 + 7280 >> 2] - $5_1;
   HEAPF32[$0_1 + 772 >> 2] = $8 - $4_1;
   HEAPF32[$0_1 + 768 >> 2] = $7_1 - $5_1;
   HEAPF32[$0_1 + 764 >> 2] = $6_1 - $4_1;
  }
  if (HEAP32[$2_1 + 7188 >> 2] == 4) {
   HEAP8[$2_1 + 7571 | 0] = 1;
   return;
  }
  HEAP8[$2_1 + 7570 | 0] = 1;
 }
 
 function $331() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[18392];
  if (!HEAPU8[$0_1 + 7597 | 0]) {
   return 0
  }
  return HEAP32[$0_1 + 7672 >> 2] ? $1_1 : !HEAP32[$0_1 + 7760 >> 2];
 }
 
 function $333($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0;
  $6_1 = HEAP32[18392];
  if (!$1_1) {
   return HEAPF32[($6_1 + ($0_1 << 2) | 0) + 768 >> 2]
  }
  $2_1 = HEAPF32[($6_1 + ($0_1 << 2) | 0) + 5236 >> 2];
  if (!(!($2_1 < Math_fround(0.0)) | ($1_1 | 0) != 2)) {
   return HEAPF32[($6_1 + ($0_1 << 2) | 0) + 5316 >> 2] >= Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0)
  }
  if ($2_1 < Math_fround(0.0)) {
   return Math_fround(0.0)
  }
  label$4 : {
   switch ($1_1 - 1 | 0) {
   case 0:
    return $2_1 == Math_fround(0.0) ? Math_fround(1.0) : Math_fround(0.0);
   case 2:
    $0_1 = 1;
    label$9 : {
     if ($2_1 == Math_fround(0.0)) {
      break label$9
     }
     $3 = Math_fround($2_1 - HEAPF32[$6_1 + 24 >> 2]);
     $0_1 = 0;
     if ($3 >= $2_1) {
      break label$9
     }
     $4_1 = Math_fround(HEAPF32[$6_1 + 140 >> 2] * Math_fround(.7200000286102295));
     $5_1 = Math_fround(HEAPF32[$6_1 + 144 >> 2] * Math_fround(.800000011920929));
     $0_1 = $4_1 > $3 & $2_1 >= $4_1;
     if ($5_1 <= Math_fround(0.0)) {
      break label$9
     }
     $1_1 = -1;
     if ($4_1 > $3) {
      $0_1 = $1_1
     } else {
      $3 = Math_fround(Math_fround($3 - $4_1) / $5_1);
      label$12 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$3;
        break label$12;
       }
       $0_1 = -2147483648;
      }
     }
     if (!($2_1 < $4_1)) {
      $2_1 = Math_fround(Math_fround($2_1 - $4_1) / $5_1);
      label$15 : {
       if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
        $1_1 = ~~$2_1;
        break label$15;
       }
       $1_1 = -2147483648;
      }
     }
     $0_1 = $1_1 - $0_1 | 0;
    }
    return Math_fround($0_1 | 0);
   case 3:
    $0_1 = 1;
    label$17 : {
     if ($2_1 == Math_fround(0.0)) {
      break label$17
     }
     $3 = Math_fround($2_1 - HEAPF32[$6_1 + 24 >> 2]);
     $0_1 = 0;
     if ($3 >= $2_1) {
      break label$17
     }
     $4_1 = Math_fround(HEAPF32[$6_1 + 140 >> 2] * Math_fround(1.25));
     $5_1 = HEAPF32[$6_1 + 144 >> 2];
     $5_1 = Math_fround($5_1 + $5_1);
     $0_1 = $4_1 > $3 & $2_1 >= $4_1;
     if ($5_1 <= Math_fround(0.0)) {
      break label$17
     }
     $1_1 = -1;
     if ($4_1 > $3) {
      $0_1 = $1_1
     } else {
      $3 = Math_fround(Math_fround($3 - $4_1) / $5_1);
      label$20 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$3;
        break label$20;
       }
       $0_1 = -2147483648;
      }
     }
     if (!($2_1 < $4_1)) {
      $2_1 = Math_fround(Math_fround($2_1 - $4_1) / $5_1);
      label$23 : {
       if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
        $1_1 = ~~$2_1;
        break label$23;
       }
       $1_1 = -2147483648;
      }
     }
     $0_1 = $1_1 - $0_1 | 0;
    }
    return Math_fround($0_1 | 0);
   case 4:
    $0_1 = 1;
    label$25 : {
     if ($2_1 == Math_fround(0.0)) {
      break label$25
     }
     $3 = Math_fround($2_1 - HEAPF32[$6_1 + 24 >> 2]);
     $0_1 = 0;
     if ($3 >= $2_1) {
      break label$25
     }
     $4_1 = Math_fround(HEAPF32[$6_1 + 140 >> 2] * Math_fround(.7200000286102295));
     $5_1 = Math_fround(HEAPF32[$6_1 + 144 >> 2] * Math_fround(.30000001192092896));
     $0_1 = $4_1 > $3 & $2_1 >= $4_1;
     if ($5_1 <= Math_fround(0.0)) {
      break label$25
     }
     $1_1 = -1;
     if ($4_1 > $3) {
      $0_1 = $1_1
     } else {
      $3 = Math_fround(Math_fround($3 - $4_1) / $5_1);
      label$28 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$3;
        break label$28;
       }
       $0_1 = -2147483648;
      }
     }
     if (!($2_1 < $4_1)) {
      $2_1 = Math_fround(Math_fround($2_1 - $4_1) / $5_1);
      label$31 : {
       if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
        $1_1 = ~~$2_1;
        break label$31;
       }
       $1_1 = -2147483648;
      }
     }
     $0_1 = $1_1 - $0_1 | 0;
    }
    $4_1 = Math_fround($0_1 | 0);
    break;
   default:
    break label$4;
   };
  }
  return $4_1;
 }
 
 function $334($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0);
  $2_1 = HEAP32[18392];
  label$1 : {
   label$2 : {
    if ($0_1 & 16) {
     $1_1 = 7241;
     $4_1 = -1;
     while (1) {
      $6_1 = $4_1;
      $7_1 = $1_1;
      $1_1 = $1_1 + 1 | 0;
      $4_1 = HEAPU8[$7_1 | 0];
      if ($4_1) {
       if (!(($4_1 | 0) != 35 | HEAPU8[$1_1 | 0] != 35)) {
        $6_1 = HEAPU8[$7_1 + 2 | 0] == 35 ? -1 : $6_1
       }
       $6_1 = HEAP32[(($4_1 ^ $6_1 & 255) << 2) + 19360 >> 2] ^ $6_1 >>> 8;
      }
      $4_1 = $6_1;
      if (($7_1 | 0) != 7254) {
       continue
      }
      break;
     };
     $1_1 = 1;
     $7_1 = $4_1 ^ -1;
     $4_1 = 0;
     $6_1 = 0;
     break label$2;
    }
    $5_1 = HEAP32[$2_1 + 7080 >> 2];
    $1_1 = HEAP32[$2_1 + 7240 >> 2];
    label$10 : {
     label$11 : {
      if ($1_1) {
       if (($1_1 | 0) != HEAP32[$2_1 + 7136 >> 2]) {
        break label$1
       }
       $4_1 = HEAP32[$2_1 + 7192 >> 2];
       $6_1 = ($4_1 | 0) != -1 ? $4_1 : 0;
       if (!HEAPU8[($6_1 + $2_1 | 0) + 236 | 0]) {
        break label$1
       }
       if (HEAPU8[$5_1 + 143 | 0]) {
        return 0
       }
       $4_1 = 0;
       break label$11;
      }
      if (!HEAPU8[$2_1 + 236 | 0]) {
       return 0
      }
      if (HEAPU8[$5_1 + 143 | 0]) {
       return 0
      }
      label$16 : {
       if (!(HEAP8[$2_1 + 7248 | 0] & 1)) {
        if (!HEAP32[$2_1 + 7136 >> 2]) {
         return 0
        }
        if (!($0_1 & 8)) {
         return 0
        }
        if (($5_1 | 0) == HEAP32[$2_1 + 7184 >> 2]) {
         break label$16
        }
        break label$1;
       }
       if (!($0_1 & 8)) {
        break label$1
       }
      }
      $4_1 = $2_1 + 7252 | 0;
      $1_1 = $82($5_1, $4_1);
      HEAP32[$2_1 + 7240 >> 2] = $1_1;
      $4_1 = $91($4_1, $1_1);
      if (!(!$4_1 | !HEAPU8[$2_1 + 992 | 0])) {
       $85($1_1, $5_1);
       $125($5_1);
      }
      $3 = 0;
      if (HEAP32[$2_1 + 7136 >> 2] != ($1_1 | 0)) {
       break label$10
      }
     }
     HEAP8[$2_1 + 7149 | 0] = $4_1;
     $3 = $6_1;
    }
    $6_1 = $3;
    if (HEAP32[$2_1 + 7136 >> 2] != ($1_1 | 0)) {
     break label$1
    }
    $7_1 = $1_1;
    $4_1 = (HEAP32[$5_1 + 204 >> 2] + (HEAP32[$5_1 + 196 >> 2] << 2) | 0) - 4 | 0;
    $1_1 = 0;
    $5_1 = HEAP32[18392];
    if (HEAPU8[($5_1 + $6_1 | 0) + 236 | 0]) {
     $8 = HEAPF32[$5_1 + 48 >> 2];
     $1_1 = HEAPF32[($5_1 + ($6_1 << 2) | 0) + 1120 >> 2] >= Math_fround($8 * $8);
    }
    $4_1 = HEAP32[$4_1 >> 2];
    HEAP32[$5_1 + 7168 >> 2] = -1;
    HEAP32[$5_1 + 7172 >> 2] = -1;
    HEAP32[$5_1 + 7156 >> 2] = -1;
    HEAP32[$5_1 + 7160 >> 2] = -1;
    HEAP16[$5_1 + 7596 >> 1] = 0;
    HEAP8[$5_1 + 7572 | 0] = HEAPU8[$5_1 + 7573 | 0];
   }
   $5_1 = $7_1;
   $7_1 = 0;
   if (!$1_1) {
    break label$1
   }
   label$22 : {
    if (HEAPU8[$2_1 + 7876 | 0]) {
     break label$22
    }
    $3 = HEAP32[18392];
    HEAP8[$3 + 7876 | 0] = 0;
    HEAP32[$3 + 7892 >> 2] = 0;
    HEAP32[$3 + 7896 >> 2] = 0;
    HEAP32[$3 + 7968 >> 2] = 0;
    HEAP32[$3 + 7980 >> 2] = 0;
    HEAP32[$3 + 7984 >> 2] = -1;
    HEAP32[$3 + 7972 >> 2] = 2139095039;
    HEAP32[$3 + 7976 >> 2] = 0;
    $1_1 = $3 + 7912 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $3 + 7920 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $3 + 7928 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    $1_1 = $3 + 7936 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP8[$3 + 7944 | 0] = 0;
    $1_1 = $3 + 7900 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$3 + 7908 >> 2] = -1;
    $1_1 = $3 + 7945 | 0;
    HEAP8[$1_1 | 0] = 0;
    HEAP8[$1_1 + 1 | 0] = 0;
    $7_1 = HEAP32[$3 + 8e3 >> 2];
    if ($7_1) {
     HEAP32[$3 + 7992 >> 2] = 0;
     HEAP32[$3 + 7996 >> 2] = 0;
     if ($3) {
      $1_1 = $3 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($7_1, HEAP32[18394]);
     HEAP32[$3 + 8e3 >> 2] = 0;
    }
    HEAP32[$3 + 8004 >> 2] = 0;
    HEAP32[$3 + 8008 >> 2] = 0;
    $1_1 = $3 + 8012 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$2_1 + 7904 >> 2] = $4_1;
    HEAP32[$2_1 + 7900 >> 2] = $5_1;
    HEAP32[$2_1 + 7888 >> 2] = $6_1;
    HEAP32[$2_1 + 7880 >> 2] = $0_1;
    HEAP8[$2_1 + 7876 | 0] = 1;
    if (($5_1 | 0) != HEAP32[$2_1 + 7136 >> 2]) {
     break label$22
    }
    HEAP8[$2_1 + 7150 | 0] = 1;
   }
   HEAP8[$2_1 + 7877 | 0] = 1;
   HEAP32[$2_1 + 7884 >> 2] = HEAP32[$2_1 + 6984 >> 2];
   label$25 : {
    if ($0_1 & 1) {
     break label$25
    }
    $141(0);
    if (!HEAP32[$2_1 + 7980 >> 2] | !(HEAPU8[$2_1 + 7969 | 0] & 16)) {
     break label$25
    }
    $4_1 = HEAP32[$2_1 + 7080 >> 2];
    HEAP8[$4_1 + 172 | 0] = 1;
    HEAP8[$4_1 + 145 | 0] = 1;
    HEAP8[$4_1 + 143 | 0] = 1;
   }
   if (!($0_1 & 18)) {
    $0_1 = $2_1 + 7248 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] & -2;
   }
   $7_1 = 1;
  }
  return $7_1 | 0;
 }
 
 function $335() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[18392];
  if (!(HEAP8[$2_1 + 7880 | 0] & 1)) {
   $142()
  }
  if (HEAP32[$2_1 + 7908 >> 2] == -1) {
   $0_1 = HEAP32[18392];
   HEAP8[$0_1 + 7876 | 0] = 0;
   HEAP32[$0_1 + 7892 >> 2] = 0;
   HEAP32[$0_1 + 7896 >> 2] = 0;
   HEAP32[$0_1 + 7968 >> 2] = 0;
   HEAP32[$0_1 + 7980 >> 2] = 0;
   HEAP32[$0_1 + 7984 >> 2] = -1;
   HEAP32[$0_1 + 7972 >> 2] = 2139095039;
   HEAP32[$0_1 + 7976 >> 2] = 0;
   $1_1 = $0_1 + 7912 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 7920 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 7928 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   $1_1 = $0_1 + 7936 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP8[$0_1 + 7944 | 0] = 0;
   $1_1 = $0_1 + 7900 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 7908 >> 2] = -1;
   $1_1 = $0_1 + 7945 | 0;
   HEAP8[$1_1 | 0] = 0;
   HEAP8[$1_1 + 1 | 0] = 0;
   $1_1 = HEAP32[$0_1 + 8e3 >> 2];
   if ($1_1) {
    HEAP32[$0_1 + 7992 >> 2] = 0;
    HEAP32[$0_1 + 7996 >> 2] = 0;
    if ($0_1) {
     $3 = $0_1 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
    HEAP32[$0_1 + 8e3 >> 2] = 0;
   }
   HEAP32[$0_1 + 8004 >> 2] = 0;
   HEAP32[$0_1 + 8008 >> 2] = 0;
   $0_1 = $0_1 + 8012 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
  }
  HEAP8[$2_1 + 7877 | 0] = 0;
 }
 
 function $336($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[18392];
  if (!(HEAP32[$4_1 + 7908 >> 2] != -1 & $3 >>> 0 >= 2)) {
   $1699($4_1 + 7912 | 0, $0_1, 32);
   HEAP8[$4_1 + 7944 | 0] = 0;
   $0_1 = HEAP32[$4_1 + 7996 >> 2];
   label$3 : {
    if (($0_1 | 0) >= 0) {
     break label$3
    }
    $3 = $0_1;
    $0_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0;
    $0_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
    if (($3 | 0) >= ($0_1 | 0)) {
     break label$3
    }
    if ($4_1) {
     $3 = $4_1 + 876 | 0;
     HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
    }
    $3 = FUNCTION_TABLE[HEAP32[18314]]($0_1, HEAP32[18394]) | 0;
    $5_1 = HEAP32[$4_1 + 8e3 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$4_1 + 7992 >> 2]);
     $5_1 = HEAP32[$4_1 + 8e3 >> 2];
     label$6 : {
      if (!$5_1) {
       break label$6
      }
      $6_1 = HEAP32[18392];
      if (!$6_1) {
       break label$6
      }
      $6_1 = $6_1 + 876 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
    }
    HEAP32[$4_1 + 7996 >> 2] = $0_1;
    HEAP32[$4_1 + 8e3 >> 2] = $3;
   }
   HEAP32[$4_1 + 7992 >> 2] = 0;
   label$7 : {
    if ($2_1 >>> 0 >= 17) {
     $3 = HEAP32[$4_1 + 7996 >> 2];
     label$9 : {
      if (($3 | 0) >= ($2_1 | 0)) {
       break label$9
      }
      if ($3) {
       $0_1 = $3 + (($3 | 0) / 2 | 0) | 0
      } else {
       $0_1 = 8
      }
      $0_1 = ($0_1 | 0) > ($2_1 | 0) ? $0_1 : $2_1;
      if (($0_1 | 0) <= ($3 | 0)) {
       break label$9
      }
      $3 = HEAP32[18392];
      if ($3) {
       $3 = $3 + 876 | 0;
       HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + 1;
      }
      $3 = FUNCTION_TABLE[HEAP32[18314]]($0_1, HEAP32[18394]) | 0;
      $5_1 = HEAP32[$4_1 + 8e3 >> 2];
      if ($5_1) {
       $1602($3, $5_1, HEAP32[$4_1 + 7992 >> 2]);
       $5_1 = HEAP32[$4_1 + 8e3 >> 2];
       label$14 : {
        if (!$5_1) {
         break label$14
        }
        $6_1 = HEAP32[18392];
        if (!$6_1) {
         break label$14
        }
        $6_1 = $6_1 + 876 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
      }
      HEAP32[$4_1 + 7996 >> 2] = $0_1;
      HEAP32[$4_1 + 8e3 >> 2] = $3;
     }
     HEAP32[$4_1 + 7992 >> 2] = $2_1;
     $0_1 = HEAP32[$4_1 + 8e3 >> 2];
     HEAP32[$4_1 + 7892 >> 2] = $0_1;
     $1602($0_1, $1_1, $2_1);
     break label$7;
    }
    if ($2_1) {
     HEAP32[$4_1 + 8004 >> 2] = 0;
     HEAP32[$4_1 + 8008 >> 2] = 0;
     $0_1 = $4_1 + 8012 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     $0_1 = $4_1 + 8004 | 0;
     HEAP32[$4_1 + 7892 >> 2] = $0_1;
     $1602($0_1, $1_1, $2_1);
     break label$7;
    }
    HEAP32[$4_1 + 7892 >> 2] = 0;
   }
   HEAP32[$4_1 + 7896 >> 2] = $2_1;
  }
  $0_1 = HEAP32[$4_1 + 6984 >> 2];
  HEAP32[$4_1 + 7908 >> 2] = $0_1;
  $1_1 = HEAP32[$4_1 + 7984 >> 2];
  return ($1_1 | 0) == ($0_1 | 0) | ($1_1 | 0) == ($0_1 - 1 | 0);
 }
 
 function $337() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $1_1 = HEAP32[18392];
  if (!HEAPU8[$1_1 + 7876 | 0]) {
   return 0
  }
  $3 = HEAP32[$1_1 + 7248 >> 2];
  if (!($3 & 1)) {
   return 0
  }
  $0_1 = HEAP32[$1_1 + 7088 >> 2];
  if (!$0_1) {
   return 0
  }
  $2_1 = HEAP32[$1_1 + 7080 >> 2];
  if (HEAP32[$2_1 + 736 >> 2] != HEAP32[$0_1 + 736 >> 2]) {
   return 0
  }
  $0_1 = 0;
  if (!HEAPU8[$2_1 + 143 | 0]) {
   $0_1 = ($1_1 + 7240 | 0) + ($3 & 2 ? 44 : 12) | 0;
   $3 = HEAP32[$1_1 + 7240 >> 2];
   if (!$3) {
    $3 = $82($2_1, $0_1)
   }
   $2_1 = HEAP32[$1_1 + 7900 >> 2];
   if (($3 | 0) == ($2_1 | 0)) {
    return ($2_1 | 0) != ($3 | 0) | 0
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$1_1 + 7948 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$1_1 + 7952 >> 2] = $2_1;
   $0_1 = $0_1 + 8 | 0;
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $2_1 = $1_1 + 7956 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $4_1;
   HEAP32[$1_1 + 7964 >> 2] = $3;
   HEAP8[$1_1 + 7878 | 0] = 1;
   $0_1 = 1;
  }
  return $0_1 | 0;
 }
 
 function $338($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $3 = HEAP32[18392];
  $7_1 = HEAP32[$3 + 7080 >> 2];
  label$1 : {
   if ($0_1) {
    if (HEAP32[$3 + 7908 >> 2] == -1) {
     break label$1
    }
    if ($1695($0_1, $3 + 7912 | 0)) {
     break label$1
    }
   }
   $8 = HEAP32[$3 + 7980 >> 2];
   $5_1 = HEAP32[$3 + 7964 >> 2];
   $0_1 = ($8 | 0) == ($5_1 | 0);
   $2_1 = HEAPF32[$3 + 7956 >> 2];
   $9 = HEAPF32[$3 + 7948 >> 2];
   $10_1 = HEAPF32[$3 + 7960 >> 2];
   $11_1 = HEAPF32[$3 + 7952 >> 2];
   $12_1 = Math_fround(Math_fround($2_1 - $9) * Math_fround($10_1 - $11_1));
   if ($12_1 <= HEAPF32[$3 + 7972 >> 2]) {
    HEAP32[$3 + 7976 >> 2] = $5_1;
    HEAP32[$3 + 7968 >> 2] = $1_1;
    HEAPF32[$3 + 7972 >> 2] = $12_1;
   }
   HEAP8[$3 + 7945 | 0] = $0_1;
   if (!((HEAP32[$3 + 7880 >> 2] | $1_1) & 2048 | ($5_1 | 0) != ($8 | 0))) {
    $7_1 = HEAP32[$7_1 + 580 >> 2];
    HEAPF32[$4_1 + 12 >> 2] = $11_1 + Math_fround(-3.5);
    HEAPF32[$4_1 + 8 >> 2] = $9 + Math_fround(-3.5);
    HEAPF32[$4_1 + 4 >> 2] = $10_1 + Math_fround(3.5);
    HEAPF32[$4_1 >> 2] = $2_1 + Math_fround(3.5);
    $2_1 = HEAPF32[$3 + 6388 >> 2];
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$2_1;
      break label$6;
     }
     $0_1 = -2147483648;
    }
    $0_1 = $0_1 << 8;
    $2_1 = HEAPF32[$3 + 6384 >> 2];
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$8 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $6_1 = ~~$2_1;
      break label$8;
     }
     $6_1 = -2147483648;
    }
    $0_1 = $6_1 | $0_1;
    $2_1 = HEAPF32[$3 + 6392 >> 2];
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$10 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $6_1 = ~~$2_1;
      break label$10;
     }
     $6_1 = -2147483648;
    }
    $0_1 = $0_1 | $6_1 << 16;
    $13 = $4_1 + 8 | 0;
    $2_1 = Math_fround(HEAPF32[$3 + 6396 >> 2] * HEAPF32[$3 + 5416 >> 2]);
    $2_1 = Math_fround(Math_fround(($2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1) * Math_fround(255.0)) + Math_fround(.5));
    label$12 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $6_1 = ~~$2_1;
      break label$12;
     }
     $6_1 = -2147483648;
    }
    $400($7_1, $13, $4_1, $0_1 | $6_1 << 24, Math_fround(0.0), 0, Math_fround(2.0));
   }
   HEAP32[$3 + 7984 >> 2] = HEAP32[$3 + 6984 >> 2];
   label$14 : {
    if (($5_1 | 0) == ($8 | 0)) {
     $0_1 = HEAPU8[(HEAP32[18392] + HEAP32[$3 + 7888 >> 2] | 0) + 236 | 0];
     HEAP8[$3 + 7946 | 0] = !$0_1;
     if ($1_1 & 1024) {
      break label$14
     }
     $5_1 = 0;
     if (!$0_1) {
      break label$14
     }
     break label$1;
    }
    HEAP8[$3 + 7946 | 0] = 0;
    $5_1 = 0;
    if (!($1_1 & 1024)) {
     break label$1
    }
   }
   $5_1 = $3 + 7892 | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return $5_1;
 }
 
 function $339() {
  HEAP8[HEAP32[18392] + 7878 | 0] = 0;
 }
 
 function $341($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = HEAP32[18392];
  HEAP32[$2_1 + 12224 >> 2] = $1_1;
  HEAP32[$2_1 + 12220 >> 2] = $0_1;
 }
 
 function $342($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  if (!HEAPU8[$1_1 + 12196 | 0]) {
   HEAP32[$1_1 + 12200 >> 2] = 1;
   HEAP8[$1_1 + 12196 | 0] = 1;
   HEAP32[$1_1 + 12220 >> 2] = 0;
   HEAP32[$1_1 + 12224 >> 2] = 0;
   HEAP32[$1_1 + 12236 >> 2] = HEAP32[HEAP32[$1_1 + 7080 >> 2] + 344 >> 2];
   $0_1 = ($0_1 | 0) < 0 ? HEAP32[$1_1 + 12244 >> 2] : $0_1;
   HEAP8[$1_1 + 12232 | 0] = 1;
   HEAP32[$1_1 + 12228 >> 2] = 2139095039;
   HEAP32[$1_1 + 12240 >> 2] = $0_1;
   HEAP32[$1_1 + 12204 >> 2] = HEAP32[17792];
  }
 }
 
 function $344($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[18392];
  if (!HEAPU8[$1_1 + 12196 | 0]) {
   HEAP32[$1_1 + 12200 >> 2] = 4;
   HEAP8[$1_1 + 12196 | 0] = 1;
   HEAP32[$1_1 + 12220 >> 2] = 0;
   HEAP32[$1_1 + 12224 >> 2] = 0;
   HEAP32[$1_1 + 12236 >> 2] = HEAP32[HEAP32[$1_1 + 7080 >> 2] + 344 >> 2];
   $0_1 = ($0_1 | 0) < 0 ? HEAP32[$1_1 + 12244 >> 2] : $0_1;
   HEAP8[$1_1 + 12232 | 0] = 1;
   HEAP32[$1_1 + 12228 >> 2] = 2139095039;
   HEAP32[$1_1 + 12240 >> 2] = $0_1;
  }
 }
 
 function $345() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[18392];
  $153(4625);
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $7_1 = $571(14105, $2_1 + 8 | 0);
  $5_1 = HEAP32[18392];
  $0_1 = HEAP32[$5_1 + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  if (!HEAPU8[$0_1 + 143 | 0]) {
   $6_1 = HEAPF32[$5_1 + 5492 >> 2];
   HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
   $3 = $0_1 + 256 | 0;
   $4_1 = HEAP32[$3 + 4 >> 2];
   $5_1 = $0_1 + 248 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $4_1;
   HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
   HEAPF32[$0_1 + 208 >> 2] = $6_1 + HEAPF32[$0_1 + 216 >> 2];
  }
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $5_1 = $571(11290, $2_1 + 8 | 0);
  $3 = HEAP32[18392];
  $0_1 = HEAP32[$3 + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  if (!HEAPU8[$0_1 + 143 | 0]) {
   $6_1 = HEAPF32[$3 + 5492 >> 2];
   HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
   $4_1 = $0_1 + 256 | 0;
   $8 = HEAP32[$4_1 + 4 >> 2];
   $3 = $0_1 + 248 | 0;
   HEAP32[$3 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $8;
   HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
   HEAPF32[$0_1 + 208 >> 2] = $6_1 + HEAPF32[$0_1 + 216 >> 2];
  }
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $3 = $571(11738, $2_1 + 8 | 0);
  $4_1 = HEAP32[18392];
  $0_1 = HEAP32[$4_1 + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  if (!HEAPU8[$0_1 + 143 | 0]) {
   $6_1 = HEAPF32[$4_1 + 5492 >> 2];
   HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
   $8 = $0_1 + 256 | 0;
   $9 = HEAP32[$8 + 4 >> 2];
   $4_1 = $0_1 + 248 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$8 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $9;
   HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
   HEAPF32[$0_1 + 208 >> 2] = $6_1 + HEAPF32[$0_1 + 216 >> 2];
  }
  $224(1, 1);
  $0_1 = HEAP32[18392];
  HEAP32[$0_1 + 7224 >> 2] = 1117782016;
  HEAP32[$0_1 + 7220 >> 2] = HEAP32[$0_1 + 7220 >> 2] | 1;
  $659(8596, $1_1 + 12244 | 0, 0, 9, 0, 0);
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7444 >> 2];
  HEAP32[$0_1 + 7444 >> 2] = $1_1 - 1;
  HEAP32[$0_1 + 7216 >> 2] = HEAP32[(HEAP32[$0_1 + 7452 >> 2] + ($1_1 << 2) | 0) - 8 >> 2];
  $1_1 = HEAP32[$0_1 + 7080 >> 2];
  HEAP32[$1_1 + 196 >> 2] = HEAP32[$1_1 + 196 >> 2] - 1;
  if (!(HEAPU8[$0_1 + 12196 | 0] | !$7_1)) {
   HEAP32[$0_1 + 12200 >> 2] = 1;
   HEAP8[$0_1 + 12196 | 0] = 1;
   HEAP32[$0_1 + 12220 >> 2] = 0;
   HEAP32[$0_1 + 12224 >> 2] = 0;
   HEAP32[$0_1 + 12236 >> 2] = HEAP32[$1_1 + 344 >> 2];
   HEAP32[$0_1 + 12240 >> 2] = HEAP32[$0_1 + 12244 >> 2];
   HEAP8[$0_1 + 12232 | 0] = 1;
   HEAP32[$0_1 + 12228 >> 2] = 2139095039;
   HEAP32[$0_1 + 12204 >> 2] = HEAP32[17792];
  }
  label$5 : {
   if (HEAPU8[$0_1 + 12196 | 0] | !$5_1) {
    break label$5
   }
   $1_1 = HEAP32[$0_1 + 36 >> 2];
   if (!$1_1 | !HEAPU8[$1_1 | 0]) {
    break label$5
   }
   $7_1 = $1622($1_1, 13565);
   if (!$7_1) {
    break label$5
   }
   $1_1 = HEAP32[18392];
   HEAP32[$1_1 + 12200 >> 2] = 2;
   HEAP8[$1_1 + 12196 | 0] = 1;
   HEAP32[$1_1 + 12220 >> 2] = 0;
   HEAP32[$1_1 + 12224 >> 2] = 0;
   HEAP32[$1_1 + 12236 >> 2] = HEAP32[HEAP32[$1_1 + 7080 >> 2] + 344 >> 2];
   HEAP8[$1_1 + 12232 | 0] = 1;
   HEAP32[$1_1 + 12228 >> 2] = 2139095039;
   HEAP32[$1_1 + 12240 >> 2] = HEAP32[$1_1 + 12244 >> 2];
   HEAP32[$0_1 + 12204 >> 2] = $7_1;
  }
  label$6 : {
   if (!$3) {
    break label$6
   }
   $0_1 = HEAP32[18392];
   if (HEAPU8[$0_1 + 12196 | 0]) {
    break label$6
   }
   HEAP32[$0_1 + 12200 >> 2] = 4;
   HEAP8[$0_1 + 12196 | 0] = 1;
   HEAP32[$0_1 + 12220 >> 2] = 0;
   HEAP32[$0_1 + 12224 >> 2] = 0;
   HEAP32[$0_1 + 12236 >> 2] = HEAP32[HEAP32[$0_1 + 7080 >> 2] + 344 >> 2];
   HEAP8[$0_1 + 12232 | 0] = 1;
   HEAP32[$0_1 + 12228 >> 2] = 2139095039;
   HEAP32[$0_1 + 12240 >> 2] = HEAP32[$0_1 + 12244 >> 2];
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $346() {
  var $0_1 = 0;
  $0_1 = HEAP32[18392];
  if (HEAPF32[$0_1 + 12128 >> 2] <= Math_fround(0.0)) {
   HEAPF32[$0_1 + 12128 >> 2] = HEAPF32[$0_1 + 28 >> 2]
  }
 }
 
 function $349($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $4_1 = global$0 + -64 | 0;
  global$0 = $4_1;
  $3 = HEAP32[18392];
  $7_1 = HEAP32[$3 + 7300 >> 2];
  if (!($7_1 & 2)) {
   HEAP32[$3 + 7332 >> 2] = 0;
   HEAP32[$3 + 7300 >> 2] = $7_1 | 2;
   HEAP32[$3 + 7308 >> 2] = 4;
   HEAPF32[$3 + 7336 >> 2] = HEAPF32[$3 + 6468 >> 2] * Math_fround(8.0);
  }
  label$2 : {
   if (!$143(8100, $0_1, 0)) {
    break label$2
   }
   $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
   HEAP8[$0_1 + 140 | 0] = 1;
   if (HEAP16[$0_1 + 150 >> 1] > 1) {
    break label$2
   }
   $0_1 = HEAP32[$3 + 7120 >> 2];
   HEAP32[$4_1 + 52 >> 2] = HEAP32[$3 + 7136 >> 2];
   HEAP32[$4_1 + 48 >> 2] = $0_1;
   $557(14514, $4_1 + 48 | 0);
   $7_1 = HEAP32[18392];
   $0_1 = HEAP32[$7_1 + 7080 >> 2];
   HEAP8[$0_1 + 140 | 0] = 1;
   if (!HEAPU8[$0_1 + 143 | 0]) {
    $1_1 = HEAPF32[$7_1 + 5492 >> 2];
    HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
    $2_1 = $0_1 + 256 | 0;
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    $7_1 = $0_1 + 248 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $5_1;
    HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
    HEAPF32[$0_1 + 208 >> 2] = $1_1 + HEAPF32[$0_1 + 216 >> 2];
   }
   $350(16681);
   HEAP32[$3 + 12272 >> 2] = HEAP32[$3 + 6984 >> 2];
   if (HEAP32[$3 + 12284 >> 2] <= 0) {
    break label$2
   }
   HEAP32[$4_1 + 56 >> 2] = 0;
   HEAP32[$4_1 + 60 >> 2] = 0;
   if (!$490(11393, 3, 1920, $4_1 + 56 | 0, Math_fround(0.0))) {
    break label$2
   }
   $0_1 = HEAP32[18392];
   $474($4_1 + 56 | 0, HEAP32[$0_1 + 6464 >> 2], HEAPF32[$0_1 + 6468 >> 2], Math_fround(3402823466385288598117041.0e14), Math_fround(-1.0), 15090, 0, 0);
   $1_1 = Math_fround(HEAPF32[$4_1 + 56 >> 2] + Math_fround(.9999899864196777));
   label$4 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$1_1;
     break label$4;
    }
    $0_1 = -2147483648;
   }
   $1_1 = Math_fround($0_1 | 0);
   $509(12685, 16, $1_1, 0);
   $509(15056, 8, Math_fround(0.0), 0);
   $509(3128, 16, $1_1, 0);
   $528();
   if (HEAP32[$3 + 12284 >> 2] > 0) {
    $0_1 = 0;
    while (1) {
     $5_1 = $0_1 << 6;
     $8 = HEAP32[$3 + 12292 >> 2];
     $521();
     $2_1 = 0;
     $7_1 = $0_1;
     $2_1 = $0_1 ? HEAP32[($5_1 + HEAP32[$3 + 12292 >> 2] | 0) + -64 >> 2] : $2_1;
     $5_1 = $5_1 + $8 | 0;
     HEAP32[$4_1 + 32 >> 2] = $2_1;
     $557(14544, $4_1 + 32 | 0);
     $521();
     $6_1 = 0;
     label$9 : {
      if ($0_1) {
       break label$9
      }
      $6_1 = 0;
      if (HEAPU8[$5_1 + 6 | 0]) {
       break label$9
      }
      $8 = HEAP32[$5_1 >> 2];
      $0_1 = HEAP32[18392];
      $9 = HEAP32[$0_1 + 7064 >> 2];
      $2_1 = $9;
      $10_1 = HEAP32[$0_1 + 7056 >> 2];
      $0_1 = $10_1;
      if ($0_1) {
       while (1) {
        $6_1 = $0_1 >>> 1 | 0;
        $11_1 = ($6_1 << 3) + $2_1 | 0;
        $12_1 = HEAPU32[$11_1 >> 2] < $8 >>> 0;
        $2_1 = $12_1 ? $11_1 + 8 | 0 : $2_1;
        $0_1 = $12_1 ? $0_1 + ($6_1 ^ -1) | 0 : $6_1;
        if ($0_1) {
         continue
        }
        break;
       }
      }
      $6_1 = 0;
      if (($2_1 | 0) == (($10_1 << 3) + $9 | 0)) {
       break label$9
      }
      $6_1 = 0;
      if (HEAP32[$2_1 >> 2] != ($8 | 0)) {
       break label$9
      }
      $6_1 = HEAP32[$2_1 + 4 >> 2];
     }
     $0_1 = $6_1;
     label$15 : {
      if ($0_1) {
       HEAP32[$4_1 + 16 >> 2] = HEAP32[$0_1 >> 2];
       $557(13947, $4_1 + 16 | 0);
       break label$15;
      }
      if (HEAPU8[$5_1 + 5 | 0]) {
       $556($5_1 + 6 | 0);
       break label$15;
      }
      if (HEAP32[$3 + 12276 >> 2] < HEAP32[$3 + 12284 >> 2]) {
       break label$15
      }
      $556(15508);
     }
     $521();
     HEAP32[$4_1 >> 2] = HEAP32[$5_1 >> 2];
     $557(14544, $4_1);
     if (($7_1 | 0) == (HEAP32[$3 + 12284 >> 2] - 1 | 0)) {
      $5_1 = HEAP32[18392];
      $1_1 = HEAPF32[$5_1 + 6004 >> 2];
      $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
      label$19 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$19;
       }
       $0_1 = -2147483648;
      }
      $2_1 = $0_1 << 8;
      $1_1 = HEAPF32[$5_1 + 6e3 >> 2];
      $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
      label$21 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$21;
       }
       $0_1 = -2147483648;
      }
      $2_1 = $0_1 | $2_1;
      $1_1 = HEAPF32[$5_1 + 6008 >> 2];
      $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
      label$23 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$23;
       }
       $0_1 = -2147483648;
      }
      $2_1 = $2_1 | $0_1 << 16;
      $1_1 = Math_fround(HEAPF32[$5_1 + 6012 >> 2] * HEAPF32[$5_1 + 5416 >> 2]);
      $1_1 = Math_fround(Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * Math_fround(255.0)) + Math_fround(.5));
      label$25 : {
       if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
        $0_1 = ~~$1_1;
        break label$25;
       }
       $0_1 = -2147483648;
      }
      $515(3, $2_1 | $0_1 << 24, -1);
     }
     $0_1 = $7_1 + 1 | 0;
     if (($0_1 | 0) < HEAP32[$3 + 12284 >> 2]) {
      continue
     }
     break;
    };
   }
   $503();
  }
  $142();
  global$0 = $4_1 - -64 | 0;
 }
 
 function $350($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0);
  $561(18622, 0);
  if ($89(0)) {
   $141(0);
   $232(Math_fround(HEAPF32[HEAP32[18392] + 6468 >> 2] * Math_fround(35.0)));
   $556($0_1);
   $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
   HEAP8[$0_1 + 140 | 0] = 1;
   $1_1 = $0_1 + 404 | 0;
   $2_1 = HEAP32[$1_1 >> 2] - 1 | 0;
   $3 = HEAPF32[HEAP32[$0_1 + 412 >> 2] + ($2_1 << 2) >> 2];
   HEAP32[$1_1 >> 2] = $2_1;
   HEAPF32[$0_1 + 388 >> 2] = $3;
   $142();
  }
 }
 
 function $351($0_1, $1_1, $2_1, $3) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  folding_inner2 : {
   folding_inner1 : {
    folding_inner0 : {
     label$1 : {
      switch ($2_1 | 0) {
      case 0:
       $2_1 = HEAP32[$1_1 + 216 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 212 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = $1_1 + 220 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $0_1 + 8 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       return;
      case 1:
       $2_1 = HEAP32[$1_1 + 232 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 228 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = $1_1 + 236 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $0_1 + 8 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       return;
      case 2:
       $2_1 = HEAP32[$1_1 + 248 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 244 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = $1_1 + 252 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $0_1 + 8 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       return;
      case 3:
       $2_1 = HEAP32[$1_1 + 328 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 324 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = $1_1 + 332 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $0_1 + 8 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       return;
      case 4:
       $2_1 = HEAP32[$1_1 + 264 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 260 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = $1_1 + 268 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $0_1 + 8 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       return;
      case 5:
       $2_1 = HEAP32[$1_1 + 280 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 276 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = $1_1 + 284 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $0_1 + 8 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       return;
      case 6:
       $2_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($3, 104) | 0;
       $6_1 = HEAPF32[$2_1 + 8 >> 2];
       $4_1 = HEAPF32[$2_1 + 12 >> 2];
       $5_1 = HEAPF32[$1_1 + 264 >> 2];
       HEAPF32[$0_1 + 12 >> 2] = $5_1 + HEAPF32[$1_1 + 180 >> 2];
       break folding_inner1;
      case 7:
       $2_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($3, 104) | 0;
       $6_1 = HEAPF32[$2_1 + 52 >> 2];
       $4_1 = HEAPF32[$1_1 + 248 >> 2];
       $5_1 = HEAPF32[$2_1 + 56 >> 2];
       HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$1_1 + 256 >> 2];
       HEAPF32[$0_1 + 8 >> 2] = $5_1;
       HEAPF32[$0_1 + 4 >> 2] = $4_1;
       break folding_inner2;
      case 8:
       $1_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($3, 104) | 0;
       $2_1 = HEAP32[$1_1 + 36 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 32 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = $1_1 + 40 | 0;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       $0_1 = $0_1 + 8 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       return;
      case 9:
       $2_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($3, 104) | 0;
       $6_1 = HEAPF32[$2_1 + 52 >> 2];
       $4_1 = HEAPF32[$2_1 + 72 >> 2];
       break folding_inner0;
      case 10:
       $2_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($3, 104) | 0;
       $6_1 = HEAPF32[$2_1 + 52 >> 2];
       $4_1 = HEAPF32[$2_1 + 76 >> 2];
       break folding_inner0;
      case 11:
       $2_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($3, 104) | 0;
       $6_1 = HEAPF32[$2_1 + 52 >> 2];
       $4_1 = HEAPF32[$2_1 + 64 >> 2];
       break folding_inner0;
      case 12:
       $2_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($3, 104) | 0;
       $6_1 = HEAPF32[$2_1 + 52 >> 2];
       $4_1 = HEAPF32[$1_1 + 264 >> 2];
       $5_1 = HEAPF32[$2_1 + 68 >> 2];
       $7_1 = HEAPF32[$1_1 + 184 >> 2];
       HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$1_1 + 272 >> 2];
       HEAPF32[$0_1 + 8 >> 2] = $5_1;
       HEAPF32[$0_1 + 4 >> 2] = $4_1 + $7_1;
       break folding_inner2;
      default:
       break label$1;
      };
     }
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     $0_1 = $0_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     return;
    }
    $5_1 = HEAPF32[$1_1 + 264 >> 2];
    HEAPF32[$0_1 + 12 >> 2] = $5_1 + HEAPF32[$1_1 + 184 >> 2];
   }
   HEAPF32[$0_1 + 8 >> 2] = $4_1;
   HEAPF32[$0_1 + 4 >> 2] = $5_1;
  }
  HEAPF32[$0_1 >> 2] = $6_1;
 }
 
 function $352($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = Math_fround(0);
  $2_1 = global$0 - 400 | 0;
  global$0 = $2_1;
  label$1 : {
   if (!$0_1) {
    HEAP32[$2_1 >> 2] = $1_1;
    $567(14873, $2_1);
    break label$1;
   }
   $5_1 = HEAP32[18392];
   $6_1 = HEAP32[$5_1 + 7508 >> 2] == ($0_1 | 0);
   $3 = 19354;
   $4_1 = HEAPU8[$0_1 + 139 | 0];
   if (!$4_1) {
    $56(0, $5_1 + 5632 | 0);
    $3 = 17707;
   }
   $5_1 = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 376 >> 2] = $3;
   HEAP32[$2_1 + 372 >> 2] = $5_1;
   HEAP32[$2_1 + 368 >> 2] = $1_1;
   $5_1 = $712($1_1, $6_1, 5679, $2_1 + 368 | 0);
   if (!$4_1) {
    $1_1 = HEAP32[18392];
    $3 = (Math_imul(HEAP32[$1_1 + 7396 >> 2], 20) + HEAP32[$1_1 + 7404 >> 2] | 0) - 20 | 0;
    $6_1 = (HEAP32[$3 >> 2] << 4) + $1_1 | 0;
    $11_1 = $6_1 + 5624 | 0;
    $14 = $3 + 12 | 0;
    $15_1 = HEAP32[$14 + 4 >> 2];
    HEAP32[$11_1 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $15_1;
    $11_1 = HEAP32[$3 + 8 >> 2];
    $6_1 = $6_1 + 5616 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$3 + 4 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $11_1;
    HEAP32[$1_1 + 7396 >> 2] = HEAP32[$1_1 + 7396 >> 2] - 1;
   }
   if (!(!$4_1 | !$89(0))) {
    $1_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
    $7_1 = HEAPF32[$0_1 + 20 >> 2];
    $8 = HEAPF32[$0_1 + 12 >> 2];
    HEAPF32[$2_1 + 396 >> 2] = HEAPF32[$0_1 + 16 >> 2] + HEAPF32[$0_1 + 24 >> 2];
    HEAPF32[$2_1 + 392 >> 2] = $8 + $7_1;
    $400($1_1, $0_1 + 12 | 0, $2_1 + 392 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
   }
   if (!$5_1) {
    break label$1
   }
   if (HEAPU8[$0_1 + 804 | 0]) {
    $561(17230, 0)
   }
   $1_1 = HEAP32[$0_1 + 8 >> 2];
   $355($0_1, HEAP32[$0_1 + 580 >> 2]);
   $7_1 = HEAPF32[$0_1 + 16 >> 2];
   $8 = HEAPF32[$0_1 + 24 >> 2];
   $10_1 = HEAPF32[$0_1 + 40 >> 2];
   $9 = HEAPF32[$0_1 + 12 >> 2];
   $12_1 = HEAPF32[$0_1 + 20 >> 2];
   $13 = HEAPF32[$0_1 + 36 >> 2];
   $16_1 = HEAPF32[$0_1 + 44 >> 2];
   HEAPF64[$2_1 + 360 >> 3] = HEAPF32[$0_1 + 48 >> 2];
   $3 = $2_1 + 304 | 0;
   HEAPF64[$3 + 48 >> 3] = $16_1;
   HEAPF64[$3 + 40 >> 3] = $10_1;
   HEAPF64[$3 + 32 >> 3] = $13;
   HEAPF64[$3 + 24 >> 3] = $8;
   HEAPF64[$3 + 16 >> 3] = $12_1;
   HEAPF64[$2_1 + 312 >> 3] = $7_1;
   HEAPF64[$2_1 + 304 >> 3] = $9;
   $567(18207, $3);
   $3 = $2_1 + 256 | 0;
   HEAP32[$3 + 36 >> 2] = $1_1 & 64 ? 10030 : 19354;
   HEAP32[$3 + 32 >> 2] = $1_1 & 262144 ? 4082 : 19354;
   HEAP32[$2_1 + 284 >> 2] = $1_1 & 512 ? 4128 : 19354;
   HEAP32[$3 + 24 >> 2] = $1_1 & 256 ? 19057 : 19354;
   HEAP32[$2_1 + 276 >> 2] = $1_1 & 268435456 ? 19046 : 19354;
   HEAP32[$3 + 16 >> 2] = $1_1 & 134217728 ? 19090 : 19354;
   HEAP32[$2_1 + 268 >> 2] = $1_1 & 67108864 ? 19074 : 19354;
   HEAP32[$2_1 + 264 >> 2] = $1_1 & 33554432 ? 19081 : 19354;
   HEAP32[$2_1 + 260 >> 2] = $1_1 & 16777216 ? 19128 : 19354;
   HEAP32[$2_1 + 256 >> 2] = $1_1;
   $567(18626, $3);
   $7_1 = HEAPF32[$0_1 + 92 >> 2];
   $8 = HEAPF32[$0_1 + 100 >> 2];
   $10_1 = HEAPF32[$0_1 + 88 >> 2];
   $9 = HEAPF32[$0_1 + 96 >> 2];
   $3 = HEAPU8[$0_1 + 136 | 0];
   $1_1 = $2_1 + 208 | 0;
   HEAP32[$1_1 + 36 >> 2] = HEAPU8[$0_1 + 137 | 0] ? 14127 : 19354;
   HEAP32[$1_1 + 32 >> 2] = $3 ? 14745 : 19354;
   HEAPF64[$1_1 + 24 >> 3] = $8;
   HEAPF64[$1_1 + 16 >> 3] = $7_1;
   HEAPF64[$2_1 + 216 >> 3] = $9;
   HEAPF64[$2_1 + 208 >> 3] = $10_1;
   $567(5472, $1_1);
   $1_1 = HEAPU8[$0_1 + 140 | 0];
   $3 = HEAPU8[$0_1 + 139 | 0];
   $4_1 = HEAPU8[$0_1 + 138 | 0];
   HEAP32[$2_1 + 204 >> 2] = $3 | $4_1 ? HEAP16[$0_1 + 154 >> 1] : -1;
   HEAP32[$2_1 + 200 >> 2] = $1_1;
   HEAP32[$2_1 + 196 >> 2] = $3;
   HEAP32[$2_1 + 192 >> 2] = $4_1;
   $567(13013, $2_1 + 192 | 0);
   $1_1 = HEAPU8[$0_1 + 144 | 0];
   $3 = HEAPU8[$0_1 + 145 | 0];
   $4_1 = HEAP8[$0_1 + 172 | 0];
   $5_1 = HEAP8[$0_1 + 173 | 0];
   $6_1 = $2_1 + 160 | 0;
   HEAP32[$6_1 + 16 >> 2] = HEAPU8[$0_1 + 143 | 0];
   HEAP32[$2_1 + 172 >> 2] = $5_1;
   HEAP32[$2_1 + 168 >> 2] = $4_1;
   HEAP32[$2_1 + 164 >> 2] = $3;
   HEAP32[$2_1 + 160 >> 2] = $1_1;
   $567(13075, $6_1);
   $1_1 = $2_1 + 96 | 0;
   $5_1 = $1_1 + 32 | 0;
   $6_1 = $1_1 + 24 | 0;
   $1_1 = 0;
   while (1) {
    $3 = $1_1;
    $4_1 = HEAP32[(($1_1 << 2) + $0_1 | 0) + 756 >> 2];
    $1_1 = ($1_1 << 4) + $0_1 | 0;
    $8 = HEAPF32[$1_1 + 772 >> 2];
    $10_1 = HEAPF32[$1_1 + 764 >> 2];
    $7_1 = HEAPF32[$1_1 + 776 >> 2];
    $9 = HEAPF32[$1_1 + 768 >> 2];
    label$10 : {
     if (!(!($10_1 >= $7_1) | !($7_1 <= $9))) {
      HEAP32[$2_1 + 148 >> 2] = $4_1;
      HEAP32[$2_1 + 144 >> 2] = $3;
      $567(14491, $2_1 + 144 | 0);
      break label$10;
     }
     HEAPF64[$5_1 >> 3] = $7_1;
     HEAPF64[$6_1 >> 3] = $8;
     $1_1 = $2_1 + 96 | 0;
     HEAPF64[$1_1 + 16 >> 3] = $9;
     HEAP32[$2_1 + 100 >> 2] = $4_1;
     HEAP32[$2_1 + 96 >> 2] = $3;
     HEAPF64[$2_1 + 104 >> 3] = $10_1;
     $567(18157, $1_1);
     if (!$89(0)) {
      break label$10
     }
     $1_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
     $12_1 = HEAPF32[$0_1 + 12 >> 2];
     $13 = $9;
     $9 = HEAPF32[$0_1 + 16 >> 2];
     HEAPF32[$2_1 + 396 >> 2] = $13 + $9;
     HEAPF32[$2_1 + 392 >> 2] = $10_1 + $12_1;
     HEAPF32[$2_1 + 388 >> 2] = $7_1 + $9;
     HEAPF32[$2_1 + 384 >> 2] = $8 + $12_1;
     $400($1_1, $2_1 + 392 | 0, $2_1 + 384 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
    }
    $1_1 = $3 + 1 | 0;
    if (!$3) {
     continue
    }
    break;
   };
   $1_1 = HEAP16[$0_1 + 296 >> 1];
   $3 = HEAP32[$0_1 + 752 >> 2];
   if ($3) {
    $3 = HEAP32[$3 >> 2]
   } else {
    $3 = 14877
   }
   HEAP32[$2_1 + 84 >> 2] = $3;
   HEAP32[$2_1 + 80 >> 2] = $1_1;
   $567(5760, $2_1 + 80 | 0);
   $1_1 = HEAP32[$0_1 + 736 >> 2];
   if (($0_1 | 0) != ($1_1 | 0)) {
    $352($1_1, 1685)
   }
   $1_1 = HEAP32[$0_1 + 728 >> 2];
   if ($1_1) {
    $352($1_1, 1696)
   }
   $1_1 = HEAP32[$0_1 + 352 >> 2];
   label$16 : {
    if (($1_1 | 0) <= 0) {
     break label$16
    }
    HEAP32[$2_1 + 68 >> 2] = $1_1;
    HEAP32[$2_1 + 64 >> 2] = 3951;
    if (!$706(3951, 18512, $2_1 - -64 | 0)) {
     break label$16
    }
    $1_1 = HEAP32[$0_1 + 352 >> 2];
    if (($1_1 | 0) > 0) {
     while (1) {
      $3 = $1_1;
      $1_1 = $1_1 - 1 | 0;
      $4_1 = $1_1 << 2;
      $265(HEAP32[$4_1 + HEAP32[$0_1 + 360 >> 2] >> 2]);
      $352(HEAP32[$4_1 + HEAP32[$0_1 + 360 >> 2] >> 2], 1800);
      $4_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
      HEAP32[$4_1 + 196 >> 2] = HEAP32[$4_1 + 196 >> 2] - 1;
      if (($3 | 0) > 1) {
       continue
      }
      break;
     }
    }
    $716();
   }
   $1_1 = HEAP32[$0_1 + 560 >> 2];
   label$19 : {
    if (($1_1 | 0) <= 0) {
     break label$19
    }
    HEAP32[$2_1 + 48 >> 2] = $1_1;
    if (!$706(4753, 18456, $2_1 + 48 | 0)) {
     break label$19
    }
    if (HEAP32[$0_1 + 560 >> 2] > 0) {
     $1_1 = 0;
     while (1) {
      $3 = global$0 - 80 | 0;
      global$0 = $3;
      $4_1 = HEAP32[$0_1 + 568 >> 2] + Math_imul($1_1, 124) | 0;
      $5_1 = HEAP32[$4_1 >> 2];
      $6_1 = HEAP32[$4_1 + 16 >> 2];
      HEAP32[$3 + 72 >> 2] = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$3 + 68 >> 2] = $6_1;
      HEAP32[$3 + 64 >> 2] = $5_1;
      if ($708($5_1, 14643, $3 - -64 | 0)) {
       $7_1 = HEAPF32[$4_1 + 20 >> 2];
       $5_1 = $3 + 32 | 0;
       $8 = HEAPF32[$4_1 + 24 >> 2];
       HEAPF64[$5_1 + 16 >> 3] = $8;
       HEAPF64[$3 + 40 >> 3] = $7_1;
       HEAPF64[$3 + 32 >> 3] = Math_fround($8 - $7_1);
       $567(18286, $5_1);
       if (HEAP32[$4_1 + 92 >> 2] > 0) {
        $6_1 = $3 + 16 | 0;
        $5_1 = 0;
        while (1) {
         $7_1 = HEAPF32[HEAP32[$4_1 + 100 >> 2] + Math_imul($5_1, 28) >> 2];
         HEAPF64[$6_1 >> 3] = Math_fround(Math_fround(HEAPF32[$4_1 + 24 >> 2] - HEAPF32[$4_1 + 20 >> 2]) * $7_1);
         HEAPF64[$3 + 8 >> 3] = $7_1;
         HEAP32[$3 >> 2] = $5_1;
         $567(17719, $3);
         $5_1 = $5_1 + 1 | 0;
         if (($5_1 | 0) < HEAP32[$4_1 + 92 >> 2]) {
          continue
         }
         break;
        };
       }
       $716();
      }
      global$0 = $3 + 80 | 0;
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) < HEAP32[$0_1 + 560 >> 2]) {
       continue
      }
      break;
     };
    }
    $716();
   }
   $1_1 = HEAP32[$0_1 + 548 >> 2];
   HEAP32[$2_1 + 36 >> 2] = $1_1;
   HEAP32[$2_1 + 32 >> 2] = 11574;
   HEAP32[$2_1 + 40 >> 2] = $1_1 << 3;
   if ($706(11574, 5090, $2_1 + 32 | 0)) {
    if (HEAP32[$0_1 + 548 >> 2] > 0) {
     $1_1 = 0;
     while (1) {
      $3 = HEAP32[$0_1 + 556 >> 2] + ($1_1 << 3) | 0;
      $4_1 = HEAP32[$3 + 4 >> 2];
      HEAP32[$2_1 + 16 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$2_1 + 20 >> 2] = $4_1;
      $567(1024, $2_1 + 16 | 0);
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) < HEAP32[$0_1 + 548 >> 2]) {
       continue
      }
      break;
     };
    }
    $716();
   }
   $716();
  }
  global$0 = $2_1 + 400 | 0;
 }
 
 function $353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP16[HEAP32[$0_1 >> 2] + 154 >> 1] - HEAP16[HEAP32[$1_1 >> 2] + 154 >> 1] | 0;
 }
 
 function $354($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  if (($1_1 | 0) > 0) {
   while (1) {
    $7_1 = ($9 << 2) + $0_1 | 0;
    $4_1 = HEAP32[$7_1 >> 2];
    if (($2_1 | 0) == HEAP32[$4_1 + 732 >> 2]) {
     HEAP32[$6_1 >> 2] = HEAP16[$4_1 + 154 >> 1];
     $3 = $6_1 + 16 | 0;
     $21($3, 20, 1793, $6_1);
     $352($4_1, $3);
     $8 = HEAP32[18392];
     $3 = HEAP32[$8 + 7080 >> 2];
     HEAP8[$3 + 140 | 0] = 1;
     $5_1 = HEAPF32[$8 + 5524 >> 2];
     $8 = $3 + 272 | 0;
     $5_1 = Math_fround($5_1 + HEAPF32[$8 >> 2]);
     HEAPF32[$8 >> 2] = $5_1;
     HEAPF32[$3 + 208 >> 2] = Math_fround($5_1 + HEAPF32[$3 + 12 >> 2]) + HEAPF32[$3 + 276 >> 2];
     $354($7_1 + 4 | 0, ($9 ^ -1) + $1_1 | 0, $4_1);
     $4_1 = HEAP32[18392];
     $3 = HEAP32[$4_1 + 7080 >> 2];
     HEAP8[$3 + 140 | 0] = 1;
     $7_1 = $3 + 272 | 0;
     $5_1 = Math_fround(HEAPF32[$7_1 >> 2] - HEAPF32[$4_1 + 5524 >> 2]);
     HEAPF32[$7_1 >> 2] = $5_1;
     HEAPF32[$3 + 208 >> 2] = Math_fround($5_1 + HEAPF32[$3 + 12 >> 2]) + HEAPF32[$3 + 276 >> 2];
    }
    $9 = $9 + 1 | 0;
    if (($9 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
  global$0 = $6_1 + 48 | 0;
 }
 
 function $355($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0;
  $2_1 = global$0 - 560 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$1_1 >> 2];
  label$1 : {
   if (($3 | 0) <= 0) {
    break label$1
   }
   $4_1 = $3 - 1 | 0;
   $5_1 = HEAP32[$1_1 + 8 >> 2] + Math_imul($4_1, 40) | 0;
   if (HEAP32[$5_1 + 28 >> 2]) {
    break label$1
   }
   $3 = HEAP32[$5_1 + 32 >> 2] ? $3 : $4_1;
  }
  $13 = HEAP32[18392];
  $4_1 = HEAP32[$1_1 + 48 >> 2];
  $5_1 = HEAP32[$1_1 + 24 >> 2];
  $10_1 = HEAP32[$1_1 + 12 >> 2];
  $15_1 = $3;
  HEAP32[$2_1 + 176 >> 2] = $3;
  HEAP32[$2_1 + 172 >> 2] = $10_1;
  HEAP32[$2_1 + 168 >> 2] = $5_1;
  HEAP32[$2_1 + 160 >> 2] = 2602;
  HEAP32[$2_1 + 164 >> 2] = $4_1 ? $4_1 : 19354;
  $4_1 = $708($1_1, 5292, $2_1 + 160 | 0);
  $5_1 = HEAP32[18392];
  $3 = HEAP32[$5_1 + 7080 >> 2];
  HEAP8[$3 + 140 | 0] = 1;
  label$4 : {
   label$5 : {
    if (($1_1 | 0) == HEAP32[$3 + 580 >> 2]) {
     HEAP8[$3 + 140 | 0] = 1;
     if (!HEAPU8[$3 + 143 | 0]) {
      $6_1 = HEAPF32[$5_1 + 5492 >> 2];
      HEAPF32[$3 + 212 >> 2] = HEAPF32[$3 + 220 >> 2];
      $0_1 = $3 + 256 | 0;
      $1_1 = HEAP32[$0_1 + 4 >> 2];
      $5_1 = $3 + 248 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $1_1;
      HEAPF32[$3 + 264 >> 2] = HEAPF32[$3 + 268 >> 2];
      HEAPF32[$3 + 208 >> 2] = $6_1 + HEAPF32[$3 + 216 >> 2];
     }
     HEAP32[$2_1 + 264 >> 2] = 1053609165;
     HEAP32[$2_1 + 268 >> 2] = 1065353216;
     HEAP32[$2_1 + 256 >> 2] = 1065353216;
     HEAP32[$2_1 + 260 >> 2] = 1053609165;
     $559($2_1 + 256 | 0, 14915, 0);
     if ($4_1) {
      break label$5
     }
     break label$4;
    }
    $7_1 = $92(HEAP32[HEAP32[$5_1 + 7504 >> 2] >> 2], 1, 11768);
    label$8 : {
     if (!$0_1) {
      break label$8
     }
     if (!$7_1 | !$89(0)) {
      break label$8
     }
     $6_1 = HEAPF32[$0_1 + 24 >> 2];
     $8 = HEAPF32[$0_1 + 16 >> 2];
     HEAPF32[$2_1 + 256 >> 2] = HEAPF32[$0_1 + 12 >> 2] + HEAPF32[$0_1 + 20 >> 2];
     HEAPF32[$2_1 + 260 >> 2] = $8 + $6_1;
     $400($7_1, $0_1 + 12 | 0, $2_1 + 256 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
    }
    if (!$4_1) {
     break label$4
    }
    if (!(HEAPU8[$0_1 + 139 | 0] | !$0_1)) {
     $561(18964, 0)
    }
    if (($15_1 | 0) <= 0) {
     break label$5
    }
    $18_1 = $2_1 + 556 | 0;
    $0_1 = $2_1 + 96 | 0;
    $19 = $0_1 + 32 | 0;
    $20_1 = $0_1 + 24 | 0;
    $21_1 = $0_1 + 16 | 0;
    $3 = HEAP32[$1_1 + 8 >> 2];
    while (1) {
     $4_1 = $3;
     $0_1 = HEAP32[$3 + 32 >> 2];
     label$11 : {
      if ($0_1) {
       HEAP32[$2_1 + 148 >> 2] = HEAP32[$4_1 + 36 >> 2];
       HEAP32[$2_1 + 144 >> 2] = $0_1;
       $567(6997, $2_1 + 144 | 0);
       break label$11;
      }
      $0_1 = HEAP32[$4_1 + 28 >> 2];
      $6_1 = HEAPF32[$4_1 >> 2];
      $3 = HEAP32[$4_1 + 16 >> 2];
      $8 = HEAPF32[$4_1 + 4 >> 2];
      $11_1 = HEAPF32[$4_1 + 8 >> 2];
      HEAPF64[$19 >> 3] = HEAPF32[$4_1 + 12 >> 2];
      HEAPF64[$20_1 >> 3] = $11_1;
      HEAPF64[$21_1 >> 3] = $8;
      HEAP32[$2_1 + 100 >> 2] = $3;
      HEAPF64[$2_1 + 104 >> 3] = $6_1;
      HEAP32[$2_1 + 96 >> 2] = ($0_1 >>> 0) / 3;
      $0_1 = $2_1 + 256 | 0;
      $21($0_1, 300, 18323, $2_1 + 96 | 0);
      $3 = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$2_1 + 80 >> 2] = $0_1;
      $0_1 = $708(($4_1 - $3 | 0) / 40 | 0, 5950, $2_1 + 80 | 0);
      label$13 : {
       if (!$89(0)) {
        break label$13
       }
       $3 = HEAPU8[$13 + 12260 | 0];
       label$14 : {
        if (!$3) {
         if (!$7_1) {
          break label$13
         }
         if (HEAPU8[$13 + 12261 | 0]) {
          break label$14
         }
         break label$13;
        }
        if (!$7_1) {
         break label$13
        }
       }
       $358($7_1, $1_1, $4_1, ($3 | 0) != 0, HEAPU8[$13 + 12261 | 0]);
      }
      if (!$0_1) {
       break label$11
      }
      $12_1 = HEAP32[$1_1 + 12 >> 2] > 0 ? HEAP32[$1_1 + 20 >> 2] : 0;
      $16_1 = HEAP32[$1_1 + 32 >> 2] + Math_imul(HEAP32[$4_1 + 20 >> 2], 20) | 0;
      $0_1 = HEAP32[$4_1 + 24 >> 2];
      $3 = HEAP32[$4_1 + 28 >> 2];
      label$18 : {
       if ($0_1 + $3 >>> 0 <= $0_1 >>> 0) {
        $6_1 = Math_fround(0.0);
        $5_1 = $0_1;
        break label$18;
       }
       $6_1 = Math_fround(0.0);
       while (1) {
        $3 = $2_1 + 240 | 0;
        HEAP32[$3 >> 2] = 0;
        HEAP32[$3 + 4 >> 2] = 0;
        HEAP32[$2_1 + 232 >> 2] = 0;
        HEAP32[$2_1 + 236 >> 2] = 0;
        HEAP32[$2_1 + 224 >> 2] = 0;
        HEAP32[$2_1 + 228 >> 2] = 0;
        $3 = 0;
        while (1) {
         $5_1 = $16_1 + Math_imul($12_1 ? HEAPU16[$12_1 + ($0_1 << 1) >> 1] : $0_1, 20) | 0;
         $10_1 = HEAP32[$5_1 + 4 >> 2];
         $9 = ($2_1 + 224 | 0) + ($3 << 3) | 0;
         HEAP32[$9 >> 2] = HEAP32[$5_1 >> 2];
         HEAP32[$9 + 4 >> 2] = $10_1;
         $0_1 = $0_1 + 1 | 0;
         $3 = $3 + 1 | 0;
         if (($3 | 0) != 3) {
          continue
         }
         break;
        };
        $11_1 = $6_1;
        $6_1 = HEAPF32[$2_1 + 228 >> 2];
        $8 = HEAPF32[$2_1 + 236 >> 2];
        $22_1 = Math_fround(HEAPF32[$2_1 + 240 >> 2] * Math_fround($6_1 - $8));
        $14 = $8;
        $8 = HEAPF32[$2_1 + 244 >> 2];
        $6_1 = Math_fround($11_1 + Math_fround(Math_fround(Math_abs(Math_fround($22_1 + Math_fround(Math_fround(HEAPF32[$2_1 + 224 >> 2] * Math_fround($14 - $8)) + Math_fround(HEAPF32[$2_1 + 232 >> 2] * Math_fround($8 - $6_1)))))) * Math_fround(.5)));
        $5_1 = HEAP32[$4_1 + 24 >> 2];
        $3 = HEAP32[$4_1 + 28 >> 2];
        if ($5_1 + $3 >>> 0 > $0_1 >>> 0) {
         continue
        }
        break;
       };
      }
      $0_1 = HEAP32[$4_1 + 20 >> 2];
      $10_1 = $2_1 + 48 | 0;
      HEAPF64[$10_1 + 16 >> 3] = $6_1;
      HEAP32[$2_1 + 56 >> 2] = $5_1;
      HEAP32[$2_1 + 52 >> 2] = $0_1;
      HEAP32[$2_1 + 48 >> 2] = $3;
      $0_1 = $2_1 + 256 | 0;
      $21($0_1, 300, 1290, $10_1);
      HEAP32[$2_1 + 224 >> 2] = 0;
      HEAP32[$2_1 + 228 >> 2] = 0;
      $601($0_1, 0, 0, $2_1 + 224 | 0);
      if (!(!$7_1 | !$89(0))) {
       $358($7_1, $1_1, $4_1, 1, 0)
      }
      $0_1 = $2_1 + 224 | 0;
      $42($0_1);
      $46($0_1, HEAPU32[$4_1 + 28 >> 2] / 3 | 0, Math_fround(-1.0));
      if ($48($0_1)) {
       while (1) {
        $3 = HEAP32[$2_1 + 224 >> 2];
        if (($3 | 0) < HEAP32[$2_1 + 228 >> 2]) {
         $5_1 = HEAP32[$4_1 + 24 >> 2] + Math_imul($3, 3) | 0;
         while (1) {
          $10_1 = $3;
          $0_1 = $2_1 + 208 | 0;
          HEAP32[$0_1 >> 2] = 0;
          HEAP32[$0_1 + 4 >> 2] = 0;
          HEAP32[$2_1 + 200 >> 2] = 0;
          HEAP32[$2_1 + 204 >> 2] = 0;
          HEAP32[$2_1 + 192 >> 2] = 0;
          HEAP32[$2_1 + 196 >> 2] = 0;
          $3 = 0;
          $0_1 = $2_1 + 256 | 0;
          while (1) {
           $9 = $16_1 + Math_imul($12_1 ? HEAPU16[$12_1 + ($5_1 << 1) >> 1] : $5_1, 20) | 0;
           $23_1 = HEAP32[$9 + 4 >> 2];
           $17_1 = ($2_1 + 192 | 0) + ($3 << 3) | 0;
           HEAP32[$17_1 >> 2] = HEAP32[$9 >> 2];
           HEAP32[$17_1 + 4 >> 2] = $23_1;
           $6_1 = HEAPF32[$9 >> 2];
           $8 = HEAPF32[$9 + 4 >> 2];
           $11_1 = HEAPF32[$9 + 8 >> 2];
           $14 = HEAPF32[$9 + 12 >> 2];
           HEAP32[$2_1 + 40 >> 2] = HEAP32[$9 + 16 >> 2];
           HEAPF64[$2_1 + 32 >> 3] = $14;
           HEAPF64[$2_1 + 24 >> 3] = $11_1;
           HEAPF64[$2_1 + 16 >> 3] = $8;
           HEAP32[$2_1 >> 2] = $3 ? 19150 : 16155;
           HEAPF64[$2_1 + 8 >> 3] = $6_1;
           HEAP32[$2_1 + 4 >> 2] = $5_1;
           $0_1 = $21($0_1, $18_1 - $0_1 | 0, 19267, $2_1) + $0_1 | 0;
           $5_1 = $5_1 + 1 | 0;
           $3 = $3 + 1 | 0;
           if (($3 | 0) != 3) {
            continue
           }
           break;
          };
          HEAP32[$2_1 + 184 >> 2] = 0;
          HEAP32[$2_1 + 188 >> 2] = 0;
          $601($2_1 + 256 | 0, 0, 0, $2_1 + 184 | 0);
          label$30 : {
           if (!$7_1) {
            break label$30
           }
           if (!$89(0)) {
            break label$30
           }
           $0_1 = HEAP32[$7_1 + 36 >> 2];
           HEAP32[$7_1 + 36 >> 2] = $0_1 & -2;
           $388($7_1, $2_1 + 192 | 0, 3, -16711681, 1, Math_fround(1.0));
           HEAP32[$7_1 + 36 >> 2] = $0_1;
          }
          $3 = $10_1 + 1 | 0;
          if (($3 | 0) < HEAP32[$2_1 + 228 >> 2]) {
           continue
          }
          break;
         };
        }
        if ($48($2_1 + 224 | 0)) {
         continue
        }
        break;
       }
      }
      $716();
      $43($2_1 + 224 | 0);
     }
     $3 = $4_1 + 40 | 0;
     if ($3 >>> 0 < HEAP32[$1_1 + 8 >> 2] + Math_imul($15_1, 40) >>> 0) {
      continue
     }
     break;
    };
   }
   $716();
  }
  global$0 = $2_1 + 560 | 0;
 }
 
 function $358($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $18_1 = HEAPF32[$2_1 + 12 >> 2];
  $19 = HEAPF32[$2_1 + 8 >> 2];
  $20_1 = HEAPF32[$2_1 + 4 >> 2];
  $21_1 = HEAPF32[$2_1 >> 2];
  $22_1 = HEAP32[$0_1 + 36 >> 2];
  HEAP32[$0_1 + 36 >> 2] = $22_1 & -2;
  $6_1 = HEAP32[$2_1 + 24 >> 2];
  $23_1 = $6_1 + HEAP32[$2_1 + 28 >> 2] | 0;
  if ($6_1 >>> 0 < $23_1 >>> 0) {
   $24 = $5_1 + 32 | 0;
   $9 = Math_fround(3402823466385288598117041.0e14);
   $10_1 = Math_fround(3402823466385288598117041.0e14);
   $11_1 = Math_fround(-3402823466385288598117041.0e14);
   $12_1 = Math_fround(-3402823466385288598117041.0e14);
   while (1) {
    $14 = $12_1;
    $15_1 = $11_1;
    $16_1 = $6_1;
    $6_1 = 0;
    $25_1 = HEAP32[$1_1 + 12 >> 2] > 0 ? HEAP32[$1_1 + 20 >> 2] : $6_1;
    $6_1 = HEAP32[$1_1 + 32 >> 2];
    $13 = HEAP32[$2_1 + 20 >> 2];
    HEAP32[$24 >> 2] = 0;
    HEAP32[$24 + 4 >> 2] = 0;
    HEAP32[$5_1 + 24 >> 2] = 0;
    HEAP32[$5_1 + 28 >> 2] = 0;
    HEAP32[$5_1 + 16 >> 2] = 0;
    HEAP32[$5_1 + 20 >> 2] = 0;
    $26_1 = $6_1 + Math_imul($13, 20) | 0;
    $6_1 = 0;
    $12_1 = $9;
    $11_1 = $10_1;
    $9 = $15_1;
    $10_1 = $14;
    while (1) {
     $13 = $16_1;
     $13 = Math_imul($25_1 ? HEAPU16[($13 << 1) + $25_1 >> 1] : $13, 20) + $26_1 | 0;
     $27_1 = HEAP32[$13 + 4 >> 2];
     $17_1 = ($5_1 + 16 | 0) + ($6_1 << 3) | 0;
     HEAP32[$17_1 >> 2] = HEAP32[$13 >> 2];
     HEAP32[$17_1 + 4 >> 2] = $27_1;
     $16_1 = $16_1 + 1 | 0;
     $7_1 = HEAPF32[$17_1 >> 2];
     $14 = $12_1 > $7_1 ? $7_1 : $12_1;
     $12_1 = $14;
     $8 = HEAPF32[$17_1 + 4 >> 2];
     $15_1 = $11_1 > $8 ? $8 : $11_1;
     $11_1 = $15_1;
     $7_1 = $9 < $7_1 ? $7_1 : $9;
     $9 = $7_1;
     $8 = $10_1 < $8 ? $8 : $10_1;
     $10_1 = $8;
     $6_1 = $6_1 + 1 | 0;
     if (($6_1 | 0) != 3) {
      continue
     }
     break;
    };
    if ($3) {
     $388($0_1, $5_1 + 16 | 0, 3, -16711681, 1, Math_fround(1.0))
    }
    $9 = $14;
    $10_1 = $15_1;
    $11_1 = $7_1;
    $12_1 = $8;
    $6_1 = $16_1;
    if ($23_1 >>> 0 > $6_1 >>> 0) {
     continue
    }
    break;
   };
   if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$8
   } else {
    $1_1 = -2147483648
   }
   $9 = Math_fround($1_1 | 0);
   if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$7_1
   } else {
    $1_1 = -2147483648
   }
   $10_1 = Math_fround($1_1 | 0);
   if (Math_fround(Math_abs($15_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$15_1
   } else {
    $1_1 = -2147483648
   }
   $12_1 = Math_fround($1_1 | 0);
   if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$14
   } else {
    $1_1 = -2147483648
   }
   $11_1 = Math_fround($1_1 | 0);
  }
  if ($4_1) {
   if (Math_fround(Math_abs($20_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$20_1
   } else {
    $1_1 = -2147483648
   }
   HEAPF32[$5_1 + 20 >> 2] = $1_1 | 0;
   if (Math_fround(Math_abs($21_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$21_1
   } else {
    $1_1 = -2147483648
   }
   HEAPF32[$5_1 + 16 >> 2] = $1_1 | 0;
   if (Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$18_1
   } else {
    $1_1 = -2147483648
   }
   HEAPF32[$5_1 + 12 >> 2] = $1_1 | 0;
   if (Math_fround(Math_abs($19)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$19
   } else {
    $1_1 = -2147483648
   }
   HEAPF32[$5_1 + 8 >> 2] = $1_1 | 0;
   $1_1 = $5_1 + 16 | 0;
   $2_1 = $5_1 + 8 | 0;
   $400($0_1, $1_1, $2_1, -65281, Math_fround(0.0), 0, Math_fround(1.0));
   HEAPF32[$5_1 + 20 >> 2] = $12_1;
   HEAPF32[$5_1 + 16 >> 2] = $11_1;
   HEAPF32[$5_1 + 12 >> 2] = $9;
   HEAPF32[$5_1 + 8 >> 2] = $10_1;
   $400($0_1, $1_1, $2_1, -256, Math_fround(0.0), 0, Math_fround(1.0));
  }
  HEAP32[$0_1 + 36 >> 2] = $22_1;
  global$0 = $5_1 + 48 | 0;
 }
 
 function $360($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $1755($0_1) | 0;
 }
 
 function $361($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1756($0_1);
 }
 
 function $363($0_1) {
  
 }
 
 function $365() {
  
 }
 
 function $367($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = 0;
  if (!$0_1) {
   $0_1 = $50()
  }
  HEAP32[$0_1 + 200 >> 2] = 1065353216;
  HEAP32[$0_1 + 204 >> 2] = 1065353216;
  $2_1 = $0_1 + 248 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 240 | 0;
  HEAP32[$2_1 >> 2] = 1031127695;
  HEAP32[$2_1 + 4 >> 2] = 1064346583;
  $2_1 = $0_1 + 232 | 0;
  HEAP32[$2_1 >> 2] = 1031127695;
  HEAP32[$2_1 + 4 >> 2] = 1031127695;
  $2_1 = $0_1 + 224 | 0;
  HEAP32[$2_1 >> 2] = 1056964608;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 216 | 0;
  HEAP32[$2_1 >> 2] = 1056964608;
  HEAP32[$2_1 + 4 >> 2] = 1056964608;
  $2_1 = $0_1 + 208 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 256 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 288 | 0;
  HEAP32[$2_1 >> 2] = 1056964608;
  HEAP32[$2_1 + 4 >> 2] = 1056964608;
  $7_1 = $0_1 + 280 | 0;
  HEAP32[$7_1 >> 2] = 1054615798;
  HEAP32[$7_1 + 4 >> 2] = 1054615798;
  $1_1 = $0_1 + 272 | 0;
  HEAP32[$1_1 >> 2] = 1034147594;
  HEAP32[$1_1 + 4 >> 2] = 1064346583;
  $1_1 = $0_1 + 264 | 0;
  HEAP32[$1_1 >> 2] = 1034147594;
  HEAP32[$1_1 + 4 >> 2] = 1034147594;
  $1_1 = $0_1 + 296 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 304 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 312 | 0;
  HEAP32[$1_1 >> 2] = 1042536202;
  HEAP32[$1_1 + 4 >> 2] = 1049918177;
  $1_1 = $0_1 + 320 | 0;
  HEAP32[$1_1 >> 2] = 1056293519;
  HEAP32[$1_1 + 4 >> 2] = 1057635697;
  $1_1 = $0_1 + 328 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 336 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 352 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1059816735;
  $14 = $0_1 + 360 | 0;
  $1_1 = $14;
  HEAP32[$1_1 >> 2] = 1025758986;
  HEAP32[$1_1 + 4 >> 2] = 1025758986;
  $15_1 = $0_1 + 368 | 0;
  $1_1 = $15_1;
  HEAP32[$1_1 >> 2] = 1025758986;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 376 | 0;
  HEAP32[$1_1 >> 2] = 1042536202;
  HEAP32[$1_1 + 4 >> 2] = 1049918177;
  $16_1 = $0_1 + 384 | 0;
  $1_1 = $16_1;
  HEAP32[$1_1 >> 2] = 1056293519;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 392 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 400 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1057132380;
  $1_1 = $0_1 + 408 | 0;
  HEAP32[$1_1 >> 2] = 1041194025;
  HEAP32[$1_1 + 4 >> 2] = 1041194025;
  $1_1 = $0_1 + 416 | 0;
  HEAP32[$1_1 >> 2] = 1041194025;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 424 | 0;
  HEAP32[$1_1 >> 2] = 1017370378;
  HEAP32[$1_1 + 4 >> 2] = 1017370378;
  $1_1 = $0_1 + 432 | 0;
  HEAP32[$1_1 >> 2] = 1017370378;
  HEAP32[$1_1 + 4 >> 2] = 1057467924;
  $1_1 = $0_1 + 440 | 0;
  HEAP32[$1_1 >> 2] = 1050589266;
  HEAP32[$1_1 + 4 >> 2] = 1050589266;
  $1_1 = $0_1 + 448 | 0;
  HEAP32[$1_1 >> 2] = 1050589266;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 456 | 0;
  HEAP32[$1_1 >> 2] = 1053944709;
  HEAP32[$1_1 + 4 >> 2] = 1053944709;
  $1_1 = $0_1 + 464 | 0;
  HEAP32[$1_1 >> 2] = 1053944709;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 472 | 0;
  HEAP32[$1_1 >> 2] = 1057132380;
  HEAP32[$1_1 + 4 >> 2] = 1057132380;
  $1_1 = $0_1 + 480 | 0;
  HEAP32[$1_1 >> 2] = 1057132380;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 488 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 496 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 504 | 0;
  HEAP32[$1_1 >> 2] = 1047904911;
  HEAP32[$1_1 + 4 >> 2] = 1057300152;
  $1_1 = $0_1 + 512 | 0;
  HEAP32[$1_1 >> 2] = 1063339950;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 520 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 528 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 536 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 544 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 552 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 560 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 568 | 0;
  HEAP32[$1_1 >> 2] = 1031127695;
  HEAP32[$1_1 + 4 >> 2] = 1057467924;
  $1_1 = $0_1 + 576 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 584 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $17_1 = $0_1 + 592 | 0;
  $1_1 = $17_1;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1050589266;
  $1_1 = $0_1 + 600 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $13 = $0_1 + 608 | 0;
  HEAP32[$13 >> 2] = 1065017672;
  HEAP32[$13 + 4 >> 2] = 1061997773;
  $9 = $0_1 + 616 | 0;
  HEAP32[$9 >> 2] = 1048911544;
  HEAP32[$9 + 4 >> 2] = 1058474557;
  $9 = $0_1 + 624 | 0;
  HEAP32[$9 >> 2] = 1065017672;
  HEAP32[$9 + 4 >> 2] = 1065353216;
  $3 = $0_1 + 720 | 0;
  HEAP32[$3 >> 2] = 1065017672;
  HEAP32[$3 + 4 >> 2] = 1064514355;
  $3 = $0_1 + 712 | 0;
  HEAP32[$3 >> 2] = 1048911544;
  HEAP32[$3 + 4 >> 2] = 1058474557;
  $3 = $0_1 + 704 | 0;
  HEAP32[$3 >> 2] = 1065017672;
  HEAP32[$3 + 4 >> 2] = 1059816735;
  $3 = $0_1 + 696 | 0;
  HEAP32[$3 >> 2] = 1048911544;
  HEAP32[$3 + 4 >> 2] = 1058474557;
  $3 = $0_1 + 688 | 0;
  HEAP32[$3 >> 2] = 1065017672;
  HEAP32[$3 + 4 >> 2] = 1045220557;
  $3 = $0_1 + 680 | 0;
  HEAP32[$3 >> 2] = 1048911544;
  HEAP32[$3 + 4 >> 2] = 1058474557;
  $3 = $0_1 + 672 | 0;
  HEAP32[$3 >> 2] = 1061158912;
  HEAP32[$3 + 4 >> 2] = 1065353216;
  $3 = $0_1 + 664 | 0;
  HEAP32[$3 >> 2] = 1036831949;
  HEAP32[$3 + 4 >> 2] = 1053609165;
  $3 = $0_1 + 656 | 0;
  HEAP32[$3 >> 2] = 1061158912;
  HEAP32[$3 + 4 >> 2] = 1061662228;
  $3 = $0_1 + 648 | 0;
  HEAP32[$3 >> 2] = 1036831949;
  HEAP32[$3 + 4 >> 2] = 1053609165;
  $20_1 = HEAP32[$2_1 + 4 >> 2];
  $3 = $0_1 + 640 | 0;
  HEAP32[$3 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3 + 4 >> 2] = $20_1;
  $3 = HEAP32[$7_1 + 4 >> 2];
  $2_1 = $0_1 + 632 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3;
  $4_1 = HEAPF32[$0_1 + 380 >> 2];
  $10_1 = HEAPF32[$0_1 + 588 >> 2];
  $5_1 = HEAPF32[$16_1 >> 2];
  $11_1 = HEAPF32[$17_1 >> 2];
  $6_1 = HEAPF32[$0_1 + 388 >> 2];
  $12_1 = HEAPF32[$0_1 + 596 >> 2];
  HEAP32[$0_1 + 728 >> 2] = 1043878379;
  HEAP32[$0_1 + 760 >> 2] = 1045220556;
  $7_1 = HEAP32[$13 + 4 >> 2];
  $2_1 = $0_1 + 752 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$13 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $7_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $0_1 + 744 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $7_1;
  $12_1 = Math_fround($12_1 + Math_fround(Math_fround($6_1 - $12_1) * Math_fround(.800000011920929)));
  HEAPF32[$0_1 + 740 >> 2] = $12_1;
  $11_1 = Math_fround($11_1 + Math_fround(Math_fround($5_1 - $11_1) * Math_fround(.800000011920929)));
  HEAPF32[$0_1 + 736 >> 2] = $11_1;
  $10_1 = Math_fround($10_1 + Math_fround(Math_fround($4_1 - $10_1) * Math_fround(.800000011920929)));
  HEAPF32[$0_1 + 732 >> 2] = $10_1;
  $8 = $6_1;
  $6_1 = HEAPF32[$0_1 + 628 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($8 - $6_1) * Math_fround(.6000000238418579)) + $6_1);
  HEAPF32[$0_1 + 772 >> 2] = $6_1;
  $8 = $5_1;
  $5_1 = HEAPF32[$9 >> 2];
  $5_1 = Math_fround(Math_fround(Math_fround($8 - $5_1) * Math_fround(.6000000238418579)) + $5_1);
  HEAPF32[$0_1 + 768 >> 2] = $5_1;
  $8 = $4_1;
  $4_1 = HEAPF32[$0_1 + 620 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround($8 - $4_1) * Math_fround(.6000000238418579)) + $4_1);
  HEAPF32[$0_1 + 764 >> 2] = $4_1;
  $8 = HEAPF32[$0_1 + 364 >> 2];
  $18_1 = HEAPF32[$15_1 >> 2];
  $19 = HEAPF32[$0_1 + 372 >> 2];
  HEAPF32[$0_1 + 788 >> 2] = Math_fround(Math_fround($19 - $12_1) * Math_fround(.800000011920929)) + $12_1;
  HEAPF32[$0_1 + 784 >> 2] = Math_fround(Math_fround($18_1 - $11_1) * Math_fround(.800000011920929)) + $11_1;
  HEAPF32[$0_1 + 780 >> 2] = Math_fround(Math_fround($8 - $10_1) * Math_fround(.800000011920929)) + $10_1;
  HEAP32[$0_1 + 776 >> 2] = 1032536982;
  $2_1 = $0_1 + 808 | 0;
  HEAP32[$2_1 >> 2] = 1058810102;
  HEAP32[$2_1 + 4 >> 2] = 1058810102;
  $2_1 = $0_1 + 816 | 0;
  HEAP32[$2_1 >> 2] = 1058810102;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 824 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1054615798;
  $2_1 = $0_1 + 832 | 0;
  HEAP32[$2_1 >> 2] = 1051931443;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 840 | 0;
  HEAP32[$2_1 >> 2] = 1063675494;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 848 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 856 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1058642330;
  $2_1 = $0_1 + 864 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 872 | 0;
  HEAP32[$2_1 >> 2] = 1044549468;
  HEAP32[$2_1 + 4 >> 2] = 1044549468;
  $2_1 = $0_1 + 880 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 888 | 0;
  HEAP32[$2_1 >> 2] = 1050589266;
  HEAP32[$2_1 + 4 >> 2] = 1050589266;
  $2_1 = $0_1 + 896 | 0;
  HEAP32[$2_1 >> 2] = 1051931443;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 904 | 0;
  HEAP32[$2_1 >> 2] = 1047233823;
  HEAP32[$2_1 + 4 >> 2] = 1047233823;
  $2_1 = $0_1 + 912 | 0;
  HEAP32[$2_1 >> 2] = 1048576e3;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  HEAPF32[$0_1 + 796 >> 2] = Math_fround(Math_fround($8 - $4_1) * Math_fround(.4000000059604645)) + $4_1;
  HEAPF32[$0_1 + 800 >> 2] = Math_fround(Math_fround($18_1 - $5_1) * Math_fround(.4000000059604645)) + $5_1;
  HEAPF32[$0_1 + 804 >> 2] = Math_fround(Math_fround($19 - $6_1) * Math_fround(.4000000059604645)) + $6_1;
  HEAPF32[$0_1 + 792 >> 2] = Math_fround(Math_fround(HEAPF32[$14 >> 2] + Math_fround(-.19999998807907104)) * Math_fround(.4000000059604645)) + Math_fround(.19999998807907104);
  $2_1 = $0_1 + 928 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 920 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 1040 | 0;
  HEAP32[$2_1 >> 2] = 1061997773;
  HEAP32[$2_1 + 4 >> 2] = 1051931443;
  $2_1 = $0_1 + 1032 | 0;
  HEAP32[$2_1 >> 2] = 1061997773;
  HEAP32[$2_1 + 4 >> 2] = 1061997773;
  $2_1 = $0_1 + 1024 | 0;
  HEAP32[$2_1 >> 2] = 1061997773;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0_1 + 1016 | 0;
  HEAP32[$2_1 >> 2] = 1061997773;
  HEAP32[$2_1 + 4 >> 2] = 1061997773;
  $2_1 = $0_1 + 1008 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 1e3 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 992 | 0;
  HEAP32[$2_1 >> 2] = 1065017672;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 984 | 0;
  HEAP32[$2_1 >> 2] = 1048911544;
  HEAP32[$2_1 + 4 >> 2] = 1058474557;
  $2_1 = $0_1 + 976 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1063675494;
  $2_1 = $0_1 + 968 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 960 | 0;
  HEAP32[$2_1 >> 2] = 1065017672;
  HEAP32[$2_1 + 4 >> 2] = 1051931443;
  $2_1 = $0_1 + 952 | 0;
  HEAP32[$2_1 >> 2] = 1048911544;
  HEAP32[$2_1 + 4 >> 2] = 1058474557;
  $2_1 = $0_1 + 944 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1031127695;
  $0_1 = $0_1 + 936 | 0;
  HEAP32[$0_1 >> 2] = 1065353216;
  HEAP32[$0_1 + 4 >> 2] = 1065353216;
 }
 
 function $372($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($1_1 | 0) >= 0) {
    break label$1
   }
   $2_1 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   $2_1 = $16(Math_imul($1_1, 40));
   $3 = HEAP32[$0_1 + 8 >> 2];
   if ($3) {
    $1602($2_1, $3, Math_imul(HEAP32[$0_1 >> 2], 40));
    $17(HEAP32[$0_1 + 8 >> 2]);
   }
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   HEAP32[$0_1 + 8 >> 2] = $2_1;
  }
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 16 >> 2];
  label$3 : {
   if (($1_1 | 0) >= 0) {
    break label$3
   }
   $2_1 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$3
   }
   $2_1 = $16($1_1 << 1);
   $3 = HEAP32[$0_1 + 20 >> 2];
   if ($3) {
    $1602($2_1, $3, HEAP32[$0_1 + 12 >> 2] << 1);
    $17(HEAP32[$0_1 + 20 >> 2]);
   }
   HEAP32[$0_1 + 16 >> 2] = $1_1;
   HEAP32[$0_1 + 20 >> 2] = $2_1;
  }
  HEAP32[$0_1 + 12 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 28 >> 2];
  label$5 : {
   if (($1_1 | 0) >= 0) {
    break label$5
   }
   $2_1 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$5
   }
   $2_1 = $16(Math_imul($1_1, 20));
   $3 = HEAP32[$0_1 + 32 >> 2];
   if ($3) {
    $1602($2_1, $3, Math_imul(HEAP32[$0_1 + 24 >> 2], 20));
    $17(HEAP32[$0_1 + 32 >> 2]);
   }
   HEAP32[$0_1 + 28 >> 2] = $1_1;
   HEAP32[$0_1 + 32 >> 2] = $2_1;
  }
  HEAP32[$0_1 + 24 >> 2] = 0;
  $1_1 = HEAP32[HEAP32[$0_1 + 44 >> 2] + 40 >> 2];
  HEAP32[$0_1 + 96 >> 2] = 0;
  HEAP32[$0_1 + 100 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = $1_1;
  $1_1 = $0_1 + 104 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 112 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 52 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 0;
  $1_1 = HEAP32[$0_1 - -64 >> 2];
  label$7 : {
   if (($1_1 | 0) >= 0) {
    break label$7
   }
   $2_1 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$7
   }
   $2_1 = $16($1_1 << 4);
   $3 = HEAP32[$0_1 + 68 >> 2];
   if ($3) {
    $1602($2_1, $3, HEAP32[$0_1 + 60 >> 2] << 4);
    $17(HEAP32[$0_1 + 68 >> 2]);
   }
   HEAP32[$0_1 + 64 >> 2] = $1_1;
   HEAP32[$0_1 + 68 >> 2] = $2_1;
  }
  HEAP32[$0_1 + 60 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 76 >> 2];
  label$9 : {
   if (($1_1 | 0) >= 0) {
    break label$9
   }
   $2_1 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$9
   }
   $2_1 = $16($1_1 << 2);
   $3 = HEAP32[$0_1 + 80 >> 2];
   if ($3) {
    $1602($2_1, $3, HEAP32[$0_1 + 72 >> 2] << 2);
    $17(HEAP32[$0_1 + 80 >> 2]);
   }
   HEAP32[$0_1 + 76 >> 2] = $1_1;
   HEAP32[$0_1 + 80 >> 2] = $2_1;
  }
  HEAP32[$0_1 + 72 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 88 >> 2];
  label$11 : {
   if (($1_1 | 0) >= 0) {
    break label$11
   }
   $2_1 = $1_1;
   $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
   $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$11
   }
   $2_1 = $16($1_1 << 3);
   $3 = HEAP32[$0_1 + 92 >> 2];
   if ($3) {
    $1602($2_1, $3, HEAP32[$0_1 + 84 >> 2] << 3);
    $17(HEAP32[$0_1 + 92 >> 2]);
   }
   HEAP32[$0_1 + 88 >> 2] = $1_1;
   HEAP32[$0_1 + 92 >> 2] = $2_1;
  }
  HEAP32[$0_1 + 120 >> 2] = 0;
  HEAP32[$0_1 + 124 >> 2] = 1;
  HEAP32[$0_1 + 84 >> 2] = 0;
  $2_1 = HEAP32[$0_1 >> 2];
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  label$13 : {
   if (($2_1 | 0) != ($1_1 | 0)) {
    break label$13
   }
   $3 = $2_1 + 1 | 0;
   $4_1 = $1_1;
   if ($1_1) {
    $2_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $1_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
   if (($4_1 | 0) >= ($1_1 | 0)) {
    break label$13
   }
   $2_1 = $16(Math_imul($1_1, 40));
   $3 = HEAP32[$0_1 + 8 >> 2];
   if ($3) {
    $1602($2_1, $3, Math_imul(HEAP32[$0_1 >> 2], 40));
    $17(HEAP32[$0_1 + 8 >> 2]);
   }
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   HEAP32[$0_1 + 8 >> 2] = $2_1;
  }
  $1_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 32 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 24 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $1_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $1_1 = $1_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 140 >> 2] = 1065353216;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
 }
 
 function $373($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if ($1_1) {
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 8 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 + 16 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 20 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 32 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 24 >> 2] = 0;
   HEAP32[$0_1 + 28 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 32 >> 2] = 0;
  }
  HEAP32[$0_1 + 52 >> 2] = 0;
  HEAP32[$0_1 + 56 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  HEAP32[$0_1 + 40 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 68 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 60 >> 2] = 0;
   HEAP32[$0_1 + 64 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 68 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 80 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 72 >> 2] = 0;
   HEAP32[$0_1 + 76 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 80 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 92 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 84 >> 2] = 0;
   HEAP32[$0_1 + 88 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 92 >> 2] = 0;
  }
  $374($0_1 + 120 | 0);
 }
 
 function $374($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  if (HEAP32[$0_1 + 8 >> 2] > 0) {
   while (1) {
    if (($4_1 | 0) == HEAP32[$0_1 >> 2]) {
     $1_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($4_1, 24) | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $2_1 = $1_1 + 16 | 0;
     HEAP32[$2_1 >> 2] = 0;
     HEAP32[$2_1 + 4 >> 2] = 0;
     $1_1 = $1_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
    }
    $2_1 = Math_imul($4_1, 24);
    $1_1 = $2_1 + HEAP32[$0_1 + 16 >> 2] | 0;
    $3 = HEAP32[$1_1 + 8 >> 2];
    if ($3) {
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $17($3);
     HEAP32[$1_1 + 8 >> 2] = 0;
    }
    $1_1 = $2_1 + HEAP32[$0_1 + 16 >> 2] | 0;
    $2_1 = $1_1 + 20 | 0;
    $3 = HEAP32[$2_1 >> 2];
    if ($3) {
     HEAP32[$1_1 + 12 >> 2] = 0;
     HEAP32[$1_1 + 16 >> 2] = 0;
     $17($3);
     HEAP32[$2_1 >> 2] = 0;
    }
    $1_1 = $4_1 + 1 | 0;
    $4_1 = $1_1;
    if (($1_1 | 0) < HEAP32[$0_1 + 8 >> 2]) {
     continue
    }
    break;
   }
  }
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 1;
  $1_1 = HEAP32[$0_1 + 16 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 + 12 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 16 >> 2] = 0;
  }
 }
 
 function $375($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $2_1 = $0_1 + 104 | 0;
  $3 = HEAP32[$2_1 + 4 >> 2];
  $5_1 = $4_1 + 8 | 0;
  $1_1 = $5_1;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $3;
  $1_1 = HEAP32[$0_1 + 100 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$0_1 + 96 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $7_1 = HEAP32[$0_1 + 116 >> 2];
  $8 = HEAP32[$0_1 + 112 >> 2];
  $9 = HEAP32[$0_1 + 12 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   $3 = $2_1 + 1 | 0;
   $2_1 = 8;
   $6_1 = $1_1;
   $2_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : $2_1;
   $1_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
   if (($6_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   $2_1 = $16(Math_imul($1_1, 40));
   $3 = HEAP32[$0_1 + 8 >> 2];
   if ($3) {
    $1602($2_1, $3, Math_imul(HEAP32[$0_1 >> 2], 40));
    $17(HEAP32[$0_1 + 8 >> 2]);
   }
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   HEAP32[$0_1 + 8 >> 2] = $2_1;
  }
  $2_1 = HEAP32[$5_1 >> 2];
  $5_1 = HEAP32[$5_1 + 4 >> 2];
  $3 = HEAP32[$4_1 >> 2];
  $6_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0;
  HEAP32[$1_1 + 16 >> 2] = $8;
  HEAP32[$1_1 + 20 >> 2] = $7_1;
  HEAP32[$1_1 + 24 >> 2] = $9;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 + 32 >> 2] = 0;
  HEAP32[$1_1 >> 2] = $3;
  HEAP32[$1_1 + 4 >> 2] = $6_1;
  HEAP32[$1_1 + 36 >> 2] = 0;
  $1_1 = $1_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$1_1 + 4 >> 2] = $5_1;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $377($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = Math_fround(0), $3 = 0;
  $0_1 = HEAP32[$0_1 + 44 >> 2];
  $2_1 = Math_fround($1_1 + Math_fround(.9999989867210388));
  label$1 : {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1;
    break label$1;
   }
   $3 = -2147483648;
  }
  if (($3 | 0) <= 63) {
   return HEAPU8[($0_1 + $3 | 0) + 432 | 0]
  }
  $2_1 = HEAPF32[$0_1 + 20 >> 2];
  $1_1 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / $1590(Math_fround(Math_fround(1.0) - Math_fround(($1_1 > $2_1 ? $2_1 : $1_1) / $1_1))))));
  label$4 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
    $0_1 = ~~$1_1;
    break label$4;
   }
   $0_1 = -2147483648;
  }
  $0_1 = ($0_1 + 1 | 0) / 2 << 1;
  $0_1 = ($0_1 | 0) >= 512 ? 512 : $0_1;
  return (($0_1 | 0) <= 4 ? 4 : $0_1) | 0;
 }
 
 function $378($0_1, $1_1, $2_1, $3) {
  var $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = 0;
  $5_1 = HEAPF32[$2_1 + 4 >> 2];
  $9 = HEAPF32[$2_1 >> 2];
  $6_1 = HEAPF32[$1_1 + 4 >> 2];
  $7_1 = HEAPF32[$1_1 >> 2];
  label$1 : {
   if (!$3) {
    $4_1 = $5_1;
    $5_1 = $9;
    break label$1;
   }
   $4_1 = HEAPF32[$0_1 + 104 >> 2];
   $9 = $4_1 < $9 ? $4_1 : $9;
   $4_1 = HEAPF32[$0_1 + 100 >> 2];
   $6_1 = $4_1 > $6_1 ? $4_1 : $6_1;
   $4_1 = HEAPF32[$0_1 + 96 >> 2];
   $7_1 = $4_1 > $7_1 ? $4_1 : $7_1;
   $4_1 = HEAPF32[$0_1 + 108 >> 2];
   if (!($5_1 > $4_1)) {
    $4_1 = $5_1
   }
   $5_1 = $9;
  }
  $4_1 = $4_1 <= $6_1 ? $6_1 : $4_1;
  $5_1 = $5_1 <= $7_1 ? $7_1 : $5_1;
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  $2_1 = HEAP32[$0_1 - -64 >> 2];
  label$5 : {
   if (($1_1 | 0) != ($2_1 | 0)) {
    break label$5
   }
   $1_1 = $1_1 + 1 | 0;
   if ($2_1) {
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $3 = ($1_1 | 0) < ($3 | 0) ? $3 : $1_1;
   if (($3 | 0) <= ($2_1 | 0)) {
    break label$5
   }
   $2_1 = $16($3 << 4);
   $1_1 = HEAP32[$0_1 + 68 >> 2];
   if ($1_1) {
    $1602($2_1, $1_1, HEAP32[$0_1 + 60 >> 2] << 4);
    $17(HEAP32[$0_1 + 68 >> 2]);
   }
   HEAP32[$0_1 + 64 >> 2] = $3;
   HEAP32[$0_1 + 68 >> 2] = $2_1;
  }
  $1_1 = HEAP32[$0_1 + 68 >> 2] + (HEAP32[$0_1 + 60 >> 2] << 4) | 0;
  HEAPF32[$1_1 + 12 >> 2] = $4_1;
  HEAPF32[$1_1 + 8 >> 2] = $5_1;
  HEAPF32[$1_1 + 4 >> 2] = $6_1;
  HEAPF32[$1_1 >> 2] = $7_1;
  HEAPF32[$0_1 + 108 >> 2] = $4_1;
  HEAPF32[$0_1 + 104 >> 2] = $5_1;
  HEAPF32[$0_1 + 100 >> 2] = $6_1;
  HEAPF32[$0_1 + 96 >> 2] = $7_1;
  HEAP32[$0_1 + 60 >> 2] = HEAP32[$0_1 + 60 >> 2] + 1;
  $10_1 = $0_1 + 96 | 0;
  label$9 : {
   $3 = HEAP32[$0_1 >> 2];
   $2_1 = $3 - 1 | 0;
   $8 = HEAP32[$0_1 + 8 >> 2] + Math_imul($2_1, 40) | 0;
   $1_1 = HEAP32[$8 + 28 >> 2];
   if (!$1_1) {
    break label$9
   }
   if (!$1645($8, $10_1, 16)) {
    break label$9
   }
   $375($0_1);
   return;
  }
  label$10 : {
   if (($3 | 0) < 2 | $1_1) {
    break label$10
   }
   $1_1 = $8 - 40 | 0;
   if ($1645($10_1, $1_1, 24) | HEAP32[$1_1 + 32 >> 2]) {
    break label$10
   }
   HEAP32[$0_1 >> 2] = $2_1;
   return;
  }
  $0_1 = HEAP32[$10_1 + 4 >> 2];
  HEAP32[$8 >> 2] = HEAP32[$10_1 >> 2];
  HEAP32[$8 + 4 >> 2] = $0_1;
  $1_1 = $10_1 + 8 | 0;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $8 + 8 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $0_1;
 }
 
 function $379($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[$0_1 + 44 >> 2];
  $4_1 = HEAP32[$2_1 + 24 >> 2];
  $5_1 = HEAP32[$2_1 + 28 >> 2];
  HEAP32[$1_1 + 24 >> 2] = $4_1;
  HEAP32[$1_1 + 28 >> 2] = $5_1;
  $3 = $2_1 + 32 | 0;
  $2_1 = HEAP32[$3 >> 2];
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  HEAP32[$1_1 + 12 >> 2] = $5_1;
  HEAP32[$1_1 + 16 >> 2] = $2_1;
  HEAP32[$1_1 + 20 >> 2] = $3;
  HEAP32[$1_1 >> 2] = $2_1;
  HEAP32[$1_1 + 4 >> 2] = $3;
  $378($0_1, $1_1 + 8 | 0, $1_1, 0);
  global$0 = $1_1 + 32 | 0;
 }
 
 function $380($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  $2_1 = $1_1 - 1 | 0;
  HEAP32[$0_1 + 60 >> 2] = $2_1;
  $2_1 = $2_1 ? (HEAP32[$0_1 + 68 >> 2] + ($1_1 << 4) | 0) - 32 | 0 : HEAP32[$0_1 + 44 >> 2] + 24 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 96 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 100 >> 2] = $1_1;
  $3 = $2_1 + 8 | 0;
  $1_1 = HEAP32[$3 + 4 >> 2];
  $4_1 = $0_1 + 104 | 0;
  HEAP32[$4_1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $6_1 = $0_1 + 96 | 0;
  label$1 : {
   $4_1 = HEAP32[$0_1 >> 2];
   $3 = $4_1 - 1 | 0;
   $5_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul($3, 40) | 0;
   $1_1 = HEAP32[$5_1 + 28 >> 2];
   if (!$1_1) {
    break label$1
   }
   if (!$1645($5_1, $6_1, 16)) {
    break label$1
   }
   $375($0_1);
   return;
  }
  label$2 : {
   if (($4_1 | 0) < 2 | $1_1) {
    break label$2
   }
   $1_1 = $5_1 - 40 | 0;
   if ($1645($6_1, $1_1, 24) | HEAP32[$1_1 + 32 >> 2]) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $3;
   return;
  }
  $4_1 = HEAP32[$2_1 >> 2];
  $3 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = $2_1 + 8 | 0;
  $0_1 = HEAP32[$2_1 + 4 >> 2];
  $1_1 = $5_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  HEAP32[$5_1 >> 2] = $4_1;
  HEAP32[$5_1 + 4 >> 2] = $3;
 }
 
 function $381($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 + 72 >> 2];
  $3 = HEAP32[$0_1 + 76 >> 2];
  label$1 : {
   if (($2_1 | 0) != ($3 | 0)) {
    break label$1
   }
   $4_1 = $2_1 + 1 | 0;
   $5_1 = $3;
   if ($3) {
    $2_1 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $3 = ($2_1 | 0) > ($4_1 | 0) ? $2_1 : $4_1;
   if (($5_1 | 0) >= ($3 | 0)) {
    break label$1
   }
   $2_1 = $16($3 << 2);
   $4_1 = HEAP32[$0_1 + 80 >> 2];
   if ($4_1) {
    $1602($2_1, $4_1, HEAP32[$0_1 + 72 >> 2] << 2);
    $17(HEAP32[$0_1 + 80 >> 2]);
   }
   HEAP32[$0_1 + 76 >> 2] = $3;
   HEAP32[$0_1 + 80 >> 2] = $2_1;
  }
  HEAP32[HEAP32[$0_1 + 80 >> 2] + (HEAP32[$0_1 + 72 >> 2] << 2) >> 2] = $1_1;
  HEAP32[$0_1 + 112 >> 2] = $1_1;
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$0_1 + 72 >> 2] + 1;
  $4_1 = HEAP32[$0_1 + 8 >> 2];
  $5_1 = HEAP32[$0_1 >> 2];
  $3 = $5_1 - 1 | 0;
  $2_1 = $4_1 + Math_imul($3, 40) | 0;
  $6_1 = HEAP32[$2_1 + 28 >> 2];
  if (!(!$6_1 | HEAP32[$2_1 + 16 >> 2] == ($1_1 | 0))) {
   $375($0_1);
   return;
  }
  label$6 : {
   if (($5_1 | 0) < 2 | $6_1) {
    break label$6
   }
   $2_1 = $2_1 - 40 | 0;
   if ($1645($0_1 + 96 | 0, $2_1, 24) | HEAP32[$2_1 + 32 >> 2]) {
    break label$6
   }
   HEAP32[$0_1 >> 2] = $3;
   return;
  }
  HEAP32[(Math_imul($3, 40) + $4_1 | 0) + 16 >> 2] = $1_1;
 }
 
 function $382($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  $2_1 = $1_1 - 1 | 0;
  HEAP32[$0_1 + 72 >> 2] = $2_1;
  $4_1 = $0_1 + 112 | 0;
  if ($2_1) {
   $1_1 = HEAP32[(HEAP32[$0_1 + 80 >> 2] + ($1_1 << 2) | 0) - 8 >> 2]
  } else {
   $1_1 = 0
  }
  HEAP32[$4_1 >> 2] = $1_1;
  $5_1 = HEAP32[$0_1 + 8 >> 2];
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = $6_1 - 1 | 0;
  $3 = $5_1 + Math_imul($2_1, 40) | 0;
  $4_1 = HEAP32[$3 + 28 >> 2];
  if (!(!$4_1 | HEAP32[$3 + 16 >> 2] == ($1_1 | 0))) {
   $375($0_1);
   return;
  }
  label$4 : {
   if (($6_1 | 0) < 2 | $4_1) {
    break label$4
   }
   $3 = $3 - 40 | 0;
   if ($1645($0_1 + 96 | 0, $3, 24) | HEAP32[$3 + 32 >> 2]) {
    break label$4
   }
   HEAP32[$0_1 >> 2] = $2_1;
   return;
  }
  HEAP32[(Math_imul($2_1, 40) + $5_1 | 0) + 16 >> 2] = $1_1;
 }
 
 function $383($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!(HEAPU8[$0_1 + 36 | 0] & 8) | HEAP32[$0_1 + 40 >> 2] + $2_1 >>> 0 < 65536) {
    break label$1
   }
   HEAP32[$0_1 + 40 >> 2] = 0;
   $3 = HEAP32[$0_1 + 24 >> 2];
   HEAP32[$0_1 + 116 >> 2] = $3;
   $4_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2] - 1 | 0, 40) | 0;
   if (HEAP32[$4_1 + 28 >> 2]) {
    $375($0_1);
    break label$1;
   }
   HEAP32[$4_1 + 20 >> 2] = $3;
  }
  $3 = (HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0) - 12 | 0;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + $1_1;
  $3 = HEAP32[$0_1 + 28 >> 2];
  $5_1 = HEAP32[$0_1 + 24 >> 2];
  $2_1 = $5_1 + $2_1 | 0;
  label$3 : {
   if (($3 | 0) >= ($2_1 | 0)) {
    break label$3
   }
   $6_1 = $3;
   if ($3) {
    $4_1 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $4_1 = 8
   }
   $3 = ($2_1 | 0) < ($4_1 | 0) ? $4_1 : $2_1;
   if (($6_1 | 0) >= ($3 | 0)) {
    break label$3
   }
   $4_1 = $16(Math_imul($3, 20));
   $6_1 = HEAP32[$0_1 + 32 >> 2];
   if ($6_1) {
    $1602($4_1, $6_1, Math_imul(HEAP32[$0_1 + 24 >> 2], 20));
    $17(HEAP32[$0_1 + 32 >> 2]);
   }
   HEAP32[$0_1 + 28 >> 2] = $3;
   HEAP32[$0_1 + 32 >> 2] = $4_1;
  }
  HEAP32[$0_1 + 24 >> 2] = $2_1;
  HEAP32[$0_1 + 52 >> 2] = HEAP32[$0_1 + 32 >> 2] + Math_imul($5_1, 20);
  $2_1 = HEAP32[$0_1 + 16 >> 2];
  $4_1 = HEAP32[$0_1 + 12 >> 2];
  $3 = $4_1 + $1_1 | 0;
  label$7 : {
   if (($2_1 | 0) >= ($3 | 0)) {
    break label$7
   }
   if ($2_1) {
    $1_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $1_1 = 8
   }
   $1_1 = ($1_1 | 0) > ($3 | 0) ? $1_1 : $3;
   if (($1_1 | 0) <= ($2_1 | 0)) {
    break label$7
   }
   $2_1 = $16($1_1 << 1);
   $5_1 = HEAP32[$0_1 + 20 >> 2];
   if ($5_1) {
    $1602($2_1, $5_1, HEAP32[$0_1 + 12 >> 2] << 1);
    $17(HEAP32[$0_1 + 20 >> 2]);
   }
   HEAP32[$0_1 + 16 >> 2] = $1_1;
   HEAP32[$0_1 + 20 >> 2] = $2_1;
  }
  HEAP32[$0_1 + 12 >> 2] = $3;
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 20 >> 2] + ($4_1 << 1);
 }
 
 function $384($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = (HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0) - 12 | 0;
  HEAP32[$3 >> 2] = HEAP32[$3 >> 2] - $1_1;
  HEAP32[$0_1 + 24 >> 2] = HEAP32[$0_1 + 24 >> 2] - $2_1;
  HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 12 >> 2] - $1_1;
 }
 
 function $388($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = Math_fround(0), $25_1 = 0, $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = Math_fround(0);
  $13 = global$0;
  $28_1 = $13;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       if (($2_1 | 0) < 2) {
        break label$5
       }
       $8 = $2_1 - 1 | 0;
       $7_1 = $4_1 & 1;
       $20_1 = $7_1 ? $2_1 : $8;
       $4_1 = HEAP32[$0_1 + 44 >> 2];
       $19 = HEAP32[$4_1 >> 2];
       $21_1 = HEAP32[$4_1 + 4 >> 2];
       $4_1 = HEAP32[$0_1 + 36 >> 2];
       if ($4_1 & 1) {
        $10_1 = HEAPF32[$0_1 + 140 >> 2];
        $6_1 = $4_1 >>> 1 | 0;
        $12_1 = $5_1 >= Math_fround(1.0) ? $5_1 : Math_fround(1.0);
        label$7 : {
         if (Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0)) {
          $4_1 = ~~$12_1;
          break label$7;
         }
         $4_1 = -2147483648;
        }
        $16_1 = $4_1;
        $17_1 = $5_1 > $10_1;
        $18_1 = $6_1 & ($4_1 | 0) < 63 & Math_fround($12_1 - Math_fround($4_1 | 0)) <= Math_fround(9.999999747378752e-06) & $10_1 == Math_fround(1.0);
        $14 = Math_imul($20_1, $18_1 ? 6 : $17_1 ? 18 : 12);
        label$9 : {
         if (($18_1 | 0) == 1) {
          $6_1 = $2_1 << 1;
          $4_1 = 3;
          break label$9;
         }
         $6_1 = $17_1 ? $2_1 << 2 : Math_imul($2_1, 3);
         $4_1 = $17_1 ? 5 : 3;
        }
        $27_1 = $6_1;
        $383($0_1, $14, $6_1);
        $6_1 = $13;
        $13 = $2_1 << 3;
        $14 = $6_1 - (Math_imul($13, $4_1) + 15 & -16) | 0;
        global$0 = $14;
        if (($20_1 | 0) > 0) {
         $6_1 = 0;
         while (1) {
          $4_1 = $6_1 + 1 | 0;
          $22_1 = ((($2_1 | 0) != ($4_1 | 0) ? $4_1 : 0) << 3) + $1_1 | 0;
          $6_1 = $6_1 << 3;
          $25_1 = $6_1 + $1_1 | 0;
          $5_1 = Math_fround(HEAPF32[$22_1 >> 2] - HEAPF32[$25_1 >> 2]);
          $9 = Math_fround(HEAPF32[$22_1 + 4 >> 2] - HEAPF32[$25_1 + 4 >> 2]);
          $11_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($9 * $9));
          if ($11_1 > Math_fround(0.0)) {
           $11_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($11_1)));
           $9 = Math_fround($9 * $11_1);
           $5_1 = Math_fround($5_1 * $11_1);
          }
          $6_1 = $6_1 + $14 | 0;
          HEAPF32[$6_1 + 4 >> 2] = -$5_1;
          HEAPF32[$6_1 >> 2] = $9;
          $6_1 = $4_1;
          if (($4_1 | 0) != ($20_1 | 0)) {
           continue
          }
          break;
         };
        }
        if (!$7_1) {
         $6_1 = ($14 + ($2_1 << 3) | 0) - 16 | 0;
         $22_1 = HEAP32[$6_1 + 4 >> 2];
         $4_1 = $14 + ($8 << 3) | 0;
         HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
         HEAP32[$4_1 + 4 >> 2] = $22_1;
        }
        $22_1 = $3 & 16777215;
        $13 = $13 + $14 | 0;
        if ((!$17_1 | $18_1) == 1) {
         $12_1 = $18_1 ? Math_fround(Math_fround($12_1 * Math_fround(.5)) + Math_fround(1.0)) : $10_1;
         if (!$7_1) {
          $5_1 = HEAPF32[$1_1 >> 2];
          $9 = HEAPF32[$14 >> 2];
          $10_1 = HEAPF32[$1_1 + 4 >> 2];
          $11_1 = Math_fround($12_1 * HEAPF32[$14 + 4 >> 2]);
          HEAPF32[$13 + 12 >> 2] = $10_1 - $11_1;
          $9 = Math_fround($12_1 * $9);
          HEAPF32[$13 + 8 >> 2] = $5_1 - $9;
          HEAPF32[$13 + 4 >> 2] = $11_1 + $10_1;
          HEAPF32[$13 >> 2] = $9 + $5_1;
          $4_1 = $8 << 3;
          $6_1 = $4_1 + $1_1 | 0;
          $5_1 = HEAPF32[$6_1 + 4 >> 2];
          $7_1 = $4_1 + $14 | 0;
          $9 = HEAPF32[$7_1 + 4 >> 2];
          $4_1 = $13 + ($8 << 4) | 0;
          $10_1 = HEAPF32[$6_1 >> 2];
          $11_1 = Math_fround($12_1 * HEAPF32[$7_1 >> 2]);
          HEAPF32[$4_1 + 8 >> 2] = $10_1 - $11_1;
          $9 = Math_fround($12_1 * $9);
          HEAPF32[$4_1 + 4 >> 2] = $5_1 + $9;
          HEAPF32[$4_1 >> 2] = $11_1 + $10_1;
          HEAPF32[$4_1 + 12 >> 2] = $5_1 - $9;
         }
         if (($20_1 | 0) <= 0) {
          break label$2
         }
         $25_1 = $18_1 ? 2 : 3;
         $4_1 = HEAP32[$0_1 + 56 >> 2];
         $6_1 = HEAP32[$0_1 + 40 >> 2];
         $7_1 = 0;
         while (1) {
          $8 = $6_1;
          $17_1 = $7_1 + 1 | 0;
          $23_1 = ($17_1 | 0) == ($2_1 | 0);
          $6_1 = $23_1 ? HEAP32[$0_1 + 40 >> 2] : $6_1 + $25_1 | 0;
          $7_1 = $14 + ($7_1 << 3) | 0;
          $23_1 = $23_1 ? 0 : $17_1;
          $29_1 = $23_1 << 3;
          $30 = $29_1 + $14 | 0;
          $5_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2] + HEAPF32[$30 >> 2]) * Math_fround(.5));
          $9 = Math_fround(Math_fround(HEAPF32[$7_1 + 4 >> 2] + HEAPF32[$30 + 4 >> 2]) * Math_fround(.5));
          $10_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($9 * $9));
          if ($10_1 > Math_fround(9.999999974752427e-07)) {
           $24 = $9;
           $9 = Math_fround(Math_fround(1.0) / $10_1);
           $10_1 = $9 > Math_fround(100.0) ? Math_fround(100.0) : $9;
           $9 = Math_fround($24 * $10_1);
           $5_1 = Math_fround($5_1 * $10_1);
          }
          $7_1 = $13 + ($23_1 << 4) | 0;
          $23_1 = $1_1 + $29_1 | 0;
          $10_1 = HEAPF32[$23_1 >> 2];
          $11_1 = Math_fround($12_1 * $5_1);
          HEAPF32[$7_1 >> 2] = $10_1 + $11_1;
          $5_1 = HEAPF32[$23_1 + 4 >> 2];
          HEAPF32[$7_1 + 8 >> 2] = $10_1 - $11_1;
          $9 = Math_fround($12_1 * $9);
          HEAPF32[$7_1 + 12 >> 2] = $5_1 - $9;
          HEAPF32[$7_1 + 4 >> 2] = $9 + $5_1;
          HEAP16[$4_1 + 2 >> 1] = $8;
          HEAP16[$4_1 >> 1] = $6_1;
          label$21 : {
           if ($18_1) {
            HEAP16[$4_1 + 10 >> 1] = $6_1;
            $8 = $8 + 1 | 0;
            HEAP16[$4_1 + 8 >> 1] = $8;
            HEAP16[$4_1 + 6 >> 1] = $6_1 + 1;
            HEAP16[$4_1 + 4 >> 1] = $8;
            $4_1 = $4_1 + 12 | 0;
            HEAP32[$0_1 + 56 >> 2] = $4_1;
            break label$21;
           }
           HEAP16[$4_1 + 20 >> 1] = $6_1;
           HEAP16[$4_1 + 18 >> 1] = $8;
           HEAP16[$4_1 + 16 >> 1] = $8;
           HEAP16[$4_1 + 10 >> 1] = $6_1;
           $7_1 = $6_1 + 1 | 0;
           HEAP16[$4_1 + 22 >> 1] = $7_1;
           HEAP16[$4_1 + 14 >> 1] = $8 + 1;
           HEAP16[$4_1 + 12 >> 1] = $7_1;
           HEAP16[$4_1 + 8 >> 1] = $6_1 + 2;
           $8 = $8 + 2 | 0;
           HEAP16[$4_1 + 6 >> 1] = $8;
           HEAP16[$4_1 + 4 >> 1] = $8;
           $4_1 = $4_1 + 24 | 0;
           HEAP32[$0_1 + 56 >> 2] = $4_1;
          }
          $7_1 = $17_1;
          if (($20_1 | 0) != ($7_1 | 0)) {
           continue
          }
          break;
         };
         break label$2;
        }
        $12_1 = Math_fround(Math_fround($12_1 - $10_1) * Math_fround(.5));
        if (!$7_1) {
         $9 = HEAPF32[$1_1 >> 2];
         $15_1 = HEAPF32[$14 >> 2];
         $5_1 = HEAPF32[$14 + 4 >> 2];
         $11_1 = HEAPF32[$1_1 + 4 >> 2];
         HEAPF32[$13 + 12 >> 2] = Math_fround($12_1 * $5_1) + $11_1;
         HEAPF32[$13 + 8 >> 2] = $9 + Math_fround($12_1 * $15_1);
         $24 = $5_1;
         $5_1 = Math_fround($10_1 + $12_1);
         HEAPF32[$13 + 4 >> 2] = $11_1 + Math_fround($24 * $5_1);
         HEAPF32[$13 >> 2] = $9 + Math_fround($5_1 * $15_1);
         $15_1 = HEAPF32[$14 >> 2];
         HEAPF32[$13 + 20 >> 2] = $11_1 - Math_fround($12_1 * HEAPF32[$14 + 4 >> 2]);
         HEAPF32[$13 + 16 >> 2] = $9 - Math_fround($12_1 * $15_1);
         $15_1 = HEAPF32[$14 >> 2];
         HEAPF32[$13 + 28 >> 2] = $11_1 - Math_fround($5_1 * HEAPF32[$14 + 4 >> 2]);
         HEAPF32[$13 + 24 >> 2] = $9 - Math_fround($5_1 * $15_1);
         $4_1 = $8 << 3;
         $6_1 = $4_1 + $1_1 | 0;
         $9 = HEAPF32[$6_1 + 4 >> 2];
         $7_1 = $4_1 + $14 | 0;
         $15_1 = HEAPF32[$7_1 + 4 >> 2];
         $4_1 = $13 + ($8 << 5) | 0;
         $26_1 = HEAPF32[$7_1 >> 2];
         $31_1 = Math_fround($12_1 * $26_1);
         $11_1 = HEAPF32[$6_1 >> 2];
         HEAPF32[$4_1 + 8 >> 2] = $31_1 + $11_1;
         $24 = Math_fround($5_1 * $15_1);
         HEAPF32[$4_1 + 4 >> 2] = $9 + $24;
         $5_1 = Math_fround($5_1 * $26_1);
         HEAPF32[$4_1 >> 2] = $11_1 + $5_1;
         $15_1 = Math_fround($12_1 * $15_1);
         HEAPF32[$4_1 + 12 >> 2] = $9 + $15_1;
         HEAPF32[$4_1 + 20 >> 2] = $9 - $15_1;
         HEAPF32[$4_1 + 16 >> 2] = $11_1 - $31_1;
         HEAPF32[$4_1 + 28 >> 2] = $9 - $24;
         HEAPF32[$4_1 + 24 >> 2] = $11_1 - $5_1;
        }
        if (($20_1 | 0) <= 0) {
         break label$3
        }
        $15_1 = Math_fround($10_1 + $12_1);
        $4_1 = HEAP32[$0_1 + 56 >> 2];
        $6_1 = HEAP32[$0_1 + 40 >> 2];
        $7_1 = 0;
        while (1) {
         $17_1 = $7_1 + 1 | 0;
         $16_1 = ($17_1 | 0) == ($2_1 | 0);
         $8 = $16_1 ? HEAP32[$0_1 + 40 >> 2] : $6_1 + 4 | 0;
         $7_1 = $14 + ($7_1 << 3) | 0;
         $16_1 = $16_1 ? 0 : $17_1;
         $18_1 = $16_1 << 3;
         $25_1 = $18_1 + $14 | 0;
         $5_1 = Math_fround(Math_fround(HEAPF32[$7_1 >> 2] + HEAPF32[$25_1 >> 2]) * Math_fround(.5));
         $9 = Math_fround(Math_fround(HEAPF32[$7_1 + 4 >> 2] + HEAPF32[$25_1 + 4 >> 2]) * Math_fround(.5));
         $10_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($9 * $9));
         if ($10_1 > Math_fround(9.999999974752427e-07)) {
          $24 = $5_1;
          $5_1 = Math_fround(Math_fround(1.0) / $10_1);
          $10_1 = $5_1 > Math_fround(100.0) ? Math_fround(100.0) : $5_1;
          $5_1 = Math_fround($24 * $10_1);
          $9 = Math_fround($9 * $10_1);
         }
         $7_1 = $13 + ($16_1 << 5) | 0;
         $26_1 = Math_fround($15_1 * $5_1);
         $16_1 = $1_1 + $18_1 | 0;
         $11_1 = HEAPF32[$16_1 >> 2];
         HEAPF32[$7_1 >> 2] = $26_1 + $11_1;
         $10_1 = HEAPF32[$16_1 + 4 >> 2];
         HEAPF32[$7_1 + 24 >> 2] = $11_1 - $26_1;
         $5_1 = Math_fround($12_1 * $5_1);
         HEAPF32[$7_1 + 16 >> 2] = $11_1 - $5_1;
         HEAPF32[$7_1 + 8 >> 2] = $5_1 + $11_1;
         $5_1 = Math_fround($15_1 * $9);
         HEAPF32[$7_1 + 28 >> 2] = $10_1 - $5_1;
         $9 = Math_fround($12_1 * $9);
         HEAPF32[$7_1 + 20 >> 2] = $10_1 - $9;
         HEAPF32[$7_1 + 12 >> 2] = $9 + $10_1;
         HEAPF32[$7_1 + 4 >> 2] = $5_1 + $10_1;
         $16_1 = $8 + 2 | 0;
         HEAP16[$4_1 + 34 >> 1] = $16_1;
         HEAP16[$4_1 + 32 >> 1] = $8 + 3;
         $7_1 = $6_1 + 3 | 0;
         HEAP16[$4_1 + 30 >> 1] = $7_1;
         HEAP16[$4_1 + 28 >> 1] = $7_1;
         $18_1 = $6_1 + 2 | 0;
         HEAP16[$4_1 + 26 >> 1] = $18_1;
         HEAP16[$4_1 + 24 >> 1] = $16_1;
         $7_1 = $8 + 1 | 0;
         HEAP16[$4_1 + 22 >> 1] = $7_1;
         HEAP16[$4_1 + 20 >> 1] = $8;
         HEAP16[$4_1 + 18 >> 1] = $6_1;
         HEAP16[$4_1 + 16 >> 1] = $6_1;
         $6_1 = $6_1 + 1 | 0;
         HEAP16[$4_1 + 14 >> 1] = $6_1;
         HEAP16[$4_1 + 12 >> 1] = $7_1;
         HEAP16[$4_1 + 10 >> 1] = $7_1;
         HEAP16[$4_1 + 8 >> 1] = $16_1;
         HEAP16[$4_1 + 6 >> 1] = $18_1;
         HEAP16[$4_1 + 4 >> 1] = $18_1;
         HEAP16[$4_1 + 2 >> 1] = $6_1;
         HEAP16[$4_1 >> 1] = $7_1;
         $4_1 = $4_1 + 36 | 0;
         $6_1 = $8;
         $7_1 = $17_1;
         if (($20_1 | 0) != ($7_1 | 0)) {
          continue
         }
         break;
        };
        break label$4;
       }
       $383($0_1, Math_imul($20_1, 6), $20_1 << 2);
       if (($20_1 | 0) <= 0) {
        break label$5
       }
       $12_1 = Math_fround($5_1 * Math_fround(.5));
       $4_1 = 0;
       while (1) {
        $6_1 = $4_1 + 1 | 0;
        $8 = ((($2_1 | 0) != ($6_1 | 0) ? $6_1 : 0) << 3) + $1_1 | 0;
        $17_1 = $8 + 4 | 0;
        $4_1 = ($4_1 << 3) + $1_1 | 0;
        $16_1 = $4_1 + 4 | 0;
        $10_1 = HEAPF32[$4_1 >> 2];
        $5_1 = Math_fround(HEAPF32[$8 >> 2] - $10_1);
        $11_1 = HEAPF32[$4_1 + 4 >> 2];
        $9 = Math_fround(HEAPF32[$8 + 4 >> 2] - $11_1);
        $15_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($9 * $9));
        if ($15_1 > Math_fround(0.0)) {
         $15_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($15_1)));
         $5_1 = Math_fround($5_1 * $15_1);
         $9 = Math_fround($9 * $15_1);
        }
        $7_1 = HEAP32[$0_1 + 52 >> 2];
        HEAP32[$7_1 + 8 >> 2] = $19;
        HEAP32[$7_1 + 12 >> 2] = $21_1;
        $5_1 = Math_fround($12_1 * $5_1);
        HEAPF32[$7_1 + 4 >> 2] = $11_1 - $5_1;
        $9 = Math_fround($12_1 * $9);
        HEAPF32[$7_1 >> 2] = $10_1 + $9;
        $7_1 = HEAP32[$0_1 + 52 >> 2];
        HEAP32[$7_1 + 16 >> 2] = $3;
        HEAPF32[$7_1 + 20 >> 2] = $9 + HEAPF32[$8 >> 2];
        $10_1 = HEAPF32[$17_1 >> 2];
        $27_1 = $7_1 + 28 | 0;
        HEAP32[$27_1 >> 2] = $19;
        HEAP32[$27_1 + 4 >> 2] = $21_1;
        HEAPF32[$7_1 + 24 >> 2] = $10_1 - $5_1;
        $7_1 = HEAP32[$0_1 + 52 >> 2];
        HEAP32[$7_1 + 36 >> 2] = $3;
        HEAPF32[$7_1 + 40 >> 2] = HEAPF32[$8 >> 2] - $9;
        $10_1 = HEAPF32[$17_1 >> 2];
        $8 = $7_1 + 48 | 0;
        HEAP32[$8 >> 2] = $19;
        HEAP32[$8 + 4 >> 2] = $21_1;
        HEAPF32[$7_1 + 44 >> 2] = $5_1 + $10_1;
        $8 = HEAP32[$0_1 + 52 >> 2];
        HEAP32[$8 + 56 >> 2] = $3;
        HEAPF32[$8 + 60 >> 2] = HEAPF32[$4_1 >> 2] - $9;
        $9 = HEAPF32[$16_1 >> 2];
        $4_1 = $8 + 68 | 0;
        HEAP32[$4_1 >> 2] = $19;
        HEAP32[$4_1 + 4 >> 2] = $21_1;
        HEAPF32[$8 - -64 >> 2] = $5_1 + $9;
        $4_1 = HEAP32[$0_1 + 52 >> 2];
        HEAP32[$4_1 + 76 >> 2] = $3;
        HEAP32[$0_1 + 52 >> 2] = $4_1 + 80;
        $4_1 = HEAP32[$0_1 + 56 >> 2];
        $8 = HEAP32[$0_1 + 40 >> 2];
        HEAP16[$4_1 + 6 >> 1] = $8;
        HEAP16[$4_1 >> 1] = $8;
        HEAP16[$4_1 + 10 >> 1] = $8 + 3;
        $7_1 = $8 + 2 | 0;
        HEAP16[$4_1 + 8 >> 1] = $7_1;
        HEAP16[$4_1 + 4 >> 1] = $7_1;
        HEAP16[$4_1 + 2 >> 1] = $8 + 1;
        HEAP32[$0_1 + 40 >> 2] = $8 + 4;
        HEAP32[$0_1 + 56 >> 2] = $4_1 + 12;
        $4_1 = $6_1;
        if (($20_1 | 0) != ($4_1 | 0)) {
         continue
        }
        break;
       };
      }
      global$0 = $28_1;
      return;
     }
     HEAP32[$0_1 + 56 >> 2] = $4_1;
    }
    if (($2_1 | 0) <= 0) {
     break label$1
    }
    $4_1 = 0;
    while (1) {
     $1_1 = $13 + ($4_1 << 5) | 0;
     $8 = HEAP32[$1_1 + 4 >> 2];
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $8;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 8 >> 2] = $19;
     HEAP32[$6_1 + 12 >> 2] = $21_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 16 >> 2] = $22_1;
     $8 = $1_1 + 8 | 0;
     $7_1 = HEAP32[$8 + 4 >> 2];
     HEAP32[$6_1 + 20 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$6_1 + 24 >> 2] = $7_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2] + 28 | 0;
     HEAP32[$6_1 >> 2] = $19;
     HEAP32[$6_1 + 4 >> 2] = $21_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 36 >> 2] = $3;
     $8 = $1_1 + 16 | 0;
     $7_1 = HEAP32[$8 + 4 >> 2];
     HEAP32[$6_1 + 40 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$6_1 + 44 >> 2] = $7_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
     HEAP32[$6_1 >> 2] = $19;
     HEAP32[$6_1 + 4 >> 2] = $21_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 56 >> 2] = $3;
     $1_1 = $1_1 + 24 | 0;
     $8 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$6_1 + 60 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$6_1 + 64 >> 2] = $8;
     $1_1 = HEAP32[$0_1 + 52 >> 2] + 68 | 0;
     HEAP32[$1_1 >> 2] = $19;
     HEAP32[$1_1 + 4 >> 2] = $21_1;
     $1_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$1_1 + 76 >> 2] = $22_1;
     HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   if (!$18_1) {
    if (($2_1 | 0) <= 0) {
     break label$1
    }
    $4_1 = 0;
    while (1) {
     $8 = ($4_1 << 3) + $1_1 | 0;
     $7_1 = HEAP32[$8 + 4 >> 2];
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $7_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 8 >> 2] = $19;
     HEAP32[$6_1 + 12 >> 2] = $21_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 16 >> 2] = $3;
     $8 = $13 + ($4_1 << 4) | 0;
     $7_1 = HEAP32[$8 + 4 >> 2];
     HEAP32[$6_1 + 20 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$6_1 + 24 >> 2] = $7_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2] + 28 | 0;
     HEAP32[$6_1 >> 2] = $19;
     HEAP32[$6_1 + 4 >> 2] = $21_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 36 >> 2] = $22_1;
     $8 = $8 + 8 | 0;
     $7_1 = HEAP32[$8 + 4 >> 2];
     HEAP32[$6_1 + 40 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$6_1 + 44 >> 2] = $7_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
     HEAP32[$6_1 >> 2] = $19;
     HEAP32[$6_1 + 4 >> 2] = $21_1;
     $6_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$6_1 + 56 >> 2] = $22_1;
     HEAP32[$0_1 + 52 >> 2] = $6_1 + 60;
     $4_1 = $4_1 + 1 | 0;
     if (($4_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
    break label$1;
   }
   if (($2_1 | 0) <= 0) {
    break label$1
   }
   $1_1 = HEAP32[HEAP32[$0_1 + 44 >> 2] + 496 >> 2] + ($16_1 << 4) | 0;
   $19 = HEAP32[$1_1 + 12 >> 2];
   $8 = HEAP32[$1_1 + 8 >> 2];
   $7_1 = HEAP32[$1_1 + 4 >> 2];
   $17_1 = HEAP32[$1_1 >> 2];
   $4_1 = 0;
   while (1) {
    $1_1 = $13 + ($4_1 << 4) | 0;
    $16_1 = HEAP32[$1_1 + 4 >> 2];
    $6_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $16_1;
    $6_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$6_1 + 8 >> 2] = $17_1;
    HEAP32[$6_1 + 12 >> 2] = $7_1;
    $6_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$6_1 + 16 >> 2] = $3;
    $1_1 = $1_1 + 8 | 0;
    $16_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$6_1 + 20 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 24 >> 2] = $16_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 32 >> 2] = $19;
    HEAP32[$1_1 + 28 >> 2] = $8;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 36 >> 2] = $3;
    HEAP32[$0_1 + 52 >> 2] = $1_1 + 40;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + ($27_1 & 65535);
  global$0 = $28_1;
 }
 
 function $389($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = Math_fround(0);
  $11_1 = global$0;
  $19 = $11_1;
  if (($2_1 | 0) >= 3) {
   $5_1 = HEAP32[$0_1 + 44 >> 2];
   $16_1 = HEAP32[$5_1 >> 2];
   $17_1 = HEAP32[$5_1 + 4 >> 2];
   label$2 : {
    label$3 : {
     if (HEAPU8[$0_1 + 36 | 0] & 4) {
      $15_1 = HEAPF32[$0_1 + 140 >> 2];
      $18_1 = $2_1 << 1;
      $383($0_1, Math_imul($2_1, 9) - 6 | 0, $18_1);
      $12_1 = HEAP32[$0_1 + 40 >> 2];
      if (($2_1 | 0) >= 3) {
       $4_1 = HEAP32[$0_1 + 56 >> 2];
       $5_1 = 2;
       while (1) {
        HEAP16[$4_1 >> 1] = $12_1;
        $9 = $12_1 + ($5_1 << 1) | 0;
        HEAP16[$4_1 + 4 >> 1] = $9;
        HEAP16[$4_1 + 2 >> 1] = $9 - 2;
        $4_1 = $4_1 + 6 | 0;
        $5_1 = $5_1 + 1 | 0;
        if (($5_1 | 0) != ($2_1 | 0)) {
         continue
        }
        break;
       };
       HEAP32[$0_1 + 56 >> 2] = $4_1;
      }
      $9 = $2_1 - 1 | 0;
      $11_1 = $11_1 - (($2_1 << 3) + 15 & -16) | 0;
      global$0 = $11_1;
      if (($2_1 | 0) <= 0) {
       break label$3
      }
      $5_1 = $9;
      $4_1 = 0;
      while (1) {
       $6_1 = ($4_1 << 3) + $1_1 | 0;
       $5_1 = $5_1 << 3;
       $13 = $5_1 + $1_1 | 0;
       $7_1 = Math_fround(HEAPF32[$6_1 >> 2] - HEAPF32[$13 >> 2]);
       $8 = Math_fround(HEAPF32[$6_1 + 4 >> 2] - HEAPF32[$13 + 4 >> 2]);
       $10_1 = Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8 * $8));
       if ($10_1 > Math_fround(0.0)) {
        $10_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_sqrt($10_1)));
        $8 = Math_fround($8 * $10_1);
        $7_1 = Math_fround($7_1 * $10_1);
       }
       $5_1 = $5_1 + $11_1 | 0;
       HEAPF32[$5_1 + 4 >> 2] = -$7_1;
       HEAPF32[$5_1 >> 2] = $8;
       $5_1 = $4_1;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
      break label$3;
     }
     $383($0_1, Math_imul($2_1, 3) - 6 | 0, $2_1);
     if (($2_1 | 0) > 0) {
      while (1) {
       $9 = ($4_1 << 3) + $1_1 | 0;
       $12_1 = HEAP32[$9 + 4 >> 2];
       $5_1 = HEAP32[$0_1 + 52 >> 2];
       HEAP32[$5_1 >> 2] = HEAP32[$9 >> 2];
       HEAP32[$5_1 + 4 >> 2] = $12_1;
       $5_1 = HEAP32[$0_1 + 52 >> 2];
       HEAP32[$5_1 + 8 >> 2] = $16_1;
       HEAP32[$5_1 + 12 >> 2] = $17_1;
       $5_1 = HEAP32[$0_1 + 52 >> 2];
       HEAP32[$5_1 + 16 >> 2] = $3;
       HEAP32[$0_1 + 52 >> 2] = $5_1 + 20;
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      }
     }
     if (($2_1 | 0) >= 3) {
      $1_1 = HEAP32[$0_1 + 40 >> 2];
      $4_1 = HEAP32[$0_1 + 56 >> 2];
      $5_1 = 2;
      while (1) {
       HEAP16[$4_1 >> 1] = $1_1;
       $3 = $1_1 + $5_1 | 0;
       HEAP16[$4_1 + 4 >> 1] = $3;
       HEAP16[$4_1 + 2 >> 1] = $3 - 1;
       $3 = $4_1 + 6 | 0;
       $4_1 = $3;
       $5_1 = $5_1 + 1 | 0;
       if (($5_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
      HEAP32[$0_1 + 56 >> 2] = $3;
     }
     $4_1 = $2_1 & 65535;
     $0_1 = $0_1 + 40 | 0;
     break label$2;
    }
    if (($2_1 | 0) > 0) {
     $20_1 = $3 & 16777215;
     $13 = $12_1 + 1 | 0;
     $15_1 = Math_fround($15_1 * Math_fround(.5));
     $4_1 = 0;
     $5_1 = $9;
     while (1) {
      $9 = $5_1;
      $6_1 = $11_1 + ($5_1 << 3) | 0;
      $5_1 = $4_1;
      $14 = $4_1 << 3;
      $4_1 = $14 + $11_1 | 0;
      $7_1 = Math_fround(Math_fround(HEAPF32[$6_1 >> 2] + HEAPF32[$4_1 >> 2]) * Math_fround(.5));
      $8 = Math_fround(Math_fround(HEAPF32[$6_1 + 4 >> 2] + HEAPF32[$4_1 + 4 >> 2]) * Math_fround(.5));
      $10_1 = Math_fround(Math_fround($7_1 * $7_1) + Math_fround($8 * $8));
      label$16 : {
       if (!($10_1 > Math_fround(9.999999974752427e-07))) {
        break label$16
       }
       $21_1 = $7_1;
       $7_1 = Math_fround(Math_fround(1.0) / $10_1);
       $10_1 = $7_1 > Math_fround(100.0) ? Math_fround(100.0) : $7_1;
       $7_1 = Math_fround($21_1 * $10_1);
       $8 = Math_fround($8 * $10_1);
      }
      $4_1 = HEAP32[$0_1 + 52 >> 2];
      $6_1 = $1_1 + $14 | 0;
      $7_1 = Math_fround($15_1 * $7_1);
      HEAPF32[$4_1 >> 2] = HEAPF32[$6_1 >> 2] - $7_1;
      $10_1 = HEAPF32[$6_1 + 4 >> 2];
      HEAP32[$4_1 + 8 >> 2] = $16_1;
      HEAP32[$4_1 + 12 >> 2] = $17_1;
      $8 = Math_fround($15_1 * $8);
      HEAPF32[$4_1 + 4 >> 2] = $10_1 - $8;
      $4_1 = HEAP32[$0_1 + 52 >> 2];
      HEAP32[$4_1 + 16 >> 2] = $3;
      HEAPF32[$4_1 + 20 >> 2] = $7_1 + HEAPF32[$6_1 >> 2];
      $7_1 = HEAPF32[$6_1 + 4 >> 2];
      $6_1 = $4_1 + 28 | 0;
      HEAP32[$6_1 >> 2] = $16_1;
      HEAP32[$6_1 + 4 >> 2] = $17_1;
      HEAPF32[$4_1 + 24 >> 2] = $8 + $7_1;
      $4_1 = HEAP32[$0_1 + 52 >> 2];
      HEAP32[$4_1 + 36 >> 2] = $20_1;
      HEAP32[$0_1 + 52 >> 2] = $4_1 + 40;
      $4_1 = HEAP32[$0_1 + 56 >> 2];
      $6_1 = $5_1 << 1;
      $14 = $6_1 + $12_1 | 0;
      HEAP16[$4_1 + 10 >> 1] = $14;
      HEAP16[$4_1 + 8 >> 1] = $6_1 + $13;
      $9 = $9 << 1;
      $6_1 = $9 + $13 | 0;
      HEAP16[$4_1 + 6 >> 1] = $6_1;
      HEAP16[$4_1 + 4 >> 1] = $6_1;
      HEAP16[$4_1 + 2 >> 1] = $9 + $12_1;
      HEAP16[$4_1 >> 1] = $14;
      HEAP32[$0_1 + 56 >> 2] = $4_1 + 12;
      $4_1 = $5_1 + 1 | 0;
      if (($4_1 | 0) != ($2_1 | 0)) {
       continue
      }
      break;
     };
    }
    $4_1 = $18_1 & 65534;
    $0_1 = $0_1 + 40 | 0;
   }
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + $4_1;
  }
  global$0 = $19;
 }
 
 function $390($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  if ($2_1 <= Math_fround(0.0)) {
   $4_1 = HEAP32[$0_1 + 84 >> 2];
   $3 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($4_1 | 0) != ($3 | 0)) {
     break label$2
    }
    $5_1 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
    $4_1 = $4_1 + 1 | 0;
    $4_1 = ($4_1 | 0) < ($5_1 | 0) ? $5_1 : $4_1;
    if (($3 | 0) >= ($4_1 | 0)) {
     break label$2
    }
    $3 = $16($4_1 << 3);
    $5_1 = HEAP32[$0_1 + 92 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $4_1;
    HEAP32[$0_1 + 92 >> 2] = $3;
   }
   $3 = HEAP32[$1_1 + 4 >> 2];
   $4_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $3;
   HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
   return;
  }
  $5_1 = HEAP32[$0_1 + 44 >> 2];
  $9 = Math_fround($2_1 + Math_fround(.9999989867210388));
  label$7 : {
   if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
    $8 = ~~$9;
    break label$7;
   }
   $8 = -2147483648;
  }
  label$9 : {
   if (($8 | 0) <= 63) {
    $5_1 = HEAPU8[($5_1 + $8 | 0) + 432 | 0];
    break label$9;
   }
   $9 = HEAPF32[$5_1 + 20 >> 2];
   $9 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / $1590(Math_fround(Math_fround(1.0) - Math_fround(($2_1 > $9 ? $9 : $2_1) / $2_1))))));
   label$11 : {
    if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$9;
     break label$11;
    }
    $5_1 = -2147483648;
   }
   $5_1 = ($5_1 + 1 | 0) / 2 << 1;
   $5_1 = ($5_1 | 0) >= 512 ? 512 : $5_1;
   $5_1 = ($5_1 | 0) <= 4 ? 4 : $5_1;
  }
  $7_1 = 48 / ($5_1 >>> 0) | 0;
  $8 = $4_1 - $3 | 0;
  $5_1 = $8 >> 31;
  $5_1 = ($5_1 ^ $8) - $5_1 | 0;
  $8 = ($7_1 | 0) >= 12 ? 12 : $7_1;
  $8 = ($8 | 0) <= 1 ? 1 : $8;
  label$13 : {
   if ($8 >>> 0 < 2) {
    $7_1 = $5_1 + 1 | 0;
    $5_1 = 1;
    break label$13;
   }
   $6_1 = $5_1;
   $5_1 = ($5_1 >>> 0) / ($8 >>> 0) | 0;
   $6_1 = $6_1 - Math_imul($5_1, $8) | 0;
   if (!$6_1) {
    $13 = ($6_1 | 0) != 0;
    $7_1 = $5_1 + 1 | 0;
    $5_1 = $8;
    break label$13;
   }
   $7_1 = $5_1 + 2 | 0;
   if (($3 | 0) == ($4_1 | 0)) {
    $13 = 1;
    $5_1 = $8;
    break label$13;
   }
   $13 = 1;
   $5_1 = $8 + (($8 - $6_1 | 0) / -2 | 0) | 0;
  }
  $6_1 = HEAP32[$0_1 + 88 >> 2];
  $10_1 = HEAP32[$0_1 + 84 >> 2];
  $7_1 = $10_1 + $7_1 | 0;
  label$17 : {
   if (($6_1 | 0) >= ($7_1 | 0)) {
    break label$17
   }
   $11_1 = $6_1 ? $6_1 + (($6_1 | 0) / 2 | 0) | 0 : 8;
   $11_1 = ($7_1 | 0) < ($11_1 | 0) ? $11_1 : $7_1;
   if (($6_1 | 0) >= ($11_1 | 0)) {
    break label$17
   }
   $6_1 = $16($11_1 << 3);
   $12_1 = HEAP32[$0_1 + 92 >> 2];
   if ($12_1) {
    $1602($6_1, $12_1, HEAP32[$0_1 + 84 >> 2] << 3);
    $17(HEAP32[$0_1 + 92 >> 2]);
   }
   HEAP32[$0_1 + 88 >> 2] = $11_1;
   HEAP32[$0_1 + 92 >> 2] = $6_1;
  }
  HEAP32[$0_1 + 84 >> 2] = $7_1;
  $7_1 = $3;
  if ($3 >>> 0 >= 48) {
   $6_1 = ($3 | 0) % 48 | 0;
   $7_1 = ($6_1 | 0) < 0 ? $6_1 + 48 | 0 : $6_1;
  }
  $10_1 = HEAP32[$0_1 + 92 >> 2] + ($10_1 << 3) | 0;
  $12_1 = HEAP32[$0_1 + 44 >> 2];
  label$22 : {
   if (($3 | 0) > ($4_1 | 0)) {
    $6_1 = $3;
    while (1) {
     $11_1 = $5_1;
     $3 = ($7_1 | 0) < 0 ? $7_1 + 48 | 0 : $7_1;
     $5_1 = $12_1 + ($3 << 3) | 0;
     $9 = HEAPF32[$5_1 + 48 >> 2];
     HEAPF32[$10_1 >> 2] = Math_fround(HEAPF32[$5_1 + 44 >> 2] * $2_1) + HEAPF32[$1_1 >> 2];
     HEAPF32[$10_1 + 4 >> 2] = Math_fround($9 * $2_1) + HEAPF32[$1_1 + 4 >> 2];
     $5_1 = $8;
     $7_1 = $3 - $11_1 | 0;
     $10_1 = $10_1 + 8 | 0;
     $3 = $10_1;
     $6_1 = $6_1 - $11_1 | 0;
     if (($6_1 | 0) >= ($4_1 | 0)) {
      continue
     }
     break;
    };
    break label$22;
   }
   $6_1 = $3;
   while (1) {
    $11_1 = $5_1;
    $3 = ($7_1 | 0) > 47 ? $7_1 - 48 | 0 : $7_1;
    $5_1 = $12_1 + ($3 << 3) | 0;
    $9 = HEAPF32[$5_1 + 48 >> 2];
    HEAPF32[$10_1 >> 2] = Math_fround(HEAPF32[$5_1 + 44 >> 2] * $2_1) + HEAPF32[$1_1 >> 2];
    HEAPF32[$10_1 + 4 >> 2] = Math_fround($9 * $2_1) + HEAPF32[$1_1 + 4 >> 2];
    $5_1 = $8;
    $7_1 = $3 + $11_1 | 0;
    $10_1 = $10_1 + 8 | 0;
    $3 = $10_1;
    $6_1 = $6_1 + $11_1 | 0;
    if (($6_1 | 0) <= ($4_1 | 0)) {
     continue
    }
    break;
   };
  }
  if ($13) {
   $5_1 = HEAP32[$0_1 + 44 >> 2];
   $0_1 = ($4_1 | 0) % 48 | 0;
   $0_1 = $5_1 + ((($0_1 | 0) < 0 ? $0_1 + 48 | 0 : $0_1) << 3) | 0;
   $9 = HEAPF32[$0_1 + 48 >> 2];
   HEAPF32[$3 >> 2] = Math_fround(HEAPF32[$0_1 + 44 >> 2] * $2_1) + HEAPF32[$1_1 >> 2];
   HEAPF32[$3 + 4 >> 2] = Math_fround($9 * $2_1) + HEAPF32[$1_1 + 4 >> 2];
  }
 }
 
 function $391($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0;
  $6_1 = HEAP32[$0_1 + 84 >> 2];
  if ($2_1 <= Math_fround(0.0)) {
   $5_1 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($5_1 | 0) != ($6_1 | 0)) {
     break label$2
    }
    $8 = $6_1 + 1 | 0;
    $7_1 = $5_1;
    if ($5_1) {
     $6_1 = $5_1 + (($5_1 | 0) / 2 | 0) | 0
    } else {
     $6_1 = 8
    }
    $5_1 = ($6_1 | 0) > ($8 | 0) ? $6_1 : $8;
    if (($7_1 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    $6_1 = $16($5_1 << 3);
    $8 = HEAP32[$0_1 + 92 >> 2];
    if ($8) {
     $1602($6_1, $8, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $5_1;
    HEAP32[$0_1 + 92 >> 2] = $6_1;
   }
   $6_1 = HEAP32[$1_1 + 4 >> 2];
   $5_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
   return;
  }
  $6_1 = ($5_1 + $6_1 | 0) + 1 | 0;
  if (($6_1 | 0) > HEAP32[$0_1 + 88 >> 2]) {
   $8 = $16($6_1 << 3);
   $7_1 = HEAP32[$0_1 + 92 >> 2];
   if ($7_1) {
    $1602($8, $7_1, HEAP32[$0_1 + 84 >> 2] << 3);
    $17(HEAP32[$0_1 + 92 >> 2]);
   }
   HEAP32[$0_1 + 88 >> 2] = $6_1;
   HEAP32[$0_1 + 92 >> 2] = $8;
  }
  if (($5_1 | 0) >= 0) {
   $4_1 = Math_fround($4_1 - $3);
   $11_1 = Math_fround($5_1 | 0);
   $6_1 = 0;
   while (1) {
    $8 = $6_1;
    $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($6_1 | 0) / $11_1) * $4_1) + $3);
    $12_1 = Math_fround(Math_fround($1688($10_1) * $2_1) + HEAPF32[$1_1 + 4 >> 2]);
    $10_1 = Math_fround(Math_fround($1601($10_1) * $2_1) + HEAPF32[$1_1 >> 2]);
    $7_1 = HEAP32[$0_1 + 84 >> 2];
    $6_1 = HEAP32[$0_1 + 88 >> 2];
    label$10 : {
     if (($7_1 | 0) != ($6_1 | 0)) {
      break label$10
     }
     $9 = $7_1 + 1 | 0;
     $13 = $6_1;
     if ($6_1) {
      $7_1 = $6_1 + (($6_1 | 0) / 2 | 0) | 0
     } else {
      $7_1 = 8
     }
     $6_1 = ($7_1 | 0) > ($9 | 0) ? $7_1 : $9;
     if (($13 | 0) >= ($6_1 | 0)) {
      break label$10
     }
     $7_1 = $16($6_1 << 3);
     $9 = HEAP32[$0_1 + 92 >> 2];
     if ($9) {
      $1602($7_1, $9, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $6_1;
     HEAP32[$0_1 + 92 >> 2] = $7_1;
    }
    $6_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAPF32[$6_1 + 4 >> 2] = $12_1;
    HEAPF32[$6_1 >> 2] = $10_1;
    HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
    $6_1 = $8 + 1 | 0;
    if (($5_1 | 0) != ($8 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $392($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  if ($2_1 <= Math_fround(0.0)) {
   $4_1 = HEAP32[$0_1 + 84 >> 2];
   $3 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($4_1 | 0) != ($3 | 0)) {
     break label$2
    }
    $5_1 = $4_1 + 1 | 0;
    $6_1 = $3;
    if ($3) {
     $4_1 = $3 + (($3 | 0) / 2 | 0) | 0
    } else {
     $4_1 = 8
    }
    $3 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
    if (($6_1 | 0) >= ($3 | 0)) {
     break label$2
    }
    $4_1 = $16($3 << 3);
    $5_1 = HEAP32[$0_1 + 92 >> 2];
    if ($5_1) {
     $1602($4_1, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $3;
    HEAP32[$0_1 + 92 >> 2] = $4_1;
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $3 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$3 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $4_1;
   HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
   return;
  }
  $390($0_1, $1_1, $2_1, $3 << 2, $4_1 << 2);
 }
 
 function $393($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = 0, $14 = 0;
  folding_inner0 : {
   if ($2_1 <= Math_fround(0.0)) {
    $6_1 = HEAP32[$0_1 + 84 >> 2];
    $5_1 = HEAP32[$0_1 + 88 >> 2];
    label$2 : {
     if (($6_1 | 0) != ($5_1 | 0)) {
      break label$2
     }
     $8 = $6_1 + 1 | 0;
     $10_1 = $5_1;
     if ($5_1) {
      $6_1 = $5_1 + (($5_1 | 0) / 2 | 0) | 0
     } else {
      $6_1 = 8
     }
     $5_1 = ($6_1 | 0) > ($8 | 0) ? $6_1 : $8;
     if (($10_1 | 0) >= ($5_1 | 0)) {
      break label$2
     }
     $6_1 = $16($5_1 << 3);
     $8 = HEAP32[$0_1 + 92 >> 2];
     if ($8) {
      $1602($6_1, $8, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $5_1;
     HEAP32[$0_1 + 92 >> 2] = $6_1;
    }
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    $5_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $6_1;
    break folding_inner0;
   }
   if (($5_1 | 0) > 0) {
    $391($0_1, $1_1, $2_1, $3, $4_1, $5_1);
    return;
   }
   $5_1 = HEAP32[$0_1 + 44 >> 2];
   label$7 : {
    if ($2_1 <= HEAPF32[$5_1 + 428 >> 2]) {
     $7_1 = Math_fround(Math_fround($3 * Math_fround(48.0)) / Math_fround(6.2831854820251465));
     $9 = Math_fround($4_1 * Math_fround(48.0));
     $8 = $3 > $4_1;
     label$9 : {
      if ($8) {
       label$11 : {
        if (!($7_1 >= Math_fround(0.0))) {
         if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
          $5_1 = ~~$7_1
         } else {
          $5_1 = -2147483648
         }
         if ($7_1 != Math_fround($5_1 | 0)) {
          break label$11
         }
        }
        $12_1 = Math_fround(~~$7_1 | 0);
        if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
         break label$9
        }
        $12_1 = Math_fround(-2147483648.0);
        break label$9;
       }
       $12_1 = Math_fround($5_1 - 1 | 0);
       break label$9;
      }
      $12_1 = Math_fround(Math_ceil($7_1));
     }
     $7_1 = $12_1;
     label$16 : {
      if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$7_1;
       break label$16;
      }
      $5_1 = -2147483648;
     }
     $7_1 = Math_fround($9 / Math_fround(6.2831854820251465));
     if ($8) {
      $7_1 = Math_fround(Math_ceil($7_1))
     } else {
      label$20 : {
       label$21 : {
        if (!($7_1 >= Math_fround(0.0))) {
         if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
          $6_1 = ~~$7_1
         } else {
          $6_1 = -2147483648
         }
         if ($7_1 != Math_fround($6_1 | 0)) {
          break label$21
         }
        }
        $6_1 = ~~$7_1;
        if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
         break label$20
        }
        $6_1 = -2147483648;
        break label$20;
       }
       $6_1 = $6_1 - 1 | 0;
      }
      $7_1 = Math_fround($6_1 | 0);
     }
     label$26 : {
      if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
       $6_1 = ~~$7_1;
       break label$26;
      }
      $6_1 = -2147483648;
     }
     $9 = Math_fround(Math_fround($6_1 | 0) * Math_fround(3.1415927410125732));
     $9 = Math_fround($4_1 - Math_fround(Math_fround($9 + $9) / Math_fround(48.0)));
     $7_1 = Math_fround(Math_fround($5_1 | 0) * Math_fround(3.1415927410125732));
     $7_1 = Math_fround(Math_fround(Math_fround($7_1 + $7_1) / Math_fround(48.0)) - $3);
     $13 = $8 ? $5_1 - $6_1 | 0 : $6_1 - $5_1 | 0;
     $8 = HEAP32[$0_1 + 84 >> 2] + ((($9 != Math_fround(0.0)) + ($7_1 != Math_fround(0.0) ? 2 : 1) | 0) + (($13 | 0) > 0 ? $13 : 0) | 0) | 0;
     if (($8 | 0) > HEAP32[$0_1 + 88 >> 2]) {
      $10_1 = $16($8 << 3);
      $11_1 = HEAP32[$0_1 + 92 >> 2];
      if ($11_1) {
       $1602($10_1, $11_1, HEAP32[$0_1 + 84 >> 2] << 3);
       $17(HEAP32[$0_1 + 92 >> 2]);
      }
      HEAP32[$0_1 + 88 >> 2] = $8;
      HEAP32[$0_1 + 92 >> 2] = $10_1;
     }
     if ($7_1 != Math_fround(0.0)) {
      $7_1 = Math_fround(Math_fround($1688($3) * $2_1) + HEAPF32[$1_1 + 4 >> 2]);
      $3 = Math_fround(Math_fround($1601($3) * $2_1) + HEAPF32[$1_1 >> 2]);
      $10_1 = HEAP32[$0_1 + 84 >> 2];
      $8 = HEAP32[$0_1 + 88 >> 2];
      label$31 : {
       if (($10_1 | 0) != ($8 | 0)) {
        break label$31
       }
       $11_1 = $10_1 + 1 | 0;
       $14 = $8;
       if ($8) {
        $10_1 = $8 + (($8 | 0) / 2 | 0) | 0
       } else {
        $10_1 = 8
       }
       $8 = ($10_1 | 0) > ($11_1 | 0) ? $10_1 : $11_1;
       if (($14 | 0) >= ($8 | 0)) {
        break label$31
       }
       $10_1 = $16($8 << 3);
       $11_1 = HEAP32[$0_1 + 92 >> 2];
       if ($11_1) {
        $1602($10_1, $11_1, HEAP32[$0_1 + 84 >> 2] << 3);
        $17(HEAP32[$0_1 + 92 >> 2]);
       }
       HEAP32[$0_1 + 88 >> 2] = $8;
       HEAP32[$0_1 + 92 >> 2] = $10_1;
      }
      $8 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
      HEAPF32[$8 + 4 >> 2] = $7_1;
      HEAPF32[$8 >> 2] = $3;
      HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
     }
     if (($13 | 0) > 0) {
      $390($0_1, $1_1, $2_1, $5_1, $6_1)
     }
     if ($9 == Math_fround(0.0)) {
      break label$7
     }
     $3 = Math_fround(Math_fround($1688($4_1) * $2_1) + HEAPF32[$1_1 + 4 >> 2]);
     $2_1 = Math_fround(Math_fround($1601($4_1) * $2_1) + HEAPF32[$1_1 >> 2]);
     $5_1 = HEAP32[$0_1 + 84 >> 2];
     $1_1 = HEAP32[$0_1 + 88 >> 2];
     label$36 : {
      if (($5_1 | 0) != ($1_1 | 0)) {
       break label$36
      }
      $5_1 = $5_1 + 1 | 0;
      $8 = $1_1;
      if ($1_1) {
       $6_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
      } else {
       $6_1 = 8
      }
      $1_1 = ($5_1 | 0) < ($6_1 | 0) ? $6_1 : $5_1;
      if (($8 | 0) >= ($1_1 | 0)) {
       break label$36
      }
      $5_1 = $16($1_1 << 3);
      $6_1 = HEAP32[$0_1 + 92 >> 2];
      if ($6_1) {
       $1602($5_1, $6_1, HEAP32[$0_1 + 84 >> 2] << 3);
       $17(HEAP32[$0_1 + 92 >> 2]);
      }
      HEAP32[$0_1 + 88 >> 2] = $1_1;
      HEAP32[$0_1 + 92 >> 2] = $5_1;
     }
     $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
     HEAPF32[$1_1 + 4 >> 2] = $3;
     HEAPF32[$1_1 >> 2] = $2_1;
     break folding_inner0;
    }
    $7_1 = Math_fround($2_1 + Math_fround(.9999989867210388));
    label$40 : {
     if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
      $6_1 = ~~$7_1;
      break label$40;
     }
     $6_1 = -2147483648;
    }
    $7_1 = Math_fround(Math_abs(Math_fround($4_1 - $3)));
    if (($6_1 | 0) <= 63) {
     $6_1 = HEAPU8[($5_1 + $6_1 | 0) + 432 | 0]
    } else {
     $9 = HEAPF32[$5_1 + 20 >> 2];
     $9 = Math_fround(Math_ceil(Math_fround(Math_fround(3.1415927410125732) / $1590(Math_fround(Math_fround(1.0) - Math_fround(($2_1 > $9 ? $9 : $2_1) / $2_1))))));
     label$44 : {
      if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$9;
       break label$44;
      }
      $5_1 = -2147483648;
     }
     $5_1 = ($5_1 + 1 | 0) / 2 << 1;
     $5_1 = ($5_1 | 0) >= 512 ? 512 : $5_1;
     $6_1 = ($5_1 | 0) <= 4 ? 4 : $5_1;
    }
    $9 = Math_fround(Math_fround(6.2831854820251465) / $7_1);
    label$46 : {
     if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
      $5_1 = ~~$9;
      break label$46;
     }
     $5_1 = -2147483648;
    }
    $7_1 = Math_fround(Math_ceil(Math_fround(Math_fround($7_1 * Math_fround($6_1 | 0)) / Math_fround(6.2831854820251465))));
    label$48 : {
     if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
      $6_1 = ~~$7_1;
      break label$48;
     }
     $6_1 = -2147483648;
    }
    $391($0_1, $1_1, $2_1, $3, $4_1, ($5_1 | 0) < ($6_1 | 0) ? $6_1 : $5_1);
   }
   return;
  }
  HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
 }
 
 function $394($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0;
  $5_1 = (HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0) - 8 | 0;
  $10_1 = HEAPF32[$5_1 + 4 >> 2];
  $11_1 = HEAPF32[$5_1 >> 2];
  if (!$4_1) {
   $395($0_1 + 84 | 0, $11_1, $10_1, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[$3 >> 2], HEAPF32[$3 + 4 >> 2], HEAPF32[HEAP32[$0_1 + 44 >> 2] + 16 >> 2], 0);
   return;
  }
  if (($4_1 | 0) > 0) {
   $17_1 = Math_fround(Math_fround(1.0) / Math_fround($4_1 | 0));
   $5_1 = 1;
   while (1) {
    $12_1 = $5_1;
    $6_1 = Math_fround($17_1 * Math_fround($5_1 | 0));
    $13 = Math_fround($6_1 * Math_fround($6_1 * $6_1));
    $8 = Math_fround(Math_fround(1.0) - $6_1);
    $14 = Math_fround($8 * Math_fround(3.0));
    $15_1 = Math_fround($6_1 * Math_fround($6_1 * $14));
    $16_1 = Math_fround($8 * Math_fround($8 * $8));
    $6_1 = Math_fround($6_1 * Math_fround($8 * $14));
    $8 = Math_fround(Math_fround($13 * HEAPF32[$3 + 4 >> 2]) + Math_fround(Math_fround($15_1 * HEAPF32[$2_1 + 4 >> 2]) + Math_fround(Math_fround($16_1 * $10_1) + Math_fround($6_1 * HEAPF32[$1_1 + 4 >> 2]))));
    $6_1 = Math_fround(Math_fround($13 * HEAPF32[$3 >> 2]) + Math_fround(Math_fround($15_1 * HEAPF32[$2_1 >> 2]) + Math_fround(Math_fround($16_1 * $11_1) + Math_fround($6_1 * HEAPF32[$1_1 >> 2]))));
    $7_1 = HEAP32[$0_1 + 84 >> 2];
    $5_1 = HEAP32[$0_1 + 88 >> 2];
    label$4 : {
     if (($7_1 | 0) != ($5_1 | 0)) {
      break label$4
     }
     $9 = $7_1 + 1 | 0;
     $18_1 = $5_1;
     if ($5_1) {
      $7_1 = $5_1 + (($5_1 | 0) / 2 | 0) | 0
     } else {
      $7_1 = 8
     }
     $5_1 = ($7_1 | 0) > ($9 | 0) ? $7_1 : $9;
     if (($18_1 | 0) >= ($5_1 | 0)) {
      break label$4
     }
     $7_1 = $16($5_1 << 3);
     $9 = HEAP32[$0_1 + 92 >> 2];
     if ($9) {
      $1602($7_1, $9, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $5_1;
     HEAP32[$0_1 + 92 >> 2] = $7_1;
    }
    $5_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAPF32[$5_1 + 4 >> 2] = $8;
    HEAPF32[$5_1 >> 2] = $6_1;
    HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
    $5_1 = $12_1 + 1 | 0;
    if (($4_1 | 0) != ($12_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $395($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9, $10_1) {
  var $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0);
  while (1) {
   label$1 : {
    $13 = Math_fround($8 - $2_1);
    $14 = Math_fround($7_1 - $1_1);
    $11_1 = Math_fround(Math_fround(Math_fround($3 - $7_1) * $13) - Math_fround($14 * Math_fround($4_1 - $8)));
    $16_1 = $11_1 >= Math_fround(0.0) ? $11_1 : Math_fround(-$11_1);
    $11_1 = Math_fround(Math_fround(Math_fround($5_1 - $7_1) * $13) - Math_fround($14 * Math_fround($6_1 - $8)));
    $11_1 = Math_fround($16_1 + ($11_1 >= Math_fround(0.0) ? $11_1 : Math_fround(-$11_1)));
    if (Math_fround($11_1 * $11_1) < Math_fround(Math_fround(Math_fround($14 * $14) + Math_fround($13 * $13)) * $9)) {
     $12_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP32[$0_1 + 4 >> 2];
     label$4 : {
      if (($12_1 | 0) != ($10_1 | 0)) {
       break label$4
      }
      $15_1 = $12_1 + 1 | 0;
      $19 = $10_1;
      if ($10_1) {
       $12_1 = $10_1 + (($10_1 | 0) / 2 | 0) | 0
      } else {
       $12_1 = 8
      }
      $10_1 = ($12_1 | 0) > ($15_1 | 0) ? $12_1 : $15_1;
      if (($19 | 0) >= ($10_1 | 0)) {
       break label$4
      }
      $12_1 = $16($10_1 << 3);
      $15_1 = HEAP32[$0_1 + 8 >> 2];
      if ($15_1) {
       $1602($12_1, $15_1, HEAP32[$0_1 >> 2] << 3);
       $17(HEAP32[$0_1 + 8 >> 2]);
      }
      HEAP32[$0_1 + 4 >> 2] = $10_1;
      HEAP32[$0_1 + 8 >> 2] = $12_1;
     }
     $10_1 = HEAP32[$0_1 + 8 >> 2] + (HEAP32[$0_1 >> 2] << 3) | 0;
     HEAPF32[$10_1 + 4 >> 2] = $8;
     HEAPF32[$10_1 >> 2] = $7_1;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
     break label$1;
    }
    if (($10_1 | 0) > 9) {
     break label$1
    }
    $13 = Math_fround(Math_fround($1_1 + $3) * Math_fround(.5));
    $14 = Math_fround(Math_fround($3 + $5_1) * Math_fround(.5));
    $3 = Math_fround(Math_fround($13 + $14) * Math_fround(.5));
    $11_1 = Math_fround(Math_fround($2_1 + $4_1) * Math_fround(.5));
    $17_1 = Math_fround(Math_fround($4_1 + $6_1) * Math_fround(.5));
    $4_1 = Math_fround(Math_fround($11_1 + $17_1) * Math_fround(.5));
    $20_1 = $1_1;
    $21_1 = $2_1;
    $16_1 = $3;
    $18_1 = $4_1;
    $5_1 = Math_fround(Math_fround($5_1 + $7_1) * Math_fround(.5));
    $3 = Math_fround(Math_fround($14 + $5_1) * Math_fround(.5));
    $1_1 = Math_fround(Math_fround($16_1 + $3) * Math_fround(.5));
    $6_1 = Math_fround(Math_fround($6_1 + $8) * Math_fround(.5));
    $4_1 = Math_fround(Math_fround($17_1 + $6_1) * Math_fround(.5));
    $2_1 = Math_fround(Math_fround($18_1 + $4_1) * Math_fround(.5));
    $10_1 = $10_1 + 1 | 0;
    $395($0_1, $20_1, $21_1, $13, $11_1, $16_1, $18_1, $1_1, $2_1, $9, $10_1);
    continue;
   }
   break;
  };
 }
 
 function $396($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0;
  $4_1 = (HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0) - 8 | 0;
  $9 = HEAPF32[$4_1 + 4 >> 2];
  $10_1 = HEAPF32[$4_1 >> 2];
  if (!$3) {
   $397($0_1 + 84 | 0, $10_1, $9, HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$2_1 >> 2], HEAPF32[$2_1 + 4 >> 2], HEAPF32[HEAP32[$0_1 + 44 >> 2] + 16 >> 2], 0);
   return;
  }
  if (($3 | 0) > 0) {
   $14 = Math_fround(Math_fround(1.0) / Math_fround($3 | 0));
   $4_1 = 1;
   while (1) {
    $11_1 = $4_1;
    $5_1 = Math_fround($14 * Math_fround($4_1 | 0));
    $12_1 = Math_fround($5_1 * $5_1);
    $7_1 = Math_fround(Math_fround(1.0) - $5_1);
    $13 = Math_fround($7_1 * $7_1);
    $5_1 = Math_fround($5_1 * Math_fround($7_1 + $7_1));
    $7_1 = Math_fround(Math_fround($12_1 * HEAPF32[$2_1 + 4 >> 2]) + Math_fround(Math_fround($13 * $9) + Math_fround($5_1 * HEAPF32[$1_1 + 4 >> 2])));
    $5_1 = Math_fround(Math_fround($12_1 * HEAPF32[$2_1 >> 2]) + Math_fround(Math_fround($13 * $10_1) + Math_fround($5_1 * HEAPF32[$1_1 >> 2])));
    $6_1 = HEAP32[$0_1 + 84 >> 2];
    $4_1 = HEAP32[$0_1 + 88 >> 2];
    label$4 : {
     if (($6_1 | 0) != ($4_1 | 0)) {
      break label$4
     }
     $8 = $6_1 + 1 | 0;
     $15_1 = $4_1;
     if ($4_1) {
      $6_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
     } else {
      $6_1 = 8
     }
     $4_1 = ($6_1 | 0) > ($8 | 0) ? $6_1 : $8;
     if (($15_1 | 0) >= ($4_1 | 0)) {
      break label$4
     }
     $6_1 = $16($4_1 << 3);
     $8 = HEAP32[$0_1 + 92 >> 2];
     if ($8) {
      $1602($6_1, $8, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $4_1;
     HEAP32[$0_1 + 92 >> 2] = $6_1;
    }
    $4_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAPF32[$4_1 + 4 >> 2] = $7_1;
    HEAPF32[$4_1 >> 2] = $5_1;
    HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
    $4_1 = $11_1 + 1 | 0;
    if (($3 | 0) != ($11_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $397($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0);
  while (1) {
   label$1 : {
    $10_1 = Math_fround($6_1 - $2_1);
    $11_1 = Math_fround($5_1 - $1_1);
    $13 = Math_fround(Math_fround(Math_fround($3 - $5_1) * $10_1) - Math_fround($11_1 * Math_fround($4_1 - $6_1)));
    if (Math_fround(Math_fround($13 * $13) * Math_fround(4.0)) < Math_fround(Math_fround(Math_fround($11_1 * $11_1) + Math_fround($10_1 * $10_1)) * $7_1)) {
     $9 = HEAP32[$0_1 >> 2];
     $8 = HEAP32[$0_1 + 4 >> 2];
     label$4 : {
      if (($9 | 0) != ($8 | 0)) {
       break label$4
      }
      $12_1 = $9 + 1 | 0;
      $14 = $8;
      if ($8) {
       $9 = $8 + (($8 | 0) / 2 | 0) | 0
      } else {
       $9 = 8
      }
      $8 = ($9 | 0) > ($12_1 | 0) ? $9 : $12_1;
      if (($14 | 0) >= ($8 | 0)) {
       break label$4
      }
      $9 = $16($8 << 3);
      $12_1 = HEAP32[$0_1 + 8 >> 2];
      if ($12_1) {
       $1602($9, $12_1, HEAP32[$0_1 >> 2] << 3);
       $17(HEAP32[$0_1 + 8 >> 2]);
      }
      HEAP32[$0_1 + 4 >> 2] = $8;
      HEAP32[$0_1 + 8 >> 2] = $9;
     }
     $8 = HEAP32[$0_1 + 8 >> 2] + (HEAP32[$0_1 >> 2] << 3) | 0;
     HEAPF32[$8 + 4 >> 2] = $6_1;
     HEAPF32[$8 >> 2] = $5_1;
     HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
     break label$1;
    }
    if (($8 | 0) > 9) {
     break label$1
    }
    $10_1 = $1_1;
    $11_1 = $2_1;
    $1_1 = Math_fround(Math_fround($1_1 + $3) * Math_fround(.5));
    $13 = $1_1;
    $2_1 = Math_fround(Math_fround($2_1 + $4_1) * Math_fround(.5));
    $15_1 = $2_1;
    $3 = Math_fround(Math_fround($3 + $5_1) * Math_fround(.5));
    $1_1 = Math_fround(Math_fround($1_1 + $3) * Math_fround(.5));
    $4_1 = Math_fround(Math_fround($4_1 + $6_1) * Math_fround(.5));
    $2_1 = Math_fround(Math_fround($2_1 + $4_1) * Math_fround(.5));
    $8 = $8 + 1 | 0;
    $397($0_1, $10_1, $11_1, $13, $15_1, $1_1, $2_1, $7_1, $8);
    continue;
   }
   break;
  };
 }
 
 function $398($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  label$1 : {
   label$2 : {
    $4_1 = $4_1 & 496 ? $4_1 : $4_1 | 240;
    if (($4_1 & 496) != 256) {
     $9 = HEAPF32[$1_1 >> 2];
     $6_1 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[$2_1 >> 2] - $9))) * (($4_1 & 48) == 48 ? Math_fround(.5) : ($4_1 & 192) == 192 ? Math_fround(.5) : Math_fround(1.0))) + Math_fround(-1.0));
     $3 = $3 < $6_1 ? $3 : $6_1;
     $6_1 = HEAPF32[$1_1 + 4 >> 2];
     $11_1 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[$2_1 + 4 >> 2] - $6_1))) * (($4_1 & 80) == 80 ? Math_fround(.5) : ($4_1 & 160) == 160 ? Math_fround(.5) : Math_fround(1.0))) + Math_fround(-1.0));
     $3 = $3 < $11_1 ? $3 : $11_1;
     if (!($3 <= Math_fround(0.0))) {
      break label$2
     }
    }
    $4_1 = HEAP32[$0_1 + 84 >> 2];
    $5_1 = HEAP32[$0_1 + 88 >> 2];
    label$4 : {
     if (($4_1 | 0) != ($5_1 | 0)) {
      break label$4
     }
     $7_1 = $4_1 + 1 | 0;
     if ($5_1) {
      $4_1 = $5_1 + (($5_1 | 0) / 2 | 0) | 0
     } else {
      $4_1 = 8
     }
     $4_1 = ($4_1 | 0) > ($7_1 | 0) ? $4_1 : $7_1;
     if (($4_1 | 0) <= ($5_1 | 0)) {
      break label$4
     }
     $5_1 = $16($4_1 << 3);
     $7_1 = HEAP32[$0_1 + 92 >> 2];
     if ($7_1) {
      $1602($5_1, $7_1, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $4_1;
     HEAP32[$0_1 + 92 >> 2] = $5_1;
    }
    $5_1 = HEAP32[$1_1 + 4 >> 2];
    $4_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $5_1 = HEAP32[$0_1 + 84 >> 2];
    $4_1 = $5_1 + 1 | 0;
    HEAP32[$0_1 + 84 >> 2] = $4_1;
    $12_1 = HEAP32[$1_1 + 4 >> 2];
    $13 = HEAP32[$2_1 >> 2];
    $10_1 = $4_1;
    $4_1 = HEAP32[$0_1 + 88 >> 2];
    label$8 : {
     if (($10_1 | 0) != ($4_1 | 0)) {
      break label$8
     }
     $7_1 = $5_1 + 2 | 0;
     $10_1 = $4_1;
     if ($4_1) {
      $5_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
     } else {
      $5_1 = 8
     }
     $4_1 = ($5_1 | 0) > ($7_1 | 0) ? $5_1 : $7_1;
     if (($10_1 | 0) >= ($4_1 | 0)) {
      break label$8
     }
     $5_1 = $16($4_1 << 3);
     $7_1 = HEAP32[$0_1 + 92 >> 2];
     if ($7_1) {
      $1602($5_1, $7_1, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $4_1;
     HEAP32[$0_1 + 92 >> 2] = $5_1;
    }
    $4_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAP32[$4_1 + 4 >> 2] = $12_1;
    HEAP32[$4_1 >> 2] = $13;
    $4_1 = HEAP32[$0_1 + 84 >> 2];
    $5_1 = $4_1 + 1 | 0;
    HEAP32[$0_1 + 84 >> 2] = $5_1;
    $10_1 = $5_1;
    $5_1 = HEAP32[$0_1 + 88 >> 2];
    label$12 : {
     if (($10_1 | 0) != ($5_1 | 0)) {
      break label$12
     }
     $7_1 = $4_1 + 2 | 0;
     if ($5_1) {
      $4_1 = $5_1 + (($5_1 | 0) / 2 | 0) | 0
     } else {
      $4_1 = 8
     }
     $4_1 = ($4_1 | 0) > ($7_1 | 0) ? $4_1 : $7_1;
     if (($4_1 | 0) <= ($5_1 | 0)) {
      break label$12
     }
     $5_1 = $16($4_1 << 3);
     $7_1 = HEAP32[$0_1 + 92 >> 2];
     if ($7_1) {
      $1602($5_1, $7_1, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $4_1;
     HEAP32[$0_1 + 92 >> 2] = $5_1;
    }
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    $4_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$4_1 + 4 >> 2] = $5_1;
    $4_1 = HEAP32[$0_1 + 84 >> 2];
    $5_1 = $4_1 + 1 | 0;
    HEAP32[$0_1 + 84 >> 2] = $5_1;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $12_1 = HEAP32[$1_1 >> 2];
    $1_1 = HEAP32[$0_1 + 88 >> 2];
    label$16 : {
     if (($1_1 | 0) != ($5_1 | 0)) {
      break label$16
     }
     $2_1 = $4_1 + 2 | 0;
     $5_1 = $1_1;
     if ($1_1) {
      $4_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
     } else {
      $4_1 = 8
     }
     $1_1 = ($2_1 | 0) < ($4_1 | 0) ? $4_1 : $2_1;
     if (($5_1 | 0) >= ($1_1 | 0)) {
      break label$16
     }
     $2_1 = $16($1_1 << 3);
     $4_1 = HEAP32[$0_1 + 92 >> 2];
     if ($4_1) {
      $1602($2_1, $4_1, HEAP32[$0_1 + 84 >> 2] << 3);
      $17(HEAP32[$0_1 + 92 >> 2]);
     }
     HEAP32[$0_1 + 88 >> 2] = $1_1;
     HEAP32[$0_1 + 92 >> 2] = $2_1;
    }
    $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    HEAP32[$1_1 >> 2] = $12_1;
    HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
    break label$1;
   }
   $11_1 = $6_1;
   $6_1 = $4_1 & 16 ? $3 : Math_fround(0.0);
   HEAPF32[$8 + 12 >> 2] = $11_1 + $6_1;
   HEAPF32[$8 + 8 >> 2] = $9 + $6_1;
   $5_1 = $8 + 8 | 0;
   $392($0_1, $5_1, $6_1, 6, 9);
   $9 = HEAPF32[$2_1 >> 2];
   $6_1 = $4_1 & 32 ? $3 : Math_fround(0.0);
   HEAPF32[$8 + 12 >> 2] = $6_1 + HEAPF32[$1_1 + 4 >> 2];
   HEAPF32[$8 + 8 >> 2] = $9 - $6_1;
   $392($0_1, $5_1, $6_1, 9, 12);
   $9 = HEAPF32[$2_1 >> 2];
   $6_1 = $4_1 & 128 ? $3 : Math_fround(0.0);
   HEAPF32[$8 + 12 >> 2] = HEAPF32[$2_1 + 4 >> 2] - $6_1;
   HEAPF32[$8 + 8 >> 2] = $9 - $6_1;
   $392($0_1, $5_1, $6_1, 0, 3);
   $6_1 = HEAPF32[$1_1 >> 2];
   $3 = $4_1 & 64 ? $3 : Math_fround(0.0);
   HEAPF32[$8 + 12 >> 2] = HEAPF32[$2_1 + 4 >> 2] - $3;
   HEAPF32[$8 + 8 >> 2] = $3 + $6_1;
   $392($0_1, $5_1, $3, 3, 6);
  }
  global$0 = $8 + 16 | 0;
 }
 
 function $399($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
  if ($3 >>> 0 >= 16777216) {
   $7_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] + Math_fround(.5));
   $8 = Math_fround(HEAPF32[$1_1 >> 2] + Math_fround(.5));
   $5_1 = HEAP32[$0_1 + 84 >> 2];
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($5_1 | 0) != ($1_1 | 0)) {
     break label$2
    }
    $6_1 = $5_1 + 1 | 0;
    $9 = $1_1;
    if ($1_1) {
     $5_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $5_1 = 8
    }
    $1_1 = ($5_1 | 0) > ($6_1 | 0) ? $5_1 : $6_1;
    if (($9 | 0) >= ($1_1 | 0)) {
     break label$2
    }
    $5_1 = $16($1_1 << 3);
    $6_1 = HEAP32[$0_1 + 92 >> 2];
    if ($6_1) {
     $1602($5_1, $6_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $5_1;
   }
   $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAPF32[$1_1 + 4 >> 2] = $7_1;
   HEAPF32[$1_1 >> 2] = $8;
   $5_1 = HEAP32[$0_1 + 84 >> 2];
   $1_1 = $5_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $7_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] + Math_fround(.5));
   $8 = Math_fround(HEAPF32[$2_1 >> 2] + Math_fround(.5));
   $2_1 = $1_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$6 : {
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$6
    }
    $5_1 = $5_1 + 2 | 0;
    $9 = $1_1;
    if ($1_1) {
     $2_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $2_1 = 8
    }
    $1_1 = ($2_1 | 0) > ($5_1 | 0) ? $2_1 : $5_1;
    if (($9 | 0) >= ($1_1 | 0)) {
     break label$6
    }
    $2_1 = $16($1_1 << 3);
    $5_1 = HEAP32[$0_1 + 92 >> 2];
    if ($5_1) {
     $1602($2_1, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $2_1;
   }
   $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAPF32[$1_1 + 4 >> 2] = $7_1;
   HEAPF32[$1_1 >> 2] = $8;
   $1_1 = HEAP32[$0_1 + 84 >> 2] + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $388($0_1, HEAP32[$0_1 + 92 >> 2], $1_1, $3, 0, $4_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
 }
 
 function $400($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = Math_fround(0);
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  if ($3 >>> 0 >= 16777216) {
   label$2 : {
    if (HEAP8[$0_1 + 36 | 0] & 1) {
     $8 = HEAPF32[$1_1 >> 2];
     HEAPF32[$7_1 + 12 >> 2] = HEAPF32[$1_1 + 4 >> 2] + Math_fround(.5);
     HEAPF32[$7_1 + 8 >> 2] = $8 + Math_fround(.5);
     $8 = HEAPF32[$2_1 >> 2];
     HEAPF32[$7_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] + Math_fround(-.5);
     HEAPF32[$7_1 >> 2] = $8 + Math_fround(-.5);
     break label$2;
    }
    $8 = HEAPF32[$1_1 >> 2];
    HEAPF32[$7_1 + 12 >> 2] = HEAPF32[$1_1 + 4 >> 2] + Math_fround(.5);
    HEAPF32[$7_1 + 8 >> 2] = $8 + Math_fround(.5);
    $8 = HEAPF32[$2_1 >> 2];
    HEAPF32[$7_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] + Math_fround(-.49000000953674316);
    HEAPF32[$7_1 >> 2] = $8 + Math_fround(-.49000000953674316);
   }
   $398($0_1, $7_1 + 8 | 0, $7_1, $4_1, $5_1);
   $388($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $3, 1, $6_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  global$0 = $7_1 + 16 | 0;
 }
 
 function $401($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  if ($3 >>> 0 >= 16777216) {
   if (!(!($4_1 <= Math_fround(0.0)) & ($5_1 & 496) != 256)) {
    $383($0_1, 6, 4);
    $10_1 = HEAP32[$2_1 + 4 >> 2];
    $11_1 = HEAP32[$1_1 >> 2];
    $12_1 = HEAP32[$1_1 + 4 >> 2];
    $13 = HEAP32[$2_1 >> 2];
    $6_1 = HEAP32[$0_1 + 44 >> 2];
    $5_1 = HEAP32[$6_1 >> 2];
    $9 = HEAP32[$6_1 + 4 >> 2];
    $8 = HEAP32[$0_1 + 56 >> 2];
    $7_1 = HEAPU16[$0_1 + 40 >> 1];
    HEAP16[$8 + 10 >> 1] = $7_1 + 3;
    $6_1 = $7_1 + 2 | 0;
    HEAP16[$8 + 8 >> 1] = $6_1;
    HEAP16[$8 + 6 >> 1] = $7_1;
    HEAP16[$8 + 4 >> 1] = $6_1;
    HEAP16[$8 + 2 >> 1] = $7_1 + 1;
    HEAP16[$8 >> 1] = $7_1;
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    $7_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $6_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 8 >> 2] = $5_1;
    HEAP32[$1_1 + 12 >> 2] = $9;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 20 >> 2] = $13;
    HEAP32[$1_1 + 16 >> 2] = $3;
    HEAP32[$1_1 + 24 >> 2] = $12_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2] + 28 | 0;
    HEAP32[$1_1 >> 2] = $5_1;
    HEAP32[$1_1 + 4 >> 2] = $9;
    $6_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$6_1 + 36 >> 2] = $3;
    $1_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$6_1 + 40 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 44 >> 2] = $1_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
    HEAP32[$1_1 >> 2] = $5_1;
    HEAP32[$1_1 + 4 >> 2] = $9;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 60 >> 2] = $11_1;
    HEAP32[$1_1 - -64 >> 2] = $10_1;
    HEAP32[$1_1 + 56 >> 2] = $3;
    $1_1 = HEAP32[$0_1 + 52 >> 2] + 68 | 0;
    HEAP32[$1_1 >> 2] = $5_1;
    HEAP32[$1_1 + 4 >> 2] = $9;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 76 >> 2] = $3;
    HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
    HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
    HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
    return;
   }
   $398($0_1, $1_1, $2_1, $4_1, $5_1);
   $389($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $3);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
 }
 
 function $402($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  if (($3 | $4_1 | $5_1 | $6_1) >>> 0 >= 16777216) {
   $7_1 = HEAP32[$0_1 + 44 >> 2];
   $9 = HEAP32[$7_1 >> 2];
   $10_1 = HEAP32[$7_1 + 4 >> 2];
   $383($0_1, 6, 4);
   $7_1 = HEAP32[$0_1 + 56 >> 2];
   $8 = HEAPU16[$0_1 + 40 >> 1];
   HEAP16[$7_1 >> 1] = $8;
   HEAP32[$0_1 + 56 >> 2] = $7_1 + 2;
   HEAP16[$7_1 + 2 >> 1] = $8 + 1;
   HEAP32[$0_1 + 56 >> 2] = $7_1 + 4;
   $11_1 = $8 + 2 | 0;
   HEAP16[$7_1 + 4 >> 1] = $11_1;
   HEAP32[$0_1 + 56 >> 2] = $7_1 + 6;
   HEAP16[$7_1 + 6 >> 1] = $8;
   HEAP32[$0_1 + 56 >> 2] = $7_1 + 8;
   HEAP16[$7_1 + 8 >> 1] = $11_1;
   HEAP32[$0_1 + 56 >> 2] = $7_1 + 10;
   HEAP16[$7_1 + 10 >> 1] = $8 + 3;
   HEAP32[$0_1 + 56 >> 2] = $7_1 + 12;
   $8 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $8;
   $7_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$7_1 + 8 >> 2] = $9;
   HEAP32[$7_1 + 12 >> 2] = $10_1;
   $7_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$7_1 + 16 >> 2] = $3;
   HEAP32[$0_1 + 52 >> 2] = $7_1 + 20;
   HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
   $3 = HEAP32[$2_1 >> 2];
   HEAP32[$7_1 + 24 >> 2] = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$7_1 + 20 >> 2] = $3;
   $3 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$3 + 8 >> 2] = $9;
   HEAP32[$3 + 12 >> 2] = $10_1;
   $3 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$3 + 16 >> 2] = $4_1;
   HEAP32[$0_1 + 52 >> 2] = $3 + 20;
   HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
   $4_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3 + 20 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$3 + 24 >> 2] = $4_1;
   $3 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$3 + 8 >> 2] = $9;
   HEAP32[$3 + 12 >> 2] = $10_1;
   $3 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$3 + 16 >> 2] = $5_1;
   HEAP32[$0_1 + 52 >> 2] = $3 + 20;
   HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$3 + 20 >> 2] = $1_1;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 8 >> 2] = $9;
   HEAP32[$1_1 + 12 >> 2] = $10_1;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 16 >> 2] = $6_1;
   HEAP32[$0_1 + 52 >> 2] = $1_1 + 20;
   HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
  }
 }
 
 function $405($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  if ($4_1 >>> 0 >= 16777216) {
   $7_1 = HEAP32[$0_1 + 84 >> 2];
   $6_1 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($7_1 | 0) != ($6_1 | 0)) {
     break label$2
    }
    $8 = $7_1 + 1 | 0;
    $9 = $6_1;
    if ($6_1) {
     $7_1 = $6_1 + (($6_1 | 0) / 2 | 0) | 0
    } else {
     $7_1 = 8
    }
    $6_1 = ($7_1 | 0) > ($8 | 0) ? $7_1 : $8;
    if (($9 | 0) >= ($6_1 | 0)) {
     break label$2
    }
    $7_1 = $16($6_1 << 3);
    $8 = HEAP32[$0_1 + 92 >> 2];
    if ($8) {
     $1602($7_1, $8, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $6_1;
    HEAP32[$0_1 + 92 >> 2] = $7_1;
   }
   $7_1 = HEAP32[$1_1 + 4 >> 2];
   $6_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $7_1;
   $6_1 = HEAP32[$0_1 + 84 >> 2];
   $1_1 = $6_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $7_1 = $1_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$6 : {
    if (($7_1 | 0) != ($1_1 | 0)) {
     break label$6
    }
    $7_1 = $6_1 + 2 | 0;
    $9 = $1_1;
    if ($1_1) {
     $6_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $6_1 = 8
    }
    $1_1 = ($6_1 | 0) > ($7_1 | 0) ? $6_1 : $7_1;
    if (($9 | 0) >= ($1_1 | 0)) {
     break label$6
    }
    $6_1 = $16($1_1 << 3);
    $7_1 = HEAP32[$0_1 + 92 >> 2];
    if ($7_1) {
     $1602($6_1, $7_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $6_1;
   }
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $6_1;
   $2_1 = HEAP32[$0_1 + 84 >> 2];
   $1_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $6_1 = $1_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$10 : {
    if (($6_1 | 0) != ($1_1 | 0)) {
     break label$10
    }
    $6_1 = $2_1 + 2 | 0;
    $7_1 = $1_1;
    if ($1_1) {
     $2_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $2_1 = 8
    }
    $1_1 = ($2_1 | 0) > ($6_1 | 0) ? $2_1 : $6_1;
    if (($7_1 | 0) >= ($1_1 | 0)) {
     break label$10
    }
    $2_1 = $16($1_1 << 3);
    $6_1 = HEAP32[$0_1 + 92 >> 2];
    if ($6_1) {
     $1602($2_1, $6_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $2_1;
   }
   $2_1 = HEAP32[$3 + 4 >> 2];
   $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 84 >> 2] + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $388($0_1, HEAP32[$0_1 + 92 >> 2], $1_1, $4_1, 1, $5_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
 }
 
 function $406($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  if ($4_1 >>> 0 >= 16777216) {
   $6_1 = HEAP32[$0_1 + 84 >> 2];
   $5_1 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($6_1 | 0) != ($5_1 | 0)) {
     break label$2
    }
    $7_1 = $6_1 + 1 | 0;
    $8 = $5_1;
    if ($5_1) {
     $6_1 = $5_1 + (($5_1 | 0) / 2 | 0) | 0
    } else {
     $6_1 = 8
    }
    $5_1 = ($6_1 | 0) > ($7_1 | 0) ? $6_1 : $7_1;
    if (($8 | 0) >= ($5_1 | 0)) {
     break label$2
    }
    $6_1 = $16($5_1 << 3);
    $7_1 = HEAP32[$0_1 + 92 >> 2];
    if ($7_1) {
     $1602($6_1, $7_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $5_1;
    HEAP32[$0_1 + 92 >> 2] = $6_1;
   }
   $6_1 = HEAP32[$1_1 + 4 >> 2];
   $5_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $6_1;
   $5_1 = HEAP32[$0_1 + 84 >> 2];
   $1_1 = $5_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $6_1 = $1_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$6 : {
    if (($6_1 | 0) != ($1_1 | 0)) {
     break label$6
    }
    $6_1 = $5_1 + 2 | 0;
    $8 = $1_1;
    if ($1_1) {
     $5_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $5_1 = 8
    }
    $1_1 = ($5_1 | 0) > ($6_1 | 0) ? $5_1 : $6_1;
    if (($8 | 0) >= ($1_1 | 0)) {
     break label$6
    }
    $5_1 = $16($1_1 << 3);
    $6_1 = HEAP32[$0_1 + 92 >> 2];
    if ($6_1) {
     $1602($5_1, $6_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $5_1;
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $5_1;
   $2_1 = HEAP32[$0_1 + 84 >> 2];
   $1_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $5_1 = $1_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$10 : {
    if (($5_1 | 0) != ($1_1 | 0)) {
     break label$10
    }
    $5_1 = $2_1 + 2 | 0;
    $6_1 = $1_1;
    if ($1_1) {
     $2_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
    } else {
     $2_1 = 8
    }
    $1_1 = ($2_1 | 0) > ($5_1 | 0) ? $2_1 : $5_1;
    if (($6_1 | 0) >= ($1_1 | 0)) {
     break label$10
    }
    $2_1 = $16($1_1 << 3);
    $5_1 = HEAP32[$0_1 + 92 >> 2];
    if ($5_1) {
     $1602($2_1, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $2_1;
   }
   $2_1 = HEAP32[$3 + 4 >> 2];
   $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 84 >> 2] + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $389($0_1, HEAP32[$0_1 + 92 >> 2], $1_1, $4_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
 }
 
 function $407($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0);
  if (!($3 >>> 0 < 16777216 | $2_1 <= Math_fround(0.0))) {
   label$2 : {
    if (($4_1 | 0) <= 0) {
     $390($0_1, $1_1, Math_fround($2_1 + Math_fround(-.5)), 0, 48);
     HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] - 1;
     break label$2;
    }
    $6_1 = $1_1;
    $7_1 = Math_fround($2_1 + Math_fround(-.5));
    $1_1 = ($4_1 | 0) >= 512 ? 512 : $4_1;
    $1_1 = ($1_1 | 0) <= 3 ? 3 : $1_1;
    $2_1 = Math_fround($1_1 | 0);
    $393($0_1, $6_1, $7_1, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2_1 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2_1), $1_1 - 1 | 0);
   }
   $388($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $3, 1, $5_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
 }
 
 function $408($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0);
  if (!($3 >>> 0 < 16777216 | $2_1 <= Math_fround(0.0))) {
   label$2 : {
    if (($4_1 | 0) <= 0) {
     $390($0_1, $1_1, $2_1, 0, 48);
     HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] - 1;
     break label$2;
    }
    $5_1 = $1_1;
    $6_1 = $2_1;
    $1_1 = ($4_1 | 0) >= 512 ? 512 : $4_1;
    $1_1 = ($1_1 | 0) <= 3 ? 3 : $1_1;
    $2_1 = Math_fround($1_1 | 0);
    $393($0_1, $5_1, $6_1, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2_1 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2_1), $1_1 - 1 | 0);
   }
   $389($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $3);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
 }
 
 function $413($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = 0;
  $9 = global$0 - 32 | 0;
  global$0 = $9;
  label$1 : {
   if ($4_1 >>> 0 < 16777216) {
    break label$1
   }
   if (!$6_1) {
    $6_1 = $1697($5_1) + $5_1 | 0
   }
   $12_1 = $6_1;
   if (($12_1 | 0) == ($5_1 | 0)) {
    break label$1
   }
   $6_1 = $1_1;
   if (!$1_1) {
    $6_1 = HEAP32[HEAP32[$0_1 + 44 >> 2] + 8 >> 2]
   }
   $2_1 = $2_1 == Math_fround(0.0) ? HEAPF32[HEAP32[$0_1 + 44 >> 2] + 12 >> 2] : $2_1;
   $13 = $0_1 + 104 | 0;
   $14 = HEAP32[$13 + 4 >> 2];
   $1_1 = $9 + 24 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$13 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $14;
   $1_1 = HEAP32[$0_1 + 100 >> 2];
   HEAP32[$9 + 16 >> 2] = HEAP32[$0_1 + 96 >> 2];
   HEAP32[$9 + 20 >> 2] = $1_1;
   if ($8) {
    $10_1 = HEAPF32[$9 + 16 >> 2];
    $11_1 = HEAPF32[$8 >> 2];
    HEAPF32[$9 + 16 >> 2] = $10_1 >= $11_1 ? $10_1 : $11_1;
    $10_1 = HEAPF32[$9 + 20 >> 2];
    $11_1 = HEAPF32[$8 + 4 >> 2];
    HEAPF32[$9 + 20 >> 2] = $10_1 >= $11_1 ? $10_1 : $11_1;
    $10_1 = HEAPF32[$9 + 24 >> 2];
    $11_1 = HEAPF32[$8 + 8 >> 2];
    HEAPF32[$9 + 24 >> 2] = $10_1 < $11_1 ? $10_1 : $11_1;
    $10_1 = HEAPF32[$9 + 28 >> 2];
    $11_1 = HEAPF32[$8 + 12 >> 2];
    HEAPF32[$9 + 28 >> 2] = $10_1 < $11_1 ? $10_1 : $11_1;
   }
   $1_1 = HEAP32[$3 + 4 >> 2];
   $3 = HEAP32[$3 >> 2];
   HEAP32[$9 >> 2] = $3;
   HEAP32[$9 + 4 >> 2] = $1_1;
   HEAP32[$9 + 8 >> 2] = $3;
   HEAP32[$9 + 12 >> 2] = $1_1;
   $414($6_1, $0_1, $2_1, $9, $4_1, $9 + 16 | 0, $5_1, $12_1, $7_1, ($8 | 0) != 0);
  }
  global$0 = $9 + 32 | 0;
 }
 
 function $414($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9) {
  var $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = Math_fround(0), $21_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = 0, $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = 0, $35_1 = Math_fround(0), $36_1 = 0, $37 = 0, $38_1 = 0;
  $26_1 = global$0 - 16 | 0;
  global$0 = $26_1;
  $12_1 = $7_1;
  if (!$7_1) {
   $12_1 = $1697($6_1) + $6_1 | 0
  }
  $13 = $12_1;
  $10_1 = HEAPF32[$3 >> 2];
  label$2 : {
   if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
    $7_1 = ~~$10_1;
    break label$2;
   }
   $7_1 = -2147483648;
  }
  $15_1 = Math_fround($7_1 | 0);
  HEAPF32[$3 >> 2] = $15_1;
  $10_1 = HEAPF32[$3 + 4 >> 2];
  label$4 : {
   if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
    $7_1 = ~~$10_1;
    break label$4;
   }
   $7_1 = -2147483648;
  }
  $10_1 = Math_fround($7_1 | 0);
  HEAPF32[$3 + 4 >> 2] = $10_1;
  $17_1 = HEAPF32[$5_1 + 12 >> 2];
  label$6 : {
   if ($17_1 < $10_1) {
    break label$6
   }
   $14 = $2_1;
   $2_1 = HEAPF32[$0_1 + 16 >> 2];
   $23_1 = Math_fround($14 / $2_1);
   $27_1 = Math_fround($2_1 * $23_1);
   label$7 : {
    label$8 : {
     $18_1 = $8 > Math_fround(0.0);
     if ($18_1) {
      break label$8
     }
     $14 = Math_fround($27_1 + $10_1);
     $20_1 = HEAPF32[$5_1 + 4 >> 2];
     $7_1 = $14 < $20_1;
     if (!$7_1 | !$7_1 | $6_1 >>> 0 >= $13 >>> 0) {
      break label$8
     }
     $12_1 = $6_1;
     while (1) {
      $6_1 = $1644($12_1, 10, $13 - $12_1 | 0);
      $12_1 = $6_1 ? $6_1 + 1 | 0 : $13;
      $2_1 = $14;
      $14 = Math_fround($27_1 + $2_1);
      if (!($20_1 > $14)) {
       $19 = $12_1;
       break label$7;
      }
      $19 = $12_1;
      if ($12_1 >>> 0 < $13 >>> 0) {
       continue
      }
      break;
     };
     break label$7;
    }
    $19 = $6_1;
    $2_1 = $10_1;
   }
   $7_1 = $19;
   label$11 : {
    if ($18_1) {
     $19 = $13;
     break label$11;
    }
    if (($13 - $7_1 | 0) < 10001) {
     $19 = $13;
     break label$11;
    }
    if (!($2_1 < $17_1)) {
     break label$11
    }
    if ($7_1 >>> 0 >= $13 >>> 0) {
     break label$11
    }
    $12_1 = $7_1;
    $14 = $2_1;
    while (1) {
     $6_1 = $1644($12_1, 10, $13 - $12_1 | 0);
     $12_1 = $6_1 ? $6_1 + 1 | 0 : $13;
     $14 = Math_fround($27_1 + $14);
     if (!($17_1 > $14)) {
      $19 = $12_1;
      break label$11;
     }
     $19 = $12_1;
     if ($12_1 >>> 0 < $13 >>> 0) {
      continue
     }
     break;
    };
   }
   if (($7_1 | 0) == ($19 | 0)) {
    break label$6
   }
   $36_1 = HEAP32[$1_1 + 12 >> 2];
   $6_1 = $19 - $7_1 | 0;
   $34_1 = Math_imul($6_1, 6);
   $383($1_1, $34_1, $6_1 << 2);
   $37 = $4_1 | 16777215;
   $6_1 = HEAP32[$1_1 + 52 >> 2];
   $12_1 = HEAP32[$1_1 + 56 >> 2];
   $11_1 = HEAP32[$1_1 + 40 >> 2];
   $18_1 = 0;
   $14 = $2_1;
   $2_1 = $15_1;
   label$16 : {
    while (1) {
     label$17 : {
      $16_1 = $11_1;
      $13 = $12_1;
      $11_1 = $6_1;
      if ($7_1 >>> 0 >= $19 >>> 0) {
       break label$17
      }
      $15_1 = $14;
      $17_1 = HEAPF32[$3 >> 2];
      $10_1 = $2_1;
      $14 = $10_1;
      $2_1 = $15_1;
      $6_1 = $18_1;
      $28_1 = $7_1;
      while (1) {
       label$19 : {
        if (!($8 > Math_fround(0.0))) {
         $14 = $15_1;
         $7_1 = $28_1;
         $6_1 = $18_1;
         break label$19;
        }
        $12_1 = $6_1;
        if ($6_1) {
         $6_1 = $12_1
        } else {
         $6_1 = $415($0_1, $23_1, $7_1, $19, Math_fround($8 - Math_fround($14 - $17_1)));
         $6_1 = (($6_1 | 0) == ($7_1 | 0)) + $6_1 | 0;
        }
        if ($6_1 >>> 0 > $7_1 >>> 0) {
         $10_1 = $14;
         $14 = $2_1;
         break label$19;
        }
        $6_1 = $7_1;
        $12_1 = $7_1;
        label$24 : {
         if ($7_1 >>> 0 >= $19 >>> 0) {
          break label$24
         }
         while (1) {
          $7_1 = HEAPU8[$6_1 | 0];
          $12_1 = ($7_1 | 0) == 32;
          $6_1 = $6_1 + ($12_1 | ($7_1 - 9 & 255) >>> 0 < 2) | 0;
          if (!(($7_1 | 0) == 9 | $12_1)) {
           $12_1 = $6_1;
           break label$24;
          }
          $12_1 = $6_1;
          if ($6_1 >>> 0 < $19 >>> 0) {
           continue
          }
          break;
         };
        }
        $14 = $17_1;
        $2_1 = Math_fround($27_1 + $2_1);
        $6_1 = 0;
        $7_1 = $12_1;
        if ($7_1 >>> 0 < $19 >>> 0) {
         continue
        }
        break label$17;
       }
       break;
      };
      $38_1 = $6_1;
      $2_1 = $10_1;
      $6_1 = HEAP8[$7_1 | 0];
      HEAP32[$26_1 + 12 >> 2] = $6_1;
      label$27 : {
       label$28 : {
        label$29 : {
         label$30 : {
          label$31 : {
           label$32 : {
            label$33 : {
             label$34 : {
              label$35 : {
               label$36 : {
                if (($6_1 | 0) >= 0) {
                 $7_1 = $7_1 + 1 | 0;
                 break label$36;
                }
                $7_1 = $10($26_1 + 12 | 0, $7_1, $19) + $7_1 | 0;
                if (!HEAP32[$26_1 + 12 >> 2]) {
                 break label$35
                }
               }
               $28_1 = $7_1;
               label$38 : {
                $31_1 = HEAP32[$26_1 + 12 >> 2];
                if ($31_1 >>> 0 > 31) {
                 break label$38
                }
                $6_1 = $11_1;
                $12_1 = $13;
                $18_1 = $16_1;
                $21_1 = 0;
                $10_1 = $14;
                label$39 : {
                 switch ($31_1 - 10 | 0) {
                 case 3:
                  break label$27;
                 case 0:
                  break label$39;
                 default:
                  break label$38;
                 };
                }
                $10_1 = Math_fround($27_1 + $14);
                $21_1 = $10_1 > HEAPF32[$5_1 + 12 >> 2];
                $2_1 = HEAPF32[$3 >> 2];
                break label$27;
               }
               $6_1 = $31_1 & 65535;
               if ($6_1 >>> 0 >= HEAPU32[$0_1 + 20 >> 2]) {
                $7_1 = HEAP32[$0_1 + 44 >> 2]
               } else {
                $6_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + ($6_1 << 1) >> 1];
                $7_1 = ($6_1 | 0) == 65535 ? HEAP32[$0_1 + 44 >> 2] : HEAP32[$0_1 + 40 >> 2] + Math_imul($6_1, 40) | 0;
               }
               if (!$7_1) {
                $7_1 = $28_1;
                $6_1 = $11_1;
                $12_1 = $13;
                $18_1 = $16_1;
                $21_1 = 0;
                break label$28;
               }
               $35_1 = Math_fround($23_1 * HEAPF32[$7_1 + 4 >> 2]);
               $6_1 = HEAP32[$7_1 >> 2];
               if (!($6_1 & 2)) {
                $6_1 = $11_1;
                $12_1 = $13;
                $11_1 = $16_1;
                break label$29;
               }
               $10_1 = Math_fround(Math_fround(HEAPF32[$7_1 + 8 >> 2] * $23_1) + $2_1);
               $32_1 = HEAPF32[$5_1 + 8 >> 2];
               if (!($10_1 <= $32_1)) {
                break label$32
               }
               $20_1 = Math_fround(Math_fround(HEAPF32[$7_1 + 16 >> 2] * $23_1) + $2_1);
               $15_1 = HEAPF32[$5_1 >> 2];
               if (!($20_1 >= $15_1)) {
                break label$32
               }
               $17_1 = Math_fround(Math_fround(HEAPF32[$7_1 + 20 >> 2] * $23_1) + $14);
               $22_1 = Math_fround(Math_fround(HEAPF32[$7_1 + 12 >> 2] * $23_1) + $14);
               $29_1 = HEAPF32[$7_1 + 36 >> 2];
               $30 = HEAPF32[$7_1 + 32 >> 2];
               $24 = HEAPF32[$7_1 + 28 >> 2];
               $25_1 = HEAPF32[$7_1 + 24 >> 2];
               if (!$9) {
                $15_1 = $10_1;
                $10_1 = $25_1;
                break label$34;
               }
               label$45 : {
                if (!($10_1 < $15_1)) {
                 $15_1 = $10_1;
                 break label$45;
                }
                $25_1 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround($20_1 - $15_1) / Math_fround($20_1 - $10_1))) * Math_fround($30 - $25_1)) + $25_1);
               }
               $33_1 = $15_1;
               $15_1 = HEAPF32[$5_1 + 4 >> 2];
               label$47 : {
                if (!($15_1 > $22_1)) {
                 $15_1 = $22_1;
                 break label$47;
                }
                $24 = Math_fround(Math_fround(Math_fround(Math_fround(1.0) - Math_fround(Math_fround($17_1 - $15_1) / Math_fround($17_1 - $22_1))) * Math_fround($29_1 - $24)) + $24);
               }
               $22_1 = $15_1;
               label$49 : {
                if (!($20_1 > $32_1)) {
                 $10_1 = $20_1;
                 break label$49;
                }
                $10_1 = $32_1;
                $30 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 - $33_1) / Math_fround($20_1 - $33_1)) * Math_fround($30 - $25_1)) + $25_1);
               }
               $20_1 = $10_1;
               $10_1 = HEAPF32[$5_1 + 12 >> 2];
               label$51 : {
                if (!($10_1 < $17_1)) {
                 $10_1 = $17_1;
                 break label$51;
                }
                $29_1 = Math_fround(Math_fround(Math_fround(Math_fround($10_1 - $22_1) / Math_fround($17_1 - $22_1)) * Math_fround($29_1 - $24)) + $24);
               }
               $15_1 = $33_1;
               $17_1 = $10_1;
               $10_1 = $25_1;
               if (!($17_1 <= $22_1)) {
                break label$34
               }
               $7_1 = $11_1;
               $11_1 = $16_1;
               $16_1 = 0;
               $18_1 = 6;
               $2_1 = Math_fround($2_1 + $35_1);
               $12_1 = $13;
               break label$33;
              }
              $6_1 = $11_1;
              $12_1 = $13;
              $18_1 = $16_1;
              $21_1 = 1;
              break label$28;
             }
             HEAP16[$13 + 6 >> 1] = $16_1;
             HEAP16[$13 >> 1] = $16_1;
             HEAP16[$13 + 10 >> 1] = $16_1 + 3;
             $7_1 = $16_1 + 2 | 0;
             HEAP16[$13 + 8 >> 1] = $7_1;
             HEAP16[$13 + 4 >> 1] = $7_1;
             HEAP16[$13 + 2 >> 1] = $16_1 + 1;
             $6_1 = $6_1 & 1 ? $37 : $4_1;
             HEAP32[$11_1 + 16 >> 2] = $6_1;
             HEAPF32[$11_1 + 4 >> 2] = $22_1;
             HEAPF32[$11_1 >> 2] = $15_1;
             HEAP32[$11_1 + 36 >> 2] = $6_1;
             HEAPF32[$11_1 + 24 >> 2] = $22_1;
             HEAPF32[$11_1 + 20 >> 2] = $20_1;
             HEAPF32[$11_1 + 12 >> 2] = $24;
             HEAPF32[$11_1 + 8 >> 2] = $10_1;
             HEAP32[$11_1 + 56 >> 2] = $6_1;
             HEAPF32[$11_1 + 44 >> 2] = $17_1;
             HEAPF32[$11_1 + 40 >> 2] = $20_1;
             HEAPF32[$11_1 + 32 >> 2] = $24;
             HEAPF32[$11_1 + 28 >> 2] = $30;
             HEAP32[$11_1 + 76 >> 2] = $6_1;
             HEAPF32[$11_1 - -64 >> 2] = $17_1;
             HEAPF32[$11_1 + 60 >> 2] = $15_1;
             HEAPF32[$11_1 + 52 >> 2] = $29_1;
             HEAPF32[$11_1 + 48 >> 2] = $30;
             HEAPF32[$11_1 + 72 >> 2] = $29_1;
             HEAPF32[$11_1 + 68 >> 2] = $10_1;
             $7_1 = $11_1 + 80 | 0;
             $11_1 = $16_1 + 4 | 0;
             $16_1 = 1;
             $18_1 = 0;
             $12_1 = $13 + 12 | 0;
            }
            $6_1 = $7_1;
            $21_1 = $12_1;
            $13 = $11_1;
            $10_1 = $2_1;
            if (!$16_1) {
             break label$30
            }
            break label$31;
           }
           $6_1 = $11_1;
           $21_1 = $13;
           $13 = $16_1;
           $10_1 = $2_1;
          }
          $7_1 = $6_1;
          $12_1 = $21_1;
          $11_1 = $13;
          $18_1 = 0;
          $2_1 = $10_1;
         }
         $6_1 = $7_1;
         if (!$18_1) {
          break label$29
         }
         $7_1 = $28_1;
         $18_1 = $11_1;
         $21_1 = 0;
         $10_1 = $14;
         break label$27;
        }
        $7_1 = $28_1;
        $18_1 = $11_1;
        $21_1 = 0;
        $10_1 = $14;
        $2_1 = Math_fround($35_1 + $2_1);
        break label$27;
       }
       $10_1 = $14;
      }
      $11_1 = $18_1;
      $18_1 = $38_1;
      $14 = $10_1;
      $13 = $12_1;
      $16_1 = $11_1;
      if (!$21_1) {
       continue
      }
      break label$16;
     }
     break;
    };
    $6_1 = $11_1;
   }
   HEAP32[$1_1 + 24 >> 2] = ($6_1 - HEAP32[$1_1 + 32 >> 2] | 0) / 20;
   $0_1 = $13 - HEAP32[$1_1 + 20 >> 2] >> 1;
   HEAP32[$1_1 + 12 >> 2] = $0_1;
   $3 = (HEAP32[$1_1 + 8 >> 2] + Math_imul(HEAP32[$1_1 >> 2], 40) | 0) - 12 | 0;
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] + ($0_1 - ($36_1 + $34_1 | 0) | 0);
   HEAP32[$1_1 + 56 >> 2] = $13;
   HEAP32[$1_1 + 52 >> 2] = $6_1;
   HEAP32[$1_1 + 40 >> 2] = $16_1;
  }
  global$0 = $26_1 + 16 | 0;
 }
 
 function $415($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = 0;
  $13 = global$0 - 16 | 0;
  global$0 = $13;
  $20_1 = $0_1 + 12 | 0;
  $19 = Math_fround($4_1 / $1_1);
  $1_1 = Math_fround(0.0);
  $4_1 = Math_fround(0.0);
  $6_1 = 1;
  $7_1 = $2_1;
  while (1) {
   label$1 : {
    $15_1 = $6_1;
    $5_1 = $11_1;
    $6_1 = $7_1;
    $8 = $10_1;
    $18_1 = $4_1;
    $16_1 = $1_1;
    $7_1 = $2_1;
    if ($3 >>> 0 <= $2_1 >>> 0) {
     $5_1 = $7_1;
     break label$1;
    }
    $2_1 = HEAP8[$7_1 | 0];
    HEAP32[$13 + 12 >> 2] = $2_1;
    $11_1 = 1;
    if (($2_1 | 0) < 0) {
     $11_1 = $10($13 + 12 | 0, $7_1, $3)
    }
    $9 = HEAP32[$13 + 12 >> 2];
    label$5 : {
     if (!$9) {
      $2_1 = $6_1;
      $12_1 = $15_1;
      $14 = $7_1;
      $17_1 = 1;
      break label$5;
     }
     $14 = $7_1 + $11_1 | 0;
     label$7 : {
      if ($9 >>> 0 > 31) {
       break label$7
      }
      $1_1 = Math_fround(0.0);
      $4_1 = Math_fround(0.0);
      $10_1 = Math_fround(0.0);
      $2_1 = $6_1;
      $12_1 = 1;
      $17_1 = 0;
      label$8 : {
       switch ($9 - 10 | 0) {
       case 0:
        break label$5;
       case 3:
        break label$8;
       default:
        break label$7;
       };
      }
      $1_1 = $16_1;
      $4_1 = $18_1;
      $10_1 = $8;
      $12_1 = $15_1;
      break label$5;
     }
     $1_1 = HEAPF32[(($9 | 0) < HEAP32[$0_1 >> 2] ? HEAP32[$0_1 + 8 >> 2] + ($9 << 2) | 0 : $20_1) >> 2];
     label$9 : {
      label$10 : {
       label$11 : {
        if (!(($9 | 0) == 9 | ($9 | 0) == 32 | ($9 | 0) == 12288)) {
         $10_1 = Math_fround($18_1 + $1_1);
         if (!($15_1 & 1)) {
          break label$11
         }
         $4_1 = $16_1;
         $2_1 = $14;
         $6_1 = $5_1;
         $1_1 = $8;
         break label$10;
        }
        $2_1 = $15_1 & 1;
        $4_1 = Math_fround($16_1 + ($2_1 ? $8 : Math_fround(-0.0)));
        $10_1 = $18_1;
        $8 = Math_fround(($2_1 ? Math_fround(0.0) : $8) + $1_1);
        $12_1 = 0;
        $2_1 = $2_1 ? $7_1 : $6_1;
        break label$9;
       }
       $4_1 = Math_fround($16_1 + Math_fround($8 + $10_1));
       $10_1 = Math_fround(0.0);
       $2_1 = $6_1;
       $1_1 = Math_fround(0.0);
      }
      $5_1 = $9 - 33 | 0;
      if (!($5_1 >>> 0 > 30 | !(1 << $5_1 & 1140860931))) {
       $8 = $1_1;
       $5_1 = $6_1;
       $12_1 = 0;
       break label$9;
      }
      $8 = $1_1;
      $5_1 = $6_1;
      $12_1 = 1;
     }
     $11_1 = $2_1;
     $1_1 = $4_1;
     $4_1 = $10_1;
     $10_1 = $8;
     $2_1 = $11_1;
     $17_1 = Math_fround($1_1 + $4_1) > $19;
     $14 = $17_1 ? ($4_1 < $19 ? ($5_1 ? $5_1 : $2_1) : $7_1) : $14;
    }
    $7_1 = $2_1;
    $11_1 = $5_1;
    $6_1 = $12_1;
    $2_1 = $14;
    $5_1 = $2_1;
    if (!$17_1) {
     continue
    }
   }
   break;
  };
  global$0 = $13 + 16 | 0;
  return $5_1;
 }
 
 function $416($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   if ($2_1 >>> 0 < 16777216) {
    break label$1
   }
   $6_1 = $1697($3) + $3 | 0;
   if (($6_1 | 0) == ($3 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[$0_1 + 44 >> 2];
   $8 = HEAPF32[$5_1 + 12 >> 2];
   $9 = HEAP32[$5_1 + 8 >> 2];
   $5_1 = $0_1 + 104 | 0;
   $10_1 = HEAP32[$5_1 + 4 >> 2];
   $7_1 = $4_1 + 24 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $10_1;
   $5_1 = HEAP32[$0_1 + 100 >> 2];
   HEAP32[$4_1 + 16 >> 2] = HEAP32[$0_1 + 96 >> 2];
   HEAP32[$4_1 + 20 >> 2] = $5_1;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$4_1 >> 2] = $1_1;
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   HEAP32[$4_1 + 8 >> 2] = $1_1;
   HEAP32[$4_1 + 12 >> 2] = $5_1;
   $414($9, $0_1, $8, $4_1, $2_1, $4_1 + 16 | 0, $3, $6_1, Math_fround(0.0), 0);
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $417($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0;
  if ($6_1 >>> 0 >= 16777216) {
   if (($1_1 | 0) != HEAP32[$0_1 + 112 >> 2]) {
    $381($0_1, $1_1);
    $383($0_1, 6, 4);
    $9 = HEAP32[$4_1 >> 2];
    $10_1 = HEAP32[$5_1 + 4 >> 2];
    $11_1 = HEAP32[$3 + 4 >> 2];
    $12_1 = HEAP32[$2_1 >> 2];
    $13 = HEAP32[$5_1 >> 2];
    $14 = HEAP32[$4_1 + 4 >> 2];
    $15_1 = HEAP32[$2_1 + 4 >> 2];
    $16_1 = HEAP32[$3 >> 2];
    $1_1 = HEAP32[$0_1 + 56 >> 2];
    $7_1 = HEAPU16[$0_1 + 40 >> 1];
    HEAP16[$1_1 + 6 >> 1] = $7_1;
    HEAP16[$1_1 >> 1] = $7_1;
    HEAP16[$1_1 + 10 >> 1] = $7_1 + 3;
    $8 = $7_1 + 2 | 0;
    HEAP16[$1_1 + 8 >> 1] = $8;
    HEAP16[$1_1 + 4 >> 1] = $8;
    HEAP16[$1_1 + 2 >> 1] = $7_1 + 1;
    $7_1 = HEAP32[$2_1 + 4 >> 2];
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $7_1;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 8 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$1_1 + 12 >> 2] = $2_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 20 >> 2] = $16_1;
    HEAP32[$1_1 + 16 >> 2] = $6_1;
    HEAP32[$1_1 + 24 >> 2] = $15_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 32 >> 2] = $14;
    HEAP32[$1_1 + 28 >> 2] = $13;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 36 >> 2] = $6_1;
    $2_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$1_1 + 40 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$1_1 + 44 >> 2] = $2_1;
    $2_1 = HEAP32[$5_1 + 4 >> 2];
    $1_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $2_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 60 >> 2] = $12_1;
    HEAP32[$1_1 - -64 >> 2] = $11_1;
    HEAP32[$1_1 + 56 >> 2] = $6_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 72 >> 2] = $10_1;
    HEAP32[$1_1 + 68 >> 2] = $9;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 76 >> 2] = $6_1;
    HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
    HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
    HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
    $1_1 = HEAP32[$0_1 + 72 >> 2];
    $2_1 = $1_1 - 1 | 0;
    HEAP32[$0_1 + 72 >> 2] = $2_1;
    if ($2_1) {
     $6_1 = HEAP32[(HEAP32[$0_1 + 80 >> 2] + ($1_1 << 2) | 0) - 8 >> 2]
    } else {
     $6_1 = 0
    }
    HEAP32[$0_1 + 112 >> 2] = $6_1;
    $4_1 = HEAP32[$0_1 + 8 >> 2];
    $3 = HEAP32[$0_1 >> 2];
    $1_1 = $3 - 1 | 0;
    $2_1 = $4_1 + Math_imul($1_1, 40) | 0;
    $5_1 = HEAP32[$2_1 + 28 >> 2];
    if (!(!$5_1 | HEAP32[$2_1 + 16 >> 2] == ($6_1 | 0))) {
     $375($0_1);
     return;
    }
    label$6 : {
     if (($3 | 0) < 2 | $5_1) {
      break label$6
     }
     $2_1 = $2_1 - 40 | 0;
     if ($1645($0_1 + 96 | 0, $2_1, 24) | HEAP32[$2_1 + 32 >> 2]) {
      break label$6
     }
     HEAP32[$0_1 >> 2] = $1_1;
     return;
    }
    HEAP32[($4_1 + Math_imul($1_1, 40) | 0) + 16 >> 2] = $6_1;
    return;
   }
   $383($0_1, 6, 4);
   $9 = HEAP32[$4_1 >> 2];
   $10_1 = HEAP32[$5_1 + 4 >> 2];
   $11_1 = HEAP32[$3 + 4 >> 2];
   $12_1 = HEAP32[$2_1 >> 2];
   $13 = HEAP32[$5_1 >> 2];
   $14 = HEAP32[$4_1 + 4 >> 2];
   $15_1 = HEAP32[$2_1 + 4 >> 2];
   $16_1 = HEAP32[$3 >> 2];
   $1_1 = HEAP32[$0_1 + 56 >> 2];
   $7_1 = HEAPU16[$0_1 + 40 >> 1];
   HEAP16[$1_1 + 6 >> 1] = $7_1;
   HEAP16[$1_1 >> 1] = $7_1;
   HEAP16[$1_1 + 10 >> 1] = $7_1 + 3;
   $8 = $7_1 + 2 | 0;
   HEAP16[$1_1 + 8 >> 1] = $8;
   HEAP16[$1_1 + 4 >> 1] = $8;
   HEAP16[$1_1 + 2 >> 1] = $7_1 + 1;
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $7_1;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 8 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 20 >> 2] = $16_1;
   HEAP32[$1_1 + 16 >> 2] = $6_1;
   HEAP32[$1_1 + 24 >> 2] = $15_1;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 32 >> 2] = $14;
   HEAP32[$1_1 + 28 >> 2] = $13;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 36 >> 2] = $6_1;
   $2_1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1_1 + 40 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1_1 + 44 >> 2] = $2_1;
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   $1_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 60 >> 2] = $12_1;
   HEAP32[$1_1 - -64 >> 2] = $11_1;
   HEAP32[$1_1 + 56 >> 2] = $6_1;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 72 >> 2] = $10_1;
   HEAP32[$1_1 + 68 >> 2] = $9;
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   HEAP32[$1_1 + 76 >> 2] = $6_1;
   HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
   HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
   HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
  }
 }
 
 function $420($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $8 = HEAP32[$0_1 + 8 >> 2];
  if (($1_1 | 0) > ($8 | 0)) {
   if (($1_1 | 0) > HEAP32[$0_1 + 12 >> 2]) {
    $2_1 = $16(Math_imul($1_1, 24));
    $4_1 = HEAP32[$0_1 + 16 >> 2];
    if ($4_1) {
     $1602($2_1, $4_1, Math_imul(HEAP32[$0_1 + 8 >> 2], 24));
     $17(HEAP32[$0_1 + 16 >> 2]);
    }
    HEAP32[$0_1 + 12 >> 2] = $1_1;
    HEAP32[$0_1 + 16 >> 2] = $2_1;
   }
   $2_1 = HEAP32[$0_1 + 12 >> 2];
   label$4 : {
    if (($2_1 | 0) >= ($1_1 | 0)) {
     break label$4
    }
    $4_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
    $4_1 = ($1_1 | 0) < ($4_1 | 0) ? $4_1 : $1_1;
    if (($2_1 | 0) >= ($4_1 | 0)) {
     break label$4
    }
    $2_1 = $16(Math_imul($4_1, 24));
    $3 = HEAP32[$0_1 + 16 >> 2];
    if ($3) {
     $1602($2_1, $3, Math_imul(HEAP32[$0_1 + 8 >> 2], 24));
     $17(HEAP32[$0_1 + 16 >> 2]);
    }
    HEAP32[$0_1 + 12 >> 2] = $4_1;
    HEAP32[$0_1 + 16 >> 2] = $2_1;
   }
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  $2_1 = HEAP32[$0_1 + 16 >> 2];
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $4_1 = $2_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $2_1 = $2_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  if (($1_1 | 0) > 1) {
   $4_1 = 1;
   while (1) {
    $5_1 = Math_imul($4_1, 24);
    $2_1 = $5_1 + HEAP32[$0_1 + 16 >> 2] | 0;
    label$10 : {
     if (($4_1 | 0) >= ($8 | 0)) {
      HEAP32[$2_1 >> 2] = 0;
      HEAP32[$2_1 + 4 >> 2] = 0;
      $3 = $2_1 + 16 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $2_1 = $2_1 + 8 | 0;
      HEAP32[$2_1 >> 2] = 0;
      HEAP32[$2_1 + 4 >> 2] = 0;
      break label$10;
     }
     $3 = HEAP32[$2_1 + 4 >> 2];
     label$12 : {
      if (($3 | 0) >= 0) {
       break label$12
      }
      $6_1 = $3 + (($3 | 0) / 2 | 0) | 0;
      $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
      if (($3 | 0) >= ($6_1 | 0)) {
       break label$12
      }
      $3 = $16(Math_imul($6_1, 40));
      $7_1 = HEAP32[$2_1 + 8 >> 2];
      if ($7_1) {
       $1602($3, $7_1, Math_imul(HEAP32[$2_1 >> 2], 40));
       $17(HEAP32[$2_1 + 8 >> 2]);
      }
      HEAP32[$2_1 + 4 >> 2] = $6_1;
      HEAP32[$2_1 + 8 >> 2] = $3;
     }
     HEAP32[$2_1 >> 2] = 0;
     $3 = $5_1 + HEAP32[$0_1 + 16 >> 2] | 0;
     $6_1 = $3 + 12 | 0;
     $7_1 = $3 + 16 | 0;
     $2_1 = HEAP32[$7_1 >> 2];
     label$14 : {
      if (($2_1 | 0) >= 0) {
       break label$14
      }
      $5_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0;
      $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
      if (($2_1 | 0) >= ($5_1 | 0)) {
       break label$14
      }
      $2_1 = $16($5_1 << 1);
      $3 = $3 + 20 | 0;
      $9 = HEAP32[$3 >> 2];
      if ($9) {
       $1602($2_1, $9, HEAP32[$6_1 >> 2] << 1);
       $17(HEAP32[$3 >> 2]);
      }
      HEAP32[$3 >> 2] = $2_1;
      HEAP32[$7_1 >> 2] = $5_1;
     }
     HEAP32[$6_1 >> 2] = 0;
    }
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $421($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  if (HEAP32[$0_1 + 4 >> 2] >= 2) {
   $422($0_1, $1_1, 0);
   $3 = HEAP32[$1_1 >> 2];
   label$2 : {
    if (!$3) {
     break label$2
    }
    $3 = $3 - 1 | 0;
    $2_1 = HEAP32[$1_1 + 8 >> 2] + Math_imul($3, 40) | 0;
    if (HEAP32[$2_1 + 28 >> 2] | HEAP32[$2_1 + 32 >> 2]) {
     break label$2
    }
    HEAP32[$1_1 >> 2] = $3;
   }
   $2_1 = 0;
   $4_1 = 0;
   label$3 : {
    if (HEAP32[$0_1 + 4 >> 2] <= 0) {
     break label$3
    }
    $3 = HEAP32[$1_1 >> 2];
    $4_1 = 0;
    if (($3 | 0) <= 0) {
     break label$3
    }
    $4_1 = (HEAP32[$1_1 + 8 >> 2] + Math_imul($3, 40) | 0) - 40 | 0;
   }
   if ($4_1) {
    $5_1 = HEAP32[$4_1 + 28 >> 2] + HEAP32[$4_1 + 24 >> 2] | 0
   } else {
    $5_1 = $2_1
   }
   $3 = 0;
   if (HEAP32[$0_1 + 4 >> 2] >= 2) {
    $6_1 = 1;
    while (1) {
     $7_1 = $3;
     $10_1 = $2_1;
     $9 = $6_1;
     $2_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($6_1, 24) | 0;
     $3 = HEAP32[$2_1 >> 2];
     label$8 : {
      if (($3 | 0) <= 0) {
       break label$8
      }
      $3 = $3 - 1 | 0;
      if (HEAP32[(HEAP32[$2_1 + 8 >> 2] + Math_imul($3, 40) | 0) + 28 >> 2]) {
       break label$8
      }
      HEAP32[$2_1 >> 2] = $3;
     }
     $6_1 = HEAP32[$2_1 >> 2];
     label$9 : {
      if (($6_1 | 0) <= 0) {
       break label$9
      }
      if (!$4_1) {
       break label$9
      }
      $3 = HEAP32[$2_1 + 8 >> 2];
      if ($1645($4_1, $3, 24)) {
       break label$9
      }
      if (HEAP32[$4_1 + 32 >> 2] | HEAP32[$3 + 32 >> 2]) {
       break label$9
      }
      HEAP32[$4_1 + 28 >> 2] = HEAP32[$4_1 + 28 >> 2] + HEAP32[$3 + 28 >> 2];
      $8 = HEAP32[$3 + 28 >> 2];
      $1603($3, $3 + 40 | 0, Math_imul($6_1, 40) - 40 | 0);
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
      $5_1 = $5_1 + $8 | 0;
     }
     $3 = $5_1;
     $8 = HEAP32[$2_1 >> 2];
     $6_1 = ($8 | 0) <= 0;
     if ($6_1) {
      $5_1 = $4_1
     } else {
      $5_1 = (HEAP32[$2_1 + 8 >> 2] + Math_imul($8, 40) | 0) - 40 | 0
     }
     $11_1 = HEAP32[$2_1 + 12 >> 2];
     label$15 : {
      if ($6_1) {
       $6_1 = $3;
       break label$15;
      }
      $12_1 = HEAP32[$2_1 + 8 >> 2];
      $2_1 = $3;
      $4_1 = 0;
      while (1) {
       $3 = $12_1 + Math_imul($4_1, 40) | 0;
       HEAP32[$3 + 24 >> 2] = $2_1;
       $2_1 = HEAP32[$3 + 28 >> 2] + $2_1 | 0;
       $6_1 = $2_1;
       $4_1 = $4_1 + 1 | 0;
       if (($8 | 0) != ($4_1 | 0)) {
        continue
       }
       break;
      };
     }
     $3 = $7_1 + $11_1 | 0;
     $2_1 = $8 + $10_1 | 0;
     $4_1 = $5_1;
     $5_1 = $6_1;
     $6_1 = $9 + 1 | 0;
     if (($6_1 | 0) < HEAP32[$0_1 + 4 >> 2]) {
      continue
     }
     break;
    };
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $6_1 = $2_1;
   $2_1 = $2_1 + HEAP32[$1_1 >> 2] | 0;
   label$18 : {
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$18
    }
    if ($4_1) {
     $5_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
    } else {
     $5_1 = 8
    }
    $5_1 = ($2_1 | 0) < ($5_1 | 0) ? $5_1 : $2_1;
    if (($5_1 | 0) <= ($4_1 | 0)) {
     break label$18
    }
    $4_1 = $16(Math_imul($5_1, 40));
    $7_1 = HEAP32[$1_1 + 8 >> 2];
    if ($7_1) {
     $1602($4_1, $7_1, Math_imul(HEAP32[$1_1 >> 2], 40));
     $17(HEAP32[$1_1 + 8 >> 2]);
    }
    HEAP32[$1_1 + 4 >> 2] = $5_1;
    HEAP32[$1_1 + 8 >> 2] = $4_1;
   }
   HEAP32[$1_1 >> 2] = $2_1;
   $2_1 = HEAP32[$1_1 + 16 >> 2];
   $4_1 = HEAP32[$1_1 + 12 >> 2];
   $5_1 = $4_1 + $3 | 0;
   label$22 : {
    if (($2_1 | 0) >= ($5_1 | 0)) {
     break label$22
    }
    if ($2_1) {
     $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $3 = ($3 | 0) > ($5_1 | 0) ? $3 : $5_1;
    if (($3 | 0) <= ($2_1 | 0)) {
     break label$22
    }
    $2_1 = $16($3 << 1);
    $7_1 = HEAP32[$1_1 + 20 >> 2];
    if ($7_1) {
     $1602($2_1, $7_1, HEAP32[$1_1 + 12 >> 2] << 1);
     $17(HEAP32[$1_1 + 20 >> 2]);
    }
    HEAP32[$1_1 + 16 >> 2] = $3;
    HEAP32[$1_1 + 20 >> 2] = $2_1;
   }
   HEAP32[$1_1 + 12 >> 2] = $5_1;
   $4_1 = HEAP32[$1_1 + 20 >> 2] + ($4_1 << 1) | 0;
   label$26 : {
    if (HEAP32[$0_1 + 4 >> 2] < 2) {
     $6_1 = $4_1;
     break label$26;
    }
    $2_1 = 1;
    $3 = (HEAP32[$1_1 + 8 >> 2] + Math_imul(HEAP32[$1_1 >> 2], 40) | 0) + Math_imul($6_1, -40) | 0;
    while (1) {
     $5_1 = $2_1;
     $2_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($2_1, 24) | 0;
     $6_1 = HEAP32[$2_1 >> 2];
     label$29 : {
      if (!$6_1) {
       break label$29
      }
      $9 = $3;
      $3 = Math_imul($6_1, 40);
      $3 = $1602($9, HEAP32[$2_1 + 8 >> 2], $3) + $3 | 0;
     }
     $6_1 = HEAP32[$2_1 + 12 >> 2];
     if ($6_1) {
      $9 = HEAP32[$2_1 + 20 >> 2];
      $2_1 = $6_1 << 1;
      $4_1 = $1602($4_1, $9, $2_1) + $2_1 | 0;
     }
     $6_1 = $4_1;
     $2_1 = $5_1 + 1 | 0;
     if (($2_1 | 0) < HEAP32[$0_1 + 4 >> 2]) {
      continue
     }
     break;
    };
   }
   HEAP32[$1_1 + 56 >> 2] = $6_1;
   $3 = HEAP32[$1_1 >> 2];
   if (!$3 | HEAP32[(HEAP32[$1_1 + 8 >> 2] + Math_imul($3, 40) | 0) - 8 >> 2]) {
    $375($1_1)
   }
   $3 = $1_1 + 96 | 0;
   $2_1 = (HEAP32[$1_1 + 8 >> 2] + Math_imul(HEAP32[$1_1 >> 2], 40) | 0) - 40 | 0;
   label$35 : {
    if (!HEAP32[$2_1 + 28 >> 2]) {
     $1_1 = HEAP32[$3 + 4 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $5_1 = $3 + 16 | 0;
     $4_1 = HEAP32[$5_1 + 4 >> 2];
     $1_1 = $2_1 + 16 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $4_1;
     $1_1 = $2_1 + 8 | 0;
     $3 = $3 + 8 | 0;
     $2_1 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     break label$35;
    }
    if (!$1645($2_1, $3, 24)) {
     break label$35
    }
    $375($1_1);
   }
   HEAP32[$0_1 + 4 >> 2] = 1;
  }
 }
 
 function $422($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $3 = HEAP32[$0_1 >> 2];
   if (($3 | 0) == ($2_1 | 0)) {
    break label$1
   }
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $4_1 = $0_1 + 16 | 0;
   $3 = HEAP32[$4_1 >> 2] + Math_imul($3, 24) | 0;
   HEAP32[$3 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $5_1;
   $5_1 = $1_1 + 8 | 0;
   HEAP32[$3 + 8 >> 2] = HEAP32[$5_1 >> 2];
   $6_1 = HEAP32[$1_1 + 16 >> 2];
   $3 = HEAP32[$4_1 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 24) | 0;
   HEAP32[$3 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
   HEAP32[$3 + 16 >> 2] = $6_1;
   $6_1 = $3 + 20 | 0;
   $3 = $1_1 + 20 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$0_1 >> 2] = $2_1;
   $6_1 = Math_imul($2_1, 24);
   $2_1 = $6_1 + HEAP32[$4_1 >> 2] | 0;
   $0_1 = HEAP32[$2_1 >> 2];
   $7_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$1_1 >> 2] = $0_1;
   HEAP32[$1_1 + 4 >> 2] = $7_1;
   HEAP32[$5_1 >> 2] = HEAP32[$2_1 + 8 >> 2];
   $2_1 = $6_1 + HEAP32[$4_1 >> 2] | 0;
   $5_1 = HEAP32[$2_1 + 16 >> 2];
   $4_1 = HEAP32[$2_1 + 12 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $4_1;
   HEAP32[$1_1 + 16 >> 2] = $5_1;
   $2_1 = HEAP32[$2_1 + 20 >> 2];
   HEAP32[$3 >> 2] = $2_1;
   HEAP32[$1_1 + 56 >> 2] = $2_1 + ($4_1 << 1);
   if ($0_1) {
    $0_1 = (HEAP32[$1_1 + 8 >> 2] + Math_imul($0_1, 40) | 0) - 40 | 0
   } else {
    $0_1 = 0
   }
   if ($0_1) {
    $2_1 = $1_1 + 96 | 0;
    if (!HEAP32[$0_1 + 28 >> 2]) {
     $1_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
     $4_1 = $2_1 + 16 | 0;
     $3 = HEAP32[$4_1 + 4 >> 2];
     $1_1 = $0_1 + 16 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $3;
     $1_1 = $2_1 + 8 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $0_1 = $0_1 + 8 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     return;
    }
    if (!$1645($0_1, $2_1, 24)) {
     break label$1
    }
   }
   $375($1_1);
  }
 }
 
 function $423($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  label$1 : {
   if (HEAP32[$0_1 + 4 >> 2] <= 0) {
    break label$1
   }
   while (1) {
    $9 = $3;
    $2_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + ($3 << 2) >> 2];
    $4_1 = HEAP32[$2_1 + 12 >> 2];
    label$4 : {
     if (!$4_1) {
      $3 = $1_1;
      break label$4;
     }
     label$6 : {
      if (($5_1 | 0) >= ($4_1 | 0)) {
       break label$6
      }
      if ($5_1) {
       $3 = (($5_1 | 0) / 2 | 0) + $5_1 | 0
      } else {
       $3 = 8
      }
      $3 = ($3 | 0) > ($4_1 | 0) ? $3 : $4_1;
      if (($3 | 0) <= ($5_1 | 0)) {
       break label$6
      }
      $5_1 = $16(Math_imul($3, 20));
      if ($1_1) {
       $1602($5_1, $1_1, Math_imul($7_1, 20));
       $17($1_1);
      }
      $1_1 = $5_1;
      $5_1 = $3;
     }
     $3 = $5_1;
     if (HEAP32[$2_1 + 12 >> 2] > 0) {
      $5_1 = 0;
      while (1) {
       $6_1 = HEAP32[$2_1 + 32 >> 2] + Math_imul(HEAPU16[HEAP32[$2_1 + 20 >> 2] + ($5_1 << 1) >> 1], 20) | 0;
       $8 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $1_1 + Math_imul($5_1, 20) | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $8;
       HEAP32[$7_1 + 16 >> 2] = HEAP32[$6_1 + 16 >> 2];
       $6_1 = $6_1 + 8 | 0;
       $8 = HEAP32[$6_1 + 4 >> 2];
       $7_1 = $7_1 + 8 | 0;
       HEAP32[$7_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$7_1 + 4 >> 2] = $8;
       $5_1 = $5_1 + 1 | 0;
       if (($5_1 | 0) < HEAP32[$2_1 + 12 >> 2]) {
        continue
       }
       break;
      };
     }
     $7_1 = HEAP32[$2_1 + 24 >> 2];
     HEAP32[$2_1 + 24 >> 2] = $4_1;
     $4_1 = $2_1 + 28 | 0;
     $5_1 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $3;
     $4_1 = $2_1 + 32 | 0;
     $3 = HEAP32[$4_1 >> 2];
     HEAP32[$4_1 >> 2] = $1_1;
     $1_1 = HEAP32[$2_1 + 16 >> 2];
     label$13 : {
      if (($1_1 | 0) >= 0) {
       break label$13
      }
      $4_1 = $1_1;
      $1_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
      $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
      if (($4_1 | 0) >= ($1_1 | 0)) {
       break label$13
      }
      $4_1 = $16($1_1 << 1);
      $6_1 = HEAP32[$2_1 + 20 >> 2];
      if ($6_1) {
       $1602($4_1, $6_1, HEAP32[$2_1 + 12 >> 2] << 1);
       $17(HEAP32[$2_1 + 20 >> 2]);
      }
      HEAP32[$2_1 + 16 >> 2] = $1_1;
      HEAP32[$2_1 + 20 >> 2] = $4_1;
     }
     HEAP32[$2_1 + 12 >> 2] = 0;
     HEAP32[$0_1 + 12 >> 2] = HEAP32[$0_1 + 12 >> 2] + HEAP32[$2_1 + 24 >> 2];
    }
    $1_1 = $3;
    $3 = $9 + 1 | 0;
    if (($3 | 0) < HEAP32[$0_1 + 4 >> 2]) {
     continue
    }
    break;
   };
  }
  if ($1_1) {
   $17($1_1)
  }
 }
 
 function $426($0_1) {
  $0_1 = $1604($0_1, 0, 120);
  HEAP16[$0_1 + 72 >> 1] = 65535;
  HEAP32[$0_1 + 68 >> 2] = 1065353216;
  HEAP32[$0_1 + 56 >> 2] = 2139095039;
  HEAP32[$0_1 + 20 >> 2] = 3;
  HEAP32[$0_1 + 24 >> 2] = 1;
  HEAP8[$0_1 + 8 | 0] = 1;
  return $0_1;
 }
 
 function $428($0_1) {
  var $1_1 = 0;
  $429($0_1);
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  return $0_1;
 }
 
 function $429($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $430($0_1);
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  HEAP8[$0_1 + 18 | 0] = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 0;
  if (HEAP32[$0_1 + 52 >> 2] > 0) {
   $1_1 = 0;
   while (1) {
    $2_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + ($1_1 << 2) >> 2];
    if ($2_1) {
     $471($2_1);
     $17($2_1);
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < HEAP32[$0_1 + 52 >> 2]) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 52 >> 2] = 0;
   HEAP32[$0_1 + 56 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 60 >> 2] = 0;
  }
  HEAP8[$0_1 + 17 | 0] = 0;
 }
 
 function $430($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $1_1 = HEAP32[$0_1 + 76 >> 2];
  if (($1_1 | 0) > 0) {
   while (1) {
    $1_1 = Math_imul($2_1, 120);
    $3 = $1_1 + HEAP32[$0_1 + 84 >> 2] | 0;
    $4_1 = HEAP32[$3 >> 2];
    if (!(!$4_1 | !HEAPU8[$3 + 8 | 0])) {
     $17($4_1);
     HEAP32[$1_1 + HEAP32[$0_1 + 84 >> 2] >> 2] = 0;
    }
    $2_1 = $2_1 + 1 | 0;
    $1_1 = HEAP32[$0_1 + 76 >> 2];
    if (($2_1 | 0) < ($1_1 | 0)) {
     continue
    }
    break;
   }
  }
  $3 = HEAP32[$0_1 + 52 >> 2];
  if (($3 | 0) > 0) {
   $4_1 = HEAP32[$0_1 + 84 >> 2];
   $1_1 = $4_1 + Math_imul($1_1, 120) | 0;
   $8 = HEAP32[$0_1 + 60 >> 2];
   $2_1 = 0;
   while (1) {
    $5_1 = ($2_1 << 2) + $8 | 0;
    $6_1 = HEAP32[$5_1 >> 2];
    $7_1 = HEAP32[$6_1 + 52 >> 2];
    if (!($7_1 >>> 0 < $4_1 >>> 0 | $1_1 >>> 0 <= $7_1 >>> 0)) {
     HEAP32[$6_1 + 52 >> 2] = 0;
     HEAP16[HEAP32[$5_1 >> 2] + 56 >> 1] = 0;
    }
    $2_1 = $2_1 + 1 | 0;
    if (($3 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 76 >> 2] = 0;
   HEAP32[$0_1 + 80 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 64 >> 2] = 0;
   HEAP32[$0_1 + 68 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 72 >> 2] = 0;
  }
  HEAP32[$0_1 + 1120 >> 2] = -1;
  HEAP32[$0_1 + 1124 >> 2] = -1;
 }
 
 function $431($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  HEAP8[$0_1 + 18 | 0] = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 0;
 }
 
 function $432($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  if (HEAP32[$0_1 + 52 >> 2] > 0) {
   while (1) {
    $2_1 = HEAP32[HEAP32[$0_1 + 60 >> 2] + ($1_1 << 2) >> 2];
    if ($2_1) {
     $471($2_1);
     $17($2_1);
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) < HEAP32[$0_1 + 52 >> 2]) {
     continue
    }
    break;
   }
  }
  $1_1 = HEAP32[$0_1 + 60 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 52 >> 2] = 0;
   HEAP32[$0_1 + 56 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 60 >> 2] = 0;
  }
  HEAP8[$0_1 + 17 | 0] = 0;
 }
 
 function $434($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0);
  $1_1 = global$0 - 128 | 0;
  global$0 = $1_1;
  if (!HEAP32[$0_1 + 76 >> 2]) {
   $426($1_1 + 8 | 0);
   HEAP8[$1_1 + 36 | 0] = 1;
   HEAP32[$1_1 + 28 >> 2] = 1;
   HEAP32[$1_1 + 32 >> 2] = 1;
   if (HEAPF32[$1_1 + 24 >> 2] <= Math_fround(0.0)) {
    HEAP32[$1_1 + 24 >> 2] = 1095761920
   }
   if (!HEAPU8[$1_1 + 82 | 0]) {
    $2_1 = $1_1 + 82 | 0;
    $3 = HEAPF32[$1_1 + 24 >> 2];
    label$4 : {
     if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
      $4_1 = ~~$3;
      break label$4;
     }
     $4_1 = -2147483648;
    }
    HEAP32[$1_1 >> 2] = $4_1;
    $21($2_1, 40, 1268, $1_1);
   }
   $4_1 = $1_1 + 52 | 0;
   $3 = HEAPF32[$1_1 + 24 >> 2];
   $5_1 = Math_fround($3 / Math_fround(13.0));
   label$6 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$5_1;
     break label$6;
    }
    $2_1 = -2147483648;
   }
   HEAPF32[$4_1 >> 2] = $2_1 | 0;
   HEAP16[$1_1 + 80 >> 1] = 133;
   $2_1 = HEAP32[$1_1 + 56 >> 2];
   $435($0_1, $3, $1_1 + 8 | 0, $2_1 ? $2_1 : 21640);
  }
  $2_1 = HEAP32[$0_1 + 1112 >> 2];
  if (!$2_1) {
   HEAP32[18395] = 13;
   $2_1 = 73580;
  }
  $0_1 = FUNCTION_TABLE[HEAP32[$2_1 >> 2]]($0_1) | 0;
  global$0 = $1_1 + 128 | 0;
  return $0_1 | 0;
 }
 
 function $435($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0;
  $6_1 = 36160;
  $7_1 = $16(($1697(36160) + 4 | 0) / 5 << 2);
  $4_1 = HEAPU8[36160];
  if ($4_1) {
   $5_1 = $7_1;
   while (1) {
    $4_1 = $4_1 << 24 >> 24;
    $8 = (($4_1 | 0) > 91 ? -36 : -35) + $4_1 | 0;
    $4_1 = HEAP8[$6_1 + 1 | 0];
    $9 = (($4_1 | 0) > 91 ? -36 : -35) + $4_1 | 0;
    $4_1 = HEAP8[$6_1 + 2 | 0];
    $12_1 = (($4_1 | 0) > 91 ? -36 : -35) + $4_1 | 0;
    $4_1 = HEAP8[$6_1 + 3 | 0];
    $13 = (($4_1 | 0) > 91 ? -36 : -35) + $4_1 | 0;
    $4_1 = HEAP8[$6_1 + 4 | 0];
    $4_1 = $8 + Math_imul($9 + Math_imul($12_1 + Math_imul($13 + Math_imul((($4_1 | 0) > 91 ? -36 : -35) + $4_1 | 0, 85) | 0, 85) | 0, 85) | 0, 85) | 0;
    HEAP8[$5_1 | 0] = $4_1;
    HEAP8[$5_1 + 1 | 0] = $4_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $4_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $4_1 >>> 24;
    $4_1 = HEAPU8[$6_1 + 5 | 0];
    $6_1 = $6_1 + 5 | 0;
    $5_1 = $5_1 + 4 | 0;
    if ($4_1) {
     continue
    }
    break;
   };
  }
  $15_1 = $0_1;
  $12_1 = $2_1;
  $13 = $3;
  $10_1 = global$0 - 240 | 0;
  global$0 = $10_1;
  $0_1 = HEAPU8[$7_1 + 8 | 0] | HEAPU8[$7_1 + 9 | 0] << 8 | (HEAPU8[$7_1 + 10 | 0] << 16 | HEAPU8[$7_1 + 11 | 0] << 24);
  $14 = $0_1 << 24 | ($0_1 & 65280) << 8 | ($0_1 >>> 8 & 65280 | $0_1 >>> 24);
  $9 = $16($14);
  $0_1 = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8 | (HEAPU8[$7_1 + 2 | 0] << 16 | HEAPU8[$7_1 + 3 | 0] << 24);
  label$1 : {
   if (($0_1 << 24 | ($0_1 & 65280) << 8 | ($0_1 >>> 8 & 65280 | $0_1 >>> 24)) != 1471938560) {
    break label$1
   }
   $0_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8 | (HEAPU8[$7_1 + 6 | 0] << 16 | HEAPU8[$7_1 + 7 | 0] << 24);
   if ($0_1 << 24 | ($0_1 & 65280) << 8 | ($0_1 >>> 8 & 65280 | $0_1 >>> 24)) {
    break label$1
   }
   $0_1 = HEAPU8[$7_1 + 8 | 0] | HEAPU8[$7_1 + 9 | 0] << 8 | (HEAPU8[$7_1 + 10 | 0] << 16 | HEAPU8[$7_1 + 11 | 0] << 24);
   HEAP32[23912] = $9;
   HEAP32[23909] = $7_1;
   HEAP32[23911] = $9;
   $11_1 = ($0_1 << 24 | ($0_1 & 65280) << 8 | ($0_1 >>> 8 & 65280 | $0_1 >>> 24)) + $9 | 0;
   HEAP32[23910] = $11_1;
   $3 = $11_1 + 1 | 0;
   $2_1 = $9;
   $4_1 = $7_1 + 16 | 0;
   while (1) {
    $6_1 = $2_1;
    $5_1 = $4_1;
    $4_1 = HEAPU8[$4_1 | 0];
    label$3 : {
     if ($4_1 >>> 0 >= 32) {
      if ($4_1 << 24 >> 24 < 0) {
       $2_1 = $4_1 - 127 | 0;
       $0_1 = $2_1 + $6_1 | 0;
       label$6 : {
        if ($0_1 >>> 0 > $11_1 >>> 0) {
         break label$6
        }
        $0_1 = $3;
        $4_1 = (HEAPU8[$5_1 + 1 | 0] ^ -1) + $6_1 | 0;
        if ($4_1 >>> 0 < $9 >>> 0) {
         break label$6
        }
        $0_1 = $6_1;
        if (!$2_1) {
         break label$6
        }
        while (1) {
         HEAP8[$0_1 | 0] = HEAPU8[$4_1 | 0];
         $4_1 = $4_1 + 1 | 0;
         $0_1 = $0_1 + 1 | 0;
         $2_1 = $2_1 - 1 | 0;
         if ($2_1) {
          continue
         }
         break;
        };
       }
       $2_1 = $0_1;
       $0_1 = $5_1 + 2 | 0;
       break label$3;
      }
      if ($4_1 >>> 0 >= 64) {
       $2_1 = HEAPU8[$5_1 + 2 | 0] + 1 | 0;
       $0_1 = $2_1 + $6_1 | 0;
       label$9 : {
        if ($0_1 >>> 0 > $11_1 >>> 0) {
         break label$9
        }
        $0_1 = $3;
        $4_1 = ($6_1 - (HEAPU8[$5_1 + 1 | 0] | $4_1 << 8) | 0) + 16383 | 0;
        if ($4_1 >>> 0 < $9 >>> 0) {
         break label$9
        }
        while (1) {
         HEAP8[$6_1 | 0] = HEAPU8[$4_1 | 0];
         $4_1 = $4_1 + 1 | 0;
         $6_1 = $6_1 + 1 | 0;
         $0_1 = $6_1;
         $2_1 = $2_1 - 1 | 0;
         if ($2_1) {
          continue
         }
         break;
        };
       }
       $2_1 = $0_1;
       $0_1 = $5_1 + 3 | 0;
       break label$3;
      }
      $0_1 = $4_1 - 31 | 0;
      $2_1 = $0_1 + $6_1 | 0;
      label$11 : {
       if ($11_1 >>> 0 >= $2_1 >>> 0) {
        $4_1 = $5_1 + 1 | 0;
        $8 = $3;
        if ($4_1 >>> 0 < $7_1 >>> 0) {
         break label$11
        }
        $1602($6_1, $4_1, $0_1);
       }
       $8 = $2_1;
      }
      $2_1 = $8;
      $0_1 = ($5_1 + HEAPU8[$5_1 | 0] | 0) - 30 | 0;
      break label$3;
     }
     if ($4_1 >>> 0 >= 24) {
      $2_1 = HEAPU8[$5_1 + 3 | 0] + 1 | 0;
      $0_1 = $2_1 + $6_1 | 0;
      label$14 : {
       if ($0_1 >>> 0 > $11_1 >>> 0) {
        break label$14
       }
       $0_1 = $3;
       $4_1 = ($6_1 - (HEAPU8[$5_1 + 2 | 0] | $4_1 << 16 | HEAPU8[$5_1 + 1 | 0] << 8) | 0) + 1572863 | 0;
       if ($4_1 >>> 0 < $9 >>> 0) {
        break label$14
       }
       while (1) {
        HEAP8[$6_1 | 0] = HEAPU8[$4_1 | 0];
        $4_1 = $4_1 + 1 | 0;
        $6_1 = $6_1 + 1 | 0;
        $0_1 = $6_1;
        $2_1 = $2_1 - 1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
      }
      $2_1 = $0_1;
      $0_1 = $5_1 + 4 | 0;
      break label$3;
     }
     if ($4_1 >>> 0 >= 16) {
      $2_1 = (HEAPU8[$5_1 + 4 | 0] | HEAPU8[$5_1 + 3 | 0] << 8) + 1 | 0;
      $0_1 = $2_1 + $6_1 | 0;
      label$17 : {
       if ($0_1 >>> 0 > $11_1 >>> 0) {
        break label$17
       }
       $0_1 = $3;
       $4_1 = ($6_1 - (HEAPU8[$5_1 + 2 | 0] | $4_1 << 16 | HEAPU8[$5_1 + 1 | 0] << 8) | 0) + 1048575 | 0;
       if ($4_1 >>> 0 < $9 >>> 0) {
        break label$17
       }
       while (1) {
        HEAP8[$6_1 | 0] = HEAPU8[$4_1 | 0];
        $4_1 = $4_1 + 1 | 0;
        $6_1 = $6_1 + 1 | 0;
        $0_1 = $6_1;
        $2_1 = $2_1 - 1 | 0;
        if ($2_1) {
         continue
        }
        break;
       };
      }
      $2_1 = $0_1;
      $0_1 = $5_1 + 5 | 0;
      break label$3;
     }
     if ($4_1 >>> 0 >= 8) {
      $0_1 = (HEAPU8[$5_1 + 1 | 0] | $4_1 << 8) - 2047 | 0;
      $2_1 = $0_1 + $6_1 | 0;
      label$201 : {
       if ($11_1 >>> 0 >= $2_1 >>> 0) {
        $4_1 = $5_1 + 2 | 0;
        $8 = $3;
        if ($4_1 >>> 0 < $7_1 >>> 0) {
         break label$201
        }
        $1602($6_1, $4_1, $0_1);
       }
       $8 = $2_1;
      }
      $2_1 = $8;
      $0_1 = ($5_1 + (HEAPU8[$5_1 + 1 | 0] | HEAPU8[$5_1 | 0] << 8) | 0) - 2045 | 0;
      break label$3;
     }
     $0_1 = $5_1;
     label$22 : {
      switch ($4_1 - 4 | 0) {
      case 3:
       $0_1 = (HEAPU8[$5_1 + 2 | 0] | HEAPU8[$5_1 + 1 | 0] << 8) + 1 | 0;
       $2_1 = $0_1 + $6_1 | 0;
       label$25 : {
        if ($11_1 >>> 0 >= $2_1 >>> 0) {
         $4_1 = $5_1 + 3 | 0;
         $8 = $3;
         if ($4_1 >>> 0 < $7_1 >>> 0) {
          break label$25
         }
         $1602($6_1, $4_1, $0_1);
        }
        $8 = $2_1;
       }
       $2_1 = $8;
       $0_1 = ($5_1 + (HEAPU8[$5_1 + 2 | 0] | HEAPU8[$5_1 + 1 | 0] << 8) | 0) + 4 | 0;
       break label$3;
      case 2:
       $2_1 = HEAPU8[$5_1 + 4 | 0] + 1 | 0;
       $0_1 = $2_1 + $6_1 | 0;
       label$27 : {
        if ($0_1 >>> 0 > $11_1 >>> 0) {
         break label$27
        }
        $0_1 = $3;
        $4_1 = ((HEAPU8[$5_1 + 3 | 0] | HEAPU8[$5_1 + 1 | 0] << 16 | HEAPU8[$5_1 + 2 | 0] << 8) ^ -1) + $6_1 | 0;
        if ($4_1 >>> 0 < $9 >>> 0) {
         break label$27
        }
        while (1) {
         HEAP8[$6_1 | 0] = HEAPU8[$4_1 | 0];
         $4_1 = $4_1 + 1 | 0;
         $6_1 = $6_1 + 1 | 0;
         $0_1 = $6_1;
         $2_1 = $2_1 - 1 | 0;
         if ($2_1) {
          continue
         }
         break;
        };
       }
       $2_1 = $0_1;
       $0_1 = $5_1 + 5 | 0;
       break label$3;
      case 0:
       break label$22;
      default:
       break label$3;
      };
     }
     $2_1 = (HEAPU8[$5_1 + 5 | 0] | HEAPU8[$5_1 + 4 | 0] << 8) + 1 | 0;
     $0_1 = $2_1 + $6_1 | 0;
     label$29 : {
      if ($0_1 >>> 0 > $11_1 >>> 0) {
       break label$29
      }
      $0_1 = $3;
      $4_1 = ((HEAPU8[$5_1 + 3 | 0] | HEAPU8[$5_1 + 1 | 0] << 16 | HEAPU8[$5_1 + 2 | 0] << 8) ^ -1) + $6_1 | 0;
      if ($4_1 >>> 0 < $9 >>> 0) {
       break label$29
      }
      while (1) {
       HEAP8[$6_1 | 0] = HEAPU8[$4_1 | 0];
       $4_1 = $4_1 + 1 | 0;
       $6_1 = $6_1 + 1 | 0;
       $0_1 = $6_1;
       $2_1 = $2_1 - 1 | 0;
       if ($2_1) {
        continue
       }
       break;
      };
     }
     $2_1 = $0_1;
     $0_1 = $5_1 + 6 | 0;
    }
    $4_1 = $0_1;
    if (($4_1 | 0) != ($5_1 | 0) & $2_1 >>> 0 <= $11_1 >>> 0) {
     continue
    }
    break;
   };
   HEAP32[23912] = $2_1;
  }
  label$32 : {
   if ($12_1) {
    $1602($10_1, $12_1, 120);
    break label$32;
   }
   $426($10_1);
  }
  HEAP8[$10_1 + 8 | 0] = 1;
  $1602($10_1 + 120 | 0, $10_1, 120);
  HEAP32[$10_1 + 124 >> 2] = $14;
  HEAP32[$10_1 + 120 >> 2] = $9;
  HEAPF32[$10_1 + 136 >> 2] = $1_1 > Math_fround(0.0) ? $1_1 : HEAPF32[$10_1 + 136 >> 2];
  if ($13) {
   HEAP32[$10_1 + 168 >> 2] = $13
  }
  $0_1 = $438($15_1, $10_1 + 120 | 0);
  global$0 = $10_1 + 240 | 0;
  $17($7_1);
  return $0_1;
 }
 
 function $436($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = Math_fround(0), $48_1 = 0, $49 = 0, $50_1 = Math_fround(0), $51_1 = Math_fround(0), $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = Math_fround(0), $57_1 = Math_fround(0), $58_1 = Math_fround(0), $59_1 = Math_fround(0), $60_1 = 0, $61 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = Math_fround(0), $66 = 0, $67_1 = Math_fround(0), $68_1 = Math_fround(0), $69_1 = Math_fround(0), $70_1 = Math_fround(0), $71_1 = Math_fround(0), $72_1 = Math_fround(0), $73_1 = 0, $74 = 0, $75_1 = 0, $76_1 = 0, $77 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83 = 0, $84 = Math_fround(0), $85_1 = Math_fround(0);
  $10_1 = global$0 - 640 | 0;
  global$0 = $10_1;
  if (HEAP32[$0_1 + 1120 >> 2] < 0) {
   $1_1 = HEAP32[$0_1 + 68 >> 2];
   $2_1 = HEAP32[$0_1 + 64 >> 2];
   label$2 : {
    if (!(HEAPU8[$0_1 | 0] & 2)) {
     label$4 : {
      if (($2_1 | 0) != ($1_1 | 0)) {
       break label$4
      }
      $3 = $1_1;
      $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
      $2_1 = $2_1 + 1 | 0;
      $1_1 = ($2_1 | 0) < ($1_1 | 0) ? $1_1 : $2_1;
      if (($3 | 0) >= ($1_1 | 0)) {
       break label$4
      }
      $2_1 = $16(Math_imul($1_1, 28));
      $3 = HEAP32[$0_1 + 72 >> 2];
      if ($3) {
       $1602($2_1, $3, Math_imul(HEAP32[$0_1 + 64 >> 2], 28));
       $17(HEAP32[$0_1 + 72 >> 2]);
      }
      HEAP32[$0_1 + 68 >> 2] = $1_1;
      HEAP32[$0_1 + 72 >> 2] = $2_1;
     }
     $1_1 = HEAP32[$0_1 + 72 >> 2] + Math_imul(HEAP32[$0_1 + 64 >> 2], 28) | 0;
     HEAP16[$1_1 >> 1] = 245;
     $2_1 = 27;
     break label$2;
    }
    label$8 : {
     if (($2_1 | 0) != ($1_1 | 0)) {
      break label$8
     }
     $3 = $1_1;
     $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
     $2_1 = $2_1 + 1 | 0;
     $1_1 = ($2_1 | 0) < ($1_1 | 0) ? $1_1 : $2_1;
     if (($3 | 0) >= ($1_1 | 0)) {
      break label$8
     }
     $2_1 = $16(Math_imul($1_1, 28));
     $3 = HEAP32[$0_1 + 72 >> 2];
     if ($3) {
      $1602($2_1, $3, Math_imul(HEAP32[$0_1 + 64 >> 2], 28));
      $17(HEAP32[$0_1 + 72 >> 2]);
     }
     HEAP32[$0_1 + 68 >> 2] = $1_1;
     HEAP32[$0_1 + 72 >> 2] = $2_1;
    }
    $1_1 = HEAP32[$0_1 + 72 >> 2] + Math_imul(HEAP32[$0_1 + 64 >> 2], 28) | 0;
    HEAP16[$1_1 >> 1] = 2;
    $2_1 = 2;
   }
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$1_1 + 12 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = -1;
   HEAP16[$1_1 + 2 >> 1] = $2_1;
   $2_1 = $1_1 + 16 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 24 >> 2] = 0;
   $1_1 = HEAP32[$0_1 + 64 >> 2];
   HEAP32[$0_1 + 1120 >> 2] = $1_1;
   HEAP32[$0_1 + 64 >> 2] = $1_1 + 1;
  }
  if (!(HEAPU8[$0_1 | 0] & 4 | HEAP32[$0_1 + 1124 >> 2] >= 0)) {
   $2_1 = HEAP32[$0_1 + 64 >> 2];
   $1_1 = HEAP32[$0_1 + 68 >> 2];
   label$13 : {
    if (($2_1 | 0) != ($1_1 | 0)) {
     break label$13
    }
    $3 = $1_1;
    $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = $2_1 + 1 | 0;
    $1_1 = ($2_1 | 0) < ($1_1 | 0) ? $1_1 : $2_1;
    if (($3 | 0) >= ($1_1 | 0)) {
     break label$13
    }
    $2_1 = $16(Math_imul($1_1, 28));
    $3 = HEAP32[$0_1 + 72 >> 2];
    if ($3) {
     $1602($2_1, $3, Math_imul(HEAP32[$0_1 + 64 >> 2], 28));
     $17(HEAP32[$0_1 + 72 >> 2]);
    }
    HEAP32[$0_1 + 68 >> 2] = $1_1;
    HEAP32[$0_1 + 72 >> 2] = $2_1;
   }
   $1_1 = HEAP32[$0_1 + 72 >> 2] + Math_imul(HEAP32[$0_1 + 64 >> 2], 28) | 0;
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$1_1 + 12 >> 2] = 0;
   HEAP32[$1_1 >> 2] = 4194369;
   HEAP32[$1_1 + 4 >> 2] = -1;
   $2_1 = $1_1 + 16 | 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$1_1 + 24 >> 2] = 0;
   $1_1 = HEAP32[$0_1 + 64 >> 2];
   HEAP32[$0_1 + 1124 >> 2] = $1_1;
   HEAP32[$0_1 + 64 >> 2] = $1_1 + 1;
  }
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 36 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 44 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  HEAP8[$0_1 + 18 | 0] = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 0;
  $2_1 = 0;
  $37 = HEAP32[$0_1 + 76 >> 2];
  if (($37 | 0) > 0) {
   $1_1 = $16(Math_imul(($37 | 0) <= 8 ? 8 : $37, 196))
  } else {
   $1_1 = 0
  }
  $38_1 = HEAP32[$0_1 + 52 >> 2];
  if (($38_1 | 0) > 0) {
   $2_1 = $16(Math_imul(($38_1 | 0) <= 8 ? 8 : $38_1, 24))
  }
  $35_1 = $1604($1_1, 0, Math_imul($37, 196));
  $17_1 = $1604($2_1, 0, Math_imul($38_1, 24));
  label$5 : {
   label$6 : {
    $4_1 = HEAP32[$0_1 + 76 >> 2] <= 0;
    if ($4_1) {
     $1_1 = $4_1;
     break label$6;
    }
    $3 = 0;
    while (1) {
     label$80 : {
      $60_1 = $4_1;
      $45_1 = HEAP32[$0_1 + 84 >> 2] + Math_imul($3, 120) | 0;
      $1_1 = HEAP32[$45_1 + 116 >> 2];
      $23_1 = Math_imul($3, 196) + $35_1 | 0;
      HEAP32[$23_1 + 160 >> 2] = -1;
      $5_1 = HEAP32[$0_1 + 52 >> 2];
      if (($5_1 | 0) <= 0) {
       break label$80
      }
      $28_1 = $3;
      $54_1 = $23_1 + 160 | 0;
      $9 = HEAP32[$0_1 + 60 >> 2];
      $4_1 = 0;
      $3 = -1;
      while (1) {
       $2_1 = $3;
       if (HEAP32[$9 + ($4_1 << 2) >> 2] == ($1_1 | 0)) {
        HEAP32[$54_1 >> 2] = $4_1;
        $2_1 = $4_1;
       }
       $4_1 = $4_1 + 1 | 0;
       if (($4_1 | 0) < ($5_1 | 0)) {
        $3 = $2_1;
        if (($2_1 | 0) == -1) {
         continue
        }
       }
       break;
      };
      if (($2_1 | 0) == -1) {
       break label$80
      }
      $5_1 = HEAP32[$45_1 + 12 >> 2];
      label$131 : {
       label$14 : {
        label$15 : {
         $20_1 = HEAP32[$45_1 >> 2];
         $1_1 = HEAPU8[$20_1 | 0];
         label$16 : {
          if (!(($1_1 | 0) != 49 | HEAPU8[$20_1 + 1 | 0] | HEAPU8[$20_1 + 2 | 0] | HEAPU8[$20_1 + 3 | 0])) {
           break label$16
          }
          $2_1 = ($1_1 | 0) != 116;
          if (!($2_1 | HEAPU8[$20_1 + 1 | 0] != 121 | HEAPU8[$20_1 + 2 | 0] != 112) & HEAPU8[$20_1 + 3 | 0] == 49) {
           break label$16
          }
          label$19 : {
           if ($1_1) {
            if (($1_1 | 0) != 79) {
             break label$19
            }
            if (!(HEAPU8[$20_1 + 1 | 0] != 84 | HEAPU8[$20_1 + 2 | 0] != 84) & HEAPU8[$20_1 + 3 | 0] == 79) {
             break label$16
            }
            if ($1_1) {
             break label$19
            }
           }
           if (HEAPU8[$20_1 + 2 | 0] | HEAPU8[$20_1 + 1 | 0] != 1) {
            break label$19
           }
           if (!HEAPU8[$20_1 + 3 | 0]) {
            break label$16
           }
          }
          if ($2_1) {
           $4_1 = -1;
           break label$131;
          }
          $4_1 = -1;
          label$23 : {
           $1_1 = HEAPU8[$20_1 + 1 | 0];
           switch ($1_1 - 114 | 0) {
           case 2:
            break label$14;
           case 0:
            break label$23;
           default:
            break label$131;
           };
          }
          if (HEAPU8[$20_1 + 2 | 0] != 117 | HEAPU8[$20_1 + 3 | 0] != 101) {
           break label$15
          }
         }
         $4_1 = $5_1 ? -1 : 0;
         break label$131;
        }
        if (($1_1 | 0) == 116) {
         break label$14
        }
        break label$131;
       }
       if (HEAPU8[$20_1 + 2 | 0] != 99 | HEAPU8[$20_1 + 3 | 0] != 102) {
        break label$131
       }
       $1_1 = HEAPU8[$20_1 + 4 | 0] | HEAPU8[$20_1 + 5 | 0] << 8 | (HEAPU8[$20_1 + 6 | 0] << 16 | HEAPU8[$20_1 + 7 | 0] << 24);
       $1_1 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
       if (!(($1_1 | 0) == 131072 | ($1_1 | 0) == 65536)) {
        break label$131
       }
       $1_1 = HEAPU8[$20_1 + 8 | 0] | HEAPU8[$20_1 + 9 | 0] << 8 | (HEAPU8[$20_1 + 10 | 0] << 16 | HEAPU8[$20_1 + 11 | 0] << 24);
       if (($1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24)) <= ($5_1 | 0)) {
        break label$131
       }
       $1_1 = ($20_1 + ($5_1 << 2) | 0) + 12 | 0;
       $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
       $4_1 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
      }
      HEAP32[$23_1 + 52 >> 2] = 0;
      HEAP32[$23_1 + 56 >> 2] = 0;
      HEAP32[$23_1 + 8 >> 2] = $4_1;
      HEAP32[$23_1 + 4 >> 2] = $20_1;
      HEAP32[$23_1 + 60 >> 2] = 0;
      $33_1 = $4_1 + 12 | 0;
      $9 = 0;
      $1_1 = $4_1 + $20_1 | 0;
      $31_1 = $1_1 + 4 | 0;
      $2_1 = HEAPU8[$31_1 | 0] << 8 | HEAPU8[$1_1 + 5 | 0];
      $34_1 = 0;
      label$27 : {
       if (!$2_1) {
        break label$27
       }
       while (1) {
        $1_1 = $20_1 + ($33_1 + ($9 << 4) | 0) | 0;
        label$29 : {
         if (!(HEAPU8[$1_1 | 0] != 99 | HEAPU8[$1_1 + 1 | 0] != 109 | HEAPU8[$1_1 + 2 | 0] != 97)) {
          $3 = 1;
          if (HEAPU8[$1_1 + 3 | 0] != 112) {
           break label$29
          }
          $1_1 = HEAPU8[$1_1 + 8 | 0] | HEAPU8[$1_1 + 9 | 0] << 8 | (HEAPU8[$1_1 + 10 | 0] << 16 | HEAPU8[$1_1 + 11 | 0] << 24);
          $5_1 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
          $3 = 0;
          break label$29;
         }
         $3 = 1;
        }
        if (!$3) {
         $34_1 = $5_1;
         break label$27;
        }
        $9 = $9 + 1 | 0;
        if (($2_1 | 0) != ($9 | 0)) {
         continue
        }
        break;
       };
       $34_1 = 0;
      }
      $9 = 0;
      $3 = 0;
      label$32 : {
       if (!$2_1) {
        break label$32
       }
       label$34 : {
        while (1) {
         $1_1 = $20_1 + ($33_1 + ($9 << 4) | 0) | 0;
         label$36 : {
          if (!(HEAPU8[$1_1 | 0] != 108 | HEAPU8[$1_1 + 1 | 0] != 111 | HEAPU8[$1_1 + 2 | 0] != 99)) {
           $3 = 1;
           if (HEAPU8[$1_1 + 3 | 0] != 97) {
            break label$36
           }
           $1_1 = HEAPU8[$1_1 + 8 | 0] | HEAPU8[$1_1 + 9 | 0] << 8 | (HEAPU8[$1_1 + 10 | 0] << 16 | HEAPU8[$1_1 + 11 | 0] << 24);
           $5_1 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
           $3 = 0;
           break label$36;
          }
          $3 = 1;
         }
         if (!$3) {
          break label$34
         }
         $9 = $9 + 1 | 0;
         if (($2_1 | 0) != ($9 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
        break label$32;
       }
       $3 = $5_1;
      }
      $9 = $3;
      HEAP32[$23_1 + 16 >> 2] = $3;
      $5_1 = 0;
      $2_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
      $1_1 = 0;
      label$38 : {
       if (!$2_1) {
        break label$38
       }
       while (1) {
        $1_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
        label$40 : {
         if (!(HEAPU8[$1_1 | 0] != 104 | HEAPU8[$1_1 + 1 | 0] != 101 | HEAPU8[$1_1 + 2 | 0] != 97)) {
          $4_1 = 1;
          if (HEAPU8[$1_1 + 3 | 0] != 100) {
           break label$40
          }
          $1_1 = HEAPU8[$1_1 + 8 | 0] | HEAPU8[$1_1 + 9 | 0] << 8 | (HEAPU8[$1_1 + 10 | 0] << 16 | HEAPU8[$1_1 + 11 | 0] << 24);
          $3 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
          $4_1 = 0;
          break label$40;
         }
         $4_1 = 1;
        }
        if (!$4_1) {
         $1_1 = $3;
         break label$38;
        }
        $1_1 = $5_1 + 1 | 0;
        $5_1 = $1_1;
        if (($2_1 | 0) != ($1_1 | 0)) {
         continue
        }
        break;
       };
       $1_1 = 0;
      }
      $7_1 = $1_1;
      HEAP32[$23_1 + 20 >> 2] = $1_1;
      $5_1 = 0;
      $2_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
      label$43 : {
       if (!$2_1) {
        $3 = 0;
        break label$43;
       }
       label$45 : {
        while (1) {
         $1_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
         label$47 : {
          if (!(HEAPU8[$1_1 | 0] != 103 | HEAPU8[$1_1 + 1 | 0] != 108 | HEAPU8[$1_1 + 2 | 0] != 121)) {
           $4_1 = 1;
           if (HEAPU8[$1_1 + 3 | 0] != 102) {
            break label$47
           }
           $1_1 = HEAPU8[$1_1 + 8 | 0] | HEAPU8[$1_1 + 9 | 0] << 8 | (HEAPU8[$1_1 + 10 | 0] << 16 | HEAPU8[$1_1 + 11 | 0] << 24);
           $3 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
           $4_1 = 0;
           break label$47;
          }
          $4_1 = 1;
         }
         if (!$4_1) {
          break label$45
         }
         $1_1 = $5_1 + 1 | 0;
         $5_1 = $1_1;
         if (($2_1 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
       }
      }
      $1_1 = $3;
      HEAP32[$23_1 + 24 >> 2] = $1_1;
      $5_1 = 0;
      $4_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
      $2_1 = 0;
      label$49 : {
       if (!$4_1) {
        break label$49
       }
       while (1) {
        $2_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
        label$51 : {
         if (!(HEAPU8[$2_1 | 0] != 104 | HEAPU8[$2_1 + 1 | 0] != 104 | HEAPU8[$2_1 + 2 | 0] != 101)) {
          $11_1 = 1;
          if (HEAPU8[$2_1 + 3 | 0] != 97) {
           break label$51
          }
          $2_1 = HEAPU8[$2_1 + 8 | 0] | HEAPU8[$2_1 + 9 | 0] << 8 | (HEAPU8[$2_1 + 10 | 0] << 16 | HEAPU8[$2_1 + 11 | 0] << 24);
          $3 = $2_1 << 24 | ($2_1 & 65280) << 8 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
          $11_1 = 0;
          break label$51;
         }
         $11_1 = 1;
        }
        if (!$11_1) {
         $2_1 = $3;
         break label$49;
        }
        $2_1 = $5_1 + 1 | 0;
        $5_1 = $2_1;
        if (($2_1 | 0) != ($4_1 | 0)) {
         continue
        }
        break;
       };
       $2_1 = 0;
      }
      $11_1 = $2_1;
      HEAP32[$23_1 + 28 >> 2] = $2_1;
      $5_1 = 0;
      $4_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
      label$54 : {
       if (!$4_1) {
        $3 = 0;
        break label$54;
       }
       label$56 : {
        while (1) {
         $2_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
         label$58 : {
          if (!(HEAPU8[$2_1 | 0] != 104 | HEAPU8[$2_1 + 1 | 0] != 109 | HEAPU8[$2_1 + 2 | 0] != 116)) {
           $27_1 = 1;
           if (HEAPU8[$2_1 + 3 | 0] != 120) {
            break label$58
           }
           $2_1 = HEAPU8[$2_1 + 8 | 0] | HEAPU8[$2_1 + 9 | 0] << 8 | (HEAPU8[$2_1 + 10 | 0] << 16 | HEAPU8[$2_1 + 11 | 0] << 24);
           $3 = $2_1 << 24 | ($2_1 & 65280) << 8 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
           $27_1 = 0;
           break label$58;
          }
          $27_1 = 1;
         }
         if (!$27_1) {
          break label$56
         }
         $2_1 = $5_1 + 1 | 0;
         $5_1 = $2_1;
         if (($2_1 | 0) != ($4_1 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
       }
      }
      $2_1 = $3;
      HEAP32[$23_1 + 32 >> 2] = $2_1;
      $5_1 = 0;
      $25_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
      $5_1 = 0;
      label$60 : {
       if (!$25_1) {
        break label$60
       }
       while (1) {
        $4_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
        label$62 : {
         if (!(HEAPU8[$4_1 | 0] != 107 | HEAPU8[$4_1 + 1 | 0] != 101 | HEAPU8[$4_1 + 2 | 0] != 114)) {
          $27_1 = 1;
          if (HEAPU8[$4_1 + 3 | 0] != 110) {
           break label$62
          }
          $3 = HEAPU8[$4_1 + 8 | 0] | HEAPU8[$4_1 + 9 | 0] << 8 | (HEAPU8[$4_1 + 10 | 0] << 16 | HEAPU8[$4_1 + 11 | 0] << 24);
          $3 = $3 << 24 | ($3 & 65280) << 8 | ($3 >>> 8 & 65280 | $3 >>> 24);
          $27_1 = 0;
          break label$62;
         }
         $27_1 = 1;
        }
        if (!$27_1) {
         $5_1 = $3;
         break label$60;
        }
        $5_1 = $5_1 + 1 | 0;
        if (($5_1 | 0) != ($25_1 | 0)) {
         continue
        }
        break;
       };
       $5_1 = 0;
      }
      HEAP32[$23_1 + 36 >> 2] = $5_1;
      $5_1 = 0;
      $25_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
      label$65 : {
       if (!$25_1) {
        $3 = 0;
        break label$65;
       }
       label$67 : {
        while (1) {
         $4_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
         label$69 : {
          if (!(HEAPU8[$4_1 | 0] != 71 | HEAPU8[$4_1 + 1 | 0] != 80 | HEAPU8[$4_1 + 2 | 0] != 79)) {
           $27_1 = 1;
           if (HEAPU8[$4_1 + 3 | 0] != 83) {
            break label$69
           }
           $3 = HEAPU8[$4_1 + 8 | 0] | HEAPU8[$4_1 + 9 | 0] << 8 | (HEAPU8[$4_1 + 10 | 0] << 16 | HEAPU8[$4_1 + 11 | 0] << 24);
           $3 = $3 << 24 | ($3 & 65280) << 8 | ($3 >>> 8 & 65280 | $3 >>> 24);
           $27_1 = 0;
           break label$69;
          }
          $27_1 = 1;
         }
         if (!$27_1) {
          break label$67
         }
         $5_1 = $5_1 + 1 | 0;
         if (($5_1 | 0) != ($25_1 | 0)) {
          continue
         }
         break;
        };
        $3 = 0;
       }
      }
      HEAP32[$23_1 + 40 >> 2] = $3;
      if (!$34_1 | !$7_1 | (!$11_1 | !$2_1)) {
       break label$80
      }
      label$71 : {
       if ($1_1) {
        if ($9) {
         break label$71
        }
        break label$80;
       }
       HEAP32[$10_1 + 108 >> 2] = 2;
       HEAP32[$10_1 + 104 >> 2] = 0;
       HEAP32[$10_1 + 100 >> 2] = 0;
       HEAP32[$10_1 + 96 >> 2] = 0;
       $5_1 = 0;
       $2_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
       label$73 : {
        if (!$2_1) {
         $3 = 0;
         break label$73;
        }
        label$75 : {
         while (1) {
          $1_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
          label$77 : {
           if (!(HEAPU8[$1_1 | 0] != 67 | HEAPU8[$1_1 + 1 | 0] != 70 | HEAPU8[$1_1 + 2 | 0] != 70)) {
            $4_1 = 1;
            if (HEAPU8[$1_1 + 3 | 0] != 32) {
             break label$77
            }
            $1_1 = HEAPU8[$1_1 + 8 | 0] | HEAPU8[$1_1 + 9 | 0] << 8 | (HEAPU8[$1_1 + 10 | 0] << 16 | HEAPU8[$1_1 + 11 | 0] << 24);
            $3 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
            $4_1 = 0;
            break label$77;
           }
           $4_1 = 1;
          }
          if (!$4_1) {
           break label$75
          }
          $1_1 = $5_1 + 1 | 0;
          $5_1 = $1_1;
          if (($2_1 | 0) != ($1_1 | 0)) {
           continue
          }
          break;
         };
         $3 = 0;
        }
       }
       if (!$3) {
        break label$80
       }
       HEAP32[$23_1 + 100 >> 2] = 0;
       HEAP32[$23_1 + 104 >> 2] = 0;
       HEAP32[$23_1 + 56 >> 2] = 0;
       HEAP32[$23_1 + 60 >> 2] = 536870912;
       $1_1 = $23_1 + 116 | 0;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       $55_1 = $23_1 + 108 | 0;
       $1_1 = $55_1;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       HEAP32[$23_1 + 52 >> 2] = $3 + $20_1;
       $39_1 = $10_1 + 120 | 0;
       $1_1 = $23_1 + 52 | 0;
       $11_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP32[$39_1 >> 2] = $11_1;
       $2_1 = HEAP32[$1_1 + 4 >> 2];
       HEAP32[$10_1 + 112 >> 2] = HEAP32[$1_1 >> 2];
       HEAP32[$10_1 + 116 >> 2] = $2_1;
       $1_1 = HEAP32[$10_1 + 116 >> 2];
       $2_1 = $1_1 + 2 | 0;
       $1_1 = ($1_1 | 0) < -2 ? $11_1 : ($2_1 | 0) > ($11_1 | 0) ? $11_1 : $2_1;
       HEAP32[$10_1 + 116 >> 2] = $1_1;
       if (($1_1 | 0) < ($11_1 | 0)) {
        HEAP32[$10_1 + 116 >> 2] = $1_1 + 1;
        $1_1 = HEAPU8[$1_1 + HEAP32[$10_1 + 112 >> 2] | 0];
       } else {
        $1_1 = 0
       }
       $1_1 = $1_1 & 255;
       $9 = ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
       HEAP32[$10_1 + 116 >> 2] = $9;
       $25_1 = HEAP32[$10_1 + 112 >> 2];
       $1_1 = $9;
       $2_1 = 0;
       $7_1 = 0;
       while (1) {
        $4_1 = $7_1 << 8;
        $3 = $1_1;
        label$81 : {
         if (($11_1 | 0) <= ($1_1 | 0)) {
          $1_1 = $9;
          $7_1 = 0;
          break label$81;
         }
         $7_1 = HEAPU8[$3 + $25_1 | 0];
         $1_1 = $3 + 1 | 0;
         $3 = $1_1;
        }
        $5_1 = $3;
        $3 = $1_1;
        $9 = $1_1;
        $1_1 = $5_1;
        $4_1 = $4_1 | $7_1 & 255;
        $7_1 = $4_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != 2) {
         continue
        }
        break;
       };
       HEAP32[$10_1 + 116 >> 2] = $3;
       if ($4_1) {
        $9 = 0;
        if (($3 | 0) < ($11_1 | 0)) {
         HEAP32[$10_1 + 116 >> 2] = $3 + 1;
         $9 = HEAPU8[$3 + $25_1 | 0];
        }
        $5_1 = $9;
        $1_1 = HEAP32[$10_1 + 116 >> 2] + Math_imul($4_1, $5_1) | 0;
        $9 = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
        HEAP32[$10_1 + 116 >> 2] = $9;
        $1_1 = $9;
        $2_1 = 0;
        $7_1 = 0;
        if ($5_1) {
         while (1) {
          $27_1 = $7_1 << 8;
          $3 = $1_1;
          label$88 : {
           if (($11_1 | 0) <= ($1_1 | 0)) {
            $1_1 = $9;
            $7_1 = 0;
            break label$88;
           }
           $7_1 = HEAPU8[$3 + $25_1 | 0];
           $1_1 = $3 + 1 | 0;
           $3 = $1_1;
          }
          $4_1 = $1_1;
          $9 = $1_1;
          $1_1 = $3;
          $3 = $27_1 | $7_1 & 255;
          $7_1 = $3;
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
           continue
          }
          break;
         };
         HEAP32[$10_1 + 116 >> 2] = $4_1;
         $1_1 = $3 - 1 | 0;
        } else {
         $1_1 = -1
        }
        $1_1 = $1_1 + HEAP32[$10_1 + 116 >> 2] | 0;
        HEAP32[$10_1 + 116 >> 2] = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
       }
       $27_1 = HEAP32[$10_1 + 116 >> 2];
       $9 = $27_1;
       $1_1 = $9;
       $2_1 = 0;
       $7_1 = 0;
       while (1) {
        $4_1 = $7_1 << 8;
        $3 = $1_1;
        label$91 : {
         if (($11_1 | 0) <= ($1_1 | 0)) {
          $1_1 = $9;
          $7_1 = 0;
          break label$91;
         }
         $7_1 = HEAPU8[$3 + $25_1 | 0];
         $1_1 = $3 + 1 | 0;
         $3 = $1_1;
        }
        $5_1 = $3;
        $3 = $1_1;
        $9 = $1_1;
        $1_1 = $5_1;
        $4_1 = $4_1 | $7_1 & 255;
        $7_1 = $4_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != 2) {
         continue
        }
        break;
       };
       HEAP32[$10_1 + 116 >> 2] = $3;
       if ($4_1) {
        $9 = 0;
        if (($3 | 0) < ($11_1 | 0)) {
         HEAP32[$10_1 + 116 >> 2] = $3 + 1;
         $9 = HEAPU8[$3 + $25_1 | 0];
        }
        $5_1 = $9;
        $1_1 = HEAP32[$10_1 + 116 >> 2] + Math_imul($4_1, $5_1) | 0;
        $9 = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
        HEAP32[$10_1 + 116 >> 2] = $9;
        $1_1 = $9;
        $2_1 = 0;
        $7_1 = 0;
        if ($5_1) {
         while (1) {
          $32_1 = $7_1 << 8;
          $3 = $1_1;
          label$98 : {
           if (($11_1 | 0) <= ($1_1 | 0)) {
            $1_1 = $9;
            $7_1 = 0;
            break label$98;
           }
           $7_1 = HEAPU8[$3 + $25_1 | 0];
           $1_1 = $3 + 1 | 0;
           $3 = $1_1;
          }
          $4_1 = $1_1;
          $9 = $1_1;
          $1_1 = $3;
          $3 = $32_1 | $7_1 & 255;
          $7_1 = $3;
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
           continue
          }
          break;
         };
         HEAP32[$10_1 + 116 >> 2] = $4_1;
         $1_1 = $3 - 1 | 0;
        } else {
         $1_1 = -1
        }
        $1_1 = $1_1 + HEAP32[$10_1 + 116 >> 2] | 0;
        HEAP32[$10_1 + 116 >> 2] = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
       }
       $5_1 = $10_1 + 76 | 0;
       $1_1 = HEAP32[$10_1 + 116 >> 2];
       $2_1 = $1_1 - $27_1 | 0;
       label$100 : {
        if (($2_1 | $27_1) < 0) {
         $9 = 0;
         $2_1 = 0;
         break label$100;
        }
        $3 = ($11_1 | 0) < ($27_1 | 0) | ($1_1 | 0) > ($11_1 | 0);
        $9 = $3 ? 0 : $25_1 + $27_1 | 0;
        $2_1 = $3 ? 0 : $2_1;
       }
       HEAP32[$5_1 >> 2] = $2_1;
       $3 = $10_1 + 40 | 0;
       HEAP32[$3 + 8 >> 2] = $2_1;
       HEAP32[$10_1 + 72 >> 2] = 0;
       HEAP32[$10_1 + 68 >> 2] = $9;
       $2_1 = HEAP32[$10_1 + 72 >> 2];
       HEAP32[$10_1 + 40 >> 2] = HEAP32[$10_1 + 68 >> 2];
       HEAP32[$10_1 + 44 >> 2] = $2_1;
       $444($10_1 + 80 | 0, $3, 0);
       $9 = $1_1;
       $2_1 = 0;
       $7_1 = 0;
       while (1) {
        $4_1 = $7_1 << 8;
        $3 = $1_1;
        label$103 : {
         if (($11_1 | 0) <= ($1_1 | 0)) {
          $1_1 = $9;
          $7_1 = 0;
          break label$103;
         }
         $7_1 = HEAPU8[$3 + $25_1 | 0];
         $1_1 = $3 + 1 | 0;
         $3 = $1_1;
        }
        $5_1 = $3;
        $3 = $1_1;
        $9 = $1_1;
        $1_1 = $5_1;
        $4_1 = $4_1 | $7_1 & 255;
        $7_1 = $4_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != 2) {
         continue
        }
        break;
       };
       HEAP32[$10_1 + 116 >> 2] = $3;
       if ($4_1) {
        $9 = 0;
        if (($3 | 0) < ($11_1 | 0)) {
         HEAP32[$10_1 + 116 >> 2] = $3 + 1;
         $9 = HEAPU8[$3 + $25_1 | 0];
        }
        $5_1 = $9;
        $1_1 = HEAP32[$10_1 + 116 >> 2] + Math_imul($4_1, $5_1) | 0;
        $9 = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
        HEAP32[$10_1 + 116 >> 2] = $9;
        $1_1 = $9;
        $2_1 = 0;
        $7_1 = 0;
        if ($5_1) {
         while (1) {
          $27_1 = $7_1 << 8;
          $3 = $1_1;
          label$110 : {
           if (($11_1 | 0) <= ($1_1 | 0)) {
            $1_1 = $9;
            $7_1 = 0;
            break label$110;
           }
           $7_1 = HEAPU8[$3 + $25_1 | 0];
           $1_1 = $3 + 1 | 0;
           $3 = $1_1;
          }
          $4_1 = $1_1;
          $9 = $1_1;
          $1_1 = $3;
          $3 = $27_1 | $7_1 & 255;
          $7_1 = $3;
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
           continue
          }
          break;
         };
         HEAP32[$10_1 + 116 >> 2] = $4_1;
         $1_1 = $3 - 1 | 0;
        } else {
         $1_1 = -1
        }
        $1_1 = $1_1 + HEAP32[$10_1 + 116 >> 2] | 0;
        HEAP32[$10_1 + 116 >> 2] = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
       }
       $27_1 = HEAP32[$10_1 + 116 >> 2];
       $9 = $27_1;
       $1_1 = $9;
       $2_1 = 0;
       $7_1 = 0;
       while (1) {
        $4_1 = $7_1 << 8;
        $3 = $1_1;
        label$113 : {
         if (($11_1 | 0) <= ($1_1 | 0)) {
          $1_1 = $9;
          $7_1 = 0;
          break label$113;
         }
         $7_1 = HEAPU8[$3 + $25_1 | 0];
         $1_1 = $3 + 1 | 0;
         $3 = $1_1;
        }
        $5_1 = $3;
        $3 = $1_1;
        $9 = $1_1;
        $1_1 = $5_1;
        $4_1 = $4_1 | $7_1 & 255;
        $7_1 = $4_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != 2) {
         continue
        }
        break;
       };
       HEAP32[$10_1 + 116 >> 2] = $3;
       if ($4_1) {
        $9 = 0;
        if (($3 | 0) < ($11_1 | 0)) {
         HEAP32[$10_1 + 116 >> 2] = $3 + 1;
         $9 = HEAPU8[$3 + $25_1 | 0];
        }
        $5_1 = $9;
        $1_1 = HEAP32[$10_1 + 116 >> 2] + Math_imul($4_1, $5_1) | 0;
        $9 = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
        HEAP32[$10_1 + 116 >> 2] = $9;
        $1_1 = $9;
        $2_1 = 0;
        $7_1 = 0;
        if ($5_1) {
         while (1) {
          $32_1 = $7_1 << 8;
          $3 = $1_1;
          label$120 : {
           if (($11_1 | 0) <= ($1_1 | 0)) {
            $1_1 = $9;
            $7_1 = 0;
            break label$120;
           }
           $7_1 = HEAPU8[$3 + $25_1 | 0];
           $1_1 = $3 + 1 | 0;
           $3 = $1_1;
          }
          $4_1 = $1_1;
          $9 = $1_1;
          $1_1 = $3;
          $3 = $32_1 | $7_1 & 255;
          $7_1 = $3;
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) != ($5_1 | 0)) {
           continue
          }
          break;
         };
         HEAP32[$10_1 + 116 >> 2] = $4_1;
         $1_1 = $3 - 1 | 0;
        } else {
         $1_1 = -1
        }
        $1_1 = $1_1 + HEAP32[$10_1 + 116 >> 2] | 0;
        HEAP32[$10_1 + 116 >> 2] = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
       }
       $1_1 = HEAP32[$10_1 + 116 >> 2];
       $2_1 = $1_1 - $27_1 | 0;
       label$122 : {
        if (($2_1 | $27_1) < 0) {
         $9 = 0;
         $1_1 = 0;
         break label$122;
        }
        $1_1 = ($11_1 | 0) < ($27_1 | 0) | ($1_1 | 0) > ($11_1 | 0);
        $9 = $1_1 ? 0 : $2_1;
        $1_1 = $1_1 ? 0 : $25_1 + $27_1 | 0;
       }
       HEAP32[$23_1 + 76 >> 2] = $1_1;
       HEAP32[$23_1 + 84 >> 2] = $9;
       HEAP32[$23_1 + 80 >> 2] = 0;
       $1_1 = $10_1 + 80 | 0;
       $445($1_1, 17, 1, $10_1 + 104 | 0);
       $445($1_1, 262, 1, $10_1 + 108 | 0);
       $445($1_1, 292, 1, $10_1 + 100 | 0);
       $445($1_1, 293, 1, $10_1 + 96 | 0);
       $2_1 = $10_1 + 24 | 0;
       HEAP32[$2_1 + 8 >> 2] = HEAP32[$39_1 >> 2];
       $3 = $10_1 + 8 | 0;
       HEAP32[$3 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
       $1_1 = HEAP32[$10_1 + 116 >> 2];
       HEAP32[$10_1 + 24 >> 2] = HEAP32[$10_1 + 112 >> 2];
       HEAP32[$10_1 + 28 >> 2] = $1_1;
       $1_1 = HEAP32[$10_1 + 84 >> 2];
       HEAP32[$10_1 + 8 >> 2] = HEAP32[$10_1 + 80 >> 2];
       HEAP32[$10_1 + 12 >> 2] = $1_1;
       $1_1 = $10_1 + 56 | 0;
       $446($1_1, $2_1, $3);
       HEAP32[$23_1 + 96 >> 2] = HEAP32[$1_1 + 8 >> 2];
       $1_1 = HEAP32[$10_1 + 60 >> 2];
       HEAP32[$23_1 + 88 >> 2] = HEAP32[$10_1 + 56 >> 2];
       HEAP32[$23_1 + 92 >> 2] = $1_1;
       if (HEAP32[$10_1 + 108 >> 2] != 2) {
        break label$80
       }
       $39_1 = HEAP32[$10_1 + 104 >> 2];
       if (!$39_1) {
        break label$80
       }
       $1_1 = HEAP32[$10_1 + 100 >> 2];
       if ($1_1) {
        $27_1 = HEAP32[$10_1 + 96 >> 2];
        if (!$27_1) {
         break label$80
        }
        $2_1 = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
        HEAP32[$10_1 + 116 >> 2] = $2_1;
        $25_1 = HEAP32[$10_1 + 112 >> 2];
        $11_1 = HEAP32[$10_1 + 120 >> 2];
        $3 = $2_1;
        $5_1 = $2_1;
        $9 = 0;
        $1_1 = 0;
        while (1) {
         $32_1 = $1_1 << 8;
         $1_1 = $5_1;
         label$126 : {
          if (($11_1 | 0) <= ($1_1 | 0)) {
           $5_1 = $3;
           $7_1 = 0;
           break label$126;
          }
          $7_1 = HEAPU8[$1_1 + $25_1 | 0];
          $5_1 = $1_1 + 1 | 0;
          $1_1 = $5_1;
         }
         $4_1 = $5_1;
         $3 = $4_1;
         $5_1 = $1_1;
         $1_1 = $32_1 | $7_1 & 255;
         $9 = $9 + 1 | 0;
         if (($9 | 0) != 2) {
          continue
         }
         break;
        };
        HEAP32[$10_1 + 116 >> 2] = $4_1;
        if ($1_1) {
         $3 = 0;
         if (($4_1 | 0) < ($11_1 | 0)) {
          HEAP32[$10_1 + 116 >> 2] = $4_1 + 1;
          $3 = HEAPU8[$4_1 + $25_1 | 0];
         }
         $4_1 = $3;
         $1_1 = HEAP32[$10_1 + 116 >> 2] + Math_imul($1_1, $3) | 0;
         $3 = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
         HEAP32[$10_1 + 116 >> 2] = $3;
         $5_1 = $3;
         $9 = 0;
         $1_1 = 0;
         if ($4_1) {
          while (1) {
           $32_1 = $1_1 << 8;
           $1_1 = $5_1;
           label$133 : {
            if (($11_1 | 0) <= ($1_1 | 0)) {
             $5_1 = $3;
             $7_1 = 0;
             break label$133;
            }
            $7_1 = HEAPU8[$1_1 + $25_1 | 0];
            $5_1 = $1_1 + 1 | 0;
            $1_1 = $5_1;
           }
           $3 = $5_1;
           $5_1 = $1_1;
           $1_1 = $32_1 | $7_1 & 255;
           $9 = $9 + 1 | 0;
           if (($4_1 | 0) != ($9 | 0)) {
            continue
           }
           break;
          };
          HEAP32[$10_1 + 116 >> 2] = $3;
          $1_1 = $1_1 - 1 | 0;
         } else {
          $1_1 = -1
         }
         $1_1 = $1_1 + HEAP32[$10_1 + 116 >> 2] | 0;
         HEAP32[$10_1 + 116 >> 2] = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
        }
        $1_1 = HEAP32[$10_1 + 116 >> 2];
        $5_1 = $1_1 - $2_1 | 0;
        label$135 : {
         if (($5_1 | $2_1) < 0) {
          $3 = 0;
          $1_1 = 0;
          break label$135;
         }
         $1_1 = ($1_1 | 0) > ($11_1 | 0) | ($2_1 | 0) > ($11_1 | 0);
         $3 = $1_1 ? 0 : $2_1 + $25_1 | 0;
         $1_1 = $1_1 ? 0 : $5_1;
        }
        HEAP32[$23_1 + 116 >> 2] = 0;
        HEAP32[$23_1 + 100 >> 2] = $3;
        HEAP32[$55_1 >> 2] = $1_1;
        HEAP32[$23_1 + 104 >> 2] = 0;
        $2_1 = $11_1 - $27_1 | 0;
        $1_1 = ($2_1 | $27_1) < 0 | ($11_1 | 0) < ($27_1 | 0);
        HEAP32[$23_1 + 120 >> 2] = $1_1 ? 0 : $2_1;
        HEAP32[$23_1 + 112 >> 2] = $1_1 ? 0 : $25_1 + $27_1 | 0;
       }
       $11_1 = HEAP32[$10_1 + 120 >> 2];
       $2_1 = ($39_1 | 0) < 0 ? $11_1 : ($11_1 | 0) < ($39_1 | 0) ? $11_1 : $39_1;
       HEAP32[$10_1 + 116 >> 2] = $2_1;
       $25_1 = HEAP32[$10_1 + 112 >> 2];
       $3 = $2_1;
       $5_1 = $2_1;
       $9 = 0;
       $1_1 = 0;
       while (1) {
        $27_1 = $1_1 << 8;
        $1_1 = $5_1;
        label$138 : {
         if (($11_1 | 0) <= ($1_1 | 0)) {
          $5_1 = $3;
          $7_1 = 0;
          break label$138;
         }
         $7_1 = HEAPU8[$1_1 + $25_1 | 0];
         $5_1 = $1_1 + 1 | 0;
         $1_1 = $5_1;
        }
        $4_1 = $5_1;
        $3 = $4_1;
        $5_1 = $1_1;
        $1_1 = $27_1 | $7_1 & 255;
        $9 = $9 + 1 | 0;
        if (($9 | 0) != 2) {
         continue
        }
        break;
       };
       HEAP32[$10_1 + 116 >> 2] = $4_1;
       if ($1_1) {
        $3 = 0;
        if (($4_1 | 0) < ($11_1 | 0)) {
         HEAP32[$10_1 + 116 >> 2] = $4_1 + 1;
         $3 = HEAPU8[$4_1 + $25_1 | 0];
        }
        $4_1 = $3;
        $1_1 = HEAP32[$10_1 + 116 >> 2] + Math_imul($1_1, $3) | 0;
        $3 = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
        HEAP32[$10_1 + 116 >> 2] = $3;
        $5_1 = $3;
        $9 = 0;
        $1_1 = 0;
        if ($4_1) {
         while (1) {
          $27_1 = $1_1 << 8;
          $1_1 = $5_1;
          label$145 : {
           if (($11_1 | 0) <= ($1_1 | 0)) {
            $5_1 = $3;
            $7_1 = 0;
            break label$145;
           }
           $7_1 = HEAPU8[$1_1 + $25_1 | 0];
           $5_1 = $1_1 + 1 | 0;
           $1_1 = $5_1;
          }
          $3 = $5_1;
          $5_1 = $1_1;
          $1_1 = $27_1 | $7_1 & 255;
          $9 = $9 + 1 | 0;
          if (($4_1 | 0) != ($9 | 0)) {
           continue
          }
          break;
         };
         HEAP32[$10_1 + 116 >> 2] = $3;
         $1_1 = $1_1 - 1 | 0;
        } else {
         $1_1 = -1
        }
        $1_1 = $1_1 + HEAP32[$10_1 + 116 >> 2] | 0;
        HEAP32[$10_1 + 116 >> 2] = ($1_1 | 0) < 0 ? $11_1 : ($1_1 | 0) > ($11_1 | 0) ? $11_1 : $1_1;
       }
       $1_1 = HEAP32[$10_1 + 116 >> 2];
       HEAP32[$23_1 + 68 >> 2] = 0;
       $5_1 = $1_1 - $2_1 | 0;
       $3 = ($5_1 | $2_1) < 0 | ($1_1 | 0) > ($11_1 | 0);
       HEAP32[$23_1 + 72 >> 2] = $3 ? 0 : $5_1;
       HEAP32[$23_1 + 64 >> 2] = $3 ? 0 : $2_1 + $25_1 | 0;
      }
      $5_1 = 0;
      $2_1 = HEAPU8[$31_1 + 1 | 0] | HEAPU8[$31_1 | 0] << 8;
      $1_1 = 0;
      label$147 : {
       if (!$2_1) {
        break label$147
       }
       label$149 : {
        while (1) {
         $1_1 = $20_1 + ($33_1 + ($5_1 << 4) | 0) | 0;
         label$151 : {
          if (!(HEAPU8[$1_1 | 0] != 109 | HEAPU8[$1_1 + 1 | 0] != 97 | HEAPU8[$1_1 + 2 | 0] != 120)) {
           $4_1 = 1;
           if (HEAPU8[$1_1 + 3 | 0] != 112) {
            break label$151
           }
           $1_1 = HEAPU8[$1_1 + 8 | 0] | HEAPU8[$1_1 + 9 | 0] << 8 | (HEAPU8[$1_1 + 10 | 0] << 16 | HEAPU8[$1_1 + 11 | 0] << 24);
           $3 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
           $4_1 = 0;
           break label$151;
          }
          $4_1 = 1;
         }
         if (!$4_1) {
          break label$149
         }
         $1_1 = $5_1 + 1 | 0;
         $5_1 = $1_1;
         if (($2_1 | 0) != ($1_1 | 0)) {
          continue
         }
         break;
        };
        $1_1 = 0;
        break label$147;
       }
       $1_1 = $3;
      }
      if ($1_1) {
       $1_1 = $1_1 + $20_1 | 0;
       $1_1 = HEAPU8[$1_1 + 4 | 0] << 8 | HEAPU8[$1_1 + 5 | 0];
      } else {
       $1_1 = 65535
      }
      HEAP32[$23_1 + 12 >> 2] = $1_1;
      $1_1 = $20_1 + $34_1 | 0;
      $2_1 = HEAPU8[$1_1 + 3 | 0];
      $1_1 = HEAPU8[$1_1 + 2 | 0];
      HEAP32[$23_1 + 44 >> 2] = 0;
      $2_1 = $2_1 | $1_1 << 8;
      if ($2_1) {
       $3 = $34_1 + 4 | 0;
       $4_1 = 0;
       while (1) {
        label$157 : {
         label$158 : {
          label$159 : {
           $1_1 = $20_1 + ($3 + ($4_1 << 3) | 0) | 0;
           $5_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
           switch (($5_1 << 8 | $5_1 >>> 8) & 65535) {
           case 0:
            break label$158;
           case 3:
            break label$159;
           default:
            break label$157;
           };
          }
          $5_1 = HEAPU8[$1_1 + 2 | 0] | HEAPU8[$1_1 + 3 | 0] << 8;
          switch ((($5_1 << 8 | $5_1 >>> 8) & 65535) - 1 | 0) {
          case 0:
          case 9:
           break label$158;
          default:
           break label$157;
          };
         }
         $1_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
         HEAP32[$23_1 + 44 >> 2] = $34_1 + ($1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24));
        }
        $1_1 = $4_1 + 1 | 0;
        $4_1 = $1_1;
        if (($2_1 | 0) != ($1_1 | 0)) {
         continue
        }
        break;
       };
      }
      if (!HEAP32[$23_1 + 44 >> 2]) {
       break label$80
      }
      $1_1 = $20_1 + HEAP32[$23_1 + 20 >> 2] | 0;
      HEAP32[$23_1 + 48 >> 2] = HEAPU8[$1_1 + 50 | 0] << 8 | HEAPU8[$1_1 + 51 | 0];
      $1_1 = HEAP32[$54_1 >> 2];
      $2_1 = HEAP32[$45_1 + 48 >> 2];
      $4_1 = $2_1 ? $2_1 : 21640;
      HEAP32[$23_1 + 156 >> 2] = $4_1;
      $2_1 = $17_1 + Math_imul($1_1, 24) | 0;
      label$160 : {
       if (!HEAPU16[$4_1 >> 1]) {
        break label$160
       }
       $3 = $23_1 + 164 | 0;
       while (1) {
        $1_1 = $4_1;
        $5_1 = HEAPU16[$1_1 + 2 >> 1];
        if (!$5_1) {
         break label$160
        }
        $4_1 = HEAP32[$3 >> 2];
        HEAP32[$3 >> 2] = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
        $4_1 = $1_1 + 4 | 0;
        if (HEAPU16[$1_1 + 4 >> 1]) {
         continue
        }
        break;
       };
      }
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
      $3 = $2_1;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      $2_1 = HEAP32[$23_1 + 164 >> 2];
      HEAP32[$3 + 4 >> 2] = ($2_1 | 0) < ($1_1 | 0) ? $1_1 : $2_1;
      $3 = $28_1 + 1 | 0;
      $4_1 = ($3 | 0) >= HEAP32[$0_1 + 76 >> 2];
      $1_1 = $4_1;
      if (!$1_1) {
       continue
      }
      break label$6;
     }
     break;
    };
    $4_1 = $60_1;
    $2_1 = $35_1;
    $0_1 = $17_1;
    break label$5;
   }
   $60_1 = $1_1;
   $1_1 = 0;
   $25_1 = ($37 | 0) > 0;
   if ($25_1) {
    $2_1 = 0;
    $4_1 = 0;
    while (1) {
     $1_1 = $2_1;
     $11_1 = Math_imul($4_1, 196) + $35_1 | 0;
     $28_1 = $11_1 + 172 | 0;
     $9 = HEAP32[$11_1 + 160 >> 2];
     $2_1 = HEAP32[$11_1 + 176 >> 2];
     $3 = HEAP32[$11_1 + 164 >> 2] + 32 >> 5;
     label$164 : {
      if (($2_1 | 0) >= ($3 | 0)) {
       break label$164
      }
      $5_1 = $2_1;
      $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
      $2_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
      if (($5_1 | 0) >= ($2_1 | 0)) {
       break label$164
      }
      $5_1 = $16($2_1 << 2);
      $7_1 = HEAP32[$28_1 + 8 >> 2];
      if ($7_1) {
       $1602($5_1, $7_1, HEAP32[$28_1 >> 2] << 2);
       $17(HEAP32[$28_1 + 8 >> 2]);
      }
      HEAP32[$28_1 + 4 >> 2] = $2_1;
      HEAP32[$28_1 + 8 >> 2] = $5_1;
     }
     HEAP32[$28_1 >> 2] = $3;
     $1604(HEAP32[$28_1 + 8 >> 2], 0, $3 << 2);
     $5_1 = $17_1 + Math_imul($9, 24) | 0;
     $7_1 = $5_1 + 12 | 0;
     if (!HEAP32[$5_1 + 12 >> 2]) {
      $2_1 = HEAP32[$7_1 + 4 >> 2];
      $3 = HEAP32[$5_1 + 4 >> 2] + 32 >> 5;
      label$169 : {
       if (($2_1 | 0) >= ($3 | 0)) {
        break label$169
       }
       $9 = $2_1;
       $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
       $2_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
       if (($9 | 0) >= ($2_1 | 0)) {
        break label$169
       }
       $9 = $16($2_1 << 2);
       $23_1 = HEAP32[$7_1 + 8 >> 2];
       if ($23_1) {
        $1602($9, $23_1, HEAP32[$7_1 >> 2] << 2);
        $17(HEAP32[$7_1 + 8 >> 2]);
       }
       HEAP32[$7_1 + 4 >> 2] = $2_1;
       HEAP32[$7_1 + 8 >> 2] = $9;
      }
      HEAP32[$7_1 >> 2] = $3;
      $1604(HEAP32[$7_1 + 8 >> 2], 0, $3 << 2);
     }
     $9 = $4_1;
     $3 = HEAP32[$11_1 + 156 >> 2];
     $2_1 = HEAPU16[$3 >> 1];
     label$173 : {
      if (!$2_1) {
       break label$173
      }
      $23_1 = $5_1 + 8 | 0;
      $20_1 = $11_1 + 168 | 0;
      $4_1 = $1_1;
      while (1) {
       $31_1 = HEAPU16[$3 + 2 >> 1];
       if (!$31_1) {
        $1_1 = $4_1;
        break label$173;
       }
       $5_1 = $3;
       $3 = $2_1 & 65535;
       label$177 : {
        if ($31_1 >>> 0 < $3 >>> 0) {
         $1_1 = $4_1;
         break label$177;
        }
        $33_1 = HEAP32[$7_1 + 8 >> 2];
        while (1) {
         $2_1 = $3;
         $1_1 = 1 << $2_1;
         $34_1 = $2_1 >>> 5 << 2;
         $3 = $34_1 + $33_1 | 0;
         label$180 : {
          if ($1_1 & HEAP32[$3 >> 2]) {
           break label$180
          }
          if (!$447($11_1, $2_1)) {
           break label$180
          }
          HEAP32[$20_1 >> 2] = HEAP32[$20_1 >> 2] + 1;
          HEAP32[$23_1 >> 2] = HEAP32[$23_1 >> 2] + 1;
          $34_1 = $34_1 + HEAP32[$28_1 + 8 >> 2] | 0;
          HEAP32[$34_1 >> 2] = $1_1 | HEAP32[$34_1 >> 2];
          HEAP32[$3 >> 2] = $1_1 | HEAP32[$3 >> 2];
          $4_1 = $4_1 + 1 | 0;
         }
         $1_1 = $4_1;
         $3 = $2_1 + 1 | 0;
         if (($2_1 | 0) != ($31_1 | 0)) {
          continue
         }
         break;
        };
       }
       $3 = $5_1 + 4 | 0;
       $4_1 = $1_1;
       $2_1 = HEAPU16[$5_1 + 4 >> 1];
       if ($2_1) {
        continue
       }
       break;
      };
     }
     $2_1 = $1_1;
     $3 = $9 + 1 | 0;
     $4_1 = $3;
     if (($3 | 0) != ($37 | 0)) {
      continue
     }
     break;
    };
   }
   if ($25_1) {
    $2_1 = 0;
    while (1) {
     $9 = Math_imul($2_1, 196) + $35_1 | 0;
     $7_1 = $9 + 184 | 0;
     $3 = HEAP32[$9 + 168 >> 2];
     $23_1 = $9 + 188 | 0;
     if (($3 | 0) > HEAP32[$23_1 >> 2]) {
      $5_1 = $16($3 << 2);
      $4_1 = $9 + 192 | 0;
      $28_1 = HEAP32[$4_1 >> 2];
      if ($28_1) {
       $1602($5_1, $28_1, HEAP32[$7_1 >> 2] << 2);
       $17(HEAP32[$4_1 >> 2]);
      }
      HEAP32[$4_1 >> 2] = $5_1;
      HEAP32[$23_1 >> 2] = $3;
     }
     $4_1 = $2_1;
     $2_1 = HEAP32[$9 + 172 >> 2];
     if (($2_1 | 0) > 0) {
      $3 = HEAP32[$9 + 180 >> 2];
      $31_1 = $3 + ($2_1 << 2) | 0;
      $28_1 = $9 + 192 | 0;
      $2_1 = $3;
      while (1) {
       $5_1 = $2_1;
       $25_1 = HEAP32[$2_1 >> 2];
       if ($25_1) {
        $33_1 = $5_1 - $3 << 3;
        $2_1 = 0;
        while (1) {
         if ($25_1 >>> $2_1 & 1) {
          $34_1 = $2_1 + $33_1 | 0;
          $20_1 = HEAP32[$7_1 >> 2];
          $11_1 = HEAP32[$23_1 >> 2];
          label$192 : {
           if (($20_1 | 0) != ($11_1 | 0)) {
            break label$192
           }
           $27_1 = $11_1 ? $11_1 + (($11_1 | 0) / 2 | 0) | 0 : 8;
           $20_1 = $20_1 + 1 | 0;
           $20_1 = ($20_1 | 0) < ($27_1 | 0) ? $27_1 : $20_1;
           if (($11_1 | 0) >= ($20_1 | 0)) {
            break label$192
           }
           $11_1 = $16($20_1 << 2);
           $27_1 = HEAP32[$28_1 >> 2];
           if ($27_1) {
            $1602($11_1, $27_1, HEAP32[$7_1 >> 2] << 2);
            $17(HEAP32[$28_1 >> 2]);
           }
           HEAP32[$28_1 >> 2] = $11_1;
           HEAP32[$23_1 >> 2] = $20_1;
          }
          HEAP32[HEAP32[$28_1 >> 2] + (HEAP32[$7_1 >> 2] << 2) >> 2] = $34_1;
          HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] + 1;
         }
         $2_1 = $2_1 + 1 | 0;
         if (($2_1 | 0) != 32) {
          continue
         }
         break;
        };
       }
       $2_1 = $5_1 + 4 | 0;
       if ($2_1 >>> 0 < $31_1 >>> 0) {
        continue
       }
       break;
      };
     }
     $2_1 = $9 + 172 | 0;
     $3 = HEAP32[$2_1 + 8 >> 2];
     if ($3) {
      HEAP32[$2_1 >> 2] = 0;
      HEAP32[$2_1 + 4 >> 2] = 0;
      $17($3);
      HEAP32[$2_1 + 8 >> 2] = 0;
     }
     $2_1 = $4_1 + 1 | 0;
     if (($37 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   if (($38_1 | 0) > 0) {
    $2_1 = 0;
    while (1) {
     $3 = $17_1 + Math_imul($2_1, 24) | 0;
     $5_1 = HEAP32[$3 + 20 >> 2];
     if ($5_1) {
      $3 = $3 + 12 | 0;
      HEAP32[$3 >> 2] = 0;
      HEAP32[$3 + 4 >> 2] = 0;
      $17($5_1);
      HEAP32[$3 + 8 >> 2] = 0;
     }
     $2_1 = $2_1 + 1 | 0;
     if (($38_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($17_1) {
    $17($17_1);
    $17_1 = 0;
   }
   $54_1 = $17_1;
   $2_1 = 0;
   $3 = ($1_1 | 0) <= 0;
   if ($3) {
    $5_1 = 0
   } else {
    $5_1 = $16((($1_1 | 0) <= 8 ? 8 : $1_1) << 4)
   }
   if (!$3) {
    $2_1 = $16(Math_imul(($1_1 | 0) <= 8 ? 8 : $1_1, 28))
   }
   $23_1 = $1604($5_1, 0, $1_1 << 4);
   $61 = $1604($2_1, 0, Math_imul($1_1, 28));
   $9 = 0;
   if (($37 | 0) > 0) {
    $2_1 = 0;
    $4_1 = 0;
    $3 = 0;
    $5_1 = 0;
    while (1) {
     $9 = $2_1;
     $1_1 = Math_imul($5_1, 196) + $35_1 | 0;
     $17_1 = HEAP32[$1_1 + 168 >> 2];
     $9 = $2_1;
     label$206 : {
      if (!$17_1) {
       break label$206
      }
      $7_1 = Math_imul($3, 28) + $61 | 0;
      HEAP32[$1_1 + 152 >> 2] = $7_1;
      HEAP32[$1_1 + 148 >> 2] = ($4_1 << 4) + $23_1;
      $2_1 = HEAP32[$0_1 + 84 >> 2] + Math_imul($5_1, 120) | 0;
      $6_1 = HEAPF32[$2_1 + 16 >> 2];
      $20_1 = $1_1 + 192 | 0;
      HEAP32[$1_1 + 132 >> 2] = HEAP32[$20_1 >> 2];
      HEAP32[$1_1 + 128 >> 2] = 0;
      HEAPF32[$1_1 + 124 >> 2] = $6_1;
      HEAP32[$1_1 + 140 >> 2] = $7_1;
      HEAP32[$1_1 + 136 >> 2] = HEAP32[$1_1 + 184 >> 2];
      HEAP8[$1_1 + 144 | 0] = HEAP32[$2_1 + 20 >> 2];
      HEAP8[$1_1 + 145 | 0] = HEAP32[$2_1 + 24 >> 2];
      $28_1 = $1_1 + 184 | 0;
      label$208 : {
       if ($6_1 > Math_fround(0.0)) {
        $7_1 = HEAP32[$1_1 + 4 >> 2] + HEAP32[$1_1 + 28 >> 2] | 0;
        $11_1 = HEAPU8[$7_1 + 4 | 0] | HEAPU8[$7_1 + 5 | 0] << 8;
        $7_1 = HEAPU8[$7_1 + 6 | 0] | HEAPU8[$7_1 + 7 | 0] << 8;
        $6_1 = Math_fround($6_1 / Math_fround((($11_1 << 8 | $11_1 >>> 8) << 16 >> 16) - (($7_1 << 8 | $7_1 >>> 8) << 16 >> 16) | 0));
        break label$208;
       }
       $7_1 = (HEAP32[$1_1 + 4 >> 2] + HEAP32[$1_1 + 20 >> 2] | 0) + 18 | 0;
       $7_1 = HEAPU8[$7_1 | 0] | HEAPU8[$7_1 + 1 | 0] << 8;
       $6_1 = Math_fround(Math_fround(-$6_1) / Math_fround((($7_1 << 8 | $7_1 >>> 8) & 65535) >>> 0));
      }
      $3 = $3 + $17_1 | 0;
      $4_1 = $4_1 + $17_1 | 0;
      if (HEAP32[$28_1 >> 2] <= 0) {
       break label$206
      }
      $31_1 = $1_1 + 148 | 0;
      $7_1 = $2_1 + 24 | 0;
      $17_1 = $2_1 + 20 | 0;
      $11_1 = HEAP32[$0_1 + 12 >> 2];
      $2_1 = 0;
      while (1) {
       $448($1_1, $447($1_1, HEAP32[HEAP32[$20_1 >> 2] + ($2_1 << 2) >> 2]), Math_fround($6_1 * Math_fround(HEAP32[$17_1 >> 2])), Math_fround($6_1 * Math_fround(HEAP32[$7_1 >> 2])), $10_1 + 112 | 0, $10_1 + 80 | 0, $10_1 + 68 | 0, $10_1 + 56 | 0);
       $25_1 = HEAP32[$31_1 >> 2] + ($2_1 << 4) | 0;
       $33_1 = (HEAP32[$17_1 >> 2] + (($11_1 + HEAP32[$10_1 + 68 >> 2] | 0) - HEAP32[$10_1 + 112 >> 2] | 0) | 0) - 1 | 0;
       HEAP16[$25_1 + 4 >> 1] = $33_1;
       $27_1 = $25_1;
       $25_1 = (HEAP32[$7_1 >> 2] + (($11_1 + HEAP32[$10_1 + 56 >> 2] | 0) - HEAP32[$10_1 + 80 >> 2] | 0) | 0) - 1 | 0;
       HEAP16[$27_1 + 6 >> 1] = $25_1;
       $9 = Math_imul($25_1 & 65535, $33_1 & 65535) + $9 | 0;
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) < HEAP32[$28_1 >> 2]) {
        continue
       }
       break;
      };
     }
     $2_1 = $9;
     $9 = $2_1;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != ($37 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$0_1 + 32 >> 2] = 0;
   $2_1 = HEAP32[$0_1 + 8 >> 2];
   label$212 : {
    if (($2_1 | 0) > 0) {
     break label$212
    }
    $2_1 = 4096;
    $6_1 = Math_fround(Math_sqrt(Math_fround($9 | 0)));
    label$213 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $1_1 = ~~$6_1;
      break label$213;
     }
     $1_1 = -2147483648;
    }
    if (($1_1 | 0) > 2866) {
     break label$212
    }
    $2_1 = 2048;
    if (($1_1 | 0) > 1432) {
     break label$212
    }
    $2_1 = ($1_1 | 0) > 715 ? 1024 : 512;
   }
   HEAP32[$0_1 + 28 >> 2] = $2_1;
   $17_1 = HEAP32[$0_1 + 12 >> 2];
   $5_1 = $16(48);
   $7_1 = $2_1 - $17_1 | 0;
   $3 = $16($7_1 << 3);
   label$215 : {
    if (!($3 ? $5_1 : 0)) {
     if ($5_1) {
      $17($5_1)
     }
     if (!$3) {
      $2_1 = 0;
      $3 = 0;
      $1_1 = 0;
      $17_1 = 0;
      break label$215;
     }
     $17($3);
     $2_1 = 0;
     $3 = 0;
     $1_1 = 0;
     $17_1 = 0;
     break label$215;
    }
    $4_1 = 0;
    if (($7_1 | 0) >= 2) {
     $28_1 = $7_1 - 2 | 0;
     $1_1 = 0;
     while (1) {
      $9 = $1_1;
      $4_1 = $1_1 + 1 | 0;
      HEAP32[(($1_1 << 3) + $3 | 0) + 4 >> 2] = ($4_1 << 3) + $3;
      $1_1 = $4_1;
      if (($9 | 0) != ($28_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP32[(($4_1 << 3) + $3 | 0) + 4 >> 2] = 0;
    HEAP32[$5_1 + 28 >> 2] = $3;
    HEAP32[$5_1 + 12 >> 2] = 1;
    HEAP32[$5_1 + 16 >> 2] = 0;
    HEAP32[$5_1 + 24 >> 2] = $5_1 + 32;
    HEAP32[$5_1 + 20 >> 2] = $7_1;
    HEAP32[$5_1 + 4 >> 2] = 32768 - $17_1;
    HEAP32[$5_1 >> 2] = $7_1;
    HEAP32[$5_1 + 44 >> 2] = 0;
    HEAP16[$5_1 + 42 >> 1] = 65535;
    $1_1 = $5_1 + 40 | 0;
    HEAP16[$1_1 >> 1] = $7_1;
    HEAP32[$5_1 + 36 >> 2] = $1_1;
    HEAP32[$5_1 + 32 >> 2] = 0;
    HEAP32[$5_1 + 8 >> 2] = (($7_1 << 1) - 1 | 0) / ($7_1 | 0);
    $1_1 = $5_1;
   }
   $20_1 = $17_1;
   $28_1 = $2_1;
   $27_1 = $1_1;
   $2_1 = 0;
   $5_1 = HEAP32[$0_1 + 64 >> 2];
   if (($5_1 | 0) > 0) {
    $4_1 = $16((($5_1 | 0) <= 8 ? 8 : $5_1) << 4)
   } else {
    $4_1 = 0
   }
   $4_1 = $1604($4_1, 0, $5_1 << 4);
   $9 = HEAP32[$0_1 + 64 >> 2];
   if (($9 | 0) > 0) {
    $7_1 = HEAP32[$0_1 + 72 >> 2];
    while (1) {
     $17_1 = ($2_1 << 4) + $4_1 | 0;
     $11_1 = Math_imul($2_1, 28) + $7_1 | 0;
     HEAP16[$17_1 + 4 >> 1] = HEAPU16[$11_1 >> 1];
     HEAP16[$17_1 + 6 >> 1] = HEAPU16[$11_1 + 2 >> 1];
     $2_1 = $2_1 + 1 | 0;
     if (($9 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   $450($1_1, $4_1, $5_1);
   if (($5_1 | 0) > 0) {
    $2_1 = 0;
    while (1) {
     $1_1 = ($2_1 << 4) + $4_1 | 0;
     if (HEAP32[$1_1 + 12 >> 2]) {
      $9 = HEAP32[$0_1 + 72 >> 2] + Math_imul($2_1, 28) | 0;
      HEAP16[$9 + 4 >> 1] = HEAPU16[$1_1 + 8 >> 1];
      $7_1 = $9;
      $9 = HEAPU16[$1_1 + 10 >> 1];
      HEAP16[$7_1 + 6 >> 1] = $9;
      $7_1 = HEAP32[$0_1 + 32 >> 2];
      $1_1 = $9 + HEAPU16[$1_1 + 6 >> 1] | 0;
      HEAP32[$0_1 + 32 >> 2] = ($1_1 | 0) < ($7_1 | 0) ? $7_1 : $1_1;
     }
     $2_1 = $2_1 + 1 | 0;
     if (($5_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($4_1) {
    $17($4_1)
   }
   if (($37 | 0) > 0) {
    $2_1 = 0;
    while (1) {
     $1_1 = $2_1;
     $2_1 = Math_imul($1_1, 196) + $35_1 | 0;
     $5_1 = HEAP32[$2_1 + 168 >> 2];
     label$224 : {
      if (!$5_1) {
       break label$224
      }
      $450($27_1, HEAP32[$2_1 + 148 >> 2], $5_1);
      $4_1 = HEAP32[$2_1 + 168 >> 2];
      if (($4_1 | 0) <= 0) {
       break label$224
      }
      $9 = HEAP32[$2_1 + 148 >> 2];
      $2_1 = 0;
      while (1) {
       $5_1 = $9 + ($2_1 << 4) | 0;
       if (HEAP32[$5_1 + 12 >> 2]) {
        $7_1 = HEAP32[$0_1 + 32 >> 2];
        $5_1 = HEAPU16[$5_1 + 6 >> 1] + HEAPU16[$5_1 + 10 >> 1] | 0;
        HEAP32[$0_1 + 32 >> 2] = ($5_1 | 0) < ($7_1 | 0) ? $7_1 : $5_1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
     }
     $2_1 = $1_1 + 1 | 0;
     if (($37 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   $2_1 = HEAP32[$0_1 + 32 >> 2];
   $55_1 = $3;
   if (!(HEAP8[$0_1 | 0] & 1)) {
    $1_1 = $2_1 - 1 | 0;
    $1_1 = $1_1 >> 1 | $1_1;
    $1_1 = $1_1 >> 2 | $1_1;
    $1_1 = $1_1 >> 4 | $1_1;
    $1_1 = $1_1 >> 8 | $1_1;
    $2_1 = $1_1 >> 16 | $1_1;
   }
   $1_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 + 32 >> 2] = $1_1;
   HEAPF32[$0_1 + 40 >> 2] = Math_fround(1.0) / Math_fround($1_1 | 0);
   $2_1 = HEAP32[$0_1 + 28 >> 2];
   HEAPF32[$0_1 + 36 >> 2] = Math_fround(1.0) / Math_fround($2_1 | 0);
   $1_1 = $16(Math_imul($2_1, $1_1));
   HEAP32[$0_1 + 20 >> 2] = $1_1;
   $1604($1_1, 0, Math_imul(HEAP32[$0_1 + 32 >> 2], HEAP32[$0_1 + 28 >> 2]));
   if (($37 | 0) > 0) {
    $75_1 = $0_1 + 28 | 0;
    $62_1 = HEAP32[$0_1 + 20 >> 2];
    $2_1 = 0;
    while (1) {
     $45_1 = $2_1;
     $36_1 = Math_imul($2_1, 196) + $35_1 | 0;
     if (HEAP32[$36_1 + 168 >> 2]) {
      $2_1 = $36_1 + 144 | 0;
      $6_1 = HEAPF32[$36_1 + 124 >> 2];
      label$232 : {
       if ($6_1 > Math_fround(0.0)) {
        $1_1 = HEAP32[$36_1 + 4 >> 2] + HEAP32[$36_1 + 28 >> 2] | 0;
        $3 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8;
        $1_1 = HEAPU8[$1_1 + 6 | 0] | HEAPU8[$1_1 + 7 | 0] << 8;
        $56_1 = Math_fround($6_1 / Math_fround((($3 << 8 | $3 >>> 8) << 16 >> 16) - (($1_1 << 8 | $1_1 >>> 8) << 16 >> 16) | 0));
        break label$232;
       }
       $1_1 = (HEAP32[$36_1 + 4 >> 2] + HEAP32[$36_1 + 20 >> 2] | 0) + 18 | 0;
       $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
       $56_1 = Math_fround(Math_fround(-$6_1) / Math_fround((($1_1 << 8 | $1_1 >>> 8) & 65535) >>> 0));
      }
      $41_1 = HEAPU8[$2_1 | 0];
      $6_1 = Math_fround($41_1 >>> 0);
      $76_1 = HEAP32[$0_1 + 84 >> 2];
      $66 = $36_1 + 136 | 0;
      if (HEAP32[$66 >> 2] > 0) {
       $67_1 = $41_1 ? Math_fround(Math_fround(1 - $41_1 | 0) / Math_fround($6_1 + $6_1)) : Math_fround(0.0);
       $42_1 = HEAPU8[$36_1 + 145 | 0];
       $8 = Math_fround($42_1 >>> 0);
       $68_1 = $42_1 ? Math_fround(Math_fround(1 - $42_1 | 0) / Math_fround($8 + $8)) : Math_fround(0.0);
       $77 = $36_1 + 128 | 0;
       $78_1 = $36_1 + 132 | 0;
       $79_1 = $36_1 + 140 | 0;
       $80_1 = HEAP32[$36_1 + 148 >> 2];
       $69_1 = Math_fround(Math_fround(1.0) / $8);
       $70_1 = Math_fround(Math_fround(1.0) / $6_1);
       $51_1 = Math_fround($56_1 * $8);
       $47_1 = Math_fround($56_1 * $6_1);
       $6_1 = Math_fround(Math_fround(.3499999940395355) / ($47_1 > $51_1 ? $51_1 : $47_1));
       $71_1 = Math_fround($6_1 * $6_1);
       $72_1 = Math_fround(-$51_1);
       $2_1 = 0;
       while (1) {
        $31_1 = $2_1;
        $40_1 = ($2_1 << 4) + $80_1 | 0;
        label$238 : {
         if (!HEAP32[$40_1 + 12 >> 2]) {
          break label$238
         }
         $2_1 = HEAPU16[$40_1 + 4 >> 1];
         if (!$2_1) {
          break label$238
         }
         $3 = HEAPU16[$40_1 + 6 >> 1];
         if (!$3) {
          break label$238
         }
         $52_1 = $40_1 + 4 | 0;
         $53_1 = $40_1 + 6 | 0;
         $81_1 = HEAP32[$79_1 >> 2];
         $1_1 = HEAP32[$78_1 >> 2];
         if ($1_1) {
          $1_1 = HEAP32[$1_1 + ($31_1 << 2) >> 2]
         } else {
          $1_1 = $31_1 + HEAP32[$77 >> 2] | 0
         }
         $1_1 = $447($36_1, $1_1);
         HEAP16[$40_1 + 8 >> 1] = HEAPU16[$40_1 + 8 >> 1] + $20_1;
         HEAP16[$40_1 + 10 >> 1] = HEAPU16[$40_1 + 10 >> 1] + $20_1;
         HEAP16[$52_1 >> 1] = $2_1 - $20_1;
         HEAP16[$53_1 >> 1] = $3 - $20_1;
         $3 = HEAP32[$36_1 + 4 >> 2];
         $2_1 = $3 + HEAP32[$36_1 + 28 >> 2] | 0;
         $2_1 = HEAPU8[$2_1 + 34 | 0] << 8 | HEAPU8[$2_1 + 35 | 0];
         $2_1 = ($3 + HEAP32[$36_1 + 32 >> 2] | 0) + (($2_1 | 0) > ($1_1 | 0) ? $1_1 << 2 : ($2_1 << 2) - 4 | 0) | 0;
         $73_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8;
         $448($36_1, $1_1, $47_1, $51_1, $10_1 + 104 | 0, $10_1 + 100 | 0, $10_1 + 96 | 0, $10_1 + 92 | 0);
         $26_1 = HEAPU16[$40_1 + 8 >> 1];
         $19 = HEAPU16[$40_1 + 10 >> 1];
         $2_1 = HEAPU16[$52_1 >> 1];
         $3 = HEAPU16[$53_1 >> 1];
         $25_1 = $451($36_1, $1_1, $10_1 + 108 | 0);
         $448($36_1, $1_1, $47_1, $51_1, $10_1 + 68 | 0, $10_1 + 56 | 0, 0, 0);
         $48_1 = $2_1 - $41_1 | 0;
         $33_1 = $48_1 + 1 | 0;
         label$241 : {
          if (!$33_1) {
           break label$241
          }
          $63_1 = $3 - $42_1 | 0;
          $44_1 = $63_1 + 1 | 0;
          if (!$44_1) {
           break label$241
          }
          $38_1 = HEAP32[$10_1 + 56 >> 2];
          $64_1 = HEAP32[$10_1 + 68 >> 2];
          $34_1 = HEAP32[$10_1 + 108 >> 2];
          HEAP32[$10_1 + 112 >> 2] = 0;
          $2_1 = 0;
          $4_1 = 0;
          $39_1 = ($25_1 | 0) <= 0;
          if (!$39_1) {
           while (1) {
            $2_1 = (HEAPU8[($34_1 + Math_imul($4_1, 14) | 0) + 12 | 0] == 1) + $2_1 | 0;
            $1_1 = $4_1 + 1 | 0;
            $4_1 = $1_1;
            if (($1_1 | 0) != ($25_1 | 0)) {
             continue
            }
            break;
           }
          }
          $17_1 = $2_1;
          label$244 : {
           if (!$2_1) {
            $4_1 = 0;
            $3 = 0;
            break label$244;
           }
           $4_1 = 0;
           $2_1 = 0;
           $3 = 0;
           $5_1 = $16($17_1 << 2);
           if (!$5_1) {
            $4_1 = $5_1;
            $17_1 = 0;
            break label$244;
           }
           label$247 : {
            while (1) {
             $1_1 = $2_1;
             $2_1 = $3;
             $11_1 = $4_1;
             label$249 : {
              label$250 : {
               if (($4_1 | 0) != 1) {
                break label$250
               }
               $2_1 = $16(HEAP32[$10_1 + 112 >> 2] << 3);
               if ($2_1) {
                break label$250
               }
               $4_1 = $1_1;
               $3 = 0;
               $1_1 = 0;
               break label$249;
              }
              $7_1 = $2_1;
              HEAP32[$10_1 + 112 >> 2] = 0;
              label$251 : {
               if ($39_1) {
                $9 = -1;
                $3 = $1_1;
                break label$251;
               }
               $18_1 = Math_fround(0.0);
               $6_1 = Math_fround(0.0);
               $2_1 = $1_1;
               $4_1 = -1;
               $1_1 = 0;
               while (1) {
                $3 = $2_1;
                label$254 : {
                 label$257 : {
                  label$258 : {
                   label$259 : {
                    label$260 : {
                     $2_1 = $34_1 + Math_imul($1_1, 14) | 0;
                     switch (HEAPU8[$2_1 + 12 | 0] - 1 | 0) {
                     case 3:
                      break label$257;
                     case 2:
                      break label$258;
                     case 1:
                      break label$259;
                     case 0:
                      break label$260;
                     default:
                      break label$254;
                     };
                    }
                    if (($4_1 | 0) >= 0) {
                     HEAP32[$5_1 + ($4_1 << 2) >> 2] = HEAP32[$10_1 + 112 >> 2] - $3
                    }
                    $9 = HEAP16[$2_1 + 2 >> 1];
                    $2_1 = HEAP16[$2_1 >> 1];
                    $3 = HEAP32[$10_1 + 112 >> 2];
                    HEAP32[$10_1 + 112 >> 2] = $3 + 1;
                    $4_1 = $4_1 + 1 | 0;
                    $18_1 = Math_fround($9 | 0);
                    $6_1 = Math_fround($2_1 | 0);
                    if (!$7_1) {
                     break label$254
                    }
                    $2_1 = $7_1 + ($3 << 3) | 0;
                    HEAPF32[$2_1 + 4 >> 2] = $18_1;
                    HEAPF32[$2_1 >> 2] = $6_1;
                    break label$254;
                   }
                   $9 = HEAP16[$2_1 + 2 >> 1];
                   $2_1 = HEAP16[$2_1 >> 1];
                   $32_1 = HEAP32[$10_1 + 112 >> 2];
                   HEAP32[$10_1 + 112 >> 2] = $32_1 + 1;
                   $18_1 = Math_fround($9 | 0);
                   $6_1 = Math_fround($2_1 | 0);
                   if (!$7_1) {
                    break label$254
                   }
                   $2_1 = $7_1 + ($32_1 << 3) | 0;
                   HEAPF32[$2_1 + 4 >> 2] = $18_1;
                   HEAPF32[$2_1 >> 2] = $6_1;
                   break label$254;
                  }
                  $452($7_1, $10_1 + 112 | 0, $6_1, $18_1, Math_fround(HEAP16[$2_1 + 4 >> 1]), Math_fround(HEAP16[$2_1 + 6 >> 1]), Math_fround(HEAP16[$2_1 >> 1]), Math_fround(HEAP16[$2_1 + 2 >> 1]), $71_1, 0);
                  $6_1 = Math_fround(HEAP16[$2_1 >> 1]);
                  $18_1 = Math_fround(HEAP16[$2_1 + 2 >> 1]);
                  break label$254;
                 }
                 $453($7_1, $10_1 + 112 | 0, $6_1, $18_1, Math_fround(HEAP16[$2_1 + 4 >> 1]), Math_fround(HEAP16[$2_1 + 6 >> 1]), Math_fround(HEAP16[$2_1 + 8 >> 1]), Math_fround(HEAP16[$2_1 + 10 >> 1]), Math_fround(HEAP16[$2_1 >> 1]), Math_fround(HEAP16[$2_1 + 2 >> 1]), $71_1, 0);
                 $6_1 = Math_fround(HEAP16[$2_1 >> 1]);
                 $18_1 = Math_fround(HEAP16[$2_1 + 2 >> 1]);
                }
                $2_1 = $3;
                $9 = $4_1;
                $1_1 = $1_1 + 1 | 0;
                if (($25_1 | 0) != ($1_1 | 0)) {
                 continue
                }
                break;
               };
              }
              HEAP32[$5_1 + ($9 << 2) >> 2] = HEAP32[$10_1 + 112 >> 2] - $3;
              $4_1 = $3;
              $3 = 1;
              $1_1 = $7_1;
             }
             if (!$3) {
              break label$247
             }
             $2_1 = $4_1;
             $4_1 = $11_1 + 1 | 0;
             $3 = $1_1;
             if (!$11_1) {
              continue
             }
             break;
            };
            $4_1 = $5_1;
            break label$244;
           }
           $17($1_1);
           $17($5_1);
           $4_1 = 0;
           $3 = 0;
           $17_1 = 0;
          }
          $5_1 = $17_1;
          if (!$3) {
           break label$241
          }
          $34_1 = $4_1;
          $39_1 = $3;
          $2_1 = 0;
          $4_1 = 0;
          $1_1 = ($5_1 | 0) <= 0;
          if ($1_1) {
           $3 = 20
          } else {
           while (1) {
            $2_1 = HEAP32[$34_1 + ($4_1 << 2) >> 2] + $2_1 | 0;
            $3 = $4_1 + 1 | 0;
            $4_1 = $3;
            if (($3 | 0) != ($5_1 | 0)) {
             continue
            }
            break;
           };
           $3 = Math_imul($2_1, 20) + 20 | 0;
          }
          $11_1 = $16($3);
          if ($11_1) {
           $2_1 = 0;
           $4_1 = 0;
           $3 = 0;
           if (!$1_1) {
            while (1) {
             $7_1 = $3;
             $46_1 = $34_1 + ($4_1 << 2) | 0;
             $25_1 = HEAP32[$46_1 >> 2];
             label$268 : {
              if (($25_1 | 0) <= 0) {
               $1_1 = $2_1;
               break label$268;
              }
              $17_1 = ($7_1 << 3) + $39_1 | 0;
              $3 = $2_1;
              $9 = 0;
              $2_1 = $25_1 - 1 | 0;
              while (1) {
               $1_1 = $2_1;
               $6_1 = HEAPF32[($17_1 + ($1_1 << 3) | 0) + 4 >> 2];
               $2_1 = $9;
               $8 = HEAPF32[($17_1 + ($2_1 << 3) | 0) + 4 >> 2];
               if ($6_1 != $8) {
                $9 = $11_1 + Math_imul($3, 20) | 0;
                $32_1 = $6_1 > $8;
                HEAP32[$9 + 16 >> 2] = $32_1;
                $49 = $17_1 + (($32_1 ? $1_1 : $2_1) << 3) | 0;
                HEAPF32[$9 >> 2] = Math_fround(HEAPF32[$49 >> 2] * $47_1) + Math_fround(0.0);
                HEAPF32[$9 + 4 >> 2] = Math_fround(HEAPF32[$49 + 4 >> 2] * $72_1) + Math_fround(0.0);
                $1_1 = $17_1 + (($32_1 ? $2_1 : $1_1) << 3) | 0;
                HEAPF32[$9 + 8 >> 2] = Math_fround(HEAPF32[$1_1 >> 2] * $47_1) + Math_fround(0.0);
                HEAPF32[$9 + 12 >> 2] = Math_fround(HEAPF32[$1_1 + 4 >> 2] * $72_1) + Math_fround(0.0);
                $3 = $3 + 1 | 0;
               }
               $1_1 = $3;
               $9 = $2_1 + 1 | 0;
               if (($9 | 0) < HEAP32[$46_1 >> 2]) {
                continue
               }
               break;
              };
             }
             $2_1 = $1_1;
             $3 = $7_1 + $25_1 | 0;
             $4_1 = $4_1 + 1 | 0;
             if (($5_1 | 0) != ($4_1 | 0)) {
              continue
             }
             break;
            }
           }
           $1_1 = $2_1;
           $454($11_1, $1_1);
           $2_1 = 1;
           if (($1_1 | 0) >= 2) {
            while (1) {
             $3 = $11_1 + Math_imul($2_1, 20) | 0;
             $6_1 = HEAPF32[$3 + 4 >> 2];
             $8 = HEAPF32[$3 >> 2];
             $9 = $10_1 + 120 | 0;
             HEAP32[$9 >> 2] = HEAP32[$3 + 16 >> 2];
             $5_1 = HEAP32[$3 + 12 >> 2];
             HEAP32[$10_1 + 112 >> 2] = HEAP32[$3 + 8 >> 2];
             HEAP32[$10_1 + 116 >> 2] = $5_1;
             $3 = $2_1;
             while (1) {
              label$275 : {
               if (($2_1 | 0) <= 0) {
                $4_1 = $2_1;
                break label$275;
               }
               $5_1 = $2_1 - 1 | 0;
               $4_1 = $11_1 + Math_imul($5_1, 20) | 0;
               $7_1 = $6_1 < HEAPF32[$4_1 + 4 >> 2];
               if ($7_1) {
                $17_1 = HEAP32[$4_1 + 4 >> 2];
                $2_1 = $11_1 + Math_imul($2_1, 20) | 0;
                HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
                HEAP32[$2_1 + 4 >> 2] = $17_1;
                HEAP32[$2_1 + 16 >> 2] = HEAP32[$4_1 + 16 >> 2];
                $4_1 = $4_1 + 8 | 0;
                $17_1 = HEAP32[$4_1 + 4 >> 2];
                $2_1 = $2_1 + 8 | 0;
                HEAP32[$2_1 >> 2] = HEAP32[$4_1 >> 2];
                HEAP32[$2_1 + 4 >> 2] = $17_1;
                $2_1 = $5_1;
               }
               $4_1 = $2_1;
               if ($7_1) {
                continue
               }
              }
              break;
             };
             if (($3 | 0) != ($4_1 | 0)) {
              $2_1 = $11_1 + Math_imul($4_1, 20) | 0;
              HEAPF32[$2_1 + 4 >> 2] = $6_1;
              HEAPF32[$2_1 >> 2] = $8;
              $5_1 = HEAP32[$10_1 + 116 >> 2];
              HEAP32[$2_1 + 8 >> 2] = HEAP32[$10_1 + 112 >> 2];
              HEAP32[$2_1 + 12 >> 2] = $5_1;
              HEAP32[$2_1 + 16 >> 2] = HEAP32[$9 >> 2];
             }
             $2_1 = $3 + 1 | 0;
             if (($1_1 | 0) != ($2_1 | 0)) {
              continue
             }
             break;
            }
           }
           HEAP32[$10_1 + 80 >> 2] = 0;
           $25_1 = $10_1 + 112 | 0;
           if (($48_1 | 0) >= 64) {
            $25_1 = $16($33_1 << 3 | 4)
           }
           HEAPF32[($11_1 + Math_imul($1_1, 20) | 0) + 4 >> 2] = Math_fround($38_1 + $44_1 | 0) + Math_fround(1.0);
           $5_1 = 0;
           if ($63_1 >>> 0 <= 2147483646) {
            $82_1 = ($26_1 + $62_1 | 0) + Math_imul($19, $28_1) | 0;
            $49 = $33_1 << 2;
            $44_1 = $49 + $25_1 | 0;
            $46_1 = $44_1 + 4 | 0;
            $83 = $49 + 4 | 0;
            $65_1 = Math_fround($33_1 | 0);
            $84 = Math_fround($64_1 | 0);
            $2_1 = $11_1;
            $4_1 = $38_1;
            $3 = 0;
            $9 = 0;
            $7_1 = 0;
            $1_1 = 0;
            while (1) {
             $5_1 = $1_1;
             $33_1 = $3;
             $1_1 = $2_1;
             $26_1 = $1604($25_1, 0, $49);
             $64_1 = $1604($44_1, 0, $83);
             $32_1 = $4_1;
             $24 = Math_fround($4_1 | 0);
             $22_1 = Math_fround($24 + Math_fround(1.0));
             $2_1 = $7_1;
             $3 = $10_1 + 80 | 0;
             $4_1 = HEAP32[$10_1 + 80 >> 2];
             if ($4_1) {
              while (1) {
               label$286 : {
                if (!($24 >= HEAPF32[$4_1 + 24 >> 2])) {
                 $3 = $4_1;
                 break label$286;
                }
                HEAP32[$3 >> 2] = HEAP32[$4_1 >> 2];
                HEAP32[$4_1 >> 2] = $2_1;
                HEAP32[$4_1 + 16 >> 2] = 0;
                $2_1 = $4_1;
               }
               $4_1 = HEAP32[$3 >> 2];
               if ($4_1) {
                continue
               }
               break;
              }
             }
             $3 = $9;
             $4_1 = $2_1;
             $18_1 = HEAPF32[$1_1 + 4 >> 2];
             label$288 : {
              if (!($22_1 >= $18_1)) {
               $7_1 = $1_1;
               break label$288;
              }
              $17_1 = !$33_1 & ($38_1 | 0) != 0;
              $9 = $1_1 + 4 | 0;
              $2_1 = $1_1;
              while (1) {
               if (HEAPF32[$2_1 + 12 >> 2] != $18_1) {
                label$293 : {
                 if ($4_1) {
                  $7_1 = HEAP32[$4_1 >> 2];
                  break label$293;
                 }
                 if (!$3) {
                  $1_1 = $16(56004);
                  if (!$1_1) {
                   $7_1 = $4_1;
                   $4_1 = 0;
                   break label$293;
                  }
                  HEAP32[$1_1 >> 2] = $5_1;
                  $5_1 = $1_1;
                  $3 = 2e3;
                 }
                 $7_1 = $4_1;
                 $3 = $3 - 1 | 0;
                 $4_1 = (Math_imul($3, 28) + $5_1 | 0) + 4 | 0;
                }
                if ($4_1) {
                 $12_1 = HEAPF32[$2_1 >> 2];
                 $8 = HEAPF32[$2_1 + 12 >> 2];
                 $13 = HEAPF32[$9 >> 2];
                 $6_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 8 >> 2] - $12_1) / Math_fround($8 - $13));
                 HEAPF32[$4_1 + 8 >> 2] = $6_1;
                 HEAPF32[$4_1 + 12 >> 2] = $6_1 != Math_fround(0.0) ? Math_fround(Math_fround(1.0) / $6_1) : Math_fround(0.0);
                 HEAPF32[$4_1 + 4 >> 2] = Math_fround($12_1 + Math_fround($6_1 * Math_fround($24 - $13))) - $84;
                 $1_1 = HEAP32[$2_1 + 16 >> 2];
                 HEAPF32[$4_1 + 24 >> 2] = $8;
                 HEAPF32[$4_1 + 20 >> 2] = $13;
                 HEAP32[$4_1 >> 2] = 0;
                 HEAPF32[$4_1 + 16 >> 2] = $1_1 ? Math_fround(1.0) : Math_fround(-1.0);
                 if ($8 < $24 & $17_1) {
                  HEAPF32[$4_1 + 24 >> 2] = $24
                 }
                 HEAP32[$4_1 >> 2] = HEAP32[$10_1 + 80 >> 2];
                 HEAP32[$10_1 + 80 >> 2] = $4_1;
                }
                $4_1 = $7_1;
               }
               $9 = $2_1 + 24 | 0;
               $6_1 = HEAPF32[$9 >> 2];
               $18_1 = $6_1;
               $2_1 = $2_1 + 20 | 0;
               $7_1 = $2_1;
               if ($6_1 <= $22_1) {
                continue
               }
               break;
              };
             }
             $9 = $7_1;
             $17_1 = $3;
             $7_1 = $4_1;
             $1_1 = $5_1;
             $5_1 = HEAP32[$10_1 + 80 >> 2];
             if ($5_1) {
              $57_1 = Math_fround($22_1 - $24);
              $2_1 = $5_1;
              while (1) {
               $4_1 = $2_1;
               $18_1 = HEAPF32[$2_1 + 4 >> 2];
               $50_1 = HEAPF32[$2_1 + 8 >> 2];
               label$302 : {
                if ($50_1 == Math_fround(0.0)) {
                 if (!($18_1 < $65_1)) {
                  break label$302
                 }
                 if ($18_1 >= Math_fround(0.0)) {
                  $2_1 = Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0) ? ~~$18_1 : -2147483648;
                  $3 = $22_1 == $24;
                  label$307 : {
                   if ($3) {
                    break label$307
                   }
                   $13 = HEAPF32[$4_1 + 24 >> 2];
                   if ($13 < $24) {
                    break label$307
                   }
                   $6_1 = HEAPF32[$4_1 + 20 >> 2];
                   if ($6_1 > $22_1) {
                    break label$307
                   }
                   $12_1 = $18_1;
                   if ($6_1 > $24) {
                    $12_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($18_1 - $18_1) * Math_fround($6_1 - $24)) / $57_1))
                   } else {
                    $6_1 = $24
                   }
                   $14 = $6_1;
                   $6_1 = $12_1;
                   $12_1 = $18_1;
                   $8 = $22_1;
                   if ($8 > $13) {
                    $12_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($13 - $22_1) * Math_fround($18_1 - $6_1)) / Math_fround($22_1 - $14)));
                    $8 = $13;
                   }
                   $13 = Math_fround($2_1 | 0);
                   if (!(!($13 >= $6_1) | !($12_1 <= $13))) {
                    $19 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$19 >> 2] = Math_fround(HEAPF32[$4_1 + 16 >> 2] * Math_fround($8 - $14)) + HEAPF32[$19 >> 2];
                    break label$307;
                   }
                   $16_1 = Math_fround($2_1 + 1 | 0);
                   if ($6_1 >= $16_1 & $12_1 >= $16_1) {
                    break label$307
                   }
                   $19 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$19 >> 2] = Math_fround(Math_fround(Math_fround($8 - $14) * HEAPF32[$4_1 + 16 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($6_1 - $13) + Math_fround($12_1 - $13)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$19 >> 2];
                  }
                  if ($3) {
                   break label$302
                  }
                  $13 = HEAPF32[$4_1 + 24 >> 2];
                  if ($24 > $13) {
                   break label$302
                  }
                  $6_1 = HEAPF32[$4_1 + 20 >> 2];
                  if ($6_1 > $22_1) {
                   break label$302
                  }
                  $12_1 = $18_1;
                  $8 = $24;
                  if ($8 < $6_1) {
                   $12_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($18_1 - $18_1) * Math_fround($6_1 - $24)) / $57_1));
                   $8 = $6_1;
                  }
                  $3 = $2_1 + 1 | 0;
                  label$313 : {
                   if (!($13 < $22_1)) {
                    $13 = $22_1;
                    break label$313;
                   }
                   $18_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($13 - $22_1) * Math_fround($18_1 - $12_1)) / Math_fround($22_1 - $8)));
                  }
                  $6_1 = Math_fround($3 | 0);
                  if (!(!($6_1 >= $12_1) | !($6_1 >= $18_1))) {
                   $2_1 = $46_1 + ($2_1 << 2) | 0;
                   HEAPF32[$2_1 >> 2] = Math_fround(HEAPF32[$4_1 + 16 >> 2] * Math_fround($13 - $8)) + HEAPF32[$2_1 >> 2];
                   break label$302;
                  }
                  $14 = Math_fround($2_1 + 2 | 0);
                  if ($12_1 >= $14 & $14 <= $18_1) {
                   break label$302
                  }
                  $2_1 = $46_1 + ($2_1 << 2) | 0;
                  HEAPF32[$2_1 >> 2] = Math_fround(Math_fround(Math_fround($13 - $8) * HEAPF32[$4_1 + 16 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($12_1 - $6_1) + Math_fround($18_1 - $6_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$2_1 >> 2];
                  break label$302;
                 }
                 if ($22_1 == $24) {
                  break label$302
                 }
                 $13 = HEAPF32[$4_1 + 24 >> 2];
                 if ($24 > $13) {
                  break label$302
                 }
                 $6_1 = HEAPF32[$4_1 + 20 >> 2];
                 if ($6_1 > $22_1) {
                  break label$302
                 }
                 $12_1 = $18_1;
                 $8 = $24;
                 if ($8 < $6_1) {
                  $12_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($18_1 - $18_1) * Math_fround($6_1 - $24)) / $57_1));
                  $8 = $6_1;
                 }
                 label$318 : {
                  if (!($13 < $22_1)) {
                   $13 = $22_1;
                   break label$318;
                  }
                  $18_1 = Math_fround($18_1 + Math_fround(Math_fround(Math_fround($13 - $22_1) * Math_fround($18_1 - $12_1)) / Math_fround($22_1 - $8)));
                 }
                 if (!(!($12_1 <= Math_fround(0.0)) | !($18_1 <= Math_fround(0.0)))) {
                  HEAPF32[$44_1 >> 2] = Math_fround(HEAPF32[$4_1 + 16 >> 2] * Math_fround($13 - $8)) + HEAPF32[$44_1 >> 2];
                  break label$302;
                 }
                 if ($12_1 >= Math_fround(1.0) & $18_1 >= Math_fround(1.0)) {
                  break label$302
                 }
                 HEAPF32[$44_1 >> 2] = Math_fround(Math_fround(Math_fround($13 - $8) * HEAPF32[$4_1 + 16 >> 2]) * Math_fround(Math_fround(Math_fround($12_1 + $18_1) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$44_1 >> 2];
                 break label$302;
                }
                $29_1 = Math_fround($50_1 + $18_1);
                $6_1 = HEAPF32[$4_1 + 20 >> 2];
                $2_1 = $6_1 > $24;
                label$322 : {
                 $14 = $2_1 ? Math_fround(Math_fround($50_1 * Math_fround($6_1 - $24)) + $18_1) : $18_1;
                 if (!($14 >= Math_fround(0.0))) {
                  break label$322
                 }
                 $8 = HEAPF32[$4_1 + 24 >> 2];
                 $3 = $8 < $22_1;
                 $12_1 = $3 ? Math_fround(Math_fround($50_1 * Math_fround($8 - $24)) + $18_1) : $29_1;
                 if (!($12_1 >= Math_fround(0.0)) | !($14 < $65_1) | !($12_1 < $65_1)) {
                  break label$322
                 }
                 $16_1 = HEAPF32[$4_1 + 12 >> 2];
                 $8 = $3 ? $8 : $22_1;
                 $13 = $2_1 ? $6_1 : $24;
                 $2_1 = Math_fround(Math_abs($14)) < Math_fround(2147483648.0) ? ~~$14 : -2147483648;
                 if (($2_1 | 0) == ((Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0) ? ~~$12_1 : -2147483648) | 0)) {
                  $3 = $2_1 << 2;
                  $19 = $3 + $26_1 | 0;
                  $6_1 = Math_fround($2_1 | 0);
                  $12_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($14 - $6_1) + Math_fround($12_1 - $6_1)) * Math_fround(-.5)) + Math_fround(1.0)) * HEAPF32[$4_1 + 16 >> 2]);
                  $6_1 = Math_fround($8 - $13);
                  HEAPF32[$19 >> 2] = Math_fround($12_1 * $6_1) + HEAPF32[$19 >> 2];
                  $2_1 = $3 + $46_1 | 0;
                  HEAPF32[$2_1 >> 2] = Math_fround(HEAPF32[$4_1 + 16 >> 2] * $6_1) + HEAPF32[$2_1 >> 2];
                  break label$302;
                 }
                 label$328 : {
                  if (!($12_1 < $14)) {
                   $6_1 = $8;
                   $8 = $12_1;
                   break label$328;
                  }
                  $16_1 = Math_fround(-$16_1);
                  $6_1 = Math_fround($22_1 - Math_fround($13 - $24));
                  $13 = Math_fround($22_1 - Math_fround($8 - $24));
                  $8 = $14;
                  $14 = $12_1;
                  $18_1 = $29_1;
                 }
                 $2_1 = Math_fround(Math_abs($14)) < Math_fround(2147483648.0) ? ~~$14 : -2147483648;
                 $19 = $26_1 + ($2_1 << 2) | 0;
                 $21_1 = HEAPF32[$4_1 + 16 >> 2];
                 $3 = $2_1 + 1 | 0;
                 $29_1 = Math_fround(Math_fround(Math_fround(Math_fround($3 | 0) - $18_1) * $16_1) + $24);
                 $12_1 = $13;
                 $13 = Math_fround($21_1 * Math_fround($29_1 - $12_1));
                 HEAPF32[$19 >> 2] = Math_fround($13 * Math_fround(Math_fround(Math_fround(Math_fround($14 - Math_fround($2_1 | 0)) + Math_fround(1.0)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$19 >> 2];
                 $2_1 = Math_fround(Math_abs($8)) < Math_fround(2147483648.0) ? ~~$8 : -2147483648;
                 $19 = $2_1;
                 if (($2_1 | 0) > ($3 | 0)) {
                  $14 = Math_fround($16_1 * $21_1);
                  $30 = Math_fround($14 * Math_fround(.5));
                  $18_1 = $13;
                  $2_1 = $3;
                  while (1) {
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround($30 + $18_1) + HEAPF32[$15_1 >> 2];
                   $13 = Math_fround($14 + $18_1);
                   $18_1 = $13;
                   $2_1 = $2_1 + 1 | 0;
                   if (($19 | 0) != ($2_1 | 0)) {
                    continue
                   }
                   break;
                  };
                 }
                 $2_1 = $19 << 2;
                 $15_1 = $2_1 + $26_1 | 0;
                 HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($21_1 * Math_fround(Math_fround(Math_fround(Math_fround($8 - Math_fround($19 | 0)) + Math_fround(0.0)) * Math_fround(-.5)) + Math_fround(1.0))) * Math_fround($6_1 - Math_fround(Math_fround($16_1 * Math_fround($19 - $3 | 0)) + $29_1))) + $13) + HEAPF32[$15_1 >> 2];
                 $2_1 = $2_1 + $46_1 | 0;
                 HEAPF32[$2_1 >> 2] = Math_fround($21_1 * Math_fround($6_1 - $12_1)) + HEAPF32[$2_1 >> 2];
                 break label$302;
                }
                if ($48_1 >>> 0 > 2147483646) {
                 break label$302
                }
                $19 = $4_1 + 16 | 0;
                $85_1 = Math_fround($29_1 - $18_1);
                $3 = 0;
                while (1) {
                 $2_1 = $3;
                 $16_1 = Math_fround($2_1 | 0);
                 $58_1 = Math_fround($16_1 - $18_1);
                 $14 = Math_fround(Math_fround($58_1 / $50_1) + $24);
                 $3 = $2_1 + 1 | 0;
                 $21_1 = Math_fround($3 | 0);
                 $59_1 = Math_fround($21_1 - $18_1);
                 $12_1 = Math_fround(Math_fround($59_1 / $50_1) + $24);
                 $15_1 = $16_1 > $18_1;
                 label$338 : {
                  if (!(!$15_1 | !($21_1 < $29_1))) {
                   label$340 : {
                    if ($14 == $24) {
                     break label$340
                    }
                    $43_1 = HEAPF32[$4_1 + 24 >> 2];
                    if ($43_1 < $24) {
                     break label$340
                    }
                    $8 = HEAPF32[$4_1 + 20 >> 2];
                    if ($8 > $14) {
                     break label$340
                    }
                    $13 = $18_1;
                    $6_1 = $24;
                    if ($6_1 < $8) {
                     $13 = Math_fround($18_1 + Math_fround(Math_fround($58_1 * Math_fround($8 - $24)) / Math_fround($14 - $24)));
                     $6_1 = $8;
                    }
                    $30 = $13;
                    $13 = $14;
                    $8 = $16_1;
                    $15_1 = !($30 <= $8);
                    $16_1 = $8;
                    if ($14 > $43_1) {
                     $13 = $43_1;
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $14) * Math_fround($16_1 - $30)) / Math_fround($14 - $6_1)) + $16_1);
                    }
                    if (!($15_1 | !($16_1 >= $8))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($13 - $6_1)) + HEAPF32[$15_1 >> 2];
                     break label$340;
                    }
                    if ($21_1 <= $30 & $8 >= $21_1) {
                     break label$340
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($13 - $6_1) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($30 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   label$345 : {
                    if ($12_1 == $14) {
                     break label$345
                    }
                    $30 = HEAPF32[$4_1 + 24 >> 2];
                    if ($30 < $14) {
                     break label$345
                    }
                    $6_1 = HEAPF32[$4_1 + 20 >> 2];
                    if ($6_1 > $12_1) {
                     break label$345
                    }
                    label$346 : {
                     if (!($6_1 > $14)) {
                      $8 = $16_1;
                      break label$346;
                     }
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($21_1 - $16_1) * Math_fround($6_1 - $14)) / Math_fround($12_1 - $14)) + $16_1);
                     $14 = $6_1;
                    }
                    $6_1 = $21_1;
                    $13 = $8;
                    $15_1 = !($8 <= $16_1);
                    $8 = $12_1;
                    if ($30 < $8) {
                     $8 = $30;
                     $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $12_1) * Math_fround($21_1 - $13)) / Math_fround($12_1 - $14)) + $21_1);
                    }
                    if (!($15_1 | !($6_1 <= $16_1))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($8 - $14)) + HEAPF32[$15_1 >> 2];
                     break label$345;
                    }
                    if ($13 >= $21_1 & $6_1 >= $21_1) {
                     break label$345
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($8 - $14) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($6_1 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   if ($12_1 == $22_1) {
                    break label$338
                   }
                   $14 = HEAPF32[$4_1 + 24 >> 2];
                   if ($14 < $12_1) {
                    break label$338
                   }
                   $8 = HEAPF32[$4_1 + 20 >> 2];
                   if ($8 > $22_1) {
                    break label$338
                   }
                   label$351 : {
                    if (!($8 > $12_1)) {
                     $6_1 = $21_1;
                     break label$351;
                    }
                    $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 - $21_1) * Math_fround($8 - $12_1)) / Math_fround($22_1 - $12_1)) + $21_1);
                    $12_1 = $8;
                   }
                   $13 = $6_1;
                   $8 = $29_1;
                   $6_1 = $22_1;
                   if ($6_1 > $14) {
                    $8 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($14 - $22_1) * Math_fround($29_1 - $13)) / Math_fround($22_1 - $12_1)));
                    $6_1 = $14;
                   }
                   if (!(!($13 <= $16_1) | !($8 <= $16_1))) {
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($6_1 - $12_1)) + HEAPF32[$15_1 >> 2];
                    break label$338;
                   }
                   if ($13 >= $21_1 & $8 >= $21_1) {
                    break label$338
                   }
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 - $12_1) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   break label$338;
                  }
                  $74 = $16_1 > $29_1;
                  if (!(!$74 | !($18_1 > $21_1))) {
                   label$357 : {
                    if ($12_1 == $24) {
                     break label$357
                    }
                    $43_1 = HEAPF32[$4_1 + 24 >> 2];
                    if ($43_1 < $24) {
                     break label$357
                    }
                    $8 = HEAPF32[$4_1 + 20 >> 2];
                    if ($8 > $12_1) {
                     break label$357
                    }
                    $13 = $18_1;
                    $6_1 = $24;
                    if ($6_1 < $8) {
                     $13 = Math_fround($18_1 + Math_fround(Math_fround($59_1 * Math_fround($8 - $24)) / Math_fround($12_1 - $24)));
                     $6_1 = $8;
                    }
                    $30 = $13;
                    $8 = $21_1;
                    $13 = $12_1;
                    if ($12_1 > $43_1) {
                     $13 = $43_1;
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($13 - $12_1) * Math_fround($21_1 - $30)) / Math_fround($12_1 - $6_1)) + $21_1);
                    }
                    if (!(!($16_1 >= $30) | !($8 <= $16_1))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($13 - $6_1)) + HEAPF32[$15_1 >> 2];
                     break label$357;
                    }
                    if ($21_1 <= $30 & $8 >= $21_1) {
                     break label$357
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($13 - $6_1) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($30 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   label$362 : {
                    if ($12_1 == $14) {
                     break label$362
                    }
                    $30 = HEAPF32[$4_1 + 24 >> 2];
                    if ($30 < $12_1) {
                     break label$362
                    }
                    $6_1 = HEAPF32[$4_1 + 20 >> 2];
                    if ($6_1 > $14) {
                     break label$362
                    }
                    label$363 : {
                     if (!($6_1 > $12_1)) {
                      $8 = $21_1;
                      break label$363;
                     }
                     $8 = Math_fround(Math_fround(Math_fround(Math_fround($16_1 - $21_1) * Math_fround($6_1 - $12_1)) / Math_fround($14 - $12_1)) + $21_1);
                     $12_1 = $6_1;
                    }
                    $6_1 = $16_1;
                    $13 = $8;
                    $15_1 = !($6_1 >= $8);
                    $16_1 = $6_1;
                    $8 = $14;
                    if ($8 > $30) {
                     $8 = $30;
                     $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * Math_fround($16_1 - $13)) / Math_fround($14 - $12_1)) + $16_1);
                    }
                    if (!($15_1 | !($16_1 >= $6_1))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($8 - $12_1)) + HEAPF32[$15_1 >> 2];
                     break label$362;
                    }
                    if ($13 >= $21_1 & $6_1 >= $21_1) {
                     break label$362
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($8 - $12_1) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($6_1 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   if ($14 == $22_1) {
                    break label$338
                   }
                   $12_1 = HEAPF32[$4_1 + 24 >> 2];
                   if ($12_1 < $14) {
                    break label$338
                   }
                   $8 = HEAPF32[$4_1 + 20 >> 2];
                   if ($8 > $22_1) {
                    break label$338
                   }
                   label$368 : {
                    if (!($8 > $14)) {
                     $6_1 = $16_1;
                     break label$368;
                    }
                    $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 - $16_1) * Math_fround($8 - $14)) / Math_fround($22_1 - $14)) + $16_1);
                    $14 = $8;
                   }
                   $13 = $6_1;
                   $8 = $29_1;
                   $6_1 = $22_1;
                   if ($6_1 > $12_1) {
                    $8 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($12_1 - $22_1) * Math_fround($29_1 - $13)) / Math_fround($22_1 - $14)));
                    $6_1 = $12_1;
                   }
                   if (!(!($13 <= $16_1) | !($8 <= $16_1))) {
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($6_1 - $14)) + HEAPF32[$15_1 >> 2];
                    break label$338;
                   }
                   if ($13 >= $21_1 & $8 >= $21_1) {
                    break label$338
                   }
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 - $14) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   break label$338;
                  }
                  if (!(!$15_1 | !($16_1 < $29_1))) {
                   label$374 : {
                    if ($14 == $24) {
                     break label$374
                    }
                    $30 = HEAPF32[$4_1 + 24 >> 2];
                    if ($30 < $24) {
                     break label$374
                    }
                    $8 = HEAPF32[$4_1 + 20 >> 2];
                    if ($8 > $14) {
                     break label$374
                    }
                    $6_1 = $16_1;
                    $13 = $24;
                    if ($13 < $8) {
                     $13 = $8;
                     $12_1 = Math_fround($18_1 + Math_fround(Math_fround($58_1 * Math_fround($8 - $24)) / Math_fround($14 - $24)));
                    } else {
                     $12_1 = $18_1
                    }
                    $15_1 = !($6_1 >= $12_1);
                    $43_1 = $6_1;
                    $8 = $14;
                    if ($8 > $30) {
                     $8 = $30;
                     $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * Math_fround($16_1 - $12_1)) / Math_fround($14 - $13)) + $16_1);
                    }
                    if (!($15_1 | !($43_1 >= $6_1))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($8 - $13)) + HEAPF32[$15_1 >> 2];
                     break label$374;
                    }
                    if ($12_1 >= $21_1 & $6_1 >= $21_1) {
                     break label$374
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($8 - $13) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($12_1 - $16_1) + Math_fround($6_1 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   if ($14 == $22_1) {
                    break label$338
                   }
                   $12_1 = HEAPF32[$4_1 + 24 >> 2];
                   if ($12_1 < $14) {
                    break label$338
                   }
                   $8 = HEAPF32[$4_1 + 20 >> 2];
                   if ($8 > $22_1) {
                    break label$338
                   }
                   label$379 : {
                    if (!($8 > $14)) {
                     $6_1 = $16_1;
                     break label$379;
                    }
                    $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 - $16_1) * Math_fround($8 - $14)) / Math_fround($22_1 - $14)) + $16_1);
                    $14 = $8;
                   }
                   $13 = $6_1;
                   $8 = $29_1;
                   $6_1 = $22_1;
                   if ($6_1 > $12_1) {
                    $8 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($12_1 - $22_1) * Math_fround($29_1 - $13)) / Math_fround($22_1 - $14)));
                    $6_1 = $12_1;
                   }
                   if (!(!($13 <= $16_1) | !($8 <= $16_1))) {
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($6_1 - $14)) + HEAPF32[$15_1 >> 2];
                    break label$338;
                   }
                   if ($13 >= $21_1 & $8 >= $21_1) {
                    break label$338
                   }
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 - $14) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   break label$338;
                  }
                  if (!(!$74 | !($16_1 < $18_1))) {
                   label$385 : {
                    if ($14 == $24) {
                     break label$385
                    }
                    $30 = HEAPF32[$4_1 + 24 >> 2];
                    if ($30 < $24) {
                     break label$385
                    }
                    $8 = HEAPF32[$4_1 + 20 >> 2];
                    if ($8 > $14) {
                     break label$385
                    }
                    $6_1 = $16_1;
                    $13 = $24;
                    if ($13 < $8) {
                     $13 = $8;
                     $12_1 = Math_fround($18_1 + Math_fround(Math_fround($58_1 * Math_fround($8 - $24)) / Math_fround($14 - $24)));
                    } else {
                     $12_1 = $18_1
                    }
                    $15_1 = !($6_1 >= $12_1);
                    $43_1 = $6_1;
                    $8 = $14;
                    if ($8 > $30) {
                     $8 = $30;
                     $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $14) * Math_fround($16_1 - $12_1)) / Math_fround($14 - $13)) + $16_1);
                    }
                    if (!($15_1 | !($43_1 >= $6_1))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($8 - $13)) + HEAPF32[$15_1 >> 2];
                     break label$385;
                    }
                    if ($12_1 >= $21_1 & $6_1 >= $21_1) {
                     break label$385
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($8 - $13) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($12_1 - $16_1) + Math_fround($6_1 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   if ($14 == $22_1) {
                    break label$338
                   }
                   $12_1 = HEAPF32[$4_1 + 24 >> 2];
                   if ($12_1 < $14) {
                    break label$338
                   }
                   $8 = HEAPF32[$4_1 + 20 >> 2];
                   if ($8 > $22_1) {
                    break label$338
                   }
                   label$390 : {
                    if (!($8 > $14)) {
                     $6_1 = $16_1;
                     break label$390;
                    }
                    $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 - $16_1) * Math_fround($8 - $14)) / Math_fround($22_1 - $14)) + $16_1);
                    $14 = $8;
                   }
                   $13 = $6_1;
                   $8 = $29_1;
                   $6_1 = $22_1;
                   if ($6_1 > $12_1) {
                    $8 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($12_1 - $22_1) * Math_fround($29_1 - $13)) / Math_fround($22_1 - $14)));
                    $6_1 = $12_1;
                   }
                   if (!(!($13 <= $16_1) | !($8 <= $16_1))) {
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($6_1 - $14)) + HEAPF32[$15_1 >> 2];
                    break label$338;
                   }
                   if ($13 >= $21_1 & $8 >= $21_1) {
                    break label$338
                   }
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 - $14) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   break label$338;
                  }
                  if (!(!($18_1 < $21_1) | !($21_1 < $29_1))) {
                   label$396 : {
                    if ($12_1 == $24) {
                     break label$396
                    }
                    $30 = HEAPF32[$4_1 + 24 >> 2];
                    if ($30 < $24) {
                     break label$396
                    }
                    $6_1 = HEAPF32[$4_1 + 20 >> 2];
                    if ($6_1 > $12_1) {
                     break label$396
                    }
                    $13 = $24;
                    if ($13 < $6_1) {
                     $13 = $6_1;
                     $14 = Math_fround($18_1 + Math_fround(Math_fround($59_1 * Math_fround($6_1 - $24)) / Math_fround($12_1 - $24)));
                    } else {
                     $14 = $18_1
                    }
                    $6_1 = $21_1;
                    $8 = $12_1;
                    if ($8 > $30) {
                     $8 = $30;
                     $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $12_1) * Math_fround($21_1 - $14)) / Math_fround($12_1 - $13)) + $21_1);
                    }
                    if (!(!($14 <= $16_1) | !($6_1 <= $16_1))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($8 - $13)) + HEAPF32[$15_1 >> 2];
                     break label$396;
                    }
                    if ($14 >= $21_1 & $6_1 >= $21_1) {
                     break label$396
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($8 - $13) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($14 - $16_1) + Math_fround($6_1 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   if ($12_1 == $22_1) {
                    break label$338
                   }
                   $14 = HEAPF32[$4_1 + 24 >> 2];
                   if ($14 < $12_1) {
                    break label$338
                   }
                   $8 = HEAPF32[$4_1 + 20 >> 2];
                   if ($8 > $22_1) {
                    break label$338
                   }
                   label$401 : {
                    if (!($8 > $12_1)) {
                     $6_1 = $21_1;
                     break label$401;
                    }
                    $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 - $21_1) * Math_fround($8 - $12_1)) / Math_fround($22_1 - $12_1)) + $21_1);
                    $12_1 = $8;
                   }
                   $13 = $6_1;
                   $8 = $29_1;
                   $6_1 = $22_1;
                   if ($6_1 > $14) {
                    $8 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($14 - $22_1) * Math_fround($29_1 - $13)) / Math_fround($22_1 - $12_1)));
                    $6_1 = $14;
                   }
                   if (!(!($13 <= $16_1) | !($8 <= $16_1))) {
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($6_1 - $12_1)) + HEAPF32[$15_1 >> 2];
                    break label$338;
                   }
                   if ($13 >= $21_1 & $8 >= $21_1) {
                    break label$338
                   }
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 - $12_1) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   break label$338;
                  }
                  if (!(!($21_1 > $29_1) | !($18_1 > $21_1))) {
                   label$407 : {
                    if ($12_1 == $24) {
                     break label$407
                    }
                    $30 = HEAPF32[$4_1 + 24 >> 2];
                    if ($30 < $24) {
                     break label$407
                    }
                    $6_1 = HEAPF32[$4_1 + 20 >> 2];
                    if ($6_1 > $12_1) {
                     break label$407
                    }
                    $13 = $24;
                    if ($13 < $6_1) {
                     $13 = $6_1;
                     $14 = Math_fround($18_1 + Math_fround(Math_fround($59_1 * Math_fround($6_1 - $24)) / Math_fround($12_1 - $24)));
                    } else {
                     $14 = $18_1
                    }
                    $6_1 = $21_1;
                    $8 = $12_1;
                    if ($8 > $30) {
                     $8 = $30;
                     $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($8 - $12_1) * Math_fround($21_1 - $14)) / Math_fround($12_1 - $13)) + $21_1);
                    }
                    if (!(!($14 <= $16_1) | !($6_1 <= $16_1))) {
                     $15_1 = $26_1 + ($2_1 << 2) | 0;
                     HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($8 - $13)) + HEAPF32[$15_1 >> 2];
                     break label$407;
                    }
                    if ($14 >= $21_1 & $6_1 >= $21_1) {
                     break label$407
                    }
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($8 - $13) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($14 - $16_1) + Math_fround($6_1 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   }
                   if ($12_1 == $22_1) {
                    break label$338
                   }
                   $14 = HEAPF32[$4_1 + 24 >> 2];
                   if ($14 < $12_1) {
                    break label$338
                   }
                   $8 = HEAPF32[$4_1 + 20 >> 2];
                   if ($8 > $22_1) {
                    break label$338
                   }
                   label$412 : {
                    if (!($8 > $12_1)) {
                     $6_1 = $21_1;
                     break label$412;
                    }
                    $6_1 = Math_fround(Math_fround(Math_fround(Math_fround($29_1 - $21_1) * Math_fround($8 - $12_1)) / Math_fround($22_1 - $12_1)) + $21_1);
                    $12_1 = $8;
                   }
                   $13 = $6_1;
                   $8 = $29_1;
                   $6_1 = $22_1;
                   if ($6_1 > $14) {
                    $8 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($14 - $22_1) * Math_fround($29_1 - $13)) / Math_fround($22_1 - $12_1)));
                    $6_1 = $14;
                   }
                   if (!(!($13 <= $16_1) | !($8 <= $16_1))) {
                    $15_1 = $26_1 + ($2_1 << 2) | 0;
                    HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($6_1 - $12_1)) + HEAPF32[$15_1 >> 2];
                    break label$338;
                   }
                   if ($13 >= $21_1 & $8 >= $21_1) {
                    break label$338
                   }
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 - $12_1) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                   break label$338;
                  }
                  if ($22_1 == $24) {
                   break label$338
                  }
                  $12_1 = HEAPF32[$4_1 + 24 >> 2];
                  if ($12_1 < $24) {
                   break label$338
                  }
                  $6_1 = HEAPF32[$4_1 + 20 >> 2];
                  if ($6_1 > $22_1) {
                   break label$338
                  }
                  $8 = $18_1;
                  if ($6_1 > $24) {
                   $8 = Math_fround($18_1 + Math_fround(Math_fround($85_1 * Math_fround($6_1 - $24)) / $57_1))
                  } else {
                   $6_1 = $24
                  }
                  $14 = $6_1;
                  $13 = $8;
                  $8 = $29_1;
                  $6_1 = $22_1;
                  if ($6_1 > $12_1) {
                   $8 = Math_fround($29_1 + Math_fround(Math_fround(Math_fround($12_1 - $22_1) * Math_fround($29_1 - $13)) / Math_fround($22_1 - $14)));
                   $6_1 = $12_1;
                  }
                  if (!(!($13 <= $16_1) | !($8 <= $16_1))) {
                   $15_1 = $26_1 + ($2_1 << 2) | 0;
                   HEAPF32[$15_1 >> 2] = Math_fround(HEAPF32[$19 >> 2] * Math_fround($6_1 - $14)) + HEAPF32[$15_1 >> 2];
                   break label$338;
                  }
                  if ($13 >= $21_1 & $8 >= $21_1) {
                   break label$338
                  }
                  $15_1 = $26_1 + ($2_1 << 2) | 0;
                  HEAPF32[$15_1 >> 2] = Math_fround(Math_fround(Math_fround($6_1 - $14) * HEAPF32[$19 >> 2]) * Math_fround(Math_fround(Math_fround(Math_fround($13 - $16_1) + Math_fround($8 - $16_1)) * Math_fround(-.5)) + Math_fround(1.0))) + HEAPF32[$15_1 >> 2];
                 }
                 if (($2_1 | 0) != ($48_1 | 0)) {
                  continue
                 }
                 break;
                };
               }
               $2_1 = HEAP32[$4_1 >> 2];
               if ($2_1) {
                continue
               }
               break;
              };
             }
             if ($48_1 >>> 0 <= 2147483646) {
              $19 = Math_imul($28_1, $33_1);
              $6_1 = Math_fround(0.0);
              $4_1 = 0;
              while (1) {
               $2_1 = $4_1;
               $3 = $2_1 << 2;
               $6_1 = Math_fround($6_1 + HEAPF32[$3 + $64_1 >> 2]);
               $8 = Math_fround(Math_fround(Math_fround(Math_abs(Math_fround(HEAPF32[$3 + $26_1 >> 2] + $6_1))) * Math_fround(255.0)) + Math_fround(.5));
               label$423 : {
                if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
                 $3 = ~~$8;
                 break label$423;
                }
                $3 = -2147483648;
               }
               HEAP8[$82_1 + ($2_1 + $19 | 0) | 0] = ($3 | 0) >= 255 ? 255 : $3;
               $4_1 = $2_1 + 1 | 0;
               if (($2_1 | 0) != ($48_1 | 0)) {
                continue
               }
               break;
              };
             }
             $2_1 = $5_1;
             if ($2_1) {
              while (1) {
               HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$2_1 + 8 >> 2] + HEAPF32[$2_1 + 4 >> 2];
               $2_1 = HEAP32[$2_1 >> 2];
               if ($2_1) {
                continue
               }
               break;
              }
             }
             $2_1 = $9;
             $4_1 = $32_1 + 1 | 0;
             $3 = $33_1 + 1 | 0;
             $9 = $17_1;
             $5_1 = $1_1;
             if (($33_1 | 0) != ($63_1 | 0)) {
              continue
             }
             break;
            };
           }
           $4_1 = $5_1;
           if ($4_1) {
            while (1) {
             $1_1 = HEAP32[$4_1 >> 2];
             $17($4_1);
             $4_1 = $1_1;
             if ($1_1) {
              continue
             }
             break;
            }
           }
           if (($25_1 | 0) != ($10_1 + 112 | 0)) {
            $17($25_1)
           }
           $17($11_1);
          }
          $17($34_1);
          $17($39_1);
         }
         $34_1 = Math_imul($31_1, 28);
         $39_1 = $73_1 >>> 8 | 0;
         $32_1 = $73_1 << 8;
         $25_1 = $40_1 + 10 | 0;
         $33_1 = $40_1 + 8 | 0;
         $17(HEAP32[$10_1 + 108 >> 2]);
         label$430 : {
          if ($41_1 >>> 0 < 2) {
           break label$430
          }
          $38_1 = HEAPU16[$53_1 >> 1];
          $11_1 = HEAPU16[$52_1 >> 1];
          $1_1 = HEAPU16[$25_1 >> 1];
          $3 = HEAPU16[$33_1 >> 1];
          HEAP32[$10_1 + 112 >> 2] = 0;
          HEAP32[$10_1 + 116 >> 2] = 0;
          if (!$38_1) {
           break label$430
          }
          $17_1 = $11_1 - $41_1 | 0;
          $2_1 = 0;
          $4_1 = ($3 + $62_1 | 0) + Math_imul($1_1, $28_1) | 0;
          while (1) {
           $1_1 = $2_1;
           $1604($10_1 + 112 | 0, 0, $41_1);
           label$432 : {
            label$433 : {
             switch ($41_1 - 2 | 0) {
             case 0:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$432
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 2 & 7 | $2_1;
               $2_1 = $4_1 + $7_1 | 0;
               $26_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $26_1;
               $3 = ($26_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = $3 >>> 1;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             case 1:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$432
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 3 & 7 | $2_1;
               $2_1 = $4_1 + $7_1 | 0;
               $26_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $26_1;
               $3 = ($26_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = ($3 >>> 0) / 3;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             case 2:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$432
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 4 & 7 | $2_1;
               $2_1 = $4_1 + $7_1 | 0;
               $26_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $26_1;
               $3 = ($26_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = $3 >>> 2;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             case 3:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$432
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 5 & 7 | $2_1;
               $2_1 = $4_1 + $7_1 | 0;
               $26_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $26_1;
               $3 = ($26_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = ($3 >>> 0) / 5;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$432;
             default:
              break label$433;
             };
            }
            $5_1 = 0;
            $7_1 = 0;
            $2_1 = 0;
            $3 = 0;
            if (($17_1 | 0) < 0) {
             break label$432
            }
            while (1) {
             $2_1 = $10_1 + 112 | 0;
             $9 = $7_1;
             $3 = HEAPU8[$2_1 | $7_1 & 7];
             $19 = $7_1 + $41_1 & 7 | $2_1;
             $2_1 = $4_1 + $7_1 | 0;
             $26_1 = HEAPU8[$2_1 | 0];
             HEAP8[$19 | 0] = $26_1;
             $3 = ($26_1 - $3 | 0) + $5_1 | 0;
             HEAP8[$2_1 | 0] = ($3 >>> 0) / ($41_1 >>> 0);
             $5_1 = $3;
             $2_1 = $7_1 + 1 | 0;
             $7_1 = $2_1;
             if (($9 | 0) != ($17_1 | 0)) {
              continue
             }
             break;
            };
           }
           if (($2_1 | 0) < ($11_1 | 0)) {
            while (1) {
             $3 = $3 - HEAPU8[$10_1 + 112 | $2_1 & 7] | 0;
             HEAP8[$2_1 + $4_1 | 0] = ($3 >>> 0) / ($41_1 >>> 0);
             $2_1 = $2_1 + 1 | 0;
             if (($11_1 | 0) != ($2_1 | 0)) {
              continue
             }
             break;
            }
           }
           $4_1 = $4_1 + $28_1 | 0;
           $2_1 = $1_1 + 1 | 0;
           if (($38_1 | 0) != ($2_1 | 0)) {
            continue
           }
           break;
          };
         }
         $11_1 = $34_1 + $81_1 | 0;
         $39_1 = $32_1 | $39_1;
         label$445 : {
          if ($42_1 >>> 0 < 2) {
           break label$445
          }
          $38_1 = HEAPU16[$53_1 >> 1];
          $34_1 = HEAPU16[$52_1 >> 1];
          $1_1 = HEAPU16[$25_1 >> 1];
          $3 = HEAPU16[$33_1 >> 1];
          HEAP32[$10_1 + 112 >> 2] = 0;
          HEAP32[$10_1 + 116 >> 2] = 0;
          if (!$34_1) {
           break label$445
          }
          $17_1 = $38_1 - $42_1 | 0;
          $2_1 = 0;
          $4_1 = ($3 + $62_1 | 0) + Math_imul($1_1, $28_1) | 0;
          while (1) {
           $1_1 = $2_1;
           $1604($10_1 + 112 | 0, 0, $42_1);
           label$447 : {
            label$448 : {
             switch ($42_1 - 2 | 0) {
             case 0:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$447
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 2 & 7 | $2_1;
               $2_1 = Math_imul($7_1, $28_1) + $4_1 | 0;
               $32_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $32_1;
               $3 = ($32_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = $3 >>> 1;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             case 1:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$447
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 3 & 7 | $2_1;
               $2_1 = Math_imul($7_1, $28_1) + $4_1 | 0;
               $32_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $32_1;
               $3 = ($32_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = ($3 >>> 0) / 3;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             case 2:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$447
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 4 & 7 | $2_1;
               $2_1 = Math_imul($7_1, $28_1) + $4_1 | 0;
               $32_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $32_1;
               $3 = ($32_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = $3 >>> 2;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             case 3:
              $5_1 = 0;
              $7_1 = 0;
              $2_1 = 0;
              $3 = 0;
              if (($17_1 | 0) < 0) {
               break label$447
              }
              while (1) {
               $2_1 = $10_1 + 112 | 0;
               $9 = $7_1;
               $3 = HEAPU8[$2_1 | $7_1 & 7];
               $19 = $7_1 + 5 & 7 | $2_1;
               $2_1 = Math_imul($7_1, $28_1) + $4_1 | 0;
               $32_1 = HEAPU8[$2_1 | 0];
               HEAP8[$19 | 0] = $32_1;
               $3 = ($32_1 - $3 | 0) + $5_1 | 0;
               HEAP8[$2_1 | 0] = ($3 >>> 0) / 5;
               $5_1 = $3;
               $2_1 = $7_1 + 1 | 0;
               $7_1 = $2_1;
               if (($9 | 0) != ($17_1 | 0)) {
                continue
               }
               break;
              };
              break label$447;
             default:
              break label$448;
             };
            }
            $5_1 = 0;
            $7_1 = 0;
            $2_1 = 0;
            $3 = 0;
            if (($17_1 | 0) < 0) {
             break label$447
            }
            while (1) {
             $2_1 = $10_1 + 112 | 0;
             $9 = $7_1;
             $3 = HEAPU8[$2_1 | $7_1 & 7];
             $19 = $7_1 + $42_1 & 7 | $2_1;
             $2_1 = Math_imul($7_1, $28_1) + $4_1 | 0;
             $32_1 = HEAPU8[$2_1 | 0];
             HEAP8[$19 | 0] = $32_1;
             $3 = ($32_1 - $3 | 0) + $5_1 | 0;
             HEAP8[$2_1 | 0] = ($3 >>> 0) / ($42_1 >>> 0);
             $5_1 = $3;
             $2_1 = $7_1 + 1 | 0;
             $7_1 = $2_1;
             if (($9 | 0) != ($17_1 | 0)) {
              continue
             }
             break;
            };
           }
           if (($2_1 | 0) < ($38_1 | 0)) {
            while (1) {
             $3 = $3 - HEAPU8[$10_1 + 112 | $2_1 & 7] | 0;
             HEAP8[Math_imul($2_1, $28_1) + $4_1 | 0] = ($3 >>> 0) / ($42_1 >>> 0);
             $2_1 = $2_1 + 1 | 0;
             if (($38_1 | 0) != ($2_1 | 0)) {
              continue
             }
             break;
            }
           }
           $4_1 = $4_1 + 1 | 0;
           $2_1 = $1_1 + 1 | 0;
           if (($34_1 | 0) != ($2_1 | 0)) {
            continue
           }
           break;
          };
         }
         $1_1 = HEAPU16[$33_1 >> 1];
         HEAP16[$11_1 >> 1] = $1_1;
         $2_1 = HEAPU16[$25_1 >> 1];
         HEAP16[$11_1 + 2 >> 1] = $2_1;
         $3 = HEAPU16[$52_1 >> 1];
         HEAP16[$11_1 + 4 >> 1] = $1_1 + $3;
         $1_1 = HEAPU16[$53_1 >> 1];
         HEAPF32[$11_1 + 16 >> 2] = $56_1 * Math_fround($39_1 << 16 >> 16);
         HEAP16[$11_1 + 6 >> 1] = $2_1 + $1_1;
         $5_1 = HEAP32[$10_1 + 104 >> 2];
         HEAPF32[$11_1 + 8 >> 2] = Math_fround(Math_fround($5_1 | 0) * $70_1) + $67_1;
         $2_1 = HEAP32[$10_1 + 100 >> 2];
         HEAPF32[$11_1 + 20 >> 2] = Math_fround(Math_fround($3 + $5_1 | 0) * $70_1) + $67_1;
         HEAPF32[$11_1 + 12 >> 2] = Math_fround(Math_fround($2_1 | 0) * $69_1) + $68_1;
         HEAPF32[$11_1 + 24 >> 2] = Math_fround(Math_fround($2_1 + $1_1 | 0) * $69_1) + $68_1;
        }
        $2_1 = $31_1 + 1 | 0;
        if (($2_1 | 0) < HEAP32[$66 >> 2]) {
         continue
        }
        break;
       };
      }
      $9 = $36_1 + 148 | 0;
      $8 = HEAPF32[(Math_imul($45_1, 120) + $76_1 | 0) + 68 >> 2];
      label$460 : {
       if ($8 == Math_fround(1.0)) {
        break label$460
       }
       $7_1 = $36_1 + 168 | 0;
       $2_1 = 0;
       while (1) {
        $3 = ($10_1 + 112 | 0) + $2_1 | 0;
        $6_1 = Math_fround($8 * Math_fround($2_1 >>> 0));
        label$462 : {
         if ($6_1 < Math_fround(4294967296.0) & $6_1 >= Math_fround(0.0)) {
          $1_1 = ~~$6_1 >>> 0;
          break label$462;
         }
         $1_1 = 0;
        }
        HEAP8[$3 | 0] = $1_1 >>> 0 >= 255 ? 255 : $1_1;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != 256) {
         continue
        }
        break;
       };
       if (HEAP32[$7_1 >> 2] <= 0) {
        break label$460
       }
       $2_1 = 0;
       $4_1 = HEAP32[$9 >> 2];
       while (1) {
        $5_1 = $2_1;
        $1_1 = $4_1;
        label$465 : {
         if (!HEAP32[$1_1 + 12 >> 2]) {
          break label$465
         }
         $2_1 = HEAPU16[$1_1 + 6 >> 1];
         if (!$2_1) {
          break label$465
         }
         $17_1 = HEAPU16[$1_1 + 4 >> 1];
         $11_1 = HEAP32[$75_1 >> 2];
         $4_1 = (HEAP32[$0_1 + 20 >> 2] + HEAPU16[$1_1 + 8 >> 1] | 0) + Math_imul($11_1, HEAPU16[$1_1 + 10 >> 1]) | 0;
         while (1) {
          $3 = $2_1;
          $2_1 = 0;
          if ($17_1) {
           while (1) {
            $31_1 = $2_1 + $4_1 | 0;
            HEAP8[$31_1 | 0] = HEAPU8[HEAPU8[$31_1 | 0] + ($10_1 + 112 | 0) | 0];
            $2_1 = $2_1 + 1 | 0;
            if (($17_1 | 0) != ($2_1 | 0)) {
             continue
            }
            break;
           }
          }
          $2_1 = $3 - 1 | 0;
          $4_1 = $4_1 + $11_1 | 0;
          if (($3 | 0) > 1) {
           continue
          }
          break;
         };
        }
        $4_1 = $1_1 + 16 | 0;
        $2_1 = $5_1 + 1 | 0;
        if (($2_1 | 0) < HEAP32[$7_1 >> 2]) {
         continue
        }
        break;
       };
      }
      HEAP32[$9 >> 2] = 0;
     }
     $2_1 = $45_1 + 1 | 0;
     if (($37 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   $17($55_1);
   $17($27_1);
   if ($23_1) {
    $17($23_1);
    $23_1 = 0;
   }
   if (($37 | 0) > 0) {
    $2_1 = 0;
    while (1) {
     $3 = $2_1;
     $5_1 = Math_imul($2_1, 196) + $35_1 | 0;
     label$473 : {
      if (!HEAP32[$5_1 + 168 >> 2]) {
       break label$473
      }
      $2_1 = HEAP32[$5_1 + 4 >> 2] + HEAP32[$5_1 + 28 >> 2] | 0;
      $1_1 = HEAPU8[$2_1 + 6 | 0] | HEAPU8[$2_1 + 7 | 0] << 8;
      $4_1 = ($1_1 << 8 | $1_1 >>> 8) << 16 >> 16;
      $1_1 = HEAP32[$0_1 + 84 >> 2] + Math_imul($3, 120) | 0;
      $2_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8;
      $9 = ($2_1 << 8 | $2_1 >>> 8) << 16 >> 16;
      $8 = Math_fround(HEAPF32[$1_1 + 16 >> 2] / Math_fround($9 - $4_1 | 0));
      $6_1 = Math_fround(Math_fround(Math_fround($4_1 | 0) * $8) + (($4_1 | 0) <= 0 ? Math_fround(-1.0) : Math_fround(1.0)));
      label$474 : {
       if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$6_1;
        break label$474;
       }
       $2_1 = -2147483648;
      }
      $6_1 = Math_fround($2_1 | 0);
      $4_1 = $5_1 + 168 | 0;
      $7_1 = HEAP32[$1_1 + 116 >> 2];
      $2_1 = $7_1;
      $8 = Math_fround(Math_fround(Math_fround($9 | 0) * $8) + (($9 | 0) <= 0 ? Math_fround(-1.0) : Math_fround(1.0)));
      label$476 : {
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        $9 = ~~$8;
        break label$476;
       }
       $9 = -2147483648;
      }
      $8 = Math_fround($9 | 0);
      if (!HEAPU8[$1_1 + 60 | 0]) {
       HEAP32[$2_1 + 12 >> 2] = 0;
       HEAP32[$2_1 + 16 >> 2] = 0;
       $9 = HEAP32[$2_1 + 40 >> 2];
       if ($9) {
        HEAP32[$2_1 + 32 >> 2] = 0;
        HEAP32[$2_1 + 36 >> 2] = 0;
        $17($9);
        HEAP32[$2_1 + 40 >> 2] = 0;
       }
       $9 = HEAP32[$2_1 + 8 >> 2];
       if ($9) {
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
        $17($9);
        HEAP32[$2_1 + 8 >> 2] = 0;
       }
       $9 = HEAP32[$2_1 + 28 >> 2];
       if ($9) {
        HEAP32[$2_1 + 20 >> 2] = 0;
        HEAP32[$2_1 + 24 >> 2] = 0;
        $17($9);
        HEAP32[$2_1 + 28 >> 2] = 0;
       }
       HEAP8[$2_1 + 64 | 0] = 1;
       HEAP32[$2_1 + 44 >> 2] = 0;
       HEAP32[$2_1 + 48 >> 2] = 0;
       HEAP32[$2_1 + 80 >> 2] = 0;
       HEAP32[$2_1 + 72 >> 2] = 0;
       HEAP32[$2_1 + 76 >> 2] = 0;
       $13 = HEAPF32[$1_1 + 16 >> 2];
       HEAP16[$2_1 + 56 >> 1] = 0;
       HEAP32[$2_1 + 52 >> 2] = $1_1;
       HEAPF32[$2_1 + 16 >> 2] = $13;
       HEAPF32[$2_1 + 76 >> 2] = $6_1;
       HEAPF32[$2_1 + 72 >> 2] = $8;
       HEAP32[$2_1 + 48 >> 2] = $0_1;
      }
      HEAP16[$2_1 + 56 >> 1] = HEAPU16[$2_1 + 56 >> 1] + 1;
      $6_1 = Math_fround(HEAPF32[$7_1 + 72 >> 2] + Math_fround(.5));
      label$478 : {
       if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$6_1;
        break label$478;
       }
       $2_1 = -2147483648;
      }
      if (HEAP32[$4_1 >> 2] <= 0) {
       break label$473
      }
      $6_1 = Math_fround(HEAPF32[$1_1 + 44 >> 2] + Math_fround($2_1 | 0));
      $8 = HEAPF32[$1_1 + 40 >> 2];
      $9 = $5_1 + 152 | 0;
      $17_1 = $5_1 + 192 | 0;
      $2_1 = 0;
      while (1) {
       $5_1 = HEAP32[$9 >> 2] + Math_imul($2_1, 28) | 0;
       $13 = Math_fround(Math_fround(1.0) / Math_fround(HEAP32[$0_1 + 28 >> 2]));
       $12_1 = Math_fround(Math_fround(1.0) / Math_fround(HEAP32[$0_1 + 32 >> 2]));
       $456($7_1, $1_1, HEAPU16[HEAP32[$17_1 >> 2] + ($2_1 << 2) >> 1], Math_fround($8 + Math_fround(HEAPF32[$5_1 + 8 >> 2] + Math_fround(0.0))), Math_fround($6_1 + Math_fround(HEAPF32[$5_1 + 12 >> 2] + Math_fround(0.0))), Math_fround($8 + Math_fround(HEAPF32[$5_1 + 20 >> 2] + Math_fround(0.0))), Math_fround($6_1 + Math_fround(HEAPF32[$5_1 + 24 >> 2] + Math_fround(0.0))), Math_fround($13 * Math_fround(HEAPU16[$5_1 >> 1])), Math_fround($12_1 * Math_fround(HEAPU16[$5_1 + 2 >> 1])), Math_fround($13 * Math_fround(HEAPU16[$5_1 + 4 >> 1])), Math_fround($12_1 * Math_fround(HEAPU16[$5_1 + 6 >> 1])), HEAPF32[$5_1 + 16 >> 2]);
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) < HEAP32[$4_1 >> 2]) {
        continue
       }
       break;
      };
     }
     $2_1 = $3 + 1 | 0;
     if (($37 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   if (($37 | 0) > 0) {
    $2_1 = 0;
    while (1) {
     $1_1 = Math_imul($2_1, 196) + $35_1 | 0;
     $3 = HEAP32[$1_1 + 192 >> 2];
     if ($3) {
      $17($3)
     }
     $1_1 = HEAP32[$1_1 + 180 >> 2];
     if ($1_1) {
      $17($1_1)
     }
     $2_1 = $2_1 + 1 | 0;
     if (($37 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($35_1) {
    $17($35_1);
    $2_1 = 0;
   } else {
    $2_1 = $35_1
   }
   $1_1 = $0_1;
   $17_1 = HEAP32[$1_1 + 72 >> 2];
   $28_1 = HEAP32[$1_1 + 1120 >> 2];
   $5_1 = $17_1 + Math_imul($28_1, 28) | 0;
   $11_1 = $5_1 + 4 | 0;
   $4_1 = HEAPU16[$5_1 + 4 >> 1];
   $3 = HEAP32[$1_1 + 28 >> 2];
   $9 = HEAP32[$1_1 + 20 >> 2];
   label$1 : {
    if (!(HEAPU8[$1_1 | 0] & 2)) {
     $35_1 = $4_1 + 123 | 0;
     $7_1 = HEAPU16[$5_1 + 6 >> 1];
     if ($9) {
      $20_1 = $5_1 + 6 | 0;
      $0_1 = 0;
      $5_1 = ($4_1 + $9 | 0) + Math_imul($3, $7_1) | 0;
      $4_1 = 32864;
      while (1) {
       $3 = $0_1;
       $0_1 = 0;
       while (1) {
        HEAP8[$0_1 + $5_1 | 0] = HEAPU8[$0_1 + $4_1 | 0] == 46 ? -1 : 0;
        $0_1 = $0_1 + 1 | 0;
        if (($0_1 | 0) != 122) {
         continue
        }
        break;
       };
       $9 = HEAP32[$1_1 + 28 >> 2];
       $5_1 = $9 + $5_1 | 0;
       $4_1 = $4_1 + 122 | 0;
       $0_1 = $3 + 1 | 0;
       if (($0_1 | 0) != 27) {
        continue
       }
       break;
      };
      $0_1 = 0;
      $5_1 = (HEAP32[$1_1 + 20 >> 2] + $35_1 | 0) + Math_imul($9, HEAPU16[$20_1 >> 1]) | 0;
      $4_1 = 32864;
      while (1) {
       $3 = $0_1;
       $0_1 = 0;
       while (1) {
        HEAP8[$0_1 + $5_1 | 0] = HEAPU8[$0_1 + $4_1 | 0] == 88 ? -1 : 0;
        $0_1 = $0_1 + 1 | 0;
        if (($0_1 | 0) != 122) {
         continue
        }
        break;
       };
       $5_1 = $5_1 + HEAP32[$1_1 + 28 >> 2] | 0;
       $4_1 = $4_1 + 122 | 0;
       $0_1 = $3 + 1 | 0;
       if (($0_1 | 0) != 27) {
        continue
       }
       break;
      };
      break label$1;
     }
     $0_1 = 0;
     $9 = HEAP32[$1_1 + 24 >> 2];
     $5_1 = ($9 + ($4_1 << 2) | 0) + (Math_imul($3, $7_1) << 2) | 0;
     $4_1 = 32864;
     while (1) {
      $3 = $0_1;
      $0_1 = 0;
      while (1) {
       HEAP32[$5_1 + ($0_1 << 2) >> 2] = HEAPU8[$0_1 + $4_1 | 0] == 46 ? -1 : 0;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != 122) {
        continue
       }
       break;
      };
      $20_1 = HEAP32[$1_1 + 28 >> 2];
      $5_1 = $5_1 + ($20_1 << 2) | 0;
      $4_1 = $4_1 + 122 | 0;
      $0_1 = $3 + 1 | 0;
      if (($0_1 | 0) != 27) {
       continue
      }
      break;
     };
     $0_1 = 0;
     $5_1 = ($9 + ($35_1 << 2) | 0) + (Math_imul($7_1, $20_1) << 2) | 0;
     $4_1 = 32864;
     while (1) {
      $3 = $0_1;
      $0_1 = 0;
      while (1) {
       HEAP32[$5_1 + ($0_1 << 2) >> 2] = HEAPU8[$0_1 + $4_1 | 0] == 88 ? -1 : 0;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != 122) {
        continue
       }
       break;
      };
      $5_1 = $5_1 + (HEAP32[$1_1 + 28 >> 2] << 2) | 0;
      $4_1 = $4_1 + 122 | 0;
      $0_1 = $3 + 1 | 0;
      if (($0_1 | 0) != 27) {
       continue
      }
      break;
     };
     break label$1;
    }
    $0_1 = $4_1 + Math_imul($3, HEAPU16[$5_1 + 6 >> 1]) | 0;
    $5_1 = $0_1 + 1 | 0;
    if ($9) {
     $3 = $0_1 + $3 | 0;
     HEAP8[($3 + $9 | 0) + 1 | 0] = 255;
     HEAP8[$3 + HEAP32[$1_1 + 20 >> 2] | 0] = 255;
     HEAP8[$5_1 + HEAP32[$1_1 + 20 >> 2] | 0] = 255;
     HEAP8[$0_1 + HEAP32[$1_1 + 20 >> 2] | 0] = 255;
     break label$1;
    }
    $4_1 = HEAP32[$1_1 + 24 >> 2];
    $3 = $4_1 + ($0_1 + $3 << 2) | 0;
    HEAP32[$3 >> 2] = -1;
    HEAP32[$3 + 4 >> 2] = -1;
    HEAP32[$4_1 + ($5_1 << 2) >> 2] = -1;
    HEAP32[$4_1 + ($0_1 << 2) >> 2] = -1;
   }
   $0_1 = HEAPU16[($17_1 + Math_imul($28_1, 28) | 0) + 6 >> 1];
   HEAPF32[$1_1 + 44 >> 2] = HEAPF32[$1_1 + 36 >> 2] * Math_fround(Math_fround(HEAPU16[$11_1 >> 1]) + Math_fround(.5));
   HEAPF32[$1_1 + 48 >> 2] = HEAPF32[$1_1 + 40 >> 2] * Math_fround(Math_fround($0_1 >>> 0) + Math_fround(.5));
   if (!(HEAPU8[$1_1 | 0] & 4)) {
    $28_1 = HEAP32[$1_1 + 72 >> 2] + Math_imul(HEAP32[$1_1 + 1124 >> 2], 28) | 0;
    $4_1 = $28_1 + 6 | 0;
    $9 = $28_1 + 4 | 0;
    $0_1 = 0;
    while (1) {
     $7_1 = HEAPU16[$28_1 >> 1];
     $11_1 = $7_1 - $0_1 | 0;
     $3 = $11_1 >>> 1 | 0;
     $35_1 = $3 + $0_1 | 0;
     $5_1 = $7_1 - $35_1 | 0;
     $17_1 = HEAP32[$1_1 + 20 >> 2];
     label$1510 : {
      if ($17_1) {
       $17_1 = $17_1 + (HEAPU16[$9 >> 1] + Math_imul(HEAP32[$1_1 + 28 >> 2], HEAPU16[$4_1 >> 1] + $0_1 | 0) | 0) | 0;
       if ($11_1 >>> 0 >= 2) {
        $1604($17_1, 0, $3 >>> 0 <= 1 ? 1 : $3)
       }
       if ($0_1) {
        $1604($3 + $17_1 | 0, 255, $0_1)
       }
       if (($7_1 | 0) == ($35_1 | 0)) {
        break label$1510
       }
       $1604(($3 + $17_1 | 0) + $0_1 | 0, 0, $5_1 >>> 0 <= 1 ? 1 : $5_1);
       break label$1510;
      }
      $17_1 = HEAP32[$1_1 + 24 >> 2] + (HEAPU16[$9 >> 1] + Math_imul(HEAP32[$1_1 + 28 >> 2], HEAPU16[$4_1 >> 1] + $0_1 | 0) << 2) | 0;
      if ($11_1 >>> 0 >= 2) {
       $1604($17_1, 0, ($3 >>> 0 <= 1 ? 1 : $3) << 2)
      }
      $11_1 = $0_1 << 2;
      if ($0_1) {
       $1604($17_1 + ($3 << 2) | 0, 255, $11_1)
      }
      if (($7_1 | 0) == ($35_1 | 0)) {
       break label$1510
      }
      $1604($11_1 + ($17_1 + ($3 << 2) | 0) | 0, 0, ($5_1 >>> 0 <= 1 ? 1 : $5_1) << 2);
     }
     $6_1 = HEAPF32[$1_1 + 40 >> 2];
     $7_1 = HEAPU16[$4_1 >> 1];
     $5_1 = ($0_1 << 4) + $1_1 | 0;
     $8 = HEAPF32[$1_1 + 36 >> 2];
     $35_1 = $3 + HEAPU16[$9 >> 1] | 0;
     $3 = $0_1 + 1 | 0;
     HEAPF32[$5_1 + 96 >> 2] = $8 * Math_fround($35_1 + $3 >>> 0);
     HEAPF32[$5_1 + 88 >> 2] = $8 * Math_fround($35_1 - 1 >>> 0);
     $0_1 = $0_1 + $7_1 | 0;
     $6_1 = Math_fround(Math_fround(Math_fround($6_1 * Math_fround($0_1 >>> 0)) + Math_fround($6_1 * Math_fround($0_1 + 1 >>> 0))) * Math_fround(.5));
     HEAPF32[$5_1 + 100 >> 2] = $6_1;
     HEAPF32[$5_1 + 92 >> 2] = $6_1;
     $0_1 = $3;
     if (($3 | 0) != 64) {
      continue
     }
     break;
    };
   }
   if (HEAP32[$1_1 + 64 >> 2] > 0) {
    $0_1 = 0;
    while (1) {
     $3 = HEAP32[$1_1 + 72 >> 2] + Math_imul($0_1, 28) | 0;
     $5_1 = HEAP32[$3 + 24 >> 2];
     label$2311 : {
      if (!$5_1) {
       break label$2311
      }
      $4_1 = HEAP32[$3 + 8 >> 2];
      if (!$4_1) {
       break label$2311
      }
      $11_1 = $5_1;
      $17_1 = $4_1 & 65535;
      $6_1 = HEAPF32[$3 + 16 >> 2];
      $13 = $6_1;
      $8 = HEAPF32[$3 + 20 >> 2];
      $12_1 = $8;
      $5_1 = HEAPU16[$3 >> 1];
      $14 = Math_fround($6_1 + Math_fround($5_1 >>> 0));
      $4_1 = HEAPU16[$3 + 2 >> 1];
      $18_1 = Math_fround($8 + Math_fround($4_1 >>> 0));
      $6_1 = HEAPF32[$1_1 + 36 >> 2];
      $9 = HEAPU16[$3 + 4 >> 1];
      $8 = HEAPF32[$1_1 + 40 >> 2];
      $7_1 = HEAPU16[$3 + 6 >> 1];
      $456($11_1, 0, $17_1, $13, $12_1, $14, $18_1, Math_fround($6_1 * Math_fround($9 >>> 0)), Math_fround($8 * Math_fround($7_1 >>> 0)), Math_fround($6_1 * Math_fround($5_1 + $9 | 0)), Math_fround($8 * Math_fround($4_1 + $7_1 | 0)), HEAPF32[$3 + 12 >> 2]);
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) < HEAP32[$1_1 + 64 >> 2]) {
      continue
     }
     break;
    };
   }
   if (HEAP32[$1_1 + 52 >> 2] > 0) {
    $0_1 = 0;
    while (1) {
     $3 = HEAP32[HEAP32[$1_1 + 60 >> 2] + ($0_1 << 2) >> 2];
     if (HEAPU8[$3 + 64 | 0]) {
      $461($3)
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) < HEAP32[$1_1 + 52 >> 2]) {
      continue
     }
     break;
    };
   }
   HEAP8[$1_1 + 17 | 0] = 1;
   if ($61) {
    $17($61)
   }
   if ($23_1) {
    $17($23_1)
   }
   $4_1 = $60_1;
   $0_1 = $54_1;
  }
  if ($0_1) {
   $17($0_1)
  }
  if ($2_1) {
   $17($2_1)
  }
  global$0 = $10_1 + 640 | 0;
  return $4_1 & 1;
 }
 
 function $438($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  if (!HEAPU8[$1_1 + 60 | 0]) {
   $5_1 = $16(88);
   $470($5_1);
   $3 = HEAP32[$0_1 + 52 >> 2];
   $2_1 = HEAP32[$0_1 + 56 >> 2];
   label$2 : {
    if (($3 | 0) != ($2_1 | 0)) {
     break label$2
    }
    $4_1 = $3 + 1 | 0;
    $6_1 = $2_1;
    if ($2_1) {
     $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $2_1 = ($3 | 0) > ($4_1 | 0) ? $3 : $4_1;
    if (($6_1 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3 = $16($2_1 << 2);
    $4_1 = HEAP32[$0_1 + 60 >> 2];
    if ($4_1) {
     $1602($3, $4_1, HEAP32[$0_1 + 52 >> 2] << 2);
     $17(HEAP32[$0_1 + 60 >> 2]);
    }
    HEAP32[$0_1 + 56 >> 2] = $2_1;
    HEAP32[$0_1 + 60 >> 2] = $3;
   }
   HEAP32[HEAP32[$0_1 + 60 >> 2] + (HEAP32[$0_1 + 52 >> 2] << 2) >> 2] = $5_1;
   HEAP32[$0_1 + 52 >> 2] = HEAP32[$0_1 + 52 >> 2] + 1;
  }
  $3 = HEAP32[$0_1 + 76 >> 2];
  $2_1 = HEAP32[$0_1 + 80 >> 2];
  label$6 : {
   if (($3 | 0) != ($2_1 | 0)) {
    break label$6
   }
   $4_1 = $3 + 1 | 0;
   $6_1 = $2_1;
   if ($2_1) {
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2_1 = ($3 | 0) > ($4_1 | 0) ? $3 : $4_1;
   if (($6_1 | 0) >= ($2_1 | 0)) {
    break label$6
   }
   $3 = $16(Math_imul($2_1, 120));
   $4_1 = HEAP32[$0_1 + 84 >> 2];
   if ($4_1) {
    $1602($3, $4_1, Math_imul(HEAP32[$0_1 + 76 >> 2], 120));
    $17(HEAP32[$0_1 + 84 >> 2]);
   }
   HEAP32[$0_1 + 80 >> 2] = $2_1;
   HEAP32[$0_1 + 84 >> 2] = $3;
  }
  $2_1 = $0_1 + 84 | 0;
  $1602(HEAP32[$2_1 >> 2] + Math_imul(HEAP32[$0_1 + 76 >> 2], 120) | 0, $1_1, 120);
  $4_1 = HEAP32[$0_1 + 76 >> 2];
  HEAP32[$0_1 + 76 >> 2] = $4_1 + 1;
  $5_1 = HEAP32[$2_1 >> 2];
  $2_1 = $5_1 + Math_imul($4_1, 120) | 0;
  $3 = $2_1 + 116 | 0;
  if (!HEAP32[$2_1 + 116 >> 2]) {
   HEAP32[$3 >> 2] = HEAP32[(HEAP32[$0_1 + 60 >> 2] + (HEAP32[$0_1 + 52 >> 2] << 2) | 0) - 4 >> 2]
  }
  if (!HEAPU8[$2_1 + 8 | 0]) {
   $4_1 = $5_1 + Math_imul($4_1, 120) | 0;
   $5_1 = $16(HEAP32[$4_1 + 4 >> 2]);
   HEAP32[$2_1 >> 2] = $5_1;
   HEAP8[$2_1 + 8 | 0] = 1;
   $1602($5_1, HEAP32[$1_1 >> 2], HEAP32[$4_1 + 4 >> 2]);
  }
  $2_1 = HEAP32[$3 >> 2];
  if (HEAPU16[$2_1 + 60 >> 1] == 65535) {
   HEAP16[$2_1 + 60 >> 1] = HEAPU16[$1_1 + 72 >> 1]
  }
  HEAP8[$0_1 + 17 | 0] = 0;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 24 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  HEAP8[$0_1 + 18 | 0] = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  HEAP32[$0_1 + 24 >> 2] = 0;
  return HEAP32[$3 >> 2];
 }
 
 function $444($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $8 = HEAP32[$1_1 + 8 >> 2];
  $3 = $8 >> 31 & $8;
  HEAP32[$1_1 + 4 >> 2] = $3;
  $13 = HEAP32[$1_1 >> 2];
  $6_1 = $3;
  while (1) {
   $11_1 = $10_1 << 8;
   $5_1 = $6_1;
   label$2 : {
    if (($8 | 0) <= ($5_1 | 0)) {
     $6_1 = $3;
     $7_1 = $5_1;
     $5_1 = 0;
     break label$2;
    }
    $6_1 = $5_1 + 1 | 0;
    $7_1 = $6_1;
    $5_1 = HEAPU8[$5_1 + $13 | 0];
   }
   $9 = $6_1;
   $3 = $9;
   $6_1 = $7_1;
   $12_1 = $11_1 | $5_1 & 255;
   $10_1 = $12_1;
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != 2) {
    continue
   }
   break;
  };
  HEAP32[$1_1 + 4 >> 2] = $9;
  $3 = 0;
  if (($8 | 0) > ($9 | 0)) {
   HEAP32[$1_1 + 4 >> 2] = $9 + 1;
   $3 = HEAPU8[$9 + HEAP32[$1_1 >> 2] | 0];
  }
  $9 = $3;
  $2_1 = HEAP32[$1_1 + 4 >> 2] + Math_imul($2_1, $3) | 0;
  $4_1 = ($2_1 | 0) < 0 ? $8 : ($2_1 | 0) > ($8 | 0) ? $8 : $2_1;
  HEAP32[$1_1 + 4 >> 2] = $4_1;
  $3 = 0;
  if ($9) {
   $11_1 = HEAP32[$1_1 >> 2];
   $3 = HEAP32[$1_1 + 4 >> 2];
   $10_1 = 0;
   $7_1 = 0;
   while (1) {
    $7_1 = $7_1 << 8;
    $2_1 = $4_1;
    label$7 : {
     if (($8 | 0) <= ($2_1 | 0)) {
      $4_1 = $3;
      $5_1 = $2_1;
      $2_1 = 0;
      break label$7;
     }
     $4_1 = $2_1 + 1 | 0;
     $5_1 = $4_1;
     $2_1 = HEAPU8[$2_1 + $11_1 | 0];
    }
    $3 = $4_1;
    $4_1 = $5_1;
    $6_1 = $10_1 + 1 | 0;
    $10_1 = $6_1;
    $2_1 = $2_1 | $7_1;
    $7_1 = $2_1;
    if (($6_1 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
   HEAP32[$1_1 + 4 >> 2] = $3;
  } else {
   $2_1 = $3
  }
  $6_1 = $2_1;
  $3 = 0;
  if ($9) {
   $11_1 = HEAP32[$1_1 >> 2];
   $3 = HEAP32[$1_1 + 4 >> 2];
   $4_1 = $3;
   $10_1 = 0;
   $7_1 = 0;
   while (1) {
    $7_1 = $7_1 << 8;
    $2_1 = $4_1;
    label$11 : {
     if (($8 | 0) <= ($2_1 | 0)) {
      $4_1 = $3;
      $5_1 = $2_1;
      $2_1 = 0;
      break label$11;
     }
     $4_1 = $2_1 + 1 | 0;
     $5_1 = $4_1;
     $2_1 = HEAPU8[$2_1 + $11_1 | 0];
    }
    $3 = $4_1;
    $4_1 = $5_1;
    $5_1 = $10_1 + 1 | 0;
    $10_1 = $5_1;
    $2_1 = $2_1 | $7_1;
    $7_1 = $2_1;
    if (($5_1 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
   HEAP32[$1_1 + 4 >> 2] = $3;
   $3 = $2_1;
  }
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = $3 - $6_1 | 0;
  $4_1 = (Math_imul($9, $12_1 + 1 | 0) + $6_1 | 0) + 2 | 0;
  if (!(($2_1 | $4_1) < 0 | ($4_1 | 0) > ($8 | 0) | ($2_1 | 0) > ($8 - $4_1 | 0))) {
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 8 >> 2] = $2_1;
   HEAP32[$0_1 >> 2] = $1_1 + $4_1;
  }
 }
 
 function $445($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $5_1 = HEAP32[$0_1 + 8 >> 2];
  $4_1 = $5_1 >> 31 & $5_1;
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  label$1 : {
   if (($5_1 | 0) > 0) {
    while (1) {
     $10_1 = $4_1;
     label$4 : while (1) {
      $4_1 = 0;
      $7_1 = HEAP32[$0_1 + 4 >> 2];
      $5_1 = HEAP32[$0_1 + 8 >> 2];
      $8 = ($7_1 | 0) >= ($5_1 | 0);
      if ($8) {
       $9 = $4_1
      } else {
       $9 = HEAPU8[$7_1 + HEAP32[$0_1 >> 2] | 0]
      }
      if (($9 & 255) >>> 0 >= 28) {
       label$7 : {
        if ($8) {
         break label$7
        }
        $8 = HEAP32[$0_1 >> 2];
        if (HEAPU8[$8 + $7_1 | 0] != 30) {
         break label$7
        }
        $4_1 = ($7_1 | 0) < -1 ? $5_1 : ($5_1 | 0) <= ($7_1 | 0) ? $5_1 : $7_1 + 1 | 0;
        HEAP32[$0_1 + 4 >> 2] = $4_1;
        $7_1 = ($4_1 | 0) > ($5_1 | 0) ? $4_1 : $5_1;
        while (1) {
         if (($4_1 | 0) == ($7_1 | 0)) {
          continue label$4
         }
         $5_1 = $4_1 + 1 | 0;
         HEAP32[$0_1 + 4 >> 2] = $5_1;
         $9 = HEAPU8[$4_1 + $8 | 0];
         if (($9 & 15) == 15) {
          continue label$4
         }
         $4_1 = $5_1;
         if (($9 & 240) != 240) {
          continue
         }
         break;
        };
        continue;
       }
       $486($0_1);
       continue;
      }
      break;
     };
     if (!$8) {
      HEAP32[$0_1 + 4 >> 2] = $7_1 + 1;
      $4_1 = HEAPU8[$7_1 + HEAP32[$0_1 >> 2] | 0];
     }
     $4_1 = $4_1 & 255;
     if (($4_1 | 0) == 12) {
      $4_1 = 0;
      $8 = HEAP32[$0_1 + 4 >> 2];
      if (($5_1 | 0) > ($8 | 0)) {
       HEAP32[$0_1 + 4 >> 2] = $8 + 1;
       $4_1 = HEAPU8[$8 + HEAP32[$0_1 >> 2] | 0];
      }
      $4_1 = $4_1 & 255 | 256;
     }
     if (($4_1 | 0) == ($1_1 | 0)) {
      HEAP32[$6_1 + 4 >> 2] = 0;
      HEAP32[$6_1 + 8 >> 2] = 0;
      HEAP32[$6_1 + 12 >> 2] = 0;
      $1_1 = $7_1 - $10_1 | 0;
      if (($1_1 | $10_1) < 0 | ($5_1 | 0) < ($10_1 | 0) | ($5_1 | 0) < ($7_1 | 0)) {
       break label$1
      }
      $0_1 = HEAP32[$0_1 >> 2];
      HEAP32[$6_1 + 12 >> 2] = $1_1;
      HEAP32[$6_1 + 4 >> 2] = $0_1 + $10_1;
      break label$1;
     }
     $4_1 = HEAP32[$0_1 + 4 >> 2];
     if (($5_1 | 0) > ($4_1 | 0)) {
      continue
     }
     break;
    }
   }
   HEAP32[$6_1 + 4 >> 2] = 0;
   HEAP32[$6_1 + 8 >> 2] = 0;
   HEAP32[$6_1 + 12 >> 2] = 0;
   if (($5_1 | 0) < 0) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 >> 2];
   HEAP32[$6_1 + 12 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = $0_1;
  }
  label$13 : {
   if (($2_1 | 0) <= 0 | HEAP32[$6_1 + 8 >> 2] >= HEAP32[$6_1 + 12 >> 2]) {
    break label$13
   }
   $4_1 = 0;
   while (1) {
    HEAP32[($4_1 << 2) + $3 >> 2] = $486($6_1 + 4 | 0);
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) >= ($2_1 | 0)) {
     break label$13
    }
    if (HEAP32[$6_1 + 8 >> 2] < HEAP32[$6_1 + 12 >> 2]) {
     continue
    }
    break;
   };
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $446($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  $445($2_1, 18, 2, $4_1 + 16 | 0);
  label$1 : {
   label$2 : {
    $3 = HEAP32[$4_1 + 20 >> 2];
    if ($3) {
     $2_1 = HEAP32[$4_1 + 16 >> 2];
     if ($2_1) {
      break label$2
     }
    }
    HEAP32[$0_1 + 8 >> 2] = 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    break label$1;
   }
   $7_1 = 0;
   label$4 : {
    if (($2_1 | $3) < 0) {
     break label$4
    }
    $5_1 = HEAP32[$1_1 + 8 >> 2];
    $7_1 = 0;
    if (($5_1 | 0) < ($3 | 0)) {
     break label$4
    }
    $7_1 = 0;
    if (($2_1 | 0) > ($5_1 - $3 | 0)) {
     break label$4
    }
    $6_1 = $2_1;
    $7_1 = $3 + HEAP32[$1_1 >> 2] | 0;
   }
   $2_1 = $7_1;
   HEAP32[$4_1 + 12 >> 2] = $6_1;
   HEAP32[$4_1 + 8 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = $2_1;
   $445($4_1 + 4 | 0, 19, 1, $4_1 + 28 | 0);
   $6_1 = HEAP32[$4_1 + 28 >> 2];
   if (!$6_1) {
    HEAP32[$0_1 + 8 >> 2] = 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    break label$1;
   }
   $2_1 = HEAP32[$1_1 + 8 >> 2];
   $6_1 = $3 + $6_1 | 0;
   HEAP32[$1_1 + 4 >> 2] = ($6_1 | 0) < 0 ? $2_1 : ($2_1 | 0) < ($6_1 | 0) ? $2_1 : $6_1;
   $6_1 = $0_1;
   $2_1 = 0;
   $5_1 = HEAP32[$1_1 + 8 >> 2];
   $7_1 = HEAP32[$1_1 + 4 >> 2];
   $0_1 = $7_1;
   while (1) {
    $3 = $2_1 << 8;
    label$21 : {
     if (($0_1 | 0) >= ($5_1 | 0)) {
      $2_1 = $0_1;
      $9 = 0;
      break label$21;
     }
     $2_1 = $0_1 + 1 | 0;
     HEAP32[$1_1 + 4 >> 2] = $2_1;
     $9 = HEAPU8[HEAP32[$1_1 >> 2] + $0_1 | 0];
    }
    $0_1 = $2_1;
    $2_1 = $3 | $9;
    $8 = $8 + 1 | 0;
    if (($8 | 0) != 2) {
     continue
    }
    break;
   };
   if ($2_1) {
    $0_1 = 0;
    $3 = HEAP32[$1_1 + 4 >> 2];
    if (($5_1 | 0) > ($3 | 0)) {
     HEAP32[$1_1 + 4 >> 2] = $3 + 1;
     $0_1 = HEAPU8[$3 + HEAP32[$1_1 >> 2] | 0];
    }
    $3 = $0_1;
    $0_1 = HEAP32[$1_1 + 4 >> 2] + Math_imul($0_1, $2_1) | 0;
    $0_1 = ($0_1 | 0) < 0 ? $5_1 : ($0_1 | 0) > ($5_1 | 0) ? $5_1 : $0_1;
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    if ($3) {
     $8 = 0;
     $2_1 = 0;
     while (1) {
      $9 = $2_1 << 8;
      label$9 : {
       if (($0_1 | 0) >= ($5_1 | 0)) {
        $2_1 = $0_1;
        $10_1 = 0;
        break label$9;
       }
       $2_1 = $0_1 + 1 | 0;
       HEAP32[$1_1 + 4 >> 2] = $2_1;
       $10_1 = HEAPU8[HEAP32[$1_1 >> 2] + $0_1 | 0];
      }
      $0_1 = $2_1;
      $2_1 = $9 | $10_1;
      $8 = $8 + 1 | 0;
      if (($8 | 0) != ($3 | 0)) {
       continue
      }
      break;
     };
     $0_1 = $2_1 - 1 | 0;
    } else {
     $0_1 = -1
    }
    $0_1 = $0_1 + HEAP32[$1_1 + 4 >> 2] | 0;
    HEAP32[$1_1 + 4 >> 2] = ($0_1 | 0) < 0 ? $5_1 : ($0_1 | 0) > ($5_1 | 0) ? $5_1 : $0_1;
   }
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$6_1 + 8 >> 2] = 0;
   HEAP32[$6_1 >> 2] = 0;
   HEAP32[$6_1 + 4 >> 2] = 0;
   $2_1 = $0_1 - $7_1 | 0;
   if (!(($2_1 | $7_1) < 0 | ($5_1 | 0) < ($7_1 | 0) | ($0_1 | 0) > ($5_1 | 0))) {
    $0_1 = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 8 >> 2] = $2_1;
    HEAP32[$6_1 >> 2] = $0_1 + $7_1;
   }
  }
  global$0 = $4_1 + 32 | 0;
 }
 
 function $447($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       $9 = HEAP32[$0_1 + 4 >> 2];
       $4_1 = HEAP32[$0_1 + 44 >> 2];
       $3 = $9 + $4_1 | 0;
       $0_1 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8;
       $0_1 = $0_1 << 8 | $0_1 >>> 8;
       switch ($0_1 & 65535) {
       case 2:
        break label$1;
       case 4:
        break label$3;
       case 6:
        break label$4;
       case 0:
        break label$5;
       default:
        break label$2;
       };
      }
      if (((HEAPU8[$3 + 3 | 0] | HEAPU8[$3 + 2 | 0] << 8) - 6 | 0) <= ($1_1 | 0)) {
       break label$1
      }
      return HEAPU8[($1_1 + $3 | 0) + 6 | 0];
     }
     $0_1 = HEAPU8[$3 + 7 | 0] | HEAPU8[$3 + 6 | 0] << 8;
     if ($1_1 >>> 0 < $0_1 >>> 0) {
      return 0
     }
     if ($0_1 + (HEAPU8[$3 + 9 | 0] | HEAPU8[$3 + 8 | 0] << 8) >>> 0 <= $1_1 >>> 0) {
      break label$1
     }
     $0_1 = $3 + ($1_1 - $0_1 << 1) | 0;
     return HEAPU8[$0_1 + 10 | 0] << 8 | HEAPU8[$0_1 + 11 | 0];
    }
    if (($1_1 | 0) > 65535) {
     break label$1
    }
    $10_1 = HEAPU8[$3 + 7 | 0] | HEAPU8[$3 + 6 | 0] << 8;
    $0_1 = HEAPU8[$3 + 13 | 0] & 254 | HEAPU8[$3 + 12 | 0] << 8;
    $2_1 = $0_1 + $3 | 0;
    $7_1 = ($4_1 + ((HEAPU8[$2_1 + 15 | 0] | HEAPU8[$2_1 + 14 | 0] << 8) <= ($1_1 | 0) ? $0_1 : 0) | 0) + 12 | 0;
    $0_1 = HEAPU8[$3 + 10 | 0] | HEAPU8[$3 + 11 | 0] << 8;
    $0_1 = $0_1 << 8 | $0_1 >>> 8;
    label$7 : {
     if (!($0_1 & 65535)) {
      $6_1 = $7_1;
      break label$7;
     }
     $2_1 = HEAPU8[$3 + 8 | 0] | HEAPU8[$3 + 9 | 0] << 8;
     $2_1 = $2_1 << 8 | $2_1 >>> 8;
     while (1) {
      $6_1 = $2_1 >>> 1 | 0;
      $2_1 = $6_1 & 32767;
      $6_1 = $6_1 & 32766;
      $5_1 = $6_1 + ($7_1 + $9 | 0) | 0;
      $7_1 = ((HEAPU8[$5_1 + 1 | 0] | HEAPU8[$5_1 | 0] << 8) < ($1_1 | 0) ? $6_1 : 0) + $7_1 | 0;
      $6_1 = $7_1;
      $0_1 = $0_1 - 1 | 0;
      if ($0_1 & 65535) {
       continue
      }
      break;
     };
    }
    $8 = ($6_1 - $4_1 | 0) + 131060 & 131070;
    $5_1 = $3 + 14 | 0;
    $0_1 = $8 + ($5_1 + ($10_1 & 65534) | 0) | 0;
    $7_1 = HEAPU8[$0_1 + 2 | 0] << 8 | HEAPU8[$0_1 + 3 | 0];
    $0_1 = 0;
    label$10 : {
     if (($7_1 | 0) > ($1_1 | 0)) {
      break label$10
     }
     $6_1 = $10_1 >>> 1 | 0;
     $2_1 = Math_imul($6_1, 6);
     $0_1 = ($8 + ($2_1 + $5_1 | 0) | 0) + 2 | 0;
     $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8;
     $0_1 = ($0_1 << 8 | $0_1 >>> 8) & 65535;
     if (!$0_1) {
      $0_1 = $8 + ($5_1 + ($6_1 << 2) | 0) | 0;
      $0_1 = (HEAPU8[$0_1 + 2 | 0] << 8 | HEAPU8[$0_1 + 3 | 0]) + $1_1 | 0;
      break label$10;
     }
     $0_1 = $8 + ($2_1 + ($4_1 + (($0_1 + $9 | 0) + ($1_1 - $7_1 << 1) | 0) | 0) | 0) | 0;
     $0_1 = HEAPU8[$0_1 + 16 | 0] << 8 | HEAPU8[$0_1 + 17 | 0];
    }
    return $0_1 & 65535;
   }
   if (($0_1 & 65534) != 12) {
    break label$1
   }
   $8 = $3 + 16 | 0;
   $9 = ($0_1 & 65535) == 12;
   $0_1 = 0;
   $2_1 = HEAPU8[$3 + 12 | 0] | HEAPU8[$3 + 13 | 0] << 8 | (HEAPU8[$3 + 14 | 0] << 16 | HEAPU8[$3 + 15 | 0] << 24);
   $7_1 = $2_1 << 24 | ($2_1 & 65280) << 8 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
   while (1) {
    if (($0_1 | 0) >= ($7_1 | 0)) {
     return 0
    }
    $5_1 = ($7_1 - $0_1 >> 1) + $0_1 | 0;
    $4_1 = $8 + Math_imul($5_1, 12) | 0;
    $2_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8 | (HEAPU8[$4_1 + 2 | 0] << 16 | HEAPU8[$4_1 + 3 | 0] << 24);
    $10_1 = $2_1 << 24 | ($2_1 & 65280) << 8 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24);
    label$14 : {
     if ($1_1 >>> 0 < $10_1 >>> 0) {
      $2_1 = $0_1;
      $7_1 = $5_1;
      $5_1 = 1;
      break label$14;
     }
     $2_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8 | (HEAPU8[$4_1 + 6 | 0] << 16 | HEAPU8[$4_1 + 7 | 0] << 24);
     if ($1_1 >>> 0 > ($2_1 << 24 | ($2_1 & 65280) << 8 | ($2_1 >>> 8 & 65280 | $2_1 >>> 24)) >>> 0) {
      $2_1 = $5_1 + 1 | 0;
      $5_1 = 1;
      break label$14;
     }
     $2_1 = $0_1;
     $0_1 = HEAPU8[$4_1 + 8 | 0] | HEAPU8[$4_1 + 9 | 0] << 8 | (HEAPU8[$4_1 + 10 | 0] << 16 | HEAPU8[$4_1 + 11 | 0] << 24);
     $6_1 = ($0_1 << 24 | ($0_1 & 65280) << 8 | ($0_1 >>> 8 & 65280 | $0_1 >>> 24)) + ($9 ? $1_1 - $10_1 | 0 : 0) | 0;
     $5_1 = 0;
    }
    $0_1 = $2_1;
    $2_1 = $6_1;
    if ($5_1) {
     continue
    }
    break;
   };
  }
  return $2_1;
 }
 
 function $448($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $9 = global$0 - 48 | 0;
  global$0 = $9;
  label$1 : {
   if (HEAP32[$0_1 + 60 >> 2]) {
    $10_1 = $9 + 40 | 0;
    HEAP32[$10_1 >> 2] = 0;
    HEAP32[$10_1 + 4 >> 2] = 0;
    $10_1 = $9 + 32 | 0;
    HEAP32[$10_1 >> 2] = 0;
    HEAP32[$10_1 + 4 >> 2] = 0;
    $11_1 = $9 + 24 | 0;
    HEAP32[$11_1 >> 2] = 0;
    HEAP32[$11_1 + 4 >> 2] = 0;
    $12_1 = $9 + 16 | 0;
    HEAP32[$12_1 >> 2] = 0;
    HEAP32[$12_1 + 4 >> 2] = 0;
    $12_1 = $9 + 8 | 0;
    HEAP32[$12_1 >> 2] = 0;
    HEAP32[$12_1 + 4 >> 2] = 0;
    HEAP32[$9 >> 2] = 0;
    HEAP32[$9 + 4 >> 2] = 0;
    HEAP32[$9 >> 2] = 1;
    $0_1 = $483($0_1, $1_1, $9);
    $1_1 = $0_1 ? HEAP32[$11_1 >> 2] : 0;
    $10_1 = $0_1 ? HEAP32[$10_1 >> 2] : 0;
    $12_1 = $0_1 ? HEAP32[$9 + 28 >> 2] : 0;
    $0_1 = $0_1 ? HEAP32[$9 + 36 >> 2] : 0;
    $11_1 = 0;
    break label$1;
   }
   $1_1 = $484($0_1, $1_1);
   if (($1_1 | 0) < 0) {
    $1_1 = 0;
    $11_1 = 1;
    break label$1;
   }
   $0_1 = $1_1 + HEAP32[$0_1 + 4 >> 2] | 0;
   $1_1 = HEAPU8[$0_1 + 2 | 0] | HEAPU8[$0_1 + 3 | 0] << 8;
   $1_1 = ($1_1 << 8 | $1_1 >>> 8) << 16 >> 16;
   $10_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8;
   $10_1 = ($10_1 << 8 | $10_1 >>> 8) << 16 >> 16;
   $11_1 = HEAPU8[$0_1 + 6 | 0] | HEAPU8[$0_1 + 7 | 0] << 8;
   $12_1 = ($11_1 << 8 | $11_1 >>> 8) << 16 >> 16;
   $0_1 = HEAPU8[$0_1 + 8 | 0] | HEAPU8[$0_1 + 9 | 0] << 8;
   $0_1 = ($0_1 << 8 | $0_1 >>> 8) << 16 >> 16;
   $11_1 = 0;
  }
  label$4 : {
   label$5 : {
    if ($11_1) {
     if ($4_1) {
      HEAP32[$4_1 >> 2] = 0
     }
     if ($5_1) {
      HEAP32[$5_1 >> 2] = 0
     }
     if ($6_1) {
      HEAP32[$6_1 >> 2] = 0
     }
     $0_1 = 0;
     if ($7_1) {
      break label$5
     }
     break label$4;
    }
    if ($4_1) {
     label$11 : {
      label$12 : {
       $8 = Math_fround(Math_fround(Math_fround($1_1 | 0) * $2_1) + Math_fround(0.0));
       if (!($8 >= Math_fround(0.0))) {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $1_1 = ~~$8
        } else {
         $1_1 = -2147483648
        }
        if ($8 != Math_fround($1_1 | 0)) {
         break label$12
        }
       }
       $1_1 = ~~$8;
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        break label$11
       }
       $1_1 = -2147483648;
       break label$11;
      }
      $1_1 = $1_1 - 1 | 0;
     }
     $8 = Math_fround($1_1 | 0);
     label$17 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $1_1 = ~~$8;
       break label$17;
      }
      $1_1 = -2147483648;
     }
     HEAP32[$4_1 >> 2] = $1_1;
    }
    if ($5_1) {
     label$20 : {
      label$21 : {
       $8 = Math_fround(Math_fround(Math_fround(0 - $0_1 | 0) * $3) + Math_fround(0.0));
       if (!($8 >= Math_fround(0.0))) {
        if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
         $0_1 = ~~$8
        } else {
         $0_1 = -2147483648
        }
        if ($8 != Math_fround($0_1 | 0)) {
         break label$21
        }
       }
       $0_1 = ~~$8;
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        break label$20
       }
       $0_1 = -2147483648;
       break label$20;
      }
      $0_1 = $0_1 - 1 | 0;
     }
     $8 = Math_fround($0_1 | 0);
     label$26 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$8;
       break label$26;
      }
      $0_1 = -2147483648;
     }
     HEAP32[$5_1 >> 2] = $0_1;
    }
    if ($6_1) {
     $2_1 = Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround($12_1 | 0) * $2_1) + Math_fround(0.0))));
     label$29 : {
      if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$2_1;
       break label$29;
      }
      $0_1 = -2147483648;
     }
     HEAP32[$6_1 >> 2] = $0_1;
    }
    if (!$7_1) {
     break label$4
    }
    $2_1 = Math_fround(Math_ceil(Math_fround(Math_fround(Math_fround(0 - $10_1 | 0) * $3) + Math_fround(0.0))));
    label$31 : {
     if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$2_1;
      break label$31;
     }
     $0_1 = -2147483648;
    }
   }
   HEAP32[$7_1 >> 2] = $0_1;
  }
  global$0 = $9 + 48 | 0;
 }
 
 function $450($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0;
  if (($2_1 | 0) > 0) {
   while (1) {
    HEAP32[(($3 << 4) + $1_1 | 0) + 12 >> 2] = $3;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  if ($2_1 >>> 0 >= 2) {
   $1685($1_1, $2_1, 16, 14)
  }
  if (($2_1 | 0) > 0) {
   $23_1 = $0_1 + 24 | 0;
   $3 = 0;
   while (1) {
    $28_1 = $3;
    label$6 : {
     label$7 : {
      $19 = ($3 << 4) + $1_1 | 0;
      $21_1 = HEAPU16[$19 + 4 >> 1];
      if ($21_1) {
       $20_1 = HEAPU16[$19 + 6 >> 1];
       if ($20_1) {
        break label$7
       }
      }
      HEAP32[$19 + 8 >> 2] = 0;
      break label$6;
     }
     $12_1 = 0;
     $10_1 = 0;
     $8 = 0;
     $5_1 = HEAP32[$0_1 + 8 >> 2];
     $4_1 = ($5_1 + $21_1 | 0) - 1 | 0;
     $13 = $4_1 - (($4_1 | 0) % ($5_1 | 0) | 0) | 0;
     $24 = HEAP32[$0_1 >> 2];
     label$9 : {
      if (($13 | 0) > ($24 | 0)) {
       break label$9
      }
      $25_1 = HEAP32[$0_1 + 4 >> 2];
      if (($25_1 | 0) < ($20_1 | 0)) {
       break label$9
      }
      $10_1 = 1073741824;
      $8 = 1073741824;
      $15_1 = HEAP32[$23_1 >> 2];
      $17_1 = HEAPU16[$15_1 >> 1];
      $3 = $17_1 + $13 | 0;
      if (($3 | 0) <= ($24 | 0)) {
       $14 = HEAP32[$0_1 + 16 >> 2];
       $11_1 = $17_1;
       $4_1 = 1073741824;
       $5_1 = 0;
       $6_1 = $15_1;
       $9 = $23_1;
       $7_1 = 1073741824;
       while (1) {
        $10_1 = $7_1;
        $18_1 = $9;
        $12_1 = $5_1;
        $9 = $4_1;
        $26_1 = $3;
        $16_1 = $11_1;
        $4_1 = $11_1;
        $7_1 = 0;
        $3 = 0;
        $5_1 = 0;
        $22_1 = $6_1;
        if (($13 | 0) > 0) {
         while (1) {
          $8 = $4_1;
          $11_1 = $6_1;
          $4_1 = HEAPU16[$6_1 + 2 >> 1];
          label$14 : {
           if (($5_1 | 0) < ($4_1 | 0)) {
            $5_1 = Math_imul($4_1 - $5_1 | 0, $3);
            $27_1 = HEAPU16[HEAP32[$11_1 + 4 >> 2] >> 1];
            if ($8 >>> 0 < $16_1 >>> 0) {
             $6_1 = $4_1;
             $8 = $27_1 - $16_1 | 0;
             break label$14;
            }
            $6_1 = $4_1;
            $8 = $27_1 - $8 | 0;
            break label$14;
           }
           $6_1 = $5_1;
           $8 = HEAPU16[HEAP32[$11_1 + 4 >> 2] >> 1] - $8 | 0;
           $8 = ($3 + $8 | 0) > ($13 | 0) ? $13 - $3 | 0 : $8;
           $5_1 = Math_imul($8, $6_1 - $4_1 | 0);
          }
          $11_1 = HEAP32[$11_1 + 4 >> 2];
          $4_1 = HEAPU16[$11_1 >> 1];
          $7_1 = $5_1 + $7_1 | 0;
          $3 = $3 + $8 | 0;
          $5_1 = $6_1;
          $6_1 = $11_1;
          if (($4_1 | 0) < ($26_1 | 0)) {
           continue
          }
          break;
         }
        }
        $3 = $7_1;
        $6_1 = $5_1;
        label$17 : {
         if (!$14) {
          $4_1 = ($6_1 | 0) < ($10_1 | 0);
          $7_1 = $4_1 ? $6_1 : $10_1;
          $5_1 = $4_1 ? $18_1 : $12_1;
          $4_1 = $9;
          break label$17;
         }
         label$19 : {
          if (($6_1 + $20_1 | 0) > ($25_1 | 0)) {
           break label$19
          }
          if (($6_1 | 0) >= ($10_1 | 0)) {
           if (($6_1 | 0) != ($10_1 | 0)) {
            break label$19
           }
           $7_1 = $10_1;
           $5_1 = $12_1;
           $4_1 = $9;
           if (($3 | 0) >= ($4_1 | 0)) {
            break label$17
           }
          }
          $7_1 = $6_1;
          $5_1 = $18_1;
          $4_1 = $3;
          break label$17;
         }
         $7_1 = $10_1;
         $5_1 = $12_1;
         $4_1 = $9;
        }
        $9 = $22_1 + 4 | 0;
        $10_1 = $7_1;
        $12_1 = $5_1;
        $8 = $4_1;
        $6_1 = HEAP32[$22_1 + 4 >> 2];
        $11_1 = HEAPU16[$6_1 >> 1];
        $3 = $11_1 + $13 | 0;
        if (($24 | 0) >= ($3 | 0)) {
         continue
        }
        break;
       };
      }
      $7_1 = $8;
      $3 = 0;
      $8 = $12_1 ? HEAPU16[HEAP32[$12_1 >> 2] >> 1] : $3;
      if (HEAP32[$0_1 + 16 >> 2] != 1) {
       break label$9
      }
      $3 = $15_1;
      if (($13 | 0) > ($17_1 | 0)) {
       while (1) {
        $3 = HEAP32[$3 + 4 >> 2];
        if (HEAPU16[$3 >> 1] < ($13 | 0)) {
         continue
        }
        break;
       }
      }
      $11_1 = $8;
      $4_1 = $12_1;
      $6_1 = $3;
      $3 = $15_1;
      $9 = $23_1;
      $5_1 = $10_1;
      while (1) {
       $18_1 = $5_1;
       $15_1 = $4_1;
       $12_1 = $11_1;
       $10_1 = $7_1;
       $22_1 = $6_1;
       $17_1 = HEAPU16[$6_1 >> 1];
       $16_1 = $17_1 - $13 | 0;
       $7_1 = $9;
       $5_1 = $3;
       while (1) {
        $11_1 = $7_1;
        $3 = $5_1;
        $7_1 = $3 + 4 | 0;
        $5_1 = HEAP32[$3 + 4 >> 2];
        if (($16_1 | 0) >= HEAPU16[$5_1 >> 1]) {
         continue
        }
        break;
       };
       $5_1 = 0;
       $7_1 = 0;
       $4_1 = 0;
       $8 = $3;
       $6_1 = HEAPU16[$3 >> 1];
       if ($17_1 >>> 0 > $6_1 >>> 0) {
        while (1) {
         $26_1 = $5_1;
         $14 = $6_1 & 65535;
         $6_1 = $8;
         $5_1 = HEAPU16[$6_1 + 2 >> 1];
         label$29 : {
          if (($4_1 | 0) < ($5_1 | 0)) {
           $4_1 = Math_imul($5_1 - $4_1 | 0, $7_1);
           $9 = HEAPU16[HEAP32[$6_1 + 4 >> 2] >> 1];
           if (($14 | 0) < ($16_1 | 0)) {
            $8 = $5_1;
            $14 = $9 - $16_1 | 0;
            break label$29;
           }
           $8 = $5_1;
           $14 = $9 - $14 | 0;
           break label$29;
          }
          $8 = $4_1;
          $9 = HEAPU16[HEAP32[$6_1 + 4 >> 2] >> 1] - $14 | 0;
          $9 = ($7_1 + $9 | 0) > ($13 | 0) ? $13 - $7_1 | 0 : $9;
          $14 = $9;
          $4_1 = Math_imul($9, $4_1 - $5_1 | 0);
         }
         $9 = HEAP32[$6_1 + 4 >> 2];
         $6_1 = HEAPU16[$9 >> 1];
         $5_1 = $4_1 + $26_1 | 0;
         $7_1 = $7_1 + $14 | 0;
         $4_1 = $8;
         $8 = $9;
         if ($6_1 >>> 0 < $17_1 >>> 0) {
          continue
         }
         break;
        }
       }
       $8 = $5_1;
       label$32 : {
        label$33 : {
         $7_1 = $4_1;
         if (($4_1 + $20_1 | 0) > ($25_1 | 0) | ($4_1 | 0) > ($18_1 | 0)) {
          break label$33
         }
         if (!(($7_1 | 0) < ($18_1 | 0) | ($8 | 0) < ($10_1 | 0))) {
          if (($8 | 0) != ($10_1 | 0)) {
           break label$33
          }
          $5_1 = $18_1;
          $9 = $10_1;
          $6_1 = $12_1;
          if (($16_1 | 0) >= ($6_1 | 0)) {
           break label$32
          }
         }
         $5_1 = $7_1;
         $6_1 = $16_1;
         $9 = $8;
         $15_1 = $11_1;
         break label$32;
        }
        $5_1 = $18_1;
        $6_1 = $12_1;
        $9 = $10_1;
       }
       $4_1 = $15_1;
       $7_1 = $9;
       $9 = $11_1;
       $12_1 = $4_1;
       $10_1 = $5_1;
       $11_1 = $6_1;
       $8 = $6_1;
       $6_1 = HEAP32[$22_1 + 4 >> 2];
       if ($6_1) {
        continue
       }
       break;
      };
     }
     label$35 : {
      $3 = $12_1;
      if (!$3) {
       break label$35
      }
      $4_1 = $10_1 + $20_1 | 0;
      if (($4_1 | 0) > HEAP32[$0_1 + 4 >> 2]) {
       break label$35
      }
      $9 = HEAP32[$0_1 + 28 >> 2];
      if (!$9) {
       break label$35
      }
      HEAP16[$9 + 2 >> 1] = $4_1;
      HEAP16[$9 >> 1] = $8;
      HEAP32[$0_1 + 28 >> 2] = HEAP32[$9 + 4 >> 2];
      $7_1 = HEAP32[$3 >> 2];
      if (($8 | 0) > HEAPU16[$7_1 >> 1]) {
       $3 = $7_1 + 4 | 0;
       $7_1 = HEAP32[$7_1 + 4 >> 2];
      }
      HEAP32[$3 >> 2] = $9;
      $3 = $7_1;
      $7_1 = HEAP32[$3 + 4 >> 2];
      label$38 : {
       if (!$7_1) {
        break label$38
       }
       $6_1 = $8 + $21_1 | 0;
       $5_1 = $3 + 4 | 0;
       $4_1 = $3;
       while (1) {
        $3 = $7_1;
        if (HEAPU16[$3 >> 1] > ($6_1 | 0)) {
         $3 = $4_1;
         break label$38;
        }
        HEAP32[$5_1 >> 2] = HEAP32[$0_1 + 28 >> 2];
        HEAP32[$0_1 + 28 >> 2] = $4_1;
        $5_1 = $3 + 4 | 0;
        $4_1 = $3;
        $7_1 = HEAP32[$3 + 4 >> 2];
        if ($7_1) {
         continue
        }
        break;
       };
      }
      HEAP32[$9 + 4 >> 2] = $3;
      $4_1 = $8 + $21_1 | 0;
      if (($4_1 | 0) > HEAPU16[$3 >> 1]) {
       HEAP16[$3 >> 1] = $4_1
      }
      HEAP16[$19 + 10 >> 1] = $10_1;
      HEAP16[$19 + 8 >> 1] = $8;
      break label$6;
     }
     HEAP32[$19 + 8 >> 2] = -1;
    }
    $3 = $28_1 + 1 | 0;
    if (($3 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  if ($2_1 >>> 0 >= 2) {
   $1685($1_1, $2_1, 16, 15)
  }
  if (($2_1 | 0) > 0) {
   $3 = 1;
   $7_1 = 0;
   while (1) {
    $0_1 = $3;
    $4_1 = ($7_1 << 4) + $1_1 | 0;
    if (HEAPU16[$4_1 + 8 >> 1] != 65535) {
     $3 = 0
    } else {
     $3 = HEAPU16[$4_1 + 10 >> 1] == 65535
    }
    HEAP32[$4_1 + 12 >> 2] = $3 ^ 1;
    $3 = $3 ? 0 : $0_1;
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $451($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = Math_fround(0), $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0);
  $9 = global$0 - 96 | 0;
  global$0 = $9;
  label$1 : {
   if (!HEAP32[$0_1 + 60 >> 2]) {
    $3 = HEAP32[$0_1 + 4 >> 2];
    $1_1 = $484($0_1, $1_1);
    HEAP32[$2_1 >> 2] = 0;
    if (($1_1 | 0) < 0) {
     break label$1
    }
    $1_1 = $1_1 + $3 | 0;
    $3 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8;
    $4_1 = ($3 << 8 | $3 >>> 8) << 16 >> 16;
    label$3 : {
     if (($4_1 | 0) > 0) {
      $27_1 = $1_1 + 10 | 0;
      $22_1 = $4_1 << 1;
      $1_1 = $27_1 + $22_1 | 0;
      $5_1 = HEAPU8[$1_1 + 1 | 0];
      $4_1 = HEAPU8[$1_1 | 0];
      $3 = 0;
      $0_1 = $1_1 - 2 | 0;
      $23_1 = HEAPU8[$0_1 | 0] << 8 | HEAPU8[$0_1 + 1 | 0];
      $10_1 = $16(Math_imul($23_1 + $22_1 | 0, 14) + 14 | 0);
      if ($10_1) {
       $0_1 = 0;
       $3 = ($1_1 + ($5_1 | $4_1 << 8) | 0) + 2 | 0;
       while (1) {
        $1_1 = $12_1;
        $5_1 = $10_1 + Math_imul($1_1 + $22_1 | 0, 14) | 0;
        label$7 : {
         if (!($7_1 & 255)) {
          $0_1 = HEAPU8[$3 | 0];
          if (!($0_1 & 8)) {
           $4_1 = $3 + 1 | 0;
           break label$7;
          }
          $4_1 = $3 + 2 | 0;
          $7_1 = HEAPU8[$3 + 1 | 0];
          break label$7;
         }
         $4_1 = $3;
         $7_1 = $7_1 - 1 | 0;
        }
        $3 = $0_1;
        HEAP8[$5_1 + 12 | 0] = $3;
        $0_1 = $3;
        $12_1 = $1_1 + 1 | 0;
        $3 = $4_1;
        if (($1_1 | 0) != ($23_1 | 0)) {
         continue
        }
        break;
       };
       $0_1 = 0;
       $5_1 = $4_1;
       $7_1 = 0;
       while (1) {
        $1_1 = $0_1;
        $3 = $10_1 + Math_imul($1_1 + $22_1 | 0, 14) | 0;
        $0_1 = HEAPU8[$3 + 12 | 0];
        label$11 : {
         if ($0_1 & 2) {
          $4_1 = HEAPU8[$5_1 | 0];
          $7_1 = ($0_1 & 16 ? $4_1 : 0 - $4_1 | 0) + $7_1 | 0;
          $5_1 = $5_1 + 1 | 0;
          break label$11;
         }
         if ($0_1 & 16) {
          break label$11
         }
         $7_1 = (HEAPU8[$5_1 + 1 | 0] | HEAPU8[$5_1 | 0] << 8) + $7_1 | 0;
         $5_1 = $5_1 + 2 | 0;
        }
        HEAP16[$3 >> 1] = $7_1;
        $0_1 = $1_1 + 1 | 0;
        if (($1_1 | 0) != ($23_1 | 0)) {
         continue
        }
        break;
       };
       $0_1 = 0;
       $7_1 = 0;
       while (1) {
        $1_1 = $0_1;
        $3 = $10_1 + Math_imul($1_1 + $22_1 | 0, 14) | 0;
        $0_1 = HEAPU8[$3 + 12 | 0];
        label$15 : {
         if ($0_1 & 4) {
          $4_1 = HEAPU8[$5_1 | 0];
          $7_1 = ($0_1 & 32 ? $4_1 : 0 - $4_1 | 0) + $7_1 | 0;
          $5_1 = $5_1 + 1 | 0;
          break label$15;
         }
         if ($0_1 & 32) {
          break label$15
         }
         $7_1 = (HEAPU8[$5_1 + 1 | 0] | HEAPU8[$5_1 | 0] << 8) + $7_1 | 0;
         $5_1 = $5_1 + 2 | 0;
        }
        HEAP16[$3 + 2 >> 1] = $7_1;
        $0_1 = $1_1 + 1 | 0;
        if (($1_1 | 0) != ($23_1 | 0)) {
         continue
        }
        break;
       };
       $5_1 = 0;
       $3 = 0;
       $0_1 = 0;
       $4_1 = 0;
       $1_1 = 0;
       $12_1 = 0;
       $7_1 = 0;
       while (1) {
        $13 = $11_1;
        $11_1 = $4_1;
        $4_1 = $0_1;
        $0_1 = $5_1;
        $5_1 = $3;
        $28_1 = $3 + $22_1 | 0;
        $8 = $10_1 + Math_imul($28_1, 14) | 0;
        $29_1 = HEAPU8[$8 + 12 | 0];
        $15_1 = HEAP16[$8 + 2 >> 1];
        $6_1 = $15_1;
        $8 = HEAP16[$8 >> 1];
        label$19 : {
         if (($3 | 0) == ($18_1 | 0)) {
          if ($5_1) {
           label$23 : {
            if ($30) {
             if ($19) {
              $3 = $10_1 + Math_imul($0_1, 14) | 0;
              HEAP16[$3 + 6 >> 1] = $12_1;
              HEAP16[$3 + 4 >> 1] = $7_1;
              HEAP16[$3 + 2 >> 1] = $12_1 + $11_1 >>> 1;
              HEAP16[$3 >> 1] = $7_1 + $24 >>> 1;
              HEAP8[$3 + 12 | 0] = 3;
              $0_1 = $0_1 + 1 | 0;
             }
             $3 = $10_1 + Math_imul($0_1, 14) | 0;
             HEAP16[$3 + 4 >> 1] = $24;
             HEAP16[$3 + 2 >> 1] = $13;
             HEAP16[$3 >> 1] = $1_1;
             HEAP8[$3 + 12 | 0] = 3;
             $1_1 = $11_1;
             break label$23;
            }
            $3 = $10_1 + Math_imul($0_1, 14) | 0;
            $18_1 = $3 + 12 | 0;
            if ($19) {
             HEAP8[$18_1 | 0] = 3;
             HEAP16[$3 >> 1] = $1_1;
             HEAP16[$3 + 4 >> 1] = $7_1;
             HEAP16[$3 + 2 >> 1] = $13;
             $1_1 = $12_1;
             break label$23;
            }
            HEAP8[$18_1 | 0] = 2;
            HEAP16[$3 >> 1] = $1_1;
            HEAP16[$3 + 4 >> 1] = 0;
            HEAP16[$3 + 2 >> 1] = $13;
            $1_1 = 0;
           }
           $18_1 = $1_1;
           HEAP16[($10_1 + Math_imul($0_1, 14) | 0) + 6 >> 1] = $18_1;
           $0_1 = $0_1 + 1 | 0;
          }
          $18_1 = $29_1 & 1;
          label$28 : {
           if ($18_1) {
            $1_1 = $6_1;
            $6_1 = $5_1;
            $3 = $8;
            break label$28;
           }
           $1_1 = $10_1 + Math_imul($28_1 + 1 | 0, 14) | 0;
           $3 = HEAP16[$1_1 >> 1];
           if (!(HEAP8[$1_1 + 12 | 0] & 1)) {
            $1_1 = $15_1 + HEAP16[$1_1 + 2 >> 1] >> 1;
            $24 = $8;
            $11_1 = $6_1;
            $6_1 = $5_1;
            $3 = $3 + $8 >> 1;
            break label$28;
           }
           $1_1 = HEAPU16[$1_1 + 2 >> 1];
           $24 = $8;
           $11_1 = $6_1;
           $6_1 = $5_1 + 1 | 0;
           $3 = $3 & 65535;
          }
          $5_1 = $10_1 + Math_imul($0_1, 14) | 0;
          HEAP16[$5_1 + 4 >> 1] = 0;
          HEAP16[$5_1 + 6 >> 1] = 0;
          $13 = $1_1;
          HEAP16[$5_1 + 2 >> 1] = $1_1;
          $1_1 = $3;
          HEAP16[$5_1 >> 1] = $3;
          HEAP8[$5_1 + 12 | 0] = 1;
          $19 = 0;
          $30 = !$18_1;
          $5_1 = ($4_1 << 1) + $27_1 | 0;
          $18_1 = (HEAPU8[$5_1 | 0] << 8 | HEAPU8[$5_1 + 1 | 0]) + 1 | 0;
          $4_1 = $4_1 + 1 | 0;
          $5_1 = $0_1 + 1 | 0;
          $15_1 = 1;
          break label$19;
         }
         if (!($29_1 & 1)) {
          if (!$19) {
           $19 = 1;
           $7_1 = $8;
           $12_1 = $6_1;
           $6_1 = $5_1;
           $5_1 = $0_1;
           $15_1 = 0;
           break label$19;
          }
          $3 = $10_1 + Math_imul($0_1, 14) | 0;
          HEAP16[$3 + 6 >> 1] = $12_1;
          HEAP16[$3 + 4 >> 1] = $7_1;
          HEAP16[$3 + 2 >> 1] = $12_1 + $15_1 >>> 1;
          HEAP16[$3 >> 1] = $7_1 + $8 >>> 1;
          HEAP8[$3 + 12 | 0] = 3;
          $19 = 1;
          $7_1 = $8;
          $12_1 = $6_1;
          $6_1 = $5_1;
          $5_1 = $0_1 + 1 | 0;
          $15_1 = 0;
          break label$19;
         }
         $6_1 = $10_1 + Math_imul($0_1, 14) | 0;
         $3 = $6_1 + 12 | 0;
         label$33 : {
          if ($19) {
           HEAP8[$3 | 0] = 3;
           HEAP16[$6_1 >> 1] = $8;
           HEAP16[$6_1 + 4 >> 1] = $7_1;
           HEAP16[$6_1 + 2 >> 1] = $15_1;
           $3 = $12_1;
           break label$33;
          }
          HEAP8[$3 | 0] = 2;
          HEAP16[$6_1 >> 1] = $8;
          HEAP16[$6_1 + 4 >> 1] = 0;
          HEAP16[$6_1 + 2 >> 1] = $15_1;
          $3 = 0;
         }
         HEAP16[$6_1 + 6 >> 1] = $3;
         $19 = 0;
         $6_1 = $5_1;
         $5_1 = $0_1 + 1 | 0;
         $15_1 = 1;
        }
        $3 = $6_1 + 1 | 0;
        $0_1 = $4_1;
        $8 = $11_1;
        $4_1 = $8;
        $11_1 = $13;
        if (($6_1 | 0) < ($23_1 | 0)) {
         continue
        }
        break;
       };
       label$35 : {
        if ($30) {
         if ($15_1) {
          $4_1 = $5_1
         } else {
          $0_1 = $10_1 + Math_imul($5_1, 14) | 0;
          HEAP16[$0_1 + 6 >> 1] = $12_1;
          HEAP16[$0_1 + 4 >> 1] = $7_1;
          HEAP16[$0_1 + 2 >> 1] = $8 + $12_1 >>> 1;
          HEAP16[$0_1 >> 1] = $7_1 + $24 >>> 1;
          HEAP8[$0_1 + 12 | 0] = 3;
          $4_1 = $5_1 + 1 | 0;
         }
         $0_1 = $10_1 + Math_imul($4_1, 14) | 0;
         HEAP16[$0_1 + 4 >> 1] = $24;
         HEAP16[$0_1 + 2 >> 1] = $13;
         HEAP16[$0_1 >> 1] = $1_1;
         HEAP8[$0_1 + 12 | 0] = 3;
         $3 = $8;
         break label$35;
        }
        $0_1 = $10_1 + Math_imul($5_1, 14) | 0;
        $3 = $0_1 + 12 | 0;
        if (!$15_1) {
         HEAP8[$3 | 0] = 3;
         HEAP16[$0_1 >> 1] = $1_1;
         HEAP16[$0_1 + 4 >> 1] = $7_1;
         HEAP16[$0_1 + 2 >> 1] = $13;
         $4_1 = $5_1;
         $3 = $12_1;
         break label$35;
        }
        HEAP8[$3 | 0] = 2;
        HEAP16[$0_1 >> 1] = $1_1;
        HEAP16[$0_1 + 4 >> 1] = 0;
        HEAP16[$0_1 + 2 >> 1] = $13;
        $4_1 = $5_1;
        $3 = 0;
       }
       HEAP16[($10_1 + Math_imul($4_1, 14) | 0) + 6 >> 1] = $3;
       $3 = $4_1 + 1 | 0;
      }
      $4_1 = 0;
      $5_1 = $10_1;
      if ($5_1) {
       break label$3
      }
      break label$1;
     }
     $3 = 0;
     if (($4_1 | 0) != -1) {
      break label$3
     }
     $4_1 = 1;
     $1_1 = $1_1 + 10 | 0;
     while (1) {
      label$40 : {
       $7_1 = $3;
       $12_1 = $4_1;
       if (!$4_1) {
        $7_1 = $5_1;
        break label$40;
       }
       HEAP32[$9 + 48 >> 2] = 0;
       $4_1 = $1_1 + 4 | 0;
       $6_1 = HEAPU8[$1_1 + 2 | 0] << 8;
       $8 = HEAPU8[$1_1 + 3 | 0];
       $11_1 = HEAPU8[$1_1 + 1 | 0];
       label$43 : {
        if (!($11_1 & 2)) {
         $16_1 = Math_fround(0.0);
         $14 = Math_fround(0.0);
         break label$43;
        }
        $3 = HEAPU8[$4_1 | 0];
        if ($11_1 & 1) {
         $4_1 = $1_1 + 8 | 0;
         $16_1 = Math_fround((HEAPU8[$1_1 + 5 | 0] | $3 << 8) << 16 >> 16);
         $13 = HEAPU8[$1_1 + 6 | 0] | HEAPU8[$1_1 + 7 | 0] << 8;
         $14 = Math_fround(($13 << 8 | $13 >>> 8) << 16 >> 16);
         break label$43;
        }
        $4_1 = $1_1 + 6 | 0;
        $16_1 = Math_fround($3 << 24 >> 24);
        $14 = Math_fround(HEAP8[$1_1 + 5 | 0]);
       }
       $31_1 = $16_1;
       $32_1 = $14;
       $1_1 = $6_1 | $8;
       label$46 : {
        if ($11_1 & 8) {
         $3 = $4_1 + 2 | 0;
         $4_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8;
         $14 = Math_fround(Math_fround(($4_1 << 8 | $4_1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
         $20_1 = $14;
         $21_1 = Math_fround(0.0);
         $16_1 = Math_fround(0.0);
         break label$46;
        }
        if ($11_1 & 64) {
         $3 = $4_1 + 4 | 0;
         $6_1 = HEAPU8[$4_1 + 2 | 0] | HEAPU8[$4_1 + 3 | 0] << 8;
         $20_1 = Math_fround(Math_fround(($6_1 << 8 | $6_1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
         $21_1 = Math_fround(0.0);
         $16_1 = Math_fround(0.0);
         $4_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8;
         $14 = Math_fround(Math_fround(($4_1 << 8 | $4_1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
         break label$46;
        }
        if ($11_1 << 24 >> 24 >= 0) {
         $3 = $4_1;
         $20_1 = Math_fround(1.0);
         $21_1 = Math_fround(0.0);
         $16_1 = Math_fround(0.0);
         $14 = Math_fround(1.0);
         break label$46;
        }
        $3 = $4_1 + 8 | 0;
        $6_1 = HEAPU8[$4_1 + 6 | 0] | HEAPU8[$4_1 + 7 | 0] << 8;
        $20_1 = Math_fround(Math_fround(($6_1 << 8 | $6_1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
        $6_1 = HEAPU8[$4_1 + 4 | 0] | HEAPU8[$4_1 + 5 | 0] << 8;
        $21_1 = Math_fround(Math_fround(($6_1 << 8 | $6_1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
        $6_1 = HEAPU8[$4_1 + 2 | 0] | HEAPU8[$4_1 + 3 | 0] << 8;
        $16_1 = Math_fround(Math_fround(($6_1 << 8 | $6_1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
        $4_1 = HEAPU8[$4_1 | 0] | HEAPU8[$4_1 + 1 | 0] << 8;
        $14 = Math_fround(Math_fround(($4_1 << 8 | $4_1 >>> 8) << 16 >> 16) * Math_fround(.00006103515625));
       }
       $6_1 = $3;
       label$50 : {
        label$51 : {
         $8 = $451($0_1, $1_1, $9 + 48 | 0);
         label$52 : {
          if (($8 | 0) <= 0) {
           $4_1 = $7_1;
           break label$52;
          }
          $33_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($21_1 * $21_1) + Math_fround($20_1 * $20_1))));
          $34_1 = Math_fround(Math_sqrt(Math_fround(Math_fround($14 * $14) + Math_fround($16_1 * $16_1))));
          $13 = HEAP32[$9 + 48 >> 2];
          $1_1 = 0;
          while (1) {
           $4_1 = $13 + Math_imul($1_1, 14) | 0;
           $17_1 = Math_fround(HEAP16[$4_1 >> 1]);
           $25_1 = Math_fround(HEAP16[$4_1 + 2 >> 1]);
           $26_1 = Math_fround($33_1 * Math_fround($32_1 + Math_fround(Math_fround($16_1 * $17_1) + Math_fround($20_1 * $25_1))));
           label$55 : {
            if (Math_fround(Math_abs($26_1)) < Math_fround(2147483648.0)) {
             $3 = ~~$26_1;
             break label$55;
            }
            $3 = -2147483648;
           }
           HEAP16[$4_1 + 2 >> 1] = $3;
           $17_1 = Math_fround($34_1 * Math_fround($31_1 + Math_fround(Math_fround($14 * $17_1) + Math_fround($21_1 * $25_1))));
           label$57 : {
            if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
             $3 = ~~$17_1;
             break label$57;
            }
            $3 = -2147483648;
           }
           HEAP16[$4_1 >> 1] = $3;
           $17_1 = Math_fround(HEAP16[$4_1 + 4 >> 1]);
           $25_1 = Math_fround(HEAP16[$4_1 + 6 >> 1]);
           $26_1 = Math_fround($34_1 * Math_fround($31_1 + Math_fround(Math_fround($14 * $17_1) + Math_fround($21_1 * $25_1))));
           label$59 : {
            if (Math_fround(Math_abs($26_1)) < Math_fround(2147483648.0)) {
             $3 = ~~$26_1;
             break label$59;
            }
            $3 = -2147483648;
           }
           HEAP16[$4_1 + 4 >> 1] = $3;
           $17_1 = Math_fround($33_1 * Math_fround($32_1 + Math_fround(Math_fround($16_1 * $17_1) + Math_fround($20_1 * $25_1))));
           label$61 : {
            if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
             $3 = ~~$17_1;
             break label$61;
            }
            $3 = -2147483648;
           }
           HEAP16[$4_1 + 6 >> 1] = $3;
           $1_1 = $1_1 + 1 | 0;
           if (($8 | 0) != ($1_1 | 0)) {
            continue
           }
           break;
          };
          $4_1 = $7_1 + $8 | 0;
          $1_1 = $16(Math_imul($4_1, 14));
          if (!$1_1) {
           if ($5_1) {
            $17($5_1)
           }
           $1_1 = HEAP32[$9 + 48 >> 2];
           if (!$1_1) {
            break label$51
           }
           $17($1_1);
           break label$51;
          }
          if (($7_1 | 0) > 0) {
           $1602($1_1, $5_1, Math_imul($7_1, 14))
          }
          $3 = HEAP32[$9 + 48 >> 2];
          $1602($1_1 + Math_imul($7_1, 14) | 0, $3, Math_imul($8, 14));
          if ($5_1) {
           $17($5_1)
          }
          $17($3);
          $5_1 = $1_1;
         }
         $1_1 = $11_1 & 32;
         $11_1 = 1;
         break label$50;
        }
        $1_1 = $12_1;
        $11_1 = 0;
        $4_1 = $7_1;
       }
       $3 = $4_1;
       $4_1 = $1_1;
       $1_1 = $6_1;
       $7_1 = $5_1;
       if ($11_1) {
        continue
       }
      }
      break;
     };
     $5_1 = $7_1;
     $4_1 = 0;
     if ($12_1) {
      break label$1
     }
    }
    HEAP32[$2_1 >> 2] = $5_1;
    $4_1 = $3;
    break label$1;
   }
   $5_1 = $9 + 48 | 0;
   $3 = $5_1 + 40 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5_1 + 32 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5_1 + 24 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5_1 + 16 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $5_1 + 8 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$9 + 48 >> 2] = 0;
   HEAP32[$9 + 52 >> 2] = 0;
   HEAP32[$9 + 48 >> 2] = 1;
   $3 = $9 + 40 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $9 + 32 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $9 + 24 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $9 + 16 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $3 = $9 + 8 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$9 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   label$67 : {
    label$68 : {
     if (!$483($0_1, $1_1, $5_1)) {
      break label$68
     }
     $3 = $16(Math_imul(HEAP32[$9 + 92 >> 2], 14));
     HEAP32[$2_1 >> 2] = $3;
     HEAP32[$9 + 40 >> 2] = $3;
     if (!$483($0_1, $1_1, $9)) {
      break label$68
     }
     $4_1 = HEAP32[$9 + 44 >> 2];
     break label$67;
    }
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 0;
   }
  }
  global$0 = $9 + 96 | 0;
  return $4_1;
 }
 
 function $452($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9) {
  var $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0);
  label$1 : {
   while (1) {
    if (($9 | 0) > 16) {
     break label$1
    }
    $11_1 = Math_fround(Math_fround(Math_fround(Math_fround($4_1 + $4_1) + $2_1) + $6_1) * Math_fround(.25));
    $10_1 = Math_fround(Math_fround(Math_fround($2_1 + $6_1) * Math_fround(.5)) - $11_1);
    $13 = Math_fround($10_1 * $10_1);
    $10_1 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 + $5_1) + $3) + $7_1) * Math_fround(.25));
    $12_1 = Math_fround(Math_fround(Math_fround($3 + $7_1) * Math_fround(.5)) - $10_1);
    if ($8 < Math_fround($13 + Math_fround($12_1 * $12_1))) {
     $9 = $9 + 1 | 0;
     $452($0_1, $1_1, $2_1, $3, Math_fround(Math_fround($2_1 + $4_1) * Math_fround(.5)), Math_fround(Math_fround($3 + $5_1) * Math_fround(.5)), $11_1, $10_1, $8, $9);
     $2_1 = $11_1;
     $3 = $10_1;
     $4_1 = Math_fround(Math_fround($4_1 + $6_1) * Math_fround(.5));
     $5_1 = Math_fround(Math_fround($5_1 + $7_1) * Math_fround(.5));
     continue;
    }
    break;
   };
   $9 = HEAP32[$1_1 >> 2];
   if ($0_1) {
    $0_1 = ($9 << 3) + $0_1 | 0;
    HEAPF32[$0_1 + 4 >> 2] = $7_1;
    HEAPF32[$0_1 >> 2] = $6_1;
   }
   HEAP32[$1_1 >> 2] = $9 + 1;
  }
 }
 
 function $453($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9, $10_1, $11_1) {
  var $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = Math_fround(0);
  label$1 : {
   while (1) {
    if (($11_1 | 0) > 16) {
     break label$1
    }
    $12_1 = Math_fround($4_1 - $2_1);
    $13 = Math_fround($12_1 * $12_1);
    $12_1 = Math_fround($5_1 - $3);
    $13 = Math_fround(Math_sqrt(Math_fround($13 + Math_fround($12_1 * $12_1))));
    $12_1 = Math_fround($6_1 - $4_1);
    $14 = Math_fround($12_1 * $12_1);
    $12_1 = Math_fround($7_1 - $5_1);
    $13 = Math_fround($13 + Math_fround(Math_sqrt(Math_fround($14 + Math_fround($12_1 * $12_1)))));
    $12_1 = Math_fround($8 - $6_1);
    $14 = Math_fround($12_1 * $12_1);
    $12_1 = Math_fround($9 - $7_1);
    $12_1 = Math_fround($13 + Math_fround(Math_sqrt(Math_fround($14 + Math_fround($12_1 * $12_1)))));
    $13 = Math_fround($12_1 * $12_1);
    $12_1 = Math_fround($8 - $2_1);
    $14 = Math_fround($12_1 * $12_1);
    $12_1 = Math_fround($9 - $3);
    $12_1 = Math_fround(Math_sqrt(Math_fround($14 + Math_fround($12_1 * $12_1))));
    if ($10_1 < Math_fround($13 - Math_fround($12_1 * $12_1))) {
     $12_1 = Math_fround(Math_fround($2_1 + $4_1) * Math_fround(.5));
     $15_1 = Math_fround(Math_fround($4_1 + $6_1) * Math_fround(.5));
     $4_1 = Math_fround(Math_fround($12_1 + $15_1) * Math_fround(.5));
     $16_1 = Math_fround(Math_fround($3 + $5_1) * Math_fround(.5));
     $17_1 = Math_fround(Math_fround($5_1 + $7_1) * Math_fround(.5));
     $5_1 = Math_fround(Math_fround($16_1 + $17_1) * Math_fround(.5));
     $18_1 = $2_1;
     $19 = $3;
     $13 = $4_1;
     $14 = $5_1;
     $6_1 = Math_fround(Math_fround($6_1 + $8) * Math_fround(.5));
     $4_1 = Math_fround(Math_fround($15_1 + $6_1) * Math_fround(.5));
     $2_1 = Math_fround(Math_fround($13 + $4_1) * Math_fround(.5));
     $7_1 = Math_fround(Math_fround($7_1 + $9) * Math_fround(.5));
     $5_1 = Math_fround(Math_fround($17_1 + $7_1) * Math_fround(.5));
     $3 = Math_fround(Math_fround($14 + $5_1) * Math_fround(.5));
     $11_1 = $11_1 + 1 | 0;
     $453($0_1, $1_1, $18_1, $19, $12_1, $16_1, $13, $14, $2_1, $3, $10_1, $11_1);
     continue;
    }
    break;
   };
   $11_1 = HEAP32[$1_1 >> 2];
   if ($0_1) {
    $0_1 = ($11_1 << 3) + $0_1 | 0;
    HEAPF32[$0_1 + 4 >> 2] = $9;
    HEAPF32[$0_1 >> 2] = $8;
   }
   HEAP32[$1_1 >> 2] = $11_1 + 1;
  }
 }
 
 function $454($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  if (($1_1 | 0) >= 13) {
   while (1) {
    $14 = $1_1;
    $8 = $0_1;
    $4_1 = $1_1 - 1 | 0;
    $11_1 = HEAPF32[($0_1 + Math_imul($4_1, 20) | 0) + 4 >> 2];
    $0_1 = Math_imul($1_1 >>> 1 | 0, 20) + $0_1 | 0;
    $12_1 = HEAPF32[$0_1 + 4 >> 2];
    $1_1 = $11_1 > $12_1;
    $13 = HEAPF32[$8 + 4 >> 2];
    if (($12_1 > $13 | 0) != ($1_1 | 0)) {
     $2_1 = $5_1 + 8 | 0;
     $10_1 = $2_1 + 16 | 0;
     $1_1 = $8 + Math_imul($1_1 ^ $11_1 > $13 ? $4_1 : 0, 20) | 0;
     $3 = $1_1 + 16 | 0;
     HEAP32[$10_1 >> 2] = HEAP32[$3 >> 2];
     $7_1 = $1_1 + 8 | 0;
     $6_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = $2_1 + 8 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $6_1;
     $6_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$5_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 12 >> 2] = $6_1;
     $6_1 = $0_1 + 16 | 0;
     HEAP32[$3 >> 2] = HEAP32[$6_1 >> 2];
     $3 = $0_1 + 8 | 0;
     $9 = HEAP32[$3 + 4 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $9;
     $7_1 = HEAP32[$0_1 + 4 >> 2];
     HEAP32[$1_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$1_1 + 4 >> 2] = $7_1;
     HEAP32[$6_1 >> 2] = HEAP32[$10_1 >> 2];
     $1_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$3 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$3 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$5_1 + 12 >> 2];
     HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
     HEAP32[$0_1 + 4 >> 2] = $1_1;
    }
    $1_1 = $5_1 + 8 | 0;
    $10_1 = $1_1 + 16 | 0;
    $2_1 = $8 + 16 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$2_1 >> 2];
    $7_1 = $1_1 + 8 | 0;
    $1_1 = $8 + 8 | 0;
    $3 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $3;
    $3 = HEAP32[$8 + 4 >> 2];
    HEAP32[$5_1 + 8 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$5_1 + 12 >> 2] = $3;
    $3 = $0_1 + 16 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
    $2_1 = $0_1 + 8 | 0;
    $6_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$1_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $6_1;
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$8 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$8 + 4 >> 2] = $1_1;
    HEAP32[$3 >> 2] = HEAP32[$10_1 >> 2];
    $1_1 = HEAP32[$7_1 + 4 >> 2];
    HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$5_1 + 12 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    $1_1 = 1;
    $0_1 = $4_1;
    while (1) {
     $4_1 = $0_1;
     $11_1 = HEAPF32[$8 + 4 >> 2];
     $0_1 = $1_1;
     while (1) {
      $1_1 = $0_1;
      $0_1 = $1_1 + 1 | 0;
      $2_1 = $8 + Math_imul($1_1, 20) | 0;
      if ($11_1 > HEAPF32[$2_1 + 4 >> 2]) {
       continue
      }
      break;
     };
     while (1) {
      $0_1 = $4_1;
      $4_1 = $0_1 - 1 | 0;
      $3 = $8 + Math_imul($0_1, 20) | 0;
      if ($11_1 < HEAPF32[$3 + 4 >> 2]) {
       continue
      }
      break;
     };
     if (($0_1 | 0) > ($1_1 | 0)) {
      $6_1 = $2_1 + 16 | 0;
      HEAP32[$10_1 >> 2] = HEAP32[$6_1 >> 2];
      $4_1 = $2_1 + 8 | 0;
      $9 = HEAP32[$4_1 + 4 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $9;
      $9 = HEAP32[$2_1 + 4 >> 2];
      HEAP32[$5_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$5_1 + 12 >> 2] = $9;
      $9 = $3 + 16 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$9 >> 2];
      $6_1 = $3 + 8 | 0;
      $15_1 = HEAP32[$6_1 + 4 >> 2];
      HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$4_1 + 4 >> 2] = $15_1;
      $4_1 = HEAP32[$3 + 4 >> 2];
      HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$2_1 + 4 >> 2] = $4_1;
      HEAP32[$9 >> 2] = HEAP32[$10_1 >> 2];
      $4_1 = HEAP32[$7_1 + 4 >> 2];
      HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $4_1;
      $4_1 = HEAP32[$5_1 + 12 >> 2];
      HEAP32[$3 >> 2] = HEAP32[$5_1 + 8 >> 2];
      HEAP32[$3 + 4 >> 2] = $4_1;
      $1_1 = $1_1 + 1 | 0;
      $0_1 = $0_1 - 1 | 0;
      continue;
     }
     break;
    };
    $1_1 = $14 - $1_1 | 0;
    label$8 : {
     if (($1_1 | 0) > ($0_1 | 0)) {
      $454($8, $0_1);
      $0_1 = $2_1;
      break label$8;
     }
     $454($2_1, $1_1);
     $1_1 = $0_1;
     $0_1 = $8;
    }
    if (($1_1 | 0) > 12) {
     continue
    }
    break;
   }
  }
  global$0 = $5_1 + 32 | 0;
 }
 
 function $456($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9, $10_1, $11_1) {
  var $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0;
  label$1 : {
   if (!$1_1) {
    $14 = $11_1;
    $13 = $5_1;
    break label$1;
   }
   $13 = HEAPF32[$1_1 + 52 >> 2];
   $14 = HEAPF32[$1_1 + 56 >> 2];
   $13 = $11_1 < $13 ? $13 : $11_1 > $14 ? $14 : $11_1;
   label$3 : {
    if ($11_1 == $13) {
     $11_1 = $5_1;
     break label$3;
    }
    $11_1 = Math_fround(Math_fround($13 - $11_1) * Math_fround(.5));
    label$5 : {
     if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
      $12_1 = ~~$11_1;
      break label$5;
     }
     $12_1 = -2147483648;
    }
    $14 = HEAPU8[$1_1 + 28 | 0] ? Math_fround($12_1 | 0) : $11_1;
    $11_1 = Math_fround($14 + $5_1);
    $3 = Math_fround($14 + $3);
   }
   $5_1 = $3;
   $14 = HEAPF32[$1_1 + 32 >> 2];
   $3 = Math_fround($13 + Math_fround(.5));
   label$7 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $12_1 = ~~$3;
     break label$7;
    }
    $12_1 = -2147483648;
   }
   $14 = Math_fround($14 + (HEAPU8[$1_1 + 28 | 0] ? Math_fround($12_1 | 0) : $13));
   $13 = $11_1;
   $3 = $5_1;
  }
  $11_1 = $3;
  $17_1 = HEAP32[$0_1 + 32 >> 2];
  $12_1 = $17_1 + 1 | 0;
  $1_1 = HEAP32[$0_1 + 36 >> 2];
  label$9 : {
   if (($1_1 | 0) > ($17_1 | 0)) {
    break label$9
   }
   $16_1 = $1_1;
   if ($1_1) {
    $15_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
   } else {
    $15_1 = 8
   }
   $1_1 = ($12_1 | 0) < ($15_1 | 0) ? $15_1 : $12_1;
   if (($16_1 | 0) >= ($1_1 | 0)) {
    break label$9
   }
   $15_1 = $16(Math_imul($1_1, 40));
   $16_1 = HEAP32[$0_1 + 40 >> 2];
   if ($16_1) {
    $1602($15_1, $16_1, Math_imul(HEAP32[$0_1 + 32 >> 2], 40));
    $17(HEAP32[$0_1 + 40 >> 2]);
   }
   HEAP32[$0_1 + 36 >> 2] = $1_1;
   HEAP32[$0_1 + 40 >> 2] = $15_1;
  }
  HEAP32[$0_1 + 32 >> 2] = $12_1;
  $1_1 = HEAP32[$0_1 + 40 >> 2] + Math_imul($17_1, 40) | 0;
  HEAPF32[$1_1 + 36 >> 2] = $10_1;
  HEAPF32[$1_1 + 32 >> 2] = $9;
  HEAPF32[$1_1 + 28 >> 2] = $8;
  HEAPF32[$1_1 + 24 >> 2] = $7_1;
  HEAPF32[$1_1 + 20 >> 2] = $6_1;
  HEAPF32[$1_1 + 16 >> 2] = $13;
  HEAPF32[$1_1 + 12 >> 2] = $4_1;
  HEAPF32[$1_1 + 8 >> 2] = $11_1;
  HEAPF32[$1_1 + 4 >> 2] = $14;
  HEAP32[$1_1 >> 2] = $2_1 << 2 | ($4_1 != $6_1 ? ($11_1 != $13) << 1 : 0);
  $1_1 = HEAP32[$0_1 + 48 >> 2];
  $2_1 = HEAP32[$1_1 + 12 >> 2];
  HEAP8[$0_1 + 64 | 0] = 1;
  $3 = Math_fround(Math_fround($2_1 | 0) + Math_fround(.9900000095367432));
  $4_1 = Math_fround(Math_fround(Math_fround($9 - $7_1) * Math_fround(HEAP32[$1_1 + 28 >> 2])) + $3);
  label$13 : {
   if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
    $12_1 = ~~$4_1;
    break label$13;
   }
   $12_1 = -2147483648;
  }
  $2_1 = HEAP32[$0_1 + 80 >> 2];
  $3 = Math_fround(Math_fround(Math_fround($10_1 - $8) * Math_fround(HEAP32[$1_1 + 32 >> 2])) + $3);
  label$15 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$3;
    break label$15;
   }
   $1_1 = -2147483648;
  }
  HEAP32[$0_1 + 80 >> 2] = $2_1 + Math_imul($1_1, $12_1);
 }
 
 function $458($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 16 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 32 >> 2] = 0;
   HEAP32[$0_1 + 36 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 40 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if ($1_1) {
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 8 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 28 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 20 >> 2] = 0;
   HEAP32[$0_1 + 24 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 28 >> 2] = 0;
  }
  HEAP8[$0_1 + 64 | 0] = 1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 80 >> 2] = 0;
  HEAP32[$0_1 + 72 >> 2] = 0;
  HEAP32[$0_1 + 76 >> 2] = 0;
 }
 
 function $459($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = HEAPU16[$0_1 + 6 >> 1];
  $4_1 = HEAPU16[$1_1 + 6 >> 1];
  $2_1 = -1;
  label$1 : {
   if ($3 >>> 0 > $4_1 >>> 0) {
    break label$1
   }
   $2_1 = 1;
   if ($3 >>> 0 < $4_1 >>> 0) {
    break label$1
   }
   $0_1 = HEAPU16[$0_1 + 4 >> 1];
   $1_1 = HEAPU16[$1_1 + 4 >> 1];
   $2_1 = $0_1 >>> 0 > $1_1 >>> 0 ? -1 : $0_1 >>> 0 < $1_1 >>> 0;
  }
  return $2_1 | 0;
 }
 
 function $460($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[$0_1 + 12 >> 2];
  $1_1 = HEAP32[$1_1 + 12 >> 2];
  return (($0_1 | 0) < ($1_1 | 0) ? -1 : ($0_1 | 0) > ($1_1 | 0)) | 0;
 }
 
 function $461($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0);
  $9 = global$0 - 16 | 0;
  global$0 = $9;
  $3 = HEAP32[$0_1 + 32 >> 2];
  if ($3) {
   $5_1 = HEAP32[$0_1 + 40 >> 2];
   while (1) {
    $10_1 = HEAP32[$5_1 + Math_imul($1_1, 40) >> 2] >>> 2 | 0;
    $2_1 = ($2_1 | 0) > ($10_1 | 0) ? $2_1 : $10_1;
    $10_1 = $2_1;
    $1_1 = $1_1 + 1 | 0;
    if (($3 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if ($1_1) {
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 8 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 28 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 20 >> 2] = 0;
   HEAP32[$0_1 + 24 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 28 >> 2] = 0;
  }
  HEAP16[$0_1 + 84 >> 1] = 0;
  HEAP8[$0_1 + 64 | 0] = 0;
  $1_1 = $10_1 + 1 | 0;
  if (($1_1 | 0) > HEAP32[$0_1 + 20 >> 2]) {
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   label$2 : {
    if (($2_1 | 0) >= ($1_1 | 0)) {
     break label$2
    }
    $3 = $2_1;
    $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
    if (($3 | 0) >= ($2_1 | 0)) {
     break label$2
    }
    $3 = $16($2_1 << 2);
    $5_1 = HEAP32[$0_1 + 8 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$0_1 >> 2] << 2);
     $17(HEAP32[$0_1 + 8 >> 2]);
    }
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = $3;
   }
   $2_1 = HEAP32[$0_1 >> 2];
   if (($1_1 | 0) > ($2_1 | 0)) {
    while (1) {
     HEAP32[HEAP32[$0_1 + 8 >> 2] + ($2_1 << 2) >> 2] = -1082130432;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    }
   }
   HEAP32[$0_1 >> 2] = $1_1;
   $2_1 = HEAP32[$0_1 + 24 >> 2];
   label$8 : {
    if (($2_1 | 0) >= ($1_1 | 0)) {
     break label$8
    }
    $3 = $2_1;
    $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
    if (($3 | 0) >= ($2_1 | 0)) {
     break label$8
    }
    $3 = $16($2_1 << 1);
    $5_1 = HEAP32[$0_1 + 28 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$0_1 + 20 >> 2] << 1);
     $17(HEAP32[$0_1 + 28 >> 2]);
    }
    HEAP32[$0_1 + 24 >> 2] = $2_1;
    HEAP32[$0_1 + 28 >> 2] = $3;
   }
   $2_1 = HEAP32[$0_1 + 20 >> 2];
   if (($1_1 | 0) > ($2_1 | 0)) {
    while (1) {
     HEAP16[HEAP32[$0_1 + 28 >> 2] + ($2_1 << 1) >> 1] = 65535;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    }
   }
   HEAP32[$0_1 + 20 >> 2] = $1_1;
  }
  $2_1 = HEAP32[$0_1 + 32 >> 2];
  if (($2_1 | 0) > 0) {
   $1_1 = HEAP32[$0_1 + 32 >> 2];
   $5_1 = ($1_1 | 0) <= 1 ? 1 : $1_1;
   $6_1 = HEAP32[$0_1 + 40 >> 2];
   $7_1 = HEAP32[$0_1 + 28 >> 2];
   $8 = HEAP32[$0_1 + 8 >> 2];
   $2_1 = 0;
   while (1) {
    $4_1 = $6_1 + Math_imul($2_1, 40) | 0;
    $3 = HEAP32[$4_1 >> 2];
    HEAPF32[($3 & -4) + $8 >> 2] = HEAPF32[$4_1 + 4 >> 2];
    HEAP16[$7_1 + ($3 >>> 1 & 2147483646) >> 1] = $2_1;
    $4_1 = (($3 >>> 17 | 0) + $0_1 | 0) + 84 | 0;
    HEAP8[$4_1 | 0] = HEAPU8[$4_1 | 0] | 1 << ($3 >>> 14 & 7);
    $2_1 = $2_1 + 1 | 0;
    if (($5_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
   $2_1 = $1_1;
  }
  label$81 : {
   label$9 : {
    if (HEAPU32[$0_1 + 20 >> 2] <= 32) {
     if (HEAP32[$0_1 + 44 >> 2]) {
      break label$9
     }
     break label$81;
    }
    $1_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + 64 >> 1];
    if (!(($1_1 | 0) == 65535 ? HEAP32[$0_1 + 44 >> 2] : HEAP32[$0_1 + 40 >> 2] + Math_imul($1_1, 40) | 0)) {
     break label$81
    }
   }
   if ((HEAP32[(HEAP32[$0_1 + 40 >> 2] + Math_imul($2_1, 40) | 0) - 40 >> 2] & -4) != 36) {
    $3 = $2_1 + 1 | 0;
    $1_1 = HEAP32[$0_1 + 36 >> 2];
    label$12 : {
     if (($1_1 | 0) > ($2_1 | 0)) {
      break label$12
     }
     $2_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
     $2_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
     if (($1_1 | 0) >= ($2_1 | 0)) {
      break label$12
     }
     $1_1 = $16(Math_imul($2_1, 40));
     $5_1 = HEAP32[$0_1 + 40 >> 2];
     if ($5_1) {
      $1602($1_1, $5_1, Math_imul(HEAP32[$0_1 + 32 >> 2], 40));
      $17(HEAP32[$0_1 + 40 >> 2]);
     }
     HEAP32[$0_1 + 36 >> 2] = $2_1;
     HEAP32[$0_1 + 40 >> 2] = $1_1;
    }
    HEAP32[$0_1 + 32 >> 2] = $3;
   }
   $3 = HEAP32[$0_1 + 40 >> 2];
   $5_1 = HEAP32[$0_1 + 32 >> 2] - 1 | 0;
   $1_1 = $3 + Math_imul($5_1, 40) | 0;
   if (HEAPU32[$0_1 + 20 >> 2] <= 32) {
    $2_1 = HEAP32[$0_1 + 44 >> 2]
   } else {
    $2_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + 64 >> 1];
    $2_1 = ($2_1 | 0) == 65535 ? HEAP32[$0_1 + 44 >> 2] : HEAP32[$0_1 + 40 >> 2] + Math_imul($2_1, 40) | 0;
   }
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $7_1 = HEAP32[$2_1 >> 2];
   HEAP32[$1_1 >> 2] = $7_1;
   HEAP32[$1_1 + 4 >> 2] = $6_1;
   $6_1 = $2_1 + 32 | 0;
   $8 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $1_1 + 32 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8;
   $6_1 = $2_1 + 24 | 0;
   $8 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $1_1 + 24 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8;
   $6_1 = $2_1 + 16 | 0;
   $8 = HEAP32[$6_1 + 4 >> 2];
   $4_1 = $1_1 + 16 | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $8;
   $2_1 = $2_1 + 8 | 0;
   $6_1 = HEAP32[$2_1 + 4 >> 2];
   $8 = $1_1 + 8 | 0;
   HEAP32[$8 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$8 + 4 >> 2] = $6_1;
   HEAP32[$1_1 >> 2] = $7_1 & 3 | 36;
   $2_1 = $3 + Math_imul($5_1, 40) | 0;
   $11_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] * Math_fround(4.0));
   HEAPF32[$2_1 + 4 >> 2] = $11_1;
   HEAPF32[HEAP32[$0_1 + 8 >> 2] + 36 >> 2] = $11_1;
   HEAP16[HEAP32[$0_1 + 28 >> 2] + (HEAP32[$1_1 >> 2] >>> 1 & 2147483646) >> 1] = HEAPU16[$0_1 + 32 >> 1] - 1;
  }
  if (HEAPU32[$0_1 + 20 >> 2] <= 32) {
   $1_1 = HEAP32[$0_1 + 44 >> 2]
  } else {
   $1_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + 64 >> 1];
   $1_1 = ($1_1 | 0) == 65535 ? HEAP32[$0_1 + 44 >> 2] : HEAP32[$0_1 + 40 >> 2] + Math_imul($1_1, 40) | 0;
  }
  if ($1_1) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] & -3
  }
  if (HEAPU32[$0_1 + 20 >> 2] <= 9) {
   $1_1 = HEAP32[$0_1 + 44 >> 2]
  } else {
   $1_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + 18 >> 1];
   $1_1 = ($1_1 | 0) == 65535 ? HEAP32[$0_1 + 44 >> 2] : HEAP32[$0_1 + 40 >> 2] + Math_imul($1_1, 40) | 0;
  }
  if ($1_1) {
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] & -3
  }
  HEAP32[$9 + 12 >> 2] = 8724518;
  HEAP32[$9 + 8 >> 2] = -15859666;
  if (HEAPU16[$0_1 + 60 >> 1] == 65535) {
   $3 = HEAP32[$0_1 + 40 >> 2];
   $5_1 = HEAP32[$0_1 + 28 >> 2];
   $6_1 = HEAP32[$0_1 + 20 >> 2];
   $1_1 = 0;
   label$25 : {
    while (1) {
     $2_1 = $1_1;
     $1_1 = HEAPU16[($9 + 12 | 0) + ($1_1 << 1) >> 1];
     $4_1 = 0;
     label$27 : {
      if ($6_1 >>> 0 <= $1_1 >>> 0) {
       break label$27
      }
      $7_1 = HEAPU16[$5_1 + ($1_1 << 1) >> 1];
      $4_1 = ($7_1 | 0) != 65535 ? $3 + Math_imul($7_1, 40) | 0 : 0;
     }
     if ($4_1) {
      break label$25
     }
     $1_1 = $2_1 + 1 | 0;
     if (($1_1 | 0) != 2) {
      continue
     }
     break;
    };
    $1_1 = 65535;
   }
   HEAP16[$0_1 + 60 >> 1] = $1_1;
  }
  if (HEAPU16[$0_1 + 62 >> 1] == 65535) {
   $3 = HEAP32[$0_1 + 40 >> 2];
   $5_1 = HEAP32[$0_1 + 28 >> 2];
   $6_1 = HEAP32[$0_1 + 20 >> 2];
   $1_1 = 0;
   label$29 : {
    while (1) {
     $2_1 = $1_1;
     $1_1 = HEAPU16[($9 + 8 | 0) + ($1_1 << 1) >> 1];
     $4_1 = 0;
     label$31 : {
      if ($6_1 >>> 0 <= $1_1 >>> 0) {
       break label$31
      }
      $7_1 = HEAPU16[$5_1 + ($1_1 << 1) >> 1];
      $4_1 = ($7_1 | 0) != 65535 ? $3 + Math_imul($7_1, 40) | 0 : 0;
     }
     if ($4_1) {
      break label$29
     }
     $1_1 = $2_1 + 1 | 0;
     if (($1_1 | 0) != 2) {
      continue
     }
     break;
    };
    $1_1 = 65535;
   }
   HEAP16[$0_1 + 62 >> 1] = $1_1;
  }
  $2_1 = 0;
  $3 = HEAP32[$0_1 + 20 >> 2];
  $1_1 = HEAPU16[$0_1 + 58 >> 1];
  if ($3 >>> 0 > $1_1 >>> 0) {
   $1_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + ($1_1 << 1) >> 1];
   $2_1 = ($1_1 | 0) != 65535 ? HEAP32[$0_1 + 40 >> 2] + Math_imul($1_1, 40) | 0 : 0;
  }
  HEAP32[$0_1 + 44 >> 2] = $2_1;
  label$33 : {
   if ($2_1) {
    break label$33
   }
   $5_1 = HEAP32[$0_1 + 40 >> 2];
   $6_1 = HEAP32[$0_1 + 28 >> 2];
   $1_1 = 0;
   label$34 : {
    while (1) {
     $2_1 = $1_1;
     $1_1 = HEAPU16[($1_1 << 1) + 32850 >> 1];
     $4_1 = 0;
     label$36 : {
      if ($3 >>> 0 <= $1_1 >>> 0) {
       break label$36
      }
      $7_1 = HEAPU16[$6_1 + ($1_1 << 1) >> 1];
      $4_1 = ($7_1 | 0) != 65535 ? $5_1 + Math_imul($7_1, 40) | 0 : 0;
     }
     if ($4_1) {
      break label$34
     }
     $1_1 = $2_1 + 1 | 0;
     if (($1_1 | 0) != 3) {
      continue
     }
     break;
    };
    $1_1 = 65535;
   }
   $2_1 = $1_1;
   HEAP16[$0_1 + 58 >> 1] = $1_1;
   $1_1 = 0;
   if ($2_1 >>> 0 < $3 >>> 0) {
    $1_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + ($2_1 << 1) >> 1];
    $1_1 = ($1_1 | 0) != 65535 ? HEAP32[$0_1 + 40 >> 2] + Math_imul($1_1, 40) | 0 : 0;
   }
   HEAP32[$0_1 + 44 >> 2] = $1_1;
   if ($1_1) {
    break label$33
   }
   $1_1 = (HEAP32[$0_1 + 40 >> 2] + Math_imul(HEAP32[$0_1 + 32 >> 2], 40) | 0) - 40 | 0;
   HEAP32[$0_1 + 44 >> 2] = $1_1;
   HEAP16[$0_1 + 58 >> 1] = HEAP32[$1_1 >> 2] >>> 2;
  }
  HEAPF32[$0_1 + 12 >> 2] = HEAPF32[HEAP32[$0_1 + 44 >> 2] + 4 >> 2];
  $3 = HEAP32[$0_1 + 8 >> 2];
  $1_1 = 0;
  while (1) {
   $2_1 = $1_1;
   $1_1 = $3 + ($1_1 << 2) | 0;
   if (HEAPF32[$1_1 >> 2] < Math_fround(0.0)) {
    HEAPF32[$1_1 >> 2] = HEAPF32[$0_1 + 12 >> 2]
   }
   $1_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != ($10_1 | 0)) {
    continue
   }
   break;
  };
  global$0 = $9 + 16 | 0;
 }
 
 function $470($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 64 | 0] = 0;
  HEAP16[$0_1 + 62 >> 1] = 65535;
  HEAP16[$0_1 + 58 >> 1] = 65535;
  HEAP16[$0_1 + 60 >> 1] = 65535;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 72 >> 2] = 0;
  HEAP32[$0_1 + 76 >> 2] = 0;
  HEAP32[$0_1 + 68 >> 2] = 1065353216;
  HEAP32[$0_1 + 40 >> 2] = 0;
  $1_1 = $0_1 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 50 | 0;
  HEAP16[$1_1 >> 1] = 0;
  HEAP16[$1_1 + 2 >> 1] = 0;
  HEAP16[$1_1 + 4 >> 1] = 0;
  HEAP16[$1_1 + 6 >> 1] = 0;
  $0_1 = $0_1 + 78 | 0;
  HEAP16[$0_1 >> 1] = 0;
  HEAP16[$0_1 + 2 >> 1] = 0;
  HEAP16[$0_1 + 4 >> 1] = 0;
  HEAP16[$0_1 + 6 >> 1] = 0;
 }
 
 function $471($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 16 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 32 >> 2] = 0;
   HEAP32[$0_1 + 36 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 40 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if ($1_1) {
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 8 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 28 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 20 >> 2] = 0;
   HEAP32[$0_1 + 24 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 28 >> 2] = 0;
  }
  HEAP8[$0_1 + 64 | 0] = 1;
  HEAP32[$0_1 + 44 >> 2] = 0;
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 80 >> 2] = 0;
  HEAP32[$0_1 + 72 >> 2] = 0;
  HEAP32[$0_1 + 76 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 40 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 28 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if ($1_1) {
   $17($1_1)
  }
  return $0_1;
 }
 
 function $472($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  if ($1_1 >>> 0 >= HEAPU32[$0_1 + 20 >> 2]) {
   return HEAP32[$0_1 + 44 >> 2]
  }
  $2_1 = HEAP32[$0_1 + 44 >> 2];
  $3 = HEAP32[$0_1 + 40 >> 2];
  $0_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + ($1_1 << 1) >> 1];
  return ($0_1 | 0) == 65535 ? $2_1 : $3 + Math_imul($0_1, 40) | 0;
 }
 
 function $474($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0;
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  $8 = $6_1;
  if (!$6_1) {
   $8 = $1697($5_1) + $5_1 | 0
  }
  $9 = HEAPF32[$1_1 + 16 >> 2];
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $14 = $8;
  label$2 : {
   if ($5_1 >>> 0 >= $8 >>> 0) {
    $8 = $5_1;
    $9 = Math_fround(0.0);
    break label$2;
   }
   $16_1 = Math_fround($2_1 / $9);
   $17_1 = $1_1 + 12 | 0;
   $6_1 = 0;
   $8 = $5_1;
   $13 = HEAPF32[$0_1 >> 2];
   $11_1 = HEAPF32[$0_1 + 4 >> 2];
   while (1) {
    $5_1 = $8;
    label$5 : {
     label$6 : {
      if (!($4_1 > Math_fround(0.0))) {
       break label$6
      }
      $8 = $6_1;
      if ($6_1) {
       $6_1 = $8
      } else {
       $6_1 = $415($1_1, $16_1, $5_1, $14, Math_fround($4_1 - $10_1));
       $6_1 = (($6_1 | 0) == ($5_1 | 0)) + $6_1 | 0;
      }
      if ($5_1 >>> 0 < $6_1 >>> 0) {
       break label$6
      }
      $9 = $13;
      if ($10_1 > $9) {
       HEAPF32[$0_1 >> 2] = $10_1;
       $9 = $10_1;
      }
      $13 = $9;
      $11_1 = Math_fround($11_1 + $2_1);
      HEAPF32[$0_1 + 4 >> 2] = $11_1;
      $6_1 = $5_1;
      if (!($5_1 >>> 0 >= $14 >>> 0)) {
       while (1) {
        label$12 : {
         $5_1 = HEAPU8[$6_1 | 0];
         $8 = ($5_1 | 0) == 32;
         $6_1 = $6_1 + ($8 | ($5_1 - 9 & 255) >>> 0 < 2) | 0;
         if (!$8 & ($5_1 | 0) != 9) {
          break label$12
         }
         if ($6_1 >>> 0 < $14 >>> 0) {
          continue
         }
        }
        break;
       };
       $5_1 = $6_1;
      }
      $8 = $5_1;
      $5_1 = 0;
      $10_1 = Math_fround(0.0);
      break label$5;
     }
     $18_1 = $6_1;
     $6_1 = HEAP8[$5_1 | 0];
     HEAP32[$12_1 + 12 >> 2] = $6_1;
     label$15 : {
      label$16 : {
       label$17 : {
        if (($6_1 | 0) >= 0) {
         $6_1 = $5_1 + 1 | 0;
         break label$17;
        }
        $6_1 = $10($12_1 + 12 | 0, $5_1, $14) + $5_1 | 0;
        if (!HEAP32[$12_1 + 12 >> 2]) {
         break label$16
        }
       }
       $8 = $6_1;
       label$19 : {
        $15_1 = HEAP32[$12_1 + 12 >> 2];
        if ($15_1 >>> 0 > 31) {
         break label$19
        }
        $9 = $11_1;
        $6_1 = 2;
        label$20 : {
         switch ($15_1 - 10 | 0) {
         case 3:
          break label$15;
         case 0:
          break label$20;
         default:
          break label$19;
         };
        }
        $9 = Math_fround($11_1 + $2_1);
        HEAPF32[$0_1 + 4 >> 2] = $9;
        $13 = $10_1 <= $13 ? $13 : $10_1;
        HEAPF32[$0_1 >> 2] = $13;
        $10_1 = Math_fround(0.0);
        break label$15;
       }
       $9 = $11_1;
       $6_1 = $5_1;
       $11_1 = Math_fround($10_1 + Math_fround($16_1 * HEAPF32[(($15_1 | 0) < HEAP32[$1_1 >> 2] ? HEAP32[$1_1 + 8 >> 2] + ($15_1 << 2) | 0 : $17_1) >> 2]));
       $5_1 = $11_1 >= $3;
       $8 = $5_1 ? $6_1 : $8;
       $6_1 = $5_1 ? 3 : 0;
       $10_1 = $5_1 ? $10_1 : $11_1;
       break label$15;
      }
      $9 = $11_1;
      $8 = $6_1;
      $6_1 = 3;
     }
     $11_1 = $9;
     $5_1 = $18_1;
     $9 = $10_1;
     if (($6_1 | 0) == 3) {
      break label$2
     }
    }
    $6_1 = $5_1;
    $9 = $10_1;
    if ($8 >>> 0 < $14 >>> 0) {
     continue
    }
    break;
   };
  }
  if (HEAPF32[$0_1 >> 2] < $9) {
   HEAPF32[$0_1 >> 2] = $9
  }
  $3 = HEAPF32[$0_1 + 4 >> 2];
  if (!(!($9 > Math_fround(0.0)) & $3 != Math_fround(0.0))) {
   HEAPF32[$0_1 + 4 >> 2] = $3 + $2_1
  }
  if ($7_1) {
   HEAP32[$7_1 >> 2] = $8
  }
  global$0 = $12_1 + 16 | 0;
 }
 
 function $475($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  label$3 : {
   if ($5_1 >>> 0 >= HEAPU32[$0_1 + 20 >> 2]) {
    $5_1 = HEAP32[$0_1 + 44 >> 2]
   } else {
    $5_1 = HEAPU16[HEAP32[$0_1 + 28 >> 2] + ($5_1 << 1) >> 1];
    $5_1 = ($5_1 | 0) == 65535 ? HEAP32[$0_1 + 44 >> 2] : HEAP32[$0_1 + 40 >> 2] + Math_imul($5_1, 40) | 0;
   }
   if (!$5_1) {
    break label$3
   }
   $8 = HEAP32[$5_1 >> 2];
   if (!($8 & 2)) {
    break label$3
   }
   $6_1 = Math_fround(1.0);
   $6_1 = $2_1 >= Math_fround(0.0) ? Math_fround($2_1 / HEAPF32[$0_1 + 16 >> 2]) : $6_1;
   $9 = $8 & 1 ? $4_1 | 16777215 : $4_1;
   $2_1 = HEAPF32[$3 >> 2];
   label$5 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$2_1;
     break label$5;
    }
    $0_1 = -2147483648;
   }
   $11_1 = Math_fround($0_1 | 0);
   HEAPF32[$3 >> 2] = $11_1;
   $2_1 = HEAPF32[$3 + 4 >> 2];
   label$7 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$2_1;
     break label$7;
    }
    $0_1 = -2147483648;
   }
   $12_1 = Math_fround($0_1 | 0);
   HEAPF32[$3 + 4 >> 2] = $12_1;
   $383($1_1, 6, 4);
   $13 = HEAP32[$5_1 + 36 >> 2];
   $15_1 = HEAPF32[$5_1 + 20 >> 2];
   $8 = HEAP32[$5_1 + 32 >> 2];
   $16_1 = HEAPF32[$5_1 + 16 >> 2];
   $4_1 = HEAP32[$5_1 + 28 >> 2];
   $3 = HEAP32[$5_1 + 24 >> 2];
   $10_1 = HEAPF32[$5_1 + 8 >> 2];
   $2_1 = HEAPF32[$5_1 + 12 >> 2];
   $7_1 = HEAP32[$1_1 + 56 >> 2];
   $5_1 = HEAPU16[$1_1 + 40 >> 1];
   HEAP16[$7_1 + 6 >> 1] = $5_1;
   HEAP16[$7_1 >> 1] = $5_1;
   HEAP16[$7_1 + 10 >> 1] = $5_1 + 3;
   $0_1 = $5_1 + 2 | 0;
   HEAP16[$7_1 + 8 >> 1] = $0_1;
   HEAP16[$7_1 + 4 >> 1] = $0_1;
   HEAP16[$7_1 + 2 >> 1] = $5_1 + 1;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   $14 = Math_fround(Math_fround($2_1 * $6_1) + $12_1);
   HEAPF32[$0_1 + 4 >> 2] = $14;
   $10_1 = Math_fround(Math_fround($10_1 * $6_1) + $11_1);
   HEAPF32[$0_1 >> 2] = $10_1;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$0_1 + 8 >> 2] = $3;
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   $2_1 = Math_fround(Math_fround($16_1 * $6_1) + $11_1);
   HEAPF32[$0_1 + 20 >> 2] = $2_1;
   HEAP32[$0_1 + 16 >> 2] = $9;
   HEAPF32[$0_1 + 24 >> 2] = $14;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$0_1 + 32 >> 2] = $4_1;
   HEAP32[$0_1 + 28 >> 2] = $8;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   HEAPF32[$0_1 + 40 >> 2] = $2_1;
   $2_1 = Math_fround(Math_fround($15_1 * $6_1) + $12_1);
   HEAPF32[$0_1 + 44 >> 2] = $2_1;
   HEAP32[$0_1 + 36 >> 2] = $9;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$0_1 + 52 >> 2] = $13;
   HEAP32[$0_1 + 48 >> 2] = $8;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   HEAPF32[$0_1 + 60 >> 2] = $10_1;
   HEAPF32[$0_1 - -64 >> 2] = $2_1;
   HEAP32[$0_1 + 56 >> 2] = $9;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$0_1 + 72 >> 2] = $13;
   HEAP32[$0_1 + 68 >> 2] = $3;
   $0_1 = HEAP32[$1_1 + 52 >> 2];
   HEAP32[$0_1 + 76 >> 2] = $9;
   HEAP32[$1_1 + 52 >> 2] = $0_1 + 80;
   HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 4;
   HEAP32[$1_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2] + 12;
  }
 }
 
 function $476($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $15_1 = HEAPF32[$1_1 + 4 >> 2];
  $7_1 = HEAPF32[$1_1 >> 2];
  $10_1 = HEAPF32[HEAP32[$0_1 + 44 >> 2] + 12 >> 2];
  $5_1 = Math_fround(Math_fround($10_1 * Math_fround(.4000000059604645)) * $4_1);
  label$1 : {
   label$2 : {
    switch ($3 | 0) {
    case 2:
     $5_1 = Math_fround(-$5_1);
    case 3:
     $11_1 = Math_fround($5_1 * Math_fround(.8659999966621399));
     $8 = Math_fround($5_1 * Math_fround(-.75));
     $12_1 = $8;
     $9 = Math_fround($5_1 * Math_fround(-.8659999966621399));
     $13 = Math_fround($5_1 * Math_fround(0.0));
     $14 = Math_fround($5_1 * Math_fround(.75));
     break label$1;
    case 0:
     $5_1 = Math_fround(-$5_1);
     break;
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   $9 = Math_fround($5_1 * Math_fround(-.75));
   $11_1 = $9;
   $12_1 = Math_fround($5_1 * Math_fround(-.8659999966621399));
   $8 = Math_fround($5_1 * Math_fround(.8659999966621399));
   $13 = Math_fround($5_1 * Math_fround(.75));
   $14 = Math_fround($5_1 * Math_fround(0.0));
  }
  $5_1 = $7_1;
  $7_1 = Math_fround($10_1 * Math_fround(.5));
  $5_1 = Math_fround($5_1 + $7_1);
  HEAPF32[$6_1 + 24 >> 2] = $5_1 + $13;
  $4_1 = Math_fround($15_1 + Math_fround($7_1 * $4_1));
  HEAPF32[$6_1 + 28 >> 2] = $4_1 + $14;
  HEAPF32[$6_1 + 20 >> 2] = $4_1 + $8;
  HEAPF32[$6_1 + 16 >> 2] = $5_1 + $9;
  HEAPF32[$6_1 + 12 >> 2] = $4_1 + $12_1;
  HEAPF32[$6_1 + 8 >> 2] = $5_1 + $11_1;
  $406($0_1, $6_1 + 24 | 0, $6_1 + 16 | 0, $6_1 + 8 | 0, $2_1);
  global$0 = $6_1 + 32 | 0;
 }
 
 function $477($0_1, $1_1, $2_1) {
  var $3 = Math_fround(0);
  label$1 : {
   if ($2_1 >>> 0 < 16777216) {
    break label$1
   }
   $3 = Math_fround(HEAPF32[HEAP32[$0_1 + 44 >> 2] + 12 >> 2] * Math_fround(.20000000298023224));
   if ($3 <= Math_fround(0.0)) {
    break label$1
   }
   $393($0_1, $1_1, $3, Math_fround(0.0), Math_fround(5.4977874755859375), 7);
   $389($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $2_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
 }
 
 function $478($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  $7_1 = Math_fround($3 / Math_fround(5.0));
  $7_1 = $7_1 >= Math_fround(1.0) ? $7_1 : Math_fround(1.0);
  $8 = Math_fround($7_1 * Math_fround(.25));
  $9 = Math_fround($8 + HEAPF32[$1_1 >> 2]);
  HEAPF32[$1_1 >> 2] = $9;
  $6_1 = Math_fround($8 + HEAPF32[$1_1 + 4 >> 2]);
  HEAPF32[$1_1 + 4 >> 2] = $6_1;
  $10_1 = Math_fround($3 - Math_fround($7_1 * Math_fround(.5)));
  $3 = Math_fround($10_1 / Math_fround(3.0));
  $8 = Math_fround($3 + $9);
  $11_1 = Math_fround($8 - $3);
  $9 = Math_fround(Math_fround($10_1 + $6_1) - Math_fround($3 * Math_fround(.5)));
  $6_1 = Math_fround($9 - $3);
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  $4_1 = HEAP32[$0_1 + 88 >> 2];
  label$1 : {
   if (($1_1 | 0) != ($4_1 | 0)) {
    break label$1
   }
   $5_1 = $1_1 + 1 | 0;
   if ($4_1) {
    $1_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $1_1 = 8
   }
   $1_1 = ($1_1 | 0) > ($5_1 | 0) ? $1_1 : $5_1;
   if (($1_1 | 0) <= ($4_1 | 0)) {
    break label$1
   }
   $4_1 = $16($1_1 << 3);
   $5_1 = HEAP32[$0_1 + 92 >> 2];
   if ($5_1) {
    $1602($4_1, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
    $17(HEAP32[$0_1 + 92 >> 2]);
   }
   HEAP32[$0_1 + 88 >> 2] = $1_1;
   HEAP32[$0_1 + 92 >> 2] = $4_1;
  }
  $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
  HEAPF32[$1_1 + 4 >> 2] = $6_1;
  HEAPF32[$1_1 >> 2] = $11_1;
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  $4_1 = $1_1 + 1 | 0;
  HEAP32[$0_1 + 84 >> 2] = $4_1;
  $5_1 = $4_1;
  $4_1 = HEAP32[$0_1 + 88 >> 2];
  label$5 : {
   if (($5_1 | 0) != ($4_1 | 0)) {
    break label$5
   }
   $5_1 = $1_1 + 2 | 0;
   if ($4_1) {
    $1_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $1_1 = 8
   }
   $1_1 = ($1_1 | 0) > ($5_1 | 0) ? $1_1 : $5_1;
   if (($1_1 | 0) <= ($4_1 | 0)) {
    break label$5
   }
   $4_1 = $16($1_1 << 3);
   $5_1 = HEAP32[$0_1 + 92 >> 2];
   if ($5_1) {
    $1602($4_1, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
    $17(HEAP32[$0_1 + 92 >> 2]);
   }
   HEAP32[$0_1 + 88 >> 2] = $1_1;
   HEAP32[$0_1 + 92 >> 2] = $4_1;
  }
  $6_1 = Math_fround(-$3);
  $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
  HEAPF32[$1_1 + 4 >> 2] = $9;
  HEAPF32[$1_1 >> 2] = $8;
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  $4_1 = $1_1 + 1 | 0;
  HEAP32[$0_1 + 84 >> 2] = $4_1;
  $5_1 = $4_1;
  $4_1 = HEAP32[$0_1 + 88 >> 2];
  label$9 : {
   if (($5_1 | 0) != ($4_1 | 0)) {
    break label$9
   }
   $5_1 = $1_1 + 2 | 0;
   if ($4_1) {
    $1_1 = $4_1 + (($4_1 | 0) / 2 | 0) | 0
   } else {
    $1_1 = 8
   }
   $1_1 = ($1_1 | 0) > ($5_1 | 0) ? $1_1 : $5_1;
   if (($1_1 | 0) <= ($4_1 | 0)) {
    break label$9
   }
   $4_1 = $16($1_1 << 3);
   $5_1 = HEAP32[$0_1 + 92 >> 2];
   if ($5_1) {
    $1602($4_1, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
    $17(HEAP32[$0_1 + 92 >> 2]);
   }
   HEAP32[$0_1 + 88 >> 2] = $1_1;
   HEAP32[$0_1 + 92 >> 2] = $4_1;
  }
  $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
  HEAPF32[$1_1 + 4 >> 2] = Math_fround($6_1 + $6_1) + $9;
  HEAPF32[$1_1 >> 2] = Math_fround($3 + $3) + $8;
  $1_1 = HEAP32[$0_1 + 84 >> 2] + 1 | 0;
  HEAP32[$0_1 + 84 >> 2] = $1_1;
  $388($0_1, HEAP32[$0_1 + 92 >> 2], $1_1, $2_1, 0, $7_1);
  HEAP32[$0_1 + 84 >> 2] = 0;
 }
 
 function $480($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    switch ($3 | 0) {
    case 0:
     $6_1 = HEAPF32[$2_1 >> 2];
     $8 = HEAPF32[$1_1 >> 2];
     $7_1 = HEAPF32[$1_1 + 4 >> 2];
     $9 = HEAPF32[$2_1 + 4 >> 2];
     HEAPF32[$5_1 + 12 >> 2] = $7_1 - $9;
     $6_1 = Math_fround($8 + $6_1);
     HEAPF32[$5_1 + 8 >> 2] = $6_1;
     HEAPF32[$5_1 + 4 >> 2] = $7_1 + $9;
     HEAPF32[$5_1 >> 2] = $6_1;
     $406($0_1, $5_1 + 8 | 0, $5_1, $1_1, $4_1);
     break label$1;
    case 1:
     $6_1 = HEAPF32[$2_1 >> 2];
     $8 = HEAPF32[$1_1 >> 2];
     $7_1 = HEAPF32[$1_1 + 4 >> 2];
     $9 = HEAPF32[$2_1 + 4 >> 2];
     HEAPF32[$5_1 + 12 >> 2] = $7_1 + $9;
     $6_1 = Math_fround($8 - $6_1);
     HEAPF32[$5_1 + 8 >> 2] = $6_1;
     HEAPF32[$5_1 + 4 >> 2] = $7_1 - $9;
     HEAPF32[$5_1 >> 2] = $6_1;
     $406($0_1, $5_1 + 8 | 0, $5_1, $1_1, $4_1);
     break label$1;
    case 2:
     $6_1 = HEAPF32[$2_1 >> 2];
     $8 = HEAPF32[$1_1 >> 2];
     $7_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$2_1 + 4 >> 2]);
     HEAPF32[$5_1 + 12 >> 2] = $7_1;
     HEAPF32[$5_1 + 8 >> 2] = $8 + $6_1;
     HEAPF32[$5_1 + 4 >> 2] = $7_1;
     HEAPF32[$5_1 >> 2] = $8 - $6_1;
     $406($0_1, $5_1 + 8 | 0, $5_1, $1_1, $4_1);
     break label$1;
    case 3:
     break label$2;
    default:
     break label$1;
    };
   }
   $6_1 = HEAPF32[$2_1 >> 2];
   $8 = HEAPF32[$1_1 >> 2];
   $7_1 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - HEAPF32[$2_1 + 4 >> 2]);
   HEAPF32[$5_1 + 12 >> 2] = $7_1;
   HEAPF32[$5_1 + 8 >> 2] = $8 - $6_1;
   HEAPF32[$5_1 + 4 >> 2] = $7_1;
   HEAPF32[$5_1 >> 2] = $8 + $6_1;
   $406($0_1, $5_1 + 8 | 0, $5_1, $1_1, $4_1);
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $482($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = 0, $21_1 = Math_fround(0);
  $9 = global$0 - 16 | 0;
  global$0 = $9;
  $14 = $7_1 & 496 ? $7_1 : 240;
  label$1 : {
   if ($3 >>> 0 <= 4278190079) {
    $20_1 = $54($29(-3355444, $3));
    $7_1 = $54($29(-8355712, $3));
    $401($0_1, $1_1, $2_1, $20_1, $6_1, $14);
    $15_1 = HEAPF32[$1_1 + 4 >> 2];
    $8 = Math_fround($15_1 + HEAPF32[$5_1 + 4 >> 2]);
    $12_1 = HEAPF32[$2_1 + 4 >> 2];
    if (!($8 < $12_1)) {
     break label$1
    }
    $13 = HEAPF32[$1_1 >> 2];
    $21_1 = Math_fround($13 + HEAPF32[$5_1 >> 2]);
    $10_1 = HEAPF32[$2_1 >> 2];
    $3 = 0;
    while (1) {
     $1_1 = $3;
     $17_1 = Math_fround($8 + $4_1);
     $2_1 = $17_1 < $12_1;
     $18_1 = $2_1 ? $17_1 : $12_1;
     $19 = $8 < $15_1 ? $15_1 : $8 > $12_1 ? $12_1 : $8;
     label$4 : {
      if ($18_1 <= $19) {
       break label$4
      }
      $8 = Math_fround(Math_fround(Math_fround($1_1 & 1) * $4_1) + $21_1);
      if (!($10_1 > $8)) {
       break label$4
      }
      while (1) {
       $16_1 = $8 < $13 ? $13 : $8 > $10_1 ? $10_1 : $8;
       $11_1 = Math_fround($8 + $4_1);
       $11_1 = $10_1 > $11_1 ? $11_1 : $10_1;
       if (!($16_1 >= $11_1)) {
        $3 = 256;
        label$7 : {
         if (!($15_1 >= $19)) {
          break label$7
         }
         $3 = $13 >= $16_1 ? 272 : 256;
         if (!($10_1 <= $11_1)) {
          break label$7
         }
         $3 = $3 | 32;
        }
        label$9 : {
         if (!($12_1 <= $18_1)) {
          break label$9
         }
         $3 = $13 >= $16_1 ? $3 | 64 : $3;
         if (!($10_1 <= $11_1)) {
          break label$9
         }
         $3 = $3 | 128;
        }
        HEAPF32[$9 + 12 >> 2] = $19;
        HEAPF32[$9 + 8 >> 2] = $16_1;
        HEAPF32[$9 + 4 >> 2] = $18_1;
        HEAPF32[$9 >> 2] = $11_1;
        $401($0_1, $9 + 8 | 0, $9, $7_1, $6_1, ($14 | 0) == 256 ? 256 : ($3 | 0) == 256 ? 256 : $3 & $14);
       }
       $8 = Math_fround(Math_fround($4_1 + $4_1) + $8);
       if ($10_1 > $8) {
        continue
       }
       break;
      };
     }
     $3 = $1_1 + 1 | 0;
     $8 = $17_1;
     if ($2_1) {
      continue
     }
     break;
    };
    break label$1;
   }
   $401($0_1, $1_1, $2_1, $3, $6_1, $14);
  }
  global$0 = $9 + 16 | 0;
 }
 
 function $483($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = Math_fround(0), $37 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = 0, $41_1 = 0;
  $5_1 = global$0 - 464 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 104 >> 2] = HEAP32[$0_1 + 96 >> 2];
  $3 = HEAP32[$0_1 + 92 >> 2];
  HEAP32[$5_1 + 96 >> 2] = HEAP32[$0_1 + 88 >> 2];
  HEAP32[$5_1 + 100 >> 2] = $3;
  $7_1 = $5_1 - -64 | 0;
  HEAP32[$7_1 + 8 >> 2] = HEAP32[$0_1 + 72 >> 2];
  $3 = HEAP32[$0_1 + 68 >> 2];
  HEAP32[$5_1 + 64 >> 2] = HEAP32[$0_1 + 64 >> 2];
  HEAP32[$5_1 + 68 >> 2] = $3;
  $444($5_1 + 80 | 0, $7_1, $1_1);
  $6_1 = HEAP32[$5_1 + 88 >> 2];
  $4_1 = HEAP32[$5_1 + 84 >> 2];
  label$1 : {
   if (($6_1 | 0) <= ($4_1 | 0)) {
    break label$1
   }
   $40_1 = $0_1 + 76 | 0;
   $29_1 = $0_1 + 100 | 0;
   $30 = $0_1 + 52 | 0;
   $8 = 1;
   $7_1 = 0;
   $3 = 0;
   while (1) {
    $14 = $3;
    $26_1 = $12_1;
    $33_1 = $8;
    $15_1 = $6_1;
    $3 = $4_1;
    HEAP32[$5_1 + 84 >> 2] = $3 + 1;
    $13 = $7_1;
    $4_1 = $7_1;
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    label$19 : {
                     label$20 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         label$24 : {
                          label$25 : {
                           label$26 : {
                            label$27 : {
                             label$28 : {
                              label$29 : {
                               label$30 : {
                                label$31 : {
                                 label$32 : {
                                  label$33 : {
                                   $23_1 = HEAPU8[$3 + HEAP32[$5_1 + 80 >> 2] | 0];
                                   switch ($23_1 - 1 | 0) {
                                   case 27:
                                    break label$12;
                                   case 254:
                                    break label$13;
                                   case 11:
                                    break label$15;
                                   case 13:
                                    break label$16;
                                   case 10:
                                    break label$17;
                                   case 28:
                                    break label$18;
                                   case 9:
                                    break label$19;
                                   case 25:
                                   case 26:
                                    break label$20;
                                   case 24:
                                    break label$21;
                                   case 23:
                                    break label$22;
                                   case 7:
                                    break label$23;
                                   case 29:
                                    break label$24;
                                   case 30:
                                    break label$25;
                                   case 5:
                                    break label$26;
                                   case 6:
                                    break label$27;
                                   case 4:
                                    break label$28;
                                   case 21:
                                    break label$29;
                                   case 3:
                                    break label$30;
                                   case 20:
                                    break label$31;
                                   case 0:
                                   case 2:
                                   case 17:
                                   case 22:
                                    break label$32;
                                   case 18:
                                   case 19:
                                    break label$33;
                                   default:
                                    break label$14;
                                   };
                                  }
                                  $3 = HEAP32[$5_1 + 84 >> 2];
                                  if ($33_1) {
                                   $9 = (($9 | 0) / 2 | 0) + $26_1 | 0
                                  } else {
                                   $9 = $26_1
                                  }
                                  $3 = $3 + (($9 + 7 | 0) / 8 | 0) | 0;
                                  HEAP32[$5_1 + 84 >> 2] = ($3 | 0) < 0 ? $15_1 : ($3 | 0) > ($15_1 | 0) ? $15_1 : $3;
                                  $3 = $14;
                                  $4_1 = 0;
                                  $12_1 = $9;
                                  $8 = 0;
                                  break label$3;
                                 }
                                 $3 = $14;
                                 $4_1 = 0;
                                 $12_1 = (($9 | 0) / 2 | 0) + $26_1 | 0;
                                 break label$4;
                                }
                                if (($9 | 0) < 2) {
                                 $8 = 0;
                                 break label$1;
                                }
                                $3 = ($5_1 + 240 | 0) + ($9 << 2) | 0;
                                $487($2_1, HEAPF32[$3 - 8 >> 2], HEAPF32[$3 - 4 >> 2]);
                                $3 = $14;
                                $4_1 = 0;
                                $8 = 0;
                                break label$3;
                               }
                               if (($9 | 0) <= 0) {
                                $8 = 0;
                                break label$1;
                               }
                               $487($2_1, Math_fround(0.0), HEAPF32[($5_1 + ($9 << 2) | 0) + 236 >> 2]);
                               $3 = $14;
                               $4_1 = 0;
                               $8 = 0;
                               break label$3;
                              }
                              if (($9 | 0) <= 0) {
                               $8 = 0;
                               break label$1;
                              }
                              $487($2_1, HEAPF32[($5_1 + ($9 << 2) | 0) + 236 >> 2], Math_fround(0.0));
                              $3 = $14;
                              $4_1 = 0;
                              $8 = 0;
                              break label$3;
                             }
                             $6_1 = 1;
                             $4_1 = 0;
                             $8 = 0;
                             if (($9 | 0) < 2) {
                              break label$1
                             }
                             while (1) {
                              $3 = $5_1 + 240 | 0;
                              $10_1 = HEAPF32[$3 + ($6_1 << 2) >> 2];
                              $7_1 = $3;
                              $3 = $4_1;
                              $11_1 = Math_fround(HEAPF32[$7_1 + ($3 << 2) >> 2] + HEAPF32[$2_1 + 16 >> 2]);
                              HEAPF32[$2_1 + 16 >> 2] = $11_1;
                              $10_1 = Math_fround($10_1 + HEAPF32[$2_1 + 20 >> 2]);
                              HEAPF32[$2_1 + 20 >> 2] = $10_1;
                              if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
                               $6_1 = ~~$10_1
                              } else {
                               $6_1 = -2147483648
                              }
                              if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
                               $4_1 = ~~$11_1
                              } else {
                               $4_1 = -2147483648
                              }
                              label$44 : {
                               if (HEAP32[$2_1 >> 2]) {
                                if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) <= HEAP32[$2_1 + 28 >> 2] : 0)) {
                                 HEAP32[$2_1 + 28 >> 2] = $4_1
                                }
                                if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) <= HEAP32[$2_1 + 36 >> 2] : 0)) {
                                 HEAP32[$2_1 + 36 >> 2] = $6_1
                                }
                                if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) >= HEAP32[$2_1 + 24 >> 2] : 0)) {
                                 HEAP32[$2_1 + 24 >> 2] = $4_1
                                }
                                if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) >= HEAP32[$2_1 + 32 >> 2] : 0)) {
                                 HEAP32[$2_1 + 32 >> 2] = $6_1
                                }
                                HEAP32[$2_1 + 4 >> 2] = 1;
                                break label$44;
                               }
                               $7_1 = HEAP32[$2_1 + 40 >> 2] + Math_imul(HEAP32[$2_1 + 44 >> 2], 14) | 0;
                               HEAP16[$7_1 + 4 >> 1] = 0;
                               HEAP16[$7_1 + 6 >> 1] = 0;
                               HEAP16[$7_1 + 8 >> 1] = 0;
                               HEAP16[$7_1 + 10 >> 1] = 0;
                               HEAP16[$7_1 + 2 >> 1] = $6_1;
                               HEAP16[$7_1 >> 1] = $4_1;
                               HEAP8[$7_1 + 12 | 0] = 2;
                              }
                              HEAP32[$2_1 + 44 >> 2] = HEAP32[$2_1 + 44 >> 2] + 1;
                              $4_1 = $3 + 2 | 0;
                              $6_1 = $4_1 | 1;
                              if (($6_1 | 0) < ($9 | 0)) {
                               continue
                              }
                              break;
                             };
                             $3 = $14;
                             $7_1 = $13;
                             $4_1 = 0;
                             break label$5;
                            }
                            $31_1 = $9;
                            $27_1 = 0;
                            $8 = 0;
                            if (($9 | 0) > 0) {
                             break label$10
                            }
                            break label$1;
                           }
                           $32_1 = $9;
                           $28_1 = 0;
                           $8 = 0;
                           if (($9 | 0) <= 0) {
                            break label$1
                           }
                           $9 = 0;
                           break label$7;
                          }
                          $34_1 = 0;
                          $8 = 0;
                          if (($9 | 0) >= 4) {
                           break label$9
                          }
                          break label$1;
                         }
                         $35_1 = 0;
                         $8 = 0;
                         if (($9 | 0) < 4) {
                          break label$1
                         }
                         $6_1 = 0;
                         break label$8;
                        }
                        $8 = 5;
                        $6_1 = 0;
                        if (($9 | 0) < 6) {
                         $8 = 0;
                         break label$1;
                        }
                        while (1) {
                         $7_1 = $5_1 + 240 | 0;
                         $4_1 = $6_1 << 2;
                         $3 = $7_1 + $4_1 | 0;
                         $488($2_1, HEAPF32[$3 >> 2], HEAPF32[($4_1 | 4) + $7_1 >> 2], HEAPF32[$3 + 8 >> 2], HEAPF32[$3 + 12 >> 2], HEAPF32[$3 + 16 >> 2], HEAPF32[($8 << 2) + $7_1 >> 2]);
                         $3 = $6_1 + 11 | 0;
                         $8 = $3;
                         $6_1 = $6_1 + 6 | 0;
                         if (($3 | 0) < ($9 | 0)) {
                          continue
                         }
                         break;
                        };
                        $3 = $14;
                        $7_1 = $13;
                        $4_1 = 0;
                        break label$5;
                       }
                       if (($9 | 0) < 8) {
                        $8 = 0;
                        break label$1;
                       }
                       $4_1 = $9 - 2 | 0;
                       $8 = 5;
                       $6_1 = 0;
                       while (1) {
                        $12_1 = $5_1 + 240 | 0;
                        $7_1 = $6_1 << 2;
                        $3 = $12_1 + $7_1 | 0;
                        $488($2_1, HEAPF32[$3 >> 2], HEAPF32[($7_1 | 4) + $12_1 >> 2], HEAPF32[$3 + 8 >> 2], HEAPF32[$3 + 12 >> 2], HEAPF32[$3 + 16 >> 2], HEAPF32[($8 << 2) + $12_1 >> 2]);
                        $7_1 = $6_1 + 11 | 0;
                        $8 = $7_1;
                        $3 = $6_1 + 6 | 0;
                        $6_1 = $3;
                        if (($4_1 | 0) > ($7_1 | 0)) {
                         continue
                        }
                        break;
                       };
                       $4_1 = $3 | 1;
                       if (($9 | 0) <= ($4_1 | 0)) {
                        $8 = 0;
                        break label$1;
                       }
                       $7_1 = $5_1 + 240 | 0;
                       $10_1 = HEAPF32[$7_1 + ($4_1 << 2) >> 2];
                       $11_1 = Math_fround(HEAPF32[($3 << 2) + $7_1 >> 2] + HEAPF32[$2_1 + 16 >> 2]);
                       HEAPF32[$2_1 + 16 >> 2] = $11_1;
                       $10_1 = Math_fround($10_1 + HEAPF32[$2_1 + 20 >> 2]);
                       HEAPF32[$2_1 + 20 >> 2] = $10_1;
                       if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
                        $9 = ~~$10_1
                       } else {
                        $9 = -2147483648
                       }
                       if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
                        $6_1 = ~~$11_1
                       } else {
                        $6_1 = -2147483648
                       }
                       label$63 : {
                        if (HEAP32[$2_1 >> 2]) {
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) <= HEAP32[$2_1 + 28 >> 2] : 0)) {
                          HEAP32[$2_1 + 28 >> 2] = $6_1
                         }
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($9 | 0) <= HEAP32[$2_1 + 36 >> 2] : 0)) {
                          HEAP32[$2_1 + 36 >> 2] = $9
                         }
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) >= HEAP32[$2_1 + 24 >> 2] : 0)) {
                          HEAP32[$2_1 + 24 >> 2] = $6_1
                         }
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($9 | 0) >= HEAP32[$2_1 + 32 >> 2] : 0)) {
                          HEAP32[$2_1 + 32 >> 2] = $9
                         }
                         HEAP32[$2_1 + 4 >> 2] = 1;
                         break label$63;
                        }
                        $3 = HEAP32[$2_1 + 40 >> 2] + Math_imul(HEAP32[$2_1 + 44 >> 2], 14) | 0;
                        HEAP16[$3 + 4 >> 1] = 0;
                        HEAP16[$3 + 6 >> 1] = 0;
                        HEAP16[$3 + 8 >> 1] = 0;
                        HEAP16[$3 + 10 >> 1] = 0;
                        HEAP16[$3 + 2 >> 1] = $9;
                        HEAP16[$3 >> 1] = $6_1;
                        HEAP8[$3 + 12 | 0] = 2;
                       }
                       HEAP32[$2_1 + 44 >> 2] = HEAP32[$2_1 + 44 >> 2] + 1;
                       $3 = $14;
                       $7_1 = $13;
                       $4_1 = 0;
                       break label$5;
                      }
                      if (($9 | 0) < 8) {
                       $8 = 0;
                       break label$1;
                      }
                      $12_1 = $9 - 6 | 0;
                      $6_1 = 1;
                      $4_1 = 0;
                      while (1) {
                       $3 = $5_1 + 240 | 0;
                       $10_1 = HEAPF32[$3 + ($6_1 << 2) >> 2];
                       $7_1 = $3;
                       $3 = $4_1;
                       $8 = $3 << 2;
                       $11_1 = Math_fround(HEAPF32[$7_1 + $8 >> 2] + HEAPF32[$2_1 + 16 >> 2]);
                       HEAPF32[$2_1 + 16 >> 2] = $11_1;
                       $10_1 = Math_fround($10_1 + HEAPF32[$2_1 + 20 >> 2]);
                       HEAPF32[$2_1 + 20 >> 2] = $10_1;
                       if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
                        $6_1 = ~~$10_1
                       } else {
                        $6_1 = -2147483648
                       }
                       if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
                        $4_1 = ~~$11_1
                       } else {
                        $4_1 = -2147483648
                       }
                       label$79 : {
                        if (HEAP32[$2_1 >> 2]) {
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) <= HEAP32[$2_1 + 28 >> 2] : 0)) {
                          HEAP32[$2_1 + 28 >> 2] = $4_1
                         }
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) <= HEAP32[$2_1 + 36 >> 2] : 0)) {
                          HEAP32[$2_1 + 36 >> 2] = $6_1
                         }
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) >= HEAP32[$2_1 + 24 >> 2] : 0)) {
                          HEAP32[$2_1 + 24 >> 2] = $4_1
                         }
                         if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) >= HEAP32[$2_1 + 32 >> 2] : 0)) {
                          HEAP32[$2_1 + 32 >> 2] = $6_1
                         }
                         HEAP32[$2_1 + 4 >> 2] = 1;
                         break label$79;
                        }
                        $7_1 = HEAP32[$2_1 + 40 >> 2] + Math_imul(HEAP32[$2_1 + 44 >> 2], 14) | 0;
                        HEAP16[$7_1 + 4 >> 1] = 0;
                        HEAP16[$7_1 + 6 >> 1] = 0;
                        HEAP16[$7_1 + 8 >> 1] = 0;
                        HEAP16[$7_1 + 10 >> 1] = 0;
                        HEAP16[$7_1 + 2 >> 1] = $6_1;
                        HEAP16[$7_1 >> 1] = $4_1;
                        HEAP8[$7_1 + 12 | 0] = 2;
                       }
                       HEAP32[$2_1 + 44 >> 2] = HEAP32[$2_1 + 44 >> 2] + 1;
                       $4_1 = $3 + 2 | 0;
                       $7_1 = $4_1 | 1;
                       $6_1 = $7_1;
                       if (($12_1 | 0) > ($6_1 | 0)) {
                        continue
                       }
                       break;
                      };
                      $6_1 = $3 + 7 | 0;
                      if (($9 | 0) <= ($6_1 | 0)) {
                       $8 = 0;
                       break label$1;
                      }
                      $12_1 = $5_1 + 240 | 0;
                      $3 = $8 + $12_1 | 0;
                      $488($2_1, HEAPF32[$12_1 + ($4_1 << 2) >> 2], HEAPF32[($7_1 << 2) + $12_1 >> 2], HEAPF32[$3 + 16 >> 2], HEAPF32[$3 + 20 >> 2], HEAPF32[$3 + 24 >> 2], HEAPF32[($6_1 << 2) + $12_1 >> 2]);
                      $3 = $14;
                      $7_1 = $13;
                      $4_1 = 0;
                      break label$5;
                     }
                     if (($9 | 0) < 4) {
                      $8 = 0;
                      break label$1;
                     }
                     $6_1 = $9 & 1;
                     $4_1 = $6_1 + 3 | 0;
                     if (($4_1 | 0) >= ($9 | 0)) {
                      break label$6
                     }
                     $11_1 = $6_1 ? HEAPF32[$5_1 + 240 >> 2] : Math_fround(0.0);
                     while (1) {
                      $3 = $5_1 + 240 | 0;
                      $10_1 = HEAPF32[$3 + ($4_1 << 2) >> 2];
                      $3 = ($6_1 << 2) + $3 | 0;
                      $18_1 = HEAPF32[$3 >> 2];
                      $17_1 = HEAPF32[$3 + 8 >> 2];
                      $19 = HEAPF32[$3 + 4 >> 2];
                      label$92 : {
                       if (($23_1 | 0) == 27) {
                        $488($2_1, $18_1, $11_1, $19, $17_1, $10_1, Math_fround(0.0));
                        break label$92;
                       }
                       $488($2_1, $11_1, $18_1, $19, $17_1, Math_fround(0.0), $10_1);
                      }
                      $4_1 = $6_1 + 7 | 0;
                      $11_1 = Math_fround(0.0);
                      $6_1 = $6_1 + 4 | 0;
                      if (($4_1 | 0) < ($9 | 0)) {
                       continue
                      }
                      break;
                     };
                     break label$6;
                    }
                    label$94 : {
                     if ($13) {
                      break label$94
                     }
                     $16_1 = HEAP32[$0_1 + 120 >> 2];
                     if (!$16_1) {
                      break label$94
                     }
                     $3 = $16_1 & $16_1 >> 31;
                     $21_1 = HEAP32[$0_1 + 112 >> 2];
                     label$95 : {
                      if (($16_1 | 0) <= 0) {
                       $8 = 0;
                       break label$95;
                      }
                      $8 = HEAPU8[$3 + $21_1 | 0];
                      $3 = $3 + 1 | 0;
                     }
                     $4_1 = $3;
                     $3 = $4_1;
                     $13 = $3;
                     $12_1 = 0;
                     $15_1 = 0;
                     $6_1 = -1;
                     label$97 : {
                      label$98 : {
                       switch ($8 & 255) {
                       case 0:
                        $6_1 = 0;
                        $3 = $1_1 + $4_1 | 0;
                        $3 = ($3 | 0) < 0 ? $16_1 : ($3 | 0) > ($16_1 | 0) ? $16_1 : $3;
                        if (($3 | 0) >= ($16_1 | 0)) {
                         break label$97
                        }
                        $6_1 = HEAPU8[$3 + $21_1 | 0];
                        break label$97;
                       case 3:
                        break label$98;
                       default:
                        break label$97;
                       };
                      }
                      while (1) {
                       $7_1 = $3;
                       $4_1 = $15_1 << 8;
                       $3 = $13;
                       label$101 : {
                        if (($16_1 | 0) <= ($3 | 0)) {
                         $15_1 = 0;
                         break label$101;
                        }
                        $15_1 = HEAPU8[$3 + $21_1 | 0];
                        $7_1 = $3 + 1 | 0;
                        $3 = $7_1;
                       }
                       $13 = $3;
                       $22_1 = $4_1 | $15_1 & 255;
                       $15_1 = $22_1;
                       $6_1 = $7_1;
                       $3 = $6_1;
                       $4_1 = $3;
                       $8 = 0;
                       $7_1 = 0;
                       $12_1 = $12_1 + 1 | 0;
                       if (($12_1 | 0) != 2) {
                        continue
                       }
                       break;
                      };
                      while (1) {
                       $7_1 = $7_1 << 8;
                       label$104 : {
                        if (($6_1 | 0) >= ($16_1 | 0)) {
                         $13 = 0;
                         $3 = $6_1;
                         break label$104;
                        }
                        $13 = HEAPU8[$6_1 + $21_1 | 0];
                        $4_1 = $6_1 + 1 | 0;
                        $3 = $4_1;
                       }
                       $12_1 = $4_1;
                       $6_1 = $3;
                       $3 = $7_1 | $13 & 255;
                       $7_1 = $3;
                       $8 = $8 + 1 | 0;
                       if (($8 | 0) != 2) {
                        continue
                       }
                       break;
                      };
                      $6_1 = 0;
                      $4_1 = $3;
                      $8 = $12_1;
                      if (($22_1 | 0) <= 0) {
                       $6_1 = -1;
                       break label$97;
                      }
                      label$107 : {
                       while (1) {
                        $12_1 = $4_1;
                        $15_1 = $6_1;
                        label$109 : {
                         if (($8 | 0) >= ($16_1 | 0)) {
                          $6_1 = 0;
                          $4_1 = $8;
                          break label$109;
                         }
                         $6_1 = HEAPU8[$8 + $21_1 | 0];
                         $4_1 = $8 + 1 | 0;
                        }
                        $24 = $6_1;
                        $6_1 = $4_1;
                        $8 = 0;
                        $7_1 = 0;
                        while (1) {
                         $41_1 = $7_1 << 8;
                         $7_1 = $4_1;
                         label$112 : {
                          if (($16_1 | 0) <= ($4_1 | 0)) {
                           $4_1 = $6_1;
                           $13 = 0;
                           $3 = $7_1;
                           break label$112;
                          }
                          $13 = HEAPU8[$7_1 + $21_1 | 0];
                          $4_1 = $7_1 + 1 | 0;
                          $3 = $4_1;
                         }
                         $6_1 = $4_1;
                         $4_1 = $3;
                         $3 = $41_1 | $13 & 255;
                         $7_1 = $3;
                         $8 = $8 + 1 | 0;
                         if (($8 | 0) != 2) {
                          continue
                         }
                         break;
                        };
                        if (($1_1 | 0) < ($3 | 0) & ($1_1 | 0) >= ($12_1 | 0)) {
                         break label$107
                        }
                        $4_1 = $3;
                        $8 = $6_1;
                        $6_1 = $15_1 + 1 | 0;
                        if (($22_1 | 0) != ($6_1 | 0)) {
                         continue
                        }
                        break;
                       };
                       $6_1 = -1;
                       break label$97;
                      }
                      $6_1 = $24 & 255;
                     }
                     $3 = $5_1 + 456 | 0;
                     HEAP32[$3 >> 2] = HEAP32[$30 + 8 >> 2];
                     $4_1 = HEAP32[$30 + 4 >> 2];
                     HEAP32[$5_1 + 448 >> 2] = HEAP32[$30 >> 2];
                     HEAP32[$5_1 + 452 >> 2] = $4_1;
                     $7_1 = $5_1 + 48 | 0;
                     HEAP32[$7_1 + 8 >> 2] = HEAP32[$29_1 + 8 >> 2];
                     $4_1 = HEAP32[$29_1 + 4 >> 2];
                     HEAP32[$5_1 + 48 >> 2] = HEAP32[$29_1 >> 2];
                     HEAP32[$5_1 + 52 >> 2] = $4_1;
                     $4_1 = $5_1 + 436 | 0;
                     $444($4_1, $7_1, $6_1);
                     $13 = $5_1 + 32 | 0;
                     HEAP32[$13 + 8 >> 2] = HEAP32[$3 >> 2];
                     $7_1 = $5_1 + 16 | 0;
                     HEAP32[$7_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2];
                     $3 = HEAP32[$5_1 + 452 >> 2];
                     HEAP32[$5_1 + 32 >> 2] = HEAP32[$5_1 + 448 >> 2];
                     HEAP32[$5_1 + 36 >> 2] = $3;
                     $3 = HEAP32[$5_1 + 440 >> 2];
                     HEAP32[$5_1 + 16 >> 2] = HEAP32[$5_1 + 436 >> 2];
                     HEAP32[$5_1 + 20 >> 2] = $3;
                     $446($5_1 + 96 | 0, $13, $7_1);
                    }
                    $4_1 = 1;
                   }
                   $13 = $4_1;
                   if (($9 | 0) <= 0) {
                    $8 = 0;
                    break label$1;
                   }
                   $8 = 0;
                   if (($14 | 0) > 9) {
                    break label$1
                   }
                   $15_1 = $9 - 1 | 0;
                   $11_1 = HEAPF32[($5_1 + 240 | 0) + ($15_1 << 2) >> 2];
                   $3 = ($5_1 + 112 | 0) + Math_imul($14, 12) | 0;
                   $21_1 = $5_1 + 88 | 0;
                   HEAP32[$3 + 8 >> 2] = HEAP32[$21_1 >> 2];
                   $4_1 = HEAP32[$5_1 + 84 >> 2];
                   HEAP32[$3 >> 2] = HEAP32[$5_1 + 80 >> 2];
                   HEAP32[$3 + 4 >> 2] = $4_1;
                   $22_1 = $5_1 + 456 | 0;
                   $3 = ($23_1 | 0) == 10 ? $5_1 + 96 | 0 : $40_1;
                   $16_1 = HEAP32[$3 + 8 >> 2];
                   HEAP32[$22_1 >> 2] = $16_1;
                   $4_1 = HEAP32[$3 + 4 >> 2];
                   $3 = HEAP32[$3 >> 2];
                   HEAP32[$5_1 + 448 >> 2] = $3;
                   HEAP32[$5_1 + 452 >> 2] = $4_1;
                   $6_1 = $16_1 & $16_1 >> 31;
                   HEAP32[$5_1 + 452 >> 2] = $6_1;
                   $24 = $3;
                   $9 = $6_1;
                   $4_1 = 0;
                   while (1) {
                    $8 = $8 << 8;
                    $3 = $6_1;
                    label$117 : {
                     if (($3 | 0) >= ($16_1 | 0)) {
                      $6_1 = $9;
                      $12_1 = $3;
                      $7_1 = 0;
                      break label$117;
                     }
                     $6_1 = $3 + 1 | 0;
                     $12_1 = $6_1;
                     $7_1 = HEAPU8[$3 + $24 | 0];
                    }
                    $3 = $6_1;
                    $9 = $3;
                    $6_1 = $12_1;
                    $7_1 = $8 | $7_1 & 255;
                    $8 = $7_1;
                    $4_1 = $4_1 + 1 | 0;
                    if (($4_1 | 0) != 2) {
                     continue
                    }
                    break;
                   };
                   HEAP32[$5_1 + 452 >> 2] = $3;
                   $3 = ($7_1 | 0) > 33899 ? 32768 : ($7_1 | 0) > 1239 ? 1131 : 107;
                   if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
                    $4_1 = ~~$11_1
                   } else {
                    $4_1 = -2147483648
                   }
                   $3 = $4_1 + $3 | 0;
                   label$121 : {
                    if (!(($3 | 0) >= 0 & ($3 | 0) < ($7_1 | 0))) {
                     HEAP32[$5_1 + 444 >> 2] = 0;
                     HEAP32[$5_1 + 436 >> 2] = 0;
                     HEAP32[$5_1 + 440 >> 2] = 0;
                     break label$121;
                    }
                    HEAP32[$5_1 + 8 >> 2] = HEAP32[$22_1 >> 2];
                    $4_1 = HEAP32[$5_1 + 452 >> 2];
                    HEAP32[$5_1 >> 2] = HEAP32[$5_1 + 448 >> 2];
                    HEAP32[$5_1 + 4 >> 2] = $4_1;
                    $444($5_1 + 436 | 0, $5_1, $3);
                   }
                   $3 = HEAP32[$5_1 + 444 >> 2];
                   HEAP32[$21_1 >> 2] = $3;
                   $4_1 = HEAP32[$5_1 + 440 >> 2];
                   HEAP32[$5_1 + 80 >> 2] = HEAP32[$5_1 + 436 >> 2];
                   HEAP32[$5_1 + 84 >> 2] = $4_1;
                   if (!$3) {
                    $8 = 0;
                    break label$1;
                   }
                   HEAP32[$5_1 + 84 >> 2] = 0;
                   $3 = $14 + 1 | 0;
                   $7_1 = $13;
                   $4_1 = $15_1;
                   break label$5;
                  }
                  if (($14 | 0) <= 0) {
                   $8 = 0;
                   break label$1;
                  }
                  $3 = $14 - 1 | 0;
                  $4_1 = ($5_1 + 112 | 0) + Math_imul($3, 12) | 0;
                  HEAP32[$5_1 + 88 >> 2] = HEAP32[$4_1 + 8 >> 2];
                  $7_1 = HEAP32[$4_1 + 4 >> 2];
                  HEAP32[$5_1 + 80 >> 2] = HEAP32[$4_1 >> 2];
                  HEAP32[$5_1 + 84 >> 2] = $7_1;
                  $7_1 = $13;
                  $4_1 = $9;
                  break label$5;
                 }
                 $489($2_1);
                 $8 = 1;
                 break label$1;
                }
                $6_1 = 0;
                $8 = 0;
                label$127 : {
                 label$128 : {
                  label$129 : {
                   label$130 : {
                    $3 = HEAP32[$5_1 + 84 >> 2];
                    if (($15_1 | 0) > ($3 | 0)) {
                     HEAP32[$5_1 + 84 >> 2] = $3 + 1;
                     $6_1 = HEAPU8[$3 + HEAP32[$5_1 + 80 >> 2] | 0];
                    }
                    switch (($6_1 & 255) - 34 | 0) {
                    case 3:
                     break label$127;
                    case 2:
                     break label$128;
                    case 1:
                     break label$129;
                    case 0:
                     break label$130;
                    default:
                     break label$1;
                    };
                   }
                   if (($9 | 0) < 7) {
                    break label$1
                   }
                   $11_1 = HEAPF32[$5_1 + 264 >> 2];
                   $10_1 = HEAPF32[$5_1 + 260 >> 2];
                   $18_1 = HEAPF32[$5_1 + 256 >> 2];
                   $17_1 = HEAPF32[$5_1 + 248 >> 2];
                   $488($2_1, HEAPF32[$5_1 + 240 >> 2], Math_fround(0.0), HEAPF32[$5_1 + 244 >> 2], $17_1, HEAPF32[$5_1 + 252 >> 2], Math_fround(0.0));
                   $488($2_1, $18_1, Math_fround(0.0), $10_1, Math_fround(-$17_1), $11_1, Math_fround(0.0));
                   $3 = $14;
                   $4_1 = 0;
                   break label$5;
                  }
                  if (($9 | 0) < 13) {
                   break label$1
                  }
                  $11_1 = HEAPF32[$5_1 + 284 >> 2];
                  $10_1 = HEAPF32[$5_1 + 280 >> 2];
                  $18_1 = HEAPF32[$5_1 + 276 >> 2];
                  $17_1 = HEAPF32[$5_1 + 272 >> 2];
                  $19 = HEAPF32[$5_1 + 268 >> 2];
                  $20_1 = HEAPF32[$5_1 + 264 >> 2];
                  $488($2_1, HEAPF32[$5_1 + 240 >> 2], HEAPF32[$5_1 + 244 >> 2], HEAPF32[$5_1 + 248 >> 2], HEAPF32[$5_1 + 252 >> 2], HEAPF32[$5_1 + 256 >> 2], HEAPF32[$5_1 + 260 >> 2]);
                  $488($2_1, $20_1, $19, $17_1, $18_1, $10_1, $11_1);
                  $3 = $14;
                  $4_1 = 0;
                  break label$5;
                 }
                 if (($9 | 0) < 9) {
                  break label$1
                 }
                 $10_1 = HEAPF32[$5_1 + 272 >> 2];
                 $18_1 = HEAPF32[$5_1 + 264 >> 2];
                 $17_1 = HEAPF32[$5_1 + 260 >> 2];
                 $11_1 = HEAPF32[$5_1 + 268 >> 2];
                 $19 = HEAPF32[$5_1 + 244 >> 2];
                 $20_1 = HEAPF32[$5_1 + 252 >> 2];
                 $488($2_1, HEAPF32[$5_1 + 240 >> 2], $19, HEAPF32[$5_1 + 248 >> 2], $20_1, HEAPF32[$5_1 + 256 >> 2], Math_fround(0.0));
                 $488($2_1, $17_1, Math_fround(0.0), $18_1, $11_1, $10_1, Math_fround(-Math_fround($11_1 + Math_fround($19 + $20_1))));
                 $3 = $14;
                 $4_1 = 0;
                 break label$5;
                }
                if (($9 | 0) < 11) {
                 break label$1
                }
                $11_1 = HEAPF32[$5_1 + 280 >> 2];
                $10_1 = HEAPF32[$5_1 + 272 >> 2];
                $18_1 = HEAPF32[$5_1 + 264 >> 2];
                $17_1 = HEAPF32[$5_1 + 276 >> 2];
                $19 = HEAPF32[$5_1 + 268 >> 2];
                $20_1 = HEAPF32[$5_1 + 240 >> 2];
                $25_1 = HEAPF32[$5_1 + 244 >> 2];
                $36_1 = HEAPF32[$5_1 + 248 >> 2];
                $37 = HEAPF32[$5_1 + 252 >> 2];
                $38_1 = HEAPF32[$5_1 + 256 >> 2];
                $39_1 = HEAPF32[$5_1 + 260 >> 2];
                $488($2_1, $20_1, $25_1, $36_1, $37, $38_1, $39_1);
                $20_1 = Math_fround($10_1 + Math_fround($18_1 + Math_fround($38_1 + Math_fround($20_1 + $36_1))));
                $25_1 = Math_fround($17_1 + Math_fround($19 + Math_fround($39_1 + Math_fround($25_1 + $37))));
                $3 = Math_fround(Math_abs($20_1)) > Math_fround(Math_abs($25_1));
                $488($2_1, $18_1, $19, $10_1, $17_1, $3 ? $11_1 : Math_fround(-$20_1), $3 ? Math_fround(-$25_1) : $11_1);
                $3 = $14;
                $4_1 = 0;
                break label$5;
               }
               if ($23_1 >>> 0 < 32) {
                $8 = 0;
                break label$1;
               }
               if (($23_1 | 0) != 255) {
                break label$12
               }
              }
              $24 = HEAP32[$5_1 + 80 >> 2];
              $6_1 = HEAP32[$5_1 + 84 >> 2];
              $4_1 = $6_1;
              $8 = 0;
              $12_1 = 0;
              while (1) {
               $12_1 = $12_1 << 8;
               $3 = $4_1;
               label$133 : {
                if (($15_1 | 0) <= ($3 | 0)) {
                 $4_1 = $6_1;
                 $7_1 = $3;
                 $3 = 0;
                 break label$133;
                }
                $4_1 = $3 + 1 | 0;
                $7_1 = $4_1;
                $3 = HEAPU8[$3 + $24 | 0];
               }
               $6_1 = $4_1;
               $4_1 = $7_1;
               $3 = $12_1 | $3 & 255;
               $12_1 = $3;
               $8 = $8 + 1 | 0;
               if (($8 | 0) != 4) {
                continue
               }
               break;
              };
              HEAP32[$5_1 + 84 >> 2] = $6_1;
              $11_1 = Math_fround(Math_fround($3 | 0) * Math_fround(.0000152587890625));
              break label$11;
             }
             $3 = HEAP32[$5_1 + 84 >> 2];
             $4_1 = $3 - 1 | 0;
             HEAP32[$5_1 + 84 >> 2] = ($3 | 0) <= 0 ? $15_1 : ($4_1 | 0) > ($15_1 | 0) ? $15_1 : $4_1;
             $11_1 = Math_fround($486($5_1 + 80 | 0) << 16 >> 16);
            }
            if (($9 | 0) > 47) {
             $8 = 0;
             break label$1;
            }
            HEAPF32[($5_1 + 240 | 0) + ($9 << 2) >> 2] = $11_1;
            $3 = $14;
            $7_1 = $13;
            $4_1 = $9 + 1 | 0;
            break label$5;
           }
           $9 = 1;
           break label$7;
          }
          $6_1 = 1;
         }
         while (1) {
          if (!$6_1) {
           $3 = $35_1;
           $4_1 = $3 + 3 | 0;
           if (($9 | 0) <= ($4_1 | 0)) {
            $3 = $14;
            $7_1 = $13;
            $4_1 = 0;
            break label$5;
           }
           $7_1 = $5_1 + 240 | 0;
           $10_1 = HEAPF32[$7_1 + ($4_1 << 2) >> 2];
           $11_1 = Math_fround(0.0);
           $4_1 = $7_1;
           $7_1 = $3 << 2;
           $4_1 = $4_1 + $7_1 | 0;
           $488($2_1, Math_fround(0.0), HEAPF32[$4_1 >> 2], HEAPF32[$4_1 + 4 >> 2], HEAPF32[$4_1 + 8 >> 2], $10_1, ($9 - $3 | 0) == 5 ? HEAPF32[($7_1 + $5_1 | 0) + 256 >> 2] : $11_1);
           $34_1 = $3 + 4 | 0;
           $6_1 = 1;
           continue;
          }
          $3 = $34_1;
          $7_1 = $3 + 3 | 0;
          if (($9 | 0) <= ($7_1 | 0)) {
           $3 = $14;
           $7_1 = $13;
           $4_1 = 0;
           break label$5;
          } else {
           $11_1 = Math_fround(0.0);
           $6_1 = $3 << 2;
           $4_1 = $6_1 + ($5_1 + 240 | 0) | 0;
           $488($2_1, HEAPF32[$4_1 >> 2], Math_fround(0.0), HEAPF32[$4_1 + 4 >> 2], HEAPF32[$4_1 + 8 >> 2], ($9 - $3 | 0) == 5 ? HEAPF32[($6_1 + $5_1 | 0) + 256 >> 2] : $11_1, HEAPF32[($5_1 + 240 | 0) + ($7_1 << 2) >> 2]);
           $35_1 = $3 + 4 | 0;
           $6_1 = 0;
           continue;
          }
         };
        }
        while (1) {
         if (!$9) {
          if (($28_1 | 0) >= ($32_1 | 0)) {
           $3 = $14;
           $7_1 = $13;
           $4_1 = 0;
           break label$5;
          }
          $10_1 = HEAPF32[($5_1 + 240 | 0) + ($28_1 << 2) >> 2];
          $11_1 = Math_fround(HEAPF32[$2_1 + 20 >> 2] + Math_fround(0.0));
          HEAPF32[$2_1 + 20 >> 2] = $11_1;
          $10_1 = Math_fround($10_1 + HEAPF32[$2_1 + 16 >> 2]);
          HEAPF32[$2_1 + 16 >> 2] = $10_1;
          if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
           $6_1 = ~~$11_1
          } else {
           $6_1 = -2147483648
          }
          if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
           $4_1 = ~~$10_1
          } else {
           $4_1 = -2147483648
          }
          label$151 : {
           if (HEAP32[$2_1 >> 2]) {
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) <= HEAP32[$2_1 + 28 >> 2] : 0)) {
             HEAP32[$2_1 + 28 >> 2] = $4_1
            }
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) <= HEAP32[$2_1 + 36 >> 2] : 0)) {
             HEAP32[$2_1 + 36 >> 2] = $6_1
            }
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) >= HEAP32[$2_1 + 24 >> 2] : 0)) {
             HEAP32[$2_1 + 24 >> 2] = $4_1
            }
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) >= HEAP32[$2_1 + 32 >> 2] : 0)) {
             HEAP32[$2_1 + 32 >> 2] = $6_1
            }
            HEAP32[$2_1 + 4 >> 2] = 1;
            break label$151;
           }
           $3 = HEAP32[$2_1 + 40 >> 2] + Math_imul(HEAP32[$2_1 + 44 >> 2], 14) | 0;
           HEAP16[$3 + 4 >> 1] = 0;
           HEAP16[$3 + 6 >> 1] = 0;
           HEAP16[$3 + 8 >> 1] = 0;
           HEAP16[$3 + 10 >> 1] = 0;
           HEAP16[$3 + 2 >> 1] = $6_1;
           HEAP16[$3 >> 1] = $4_1;
           HEAP8[$3 + 12 | 0] = 2;
          }
          HEAP32[$2_1 + 44 >> 2] = HEAP32[$2_1 + 44 >> 2] + 1;
          $31_1 = $32_1;
          $27_1 = $28_1 + 1 | 0;
          $9 = 1;
          continue;
         }
         if (($27_1 | 0) >= ($31_1 | 0)) {
          $3 = $14;
          $7_1 = $13;
          $4_1 = 0;
          break label$5;
         } else {
          $10_1 = HEAPF32[($5_1 + 240 | 0) + ($27_1 << 2) >> 2];
          $11_1 = Math_fround(HEAPF32[$2_1 + 16 >> 2] + Math_fround(0.0));
          HEAPF32[$2_1 + 16 >> 2] = $11_1;
          $10_1 = Math_fround($10_1 + HEAPF32[$2_1 + 20 >> 2]);
          HEAPF32[$2_1 + 20 >> 2] = $10_1;
          if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
           $6_1 = ~~$11_1
          } else {
           $6_1 = -2147483648
          }
          if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
           $4_1 = ~~$10_1
          } else {
           $4_1 = -2147483648
          }
          label$166 : {
           if (HEAP32[$2_1 >> 2]) {
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) <= HEAP32[$2_1 + 28 >> 2] : 0)) {
             HEAP32[$2_1 + 28 >> 2] = $6_1
            }
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) <= HEAP32[$2_1 + 36 >> 2] : 0)) {
             HEAP32[$2_1 + 36 >> 2] = $4_1
            }
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($6_1 | 0) >= HEAP32[$2_1 + 24 >> 2] : 0)) {
             HEAP32[$2_1 + 24 >> 2] = $6_1
            }
            if (!(HEAP32[$2_1 + 4 >> 2] ? ($4_1 | 0) >= HEAP32[$2_1 + 32 >> 2] : 0)) {
             HEAP32[$2_1 + 32 >> 2] = $4_1
            }
            HEAP32[$2_1 + 4 >> 2] = 1;
            break label$166;
           }
           $3 = HEAP32[$2_1 + 40 >> 2] + Math_imul(HEAP32[$2_1 + 44 >> 2], 14) | 0;
           HEAP16[$3 + 4 >> 1] = 0;
           HEAP16[$3 + 6 >> 1] = 0;
           HEAP16[$3 + 8 >> 1] = 0;
           HEAP16[$3 + 10 >> 1] = 0;
           HEAP16[$3 + 2 >> 1] = $4_1;
           HEAP16[$3 >> 1] = $6_1;
           HEAP8[$3 + 12 | 0] = 2;
          }
          HEAP32[$2_1 + 44 >> 2] = HEAP32[$2_1 + 44 >> 2] + 1;
          $32_1 = $31_1;
          $28_1 = $27_1 + 1 | 0;
          $9 = 0;
          continue;
         }
        };
       }
       $3 = $14;
       $7_1 = $13;
       $4_1 = 0;
      }
      $12_1 = $26_1;
     }
     $8 = $33_1;
    }
    $9 = $4_1;
    $6_1 = HEAP32[$5_1 + 88 >> 2];
    $4_1 = HEAP32[$5_1 + 84 >> 2];
    if (($6_1 | 0) > ($4_1 | 0)) {
     continue
    }
    break;
   };
   $8 = 0;
  }
  global$0 = $5_1 + 464 | 0;
  return $8;
 }
 
 function $484($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  if (($1_1 | 0) >= HEAP32[$0_1 + 12 >> 2]) {
   return -1
  }
  $2_1 = -1;
  $3 = HEAP32[$0_1 + 48 >> 2];
  if (($3 | 0) <= 1) {
   $2_1 = HEAP32[$0_1 + 4 >> 2] + HEAP32[$0_1 + 16 >> 2] | 0;
   $4_1 = HEAP32[$0_1 + 24 >> 2];
   label$3 : {
    if (!$3) {
     $0_1 = $2_1 + ($1_1 << 1) | 0;
     $1_1 = HEAPU8[$0_1 + 3 | 0] << 1 | HEAPU8[$0_1 + 2 | 0] << 9;
     $0_1 = HEAPU8[$0_1 + 1 | 0] << 1 | HEAPU8[$0_1 | 0] << 9;
     break label$3;
    }
    $0_1 = $2_1 + ($1_1 << 2) | 0;
    $1_1 = HEAPU8[$0_1 + 4 | 0] | HEAPU8[$0_1 + 5 | 0] << 8 | (HEAPU8[$0_1 + 6 | 0] << 16 | HEAPU8[$0_1 + 7 | 0] << 24);
    $1_1 = $1_1 << 24 | ($1_1 & 65280) << 8 | ($1_1 >>> 8 & 65280 | $1_1 >>> 24);
    $0_1 = HEAPU8[$0_1 | 0] | HEAPU8[$0_1 + 1 | 0] << 8 | (HEAPU8[$0_1 + 2 | 0] << 16 | HEAPU8[$0_1 + 3 | 0] << 24);
    $0_1 = $0_1 << 24 | ($0_1 & 65280) << 8 | ($0_1 >>> 8 & 65280 | $0_1 >>> 24);
   }
   $2_1 = ($0_1 | 0) == ($1_1 | 0) ? -1 : $4_1 + $0_1 | 0;
  }
  return $2_1;
 }
 
 function $486($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$0_1 + 8 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if (($4_1 | 0) > ($2_1 | 0)) {
   HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
   $1_1 = HEAPU8[$2_1 + HEAP32[$0_1 >> 2] | 0];
  }
  $3 = $1_1 & 255;
  $2_1 = $1_1;
  if (($1_1 - 32 & 255) >>> 0 <= 214) {
   return $3 - 139 | 0
  }
  if (($2_1 + 9 & 255) >>> 0 <= 3) {
   $3 = $3 << 8;
   $1_1 = 0;
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   if (($4_1 | 0) > ($2_1 | 0)) {
    HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
    $1_1 = HEAPU8[$2_1 + HEAP32[$0_1 >> 2] | 0];
   }
   return ($1_1 + $3 | 0) - 63124 | 0;
  }
  if (($2_1 + 5 & 255) >>> 0 <= 3) {
   $2_1 = 0;
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   if (($4_1 | 0) > ($1_1 | 0)) {
    HEAP32[$0_1 + 4 >> 2] = $1_1 + 1;
    $2_1 = HEAPU8[$1_1 + HEAP32[$0_1 >> 2] | 0];
   }
   return 64148 - ($2_1 | $3 << 8) | 0;
  }
  $1_1 = 0;
  label$7 : {
   label$8 : {
    switch (($2_1 & 255) - 28 | 0) {
    case 0:
     $2_1 = HEAP32[$0_1 + 4 >> 2];
     $3 = 0;
     while (1) {
      $1_1 = $1_1 << 8;
      $5_1 = $1_1;
      $1_1 = $2_1;
      label$11 : {
       if (($4_1 | 0) <= ($1_1 | 0)) {
        $1_1 = 0;
        break label$11;
       }
       $2_1 = $1_1 + 1 | 0;
       HEAP32[$0_1 + 4 >> 2] = $2_1;
       $1_1 = HEAPU8[$1_1 + HEAP32[$0_1 >> 2] | 0];
      }
      $1_1 = $5_1 | $1_1 & 255;
      $3 = $3 + 1 | 0;
      if (($3 | 0) != 2) {
       continue
      }
      break;
     };
     break label$7;
    case 1:
     break label$8;
    default:
     break label$7;
    };
   }
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   $3 = 0;
   while (1) {
    $1_1 = $1_1 << 8;
    $5_1 = $1_1;
    $1_1 = $2_1;
    label$14 : {
     if (($4_1 | 0) <= ($1_1 | 0)) {
      $1_1 = 0;
      break label$14;
     }
     $2_1 = $1_1 + 1 | 0;
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     $1_1 = HEAPU8[$1_1 + HEAP32[$0_1 >> 2] | 0];
    }
    $1_1 = $5_1 | $1_1 & 255;
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 4) {
     continue
    }
    break;
   };
  }
  return $1_1;
 }
 
 function $487($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $489($0_1);
  $1_1 = Math_fround(HEAPF32[$0_1 + 16 >> 2] + $1_1);
  HEAPF32[$0_1 + 8 >> 2] = $1_1;
  HEAPF32[$0_1 + 16 >> 2] = $1_1;
  $2_1 = Math_fround(HEAPF32[$0_1 + 20 >> 2] + $2_1);
  HEAPF32[$0_1 + 20 >> 2] = $2_1;
  HEAPF32[$0_1 + 12 >> 2] = $2_1;
  if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
   $4_1 = ~~$2_1
  } else {
   $4_1 = -2147483648
  }
  if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
   $5_1 = ~~$1_1
  } else {
   $5_1 = -2147483648
  }
  label$5 : {
   if (HEAP32[$0_1 >> 2]) {
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($5_1 | 0) <= HEAP32[$0_1 + 28 >> 2] : 0)) {
     HEAP32[$0_1 + 28 >> 2] = $5_1
    }
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($4_1 | 0) <= HEAP32[$0_1 + 36 >> 2] : 0)) {
     HEAP32[$0_1 + 36 >> 2] = $4_1
    }
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($5_1 | 0) >= HEAP32[$0_1 + 24 >> 2] : 0)) {
     HEAP32[$0_1 + 24 >> 2] = $5_1
    }
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($4_1 | 0) >= HEAP32[$0_1 + 32 >> 2] : 0)) {
     HEAP32[$0_1 + 32 >> 2] = $4_1
    }
    HEAP32[$0_1 + 4 >> 2] = 1;
    break label$5;
   }
   $3 = HEAP32[$0_1 + 40 >> 2] + Math_imul(HEAP32[$0_1 + 44 >> 2], 14) | 0;
   HEAP16[$3 + 4 >> 1] = 0;
   HEAP16[$3 + 6 >> 1] = 0;
   HEAP16[$3 + 8 >> 1] = 0;
   HEAP16[$3 + 10 >> 1] = 0;
   HEAP16[$3 + 2 >> 1] = $4_1;
   HEAP16[$3 >> 1] = $5_1;
   HEAP8[$3 + 12 | 0] = 1;
  }
  HEAP32[$0_1 + 44 >> 2] = HEAP32[$0_1 + 44 >> 2] + 1;
 }
 
 function $488($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $2_1 = Math_fround(HEAPF32[$0_1 + 20 >> 2] + $2_1);
  $4_1 = Math_fround($2_1 + $4_1);
  $6_1 = Math_fround($4_1 + $6_1);
  HEAPF32[$0_1 + 20 >> 2] = $6_1;
  $1_1 = Math_fround(HEAPF32[$0_1 + 16 >> 2] + $1_1);
  $3 = Math_fround($1_1 + $3);
  $5_1 = Math_fround($3 + $5_1);
  HEAPF32[$0_1 + 16 >> 2] = $5_1;
  if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
   $8 = ~~$2_1
  } else {
   $8 = -2147483648
  }
  if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
   $9 = ~~$1_1
  } else {
   $9 = -2147483648
  }
  if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
   $10_1 = ~~$4_1
  } else {
   $10_1 = -2147483648
  }
  if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
   $11_1 = ~~$3
  } else {
   $11_1 = -2147483648
  }
  if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
   $12_1 = ~~$6_1
  } else {
   $12_1 = -2147483648
  }
  if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
   $13 = ~~$5_1
  } else {
   $13 = -2147483648
  }
  label$13 : {
   if (HEAP32[$0_1 >> 2]) {
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($13 | 0) <= HEAP32[$0_1 + 28 >> 2] : 0)) {
     HEAP32[$0_1 + 28 >> 2] = $13
    }
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($12_1 | 0) <= HEAP32[$0_1 + 36 >> 2] : 0)) {
     HEAP32[$0_1 + 36 >> 2] = $12_1
    }
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($13 | 0) >= HEAP32[$0_1 + 24 >> 2] : 0)) {
     HEAP32[$0_1 + 24 >> 2] = $13
    }
    if (!(HEAP32[$0_1 + 4 >> 2] ? ($12_1 | 0) >= HEAP32[$0_1 + 32 >> 2] : 0)) {
     HEAP32[$0_1 + 32 >> 2] = $12_1
    }
    HEAP32[$0_1 + 4 >> 2] = 1;
    if (($9 | 0) > HEAP32[$0_1 + 28 >> 2]) {
     HEAP32[$0_1 + 28 >> 2] = $9
    }
    if (($8 | 0) > HEAP32[$0_1 + 36 >> 2]) {
     HEAP32[$0_1 + 36 >> 2] = $8
    }
    if (($9 | 0) < HEAP32[$0_1 + 24 >> 2]) {
     HEAP32[$0_1 + 24 >> 2] = $9
    }
    if (($8 | 0) < HEAP32[$0_1 + 32 >> 2]) {
     HEAP32[$0_1 + 32 >> 2] = $8
    }
    HEAP32[$0_1 + 4 >> 2] = 1;
    if (($11_1 | 0) > HEAP32[$0_1 + 28 >> 2]) {
     HEAP32[$0_1 + 28 >> 2] = $11_1
    }
    if (($10_1 | 0) > HEAP32[$0_1 + 36 >> 2]) {
     HEAP32[$0_1 + 36 >> 2] = $10_1
    }
    if (($11_1 | 0) < HEAP32[$0_1 + 24 >> 2]) {
     HEAP32[$0_1 + 24 >> 2] = $11_1
    }
    if (($10_1 | 0) < HEAP32[$0_1 + 32 >> 2]) {
     HEAP32[$0_1 + 32 >> 2] = $10_1
    }
    HEAP32[$0_1 + 4 >> 2] = 1;
    break label$13;
   }
   $7_1 = HEAP32[$0_1 + 40 >> 2] + Math_imul(HEAP32[$0_1 + 44 >> 2], 14) | 0;
   HEAP16[$7_1 + 10 >> 1] = $10_1;
   HEAP16[$7_1 + 8 >> 1] = $11_1;
   HEAP16[$7_1 + 6 >> 1] = $8;
   HEAP16[$7_1 + 4 >> 1] = $9;
   HEAP16[$7_1 + 2 >> 1] = $12_1;
   HEAP16[$7_1 >> 1] = $13;
   HEAP8[$7_1 + 12 | 0] = 4;
  }
  HEAP32[$0_1 + 44 >> 2] = HEAP32[$0_1 + 44 >> 2] + 1;
 }
 
 function $489($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = 0;
  $2_1 = HEAPF32[$0_1 + 8 >> 2];
  if (!($2_1 == HEAPF32[$0_1 + 16 >> 2] & HEAPF32[$0_1 + 12 >> 2] == HEAPF32[$0_1 + 20 >> 2])) {
   if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
    $3 = ~~$2_1
   } else {
    $3 = -2147483648
   }
   $2_1 = HEAPF32[$0_1 + 12 >> 2];
   label$5 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$2_1;
     break label$5;
    }
    $4_1 = -2147483648;
   }
   label$7 : {
    if (HEAP32[$0_1 >> 2]) {
     if (!(HEAP32[$0_1 + 4 >> 2] ? ($3 | 0) <= HEAP32[$0_1 + 28 >> 2] : 0)) {
      HEAP32[$0_1 + 28 >> 2] = $3
     }
     if (!(HEAP32[$0_1 + 4 >> 2] ? ($4_1 | 0) <= HEAP32[$0_1 + 36 >> 2] : 0)) {
      HEAP32[$0_1 + 36 >> 2] = $4_1
     }
     if (!(HEAP32[$0_1 + 4 >> 2] ? ($3 | 0) >= HEAP32[$0_1 + 24 >> 2] : 0)) {
      HEAP32[$0_1 + 24 >> 2] = $3
     }
     if (!(HEAP32[$0_1 + 4 >> 2] ? ($4_1 | 0) >= HEAP32[$0_1 + 32 >> 2] : 0)) {
      HEAP32[$0_1 + 32 >> 2] = $4_1
     }
     HEAP32[$0_1 + 4 >> 2] = 1;
     break label$7;
    }
    $1_1 = HEAP32[$0_1 + 40 >> 2] + Math_imul(HEAP32[$0_1 + 44 >> 2], 14) | 0;
    HEAP16[$1_1 + 4 >> 1] = 0;
    HEAP16[$1_1 + 6 >> 1] = 0;
    HEAP16[$1_1 + 8 >> 1] = 0;
    HEAP16[$1_1 + 10 >> 1] = 0;
    HEAP16[$1_1 + 2 >> 1] = $4_1;
    HEAP16[$1_1 >> 1] = $3;
    HEAP8[$1_1 + 12 | 0] = 2;
   }
   HEAP32[$0_1 + 44 >> 2] = HEAP32[$0_1 + 44 >> 2] + 1;
  }
 }
 
 function $490($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0);
  $11_1 = $270($0_1);
  $7_1 = global$0 - 160 | 0;
  global$0 = $7_1;
  $10_1 = HEAP32[18392];
  $8 = HEAP32[$10_1 + 7080 >> 2];
  HEAP8[$8 + 140 | 0] = 1;
  if (!HEAPU8[$8 + 143 | 0]) {
   $12_1 = $0_1;
   $208($7_1 + 152 | 0);
   $0_1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$7_1 + 136 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$7_1 + 140 >> 2] = $0_1;
   $9 = HEAPF32[$7_1 + 152 >> 2];
   $9 = $9 >= Math_fround(1.0) ? $9 : Math_fround(1.0);
   $14 = $2_1 & 50331648;
   label$2 : {
    label$3 : {
     if ($14) {
      $0_1 = HEAP32[$7_1 + 140 >> 2];
      HEAP32[$7_1 + 8 >> 2] = HEAP32[$7_1 + 136 >> 2];
      HEAP32[$7_1 + 12 >> 2] = $0_1;
      $18_1 = $9;
      $9 = HEAPF32[$7_1 + 156 >> 2];
      $293($7_1 + 144 | 0, $7_1 + 8 | 0, $18_1, $9 >= Math_fround(1.0) ? $9 : Math_fround(1.0));
      $9 = HEAPF32[$8 + 208 >> 2];
      $0_1 = HEAP32[$8 + 212 >> 2];
      $5_1 = HEAP32[$8 + 208 >> 2];
      HEAPF32[$7_1 + 132 >> 2] = HEAPF32[$8 + 212 >> 2] + HEAPF32[$7_1 + 148 >> 2];
      HEAP32[$7_1 + 120 >> 2] = $5_1;
      HEAP32[$7_1 + 124 >> 2] = $0_1;
      HEAPF32[$7_1 + 128 >> 2] = $9 + HEAPF32[$7_1 + 144 >> 2];
      if (!$95($7_1 + 120 | 0, 0)) {
       break label$3
      }
      $277($7_1 + 120 | 0, Math_fround(-1.0));
      $6_1 = 0;
      break label$2;
     }
     $0_1 = HEAP32[$7_1 + 140 >> 2];
     HEAP32[$7_1 >> 2] = HEAP32[$7_1 + 136 >> 2];
     HEAP32[$7_1 + 4 >> 2] = $0_1;
     $293($7_1 + 144 | 0, $7_1, $9, Math_fround(0.0));
     $9 = HEAPF32[$8 + 208 >> 2];
     $0_1 = HEAP32[$8 + 212 >> 2];
     $5_1 = HEAP32[$8 + 208 >> 2];
     HEAPF32[$7_1 + 132 >> 2] = HEAPF32[$8 + 212 >> 2] + HEAPF32[$7_1 + 148 >> 2];
     HEAP32[$7_1 + 120 >> 2] = $5_1;
     HEAP32[$7_1 + 124 >> 2] = $0_1;
     HEAPF32[$7_1 + 128 >> 2] = $9 + HEAPF32[$7_1 + 144 >> 2];
    }
    $0_1 = $35($10_1 + 8068 | 0, $11_1);
    $5_1 = HEAP32[$0_1 >> 2];
    label$5 : {
     if (($5_1 | 0) != -1) {
      $5_1 = HEAP32[$10_1 + 8064 >> 2] + Math_imul($5_1, 456) | 0;
      break label$5;
     }
     HEAP32[$0_1 >> 2] = HEAP32[$10_1 + 8080 >> 2];
     $0_1 = $10_1 + 8056 | 0;
     $15_1 = HEAP32[$0_1 + 24 >> 2];
     $5_1 = HEAP32[$0_1 >> 2];
     label$1 : {
      if (($15_1 | 0) == ($5_1 | 0)) {
       $6_1 = $5_1 + 1 | 0;
       $13 = $5_1;
       $5_1 = HEAP32[$0_1 + 4 >> 2];
       label$30 : {
        if (($13 | 0) < ($5_1 | 0)) {
         break label$30
        }
        $13 = $5_1;
        $5_1 = $5_1 ? $5_1 + (($5_1 | 0) / 2 | 0) | 0 : 8;
        $5_1 = ($5_1 | 0) > ($6_1 | 0) ? $5_1 : $6_1;
        if (($13 | 0) >= ($5_1 | 0)) {
         break label$30
        }
        $13 = $16(Math_imul($5_1, 456));
        $17_1 = HEAP32[$0_1 + 8 >> 2];
        if ($17_1) {
         $1602($13, $17_1, Math_imul(HEAP32[$0_1 >> 2], 456));
         $17(HEAP32[$0_1 + 8 >> 2]);
        }
        HEAP32[$0_1 + 4 >> 2] = $5_1;
        HEAP32[$0_1 + 8 >> 2] = $13;
       }
       HEAP32[$0_1 >> 2] = $6_1;
       $5_1 = HEAP32[$0_1 + 24 >> 2] + 1 | 0;
       break label$1;
      }
      $5_1 = HEAP32[HEAP32[$0_1 + 8 >> 2] + Math_imul($15_1, 456) >> 2];
     }
     HEAP32[$0_1 + 24 >> 2] = $5_1;
     $5_1 = Math_imul($15_1, 456);
     HEAP32[$1604($5_1 + HEAP32[$0_1 + 8 >> 2] | 0, 0, 456) + 80 >> 2] = -1;
     HEAP32[$0_1 + 28 >> 2] = HEAP32[$0_1 + 28 >> 2] + 1;
     $5_1 = $5_1 + HEAP32[$0_1 + 8 >> 2] | 0;
    }
    $16_1 = HEAP32[$5_1 + 80 >> 2] == HEAP32[$10_1 + 6984 >> 2] ? HEAP16[$5_1 + 96 >> 1] + 1 | 0 : 0;
    $20_1 = HEAP32[$5_1 + 4 >> 2];
    $13 = HEAP32[$10_1 + 8040 >> 2];
    $17_1 = $13 + 1 | 0;
    HEAP32[$10_1 + 8040 >> 2] = $17_1;
    $15_1 = ($5_1 - HEAP32[$10_1 + 8064 >> 2] | 0) / 456 | 0;
    label$8 : {
     if (($13 | 0) < HEAP32[$10_1 + 8044 >> 2]) {
      break label$8
     }
     $1604($7_1 + 16 | 0, 0, 104);
     HEAP32[$7_1 + 20 >> 2] = -1082130432;
     $0_1 = HEAP32[$10_1 + 8048 >> 2];
     label$9 : {
      if (($0_1 | 0) > ($13 | 0)) {
       break label$9
      }
      $6_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
      $6_1 = ($6_1 | 0) > ($17_1 | 0) ? $6_1 : $17_1;
      if (($0_1 | 0) >= ($6_1 | 0)) {
       break label$9
      }
      $0_1 = $16(Math_imul($6_1, 104));
      $21_1 = HEAP32[$10_1 + 8052 >> 2];
      if ($21_1) {
       $1602($0_1, $21_1, Math_imul(HEAP32[$10_1 + 8044 >> 2], 104));
       $17(HEAP32[$10_1 + 8052 >> 2]);
      }
      HEAP32[$10_1 + 8048 >> 2] = $6_1;
      HEAP32[$10_1 + 8052 >> 2] = $0_1;
     }
     $0_1 = HEAP32[$10_1 + 8044 >> 2];
     if (($13 | 0) >= ($0_1 | 0)) {
      while (1) {
       $6_1 = $0_1;
       $1602(HEAP32[$10_1 + 8052 >> 2] + Math_imul($0_1, 104) | 0, $7_1 + 16 | 0, 104);
       $0_1 = $0_1 + 1 | 0;
       if (($6_1 | 0) != ($13 | 0)) {
        continue
       }
       break;
      }
     }
     HEAP32[$10_1 + 8044 >> 2] = $17_1;
     $374($7_1 + 32 | 0);
     $0_1 = HEAP32[$7_1 + 48 >> 2];
     if (!$0_1) {
      break label$8
     }
     $17($0_1);
    }
    $13 = HEAP32[$10_1 + 8052 >> 2];
    $17_1 = HEAP32[$10_1 + 8040 >> 2] - 1 | 0;
    $0_1 = $13 + Math_imul($17_1, 104) | 0;
    HEAP32[$5_1 + 12 >> 2] = $0_1;
    HEAP32[$0_1 >> 2] = $15_1;
    HEAP32[$5_1 + 376 >> 2] = $0_1 + 16;
    HEAP32[$0_1 + 16 >> 2] = 0;
    HEAP32[$0_1 + 20 >> 2] = 1;
    $6_1 = $2_1 & 57344;
    HEAP8[$5_1 + 453 | 0] = !$6_1;
    $2_1 = $6_1 ? $2_1 : ($2_1 & 16777216 ? 8192 : HEAPU8[$8 + 8 | 0] & 64 ? 8192 : 32768) | $2_1;
    $6_1 = $11_1 + $16_1 | 0;
    $21_1 = HEAP32[HEAP32[$8 + 736 >> 2] + 8 >> 2];
    HEAP16[$5_1 + 96 >> 1] = $16_1;
    HEAP32[$5_1 >> 2] = $11_1;
    $2_1 = ($2_1 & 57344) == 16384 ? $2_1 | 262144 : $2_1;
    $11_1 = $2_1 << 9 & 512 | $2_1;
    $2_1 = $2_1 & 50331648 ? $11_1 & -196609 : $11_1;
    $2_1 = $2_1 & 4096 ? $2_1 & -2049 : $2_1;
    $11_1 = $2_1 | 16;
    $2_1 = $21_1 & 256 ? $11_1 : $2_1 & 15 ? $2_1 : $11_1;
    HEAP32[$5_1 + 4 >> 2] = $2_1;
    $11_1 = HEAP32[$10_1 + 6984 >> 2];
    HEAP32[$5_1 + 360 >> 2] = $8;
    HEAP32[$5_1 + 80 >> 2] = $11_1;
    HEAP32[$5_1 + 356 >> 2] = $8;
    HEAP8[$5_1 + 441 | 0] = 0;
    HEAP32[$5_1 + 84 >> 2] = $1_1;
    HEAPF32[$5_1 + 188 >> 2] = $4_1;
    $11_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$0_1 + 12 >> 2] = $11_1;
    label$18 : {
     if ($14) {
      $3 = $2_1 & 16777216;
      $4_1 = $4_1 > Math_fround(0.0) ? ($3 >>> 24 | 0 ? $4_1 : Math_fround(3402823466385288598117041.0e14)) : Math_fround(3402823466385288598117041.0e14);
      $0_1 = $4_1 != Math_fround(3402823466385288598117041.0e14);
      $11_1 = $2_1 & 50331648;
      if (!(!$0_1 & ($11_1 | 0) != 16777216)) {
       HEAPF32[$7_1 + 20 >> 2] = ($11_1 | 0) == 16777216 ? Math_fround(1.1754943508222875e-38) : Math_fround(0.0);
       HEAPF32[$7_1 + 16 >> 2] = $0_1 ? $4_1 : Math_fround(0.0);
       $252($7_1 + 16 | 0);
      }
      if (!($20_1 & 50331648)) {
       HEAP32[$7_1 + 16 >> 2] = 0;
       HEAP32[$7_1 + 20 >> 2] = 0;
       $0_1 = HEAP32[18392];
       HEAP32[$0_1 + 7300 >> 2] = HEAP32[$0_1 + 7300 >> 2] | 128;
       $11_1 = $7_1 + 16 | 0;
       $16_1 = HEAP32[$11_1 + 4 >> 2];
       $0_1 = $0_1 + 7348 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$11_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $16_1;
      }
      HEAPF32[$7_1 + 16 >> 2] = HEAPF32[$7_1 + 128 >> 2] - HEAPF32[$7_1 + 120 >> 2];
      HEAPF32[$7_1 + 20 >> 2] = HEAPF32[$7_1 + 132 >> 2] - HEAPF32[$7_1 + 124 >> 2];
      $207($12_1, $6_1, $7_1 + 16 | 0, 0, $3 >>> 13 | 0);
      $0_1 = HEAP32[$10_1 + 7080 >> 2];
      HEAP32[$5_1 + 360 >> 2] = $0_1;
      $3 = HEAP32[$0_1 + 468 >> 2];
      HEAP32[$5_1 + 244 >> 2] = HEAP32[$0_1 + 464 >> 2];
      HEAP32[$5_1 + 248 >> 2] = $3;
      $3 = $0_1 + 472 | 0;
      $12_1 = HEAP32[$3 + 4 >> 2];
      $11_1 = $5_1 + 252 | 0;
      HEAP32[$11_1 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$11_1 + 4 >> 2] = $12_1;
      $9 = HEAPF32[$0_1 + 24 >> 2];
      $19 = HEAPF32[$0_1 + 20 >> 2];
      $4_1 = HEAPF32[$0_1 + 12 >> 2];
      $18_1 = HEAPF32[$0_1 + 16 >> 2];
      HEAPF32[$5_1 + 216 >> 2] = $18_1;
      HEAPF32[$5_1 + 212 >> 2] = $4_1;
      HEAPF32[$5_1 + 224 >> 2] = $18_1 + $9;
      HEAPF32[$5_1 + 220 >> 2] = $4_1 + $19;
      $3 = HEAP32[$0_1 + 436 >> 2];
      HEAP32[$5_1 + 228 >> 2] = HEAP32[$0_1 + 432 >> 2];
      HEAP32[$5_1 + 232 >> 2] = $3;
      $0_1 = $0_1 + 440 | 0;
      $3 = HEAP32[$0_1 + 4 >> 2];
      $12_1 = $5_1 + 236 | 0;
      HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
      break label$18;
     }
     $0_1 = HEAP32[$7_1 + 124 >> 2];
     HEAP32[$5_1 + 228 >> 2] = HEAP32[$7_1 + 120 >> 2];
     HEAP32[$5_1 + 232 >> 2] = $0_1;
     $0_1 = $7_1 + 128 | 0;
     $3 = HEAP32[$0_1 + 4 >> 2];
     $12_1 = $5_1 + 236 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $3;
     $3 = HEAP32[$7_1 + 124 >> 2];
     HEAP32[$5_1 + 212 >> 2] = HEAP32[$7_1 + 120 >> 2];
     HEAP32[$5_1 + 216 >> 2] = $3;
     $3 = HEAP32[$0_1 + 4 >> 2];
     $12_1 = $5_1 + 220 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $3;
     $3 = HEAP32[$7_1 + 124 >> 2];
     HEAP32[$5_1 + 244 >> 2] = HEAP32[$7_1 + 120 >> 2];
     HEAP32[$5_1 + 248 >> 2] = $3;
     $3 = HEAP32[$0_1 + 4 >> 2];
     $12_1 = $5_1 + 252 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$0_1 >> 2];
    }
    HEAP32[$12_1 + 4 >> 2] = $3;
    $267($6_1);
    $12_1 = HEAP32[$5_1 + 360 >> 2];
    HEAPF32[$5_1 + 152 >> 2] = HEAPF32[$12_1 + 272 >> 2];
    $0_1 = HEAP32[$12_1 + 500 >> 2];
    HEAP32[$5_1 + 324 >> 2] = HEAP32[$12_1 + 496 >> 2];
    HEAP32[$5_1 + 328 >> 2] = $0_1;
    $0_1 = $12_1 + 504 | 0;
    $3 = HEAP32[$0_1 + 4 >> 2];
    $11_1 = $5_1 + 332 | 0;
    $6_1 = $11_1;
    HEAP32[$6_1 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $3;
    HEAP8[$5_1 + 455 | 0] = HEAPU8[$12_1 + 143 | 0];
    $3 = $12_1 + 472 | 0;
    $6_1 = HEAP32[$3 + 4 >> 2];
    $0_1 = $13 + Math_imul($17_1, 104) | 0;
    $16_1 = $0_1 + 44 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $6_1;
    $3 = HEAP32[$12_1 + 468 >> 2];
    HEAP32[$0_1 + 36 >> 2] = HEAP32[$12_1 + 464 >> 2];
    HEAP32[$0_1 + 40 >> 2] = $3;
    $3 = HEAP32[$12_1 + 484 >> 2];
    HEAP32[$0_1 + 52 >> 2] = HEAP32[$12_1 + 480 >> 2];
    HEAP32[$0_1 + 56 >> 2] = $3;
    $3 = $12_1 + 488 | 0;
    $6_1 = HEAP32[$3 + 4 >> 2];
    $16_1 = $0_1 + 60 | 0;
    HEAP32[$16_1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$16_1 + 4 >> 2] = $6_1;
    HEAP32[$0_1 + 92 >> 2] = HEAP32[$8 + 276 >> 2];
    $3 = $12_1 + 256 | 0;
    $6_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$0_1 + 68 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$0_1 + 72 >> 2] = $6_1;
    $6_1 = $12_1 + 248 | 0;
    $16_1 = HEAP32[$6_1 + 4 >> 2];
    HEAP32[$0_1 + 76 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$0_1 + 80 >> 2] = $16_1;
    $16_1 = $12_1 + 232 | 0;
    $14 = HEAP32[$16_1 + 4 >> 2];
    HEAP32[$0_1 + 84 >> 2] = HEAP32[$16_1 >> 2];
    HEAP32[$0_1 + 88 >> 2] = $14;
    HEAPF32[$0_1 + 96 >> 2] = HEAPF32[$8 + 384 >> 2];
    HEAP32[$0_1 + 100 >> 2] = HEAP32[$8 + 392 >> 2];
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    HEAP32[$6_1 >> 2] = 0;
    HEAP32[$6_1 + 4 >> 2] = 0;
    $4_1 = HEAPF32[$10_1 + 5508 >> 2];
    $0_1 = $2_1 & 8389120;
    $9 = $0_1 ? Math_fround(0.0) : $4_1;
    HEAPF32[$5_1 + 176 >> 2] = $9;
    $4_1 = ($0_1 | 0) == 512 ? $4_1 : Math_fround(0.0);
    HEAPF32[$5_1 + 164 >> 2] = $4_1;
    HEAPF32[$5_1 + 172 >> 2] = ($2_1 & 512 ? Math_fround(1.0) : Math_fround(0.0)) + $9;
    HEAPF32[$5_1 + 168 >> 2] = HEAPF32[$10_1 + 5512 >> 2];
    $9 = !($2_1 & 4194304) & ($2_1 & 2098176) != 0 ? HEAPF32[$10_1 + 5508 >> 2] : Math_fround(0.0);
    HEAP32[$5_1 + 124 >> 2] = 0;
    HEAP32[$5_1 + 88 >> 2] = -1;
    HEAP32[$5_1 + 92 >> 2] = -1;
    HEAP32[$5_1 + 120 >> 2] = HEAPU16[$5_1 + 120 >> 1];
    HEAPF32[$5_1 + 160 >> 2] = Math_fround(($2_1 & 1024 ? Math_fround(1.0) : Math_fround(0.0)) + $9) - $4_1;
    $16_1 = ($8 | 0) == ($12_1 | 0);
    $0_1 = $16_1 ? $5_1 + 244 | 0 : $12_1 + 496 | 0;
    $3 = HEAP32[$0_1 + 4 >> 2];
    HEAP32[$5_1 + 260 >> 2] = HEAP32[$0_1 >> 2];
    HEAP32[$5_1 + 264 >> 2] = $3;
    $3 = $0_1 + 8 | 0;
    $6_1 = HEAP32[$3 + 4 >> 2];
    $0_1 = $5_1 + 268 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $6_1;
    $4_1 = HEAPF32[$5_1 + 260 >> 2];
    $9 = HEAPF32[$5_1 + 244 >> 2];
    $19 = $4_1 >= $9 ? $4_1 : $9;
    HEAPF32[$5_1 + 260 >> 2] = $19;
    $4_1 = HEAPF32[$0_1 >> 2];
    $9 = HEAPF32[$5_1 + 252 >> 2];
    $18_1 = $4_1 < $9 ? $4_1 : $9;
    HEAPF32[$0_1 >> 2] = $18_1;
    $6_1 = $5_1 + 264 | 0;
    $4_1 = HEAPF32[$6_1 >> 2];
    $9 = HEAPF32[$5_1 + 248 >> 2];
    $4_1 = $4_1 >= $9 ? $4_1 : $9;
    HEAPF32[$6_1 >> 2] = $4_1;
    $3 = $5_1 + 272 | 0;
    $9 = HEAPF32[$3 >> 2];
    $22_1 = HEAPF32[$5_1 + 256 >> 2];
    $9 = $9 < $22_1 ? $9 : $22_1;
    HEAPF32[$3 >> 2] = $9;
    $27_1 = HEAPF32[$11_1 + 4 >> 2];
    $22_1 = HEAPF32[$5_1 + 324 >> 2];
    $23_1 = HEAPF32[$11_1 >> 2];
    HEAPF32[$5_1 + 260 >> 2] = $19 < $22_1 ? $22_1 : $19 > $23_1 ? $23_1 : $19;
    HEAPF32[$0_1 >> 2] = $18_1 < $22_1 ? $22_1 : $18_1 > $23_1 ? $23_1 : $18_1;
    $19 = HEAPF32[$5_1 + 328 >> 2];
    $18_1 = $27_1;
    HEAPF32[$3 >> 2] = $9 < $19 ? $19 : $9 > $18_1 ? $18_1 : $9;
    HEAPF32[$6_1 >> 2] = $4_1 < $19 ? $19 : $4_1 > $18_1 ? $18_1 : $4_1;
    label$26 : {
     if ($2_1 & 131072) {
      $4_1 = HEAPF32[$3 >> 2];
      $9 = HEAPF32[$12_1 + 476 >> 2];
      $4_1 = $4_1 < $9 ? $4_1 : $9;
      break label$26;
     }
     $4_1 = HEAPF32[$12_1 + 508 >> 2];
    }
    HEAP8[$5_1 + 452 | 0] = 1;
    HEAP8[$5_1 + 433 | 0] = 0;
    HEAP8[$5_1 + 434 | 0] = 0;
    HEAP8[$5_1 + 435 | 0] = 0;
    HEAP8[$5_1 + 436 | 0] = 0;
    HEAP32[$5_1 + 112 >> 2] = 0;
    HEAP8[$5_1 + 419 | 0] = 0;
    HEAPF32[$5_1 + 272 >> 2] = $4_1;
    $4_1 = HEAPF32[$5_1 + 248 >> 2];
    HEAPF32[$5_1 + 104 >> 2] = $4_1;
    HEAPF32[$5_1 + 100 >> 2] = $4_1;
    HEAP32[$5_1 + 136 >> 2] = $51(43, Math_fround(1.0));
    HEAP32[$5_1 + 140 >> 2] = $51(44, Math_fround(1.0));
    HEAP32[$10_1 + 8036 >> 2] = $5_1;
    HEAP32[$8 + 372 >> 2] = $15_1;
    if (!$16_1) {
     HEAP32[$12_1 + 372 >> 2] = $15_1
    }
    if (!(!($20_1 & 2) | $2_1 & 2)) {
     HEAP8[$5_1 + 451 | 0] = 1
    }
    if (HEAP32[$10_1 + 8088 >> 2] <= ($15_1 | 0)) {
     $3 = $15_1 + 1 | 0;
     $0_1 = HEAP32[$10_1 + 8092 >> 2];
     label$31 : {
      if (($0_1 | 0) > ($15_1 | 0)) {
       break label$31
      }
      $2_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
      $2_1 = ($2_1 | 0) > ($3 | 0) ? $2_1 : $3;
      if (($0_1 | 0) >= ($2_1 | 0)) {
       break label$31
      }
      $0_1 = $16($2_1 << 2);
      $6_1 = HEAP32[$10_1 + 8096 >> 2];
      if ($6_1) {
       $1602($0_1, $6_1, HEAP32[$10_1 + 8088 >> 2] << 2);
       $17(HEAP32[$10_1 + 8096 >> 2]);
      }
      HEAP32[$10_1 + 8092 >> 2] = $2_1;
      HEAP32[$10_1 + 8096 >> 2] = $0_1;
     }
     $0_1 = HEAP32[$10_1 + 8088 >> 2];
     if (($15_1 | 0) >= ($0_1 | 0)) {
      while (1) {
       $2_1 = $0_1;
       HEAP32[HEAP32[$10_1 + 8096 >> 2] + ($0_1 << 2) >> 2] = -1082130432;
       $0_1 = $0_1 + 1 | 0;
       if (($2_1 | 0) != ($15_1 | 0)) {
        continue
       }
       break;
      }
     }
     HEAP32[$10_1 + 8088 >> 2] = $3;
    }
    $4_1 = Math_fround(HEAPF64[$10_1 + 6976 >> 3]);
    HEAPF32[HEAP32[$10_1 + 8096 >> 2] + ($15_1 << 2) >> 2] = $4_1;
    HEAPF32[($13 + Math_imul($17_1, 104) | 0) + 4 >> 2] = $4_1;
    HEAP8[$5_1 + 454 | 0] = 0;
    $0_1 = HEAP32[$5_1 + 20 >> 2];
    $2_1 = HEAP32[$5_1 + 16 >> 2];
    $21_1 = ($0_1 - $2_1 | 0) / 104 | 0;
    label$37 : {
     if (($0_1 | 0) == ($2_1 | 0)) {
      $0_1 = 0;
      $3 = 0;
      break label$37;
     }
     $0_1 = 0;
     $3 = 0;
     if (($1_1 | 0) == ($21_1 | 0)) {
      break label$37
     }
     $0_1 = HEAP32[$5_1 + 8 >> 2];
     HEAP32[$5_1 + 8 >> 2] = 0;
     $3 = $2_1;
    }
    $24 = $3;
    if (!HEAP32[$5_1 + 8 >> 2]) {
     $3 = Math_imul($1_1, 105) + 3 & -4;
     $6_1 = $1_1 << 3;
     $2_1 = $3 + $6_1 | 0;
     $8 = $16($2_1);
     HEAP32[$5_1 + 8 >> 2] = $8;
     $1604($8, 0, $2_1);
     HEAP8[$5_1 + 447 | 0] = 1;
     HEAP8[$5_1 + 443 | 0] = 1;
     $2_1 = HEAP32[$5_1 + 8 >> 2];
     HEAP32[$5_1 + 16 >> 2] = $2_1;
     $3 = $2_1 + $3 | 0;
     HEAP32[$5_1 + 32 >> 2] = $3;
     $2_1 = $2_1 + Math_imul($1_1, 104) | 0;
     HEAP32[$5_1 + 24 >> 2] = $2_1;
     HEAP32[$5_1 + 20 >> 2] = $2_1;
     HEAP32[$5_1 + 36 >> 2] = $3 + $6_1;
     HEAP32[$5_1 + 28 >> 2] = $1_1 + $2_1;
    }
    if (HEAPU8[$5_1 + 450 | 0]) {
     HEAP8[$5_1 + 450 | 0] = 0;
     HEAP8[$5_1 + 443 | 0] = 1;
     HEAP8[$5_1 + 447 | 0] = 0;
     HEAP8[$5_1 + 448 | 0] = 1;
     HEAP32[$5_1 + 72 >> 2] = 0;
    }
    label$41 : {
     if (!HEAPU8[$5_1 + 443 | 0]) {
      break label$41
     }
     HEAP8[$5_1 + 444 | 0] = 1;
     HEAP32[$5_1 + 76 >> 2] = -1;
     HEAP8[$5_1 + 432 | 0] = 255;
     HEAP16[$5_1 + 98 >> 1] = 65535;
     HEAP8[$5_1 + 426 | 0] = 255;
     HEAP32[$5_1 + 420 >> 2] = -1;
     HEAP8[$5_1 + 424 | 0] = 255;
     if (($1_1 | 0) <= 0) {
      break label$41
     }
     $3 = $7_1 + 71 | 0;
     $15_1 = $7_1 - -64 | 0;
     $13 = $7_1 + 56 | 0;
     $11_1 = $7_1 + 48 | 0;
     $17_1 = $7_1 + 40 | 0;
     $16_1 = $7_1 + 32 | 0;
     $25_1 = $7_1 + 68 | 0;
     $20_1 = $25_1 + 3 | 0;
     $6_1 = 0;
     while (1) {
      $8 = Math_imul($6_1, 104);
      $2_1 = $8 + HEAP32[$5_1 + 16 >> 2] | 0;
      label$43 : {
       if (!(!$24 | ($6_1 | 0) >= ($21_1 | 0))) {
        $1602($2_1, $8 + $24 | 0, 103);
        break label$43;
       }
       $4_1 = HEAPF32[$2_1 + 20 >> 2];
       HEAP8[$3 | 0] = 0;
       HEAP8[$3 + 1 | 0] = 0;
       HEAP8[$3 + 2 | 0] = 0;
       HEAP8[$3 + 3 | 0] = 0;
       HEAP32[$15_1 >> 2] = 0;
       HEAP32[$15_1 + 4 >> 2] = 0;
       HEAP32[$13 >> 2] = 0;
       HEAP32[$13 + 4 >> 2] = 0;
       HEAP32[$11_1 >> 2] = 0;
       HEAP32[$11_1 + 4 >> 2] = 0;
       HEAP32[$17_1 >> 2] = 0;
       HEAP32[$17_1 + 4 >> 2] = 0;
       HEAP32[$16_1 >> 2] = 0;
       HEAP32[$16_1 + 4 >> 2] = 0;
       $8 = $7_1 + 24 | 0;
       HEAP32[$8 >> 2] = 0;
       HEAP32[$8 + 4 >> 2] = 0;
       HEAP32[$7_1 + 16 >> 2] = 0;
       HEAP32[$7_1 + 20 >> 2] = 0;
       HEAP8[$20_1 | 0] = 255;
       HEAP8[$20_1 + 1 | 0] = 255;
       HEAP8[$20_1 + 2 | 0] = 255;
       HEAP8[$20_1 + 3 | 0] = 255;
       HEAP32[$25_1 >> 2] = -1;
       $14 = $2_1 + 8 | 0;
       HEAP32[$14 >> 2] = 0;
       HEAP32[$14 + 4 >> 2] = 0;
       HEAP32[$2_1 >> 2] = 0;
       HEAP32[$2_1 + 4 >> 2] = 0;
       HEAP32[$2_1 + 24 >> 2] = -1082130432;
       HEAP32[$2_1 + 16 >> 2] = -1082130432;
       HEAP32[$2_1 + 20 >> 2] = 0;
       $14 = HEAP32[$7_1 + 20 >> 2];
       HEAP32[$2_1 + 28 >> 2] = HEAP32[$7_1 + 16 >> 2];
       HEAP32[$2_1 + 32 >> 2] = $14;
       $14 = HEAP32[$8 + 4 >> 2];
       $26_1 = $2_1 + 36 | 0;
       HEAP32[$26_1 >> 2] = HEAP32[$8 >> 2];
       HEAP32[$26_1 + 4 >> 2] = $14;
       $8 = HEAP32[$16_1 + 4 >> 2];
       $14 = $2_1 + 44 | 0;
       HEAP32[$14 >> 2] = HEAP32[$16_1 >> 2];
       HEAP32[$14 + 4 >> 2] = $8;
       $8 = HEAP32[$17_1 + 4 >> 2];
       $14 = $2_1 + 52 | 0;
       HEAP32[$14 >> 2] = HEAP32[$17_1 >> 2];
       HEAP32[$14 + 4 >> 2] = $8;
       $8 = HEAP32[$11_1 + 4 >> 2];
       $14 = $2_1 + 60 | 0;
       HEAP32[$14 >> 2] = HEAP32[$11_1 >> 2];
       HEAP32[$14 + 4 >> 2] = $8;
       $8 = HEAP32[$13 + 4 >> 2];
       $14 = $2_1 + 68 | 0;
       HEAP32[$14 >> 2] = HEAP32[$13 >> 2];
       HEAP32[$14 + 4 >> 2] = $8;
       $8 = HEAP32[$15_1 + 4 >> 2];
       $14 = $2_1 + 76 | 0;
       HEAP32[$14 >> 2] = HEAP32[$15_1 >> 2];
       HEAP32[$14 + 4 >> 2] = $8;
       $8 = $2_1 + 83 | 0;
       $14 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
       HEAP8[$8 | 0] = $14;
       HEAP8[$8 + 1 | 0] = $14 >>> 8;
       HEAP8[$8 + 2 | 0] = $14 >>> 16;
       HEAP8[$8 + 3 | 0] = $14 >>> 24;
       HEAP16[$2_1 + 90 >> 1] = 0;
       HEAP16[$2_1 + 92 >> 1] = 0;
       HEAP16[$2_1 + 94 >> 1] = 0;
       HEAP16[$2_1 + 96 >> 1] = 0;
       HEAP8[$2_1 + 89 | 0] = 255;
       HEAP8[$2_1 + 87 | 0] = 255;
       HEAP8[$2_1 + 88 | 0] = 255;
       $8 = $2_1 + 95 | 0;
       HEAP8[$8 | 0] = 0;
       HEAP8[$8 + 1 | 0] = 0;
       HEAP8[$8 + 2 | 0] = 0;
       HEAP8[$8 + 3 | 0] = 0;
       HEAP8[$8 + 4 | 0] = 0;
       HEAP8[$8 + 5 | 0] = 0;
       HEAP8[$8 + 6 | 0] = 0;
       HEAP8[$8 + 7 | 0] = 0;
       HEAP8[$2_1 + 97 | 0] = 1;
       HEAPF32[$2_1 + 20 >> 2] = $4_1;
       HEAP8[$2_1 + 92 | 0] = 1;
       HEAP16[$2_1 + 90 >> 1] = 257;
      }
      HEAP8[$6_1 + HEAP32[$5_1 + 24 >> 2] | 0] = $6_1;
      HEAP8[$2_1 + 82 | 0] = $6_1;
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
    }
    if ($0_1) {
     $17($0_1)
    }
    if (HEAPU8[$5_1 + 447 | 0]) {
     $3 = HEAP32[18392];
     HEAP8[$5_1 + 447 | 0] = 0;
     label$10 : {
      if (HEAPU8[$5_1 + 4 | 0] & 16) {
       break label$10
      }
      $0_1 = HEAP32[$5_1 + 76 >> 2];
      label$21 : {
       if (($0_1 | 0) == -1) {
        $0_1 = HEAP32[$3 + 12176 >> 2];
        $6_1 = $0_1 + 4 | 0;
        $2_1 = $0_1 ? $6_1 : 0;
        label$4 : {
         if (!$0_1) {
          break label$4
         }
         $8 = HEAP32[$5_1 >> 2];
         while (1) {
          if (HEAP32[$2_1 >> 2] == ($8 | 0)) {
           break label$4
          }
          $0_1 = $2_1 + HEAP32[$2_1 - 4 >> 2] | 0;
          $15_1 = $6_1 + HEAP32[$3 + 12168 >> 2] | 0;
          $2_1 = ($15_1 | 0) != ($0_1 | 0) ? $0_1 : 0;
          if (($0_1 | 0) != ($15_1 | 0)) {
           continue
          }
          break;
         };
        }
        $0_1 = $2_1;
        if (!$0_1) {
         break label$10
        }
        if (HEAP32[$5_1 + 84 >> 2] != HEAP8[$0_1 + 12 | 0]) {
         HEAP8[$5_1 + 448 | 0] = 1
        }
        HEAP32[$5_1 + 76 >> 2] = $0_1 - HEAP32[$3 + 12176 >> 2];
        break label$21;
       }
       $0_1 = $0_1 + HEAP32[$3 + 12176 >> 2] | 0;
       if (HEAP32[$5_1 + 84 >> 2] <= HEAP8[$0_1 + 13 | 0]) {
        break label$21
       }
       HEAP32[$0_1 >> 2] = 0;
       $0_1 = 0;
      }
      $3 = $0_1;
      HEAP32[$5_1 + 72 >> 2] = HEAP32[$0_1 + 4 >> 2];
      HEAPF32[$5_1 + 208 >> 2] = HEAPF32[$0_1 + 8 >> 2];
      $6_1 = HEAP8[$0_1 + 12 | 0];
      label$102 : {
       if (($6_1 | 0) <= 0) {
        $8 = 0;
        $15_1 = 0;
        break label$102;
       }
       $0_1 = $3 + 16 | 0;
       $2_1 = 0;
       $8 = 0;
       $15_1 = 0;
       while (1) {
        $13 = HEAP8[$0_1 + 8 | 0];
        if (!(($13 | 0) < 0 | HEAP32[$5_1 + 84 >> 2] <= ($13 | 0))) {
         $6_1 = HEAP32[$5_1 + 16 >> 2];
         $11_1 = HEAP32[$3 + 4 >> 2];
         if ($11_1 & 1) {
          $17_1 = $6_1 + Math_imul($13, 104) | 0;
          HEAPF32[$17_1 + (HEAPU8[$0_1 + 11 | 0] & 8 ? 24 : 16) >> 2] = HEAPF32[$0_1 >> 2];
          HEAP8[$17_1 + 99 | 0] = 0;
         }
         $6_1 = $6_1 + Math_imul($13, 104) | 0;
         $13 = $11_1 & 2 ? HEAPU8[$0_1 + 9 | 0] : $13;
         HEAP8[$6_1 + 82 | 0] = $13;
         $11_1 = HEAPU8[$0_1 + 11 | 0] >>> 2 & 1;
         HEAP8[$6_1 + 91 | 0] = $11_1;
         HEAP8[$6_1 + 92 | 0] = $11_1;
         HEAP8[$6_1 + 86 | 0] = HEAPU8[$0_1 + 10 | 0];
         HEAP8[$6_1 + 101 | 0] = HEAPU8[$6_1 + 101 | 0] & 252 | HEAPU8[$0_1 + 11 | 0] & 3;
         $13 = $13 << 24 >> 24;
         $6_1 = $13 & 31;
         if (($13 & 63) >>> 0 >= 32) {
          $6_1 = 1 << $6_1;
          $13 = 0;
         } else {
          $13 = 1 << $6_1;
          $6_1 = $13 - 1 & 1 >>> 32 - $6_1;
         }
         $8 = $13 | $8;
         $15_1 = $6_1 | $15_1;
        }
        $0_1 = $0_1 + 12 | 0;
        $2_1 = $2_1 + 1 | 0;
        $6_1 = HEAP8[$3 + 12 | 0];
        if (($2_1 | 0) < ($6_1 | 0)) {
         continue
        }
        break;
       };
      }
      $0_1 = $6_1 & 31;
      if (($6_1 & 63) >>> 0 >= 32) {
       $2_1 = -1 << $0_1;
       $3 = 0;
      } else {
       $3 = -1 << $0_1;
       $2_1 = $3 | (1 << $0_1) - 1 & -1 >>> 32 - $0_1;
      }
      $0_1 = ($6_1 | 0) == 64;
      label$183 : {
       if (($8 | 0) == (($0_1 ? -1 : $3 ^ -1) | 0) & (($0_1 ? -1 : $2_1 ^ -1) | 0) == ($15_1 | 0)) {
        break label$183
       }
       $2_1 = HEAP32[$5_1 + 84 >> 2];
       if (($2_1 | 0) <= 0) {
        break label$183
       }
       $3 = HEAP32[$5_1 + 16 >> 2];
       $0_1 = 0;
       while (1) {
        HEAP8[($3 + Math_imul($0_1, 104) | 0) + 82 | 0] = $0_1;
        $0_1 = $0_1 + 1 | 0;
        if (($2_1 | 0) != ($0_1 | 0)) {
         continue
        }
        break;
       };
      }
      if (HEAP32[$5_1 + 84 >> 2] <= 0) {
       break label$10
      }
      $0_1 = 0;
      while (1) {
       HEAP8[HEAP32[$5_1 + 24 >> 2] + HEAP8[(HEAP32[$5_1 + 16 >> 2] + Math_imul($0_1, 104) | 0) + 82 | 0] | 0] = $0_1;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) < HEAP32[$5_1 + 84 >> 2]) {
        continue
       }
       break;
      };
     }
    }
    $4_1 = HEAPF32[$5_1 + 208 >> 2];
    $9 = HEAPF32[$10_1 + 6468 >> 2];
    if (!($4_1 == Math_fround(0.0) | $4_1 == $9 | ($1_1 | 0) <= 0)) {
     $4_1 = Math_fround($9 / $4_1);
     $0_1 = HEAP32[$5_1 + 16 >> 2];
     $6_1 = 0;
     while (1) {
      $2_1 = $0_1 + Math_imul($6_1, 104) | 0;
      HEAPF32[$2_1 + 16 >> 2] = $4_1 * HEAPF32[$2_1 + 16 >> 2];
      $6_1 = $6_1 + 1 | 0;
      if (($6_1 | 0) != ($1_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAPF32[$5_1 + 208 >> 2] = $9;
    HEAP8[$12_1 + 143 | 0] = 1;
    if (HEAP32[$5_1 + 364 >> 2] > 0) {
     $0_1 = HEAP32[$5_1 + 368 >> 2];
     label$50 : {
      if (($0_1 | 0) >= 0) {
       break label$50
      }
      $1_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0;
      $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
      if (($0_1 | 0) >= ($1_1 | 0)) {
       break label$50
      }
      $0_1 = $16($1_1);
      $2_1 = HEAP32[$5_1 + 372 >> 2];
      if ($2_1) {
       $1602($0_1, $2_1, HEAP32[$5_1 + 364 >> 2]);
       $17(HEAP32[$5_1 + 372 >> 2]);
      }
      HEAP32[$5_1 + 368 >> 2] = $1_1;
      HEAP32[$5_1 + 372 >> 2] = $0_1;
     }
     HEAP32[$5_1 + 364 >> 2] = 0;
    }
    label$11 : {
     if (HEAPU16[$5_1 + 96 >> 1]) {
      break label$11
     }
     $0_1 = HEAP8[$5_1 + 423 | 0];
     label$22 : {
      if (($0_1 | 0) == -1) {
       break label$22
      }
      $4_1 = HEAPF32[$5_1 + 200 >> 2];
      if ($4_1 == Math_fround(3402823466385288598117041.0e14)) {
       break label$22
      }
      $495($0_1, $4_1);
     }
     HEAP32[$5_1 + 200 >> 2] = 2139095039;
     HEAP8[$5_1 + 424 | 0] = HEAPU8[$5_1 + 423 | 0];
     HEAP8[$5_1 + 423 | 0] = 255;
     $0_1 = HEAP8[$5_1 + 422 | 0];
     if (($0_1 | 0) == -1) {
      break label$11
     }
     $495($0_1, HEAPF32[(HEAP32[$5_1 + 16 >> 2] + Math_imul($0_1, 104) | 0) + 20 >> 2]);
     HEAP8[$5_1 + 422 | 0] = 255;
    }
    label$33 : {
     if (HEAPU16[$5_1 + 96 >> 1]) {
      break label$33
     }
     if (!(HEAPU8[$5_1 + 426 | 0] == 255 | HEAPU8[$5_1 + 425 | 0] != 255)) {
      HEAP8[$5_1 + 426 | 0] = 255
     }
     HEAP8[$5_1 + 425 | 0] = 255;
     $0_1 = HEAP8[$5_1 + 426 | 0];
     if (($0_1 | 0) == -1) {
      break label$33
     }
     $1_1 = HEAPU8[$5_1 + 427 | 0];
     if (!$1_1) {
      break label$33
     }
     $2_1 = HEAP32[$5_1 + 16 >> 2];
     $0_1 = $2_1 + Math_imul($0_1, 104) | 0;
     $3 = HEAPU8[$0_1 + 82 | 0];
     $6_1 = $0_1;
     $0_1 = HEAPU8[(Math_imul(HEAP8[$0_1 + (($1_1 | 0) == 255 ? 84 : 85) | 0], 104) + $2_1 | 0) + 82 | 0];
     HEAP8[$6_1 + 82 | 0] = $0_1;
     if (($0_1 | 0) != ($3 | 0)) {
      $12_1 = $1_1 << 24 >> 24;
      $6_1 = $0_1 << 24 >> 24;
      $10_1 = HEAP32[$5_1 + 24 >> 2];
      $0_1 = $3 << 24 >> 24;
      while (1) {
       $0_1 = $0_1 + $12_1 | 0;
       $3 = Math_imul(HEAP8[$0_1 + $10_1 | 0], 104) + $2_1 | 0;
       HEAP8[$3 + 82 | 0] = HEAPU8[$3 + 82 | 0] - $1_1;
       if (($0_1 | 0) != ($6_1 | 0)) {
        continue
       }
       break;
      };
     }
     if (HEAP32[$5_1 + 84 >> 2] > 0) {
      $0_1 = 0;
      while (1) {
       HEAP8[HEAP32[$5_1 + 24 >> 2] + HEAP8[(HEAP32[$5_1 + 16 >> 2] + Math_imul($0_1, 104) | 0) + 82 | 0] | 0] = $0_1;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) < HEAP32[$5_1 + 84 >> 2]) {
        continue
       }
       break;
      };
     }
     HEAP8[$5_1 + 448 | 0] = 1;
     HEAP8[$5_1 + 427 | 0] = 0;
    }
    if (HEAPU8[$5_1 + 451 | 0]) {
     if (HEAP32[$5_1 + 84 >> 2] > 0) {
      $0_1 = 0;
      while (1) {
       HEAP8[(HEAP32[$5_1 + 16 >> 2] + Math_imul($0_1, 104) | 0) + 82 | 0] = $0_1;
       HEAP8[HEAP32[$5_1 + 24 >> 2] + $0_1 | 0] = $0_1;
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) < HEAP32[$5_1 + 84 >> 2]) {
        continue
       }
       break;
      };
     }
     HEAP8[$5_1 + 448 | 0] = 1;
     HEAP8[$5_1 + 451 | 0] = 0;
    }
    $6_1 = 1;
   }
  }
  global$0 = $7_1 + 160 | 0;
  return $6_1;
 }
 
 function $495($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0;
  $4_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  $6_1 = HEAP32[$4_1 + 16 >> 2];
  $5_1 = $6_1 + Math_imul($0_1, 104) | 0;
  $8 = HEAPF32[$4_1 + 164 >> 2];
  $11_1 = Math_fround($8 + $8);
  $7_1 = HEAPF32[$4_1 + 156 >> 2];
  $3 = HEAPF32[$4_1 + 176 >> 2];
  $12_1 = Math_fround(Math_fround(Math_fround($11_1 + $7_1) + HEAPF32[$4_1 + 172 >> 2]) + $3);
  $2_1 = HEAP32[$4_1 + 4 >> 2];
  label$1 : {
   if ($2_1 & 16777216) {
    $2_1 = HEAP8[$4_1 + 435 | 0];
    $10_1 = HEAP8[$5_1 + 82 | 0];
    $9 = Math_fround(3402823466385288598117041.0e14);
    if (($2_1 | 0) <= ($10_1 | 0)) {
     break label$1
    }
    $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 268 >> 2] - Math_fround(Math_fround($2_1 - $10_1 | 0) * $12_1)) - HEAPF32[(Math_imul($0_1, 104) + $6_1 | 0) + 8 >> 2]) - HEAPF32[$4_1 + 160 >> 2]) - $8) - $3);
    break label$1;
   }
   $9 = Math_fround(3402823466385288598117041.0e14);
   if ($2_1 & 262144) {
    break label$1
   }
   $2_1 = Math_imul($0_1, 104) + $6_1 | 0;
   $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 252 >> 2] - Math_fround(Math_fround(HEAP8[$4_1 + 417 | 0] + (HEAP8[$2_1 + 83 | 0] ^ -1) | 0) * $12_1)) - HEAPF32[$2_1 + 8 >> 2]) - $3) - $11_1) - HEAPF32[$4_1 + 160 >> 2]);
  }
  $3 = $9;
  $3 = $3 <= $7_1 ? $7_1 : $3;
  $1_1 = $1_1 < $7_1 ? $7_1 : $1_1 > $3 ? $3 : $1_1;
  $2_1 = Math_imul($0_1, 104) + $6_1 | 0;
  label$3 : {
   if ($1_1 == HEAPF32[$2_1 + 4 >> 2]) {
    break label$3
   }
   $3 = HEAPF32[$2_1 + 16 >> 2];
   if ($3 == $1_1) {
    break label$3
   }
   $10_1 = $2_1 + 16 | 0;
   $2_1 = HEAP8[(Math_imul($0_1, 104) + $6_1 | 0) + 85 | 0];
   $2_1 = ($2_1 | 0) != -1 ? Math_imul($2_1, 104) + $6_1 | 0 : 0;
   label$4 : {
    label$5 : {
     $5_1 = HEAP32[$5_1 >> 2];
     if (!($5_1 & 16)) {
      break label$5
     }
     label$6 : {
      if (!$2_1) {
       break label$6
      }
      $13 = HEAP8[$4_1 + 430 | 0];
      if (($13 | 0) == -1) {
       break label$6
      }
      if (HEAP8[(Math_imul($13, 104) + $6_1 | 0) + 82 | 0] < HEAP8[(Math_imul($0_1, 104) + $6_1 | 0) + 82 | 0]) {
       break label$5
      }
     }
     HEAPF32[$10_1 >> 2] = $1_1;
     break label$4;
    }
    label$7 : {
     if ($2_1) {
      break label$7
     }
     $0_1 = HEAP8[(Math_imul($0_1, 104) + $6_1 | 0) + 84 | 0];
     if (($0_1 | 0) == -1) {
      $2_1 = 0;
      break label$7;
     }
     $2_1 = Math_imul($0_1, 104) + $6_1 | 0;
    }
    if (!$2_1) {
     break label$3
    }
    $8 = HEAPF32[$2_1 + 16 >> 2];
    $1_1 = Math_fround($8 - Math_fround($1_1 - $3));
    $1_1 = $1_1 >= $7_1 ? $1_1 : $7_1;
    HEAPF32[$10_1 >> 2] = Math_fround($3 + $8) - $1_1;
    HEAPF32[$2_1 + 16 >> 2] = $1_1;
    if (!((HEAP32[$2_1 >> 2] | $5_1) & 8)) {
     break label$4
    }
    $2_1 = HEAP32[$4_1 + 84 >> 2];
    label$9 : {
     if (($2_1 | 0) <= 0) {
      $3 = Math_fround(0.0);
      $7_1 = Math_fround(0.0);
      break label$9;
     }
     $7_1 = Math_fround(0.0);
     $1_1 = Math_fround(0.0);
     $0_1 = 0;
     while (1) {
      $5_1 = Math_imul($0_1, 104) + $6_1 | 0;
      if (!(!HEAPU8[$5_1 + 90 | 0] | !(HEAPU8[$5_1 | 0] & 8))) {
       $1_1 = Math_fround($1_1 + HEAPF32[$5_1 + 16 >> 2]);
       $7_1 = Math_fround($7_1 + HEAPF32[$5_1 + 24 >> 2]);
      }
      $3 = $1_1;
      $0_1 = $0_1 + 1 | 0;
      if (($2_1 | 0) != ($0_1 | 0)) {
       continue
      }
      break;
     };
    }
    if (($2_1 | 0) <= 0) {
     break label$4
    }
    $0_1 = 0;
    while (1) {
     $5_1 = Math_imul($0_1, 104) + $6_1 | 0;
     if (!(!HEAPU8[$5_1 + 90 | 0] | !(HEAPU8[$5_1 | 0] & 8))) {
      HEAPF32[$5_1 + 24 >> 2] = $7_1 * Math_fround(HEAPF32[$5_1 + 16 >> 2] / $3)
     }
     $0_1 = $0_1 + 1 | 0;
     if (($2_1 | 0) != ($0_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP8[$4_1 + 448 | 0] = 1;
  }
 }
 
 function $496($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32_1 = Math_fround(0), $33_1 = Math_fround(0);
  $18_1 = global$0 - 48 | 0;
  global$0 = $18_1;
  $31_1 = HEAP32[18392];
  HEAP8[$0_1 + 449 | 0] = 1;
  HEAP8[$0_1 + 417 | 0] = 0;
  HEAP32[$0_1 + 40 >> 2] = 0;
  HEAP32[$0_1 + 44 >> 2] = 0;
  $1_1 = $0_1 + 48 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP8[$0_1 + 428 | 0] = 255;
  $6_1 = HEAPF32[$31_1 + 5476 >> 2];
  HEAPF32[$0_1 + 156 >> 2] = $6_1 <= Math_fround(1.0) ? Math_fround(1.0) : $6_1;
  $13 = HEAP32[$0_1 + 4 >> 2];
  $7_1 = HEAP32[$0_1 + 84 >> 2];
  label$1 : {
   if (($7_1 | 0) <= 0) {
    $12_1 = -1;
    break label$1;
   }
   $1_1 = 0;
   $12_1 = -1;
   $6_1 = Math_fround(0.0);
   while (1) {
    $14 = $2_1;
    $7_1 = $1_1;
    $1_1 = HEAP8[HEAP32[$0_1 + 24 >> 2] + $15_1 | 0];
    if (($15_1 | 0) != ($1_1 | 0)) {
     HEAP8[$0_1 + 449 | 0] = 0
    }
    $11_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($1_1, 104) | 0;
    if (HEAP8[$0_1 + 419 | 0] <= ($1_1 | 0)) {
     $497($0_1, $11_1, 0);
     HEAP32[$11_1 + 48 >> 2] = 0;
     HEAP16[$11_1 + 80 >> 1] = 65535;
     HEAP32[$11_1 + 28 >> 2] = -1082130432;
    }
    $16_1 = HEAP32[$0_1 + 4 >> 2];
    if (!($16_1 & 4) | HEAPU8[$11_1 | 0] & 128) {
     HEAP8[$11_1 + 92 | 0] = 1
    }
    $17_1 = $11_1 + 91 | 0;
    $2_1 = HEAPU8[$11_1 + 92 | 0];
    if (($2_1 | 0) != HEAPU8[$11_1 + 91 | 0]) {
     HEAP8[$17_1 | 0] = $2_1;
     HEAP8[$0_1 + 448 | 0] = 1;
    }
    $20_1 = HEAP32[$11_1 >> 2];
    $19 = !($20_1 & 1) & HEAPU8[$17_1 | 0] != 0;
    HEAP8[$11_1 + 90 | 0] = $19;
    $2_1 = HEAP8[$11_1 + 86 | 0];
    if (!($19 | ($2_1 | 0) == -1)) {
     HEAP8[$0_1 + 444 | 0] = 1
    }
    if (!($16_1 & 67108864 | ($2_1 | 0) <= 0)) {
     HEAP8[$0_1 + 444 | 0] = 1
    }
    $17_1 = $20_1 & 16;
    if (HEAPF32[$11_1 + ($17_1 ? 16 : 24) >> 2] < Math_fround(0.0)) {
     HEAP8[$11_1 + 99 | 0] = 7;
     HEAP8[$11_1 + 100 | 0] = 7;
    }
    label$12 : {
     if (!$19) {
      HEAP8[$11_1 + 83 | 0] = 255;
      $1_1 = $4_1;
      $2_1 = $9;
      break label$12;
     }
     HEAP8[$11_1 + 85 | 0] = 255;
     HEAP8[$11_1 + 84 | 0] = $12_1;
     label$14 : {
      if (($12_1 | 0) != -1) {
       HEAP8[(HEAP32[$0_1 + 16 >> 2] + Math_imul($12_1, 104) | 0) + 85 | 0] = $1_1;
       break label$14;
      }
      HEAP8[$0_1 + 428 | 0] = $1_1;
     }
     $2_1 = HEAPU8[$0_1 + 417 | 0];
     HEAP8[$0_1 + 417 | 0] = $2_1 + 1;
     HEAP8[$11_1 + 83 | 0] = $2_1;
     $12_1 = HEAP32[$0_1 + 52 >> 2];
     $19 = $1_1 & 31;
     if (($1_1 & 63) >>> 0 >= 32) {
      $21_1 = 1 << $19;
      $2_1 = 0;
     } else {
      $2_1 = 1 << $19;
      $21_1 = $2_1 - 1 & 1 >>> 32 - $19;
     }
     HEAP32[$0_1 + 48 >> 2] = $2_1 | HEAP32[$0_1 + 48 >> 2];
     HEAP32[$0_1 + 52 >> 2] = $12_1 | $21_1;
     $2_1 = HEAP8[$11_1 + 82 | 0];
     $12_1 = $2_1 & 31;
     if (($2_1 & 63) >>> 0 >= 32) {
      $21_1 = 1 << $12_1;
      $2_1 = 0;
     } else {
      $2_1 = 1 << $12_1;
      $21_1 = $2_1 - 1 & 1 >>> 32 - $12_1;
     }
     $12_1 = $2_1;
     $2_1 = HEAP32[$0_1 + 44 >> 2] | $21_1;
     HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] | $12_1;
     HEAP32[$0_1 + 44 >> 2] = $2_1;
     if (!HEAPU8[$11_1 + 97 | 0]) {
      $10_1 = HEAPF32[$11_1 + 64 >> 2];
      $3 = HEAPF32[$11_1 + 68 >> 2];
      $3 = $3 <= $10_1 ? $10_1 : $3;
      $10_1 = HEAPF32[$11_1 + 52 >> 2];
      $3 = Math_fround($3 - $10_1);
      if (!($20_1 & 8192)) {
       $10_1 = Math_fround(HEAPF32[$11_1 + 76 >> 2] - $10_1);
       $3 = $3 >= $10_1 ? $3 : $10_1;
      }
      label$19 : {
       if (!$17_1) {
        break label$19
       }
       $10_1 = HEAPF32[$11_1 + 28 >> 2];
       if (!($10_1 > Math_fround(0.0))) {
        break label$19
       }
       $3 = $16_1 & 1 ? ($20_1 & 32 ? $10_1 : $3) : $10_1;
      }
      $10_1 = HEAPF32[$0_1 + 156 >> 2];
      HEAPF32[$11_1 + 20 >> 2] = $3 >= $10_1 ? $3 : $10_1;
     }
     $12_1 = $20_1 & 32;
     $2_1 = !$12_1;
     label$22 : {
      if (!$17_1) {
       break label$22
      }
      $3 = HEAPF32[$11_1 + 28 >> 2];
      if (!($3 > Math_fround(0.0)) | !$12_1) {
       break label$22
      }
      HEAPF32[$11_1 + 20 >> 2] = $3;
     }
     $12_1 = $1_1;
     $1_1 = $2_1 | $4_1;
     $2_1 = $9 | HEAPU8[$11_1 + 99 | 0] != 0;
     $3 = HEAPF32[$11_1 + 20 >> 2];
     if ($20_1 & 8) {
      $8 = Math_fround($8 + $3);
      $14 = $14 + 1 | 0;
      break label$12;
     }
     $6_1 = $3 <= $6_1 ? $6_1 : $3;
     $7_1 = $7_1 + 1 | 0;
    }
    $3 = $6_1;
    $10_1 = $8;
    $4_1 = $1_1;
    $9 = $2_1;
    $2_1 = $14;
    $1_1 = $7_1;
    $16_1 = $1_1;
    $15_1 = $15_1 + 1 | 0;
    $7_1 = HEAP32[$0_1 + 84 >> 2];
    if (($15_1 | 0) < ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = $7_1;
  $11_1 = HEAP32[$0_1 + 4 >> 2];
  if (!(HEAPU8[$0_1 + 416 | 0] | !($11_1 & 8) | $11_1 & 134217728)) {
   HEAP8[$0_1 + 444 | 0] = 1
  }
  $14 = $4_1;
  $22_1 = $10_1;
  $26_1 = $3;
  HEAP8[$0_1 + 429 | 0] = $12_1;
  label$25 : {
   if (!($9 & 1)) {
    break label$25
   }
   $4_1 = HEAP32[$0_1 + 360 >> 2];
   if (($4_1 | 0) != HEAP32[$0_1 + 356 >> 2]) {
    HEAP8[$4_1 + 143 | 0] = 0
   }
   if (!($9 & 1)) {
    break label$25
   }
   HEAP8[$0_1 + 448 | 0] = 1;
  }
  HEAP16[$0_1 + 430 >> 1] = 65535;
  label$27 : {
   if (($1_1 | 0) <= 0) {
    $3 = Math_fround(0.0);
    $10_1 = Math_fround(0.0);
    break label$27;
   }
   $28_1 = Math_fround($2_1 | 0);
   $19 = HEAP32[$0_1 + 48 >> 2];
   $17_1 = HEAP32[$0_1 + 52 >> 2];
   $2_1 = $13 & 57344;
   $9 = ($2_1 | 0) != 24576;
   $15_1 = ($2_1 | 0) != 16384;
   $7_1 = 0;
   $12_1 = 0;
   $6_1 = Math_fround(0.0);
   $8 = Math_fround(0.0);
   while (1) {
    $4_1 = $7_1 & 31;
    if (($7_1 & 63) >>> 0 >= 32) {
     $21_1 = 1 << $4_1;
     $2_1 = 0;
    } else {
     $2_1 = 1 << $4_1;
     $21_1 = $2_1 - 1 & 1 >>> 32 - $4_1;
    }
    $4_1 = $2_1;
    if ($4_1 & $19 | $17_1 & $21_1) {
     $13 = HEAP32[$0_1 + 16 >> 2];
     $5_1 = $13 + Math_imul($7_1, 104) | 0;
     $2_1 = HEAP32[$5_1 >> 2];
     $20_1 = $2_1 & 32;
     label$32 : {
      if ($2_1 & 16) {
       $3 = HEAPF32[$5_1 + 20 >> 2];
       $3 = $15_1 ? $3 : HEAPU8[$5_1 + 99 | 0] ? $26_1 : $20_1 ? $26_1 : $3;
       $2_1 = HEAPU8[$5_1 + 99 | 0];
       if (!(!$2_1 & (!$20_1 | !($4_1 & HEAP32[$0_1 + 64 >> 2] | $21_1 & HEAP32[$0_1 + 68 >> 2])))) {
        HEAPF32[$5_1 + 16 >> 2] = $3
       }
       if (!(HEAPU8[$5_1 + 97 | 0] | (!HEAPU8[$0_1 + 443 | 0] | $2_1 >>> 0 < 2))) {
        $10_1 = HEAPF32[$5_1 + 16 >> 2];
        $3 = Math_fround(HEAPF32[$0_1 + 156 >> 2] * Math_fround(4.0));
        HEAPF32[$5_1 + 16 >> 2] = $3 <= $10_1 ? $10_1 : $3;
       }
       $6_1 = Math_fround($6_1 + HEAPF32[$5_1 + 16 >> 2]);
       break label$32;
      }
      $4_1 = $5_1 + 24 | 0;
      if (HEAPU8[$5_1 + 99 | 0] | HEAPF32[$5_1 + 24 >> 2] < Math_fround(0.0) | $20_1) {
       $3 = HEAPF32[$5_1 + 28 >> 2];
       $2_1 = $3 > Math_fround(0.0);
       $3 = $2_1 ? $3 : Math_fround(1.0);
       HEAPF32[$4_1 >> 2] = $2_1 | $9 ? $3 : Math_fround(Math_fround(HEAPF32[$5_1 + 20 >> 2] / $22_1) * $28_1);
      }
      $3 = HEAPF32[$4_1 >> 2];
      $2_1 = HEAP8[$0_1 + 430 | 0];
      if (!(($2_1 | 0) != -1 & HEAP8[($13 + Math_imul($2_1, 104) | 0) + 82 | 0] <= HEAP8[$5_1 + 82 | 0])) {
       HEAP8[$0_1 + 430 | 0] = $7_1
      }
      $8 = Math_fround($8 + $3);
      $2_1 = HEAP8[$0_1 + 431 | 0];
      if (!(($2_1 | 0) != -1 & HEAP8[($13 + Math_imul($2_1, 104) | 0) + 82 | 0] >= HEAP8[$5_1 + 82 | 0])) {
       HEAP8[$0_1 + 431 | 0] = $7_1
      }
     }
     HEAP8[$5_1 + 97 | 0] = 0;
     $3 = HEAPF32[$0_1 + 164 >> 2];
     $6_1 = Math_fround(Math_fround($3 + $3) + $6_1);
    }
    $3 = $8;
    $10_1 = $6_1;
    $7_1 = $7_1 + 1 | 0;
    $12_1 = $7_1 ? $12_1 : $12_1 + 1 | 0;
    if ($12_1 | ($1_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  $22_1 = $3;
  HEAP8[$0_1 + 418 | 0] = $16_1;
  $8 = HEAPF32[$0_1 + 160 >> 2];
  $2_1 = HEAP8[$0_1 + 417 | 0];
  $3 = Math_fround(Math_fround($8 + $8) + Math_fround(Math_fround(HEAPF32[$0_1 + 172 >> 2] + HEAPF32[$0_1 + 176 >> 2]) * Math_fround($2_1 - 1 | 0)));
  $32_1 = HEAPF32[$0_1 + 244 >> 2];
  $6_1 = !($11_1 & 16777216) | HEAPF32[$0_1 + 188 >> 2] != Math_fround(0.0) ? Math_fround(HEAPF32[$0_1 + 252 >> 2] - $32_1) : Math_fround(HEAPF32[$0_1 + 268 >> 2] - HEAPF32[$0_1 + 260 >> 2]);
  $27_1 = HEAPF32[$0_1 + 248 >> 2];
  $8 = HEAPF32[$0_1 + 164 >> 2];
  HEAPF32[$0_1 + 192 >> 2] = Math_fround(Math_fround($8 + $8) * Math_fround($2_1 | 0)) + $3;
  $3 = Math_fround(Math_fround($6_1 - $3) - $10_1);
  label$49 : {
   if (($1_1 | 0) <= 0) {
    $8 = $3;
    break label$49;
   }
   $4_1 = HEAP32[$0_1 + 48 >> 2];
   $15_1 = HEAP32[$0_1 + 52 >> 2];
   $7_1 = 0;
   $12_1 = 0;
   $6_1 = $3;
   while (1) {
    $2_1 = $7_1 & 31;
    if ((($7_1 & 63) >>> 0 >= 32 ? $15_1 >>> $2_1 | 0 : ((1 << $2_1) - 1 & $15_1) << 32 - $2_1 | $4_1 >>> $2_1) & 1) {
     $9 = HEAP32[$0_1 + 16 >> 2] + Math_imul($7_1, 104) | 0;
     $2_1 = HEAP32[$9 >> 2];
     if ($2_1 & 8) {
      $10_1 = Math_fround($3 * Math_fround(HEAPF32[$9 + 24 >> 2] / $22_1));
      $8 = HEAPF32[$0_1 + 156 >> 2];
      $8 = Math_fround(($8 <= $10_1 ? $10_1 : $8) + Math_fround(.009999999776482582));
      label$56 : {
       if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
        $16_1 = ~~$8;
        break label$56;
       }
       $16_1 = -2147483648;
      }
      $8 = Math_fround($16_1 | 0);
      HEAPF32[$9 + 16 >> 2] = $8;
      $6_1 = Math_fround($6_1 - $8);
     }
     if (!(HEAPU8[$0_1 + 430 | 0] == 255 | HEAPU8[$9 + 85 | 0] != 255)) {
      HEAP32[$9 >> 2] = $2_1 | 1073741824
     }
     $10_1 = HEAPF32[$9 + 16 >> 2];
     $8 = HEAPF32[$0_1 + 156 >> 2];
     $8 = $8 <= $10_1 ? $10_1 : $8;
     label$59 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$8;
       break label$59;
      }
      $2_1 = -2147483648;
     }
     $8 = Math_fround($2_1 | 0);
     HEAPF32[$9 + 4 >> 2] = $8;
     HEAPF32[$0_1 + 192 >> 2] = HEAPF32[$0_1 + 192 >> 2] + $8;
    }
    $8 = $6_1;
    $7_1 = $7_1 + 1 | 0;
    $12_1 = $7_1 ? $12_1 : $12_1 + 1 | 0;
    if ($12_1 | ($1_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  $6_1 = $8;
  label$61 : {
   if (!($6_1 >= Math_fround(1.0)) | $11_1 & 524288 | (!($22_1 > Math_fround(0.0)) | !($6_1 >= Math_fround(1.0))) | ($1_1 | 0) <= 0) {
    break label$61
   }
   $15_1 = HEAP32[$0_1 + 40 >> 2];
   $9 = HEAP32[$0_1 + 44 >> 2];
   $2_1 = $1_1;
   $12_1 = 0;
   while (1) {
    $1_1 = $1_1 - 1 | 0;
    $4_1 = $1_1 & 31;
    label$63 : {
     if (!((($1_1 & 63) >>> 0 >= 32 ? $9 >>> $4_1 | 0 : ((1 << $4_1) - 1 & $9) << 32 - $4_1 | $15_1 >>> $4_1) & 1)) {
      break label$63
     }
     $4_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul(HEAP8[HEAP32[$0_1 + 24 >> 2] + $1_1 | 0], 104) | 0;
     if (!(HEAPU8[$4_1 | 0] & 8)) {
      break label$63
     }
     HEAPF32[$4_1 + 16 >> 2] = HEAPF32[$4_1 + 16 >> 2] + Math_fround(1.0);
     HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$4_1 + 4 >> 2] + Math_fround(1.0);
     $6_1 = Math_fround($6_1 + Math_fround(-1.0));
    }
    if (!($22_1 > Math_fround(0.0)) | !($6_1 >= Math_fround(1.0))) {
     break label$61
    }
    $7_1 = $12_1;
    $4_1 = $7_1 - 1 | 0;
    $16_1 = $4_1 + 1 | 0;
    $12_1 = $4_1;
    $4_1 = $2_1;
    $2_1 = $2_1 - 1 | 0;
    $12_1 = ($2_1 | 0) != -1 ? $16_1 : $12_1;
    if ($4_1 >>> 0 > 1 & ($7_1 | 0) >= 0 | ($7_1 | 0) > 0) {
     continue
    }
    break;
   };
  }
  HEAP16[$0_1 + 420 >> 1] = 65535;
  $22_1 = HEAPF32[$0_1 + 220 >> 2];
  $10_1 = HEAPF32[$0_1 + 212 >> 2];
  $3 = HEAPF32[$0_1 + 224 >> 2];
  $6_1 = HEAPF32[$0_1 + 216 >> 2];
  $8 = Math_fround($6_1 + HEAPF32[$0_1 + 180 >> 2]);
  HEAPF32[$18_1 + 44 >> 2] = $3 >= $8 ? $3 : $8;
  HEAPF32[$18_1 + 40 >> 2] = $22_1;
  HEAPF32[$18_1 + 36 >> 2] = $6_1;
  HEAPF32[$18_1 + 32 >> 2] = $10_1;
  $20_1 = $91($18_1 + 32 | 0, 0);
  $2_1 = HEAP8[$0_1 + 436 | 0];
  $8 = ($2_1 | 0) > 0 ? HEAPF32[$0_1 + 212 >> 2] : $32_1;
  HEAP32[$0_1 + 56 >> 2] = 0;
  HEAP32[$0_1 + 60 >> 2] = 0;
  $1_1 = $0_1 - -64 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 84 >> 2];
  $9 = $1_1;
  if (($1_1 | 0) > 0) {
   $13 = $0_1 + 40 | 0;
   $17_1 = $0_1 + 56 | 0;
   $23_1 = HEAPF32[$0_1 + 264 >> 2];
   $24 = HEAPF32[$0_1 + 272 >> 2];
   $25_1 = HEAPF32[$0_1 + 268 >> 2];
   $7_1 = 0;
   $12_1 = 0;
   $6_1 = Math_fround(Math_fround($8 + HEAPF32[$0_1 + 160 >> 2]) - HEAPF32[$0_1 + 172 >> 2]);
   $1_1 = ($2_1 | 0) > 0;
   $2_1 = 0;
   $8 = HEAPF32[$0_1 + 260 >> 2];
   while (1) {
    $11_1 = HEAP8[$7_1 + HEAP32[$0_1 + 24 >> 2] | 0];
    $5_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($11_1, 104) | 0;
    HEAP8[$5_1 + 98 | 0] = ($11_1 | 0) < HEAP8[$0_1 + 436 | 0] | HEAP8[$0_1 + 434 | 0] > 0;
    $15_1 = $1_1;
    if (!(!($1_1 & 1) | HEAP8[$0_1 + 436 | 0] != ($2_1 | 0))) {
     $15_1 = 0;
     $6_1 = Math_fround($6_1 + Math_fround($32_1 - HEAPF32[$0_1 + 212 >> 2]));
    }
    HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] & -251658241;
    $1_1 = HEAP32[$13 + 4 >> 2];
    $4_1 = $7_1 & 31;
    label$72 : {
     if (!((($7_1 & 63) >>> 0 >= 32 ? $1_1 >>> $4_1 | 0 : ((1 << $4_1) - 1 & $1_1) << 32 - $4_1 | HEAP32[$13 >> 2] >>> $4_1) & 1)) {
      HEAPF32[$5_1 + 52 >> 2] = $6_1;
      HEAPF32[$5_1 + 12 >> 2] = $6_1;
      HEAPF32[$5_1 + 8 >> 2] = $6_1;
      HEAP32[$5_1 + 4 >> 2] = 0;
      HEAP8[$5_1 + 93 | 0] = 0;
      HEAP8[$5_1 + 94 | 0] = 0;
      HEAP8[$5_1 + 95 | 0] = 0;
      HEAP8[$5_1 + 96 | 0] = 1;
      HEAP32[$5_1 + 60 >> 2] = 1065353216;
      $3 = $6_1 < $8 ? $8 : $6_1 > $25_1 ? $25_1 : $6_1;
      HEAPF32[$5_1 + 32 >> 2] = $3;
      HEAPF32[$5_1 + 36 >> 2] = $23_1 > $27_1 ? $23_1 : $24 < $27_1 ? $24 : $27_1;
      HEAPF32[$5_1 + 44 >> 2] = $23_1 > Math_fround(3402823466385288598117041.0e14) ? $23_1 : $24 < Math_fround(3402823466385288598117041.0e14) ? $24 : Math_fround(3402823466385288598117041.0e14);
      HEAPF32[$5_1 + 40 >> 2] = $3;
      break label$72;
     }
     label$74 : {
      if (!$20_1) {
       break label$74
      }
      $3 = HEAPF32[$31_1 + 228 >> 2];
      if (!($3 >= HEAPF32[$5_1 + 32 >> 2]) | !($3 < HEAPF32[$5_1 + 40 >> 2])) {
       break label$74
      }
      HEAP8[$0_1 + 420 | 0] = $11_1;
     }
     HEAPF32[$5_1 + 8 >> 2] = $6_1;
     $29_1 = HEAPF32[$0_1 + 164 >> 2];
     $33_1 = Math_fround($29_1 + $29_1);
     $28_1 = HEAPF32[$0_1 + 156 >> 2];
     $26_1 = HEAPF32[$0_1 + 172 >> 2];
     $30 = HEAPF32[$0_1 + 176 >> 2];
     $3 = Math_fround(Math_fround(Math_fround($33_1 + $28_1) + $26_1) + $30);
     $1_1 = HEAP32[$0_1 + 4 >> 2];
     label$75 : {
      if ($1_1 & 16777216) {
       $4_1 = HEAP8[$0_1 + 435 | 0];
       $1_1 = HEAP8[$5_1 + 82 | 0];
       $10_1 = Math_fround(3402823466385288598117041.0e14);
       if (($4_1 | 0) <= ($1_1 | 0)) {
        break label$75
       }
       $10_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 268 >> 2] - Math_fround(Math_fround($4_1 - $1_1 | 0) * $3)) - HEAPF32[$5_1 + 8 >> 2]) - HEAPF32[$0_1 + 160 >> 2]) - $29_1) - $30);
       break label$75;
      }
      $10_1 = Math_fround(3402823466385288598117041.0e14);
      if ($1_1 & 262144) {
       break label$75
      }
      $10_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 252 >> 2] - Math_fround(Math_fround(HEAP8[$0_1 + 417 | 0] + (HEAP8[$5_1 + 83 | 0] ^ -1) | 0) * $3)) - HEAPF32[$5_1 + 8 >> 2]) - $30) - $33_1) - HEAPF32[$0_1 + 160 >> 2]);
     }
     HEAPF32[$5_1 + 52 >> 2] = Math_fround($6_1 + $29_1) + $26_1;
     HEAP8[$5_1 + 94 | 0] = 1;
     $22_1 = $6_1 < $8 ? $8 : $6_1 > $25_1 ? $25_1 : $6_1;
     HEAPF32[$5_1 + 32 >> 2] = $22_1;
     HEAPF32[$5_1 + 36 >> 2] = $23_1 > $27_1 ? $23_1 : $24 < $27_1 ? $24 : $27_1;
     HEAPF32[$5_1 + 44 >> 2] = $23_1 > Math_fround(3402823466385288598117041.0e14) ? $23_1 : $24 < Math_fround(3402823466385288598117041.0e14) ? $24 : Math_fround(3402823466385288598117041.0e14);
     $3 = HEAPF32[$5_1 + 4 >> 2];
     $10_1 = $3 < $10_1 ? $3 : $10_1;
     $3 = HEAPF32[$5_1 + 16 >> 2];
     $3 = $3 < $28_1 ? $3 : $28_1;
     $10_1 = $3 <= $10_1 ? $10_1 : $3;
     HEAPF32[$5_1 + 4 >> 2] = $10_1;
     $1_1 = $5_1;
     $3 = Math_fround($10_1 * Math_fround(.6499999761581421));
     label$77 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $9 = ~~$3;
       break label$77;
      }
      $9 = -2147483648;
     }
     HEAPF32[$1_1 + 60 >> 2] = $9 | 0;
     $3 = Math_fround($33_1 + Math_fround($30 + Math_fround($26_1 + Math_fround($6_1 + $10_1))));
     HEAPF32[$5_1 + 12 >> 2] = $3;
     HEAPF32[$5_1 + 56 >> 2] = Math_fround($3 - $29_1) - $30;
     $3 = $3 < $8 ? $8 : $3 > $25_1 ? $25_1 : $3;
     HEAPF32[$5_1 + 40 >> 2] = $3;
     $16_1 = $3 > $22_1;
     HEAP8[$5_1 + 93 | 0] = $16_1;
     label$79 : {
      label$80 : {
       label$81 : {
        if ($16_1) {
         $19 = HEAP32[$17_1 + 4 >> 2];
         $4_1 = $11_1 & 31;
         $1_1 = $17_1;
         if (($11_1 & 63) >>> 0 >= 32) {
          $4_1 = 1 << $4_1;
          $9 = 0;
         } else {
          $9 = 1 << $4_1;
          $4_1 = $9 - 1 & 1 >>> 32 - $4_1;
         }
         HEAP32[$1_1 >> 2] = $9 | HEAP32[$1_1 >> 2];
         HEAP32[$1_1 + 4 >> 2] = $4_1 | $19;
         break label$81;
        }
        if (HEAPU8[$5_1 + 99 | 0]) {
         break label$81
        }
        $1_1 = HEAPU8[$5_1 + 100 | 0];
        HEAP8[$5_1 + 95 | 0] = ($1_1 | 0) != 0;
        if (!$1_1) {
         break label$79
        }
        break label$80;
       }
       HEAP8[$5_1 + 95 | 0] = 1;
      }
      $4_1 = HEAP32[$0_1 + 68 >> 2];
      $9 = $11_1 & 31;
      if (($11_1 & 63) >>> 0 >= 32) {
       $21_1 = 1 << $9;
       $1_1 = 0;
      } else {
       $1_1 = 1 << $9;
       $21_1 = $1_1 - 1 & 1 >>> 32 - $9;
      }
      HEAP32[$0_1 + 64 >> 2] = $1_1 | HEAP32[$0_1 + 64 >> 2];
      HEAP32[$0_1 + 68 >> 2] = $4_1 | $21_1;
     }
     HEAP8[$5_1 + 96 | 0] = HEAPU8[$5_1 + 90 | 0] ? HEAPU8[$0_1 + 455 | 0] : 1;
     $1_1 = HEAP32[$5_1 >> 2] | ($16_1 ? 50331648 : 16777216);
     HEAP32[$5_1 >> 2] = $1_1;
     if (HEAPU8[$5_1 + 86 | 0] != 255) {
      HEAP32[$5_1 >> 2] = $1_1 | 67108864
     }
     if (HEAPU8[$0_1 + 420 | 0] == ($11_1 & 255)) {
      HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 134217728
     }
     $3 = HEAPF32[$5_1 + 52 >> 2];
     HEAPF32[$5_1 + 76 >> 2] = $3;
     HEAPF32[$5_1 + 64 >> 2] = $3;
     HEAPF32[$5_1 + 68 >> 2] = $3;
     HEAPF32[$5_1 + 72 >> 2] = $3;
     if (!HEAPU8[$0_1 + 455 | 0]) {
      HEAP8[$5_1 + 99 | 0] = HEAPU8[$5_1 + 99 | 0] >>> 1;
      HEAP8[$5_1 + 100 | 0] = HEAPU8[$5_1 + 100 | 0] >>> 1;
     }
     if (HEAP8[$0_1 + 436 | 0] > ($2_1 | 0)) {
      $3 = Math_fround(HEAPF32[$5_1 + 12 >> 2] + Math_fround(1.0));
      $8 = $3 < $8 ? $8 : $3 > $25_1 ? $25_1 : $3;
     }
     $2_1 = $2_1 + 1 | 0;
     $3 = $6_1;
     $6_1 = HEAPF32[$0_1 + 164 >> 2];
     $6_1 = Math_fround($3 + Math_fround(Math_fround($6_1 + $6_1) + Math_fround(Math_fround(HEAPF32[$5_1 + 4 >> 2] + HEAPF32[$0_1 + 172 >> 2]) + HEAPF32[$0_1 + 176 >> 2])));
    }
    $1_1 = $15_1;
    $7_1 = $7_1 + 1 | 0;
    $12_1 = $7_1 ? $12_1 : $12_1 + 1 | 0;
    $9 = HEAP32[$0_1 + 84 >> 2];
    $4_1 = $9 >> 31;
    if (($12_1 | 0) <= ($4_1 | 0) & $7_1 >>> 0 < $9 >>> 0 | ($4_1 | 0) > ($12_1 | 0)) {
     continue
    }
    break;
   };
  }
  $6_1 = HEAPF32[$0_1 + 244 >> 2];
  $8 = HEAPF32[(HEAP32[$0_1 + 16 >> 2] + Math_imul(HEAP8[$0_1 + 429 | 0], 104) | 0) + 40 >> 2];
  $6_1 = $6_1 >= $8 ? $6_1 : $8;
  if (!(!($6_1 <= HEAPF32[$31_1 + 228 >> 2]) | (!$20_1 | HEAPU8[$0_1 + 420 | 0] != 255))) {
   HEAP8[$0_1 + 420 | 0] = $9
  }
  label$91 : {
   if ($14 & 1) {
    break label$91
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   if (!($1_1 & 1)) {
    break label$91
   }
   HEAP32[$0_1 + 4 >> 2] = $1_1 & -2;
  }
  if (HEAPU8[$0_1 + 431 | 0] != 255) {
   HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] & -65537
  }
  if (HEAP8[$0_1 + 6 | 0] & 1) {
   HEAPF32[$0_1 + 220 >> 2] = $6_1;
   HEAPF32[$0_1 + 252 >> 2] = $6_1;
   $1_1 = $0_1 + 268 | 0;
   $8 = HEAPF32[$1_1 >> 2];
   HEAPF32[$1_1 >> 2] = $6_1 > $8 ? $8 : $6_1;
  }
  $7_1 = $0_1 + 244 | 0;
  $1_1 = HEAP32[$7_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 360 >> 2];
  HEAP32[$2_1 + 480 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$2_1 + 484 >> 2] = $1_1;
  $4_1 = $2_1 + 488 | 0;
  $2_1 = $7_1 + 8 | 0;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  HEAPF32[$0_1 + 144 >> 2] = HEAPF32[$0_1 + 260 >> 2];
  HEAPF32[$0_1 + 148 >> 2] = HEAPF32[$0_1 + 268 >> 2];
  $2_1 = HEAP32[$0_1 + 56 >> 2] != HEAP32[$0_1 + 48 >> 2] | HEAP32[$0_1 + 60 >> 2] != HEAP32[$0_1 + 52 >> 2] | HEAP32[$0_1 + 84 >> 2] > HEAP8[$0_1 + 417 | 0];
  $1_1 = HEAP8[$0_1 + 434 | 0] > 0 ? 2 : 1;
  $4_1 = HEAPU8[$0_1 + 6 | 0] & 16 ? 1 : HEAP8[$0_1 + 417 | 0];
  $1_1 = $2_1 + (($1_1 + 1 | 0) + Math_imul($1_1, $4_1) | 0) | 0;
  $420(HEAP32[$0_1 + 376 >> 2], $1_1);
  HEAP8[$0_1 + 439 | 0] = 1;
  $14 = $2_1 ? $1_1 - 1 | 0 : -1;
  HEAP8[$0_1 + 438 | 0] = $14;
  $1_1 = HEAP8[$0_1 + 434 | 0];
  HEAP8[$0_1 + 440 | 0] = ($1_1 | 0) <= 0 ? 1 : $4_1 + 2 | 0;
  $7_1 = HEAP32[$0_1 + 84 >> 2];
  if (($7_1 | 0) > 0) {
   $4_1 = ($1_1 | 0) > 0 ? $4_1 + 1 | 0 : 0;
   $2_1 = HEAP32[$0_1 + 16 >> 2];
   $15_1 = 2;
   $1_1 = 0;
   while (1) {
    $9 = Math_imul($1_1, 104) + $2_1 | 0;
    label$5 : {
     if (!(!HEAPU8[$9 + 93 | 0] | !HEAPU8[$9 + 94 | 0])) {
      HEAP8[$9 + 89 | 0] = $4_1 + $15_1;
      HEAP8[$9 + 88 | 0] = $15_1;
      $15_1 = ((HEAP32[$0_1 + 4 >> 2] ^ -1) >>> 20 & 1) + $15_1 | 0;
      break label$5;
     }
     HEAP8[$9 + 88 | 0] = $14;
     HEAP8[$9 + 89 | 0] = $14;
    }
    HEAP8[$9 + 87 | 0] = HEAPU8[$9 + 88 | 0];
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($7_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0_1 + 264 >> 2];
  HEAP32[$0_1 + 276 >> 2] = HEAP32[$0_1 + 260 >> 2];
  HEAP32[$0_1 + 280 >> 2] = $1_1;
  $4_1 = $0_1 + 268 | 0;
  $2_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $0_1 + 284 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 + 356 >> 2];
  $1_1 = $2_1 + 504 | 0;
  $9 = HEAP32[$1_1 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $14 = HEAP32[$2_1 + 496 >> 2];
  $7_1 = HEAP32[$2_1 + 500 >> 2];
  $1_1 = HEAP32[$0_1 + 328 >> 2];
  HEAP32[$0_1 + 308 >> 2] = HEAP32[$0_1 + 324 >> 2];
  HEAP32[$0_1 + 312 >> 2] = $1_1;
  $4_1 = $0_1 + 332 | 0;
  $2_1 = HEAP32[$4_1 + 4 >> 2];
  $1_1 = $0_1 + 316 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 292 >> 2] = $14;
  HEAP32[$0_1 + 296 >> 2] = $7_1;
  $1_1 = $0_1 + 300 | 0;
  HEAP32[$1_1 >> 2] = $9;
  HEAP32[$1_1 + 4 >> 2] = $15_1;
  if (HEAP8[$0_1 + 4 | 0] & 1) {
   $16_1 = 0;
   $19 = 0;
   $13 = global$0 - 32 | 0;
   global$0 = $13;
   $12_1 = HEAP32[$0_1 + 84 >> 2];
   if (($12_1 | 0) > 0) {
    $6_1 = HEAPF32[$0_1 + 224 >> 2];
    $10_1 = HEAPF32[$0_1 + 216 >> 2];
    $8 = Math_fround($10_1 + HEAPF32[$0_1 + 180 >> 2]);
    $6_1 = $6_1 >= $8 ? $6_1 : $8;
    $8 = Math_fround($10_1 + HEAPF32[$0_1 + 184 >> 2]);
    $15_1 = HEAP32[18392];
    $14 = $0_1 + 5 | 0;
    while (1) {
     $1_1 = HEAP32[$0_1 + 44 >> 2];
     $2_1 = $16_1 & 31;
     label$31 : {
      if (!((($16_1 & 63) >>> 0 >= 32 ? $1_1 >>> $2_1 | 0 : ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | HEAP32[$0_1 + 40 >> 2] >>> $2_1) & 1)) {
       break label$31
      }
      $17_1 = HEAP8[$16_1 + HEAP32[$0_1 + 24 >> 2] | 0];
      $7_1 = Math_imul($17_1, 104);
      $9 = $7_1 + HEAP32[$0_1 + 16 >> 2] | 0;
      if (HEAP32[$9 >> 2] & 1073741856) {
       break label$31
      }
      $4_1 = HEAPU8[$14 | 0] & 8;
      if (!(HEAPU8[$0_1 + 445 | 0] | !$4_1) | !HEAPU8[$9 + 93 | 0] & HEAPU8[$0_1 + 424 | 0] != ($17_1 & 255)) {
       break label$31
      }
      $2_1 = HEAP32[$0_1 >> 2];
      $1_1 = HEAP16[$0_1 + 96 >> 1];
      $3 = HEAPF32[$9 + 12 >> 2];
      HEAPF32[$13 + 28 >> 2] = $4_1 ? $8 : $6_1;
      HEAPF32[$13 + 20 >> 2] = $10_1;
      HEAPF32[$13 + 24 >> 2] = $3 + Math_fround(4.0);
      HEAPF32[$13 + 16 >> 2] = $3 + Math_fround(-4.0);
      $1_1 = (($2_1 + $17_1 | 0) + Math_imul($1_1, $12_1) | 0) + 1 | 0;
      $79($1_1);
      HEAP8[$13 + 15 | 0] = 0;
      HEAP8[$13 + 14 | 0] = 0;
      label$6 : {
       if (!$569($13 + 16 | 0, $1_1, $13 + 15 | 0, $13 + 14 | 0, 268560)) {
        break label$6
       }
       if (!$178(0)) {
        break label$6
       }
       $1_1 = HEAP32[$0_1 + 16 >> 2] + $7_1 | 0;
       if (HEAPU8[$1_1 + 90 | 0]) {
        HEAP8[$1_1 + 100 | 0] = 1;
        HEAP8[$0_1 + 422 | 0] = $17_1;
       }
       $86();
       HEAP8[$13 + 14 | 0] = 0;
       HEAP8[$13 + 15 | 0] = 0;
      }
      $2_1 = HEAPU8[$13 + 14 | 0];
      if ($2_1) {
       if (HEAPU8[$0_1 + 424 | 0] == 255) {
        $1_1 = HEAP8[$0_1 + 429 | 0];
        if (($1_1 | 0) == -1) {
         $3 = Math_fround(-3402823466385288598117041.0e14)
        } else {
         $3 = HEAPF32[(HEAP32[$0_1 + 16 >> 2] + Math_imul($1_1, 104) | 0) + 12 >> 2]
        }
        HEAPF32[$0_1 + 204 >> 2] = $3;
       }
       HEAP8[$0_1 + 423 | 0] = $17_1;
       HEAP16[$0_1 + 98 >> 1] = HEAPU16[$0_1 + 96 >> 1];
      }
      label$122 : {
       if (HEAPU8[$13 + 15 | 0]) {
        if (HEAPF32[$15_1 + 7128 >> 2] > Math_fround(.05999999865889549) | $2_1) {
         break label$122
        }
        break label$31;
       }
       if (!$2_1) {
        break label$31
       }
      }
      HEAP8[$0_1 + 421 | 0] = $17_1;
      $188(4);
     }
     $16_1 = $16_1 + 1 | 0;
     $19 = $16_1 ? $19 : $19 + 1 | 0;
     $12_1 = HEAP32[$0_1 + 84 >> 2];
     $1_1 = $12_1 >> 31;
     if ($12_1 >>> 0 > $16_1 >>> 0 & ($1_1 | 0) >= ($19 | 0) | ($1_1 | 0) > ($19 | 0)) {
      continue
     }
     break;
    };
   }
   global$0 = $13 + 32 | 0;
  }
  HEAP8[$0_1 + 445 | 0] = 0;
  HEAP8[$0_1 + 441 | 0] = 1;
  HEAP32[$0_1 + 184 >> 2] = 0;
  label$95 : {
   if (!HEAPU8[$0_1 + 446 | 0] | HEAPU16[$0_1 + 96 >> 1] != HEAPU16[$0_1 + 98 >> 1]) {
    break label$95
   }
   if ($320($23(1873, HEAP32[$0_1 >> 2]), 321)) {
    label$10 : {
     if (HEAPU8[HEAP32[HEAP32[18392] + 7080 >> 2] + 143 | 0]) {
      break label$10
     }
     $1_1 = -1;
     $2_1 = HEAP8[$0_1 + 432 | 0];
     if (($2_1 | 0) >= 0) {
      $1_1 = ($2_1 | 0) >= HEAP32[$0_1 + 84 >> 2] ? -1 : $2_1
     }
     if (($1_1 | 0) == -1) {
      $2_1 = 0
     } else {
      $2_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($1_1, 104) | 0
     }
     $7_1 = HEAP32[$0_1 + 4 >> 2] & 1;
     label$54 : {
      if (!$7_1) {
       break label$54
      }
      label$65 : {
       if (!$2_1) {
        break label$65
       }
       if (!$742(11008, 0, 0, HEAPU8[$2_1 | 0] & 32 ? 0 : HEAPU8[$2_1 + 90 | 0] != 0)) {
        break label$65
       }
       $2_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($1_1, 104) | 0;
       if (!HEAPU8[$2_1 + 90 | 0]) {
        break label$65
       }
       HEAP8[$2_1 + 100 | 0] = 1;
       HEAP8[$0_1 + 422 | 0] = $1_1;
      }
      label$8 : {
       if (HEAPU8[$0_1 + 418 | 0] == HEAPU8[$0_1 + 417 | 0]) {
        $1_1 = 8223;
        if ((HEAP32[$0_1 + 4 >> 2] & 57344) != 16384) {
         break label$8
        }
       }
       $1_1 = 8185;
      }
      if (!$742($1_1, 0, 0, 1)) {
       break label$54
      }
      $4_1 = HEAP32[$0_1 + 84 >> 2];
      if (($4_1 | 0) <= 0) {
       break label$54
      }
      $2_1 = HEAP32[$0_1 + 16 >> 2];
      $1_1 = 0;
      while (1) {
       $14 = $2_1 + Math_imul($1_1, 104) | 0;
       if (HEAPU8[$14 + 90 | 0] | HEAPU8[$14 | 0] & 8) {
        HEAP8[$14 + 99 | 0] = 2;
        HEAP8[$14 + 100 | 0] = 1;
       }
       $1_1 = $1_1 + 1 | 0;
       if (($4_1 | 0) != ($1_1 | 0)) {
        continue
       }
       break;
      };
     }
     $1_1 = $7_1;
     label$13 : {
      if (!(HEAPU8[$0_1 + 4 | 0] & 2)) {
       break label$13
      }
      $1_1 = 1;
      if (!$742(6359, 0, 0, !HEAPU8[$0_1 + 449 | 0])) {
       break label$13
      }
      HEAP8[$0_1 + 451 | 0] = 1;
      $1_1 = 1;
     }
     if (!(HEAPU8[$0_1 + 4 | 0] & 4)) {
      break label$10
     }
     if ($1_1) {
      $594()
     }
     $224(32, 1);
     if (HEAP32[$0_1 + 84 >> 2] > 0) {
      $1_1 = 0;
      while (1) {
       $2_1 = $1_1;
       $14 = HEAP32[$0_1 + 16 >> 2] + Math_imul($1_1, 104) | 0;
       $4_1 = HEAP32[$14 >> 2];
       label$17 : {
        if ($4_1 & 1) {
         break label$17
        }
        $4_1 = $4_1 & 128;
        $7_1 = HEAPU8[$14 + 91 | 0];
        $4_1 = $7_1 ? !$4_1 & HEAP8[$0_1 + 417 | 0] > 1 : !$4_1;
        label$18 : {
         if (!HEAPU8[$0_1 + 441 | 0]) {
          $9 = 19354;
          if (($2_1 | 0) >= HEAP8[$0_1 + 419 | 0]) {
           break label$18
          }
         }
         $1_1 = HEAP16[$14 + 80 >> 1];
         $9 = 19354;
         if (($1_1 | 0) == -1) {
          break label$18
         }
         $9 = $1_1 + HEAP32[$0_1 + 372 >> 2] | 0;
        }
        $1_1 = $9;
        if (!(HEAPU8[$1_1 | 0] ? $1_1 : 0)) {
         $1_1 = 16029
        }
        if (!$742($1_1, 0, ($7_1 | 0) != 0, $4_1)) {
         break label$17
        }
        HEAP8[$14 + 92 | 0] = HEAPU8[$14 + 91 | 0] ^ 1;
       }
       $1_1 = $2_1 + 1 | 0;
       if (($1_1 | 0) < HEAP32[$0_1 + 84 >> 2]) {
        continue
       }
       break;
      };
     }
     $225();
    }
    $321();
    break label$95;
   }
   HEAP8[$0_1 + 446 | 0] = 0;
  }
  if (!(!HEAPU8[$0_1 + 444 | 0] | !(HEAPU8[$0_1 + 4 | 0] & 8))) {
   $501($0_1)
  }
  $4_1 = HEAP32[$0_1 + 360 >> 2];
  label$98 : {
   if (HEAPU8[$0_1 + 6 | 0] & 16) {
    $422(HEAP32[$0_1 + 376 >> 2], HEAP32[$4_1 + 580 >> 2], 2);
    break label$98;
   }
   $2_1 = HEAP32[$4_1 + 580 >> 2];
   $7_1 = HEAP32[$4_1 + 500 >> 2];
   $1_1 = HEAP32[$4_1 + 496 >> 2];
   HEAP32[$18_1 + 24 >> 2] = $1_1;
   HEAP32[$18_1 + 28 >> 2] = $7_1;
   $0_1 = $4_1 + 504 | 0;
   $4_1 = HEAP32[$0_1 >> 2];
   $0_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$18_1 + 16 >> 2] = $4_1;
   HEAP32[$18_1 + 20 >> 2] = $0_1;
   HEAP32[$18_1 + 8 >> 2] = $1_1;
   HEAP32[$18_1 + 12 >> 2] = $7_1;
   HEAP32[$18_1 >> 2] = $4_1;
   HEAP32[$18_1 + 4 >> 2] = $0_1;
   $378($2_1, $18_1 + 8 | 0, $18_1, 0);
  }
  global$0 = $18_1 + 48 | 0;
 }
 
 function $497($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  label$1 : {
   if ($2_1 & 24) {
    break label$1
   }
   $3 = HEAP32[$0_1 + 4 >> 2] & 57344;
   if (!(($3 | 0) != 16384 & ($3 | 0) != 8192)) {
    $2_1 = $2_1 | 16;
    break label$1;
   }
   $2_1 = $2_1 | 8;
  }
  $3 = (HEAP32[$0_1 + 4 >> 2] ^ -1) << 5 & 32 | $2_1;
  $2_1 = ($2_1 & 3072) == 3072 ? $3 | 512 : $3;
  if (!($2_1 & 196608)) {
   $2_1 = (HEAP32[$0_1 + 16 >> 2] == ($1_1 | 0) ? 65536 : 131072) | $2_1
  }
  HEAP8[$1_1 + 102 | 0] = 0;
  $8 = HEAPU8[$1_1 + 101 | 0] & 3;
  HEAP8[$1_1 + 101 | 0] = $8;
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] & 251658240 | $2_1;
  $9 = HEAP32[$0_1 + 4 >> 2];
  label$7 : {
   if (!($9 & 8)) {
    break label$7
   }
   $3 = $2_1 & 17408;
   $7_1 = ($3 | 0) == 16384;
   $10_1 = $2_1 & 34816;
   $5_1 = ($10_1 | 0) == 32768;
   $6_1 = $5_1 ? ($7_1 ? 2 : 1) : $7_1;
   $2_1 = $7_1 << 1;
   $4_1 = $5_1 ? $2_1 | 4 : $2_1;
   $2_1 = $7_1 | ($5_1 ? ($7_1 ? 8 : 2) : 0);
   label$8 : {
    if ($3) {
     $5_1 = $4_1;
     $4_1 = $6_1;
     break label$8;
    }
    $5_1 = $4_1 | 2;
    $2_1 = 1 << ($6_1 << 1) | $2_1;
    $4_1 = $6_1 + 1 | 0;
   }
   if (!$10_1) {
    $5_1 = $5_1 | 4;
    $2_1 = $2_1 | 2 << ($4_1 << 1);
    $4_1 = $4_1 + 1 | 0;
   }
   $3 = $4_1;
   HEAP8[$1_1 + 102 | 0] = $2_1;
   $4_1 = !$3 | ($9 & 134217728) >>> 27;
   $6_1 = $4_1 | $5_1;
   $3 = $3 + $4_1 << 2 & 12 | $6_1 << 4;
   HEAP8[$1_1 + 101 | 0] = $3 | $8;
   if ($6_1 >>> $8 & 1 | HEAPU8[$1_1 + 86 | 0] == 255) {
    break label$7
   }
   HEAP8[$1_1 + 101 | 0] = $3 | $2_1 & 3;
   HEAP8[$0_1 + 444 | 0] = 1;
  }
 }
 
 function $501($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0;
  $11_1 = HEAPU8[$0_1 + 444 | 0];
  if ($11_1) {
   $4_1 = 1;
   $9 = HEAP32[$0_1 + 84 >> 2];
   if (($9 | 0) > 0) {
    $10_1 = HEAP32[$0_1 + 16 >> 2];
    $4_1 = 0;
    while (1) {
     $3 = $10_1 + Math_imul($2_1, 104) | 0;
     $6_1 = $3 + 86 | 0;
     if (!(HEAPU8[$3 + 90 | 0] | HEAPU8[$3 + 86 | 0] == 255)) {
      HEAP8[$6_1 | 0] = 255
     }
     $3 = HEAP8[$6_1 | 0];
     $6_1 = $3 >> 31;
     $8 = ($3 & $6_1) != -1;
     $1_1 = $8 + $1_1 | 0;
     $6_1 = $3 & 31;
     if (($3 & 63) >>> 0 >= 32) {
      $3 = 1 << $6_1;
      $7_1 = 0;
     } else {
      $7_1 = 1 << $6_1;
      $3 = $7_1 - 1 & 1 >>> 32 - $6_1;
     }
     $6_1 = $8 ? $7_1 : 0;
     $5_1 = $5_1 | ($8 ? $3 : 0);
     $4_1 = $4_1 | $6_1;
     $2_1 = $2_1 + 1 | 0;
     if (($9 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
    $4_1 = $4_1 + 1 | 0;
    $5_1 = $4_1 ? $5_1 : $5_1 + 1 | 0;
   }
   $2_1 = $1_1 & 31;
   $3 = !(HEAPU8[$0_1 + 7 | 0] & 4) & $1_1 >>> 0 > 1;
   $10_1 = $3;
   $7_1 = $3;
   if (($1_1 & 63) >>> 0 >= 32) {
    $2_1 = 1 << $2_1;
    $3 = 0;
   } else {
    $3 = 1 << $2_1;
    $2_1 = $3 - 1 & 1 >>> 32 - $2_1;
   }
   if (!(($7_1 | (($3 | 0) != ($4_1 | 0) | ($2_1 | 0) != ($5_1 | 0))) != 1 | ($1_1 | 0) <= 0)) {
    $12_1 = ($9 | 0) > 0;
    $15_1 = $12_1 & $10_1;
    $13 = HEAP32[$0_1 + 16 >> 2];
    $2_1 = $1_1;
    $3 = 0;
    $4_1 = 0;
    $5_1 = 0;
    while (1) {
     $8 = $4_1;
     $6_1 = $5_1;
     $1_1 = -1;
     $4_1 = 0;
     $5_1 = 0;
     if ($12_1) {
      while (1) {
       $7_1 = $4_1 & 31;
       label$11 : {
        if ((($4_1 & 63) >>> 0 >= 32 ? $6_1 >>> $7_1 | 0 : ((1 << $7_1) - 1 & $6_1) << 32 - $7_1 | $8 >>> $7_1) & 1) {
         break label$11
        }
        $7_1 = HEAP32[$0_1 + 16 >> 2];
        $14 = HEAP8[($7_1 + Math_imul($4_1, 104) | 0) + 86 | 0];
        if (($14 | 0) == -1) {
         break label$11
        }
        if (($1_1 | 0) != -1) {
         if (($14 | 0) >= HEAP8[($7_1 + Math_imul($1_1, 104) | 0) + 86 | 0]) {
          break label$11
         }
        }
        $1_1 = $4_1;
       }
       $4_1 = $4_1 + 1 | 0;
       $5_1 = $4_1 ? $5_1 : $5_1 + 1 | 0;
       if ($5_1 | ($4_1 | 0) != ($9 | 0)) {
        continue
       }
       break;
      }
     }
     $4_1 = $1_1;
     HEAP8[($13 + Math_imul($1_1, 104) | 0) + 86 | 0] = $3;
     $5_1 = $1_1 & 31;
     if (($1_1 & 63) >>> 0 >= 32) {
      $5_1 = 1 << $5_1;
      $1_1 = 0;
     } else {
      $1_1 = 1 << $5_1;
      $5_1 = $1_1 - 1 & 1 >>> 32 - $5_1;
     }
     $7_1 = $1_1;
     $1_1 = 0;
     label$15 : {
      if (!$15_1) {
       $2_1 = $10_1 ? 1 : $2_1;
       break label$15;
      }
      while (1) {
       if (($1_1 | 0) != ($4_1 | 0)) {
        HEAP8[($13 + Math_imul($1_1, 104) | 0) + 86 | 0] = 255
       }
       $2_1 = 1;
       $1_1 = $1_1 + 1 | 0;
       if (($9 | 0) != ($1_1 | 0)) {
        continue
       }
       break;
      };
     }
     $4_1 = $7_1 | $8;
     $5_1 = $5_1 | $6_1;
     $1_1 = $2_1;
     $3 = $3 + 1 | 0;
     if ((($1_1 | 0) <= ($3 | 0) | $10_1) != 1) {
      continue
     }
     break;
    };
   }
   label$19 : {
    if ($1_1) {
     break label$19
    }
    if (HEAPU8[$0_1 + 7 | 0] & 8) {
     $1_1 = 0;
     break label$19;
    }
    $1_1 = 0;
    if (HEAP32[$0_1 + 84 >> 2] <= 0) {
     break label$19
    }
    $2_1 = 0;
    $3 = 0;
    while (1) {
     $4_1 = $3;
     $1_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($3, 104) | 0;
     label$22 : {
      if (!HEAPU8[$1_1 + 90 | 0]) {
       $3 = $2_1;
       $2_1 = 1;
       break label$22;
      }
      $3 = $2_1;
      $2_1 = 1;
      if (HEAPU8[$1_1 + 1 | 0] & 2) {
       break label$22
      }
      HEAP8[$1_1 + 86 | 0] = 0;
      HEAP8[$1_1 + 101 | 0] = HEAPU8[$1_1 + 101 | 0] & 252 | HEAPU8[$1_1 + 102 | 0] & 3;
      $3 = 1;
      $2_1 = 0;
     }
     $1_1 = $3;
     if ($2_1) {
      $2_1 = $1_1;
      $3 = $4_1 + 1 | 0;
      if (($3 | 0) >= HEAP32[$0_1 + 84 >> 2]) {
       break label$19
      }
      continue;
     }
     break;
    };
   }
   HEAP8[$0_1 + 416 | 0] = $1_1;
   $2_1 = HEAP32[$0_1 + 396 >> 2];
   $1_1 = HEAP8[$0_1 + 416 | 0];
   $1_1 = ($1_1 | 0) >= 2 ? $1_1 : 0;
   label$20 : {
    if (($2_1 | 0) >= ($1_1 | 0)) {
     break label$20
    }
    $3 = $2_1;
    $2_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
    if (($3 | 0) >= ($2_1 | 0)) {
     break label$20
    }
    $3 = $16(Math_imul($2_1, 12));
    $4_1 = HEAP32[$0_1 + 400 >> 2];
    if ($4_1) {
     $1602($3, $4_1, Math_imul(HEAP32[$0_1 + 392 >> 2], 12));
     $17(HEAP32[$0_1 + 400 >> 2]);
    }
    HEAP32[$0_1 + 396 >> 2] = $2_1;
    HEAP32[$0_1 + 400 >> 2] = $3;
   }
   HEAP8[$0_1 + 444 | 0] = 0;
   HEAP32[$0_1 + 392 >> 2] = $1_1;
   HEAP8[$0_1 + 412 | 0] = 1;
  }
  $2_1 = 0;
  label$6 : {
   label$7 : {
    switch (HEAPU8[$0_1 + 416 | 0]) {
    case 1:
     $2_1 = $0_1 + 380 | 0;
     break label$6;
    case 0:
     break label$6;
    default:
     break label$7;
    };
   }
   $2_1 = HEAP32[$0_1 + 400 >> 2];
  }
  $1_1 = $2_1;
  if (!(!$11_1 | !$1_1 | HEAP32[$0_1 + 84 >> 2] <= 0)) {
   $2_1 = 0;
   while (1) {
    $4_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($2_1, 104) | 0;
    $3 = HEAPU8[$4_1 + 86 | 0];
    if (($3 | 0) != 255) {
     $5_1 = HEAP32[$4_1 + 48 >> 2];
     $6_1 = $3 << 24 >> 24;
     $3 = Math_imul($6_1, 12) + $1_1 | 0;
     HEAP16[$3 + 6 >> 1] = $6_1;
     HEAP16[$3 + 4 >> 1] = $2_1 << 24 >> 24;
     HEAP32[$3 >> 2] = $5_1;
     HEAP8[$3 + 8 | 0] = HEAPU8[$4_1 + 101 | 0] & 3;
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) < HEAP32[$0_1 + 84 >> 2]) {
     continue
    }
    break;
   };
  }
  HEAP32[$0_1 + 404 >> 2] = $1_1;
  HEAP32[$0_1 + 408 >> 2] = HEAP8[$0_1 + 416 | 0];
 }
 
 function $503() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = Math_fround(0), $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = 0, $32_1 = Math_fround(0), $33_1 = 0, $34_1 = Math_fround(0), $35_1 = 0, $36_1 = 0, $37 = 0, $38_1 = 0, $39_1 = Math_fround(0), $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = Math_fround(0);
  $25_1 = global$0 - 16 | 0;
  global$0 = $25_1;
  $21_1 = HEAP32[18392];
  $1_1 = HEAP32[$21_1 + 8036 >> 2];
  if (!HEAPU8[$1_1 + 441 | 0]) {
   $496($1_1)
  }
  $14 = HEAP32[$1_1 + 12 >> 2];
  $15_1 = HEAP32[$1_1 + 356 >> 2];
  $11_1 = HEAP32[$1_1 + 360 >> 2];
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  if (HEAPU8[$1_1 + 442 | 0]) {
   $504($1_1)
  }
  label$3 : {
   if (!($2_1 & 32) | HEAPU8[$1_1 + 420 | 0] == 255) {
    break label$3
   }
   if ($197()) {
    break label$3
   }
   if (!$177(1)) {
    break label$3
   }
   $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
   $3 = HEAP8[$1_1 + 420 | 0];
   if (($3 | 0) == -1) {
    $3 = HEAP32[$0_1 + 92 >> 2]
   }
   if (!(HEAPU8[$0_1 + 4 | 0] & 7)) {
    break label$3
   }
   HEAP8[$0_1 + 446 | 0] = 1;
   HEAP16[$0_1 + 98 >> 1] = HEAPU16[$0_1 + 96 >> 1];
   HEAP8[$0_1 + 432 | 0] = HEAP32[$0_1 + 84 >> 2] == ($3 | 0) ? -1 : $3;
   $318($23(1873, HEAP32[$0_1 >> 2]), 0);
  }
  $0_1 = HEAP32[$14 + 72 >> 2];
  $3 = $11_1 + 256 | 0;
  HEAP32[$3 >> 2] = HEAP32[$14 + 68 >> 2];
  HEAP32[$3 + 4 >> 2] = $0_1;
  $0_1 = HEAP32[$14 + 80 >> 2];
  $3 = $11_1 + 248 | 0;
  HEAP32[$3 >> 2] = HEAP32[$14 + 76 >> 2];
  HEAP32[$3 + 4 >> 2] = $0_1;
  $0_1 = HEAP32[$14 + 88 >> 2];
  $3 = $11_1 + 232 | 0;
  HEAP32[$3 >> 2] = HEAP32[$14 + 84 >> 2];
  HEAP32[$3 + 4 >> 2] = $0_1;
  $20_1 = HEAPF32[$1_1 + 104 >> 2];
  $33_1 = ($11_1 | 0) == ($15_1 | 0);
  label$5 : {
   if (!$33_1) {
    HEAPF32[$11_1 + 236 >> 2] = $20_1;
    break label$5;
   }
   if ($2_1 & 131072) {
    break label$5
   }
   $0_1 = $1_1 + 224 | 0;
   $4_1 = HEAPF32[$0_1 >> 2];
   $4_1 = $4_1 >= $20_1 ? $4_1 : $20_1;
   HEAPF32[$1_1 + 240 >> 2] = $4_1;
   HEAPF32[$0_1 >> 2] = $4_1;
  }
  $4_1 = HEAPF32[$1_1 + 224 >> 2];
  HEAPF32[$1_1 + 180 >> 2] = $4_1 - HEAPF32[$1_1 + 216 >> 2];
  $0_1 = $1_1 + 256 | 0;
  $7_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 >> 2] = $4_1 <= $7_1 ? $7_1 : $4_1;
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  if ($0_1 & 16777216) {
   $3 = HEAP32[$1_1 + 360 >> 2];
   $4_1 = HEAPF32[$3 + 232 >> 2];
   $6_1 = HEAP8[$1_1 + 429 | 0];
   if (($6_1 | 0) != -1) {
    $7_1 = Math_fround(Math_fround(Math_fround(HEAPF32[(HEAP32[$1_1 + 16 >> 2] + Math_imul($6_1, 104) | 0) + 56 >> 2] + HEAPF32[$1_1 + 164 >> 2]) + HEAPF32[$1_1 + 160 >> 2]) - ($0_1 & 1024 ? Math_fround(1.0) : Math_fround(0.0)));
    $4_1 = $4_1 >= $7_1 ? $4_1 : $7_1;
   }
   if (HEAPU8[$1_1 + 423 | 0] != 255) {
    $7_1 = HEAPF32[$1_1 + 204 >> 2];
    $4_1 = $4_1 >= $7_1 ? $4_1 : $7_1;
   }
   HEAPF32[$3 + 232 >> 2] = $4_1;
  }
  if (!($2_1 & 1048576)) {
   $380(HEAP32[$11_1 + 580 >> 2])
  }
  $0_1 = HEAP32[$11_1 + 580 >> 2];
  $0_1 = ((HEAP32[$0_1 + 60 >> 2] << 4) + HEAP32[$0_1 + 68 >> 2] | 0) - 16 | 0;
  $3 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = HEAP32[$0_1 + 12 >> 2];
  $8 = $11_1 + 504 | 0;
  HEAP32[$8 >> 2] = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$8 + 4 >> 2] = $5_1;
  HEAP32[$11_1 + 496 >> 2] = $3;
  HEAP32[$11_1 + 500 >> 2] = $6_1;
  if ($2_1 & 1920) {
   $0_1 = global$0 + -64 | 0;
   global$0 = $0_1;
   $3 = HEAP32[$1_1 + 356 >> 2];
   label$1 : {
    if (!(HEAPF32[$1_1 + 216 >> 2] < HEAPF32[$3 + 508 >> 2]) | !(HEAPF32[$1_1 + 224 >> 2] > HEAPF32[$3 + 500 >> 2])) {
     break label$1
    }
    $9 = $1_1 + 212 | 0;
    if (!(HEAPF32[$9 >> 2] < HEAPF32[$3 + 504 >> 2]) | !(HEAPF32[$1_1 + 220 >> 2] > HEAPF32[$3 + 496 >> 2])) {
     break label$1
    }
    $3 = HEAP32[HEAP32[$1_1 + 360 >> 2] + 580 >> 2];
    $422(HEAP32[$1_1 + 376 >> 2], $3, 0);
    $2_1 = HEAP32[$1_1 + 296 >> 2];
    $8 = HEAP32[$1_1 + 292 >> 2];
    HEAP32[$0_1 + 56 >> 2] = $8;
    HEAP32[$0_1 + 60 >> 2] = $2_1;
    $5_1 = $1_1 + 300 | 0;
    $6_1 = HEAP32[$5_1 >> 2];
    $5_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$0_1 + 48 >> 2] = $6_1;
    HEAP32[$0_1 + 52 >> 2] = $5_1;
    HEAP32[$0_1 + 16 >> 2] = $8;
    HEAP32[$0_1 + 20 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = $6_1;
    HEAP32[$0_1 + 12 >> 2] = $5_1;
    $378($3, $0_1 + 16 | 0, $0_1 + 8 | 0, 0);
    $7_1 = HEAPF32[$1_1 + 240 >> 2];
    $10_1 = HEAPF32[$1_1 + 232 >> 2];
    $4_1 = $10_1;
    if (HEAPU8[$1_1 + 445 | 0]) {
     $4_1 = Math_fround((HEAP8[$1_1 + 434 | 0] <= 0 ? HEAPF32[$1_1 + 248 >> 2] : $4_1) + HEAPF32[$1_1 + 184 >> 2]);
     $4_1 = $4_1 > $7_1 ? $7_1 : $4_1;
    }
    if (!(!(HEAPU8[$1_1 + 5 | 0] & 2) | HEAP32[$1_1 + 84 >> 2] <= 0)) {
     $16_1 = $1_1 + 5 | 0;
     $2_1 = 0;
     $6_1 = 0;
     while (1) {
      $8 = HEAP32[$1_1 + 44 >> 2];
      $5_1 = $2_1 & 31;
      label$6 : {
       if (!((($2_1 & 63) >>> 0 >= 32 ? $8 >>> $5_1 | 0 : ((1 << $5_1) - 1 & $8) << 32 - $5_1 | HEAP32[$1_1 + 40 >> 2] >>> $5_1) & 1)) {
        break label$6
       }
       $8 = HEAPU8[$2_1 + HEAP32[$1_1 + 24 >> 2] | 0];
       $5_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($8 << 24 >> 24, 104) | 0;
       $12_1 = HEAPU16[$1_1 + 98 >> 1] == HEAPU16[$1_1 + 96 >> 1] & HEAPU8[$1_1 + 423 | 0] == ($8 | 0);
       $13 = HEAPF32[$5_1 + 12 >> 2];
       if (!$12_1 & $13 > HEAPF32[$1_1 + 268 >> 2] | !(!(HEAP32[$5_1 >> 2] & 1073741856) | HEAPU8[$5_1 + 85 | 0] != 255) & (HEAP32[$1_1 + 4 >> 2] & 122880) != 16384 | $13 <= HEAPF32[$5_1 + 32 >> 2]) {
        break label$6
       }
       $18_1 = HEAP8[$1_1 + 436 | 0];
       label$10 : {
        label$11 : {
         $22_1 = HEAPU8[$1_1 + 421 | 0];
         if (!(($22_1 | 0) == ($8 | 0) | $12_1)) {
          $24 = $2_1 + 1 | 0;
          if (($24 ? $6_1 : $6_1 + 1 | 0) | ($18_1 | 0) != ($24 | 0)) {
           break label$11
          }
         }
         if ($12_1) {
          $8 = $51(29, Math_fround(1.0));
          $13 = $7_1;
          break label$10;
         }
         if (($8 | 0) == ($22_1 | 0)) {
          $8 = $51(28, Math_fround(1.0));
          $13 = $7_1;
          break label$10;
         }
         $8 = HEAP32[$1_1 + 136 >> 2];
         $13 = $7_1;
         break label$10;
        }
        $12_1 = HEAPU8[$16_1 | 0] & 24;
        $8 = HEAP32[($12_1 ? 136 : 140) + $1_1 >> 2];
        $13 = $12_1 ? $4_1 : $7_1;
       }
       if (!($13 > $10_1)) {
        break label$6
       }
       $5_1 = $5_1 + 12 | 0;
       $17_1 = HEAPF32[$5_1 >> 2];
       HEAPF32[$0_1 + 28 >> 2] = $10_1;
       HEAPF32[$0_1 + 24 >> 2] = $17_1;
       $17_1 = HEAPF32[$5_1 >> 2];
       HEAPF32[$0_1 + 44 >> 2] = $13;
       HEAPF32[$0_1 + 40 >> 2] = $17_1;
       $399($3, $0_1 + 24 | 0, $0_1 + 40 | 0, $8, Math_fround(1.0));
      }
      $2_1 = $2_1 + 1 | 0;
      $6_1 = $2_1 ? $6_1 : $6_1 + 1 | 0;
      $5_1 = HEAP32[$1_1 + 84 >> 2];
      $8 = $5_1 >>> 0 > $2_1 >>> 0;
      $5_1 = $5_1 >> 31;
      if ($8 & ($5_1 | 0) >= ($6_1 | 0) | ($5_1 | 0) > ($6_1 | 0)) {
       continue
      }
      break;
     };
    }
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    $5_1 = $6_1 & 1280;
    label$15 : {
     if (!$5_1) {
      break label$15
     }
     $2_1 = $9 + 8 | 0;
     $8 = HEAP32[$2_1 + 4 >> 2];
     $12_1 = $0_1 + 32 | 0;
     HEAP32[$12_1 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $8;
     $2_1 = HEAP32[$9 + 4 >> 2];
     HEAP32[$0_1 + 24 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$0_1 + 28 >> 2] = $2_1;
     $2_1 = HEAP32[$1_1 + 136 >> 2];
     if (($5_1 | 0) == 1280) {
      $400($3, $0_1 + 24 | 0, $12_1, $2_1, Math_fround(0.0), 0, Math_fround(1.0));
      break label$15;
     }
     if ($6_1 & 1024) {
      HEAPF32[$0_1 + 40 >> 2] = HEAPF32[$0_1 + 24 >> 2];
      HEAPF32[$0_1 + 44 >> 2] = HEAPF32[$0_1 + 36 >> 2];
      $6_1 = $0_1 + 40 | 0;
      $399($3, $0_1 + 24 | 0, $6_1, $2_1, Math_fround(1.0));
      HEAP32[$0_1 + 40 >> 2] = __wasm_rotl_i64(HEAP32[$0_1 + 28 >> 2], HEAP32[$0_1 + 32 >> 2]);
      HEAP32[$0_1 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
      $399($3, $6_1, $0_1 + 32 | 0, $2_1, Math_fround(1.0));
      break label$15;
     }
     if (!($6_1 & 256)) {
      break label$15
     }
     HEAP32[$0_1 + 40 >> 2] = __wasm_rotl_i64(HEAP32[$0_1 + 28 >> 2], HEAP32[$0_1 + 32 >> 2]);
     HEAP32[$0_1 + 44 >> 2] = i64toi32_i32$HIGH_BITS;
     $6_1 = $0_1 + 40 | 0;
     $399($3, $0_1 + 24 | 0, $6_1, $2_1, Math_fround(1.0));
     HEAPF32[$0_1 + 44 >> 2] = HEAPF32[$0_1 + 36 >> 2];
     HEAPF32[$0_1 + 40 >> 2] = HEAPF32[$0_1 + 24 >> 2];
     $399($3, $6_1, $0_1 + 32 | 0, $2_1, Math_fround(1.0));
    }
    label$18 : {
     if (!(HEAPU8[$1_1 + 4 | 0] & 128)) {
      break label$18
     }
     $4_1 = HEAPF32[$1_1 + 104 >> 2];
     if (!($4_1 < HEAPF32[$1_1 + 224 >> 2]) | !($4_1 >= HEAPF32[$1_1 + 280 >> 2]) | !($4_1 < HEAPF32[$1_1 + 288 >> 2])) {
      break label$18
     }
     $7_1 = HEAPF32[$1_1 + 144 >> 2];
     HEAPF32[$0_1 + 28 >> 2] = $4_1;
     HEAPF32[$0_1 + 24 >> 2] = $7_1;
     $7_1 = HEAPF32[$1_1 + 148 >> 2];
     HEAPF32[$0_1 + 44 >> 2] = $4_1;
     HEAPF32[$0_1 + 40 >> 2] = $7_1;
     $399($3, $0_1 + 24 | 0, $0_1 + 40 | 0, HEAP32[$1_1 + 140 >> 2], Math_fround(1.0));
    }
    $380($3);
   }
   global$0 = $0_1 - -64 | 0;
  }
  $35_1 = HEAP32[$1_1 + 376 >> 2];
  $422($35_1, HEAP32[$11_1 + 580 >> 2], 0);
  if (!(HEAPU8[$1_1 + 6 | 0] & 16)) {
   $2_1 = 0;
   $5_1 = 0;
   $3 = 0;
   $12_1 = global$0 - 192 | 0;
   global$0 = $12_1;
   $22_1 = HEAP8[$1_1 + 434 | 0];
   $16_1 = HEAP32[$1_1 + 376 >> 2];
   $18_1 = HEAP32[18392];
   $24 = HEAP8[$1_1 + 436 | 0];
   $1604($12_1 + 32 | 0, 0, 160);
   $36_1 = HEAP32[$1_1 + 84 >> 2];
   if (($36_1 | 0) > 0) {
    $26_1 = $24 >> 31;
    $40_1 = ($24 | 0) <= 0;
    $41_1 = HEAP32[$1_1 + 56 >> 2];
    $19 = HEAP32[$1_1 + 60 >> 2];
    $0_1 = 0;
    while (1) {
     $6_1 = $2_1;
     $3 = $5_1 & 31;
     if ((($5_1 & 63) >>> 0 >= 32 ? $19 >>> $3 | 0 : ((1 << $3) - 1 & $19) << 32 - $3 | $41_1 >>> $3) & 1) {
      $42_1 = ($6_1 | 0) >= ($26_1 | 0) & $5_1 >>> 0 >= $24 >>> 0 | ($6_1 | 0) > ($26_1 | 0) | $40_1;
      $8 = HEAP32[$1_1 + 16 >> 2] + Math_imul($5_1, 104) | 0;
      $43_1 = $8 + 40 | 0;
      $44_1 = $8 - -64 | 0;
      $45_1 = $8 + 89 | 0;
      $46_1 = $8 + 88 | 0;
      $47_1 = HEAP32[$16_1 + 16 >> 2];
      $31_1 = $8 + 72 | 0;
      $27_1 = $8 + 68 | 0;
      $2_1 = 0;
      while (1) {
       $3 = $2_1;
       $23_1 = HEAPU8[($2_1 ? $45_1 : $46_1) | 0];
       $9 = $47_1 + Math_imul($23_1, 24) | 0;
       $2_1 = HEAP32[$9 >> 2];
       label$62 : {
        if (($2_1 | 0) <= 0) {
         break label$62
        }
        $2_1 = $2_1 - 1 | 0;
        if (HEAP32[(HEAP32[$9 + 8 >> 2] + Math_imul($2_1, 40) | 0) + 28 >> 2]) {
         break label$62
        }
        HEAP32[$9 >> 2] = $2_1;
       }
       label$7 : {
        if (HEAP32[$9 >> 2] != 1) {
         break label$7
        }
        label$9 : {
         if (HEAP8[$8 + 1 | 0] & 1) {
          break label$9
         }
         label$103 : {
          if (($22_1 | 0) <= 0) {
           $4_1 = HEAPF32[$27_1 >> 2];
           $7_1 = HEAPF32[$31_1 >> 2];
           $7_1 = $4_1 >= $7_1 ? $4_1 : $7_1;
           break label$103;
          }
          if (!$3) {
           $4_1 = HEAPF32[$44_1 >> 2];
           $7_1 = HEAPF32[$31_1 >> 2];
           $7_1 = $4_1 >= $7_1 ? $4_1 : $7_1;
           break label$103;
          }
          $7_1 = HEAPF32[$27_1 >> 2];
         }
         if (!($7_1 > HEAPF32[$43_1 >> 2])) {
          break label$9
         }
         break label$7;
        }
        $37 = (($22_1 | 0) <= 0 ? 2 : (($3 | 0) != 0) << 1) | $42_1;
        $2_1 = ($12_1 + 32 | 0) + Math_imul($37, 40) | 0;
        $28_1 = $2_1 + 16 | 0;
        if (!HEAP32[$2_1 + 16 >> 2]) {
         HEAP32[$2_1 + 8 >> 2] = -8388609;
         HEAP32[$2_1 + 12 >> 2] = -8388609;
         HEAP32[$2_1 >> 2] = 2139095039;
         HEAP32[$2_1 + 4 >> 2] = 2139095039;
        }
        $38_1 = ($2_1 + ($23_1 >>> 3 & 28) | 0) + 20 | 0;
        HEAP32[$38_1 >> 2] = HEAP32[$38_1 >> 2] | 1 << $23_1;
        HEAP32[$28_1 >> 2] = HEAP32[$28_1 >> 2] + 1;
        $9 = HEAP32[$9 + 8 >> 2];
        $4_1 = HEAPF32[$9 + 4 >> 2];
        $7_1 = HEAPF32[$9 >> 2];
        if ($7_1 < HEAPF32[$2_1 >> 2]) {
         HEAPF32[$2_1 >> 2] = $7_1
        }
        $7_1 = HEAPF32[$9 + 8 >> 2];
        if (HEAPF32[$2_1 + 4 >> 2] > $4_1) {
         HEAPF32[$2_1 + 4 >> 2] = $4_1
        }
        $4_1 = HEAPF32[$9 + 12 >> 2];
        if (HEAPF32[$2_1 + 8 >> 2] < $7_1) {
         HEAPF32[$2_1 + 8 >> 2] = $7_1
        }
        if (HEAPF32[$2_1 + 12 >> 2] < $4_1) {
         HEAPF32[$2_1 + 12 >> 2] = $4_1
        }
        $0_1 = $0_1 | 1 << $37;
       }
       if (($22_1 | 0) > 0) {
        $2_1 = $3 + 1 | 0;
        if (!$3) {
         continue
        }
       }
       break;
      };
      HEAP8[$8 + 87 | 0] = 255;
     }
     $3 = $0_1;
     $5_1 = $5_1 + 1 | 0;
     $2_1 = $5_1 ? $6_1 : $6_1 + 1 | 0;
     if ($2_1 | ($5_1 | 0) != ($36_1 | 0)) {
      continue
     }
     break;
    };
   }
   if ($3) {
    $0_1 = HEAP32[$18_1 + 8104 >> 2];
    $3 = HEAP32[$16_1 + 4 >> 2] - 2 | 0;
    label$20 : {
     if (($0_1 | 0) >= ($3 | 0)) {
      break label$20
     }
     $6_1 = $0_1;
     $0_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
     $0_1 = ($0_1 | 0) > ($3 | 0) ? $0_1 : $3;
     if (($6_1 | 0) >= ($0_1 | 0)) {
      break label$20
     }
     $2_1 = $16(Math_imul($0_1, 24));
     $6_1 = HEAP32[$18_1 + 8108 >> 2];
     if ($6_1) {
      $1602($2_1, $6_1, Math_imul(HEAP32[$18_1 + 8100 >> 2], 24));
      $17(HEAP32[$18_1 + 8108 >> 2]);
     }
     HEAP32[$18_1 + 8104 >> 2] = $0_1;
     HEAP32[$18_1 + 8108 >> 2] = $2_1;
    }
    HEAP32[$18_1 + 8100 >> 2] = $3;
    $2_1 = HEAP32[$18_1 + 8108 >> 2];
    $0_1 = $12_1 + 8 | 0;
    HEAP32[$0_1 + 16 >> 2] = 0;
    $0_1 = $0_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$12_1 + 8 >> 2] = 0;
    HEAP32[$12_1 + 12 >> 2] = 0;
    $3 = HEAP32[$16_1 + 4 >> 2];
    if (($3 | 0) >= 3) {
     $6_1 = $3 - 1 | 0;
     $5_1 = ($6_1 & 31) + 1 | 0;
     $0_1 = 2;
     while (1) {
      $8 = ($12_1 + 8 | 0) + ($0_1 >> 5 << 2) | 0;
      $9 = $8;
      $19 = HEAP32[$8 >> 2];
      $8 = ($6_1 | 0) > ($0_1 | 31) ? 32 : $5_1;
      HEAP32[$9 >> 2] = $19 | ((($8 & 63) >>> 0 < 32 ? -1 << $8 : 0) ^ -1) & -1 << $0_1;
      $0_1 = ($0_1 & -32) + 32 | 0;
      if (($3 | 0) > ($0_1 | 0)) {
       continue
      }
      break;
     };
    }
    $0_1 = HEAPU8[$1_1 + 440 | 0];
    $6_1 = ($12_1 + 8 | 0) + ($0_1 >>> 3 & 28) | 0;
    $5_1 = HEAP32[$6_1 >> 2];
    HEAP32[$6_1 >> 2] = __wasm_rotl_i32($0_1) & $5_1;
    $7_1 = HEAPF32[$1_1 + 336 >> 2];
    $10_1 = HEAPF32[$1_1 + 332 >> 2];
    $13 = HEAPF32[$1_1 + 328 >> 2];
    $17_1 = HEAPF32[$1_1 + 324 >> 2];
    $31_1 = $1_1 + 6 | 0;
    $0_1 = 0;
    $27_1 = ($22_1 | 0) > 0;
    $6_1 = $3 + ($27_1 ? -3 : -2) | 0;
    while (1) {
     $3 = $6_1;
     $8 = $0_1;
     $5_1 = $2_1;
     $0_1 = ($12_1 + 32 | 0) + Math_imul($0_1, 40) | 0;
     $2_1 = HEAP32[$0_1 + 16 >> 2];
     label$27 : {
      if (!$2_1) {
       break label$27
      }
      $29_1 = HEAPF32[$0_1 + 4 >> 2];
      $32_1 = $13 > $29_1 ? $29_1 : $13;
      $30 = HEAPF32[$0_1 >> 2];
      $39_1 = $17_1 > $30 ? $30 : $17_1;
      $34_1 = HEAPF32[$0_1 + 8 >> 2];
      $48_1 = $10_1 <= $34_1 ? $34_1 : $10_1;
      $4_1 = HEAPF32[$0_1 + 12 >> 2];
      $4_1 = HEAPU8[$31_1 | 0] & 2 | $8 >>> 0 < 2 ? $4_1 : $4_1 >= $7_1 ? $4_1 : $7_1;
      $26_1 = $0_1 + 20 | 0;
      $0_1 = 0;
      while (1) {
       $6_1 = $0_1 << 2;
       $9 = $6_1 + ($12_1 + 8 | 0) | 0;
       HEAP32[$9 >> 2] = HEAP32[$9 >> 2] & (HEAP32[$6_1 + $26_1 >> 2] ^ -1);
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != 5) {
        continue
       }
       break;
      };
      $6_1 = $3 - $2_1 | 0;
      if (HEAP32[$16_1 + 4 >> 2] <= 0) {
       $3 = $6_1;
       break label$27;
      }
      $29_1 = $8 >>> 0 > 1 ? ($27_1 ? $29_1 : $32_1) : $32_1;
      $0_1 = $8 & 1;
      $32_1 = $0_1 ? (($24 | 0) > 0 ? $30 : $39_1) : $39_1;
      $30 = $0_1 ? $48_1 : $34_1;
      $3 = 0;
      while (1) {
       $0_1 = $2_1;
       $2_1 = $26_1 + ($3 >>> 3 & 536870908) | 0;
       $9 = HEAP32[$2_1 >> 2];
       $19 = 1 << $3;
       if ($9 & $19) {
        HEAP32[$2_1 >> 2] = $9 & ($19 ^ -1);
        $2_1 = HEAP32[$16_1 + 16 >> 2] + Math_imul($3, 24) | 0;
        $19 = $2_1 + 8 | 0;
        $9 = HEAP32[$19 >> 2];
        HEAPF32[$9 + 12 >> 2] = $4_1;
        HEAPF32[$9 + 8 >> 2] = $30;
        HEAPF32[$9 + 4 >> 2] = $29_1;
        HEAPF32[$9 >> 2] = $32_1;
        $9 = $2_1 + 16 | 0;
        $23_1 = HEAP32[$9 + 4 >> 2];
        $28_1 = $5_1 + 16 | 0;
        HEAP32[$28_1 >> 2] = HEAP32[$9 >> 2];
        HEAP32[$28_1 + 4 >> 2] = $23_1;
        $9 = HEAP32[$19 + 4 >> 2];
        $23_1 = $5_1 + 8 | 0;
        HEAP32[$23_1 >> 2] = HEAP32[$19 >> 2];
        HEAP32[$23_1 + 4 >> 2] = $9;
        $9 = HEAP32[$2_1 + 4 >> 2];
        HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
        HEAP32[$5_1 + 4 >> 2] = $9;
        $5_1 = $5_1 + 24 | 0;
        $0_1 = $0_1 - 1 | 0;
       }
       $3 = $3 + 1 | 0;
       if (($3 | 0) < HEAP32[$16_1 + 4 >> 2]) {
        $2_1 = $0_1;
        if ($0_1) {
         continue
        }
       }
       break;
      };
      $3 = $6_1;
     }
     $0_1 = $5_1;
     label$38 : {
      if (($8 | 0) != 1) {
       break label$38
      }
      if (($22_1 | 0) <= 0) {
       break label$38
      }
      $2_1 = HEAP32[$16_1 + 16 >> 2] + Math_imul(HEAPU8[$1_1 + 440 | 0], 24) | 0;
      $6_1 = HEAP32[$2_1 + 4 >> 2];
      HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$0_1 + 4 >> 2] = $6_1;
      $6_1 = $2_1 + 16 | 0;
      $5_1 = HEAP32[$6_1 + 4 >> 2];
      $9 = $0_1 + 16 | 0;
      HEAP32[$9 >> 2] = HEAP32[$6_1 >> 2];
      HEAP32[$9 + 4 >> 2] = $5_1;
      $2_1 = $2_1 + 8 | 0;
      $6_1 = HEAP32[$2_1 + 4 >> 2];
      $5_1 = $0_1 + 8 | 0;
      HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
      HEAP32[$5_1 + 4 >> 2] = $6_1;
      $0_1 = $0_1 + 24 | 0;
     }
     $2_1 = $0_1;
     $9 = $2_1;
     $6_1 = $3;
     $0_1 = $8 + 1 | 0;
     if (($0_1 | 0) != 4) {
      continue
     }
     break;
    };
    $5_1 = HEAP32[$16_1 + 4 >> 2];
    label$41 : {
     if (!$3 | ($5_1 | 0) <= 0) {
      break label$41
     }
     $2_1 = 0;
     $6_1 = $9;
     while (1) {
      $0_1 = $6_1;
      if (HEAP32[($12_1 + 8 | 0) + ($2_1 >>> 3 & 536870908) >> 2] >>> $2_1 & 1) {
       $6_1 = HEAP32[$16_1 + 16 >> 2] + Math_imul($2_1, 24) | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$0_1 + 4 >> 2] = $5_1;
       $5_1 = $6_1 + 16 | 0;
       $8 = HEAP32[$5_1 + 4 >> 2];
       $9 = $0_1 + 16 | 0;
       HEAP32[$9 >> 2] = HEAP32[$5_1 >> 2];
       HEAP32[$9 + 4 >> 2] = $8;
       $6_1 = $6_1 + 8 | 0;
       $5_1 = HEAP32[$6_1 + 4 >> 2];
       $8 = $0_1 + 8 | 0;
       HEAP32[$8 >> 2] = HEAP32[$6_1 >> 2];
       HEAP32[$8 + 4 >> 2] = $5_1;
       $0_1 = $0_1 + 24 | 0;
       $3 = $3 - 1 | 0;
      }
      $6_1 = $0_1;
      $2_1 = $2_1 + 1 | 0;
      $5_1 = HEAP32[$16_1 + 4 >> 2];
      if (($2_1 | 0) >= ($5_1 | 0)) {
       break label$41
      }
      if ($3) {
       continue
      }
      break;
     };
    }
    $1602(HEAP32[$16_1 + 16 >> 2] + 48 | 0, HEAP32[$18_1 + 8108 >> 2], Math_imul($5_1, 24) - 48 | 0);
   }
   global$0 = $12_1 + 192 | 0;
  }
  $421($35_1, HEAP32[$11_1 + 580 >> 2]);
  $4_1 = HEAPF32[$1_1 + 164 >> 2];
  $10_1 = Math_fround($4_1 + $4_1);
  $0_1 = HEAP8[$1_1 + 417 | 0];
  $4_1 = HEAPF32[$1_1 + 160 >> 2];
  HEAPF32[$1_1 + 196 >> 2] = Math_fround($10_1 * Math_fround($0_1 | 0)) + Math_fround(Math_fround($4_1 + $4_1) + Math_fround(Math_fround(HEAPF32[$1_1 + 172 >> 2] + HEAPF32[$1_1 + 176 >> 2]) * Math_fround($0_1 - 1 | 0)));
  $6_1 = $1_1 + 196 | 0;
  $9 = HEAP32[$1_1 + 84 >> 2];
  if (($9 | 0) > 0) {
   $12_1 = HEAP32[$1_1 + 48 >> 2];
   $8 = HEAP32[$1_1 + 52 >> 2];
   $0_1 = 0;
   $3 = 0;
   while (1) {
    $2_1 = $0_1 & 31;
    if ((($0_1 & 63) >>> 0 >= 32 ? $8 >>> $2_1 | 0 : ((1 << $2_1) - 1 & $8) << 32 - $2_1 | $12_1 >>> $2_1) & 1) {
     $2_1 = HEAP32[$1_1 + 16 >> 2] + Math_imul($0_1, 104) | 0;
     $5_1 = HEAP32[$2_1 >> 2];
     label$181 : {
      if (($5_1 & 48) == 16) {
       $4_1 = HEAPF32[$6_1 >> 2];
       $2_1 = $2_1 + 16 | 0;
       break label$181;
      }
      $4_1 = HEAPF32[$2_1 + 64 >> 2];
      $7_1 = HEAPF32[$2_1 + 68 >> 2];
      $13 = $4_1 >= $7_1 ? $4_1 : $7_1;
      $7_1 = HEAPF32[$2_1 + 52 >> 2];
      $4_1 = Math_fround($13 - $7_1);
      if (!($5_1 & 8192)) {
       $7_1 = Math_fround(HEAPF32[$2_1 + 76 >> 2] - $7_1);
       $4_1 = $4_1 >= $7_1 ? $4_1 : $7_1;
      }
      label$22 : {
       if (!($5_1 & 16)) {
        break label$22
       }
       $7_1 = HEAPF32[$2_1 + 28 >> 2];
       if (!($7_1 > Math_fround(0.0))) {
        break label$22
       }
       $4_1 = HEAP8[$1_1 + 4 | 0] & 1 ? ($5_1 & 32 ? $7_1 : $4_1) : $7_1;
      }
      $7_1 = HEAPF32[$1_1 + 156 >> 2];
      $4_1 = $4_1 >= $7_1 ? $4_1 : $7_1;
      $2_1 = $6_1;
     }
     HEAPF32[$6_1 >> 2] = HEAPF32[$2_1 >> 2] + $4_1;
    }
    $0_1 = $0_1 + 1 | 0;
    $3 = $0_1 ? $3 : $3 + 1 | 0;
    if ($3 | ($0_1 | 0) != ($9 | 0)) {
     continue
    }
    break;
   };
  }
  label$254 : {
   if (!(HEAP32[$1_1 + 4 >> 2] & 16777216 | $33_1)) {
    HEAP32[$11_1 + 88 >> 2] = 0;
    break label$254;
   }
   $0_1 = HEAP8[$1_1 + 424 | 0];
   if (($0_1 | 0) == -1 | HEAPU8[$1_1 + 423 | 0] != 255 | (!HEAPU8[$11_1 + 136 | 0] | HEAPU16[$1_1 + 98 >> 1] != HEAPU16[$1_1 + 96 >> 1])) {
    break label$254
   }
   $7_1 = Math_fround($10_1 + HEAPF32[$1_1 + 156 >> 2]);
   $4_1 = HEAPF32[(HEAP32[$1_1 + 16 >> 2] + Math_imul($0_1, 104) | 0) + 12 >> 2];
   if ($4_1 < HEAPF32[$1_1 + 260 >> 2]) {
    $302($11_1, Math_fround(Math_fround($4_1 - HEAPF32[$11_1 + 12 >> 2]) - $7_1));
    break label$254;
   }
   if (!($4_1 > HEAPF32[$1_1 + 268 >> 2])) {
    break label$254
   }
   $302($11_1, Math_fround($7_1 + Math_fround($4_1 - HEAPF32[$11_1 + 12 >> 2])));
  }
  $0_1 = HEAP8[$1_1 + 423 | 0];
  if (!(($0_1 | 0) == -1 | HEAPU16[$1_1 + 96 >> 1] != HEAPU16[$1_1 + 98 >> 1])) {
   $4_1 = HEAPF32[$1_1 + 164 >> 2];
   $4_1 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$21_1 + 228 >> 2] - HEAPF32[$21_1 + 7176 >> 2]) + Math_fround(4.0)) - HEAPF32[(HEAP32[$1_1 + 16 >> 2] + Math_imul($0_1, 104) | 0) + 8 >> 2]) - HEAPF32[$1_1 + 172 >> 2]) - Math_fround($4_1 + $4_1));
   label$29 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$4_1;
     break label$29;
    }
    $0_1 = -2147483648;
   }
   HEAPF32[$1_1 + 200 >> 2] = $0_1 | 0;
  }
  $0_1 = $1_1 + 212 | 0;
  $269();
  $4_1 = HEAPF32[$15_1 + 236 >> 2];
  $7_1 = HEAPF32[$15_1 + 232 >> 2];
  $3 = $14 + 44 | 0;
  $2_1 = HEAP32[$3 + 4 >> 2];
  $5_1 = $11_1 + 472 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $3 = HEAP32[$14 + 40 >> 2];
  HEAP32[$11_1 + 464 >> 2] = HEAP32[$14 + 36 >> 2];
  HEAP32[$11_1 + 468 >> 2] = $3;
  $3 = $14 + 60 | 0;
  $2_1 = HEAP32[$3 + 4 >> 2];
  $5_1 = $11_1 + 488 | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $3 = HEAP32[$14 + 56 >> 2];
  HEAP32[$11_1 + 480 >> 2] = HEAP32[$14 + 52 >> 2];
  HEAP32[$11_1 + 484 >> 2] = $3;
  HEAP8[$11_1 + 143 | 0] = HEAPU8[$1_1 + 455 | 0];
  $3 = HEAP32[$1_1 + 216 >> 2];
  HEAP32[$15_1 + 208 >> 2] = HEAP32[$1_1 + 212 >> 2];
  HEAP32[$15_1 + 212 >> 2] = $3;
  HEAPF32[$15_1 + 384 >> 2] = HEAPF32[$14 + 96 >> 2];
  HEAP32[$15_1 + 392 >> 2] = HEAP32[$14 + 100 >> 2];
  HEAP32[$15_1 + 276 >> 2] = HEAP32[$14 + 92 >> 2];
  label$31 : {
   if (!$33_1) {
    $211();
    break label$31;
   }
   $10_1 = HEAPF32[$1_1 + 220 >> 2];
   $13 = HEAPF32[$1_1 + 212 >> 2];
   HEAPF32[$25_1 + 12 >> 2] = HEAPF32[$1_1 + 224 >> 2] - HEAPF32[$1_1 + 216 >> 2];
   HEAPF32[$25_1 + 8 >> 2] = $10_1 - $13;
   $212($25_1 + 8 | 0, Math_fround(-1.0));
   $213($0_1, 0, 0, 0);
  }
  $10_1 = Math_fround(HEAPF32[$0_1 >> 2] + HEAPF32[$6_1 >> 2]);
  $0_1 = HEAP32[$1_1 + 4 >> 2];
  label$33 : {
   if ($0_1 & 65536) {
    break label$33
   }
   $17_1 = HEAPF32[$14 + 8 >> 2];
   if ($17_1 <= Math_fround(0.0)) {
    $3 = $15_1 + 240 | 0;
    $10_1 = HEAPF32[$3 >> 2];
    $13 = Math_fround(HEAPF32[$1_1 + 212 >> 2] + HEAPF32[$1_1 + 196 >> 2]);
    $17_1 = Math_fround(Math_fround(($0_1 & 16777216 ? HEAPF32[$11_1 + 128 >> 2] : Math_fround(0.0)) + $13) - $17_1);
    HEAPF32[$3 >> 2] = $10_1 >= $17_1 ? $10_1 : $17_1;
    $10_1 = HEAPF32[$1_1 + 220 >> 2];
    $10_1 = $10_1 < $13 ? $10_1 : $13;
    break label$33;
   }
   $10_1 = HEAPF32[$1_1 + 220 >> 2];
  }
  HEAPF32[$15_1 + 232 >> 2] = $7_1 >= $10_1 ? $7_1 : $10_1;
  $10_1 = HEAPF32[$14 + 12 >> 2];
  label$37 : {
   if ($10_1 <= Math_fround(0.0)) {
    $3 = $15_1 + 244 | 0;
    $7_1 = HEAPF32[$3 >> 2];
    $10_1 = Math_fround(Math_fround($20_1 + ($0_1 & 33554432 ? HEAPF32[$11_1 + 132 >> 2] : Math_fround(0.0))) - $10_1);
    HEAPF32[$3 >> 2] = $7_1 >= $10_1 ? $7_1 : $10_1;
    $7_1 = HEAPF32[$1_1 + 224 >> 2];
    $20_1 = $7_1 < $20_1 ? $7_1 : $20_1;
    break label$37;
   }
   $20_1 = HEAPF32[$1_1 + 224 >> 2];
  }
  HEAPF32[$15_1 + 236 >> 2] = $4_1 >= $20_1 ? $4_1 : $20_1;
  if (HEAPU8[$1_1 + 448 | 0]) {
   $0_1 = 0;
   $6_1 = 0;
   HEAP8[$1_1 + 448 | 0] = 0;
   if (!(HEAPU8[$1_1 + 4 | 0] & 16)) {
    $3 = HEAP32[18392];
    $2_1 = HEAP32[$1_1 + 76 >> 2];
    label$21 : {
     if (($2_1 | 0) == -1) {
      break label$21
     }
     $0_1 = $2_1 + HEAP32[$3 + 12176 >> 2] | 0;
     if (HEAP32[$1_1 + 84 >> 2] <= HEAP8[$0_1 + 13 | 0]) {
      break label$21
     }
     HEAP32[$0_1 >> 2] = 0;
     $0_1 = 0;
    }
    if (!$0_1) {
     $0_1 = $508(HEAP32[$1_1 >> 2], HEAP32[$1_1 + 84 >> 2]);
     HEAP32[$1_1 + 76 >> 2] = $0_1 - HEAP32[$3 + 12176 >> 2];
    }
    $3 = $0_1;
    HEAP8[$0_1 + 12 | 0] = HEAP32[$1_1 + 84 >> 2];
    $0_1 = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$3 + 4 >> 2] = 0;
    label$52 : {
     if (HEAP32[$1_1 + 84 >> 2] > 0) {
      $5_1 = 0;
      $2_1 = $3 + 16 | 0;
      while (1) {
       $4_1 = HEAPF32[(HEAP32[$0_1 >> 2] & 8 ? 24 : 16) + $0_1 >> 2];
       HEAP8[$2_1 + 8 | 0] = $6_1;
       HEAPF32[$2_1 >> 2] = $4_1;
       HEAP8[$2_1 + 9 | 0] = HEAPU8[$0_1 + 82 | 0];
       HEAP8[$2_1 + 10 | 0] = HEAPU8[$0_1 + 86 | 0];
       $8 = HEAPU8[$2_1 + 11 | 0] & -4 | HEAPU8[$0_1 + 101 | 0] & 3;
       HEAP8[$2_1 + 11 | 0] = $8;
       $8 = $8 & -5 | HEAPU8[$0_1 + 91 | 0] << 2;
       HEAP8[$2_1 + 11 | 0] = $8;
       HEAP8[$2_1 + 11 | 0] = HEAPU8[$0_1 | 0] & 8 | $8 & 247;
       $8 = HEAP32[$0_1 >> 2];
       if (HEAPF32[$0_1 + 28 >> 2] != $4_1) {
        HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 1
       }
       if (($6_1 | 0) != HEAP8[$0_1 + 82 | 0]) {
        HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 2
       }
       if (HEAPU8[$0_1 + 86 | 0] != 255) {
        HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 8
       }
       if (HEAPU8[$0_1 + 91 | 0] != (($8 ^ -1) >>> 1 & 1)) {
        HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] | 4
       }
       $5_1 = !($8 & 8) | $5_1;
       $2_1 = $2_1 + 12 | 0;
       $0_1 = $0_1 + 104 | 0;
       $6_1 = $6_1 + 1 | 0;
       if (($6_1 | 0) < HEAP32[$1_1 + 84 >> 2]) {
        continue
       }
       break;
      };
      HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & HEAP32[$1_1 + 4 >> 2];
      $7_1 = Math_fround(0.0);
      if (!($5_1 & 1)) {
       break label$52
      }
      $7_1 = HEAPF32[$1_1 + 208 >> 2];
      break label$52;
     }
     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & HEAP32[$1_1 + 4 >> 2];
     $7_1 = Math_fround(0.0);
    }
    HEAPF32[$3 + 8 >> 2] = $7_1;
    $346();
   }
  }
  HEAP8[$1_1 + 443 | 0] = 0;
  $0_1 = HEAP32[$21_1 + 8040 >> 2];
  HEAP32[$21_1 + 8040 >> 2] = $0_1 - 1;
  $3 = ($0_1 | 0) >= 2 ? (HEAP32[$21_1 + 8052 >> 2] + Math_imul($0_1, 104) | 0) - 208 | 0 : 0;
  $0_1 = $3 ? HEAP32[$21_1 + 8064 >> 2] + Math_imul(HEAP32[$3 >> 2], 456) | 0 : 0;
  HEAP32[$21_1 + 8036 >> 2] = $0_1;
  $6_1 = $15_1 + 372 | 0;
  if ($0_1) {
   HEAP32[$0_1 + 12 >> 2] = $3;
   HEAP32[$0_1 + 376 >> 2] = $3 + 16;
   $0_1 = ($0_1 - HEAP32[$21_1 + 8064 >> 2] | 0) / 456 | 0;
  } else {
   $0_1 = -1
  }
  HEAP32[$6_1 >> 2] = $0_1;
  global$0 = $25_1 + 16 | 0;
 }
 
 function $504($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $7_1 = HEAP32[18392];
  $9 = HEAP32[$7_1 + 7080 >> 2];
  $5_1 = HEAP32[$0_1 + 92 >> 2];
  if (($5_1 | 0) != -1) {
   $1_1 = HEAP32[$0_1 + 360 >> 2];
   $11_1 = HEAP32[$0_1 + 16 >> 2];
   if (HEAP8[$0_1 + 120 | 0] & 1) {
    $12_1 = ($11_1 + Math_imul($5_1, 104) | 0) + 72 | 0
   } else {
    $12_1 = ($11_1 + Math_imul($5_1, 104) | 0) + (HEAPU8[$0_1 + 452 | 0] ? 68 : 64) | 0
   }
   $2_1 = HEAPF32[$12_1 >> 2];
   $4_1 = HEAPF32[$1_1 + 232 >> 2];
   HEAPF32[$12_1 >> 2] = $2_1 >= $4_1 ? $2_1 : $4_1;
   $2_1 = HEAPF32[$0_1 + 104 >> 2];
   $4_1 = Math_fround(HEAPF32[$1_1 + 236 >> 2] + HEAPF32[$0_1 + 168 >> 2]);
   HEAPF32[$0_1 + 104 >> 2] = $2_1 >= $4_1 ? $2_1 : $4_1;
   HEAPF32[($11_1 + Math_imul($5_1, 104) | 0) + 60 >> 2] = HEAPF32[$1_1 + 384 >> 2];
   $2_1 = HEAPF32[$0_1 + 112 >> 2];
   $4_1 = HEAPF32[$1_1 + 268 >> 2];
   HEAPF32[$0_1 + 112 >> 2] = $2_1 >= $4_1 ? $2_1 : $4_1;
  }
  if (HEAPU8[$7_1 + 12196 | 0]) {
   $64(0, 1059, 0)
  }
  $4_1 = HEAPF32[$0_1 + 104 >> 2];
  HEAPF32[$9 + 212 >> 2] = $4_1;
  $10_1 = HEAPF32[$0_1 + 100 >> 2];
  $1_1 = HEAP32[$0_1 + 88 >> 2];
  if (!$1_1) {
   HEAPF32[$0_1 + 184 >> 2] = $4_1 - $10_1
  }
  $11_1 = $1_1 + 1 | 0;
  $22_1 = HEAP8[$0_1 + 433 | 0];
  $12_1 = HEAP8[$0_1 + 434 | 0];
  label$6 : {
   if (!(HEAPF32[$0_1 + 264 >> 2] <= $4_1) | !(HEAPF32[$0_1 + 272 >> 2] >= $10_1)) {
    break label$6
   }
   $1_1 = HEAP32[$0_1 + 128 >> 2];
   label$7 : {
    if (($1_1 | 0) != 16777216) {
     break label$7
    }
    $1_1 = 0;
    if (!(HEAPU8[$0_1 + 4 | 0] & 64)) {
     break label$7
    }
    $1_1 = $51(HEAP32[$0_1 + 124 >> 2] & 1 ? 46 : 45, Math_fround(1.0));
   }
   $5_1 = HEAP32[$0_1 + 132 >> 2];
   $7_1 = ($5_1 | 0) != 16777216 ? $5_1 : 0;
   $15_1 = HEAP8[$0_1 + 437 | 0];
   $5_1 = 0;
   label$8 : {
    if (!(HEAP32[$0_1 + 360 >> 2] == HEAP32[$0_1 + 356 >> 2] | HEAP32[$0_1 + 88 >> 2] > 0)) {
     break label$8
    }
    $5_1 = 0;
    if (!(HEAPU8[$0_1 + 4 | 0] & 128)) {
     break label$8
    }
    $5_1 = HEAP32[(HEAP8[$0_1 + 122 | 0] & 1 ? 136 : 140) + $0_1 >> 2];
   }
   $16_1 = $1_1 | $7_1;
   if (!(!($5_1 | $16_1 | ($11_1 | 0) == ($12_1 | 0)) & ($15_1 | 0) < 0)) {
    if (!(HEAPU8[$0_1 + 6 | 0] & 16)) {
     $18_1 = HEAP32[$0_1 + 292 >> 2];
     $23_1 = HEAP32[$0_1 + 296 >> 2];
     $19 = $0_1 + 300 | 0;
     $24 = HEAP32[$19 + 4 >> 2];
     $13 = HEAP32[$9 + 580 >> 2];
     $20_1 = $13 + 104 | 0;
     HEAP32[$20_1 >> 2] = HEAP32[$19 >> 2];
     HEAP32[$20_1 + 4 >> 2] = $24;
     HEAP32[$13 + 96 >> 2] = $18_1;
     HEAP32[$13 + 100 >> 2] = $23_1;
    }
    $422(HEAP32[$0_1 + 376 >> 2], HEAP32[$9 + 580 >> 2], 0);
   }
   label$13 : {
    if (!$16_1) {
     break label$13
    }
    $2_1 = HEAPF32[$0_1 + 252 >> 2];
    $6_1 = HEAPF32[$0_1 + 244 >> 2];
    $13 = $3 + 28 | 0;
    HEAPF32[$13 >> 2] = $4_1;
    HEAPF32[$3 + 24 >> 2] = $2_1;
    HEAPF32[$3 + 16 >> 2] = $6_1;
    HEAPF32[$3 + 20 >> 2] = $10_1;
    $8 = HEAPF32[$0_1 + 276 >> 2];
    $14 = HEAPF32[$0_1 + 280 >> 2];
    $14 = $10_1 >= $14 ? $10_1 : $14;
    HEAPF32[$3 + 20 >> 2] = $14;
    HEAPF32[$3 + 16 >> 2] = $6_1 >= $8 ? $6_1 : $8;
    $6_1 = HEAPF32[$0_1 + 284 >> 2];
    $8 = HEAPF32[$0_1 + 288 >> 2];
    $8 = $4_1 < $8 ? $4_1 : $8;
    HEAPF32[$13 >> 2] = $8;
    HEAPF32[$3 + 24 >> 2] = $2_1 < $6_1 ? $2_1 : $6_1;
    $13 = $3 + 24 | 0;
    if (!(!$1_1 | !($8 > $14))) {
     $401(HEAP32[$9 + 580 >> 2], $3 + 16 | 0, $13, $1_1, Math_fround(0.0), 0)
    }
    if (!$7_1 | !(HEAPF32[$3 + 20 >> 2] < HEAPF32[$3 + 28 >> 2])) {
     break label$13
    }
    $401(HEAP32[$9 + 580 >> 2], $3 + 16 | 0, $13, $7_1, Math_fround(0.0), 0);
   }
   label$15 : {
    if (($15_1 | 0) < 0) {
     break label$15
    }
    $1_1 = HEAP8[$0_1 + 437 | 0];
    if (($1_1 | 0) < 0) {
     break label$15
    }
    $7_1 = $1_1 << 3;
    $1_1 = HEAP32[$0_1 + 32 >> 2];
    $15_1 = $7_1 + $1_1 | 0;
    $13 = $3 + 24 | 0;
    while (1) {
     $16_1 = HEAP32[$0_1 + 16 >> 2];
     $7_1 = $16_1 + Math_imul(HEAP8[$1_1 + 4 | 0], 104) | 0;
     $6_1 = HEAPF32[$7_1 + 8 >> 2];
     if (HEAPU8[$7_1 + 84 | 0] == 255) {
      $6_1 = Math_fround($6_1 - HEAPF32[$0_1 + 172 >> 2])
     }
     $18_1 = HEAP8[$1_1 + 4 | 0];
     $2_1 = HEAPF32[$7_1 + 12 >> 2];
     if (HEAPU8[$7_1 + 85 | 0] == 255) {
      $2_1 = Math_fround($2_1 + HEAPF32[$0_1 + 176 >> 2])
     }
     $8 = HEAPF32[$0_1 + 100 >> 2];
     $14 = HEAPF32[$0_1 + 104 >> 2];
     HEAPF32[$3 + 28 >> 2] = $14;
     HEAPF32[$3 + 20 >> 2] = $8;
     HEAPF32[$3 + 24 >> 2] = $2_1;
     HEAPF32[$3 + 16 >> 2] = $6_1;
     $17_1 = HEAPF32[$0_1 + 276 >> 2];
     $21_1 = HEAPF32[$0_1 + 280 >> 2];
     HEAPF32[$3 + 20 >> 2] = $8 >= $21_1 ? $8 : $21_1;
     $6_1 = $6_1 >= $17_1 ? $6_1 : $17_1;
     HEAPF32[$3 + 16 >> 2] = $6_1;
     $8 = HEAPF32[$0_1 + 284 >> 2];
     $17_1 = HEAPF32[$0_1 + 288 >> 2];
     HEAPF32[$3 + 28 >> 2] = $14 < $17_1 ? $14 : $17_1;
     $2_1 = $2_1 < $8 ? $2_1 : $8;
     HEAPF32[$3 + 24 >> 2] = $2_1;
     $7_1 = $16_1 + Math_imul($18_1, 104) | 0;
     $8 = HEAPF32[$7_1 + 32 >> 2];
     HEAPF32[$3 + 16 >> 2] = $6_1 >= $8 ? $6_1 : $8;
     $6_1 = HEAPF32[$7_1 + 12 >> 2];
     HEAPF32[$3 + 24 >> 2] = $2_1 < $6_1 ? $2_1 : $6_1;
     $401(HEAP32[$9 + 580 >> 2], $3 + 16 | 0, $13, HEAP32[$1_1 >> 2], Math_fround(0.0), 0);
     $1_1 = $1_1 + 8 | 0;
     if ($15_1 >>> 0 >= $1_1 >>> 0) {
      continue
     }
     break;
    };
   }
   if (!(!(HEAPF32[$0_1 + 288 >> 2] > $10_1) | (!$5_1 | !(HEAPF32[$0_1 + 280 >> 2] <= $10_1)))) {
    $1_1 = HEAP32[$9 + 580 >> 2];
    $2_1 = HEAPF32[$0_1 + 144 >> 2];
    HEAPF32[$3 + 20 >> 2] = $10_1;
    HEAPF32[$3 + 16 >> 2] = $2_1;
    $2_1 = HEAPF32[$0_1 + 148 >> 2];
    HEAPF32[$3 + 12 >> 2] = $10_1;
    HEAPF32[$3 + 8 >> 2] = $2_1;
    $399($1_1, $3 + 16 | 0, $3 + 8 | 0, $5_1, Math_fround(1.0));
   }
   if (!(HEAPF32[$0_1 + 288 >> 2] > $4_1) | (!(HEAPF32[$0_1 + 280 >> 2] <= $4_1) | ($11_1 | 0) != ($12_1 | 0))) {
    break label$6
   }
   $1_1 = HEAP32[$9 + 580 >> 2];
   $2_1 = HEAPF32[$0_1 + 144 >> 2];
   HEAPF32[$3 + 20 >> 2] = $4_1;
   HEAPF32[$3 + 16 >> 2] = $2_1;
   $2_1 = HEAPF32[$0_1 + 148 >> 2];
   HEAPF32[$3 + 12 >> 2] = $4_1;
   HEAPF32[$3 + 8 >> 2] = $2_1;
   $399($1_1, $3 + 16 | 0, $3 + 8 | 0, HEAP32[$0_1 + 136 >> 2], Math_fround(1.0));
  }
  label$22 : {
   if (($11_1 | 0) != ($22_1 | 0)) {
    break label$22
   }
   $5_1 = HEAP32[$0_1 + 84 >> 2];
   if (($5_1 | 0) <= 0) {
    break label$22
   }
   $7_1 = HEAP8[$0_1 + 436 | 0];
   $15_1 = HEAP32[$0_1 + 16 >> 2];
   $1_1 = 0;
   while (1) {
    HEAP8[($15_1 + Math_imul($1_1, 104) | 0) + 98 | 0] = ($1_1 | 0) < ($7_1 | 0);
    $1_1 = $1_1 + 1 | 0;
    if (($5_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  if (($11_1 | 0) == ($12_1 | 0)) {
   HEAP8[$0_1 + 452 | 0] = 1;
   $4_1 = HEAPF32[$9 + 452 >> 2];
   $2_1 = HEAPF32[$9 + 460 >> 2];
   HEAPF32[$0_1 + 320 >> 2] = $2_1;
   HEAPF32[$0_1 + 288 >> 2] = $2_1;
   HEAP8[$0_1 + 439 | 0] = HEAPU8[$0_1 + 440 | 0];
   $10_1 = HEAPF32[$0_1 + 104 >> 2];
   $6_1 = Math_fround($10_1 + Math_fround(1.0));
   $4_1 = $4_1 <= $6_1 ? $6_1 : $4_1;
   $2_1 = $2_1 > $4_1 ? $4_1 : $2_1;
   HEAPF32[$0_1 + 312 >> 2] = $2_1;
   HEAPF32[$0_1 + 280 >> 2] = $2_1;
   $6_1 = HEAPF32[$0_1 + 100 >> 2];
   $4_1 = Math_fround(Math_fround($10_1 + HEAPF32[$0_1 + 248 >> 2]) - HEAPF32[$0_1 + 216 >> 2]);
   HEAPF32[$9 + 212 >> 2] = $4_1;
   HEAPF32[$0_1 + 100 >> 2] = $4_1 - Math_fround($10_1 - $6_1);
   HEAPF32[$0_1 + 104 >> 2] = $4_1;
   $11_1 = HEAP32[$0_1 + 84 >> 2];
   if (($11_1 | 0) > 0) {
    $12_1 = HEAP32[$0_1 + 16 >> 2];
    $1_1 = 0;
    while (1) {
     $5_1 = $12_1 + Math_imul($1_1, 104) | 0;
     HEAP8[$5_1 + 87 | 0] = HEAPU8[$5_1 + 89 | 0];
     HEAPF32[$5_1 + 36 >> 2] = $2_1;
     $1_1 = $1_1 + 1 | 0;
     if (($11_1 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   $2_1 = HEAPF32[$1_1 + 44 >> 2];
   $5_1 = $1_1 + 40 | 0;
   $4_1 = HEAPF32[$5_1 >> 2];
   $10_1 = HEAPF32[$1_1 + 36 >> 2];
   $6_1 = HEAPF32[$1_1 + 32 >> 2];
   $12_1 = HEAP32[$5_1 + 4 >> 2];
   $11_1 = $9 + 504 | 0;
   HEAP32[$11_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$11_1 + 4 >> 2] = $12_1;
   $5_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$9 + 496 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$9 + 500 >> 2] = $5_1;
   $1_1 = HEAP32[$9 + 580 >> 2];
   HEAPF32[$1_1 + 100 >> 2] = $10_1;
   HEAPF32[$1_1 + 104 >> 2] = $4_1;
   HEAPF32[$1_1 + 108 >> 2] = $2_1;
   HEAPF32[$1_1 + 96 >> 2] = $6_1;
   $1_1 = HEAP32[$9 + 580 >> 2];
   $1_1 = ((HEAP32[$1_1 + 60 >> 2] << 4) + HEAP32[$1_1 + 68 >> 2] | 0) - 16 | 0;
   HEAPF32[$1_1 + 12 >> 2] = $2_1;
   HEAPF32[$1_1 + 8 >> 2] = $4_1;
   HEAPF32[$1_1 + 4 >> 2] = $10_1;
   HEAPF32[$1_1 >> 2] = $6_1;
   $422(HEAP32[$0_1 + 376 >> 2], HEAP32[$9 + 580 >> 2], HEAPU8[HEAP32[$0_1 + 16 >> 2] + 87 | 0]);
  }
  if (!(HEAP8[$0_1 + 120 | 0] & 1)) {
   HEAP32[$0_1 + 124 >> 2] = HEAP32[$0_1 + 124 >> 2] + 1
  }
  HEAP8[$0_1 + 442 | 0] = 0;
  global$0 = $3 + 32 | 0;
 }
 
 function $508($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $2_1 = HEAP32[18392];
  $3 = HEAP32[$2_1 + 12172 >> 2];
  $7_1 = Math_imul($1_1, 12) + 23 & -4;
  $8 = HEAP32[$2_1 + 12168 >> 2];
  $4_1 = $7_1 + $8 | 0;
  label$1 : {
   if (($3 | 0) >= ($4_1 | 0)) {
    break label$1
   }
   $6_1 = $3;
   if ($3) {
    $5_1 = $3 + (($3 | 0) / 2 | 0) | 0
   } else {
    $5_1 = 8
   }
   $3 = ($4_1 | 0) < ($5_1 | 0) ? $5_1 : $4_1;
   if (($6_1 | 0) >= ($3 | 0)) {
    break label$1
   }
   $5_1 = $16($3);
   $6_1 = HEAP32[$2_1 + 12176 >> 2];
   if ($6_1) {
    $1602($5_1, $6_1, HEAP32[$2_1 + 12168 >> 2]);
    $17(HEAP32[$2_1 + 12176 >> 2]);
   }
   HEAP32[$2_1 + 12172 >> 2] = $3;
   HEAP32[$2_1 + 12176 >> 2] = $5_1;
  }
  HEAP32[$2_1 + 12168 >> 2] = $4_1;
  $2_1 = $8 + HEAP32[$2_1 + 12176 >> 2] | 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 >> 2] = $7_1;
  $3 = $2_1 + 12 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2_1 + 4 | 0;
  if (($1_1 | 0) > 0) {
   $4_1 = 0;
   $2_1 = $3 + 16 | 0;
   while (1) {
    HEAP8[$2_1 + 10 | 0] = 255;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP16[$2_1 + 8 >> 1] = 65535;
    HEAP8[$2_1 + 11 | 0] = HEAPU8[$2_1 + 11 | 0] & 240 | 4;
    $2_1 = $2_1 + 12 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != ($1_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP8[$3 + 14 | 0] = 1;
  HEAP8[$3 + 13 | 0] = $1_1;
  HEAP8[$3 + 12 | 0] = $1_1;
  HEAP32[$3 >> 2] = $0_1;
  return $3;
 }
 
 function $509($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  label$1 : {
   $4_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
   $5_1 = HEAP8[$4_1 + 419 | 0];
   if (($5_1 | 0) >= HEAP32[$4_1 + 84 >> 2]) {
    break label$1
   }
   HEAP8[$4_1 + 419 | 0] = $5_1 + 1;
   $6_1 = HEAP32[$4_1 + 16 >> 2];
   $7_1 = $6_1 + Math_imul($5_1, 104) | 0;
   label$2 : {
    if ($1_1 & 24 | !($2_1 > Math_fround(0.0))) {
     break label$2
    }
    $8 = HEAP32[$4_1 + 4 >> 2] & 57344;
    if (!(($8 | 0) == 16384 | ($8 | 0) == 8192)) {
     break label$2
    }
    $1_1 = $1_1 | 16;
   }
   $497($4_1, $7_1, $1_1);
   HEAP32[$7_1 + 48 >> 2] = $3;
   $1_1 = HEAP32[$7_1 >> 2];
   HEAPF32[$7_1 + 28 >> 2] = $2_1;
   label$6 : {
    if (!HEAPU8[$4_1 + 443 | 0]) {
     break label$6
    }
    $3 = Math_imul($5_1, 104) + $6_1 | 0;
    label$7 : {
     if (!(HEAPF32[$3 + 16 >> 2] < Math_fround(0.0)) | !(HEAPF32[$3 + 24 >> 2] < Math_fround(0.0))) {
      break label$7
     }
     if (!(!($2_1 > Math_fround(0.0)) | !($1_1 & 16))) {
      HEAPF32[$3 + 16 >> 2] = $2_1
     }
     if ($1_1 & 8) {
      HEAPF32[$3 + 24 >> 2] = $2_1 > Math_fround(0.0) ? $2_1 : Math_fround(-1.0)
     }
     if (!($2_1 > Math_fround(0.0))) {
      break label$7
     }
     HEAP8[(Math_imul($5_1, 104) + $6_1 | 0) + 99 | 0] = 0;
    }
    if (!(!($1_1 & 2) | HEAPU8[$4_1 + 72 | 0] & 4)) {
     $3 = Math_imul($5_1, 104) + $6_1 | 0;
     HEAP8[$3 + 91 | 0] = 0;
     HEAP8[$3 + 92 | 0] = 0;
    }
    if (!($1_1 & 4) | HEAPU8[$4_1 + 72 | 0] & 8) {
     break label$6
    }
    $3 = Math_imul($5_1, 104) + $6_1 | 0;
    HEAP8[$3 + 86 | 0] = 0;
    HEAP8[$3 + 101 | 0] = HEAPU8[$3 + 101 | 0] & 252 | ($1_1 & 32768 ? 2 : 1);
   }
   $1_1 = Math_imul($5_1, 104) + $6_1 | 0;
   HEAP16[$1_1 + 80 >> 1] = 65535;
   if (!$0_1 | !HEAPU8[$0_1 | 0]) {
    break label$1
   }
   $5_1 = $1_1 + 80 | 0;
   $1_1 = HEAP32[$4_1 + 364 >> 2];
   $3 = $1_1 - 1 | 0;
   HEAP16[$5_1 >> 1] = $1_1 >>> 0 >= $3 >>> 0 ? $3 : 0;
   $39($4_1 + 364 | 0, $0_1, ($1697($0_1) + $0_1 | 0) + 1 | 0);
  }
 }
 
 function $515($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  $3 = ($1_1 | 0) != 16777216 ? $1_1 : 0;
  $1_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  label$1 : {
   label$2 : {
    switch ($0_1 - 1 | 0) {
    case 2:
     if (HEAPF32[$1_1 + 100 >> 2] > HEAPF32[$1_1 + 272 >> 2]) {
      break label$1
     }
     $0_1 = $2_1;
     if (($2_1 | 0) == -1) {
      $0_1 = HEAP32[$1_1 + 92 >> 2]
     }
     $4_1 = HEAP32[$1_1 + 60 >> 2];
     $2_1 = $0_1 & 31;
     if (!((($0_1 & 63) >>> 0 >= 32 ? $4_1 >>> $2_1 | 0 : ((1 << $2_1) - 1 & $4_1) << 32 - $2_1 | HEAP32[$1_1 + 56 >> 2] >>> $2_1) & 1)) {
      break label$1
     }
     $2_1 = HEAP8[$1_1 + 437 | 0];
     if (!(($2_1 | 0) >= 0 & HEAP8[(HEAP32[$1_1 + 32 >> 2] + ($2_1 << 3) | 0) + 4 | 0] == ($0_1 | 0))) {
      HEAP8[$1_1 + 437 | 0] = $2_1 + 1
     }
     $1_1 = HEAP32[$1_1 + 32 >> 2] + (HEAP8[$1_1 + 437 | 0] << 3) | 0;
     HEAP8[$1_1 + 4 | 0] = $0_1;
     HEAP32[$1_1 >> 2] = $3;
     return;
    case 0:
    case 1:
     break label$2;
    default:
     break label$1;
    };
   }
   if (HEAPF32[$1_1 + 100 >> 2] > HEAPF32[$1_1 + 272 >> 2]) {
    break label$1
   }
   HEAP32[($1_1 + ((($0_1 | 0) == 2) << 2) | 0) + 128 >> 2] = $3;
  }
 }
 
 function $517($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0;
  $2_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if (!HEAPU8[$2_1 + 441 | 0]) {
   $496($2_1)
  }
  if (HEAPU8[$2_1 + 442 | 0]) {
   $504($2_1)
  }
  HEAPF32[$2_1 + 108 >> 2] = $1_1;
  HEAP32[$2_1 + 92 >> 2] = -1;
  HEAP8[$2_1 + 442 | 0] = 1;
  HEAP8[$2_1 + 437 | 0] = 255;
  HEAP32[$2_1 + 128 >> 2] = 16777216;
  HEAP32[$2_1 + 132 >> 2] = 16777216;
  $4_1 = HEAP32[$2_1 + 88 >> 2] + 1 | 0;
  HEAP32[$2_1 + 88 >> 2] = $4_1;
  HEAP32[$2_1 + 120 >> 2] = $0_1 & 65535 | HEAP32[$2_1 + 120 >> 2] << 16;
  $3 = HEAPF32[$2_1 + 104 >> 2];
  $0_1 = HEAP32[$2_1 + 360 >> 2];
  if (!(!!$4_1 | HEAP8[$2_1 + 434 | 0] <= 0)) {
   $3 = HEAPF32[$2_1 + 216 >> 2];
   HEAPF32[$0_1 + 212 >> 2] = $3;
  }
  HEAP32[$2_1 + 112 >> 2] = 0;
  HEAPF32[$2_1 + 100 >> 2] = $3;
  HEAPF32[$2_1 + 104 >> 2] = $3;
  HEAPF32[$2_1 + 116 >> 2] = HEAPF32[$0_1 + 272 >> 2] - HEAPF32[$2_1 + 152 >> 2];
  HEAPF32[$0_1 + 236 >> 2] = $3;
  HEAP32[$0_1 + 268 >> 2] = 0;
  label$5 : {
   if (!(HEAP8[$2_1 + 120 | 0] & 1)) {
    break label$5
   }
   $0_1 = $51(42, Math_fround(1.0));
   $4_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
   if (!(HEAPF32[$4_1 + 100 >> 2] > HEAPF32[$4_1 + 272 >> 2])) {
    HEAP32[$4_1 + 128 >> 2] = ($0_1 | 0) != 16777216 ? $0_1 : 0
   }
   if (HEAP32[$2_1 + 88 >> 2]) {
    break label$5
   }
   HEAP8[$2_1 + 445 | 0] = 1;
  }
  $3 = HEAPF32[$2_1 + 168 >> 2];
  $3 = Math_fround(Math_fround($3 + $3) + HEAPF32[$2_1 + 104 >> 2]);
  $1_1 = Math_fround(HEAPF32[$2_1 + 100 >> 2] + $1_1);
  HEAPF32[$2_1 + 104 >> 2] = $1_1 <= $3 ? $3 : $1_1;
  HEAP8[HEAP32[$2_1 + 360 >> 2] + 143 | 0] = 1;
 }
 
 function $519($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($1_1) {
   $2_1 = HEAP32[$1_1 + 92 >> 2];
   if (($0_1 | 0) != ($2_1 | 0)) {
    if (($2_1 | 0) != -1) {
     $5_1 = HEAP32[$1_1 + 360 >> 2];
     $6_1 = HEAP32[$1_1 + 16 >> 2];
     if (HEAP8[$1_1 + 120 | 0] & 1) {
      $7_1 = (Math_imul($2_1, 104) + $6_1 | 0) + 72 | 0
     } else {
      $7_1 = (Math_imul($2_1, 104) + $6_1 | 0) + (HEAPU8[$1_1 + 452 | 0] ? 68 : 64) | 0
     }
     $3 = HEAPF32[$7_1 >> 2];
     $4_1 = HEAPF32[$5_1 + 232 >> 2];
     HEAPF32[$7_1 >> 2] = $3 >= $4_1 ? $3 : $4_1;
     $3 = HEAPF32[$1_1 + 104 >> 2];
     $4_1 = Math_fround(HEAPF32[$5_1 + 236 >> 2] + HEAPF32[$1_1 + 168 >> 2]);
     HEAPF32[$1_1 + 104 >> 2] = $3 >= $4_1 ? $3 : $4_1;
     HEAPF32[(Math_imul($2_1, 104) + $6_1 | 0) + 60 >> 2] = HEAPF32[$5_1 + 384 >> 2];
     $3 = HEAPF32[$1_1 + 112 >> 2];
     $4_1 = HEAPF32[$5_1 + 268 >> 2];
     HEAPF32[$1_1 + 112 >> 2] = $3 >= $4_1 ? $3 : $4_1;
    }
    $520($1_1, $0_1);
   }
   $5_1 = HEAP32[$1_1 + 64 >> 2];
   $2_1 = HEAP32[$1_1 + 68 >> 2];
   $1_1 = $0_1 & 31;
   $2_1 = (($0_1 & 63) >>> 0 >= 32 ? $2_1 >>> $1_1 | 0 : ((1 << $1_1) - 1 & $2_1) << 32 - $1_1 | $5_1 >>> $1_1) & 1;
  }
  return $2_1;
 }
 
 function $520($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = 0;
  HEAP32[$0_1 + 92 >> 2] = $1_1;
  $6_1 = HEAP32[$0_1 + 16 >> 2];
  $2_1 = $6_1 + Math_imul($1_1, 104) | 0;
  $7_1 = HEAPF32[$2_1 + 52 >> 2];
  $4_1 = $7_1;
  $3 = HEAP32[$0_1 + 360 >> 2];
  $4_1 = HEAP8[$2_1 + 2 | 0] & 1 ? Math_fround($4_1 + HEAPF32[$0_1 + 116 >> 2]) : $4_1;
  HEAPF32[$3 + 208 >> 2] = $4_1;
  $5_1 = HEAPF32[$0_1 + 168 >> 2];
  $8 = HEAPF32[$0_1 + 100 >> 2];
  HEAPF32[$3 + 232 >> 2] = $4_1;
  $5_1 = Math_fround($8 + $5_1);
  HEAPF32[$3 + 212 >> 2] = $5_1;
  HEAPF32[$3 + 276 >> 2] = Math_fround($4_1 - HEAPF32[$3 + 12 >> 2]) - HEAPF32[$3 + 272 >> 2];
  HEAPF32[$3 + 264 >> 2] = HEAPF32[$0_1 + 112 >> 2];
  HEAP32[$3 + 292 >> 2] = HEAP8[$2_1 + 98 | 0];
  HEAPF32[$3 + 468 >> 2] = $5_1;
  HEAPF32[$3 + 464 >> 2] = $7_1;
  HEAPF32[$3 + 472 >> 2] = HEAPF32[$2_1 + 56 >> 2];
  HEAPF32[$3 + 384 >> 2] = HEAPF32[$2_1 + 60 >> 2];
  if (!HEAPU8[$2_1 + 90 | 0]) {
   $4_1 = HEAPF32[$0_1 + 104 >> 2];
   HEAPF32[$3 + 212 >> 2] = $4_1 <= $5_1 ? $5_1 : $4_1;
  }
  $9 = Math_imul($1_1, 104) + $6_1 | 0;
  $2_1 = HEAPU8[$9 + 96 | 0];
  HEAP8[$3 + 143 | 0] = $2_1;
  if ($2_1) {
   $2_1 = HEAP32[18392];
   HEAP32[$2_1 + 7240 >> 2] = 0;
   HEAP32[$2_1 + 7248 >> 2] = 0;
  }
  label$4 : {
   if (HEAPU8[$0_1 + 6 | 0] & 16) {
    $422(HEAP32[$0_1 + 376 >> 2], HEAP32[$3 + 580 >> 2], 2);
    break label$4;
   }
   $1_1 = Math_imul($1_1, 104) + $6_1 | 0;
   $4_1 = HEAPF32[$1_1 + 32 >> 2];
   $5_1 = HEAPF32[$1_1 + 44 >> 2];
   $2_1 = $1_1 + 40 | 0;
   $7_1 = HEAPF32[$2_1 >> 2];
   $8 = HEAPF32[$1_1 + 36 >> 2];
   $10_1 = HEAP32[$2_1 + 4 >> 2];
   $6_1 = $3 + 504 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $10_1;
   $2_1 = HEAP32[$1_1 + 36 >> 2];
   HEAP32[$3 + 496 >> 2] = HEAP32[$1_1 + 32 >> 2];
   HEAP32[$3 + 500 >> 2] = $2_1;
   $2_1 = HEAP32[$3 + 580 >> 2];
   HEAPF32[$2_1 + 100 >> 2] = $8;
   HEAPF32[$2_1 + 104 >> 2] = $7_1;
   HEAPF32[$2_1 + 108 >> 2] = $5_1;
   HEAPF32[$2_1 + 96 >> 2] = $4_1;
   $2_1 = HEAP32[$3 + 580 >> 2];
   $2_1 = ((HEAP32[$2_1 + 60 >> 2] << 4) + HEAP32[$2_1 + 68 >> 2] | 0) - 16 | 0;
   HEAPF32[$2_1 + 12 >> 2] = $5_1;
   HEAPF32[$2_1 + 8 >> 2] = $7_1;
   HEAPF32[$2_1 + 4 >> 2] = $8;
   HEAPF32[$2_1 >> 2] = $4_1;
   $422(HEAP32[$0_1 + 376 >> 2], HEAP32[$3 + 580 >> 2], HEAPU8[$1_1 + 87 | 0]);
  }
  $0_1 = HEAP32[18392];
  if (!(HEAPU8[$9 + 96 | 0] | !HEAPU8[$0_1 + 12196 | 0])) {
   $64($3 + 208 | 0, 1059, 0);
   HEAP32[$0_1 + 12228 >> 2] = 2139095039;
  }
 }
 
 function $521() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($0_1) {
   label$2 : {
    label$3 : {
     if (!HEAPU8[$0_1 + 442 | 0]) {
      break label$3
     }
     $2_1 = HEAP32[$0_1 + 92 >> 2];
     $1_1 = $2_1 + 1 | 0;
     if (($1_1 | 0) >= HEAP32[$0_1 + 84 >> 2]) {
      break label$3
     }
     if (($2_1 | 0) == -1) {
      break label$2
     }
     $5_1 = HEAP32[$0_1 + 360 >> 2];
     $6_1 = HEAP32[$0_1 + 16 >> 2];
     if (HEAP8[$0_1 + 120 | 0] & 1) {
      $7_1 = (Math_imul($2_1, 104) + $6_1 | 0) + 72 | 0
     } else {
      $7_1 = (Math_imul($2_1, 104) + $6_1 | 0) + (HEAPU8[$0_1 + 452 | 0] ? 68 : 64) | 0
     }
     $3 = HEAPF32[$7_1 >> 2];
     $4_1 = HEAPF32[$5_1 + 232 >> 2];
     HEAPF32[$7_1 >> 2] = $3 >= $4_1 ? $3 : $4_1;
     $3 = HEAPF32[$0_1 + 104 >> 2];
     $4_1 = Math_fround(HEAPF32[$5_1 + 236 >> 2] + HEAPF32[$0_1 + 168 >> 2]);
     HEAPF32[$0_1 + 104 >> 2] = $3 >= $4_1 ? $3 : $4_1;
     HEAPF32[(Math_imul($2_1, 104) + $6_1 | 0) + 60 >> 2] = HEAPF32[$5_1 + 384 >> 2];
     $3 = HEAPF32[$0_1 + 112 >> 2];
     $4_1 = HEAPF32[$5_1 + 268 >> 2];
     HEAPF32[$0_1 + 112 >> 2] = $3 >= $4_1 ? $3 : $4_1;
     break label$2;
    }
    $517(0, Math_fround(0.0));
    $1_1 = 0;
   }
   $520($0_1, $1_1);
   $5_1 = HEAP32[$0_1 + 64 >> 2];
   $2_1 = HEAP32[$0_1 + 68 >> 2];
   $0_1 = HEAP32[$0_1 + 92 >> 2];
   $1_1 = $0_1 & 31;
   $1_1 = (($0_1 & 63) >>> 0 >= 32 ? $2_1 >>> $1_1 | 0 : ((1 << $1_1) - 1 & $2_1) << 32 - $1_1 | $5_1 >>> $1_1) & 1;
  }
  return $1_1;
 }
 
 function $528() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $9 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if (!HEAPU8[$9 + 441 | 0]) {
   $496($9)
  }
  $278($8 + 8 | 0);
  $10_1 = HEAPF32[$8 + 12 >> 2];
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $7_1 = $259();
  $3 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($3) {
   $2_1 = HEAP32[$3 + 84 >> 2]
  }
  if (($2_1 | 0) > 0) {
   $3 = $2_1;
   $2_1 = 0;
   while (1) {
    $1_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
    $4_1 = 0;
    label$5 : {
     if (!$1_1) {
      break label$5
     }
     $4_1 = (HEAP8[$1_1 + 420 | 0] == ($2_1 | 0)) << 27;
     if (($2_1 | 0) == HEAP32[$1_1 + 84 >> 2]) {
      break label$5
     }
     $4_1 = HEAP32[HEAP32[$1_1 + 16 >> 2] + Math_imul($2_1, 104) >> 2];
    }
    if (($4_1 & 16781312) == 16777216) {
     $12_1 = $6_1 + 8 | 0;
     $4_1 = 0;
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      if (!HEAPU8[$1_1 + 441 | 0]) {
       $4_1 = 19354;
       if (HEAP8[$1_1 + 419 | 0] <= ($2_1 | 0)) {
        break label$9
       }
      }
      $11_1 = HEAP16[(HEAP32[$1_1 + 16 >> 2] + Math_imul($2_1, 104) | 0) + 80 >> 1];
      $4_1 = 19354;
      if (($11_1 | 0) == -1) {
       break label$9
      }
      $4_1 = $11_1 + HEAP32[$1_1 + 372 >> 2] | 0;
     }
     $68($12_1, $4_1, 0, 0, Math_fround(-1.0));
     $5_1 = HEAPF32[$6_1 + 12 >> 2];
     $7_1 = $7_1 >= $5_1 ? $7_1 : $5_1;
    }
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
  $5_1 = HEAPF32[$50() + 96 >> 2];
  global$0 = $6_1 + 16 | 0;
  $7_1 = Math_fround(Math_fround($5_1 + $5_1) + $7_1);
  $517(1, $7_1);
  label$20 : {
   if (HEAPU8[$9 + 455 | 0]) {
    break label$20
   }
   $2_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
   if ($2_1) {
    $0_1 = HEAP32[$2_1 + 84 >> 2]
   }
   $2_1 = $0_1;
   if (($0_1 | 0) > 0) {
    $0_1 = 0;
    while (1) {
     if ($519($0_1)) {
      $3 = HEAP32[HEAP32[18392] + 8036 >> 2];
      $1_1 = 0;
      label$7 : {
       if (!$3) {
        break label$7
       }
       $1_1 = (HEAP8[$3 + 420 | 0] == ($0_1 | 0)) << 27;
       if (($0_1 | 0) == HEAP32[$3 + 84 >> 2]) {
        break label$7
       }
       $1_1 = HEAP32[HEAP32[$3 + 16 >> 2] + Math_imul($0_1, 104) >> 2];
      }
      $6_1 = $1_1 & 4096;
      $1_1 = $6_1 >>> 12 | 0 ? 19354 : 0;
      label$92 : {
       if ($6_1 | !$3) {
        break label$92
       }
       if (!HEAPU8[$3 + 441 | 0]) {
        $1_1 = 19354;
        if (HEAP8[$3 + 419 | 0] <= ($0_1 | 0)) {
         break label$92
        }
       }
       $1_1 = HEAP16[(HEAP32[$3 + 16 >> 2] + Math_imul($0_1, 104) | 0) + 80 >> 1];
       if (($1_1 | 0) == -1) {
        $1_1 = 19354;
        break label$92;
       }
       $1_1 = $1_1 + HEAP32[$3 + 372 >> 2] | 0;
      }
      $266(Math_imul(HEAP32[$9 + 84 >> 2], HEAP16[$9 + 96 >> 1]) + $0_1 | 0);
      $529($1_1);
      $269();
     }
     $0_1 = $0_1 + 1 | 0;
     if (($2_1 | 0) != ($0_1 | 0)) {
      continue
     }
     break;
    };
   }
   $182($8 + 8 | 0);
   if (!$177(1)) {
    break label$20
   }
   $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
   if ($0_1) {
    $3 = HEAP8[$0_1 + 420 | 0]
   } else {
    $3 = -1
   }
   if (($3 | 0) != ($2_1 | 0)) {
    break label$20
   }
   $5_1 = HEAPF32[$8 + 12 >> 2];
   if (!(HEAPU8[$0_1 + 4 | 0] & 7) | (!($5_1 >= $10_1) | !(Math_fround($10_1 + $7_1) > $5_1))) {
    break label$20
   }
   HEAP8[$0_1 + 446 | 0] = 1;
   HEAP16[$0_1 + 98 >> 1] = HEAPU16[$0_1 + 96 >> 1];
   $2_1 = HEAP32[$0_1 + 92 >> 2];
   HEAP8[$0_1 + 432 | 0] = ($2_1 | 0) == HEAP32[$0_1 + 84 >> 2] ? -1 : $2_1;
   $318($23(1873, HEAP32[$0_1 >> 2]), 0);
  }
  global$0 = $8 + 16 | 0;
 }
 
 function $529($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = 0;
  $1_1 = global$0 - 112 | 0;
  global$0 = $1_1;
  $9 = HEAP32[18392];
  $15_1 = HEAP32[$9 + 7080 >> 2];
  label$1 : {
   if (HEAPU8[$15_1 + 143 | 0]) {
    break label$1
   }
   $2_1 = HEAP32[$9 + 8036 >> 2];
   $6_1 = HEAP32[$2_1 + 16 >> 2];
   $8 = HEAP32[$2_1 + 92 >> 2];
   $18_1 = $0_1 ? $0_1 : 19354;
   $23_1 = $62($18_1);
   $68($1_1 + 104 | 0, $18_1, $23_1, 1, Math_fround(-1.0));
   $0_1 = HEAP32[$15_1 + 212 >> 2];
   HEAP32[$1_1 + 96 >> 2] = HEAP32[$15_1 + 208 >> 2];
   HEAP32[$1_1 + 100 >> 2] = $0_1;
   $4_1 = Math_imul($8, 104);
   $0_1 = $4_1 + HEAP32[$2_1 + 16 >> 2] | 0;
   $10_1 = HEAPF32[$0_1 + 8 >> 2];
   $12_1 = HEAPU8[$0_1 + 84 | 0] == 255 ? Math_fround($10_1 - HEAPF32[$2_1 + 172 >> 2]) : $10_1;
   $10_1 = HEAPF32[$0_1 + 12 >> 2];
   $10_1 = HEAPU8[$0_1 + 85 | 0] == 255 ? Math_fround($10_1 + HEAPF32[$2_1 + 176 >> 2]) : $10_1;
   $17_1 = HEAPF32[$2_1 + 104 >> 2];
   $20_1 = HEAPF32[$2_1 + 100 >> 2];
   $14 = HEAPF32[$2_1 + 108 >> 2];
   $11_1 = HEAPF32[$2_1 + 168 >> 2];
   $19 = HEAPF32[$1_1 + 108 >> 2];
   HEAP32[$1_1 + 92 >> 2] = 0;
   $13 = Math_fround($14 - Math_fround($11_1 + $11_1));
   $0_1 = $13 <= $19;
   $4_1 = $4_1 + $6_1 | 0;
   label$6 : {
    if (!(!(HEAPU8[$2_1 + 4 | 0] & 8) | HEAPU8[$4_1 + 1 | 0] & 2)) {
     $11_1 = Math_fround(Math_fround(HEAPF32[$9 + 6468 >> 2] * Math_fround(.6499999761581421)) + HEAPF32[$9 + 5476 >> 2]);
     label$8 : {
      if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
       $7_1 = ~~$11_1;
       break label$8;
      }
      $7_1 = -2147483648;
     }
     $11_1 = Math_fround($7_1 | 0);
     $3 = HEAP8[($6_1 + Math_imul($8, 104) | 0) + 86 | 0];
     if (($3 | 0) <= 0) {
      $14 = Math_fround(0.0)
     } else {
      HEAP32[$1_1 + 32 >> 2] = $3 + 1;
      $3 = $1_1 + 92 | 0;
      $21($3, 4, 13404, $1_1 + 32 | 0);
      $14 = HEAPF32[$9 + 5500 >> 2];
      $68($1_1 + 76 | 0, $3, 0, 0, Math_fround(-1.0));
      $14 = Math_fround($14 + HEAPF32[$1_1 + 76 >> 2]);
     }
     break label$6;
    }
    $11_1 = Math_fround(0.0);
    $14 = Math_fround(0.0);
   }
   $19 = $0_1 ? $19 : $13;
   $22_1 = HEAPF32[$1_1 + 104 >> 2];
   $25_1 = HEAPF32[$1_1 + 96 >> 2];
   $0_1 = $6_1 + Math_imul($8, 104) | 0;
   $13 = HEAPF32[$0_1 + 72 >> 2];
   $24 = HEAPF32[$0_1 + 56 >> 2];
   HEAPF32[$0_1 + 72 >> 2] = $13 >= $24 ? $13 : $24;
   $13 = HEAPF32[$0_1 + 76 >> 2];
   $22_1 = Math_fround($11_1 + Math_fround($14 + Math_fround($25_1 + $22_1)));
   HEAPF32[$0_1 + 76 >> 2] = $13 >= $22_1 ? $13 : $22_1;
   $0_1 = 0;
   label$12 : {
    if (!HEAPU8[$2_1 + 446 | 0]) {
     break label$12
    }
    $0_1 = 0;
    if (HEAP8[$2_1 + 432 | 0] != ($8 | 0)) {
     break label$12
    }
    $0_1 = HEAPU16[$2_1 + 98 >> 1] == HEAPU16[$2_1 + 96 >> 1];
   }
   $7_1 = $76($15_1, $18_1);
   $13 = HEAPF32[$9 + 5512 >> 2];
   HEAPF32[$1_1 + 80 >> 2] = $20_1;
   $20_1 = Math_fround(Math_fround($13 + $13) + Math_fround($20_1 + $19));
   HEAPF32[$1_1 + 88 >> 2] = $17_1 >= $20_1 ? $17_1 : $20_1;
   HEAPF32[$1_1 + 84 >> 2] = $10_1;
   HEAPF32[$1_1 + 76 >> 2] = $12_1;
   HEAPF32[$1_1 + 72 >> 2] = $19;
   HEAP32[$1_1 + 68 >> 2] = 0;
   $212($1_1 + 68 | 0, Math_fround(-1.0));
   if (!$213($1_1 + 76 | 0, $7_1, 0, 0)) {
    break label$1
   }
   $26_1 = $569($1_1 + 76 | 0, $7_1, $1_1 + 67 | 0, $1_1 + 66 | 0, 4096);
   if (HEAP32[$9 + 7136 >> 2] != ($7_1 | 0)) {
    $202()
   }
   $3 = HEAPU8[$1_1 + 66 | 0];
   $5_1 = HEAPU8[$1_1 + 67 | 0];
   label$15 : {
    if (($0_1 | ($3 | $5_1) != 0) == 1) {
     $16_1 = $51($3 ? 26 : $5_1 ? 25 : 24, Math_fround(1.0));
     $3 = HEAP32[HEAP32[18392] + 8036 >> 2];
     if (HEAPF32[$3 + 100 >> 2] > HEAPF32[$3 + 272 >> 2]) {
      break label$15
     }
     $0_1 = HEAP32[$2_1 + 92 >> 2];
     if (($0_1 | 0) == -1) {
      $0_1 = HEAP32[$3 + 92 >> 2]
     }
     $21_1 = HEAP32[$3 + 60 >> 2];
     $5_1 = $0_1 & 31;
     if (!((($0_1 & 63) >>> 0 >= 32 ? $21_1 >>> $5_1 | 0 : ((1 << $5_1) - 1 & $21_1) << 32 - $5_1 | HEAP32[$3 + 56 >> 2] >>> $5_1) & 1)) {
      break label$15
     }
     $5_1 = HEAP8[$3 + 437 | 0];
     if (!(($5_1 | 0) >= 0 & HEAP8[(HEAP32[$3 + 32 >> 2] + ($5_1 << 3) | 0) + 4 | 0] == ($0_1 | 0))) {
      HEAP8[$3 + 437 | 0] = $5_1 + 1
     }
     $3 = HEAP32[$3 + 32 >> 2] + (HEAP8[$3 + 437 | 0] << 3) | 0;
     HEAP8[$3 + 4 | 0] = $0_1;
     HEAP32[$3 >> 2] = ($16_1 | 0) != 16777216 ? $16_1 : 0;
     break label$15;
    }
    if (HEAP8[$2_1 + 120 | 0] & 1) {
     break label$15
    }
    $16_1 = $51(42, Math_fround(1.0));
    $3 = HEAP32[HEAP32[18392] + 8036 >> 2];
    if (HEAPF32[$3 + 100 >> 2] > HEAPF32[$3 + 272 >> 2]) {
     break label$15
    }
    $0_1 = HEAP32[$2_1 + 92 >> 2];
    if (($0_1 | 0) == -1) {
     $0_1 = HEAP32[$3 + 92 >> 2]
    }
    $21_1 = HEAP32[$3 + 60 >> 2];
    $5_1 = $0_1 & 31;
    if (!((($0_1 & 63) >>> 0 >= 32 ? $21_1 >>> $5_1 | 0 : ((1 << $5_1) - 1 & $21_1) << 32 - $5_1 | HEAP32[$3 + 56 >> 2] >>> $5_1) & 1)) {
     break label$15
    }
    $5_1 = HEAP8[$3 + 437 | 0];
    if (!(($5_1 | 0) >= 0 & HEAP8[(HEAP32[$3 + 32 >> 2] + ($5_1 << 3) | 0) + 4 | 0] == ($0_1 | 0))) {
     HEAP8[$3 + 437 | 0] = $5_1 + 1
    }
    $3 = HEAP32[$3 + 32 >> 2] + (HEAP8[$3 + 437 | 0] << 3) | 0;
    HEAP8[$3 + 4 | 0] = $0_1;
    HEAP32[$3 >> 2] = ($16_1 | 0) != 16777216 ? $16_1 : 0;
   }
   $73($1_1 + 76 | 0, $7_1, 10);
   label$23 : {
    if (HEAPU8[$1_1 + 66 | 0]) {
     HEAP8[$2_1 + 425 | 0] = $8;
     $0_1 = $15_1 + 212 | 0;
     HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] + Math_fround(HEAPF32[$9 + 5496 >> 2] * Math_fround(-.5));
     if (!(HEAPU8[$2_1 + 4 | 0] & 2)) {
      break label$23
     }
     if (!$181(0, Math_fround(-1.0)) | HEAPU8[$9 + 7876 | 0]) {
      break label$23
     }
     HEAP8[$2_1 + 426 | 0] = $8;
     HEAP16[$2_1 + 98 >> 1] = HEAPU16[$2_1 + 96 >> 1];
     $17_1 = HEAPF32[$9 + 880 >> 2];
     label$25 : {
      if (!($17_1 < Math_fround(0.0)) | !(HEAPF32[$9 + 228 >> 2] < $12_1)) {
       break label$25
      }
      $0_1 = HEAP8[($6_1 + Math_imul($8, 104) | 0) + 84 | 0];
      if (($0_1 | 0) == -1) {
       $0_1 = 0
      } else {
       $0_1 = HEAP32[$2_1 + 16 >> 2] + Math_imul($0_1, 104) | 0
      }
      if (!$0_1 | (HEAP32[$0_1 >> 2] | HEAP32[$4_1 >> 2]) & 64) {
       break label$25
      }
      $3 = HEAP8[$2_1 + 435 | 0];
      if ((($3 | 0) <= HEAP8[($6_1 + Math_imul($8, 104) | 0) + 83 | 0] | 0) == (($3 | 0) > HEAP8[$0_1 + 83 | 0] | 0)) {
       break label$25
      }
      HEAP8[$2_1 + 427 | 0] = 255;
     }
     if (!($17_1 > Math_fround(0.0)) | !($10_1 < HEAPF32[$9 + 228 >> 2])) {
      break label$23
     }
     $0_1 = HEAP8[($6_1 + Math_imul($8, 104) | 0) + 85 | 0];
     if (($0_1 | 0) == -1) {
      $0_1 = 0
     } else {
      $0_1 = HEAP32[$2_1 + 16 >> 2] + Math_imul($0_1, 104) | 0
     }
     if (!$0_1 | (HEAP32[$0_1 >> 2] | HEAP32[$4_1 >> 2]) & 64) {
      break label$23
     }
     $3 = HEAP8[$2_1 + 435 | 0];
     if ((($3 | 0) <= HEAP8[($6_1 + Math_imul($8, 104) | 0) + 83 | 0] | 0) == (($3 | 0) > HEAP8[$0_1 + 83 | 0] | 0)) {
      break label$23
     }
     HEAP8[$2_1 + 427 | 0] = 1;
     break label$23;
    }
    $0_1 = $15_1 + 212 | 0;
    HEAPF32[$0_1 >> 2] = HEAPF32[$0_1 >> 2] + Math_fround(HEAPF32[$9 + 5496 >> 2] * Math_fround(-.5));
   }
   $10_1 = Math_fround(Math_fround($10_1 - $11_1) - $14);
   label$30 : {
    if (!(HEAPU8[$2_1 + 4 | 0] & 8) | HEAPU8[$4_1 + 1 | 0] & 2) {
     break label$30
    }
    $0_1 = HEAP8[($6_1 + Math_imul($8, 104) | 0) + 86 | 0];
    if (($0_1 | 0) != -1) {
     $12_1 = $10_1 <= $12_1 ? $12_1 : $10_1;
     $11_1 = HEAPF32[$1_1 + 100 >> 2];
     if (($0_1 | 0) > 0) {
      $55(0, $51(0, Math_fround(.699999988079071)));
      $17_1 = HEAPF32[$9 + 5500 >> 2];
      HEAPF32[$1_1 + 60 >> 2] = $11_1;
      HEAPF32[$1_1 + 56 >> 2] = $12_1 + $17_1;
      $0_1 = HEAP32[$1_1 + 60 >> 2];
      HEAP32[$1_1 + 24 >> 2] = HEAP32[$1_1 + 56 >> 2];
      HEAP32[$1_1 + 28 >> 2] = $0_1;
      $63($1_1 + 24 | 0, $1_1 + 92 | 0, 0, 1);
      $57(1);
      $12_1 = Math_fround($14 + $12_1);
     }
     $0_1 = HEAP32[$15_1 + 580 >> 2];
     HEAPF32[$1_1 + 52 >> 2] = $11_1;
     HEAPF32[$1_1 + 48 >> 2] = $12_1;
     $3 = $51(0, Math_fround(1.0));
     $6_1 = HEAPU8[($6_1 + Math_imul($8, 104) | 0) + 101 | 0];
     $7_1 = HEAP32[$1_1 + 52 >> 2];
     HEAP32[$1_1 + 16 >> 2] = HEAP32[$1_1 + 48 >> 2];
     HEAP32[$1_1 + 20 >> 2] = $7_1;
     $476($0_1, $1_1 + 16 | 0, $3, ($6_1 & 3) == 1 ? 2 : 3, Math_fround(.6499999761581421));
    }
    if (!$26_1 | HEAP8[$2_1 + 426 | 0] == ($8 | 0)) {
     break label$30
    }
    __inlined_func$525 : {
     if (HEAPU8[$4_1 + 86 | 0] != 255) {
      $2_1 = HEAPU8[$4_1 + 101 | 0];
      $6_1 = $2_1 & 3;
      $4_1 = HEAPU8[$4_1 + 102 | 0];
      $0_1 = 0;
      while (1) {
       $7_1 = $4_1 >>> (($0_1 + 1 >>> 0) % (($2_1 >>> 2 & 3) >>> 0) << 1) & 3;
       if (($6_1 | 0) == ($4_1 >>> ($0_1 << 1) & 3)) {
        break __inlined_func$525
       }
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) != 3) {
        continue
       }
       break;
      };
      $7_1 = 0;
      break __inlined_func$525;
     }
     $7_1 = HEAPU8[$4_1 + 102 | 0] & 3;
    }
    $4_1 = 0;
    $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
    $3 = HEAPU8[$9 + 253 | 0] & HEAPU8[$0_1 + 7 | 0] >>> 2;
    $2_1 = 0;
    label$10 : {
     if (($3 | 0) != 1) {
      break label$10
     }
     $6_1 = HEAP32[$0_1 + 84 >> 2];
     $2_1 = 1;
     if (($6_1 | 0) <= 0) {
      break label$10
     }
     $5_1 = HEAP32[$0_1 + 16 >> 2];
     $2_1 = 0;
     while (1) {
      $4_1 = $4_1 << 24 >> 24;
      $16_1 = HEAP8[(Math_imul($2_1, 104) + $5_1 | 0) + 86 | 0];
      $4_1 = ($4_1 | 0) > ($16_1 | 0) ? $4_1 : $16_1;
      $2_1 = $2_1 + 1 | 0;
      if (($6_1 | 0) != ($2_1 | 0)) {
       continue
      }
      break;
     };
     $2_1 = $4_1 + 1 | 0;
    }
    $6_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($8, 104) | 0;
    $7_1 = $7_1 & 3;
    HEAP8[$6_1 + 101 | 0] = $7_1 | HEAPU8[$6_1 + 101 | 0] & 252;
    $4_1 = $6_1 + 86 | 0;
    label$3 : {
     label$4 : {
      if (!$7_1) {
       $2_1 = 255;
       break label$4;
      }
      if (HEAPU8[$4_1 | 0] != 255 & $3) {
       break label$3
      }
     }
     HEAP8[$4_1 | 0] = $2_1;
    }
    if (HEAP32[$0_1 + 84 >> 2] > 0) {
     $4_1 = 0;
     while (1) {
      $2_1 = HEAP32[$0_1 + 16 >> 2] + Math_imul($4_1, 104) | 0;
      if (!(($2_1 | 0) == ($6_1 | 0) | $3)) {
       HEAP8[$2_1 + 86 | 0] = 255
      }
      label$9 : {
       if (HEAPU8[$2_1 + 86 | 0] == 255) {
        break label$9
       }
       $7_1 = HEAPU8[$2_1 + 101 | 0];
       if ($7_1 >>> 4 >>> ($7_1 & 3) & 1) {
        break label$9
       }
       HEAP8[$2_1 + 101 | 0] = HEAPU8[$2_1 + 102 | 0] & 3 | $7_1 & 252;
       HEAP8[$0_1 + 444 | 0] = 1;
      }
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) < HEAP32[$0_1 + 84 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP8[$0_1 + 444 | 0] = 1;
    HEAP8[$0_1 + 448 | 0] = 1;
   }
   $0_1 = HEAP32[$15_1 + 580 >> 2];
   $12_1 = HEAPF32[$9 + 5480 >> 2];
   HEAPF32[$1_1 + 68 >> 2] = $10_1;
   HEAPF32[$1_1 + 72 >> 2] = $12_1 + Math_fround($19 + HEAPF32[$1_1 + 100 >> 2]);
   $70($0_1, $1_1 + 96 | 0, $1_1 + 68 | 0, $10_1, $10_1, $18_1, $23_1, $1_1 + 104 | 0);
   if (!(!(HEAPF32[$9 + 7132 >> 2] > HEAPF32[$9 + 12080 >> 2]) | (!(HEAPF32[$1_1 + 104 >> 2] > Math_fround($10_1 - HEAPF32[$1_1 + 96 >> 2])) | !HEAPU8[$1_1 + 67 | 0]))) {
    HEAP32[$1_1 + 4 >> 2] = $18_1;
    HEAP32[$1_1 >> 2] = $23_1 - $18_1;
    $162(5445, $1_1);
   }
   if (!$177(1)) {
    break label$1
   }
   if (!$89(0)) {
    break label$1
   }
   $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
   if (!(HEAPU8[$0_1 + 4 | 0] & 7)) {
    break label$1
   }
   $8 = ($8 | 0) == -1 ? HEAP32[$0_1 + 92 >> 2] : $8;
   HEAP8[$0_1 + 446 | 0] = 1;
   HEAP16[$0_1 + 98 >> 1] = HEAPU16[$0_1 + 96 >> 1];
   HEAP8[$0_1 + 432 | 0] = HEAP32[$0_1 + 84 >> 2] == ($8 | 0) ? -1 : $8;
   $318($23(1873, HEAP32[$0_1 >> 2]), 0);
  }
  global$0 = $1_1 + 112 | 0;
 }
 
 function $531($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $5_1 = global$0 - 144 | 0;
  global$0 = $5_1;
  $3 = HEAP32[$0_1 + 12176 >> 2];
  if ($3) {
   $4_1 = $3 + 4 | 0;
   while (1) {
    $6_1 = $4_1;
    label$3 : {
     if (!HEAP32[$4_1 >> 2]) {
      break label$3
     }
     $8 = HEAP32[$6_1 + 4 >> 2];
     if (!($8 & 15)) {
      break label$3
     }
     $4_1 = HEAP32[$2_1 >> 2];
     $3 = $4_1 - 1 | 0;
     $7_1 = (Math_imul(HEAP8[$6_1 + 12 | 0], 50) + ($4_1 >>> 0 >= $3 >>> 0 ? $3 : 0) | 0) + 30 | 0;
     if (($7_1 | 0) > HEAP32[$2_1 + 4 >> 2]) {
      $4_1 = $16($7_1);
      $3 = HEAP32[$2_1 + 8 >> 2];
      if ($3) {
       $1602($4_1, $3, HEAP32[$2_1 >> 2]);
       $17(HEAP32[$2_1 + 8 >> 2]);
      }
      HEAP32[$2_1 + 4 >> 2] = $7_1;
      HEAP32[$2_1 + 8 >> 2] = $4_1;
     }
     $4_1 = HEAP32[$1_1 >> 2];
     $3 = HEAP32[$6_1 >> 2];
     HEAP32[$5_1 + 136 >> 2] = HEAP8[$6_1 + 12 | 0];
     HEAP32[$5_1 + 132 >> 2] = $3;
     HEAP32[$5_1 + 128 >> 2] = $4_1;
     $40($2_1, 19250, $5_1 + 128 | 0);
     $9 = HEAPF32[$6_1 + 8 >> 2];
     if ($9 != Math_fround(0.0)) {
      HEAPF64[$5_1 + 112 >> 3] = $9;
      $40($2_1, 19190, $5_1 + 112 | 0);
     }
     if (HEAP8[$6_1 + 12 | 0] > 0) {
      $11_1 = $8 & 8;
      $12_1 = $8 & 2;
      $13 = $8 & 4;
      $8 = $8 & 1;
      $10_1 = 0;
      $4_1 = $6_1 + 16 | 0;
      while (1) {
       $7_1 = HEAP32[$4_1 + 4 >> 2] | $8 | $13 | $12_1;
       $3 = ($7_1 | 0) != 0;
       if (!(!!$7_1 | !$11_1)) {
        $3 = HEAPU8[$4_1 + 10 | 0] != 255
       }
       if ($3) {
        HEAP32[$5_1 + 96 >> 2] = $10_1;
        $40($2_1, 12896, $5_1 + 96 | 0);
        $3 = HEAP32[$4_1 + 4 >> 2];
        if ($3) {
         HEAP32[$5_1 + 80 >> 2] = $3;
         $40($2_1, 14562, $5_1 + 80 | 0);
        }
        label$13 : {
         if (!$8) {
          break label$13
         }
         if (HEAPU8[$4_1 + 11 | 0] & 8) {
          HEAPF64[$5_1 + 64 >> 3] = HEAPF32[$4_1 >> 2];
          $40($2_1, 9631, $5_1 - -64 | 0);
         }
         if (HEAPU8[$4_1 + 11 | 0] & 8) {
          break label$13
         }
         $9 = HEAPF32[$4_1 >> 2];
         label$15 : {
          if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
           $3 = ~~$9;
           break label$15;
          }
          $3 = -2147483648;
         }
         HEAP32[$5_1 + 48 >> 2] = $3;
         $40($2_1, 12918, $5_1 + 48 | 0);
        }
        if ($13) {
         HEAP32[$5_1 + 32 >> 2] = HEAPU8[$4_1 + 11 | 0] >>> 2 & 1;
         $40($2_1, 12928, $5_1 + 32 | 0);
        }
        if ($12_1) {
         HEAP32[$5_1 + 16 >> 2] = HEAP8[$4_1 + 9 | 0];
         $40($2_1, 12908, $5_1 + 16 | 0);
        }
        label$19 : {
         if (!$11_1) {
          break label$19
         }
         $7_1 = HEAP8[$4_1 + 10 | 0];
         if (($7_1 | 0) == -1) {
          break label$19
         }
         $3 = HEAPU8[$4_1 + 11 | 0];
         HEAP32[$5_1 >> 2] = $7_1;
         HEAP32[$5_1 + 4 >> 2] = ($3 & 3) == 1 ? 118 : 94;
         $40($2_1, 13519, $5_1);
        }
        $39($2_1, 19353, 0);
       }
       $3 = $10_1 + 1 | 0;
       $10_1 = $3;
       $4_1 = $4_1 + 12 | 0;
       if (($3 | 0) < HEAP8[$6_1 + 12 | 0]) {
        continue
       }
       break;
      };
     }
     $39($2_1, 19353, 0);
    }
    $3 = HEAP32[$6_1 - 4 >> 2] + $6_1 | 0;
    $6_1 = ($3 | 0) == ((HEAP32[$0_1 + 12176 >> 2] + HEAP32[$0_1 + 12168 >> 2] | 0) + 4 | 0);
    $4_1 = $6_1 ? 0 : $3;
    if (!$6_1) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 + 144 | 0;
 }
 
 function $532($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[$0_1 + 8068 >> 2];
  if ($3) {
   $5_1 = HEAP32[$0_1 + 8076 >> 2];
   $1_1 = 0;
   while (1) {
    $2_1 = HEAP32[(($1_1 << 3) + $5_1 | 0) + 4 >> 2];
    label$3 : {
     if (($2_1 | 0) == -1) {
      break label$3
     }
     $4_1 = HEAP32[$0_1 + 8064 >> 2];
     if (!$4_1) {
      break label$3
     }
     $2_1 = Math_imul($2_1, 456) + $4_1 | 0;
     HEAP32[$2_1 + 76 >> 2] = -1;
     HEAP8[$2_1 + 447 | 0] = 1;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($3 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $533($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $0_1 = global$0 - 144 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 140 >> 2] = 0;
  HEAP32[$0_1 + 136 >> 2] = 0;
  HEAP32[$0_1 + 132 >> 2] = 0;
  HEAP32[$0_1 + 128 >> 2] = 0;
  HEAP32[$0_1 + 112 >> 2] = $0_1 + 140;
  label$1 : {
   if (($1690($3, 10018, $0_1 + 112 | 0) | 0) == 1) {
    HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$0_1 + 140 >> 2];
    break label$1;
   }
   HEAP32[$0_1 + 100 >> 2] = $0_1 + 132;
   HEAP32[$0_1 + 96 >> 2] = $0_1 + 136;
   if (($1690($3, 7971, $0_1 + 96 | 0) | 0) != 1) {
    break label$1
   }
   $1_1 = HEAP32[$0_1 + 136 >> 2];
   if (($1_1 | 0) < 0 | ($1_1 | 0) >= HEAP8[$2_1 + 12 | 0]) {
    break label$1
   }
   $1_1 = $20(HEAP32[$0_1 + 132 >> 2] + $3 | 0);
   HEAP8[$0_1 + 127 | 0] = 0;
   $5_1 = $2_1 + 16 | 0;
   $3 = HEAP32[$0_1 + 136 >> 2];
   $4_1 = $5_1 + Math_imul($3, 12) | 0;
   HEAP8[$4_1 + 8 | 0] = $3;
   HEAP32[$0_1 + 84 >> 2] = $0_1 + 132;
   HEAP32[$0_1 + 80 >> 2] = $0_1 + 128;
   if (($1690($1_1, 7995, $0_1 + 80 | 0) | 0) == 1) {
    $1_1 = $20(HEAP32[$0_1 + 132 >> 2] + $1_1 | 0);
    HEAP32[$4_1 + 4 >> 2] = HEAP32[$0_1 + 128 >> 2];
   }
   HEAP32[$0_1 + 68 >> 2] = $0_1 + 132;
   HEAP32[$0_1 + 64 >> 2] = $0_1 + 128;
   if (($1690($1_1, 7947, $0_1 - -64 | 0) | 0) == 1) {
    $1_1 = $20(HEAP32[$0_1 + 132 >> 2] + $1_1 | 0);
    HEAPF32[$4_1 >> 2] = HEAP32[$0_1 + 128 >> 2];
    $6_1 = $5_1 + Math_imul($3, 12) | 0;
    HEAP8[$6_1 + 11 | 0] = HEAPU8[$6_1 + 11 | 0] & 247;
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 1;
   }
   HEAP32[$0_1 + 52 >> 2] = $0_1 + 132;
   HEAP32[$0_1 + 48 >> 2] = $0_1 + 140;
   if (($1690($1_1, 7924, $0_1 + 48 | 0) | 0) == 1) {
    $1_1 = $20(HEAP32[$0_1 + 132 >> 2] + $1_1 | 0);
    HEAPF32[$4_1 >> 2] = HEAPF32[$0_1 + 140 >> 2];
    $4_1 = $5_1 + Math_imul($3, 12) | 0;
    HEAP8[$4_1 + 11 | 0] = HEAPU8[$4_1 + 11 | 0] | 8;
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 1;
   }
   HEAP32[$0_1 + 36 >> 2] = $0_1 + 132;
   HEAP32[$0_1 + 32 >> 2] = $0_1 + 128;
   if (($1690($1_1, 7958, $0_1 + 32 | 0) | 0) == 1) {
    $1_1 = $20(HEAP32[$0_1 + 132 >> 2] + $1_1 | 0);
    $4_1 = $5_1 + Math_imul($3, 12) | 0;
    HEAP8[$4_1 + 11 | 0] = HEAPU8[$0_1 + 128 | 0] << 2 & 4 | HEAPU8[$4_1 + 11 | 0] & 251;
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 4;
   }
   HEAP32[$0_1 + 20 >> 2] = $0_1 + 132;
   HEAP32[$0_1 + 16 >> 2] = $0_1 + 128;
   if (($1690($1_1, 7936, $0_1 + 16 | 0) | 0) == 1) {
    $1_1 = $20(HEAP32[$0_1 + 132 >> 2] + $1_1 | 0);
    HEAP8[($5_1 + Math_imul($3, 12) | 0) + 9 | 0] = HEAP32[$0_1 + 128 >> 2];
    HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 2;
   }
   HEAP32[$0_1 + 8 >> 2] = $0_1 + 132;
   HEAP32[$0_1 + 4 >> 2] = $0_1 + 127;
   HEAP32[$0_1 >> 2] = $0_1 + 128;
   if (($1690($1_1, 7983, $0_1) | 0) != 2) {
    break label$1
   }
   $20(HEAP32[$0_1 + 132 >> 2] + $1_1 | 0);
   $1_1 = $5_1 + Math_imul($3, 12) | 0;
   HEAP8[$1_1 + 10 | 0] = HEAP32[$0_1 + 128 >> 2];
   HEAP8[$1_1 + 11 | 0] = HEAPU8[$1_1 + 11 | 0] & 252 | (HEAPU8[$0_1 + 127 | 0] == 94 ? 2 : 1);
   HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 8;
  }
  global$0 = $0_1 + 144 | 0;
 }
 
 function $534($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 >> 2] = $3 + 12;
  HEAP32[$3 + 4 >> 2] = $3 + 8;
  $0_1 = 0;
  label$1 : {
   if (($1690($2_1, 12990, $3) | 0) < 2) {
    break label$1
   }
   $1_1 = HEAP32[18392];
   $0_1 = HEAP32[$1_1 + 12176 >> 2];
   $4_1 = $0_1 + 4 | 0;
   $2_1 = $0_1 ? $4_1 : 0;
   $6_1 = HEAP32[$3 + 12 >> 2];
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    while (1) {
     if (($6_1 | 0) == HEAP32[$2_1 >> 2]) {
      break label$2
     }
     $0_1 = $2_1 + HEAP32[$2_1 - 4 >> 2] | 0;
     $5_1 = $4_1 + HEAP32[$1_1 + 12168 >> 2] | 0;
     $2_1 = ($5_1 | 0) != ($0_1 | 0) ? $0_1 : 0;
     if (($0_1 | 0) != ($5_1 | 0)) {
      continue
     }
     break;
    };
   }
   $0_1 = $2_1;
   if ($0_1) {
    $5_1 = HEAP32[$3 + 8 >> 2];
    $4_1 = HEAP8[$0_1 + 13 | 0];
    if (($5_1 | 0) <= ($4_1 | 0)) {
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     $1_1 = $0_1 + 8 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     if (($4_1 | 0) > 0) {
      $2_1 = 0;
      $1_1 = $0_1 + 16 | 0;
      while (1) {
       HEAP8[$1_1 + 10 | 0] = 255;
       HEAP32[$1_1 >> 2] = 0;
       HEAP32[$1_1 + 4 >> 2] = 0;
       HEAP16[$1_1 + 8 >> 1] = 65535;
       HEAP8[$1_1 + 11 | 0] = HEAPU8[$1_1 + 11 | 0] & 240 | 4;
       $1_1 = $1_1 + 12 | 0;
       $2_1 = $2_1 + 1 | 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
     }
     HEAP8[$0_1 + 14 | 0] = 1;
     HEAP8[$0_1 + 13 | 0] = $4_1;
     HEAP8[$0_1 + 12 | 0] = $5_1;
     HEAP32[$0_1 >> 2] = $6_1;
     break label$1;
    }
    HEAP32[$0_1 >> 2] = 0;
   }
   $0_1 = $508(HEAP32[$3 + 12 >> 2], HEAP32[$3 + 8 >> 2]);
  }
  $1_1 = $0_1;
  global$0 = $3 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $535($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = HEAP32[$0_1 + 8068 >> 2];
  if ($2_1) {
   $5_1 = HEAP32[$0_1 + 8076 >> 2];
   $1_1 = 0;
   while (1) {
    $3 = HEAP32[(($1_1 << 3) + $5_1 | 0) + 4 >> 2];
    label$3 : {
     if (($3 | 0) == -1) {
      break label$3
     }
     $4_1 = HEAP32[$0_1 + 8064 >> 2];
     if (!$4_1) {
      break label$3
     }
     HEAP32[(Math_imul($3, 456) + $4_1 | 0) + 76 >> 2] = -1;
    }
    $1_1 = $1_1 + 1 | 0;
    if (($1_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  $1_1 = HEAP32[$0_1 + 12176 >> 2];
  if ($1_1) {
   HEAP32[$0_1 + 12168 >> 2] = 0;
   HEAP32[$0_1 + 12172 >> 2] = 0;
   $17($1_1);
   HEAP32[$0_1 + 12176 >> 2] = 0;
  }
 }
 
 function $540($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0);
  $1_1 = global$0 - 96 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$1_1 + 84 >> 2] = HEAP8[$0_1 + 12 | 0];
  HEAP32[$1_1 + 80 >> 2] = $2_1;
  if ($708($2_1, 17794, $1_1 + 80 | 0)) {
   HEAP32[$1_1 + 64 >> 2] = HEAP32[$0_1 + 4 >> 2];
   $567(14455, $1_1 - -64 | 0);
   $2_1 = HEAP8[$0_1 + 12 | 0];
   HEAP32[$1_1 + 52 >> 2] = HEAP8[$0_1 + 13 | 0];
   HEAP32[$1_1 + 48 >> 2] = $2_1;
   $567(18544, $1_1 + 48 | 0);
   if (HEAP8[$0_1 + 12 | 0] > 0) {
    $7_1 = $0_1 + 16 | 0;
    $8 = $1_1 + 32 | 0;
    $9 = $1_1 + 24 | 0;
    $10_1 = $1_1 + 20 | 0;
    $2_1 = 0;
    while (1) {
     $4_1 = 0;
     $3 = Math_imul($2_1, 12) + $7_1 | 0;
     $5_1 = HEAP8[$3 + 10 | 0];
     if (($5_1 | 0) != -1) {
      $4_1 = HEAPU8[$3 + 11 | 0] & 3
     }
     $11_1 = HEAP8[$3 + 9 | 0];
     $6_1 = HEAPU8[$3 + 11 | 0];
     $12_1 = HEAPF32[$3 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$3 + 4 >> 2];
     HEAPF64[$9 >> 3] = $12_1;
     HEAP32[$10_1 >> 2] = $6_1 & 8 ? 3308 : 19097;
     HEAP32[$1_1 + 16 >> 2] = $6_1 >>> 2 & 1;
     HEAP32[$1_1 + 12 >> 2] = ($4_1 | 0) == 1 ? 13407 : ($4_1 | 0) == 2 ? 5288 : 17686;
     HEAP32[$1_1 + 8 >> 2] = $5_1;
     HEAP32[$1_1 + 4 >> 2] = $11_1;
     HEAP32[$1_1 >> 2] = $2_1;
     $567(14365, $1_1);
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) < HEAP8[$0_1 + 12 | 0]) {
      continue
     }
     break;
    };
   }
   $716();
  }
  global$0 = $1_1 + 96 | 0;
 }
 
 function $541() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
  if ($0_1) {
   $1_1 = HEAP32[$0_1 + 12 >> 2]
  }
  return $1_1 | 0;
 }
 
 function $542() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
  if (!$0_1) {
   return 1
  }
  return HEAP32[$0_1 + 16 >> 2];
 }
 
 function $544($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0);
  $1_1 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
  if (!$1_1) {
   return Math_fround(Math_fround(0.0))
  }
  $2_1 = HEAPF32[$1_1 + 20 >> 2];
  return Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 24 >> 2] - $2_1) * HEAPF32[HEAP32[$1_1 + 100 >> 2] + Math_imul(($0_1 | 0) < 0 ? HEAP32[$1_1 + 12 >> 2] : $0_1, 28) >> 2]) + $2_1));
 }
 
 function $545($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
  label$1 : {
   if (!$1_1) {
    $208($2_1 + 8 | 0);
    $3 = HEAPF32[$2_1 + 8 >> 2];
    break label$1;
   }
   $0_1 = HEAP32[$1_1 + 100 >> 2] + Math_imul(($0_1 | 0) < 0 ? HEAP32[$1_1 + 12 >> 2] : $0_1, 28) | 0;
   $3 = Math_fround(Math_fround(HEAPF32[$0_1 + 28 >> 2] - HEAPF32[$0_1 >> 2]) * Math_fround(HEAPF32[$1_1 + 24 >> 2] - HEAPF32[$1_1 + 20 >> 2]));
  }
  global$0 = $2_1 + 16 | 0;
  return Math_fround($3);
 }
 
 function $546($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  while (1) {
   $3 = $1_1;
   $7_1 = HEAP32[18392];
   $2_1 = HEAP32[HEAP32[$7_1 + 7080 >> 2] + 368 >> 2];
   $0_1 = ($0_1 | 0) < 0 ? HEAP32[$2_1 + 12 >> 2] : $0_1;
   $5_1 = 0;
   $1_1 = Math_fround(0.0);
   $8 = HEAP32[$2_1 + 4 >> 2];
   $5_1 = $8 & 4 ? $5_1 : (HEAP32[$2_1 + 16 >> 2] - 1 | 0) > ($0_1 | 0);
   if ($5_1) {
    $9 = HEAPU8[$2_1 + 9 | 0];
    $6_1 = HEAP32[$2_1 + 100 >> 2] + Math_imul(($0_1 | 0) < 0 ? HEAP32[$2_1 + 12 >> 2] : $0_1, 28) | 0;
    $1_1 = Math_fround(Math_fround(HEAPF32[($9 ? $6_1 + 32 | 0 : $6_1 + 28 | 0) >> 2] - HEAPF32[($9 ? $6_1 + 4 | 0 : $6_1) >> 2]) * Math_fround(HEAPF32[$2_1 + 24 >> 2] - HEAPF32[$2_1 + 20 >> 2]));
   }
   if (!($8 & 8)) {
    $4_1 = Math_fround(HEAPF32[$2_1 + 24 >> 2] - Math_fround(HEAPF32[$7_1 + 5528 >> 2] * Math_fround(HEAP32[$2_1 + 16 >> 2] - $0_1 | 0)));
    $3 = $3 < $4_1 ? $3 : $4_1;
   }
   $4_1 = HEAPF32[$2_1 + 20 >> 2];
   HEAPF32[HEAP32[$2_1 + 100 >> 2] + Math_imul($0_1, 28) >> 2] = Math_fround($3 - $4_1) / Math_fround(HEAPF32[$2_1 + 24 >> 2] - $4_1);
   if ($5_1) {
    $0_1 = $0_1 + 1 | 0;
    $4_1 = $3;
    $3 = HEAPF32[$7_1 + 5528 >> 2];
    $1_1 = Math_fround($4_1 + ($1_1 <= $3 ? $3 : $1_1));
    continue;
   }
   break;
  };
 }
 
 function $547($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $0_1 = ($0_1 | 0) < 0 ? HEAP32[HEAP32[$2_1 + 368 >> 2] + 12 >> 2] : $0_1;
  $4_1 = $0_1 + 1 | 0;
  $2_1 = HEAP32[$2_1 + 368 >> 2];
  if ($2_1) {
   $3 = HEAPF32[$2_1 + 20 >> 2];
   $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 24 >> 2] - $3) * HEAPF32[HEAP32[$2_1 + 100 >> 2] + Math_imul(($0_1 | 0) < 0 ? HEAP32[$2_1 + 12 >> 2] : $0_1, 28) >> 2]) + $3);
  } else {
   $3 = Math_fround(0.0)
  }
  $546($4_1, Math_fround($3 + $1_1));
 }
 
 function $548() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0);
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $1_1 = HEAP32[$2_1 + 368 >> 2];
  if (HEAP32[$1_1 + 16 >> 2] != 1) {
   $0_1 = HEAP32[$2_1 + 500 >> 2];
   HEAP32[$1_1 + 60 >> 2] = HEAP32[$2_1 + 496 >> 2];
   HEAP32[$1_1 + 64 >> 2] = $0_1;
   $0_1 = $2_1 + 504 | 0;
   $4_1 = HEAP32[$0_1 + 4 >> 2];
   $3 = $1_1 + 68 | 0;
   HEAP32[$3 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $4_1;
   $5_1 = HEAPF32[$1_1 + 56 >> 2];
   $3 = $1_1 + 52 | 0;
   $6_1 = HEAPF32[$3 >> 2];
   $7_1 = HEAPF32[$1_1 + 48 >> 2];
   $8 = HEAPF32[$1_1 + 44 >> 2];
   $4_1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $4_1;
   $0_1 = HEAP32[$1_1 + 48 >> 2];
   HEAP32[$2_1 + 496 >> 2] = HEAP32[$1_1 + 44 >> 2];
   HEAP32[$2_1 + 500 >> 2] = $0_1;
   $0_1 = HEAP32[$2_1 + 580 >> 2];
   HEAPF32[$0_1 + 96 >> 2] = $8;
   HEAPF32[$0_1 + 100 >> 2] = $7_1;
   HEAPF32[$0_1 + 104 >> 2] = $6_1;
   HEAPF32[$0_1 + 108 >> 2] = $5_1;
   $0_1 = HEAP32[$2_1 + 580 >> 2];
   $0_1 = ((HEAP32[$0_1 + 60 >> 2] << 4) + HEAP32[$0_1 + 68 >> 2] | 0) - 16 | 0;
   HEAPF32[$0_1 + 12 >> 2] = $5_1;
   HEAPF32[$0_1 + 8 >> 2] = $6_1;
   HEAPF32[$0_1 + 4 >> 2] = $7_1;
   HEAPF32[$0_1 >> 2] = $8;
   $422($1_1 + 104 | 0, HEAP32[$2_1 + 580 >> 2], 0);
  }
 }
 
 function $549() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = 0;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $1_1 = HEAP32[$2_1 + 368 >> 2];
  if (HEAP32[$1_1 + 16 >> 2] != 1) {
   $3 = HEAPF32[$1_1 + 72 >> 2];
   $0_1 = $1_1 + 68 | 0;
   $4_1 = HEAPF32[$0_1 >> 2];
   $5_1 = HEAPF32[$1_1 - -64 >> 2];
   $6_1 = HEAPF32[$1_1 + 60 >> 2];
   $8 = HEAP32[$0_1 + 4 >> 2];
   $7_1 = $2_1 + 504 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $8;
   $0_1 = HEAP32[$1_1 + 64 >> 2];
   HEAP32[$2_1 + 496 >> 2] = HEAP32[$1_1 + 60 >> 2];
   HEAP32[$2_1 + 500 >> 2] = $0_1;
   $0_1 = HEAP32[$2_1 + 580 >> 2];
   HEAPF32[$0_1 + 100 >> 2] = $5_1;
   HEAPF32[$0_1 + 104 >> 2] = $4_1;
   HEAPF32[$0_1 + 108 >> 2] = $3;
   HEAPF32[$0_1 + 96 >> 2] = $6_1;
   $0_1 = HEAP32[$2_1 + 580 >> 2];
   $0_1 = ((HEAP32[$0_1 + 60 >> 2] << 4) + HEAP32[$0_1 + 68 >> 2] | 0) - 16 | 0;
   HEAPF32[$0_1 + 12 >> 2] = $3;
   HEAPF32[$0_1 + 8 >> 2] = $4_1;
   HEAPF32[$0_1 + 4 >> 2] = $5_1;
   HEAPF32[$0_1 >> 2] = $6_1;
   $422($1_1 + 104 | 0, HEAP32[$2_1 + 580 >> 2], HEAP32[$1_1 + 12 >> 2] + 1 | 0);
  }
 }
 
 function $552() {
  var $0_1 = 0, $1_1 = Math_fround(0), $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = 0;
  $6_1 = HEAP32[18392];
  $2_1 = HEAP32[$6_1 + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$2_1 + 143 | 0]) {
    break label$1
   }
   $4_1 = HEAP32[$2_1 + 368 >> 2];
   if (!$4_1) {
    break label$1
   }
   $0_1 = HEAP32[$4_1 + 16 >> 2];
   if (($0_1 | 0) == 1) {
    $1_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 12 >> 2] + HEAPF32[$2_1 + 272 >> 2]) + HEAPF32[$2_1 + 276 >> 2]);
    label$3 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
      $4_1 = ~~$1_1;
      break label$3;
     }
     $4_1 = -2147483648;
    }
    HEAPF32[$2_1 + 208 >> 2] = $4_1 | 0;
    return;
   }
   $3 = HEAP32[$4_1 + 12 >> 2] + 1 | 0;
   HEAP32[$4_1 + 12 >> 2] = ($0_1 | 0) != ($3 | 0) ? $3 : 0;
   $291();
   $0_1 = HEAP32[$4_1 + 100 >> 2] + Math_imul(HEAP32[$4_1 + 12 >> 2], 28) | 0;
   $1_1 = HEAPF32[$0_1 + 12 >> 2];
   $5_1 = HEAPF32[$0_1 + 24 >> 2];
   $3 = $0_1 + 20 | 0;
   $7_1 = HEAPF32[$3 >> 2];
   $8 = HEAPF32[$0_1 + 16 >> 2];
   $10_1 = HEAP32[$3 + 4 >> 2];
   $9 = $2_1 + 504 | 0;
   HEAP32[$9 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$9 + 4 >> 2] = $10_1;
   $3 = HEAP32[$0_1 + 16 >> 2];
   HEAP32[$2_1 + 496 >> 2] = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$2_1 + 500 >> 2] = $3;
   $0_1 = HEAP32[$2_1 + 580 >> 2];
   HEAPF32[$0_1 + 100 >> 2] = $8;
   HEAPF32[$0_1 + 104 >> 2] = $7_1;
   HEAPF32[$0_1 + 108 >> 2] = $5_1;
   HEAPF32[$0_1 + 96 >> 2] = $1_1;
   $0_1 = HEAP32[$2_1 + 580 >> 2];
   $0_1 = ((HEAP32[$0_1 + 60 >> 2] << 4) + HEAP32[$0_1 + 68 >> 2] | 0) - 16 | 0;
   HEAPF32[$0_1 + 12 >> 2] = $5_1;
   HEAPF32[$0_1 + 8 >> 2] = $7_1;
   HEAPF32[$0_1 + 4 >> 2] = $8;
   HEAPF32[$0_1 >> 2] = $1_1;
   $422($4_1 + 104 | 0, HEAP32[$2_1 + 580 >> 2], HEAP32[$4_1 + 12 >> 2] + 1 | 0);
   $7_1 = HEAPF32[$6_1 + 5492 >> 2];
   $1_1 = HEAPF32[$4_1 + 32 >> 2];
   $5_1 = HEAPF32[$2_1 + 212 >> 2];
   $1_1 = $1_1 >= $5_1 ? $1_1 : $5_1;
   HEAPF32[$4_1 + 32 >> 2] = $1_1;
   $0_1 = HEAP32[$4_1 + 12 >> 2];
   label$5 : {
    if (($0_1 | 0) > 0) {
     $6_1 = $2_1 + 276 | 0;
     $3 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
     if ($3) {
      $1_1 = HEAPF32[$3 + 20 >> 2];
      $1_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$3 + 24 >> 2] - $1_1) * HEAPF32[HEAP32[$3 + 100 >> 2] + Math_imul(($0_1 | 0) < 0 ? HEAP32[$3 + 12 >> 2] : $0_1, 28) >> 2]) + $1_1);
     } else {
      $1_1 = Math_fround(0.0)
     }
     HEAPF32[$6_1 >> 2] = $7_1 + Math_fround($1_1 - HEAPF32[$2_1 + 272 >> 2]);
     break label$5;
    }
    $5_1 = Math_fround($7_1 - HEAPF32[$2_1 + 60 >> 2]);
    HEAPF32[$2_1 + 276 >> 2] = $5_1 >= Math_fround(0.0) ? $5_1 : Math_fround(0.0);
    HEAPF32[$4_1 + 28 >> 2] = $1_1;
   }
   $1_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 12 >> 2] + HEAPF32[$2_1 + 272 >> 2]) + HEAPF32[$2_1 + 276 >> 2]);
   label$10 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$1_1;
     break label$10;
    }
    $0_1 = -2147483648;
   }
   HEAPF32[$2_1 + 208 >> 2] = $0_1 | 0;
   HEAPF32[$2_1 + 212 >> 2] = HEAPF32[$4_1 + 28 >> 2];
   HEAP32[$2_1 + 264 >> 2] = 0;
   $0_1 = $2_1 + 248 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $0_1 = HEAP32[$4_1 + 12 >> 2];
   $1_1 = Math_fround(0.0);
   $3 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
   if ($3) {
    $1_1 = HEAPF32[$3 + 20 >> 2];
    $5_1 = Math_fround(HEAPF32[$3 + 24 >> 2] - $1_1);
    $6_1 = HEAP32[$3 + 100 >> 2];
    $4_1 = $0_1;
    if (($0_1 | 0) < 0) {
     $4_1 = HEAP32[$3 + 12 >> 2]
    }
    $1_1 = Math_fround(Math_fround($5_1 * HEAPF32[$6_1 + Math_imul($4_1, 28) >> 2]) + $1_1);
   }
   $5_1 = $1_1;
   $1_1 = Math_fround(0.0);
   if ($3) {
    $1_1 = HEAPF32[$3 + 20 >> 2];
    $8 = Math_fround(HEAPF32[$3 + 24 >> 2] - $1_1);
    $6_1 = HEAP32[$3 + 100 >> 2];
    if (($0_1 | 0) > -2) {
     $4_1 = $0_1 + 1 | 0
    } else {
     $4_1 = HEAP32[$3 + 12 >> 2]
    }
    $1_1 = Math_fround(Math_fround($8 * HEAPF32[$6_1 + Math_imul($4_1, 28) >> 2]) + $1_1);
   }
   $289(Math_fround(Math_fround($1_1 - $5_1) * Math_fround(.6499999761581421)));
   HEAPF32[$2_1 + 472 >> 2] = Math_fround($1_1 + HEAPF32[$2_1 + 12 >> 2]) - $7_1;
  }
 }
 
 function $553() {
  var $0_1 = Math_fround(0), $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = Math_fround(0);
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $10_1 = HEAP32[18392];
  $5_1 = HEAP32[$10_1 + 7080 >> 2];
  HEAP8[$5_1 + 140 | 0] = 1;
  $8 = HEAP32[$5_1 + 368 >> 2];
  $291();
  if (HEAP32[$8 + 16 >> 2] >= 2) {
   $159();
   $421($8 + 104 | 0, HEAP32[$5_1 + 580 >> 2]);
  }
  $0_1 = HEAPF32[$8 + 32 >> 2];
  $1_1 = $5_1 + 212 | 0;
  $4_1 = HEAPF32[$1_1 >> 2];
  $0_1 = $0_1 >= $4_1 ? $0_1 : $4_1;
  HEAPF32[$8 + 32 >> 2] = $0_1;
  $6_1 = HEAP32[$8 + 4 >> 2];
  HEAPF32[$1_1 >> 2] = $0_1;
  if (!($6_1 & 16)) {
   HEAPF32[$5_1 + 232 >> 2] = HEAPF32[$8 + 40 >> 2]
  }
  $1_1 = 0;
  label$3 : {
   if ($6_1 & 1) {
    break label$3
   }
   if (HEAPU8[$5_1 + 143 | 0]) {
    break label$3
   }
   $2_1 = -1;
   $1_1 = HEAP32[$8 + 16 >> 2];
   $3 = $1_1;
   if (($3 | 0) >= 2) {
    $4_1 = HEAPF32[$5_1 + 508 >> 2];
    $4_1 = $0_1 < $4_1 ? $0_1 : $4_1;
    $0_1 = HEAPF32[$8 + 36 >> 2];
    $9 = HEAPF32[$5_1 + 500 >> 2];
    $9 = $0_1 >= $9 ? $0_1 : $9;
    $11_1 = Math_fround($9 + Math_fround(1.0));
    $13 = $6_1 & 2;
    $1_1 = -1;
    $6_1 = 1;
    while (1) {
     $14 = HEAPF32[$5_1 + 12 >> 2];
     $2_1 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
     if ($2_1) {
      $0_1 = HEAPF32[$2_1 + 20 >> 2];
      $0_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 24 >> 2] - $0_1) * HEAPF32[HEAP32[$2_1 + 100 >> 2] + Math_imul($6_1, 28) >> 2]) + $0_1);
     } else {
      $0_1 = Math_fround(0.0)
     }
     $3 = HEAP32[$8 + 100 >> 2];
     $2_1 = HEAP32[$8 >> 2];
     HEAPF32[$7_1 + 44 >> 2] = $4_1;
     $0_1 = Math_fround($14 + $0_1);
     HEAPF32[$7_1 + 40 >> 2] = $0_1 + Math_fround(4.0);
     HEAPF32[$7_1 + 36 >> 2] = $9;
     HEAPF32[$7_1 + 32 >> 2] = $0_1 + Math_fround(-4.0);
     $2_1 = $2_1 + $6_1 | 0;
     $79($2_1);
     if (!$95($7_1 + 32 | 0, $2_1)) {
      HEAP8[$7_1 + 31 | 0] = 0;
      HEAP8[$7_1 + 30 | 0] = 0;
      label$10 : {
       if ($13) {
        break label$10
       }
       $569($7_1 + 32 | 0, $2_1, $7_1 + 31 | 0, $7_1 + 30 | 0, 0);
       $2_1 = HEAPU8[$7_1 + 30 | 0];
       if ($2_1 | HEAPU8[$7_1 + 31 | 0]) {
        HEAP32[$10_1 + 7872 >> 2] = 4
       }
       if (!$2_1) {
        break label$10
       }
       $1_1 = HEAPU8[($3 + Math_imul($6_1, 28) | 0) + 8 | 0] & 2 ? $1_1 : $6_1;
      }
      $3 = $51(HEAPU8[$7_1 + 30 | 0] ? 29 : HEAPU8[$7_1 + 31 | 0] ? 28 : 27, Math_fround(1.0));
      $2_1 = HEAP32[$5_1 + 580 >> 2];
      HEAPF32[$7_1 + 24 >> 2] = $11_1;
      if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
       $12_1 = ~~$0_1
      } else {
       $12_1 = -2147483648
      }
      $0_1 = Math_fround($12_1 | 0);
      HEAPF32[$7_1 + 20 >> 2] = $0_1;
      HEAPF32[$7_1 + 16 >> 2] = $4_1;
      HEAPF32[$7_1 + 12 >> 2] = $0_1;
      $399($2_1, $7_1 + 20 | 0, $7_1 + 12 | 0, $3, Math_fround(1.0));
     }
     $2_1 = $1_1;
     $6_1 = $6_1 + 1 | 0;
     $3 = HEAP32[$8 + 16 >> 2];
     if (($6_1 | 0) < ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $1_1 = ($2_1 | 0) != -1;
   if (!$1_1) {
    break label$3
   }
   if (!(HEAPU8[$8 + 9 | 0] | ($3 | 0) < 0)) {
    $10_1 = HEAP32[$8 + 100 >> 2];
    $1_1 = 0;
    while (1) {
     $6_1 = $10_1 + Math_imul($1_1, 28) | 0;
     HEAPF32[$6_1 + 4 >> 2] = HEAPF32[$6_1 >> 2];
     $6_1 = $1_1;
     $1_1 = $1_1 + 1 | 0;
     if (($3 | 0) != ($6_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP8[$8 + 9 | 0] = 1;
   $1_1 = HEAP32[18392];
   $3 = HEAP32[$1_1 + 7080 >> 2];
   $0_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 228 >> 2] - HEAPF32[$1_1 + 7176 >> 2]) + Math_fround(4.0)) - HEAPF32[$3 + 12 >> 2]);
   $3 = HEAP32[$3 + 368 >> 2];
   if ($3) {
    $4_1 = HEAPF32[$3 + 20 >> 2];
    $9 = Math_fround(HEAPF32[$3 + 24 >> 2] - $4_1);
    $10_1 = HEAP32[$3 + 100 >> 2];
    if (($2_1 | 0) > 0) {
     $6_1 = $2_1 - 1 | 0
    } else {
     $6_1 = HEAP32[$3 + 12 >> 2]
    }
    $4_1 = Math_fround(Math_fround($9 * HEAPF32[$10_1 + Math_imul($6_1, 28) >> 2]) + $4_1);
   } else {
    $4_1 = Math_fround(0.0)
   }
   $9 = HEAPF32[$1_1 + 5528 >> 2];
   $4_1 = Math_fround($4_1 + $9);
   $0_1 = $0_1 >= $4_1 ? $0_1 : $4_1;
   if (HEAPU8[$8 + 4 | 0] & 4) {
    if ($3) {
     $4_1 = HEAPF32[$3 + 20 >> 2];
     $11_1 = Math_fround(HEAPF32[$3 + 24 >> 2] - $4_1);
     $6_1 = HEAP32[$3 + 100 >> 2];
     if (($2_1 | 0) > -2) {
      $1_1 = $2_1 + 1 | 0
     } else {
      $1_1 = HEAP32[$3 + 12 >> 2]
     }
     $4_1 = Math_fround(Math_fround($11_1 * HEAPF32[$6_1 + Math_imul($1_1, 28) >> 2]) + $4_1);
    } else {
     $4_1 = Math_fround(0.0)
    }
    $4_1 = Math_fround($4_1 - $9);
    $0_1 = $0_1 < $4_1 ? $0_1 : $4_1;
   }
   $546($2_1, $0_1);
   $1_1 = 1;
  }
  HEAP8[$8 + 9 | 0] = $1_1;
  $1_1 = $5_1 + 488 | 0;
  $3 = HEAP32[$1_1 + 4 >> 2];
  $2_1 = $5_1 + 472 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $3;
  $2_1 = HEAP32[$5_1 + 484 >> 2];
  HEAP32[$5_1 + 464 >> 2] = HEAP32[$5_1 + 480 >> 2];
  HEAP32[$5_1 + 468 >> 2] = $2_1;
  $2_1 = $8 + 84 | 0;
  $3 = HEAP32[$2_1 >> 2];
  $2_1 = HEAP32[$2_1 + 4 >> 2];
  $6_1 = HEAP32[$8 + 80 >> 2];
  $8 = HEAP32[$8 + 76 >> 2];
  HEAP32[$5_1 + 368 >> 2] = 0;
  HEAP32[$5_1 + 276 >> 2] = 0;
  HEAP32[$5_1 + 480 >> 2] = $8;
  HEAP32[$5_1 + 484 >> 2] = $6_1;
  HEAP32[$1_1 >> 2] = $3;
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $0_1 = Math_fround(Math_fround(HEAPF32[$5_1 + 12 >> 2] + HEAPF32[$5_1 + 272 >> 2]) + Math_fround(0.0));
  label$28 : {
   if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$0_1;
    break label$28;
   }
   $1_1 = -2147483648;
  }
  HEAPF32[$5_1 + 208 >> 2] = $1_1 | 0;
  global$0 = $7_1 + 48 | 0;
 }
 
 function $555($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
  $3 = global$0 + -64 | 0;
  global$0 = $3;
  $8 = HEAP32[18392];
  $7_1 = HEAP32[$8 + 7080 >> 2];
  HEAP8[$7_1 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$7_1 + 143 | 0]) {
    break label$1
   }
   $5_1 = ($0_1 | 0) == ($1_1 | 0);
   $0_1 = $5_1 ? 19354 : $0_1;
   $1_1 = $5_1 ? 19354 : $1_1;
   if (!$1_1) {
    $1_1 = $1697($0_1) + $0_1 | 0
   }
   $9 = Math_fround(HEAPF32[$7_1 + 212 >> 2] + HEAPF32[$7_1 + 264 >> 2]);
   $11_1 = HEAPF32[$7_1 + 208 >> 2];
   label$3 : {
    label$4 : {
     $4_1 = HEAPF32[$7_1 + 388 >> 2];
     if (!(($1_1 - $0_1 | 0) < 2001 | $4_1 >= Math_fround(0.0))) {
      $12_1 = $259();
      HEAP32[$3 + 56 >> 2] = 0;
      HEAP32[$3 + 60 >> 2] = 0;
      if (HEAPU8[$8 + 12196 | 0]) {
       break label$4
      }
      $6_1 = Math_fround(Math_fround(HEAPF32[$7_1 + 500 >> 2] - $9) / $12_1);
      label$6 : {
       if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
        $8 = ~~$6_1;
        break label$6;
       }
       $8 = -2147483648;
      }
      if (($8 | 0) <= 0) {
       break label$4
      }
      if ($0_1 >>> 0 >= $1_1 >>> 0) {
       $6_1 = Math_fround(0.0)
      } else {
       $10_1 = $2_1 & 1;
       $5_1 = 0;
       while (1) {
        $7_1 = $1644($0_1, 10, $1_1 - $0_1 | 0);
        $7_1 = $7_1 ? $7_1 : $1_1;
        if (!$10_1) {
         $4_1 = HEAPF32[$3 + 56 >> 2];
         $68($3 + 40 | 0, $0_1, $7_1, 0, Math_fround(-1.0));
         $6_1 = HEAPF32[$3 + 40 >> 2];
         HEAPF32[$3 + 56 >> 2] = $4_1 >= $6_1 ? $4_1 : $6_1;
        }
        $5_1 = $5_1 + 1 | 0;
        $0_1 = $7_1 + 1 | 0;
        if (($8 | 0) > ($5_1 | 0) & $1_1 >>> 0 > $0_1 >>> 0) {
         continue
        }
        break;
       };
       $6_1 = Math_fround($5_1 | 0);
      }
      $6_1 = Math_fround(Math_fround($6_1 * $12_1) + $9);
      break label$3;
     }
     if ($4_1 >= Math_fround(0.0)) {
      if ($4_1 < Math_fround(0.0)) {
       $6_1 = Math_fround(0.0)
      } else {
       $2_1 = $7_1 + 208 | 0;
       $5_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
       label$2 : {
        if ($4_1 == Math_fround(0.0)) {
         $4_1 = HEAPF32[$5_1 + 472 >> 2];
         break label$2;
        }
        if (!($4_1 > Math_fround(0.0))) {
         break label$2
        }
        $4_1 = Math_fround(Math_fround(HEAPF32[$5_1 + 12 >> 2] - HEAPF32[$5_1 + 88 >> 2]) + $4_1);
       }
       $6_1 = Math_fround($4_1 - HEAPF32[$2_1 >> 2]);
       $6_1 = $6_1 >= Math_fround(1.0) ? $6_1 : Math_fround(1.0);
      }
     }
     $2_1 = $3 + 56 | 0;
     $68($2_1, $0_1, $1_1, 0, $6_1);
     HEAPF32[$3 + 44 >> 2] = $9;
     HEAPF32[$3 + 52 >> 2] = $9 + HEAPF32[$3 + 60 >> 2];
     HEAPF32[$3 + 40 >> 2] = $11_1;
     HEAPF32[$3 + 48 >> 2] = $11_1 + HEAPF32[$3 + 56 >> 2];
     $212($2_1, Math_fround(0.0));
     if (!$213($3 + 40 | 0, 0, 0, 0)) {
      break label$1
     }
     $5_1 = HEAP32[$3 + 44 >> 2];
     $2_1 = HEAP32[$3 + 40 >> 2];
     HEAP32[$3 + 16 >> 2] = $2_1;
     HEAP32[$3 + 20 >> 2] = $5_1;
     HEAP32[$3 >> 2] = $2_1;
     HEAP32[$3 + 4 >> 2] = $5_1;
     $2_1 = $3;
     $7_1 = HEAP32[18392];
     $8 = HEAP32[$7_1 + 7080 >> 2];
     if (!$1_1) {
      $1_1 = $1697($0_1) + $0_1 | 0
     }
     label$20 : {
      if (($0_1 | 0) == ($1_1 | 0)) {
       break label$20
      }
      $4_1 = HEAPF32[$7_1 + 5620 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$31 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $5_1 = ~~$4_1;
        break label$31;
       }
       $5_1 = -2147483648;
      }
      $5_1 = $5_1 << 8;
      $4_1 = HEAPF32[$7_1 + 5616 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$5 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $10_1 = ~~$4_1;
        break label$5;
       }
       $10_1 = -2147483648;
      }
      $5_1 = $10_1 | $5_1;
      $4_1 = HEAPF32[$7_1 + 5624 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$7 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $10_1 = ~~$4_1;
        break label$7;
       }
       $10_1 = -2147483648;
      }
      $5_1 = $5_1 | $10_1 << 16;
      $10_1 = HEAP32[$8 + 580 >> 2];
      $14 = HEAP32[$7_1 + 6464 >> 2];
      $9 = HEAPF32[$7_1 + 6468 >> 2];
      $4_1 = Math_fround(HEAPF32[$7_1 + 5628 >> 2] * HEAPF32[$7_1 + 5416 >> 2]);
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$9 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $8 = ~~$4_1;
        break label$9;
       }
       $8 = -2147483648;
      }
      $413($10_1, $14, $9, $2_1, $5_1 | $8 << 24, $0_1, $1_1, $6_1, 0);
      if (!HEAPU8[$7_1 + 12196 | 0]) {
       break label$20
      }
      $64($2_1, $0_1, $1_1);
     }
     break label$1;
    }
    $6_1 = $9;
   }
   if ($1_1 >>> 0 > $0_1 >>> 0) {
    HEAPF32[$3 + 44 >> 2] = $6_1;
    HEAPF32[$3 + 52 >> 2] = $12_1 + $6_1;
    HEAPF32[$3 + 40 >> 2] = $11_1;
    HEAPF32[$3 + 48 >> 2] = $11_1 + Math_fround(3402823466385288598117041.0e14);
    while (1) {
     label$16 : {
      if ($95($3 + 40 | 0, 0)) {
       $5_1 = $0_1;
       break label$16;
      }
      $13 = HEAPF32[$3 + 56 >> 2];
      $5_1 = $1644($0_1, 10, $1_1 - $0_1 | 0);
      $8 = $5_1 ? $5_1 : $1_1;
      $68($3 + 32 | 0, $0_1, $8, 0, Math_fround(-1.0));
      HEAPF32[$3 + 24 >> 2] = $11_1;
      $4_1 = HEAPF32[$3 + 32 >> 2];
      HEAPF32[$3 + 56 >> 2] = $4_1 <= $13 ? $13 : $4_1;
      HEAPF32[$3 + 28 >> 2] = $6_1;
      $5_1 = HEAP32[$3 + 28 >> 2];
      HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 24 >> 2];
      HEAP32[$3 + 12 >> 2] = $5_1;
      $63($3 + 8 | 0, $0_1, $8, 0);
      HEAPF32[$3 + 44 >> 2] = $12_1 + HEAPF32[$3 + 44 >> 2];
      HEAPF32[$3 + 52 >> 2] = $12_1 + HEAPF32[$3 + 52 >> 2];
      $5_1 = $8 + 1 | 0;
      $0_1 = $5_1;
      $6_1 = Math_fround($12_1 + $6_1);
      if ($1_1 >>> 0 > $0_1 >>> 0) {
       continue
      }
     }
     break;
    };
    $0_1 = $5_1;
    if ($0_1 >>> 0 < $1_1 >>> 0) {
     $8 = $2_1 & 1;
     $5_1 = 0;
     while (1) {
      $2_1 = $1644($0_1, 10, $1_1 - $0_1 | 0);
      $2_1 = $2_1 ? $2_1 : $1_1;
      if (!$8) {
       $13 = HEAPF32[$3 + 56 >> 2];
       $68($3 + 32 | 0, $0_1, $2_1, 0, Math_fround(-1.0));
       $4_1 = HEAPF32[$3 + 32 >> 2];
       HEAPF32[$3 + 56 >> 2] = $4_1 <= $13 ? $13 : $4_1;
      }
      $5_1 = $5_1 + 1 | 0;
      $0_1 = $2_1 + 1 | 0;
      if ($1_1 >>> 0 > $0_1 >>> 0) {
       continue
      }
      break;
     };
     $4_1 = Math_fround($5_1 | 0);
    } else {
     $4_1 = Math_fround(0.0)
    }
    $6_1 = Math_fround(Math_fround($4_1 * $12_1) + $6_1);
   }
   $6_1 = Math_fround($6_1 - $9);
   HEAPF32[$3 + 60 >> 2] = $6_1;
   HEAPF32[$3 + 52 >> 2] = $9 + $6_1;
   HEAPF32[$3 + 44 >> 2] = $9;
   HEAPF32[$3 + 40 >> 2] = $11_1;
   HEAPF32[$3 + 48 >> 2] = $11_1 + HEAPF32[$3 + 56 >> 2];
   $212($3 + 56 | 0, Math_fround(0.0));
   $213($3 + 40 | 0, 0, 0, 0);
  }
  global$0 = $3 - -64 | 0;
 }
 
 function $556($0_1) {
  $555($0_1, 0, 1);
 }
 
 function $557($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $2_1 = HEAP32[18392];
  $4_1 = HEAP32[$2_1 + 7080 >> 2];
  HEAP8[$4_1 + 140 | 0] = 1;
  if (!HEAPU8[$4_1 + 143 | 0]) {
   $2_1 = $2_1 + 12800 | 0;
   $555($2_1, $22($2_1, $0_1, $1_1) + $2_1 | 0, 1);
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $559($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $2_1;
  $56(0, $0_1);
  label$1 : {
   if (!(HEAPU8[$1_1 + 2 | 0] | (HEAPU8[$1_1 | 0] != 37 | HEAPU8[$1_1 + 1 | 0] != 115))) {
    $555(HEAP32[$2_1 >> 2], 0, 1);
    break label$1;
   }
   $0_1 = HEAP32[18392];
   $4_1 = HEAP32[$0_1 + 7080 >> 2];
   HEAP8[$4_1 + 140 | 0] = 1;
   if (HEAPU8[$4_1 + 143 | 0]) {
    break label$1
   }
   $0_1 = $0_1 + 12800 | 0;
   $555($0_1, $22($0_1, $1_1, $2_1) + $0_1 | 0, 1);
  }
  $57(1);
  global$0 = $3 + 16 | 0;
 }
 
 function $561($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $56(0, HEAP32[18392] + 5632 | 0);
  label$1 : {
   if (!(HEAPU8[$0_1 + 2 | 0] | (HEAPU8[$0_1 | 0] != 37 | HEAPU8[$0_1 + 1 | 0] != 115))) {
    $555(HEAP32[$1_1 >> 2], 0, 1);
    break label$1;
   }
   $2_1 = HEAP32[18392];
   $4_1 = HEAP32[$2_1 + 7080 >> 2];
   HEAP8[$4_1 + 140 | 0] = 1;
   if (HEAPU8[$4_1 + 143 | 0]) {
    break label$1
   }
   $2_1 = $2_1 + 12800 | 0;
   $555($2_1, $22($2_1, $0_1, $1_1) + $2_1 | 0, 1);
  }
  $57(1);
  global$0 = $3 + 16 | 0;
 }
 
 function $567($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  HEAP32[$8 + 12 >> 2] = $1_1;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $6_1 = HEAP32[18392];
  $5_1 = HEAP32[$6_1 + 7080 >> 2];
  HEAP8[$5_1 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$5_1 + 143 | 0]) {
    break label$1
   }
   $7_1 = $6_1 + 12800 | 0;
   $0_1 = $7_1 + $22($7_1, $0_1, $1_1) | 0;
   $68($2_1 + 56 | 0, $7_1, $0_1, 0, Math_fround(-1.0));
   $4_1 = HEAPF32[$2_1 + 56 >> 2];
   if ($4_1 > Math_fround(0.0)) {
    $3 = HEAPF32[$6_1 + 5476 >> 2];
    $3 = Math_fround(Math_fround($3 + $3) + $4_1);
   }
   $4_1 = HEAPF32[$6_1 + 6468 >> 2];
   HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$2_1 + 60 >> 2];
   HEAPF32[$2_1 + 48 >> 2] = $4_1 + $3;
   $3 = HEAPF32[$5_1 + 212 >> 2];
   $4_1 = HEAPF32[$5_1 + 264 >> 2];
   $10_1 = HEAPF32[$5_1 + 208 >> 2];
   $1_1 = HEAP32[$5_1 + 208 >> 2];
   $212($2_1 + 48 | 0, Math_fround(0.0));
   $3 = Math_fround($3 + $4_1);
   HEAPF32[$2_1 + 36 >> 2] = $3;
   HEAPF32[$2_1 + 44 >> 2] = $3 + HEAPF32[$2_1 + 52 >> 2];
   HEAP32[$2_1 + 32 >> 2] = $1_1;
   HEAPF32[$2_1 + 40 >> 2] = HEAPF32[$2_1 + 48 >> 2] + $10_1;
   if (!$213($2_1 + 32 | 0, 0, 0, 0)) {
    break label$1
   }
   $1_1 = $51(0, Math_fround(1.0));
   $9 = $6_1 + 5476 | 0;
   $3 = HEAPF32[$9 >> 2];
   $5_1 = HEAP32[$5_1 + 580 >> 2];
   $4_1 = Math_fround(HEAPF32[$6_1 + 6468 >> 2] * Math_fround(.5));
   HEAPF32[$2_1 + 28 >> 2] = $4_1 + HEAPF32[$2_1 + 36 >> 2];
   HEAPF32[$2_1 + 24 >> 2] = Math_fround($4_1 + $3) + HEAPF32[$2_1 + 32 >> 2];
   $11_1 = HEAP32[$2_1 + 28 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 24 >> 2];
   HEAP32[$2_1 + 12 >> 2] = $11_1;
   $477($5_1, $2_1 + 8 | 0, $1_1);
   $3 = HEAPF32[$9 >> 2];
   $4_1 = HEAPF32[$6_1 + 6468 >> 2];
   HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$2_1 + 36 >> 2] + Math_fround(0.0);
   HEAPF32[$2_1 + 16 >> 2] = Math_fround($4_1 + Math_fround($3 + $3)) + HEAPF32[$2_1 + 32 >> 2];
   $1_1 = HEAP32[$2_1 + 20 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $63($2_1, $7_1, $0_1, 0);
  }
  global$0 = $2_1 - -64 | 0;
  global$0 = $8 + 16 | 0;
 }
 
 function $569($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = 0, $14 = 0;
  $5_1 = HEAP32[18392];
  $10_1 = HEAP32[$5_1 + 7080 >> 2];
  HEAP8[$10_1 + 140 | 0] = 1;
  $9 = HEAP32[$5_1 + 7084 >> 2];
  $6_1 = !($4_1 & 7) | $4_1;
  $7_1 = $4_1 & 1008 ? $6_1 : $6_1 | 32;
  $4_1 = 0;
  label$1 : {
   if (!($7_1 & 2048)) {
    break label$1
   }
   $4_1 = 0;
   if (!$9) {
    break label$1
   }
   $4_1 = ($10_1 | 0) == HEAP32[$9 + 736 >> 2];
  }
  $8 = $4_1;
  if ($4_1) {
   HEAP32[$5_1 + 7084 >> 2] = $10_1
  }
  $4_1 = $91($0_1, $1_1);
  label$4 : {
   if (!$4_1 | !HEAPU8[$5_1 + 7876 | 0]) {
    break label$4
   }
   if (($1_1 | 0) != HEAP32[$5_1 + 7900 >> 2]) {
    break label$4
   }
   $4_1 = (HEAPU8[$5_1 + 7880 | 0] & 2) >>> 1 & $4_1;
  }
  label$8 : {
   label$9 : {
    if (HEAPU8[$5_1 + 7880 | 0] & 4 | (!HEAPU8[$5_1 + 7876 | 0] | !($7_1 & 512))) {
     break label$9
    }
    if (!$89(128)) {
     break label$9
    }
    $87($1_1);
    $12_1 = HEAPF32[$5_1 + 7128 >> 2];
    if (!($12_1 >= Math_fround(.699999988079071))) {
     $4_1 = 1;
     $6_1 = 0;
     break label$8;
    }
    $4_1 = 1;
    $6_1 = 0;
    if (!(Math_fround($12_1 - HEAPF32[$5_1 + 24 >> 2]) <= Math_fround(.699999988079071))) {
     break label$8
    }
    HEAP32[$5_1 + 7988 >> 2] = $1_1;
    $125($10_1);
    $6_1 = 1;
    break label$8;
   }
   $6_1 = 0;
  }
  if ($8) {
   HEAP32[$5_1 + 7084 >> 2] = $9
  }
  if (($7_1 & 4096) >>> 12 & $4_1) {
   $8 = $4_1;
   $4_1 = HEAP32[$5_1 + 7120 >> 2];
   $4_1 = $8 & (($4_1 | 0) == ($1_1 | 0) | !$4_1);
  }
  $8 = $4_1;
  label$14 : {
   if (!$4_1) {
    $4_1 = $6_1;
    break label$14;
   }
   label$16 : {
    label$17 : {
     if (!($7_1 & 65536)) {
      break label$17
     }
     if (HEAPU8[$5_1 + 252 | 0]) {
      $4_1 = $6_1;
      break label$16;
     }
     if (HEAPU8[$5_1 + 253 | 0]) {
      $4_1 = $6_1;
      break label$16;
     }
     if (!HEAPU8[$5_1 + 254 | 0]) {
      break label$17
     }
     $4_1 = $6_1;
     break label$16;
    }
    $13 = $7_1 & 1;
    label$20 : {
     if ($13) {
      $4_1 = 0;
      $11_1 = 0;
      if (HEAPU8[$5_1 + 992 | 0]) {
       break label$20
      }
     }
     if (!(!($7_1 & 2) | !HEAPU8[$5_1 + 993 | 0])) {
      $4_1 = 0;
      $11_1 = 1;
      break label$20;
     }
     if (!($7_1 & 4)) {
      $4_1 = 1;
      $11_1 = -1;
      break label$20;
     }
     $9 = HEAPU8[$5_1 + 994 | 0];
     $4_1 = !$9;
     $11_1 = $9 ? 2 : -1;
    }
    $14 = $4_1;
    label$24 : {
     if (!(!$13 | !HEAPU8[$5_1 + 1022 | 0])) {
      $4_1 = 1;
      $9 = 0;
      break label$24;
     }
     if ($7_1 & 2) {
      $4_1 = 1;
      $9 = 1;
      if (HEAPU8[$5_1 + 1023 | 0]) {
       break label$24
      }
     }
     if (!($7_1 & 4)) {
      $4_1 = 0;
      $9 = -1;
      break label$24;
     }
     $9 = HEAPU8[$5_1 + 1024 | 0];
     $4_1 = ($9 | 0) != 0;
     $9 = $9 ? 2 : -1;
    }
    $13 = $4_1;
    label$28 : {
     if ($14) {
      break label$28
     }
     if (($1_1 | 0) == HEAP32[$5_1 + 7136 >> 2]) {
      break label$28
     }
     if ($7_1 & 96) {
      $85($1_1, $10_1);
      HEAP32[$5_1 + 7192 >> 2] = $11_1;
      if (!($7_1 & 262144)) {
       $330($1_1, $10_1)
      }
      $125($10_1);
     }
     if (!($7_1 & 16)) {
      if (!($7_1 & 256)) {
       break label$28
      }
      if (HEAPU16[($5_1 + ($11_1 << 1) | 0) + 1002 >> 1] != 2) {
       break label$28
      }
     }
     label$35 : {
      if ($7_1 & 131072) {
       $86();
       break label$35;
      }
      $85($1_1, $10_1);
     }
     if (!($7_1 & 262144)) {
      $330($1_1, $10_1)
     }
     HEAP32[$5_1 + 7192 >> 2] = $11_1;
     $125($10_1);
     $6_1 = 1;
    }
    $4_1 = $6_1;
    if (!(!($7_1 & 128) | $13 ^ 1)) {
     $6_1 = 0;
     $6_1 = ($7_1 & 1024 ? HEAPF32[($5_1 + ($9 << 2) | 0) + 1060 >> 2] >= HEAPF32[$5_1 + 140 >> 2] : $6_1) ^ 1;
     if (!($7_1 & 262144)) {
      $330($1_1, $10_1)
     }
     $86();
     $4_1 = $4_1 | $6_1;
    }
    if (!($7_1 & 1024) | ($1_1 | 0) != HEAP32[$5_1 + 7136 >> 2]) {
     break label$16
    }
    $6_1 = HEAP32[$5_1 + 7192 >> 2];
    if (!(HEAPF32[($5_1 + ($6_1 << 2) | 0) + 1040 >> 2] > Math_fround(0.0))) {
     break label$16
    }
    $4_1 = $176($6_1, 1) | $4_1;
   }
   if ($4_1) {
    HEAP8[$5_1 + 7570 | 0] = 1
   }
  }
  $6_1 = $4_1;
  label$46 : {
   if (($1_1 | 0) != HEAP32[$5_1 + 7512 >> 2]) {
    $4_1 = $8;
    break label$46;
   }
   if (HEAPU8[$5_1 + 7570 | 0]) {
    $4_1 = $8;
    break label$46;
   }
   if (!HEAPU8[$5_1 + 7571 | 0]) {
    $4_1 = $8;
    break label$46;
   }
   $4_1 = HEAP32[$5_1 + 7136 >> 2];
   label$50 : {
    if (!(!$4_1 | ($1_1 | 0) == ($4_1 | 0))) {
     if (HEAP32[$10_1 + 80 >> 2] != ($4_1 | 0)) {
      $4_1 = $8;
      break label$46;
     }
     $4_1 = $8;
     if (!($7_1 & 524288)) {
      break label$50
     }
     break label$46;
    }
    $4_1 = $8;
    if ($7_1 & 524288) {
     break label$46
    }
   }
   $4_1 = 1;
  }
  $9 = $4_1;
  label$53 : {
   if (($1_1 | 0) != HEAP32[$5_1 + 7524 >> 2]) {
    break label$53
   }
   $4_1 = HEAP32[$5_1 + 7520 >> 2];
   $12_1 = $333(0, $7_1 & 1024 ? 3 : 1);
   if (($1_1 | 0) != ($4_1 | 0)) {
    if (!($12_1 > Math_fround(0.0))) {
     break label$53
    }
   }
   $85($1_1, $10_1);
   HEAP32[$5_1 + 7188 >> 2] = 4;
   if (!($7_1 & 262144)) {
    $330($1_1, $10_1)
   }
   $6_1 = 1;
  }
  $4_1 = $6_1;
  label$57 : {
   if (($1_1 | 0) != HEAP32[$5_1 + 7136 >> 2]) {
    $8 = 0;
    $1_1 = $4_1;
    break label$57;
   }
   $8 = 0;
   $6_1 = $4_1;
   label$59 : {
    label$60 : {
     label$61 : {
      switch (HEAP32[$5_1 + 7188 >> 2] - 1 | 0) {
      case 0:
       if (HEAPU8[$5_1 + 7148 | 0]) {
        $12_1 = HEAPF32[$0_1 >> 2];
        HEAPF32[$5_1 + 7180 >> 2] = HEAPF32[$5_1 + 232 >> 2] - HEAPF32[$0_1 + 4 >> 2];
        HEAPF32[$5_1 + 7176 >> 2] = HEAPF32[$5_1 + 228 >> 2] - $12_1;
       }
       $1_1 = HEAP32[$5_1 + 7192 >> 2];
       $6_1 = $1_1 + $5_1 | 0;
       label$64 : {
        if (HEAPU8[$6_1 + 236 | 0]) {
         $1_1 = $4_1;
         $8 = 1;
         break label$64;
        }
        label$66 : {
         if (!($9 & $7_1 >>> 5 | $7_1 & 64)) {
          break label$66
         }
         if (HEAPU8[$5_1 + 7876 | 0]) {
          break label$66
         }
         $0_1 = 0;
         label$69 : {
          if (!($7_1 & 256)) {
           break label$69
          }
          $0_1 = 0;
          if (!HEAPU8[$6_1 + 1022 | 0]) {
           break label$69
          }
          $0_1 = HEAPU16[($5_1 + ($1_1 << 1) | 0) + 1012 >> 1] == 2;
         }
         $8 = 1;
         $8 = $7_1 & 1024 ? !(HEAPF32[($5_1 + ($1_1 << 2) | 0) + 1060 >> 2] >= HEAPF32[$5_1 + 140 >> 2]) : $8;
         if ($0_1) {
          break label$66
         }
         $4_1 = $4_1 | $8;
        }
        $1_1 = $4_1;
        $86();
        $8 = 0;
       }
       if ($7_1 & 262144) {
        break label$60
       }
       HEAP8[$5_1 + 7570 | 0] = 1;
       break label$60;
      case 3:
       break label$61;
      default:
       break label$59;
      };
     }
     if (($1_1 | 0) != HEAP32[$5_1 + 7524 >> 2]) {
      $86()
     }
     break label$59;
    }
    $6_1 = $1_1;
   }
   $1_1 = $6_1;
   if ($1_1) {
    HEAP8[$5_1 + 7151 | 0] = 1
   }
  }
  if ($2_1) {
   HEAP8[$2_1 | 0] = $9
  }
  if ($3) {
   HEAP8[$3 | 0] = $8
  }
  return $1_1;
 }
 
 function $570($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0);
  $3 = global$0 - 112 | 0;
  global$0 = $3;
  $5_1 = HEAP32[18392];
  $4_1 = HEAP32[$5_1 + 7080 >> 2];
  HEAP8[$4_1 + 140 | 0] = 1;
  if (!HEAPU8[$4_1 + 143 | 0]) {
   $8 = $76($4_1, $0_1);
   $68($3 + 104 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $6_1 = HEAPF32[$4_1 + 212 >> 2];
   $11_1 = HEAP32[$4_1 + 208 >> 2];
   $12_1 = HEAPF32[$4_1 + 208 >> 2];
   label$2 : {
    if (!($2_1 & 32768)) {
     break label$2
    }
    $7_1 = HEAPF32[$5_1 + 5480 >> 2];
    $9 = HEAPF32[$4_1 + 264 >> 2];
    if (!($7_1 < $9)) {
     break label$2
    }
    $6_1 = Math_fround($6_1 + Math_fround($9 - $7_1));
   }
   $10_1 = HEAP32[$1_1 >> 2];
   $1_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$3 + 88 >> 2] = $10_1;
   HEAP32[$3 + 92 >> 2] = $1_1;
   $7_1 = HEAPF32[$5_1 + 5476 >> 2];
   $4_1 = $5_1 + 5480 | 0;
   $9 = HEAPF32[$4_1 >> 2];
   HEAP32[$3 + 24 >> 2] = $10_1;
   HEAP32[$3 + 28 >> 2] = $1_1;
   $1_1 = $3 + 96 | 0;
   $293($1_1, $3 + 24 | 0, Math_fround(Math_fround($7_1 + $7_1) + HEAPF32[$3 + 104 >> 2]), Math_fround(Math_fround($9 + $9) + HEAPF32[$3 + 108 >> 2]));
   HEAPF32[$3 + 76 >> 2] = $6_1;
   HEAPF32[$3 + 84 >> 2] = $6_1 + HEAPF32[$3 + 100 >> 2];
   HEAP32[$3 + 72 >> 2] = $11_1;
   HEAPF32[$3 + 80 >> 2] = HEAPF32[$3 + 96 >> 2] + $12_1;
   $212($1_1, HEAPF32[$4_1 >> 2]);
   $10_1 = 0;
   if ($213($3 + 72 | 0, $8, 0, 0)) {
    $1_1 = $3 + 72 | 0;
    $10_1 = $569($1_1, $8, $3 + 71 | 0, $3 + 70 | 0, HEAP32[$5_1 + 7244 >> 2] << 9 & 1024 | $2_1);
    $11_1 = $51(HEAPU8[$3 + 71 | 0] ? (HEAPU8[$3 + 70 | 0] ? 23 : 22) : 21, Math_fround(1.0));
    $73($1_1, $8, 1);
    $4_1 = HEAP32[$3 + 76 >> 2];
    $1_1 = HEAP32[$3 + 72 >> 2];
    HEAP32[$3 + 56 >> 2] = $1_1;
    HEAP32[$3 + 60 >> 2] = $4_1;
    $8 = HEAP32[$3 + 84 >> 2];
    $2_1 = HEAP32[$3 + 80 >> 2];
    HEAP32[$3 + 48 >> 2] = $2_1;
    HEAP32[$3 + 52 >> 2] = $8;
    $6_1 = HEAPF32[$5_1 + 5484 >> 2];
    HEAP32[$3 + 16 >> 2] = $1_1;
    HEAP32[$3 + 20 >> 2] = $4_1;
    HEAP32[$3 + 8 >> 2] = $2_1;
    HEAP32[$3 + 12 >> 2] = $8;
    $71($3 + 16 | 0, $3 + 8 | 0, $11_1, 1, $6_1);
    if (HEAPU8[$5_1 + 12196 | 0]) {
     $341(13983, 13981)
    }
    $6_1 = HEAPF32[$5_1 + 5480 >> 2];
    $7_1 = HEAPF32[$5_1 + 5476 >> 2];
    HEAPF32[$3 + 40 >> 2] = HEAPF32[$3 + 72 >> 2] + $7_1;
    HEAPF32[$3 + 44 >> 2] = $6_1 + HEAPF32[$3 + 76 >> 2];
    HEAPF32[$3 + 36 >> 2] = HEAPF32[$3 + 84 >> 2] - $6_1;
    HEAPF32[$3 + 32 >> 2] = HEAPF32[$3 + 80 >> 2] - $7_1;
    $69($3 + 40 | 0, $3 + 32 | 0, $0_1, 0, $3 + 104 | 0, $5_1 + 5568 | 0, $3 + 72 | 0);
   }
  }
  global$0 = $3 + 112 | 0;
  return $10_1;
 }
 
 function $571($0_1, $1_1) {
  return $570($0_1, $1_1, 0);
 }
 
 function $572($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0);
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[18392] + 5480 | 0;
  $3 = HEAPF32[$2_1 >> 2];
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $0_1 = $570($0_1, $1_1 + 8 | 0, 32768);
  HEAPF32[$2_1 >> 2] = $3;
  global$0 = $1_1 + 16 | 0;
  return $0_1;
 }
 
 function $573($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $3 = global$0 - 48 | 0;
  global$0 = $3;
  $4_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$4_1 + 140 | 0] = 1;
  if (!HEAPU8[$4_1 + 143 | 0]) {
   $0_1 = $76($4_1, $0_1);
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$3 >> 2] = $1_1;
   HEAP32[$3 + 4 >> 2] = $5_1;
   HEAP32[$3 + 32 >> 2] = $1_1;
   HEAP32[$3 + 36 >> 2] = $5_1;
   $6_1 = $3 + 40 | 0;
   $293($6_1, $3, Math_fround(0.0), Math_fround(0.0));
   $7_1 = HEAPF32[$4_1 + 208 >> 2];
   $1_1 = HEAP32[$4_1 + 212 >> 2];
   $5_1 = HEAP32[$4_1 + 208 >> 2];
   HEAPF32[$3 + 28 >> 2] = HEAPF32[$4_1 + 212 >> 2] + HEAPF32[$3 + 44 >> 2];
   HEAP32[$3 + 16 >> 2] = $5_1;
   HEAP32[$3 + 20 >> 2] = $1_1;
   HEAPF32[$3 + 24 >> 2] = $7_1 + HEAPF32[$3 + 40 >> 2];
   $212($6_1, Math_fround(-1.0));
   $5_1 = 0;
   if ($213($3 + 16 | 0, $0_1, 0, 0)) {
    $5_1 = $569($3 + 16 | 0, $0_1, $3 + 15 | 0, $3 + 14 | 0, $2_1)
   }
  }
  global$0 = $3 + 48 | 0;
  return $5_1;
 }
 
 function $574($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = 0, $14 = 0;
  $4_1 = global$0 - 80 | 0;
  global$0 = $4_1;
  $9 = HEAP32[18392];
  $6_1 = HEAP32[$9 + 7080 >> 2];
  HEAP8[$6_1 + 140 | 0] = 1;
  if (!HEAPU8[$6_1 + 143 | 0]) {
   $7_1 = $76($6_1, $0_1);
   $5_1 = HEAPF32[$2_1 >> 2];
   $8 = HEAPF32[$6_1 + 208 >> 2];
   $0_1 = HEAP32[$6_1 + 208 >> 2];
   $11_1 = HEAP32[$6_1 + 212 >> 2];
   HEAPF32[$4_1 + 76 >> 2] = HEAPF32[$6_1 + 212 >> 2] + HEAPF32[$2_1 + 4 >> 2];
   HEAP32[$4_1 + 64 >> 2] = $0_1;
   HEAP32[$4_1 + 68 >> 2] = $11_1;
   HEAPF32[$4_1 + 72 >> 2] = $8 + $5_1;
   $8 = $296();
   $5_1 = Math_fround(-1.0);
   $212($2_1, HEAPF32[$2_1 + 4 >> 2] >= $8 ? HEAPF32[$9 + 5480 >> 2] : $5_1);
   $0_1 = 0;
   if ($213($4_1 - -64 | 0, $7_1, 0, 0)) {
    $10_1 = $4_1 - -64 | 0;
    $0_1 = $569($10_1, $7_1, $4_1 + 63 | 0, $4_1 + 62 | 0, HEAP32[$9 + 7244 >> 2] << 9 & 1024 | $3);
    $13 = $51(HEAPU8[$4_1 + 63 | 0] ? (HEAPU8[$4_1 + 62 | 0] ? 23 : 22) : 21, Math_fround(1.0));
    $14 = $51(0, Math_fround(1.0));
    $73($10_1, $7_1, 1);
    $11_1 = HEAP32[$4_1 + 68 >> 2];
    $3 = HEAP32[$4_1 + 64 >> 2];
    HEAP32[$4_1 + 48 >> 2] = $3;
    HEAP32[$4_1 + 52 >> 2] = $11_1;
    $10_1 = HEAP32[$4_1 + 76 >> 2];
    $7_1 = HEAP32[$4_1 + 72 >> 2];
    HEAP32[$4_1 + 40 >> 2] = $7_1;
    HEAP32[$4_1 + 44 >> 2] = $10_1;
    $5_1 = HEAPF32[$9 + 5484 >> 2];
    HEAP32[$4_1 + 24 >> 2] = $3;
    HEAP32[$4_1 + 28 >> 2] = $11_1;
    HEAP32[$4_1 + 16 >> 2] = $7_1;
    HEAP32[$4_1 + 20 >> 2] = $10_1;
    $71($4_1 + 24 | 0, $4_1 + 16 | 0, $13, 1, $5_1);
    $3 = HEAP32[$6_1 + 580 >> 2];
    $5_1 = HEAPF32[$2_1 >> 2];
    $8 = HEAPF32[$9 + 6468 >> 2];
    $12_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 4 >> 2] - $8) * Math_fround(.5));
    HEAPF32[$4_1 + 36 >> 2] = HEAPF32[$4_1 + 68 >> 2] + ($12_1 <= Math_fround(0.0) ? Math_fround(0.0) : $12_1);
    $5_1 = Math_fround(Math_fround($5_1 - $8) * Math_fround(.5));
    HEAPF32[$4_1 + 32 >> 2] = HEAPF32[$4_1 + 64 >> 2] + ($5_1 <= Math_fround(0.0) ? Math_fround(0.0) : $5_1);
    $2_1 = HEAP32[$4_1 + 36 >> 2];
    HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 32 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $2_1;
    $476($3, $4_1 + 8 | 0, $14, $1_1, Math_fround(1.0));
   }
   $7_1 = $0_1;
  }
  global$0 = $4_1 + 80 | 0;
  return $7_1;
 }
 
 function $576($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  $7_1 = HEAP32[18392];
  $4_1 = HEAPF32[$7_1 + 5476 >> 2];
  $11_1 = HEAPF32[$7_1 + 5480 >> 2];
  $9 = HEAP32[$7_1 + 7080 >> 2];
  $8 = HEAPF32[$7_1 + 6468 >> 2];
  $3 = HEAPF32[$1_1 >> 2];
  $5_1 = HEAPF32[$1_1 + 4 >> 2];
  HEAPF32[$2_1 + 36 >> 2] = $5_1;
  HEAPF32[$2_1 + 32 >> 2] = $3;
  $11_1 = Math_fround(Math_fround($8 + $5_1) + Math_fround($11_1 + $11_1));
  HEAPF32[$2_1 + 44 >> 2] = $11_1;
  $4_1 = Math_fround(Math_fround($8 + $3) + Math_fround($4_1 + $4_1));
  HEAPF32[$2_1 + 40 >> 2] = $4_1;
  if (Math_fround(Math_fround(Math_fround(HEAPF32[$9 + 424 >> 2] - HEAPF32[$9 + 416 >> 2]) * Math_fround(HEAPF32[$9 + 428 >> 2] - HEAPF32[$9 + 420 >> 2])) / Math_fround(Math_fround($4_1 - $3) * Math_fround($11_1 - $5_1))) < Math_fround(1.5)) {
   $10_1 = $2_1 + 44 | 0;
   $8 = HEAPF32[$10_1 >> 2];
   $13 = HEAPF32[$2_1 + 36 >> 2];
   $6_1 = Math_fround(Math_fround($8 - $13) * Math_fround(-.25));
   label$2 : {
    if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$6_1;
     break label$2;
    }
    $1_1 = -2147483648;
   }
   $6_1 = $8;
   $8 = Math_fround($1_1 | 0);
   HEAPF32[$10_1 >> 2] = $6_1 + $8;
   $6_1 = HEAPF32[$2_1 + 40 >> 2];
   $12_1 = Math_fround(Math_fround($6_1 - $3) * Math_fround(-.25));
   label$4 : {
    if (Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0)) {
     $1_1 = ~~$12_1;
     break label$4;
    }
    $1_1 = -2147483648;
   }
   $12_1 = $6_1;
   $6_1 = Math_fround($1_1 | 0);
   HEAPF32[$2_1 + 40 >> 2] = $12_1 + $6_1;
   HEAPF32[$2_1 + 32 >> 2] = $3 - $6_1;
   HEAPF32[$2_1 + 36 >> 2] = $13 - $8;
  }
  $10_1 = $2_1 + 32 | 0;
  $1_1 = $213($10_1, $0_1, 0, 0);
  $10_1 = $569($10_1, $0_1, $2_1 + 31 | 0, $2_1 + 30 | 0, 0);
  if ($1_1) {
   $0_1 = $51(HEAPU8[$2_1 + 30 | 0] ? 23 : 22, Math_fround(1.0));
   HEAPF32[$2_1 + 24 >> 2] = Math_fround($5_1 + $11_1) * Math_fround(.5);
   HEAPF32[$2_1 + 20 >> 2] = Math_fround($3 + $4_1) * Math_fround(.5);
   if (HEAPU8[$2_1 + 31 | 0]) {
    $3 = Math_fround(Math_fround(HEAPF32[$7_1 + 6468 >> 2] * Math_fround(.5)) + Math_fround(1.0));
    $408(HEAP32[$9 + 580 >> 2], $2_1 + 20 | 0, $3 <= Math_fround(2.0) ? Math_fround(2.0) : $3, $0_1, 12);
   }
   $3 = HEAPF32[$7_1 + 6468 >> 2];
   $0_1 = $51(0, Math_fround(1.0));
   $5_1 = Math_fround(HEAPF32[$2_1 + 24 >> 2] + Math_fround(-.5));
   HEAPF32[$2_1 + 24 >> 2] = $5_1;
   $4_1 = Math_fround(HEAPF32[$2_1 + 20 >> 2] + Math_fround(-.5));
   HEAPF32[$2_1 + 20 >> 2] = $4_1;
   $1_1 = HEAP32[$9 + 580 >> 2];
   $3 = Math_fround(Math_fround(Math_fround($3 * Math_fround(.5)) * Math_fround(.707099974155426)) + Math_fround(-1.0));
   HEAPF32[$2_1 + 16 >> 2] = $3 + $5_1;
   HEAPF32[$2_1 + 12 >> 2] = $3 + $4_1;
   HEAPF32[$2_1 + 8 >> 2] = $5_1 - $3;
   HEAPF32[$2_1 + 4 >> 2] = $4_1 - $3;
   $7_1 = $2_1 + 12 | 0;
   $14 = $2_1 + 4 | 0;
   $399($1_1, $7_1, $14, $0_1, Math_fround(1.0));
   $1_1 = HEAP32[$9 + 580 >> 2];
   $5_1 = HEAPF32[$2_1 + 24 >> 2];
   HEAPF32[$2_1 + 16 >> 2] = $5_1 - $3;
   $4_1 = HEAPF32[$2_1 + 20 >> 2];
   HEAPF32[$2_1 + 12 >> 2] = $3 + $4_1;
   HEAPF32[$2_1 + 8 >> 2] = $3 + $5_1;
   HEAPF32[$2_1 + 4 >> 2] = $4_1 - $3;
   $399($1_1, $7_1, $14, $0_1, Math_fround(1.0));
  }
  global$0 = $2_1 + 48 | 0;
  return $10_1;
 }
 
 function $578($0_1) {
  var $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0);
  $9 = global$0 - 32 | 0;
  global$0 = $9;
  $3 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $13 = $81($3, $0_1 ? 14116 : 14356);
  $79($13);
  $1_1 = HEAPF32[($3 + (($0_1 ^ 1) << 2) | 0) + 128 >> 2];
  $2_1 = HEAPF32[$3 + 72 >> 2];
  label$1 : {
   if (!$0_1) {
    $6_1 = HEAPF32[$3 + 432 >> 2];
    $5_1 = HEAPF32[$3 + 16 >> 2];
    $8 = Math_fround($5_1 + HEAPF32[$3 + 24 >> 2]);
    $1_1 = Math_fround(Math_fround($8 - $2_1) - $1_1);
    $1_1 = $1_1 <= $5_1 ? $5_1 : $1_1;
    $5_1 = HEAPF32[$3 + 440 >> 2];
    break label$1;
   }
   $6_1 = HEAPF32[$3 + 12 >> 2];
   $5_1 = Math_fround($6_1 + HEAPF32[$3 + 20 >> 2]);
   $1_1 = Math_fround(Math_fround($5_1 - $2_1) - $1_1);
   $6_1 = $1_1 <= $6_1 ? $6_1 : $1_1;
   $1_1 = HEAPF32[$3 + 436 >> 2];
   $8 = HEAPF32[$3 + 444 >> 2];
  }
  HEAPF32[$9 + 28 >> 2] = $8;
  HEAPF32[$9 + 24 >> 2] = $5_1;
  HEAPF32[$9 + 20 >> 2] = $1_1;
  HEAPF32[$9 + 16 >> 2] = $6_1;
  if ($0_1) {
   $14 = (HEAP32[$3 + 8 >> 2] & 1025) == 1 ? 288 : 256;
   $7_1 = HEAPU8[$3 + 136 | 0] ? $14 : $14 | 128;
  } else {
   $7_1 = HEAPU8[$3 + 137 | 0] ? 320 : 448
  }
  $25_1 = $7_1;
  $3 = $3 + ($0_1 << 2) | 0;
  $6_1 = HEAPF32[$3 + 36 >> 2];
  $2_1 = HEAPF32[$3 + 60 >> 2];
  $5_1 = HEAPF32[$3 + 432 >> 2];
  $8 = HEAPF32[$3 + 440 >> 2];
  $23_1 = $3 + 88 | 0;
  $1_1 = HEAPF32[$23_1 >> 2];
  label$5 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(9223372036854775808.0)) {
    $3 = Math_fround(Math_abs($1_1)) >= Math_fround(1.0) ? ~~($1_1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1_1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1_1 - Math_fround(~~$1_1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
    $7_1 = ~~$1_1 >>> 0;
    break label$5;
   }
   $3 = -2147483648;
   $7_1 = 0;
  }
  HEAP32[$9 + 8 >> 2] = $7_1;
  HEAP32[$9 + 12 >> 2] = $3;
  $12_1 = $9 + 16 | 0;
  $14 = $0_1;
  $19 = $9 + 8 | 0;
  $1_1 = Math_fround($8 - $5_1);
  label$7 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(9223372036854775808.0)) {
    $3 = Math_fround(Math_abs($1_1)) >= Math_fround(1.0) ? ~~($1_1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1_1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1_1 - Math_fround(~~$1_1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
    $17_1 = ~~$1_1 >>> 0;
    break label$7;
   }
   $3 = -2147483648;
   $17_1 = 0;
  }
  $1_1 = Math_fround(Math_fround($2_1 + $2_1) + $6_1);
  label$9 : {
   if (Math_fround(Math_abs($1_1)) < Math_fround(9223372036854775808.0)) {
    $0_1 = Math_fround(Math_abs($1_1)) >= Math_fround(1.0) ? ~~($1_1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1_1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1_1 - Math_fround(~~$1_1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
    $18_1 = ~~$1_1 >>> 0;
    break label$9;
   }
   $0_1 = -2147483648;
   $18_1 = 0;
  }
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $10_1 = HEAP32[18392];
  $20_1 = HEAP32[$10_1 + 7080 >> 2];
  label$10 : {
   if (HEAPU8[$20_1 + 143 | 0]) {
    break label$10
   }
   $6_1 = Math_fround(HEAPF32[$12_1 + 8 >> 2] - HEAPF32[$12_1 >> 2]);
   if ($6_1 <= Math_fround(0.0)) {
    break label$10
   }
   $1_1 = Math_fround(HEAPF32[$12_1 + 12 >> 2] - HEAPF32[$12_1 + 4 >> 2]);
   if ($1_1 <= Math_fround(0.0)) {
    break label$10
   }
   $15_1 = Math_fround(1.0);
   label$51 : {
    if (($14 | 0) != 1) {
     break label$51
    }
    $2_1 = HEAPF32[$10_1 + 5480 >> 2];
    $2_1 = Math_fround($2_1 + $2_1);
    $5_1 = HEAPF32[$10_1 + 6468 >> 2];
    $15_1 = Math_fround(1.0);
    if (!($1_1 < Math_fround($2_1 + $5_1))) {
     break label$51
    }
    $2_1 = Math_fround(Math_fround($1_1 - $5_1) / $2_1);
    $15_1 = $2_1 < Math_fround(0.0) ? Math_fround(0.0) : $2_1 > Math_fround(1.0) ? Math_fround(1.0) : $2_1;
   }
   if ($15_1 <= Math_fround(0.0)) {
    break label$10
   }
   $11_1 = $12_1 + 8 | 0;
   $21_1 = HEAP32[$11_1 + 4 >> 2];
   $7_1 = $4_1 + 40 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$11_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $21_1;
   $11_1 = HEAP32[$12_1 >> 2];
   $21_1 = HEAP32[$12_1 + 4 >> 2];
   $16_1 = $7_1;
   $5_1 = HEAPF32[$7_1 >> 2];
   $2_1 = Math_fround(Math_fround($6_1 + Math_fround(-2.0)) * Math_fround(.5));
   label$72 : {
    if (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0)) {
     $7_1 = ~~$2_1;
     break label$72;
    }
    $7_1 = -2147483648;
   }
   $2_1 = Math_fround($7_1 | 0);
   $2_1 = ($7_1 | 0) < 0 ? Math_fround(0.0) : $2_1 > Math_fround(3.0) ? Math_fround(3.0) : $2_1;
   $5_1 = Math_fround($5_1 - $2_1);
   HEAPF32[$16_1 >> 2] = $5_1;
   $26_1 = $12_1 + 8 | 0;
   $7_1 = $4_1 + 44 | 0;
   $8 = HEAPF32[$7_1 >> 2];
   $1_1 = Math_fround(Math_fround($1_1 + Math_fround(-2.0)) * Math_fround(.5));
   label$93 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $16_1 = ~~$1_1;
     break label$93;
    }
    $16_1 = -2147483648;
   }
   $1_1 = Math_fround($16_1 | 0);
   $6_1 = ($16_1 | 0) < 0 ? Math_fround(0.0) : $1_1 > Math_fround(3.0) ? Math_fround(3.0) : $1_1;
   $1_1 = Math_fround($8 - $6_1);
   HEAPF32[$7_1 >> 2] = $1_1;
   HEAP32[$4_1 + 32 >> 2] = $11_1;
   HEAP32[$4_1 + 36 >> 2] = $21_1;
   $8 = Math_fround($6_1 + HEAPF32[$4_1 + 36 >> 2]);
   HEAPF32[$4_1 + 36 >> 2] = $8;
   $2_1 = Math_fround($2_1 + HEAPF32[$4_1 + 32 >> 2]);
   HEAPF32[$4_1 + 32 >> 2] = $2_1;
   $6_1 = HEAPF32[$10_1 + 5540 >> 2];
   HEAP8[$4_1 + 31 | 0] = 0;
   HEAP8[$4_1 + 30 | 0] = 0;
   $569($4_1 + 32 | 0, $13, $4_1 + 30 | 0, $4_1 + 31 | 0, 262144);
   $2_1 = $14 ? Math_fround($1_1 - $8) : Math_fround($5_1 - $2_1);
   $7_1 = $17_1 >>> 0 < $18_1 >>> 0 & ($0_1 | 0) >= ($3 | 0) | ($0_1 | 0) > ($3 | 0);
   $11_1 = $7_1 ? $18_1 : $17_1;
   $16_1 = $11_1;
   $7_1 = $7_1 ? $0_1 : $3;
   $11_1 = $11_1 >>> 0 > 1 & ($7_1 | 0) >= 0 | ($7_1 | 0) > 0;
   $1_1 = Math_fround($2_1 * Math_fround(Math_fround(+($17_1 >>> 0) + +($3 | 0) * 4294967296.0) / Math_fround(+(($11_1 ? $16_1 : 1) >>> 0) + +(($11_1 ? $7_1 : 0) | 0) * 4294967296.0)));
   $8 = $1_1 < $6_1 ? $6_1 : $1_1 > $2_1 ? $2_1 : $1_1;
   $24 = Math_fround($2_1 - $8);
   $7_1 = $18_1 - $17_1 | 0;
   $0_1 = $0_1 - ($3 + ($17_1 >>> 0 > $18_1 >>> 0) | 0) | 0;
   $3 = $7_1 >>> 0 > 1 & ($0_1 | 0) >= 0 | ($0_1 | 0) > 0;
   $22_1 = Math_fround(+(($3 ? $7_1 : 1) >>> 0) + +(($3 ? $0_1 : 0) | 0) * 4294967296.0);
   $1_1 = Math_fround(Math_fround(+HEAPU32[$19 >> 2] + +HEAP32[$19 + 4 >> 2] * 4294967296.0) / $22_1);
   $1_1 = Math_fround(Math_fround($24 * ($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1)) / $2_1);
   label$11 : {
    if (!HEAPU8[$4_1 + 31 | 0] | !($15_1 >= Math_fround(1.0))) {
     break label$11
    }
    $6_1 = Math_fround($8 / $2_1);
    if (!($6_1 < Math_fround(1.0))) {
     break label$11
    }
    $0_1 = $14 << 2;
    $5_1 = HEAPF32[$0_1 + ($4_1 + 32 | 0) >> 2];
    $27_1 = HEAPF32[($0_1 + $10_1 | 0) + 228 >> 2];
    $87($13);
    $5_1 = Math_fround(Math_fround($27_1 - $5_1) / $2_1);
    $5_1 = $5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1;
    label$15 : {
     if (!HEAPU8[$10_1 + 7148 | 0]) {
      $3 = 0;
      break label$15;
     }
     $3 = $5_1 > Math_fround($6_1 + $1_1) | $1_1 > $5_1;
     HEAPF32[$10_1 + 12068 >> 2] = $3 ? Math_fround(0.0) : Math_fround(Math_fround($5_1 - $1_1) + Math_fround($6_1 * Math_fround(-.5)));
    }
    $1_1 = Math_fround(Math_fround(Math_fround($5_1 - HEAPF32[$10_1 + 12068 >> 2]) + Math_fround($6_1 * Math_fround(-.5))) / Math_fround(Math_fround(1.0) - $6_1));
    $1_1 = Math_fround(($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1) * $22_1);
    label$17 : {
     if (Math_fround(Math_abs($1_1)) < Math_fround(9223372036854775808.0)) {
      $0_1 = Math_fround(Math_abs($1_1)) >= Math_fround(1.0) ? ~~($1_1 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($1_1 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($1_1 - Math_fround(~~$1_1 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
      $13 = ~~$1_1 >>> 0;
      break label$17;
     }
     $0_1 = -2147483648;
     $13 = 0;
    }
    HEAP32[$19 >> 2] = $13;
    HEAP32[$19 + 4 >> 2] = $0_1;
    $1_1 = Math_fround(Math_fround(+($13 >>> 0) + +($0_1 | 0) * 4294967296.0) / $22_1);
    $1_1 = Math_fround(Math_fround($24 * ($1_1 < Math_fround(0.0) ? Math_fround(0.0) : $1_1 > Math_fround(1.0) ? Math_fround(1.0) : $1_1)) / $2_1);
    if ($3) {
     HEAPF32[$10_1 + 12068 >> 2] = Math_fround($6_1 * Math_fround(-.5)) + Math_fround($5_1 - $1_1)
    }
   }
   $2_1 = $1_1;
   $0_1 = $51(14, Math_fround(1.0));
   $3 = $51(HEAPU8[$4_1 + 31 | 0] ? 17 : HEAPU8[$4_1 + 30 | 0] ? 16 : 15, $15_1);
   $401(HEAP32[$20_1 + 580 >> 2], $12_1, $26_1, $0_1, HEAPF32[$20_1 + 68 >> 2], $25_1);
   $0_1 = $4_1 + 16 | 0;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$4_1 + 8 >> 2] = 0;
   HEAP32[$4_1 + 12 >> 2] = 0;
   $1_1 = HEAPF32[$4_1 + 32 >> 2];
   label$20 : {
    if (!$14) {
     $6_1 = HEAPF32[$4_1 + 36 >> 2];
     $1_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 40 >> 2] - $1_1) * $2_1) + $1_1);
     $5_1 = Math_fround($8 + $1_1);
     $2_1 = HEAPF32[$4_1 + 44 >> 2];
     break label$20;
    }
    $5_1 = HEAPF32[$4_1 + 40 >> 2];
    $6_1 = HEAPF32[$4_1 + 36 >> 2];
    $6_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 44 >> 2] - $6_1) * $2_1) + $6_1);
    $2_1 = Math_fround($8 + $6_1);
   }
   HEAPF32[$4_1 + 20 >> 2] = $2_1;
   HEAPF32[$4_1 + 16 >> 2] = $5_1;
   HEAPF32[$4_1 + 12 >> 2] = $6_1;
   HEAPF32[$4_1 + 8 >> 2] = $1_1;
   $401(HEAP32[$20_1 + 580 >> 2], $4_1 + 8 | 0, $4_1 + 16 | 0, $3, HEAPF32[$10_1 + 5536 >> 2], 0);
  }
  global$0 = $4_1 + 48 | 0;
  HEAPF32[$23_1 >> 2] = +HEAPU32[$9 + 8 >> 2] + +HEAP32[$9 + 12 >> 2] * 4294967296.0;
  global$0 = $9 + 32 | 0;
 }
 
 function $583($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0);
  $2_1 = global$0 - 112 | 0;
  global$0 = $2_1;
  $5_1 = HEAP32[18392];
  $7_1 = HEAP32[$5_1 + 7080 >> 2];
  HEAP8[$7_1 + 140 | 0] = 1;
  if (!HEAPU8[$7_1 + 143 | 0]) {
   $6_1 = $76($7_1, $0_1);
   $68($2_1 + 104 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $3 = $296();
   $10_1 = $7_1 + 212 | 0;
   $9 = HEAP32[$10_1 >> 2];
   $11_1 = HEAPF32[$10_1 >> 2];
   $12_1 = HEAP32[$7_1 + 208 >> 2];
   $13 = HEAPF32[$7_1 + 208 >> 2];
   $8 = HEAPF32[$2_1 + 104 >> 2];
   if ($8 > Math_fround(0.0)) {
    $4_1 = Math_fround($8 + HEAPF32[$5_1 + 5500 >> 2])
   }
   $8 = HEAPF32[$5_1 + 5480 >> 2];
   HEAPF32[$2_1 + 100 >> 2] = Math_fround(Math_fround($8 + $8) + HEAPF32[$2_1 + 108 >> 2]) + $11_1;
   HEAPF32[$2_1 + 96 >> 2] = Math_fround($3 + $4_1) + $13;
   HEAP32[$2_1 + 92 >> 2] = $9;
   HEAP32[$2_1 + 88 >> 2] = $12_1;
   $14 = $2_1 + 88 | 0;
   $277($14, $8);
   $10_1 = 0;
   if ($213($14, $6_1, 0, 0)) {
    $10_1 = $569($2_1 + 88 | 0, $6_1, $2_1 + 87 | 0, $2_1 + 86 | 0, 0);
    if ($10_1) {
     HEAP8[$1_1 | 0] = HEAPU8[$1_1 | 0] ^ 1;
     $88();
    }
    $73($2_1 + 88 | 0, $6_1, 1);
    HEAP32[$2_1 + 76 >> 2] = $9;
    HEAP32[$2_1 + 72 >> 2] = $12_1;
    $4_1 = Math_fround($3 + $11_1);
    HEAPF32[$2_1 + 68 >> 2] = $4_1;
    $8 = Math_fround($3 + $13);
    HEAPF32[$2_1 + 64 >> 2] = $8;
    $6_1 = $51(HEAPU8[$2_1 + 87 | 0] ? (HEAPU8[$2_1 + 86 | 0] ? 9 : 8) : 7, Math_fround(1.0));
    $15_1 = HEAPF32[$5_1 + 5484 >> 2];
    $9 = HEAP32[$2_1 + 76 >> 2];
    HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 72 >> 2];
    HEAP32[$2_1 + 28 >> 2] = $9;
    $9 = HEAP32[$2_1 + 68 >> 2];
    HEAP32[$2_1 + 16 >> 2] = HEAP32[$2_1 + 64 >> 2];
    HEAP32[$2_1 + 20 >> 2] = $9;
    $71($2_1 + 24 | 0, $2_1 + 16 | 0, $6_1, 1, $15_1);
    $9 = $51(18, Math_fround(1.0));
    $12_1 = HEAP32[$5_1 + 7244 >> 2] & 64;
    label$5 : {
     if ($12_1) {
      $7_1 = HEAP32[$7_1 + 580 >> 2];
      $3 = Math_fround($3 / Math_fround(3.5999999046325684));
      label$7 : {
       if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
        $6_1 = ~~$3;
        break label$7;
       }
       $6_1 = -2147483648;
      }
      $3 = Math_fround($6_1 | 0);
      $3 = $3 <= Math_fround(1.0) ? Math_fround(1.0) : $3;
      HEAPF32[$2_1 + 60 >> 2] = $3 + $11_1;
      HEAPF32[$2_1 + 56 >> 2] = $3 + $13;
      HEAPF32[$2_1 + 52 >> 2] = $4_1 - $3;
      HEAPF32[$2_1 + 48 >> 2] = $8 - $3;
      $401($7_1, $2_1 + 56 | 0, $2_1 + 48 | 0, $9, HEAPF32[$5_1 + 5484 >> 2], 0);
      break label$5;
     }
     if (!HEAPU8[$1_1 | 0]) {
      break label$5
     }
     $7_1 = HEAP32[$7_1 + 580 >> 2];
     $4_1 = Math_fround($3 / Math_fround(6.0));
     label$9 : {
      if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
       $6_1 = ~~$4_1;
       break label$9;
      }
      $6_1 = -2147483648;
     }
     $4_1 = Math_fround($6_1 | 0);
     $4_1 = $4_1 <= Math_fround(1.0) ? Math_fround(1.0) : $4_1;
     HEAPF32[$2_1 + 44 >> 2] = $4_1 + $11_1;
     HEAPF32[$2_1 + 40 >> 2] = $4_1 + $13;
     $6_1 = HEAP32[$2_1 + 44 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 40 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $6_1;
     $478($7_1, $2_1 + 8 | 0, $9, Math_fround($3 - Math_fround($4_1 + $4_1)));
    }
    $3 = HEAPF32[$5_1 + 5500 >> 2];
    HEAPF32[$2_1 + 60 >> 2] = HEAPF32[$5_1 + 5480 >> 2] + $11_1;
    HEAPF32[$2_1 + 56 >> 2] = $8 + $3;
    if (HEAPU8[$5_1 + 12196 | 0]) {
     $5_1 = 13939;
     $64($2_1 + 56 | 0, $12_1 ? $5_1 : HEAPU8[$1_1 | 0] ? 13943 : 13979, 0);
    }
    if (HEAPF32[$2_1 + 104 >> 2] > Math_fround(0.0)) {
     $1_1 = HEAP32[$2_1 + 60 >> 2];
     $5_1 = HEAP32[$2_1 + 56 >> 2];
     HEAP32[$2_1 + 32 >> 2] = $5_1;
     HEAP32[$2_1 + 36 >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = $5_1;
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $63($2_1, $0_1, 0, 1);
    }
   }
  }
  global$0 = $2_1 + 112 | 0;
  return $10_1;
 }
 
 function $585($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $8 = HEAP32[18392];
  $7_1 = HEAP32[$8 + 7080 >> 2];
  HEAP8[$7_1 + 140 | 0] = 1;
  if (!HEAPU8[$7_1 + 143 | 0]) {
   $4_1 = $76($7_1, $0_1);
   $68($2_1 + 56 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $5_1 = $296();
   $3 = $7_1 + 212 | 0;
   $10_1 = HEAP32[$3 >> 2];
   $11_1 = HEAPF32[$3 >> 2];
   $3 = HEAP32[$7_1 + 208 >> 2];
   $6_1 = HEAPF32[$7_1 + 208 >> 2];
   $9 = HEAPF32[$2_1 + 56 >> 2];
   if ($9 > Math_fround(0.0)) {
    $12_1 = Math_fround($9 + HEAPF32[$8 + 5500 >> 2])
   }
   $9 = HEAPF32[$8 + 5480 >> 2];
   HEAPF32[$2_1 + 52 >> 2] = Math_fround(Math_fround($9 + $9) + HEAPF32[$2_1 + 60 >> 2]) + $11_1;
   HEAPF32[$2_1 + 48 >> 2] = Math_fround($5_1 + $12_1) + $6_1;
   HEAP32[$2_1 + 44 >> 2] = $10_1;
   HEAP32[$2_1 + 40 >> 2] = $3;
   $10_1 = $2_1 + 40 | 0;
   $277($10_1, $9);
   $3 = 0;
   if ($213($10_1, $4_1, 0, 0)) {
    $12_1 = Math_fround($5_1 + $6_1);
    $9 = Math_fround(Math_fround(Math_fround(Math_fround($5_1 + $11_1) + $11_1) * Math_fround(.5)) + Math_fround(.5));
    label$4 : {
     if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
      $3 = ~~$9;
      break label$4;
     }
     $3 = -2147483648;
    }
    HEAPF32[$2_1 + 36 >> 2] = $3 | 0;
    $6_1 = Math_fround(Math_fround(Math_fround($12_1 + $6_1) * Math_fround(.5)) + Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$6_1;
      break label$6;
     }
     $3 = -2147483648;
    }
    HEAPF32[$2_1 + 32 >> 2] = $3 | 0;
    $6_1 = Math_fround(Math_fround($5_1 + Math_fround(-1.0)) * Math_fround(.5));
    $3 = $569($2_1 + 40 | 0, $4_1, $2_1 + 31 | 0, $2_1 + 30 | 0, 0);
    if ($3) {
     $88()
    }
    $73($2_1 + 40 | 0, $4_1, 1);
    $408(HEAP32[$7_1 + 580 >> 2], $2_1 + 32 | 0, $6_1, $51(HEAPU8[$2_1 + 31 | 0] ? (HEAPU8[$2_1 + 30 | 0] ? 9 : 8) : 7, Math_fround(1.0)), 16);
    if ($1_1) {
     $10_1 = HEAP32[$7_1 + 580 >> 2];
     $13 = $2_1 + 32 | 0;
     $5_1 = Math_fround($5_1 / Math_fround(6.0));
     label$10 : {
      if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
       $4_1 = ~~$5_1;
       break label$10;
      }
      $4_1 = -2147483648;
     }
     $5_1 = Math_fround($4_1 | 0);
     $408($10_1, $13, Math_fround($6_1 - ($5_1 <= Math_fround(1.0) ? Math_fround(1.0) : $5_1)), $51(18, Math_fround(1.0)), 16);
    }
    if (HEAPF32[$8 + 5488 >> 2] > Math_fround(0.0)) {
     $4_1 = HEAP32[$7_1 + 580 >> 2];
     HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$2_1 + 36 >> 2] + Math_fround(1.0);
     HEAPF32[$2_1 + 16 >> 2] = HEAPF32[$2_1 + 32 >> 2] + Math_fround(1.0);
     $407($4_1, $2_1 + 16 | 0, $6_1, $51(6, Math_fround(1.0)), 16, HEAPF32[$8 + 5488 >> 2]);
     $407(HEAP32[$7_1 + 580 >> 2], $2_1 + 32 | 0, $6_1, $51(5, Math_fround(1.0)), 16, HEAPF32[$8 + 5488 >> 2]);
    }
    $5_1 = HEAPF32[$8 + 5500 >> 2];
    HEAPF32[$2_1 + 20 >> 2] = HEAPF32[$8 + 5480 >> 2] + $11_1;
    HEAPF32[$2_1 + 16 >> 2] = $12_1 + $5_1;
    if (HEAPU8[$8 + 12196 | 0]) {
     $64($2_1 + 16 | 0, $1_1 ? 17760 : 18698, 0)
    }
    if (HEAPF32[$2_1 + 56 >> 2] > Math_fround(0.0)) {
     $1_1 = HEAP32[$2_1 + 20 >> 2];
     $4_1 = HEAP32[$2_1 + 16 >> 2];
     HEAP32[$2_1 + 8 >> 2] = $4_1;
     HEAP32[$2_1 + 12 >> 2] = $1_1;
     HEAP32[$2_1 >> 2] = $4_1;
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $63($2_1, $0_1, 0, 1);
    }
   }
   $4_1 = $3;
  }
  global$0 = $2_1 - -64 | 0;
  return $4_1;
 }
 
 function $588() {
  var $0_1 = 0, $1_1 = Math_fround(0), $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0;
  $0_1 = global$0 - 32 | 0;
  global$0 = $0_1;
  $4_1 = HEAP32[18392];
  $2_1 = HEAP32[$4_1 + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  if (!HEAPU8[$2_1 + 143 | 0]) {
   $7_1 = HEAPF32[$2_1 + 208 >> 2];
   $5_1 = HEAP32[$2_1 + 212 >> 2];
   $8 = HEAP32[$2_1 + 208 >> 2];
   $3 = HEAPF32[$2_1 + 252 >> 2];
   $1_1 = HEAPF32[$4_1 + 5480 >> 2];
   $6_1 = Math_fround($1_1 + $1_1);
   $1_1 = HEAPF32[$4_1 + 6468 >> 2];
   $6_1 = Math_fround($6_1 + $1_1);
   $3 = $3 < $6_1 ? $3 : $6_1;
   $3 = $1_1 <= $3 ? $3 : $1_1;
   HEAPF32[$0_1 + 28 >> 2] = HEAPF32[$2_1 + 212 >> 2] + $3;
   HEAP32[$0_1 + 16 >> 2] = $8;
   HEAP32[$0_1 + 20 >> 2] = $5_1;
   HEAPF32[$0_1 + 24 >> 2] = $1_1 + $7_1;
   $5_1 = $0_1 + 16 | 0;
   $277($5_1, Math_fround(-1.0));
   if ($213($5_1, 0, 0, 0)) {
    $5_1 = $51(0, Math_fround(1.0));
    $2_1 = HEAP32[$2_1 + 580 >> 2];
    $1_1 = HEAPF32[$4_1 + 5476 >> 2];
    $7_1 = HEAPF32[$4_1 + 6468 >> 2];
    HEAPF32[$0_1 + 12 >> 2] = Math_fround($3 * Math_fround(.5)) + HEAPF32[$0_1 + 20 >> 2];
    HEAPF32[$0_1 + 8 >> 2] = Math_fround($1_1 + Math_fround($7_1 * Math_fround(.5))) + HEAPF32[$0_1 + 16 >> 2];
    $8 = HEAP32[$0_1 + 12 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $8;
    $477($2_1, $0_1, $5_1);
   }
   $1_1 = HEAPF32[$4_1 + 5476 >> 2];
   $276(Math_fround(0.0), Math_fround($1_1 + $1_1));
  }
  global$0 = $0_1 + 32 | 0;
 }
 
 function $589() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  if (!HEAPU8[$1_1 + 143 | 0]) {
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 + 12 >> 2] = 0;
   $212($0_1 + 8 | 0, Math_fround(-1.0));
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $590($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  if (!HEAPU8[$2_1 + 143 | 0]) {
   $3 = HEAP32[$2_1 + 212 >> 2];
   $4_1 = HEAP32[$2_1 + 208 >> 2];
   $5_1 = HEAPF32[$0_1 >> 2];
   $6_1 = HEAPF32[$2_1 + 208 >> 2];
   HEAPF32[$1_1 + 12 >> 2] = HEAPF32[$2_1 + 212 >> 2] + HEAPF32[$0_1 + 4 >> 2];
   HEAPF32[$1_1 + 8 >> 2] = $6_1 + $5_1;
   HEAP32[$1_1 >> 2] = $4_1;
   HEAP32[$1_1 + 4 >> 2] = $3;
   $212($0_1, Math_fround(-1.0));
   $213($1_1, 0, 0, 0);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $591() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $2_1 = HEAP32[18392];
  $1_1 = HEAP32[$2_1 + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  if (!HEAPU8[$1_1 + 143 | 0]) {
   $3 = $1_1 + 376 | 0;
   $4_1 = HEAP32[$3 >> 2];
   HEAP32[$3 >> 2] = 1;
   label$2 : {
    if (HEAPF32[$1_1 + 252 >> 2] > Math_fround(0.0)) {
     HEAP32[$0_1 + 8 >> 2] = 0;
     HEAP32[$0_1 + 12 >> 2] = 0;
     break label$2;
    }
    HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$2_1 + 6468 >> 2];
    HEAP32[$0_1 + 8 >> 2] = 0;
   }
   $212($0_1 + 8 | 0, Math_fround(-1.0));
   HEAP32[$1_1 + 376 >> 2] = $4_1;
  }
  global$0 = $0_1 + 16 | 0;
 }
 
 function $592() {
  var $0_1 = 0, $1_1 = Math_fround(0), $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $3 = HEAP32[18392];
  $0_1 = HEAP32[$3 + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  if (!HEAPU8[$0_1 + 143 | 0]) {
   $5_1 = HEAPF32[$3 + 6468 >> 2];
   $4_1 = $0_1 + 264 | 0;
   $2_1 = HEAPF32[$4_1 >> 2];
   $1_1 = HEAPF32[$3 + 5480 >> 2];
   HEAPF32[$4_1 >> 2] = $2_1 >= $1_1 ? $2_1 : $1_1;
   $0_1 = $0_1 + 252 | 0;
   $2_1 = HEAPF32[$0_1 >> 2];
   $1_1 = Math_fround($5_1 + Math_fround($1_1 + $1_1));
   HEAPF32[$0_1 >> 2] = $2_1 >= $1_1 ? $2_1 : $1_1;
  }
 }
 
 function $593($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0);
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  $6_1 = HEAP32[18392];
  $3 = HEAP32[$6_1 + 7080 >> 2];
  HEAP8[$3 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$3 + 143 | 0]) {
    break label$1
   }
   if ($0_1 & 2) {
    $4_1 = HEAPF32[$3 + 208 >> 2];
    $0_1 = $1_1 + 28 | 0;
    $5_1 = HEAPF32[$3 + 212 >> 2];
    HEAPF32[$0_1 >> 2] = $5_1 + HEAPF32[$3 + 252 >> 2];
    HEAPF32[$1_1 + 20 >> 2] = $5_1;
    HEAPF32[$1_1 + 16 >> 2] = $4_1;
    HEAPF32[$1_1 + 24 >> 2] = $4_1 + Math_fround(1.0);
    HEAP32[$1_1 + 8 >> 2] = 0;
    HEAP32[$1_1 + 12 >> 2] = 0;
    $212($1_1 + 8 | 0, Math_fround(-1.0));
    if (!$213($1_1 + 16 | 0, 0, 0, 0)) {
     break label$1
    }
    $2_1 = HEAP32[$3 + 580 >> 2];
    HEAPF32[$1_1 + 12 >> 2] = HEAPF32[$1_1 + 20 >> 2];
    $4_1 = HEAPF32[$1_1 + 16 >> 2];
    HEAPF32[$1_1 + 8 >> 2] = $4_1;
    HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$0_1 >> 2];
    HEAPF32[$1_1 >> 2] = $4_1;
    $399($2_1, $1_1 + 8 | 0, $1_1, $51(27, Math_fround(1.0)), Math_fround(1.0));
    if (!HEAPU8[$6_1 + 12196 | 0]) {
     break label$1
    }
    $65(1058, 0);
    break label$1;
   }
   if (!($0_1 & 1)) {
    break label$1
   }
   $5_1 = HEAPF32[$3 + 12 >> 2];
   $2_1 = HEAP32[$6_1 + 7456 >> 2];
   $4_1 = $5_1;
   label$3 : {
    if (($2_1 | 0) <= 0) {
     break label$3
    }
    $4_1 = $5_1;
    if (HEAP32[(HEAP32[$6_1 + 7464 >> 2] + Math_imul($2_1, 48) | 0) - 48 >> 2] != HEAP32[$3 + 4 >> 2]) {
     break label$3
    }
    $4_1 = Math_fround($5_1 + HEAPF32[$3 + 272 >> 2]);
   }
   $2_1 = HEAP32[$6_1 + 8036 >> 2];
   label$4 : {
    if (!$2_1) {
     $5_1 = Math_fround($5_1 + HEAPF32[$3 + 20 >> 2]);
     break label$4;
    }
    $2_1 = HEAP32[$2_1 + 16 >> 2] + Math_imul(HEAP32[$2_1 + 92 >> 2], 104) | 0;
    $5_1 = HEAPF32[$2_1 + 12 >> 2];
    $4_1 = HEAPF32[$2_1 + 8 >> 2];
   }
   $2_1 = 0;
   $2_1 = $0_1 & 4 ? HEAP32[$3 + 368 >> 2] : $2_1;
   if ($2_1) {
    $548()
   }
   $7_1 = HEAPF32[$3 + 212 >> 2];
   HEAPF32[$1_1 + 28 >> 2] = $7_1 + Math_fround(1.0);
   HEAPF32[$1_1 + 24 >> 2] = $5_1;
   HEAPF32[$1_1 + 20 >> 2] = $7_1;
   HEAPF32[$1_1 + 16 >> 2] = $4_1;
   HEAP32[$1_1 + 8 >> 2] = 0;
   HEAP32[$1_1 + 12 >> 2] = 0;
   $212($1_1 + 8 | 0, Math_fround(-1.0));
   label$8 : {
    if (!$213($1_1 + 16 | 0, 0, 0, 0)) {
     break label$8
    }
    $0_1 = HEAP32[$3 + 580 >> 2];
    HEAP32[$1_1 + 8 >> 2] = __wasm_rotl_i64(HEAP32[$1_1 + 20 >> 2], HEAP32[$1_1 + 24 >> 2]);
    HEAP32[$1_1 + 12 >> 2] = i64toi32_i32$HIGH_BITS;
    $399($0_1, $1_1 + 16 | 0, $1_1 + 8 | 0, $51(27, Math_fround(1.0)), Math_fround(1.0));
    if (!HEAPU8[$6_1 + 12196 | 0]) {
     break label$8
    }
    $64($1_1 + 16 | 0, 19321, 0);
   }
   if (!$2_1) {
    break label$1
   }
   $549();
   HEAPF32[$2_1 + 28 >> 2] = HEAPF32[$3 + 212 >> 2];
  }
  global$0 = $1_1 + 32 | 0;
 }
 
 function $594() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  if (!HEAPU8[$0_1 + 143 | 0]) {
   $593(HEAP32[$0_1 + 376 >> 2] ? 5 : 6)
  }
 }
 
 function $596($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = Math_fround(0);
  $3 = Math_fround(HEAPF32[$1_1 + 4 >> 2] - HEAPF32[$0_1 + 4 >> 2]);
  label$1 : {
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$3;
    break label$1;
   }
   $2_1 = -2147483648;
  }
  if (!$2_1) {
   $2_1 = HEAP32[$1_1 >> 2] - HEAP32[$0_1 >> 2] | 0
  }
  return $2_1 | 0;
 }
 
 function $597($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = Math_fround(0);
  $3 = global$0 - 144 | 0;
  global$0 = $3;
  $6_1 = HEAP32[18392];
  $7_1 = HEAP32[$6_1 + 7080 >> 2];
  HEAP8[$7_1 + 140 | 0] = 1;
  $19 = HEAP32[$6_1 + 7300 >> 2];
  HEAP32[$6_1 + 7300 >> 2] = 0;
  if (!HEAPU8[$7_1 + 143 | 0]) {
   $8 = $76($7_1, $0_1);
   $12_1 = $2_1 & 32;
   if (!$12_1) {
    $9 = $296()
   }
   $68($3 + 136 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $4_1 = $9;
   $15_1 = $2_1 & 64;
   if (!$15_1) {
    $4_1 = $292()
   }
   $5_1 = HEAP32[$7_1 + 208 >> 2];
   $16_1 = HEAP32[$7_1 + 212 >> 2];
   $13 = HEAPF32[$7_1 + 208 >> 2];
   $18_1 = $3 + 132 | 0;
   $10_1 = HEAPF32[$6_1 + 5480 >> 2];
   HEAPF32[$18_1 >> 2] = Math_fround(Math_fround($10_1 + $10_1) + HEAPF32[$3 + 140 >> 2]) + HEAPF32[$7_1 + 212 >> 2];
   $14 = $4_1;
   HEAPF32[$3 + 128 >> 2] = $13 + $4_1;
   HEAP32[$3 + 120 >> 2] = $5_1;
   HEAP32[$3 + 124 >> 2] = $16_1;
   $4_1 = Math_fround(0.0);
   $13 = HEAPF32[$3 + 136 >> 2];
   if ($13 > Math_fround(0.0)) {
    $4_1 = Math_fround($13 + HEAPF32[$6_1 + 5500 >> 2])
   }
   $11_1 = $3 + 104 | 0;
   HEAPF32[$11_1 + 12 >> 2] = HEAPF32[$18_1 >> 2] + Math_fround(0.0);
   HEAP32[$3 + 104 >> 2] = $5_1;
   HEAP32[$3 + 108 >> 2] = $16_1;
   HEAPF32[$3 + 112 >> 2] = $4_1 + HEAPF32[$3 + 128 >> 2];
   $277($11_1, $10_1);
   if ($213($11_1, $8, $3 + 120 | 0, 0)) {
    $11_1 = $569($3 + 120 | 0, $8, $3 + 103 | 0, $3 + 102 | 0, 0);
    $16_1 = $23(6748, $8);
    $5_1 = $133($16_1);
    if (!(!!$5_1 | !$11_1)) {
     $318($16_1, 0);
     $5_1 = 1;
    }
    $11_1 = $51(HEAPU8[$3 + 103 | 0] ? 8 : 7, Math_fround(1.0));
    $4_1 = HEAPF32[$3 + 120 >> 2];
    $10_1 = HEAPF32[$3 + 128 >> 2];
    $73($3 + 120 | 0, $8, 1);
    $10_1 = Math_fround($10_1 - $9);
    $4_1 = $4_1 >= $10_1 ? $4_1 : $10_1;
    if (!$15_1) {
     $8 = HEAP32[$7_1 + 580 >> 2];
     HEAPF32[$3 + 96 >> 2] = HEAPF32[$3 + 132 >> 2];
     HEAPF32[$3 + 92 >> 2] = $4_1;
     $401($8, $3 + 120 | 0, $3 + 92 | 0, $11_1, HEAPF32[$6_1 + 5484 >> 2], $12_1 ? 240 : 80);
    }
    label$9 : {
     if ($12_1) {
      break label$9
     }
     $8 = $51($5_1 ? 22 : HEAP8[$3 + 103 | 0] & 1 ? 22 : 21, Math_fround(1.0));
     $12_1 = $51(0, Math_fround(1.0));
     $11_1 = HEAP32[$7_1 + 580 >> 2];
     HEAPF32[$3 + 96 >> 2] = HEAPF32[$3 + 124 >> 2];
     HEAPF32[$3 + 92 >> 2] = $4_1;
     $401($11_1, $3 + 92 | 0, $3 + 128 | 0, $8, HEAPF32[$6_1 + 5484 >> 2], $9 >= $14 ? 240 : 160);
     if (!(HEAPF32[$3 + 128 >> 2] >= Math_fround(Math_fround($9 + $4_1) - HEAPF32[$6_1 + 5476 >> 2]))) {
      break label$9
     }
     $7_1 = HEAP32[$7_1 + 580 >> 2];
     $9 = HEAPF32[$6_1 + 5480 >> 2];
     HEAPF32[$3 + 88 >> 2] = $9 + HEAPF32[$3 + 124 >> 2];
     HEAPF32[$3 + 84 >> 2] = $4_1 + $9;
     $8 = HEAP32[$3 + 88 >> 2];
     HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 84 >> 2];
     HEAP32[$3 + 36 >> 2] = $8;
     $476($7_1, $3 + 32 | 0, $12_1, 3, Math_fround(1.0));
    }
    $7_1 = HEAP32[$3 + 124 >> 2];
    $12_1 = HEAP32[$3 + 120 >> 2];
    HEAP32[$3 + 72 >> 2] = $12_1;
    HEAP32[$3 + 76 >> 2] = $7_1;
    $8 = HEAP32[$3 + 132 >> 2];
    $11_1 = HEAP32[$3 + 128 >> 2];
    HEAP32[$3 + 64 >> 2] = $11_1;
    HEAP32[$3 + 68 >> 2] = $8;
    $9 = HEAPF32[$6_1 + 5484 >> 2];
    HEAP32[$3 + 24 >> 2] = $12_1;
    HEAP32[$3 + 28 >> 2] = $7_1;
    HEAP32[$3 + 16 >> 2] = $11_1;
    HEAP32[$3 + 20 >> 2] = $8;
    $72($3 + 24 | 0, $3 + 16 | 0, $9);
    if ($2_1 & 1048576) {
     $1_1 = HEAP32[$3 + 120 >> 2];
     $7_1 = HEAP32[$3 + 124 >> 2];
     HEAPF32[$6_1 + 12016 >> 2] = HEAPF32[$3 + 132 >> 2];
     HEAP32[$6_1 + 12004 >> 2] = $1_1;
     HEAP32[$6_1 + 12008 >> 2] = $7_1;
     HEAPF32[$6_1 + 12012 >> 2] = $4_1;
     $1_1 = 0;
    }
    if (!(!$1_1 | $15_1)) {
     if (HEAPU8[$6_1 + 12196 | 0]) {
      $341(1061, 1056)
     }
     $9 = HEAPF32[$6_1 + 5480 >> 2];
     HEAPF32[$3 + 92 >> 2] = HEAPF32[$3 + 120 >> 2] + HEAPF32[$6_1 + 5476 >> 2];
     HEAPF32[$3 + 96 >> 2] = $9 + HEAPF32[$3 + 124 >> 2];
     HEAPF32[$3 + 60 >> 2] = HEAPF32[$3 + 132 >> 2];
     HEAPF32[$3 + 56 >> 2] = $4_1;
     HEAP32[$3 + 48 >> 2] = 0;
     HEAP32[$3 + 52 >> 2] = 0;
     $69($3 + 92 | 0, $3 + 56 | 0, $1_1, 0, 0, $3 + 48 | 0, 0);
    }
    if (HEAPF32[$3 + 136 >> 2] > Math_fround(0.0)) {
     $4_1 = HEAPF32[$6_1 + 5500 >> 2];
     HEAPF32[$3 + 44 >> 2] = HEAPF32[$3 + 124 >> 2] + HEAPF32[$6_1 + 5480 >> 2];
     HEAPF32[$3 + 40 >> 2] = $4_1 + HEAPF32[$3 + 128 >> 2];
     $1_1 = HEAP32[$3 + 44 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 40 >> 2];
     HEAP32[$3 + 12 >> 2] = $1_1;
     $63($3 + 8 | 0, $0_1, 0, 1);
    }
    if ($5_1) {
     HEAP32[$6_1 + 7300 >> 2] = $19;
     $7_1 = $3 + 120 | 0;
     $0_1 = global$0 + -64 | 0;
     global$0 = $0_1;
     $6_1 = HEAP32[18392];
     label$1 : {
      if (!$133($16_1)) {
       HEAP32[$6_1 + 7300 >> 2] = 0;
       $1_1 = 0;
       break label$1;
      }
      $4_1 = Math_fround(HEAPF32[$7_1 + 8 >> 2] - HEAPF32[$7_1 >> 2]);
      label$3 : {
       if (HEAPU8[$6_1 + 7300 | 0] & 16) {
        $1_1 = $6_1 + 7360 | 0;
        $9 = HEAPF32[$1_1 >> 2];
        HEAPF32[$1_1 >> 2] = $4_1 <= $9 ? $9 : $4_1;
        $1_1 = $2_1;
        break label$3;
       }
       HEAP32[$0_1 + 52 >> 2] = 0;
       HEAPF32[$0_1 + 48 >> 2] = $4_1;
       $1_1 = $2_1 & 30 ? $2_1 : $2_1 | 4;
       $5_1 = 8;
       label$5 : {
        if ($1_1 & 4) {
         break label$5
        }
        $5_1 = 4;
        if ($1_1 & 2) {
         break label$5
        }
        $5_1 = $1_1 & 8 ? 20 : -1;
       }
       if (($5_1 | 0) <= 0) {
        $4_1 = Math_fround(3402823466385288598117041.0e14)
       } else {
        $2_1 = HEAP32[18392];
        $4_1 = HEAPF32[$2_1 + 5428 >> 2];
        $9 = Math_fround($4_1 + $4_1);
        $4_1 = HEAPF32[$2_1 + 5496 >> 2];
        $4_1 = Math_fround($9 + Math_fround(Math_fround(Math_fround(HEAPF32[$2_1 + 6468 >> 2] + $4_1) * Math_fround($5_1 | 0)) - $4_1));
       }
       HEAPF32[$0_1 + 28 >> 2] = $4_1;
       HEAP32[$0_1 + 24 >> 2] = 2139095039;
       $251($0_1 + 48 | 0, $0_1 + 24 | 0, 0);
      }
      $5_1 = $1_1;
      HEAP32[$0_1 >> 2] = HEAP32[$6_1 + 7480 >> 2];
      $1_1 = $0_1 + 48 | 0;
      $21($1_1, 16, 12883, $0_1);
      $2_1 = $218($1_1);
      if (!(!$2_1 | !HEAPU8[$2_1 + 139 | 0])) {
       $1_1 = global$0 - 32 | 0;
       global$0 = $1_1;
       HEAP32[$1_1 + 24 >> 2] = 0;
       HEAP32[$1_1 + 28 >> 2] = 0;
       HEAP32[$1_1 + 16 >> 2] = 0;
       HEAP32[$1_1 + 20 >> 2] = 0;
       $8 = $1_1 + 16 | 0;
       $148($2_1, $1_1 + 24 | 0, $8);
       $12_1 = $1_1 + 8 | 0;
       $149($12_1, $2_1, $8);
       $15_1 = $0_1 + 40 | 0;
       $150($15_1, $2_1, $12_1);
       global$0 = $1_1 + 32 | 0;
       HEAP32[$2_1 + 168 >> 2] = $5_1 & 1 ? 0 : 3;
       $8 = HEAP32[18392];
       $5_1 = HEAP32[HEAP32[$8 + 7504 >> 2] >> 2];
       $14 = HEAPF32[$5_1 + 16 >> 2];
       $4_1 = HEAPF32[$5_1 + 8 >> 2];
       $1_1 = $0_1 + 24 | 0;
       $9 = HEAPF32[$5_1 + 4 >> 2];
       $10_1 = Math_fround($9 + HEAPF32[$5_1 + 12 >> 2]);
       HEAPF32[$1_1 + 8 >> 2] = $10_1;
       HEAPF32[$1_1 + 4 >> 2] = $4_1;
       HEAPF32[$1_1 >> 2] = $9;
       $5_1 = $1_1 + 12 | 0;
       $13 = Math_fround($4_1 + $14);
       HEAPF32[$5_1 >> 2] = $13;
       $14 = HEAPF32[$8 + 5592 >> 2];
       $20_1 = $13;
       $17_1 = HEAPF32[$8 + 5596 >> 2];
       $13 = Math_fround($17_1 + $17_1) < Math_fround($13 - $4_1) ? Math_fround(-$17_1) : Math_fround(0.0);
       HEAPF32[$5_1 >> 2] = $20_1 + $13;
       $14 = Math_fround($14 + $14) < Math_fround($10_1 - $9) ? Math_fround(-$14) : Math_fround(0.0);
       HEAPF32[$1_1 + 8 >> 2] = $10_1 + $14;
       HEAPF32[$1_1 + 4 >> 2] = $4_1 - $13;
       HEAPF32[$1_1 >> 2] = $9 - $14;
       $4_1 = HEAPF32[$7_1 >> 2];
       HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$7_1 + 12 >> 2];
       HEAPF32[$0_1 + 8 >> 2] = $4_1;
       $5_1 = $0_1 + 16 | 0;
       $8 = $0_1 + 8 | 0;
       $220($5_1, $8, $15_1, $2_1 + 168 | 0, $1_1, $7_1, 1);
       HEAP32[$0_1 + 8 >> 2] = 0;
       HEAP32[$0_1 + 12 >> 2] = 0;
       $250($5_1, 0, $8);
      }
      $4_1 = HEAPF32[$6_1 + 5476 >> 2];
      HEAPF32[$0_1 + 28 >> 2] = HEAPF32[$6_1 + 5428 >> 2];
      HEAPF32[$0_1 + 24 >> 2] = $4_1;
      $59(2, $0_1 + 24 | 0);
      $1_1 = $143($0_1 + 48 | 0, 0, 67109191);
      $60(1);
      if (!$1_1) {
       $321()
      }
     }
     global$0 = $0_1 - -64 | 0;
    } else {
     $1_1 = 0
    }
   } else {
    $1_1 = 0
   }
   $5_1 = $1_1;
  }
  global$0 = $3 + 144 | 0;
  return $5_1;
 }
 
 function $599() {
  $321();
 }
 
 function $601($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19 = 0, $20_1 = Math_fround(0);
  $4_1 = global$0 - 112 | 0;
  global$0 = $4_1;
  $12_1 = HEAP32[18392];
  $9 = HEAP32[$12_1 + 7080 >> 2];
  HEAP8[$9 + 140 | 0] = 1;
  if (!HEAPU8[$9 + 143 | 0]) {
   $17_1 = $76($9, $0_1);
   $68($4_1 + 104 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $7_1 = HEAPF32[$3 >> 2];
   $10_1 = HEAPF32[$3 + 4 >> 2];
   HEAPF32[$4_1 + 100 >> 2] = $10_1 != Math_fround(0.0) ? $10_1 : HEAPF32[$4_1 + 108 >> 2];
   HEAPF32[$4_1 + 96 >> 2] = $7_1 != Math_fround(0.0) ? $7_1 : HEAPF32[$4_1 + 104 >> 2];
   $10_1 = HEAPF32[$9 + 212 >> 2];
   $15_1 = HEAPF32[$9 + 264 >> 2];
   $13 = HEAPF32[$9 + 208 >> 2];
   $212($4_1 + 96 | 0, Math_fround(0.0));
   $8 = $2_1 & 2;
   $7_1 = $8 ? HEAPF32[$9 + 480 >> 2] : $13;
   if (!(!($2_1 & 16777216) & HEAPF32[$3 >> 2] != Math_fround(0.0))) {
    $18_1 = HEAPF32[$4_1 + 104 >> 2];
    $16_1 = Math_fround(HEAPF32[($8 ? 488 : 472) + $9 >> 2] - $7_1);
    HEAPF32[$4_1 + 96 >> 2] = $16_1 <= $18_1 ? $18_1 : $16_1;
   }
   $10_1 = Math_fround($10_1 + $15_1);
   HEAPF32[$4_1 + 92 >> 2] = $10_1;
   HEAPF32[$4_1 + 88 >> 2] = $13;
   $13 = Math_fround($10_1 + HEAPF32[$4_1 + 100 >> 2]);
   HEAPF32[$4_1 + 84 >> 2] = $13;
   $15_1 = Math_fround($7_1 + HEAPF32[$4_1 + 96 >> 2]);
   HEAPF32[$4_1 + 80 >> 2] = $15_1;
   HEAPF32[$4_1 + 76 >> 2] = $13;
   HEAPF32[$4_1 + 72 >> 2] = $15_1;
   HEAPF32[$4_1 + 68 >> 2] = $10_1;
   HEAPF32[$4_1 + 64 >> 2] = $7_1;
   if (!($2_1 & 134217728)) {
    $18_1 = HEAPF32[$12_1 + 5496 >> 2];
    $20_1 = $7_1;
    $7_1 = $8 ? Math_fround(0.0) : HEAPF32[$12_1 + 5492 >> 2];
    $16_1 = Math_fround($7_1 * Math_fround(.5));
    label$7 : {
     if (Math_fround(Math_abs($16_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$16_1;
      break label$7;
     }
     $3 = -2147483648;
    }
    $16_1 = Math_fround($3 | 0);
    HEAPF32[$4_1 + 64 >> 2] = $20_1 - $16_1;
    HEAPF32[$4_1 + 72 >> 2] = $15_1 + Math_fround($7_1 - $16_1);
    $7_1 = Math_fround($18_1 * Math_fround(.5));
    label$9 : {
     if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$7_1;
      break label$9;
     }
     $3 = -2147483648;
    }
    $7_1 = Math_fround($3 | 0);
    HEAPF32[$4_1 + 68 >> 2] = $10_1 - $7_1;
    HEAPF32[$4_1 + 76 >> 2] = $13 + Math_fround($18_1 - $7_1);
   }
   $7_1 = HEAPF32[$9 + 504 >> 2];
   $10_1 = HEAPF32[$9 + 496 >> 2];
   if ($8) {
    HEAPF32[$9 + 496 >> 2] = HEAPF32[$9 + 480 >> 2];
    HEAPF32[$9 + 504 >> 2] = HEAPF32[$9 + 488 >> 2];
   }
   $5_1 = $2_1 & 8;
   $6_1 = $213($4_1 - -64 | 0, $17_1, 0, $5_1 >>> 1 | 0);
   if ($8) {
    HEAPF32[$9 + 504 >> 2] = $7_1;
    HEAPF32[$9 + 496 >> 2] = $10_1;
   }
   $3 = 0;
   if ($6_1) {
    $19 = !$5_1 | (HEAPU8[$12_1 + 7216 | 0] & 4) >>> 2;
    if (!$19) {
     $226(1)
    }
    label$15 : {
     if (!$8) {
      break label$15
     }
     if (HEAP32[$9 + 368 >> 2]) {
      $548();
      break label$15;
     }
     if (!HEAP32[$12_1 + 8036 >> 2]) {
      break label$15
     }
     $5_1 = HEAP32[18392];
     $3 = HEAP32[$5_1 + 8036 >> 2];
     $5_1 = HEAP32[$5_1 + 7080 >> 2];
     $6_1 = HEAP32[$5_1 + 500 >> 2];
     HEAP32[$3 + 340 >> 2] = HEAP32[$5_1 + 496 >> 2];
     HEAP32[$3 + 344 >> 2] = $6_1;
     $6_1 = $5_1 + 504 | 0;
     $11_1 = HEAP32[$6_1 + 4 >> 2];
     $14 = $3 + 348 | 0;
     HEAP32[$14 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$14 + 4 >> 2] = $11_1;
     $7_1 = HEAPF32[$3 + 320 >> 2];
     $11_1 = $3 + 316 | 0;
     $10_1 = HEAPF32[$11_1 >> 2];
     $13 = HEAPF32[$3 + 312 >> 2];
     $15_1 = HEAPF32[$3 + 308 >> 2];
     $14 = HEAP32[$11_1 + 4 >> 2];
     HEAP32[$6_1 >> 2] = HEAP32[$11_1 >> 2];
     HEAP32[$6_1 + 4 >> 2] = $14;
     $6_1 = HEAP32[$3 + 312 >> 2];
     HEAP32[$5_1 + 496 >> 2] = HEAP32[$3 + 308 >> 2];
     HEAP32[$5_1 + 500 >> 2] = $6_1;
     $6_1 = HEAP32[$5_1 + 580 >> 2];
     HEAPF32[$6_1 + 96 >> 2] = $15_1;
     HEAPF32[$6_1 + 100 >> 2] = $13;
     HEAPF32[$6_1 + 104 >> 2] = $10_1;
     HEAPF32[$6_1 + 108 >> 2] = $7_1;
     $6_1 = HEAP32[$5_1 + 580 >> 2];
     $6_1 = ((HEAP32[$6_1 + 60 >> 2] << 4) + HEAP32[$6_1 + 68 >> 2] | 0) - 16 | 0;
     HEAPF32[$6_1 + 12 >> 2] = $7_1;
     HEAPF32[$6_1 + 8 >> 2] = $10_1;
     HEAPF32[$6_1 + 4 >> 2] = $13;
     HEAPF32[$6_1 >> 2] = $15_1;
     $422(HEAP32[$3 + 376 >> 2], HEAP32[$5_1 + 580 >> 2], HEAPU8[$3 + 439 | 0]);
    }
    $6_1 = $2_1 & 16;
    $3 = $2_1 >>> 16 & 128 | ($2_1 >>> 18 & 16 | $2_1 >>> 3 & 131072);
    $3 = $569($4_1 - -64 | 0, $17_1, $4_1 + 63 | 0, $4_1 + 62 | 0, $6_1 << 8 | ($2_1 & 4 ? $3 | 288 : $3));
    label$17 : {
     label$18 : {
      if (!($2_1 & 2097152)) {
       break label$18
      }
      $5_1 = HEAP32[$12_1 + 7540 >> 2];
      if (!$5_1) {
       break label$18
      }
      $11_1 = HEAP32[$12_1 + 7544 >> 2] == HEAP32[$9 + 300 >> 2] & ($5_1 | 0) == ($17_1 | 0);
      $5_1 = $11_1 | $1_1;
      $3 = $3 | $11_1;
      break label$17;
     }
     $5_1 = $1_1;
    }
    label$19 : {
     if (!$3 & (!($2_1 & 67108864) | !HEAPU8[$4_1 + 63 | 0]) | (HEAPU8[$12_1 + 7571 | 0] | HEAP32[$12_1 + 7508 >> 2] != ($9 | 0))) {
      break label$19
     }
     $11_1 = HEAP32[$9 + 292 >> 2];
     if (($11_1 | 0) != HEAP32[$12_1 + 7564 >> 2]) {
      break label$19
     }
     $14 = HEAP32[$9 + 300 >> 2];
     $7_1 = HEAPF32[$9 + 224 >> 2];
     $10_1 = HEAPF32[$9 + 228 >> 2];
     HEAPF32[$4_1 + 56 >> 2] = HEAPF32[$4_1 + 76 >> 2] - $10_1;
     HEAPF32[$4_1 + 52 >> 2] = HEAPF32[$4_1 + 72 >> 2] - $7_1;
     HEAPF32[$4_1 + 48 >> 2] = HEAPF32[$4_1 + 68 >> 2] - $10_1;
     HEAPF32[$4_1 + 44 >> 2] = HEAPF32[$4_1 + 64 >> 2] - $7_1;
     $329($17_1, $11_1, $14, $4_1 + 44 | 0);
     HEAP8[$12_1 + 7570 | 0] = 1;
    }
    if ($3) {
     $88()
    }
    if ($6_1) {
     $202()
    }
    if (($1_1 | 0) != ($5_1 | 0)) {
     $1_1 = $12_1 + 7248 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] | 8;
    }
    $1_1 = HEAPU8[$4_1 + 62 | 0];
    if (!(!($2_1 & 33554432) | !$1_1)) {
     HEAP8[$4_1 + 63 | 0] = 1
    }
    $6_1 = HEAPU8[$4_1 + 63 | 0];
    if (!(!$6_1 & ($5_1 ^ -1))) {
     $6_1 = $51($6_1 ? ($1_1 ? 26 : 25) : 24, Math_fround(1.0));
     $1_1 = HEAP32[$4_1 + 68 >> 2];
     $11_1 = HEAP32[$4_1 + 64 >> 2];
     HEAP32[$4_1 + 32 >> 2] = $11_1;
     HEAP32[$4_1 + 36 >> 2] = $1_1;
     $5_1 = HEAP32[$4_1 + 76 >> 2];
     $14 = HEAP32[$4_1 + 72 >> 2];
     HEAP32[$4_1 + 24 >> 2] = $14;
     HEAP32[$4_1 + 28 >> 2] = $5_1;
     HEAP32[$4_1 + 16 >> 2] = $11_1;
     HEAP32[$4_1 + 20 >> 2] = $1_1;
     HEAP32[$4_1 + 8 >> 2] = $14;
     HEAP32[$4_1 + 12 >> 2] = $5_1;
     $71($4_1 + 16 | 0, $4_1 + 8 | 0, $6_1, 0, Math_fround(0.0));
    }
    $73($4_1 - -64 | 0, $17_1, 10);
    label$26 : {
     if (!$8) {
      break label$26
     }
     if (HEAP32[$9 + 368 >> 2]) {
      $549();
      break label$26;
     }
     if (!HEAP32[$12_1 + 8036 >> 2]) {
      break label$26
     }
     $5_1 = HEAP32[18392];
     $1_1 = HEAP32[$5_1 + 8036 >> 2];
     $7_1 = HEAPF32[$1_1 + 352 >> 2];
     $8 = $1_1 + 348 | 0;
     $10_1 = HEAPF32[$8 >> 2];
     $13 = HEAPF32[$1_1 + 344 >> 2];
     $17_1 = HEAP32[$1_1 + 16 >> 2];
     $6_1 = HEAP32[$1_1 + 92 >> 2];
     $15_1 = HEAPF32[$1_1 + 340 >> 2];
     $11_1 = HEAP32[$8 + 4 >> 2];
     $5_1 = HEAP32[$5_1 + 7080 >> 2];
     $14 = $5_1 + 504 | 0;
     HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
     HEAP32[$14 + 4 >> 2] = $11_1;
     $8 = HEAP32[$1_1 + 344 >> 2];
     HEAP32[$5_1 + 496 >> 2] = HEAP32[$1_1 + 340 >> 2];
     HEAP32[$5_1 + 500 >> 2] = $8;
     $8 = HEAP32[$5_1 + 580 >> 2];
     HEAPF32[$8 + 100 >> 2] = $13;
     HEAPF32[$8 + 104 >> 2] = $10_1;
     HEAPF32[$8 + 108 >> 2] = $7_1;
     HEAPF32[$8 + 96 >> 2] = $15_1;
     $8 = HEAP32[$5_1 + 580 >> 2];
     $8 = ((HEAP32[$8 + 60 >> 2] << 4) + HEAP32[$8 + 68 >> 2] | 0) - 16 | 0;
     HEAPF32[$8 + 12 >> 2] = $7_1;
     HEAPF32[$8 + 8 >> 2] = $10_1;
     HEAPF32[$8 + 4 >> 2] = $13;
     HEAPF32[$8 >> 2] = $15_1;
     $422(HEAP32[$1_1 + 376 >> 2], HEAP32[$5_1 + 580 >> 2], HEAPU8[(Math_imul($6_1, 104) + $17_1 | 0) + 87 | 0]);
    }
    $69($4_1 + 88 | 0, $4_1 + 80 | 0, $0_1, 0, $4_1 + 104 | 0, $12_1 + 5576 | 0, $4_1 - -64 | 0);
    if (!(!$3 | $2_1 & 1 | (!(HEAP32[$9 + 8 >> 2] & 67108864) | HEAPU8[$12_1 + 7244 | 0] & 32))) {
     $319()
    }
    if (!$19) {
     $227()
    }
   }
   $5_1 = $3;
  }
  global$0 = $4_1 + 112 | 0;
  return $5_1;
 }
 
 function $602($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $9 = HEAP32[$1_1 >> 2];
  $6_1 = 0;
  label$1 : {
   if (($9 | 0) < 0) {
    break label$1
   }
   $6_1 = 0;
   if (($3 | 0) <= ($9 | 0)) {
    break label$1
   }
   $6_1 = HEAP32[($9 << 2) + $2_1 >> 2];
  }
  $9 = $6_1;
  $6_1 = HEAP32[18392];
  if (!(HEAPU8[$6_1 + 7300 | 0] & 16 | ($4_1 | 0) == -1)) {
   HEAP32[$5_1 + 8 >> 2] = 0;
   HEAP32[$5_1 + 12 >> 2] = 0;
   if (($4_1 | 0) <= 0) {
    $8 = Math_fround(3402823466385288598117041.0e14)
   } else {
    $8 = HEAPF32[$6_1 + 5428 >> 2];
    $10_1 = Math_fround($8 + $8);
    $8 = HEAPF32[$6_1 + 5496 >> 2];
    $8 = Math_fround($10_1 + Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 6468 >> 2] + $8) * Math_fround($4_1 | 0)) - $8));
   }
   HEAPF32[$5_1 + 4 >> 2] = $8;
   HEAP32[$5_1 >> 2] = 2139095039;
   $251($5_1 + 8 | 0, $5_1, 0);
  }
  if ($597($0_1, $9, 0)) {
   label$6 : {
    if (($3 | 0) <= 0) {
     $0_1 = 0;
     break label$6;
    }
    $0_1 = 0;
    while (1) {
     $266($7_1);
     $9 = HEAP32[($7_1 << 2) + $2_1 >> 2];
     $4_1 = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 8 >> 2] = 0;
     HEAP32[$5_1 + 12 >> 2] = 0;
     if ($601($9, ($4_1 | 0) == ($7_1 | 0), 0, $5_1 + 8 | 0)) {
      HEAP32[$1_1 >> 2] = $7_1;
      $0_1 = 1;
     }
     if (($4_1 | 0) == ($7_1 | 0)) {
      $263()
     }
     $269();
     $7_1 = $7_1 + 1 | 0;
     if (($7_1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $321();
   $7_1 = $0_1;
   if ($7_1 & 1) {
    $88()
   }
  }
  global$0 = $5_1 + 16 | 0;
  return $7_1 & 1;
 }
 
 function $603($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    switch (($2_1 & -2) - 4 | 0) {
    case 0:
     HEAP32[$5_1 + 96 >> 2] = HEAP32[$3 >> 2];
     $6_1 = $21($0_1, $1_1, $4_1, $5_1 + 96 | 0);
     break label$1;
    case 2:
     $2_1 = HEAP32[$3 + 4 >> 2];
     HEAP32[$5_1 + 112 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$5_1 + 116 >> 2] = $2_1;
     $6_1 = $21($0_1, $1_1, $4_1, $5_1 + 112 | 0);
     break label$1;
    default:
     break label$2;
    };
   }
   label$5 : {
    switch ($2_1 | 0) {
    case 8:
     HEAPF64[$5_1 >> 3] = HEAPF32[$3 >> 2];
     $6_1 = $21($0_1, $1_1, $4_1, $5_1);
     break label$1;
    case 9:
     HEAPF64[$5_1 + 16 >> 3] = HEAPF64[$3 >> 3];
     $6_1 = $21($0_1, $1_1, $4_1, $5_1 + 16 | 0);
     break label$1;
    case 0:
     HEAP32[$5_1 + 32 >> 2] = HEAP8[$3 | 0];
     $6_1 = $21($0_1, $1_1, $4_1, $5_1 + 32 | 0);
     break label$1;
    case 1:
     HEAP32[$5_1 + 48 >> 2] = HEAPU8[$3 | 0];
     $6_1 = $21($0_1, $1_1, $4_1, $5_1 + 48 | 0);
     break label$1;
    case 2:
     HEAP32[$5_1 + 64 >> 2] = HEAP16[$3 >> 1];
     $6_1 = $21($0_1, $1_1, $4_1, $5_1 - -64 | 0);
     break label$1;
    case 3:
     break label$5;
    default:
     break label$1;
    };
   }
   HEAP32[$5_1 + 80 >> 2] = HEAPU16[$3 >> 1];
   $6_1 = $21($0_1, $1_1, $4_1, $5_1 + 80 | 0);
  }
  global$0 = $5_1 + 128 | 0;
  return $6_1;
 }
 
 function $604($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  label$1 : {
   label$2 : {
    switch ($0_1 | 0) {
    case 0:
     if (($1_1 | 0) == 43) {
      $6_1 = HEAP8[$3 | 0];
      $5_1 = HEAP8[$4_1 | 0];
      label$13 : {
       if (($5_1 | 0) < 0) {
        $0_1 = 128;
        if (($6_1 | 0) < (-128 - $5_1 | 0)) {
         break label$13
        }
       }
       $0_1 = $5_1 + $6_1 | 0;
       $0_1 = ($5_1 | 0) > 0 ? (($6_1 | 0) > (127 - $5_1 | 0) ? 127 : $0_1) : $0_1;
      }
      HEAP8[$2_1 | 0] = $0_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $1_1 = HEAP8[$3 | 0];
     $0_1 = HEAP8[$4_1 | 0];
     label$15 : {
      if (($0_1 | 0) > 0) {
       $3 = 128;
       if (($1_1 | 0) < ($0_1 - 128 | 0)) {
        break label$15
       }
      }
      $3 = $1_1 - $0_1 | 0;
      $3 = ($0_1 | 0) < 0 ? (($1_1 | 0) > ($0_1 + 127 | 0) ? 127 : $3) : $3;
     }
     HEAP8[$2_1 | 0] = $3;
     return;
    case 1:
     if (($1_1 | 0) == 43) {
      $0_1 = HEAPU8[$4_1 | 0] + HEAPU8[$3 | 0] | 0;
      HEAP8[$2_1 | 0] = $0_1 >>> 0 >= 255 ? 255 : $0_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $0_1 = HEAPU8[$3 | 0];
     $1_1 = $0_1 - HEAPU8[$4_1 | 0] | 0;
     HEAP8[$2_1 | 0] = $0_1 >>> 0 >= $1_1 >>> 0 ? $1_1 : 0;
     return;
    case 2:
     if (($1_1 | 0) == 43) {
      $6_1 = HEAP16[$3 >> 1];
      $5_1 = HEAP16[$4_1 >> 1];
      label$19 : {
       if (($5_1 | 0) < 0) {
        $0_1 = 32768;
        if (($6_1 | 0) < (-32768 - $5_1 | 0)) {
         break label$19
        }
       }
       $0_1 = $5_1 + $6_1 | 0;
       $0_1 = ($5_1 | 0) > 0 ? (($6_1 | 0) > (32767 - $5_1 | 0) ? 32767 : $0_1) : $0_1;
      }
      HEAP16[$2_1 >> 1] = $0_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $1_1 = HEAP16[$3 >> 1];
     $0_1 = HEAP16[$4_1 >> 1];
     label$21 : {
      if (($0_1 | 0) > 0) {
       $3 = 32768;
       if (($1_1 | 0) < ($0_1 - 32768 | 0)) {
        break label$21
       }
      }
      $3 = $1_1 - $0_1 | 0;
      $3 = ($0_1 | 0) < 0 ? (($1_1 | 0) > ($0_1 + 32767 | 0) ? 32767 : $3) : $3;
     }
     HEAP16[$2_1 >> 1] = $3;
     return;
    case 3:
     if (($1_1 | 0) == 43) {
      $0_1 = HEAPU16[$4_1 >> 1] + HEAPU16[$3 >> 1] | 0;
      HEAP16[$2_1 >> 1] = $0_1 >>> 0 >= 65535 ? 65535 : $0_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $0_1 = HEAPU16[$3 >> 1];
     $1_1 = $0_1 - HEAPU16[$4_1 >> 1] | 0;
     HEAP16[$2_1 >> 1] = $0_1 >>> 0 >= $1_1 >>> 0 ? $1_1 : 0;
     return;
    case 4:
     if (($1_1 | 0) == 43) {
      $6_1 = HEAP32[$3 >> 2];
      $5_1 = HEAP32[$4_1 >> 2];
      label$25 : {
       if (($5_1 | 0) < 0) {
        $0_1 = -2147483648;
        if (($6_1 | 0) < (-2147483648 - $5_1 | 0)) {
         break label$25
        }
       }
       $0_1 = $5_1 + $6_1 | 0;
       $0_1 = ($5_1 | 0) > 0 ? (($6_1 | 0) > ($5_1 ^ 2147483647) ? 2147483647 : $0_1) : $0_1;
      }
      HEAP32[$2_1 >> 2] = $0_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $1_1 = HEAP32[$3 >> 2];
     $0_1 = HEAP32[$4_1 >> 2];
     label$27 : {
      if (($0_1 | 0) > 0) {
       $3 = -2147483648;
       if (($1_1 | 0) < ($0_1 | -2147483648)) {
        break label$27
       }
      }
      $3 = $1_1 - $0_1 | 0;
      $3 = ($0_1 | 0) < 0 ? (($1_1 | 0) > ($0_1 + 2147483647 | 0) ? 2147483647 : $3) : $3;
     }
     HEAP32[$2_1 >> 2] = $3;
     return;
    case 5:
     if (($1_1 | 0) == 43) {
      $0_1 = HEAP32[$4_1 >> 2];
      $5_1 = $0_1 + HEAP32[$3 >> 2] | 0;
      HEAP32[$2_1 >> 2] = $0_1 >>> 0 > $5_1 >>> 0 ? -1 : $5_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $0_1 = HEAP32[$3 >> 2];
     $1_1 = $0_1 - HEAP32[$4_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $0_1 >>> 0 >= $1_1 >>> 0 ? $1_1 : 0;
     return;
    case 6:
     if (($1_1 | 0) == 43) {
      $6_1 = HEAP32[$3 >> 2];
      $8 = HEAP32[$3 + 4 >> 2];
      $5_1 = HEAP32[$4_1 >> 2];
      $0_1 = HEAP32[$4_1 + 4 >> 2];
      $9 = $0_1;
      label$31 : {
       if (($0_1 | 0) < 0) {
        $0_1 = 0;
        $7_1 = -2147483648 - ((($5_1 | 0) != 0) + $9 | 0) | 0;
        $10_1 = -2147483648;
        if ($6_1 >>> 0 < 0 - $5_1 >>> 0 & ($8 | 0) <= ($7_1 | 0) | ($7_1 | 0) > ($8 | 0)) {
         break label$31
        }
       }
       $7_1 = $8 + $9 | 0;
       $0_1 = $5_1 + $6_1 | 0;
       $7_1 = $0_1 >>> 0 < $6_1 >>> 0 ? $7_1 + 1 | 0 : $7_1;
       $10_1 = $6_1 >>> 0 > ($5_1 ^ -1) >>> 0;
       $6_1 = $9 ^ 2147483647;
       $6_1 = $10_1 & ($8 | 0) >= ($6_1 | 0) | ($6_1 | 0) < ($8 | 0);
       $5_1 = !!$5_1 & ($9 | 0) >= 0 | ($9 | 0) > 0;
       $0_1 = $5_1 ? ($6_1 ? -1 : $0_1) : $0_1;
       $10_1 = $5_1 ? ($6_1 ? 2147483647 : $7_1) : $7_1;
      }
      $7_1 = $10_1;
      HEAP32[$2_1 >> 2] = $0_1;
      HEAP32[$2_1 + 4 >> 2] = $7_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $1_1 = HEAP32[$3 >> 2];
     $5_1 = HEAP32[$3 + 4 >> 2];
     $0_1 = HEAP32[$4_1 + 4 >> 2];
     $6_1 = $0_1;
     $3 = HEAP32[$4_1 >> 2];
     label$33 : {
      if (!(!$3 & ($0_1 | 0) <= 0 | ($0_1 | 0) < 0)) {
       $0_1 = 0;
       $4_1 = $6_1 | -2147483648;
       $7_1 = -2147483648;
       if ($1_1 >>> 0 < $3 >>> 0 & ($5_1 | 0) <= ($4_1 | 0) | ($4_1 | 0) > ($5_1 | 0)) {
        break label$33
       }
      }
      $0_1 = $1_1 - $3 | 0;
      $4_1 = $5_1 - (($1_1 >>> 0 < $3 >>> 0) + $6_1 | 0) | 0;
      $7_1 = $6_1 + 2147483647 | 0;
      $3 = $3 - 1 | 0;
      $7_1 = ($3 | 0) != -1 ? $7_1 + 1 | 0 : $7_1;
      $1_1 = $1_1 >>> 0 > $3 >>> 0 & ($5_1 | 0) >= ($7_1 | 0) | ($5_1 | 0) > ($7_1 | 0);
      $3 = ($6_1 | 0) < 0;
      $0_1 = $3 ? ($1_1 ? -1 : $0_1) : $0_1;
      $7_1 = $3 ? ($1_1 ? 2147483647 : $4_1) : $4_1;
     }
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[$2_1 + 4 >> 2] = $7_1;
     return;
    case 7:
     if (($1_1 | 0) == 43) {
      $6_1 = HEAP32[$4_1 + 4 >> 2];
      $7_1 = $6_1 + HEAP32[$3 + 4 >> 2] | 0;
      $0_1 = HEAP32[$4_1 >> 2];
      $8 = HEAP32[$3 >> 2];
      $5_1 = $0_1 + $8 | 0;
      $7_1 = $5_1 >>> 0 < $8 >>> 0 ? $7_1 + 1 | 0 : $7_1;
      $0_1 = ($6_1 | 0) == ($7_1 | 0) & $0_1 >>> 0 > $5_1 >>> 0 | $6_1 >>> 0 > $7_1 >>> 0;
      HEAP32[$2_1 >> 2] = $0_1 ? -1 : $5_1;
      HEAP32[$2_1 + 4 >> 2] = $0_1 ? -1 : $7_1;
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     $0_1 = HEAP32[$3 >> 2];
     $5_1 = HEAP32[$4_1 >> 2];
     $1_1 = $0_1 - $5_1 | 0;
     $3 = HEAP32[$3 + 4 >> 2];
     $4_1 = $3 - (HEAP32[$4_1 + 4 >> 2] + ($0_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
     $0_1 = ($4_1 | 0) == ($3 | 0) & $0_1 >>> 0 < $1_1 >>> 0 | $3 >>> 0 < $4_1 >>> 0;
     HEAP32[$2_1 >> 2] = $0_1 ? 0 : $1_1;
     HEAP32[$2_1 + 4 >> 2] = $0_1 ? 0 : $4_1;
     return;
    case 8:
     if (($1_1 | 0) == 43) {
      HEAPF32[$2_1 >> 2] = HEAPF32[$3 >> 2] + HEAPF32[$4_1 >> 2]
     }
     if (($1_1 | 0) != 45) {
      break label$1
     }
     HEAPF32[$2_1 >> 2] = HEAPF32[$3 >> 2] - HEAPF32[$4_1 >> 2];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   if (($1_1 | 0) == 43) {
    HEAPF64[$2_1 >> 3] = HEAPF64[$3 >> 3] + HEAPF64[$4_1 >> 3]
   }
   if (($1_1 | 0) != 45) {
    break label$1
   }
   HEAPF64[$2_1 >> 3] = HEAPF64[$3 >> 3] - HEAPF64[$4_1 >> 3];
  }
 }
 
 function $605($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  label$1 : {
   while (1) {
    label$2 : {
     $7_1 = $0_1;
     label$4 : {
      $10_1 = HEAPU8[$0_1 | 0];
      switch ($10_1 - 9 | 0) {
      case 33:
      case 34:
      case 38:
       break label$2;
      case 0:
      case 23:
       break label$4;
      default:
       break label$1;
      };
     }
     $0_1 = $0_1 + 1 | 0;
     continue;
    }
    break;
   };
   while (1) {
    $8 = $0_1;
    $7_1 = $0_1 + 1 | 0;
    $0_1 = $7_1;
    $8 = HEAPU8[$8 + 1 | 0];
    if (($8 | 0) == 9) {
     continue
    }
    if (($8 | 0) == 32) {
     continue
    }
    break;
   };
   $8 = $10_1;
  }
  $0_1 = 0;
  if (HEAPU8[$7_1 | 0]) {
   $10_1 = $2_1 << 4;
   $11_1 = HEAP32[$10_1 + 48160 >> 2];
   $1602($5_1 + 200 | 0, $3, $11_1);
   $0_1 = $4_1;
   if (!$0_1) {
    $0_1 = HEAP32[$10_1 + 48172 >> 2]
   }
   HEAP32[$5_1 + 196 >> 2] = 0;
   label$8 : {
    label$9 : {
     label$10 : {
      label$11 : {
       label$12 : {
        label$13 : {
         label$14 : {
          switch ($2_1 - 4 | 0) {
          case 0:
           HEAP32[$5_1 + 184 >> 2] = HEAP32[$3 >> 2];
           HEAP32[$5_1 + 176 >> 2] = 0;
           label$18 : {
            label$19 : {
             if (!$8) {
              break label$19
             }
             HEAP32[$5_1 + 96 >> 2] = $5_1 + 184;
             if (($1690($1_1, $0_1, $5_1 + 96 | 0) | 0) <= 0) {
              break label$12
             }
             label$20 : {
              switch ($8 - 42 | 0) {
              case 1:
               HEAP32[$5_1 + 48 >> 2] = $5_1 + 196;
               if (!$1690($7_1, 13404, $5_1 + 48 | 0)) {
                break label$13
               }
               $0_1 = HEAP32[$5_1 + 196 >> 2] + HEAP32[$5_1 + 184 >> 2] | 0;
               break label$18;
              case 0:
               HEAP32[$5_1 + 64 >> 2] = $5_1 + 176;
               if (!$1690($7_1, 10027, $5_1 - -64 | 0)) {
                break label$13
               }
               $6_1 = Math_fround(HEAPF32[$5_1 + 176 >> 2] * Math_fround(HEAP32[$5_1 + 184 >> 2]));
               if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
                $0_1 = ~~$6_1;
                break label$18;
               }
               $0_1 = -2147483648;
               break label$18;
              case 5:
               break label$20;
              default:
               break label$19;
              };
             }
             HEAP32[$5_1 + 80 >> 2] = $5_1 + 176;
             if (!$1690($7_1, 10027, $5_1 + 80 | 0)) {
              break label$13
             }
             $6_1 = HEAPF32[$5_1 + 176 >> 2];
             if ($6_1 == Math_fround(0.0)) {
              break label$13
             }
             $6_1 = Math_fround(Math_fround(HEAP32[$5_1 + 184 >> 2]) / $6_1);
             if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
              $0_1 = ~~$6_1;
              break label$18;
             }
             $0_1 = -2147483648;
             break label$18;
            }
            HEAP32[$5_1 + 32 >> 2] = $5_1 + 196;
            if (($1690($7_1, $0_1, $5_1 + 32 | 0) | 0) != 1) {
             break label$13
            }
            $0_1 = HEAP32[$5_1 + 196 >> 2];
           }
           HEAP32[$3 >> 2] = $0_1;
           break label$13;
          case 4:
           HEAPF32[$5_1 + 184 >> 2] = HEAPF32[$3 >> 2];
           HEAP32[$5_1 + 176 >> 2] = 0;
           if ($8) {
            HEAP32[$5_1 + 128 >> 2] = $5_1 + 184;
            if (($1690($1_1, 10027, $5_1 + 128 | 0) | 0) <= 0) {
             break label$11
            }
           }
           HEAP32[$5_1 + 112 >> 2] = $5_1 + 176;
           if (($1690($7_1, 10027, $5_1 + 112 | 0) | 0) <= 0) {
            break label$11
           }
           label$26 : {
            label$27 : {
             switch ($8 - 42 | 0) {
             case 1:
              $6_1 = Math_fround(HEAPF32[$5_1 + 184 >> 2] + HEAPF32[$5_1 + 176 >> 2]);
              break label$26;
             case 0:
              $6_1 = Math_fround(HEAPF32[$5_1 + 184 >> 2] * HEAPF32[$5_1 + 176 >> 2]);
              break label$26;
             case 5:
              $6_1 = HEAPF32[$5_1 + 176 >> 2];
              if ($6_1 == Math_fround(0.0)) {
               break label$13
              }
              $6_1 = Math_fround(HEAPF32[$5_1 + 184 >> 2] / $6_1);
              break label$26;
             default:
              break label$27;
             };
            }
            $6_1 = HEAPF32[$5_1 + 176 >> 2];
           }
           HEAPF32[$3 >> 2] = $6_1;
           break label$13;
          case 5:
           HEAPF64[$5_1 + 184 >> 3] = HEAPF64[$3 >> 3];
           HEAP32[$5_1 + 176 >> 2] = 0;
           HEAP32[$5_1 + 180 >> 2] = 0;
           if ($8) {
            HEAP32[$5_1 + 160 >> 2] = $5_1 + 184;
            if (($1690($1_1, 9627, $5_1 + 160 | 0) | 0) <= 0) {
             break label$10
            }
           }
           HEAP32[$5_1 + 144 >> 2] = $5_1 + 176;
           if (($1690($7_1, 9627, $5_1 + 144 | 0) | 0) <= 0) {
            break label$10
           }
           label$32 : {
            label$33 : {
             switch ($8 - 42 | 0) {
             case 1:
              $9 = HEAPF64[$5_1 + 184 >> 3] + HEAPF64[$5_1 + 176 >> 3];
              break label$32;
             case 0:
              $9 = HEAPF64[$5_1 + 184 >> 3] * HEAPF64[$5_1 + 176 >> 3];
              break label$32;
             case 5:
              $9 = HEAPF64[$5_1 + 176 >> 3];
              if ($9 == 0.0) {
               break label$13
              }
              $9 = HEAPF64[$5_1 + 184 >> 3] / $9;
              break label$32;
             default:
              break label$33;
             };
            }
            $9 = HEAPF64[$5_1 + 176 >> 3];
           }
           HEAPF64[$3 >> 3] = $9;
           break label$13;
          default:
           break label$14;
          };
         }
         if ($2_1 - 5 >>> 0 <= 2) {
          HEAP32[$5_1 >> 2] = $3;
          if (($1690($7_1, $0_1, $5_1) | 0) > 0) {
           break label$13
          }
          $0_1 = 0;
          break label$8;
         }
         HEAP32[$5_1 + 16 >> 2] = $5_1 + 184;
         if (($1690($7_1, $0_1, $5_1 + 16 | 0) | 0) <= 0) {
          break label$9
         }
         label$38 : {
          switch ($2_1 | 0) {
          case 0:
           $0_1 = HEAP32[$5_1 + 184 >> 2];
           $0_1 = ($0_1 | 0) >= 127 ? 127 : $0_1;
           HEAP8[$3 | 0] = ($0_1 | 0) <= -128 ? -128 : $0_1;
           break label$13;
          case 1:
           $0_1 = HEAP32[$5_1 + 184 >> 2];
           $0_1 = ($0_1 | 0) >= 255 ? 255 : $0_1;
           HEAP8[$3 | 0] = ($0_1 | 0) > 0 ? $0_1 : 0;
           break label$13;
          case 2:
           $0_1 = HEAP32[$5_1 + 184 >> 2];
           $0_1 = ($0_1 | 0) >= 32767 ? 32767 : $0_1;
           HEAP16[$3 >> 1] = ($0_1 | 0) <= -32768 ? -32768 : $0_1;
           break label$13;
          case 3:
           break label$38;
          default:
           break label$13;
          };
         }
         $0_1 = HEAP32[$5_1 + 184 >> 2];
         $0_1 = ($0_1 | 0) >= 65535 ? 65535 : $0_1;
         HEAP16[$3 >> 1] = ($0_1 | 0) > 0 ? $0_1 : 0;
        }
        $0_1 = ($1645($5_1 + 200 | 0, $3, $11_1) | 0) != 0;
        break label$8;
       }
       $0_1 = 0;
       break label$8;
      }
      $0_1 = 0;
      break label$8;
     }
     $0_1 = 0;
     break label$8;
    }
    $0_1 = 0;
   }
  }
  global$0 = $5_1 + 208 | 0;
  return $0_1;
 }
 
 function $606($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = 0.0, $7_1 = 0.0;
  label$1 : {
   switch ($0_1 | 0) {
   case 0:
    $0_1 = HEAP8[$1_1 | 0];
    $1_1 = HEAP8[$2_1 | 0];
    return ($0_1 | 0) < ($1_1 | 0) ? -1 : ($0_1 | 0) > ($1_1 | 0);
   case 1:
    $0_1 = HEAPU8[$1_1 | 0];
    $1_1 = HEAPU8[$2_1 | 0];
    return $0_1 >>> 0 < $1_1 >>> 0 ? -1 : $0_1 >>> 0 > $1_1 >>> 0;
   case 2:
    $0_1 = HEAP16[$1_1 >> 1];
    $1_1 = HEAP16[$2_1 >> 1];
    return ($0_1 | 0) < ($1_1 | 0) ? -1 : ($0_1 | 0) > ($1_1 | 0);
   case 3:
    $0_1 = HEAPU16[$1_1 >> 1];
    $1_1 = HEAPU16[$2_1 >> 1];
    return $0_1 >>> 0 < $1_1 >>> 0 ? -1 : $0_1 >>> 0 > $1_1 >>> 0;
   case 4:
    $0_1 = HEAP32[$1_1 >> 2];
    $1_1 = HEAP32[$2_1 >> 2];
    return ($0_1 | 0) < ($1_1 | 0) ? -1 : ($0_1 | 0) > ($1_1 | 0);
   case 5:
    $0_1 = HEAP32[$1_1 >> 2];
    $1_1 = HEAP32[$2_1 >> 2];
    return $0_1 >>> 0 < $1_1 >>> 0 ? -1 : $0_1 >>> 0 > $1_1 >>> 0;
   case 6:
    $0_1 = HEAP32[$1_1 >> 2];
    $3 = HEAP32[$2_1 >> 2];
    $1_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = HEAP32[$2_1 + 4 >> 2];
    return $0_1 >>> 0 < $3 >>> 0 & ($1_1 | 0) <= ($2_1 | 0) | ($1_1 | 0) < ($2_1 | 0) ? -1 : $0_1 >>> 0 > $3 >>> 0 & ($1_1 | 0) >= ($2_1 | 0) | ($1_1 | 0) > ($2_1 | 0);
   case 7:
    $0_1 = HEAP32[$1_1 >> 2];
    $3 = HEAP32[$2_1 >> 2];
    $1_1 = HEAP32[$1_1 + 4 >> 2];
    $2_1 = HEAP32[$2_1 + 4 >> 2];
    return ($1_1 | 0) == ($2_1 | 0) & $0_1 >>> 0 < $3 >>> 0 | $1_1 >>> 0 < $2_1 >>> 0 ? -1 : ($1_1 | 0) == ($2_1 | 0) & $0_1 >>> 0 > $3 >>> 0 | $1_1 >>> 0 > $2_1 >>> 0;
   case 8:
    $4_1 = HEAPF32[$1_1 >> 2];
    $5_1 = HEAPF32[$2_1 >> 2];
    return $4_1 < $5_1 ? -1 : $4_1 > $5_1;
   case 9:
    $6_1 = HEAPF64[$1_1 >> 3];
    $7_1 = HEAPF64[$2_1 >> 3];
    $3 = $6_1 < $7_1 ? -1 : $6_1 > $7_1;
    break;
   default:
    break label$1;
   };
  }
  return $3;
 }
 
 function $609($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0);
  $12_1 = global$0 - 16 | 0;
  global$0 = $12_1;
  $7_1 = HEAP32[18392];
  $1_1 = ($2_1 | 0) >= ($3 | 0) | $1_1 != Math_fround(0.0) ? $1_1 : Math_fround(HEAPF32[$7_1 + 12064 >> 2] * Math_fround($3 - $2_1 | 0));
  $13 = $5_1 & 32;
  $11_1 = $5_1 & 1048576;
  $6_1 = $11_1 >>> 20 | 0;
  label$3 : {
   label$4 : {
    if (HEAP32[$7_1 + 7188 >> 2] != 1) {
     break label$4
    }
    if (!$128(0)) {
     break label$4
    }
    if (!$180(Math_fround(HEAPF32[$7_1 + 48 >> 2] * Math_fround(.5)))) {
     break label$4
    }
    $8 = HEAPF32[($7_1 + ($6_1 << 2) | 0) + 880 >> 2];
    $8 = HEAPU8[$7_1 + 254 | 0] ? Math_fround($8 * Math_fround(.009999999776482582)) : $8;
    $8 = HEAPU8[$7_1 + 253 | 0] ? Math_fround($8 * Math_fround(10.0)) : $8;
    break label$3;
   }
   if (HEAP32[$7_1 + 7188 >> 2] != 4) {
    break label$3
   }
   $9 = $12_1 + 8 | 0;
   $154($9, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
   $8 = HEAPF32[($6_1 << 2) + $9 >> 2];
   $10_1 = HEAPF32[12108];
   $1_1 = $1_1 >= $10_1 ? $1_1 : $10_1;
  }
  $1_1 = Math_fround($8 * $1_1);
  $1_1 = $11_1 ? Math_fround(-$1_1) : $1_1;
  label$10 : {
   if (!$13) {
    break label$10
   }
   $6_1 = $3 - $2_1 | 0;
   if (($6_1 | 0) <= 0) {
    break label$10
   }
   $1_1 = Math_fround($1_1 / Math_fround($6_1 | 0));
  }
  $11_1 = ($2_1 | 0) >= ($3 | 0);
  $9 = 0;
  label$13 : {
   if ($11_1) {
    break label$13
   }
   $6_1 = HEAP32[$0_1 >> 2];
   if (($3 | 0) <= ($6_1 | 0)) {
    $9 = 1;
    if ($1_1 > Math_fround(0.0)) {
     break label$13
    }
   }
   $9 = ($2_1 | 0) >= ($6_1 | 0) & $1_1 < Math_fround(0.0);
  }
  label$15 : {
   label$16 : {
    if ($9 | HEAPU8[$7_1 + 7148 | 0]) {
     HEAP32[$7_1 + 12060 >> 2] = 0;
     $6_1 = 0;
     break label$16;
    }
    if ($1_1 == Math_fround(0.0)) {
     break label$15
    }
    HEAPF32[$7_1 + 12060 >> 2] = $1_1 + HEAPF32[$7_1 + 12060 >> 2];
    $6_1 = 1;
   }
   HEAP8[$7_1 + 12057 | 0] = $6_1;
  }
  $6_1 = 0;
  label$19 : {
   if (!HEAPU8[$7_1 + 12057 | 0]) {
    break label$19
   }
   $6_1 = HEAP32[$0_1 >> 2];
   label$21 : {
    if ($13) {
     $10_1 = $1669(Math_fround(.10000000149011612), Math_fround(1.0));
     $8 = $616($6_1, $2_1, $3, 1, $10_1, Math_fround(0.0));
     $6_1 = $617(Math_fround($8 + HEAPF32[$7_1 + 12060 >> 2]), $2_1, $3, 1, $10_1, Math_fround(0.0));
     break label$21;
    }
    $8 = Math_fround(0.0);
    $10_1 = Math_fround(0.0);
    $14 = HEAPF32[$7_1 + 12060 >> 2];
    label$24 : {
     if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
      $9 = ~~$14;
      break label$24;
     }
     $9 = -2147483648;
    }
    $6_1 = $9 + $6_1 | 0;
   }
   if ($5_1 & 64) {
    $5_1 = $6_1
   } else {
    $5_1 = $618($4_1, $6_1)
   }
   HEAP8[$7_1 + 12057 | 0] = 0;
   label$28 : {
    if ($13) {
     $8 = Math_fround($616($5_1, $2_1, $3, 1, $10_1, Math_fround(0.0)) - $8);
     break label$28;
    }
    $8 = Math_fround($5_1 - HEAP32[$0_1 >> 2] | 0);
   }
   HEAPF32[$7_1 + 12060 >> 2] = HEAPF32[$7_1 + 12060 >> 2] - $8;
   $4_1 = HEAP32[$0_1 >> 2];
   label$30 : {
    if ($11_1) {
     $2_1 = $5_1;
     break label$30;
    }
    if (($4_1 | 0) == ($5_1 | 0)) {
     $2_1 = $5_1;
     break label$30;
    }
    $2_1 = (!($1_1 < Math_fround(0.0)) | ($4_1 | 0) >= ($5_1 | 0)) & ($2_1 | 0) <= ($5_1 | 0) ? $5_1 : $2_1;
    if (($2_1 | 0) <= ($3 | 0) & (!($1_1 > Math_fround(0.0)) | ($2_1 | 0) >= ($4_1 | 0))) {
     break label$30
    }
    $2_1 = $3;
   }
   $6_1 = ($2_1 | 0) != ($4_1 | 0);
   if (($2_1 | 0) == ($4_1 | 0)) {
    break label$19
   }
   HEAP32[$0_1 >> 2] = $2_1;
   $6_1 = 1;
  }
  $0_1 = $6_1;
  global$0 = $12_1 + 16 | 0;
  return $0_1;
 }
 
 function $610($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = Math_fround(0);
  $16_1 = global$0 - 16 | 0;
  global$0 = $16_1;
  $10_1 = HEAP32[18392];
  $1_1 = $2_1 >>> 0 >= $3 >>> 0 | $1_1 != Math_fround(0.0) ? $1_1 : Math_fround(HEAPF32[$10_1 + 12064 >> 2] * Math_fround($3 - $2_1 >>> 0));
  $14 = $5_1 & 1048576;
  $6_1 = $14 >>> 20 | 0;
  label$3 : {
   label$4 : {
    if (HEAP32[$10_1 + 7188 >> 2] != 1) {
     break label$4
    }
    if (!$128(0)) {
     break label$4
    }
    if (!$180(Math_fround(HEAPF32[$10_1 + 48 >> 2] * Math_fround(.5)))) {
     break label$4
    }
    $7_1 = HEAPF32[($10_1 + ($6_1 << 2) | 0) + 880 >> 2];
    $7_1 = HEAPU8[$10_1 + 254 | 0] ? Math_fround($7_1 * Math_fround(.009999999776482582)) : $7_1;
    $7_1 = HEAPU8[$10_1 + 253 | 0] ? Math_fround($7_1 * Math_fround(10.0)) : $7_1;
    break label$3;
   }
   if (HEAP32[$10_1 + 7188 >> 2] != 4) {
    break label$3
   }
   $15_1 = $16_1 + 8 | 0;
   $154($15_1, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
   $7_1 = HEAPF32[($6_1 << 2) + $15_1 >> 2];
   $11_1 = HEAPF32[12108];
   $1_1 = $1_1 >= $11_1 ? $1_1 : $11_1;
  }
  $1_1 = Math_fround($7_1 * $1_1);
  $1_1 = $14 ? Math_fround(-$1_1) : $1_1;
  $14 = ($2_1 | 0) == ($3 | 0);
  $15_1 = $5_1 & 32;
  $1_1 = $14 | !$15_1 ? $1_1 : Math_fround($1_1 / Math_fround($3 - $2_1 >>> 0));
  $18_1 = $2_1 >>> 0 >= $3 >>> 0;
  $13 = 0;
  label$13 : {
   if ($18_1) {
    break label$13
   }
   $6_1 = HEAP32[$0_1 >> 2];
   if ($3 >>> 0 <= $6_1 >>> 0) {
    $13 = 1;
    if ($1_1 > Math_fround(0.0)) {
     break label$13
    }
   }
   $13 = $2_1 >>> 0 >= $6_1 >>> 0 & $1_1 < Math_fround(0.0);
  }
  label$15 : {
   label$16 : {
    if ($13 | HEAPU8[$10_1 + 7148 | 0]) {
     HEAP32[$10_1 + 12060 >> 2] = 0;
     $6_1 = 0;
     break label$16;
    }
    if ($1_1 == Math_fround(0.0)) {
     break label$15
    }
    HEAPF32[$10_1 + 12060 >> 2] = $1_1 + HEAPF32[$10_1 + 12060 >> 2];
    $6_1 = 1;
   }
   HEAP8[$10_1 + 12057 | 0] = $6_1;
  }
  $6_1 = 0;
  label$19 : {
   if (!HEAPU8[$10_1 + 12057 | 0]) {
    break label$19
   }
   $6_1 = HEAP32[$0_1 >> 2];
   label$21 : {
    label$22 : {
     if ($15_1) {
      $7_1 = $1669(Math_fround(.10000000149011612), Math_fround(1.0));
      $11_1 = Math_fround(0.0);
      if (!$14) {
       $19 = $2_1 >>> 0 > $3 >>> 0;
       $13 = $19 ? $3 : $2_1;
       $11_1 = Math_fround($13 >>> 0);
       $11_1 = $7_1 > $11_1 ? $7_1 : $11_1;
       $17_1 = $2_1 >>> 0 < $3 >>> 0 ? $3 : $2_1;
       $8 = Math_fround(($6_1 >>> 0 < $13 >>> 0 ? $13 : $6_1 >>> 0 < $17_1 >>> 0 ? $6_1 : $17_1) >>> 0);
       $9 = Math_fround(0.0);
       label$26 : {
        if ($11_1 >= $8) {
         break label$26
        }
        $12_1 = Math_fround($17_1 >>> 0);
        $12_1 = $7_1 > $12_1 ? $7_1 : $12_1;
        $9 = Math_fround(1.0);
        if ($12_1 <= $8) {
         break label$26
        }
        $9 = Math_fround($1642(Math_fround($8 / $11_1)) / $1642(Math_fround($12_1 / $11_1)));
       }
       $11_1 = $9;
       $11_1 = $19 ? Math_fround(Math_fround(1.0) - $11_1) : $11_1;
      }
      if ($14) {
       break label$22
      }
      $8 = Math_fround($11_1 + HEAPF32[$10_1 + 12060 >> 2]);
      if ($8 <= Math_fround(0.0)) {
       break label$22
      }
      $6_1 = $3;
      if ($8 >= Math_fround(1.0)) {
       break label$21
      }
      $12_1 = Math_fround($3 >>> 0);
      $12_1 = $7_1 > $12_1 ? $7_1 : $12_1;
      $9 = Math_fround($2_1 >>> 0);
      $9 = $7_1 > $9 ? $7_1 : $9;
      $6_1 = $2_1 >>> 0 > $3 >>> 0;
      $20_1 = $6_1 ? $12_1 : $9;
      $8 = Math_fround($20_1 * $1669(Math_fround(($6_1 ? $9 : $12_1) / $20_1), $6_1 ? Math_fround(Math_fround(1.0) - $8) : $8));
      if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
       $6_1 = ~~$8 >>> 0;
       break label$21;
      }
      $6_1 = 0;
      break label$21;
     }
     $11_1 = Math_fround(0.0);
     $7_1 = Math_fround(0.0);
     $8 = HEAPF32[$10_1 + 12060 >> 2];
     label$29 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $13 = ~~$8;
       break label$29;
      }
      $13 = -2147483648;
     }
     $6_1 = $13 + $6_1 | 0;
     break label$21;
    }
    $6_1 = $2_1;
   }
   if ($5_1 & 64) {
    $5_1 = $6_1
   } else {
    $5_1 = $618($4_1, $6_1)
   }
   HEAP8[$10_1 + 12057 | 0] = 0;
   label$33 : {
    if ($15_1) {
     if ($14) {
      $7_1 = Math_fround(0.0)
     } else {
      $14 = $2_1 >>> 0 > $3 >>> 0;
      $4_1 = $14 ? $3 : $2_1;
      $8 = Math_fround($4_1 >>> 0);
      $8 = $7_1 > $8 ? $7_1 : $8;
      $6_1 = $2_1 >>> 0 < $3 >>> 0 ? $3 : $2_1;
      $12_1 = Math_fround(($4_1 >>> 0 > $5_1 >>> 0 ? $4_1 : $5_1 >>> 0 < $6_1 >>> 0 ? $5_1 : $6_1) >>> 0);
      $9 = Math_fround(0.0);
      label$36 : {
       if ($8 >= $12_1) {
        break label$36
       }
       $9 = Math_fround($6_1 >>> 0);
       $7_1 = $7_1 > $9 ? $7_1 : $9;
       $9 = Math_fround(1.0);
       if ($7_1 <= $12_1) {
        break label$36
       }
       $9 = Math_fround($1642(Math_fround($12_1 / $8)) / $1642(Math_fround($7_1 / $8)));
      }
      $7_1 = $9;
      $7_1 = $14 ? Math_fround(Math_fround(1.0) - $7_1) : $7_1;
     }
     $7_1 = Math_fround($7_1 - $11_1);
     break label$33;
    }
    $7_1 = Math_fround($5_1 - HEAP32[$0_1 >> 2] | 0);
   }
   HEAPF32[$10_1 + 12060 >> 2] = HEAPF32[$10_1 + 12060 >> 2] - $7_1;
   $4_1 = HEAP32[$0_1 >> 2];
   label$37 : {
    if ($18_1) {
     $2_1 = $5_1;
     break label$37;
    }
    if (($4_1 | 0) == ($5_1 | 0)) {
     $2_1 = $5_1;
     break label$37;
    }
    $2_1 = (!($1_1 < Math_fround(0.0)) | $4_1 >>> 0 >= $5_1 >>> 0) & $2_1 >>> 0 <= $5_1 >>> 0 ? $5_1 : $2_1;
    if ($2_1 >>> 0 <= $3 >>> 0 & (!($1_1 > Math_fround(0.0)) | $2_1 >>> 0 >= $4_1 >>> 0)) {
     break label$37
    }
    $2_1 = $3;
   }
   $6_1 = ($2_1 | 0) != ($4_1 | 0);
   if (($2_1 | 0) == ($4_1 | 0)) {
    break label$19
   }
   HEAP32[$0_1 >> 2] = $2_1;
   $6_1 = 1;
  }
  $0_1 = $6_1;
  global$0 = $16_1 + 16 | 0;
  return $0_1;
 }
 
 function $615($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  while (1) {
   $2_1 = $1_1;
   $1_1 = HEAPU8[$0_1 | 0];
   label$2 : {
    if (!$1_1) {
     $3 = 3;
     break label$2;
    }
    if (!(HEAPU8[$0_1 + 1 | 0] == 37 | ($1_1 | 0) != 37)) {
     $2_1 = $0_1;
     $3 = 1;
     break label$2;
    }
    $3 = 0;
    $0_1 = ((($1_1 | 0) == 37) + $0_1 | 0) + 1 | 0;
   }
   $4_1 = $0_1;
   $1_1 = $2_1;
   if (!$3) {
    continue
   }
   break;
  };
  $0_1 = $2_1;
  label$5 : {
   switch ($3 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0_1 = $4_1;
    break;
   default:
    break label$5;
   };
  }
  if (HEAPU8[$0_1 | 0] != 37) {
   return 3
  }
  while (1) {
   $1_1 = $0_1;
   $2_1 = $0_1 + 1 | 0;
   $0_1 = $2_1;
   $4_1 = HEAPU8[$1_1 + 1 | 0];
   if (($4_1 - 48 & 255) >>> 0 < 10) {
    continue
   }
   break;
  };
  $0_1 = 2147483647;
  if (($4_1 | 0) == 46) {
   $5_1 = HEAPU8[$1_1 + 2 | 0] == 45;
   $0_1 = $5_1 + ($1_1 + 2 | 0) | 0;
   $2_1 = (HEAPU8[$0_1 | 0] == 43) + $0_1 | 0;
   $0_1 = HEAPU8[$2_1 | 0];
   label$11 : {
    if (($0_1 - 48 & 255) >>> 0 > 9) {
     $3 = 0;
     break label$11;
    }
    $1_1 = 0;
    while (1) {
     $4_1 = $0_1;
     $0_1 = HEAPU8[$2_1 + 1 | 0];
     $2_1 = $2_1 + 1 | 0;
     $1_1 = (($4_1 << 24 >> 24) + Math_imul($1_1, 10) | 0) - 48 | 0;
     $3 = $1_1;
     if (($0_1 - 48 & 255) >>> 0 < 10) {
      continue
     }
     break;
    };
   }
   $0_1 = $5_1 ? 0 - $3 | 0 : $3;
   $1_1 = $0_1 >>> 0 > 99 ? 3 : $0_1;
  } else {
   $1_1 = $0_1
  }
  $0_1 = HEAPU8[$2_1 | 0];
  $1_1 = ($0_1 | 32) == 101 ? -1 : $1_1;
  label$15 : {
   label$16 : {
    if (($0_1 | 0) != 103) {
     if (($0_1 | 0) != 71) {
      break label$15
     }
     if (($1_1 | 0) == 2147483647) {
      break label$16
     }
     break label$15;
    }
    if (($1_1 | 0) != 2147483647) {
     break label$15
    }
   }
   $1_1 = -1;
  }
  return ($1_1 | 0) == 2147483647 ? 3 : $1_1;
 }
 
 function $616($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = 0;
  if (($1_1 | 0) != ($2_1 | 0)) {
   $14 = ($1_1 | 0) > ($2_1 | 0);
   $10_1 = $14 ? $2_1 : $1_1;
   $8 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
   $15_1 = ($0_1 | 0) < ($10_1 | 0) ? $10_1 : ($0_1 | 0) < ($8 | 0) ? $0_1 : $8;
   if ($3) {
    $6_1 = Math_fround(-$4_1);
    $13 = Math_fround($8 | 0);
    $9 = Math_fround(Math_abs($13)) < $4_1 ? (($8 | 0) < 0 ? $6_1 : $4_1) : $13;
    $12_1 = Math_fround($10_1 | 0);
    if (($8 | 0) >= 0 | $10_1) {
     $1_1 = ($10_1 | 0) < 0;
     $9 = $8 ? $9 : $1_1 ? $6_1 : $9;
     $6_1 = Math_fround(Math_abs($12_1)) < $4_1 ? ($1_1 ? $6_1 : $4_1) : $12_1;
    }
    $11_1 = Math_fround($15_1 | 0);
    label$5 : {
     if ($11_1 <= $6_1) {
      break label$5
     }
     $7_1 = Math_fround(1.0);
     if ($9 <= $11_1) {
      break label$5
     }
     if ((Math_imul($8, $10_1) | 0) < 0) {
      $7_1 = Math_fround(Math_fround(-$12_1) / Math_fround($13 - $12_1));
      if (!$0_1) {
       break label$5
      }
      if (($0_1 | 0) < 0) {
       $7_1 = Math_fround(Math_fround($7_1 - $5_1) * Math_fround(Math_fround(1.0) - Math_fround($1642(Math_fround(Math_fround(-$11_1) / $4_1)) / $1642(Math_fround(Math_fround(-$6_1) / $4_1)))));
       break label$5;
      }
      $6_1 = Math_fround($1642(Math_fround($11_1 / $4_1)) / $1642(Math_fround($9 / $4_1)));
      $4_1 = Math_fround($7_1 + $5_1);
      $7_1 = Math_fround(Math_fround($6_1 * Math_fround(Math_fround(1.0) - $4_1)) + $4_1);
      break label$5;
     }
     if (($8 | $10_1) < 0) {
      $7_1 = Math_fround(Math_fround(1.0) - Math_fround($1642(Math_fround($11_1 / $9)) / $1642(Math_fround($6_1 / $9))));
      break label$5;
     }
     $7_1 = Math_fround($1642(Math_fround($11_1 / $6_1)) / $1642(Math_fround($9 / $6_1)));
    }
    return $14 ? Math_fround(Math_fround(1.0) - $7_1) : $7_1;
   }
   $4_1 = Math_fround(Math_fround($15_1 - $1_1 | 0) / Math_fround($2_1 - $1_1 | 0));
  } else {
   $4_1 = Math_fround(0.0)
  }
  return $4_1;
 }
 
 function $617($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0);
  if (($1_1 | 0) == ($2_1 | 0)) {
   return $1_1
  }
  folding_inner0 : {
   label$2 : {
    if ($3) {
     if ($0_1 <= Math_fround(0.0)) {
      return $1_1
     }
     if ($0_1 >= Math_fround(1.0)) {
      return $2_1
     }
     $6_1 = Math_fround(-$4_1);
     $10_1 = ($1_1 | 0) < 0;
     $7_1 = Math_fround($1_1 | 0);
     $8 = Math_fround(Math_abs($7_1)) < $4_1 ? ($10_1 ? $6_1 : $4_1) : $7_1;
     $9 = Math_fround($2_1 | 0);
     $11_1 = Math_fround(Math_abs($9)) < $4_1 ? (($2_1 | 0) < 0 ? $6_1 : $4_1) : $9;
     $3 = ($1_1 | 0) > ($2_1 | 0);
     $12_1 = $3 ? $8 : $11_1;
     $6_1 = $10_1 ? ($2_1 ? $12_1 : $6_1) : $12_1;
     $8 = $3 ? $11_1 : $8;
     $0_1 = $3 ? Math_fround(Math_fround(1.0) - $0_1) : $0_1;
     if ((Math_imul($1_1, $2_1) | 0) < 0) {
      $9 = Math_fround(Math_fround(-Math_fround((($1_1 | 0) < ($2_1 | 0) ? $1_1 : $2_1) | 0)) / Math_fround(Math_abs(Math_fround($9 - $7_1))));
      $7_1 = Math_fround($9 + $5_1);
      $5_1 = Math_fround($9 - $5_1);
      if ($0_1 >= $5_1) {
       $1_1 = 0;
       if ($0_1 <= $7_1) {
        break label$2
       }
      }
      if ($0_1 < $9) {
       $0_1 = Math_fround(Math_fround(-$1669(Math_fround(Math_fround(-$8) / $4_1), Math_fround(Math_fround(1.0) - Math_fround($0_1 / $5_1)))) * $4_1);
       if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
        break folding_inner0
       }
       return -2147483648;
      }
      $0_1 = Math_fround($1669(Math_fround($6_1 / $4_1), Math_fround(Math_fround($0_1 - $7_1) / Math_fround(Math_fround(1.0) - $7_1))) * $4_1);
      if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
       break folding_inner0
      }
      return -2147483648;
     }
     if (($1_1 | $2_1) < 0) {
      $0_1 = Math_fround($6_1 * $1669(Math_fround($8 / $6_1), Math_fround(Math_fround(1.0) - $0_1)));
      if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
       break folding_inner0
      }
      return -2147483648;
     }
     $0_1 = Math_fround($8 * $1669(Math_fround($6_1 / $8), $0_1));
     if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
      break folding_inner0
     }
     return -2147483648;
    }
    if (!($0_1 < Math_fround(1.0))) {
     return $2_1
    }
    $0_1 = Math_fround((($1_1 | 0) > ($2_1 | 0) ? Math_fround(-.5) : Math_fround(.5)) + Math_fround(Math_fround($2_1 - $1_1 | 0) * $0_1));
    label$17 : {
     if (Math_fround(Math_abs($0_1)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$0_1;
      break label$17;
     }
     $2_1 = -2147483648;
    }
    $1_1 = $2_1 + $1_1 | 0;
   }
   return $1_1;
  }
  return ~~$0_1;
 }
 
 function $618($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  while (1) {
   $2_1 = $3;
   $3 = HEAPU8[$0_1 | 0];
   label$2 : {
    if (!$3) {
     $4_1 = 3;
     break label$2;
    }
    if (!(HEAPU8[$0_1 + 1 | 0] == 37 | ($3 | 0) != 37)) {
     $2_1 = $0_1;
     $4_1 = 1;
     break label$2;
    }
    $4_1 = 0;
    $0_1 = ((($3 | 0) == 37) + $0_1 | 0) + 1 | 0;
   }
   $5_1 = $0_1;
   $3 = $2_1;
   if (!$4_1) {
    continue
   }
   break;
  };
  $0_1 = $2_1;
  label$5 : {
   switch ($4_1 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0_1 = $5_1;
    break;
   default:
    break label$5;
   };
  }
  $2_1 = $0_1;
  label$8 : {
   if (HEAPU8[$0_1 | 0] != 37) {
    break label$8
   }
   if (HEAPU8[$2_1 + 1 | 0] == 37) {
    break label$8
   }
   $5_1 = $2_1;
   $0_1 = HEAPU8[$2_1 | 0];
   label$11 : {
    if (($0_1 | 0) != 37) {
     break label$11
    }
    $3 = $2_1;
    while (1) {
     $4_1 = $0_1 << 24 >> 24;
     if (!(1 << $4_1 - 65 & 2304 | ($0_1 - 65 & 255) >>> 0 > 25)) {
      $5_1 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $4_1 - 97 & 38275712 | ($0_1 - 97 & 255) >>> 0 > 25)) {
      $5_1 = $3 + 1 | 0;
      break label$11;
     }
     $0_1 = HEAPU8[$3 + 1 | 0];
     $3 = $3 + 1 | 0;
     $5_1 = $3;
     if ($0_1) {
      continue
     }
     break;
    };
   }
   $4_1 = $6_1 + 80 | 0;
   if ($2_1 >>> 0 < $5_1 >>> 0) {
    $3 = $6_1 + 80 | 0;
    while (1) {
     $0_1 = $2_1 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $2_1 = HEAPU8[$2_1 | 0];
        switch ($2_1 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($2_1 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      HEAP8[$3 | 0] = $2_1;
      $3 = $3 + 1 | 0;
     }
     $4_1 = $3;
     $2_1 = $0_1;
     if (($0_1 | 0) != ($5_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP8[$4_1 | 0] = 0;
   HEAP32[$6_1 >> 2] = $1_1;
   $0_1 = $6_1 + 16 | 0;
   $21($0_1, 64, $6_1 + 80 | 0, $6_1);
   while (1) {
    $1_1 = $0_1;
    $0_1 = $0_1 + 1 | 0;
    $2_1 = HEAPU8[$1_1 | 0];
    if (($2_1 | 0) == 32) {
     continue
    }
    break;
   };
   $4_1 = 0;
   $5_1 = ($2_1 | 0) == 45;
   $0_1 = $1_1 + $5_1 | 0;
   $2_1 = (HEAPU8[$0_1 | 0] == 43) + $0_1 | 0;
   $0_1 = HEAPU8[$2_1 | 0];
   if (($0_1 - 48 & 255) >>> 0 <= 9) {
    $3 = 0;
    while (1) {
     $1_1 = $0_1;
     $0_1 = HEAPU8[$2_1 + 1 | 0];
     $2_1 = $2_1 + 1 | 0;
     $3 = (($1_1 << 24 >> 24) + Math_imul($3, 10) | 0) - 48 | 0;
     $4_1 = $3;
     if (($0_1 - 48 & 255) >>> 0 < 10) {
      continue
     }
     break;
    };
   }
   $1_1 = $5_1 ? 0 - $4_1 | 0 : $4_1;
  }
  $0_1 = $1_1;
  global$0 = $6_1 + 112 | 0;
  return $0_1;
 }
 
 function $620($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = 0.0, $12_1 = 0.0, $13 = 0, $14 = 0, $15_1 = 0.0, $16_1 = 0.0, $17_1 = 0, $18_1 = Math_fround(0), $19 = 0, $20_1 = 0, $21_1 = 0;
  label$1 : {
   if (($2_1 | 0) == ($4_1 | 0) & ($3 | 0) == ($5_1 | 0)) {
    $7_1 = Math_fround(0.0)
   } else {
    $20_1 = $2_1 >>> 0 > $4_1 >>> 0 & ($3 | 0) >= ($5_1 | 0) | ($3 | 0) > ($5_1 | 0);
    $9 = $20_1;
    $13 = $9 ? $4_1 : $2_1;
    $10_1 = $2_1 >>> 0 < $4_1 >>> 0 & ($3 | 0) <= ($5_1 | 0) | ($3 | 0) < ($5_1 | 0);
    $14 = $10_1 ? $4_1 : $2_1;
    $10_1 = $10_1 ? $5_1 : $3;
    $17_1 = $0_1 >>> 0 < $14 >>> 0 & ($10_1 | 0) >= ($1_1 | 0) | ($1_1 | 0) < ($10_1 | 0);
    $9 = $9 ? $5_1 : $3;
    $21_1 = $0_1 >>> 0 < $13 >>> 0 & ($1_1 | 0) <= ($9 | 0) | ($1_1 | 0) < ($9 | 0);
    $19 = $21_1 ? $13 : $17_1 ? $0_1 : $14;
    $17_1 = $21_1 ? $9 : $17_1 ? $1_1 : $10_1;
    if ($6_1) {
     $18_1 = Math_fround(-$7_1);
     $11_1 = +($14 >>> 0) + +($10_1 | 0) * 4294967296.0;
     $15_1 = +$7_1;
     $11_1 = $15_1 > Math_abs($11_1) ? +(($10_1 | 0) < 0 ? $18_1 : $7_1) : $11_1;
     if (!(($9 | $13) != 0 | ($10_1 | 0) >= 0)) {
      $12_1 = +$18_1;
      break label$1;
     }
     $12_1 = +($13 >>> 0) + +($9 | 0) * 4294967296.0;
     $12_1 = Math_abs($12_1) < $15_1 ? +(($9 | 0) < 0 ? $18_1 : $7_1) : $12_1;
     if ($10_1 | $14 | ($9 | 0) >= 0) {
      break label$1
     }
     $11_1 = +$18_1;
     break label$1;
    }
    $7_1 = Math_fround((+($19 - $2_1 >>> 0) + +($17_1 - (($2_1 >>> 0 > $19 >>> 0) + $3 | 0) | 0) * 4294967296.0) / (+($4_1 - $2_1 >>> 0) + +($5_1 - (($2_1 >>> 0 > $4_1 >>> 0) + $3 | 0) | 0) * 4294967296.0));
   }
   return $7_1;
  }
  $16_1 = +($19 >>> 0) + +($17_1 | 0) * 4294967296.0;
  $7_1 = Math_fround(0.0);
  label$7 : {
   if ($16_1 <= $12_1) {
    break label$7
   }
   $7_1 = Math_fround(1.0);
   if ($11_1 <= $16_1) {
    break label$7
   }
   __wasm_i64_mul($13, $9, $14, $10_1);
   if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
    $7_1 = Math_fround(+($13 >>> 0) + +($9 | 0) * 4294967296.0);
    $7_1 = Math_fround(Math_fround(-$7_1) / Math_fround(Math_fround(+($14 >>> 0) + +($10_1 | 0) * 4294967296.0) - $7_1));
    if (!($0_1 | $1_1)) {
     break label$7
    }
    if (($1_1 | 0) < 0) {
     $7_1 = Math_fround(Math_fround($7_1 - $8) * Math_fround(Math_fround(1.0) - Math_fround($1637(-$16_1 / $15_1) / $1637(-$12_1 / $15_1))));
     break label$7;
    }
    $7_1 = Math_fround($7_1 + $8);
    $7_1 = Math_fround(Math_fround(Math_fround($1637($16_1 / $15_1) / $1637($11_1 / $15_1)) * Math_fround(Math_fround(1.0) - $7_1)) + $7_1);
    break label$7;
   }
   if (($9 | $10_1) < 0) {
    $7_1 = Math_fround(Math_fround(1.0) - Math_fround($1637($16_1 / $11_1) / $1637($12_1 / $11_1)));
    break label$7;
   }
   $7_1 = Math_fround($1637($16_1 / $12_1) / $1637($11_1 / $12_1));
  }
  return $20_1 ? Math_fround(Math_fround(1.0) - $7_1) : $7_1;
 }
 
 function $621($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0.0, $9 = 0.0, $10_1 = Math_fround(0), $11_1 = 0.0, $12_1 = 0, $13 = 0.0;
  if (!(($1_1 | 0) != ($3 | 0) | ($2_1 | 0) != ($4_1 | 0))) {
   i64toi32_i32$HIGH_BITS = $2_1;
   return $1_1;
  }
  folding_inner1 : {
   folding_inner0 : {
    label$2 : {
     if ($5_1) {
      if ($0_1 <= Math_fround(0.0)) {
       i64toi32_i32$HIGH_BITS = $2_1;
       return $1_1;
      }
      if ($0_1 >= Math_fround(1.0)) {
       i64toi32_i32$HIGH_BITS = $4_1;
       return $3;
      }
      $10_1 = Math_fround(-$6_1);
      $12_1 = ($2_1 | 0) < 0;
      $9 = +($1_1 >>> 0) + +($2_1 | 0) * 4294967296.0;
      $8 = +$6_1;
      $11_1 = $8 > Math_abs($9) ? +($12_1 ? $10_1 : $6_1) : $9;
      $9 = +($3 >>> 0) + +($4_1 | 0) * 4294967296.0;
      $13 = $8 > Math_abs($9) ? +(($4_1 | 0) < 0 ? $10_1 : $6_1) : $9;
      $5_1 = $1_1 >>> 0 > $3 >>> 0 & ($2_1 | 0) >= ($4_1 | 0) | ($2_1 | 0) > ($4_1 | 0);
      $9 = $5_1 ? $11_1 : $13;
      $9 = $12_1 ? ($3 | $4_1 ? $9 : +$10_1) : $9;
      $11_1 = $5_1 ? $13 : $11_1;
      $0_1 = $5_1 ? Math_fround(Math_fround(1.0) - $0_1) : $0_1;
      __wasm_i64_mul($3, $4_1, $1_1, $2_1);
      if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
       $5_1 = $1_1 >>> 0 < $3 >>> 0 & ($2_1 | 0) <= ($4_1 | 0) | ($2_1 | 0) < ($4_1 | 0);
       $10_1 = Math_fround(Math_fround(-Math_fround(+(($5_1 ? $1_1 : $3) >>> 0) + +(($5_1 ? $2_1 : $4_1) | 0) * 4294967296.0)) / Math_fround(Math_abs(Math_fround(Math_fround(+($3 >>> 0) + +($4_1 | 0) * 4294967296.0) - Math_fround(+($1_1 >>> 0) + +($2_1 | 0) * 4294967296.0)))));
       $6_1 = Math_fround($10_1 + $7_1);
       $7_1 = Math_fround($10_1 - $7_1);
       if ($0_1 >= $7_1) {
        $1_1 = 0;
        $2_1 = 0;
        if ($0_1 <= $6_1) {
         break label$2
        }
       }
       if ($0_1 < $10_1) {
        $8 = $8 * -$1656(-$11_1 / $8, +Math_fround(Math_fround(1.0) - Math_fround($0_1 / $7_1)));
        if (Math_abs($8) < 9223372036854775808.0) {
         break folding_inner0
        }
        break folding_inner1;
       }
       $8 = $1656($9 / $8, +Math_fround(Math_fround($0_1 - $6_1) / Math_fround(Math_fround(1.0) - $6_1))) * $8;
       if (Math_abs($8) < 9223372036854775808.0) {
        break folding_inner0
       }
       break folding_inner1;
      }
      if (($2_1 | $4_1) < 0) {
       $8 = $9 * $1656($11_1 / $9, +Math_fround(Math_fround(1.0) - $0_1));
       if (Math_abs($8) < 9223372036854775808.0) {
        break folding_inner0
       }
       break folding_inner1;
      }
      $8 = $11_1 * $1656($9 / $11_1, +$0_1);
      if (Math_abs($8) < 9223372036854775808.0) {
       break folding_inner0
      }
      break folding_inner1;
     }
     if (!($0_1 < Math_fround(1.0))) {
      i64toi32_i32$HIGH_BITS = $4_1;
      return $3;
     }
     $5_1 = $1_1 >>> 0 > $3 >>> 0;
     $8 = ($5_1 & ($2_1 | 0) >= ($4_1 | 0) | ($2_1 | 0) > ($4_1 | 0) ? -.5 : .5) + +Math_fround(Math_fround(+($3 - $1_1 >>> 0) + +($4_1 - ($2_1 + $5_1 | 0) | 0) * 4294967296.0) * $0_1);
     label$17 : {
      if (Math_abs($8) < 9223372036854775808.0) {
       $4_1 = Math_abs($8) >= 1.0 ? ~~($8 > 0.0 ? Math_min(Math_floor($8 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($8 - +(~~$8 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
       $3 = ~~$8 >>> 0;
       break label$17;
      }
      $4_1 = -2147483648;
      $3 = 0;
     }
     $2_1 = $2_1 + $4_1 | 0;
     $4_1 = $1_1;
     $1_1 = $1_1 + $3 | 0;
     $2_1 = $4_1 >>> 0 > $1_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    }
    i64toi32_i32$HIGH_BITS = $2_1;
    return $1_1;
   }
   i64toi32_i32$HIGH_BITS = Math_abs($8) >= 1.0 ? ~~($8 > 0.0 ? Math_min(Math_floor($8 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($8 - +(~~$8 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
   return ~~$8 >>> 0;
  }
  i64toi32_i32$HIGH_BITS = -2147483648;
  return 0;
 }
 
 function $622($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 112 | 0;
  global$0 = $6_1;
  while (1) {
   $4_1 = $3;
   $3 = HEAPU8[$0_1 | 0];
   label$2 : {
    if (!$3) {
     $3 = $0_1;
     $7_1 = 3;
     break label$2;
    }
    if (!(HEAPU8[$0_1 + 1 | 0] == 37 | ($3 | 0) != 37)) {
     $3 = $0_1;
     $4_1 = $0_1;
     $7_1 = 1;
     break label$2;
    }
    $3 = ((($3 | 0) == 37) + $0_1 | 0) + 1 | 0;
    $7_1 = 0;
   }
   $5_1 = $3;
   $0_1 = $3;
   $3 = $4_1;
   if (!$7_1) {
    continue
   }
   break;
  };
  $0_1 = $4_1;
  label$5 : {
   switch ($7_1 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0_1 = $5_1;
    break;
   default:
    break label$5;
   };
  }
  $4_1 = $0_1;
  if (!(HEAPU8[$0_1 + 1 | 0] == 37 | HEAPU8[$0_1 | 0] != 37)) {
   $5_1 = $4_1;
   $0_1 = HEAPU8[$4_1 | 0];
   label$11 : {
    if (($0_1 | 0) != 37) {
     break label$11
    }
    $3 = $4_1;
    while (1) {
     $5_1 = $0_1 << 24 >> 24;
     if (!(1 << $5_1 - 65 & 2304 | ($0_1 - 65 & 255) >>> 0 > 25)) {
      $5_1 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $5_1 - 97 & 38275712 | ($0_1 - 97 & 255) >>> 0 > 25)) {
      $5_1 = $3 + 1 | 0;
      break label$11;
     }
     $0_1 = HEAPU8[$3 + 1 | 0];
     $3 = $3 + 1 | 0;
     $5_1 = $3;
     if ($0_1) {
      continue
     }
     break;
    };
   }
   $3 = $6_1 + 80 | 0;
   if ($4_1 >>> 0 < $5_1 >>> 0) {
    $3 = $6_1 + 80 | 0;
    while (1) {
     $0_1 = $4_1 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $4_1 = HEAPU8[$4_1 | 0];
        switch ($4_1 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($4_1 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      HEAP8[$3 | 0] = $4_1;
      $3 = $3 + 1 | 0;
     }
     $4_1 = $0_1;
     if (($0_1 | 0) != ($5_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP8[$3 | 0] = 0;
   HEAP32[$6_1 >> 2] = $1_1;
   HEAP32[$6_1 + 4 >> 2] = $2_1;
   $0_1 = $6_1 + 16 | 0;
   $21($0_1, 64, $6_1 + 80 | 0, $6_1);
   while (1) {
    $1_1 = $0_1;
    $0_1 = $0_1 + 1 | 0;
    $2_1 = HEAPU8[$1_1 | 0];
    if (($2_1 | 0) == 32) {
     continue
    }
    break;
   };
   $5_1 = 0;
   $4_1 = 0;
   $7_1 = ($2_1 | 0) == 45;
   $0_1 = $7_1 + $1_1 | 0;
   $3 = (HEAPU8[$0_1 | 0] == 43) + $0_1 | 0;
   $0_1 = HEAPU8[$3 | 0];
   if (($0_1 - 48 & 255) >>> 0 <= 9) {
    $1_1 = 0;
    $2_1 = 0;
    while (1) {
     $4_1 = $0_1;
     $0_1 = HEAPU8[$3 + 1 | 0];
     $3 = $3 + 1 | 0;
     $2_1 = __wasm_i64_mul($1_1, $2_1, 10, 0);
     $1_1 = $2_1 + (($4_1 << 24 >> 24) - 48 | 0) | 0;
     $5_1 = $1_1;
     $4_1 = i64toi32_i32$HIGH_BITS;
     $2_1 = $5_1 >>> 0 < $2_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
     $4_1 = $2_1;
     if (($0_1 - 48 & 255) >>> 0 < 10) {
      continue
     }
     break;
    };
   }
   $2_1 = $7_1 ? 0 - ($4_1 + (($5_1 | 0) != 0) | 0) | 0 : $4_1;
   $1_1 = $7_1 ? 0 - $5_1 | 0 : $5_1;
  }
  global$0 = $6_1 + 112 | 0;
  i64toi32_i32$HIGH_BITS = $2_1;
  return $1_1;
 }
 
 function $624($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0);
  if ($1_1 != $2_1) {
   $7_1 = $1_1 < $2_1;
   $11_1 = $7_1 ? $1_1 : $2_1;
   $6_1 = $7_1 ? $2_1 : $1_1;
   $9 = $0_1 < $11_1 ? $11_1 : $0_1 > $6_1 ? $6_1 : $0_1;
   if ($3) {
    $6_1 = Math_fround(-$4_1);
    $3 = $1_1 > $2_1;
    $10_1 = $3 ? $1_1 : $2_1;
    $7_1 = $10_1 < Math_fround(0.0);
    $11_1 = Math_fround(Math_abs($10_1)) < $4_1 ? ($7_1 ? $6_1 : $4_1) : $10_1;
    $8 = $3 ? $2_1 : $1_1;
    label$3 : {
     if (!(!$7_1 | $8 != Math_fround(0.0))) {
      $2_1 = $11_1;
      break label$3;
     }
     $7_1 = $8 < Math_fround(0.0);
     $2_1 = $10_1 == Math_fround(0.0) ? ($7_1 ? $6_1 : $11_1) : $11_1;
     $6_1 = Math_fround(Math_abs($8)) < $4_1 ? ($7_1 ? $6_1 : $4_1) : $8;
    }
    $1_1 = $2_1;
    $2_1 = Math_fround(0.0);
    label$5 : {
     if ($6_1 >= $9) {
      break label$5
     }
     $2_1 = Math_fround(1.0);
     if ($1_1 <= $9) {
      break label$5
     }
     if (Math_fround($8 * $10_1) < Math_fround(0.0)) {
      $2_1 = Math_fround(Math_fround(-$8) / Math_fround($10_1 - $8));
      if ($0_1 == Math_fround(0.0)) {
       break label$5
      }
      if ($0_1 < Math_fround(0.0)) {
       $2_1 = Math_fround(Math_fround($2_1 - $5_1) * Math_fround(Math_fround(1.0) - Math_fround($1642(Math_fround(Math_fround(-$9) / $4_1)) / $1642(Math_fround(Math_fround(-$6_1) / $4_1)))));
       break label$5;
      }
      $0_1 = Math_fround($2_1 + $5_1);
      $2_1 = Math_fround(Math_fround(Math_fround($1642(Math_fround($9 / $4_1)) / $1642(Math_fround($1_1 / $4_1))) * Math_fround(Math_fround(1.0) - $0_1)) + $0_1);
      break label$5;
     }
     if ($8 < Math_fround(0.0) | $10_1 < Math_fround(0.0)) {
      $2_1 = Math_fround(Math_fround(1.0) - Math_fround($1642(Math_fround($9 / $1_1)) / $1642(Math_fround($6_1 / $1_1))));
      break label$5;
     }
     $2_1 = Math_fround($1642(Math_fround($9 / $6_1)) / $1642(Math_fround($1_1 / $6_1)));
    }
    return $3 ? Math_fround(Math_fround(1.0) - $2_1) : $2_1;
   }
   $0_1 = Math_fround(Math_fround($9 - $1_1) / Math_fround($2_1 - $1_1));
  } else {
   $0_1 = Math_fround(0.0)
  }
  return $0_1;
 }
 
 function $625($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0);
  if ($1_1 == $2_1) {
   return $1_1
  }
  label$2 : {
   if ($3) {
    if ($0_1 <= Math_fround(0.0)) {
     return $1_1
    }
    if ($0_1 >= Math_fround(1.0)) {
     return $2_1
    }
    $6_1 = Math_fround(-$4_1);
    $3 = $1_1 < Math_fround(0.0);
    $7_1 = Math_fround(Math_abs($1_1)) < $4_1 ? ($3 ? $6_1 : $4_1) : $1_1;
    $8 = $6_1;
    $10_1 = Math_fround(Math_abs($2_1)) < $4_1 ? ($2_1 < Math_fround(0.0) ? $6_1 : $4_1) : $2_1;
    $9 = $1_1 > $2_1;
    $6_1 = $9 ? $7_1 : $10_1;
    $6_1 = $3 ? ($2_1 == Math_fround(0.0) ? $8 : $6_1) : $6_1;
    $7_1 = $9 ? $10_1 : $7_1;
    $0_1 = $9 ? Math_fround(Math_fround(1.0) - $0_1) : $0_1;
    if (Math_fround($1_1 * $2_1) < Math_fround(0.0)) {
     $2_1 = Math_fround(Math_fround(-($1_1 < $2_1 ? $1_1 : $2_1)) / Math_fround(Math_abs(Math_fround($2_1 - $1_1))));
     $1_1 = Math_fround($2_1 + $5_1);
     $5_1 = Math_fround($2_1 - $5_1);
     if ($0_1 >= $5_1) {
      $8 = Math_fround(0.0);
      if ($0_1 <= $1_1) {
       break label$2
      }
     }
     if ($0_1 < $2_1) {
      return Math_fround(Math_fround(-$1669(Math_fround(Math_fround(-$7_1) / $4_1), Math_fround(Math_fround(1.0) - Math_fround($0_1 / $5_1)))) * $4_1)
     }
     return Math_fround($1669(Math_fround($6_1 / $4_1), Math_fround(Math_fround($0_1 - $1_1) / Math_fround(Math_fround(1.0) - $1_1))) * $4_1);
    }
    if ($3 | $2_1 < Math_fround(0.0)) {
     return Math_fround($6_1 * $1669(Math_fround($7_1 / $6_1), Math_fround(Math_fround(1.0) - $0_1)))
    }
    return Math_fround($7_1 * $1669(Math_fround($6_1 / $7_1), $0_1));
   }
   $8 = Math_fround(Math_fround(Math_fround($2_1 - $1_1) * $0_1) + $1_1);
  }
  return $8;
 }
 
 function $626($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  while (1) {
   $2_1 = $3;
   $3 = HEAPU8[$0_1 | 0];
   label$2 : {
    if (!$3) {
     $4_1 = 3;
     break label$2;
    }
    if (!(HEAPU8[$0_1 + 1 | 0] == 37 | ($3 | 0) != 37)) {
     $2_1 = $0_1;
     $4_1 = 1;
     break label$2;
    }
    $4_1 = 0;
    $0_1 = ((($3 | 0) == 37) + $0_1 | 0) + 1 | 0;
   }
   $6_1 = $0_1;
   $3 = $2_1;
   if (!$4_1) {
    continue
   }
   break;
  };
  $0_1 = $2_1;
  label$5 : {
   switch ($4_1 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0_1 = $6_1;
    break;
   default:
    break label$5;
   };
  }
  $2_1 = $0_1;
  if (!(HEAPU8[$0_1 + 1 | 0] == 37 | HEAPU8[$0_1 | 0] != 37)) {
   $6_1 = $2_1;
   $0_1 = HEAPU8[$2_1 | 0];
   label$11 : {
    if (($0_1 | 0) != 37) {
     break label$11
    }
    $3 = $2_1;
    while (1) {
     $4_1 = $0_1 << 24 >> 24;
     if (!(1 << $4_1 - 65 & 2304 | ($0_1 - 65 & 255) >>> 0 > 25)) {
      $6_1 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $4_1 - 97 & 38275712 | ($0_1 - 97 & 255) >>> 0 > 25)) {
      $6_1 = $3 + 1 | 0;
      break label$11;
     }
     $0_1 = HEAPU8[$3 + 1 | 0];
     $3 = $3 + 1 | 0;
     $6_1 = $3;
     if ($0_1) {
      continue
     }
     break;
    };
   }
   $4_1 = $5_1 + 80 | 0;
   if ($2_1 >>> 0 < $6_1 >>> 0) {
    $3 = $5_1 + 80 | 0;
    while (1) {
     $0_1 = $2_1 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $2_1 = HEAPU8[$2_1 | 0];
        switch ($2_1 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($2_1 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      HEAP8[$3 | 0] = $2_1;
      $3 = $3 + 1 | 0;
     }
     $4_1 = $3;
     $2_1 = $0_1;
     if (($0_1 | 0) != ($6_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP8[$4_1 | 0] = 0;
   HEAPF64[$5_1 >> 3] = $1_1;
   $0_1 = $5_1 + 16 | 0;
   $21($0_1, 64, $5_1 + 80 | 0, $5_1);
   while (1) {
    $2_1 = $0_1;
    $0_1 = $0_1 + 1 | 0;
    if (HEAPU8[$2_1 | 0] == 32) {
     continue
    }
    break;
   };
   $1_1 = Math_fround($1719($2_1));
  }
  global$0 = $5_1 + 112 | 0;
  return $1_1;
 }
 
 function $627($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0.0, $7_1 = 0.0, $8 = 0, $9 = 0.0, $10_1 = 0.0, $11_1 = Math_fround(0);
  label$2 : {
   label$3 : {
    if ($1_1 != $2_1) {
     $8 = $1_1 < $2_1;
     $6_1 = $8 ? $1_1 : $2_1;
     $7_1 = $8 ? $2_1 : $1_1;
     $6_1 = $0_1 < $6_1 ? $6_1 : $0_1 > $7_1 ? $7_1 : $0_1;
     if ($3) {
      $11_1 = Math_fround(-$4_1);
      $3 = $1_1 > $2_1;
      $7_1 = $3 ? $1_1 : $2_1;
      $8 = $7_1 < 0.0;
      $9 = +$4_1;
      $10_1 = $9 > Math_abs($7_1) ? +($8 ? $11_1 : $4_1) : $7_1;
      $2_1 = $3 ? $2_1 : $1_1;
      if (!(!$8 | $2_1 != 0.0)) {
       $1_1 = +$11_1;
       break label$2;
      }
      $8 = $2_1 < 0.0;
      $1_1 = Math_abs($2_1) < $9 ? +($8 ? $11_1 : $4_1) : $2_1;
      if (!$8 | $7_1 != 0.0) {
       break label$3
      }
      $10_1 = +$11_1;
      break label$2;
     }
     $4_1 = Math_fround(($6_1 - $1_1) / ($2_1 - $1_1));
    } else {
     $4_1 = Math_fround(0.0)
    }
    return $4_1;
   }
  }
  $4_1 = Math_fround(0.0);
  label$7 : {
   if ($1_1 >= $6_1) {
    break label$7
   }
   $4_1 = Math_fround(1.0);
   if ($6_1 >= $10_1) {
    break label$7
   }
   if ($2_1 * $7_1 < 0.0) {
    $4_1 = Math_fround($2_1);
    $4_1 = Math_fround(Math_fround(-$4_1) / Math_fround(Math_fround($7_1) - $4_1));
    if ($0_1 == 0.0) {
     break label$7
    }
    if ($0_1 < 0.0) {
     $4_1 = Math_fround(Math_fround($4_1 - $5_1) * Math_fround(Math_fround(1.0) - Math_fround($1637(-$6_1 / $9) / $1637(-$1_1 / $9))));
     break label$7;
    }
    $4_1 = Math_fround($4_1 + $5_1);
    $4_1 = Math_fround(Math_fround(Math_fround($1637($6_1 / $9) / $1637($10_1 / $9)) * Math_fround(Math_fround(1.0) - $4_1)) + $4_1);
    break label$7;
   }
   if ($2_1 < 0.0 | $7_1 < 0.0) {
    $4_1 = Math_fround(Math_fround(1.0) - Math_fround($1637($6_1 / $10_1) / $1637($1_1 / $10_1)));
    break label$7;
   }
   $4_1 = Math_fround($1637($6_1 / $1_1) / $1637($10_1 / $1_1));
  }
  return $3 ? Math_fround(Math_fround(1.0) - $4_1) : $4_1;
 }
 
 function $628($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = Math_fround(0), $7_1 = 0.0, $8 = 0.0, $9 = 0.0, $10_1 = 0, $11_1 = 0.0;
  if ($1_1 == $2_1) {
   return $1_1
  }
  label$2 : {
   if ($3) {
    if ($0_1 <= Math_fround(0.0)) {
     return $1_1
    }
    if ($0_1 >= Math_fround(1.0)) {
     return $2_1
    }
    $6_1 = Math_fround(-$4_1);
    $3 = $1_1 < 0.0;
    $9 = +$4_1;
    $7_1 = $9 > Math_abs($1_1) ? +($3 ? $6_1 : $4_1) : $1_1;
    $11_1 = Math_abs($2_1) < $9 ? +($2_1 < 0.0 ? $6_1 : $4_1) : $2_1;
    $10_1 = $1_1 > $2_1;
    $8 = $10_1 ? $7_1 : $11_1;
    $8 = $3 ? ($2_1 == 0.0 ? +$6_1 : $8) : $8;
    $7_1 = $10_1 ? $11_1 : $7_1;
    $0_1 = $10_1 ? Math_fround(Math_fround(1.0) - $0_1) : $0_1;
    if ($1_1 * $2_1 < 0.0) {
     $6_1 = Math_fround(Math_fround(-Math_fround($1_1 < $2_1 ? $1_1 : $2_1)) / Math_fround(Math_abs(Math_fround(Math_fround($2_1) - Math_fround($1_1)))));
     $4_1 = Math_fround($6_1 + $5_1);
     $5_1 = Math_fround($6_1 - $5_1);
     if ($0_1 >= $5_1) {
      $1_1 = 0.0;
      if ($0_1 <= $4_1) {
       break label$2
      }
     }
     if ($0_1 < $6_1) {
      return $9 * -$1656(-$7_1 / $9, +Math_fround(Math_fround(1.0) - Math_fround($0_1 / $5_1)))
     }
     return $1656($8 / $9, +Math_fround(Math_fround($0_1 - $4_1) / Math_fround(Math_fround(1.0) - $4_1))) * $9;
    }
    if ($3 | $2_1 < 0.0) {
     return $8 * $1656($7_1 / $8, +Math_fround(Math_fround(1.0) - $0_1))
    }
    return $7_1 * $1656($8 / $7_1, +$0_1);
   }
   $1_1 = ($2_1 - $1_1) * +$0_1 + $1_1;
  }
  return $1_1;
 }
 
 function $629($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 112 | 0;
  global$0 = $5_1;
  while (1) {
   $2_1 = $3;
   $3 = HEAPU8[$0_1 | 0];
   label$2 : {
    if (!$3) {
     $4_1 = 3;
     break label$2;
    }
    if (!(HEAPU8[$0_1 + 1 | 0] == 37 | ($3 | 0) != 37)) {
     $2_1 = $0_1;
     $4_1 = 1;
     break label$2;
    }
    $4_1 = 0;
    $0_1 = ((($3 | 0) == 37) + $0_1 | 0) + 1 | 0;
   }
   $6_1 = $0_1;
   $3 = $2_1;
   if (!$4_1) {
    continue
   }
   break;
  };
  $0_1 = $2_1;
  label$5 : {
   switch ($4_1 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $0_1 = $6_1;
    break;
   default:
    break label$5;
   };
  }
  $2_1 = $0_1;
  if (!(HEAPU8[$0_1 + 1 | 0] == 37 | HEAPU8[$0_1 | 0] != 37)) {
   $6_1 = $2_1;
   $0_1 = HEAPU8[$2_1 | 0];
   label$11 : {
    if (($0_1 | 0) != 37) {
     break label$11
    }
    $3 = $2_1;
    while (1) {
     $4_1 = $0_1 << 24 >> 24;
     if (!(1 << $4_1 - 65 & 2304 | ($0_1 - 65 & 255) >>> 0 > 25)) {
      $6_1 = $3 + 1 | 0;
      break label$11;
     }
     if (!(1 << $4_1 - 97 & 38275712 | ($0_1 - 97 & 255) >>> 0 > 25)) {
      $6_1 = $3 + 1 | 0;
      break label$11;
     }
     $0_1 = HEAPU8[$3 + 1 | 0];
     $3 = $3 + 1 | 0;
     $6_1 = $3;
     if ($0_1) {
      continue
     }
     break;
    };
   }
   $4_1 = $5_1 + 80 | 0;
   if ($2_1 >>> 0 < $6_1 >>> 0) {
    $3 = $5_1 + 80 | 0;
    while (1) {
     $0_1 = $2_1 + 1 | 0;
     label$17 : {
      label$18 : {
       label$19 : {
        $2_1 = HEAPU8[$2_1 | 0];
        switch ($2_1 - 36 | 0) {
        case 0:
        case 3:
         break label$17;
        case 1:
        case 2:
         break label$18;
        default:
         break label$19;
        };
       }
       if (($2_1 | 0) != 95) {
        break label$18
       }
       break label$17;
      }
      HEAP8[$3 | 0] = $2_1;
      $3 = $3 + 1 | 0;
     }
     $4_1 = $3;
     $2_1 = $0_1;
     if (($0_1 | 0) != ($6_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP8[$4_1 | 0] = 0;
   HEAPF64[$5_1 >> 3] = $1_1;
   $0_1 = $5_1 + 16 | 0;
   $21($0_1, 64, $5_1 + 80 | 0, $5_1);
   while (1) {
    $2_1 = $0_1;
    $0_1 = $0_1 + 1 | 0;
    if (HEAPU8[$2_1 | 0] == 32) {
     continue
    }
    break;
   };
   $1_1 = $1719($2_1);
  }
  global$0 = $5_1 + 112 | 0;
  return $1_1;
 }
 
 function $630($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0.0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0.0, $20_1 = 0.0, $21_1 = 0, $22_1 = 0, $23_1 = 0.0, $24 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = Math_fround(0), $30 = 0, $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = 0, $35_1 = 0, $36_1 = 0, $37 = 0.0, $38_1 = 0;
  $16_1 = global$0 - 176 | 0;
  global$0 = $16_1;
  $21_1 = HEAP32[18392];
  $10_1 = HEAP32[$21_1 + 7080 >> 2];
  HEAP8[$10_1 + 140 | 0] = 1;
  if (!HEAPU8[$10_1 + 143 | 0]) {
   $15_1 = $76($10_1, $0_1);
   $11_1 = $292();
   $68($16_1 + 168 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $24 = HEAPF32[$10_1 + 208 >> 2];
   $8 = HEAP32[$10_1 + 208 >> 2];
   $13 = HEAP32[$10_1 + 212 >> 2];
   $27_1 = $16_1 + 164 | 0;
   $9 = HEAPF32[$21_1 + 5480 >> 2];
   HEAPF32[$27_1 >> 2] = Math_fround(Math_fround($9 + $9) + HEAPF32[$16_1 + 172 >> 2]) + HEAPF32[$10_1 + 212 >> 2];
   HEAP32[$16_1 + 152 >> 2] = $8;
   HEAP32[$16_1 + 156 >> 2] = $13;
   HEAPF32[$16_1 + 160 >> 2] = $11_1 + $24;
   $11_1 = Math_fround(0.0);
   $24 = HEAPF32[$16_1 + 168 >> 2];
   if ($24 > Math_fround(0.0)) {
    $11_1 = Math_fround($24 + HEAPF32[$21_1 + 5500 >> 2])
   }
   $14 = $16_1 + 136 | 0;
   HEAPF32[$14 + 12 >> 2] = HEAPF32[$27_1 >> 2] + Math_fround(0.0);
   HEAP32[$16_1 + 136 >> 2] = $8;
   HEAP32[$16_1 + 140 >> 2] = $13;
   HEAPF32[$16_1 + 144 >> 2] = $11_1 + HEAPF32[$16_1 + 160 >> 2];
   $277($14, $9);
   $8 = 0;
   $13 = $7_1 & 128;
   label$3 : {
    if (!$213($14, $15_1, $16_1 + 152 | 0, $13 << 1 ^ 256)) {
     break label$3
    }
    $27_1 = HEAP32[($1_1 << 4) + 48168 >> 2];
    label$4 : {
     if (!$6_1) {
      break label$4
     }
     label$6 : {
      if (($1_1 | 0) != 4) {
       break label$6
      }
      if (!$1695($6_1, 13404)) {
       break label$6
      }
      $27_1 = 13404;
      if (!(HEAPU8[$6_1 + 4 | 0] | (HEAPU8[$6_1 | 0] != 37 | HEAPU8[$6_1 + 1 | 0] != 46 | (HEAPU8[$6_1 + 2 | 0] != 48 | HEAPU8[$6_1 + 3 | 0] != 102)))) {
       break label$4
      }
      $8 = $6_1;
      while (1) {
       $14 = HEAPU8[$8 | 0];
       label$9 : {
        if (!(!$14 | ($14 | 0) == 37 & HEAPU8[$8 + 1 | 0] != 37)) {
         $8 = ((($14 | 0) == 37) + $8 | 0) + 1 | 0;
         $14 = 1;
         break label$9;
        }
        $14 = 0;
       }
       if ($14) {
        continue
       }
       break;
      };
     }
     $27_1 = $6_1;
    }
    $6_1 = $91($16_1 + 152 | 0, $15_1);
    label$13 : {
     label$14 : {
      $14 = 0;
      label$12 : {
       if ($13) {
        break label$12
       }
       $8 = HEAP32[18392];
       $14 = 0;
       if (HEAP32[$8 + 7136 >> 2] != ($15_1 | 0)) {
        break label$12
       }
       $14 = HEAP32[$8 + 11968 >> 2] == ($15_1 | 0);
      }
      $8 = $14;
      if ($8) {
       break label$14
      }
      $14 = $6_1 ? HEAPU16[$21_1 + 1002 >> 1] == 2 : 0;
      $18_1 = $13 ? 0 : HEAP8[$21_1 + 7249 | 0] & 1;
      $25_1 = $6_1 ? HEAPU8[$21_1 + 992 | 0] != 0 : 0;
      label$19 : {
       if (!($14 | ($18_1 | $25_1) | (HEAP32[$21_1 + 7520 >> 2] == ($15_1 | 0) | HEAP32[$21_1 + 7532 >> 2] == ($15_1 | 0)))) {
        break label$19
       }
       $85($15_1, $10_1);
       $330($15_1, $10_1);
       $125($10_1);
       HEAP32[$21_1 + 7156 >> 2] = 3;
       if ($13) {
        break label$19
       }
       label$22 : {
        if ($18_1) {
         break label$22
        }
        label$23 : {
         if ($25_1) {
          if (!(HEAPU8[$21_1 + 252 | 0] != 0 | $14)) {
           break label$23
          }
          break label$22;
         }
         if ($14) {
          break label$22
         }
        }
        if (HEAP32[$21_1 + 7532 >> 2] != ($15_1 | 0)) {
         break label$19
        }
       }
       $8 = 1;
      }
      if (!HEAPU8[$21_1 + 1022 | 0] | ($8 | $13 | (!HEAPU8[$21_1 + 179 | 0] | ($6_1 ^ 1 | HEAP32[$21_1 + 7136 >> 2] != ($15_1 | 0))))) {
       break label$14
      }
      if ($180(Math_fround(HEAPF32[$21_1 + 48 >> 2] * Math_fround(.5)))) {
       break label$14
      }
      HEAP32[$21_1 + 7536 >> 2] = 1;
      HEAP32[$21_1 + 7520 >> 2] = $15_1;
      HEAP32[$21_1 + 7532 >> 2] = $15_1;
      break label$13;
     }
     if ($8) {
      break label$13
     }
     $10_1 = $51(HEAP32[$21_1 + 7136 >> 2] == ($15_1 | 0) ? 9 : $6_1 ? 8 : 7, Math_fround(1.0));
     $73($16_1 + 152 | 0, $15_1, 1);
     $6_1 = HEAP32[$16_1 + 156 >> 2];
     $13 = HEAP32[$16_1 + 152 >> 2];
     HEAP32[$16_1 + 128 >> 2] = $13;
     HEAP32[$16_1 + 132 >> 2] = $6_1;
     $8 = HEAP32[$16_1 + 164 >> 2];
     $14 = HEAP32[$16_1 + 160 >> 2];
     HEAP32[$16_1 + 120 >> 2] = $14;
     HEAP32[$16_1 + 124 >> 2] = $8;
     $9 = HEAPF32[$21_1 + 5484 >> 2];
     HEAP32[$16_1 + 24 >> 2] = $13;
     HEAP32[$16_1 + 28 >> 2] = $6_1;
     HEAP32[$16_1 + 16 >> 2] = $14;
     HEAP32[$16_1 + 20 >> 2] = $8;
     $71($16_1 + 24 | 0, $16_1 + 16 | 0, $10_1, 1, $9);
     $8 = $4_1;
     $10_1 = $5_1;
     $6_1 = $27_1;
     $13 = $7_1;
     $9 = Math_fround(0.0);
     $11_1 = Math_fround(0.0);
     $25_1 = global$0 - 16 | 0;
     global$0 = $25_1;
     $4_1 = HEAP32[18392];
     label$1 : {
      if (HEAP32[$4_1 + 7136 >> 2] != ($15_1 | 0)) {
       break label$1
      }
      label$2 : {
       label$30 : {
        label$41 : {
         $5_1 = HEAP32[$4_1 + 7188 >> 2];
         switch ($5_1 - 1 | 0) {
         case 3:
          break label$30;
         case 0:
          break label$41;
         default:
          break label$1;
         };
        }
        if (!HEAPU8[$4_1 + 236 | 0]) {
         break label$2
        }
        if (($5_1 | 0) != 4) {
         break label$1
        }
       }
       if (HEAPU8[$4_1 + 7148 | 0] | HEAP32[$4_1 + 7528 >> 2] != ($15_1 | 0)) {
        break label$1
       }
      }
      $86();
     }
     label$5 : {
      if (($15_1 | 0) != HEAP32[$4_1 + 7136 >> 2]) {
       $4_1 = 0;
       break label$5;
      }
      if (HEAP32[$4_1 + 7244 >> 2] & 128 | $13 & 2097152) {
       $4_1 = 0;
       break label$5;
      }
      $4_1 = 0;
      label$82 : {
       switch ($1_1 | 0) {
       case 0:
        HEAP32[$25_1 + 12 >> 2] = HEAP8[$2_1 | 0];
        $4_1 = $609($25_1 + 12 | 0, $3, $8 ? HEAP8[$8 | 0] : -128, $10_1 ? HEAP8[$10_1 | 0] : 127, $6_1, $13);
        if ($4_1) {
         HEAP8[$2_1 | 0] = HEAP32[$25_1 + 12 >> 2]
        }
        break label$5;
       case 1:
        HEAP32[$25_1 + 12 >> 2] = HEAPU8[$2_1 | 0];
        $4_1 = $610($25_1 + 12 | 0, $3, $8 ? HEAPU8[$8 | 0] : 0, $10_1 ? HEAPU8[$10_1 | 0] : 255, $6_1, $13);
        if ($4_1) {
         HEAP8[$2_1 | 0] = HEAP32[$25_1 + 12 >> 2]
        }
        break label$5;
       case 2:
        HEAP32[$25_1 + 12 >> 2] = HEAP16[$2_1 >> 1];
        $4_1 = $609($25_1 + 12 | 0, $3, $8 ? HEAP16[$8 >> 1] : -32768, $10_1 ? HEAP16[$10_1 >> 1] : 32767, $6_1, $13);
        if ($4_1) {
         HEAP16[$2_1 >> 1] = HEAP32[$25_1 + 12 >> 2]
        }
        break label$5;
       case 3:
        HEAP32[$25_1 + 12 >> 2] = HEAPU16[$2_1 >> 1];
        $4_1 = $610($25_1 + 12 | 0, $3, $8 ? HEAPU16[$8 >> 1] : 0, $10_1 ? HEAPU16[$10_1 >> 1] : 65535, $6_1, $13);
        if ($4_1) {
         HEAP16[$2_1 >> 1] = HEAP32[$25_1 + 12 >> 2]
        }
        break label$5;
       case 4:
        $4_1 = $609($2_1, $3, $8 ? HEAP32[$8 >> 2] : -2147483648, $10_1 ? HEAP32[$10_1 >> 2] : 2147483647, $6_1, $13);
        break label$5;
       case 5:
        $4_1 = $610($2_1, $3, $8 ? HEAP32[$8 >> 2] : 0, $10_1 ? HEAP32[$10_1 >> 2] : -1, $6_1, $13);
        break label$5;
       case 6:
        label$46 : {
         if (!$8) {
          $5_1 = -2147483648;
          $7_1 = 0;
          break label$46;
         }
         $5_1 = HEAP32[$8 + 4 >> 2];
         $7_1 = HEAP32[$8 >> 2];
        }
        label$48 : {
         if (!$10_1) {
          $4_1 = -1;
          $15_1 = 2147483647;
          break label$48;
         }
         $4_1 = HEAP32[$10_1 >> 2];
         $15_1 = HEAP32[$10_1 + 4 >> 2];
        }
        $14 = $2_1;
        $26_1 = global$0 - 16 | 0;
        global$0 = $26_1;
        $18_1 = HEAP32[18392];
        $10_1 = $4_1;
        $8 = $5_1;
        $9 = $4_1 >>> 0 <= $7_1 >>> 0 & ($8 | 0) >= ($15_1 | 0) | ($8 | 0) > ($15_1 | 0) | $3 != Math_fround(0.0) ? $3 : Math_fround(HEAPF32[$18_1 + 12064 >> 2] * Math_fround(+($4_1 - $7_1 >>> 0) + +($15_1 - ($8 + ($4_1 >>> 0 < $7_1 >>> 0) | 0) | 0) * 4294967296.0));
        $22_1 = $13 & 32;
        $5_1 = $13 & 1048576;
        $4_1 = $5_1 >>> 20 | 0;
        label$307 : {
         label$418 : {
          if (HEAP32[$18_1 + 7188 >> 2] != 1) {
           break label$418
          }
          if (!$128(0)) {
           break label$418
          }
          if (!$180(Math_fround(HEAPF32[$18_1 + 48 >> 2] * Math_fround(.5)))) {
           break label$418
          }
          $3 = HEAPF32[($18_1 + ($4_1 << 2) | 0) + 880 >> 2];
          $3 = HEAPU8[$18_1 + 254 | 0] ? Math_fround($3 * Math_fround(.009999999776482582)) : $3;
          $11_1 = HEAPU8[$18_1 + 253 | 0] ? Math_fround($3 * Math_fround(10.0)) : $3;
          break label$307;
         }
         if (HEAP32[$18_1 + 7188 >> 2] != 4) {
          break label$307
         }
         $17_1 = $26_1 + 8 | 0;
         $154($17_1, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
         $11_1 = HEAPF32[($4_1 << 2) + $17_1 >> 2];
         $3 = HEAPF32[12108];
         $9 = $3 <= $9 ? $9 : $3;
        }
        $3 = Math_fround($11_1 * $9);
        $9 = $5_1 ? Math_fround(-$3) : $3;
        label$102 : {
         if (!$22_1) {
          break label$102
         }
         $5_1 = $10_1 - $7_1 | 0;
         $4_1 = $15_1 - (($7_1 >>> 0 > $10_1 >>> 0) + $8 | 0) | 0;
         if (!(!!$5_1 & ($4_1 | 0) >= 0 | ($4_1 | 0) > 0)) {
          break label$102
         }
         $9 = Math_fround($9 / Math_fround(+($5_1 >>> 0) + +($4_1 | 0) * 4294967296.0));
        }
        $28_1 = ($8 | 0) >= ($15_1 | 0) & $7_1 >>> 0 >= $10_1 >>> 0 | ($8 | 0) > ($15_1 | 0);
        $17_1 = 0;
        label$1359 : {
         if ($28_1) {
          break label$1359
         }
         $5_1 = HEAP32[$14 >> 2];
         $4_1 = HEAP32[$14 + 4 >> 2];
         if (!($10_1 >>> 0 > $5_1 >>> 0 & ($15_1 | 0) >= ($4_1 | 0) | ($4_1 | 0) < ($15_1 | 0))) {
          $17_1 = 1;
          if ($9 > Math_fround(0.0)) {
           break label$1359
          }
         }
         $17_1 = (($4_1 | 0) <= ($8 | 0) & $5_1 >>> 0 <= $7_1 >>> 0 | ($4_1 | 0) < ($8 | 0)) & $9 < Math_fround(0.0);
        }
        label$153 : {
         label$164 : {
          if ($17_1 | HEAPU8[$18_1 + 7148 | 0]) {
           HEAP32[$18_1 + 12060 >> 2] = 0;
           $4_1 = 0;
           break label$164;
          }
          if ($9 == Math_fround(0.0)) {
           break label$153
          }
          HEAPF32[$18_1 + 12060 >> 2] = $9 + HEAPF32[$18_1 + 12060 >> 2];
          $4_1 = 1;
         }
         HEAP8[$18_1 + 12057 | 0] = $4_1;
        }
        $17_1 = 0;
        label$1910 : {
         if (!HEAPU8[$18_1 + 12057 | 0]) {
          break label$1910
         }
         $5_1 = HEAP32[$14 >> 2];
         $17_1 = HEAP32[$14 + 4 >> 2];
         label$21 : {
          if ($22_1) {
           $11_1 = $1669(Math_fround(.10000000149011612), Math_fround(1.0));
           $3 = $620($5_1, $17_1, $7_1, $8, $10_1, $15_1, 1, $11_1, Math_fround(0.0));
           $12_1 = +$3;
           $5_1 = $621(Math_fround($3 + HEAPF32[$18_1 + 12060 >> 2]), $7_1, $8, $10_1, $15_1, 1, $11_1, Math_fround(0.0));
           $4_1 = i64toi32_i32$HIGH_BITS;
           break label$21;
          }
          $3 = HEAPF32[$18_1 + 12060 >> 2];
          label$24 : {
           if (Math_fround(Math_abs($3)) < Math_fround(9223372036854775808.0)) {
            $4_1 = Math_fround(Math_abs($3)) >= Math_fround(1.0) ? ~~($3 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($3 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($3 - Math_fround(~~$3 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
            $30 = ~~$3 >>> 0;
            break label$24;
           }
           $4_1 = -2147483648;
           $30 = 0;
          }
          $11_1 = Math_fround(0.0);
          $4_1 = $4_1 + $17_1 | 0;
          $5_1 = $5_1 + $30 | 0;
          $4_1 = $30 >>> 0 > $5_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
         }
         if (!($13 & 64)) {
          $5_1 = $622($6_1, $5_1, $4_1);
          $4_1 = i64toi32_i32$HIGH_BITS;
         }
         HEAP8[$18_1 + 12057 | 0] = 0;
         label$28 : {
          if ($22_1) {
           $3 = Math_fround(+$620($5_1, $4_1, $7_1, $8, $10_1, $15_1, 1, $11_1, Math_fround(0.0)) - $12_1);
           break label$28;
          }
          $6_1 = HEAP32[$14 >> 2];
          $3 = Math_fround(+($5_1 - $6_1 >>> 0) + +($4_1 - (HEAP32[$14 + 4 >> 2] + ($5_1 >>> 0 < $6_1 >>> 0) | 0) | 0) * 4294967296.0);
         }
         HEAPF32[$18_1 + 12060 >> 2] = HEAPF32[$18_1 + 12060 >> 2] - $3;
         $13 = HEAP32[$14 >> 2];
         $6_1 = HEAP32[$14 + 4 >> 2];
         label$306 : {
          if (!(($13 | 0) != ($5_1 | 0) | ($6_1 | 0) != ($4_1 | 0)) | $28_1) {
           break label$306
          }
          if (!(!($5_1 >>> 0 < $7_1 >>> 0 & ($4_1 | 0) <= ($8 | 0) | ($4_1 | 0) < ($8 | 0)) & (!($5_1 >>> 0 > $13 >>> 0 & ($4_1 | 0) >= ($6_1 | 0) | ($4_1 | 0) > ($6_1 | 0)) | !($9 < Math_fround(0.0))))) {
           $5_1 = $7_1;
           $4_1 = $8;
          }
          if (!($5_1 >>> 0 > $10_1 >>> 0 & ($4_1 | 0) >= ($15_1 | 0) | ($4_1 | 0) > ($15_1 | 0)) & (!($5_1 >>> 0 < $13 >>> 0 & ($4_1 | 0) <= ($6_1 | 0) | ($4_1 | 0) < ($6_1 | 0)) | !($9 > Math_fround(0.0)))) {
           break label$306
          }
          $5_1 = $10_1;
          $4_1 = $15_1;
         }
         $6_1 = ($5_1 | 0) != ($13 | 0) | ($4_1 | 0) != ($6_1 | 0);
         $17_1 = $6_1;
         if (!$6_1) {
          break label$1910
         }
         HEAP32[$14 >> 2] = $5_1;
         HEAP32[$14 + 4 >> 2] = $4_1;
         $17_1 = 1;
        }
        $4_1 = $17_1;
        global$0 = $26_1 + 16 | 0;
        break label$5;
       case 7:
        label$50 : {
         if (!$8) {
          $5_1 = 0;
          $8 = 0;
          break label$50;
         }
         $5_1 = HEAP32[$8 + 4 >> 2];
         $8 = HEAP32[$8 >> 2];
        }
        label$52 : {
         if (!$10_1) {
          $4_1 = -1;
          $7_1 = -1;
          break label$52;
         }
         $4_1 = HEAP32[$10_1 >> 2];
         $7_1 = HEAP32[$10_1 + 4 >> 2];
        }
        $15_1 = $2_1;
        $14 = $6_1;
        $30 = global$0 - 16 | 0;
        global$0 = $30;
        $18_1 = HEAP32[18392];
        $10_1 = $4_1;
        $6_1 = $7_1;
        $7_1 = $5_1;
        $9 = ($5_1 | 0) == ($6_1 | 0) & $4_1 >>> 0 <= $8 >>> 0 | $5_1 >>> 0 > $6_1 >>> 0 | $3 != Math_fround(0.0) ? $3 : Math_fround(HEAPF32[$18_1 + 12064 >> 2] * Math_fround(+($4_1 - $8 >>> 0) + +($6_1 - ($5_1 + ($4_1 >>> 0 < $8 >>> 0) | 0) >>> 0) * 4294967296.0));
        $5_1 = $13 & 1048576;
        $4_1 = $5_1 >>> 20 | 0;
        label$31 : {
         label$42 : {
          if (HEAP32[$18_1 + 7188 >> 2] != 1) {
           break label$42
          }
          if (!$128(0)) {
           break label$42
          }
          if (!$180(Math_fround(HEAPF32[$18_1 + 48 >> 2] * Math_fround(.5)))) {
           break label$42
          }
          $3 = HEAPF32[($18_1 + ($4_1 << 2) | 0) + 880 >> 2];
          $3 = HEAPU8[$18_1 + 254 | 0] ? Math_fround($3 * Math_fround(.009999999776482582)) : $3;
          $11_1 = HEAPU8[$18_1 + 253 | 0] ? Math_fround($3 * Math_fround(10.0)) : $3;
          break label$31;
         }
         if (HEAP32[$18_1 + 7188 >> 2] != 4) {
          break label$31
         }
         $26_1 = $30 + 8 | 0;
         $154($26_1, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
         $11_1 = HEAPF32[($4_1 << 2) + $26_1 >> 2];
         $3 = HEAPF32[12108];
         $9 = $3 <= $9 ? $9 : $3;
        }
        $3 = Math_fround($11_1 * $9);
        $3 = $5_1 ? Math_fround(-$3) : $3;
        $4_1 = ($6_1 | 0) == ($7_1 | 0);
        $26_1 = $4_1 & ($8 | 0) == ($10_1 | 0);
        $28_1 = $13 & 32;
        $3 = $26_1 | !$28_1 ? $3 : Math_fround($3 / Math_fround(+($10_1 - $8 >>> 0) + +($6_1 - (($8 >>> 0 > $10_1 >>> 0) + $7_1 | 0) >>> 0) * 4294967296.0));
        $34_1 = $8 >>> 0 >= $10_1 >>> 0 & $4_1 | $6_1 >>> 0 < $7_1 >>> 0;
        $17_1 = 0;
        label$136 : {
         if ($34_1) {
          break label$136
         }
         $4_1 = HEAP32[$15_1 + 4 >> 2];
         $5_1 = HEAP32[$15_1 >> 2];
         if (!(($6_1 | 0) == ($4_1 | 0) & $10_1 >>> 0 > $5_1 >>> 0 | $4_1 >>> 0 < $6_1 >>> 0)) {
          $17_1 = 1;
          if ($3 > Math_fround(0.0)) {
           break label$136
          }
         }
         $17_1 = (($4_1 | 0) == ($7_1 | 0) & $5_1 >>> 0 <= $8 >>> 0 | $4_1 >>> 0 < $7_1 >>> 0) & $3 < Math_fround(0.0);
        }
        label$154 : {
         label$165 : {
          if ($17_1 | HEAPU8[$18_1 + 7148 | 0]) {
           HEAP32[$18_1 + 12060 >> 2] = 0;
           $4_1 = 0;
           break label$165;
          }
          if ($3 == Math_fround(0.0)) {
           break label$154
          }
          HEAPF32[$18_1 + 12060 >> 2] = $3 + HEAPF32[$18_1 + 12060 >> 2];
          $4_1 = 1;
         }
         HEAP8[$18_1 + 12057 | 0] = $4_1;
        }
        $17_1 = 0;
        label$197 : {
         if (!HEAPU8[$18_1 + 12057 | 0]) {
          break label$197
         }
         $5_1 = HEAP32[$15_1 >> 2];
         $4_1 = HEAP32[$15_1 + 4 >> 2];
         label$218 : {
          if ($28_1) {
           $9 = $1669(Math_fround(.10000000149011612), Math_fround(1.0));
           $11_1 = Math_fround(0.0);
           if (!$26_1) {
            $22_1 = ($6_1 | 0) == ($7_1 | 0);
            $35_1 = $22_1 & $8 >>> 0 > $10_1 >>> 0 | $6_1 >>> 0 < $7_1 >>> 0;
            $17_1 = $35_1;
            $31_1 = $17_1 ? $10_1 : $8;
            $22_1 = $8 >>> 0 < $10_1 >>> 0 & $22_1 | $6_1 >>> 0 > $7_1 >>> 0;
            $32_1 = $22_1 ? $10_1 : $8;
            $22_1 = $22_1 ? $6_1 : $7_1;
            $36_1 = ($22_1 | 0) == ($4_1 | 0) & $5_1 >>> 0 < $32_1 >>> 0 | $4_1 >>> 0 < $22_1 >>> 0;
            $38_1 = $36_1 ? $5_1 : $32_1;
            $17_1 = $17_1 ? $6_1 : $7_1;
            $5_1 = ($17_1 | 0) == ($4_1 | 0) & $5_1 >>> 0 < $31_1 >>> 0 | $4_1 >>> 0 < $17_1 >>> 0;
            $12_1 = +$9;
            $20_1 = +($31_1 >>> 0) + +($17_1 >>> 0) * 4294967296.0;
            $20_1 = $12_1 > $20_1 ? $12_1 : $20_1;
            $19 = +(($5_1 ? $31_1 : $38_1) >>> 0) + +(($5_1 ? $17_1 : $36_1 ? $4_1 : $22_1) >>> 0) * 4294967296.0;
            $11_1 = Math_fround(0.0);
            label$25 : {
             if ($20_1 >= $19) {
              break label$25
             }
             $23_1 = +($32_1 >>> 0) + +($22_1 >>> 0) * 4294967296.0;
             $12_1 = $12_1 > $23_1 ? $12_1 : $23_1;
             $11_1 = Math_fround(1.0);
             if ($12_1 <= $19) {
              break label$25
             }
             $11_1 = Math_fround($1637($19 / $20_1) / $1637($12_1 / $20_1));
            }
            $11_1 = $35_1 ? Math_fround(Math_fround(1.0) - $11_1) : $11_1;
           }
           $4_1 = $7_1;
           $5_1 = $8;
           label$26 : {
            if ($26_1) {
             break label$26
            }
            $24 = Math_fround($11_1 + HEAPF32[$18_1 + 12060 >> 2]);
            $5_1 = $8;
            if ($24 <= Math_fround(0.0)) {
             break label$26
            }
            $4_1 = $6_1;
            $5_1 = $10_1;
            if ($24 >= Math_fround(1.0)) {
             break label$26
            }
            $12_1 = +$9;
            $20_1 = +($10_1 >>> 0) + +($6_1 >>> 0) * 4294967296.0;
            $20_1 = $12_1 > $20_1 ? $12_1 : $20_1;
            $19 = +($8 >>> 0) + +($7_1 >>> 0) * 4294967296.0;
            $12_1 = $12_1 > $19 ? $12_1 : $19;
            $4_1 = ($6_1 | 0) == ($7_1 | 0) & $8 >>> 0 > $10_1 >>> 0 | $6_1 >>> 0 < $7_1 >>> 0;
            $19 = $4_1 ? $20_1 : $12_1;
            $12_1 = $19 * $1656(($4_1 ? $12_1 : $20_1) / $19, +($4_1 ? Math_fround(Math_fround(1.0) - $24) : $24));
            label$27 : {
             if ($12_1 < 18446744073709551615.0 & $12_1 >= 0.0) {
              $4_1 = Math_abs($12_1) >= 1.0 ? ~~($12_1 > 0.0 ? Math_min(Math_floor($12_1 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($12_1 - +(~~$12_1 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
              $5_1 = ~~$12_1 >>> 0;
              break label$27;
             }
             $4_1 = 0;
             $5_1 = 0;
            }
           }
           $20_1 = +$11_1;
           $12_1 = +$9;
           break label$218;
          }
          $9 = HEAPF32[$18_1 + 12060 >> 2];
          label$29 : {
           if (Math_fround(Math_abs($9)) < Math_fround(9223372036854775808.0)) {
            $22_1 = ~~$9 >>> 0;
            $17_1 = Math_fround(Math_abs($9)) >= Math_fround(1.0) ? ~~($9 > Math_fround(0.0) ? Math_fround(Math_min(Math_fround(Math_floor(Math_fround($9 * Math_fround(2.3283064365386963e-10)))), Math_fround(4294967296.0))) : Math_fround(Math_ceil(Math_fround(Math_fround($9 - Math_fround(~~$9 >>> 0 >>> 0)) * Math_fround(2.3283064365386963e-10))))) >>> 0 : 0;
            break label$29;
           }
           $17_1 = -2147483648;
          }
          $4_1 = $17_1 + $4_1 | 0;
          $5_1 = $5_1 + $22_1 | 0;
          $4_1 = $5_1 >>> 0 < $22_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
         }
         if (!($13 & 64)) {
          $5_1 = $622($14, $5_1, $4_1);
          $4_1 = i64toi32_i32$HIGH_BITS;
         }
         HEAP8[$18_1 + 12057 | 0] = 0;
         label$33 : {
          if ($28_1) {
           if ($26_1) {
            $12_1 = 0.0
           } else {
            $13 = ($6_1 | 0) == ($7_1 | 0);
            $17_1 = $13 & $8 >>> 0 > $10_1 >>> 0 | $6_1 >>> 0 < $7_1 >>> 0;
            $14 = $17_1;
            $22_1 = $14 ? $10_1 : $8;
            $13 = $8 >>> 0 < $10_1 >>> 0 & $13 | $6_1 >>> 0 > $7_1 >>> 0;
            $26_1 = $13 ? $10_1 : $8;
            $13 = $13 ? $6_1 : $7_1;
            $28_1 = ($13 | 0) == ($4_1 | 0) & $5_1 >>> 0 < $26_1 >>> 0 | $4_1 >>> 0 < $13 >>> 0;
            $14 = $14 ? $6_1 : $7_1;
            $31_1 = ($14 | 0) == ($4_1 | 0) & $5_1 >>> 0 < $22_1 >>> 0 | $4_1 >>> 0 < $14 >>> 0;
            $32_1 = $31_1 ? $22_1 : $28_1 ? $5_1 : $26_1;
            $19 = +($22_1 >>> 0) + +($14 >>> 0) * 4294967296.0;
            $19 = $12_1 > $19 ? $12_1 : $19;
            $23_1 = +($32_1 >>> 0) + +(($31_1 ? $14 : $28_1 ? $4_1 : $13) >>> 0) * 4294967296.0;
            $9 = Math_fround(0.0);
            label$36 : {
             if ($19 >= $23_1) {
              break label$36
             }
             $37 = +($26_1 >>> 0) + +($13 >>> 0) * 4294967296.0;
             $12_1 = $12_1 > $37 ? $12_1 : $37;
             $9 = Math_fround(1.0);
             if ($12_1 <= $23_1) {
              break label$36
             }
             $9 = Math_fround($1637($23_1 / $19) / $1637($12_1 / $19));
            }
            $12_1 = +($17_1 ? Math_fround(Math_fround(1.0) - $9) : $9);
           }
           $9 = Math_fround($12_1 - $20_1);
           break label$33;
          }
          $13 = HEAP32[$15_1 >> 2];
          $9 = Math_fround(+($5_1 - $13 >>> 0) + +($4_1 - (HEAP32[$15_1 + 4 >> 2] + ($5_1 >>> 0 < $13 >>> 0) | 0) | 0) * 4294967296.0);
         }
         HEAPF32[$18_1 + 12060 >> 2] = HEAPF32[$18_1 + 12060 >> 2] - $9;
         $14 = HEAP32[$15_1 >> 2];
         $13 = HEAP32[$15_1 + 4 >> 2];
         label$37 : {
          if (!(($14 | 0) != ($5_1 | 0) | ($13 | 0) != ($4_1 | 0)) | $34_1) {
           break label$37
          }
          if (!(!(($4_1 | 0) == ($7_1 | 0) & $5_1 >>> 0 < $8 >>> 0 | $4_1 >>> 0 < $7_1 >>> 0) & (!(($4_1 | 0) == ($13 | 0) & $5_1 >>> 0 > $14 >>> 0 | $4_1 >>> 0 > $13 >>> 0) | !($3 < Math_fround(0.0))))) {
           $5_1 = $8;
           $4_1 = $7_1;
          }
          if (!(($4_1 | 0) == ($6_1 | 0) & $5_1 >>> 0 > $10_1 >>> 0 | $4_1 >>> 0 > $6_1 >>> 0) & (!(($4_1 | 0) == ($13 | 0) & $5_1 >>> 0 < $14 >>> 0 | $4_1 >>> 0 < $13 >>> 0) | !($3 > Math_fround(0.0)))) {
           break label$37
          }
          $5_1 = $10_1;
          $4_1 = $6_1;
         }
         $6_1 = ($5_1 | 0) != ($14 | 0) | ($4_1 | 0) != ($13 | 0);
         $17_1 = $6_1;
         if (!$6_1) {
          break label$197
         }
         HEAP32[$15_1 >> 2] = $5_1;
         HEAP32[$15_1 + 4 >> 2] = $4_1;
         $17_1 = 1;
        }
        $4_1 = $17_1;
        global$0 = $30 + 16 | 0;
        break label$5;
       case 8:
        $15_1 = global$0 - 16 | 0;
        global$0 = $15_1;
        $14 = $13 & 1048576;
        $4_1 = HEAP32[18392];
        $9 = $10_1 ? HEAPF32[$10_1 >> 2] : Math_fround(3402823466385288598117041.0e14);
        $24 = $8 ? HEAPF32[$8 >> 2] : Math_fround(-3402823466385288598117041.0e14);
        label$18 : {
         if (!($9 > $24) | $3 != Math_fround(0.0)) {
          break label$18
         }
         $29_1 = Math_fround($9 - $24);
         if (!($29_1 < Math_fround(3402823466385288598117041.0e14))) {
          break label$18
         }
         $3 = Math_fround($29_1 * HEAPF32[$4_1 + 12064 >> 2]);
        }
        $7_1 = $13 & 32;
        $8 = $14 >>> 20 | 0;
        label$49 : {
         label$510 : {
          if (HEAP32[$4_1 + 7188 >> 2] != 1) {
           break label$510
          }
          if (!$128(0)) {
           break label$510
          }
          if (!$180(Math_fround(HEAPF32[$4_1 + 48 >> 2] * Math_fround(.5)))) {
           break label$510
          }
          $11_1 = HEAPF32[($4_1 + ($8 << 2) | 0) + 880 >> 2];
          $11_1 = HEAPU8[$4_1 + 254 | 0] ? Math_fround($11_1 * Math_fround(.009999999776482582)) : $11_1;
          $11_1 = HEAPU8[$4_1 + 253 | 0] ? Math_fround($11_1 * Math_fround(10.0)) : $11_1;
          break label$49;
         }
         if (HEAP32[$4_1 + 7188 >> 2] != 4) {
          break label$49
         }
         $5_1 = $615($6_1);
         $10_1 = $15_1 + 8 | 0;
         $154($10_1, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
         $11_1 = HEAPF32[($8 << 2) + $10_1 >> 2];
         $29_1 = Math_fround(1.1754943508222875e-38);
         label$811 : {
          if (($5_1 | 0) < 0) {
           break label$811
          }
          $29_1 = HEAPF32[($5_1 << 2) + 48432 >> 2];
          if (($5_1 | 0) <= 9) {
           break label$811
          }
          $29_1 = $1669(Math_fround(10.0), Math_fround(0 - $5_1 | 0));
         }
         $3 = $3 >= $29_1 ? $3 : $29_1;
        }
        $3 = Math_fround($11_1 * $3);
        $3 = $14 ? Math_fround(-$3) : $3;
        label$1112 : {
         if (!$7_1) {
          break label$1112
         }
         $11_1 = Math_fround($9 - $24);
         if (!($11_1 < Math_fround(3402823466385288598117041.0e14)) | !($11_1 > Math_fround(9.999999974752427e-07))) {
          break label$1112
         }
         $3 = Math_fround($3 / $11_1);
        }
        $5_1 = $9 > $24;
        $8 = 0;
        label$1515 : {
         if (!$5_1) {
          break label$1515
         }
         $11_1 = HEAPF32[$2_1 >> 2];
         if ($9 <= $11_1) {
          $8 = 1;
          if ($3 > Math_fround(0.0)) {
           break label$1515
          }
         }
         $8 = $3 < Math_fround(0.0) & $11_1 <= $24;
        }
        label$1713 : {
         label$1814 : {
          if ($8 | HEAPU8[$4_1 + 7148 | 0]) {
           HEAP32[$4_1 + 12060 >> 2] = 0;
           $8 = 0;
           break label$1814;
          }
          if ($3 == Math_fround(0.0)) {
           break label$1713
          }
          HEAPF32[$4_1 + 12060 >> 2] = $3 + HEAPF32[$4_1 + 12060 >> 2];
          $8 = 1;
         }
         HEAP8[$4_1 + 12057 | 0] = $8;
        }
        $8 = 0;
        label$2116 : {
         if (!HEAPU8[$4_1 + 12057 | 0]) {
          break label$2116
         }
         $11_1 = HEAPF32[$2_1 >> 2];
         label$2311 : {
          if ($7_1) {
           $33_1 = $1669(Math_fround(.10000000149011612), Math_fround($615($6_1) | 0));
           $3 = $624($11_1, $24, $9, 1, $33_1, Math_fround(0.0));
           $11_1 = $625(Math_fround($3 + HEAPF32[$4_1 + 12060 >> 2]), $24, $9, 1, $33_1, Math_fround(0.0));
           break label$2311;
          }
          $3 = Math_fround(0.0);
          $11_1 = Math_fround($11_1 + HEAPF32[$4_1 + 12060 >> 2]);
         }
         if (!($13 & 64)) {
          $11_1 = $626($6_1, $11_1)
         }
         HEAP8[$4_1 + 12057 | 0] = 0;
         label$2817 : {
          if ($7_1) {
           $3 = Math_fround($624($11_1, $24, $9, 1, $33_1, Math_fround(0.0)) - $3);
           break label$2817;
          }
          $3 = Math_fround($11_1 - HEAPF32[$2_1 >> 2]);
         }
         HEAPF32[$4_1 + 12060 >> 2] = HEAPF32[$4_1 + 12060 >> 2] - $3;
         $3 = $11_1 == Math_fround(0.0) ? Math_fround(0.0) : $11_1;
         $11_1 = HEAPF32[$2_1 >> 2];
         label$3018 : {
          if (!$5_1 | $3 == $11_1) {
           break label$3018
          }
          $3 = $3 < $24 ? $24 : $3;
          if (!($3 > $9)) {
           break label$3018
          }
          $3 = $9;
         }
         $8 = $3 != $11_1;
         if ($3 == $11_1) {
          break label$2116
         }
         HEAPF32[$2_1 >> 2] = $3;
         $8 = 1;
        }
        $4_1 = $8;
        global$0 = $15_1 + 16 | 0;
        break label$5;
       case 9:
        break label$82;
       default:
        break label$5;
       };
      }
      $15_1 = global$0 - 16 | 0;
      global$0 = $15_1;
      $14 = $13 & 1048576;
      $4_1 = HEAP32[18392];
      $20_1 = $10_1 ? HEAPF64[$10_1 >> 3] : 1797693134862315708145274.0e284;
      $19 = $8 ? HEAPF64[$8 >> 3] : -1797693134862315708145274.0e284;
      label$110 : {
       if (!($20_1 > $19) | $3 != Math_fround(0.0)) {
        break label$110
       }
       $12_1 = $20_1 - $19;
       if (!($12_1 < 3402823466385288598117041.0e14)) {
        break label$110
       }
       $3 = Math_fround($12_1 * +HEAPF32[$4_1 + 12064 >> 2]);
      }
      $7_1 = $13 & 32;
      $8 = $14 >>> 20 | 0;
      label$411 : {
       label$512 : {
        if (HEAP32[$4_1 + 7188 >> 2] != 1) {
         break label$512
        }
        if (!$128(0)) {
         break label$512
        }
        if (!$180(Math_fround(HEAPF32[$4_1 + 48 >> 2] * Math_fround(.5)))) {
         break label$512
        }
        $9 = HEAPF32[($4_1 + ($8 << 2) | 0) + 880 >> 2];
        $9 = HEAPU8[$4_1 + 254 | 0] ? Math_fround($9 * Math_fround(.009999999776482582)) : $9;
        $9 = HEAPU8[$4_1 + 253 | 0] ? Math_fround($9 * Math_fround(10.0)) : $9;
        break label$411;
       }
       if (HEAP32[$4_1 + 7188 >> 2] != 4) {
        break label$411
       }
       $5_1 = $615($6_1);
       $10_1 = $15_1 + 8 | 0;
       $154($10_1, 6, 5, Math_fround(.10000000149011612), Math_fround(10.0));
       $9 = HEAPF32[($8 << 2) + $10_1 >> 2];
       $11_1 = Math_fround(1.1754943508222875e-38);
       label$813 : {
        if (($5_1 | 0) < 0) {
         break label$813
        }
        $11_1 = HEAPF32[($5_1 << 2) + 48432 >> 2];
        if (($5_1 | 0) <= 9) {
         break label$813
        }
        $11_1 = $1669(Math_fround(10.0), Math_fround(0 - $5_1 | 0));
       }
       $3 = $3 >= $11_1 ? $3 : $11_1;
      }
      $3 = Math_fround($9 * $3);
      $3 = $14 ? Math_fround(-$3) : $3;
      label$1114 : {
       if (!$7_1) {
        break label$1114
       }
       $12_1 = $20_1 - $19;
       if (!($12_1 < 3402823466385288598117041.0e14) | !($12_1 > 9.999999974752427e-07)) {
        break label$1114
       }
       $3 = Math_fround($3 / Math_fround($12_1));
      }
      $5_1 = $20_1 > $19;
      $8 = 0;
      label$1517 : {
       if (!$5_1) {
        break label$1517
       }
       $12_1 = HEAPF64[$2_1 >> 3];
       if ($20_1 <= $12_1) {
        $8 = 1;
        if ($3 > Math_fround(0.0)) {
         break label$1517
        }
       }
       $8 = $3 < Math_fround(0.0) & $12_1 <= $19;
      }
      label$1715 : {
       label$1816 : {
        if ($8 | HEAPU8[$4_1 + 7148 | 0]) {
         HEAP32[$4_1 + 12060 >> 2] = 0;
         $8 = 0;
         break label$1816;
        }
        if ($3 == Math_fround(0.0)) {
         break label$1715
        }
        HEAPF32[$4_1 + 12060 >> 2] = $3 + HEAPF32[$4_1 + 12060 >> 2];
        $8 = 1;
       }
       HEAP8[$4_1 + 12057 | 0] = $8;
      }
      $8 = 0;
      label$2118 : {
       if (!HEAPU8[$4_1 + 12057 | 0]) {
        break label$2118
       }
       $23_1 = HEAPF64[$2_1 >> 3];
       label$2319 : {
        if ($7_1) {
         $9 = $1669(Math_fround(.10000000149011612), Math_fround($615($6_1) | 0));
         $3 = $627($23_1, $19, $20_1, 1, $9, Math_fround(0.0));
         $12_1 = +$3;
         $23_1 = $628(Math_fround($3 + HEAPF32[$4_1 + 12060 >> 2]), $19, $20_1, 1, $9, Math_fround(0.0));
         break label$2319;
        }
        $12_1 = 0.0;
        $9 = Math_fround(0.0);
        $23_1 = $23_1 + +HEAPF32[$4_1 + 12060 >> 2];
       }
       if (!($13 & 64)) {
        $23_1 = $629($6_1, $23_1)
       }
       HEAP8[$4_1 + 12057 | 0] = 0;
       label$2820 : {
        if ($7_1) {
         $12_1 = +$627($23_1, $19, $20_1, 1, $9, Math_fround(0.0)) - $12_1;
         break label$2820;
        }
        $12_1 = $23_1 - HEAPF64[$2_1 >> 3];
       }
       HEAPF32[$4_1 + 12060 >> 2] = HEAPF32[$4_1 + 12060 >> 2] - Math_fround($12_1);
       $12_1 = $23_1 == 0.0 ? 0.0 : $23_1;
       $23_1 = HEAPF64[$2_1 >> 3];
       label$3021 : {
        if (!$5_1 | $12_1 == $23_1) {
         break label$3021
        }
        $12_1 = $12_1 < $19 ? $19 : $12_1;
        if (!($20_1 < $12_1)) {
         break label$3021
        }
        $12_1 = $20_1;
       }
       $8 = $12_1 != $23_1;
       if ($12_1 == $23_1) {
        break label$2118
       }
       HEAPF64[$2_1 >> 3] = $12_1;
       $8 = 1;
      }
      $4_1 = $8;
      global$0 = $15_1 + 16 | 0;
     }
     global$0 = $25_1 + 16 | 0;
     $8 = $4_1;
     if ($4_1) {
      $88()
     }
     $4_1 = $16_1 + 48 | 0;
     $1_1 = $4_1 + $603($4_1, 64, $1_1, $2_1, $27_1) | 0;
     if (HEAPU8[$21_1 + 12196 | 0]) {
      $341(1061, 1056)
     }
     HEAP32[$16_1 + 40 >> 2] = 1056964608;
     HEAP32[$16_1 + 44 >> 2] = 1056964608;
     $69($16_1 + 152 | 0, $16_1 + 160 | 0, $16_1 + 48 | 0, $1_1, 0, $16_1 + 40 | 0, 0);
     if (HEAPF32[$16_1 + 168 >> 2] > Math_fround(0.0)) {
      $3 = HEAPF32[$21_1 + 5500 >> 2];
      HEAPF32[$16_1 + 36 >> 2] = HEAPF32[$16_1 + 156 >> 2] + HEAPF32[$21_1 + 5480 >> 2];
      HEAPF32[$16_1 + 32 >> 2] = $3 + HEAPF32[$16_1 + 160 >> 2];
      $1_1 = HEAP32[$16_1 + 36 >> 2];
      HEAP32[$16_1 + 8 >> 2] = HEAP32[$16_1 + 32 >> 2];
      HEAP32[$16_1 + 12 >> 2] = $1_1;
      $63($16_1 + 8 | 0, $0_1, 0, 1);
     }
     break label$3;
    }
    $8 = $16_1 + 152 | 0;
    $6_1 = $0_1;
    $0_1 = 0;
    label$3312 : {
     if (!($7_1 & 16)) {
      break label$3312
     }
     $0_1 = 1;
     if (!$4_1) {
      break label$3312
     }
     $0_1 = 1;
     if (!$5_1) {
      break label$3312
     }
     $0_1 = $606($1_1, $4_1, $5_1) >>> 31 | 0;
    }
    $8 = $631($8, $15_1, $6_1, $1_1, $2_1, $27_1, $0_1 ? $4_1 : 0, $0_1 ? $5_1 : 0);
   }
  }
  global$0 = $16_1 + 176 | 0;
  return $8;
 }
 
 function $631($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = 0.0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0);
  $10_1 = global$0 - 80 | 0;
  global$0 = $10_1;
  $16_1 = HEAP32[18392];
  $15_1 = $10_1 + 32 | 0;
  $12_1 = $5_1;
  while (1) {
   $8 = HEAPU8[$5_1 | 0];
   label$2 : {
    if (!$8) {
     $11_1 = 3;
     break label$2;
    }
    if (!(HEAPU8[$5_1 + 1 | 0] == 37 | ($8 | 0) != 37)) {
     $9 = $5_1;
     $11_1 = 1;
     break label$2;
    }
    $11_1 = 0;
    $5_1 = ((($8 | 0) == 37) + $5_1 | 0) + 1 | 0;
   }
   $8 = $5_1;
   if (!$11_1) {
    continue
   }
   break;
  };
  $5_1 = $9;
  label$5 : {
   switch ($11_1 - 2 | 0) {
   case 0:
    wasm2js_trap();
   case 1:
    $5_1 = $8;
    break;
   default:
    break label$5;
   };
  }
  $8 = $5_1;
  $5_1 = HEAPU8[$5_1 | 0];
  __inlined_func$632 : {
   if (($5_1 | 0) == 37) {
    $9 = $8;
    while (1) {
     label$9 : {
      $12_1 = $5_1 << 24 >> 24;
      if (!(1 << $12_1 - 65 & 2304 | ($5_1 - 65 & 255) >>> 0 > 25)) {
       $11_1 = $9 + 1 | 0;
       break label$9;
      }
      if (!(1 << $12_1 - 97 & 38275712 | ($5_1 - 97 & 255) >>> 0 > 25)) {
       $11_1 = $9 + 1 | 0;
       break label$9;
      }
      $5_1 = HEAPU8[$9 + 1 | 0];
      $9 = $9 + 1 | 0;
      $11_1 = $9;
      if ($5_1) {
       continue
      }
     }
     break;
    };
    $5_1 = $8;
    if (!HEAPU8[$11_1 | 0]) {
     break __inlined_func$632
    }
    $5_1 = ($11_1 - $8 | 0) + 1 | 0;
    $15($15_1, $8, $5_1 >>> 0 >= 32 ? 32 : $5_1);
    $5_1 = $15_1;
   } else {
    $5_1 = $12_1
   }
  }
  $603($10_1, 32, $3, $4_1, $5_1);
  $8 = $10_1;
  while (1) {
   $5_1 = HEAPU8[$8 | 0];
   if (($5_1 | 0) == 32 | ($5_1 | 0) == 9) {
    $8 = $8 + 1 | 0;
    continue;
   } else {
    $5_1 = $8;
    while (1) {
     $9 = $5_1;
     $5_1 = $5_1 + 1 | 0;
     if (HEAPU8[$9 | 0]) {
      continue
     }
     break;
    };
    label$4 : {
     if ($8 >>> 0 >= $9 >>> 0) {
      $5_1 = $9;
      break label$4;
     }
     $5_1 = $9;
     while (1) {
      $9 = $5_1 - 1 | 0;
      $12_1 = HEAPU8[$9 | 0];
      if (($12_1 | 0) != 32 & ($12_1 | 0) != 9) {
       break label$4
      }
      $5_1 = $9;
      if ($5_1 >>> 0 > $8 >>> 0) {
       continue
      }
      break;
     };
     $5_1 = $8;
    }
    if (($8 | 0) != ($10_1 | 0)) {
     $1603($10_1, $8, $5_1 - $8 | 0)
    }
    HEAP8[($5_1 - $8 | 0) + $10_1 | 0] = 0;
   }
   break;
  };
  $5_1 = $1_1;
  $1_1 = HEAP32[18392];
  $5_1 = ($5_1 | 0) == HEAP32[$1_1 + 11968 >> 2];
  if (!$5_1) {
   $86()
  }
  $9 = HEAP32[$0_1 + 4 >> 2];
  $8 = HEAP32[$1_1 + 7080 >> 2];
  HEAP32[$8 + 208 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$8 + 212 >> 2] = $9;
  $13 = HEAPF32[$0_1 >> 2];
  $17_1 = HEAPF32[$0_1 + 8 >> 2];
  HEAPF32[$10_1 + 76 >> 2] = HEAPF32[$0_1 + 12 >> 2] - HEAPF32[$0_1 + 4 >> 2];
  HEAPF32[$10_1 + 72 >> 2] = $17_1 - $13;
  $2_1 = $633($2_1, 0, $10_1, 32, $10_1 + 72 | 0, ($3 & -2) == 8 ? 402784272 : 402653201, 0);
  if (!$5_1) {
   HEAP32[$1_1 + 11968 >> 2] = HEAP32[$1_1 + 7136 >> 2]
  }
  $0_1 = 0;
  if ($2_1) {
   $9 = HEAP32[($3 << 4) + 48160 >> 2];
   $1602($10_1 + 72 | 0, $4_1, $9);
   $605($10_1, HEAP32[$16_1 + 8224 >> 2], $3, $4_1, 0);
   if ($6_1 | $7_1) {
    label$50 : {
     if (!(!$6_1 | !$7_1)) {
      $0_1 = ($606($3, $6_1, $7_1) | 0) > 0;
      $5_1 = $0_1 ? $7_1 : $6_1;
      $0_1 = $0_1 ? $6_1 : $7_1;
      break label$50;
     }
     $5_1 = $6_1;
     $0_1 = $7_1;
    }
    __inlined_func$607 : {
     folding_inner5 : {
      folding_inner4 : {
       folding_inner3 : {
        folding_inner2 : {
         folding_inner0 : {
          label$23 : {
           switch ($3 | 0) {
           case 0:
            label$1212 : {
             if (!$5_1) {
              break label$1212
             }
             $1_1 = HEAP8[$5_1 | 0];
             if (($1_1 | 0) <= HEAP8[$4_1 | 0]) {
              break label$1212
             }
             break folding_inner0;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $1_1 = HEAP8[$0_1 | 0];
            if (($1_1 | 0) >= HEAP8[$4_1 | 0]) {
             break __inlined_func$607
            }
            break folding_inner0;
           case 1:
            label$14 : {
             if (!$5_1) {
              break label$14
             }
             $1_1 = HEAPU8[$5_1 | 0];
             if ($1_1 >>> 0 <= HEAPU8[$4_1 | 0]) {
              break label$14
             }
             break folding_inner0;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $1_1 = HEAPU8[$0_1 | 0];
            if ($1_1 >>> 0 >= HEAPU8[$4_1 | 0]) {
             break __inlined_func$607
            }
            break folding_inner0;
           case 2:
            label$16 : {
             if (!$5_1) {
              break label$16
             }
             $1_1 = HEAP16[$5_1 >> 1];
             if (($1_1 | 0) <= HEAP16[$4_1 >> 1]) {
              break label$16
             }
             break folding_inner2;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $1_1 = HEAP16[$0_1 >> 1];
            if (($1_1 | 0) >= HEAP16[$4_1 >> 1]) {
             break __inlined_func$607
            }
            break folding_inner2;
           case 3:
            label$18 : {
             if (!$5_1) {
              break label$18
             }
             $1_1 = HEAPU16[$5_1 >> 1];
             if ($1_1 >>> 0 <= HEAPU16[$4_1 >> 1]) {
              break label$18
             }
             break folding_inner2;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $1_1 = HEAPU16[$0_1 >> 1];
            if ($1_1 >>> 0 >= HEAPU16[$4_1 >> 1]) {
             break __inlined_func$607
            }
            break folding_inner2;
           case 4:
            label$20 : {
             if (!$5_1) {
              break label$20
             }
             $1_1 = HEAP32[$5_1 >> 2];
             if (($1_1 | 0) <= HEAP32[$4_1 >> 2]) {
              break label$20
             }
             break folding_inner3;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $1_1 = HEAP32[$0_1 >> 2];
            if (($1_1 | 0) >= HEAP32[$4_1 >> 2]) {
             break __inlined_func$607
            }
            break folding_inner3;
           case 5:
            label$22 : {
             if (!$5_1) {
              break label$22
             }
             $1_1 = HEAP32[$5_1 >> 2];
             if ($1_1 >>> 0 <= HEAPU32[$4_1 >> 2]) {
              break label$22
             }
             break folding_inner3;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $1_1 = HEAP32[$0_1 >> 2];
            if ($1_1 >>> 0 >= HEAPU32[$4_1 >> 2]) {
             break __inlined_func$607
            }
            break folding_inner3;
           case 6:
            label$24 : {
             if (!$5_1) {
              break label$24
             }
             $1_1 = HEAP32[$5_1 >> 2];
             $3 = HEAP32[$4_1 + 4 >> 2];
             $2_1 = HEAP32[$5_1 + 4 >> 2];
             if ($1_1 >>> 0 <= HEAPU32[$4_1 >> 2] & ($3 | 0) >= ($2_1 | 0) | ($2_1 | 0) < ($3 | 0)) {
              break label$24
             }
             break folding_inner4;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $3 = HEAP32[$4_1 + 4 >> 2];
            $2_1 = HEAP32[$0_1 + 4 >> 2];
            $1_1 = HEAP32[$0_1 >> 2];
            if (($3 | 0) <= ($2_1 | 0) & $1_1 >>> 0 >= HEAPU32[$4_1 >> 2] | ($2_1 | 0) > ($3 | 0)) {
             break __inlined_func$607
            }
            break folding_inner5;
           case 7:
            label$26 : {
             if (!$5_1) {
              break label$26
             }
             $3 = HEAP32[$4_1 + 4 >> 2];
             $2_1 = HEAP32[$5_1 + 4 >> 2];
             $1_1 = HEAP32[$5_1 >> 2];
             if (($3 | 0) == ($2_1 | 0) & $1_1 >>> 0 <= HEAPU32[$4_1 >> 2] | $2_1 >>> 0 < $3 >>> 0) {
              break label$26
             }
             break folding_inner4;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $3 = HEAP32[$4_1 + 4 >> 2];
            $2_1 = HEAP32[$0_1 + 4 >> 2];
            $1_1 = HEAP32[$0_1 >> 2];
            if (($3 | 0) == ($2_1 | 0) & $1_1 >>> 0 >= HEAPU32[$4_1 >> 2] | $2_1 >>> 0 > $3 >>> 0) {
             break __inlined_func$607
            }
            break folding_inner5;
           case 8:
            label$28 : {
             if (!$5_1) {
              break label$28
             }
             $13 = HEAPF32[$5_1 >> 2];
             if (!($13 > HEAPF32[$4_1 >> 2])) {
              break label$28
             }
             HEAPF32[$4_1 >> 2] = $13;
             break __inlined_func$607;
            }
            if (!$0_1) {
             break __inlined_func$607
            }
            $13 = HEAPF32[$0_1 >> 2];
            if (!($13 < HEAPF32[$4_1 >> 2])) {
             break __inlined_func$607
            }
            HEAPF32[$4_1 >> 2] = $13;
            break __inlined_func$607;
           case 9:
            break label$23;
           default:
            break __inlined_func$607;
           };
          }
          label$30 : {
           if (!$5_1) {
            break label$30
           }
           $14 = HEAPF64[$5_1 >> 3];
           if (!($14 > HEAPF64[$4_1 >> 3])) {
            break label$30
           }
           HEAPF64[$4_1 >> 3] = $14;
           break __inlined_func$607;
          }
          if (!$0_1) {
           break __inlined_func$607
          }
          $14 = HEAPF64[$0_1 >> 3];
          if (!($14 < HEAPF64[$4_1 >> 3])) {
           break __inlined_func$607
          }
          HEAPF64[$4_1 >> 3] = $14;
          break __inlined_func$607;
         }
         HEAP8[$4_1 | 0] = $1_1;
         break __inlined_func$607;
        }
        HEAP16[$4_1 >> 1] = $1_1;
        break __inlined_func$607;
       }
       HEAP32[$4_1 >> 2] = $1_1;
       break __inlined_func$607;
      }
      HEAP32[$4_1 >> 2] = $1_1;
      HEAP32[$4_1 + 4 >> 2] = $2_1;
      break __inlined_func$607;
     }
     HEAP32[$4_1 >> 2] = $1_1;
     HEAP32[$4_1 + 4 >> 2] = $2_1;
    }
   }
   $0_1 = $1645($10_1 + 72 | 0, $4_1, $9);
   if ($0_1) {
    $88()
   }
   $0_1 = ($0_1 | 0) != 0;
  }
  global$0 = $10_1 + 80 | 0;
  return $0_1;
 }
 
 function $633($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24 = 0, $25_1 = 0, $26_1 = Math_fround(0), $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = Math_fround(0), $36_1 = Math_fround(0), $37 = 0, $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = 0, $43_1 = Math_fround(0), $44_1 = Math_fround(0), $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49 = Math_fround(0), $50_1 = 0, $51_1 = 0, $52_1 = Math_fround(0), $53_1 = Math_fround(0), $54_1 = Math_fround(0), $55_1 = Math_fround(0);
  $11_1 = global$0 - 192 | 0;
  global$0 = $11_1;
  $10_1 = HEAP32[18392];
  $13 = HEAP32[$10_1 + 7080 >> 2];
  HEAP8[$13 + 140 | 0] = 1;
  if (!HEAPU8[$13 + 143 | 0]) {
   $20_1 = $5_1 & 67108864;
   if ($20_1) {
    $301()
   }
   $24 = $76($13, $0_1);
   $68($11_1 + 184 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $7_1 = HEAP32[$4_1 + 4 >> 2];
   HEAP32[$11_1 + 168 >> 2] = HEAP32[$4_1 >> 2];
   HEAP32[$11_1 + 172 >> 2] = $7_1;
   $17_1 = $292();
   $16_1 = $20_1 ? Math_fround(HEAPF32[$10_1 + 6468 >> 2] * Math_fround(8.0)) : HEAPF32[$11_1 + 188 >> 2];
   $14 = HEAPF32[$10_1 + 5480 >> 2];
   $4_1 = HEAP32[$11_1 + 172 >> 2];
   HEAP32[$11_1 + 24 >> 2] = HEAP32[$11_1 + 168 >> 2];
   HEAP32[$11_1 + 28 >> 2] = $4_1;
   $293($11_1 + 176 | 0, $11_1 + 24 | 0, $17_1, Math_fround(Math_fround($14 + $14) + $16_1));
   $14 = HEAPF32[$11_1 + 176 >> 2];
   $16_1 = Math_fround(0.0);
   $17_1 = HEAPF32[$11_1 + 184 >> 2];
   if ($17_1 > Math_fround(0.0)) {
    $16_1 = Math_fround($17_1 + HEAPF32[$10_1 + 5500 >> 2])
   }
   $17_1 = HEAPF32[$13 + 208 >> 2];
   $4_1 = HEAP32[$13 + 208 >> 2];
   $7_1 = HEAP32[$13 + 212 >> 2];
   $35_1 = HEAPF32[$11_1 + 180 >> 2];
   HEAPF32[$11_1 + 164 >> 2] = $35_1 + HEAPF32[$13 + 212 >> 2];
   HEAP32[$11_1 + 152 >> 2] = $4_1;
   HEAP32[$11_1 + 156 >> 2] = $7_1;
   HEAPF32[$11_1 + 160 >> 2] = $14 + $17_1;
   $9 = $11_1 + 136 | 0;
   HEAPF32[$9 + 12 >> 2] = $35_1 + HEAPF32[$11_1 + 156 >> 2];
   HEAPF32[$11_1 + 144 >> 2] = Math_fround($14 + $16_1) + HEAPF32[$11_1 + 152 >> 2];
   HEAP32[$11_1 + 136 >> 2] = $4_1;
   HEAP32[$11_1 + 140 >> 2] = $7_1;
   $277($9, HEAPF32[$10_1 + 5480 >> 2]);
   label$6 : {
    label$7 : {
     if ($20_1) {
      label$9 : {
       if (!$213($11_1 + 136 | 0, $24, $11_1 + 152 | 0, 256)) {
        $275();
        $9 = 0;
        $7_1 = $13;
        $15_1 = 0;
        break label$9;
       }
       $12_1 = HEAP32[$10_1 + 7244 >> 2];
       $9 = HEAP32[$10_1 + 7248 >> 2];
       HEAP32[$13 + 208 >> 2] = $4_1;
       HEAP32[$13 + 212 >> 2] = $7_1;
       $56(3, $10_1 + 5728 | 0);
       $58(7, HEAPF32[$10_1 + 5484 >> 2]);
       $58(8, HEAPF32[$10_1 + 5488 >> 2]);
       HEAP32[$11_1 + 88 >> 2] = 0;
       HEAP32[$11_1 + 92 >> 2] = 0;
       $4_1 = $11_1 + 88 | 0;
       $59(2, $4_1);
       HEAPF32[$11_1 + 92 >> 2] = HEAPF32[$11_1 + 164 >> 2] - HEAPF32[$11_1 + 156 >> 2];
       HEAPF32[$11_1 + 88 >> 2] = HEAPF32[$11_1 + 160 >> 2] - HEAPF32[$11_1 + 152 >> 2];
       $4_1 = $207($0_1, $24, $4_1, 1, 4);
       $60(3);
       $57(1);
       if (!$4_1) {
        $211();
        $275();
        $7_1 = $13;
        $15_1 = 0;
        break label$9;
       }
       $7_1 = HEAP32[$10_1 + 7080 >> 2];
       $4_1 = $7_1 + 298 | 0;
       HEAP16[$4_1 >> 1] = HEAPU16[$4_1 >> 1] | 1 << HEAP32[$7_1 + 292 >> 2];
       HEAPF32[$7_1 + 208 >> 2] = HEAPF32[$10_1 + 5476 >> 2] + HEAPF32[$7_1 + 208 >> 2];
       $4_1 = $7_1 + 212 | 0;
       HEAPF32[$4_1 >> 2] = HEAPF32[$10_1 + 5480 >> 2] + HEAPF32[$4_1 >> 2];
       $14 = Math_fround($14 - HEAPF32[$7_1 + 128 >> 2]);
       $15_1 = 1;
      }
      $4_1 = $9;
      $8 = $9;
      $9 = 0;
      if ($15_1) {
       break label$7
      }
      break label$6;
     }
     if (!($5_1 & 268435456)) {
      $9 = 0;
      if (!$213($11_1 + 136 | 0, $24, $11_1 + 152 | 0, 256)) {
       break label$6
      }
     }
     $4_1 = 0;
     $8 = HEAP32[$10_1 + 7248 >> 2];
     $7_1 = $13;
    }
    $15_1 = $91($11_1 + 152 | 0, $24);
    if ($15_1) {
     HEAP32[$10_1 + 7872 >> 2] = 1
    }
    $29_1 = $7_1;
    $18_1 = HEAP32[18392];
    $19 = HEAP32[$18_1 + 8180 >> 2];
    $7_1 = HEAP32[$10_1 + 7136 >> 2];
    $21_1 = 0;
    label$14 : {
     if (($7_1 | 0) == ($24 | 0)) {
      break label$14
     }
     $21_1 = 1;
     if (HEAP32[$10_1 + 7532 >> 2] == ($24 | 0)) {
      break label$14
     }
     $21_1 = 0;
     if (HEAP32[$10_1 + 7520 >> 2] != ($24 | 0)) {
      break label$14
     }
     $21_1 = HEAP32[$10_1 + 7560 >> 2] == 2;
    }
    $9 = 0;
    $30 = $15_1 ? HEAPU8[$10_1 + 992 | 0] != 0 : 0;
    $27_1 = ($19 | 0) == ($24 | 0);
    $31_1 = $27_1 & ($20_1 | 0) != 0;
    $34_1 = 0;
    label$16 : {
     if (!$31_1) {
      break label$16
     }
     $34_1 = 0;
     if ($7_1) {
      break label$16
     }
     $34_1 = HEAP32[$10_1 + 7196 >> 2] == ($81($29_1, 14116) | 0);
    }
    if ($31_1) {
     $9 = HEAP32[$10_1 + 7136 >> 2] == ($81($29_1, 14116) | 0)
    }
    $36_1 = $14;
    $7_1 = $8;
    $50_1 = $12_1;
    $14 = $20_1 ? HEAPF32[$29_1 + 92 >> 2] : Math_fround(3402823466385288598117041.0e14);
    $12_1 = 0;
    $8 = $27_1 ? $18_1 + 8180 | 0 : 0;
    $19 = ($19 | 0) == ($24 | 0) & HEAPU8[$8 + 83 | 0] != (!$20_1 | 0);
    $18_1 = $7_1 & 256;
    $27_1 = $21_1 | ($30 | $34_1) | ($18_1 | 0) != 0;
    $31_1 = $27_1 | $9;
    label$20 : {
     label$21 : {
      if (($31_1 | 0) == 1) {
       if ($19 | HEAP32[$10_1 + 7136 >> 2] != ($24 | 0)) {
        break label$21
       }
       break label$20;
      }
      if (!$19) {
       break label$20
      }
     }
     HEAP32[$10_1 + 11868 >> 2] = -1097229926;
     $8 = $1697($2_1);
     $7_1 = $8 + 1 | 0;
     $12_1 = HEAP32[$10_1 + 8220 >> 2];
     label$23 : {
      if (($8 | 0) < ($12_1 | 0)) {
       break label$23
      }
      $8 = $12_1 ? $12_1 + (($12_1 | 0) / 2 | 0) | 0 : 8;
      $8 = ($7_1 | 0) < ($8 | 0) ? $8 : $7_1;
      if (($12_1 | 0) >= ($8 | 0)) {
       break label$23
      }
      $12_1 = $16($8);
      $34_1 = HEAP32[$10_1 + 8224 >> 2];
      if ($34_1) {
       $1602($12_1, $34_1, HEAP32[$10_1 + 8216 >> 2]);
       $17(HEAP32[$10_1 + 8224 >> 2]);
      }
      HEAP32[$10_1 + 8220 >> 2] = $8;
      HEAP32[$10_1 + 8224 >> 2] = $12_1;
     }
     HEAP32[$10_1 + 8216 >> 2] = $7_1;
     $1602(HEAP32[$10_1 + 8224 >> 2], $2_1, $7_1);
     HEAP32[$11_1 + 88 >> 2] = 0;
     $12_1 = $3 + 1 | 0;
     $7_1 = HEAP32[$10_1 + 8196 >> 2];
     label$27 : {
      if (($7_1 | 0) > ($3 | 0)) {
       break label$27
      }
      $8 = $7_1 ? $7_1 + (($7_1 | 0) / 2 | 0) | 0 : 8;
      $8 = ($8 | 0) > ($12_1 | 0) ? $8 : $12_1;
      if (($7_1 | 0) >= ($8 | 0)) {
       break label$27
      }
      $7_1 = $16($8 << 1);
      $34_1 = HEAP32[$10_1 + 8200 >> 2];
      if ($34_1) {
       $1602($7_1, $34_1, HEAP32[$10_1 + 8192 >> 2] << 1);
       $17(HEAP32[$10_1 + 8200 >> 2]);
      }
      HEAP32[$10_1 + 8196 >> 2] = $8;
      HEAP32[$10_1 + 8200 >> 2] = $7_1;
     }
     HEAP32[$10_1 + 8192 >> 2] = $12_1;
     $7_1 = HEAP32[$10_1 + 8208 >> 2];
     label$31 : {
      if (($7_1 | 0) >= 0) {
       break label$31
      }
      $12_1 = $7_1 + (($7_1 | 0) / 2 | 0) | 0;
      $12_1 = ($12_1 | 0) > 0 ? $12_1 : 0;
      if (($7_1 | 0) >= ($12_1 | 0)) {
       break label$31
      }
      $7_1 = $16($12_1);
      $8 = HEAP32[$10_1 + 8212 >> 2];
      if ($8) {
       $1602($7_1, $8, HEAP32[$10_1 + 8204 >> 2]);
       $17(HEAP32[$10_1 + 8212 >> 2]);
      }
      HEAP32[$10_1 + 8208 >> 2] = $12_1;
      HEAP32[$10_1 + 8212 >> 2] = $7_1;
     }
     HEAP32[$10_1 + 8204 >> 2] = 0;
     HEAP8[$10_1 + 8228 | 0] = 0;
     $7_1 = $10_1 + 8184 | 0;
     HEAP32[$7_1 >> 2] = $25(HEAP32[$10_1 + 8200 >> 2], $3, $2_1, 0, $11_1 + 88 | 0);
     HEAP32[$10_1 + 8188 >> 2] = HEAP32[$11_1 + 88 >> 2] - $2_1;
     $8 = $19 | HEAP32[$10_1 + 8180 >> 2] != ($24 | 0);
     label$33 : {
      if (!$8) {
       $19 = $10_1 + 8240 | 0;
       $12_1 = HEAP32[$19 >> 2];
       $7_1 = HEAP32[$7_1 >> 2];
       HEAP32[$19 >> 2] = ($7_1 | 0) > ($12_1 | 0) ? $12_1 : $7_1;
       $19 = $10_1 + 8244 | 0;
       $12_1 = HEAP32[$19 >> 2];
       HEAP32[$19 >> 2] = ($7_1 | 0) > ($12_1 | 0) ? $12_1 : $7_1;
       $19 = $10_1 + 8248 | 0;
       $12_1 = HEAP32[$19 >> 2];
       HEAP32[$19 >> 2] = ($7_1 | 0) > ($12_1 | 0) ? $12_1 : $7_1;
       break label$33;
      }
      HEAP32[$10_1 + 8180 >> 2] = $24;
      HEAP32[$10_1 + 8236 >> 2] = 0;
      $7_1 = $10_1 + 11860 | 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 999;
      $7_1 = $10_1 + 11854 | 0;
      HEAP16[$7_1 >> 1] = 0;
      HEAP16[$7_1 + 2 >> 1] = 99;
      HEAP32[$10_1 + 8248 >> 2] = 0;
      HEAP32[$10_1 + 8268 >> 2] = 0;
      HEAP8[$10_1 + 8262 | 0] = 0;
      $7_1 = $10_1 + 8240 | 0;
      HEAP32[$7_1 >> 2] = 0;
      HEAP32[$7_1 + 4 >> 2] = 0;
      HEAP8[$10_1 + 8263 | 0] = !$20_1;
      HEAP16[$10_1 + 8260 >> 1] = 256;
      HEAP32[$10_1 + 8256 >> 2] = 0;
      HEAP8[$10_1 + 8252 | 0] = 0;
     }
     $12_1 = 0;
     label$35 : {
      if ($20_1) {
       break label$35
      }
      $12_1 = !$21_1 | !(HEAPU8[$10_1 + 7536 | 0] & 4 ? $8 : 1) ? $5_1 >>> 4 & 1 : 1;
      if (!$18_1 & (!$30 | !HEAPU8[$10_1 + 252 | 0])) {
       break label$35
      }
      $12_1 = 1;
     }
     if ($5_1 & 8192) {
      HEAP8[$10_1 + 8252 | 0] = 1
     }
     $8 = $10_1 + 8180 | 0;
    }
    label$42 : {
     if (!($27_1 & HEAP32[$10_1 + 7136 >> 2] != ($24 | 0))) {
      break label$42
     }
     $85($24, $13);
     $330($24, $13);
     $125($13);
     HEAP32[$10_1 + 7156 >> 2] = HEAP32[$10_1 + 7156 >> 2] | ($5_1 & 67108992 ? 15 : 3);
     HEAP32[$10_1 + 7160 >> 2] = HEAP32[$10_1 + 7160 >> 2] | 2;
     $7_1 = HEAP32[$10_1 + 7172 >> 2];
     $13 = HEAP32[$10_1 + 7168 >> 2] | ($20_1 ? 480 : 384);
     HEAP32[$10_1 + 7168 >> 2] = $13;
     HEAP32[$10_1 + 7172 >> 2] = $7_1;
     if (!($5_1 & 1088)) {
      break label$42
     }
     HEAP32[$10_1 + 7168 >> 2] = $13 | 1;
     HEAP32[$10_1 + 7172 >> 2] = $7_1;
    }
    if (!(HEAP32[$10_1 + 7136 >> 2] != ($24 | 0) | $8)) {
     $86()
    }
    $34_1 = $4_1;
    $7_1 = HEAP32[$10_1 + 7136 >> 2];
    $4_1 = ($31_1 ^ -1) & HEAPU8[$10_1 + 992 | 0] != 0 & ($24 | 0) == ($7_1 | 0);
    $37 = ($8 | 0) != 0 & $9 | ($7_1 | 0) == ($24 | 0);
    $7_1 = $8 ? $37 & (HEAP32[$8 - -64 >> 2] != HEAP32[$8 + 68 >> 2] | $12_1) : 0;
    $28_1 = $5_1 & 16384;
    if (!(!($7_1 | $37) | (!$28_1 | !$8))) {
     HEAP32[$11_1 + 88 >> 2] = 0;
     $9 = $3 + 1 | 0;
     $13 = HEAP32[$8 + 16 >> 2];
     label$52 : {
      if (($13 | 0) > ($3 | 0)) {
       break label$52
      }
      $19 = $13 ? $13 + (($13 | 0) / 2 | 0) | 0 : 8;
      $19 = ($9 | 0) < ($19 | 0) ? $19 : $9;
      if (($13 | 0) >= ($19 | 0)) {
       break label$52
      }
      $13 = $16($19 << 1);
      $30 = HEAP32[$8 + 20 >> 2];
      if ($30) {
       $1602($13, $30, HEAP32[$8 + 12 >> 2] << 1);
       $17(HEAP32[$8 + 20 >> 2]);
      }
      HEAP32[$8 + 16 >> 2] = $19;
      HEAP32[$8 + 20 >> 2] = $13;
     }
     HEAP32[$8 + 12 >> 2] = $9;
     $9 = $25(HEAP32[$8 + 20 >> 2], $9, $2_1, 0, $11_1 + 88 | 0);
     HEAP32[$8 + 4 >> 2] = $9;
     HEAP32[$8 + 8 >> 2] = HEAP32[$11_1 + 88 >> 2] - $2_1;
     $13 = HEAP32[$8 + 60 >> 2];
     HEAP32[$8 + 60 >> 2] = ($9 | 0) > ($13 | 0) ? $13 : $9;
     $19 = $8 - -64 | 0;
     $13 = HEAP32[$19 >> 2];
     $13 = ($9 | 0) > ($13 | 0) ? $13 : $9;
     HEAP32[$19 >> 2] = $13;
     $19 = $8 + 68 | 0;
     $30 = HEAP32[$19 >> 2];
     $9 = ($9 | 0) > ($30 | 0) ? $30 : $9;
     HEAP32[$19 >> 2] = $9;
     $7_1 = $7_1 & ($9 | 0) != ($13 | 0);
    }
    $19 = $7_1;
    label$56 : {
     label$57 : {
      if (!($7_1 | $37)) {
       if (!$8) {
        $7_1 = 0;
        break label$56;
       }
       if (($24 | 0) != HEAP32[$10_1 + 7136 >> 2]) {
        $7_1 = 0;
        break label$56;
       }
       $7_1 = 0;
       if (!$28_1) {
        break label$57
       }
       break label$56;
      }
      if (!$8) {
       $7_1 = 0;
       break label$56;
      }
      $7_1 = 0;
      if ($28_1) {
       break label$56
      }
     }
     $7_1 = HEAPU8[$8 + 48 | 0] != 0;
    }
    $30 = $7_1;
    $7_1 = !($1_1 ? HEAPU8[($7_1 ? HEAP32[$8 + 32 >> 2] : $2_1) | 0] : 1);
    $42_1 = $7_1;
    $18_1 = $5_1 & 32768;
    $32_1 = !$18_1;
    $47_1 = $32_1 | $7_1;
    if (!$47_1) {
     $9 = $472(HEAP32[$10_1 + 6464 >> 2], 42);
     $7_1 = HEAP32[$10_1 + 6464 >> 2];
     HEAPF32[$10_1 + 11896 >> 2] = HEAPF32[$7_1 + 16 >> 2];
     HEAPF32[$10_1 + 11948 >> 2] = HEAPF32[$7_1 + 68 >> 2];
     HEAPF32[$10_1 + 11952 >> 2] = HEAPF32[$7_1 + 72 >> 2];
     HEAPF32[$10_1 + 11956 >> 2] = HEAPF32[$7_1 + 76 >> 2];
     HEAP32[$10_1 + 11928 >> 2] = HEAP32[$7_1 + 48 >> 2];
     HEAP32[$10_1 + 11924 >> 2] = $9;
     HEAPF32[$10_1 + 11892 >> 2] = HEAPF32[$9 + 4 >> 2];
     $222($10_1 + 11880 | 0);
    }
    if (($24 | 0) == HEAP32[$10_1 + 7136 >> 2]) {
     HEAP8[$8 + 3694 | 0] = 0;
     HEAP32[$8 + 3696 >> 2] = $5_1;
     HEAP32[$8 + 52 >> 2] = $3;
     $31_1 = HEAP32[$8 + 8 >> 2];
     HEAP32[$10_1 + 12796 >> 2] = 1;
     $7_1 = HEAPU8[$10_1 + 236 | 0];
     HEAP8[$10_1 + 7149 | 0] = $7_1 ^ 1;
     $17_1 = $20_1 ? Math_fround(HEAPF32[$10_1 + 232 >> 2] - HEAPF32[$29_1 + 212 >> 2]) : Math_fround(HEAPF32[$10_1 + 6468 >> 2] * Math_fround(.5));
     $27_1 = HEAPU8[$10_1 + 177 | 0];
     label$69 : {
      if ($12_1) {
       HEAP8[$8 + 3693 | 0] = 1;
       HEAP32[$8 - -64 >> 2] = 0;
       $7_1 = HEAP32[$8 + 4 >> 2];
       HEAP32[$8 + 68 >> 2] = $7_1;
       HEAP8[$8 + 82 | 0] = 0;
       HEAP32[$8 + 60 >> 2] = $7_1;
       break label$69;
      }
      $16_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$10_1 + 228 >> 2] - HEAPF32[$11_1 + 152 >> 2]) - HEAPF32[$10_1 + 5476 >> 2]) + HEAPF32[$8 + 56 >> 2]);
      if (!(HEAPU8[$10_1 + 253 | 0] | (!$15_1 | HEAPU16[$10_1 + 1002 >> 1] < 2))) {
       $13 = $8 + 60 | 0;
       $666($8, $13, $16_1, $17_1);
       $7_1 = HEAP32[$8 + 60 >> 2];
       label$72 : {
        if (!(HEAP8[$10_1 + 1002 | 0] & 1)) {
         if (!(!!($7_1 ? HEAPU16[(HEAP32[$8 + 20 >> 2] + ($7_1 << 1) | 0) - 2 >> 1] == 10 : 1) & HEAP32[$8 - -64 >> 2] == HEAP32[$8 + 68 >> 2])) {
          $667($8, 2097164)
         }
         label$77 : {
          if (HEAP32[$8 + 64 >> 2] != HEAP32[$8 + 68 >> 2]) {
           break label$77
          }
          $7_1 = HEAP32[$8 + 68 >> 2];
          if (($7_1 | 0) == HEAP32[$8 - -64 >> 2]) {
           $7_1 = HEAP32[$8 + 60 >> 2];
           HEAP32[$8 + 68 >> 2] = $7_1;
           HEAP32[$8 + 64 >> 2] = $7_1;
           break label$77;
          }
          HEAP32[$13 >> 2] = $7_1;
         }
         $9 = HEAP32[$8 + 60 >> 2];
         $7_1 = $9 + 1 | 0;
         $12_1 = HEAP32[$8 + 4 >> 2];
         label$1 : {
          if (($7_1 | 0) >= ($12_1 | 0)) {
           break label$1
          }
          $45_1 = HEAP32[$8 + 3696 >> 2] & 32768;
          label$3 : {
           while (1) {
            $15_1 = $9;
            $9 = $7_1;
            label$5 : {
             if ($45_1) {
              break label$5
             }
             if (($15_1 | 0) < 0) {
              break label$3
             }
             label$60 : {
              label$71 : {
               $33_1 = HEAP32[$8 + 20 >> 2];
               $7_1 = HEAPU16[$33_1 + ($15_1 << 1) >> 1];
               switch ($7_1 - 9 | 0) {
               case 0:
               case 1:
               case 4:
               case 23:
               case 31:
               case 32:
               case 35:
               case 50:
               case 82:
               case 84:
               case 114:
               case 115:
               case 116:
                break label$5;
               case 2:
               case 3:
               case 5:
               case 6:
               case 7:
               case 8:
               case 9:
               case 10:
               case 11:
               case 12:
               case 13:
               case 14:
               case 15:
               case 16:
               case 17:
               case 18:
               case 19:
               case 20:
               case 21:
               case 22:
               case 24:
               case 25:
               case 26:
               case 27:
               case 28:
               case 29:
               case 30:
               case 33:
               case 34:
               case 36:
               case 37:
               case 38:
               case 39:
               case 40:
               case 41:
               case 42:
               case 43:
               case 44:
               case 45:
               case 46:
               case 47:
               case 48:
               case 49:
               case 51:
               case 52:
               case 53:
               case 54:
               case 55:
               case 56:
               case 57:
               case 58:
               case 59:
               case 60:
               case 61:
               case 62:
               case 63:
               case 64:
               case 65:
               case 66:
               case 67:
               case 68:
               case 69:
               case 70:
               case 71:
               case 72:
               case 73:
               case 74:
               case 75:
               case 76:
               case 77:
               case 78:
               case 79:
               case 80:
               case 81:
               case 83:
               case 85:
               case 86:
               case 87:
               case 88:
               case 89:
               case 90:
               case 91:
               case 92:
               case 93:
               case 94:
               case 95:
               case 96:
               case 97:
               case 98:
               case 99:
               case 100:
               case 101:
               case 102:
               case 103:
               case 104:
               case 105:
               case 106:
               case 107:
               case 108:
               case 109:
               case 110:
               case 111:
               case 112:
               case 113:
                break label$60;
               default:
                break label$71;
               };
              }
              if (($7_1 | 0) == 12288) {
               break label$5
              }
             }
             label$8 : {
              $7_1 = $9;
              $15_1 = HEAPU16[($7_1 << 1) + $33_1 >> 1];
              switch ($15_1 - 9 | 0) {
              case 0:
              case 1:
              case 4:
              case 23:
              case 31:
              case 32:
              case 35:
              case 50:
              case 82:
              case 84:
              case 114:
              case 115:
              case 116:
               break label$1;
              case 2:
              case 3:
              case 5:
              case 6:
              case 7:
              case 8:
              case 9:
              case 10:
              case 11:
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 24:
              case 25:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 33:
              case 34:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 51:
              case 52:
              case 53:
              case 54:
              case 55:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 70:
              case 71:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
              case 80:
              case 81:
              case 83:
              case 85:
              case 86:
              case 87:
              case 88:
              case 89:
              case 90:
              case 91:
              case 92:
              case 93:
              case 94:
              case 95:
              case 96:
              case 97:
              case 98:
              case 99:
              case 100:
              case 101:
              case 102:
              case 103:
              case 104:
              case 105:
              case 106:
              case 107:
              case 108:
              case 109:
              case 110:
              case 111:
              case 112:
              case 113:
               break label$5;
              default:
               break label$8;
              };
             }
             if (($15_1 | 0) == 12288) {
              break label$3
             }
            }
            $7_1 = $9 + 1 | 0;
            if (($12_1 | 0) != ($7_1 | 0)) {
             continue
            }
            break;
           };
           $7_1 = $12_1;
           break label$1;
          }
          $7_1 = $9;
         }
         $7_1 = ($7_1 | 0) < ($12_1 | 0) ? $7_1 : $12_1;
         HEAP32[$8 + 68 >> 2] = $7_1;
         HEAP32[$8 + 60 >> 2] = $7_1;
         $9 = HEAP32[$8 + 4 >> 2];
         $7_1 = $13;
         $12_1 = HEAP32[$7_1 + 8 >> 2];
         $13 = HEAP32[$7_1 + 4 >> 2];
         label$10 : {
          if (($12_1 | 0) == ($13 | 0)) {
           break label$10
          }
          if (($9 | 0) < ($13 | 0)) {
           HEAP32[$7_1 + 4 >> 2] = $9
          }
          if (($9 | 0) < ($12_1 | 0)) {
           HEAP32[$7_1 + 8 >> 2] = $9
          }
          $12_1 = HEAP32[$7_1 + 4 >> 2];
          if (($12_1 | 0) != HEAP32[$7_1 + 8 >> 2]) {
           break label$10
          }
          HEAP32[$7_1 >> 2] = $12_1;
         }
         if (HEAP32[$7_1 >> 2] > ($9 | 0)) {
          HEAP32[$7_1 >> 2] = $9
         }
         break label$72;
        }
        $7_1 = HEAPU16[HEAP32[$8 + 20 >> 2] + ($7_1 << 1) >> 1];
        $667($8, 2097156);
        $667($8, 6291461);
        $667($8, 6291457);
        if (!(!$20_1 | ($7_1 | 0) == 10)) {
         $7_1 = $8 + 68 | 0;
         $9 = HEAP32[$7_1 >> 2];
         $13 = $7_1;
         $7_1 = $8 - -64 | 0;
         $12_1 = HEAP32[$7_1 >> 2];
         HEAP32[$13 >> 2] = $12_1;
         HEAP32[$7_1 >> 2] = $9;
         HEAP32[$8 + 60 >> 2] = $12_1;
        }
        HEAP8[$8 + 3692 | 0] = 0;
       }
       HEAP32[$8 + 3688 >> 2] = -1097229926;
       break label$69;
      }
      if (!(HEAPU8[$8 + 3693 | 0] | !HEAPU8[$10_1 + 992 | 0])) {
       if (!$15_1) {
        break label$69
       }
       $666($8, $8 + 60 | 0, $16_1, $17_1);
       HEAP32[$8 + 3688 >> 2] = -1097229926;
       break label$69;
      }
      if (HEAPF32[$10_1 + 880 >> 2] == Math_fround(0.0) & HEAPF32[$10_1 + 884 >> 2] == Math_fround(0.0) | (HEAPU8[$8 + 3693 | 0] | !$7_1)) {
       break label$69
      }
      $12_1 = $8 + 60 | 0;
      label$11 : {
       if (!HEAPU8[$12_1 + 23 | 0]) {
        break label$11
       }
       $7_1 = HEAP32[$8 + 20 >> 2];
       $13 = $7_1 + (HEAP32[$8 + 4 >> 2] << 1) | 0;
       while (1) {
        $9 = $7_1;
        if ($13 >>> 0 <= $7_1 >>> 0) {
         $17_1 = Math_fround(0.0);
         break label$11;
        }
        $7_1 = $9 + 2 | 0;
        $17_1 = Math_fround(0.0);
        if (HEAPU16[$9 >> 1] != 10) {
         continue
        }
        break;
       };
      }
      if (HEAP32[$12_1 + 4 >> 2] == HEAP32[$12_1 + 8 >> 2]) {
       HEAP32[$12_1 + 4 >> 2] = HEAP32[$12_1 >> 2]
      }
      $7_1 = $696($8, $16_1, $17_1);
      HEAP32[$12_1 >> 2] = $7_1;
      HEAP32[$12_1 + 8 >> 2] = $7_1;
      HEAP8[$8 + 3692 | 0] = 1;
      HEAP32[$8 + 3688 >> 2] = -1097229926;
     }
     if (!(HEAPU8[$10_1 + 236 | 0] | !HEAPU8[$8 + 3693 | 0])) {
      HEAP8[$8 + 3693 | 0] = 0
     }
     $9 = $5_1 & 1024;
     label$83 : {
      label$84 : {
       label$85 : {
        if (HEAPU8[$10_1 + 252 | 0]) {
         $12_1 = HEAPU8[$10_1 + 254 | 0];
         $7_1 = !$12_1;
         if ($27_1) {
          break label$85
         }
         break label$83;
        }
        if ($27_1) {
         break label$84
        }
        $7_1 = 0;
        break label$83;
       }
       if (!$12_1) {
        break label$83
       }
      }
      $7_1 = HEAPU8[$10_1 + 255 | 0] != 0;
     }
     $12_1 = $7_1;
     label$87 : {
      if (!$9) {
       break label$87
      }
      $7_1 = HEAP32[HEAP32[18392] + 52 >> 2];
      if (($7_1 | 0) >= 0) {
       $7_1 = $174($7_1, 1)
      } else {
       $7_1 = 0
      }
      if ($28_1 | ($12_1 | $7_1 ^ 1) | HEAPU8[$10_1 + 253 | 0]) {
       break label$87
      }
      $9 = HEAP32[$10_1 + 5412 >> 2];
      $13 = $9 + (HEAP32[$10_1 + 5404 >> 2] << 1) | 0;
      label$89 : {
       while (1) {
        $7_1 = $9;
        if ($7_1 >>> 0 >= $13 >>> 0) {
         break label$89
        }
        $9 = $7_1 + 2 | 0;
        if (HEAPU16[$7_1 >> 1] != 9) {
         continue
        }
        break;
       };
       if ($7_1 >>> 0 < $13 >>> 0) {
        break label$87
       }
      }
      HEAP32[$11_1 + 88 >> 2] = 9;
      if (!$671($11_1 + 88 | 0, $5_1, $6_1, 2)) {
       break label$87
      }
      $667($8, HEAP32[$11_1 + 88 >> 2]);
     }
     if (HEAP32[$10_1 + 5404 >> 2] > 0) {
      if (!($21_1 | ($12_1 | ($28_1 | 0) != 0) | HEAP32[$10_1 + 5404 >> 2] <= 0)) {
       $7_1 = 0;
       while (1) {
        $9 = HEAPU16[HEAP32[$10_1 + 5412 >> 2] + ($7_1 << 1) >> 1];
        HEAP32[$11_1 + 88 >> 2] = $9;
        label$94 : {
         if (HEAPU8[$10_1 + 253 | 0] ? ($9 | 0) == 9 : 0) {
          break label$94
         }
         if (!$671($11_1 + 88 | 0, $5_1, $6_1, 2)) {
          break label$94
         }
         $667($8, HEAP32[$11_1 + 88 >> 2]);
        }
        $7_1 = $7_1 + 1 | 0;
        if (($7_1 | 0) < HEAP32[$10_1 + 5404 >> 2]) {
         continue
        }
        break;
       };
      }
      $7_1 = HEAP32[$10_1 + 5408 >> 2];
      label$96 : {
       if (($7_1 | 0) >= 0) {
        break label$96
       }
       $9 = $7_1 + (($7_1 | 0) / 2 | 0) | 0;
       $9 = ($9 | 0) > 0 ? $9 : 0;
       if (($7_1 | 0) >= ($9 | 0)) {
        break label$96
       }
       $7_1 = $16($9 << 1);
       $12_1 = HEAP32[$10_1 + 5412 >> 2];
       if ($12_1) {
        $1602($7_1, $12_1, HEAP32[$10_1 + 5404 >> 2] << 1);
        $17(HEAP32[$10_1 + 5412 >> 2]);
       }
       HEAP32[$10_1 + 5408 >> 2] = $9;
       HEAP32[$10_1 + 5412 >> 2] = $7_1;
      }
      HEAP32[$10_1 + 5404 >> 2] = 0;
     }
    } else {
     $31_1 = 0
    }
    $45_1 = $31_1;
    label$98 : {
     if (!($4_1 | (HEAPU8[$10_1 + 7148 | 0] | HEAP32[$10_1 + 7136 >> 2] != ($24 | 0)))) {
      $9 = $8 + 76 | 0;
      $17_1 = Math_fround(Math_fround($35_1 - HEAPF32[$10_1 + 5480 >> 2]) / HEAPF32[$10_1 + 6468 >> 2]);
      label$100 : {
       if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
        $7_1 = ~~$17_1;
        break label$100;
       }
       $7_1 = -2147483648;
      }
      $31_1 = ($7_1 | 0) <= 1 ? 1 : $7_1;
      HEAP32[$9 >> 2] = $31_1;
      $21_1 = HEAPU8[$10_1 + 177 | 0];
      $33_1 = $21_1 ? HEAP32[$10_1 + 892 >> 2] == 10 : 0;
      $7_1 = $10_1 + 253 | 0;
      $9 = ($21_1 ? 254 : 252) + $10_1 | 0;
      label$103 : {
       if (!$21_1) {
        $13 = 1;
        $15_1 = 0;
        break label$103;
       }
       if (!(HEAPU8[$10_1 + 252 | 0] | !HEAPU8[$10_1 + 255 | 0])) {
        $13 = 8;
        $15_1 = !HEAPU8[$10_1 + 254 | 0];
        break label$103;
       }
       $13 = 8;
       $15_1 = 0;
      }
      $22_1 = HEAPU8[$7_1 | 0];
      $27_1 = HEAPU8[$9 | 0];
      label$106 : {
       label$107 : {
        label$108 : {
         $9 = HEAP32[$10_1 + 892 >> 2];
         $12_1 = ($9 | 0) != ($13 | 0);
         label$109 : {
          if ($12_1) {
           break label$109
          }
          $7_1 = HEAP32[HEAP32[18392] + 128 >> 2];
          if (($7_1 | 0) < 0) {
           break label$109
          }
          if ($174($7_1, 1)) {
           break label$108
          }
         }
         $13 = 0;
         if (($9 | 0) != 2) {
          break label$106
         }
         $7_1 = HEAP32[HEAP32[18392] + 92 >> 2];
         if (($7_1 | 0) >= 0) {
          $7_1 = $174($7_1, 1)
         } else {
          $7_1 = 0
         }
         $7_1 = $7_1 ^ 1 | ($18_1 | 0) != 0 | ($28_1 | 0) != 0;
         $13 = $7_1 ^ 1;
         if ($7_1) {
          break label$106
         }
         if ($20_1) {
          break label$107
         }
         break label$106;
        }
        $7_1 = $18_1 | $28_1;
        $13 = !$7_1;
        if ($7_1 | !$20_1) {
         break label$106
        }
       }
       $13 = HEAP32[$8 - -64 >> 2] != HEAP32[$8 + 68 >> 2];
      }
      $7_1 = $13;
      label$113 : {
       label$114 : {
        label$115 : {
         label$116 : {
          label$117 : {
           if ($12_1) {
            break label$117
           }
           $13 = HEAP32[HEAP32[18392] + 120 >> 2];
           if (($13 | 0) < 0) {
            break label$117
           }
           if ($174($13, 1)) {
            break label$116
           }
          }
          $13 = 0;
          if (($9 | 0) != 1) {
           break label$113
          }
          $13 = HEAP32[HEAP32[18392] + 88 >> 2];
          if (($13 | 0) >= 0) {
           $13 = $174($13, 1)
          } else {
           $13 = 0
          }
          $13 = $13 & $32_1;
          if ($20_1) {
           break label$115
          }
          break label$113;
         }
         if (($5_1 & 67141632) == 67108864) {
          break label$114
         }
         $13 = !$18_1;
         break label$113;
        }
        if (!$13) {
         break label$113
        }
       }
       $13 = HEAP32[$8 - -64 >> 2] != HEAP32[$8 + 68 >> 2];
      }
      label$119 : {
       label$120 : {
        label$121 : {
         if ($12_1) {
          break label$121
         }
         $18_1 = HEAP32[HEAP32[18392] + 124 >> 2];
         if (($18_1 | 0) < 0) {
          break label$121
         }
         if ($174($18_1, 1)) {
          break label$120
         }
        }
        $32_1 = 0;
        if (($9 | 0) != 2) {
         break label$119
        }
        $9 = HEAP32[HEAP32[18392] + 88 >> 2];
        $32_1 = 0;
        if (($9 | 0) < 0) {
         break label$119
        }
        $32_1 = 0;
        if (!$174($9, 1)) {
         break label$119
        }
       }
       $32_1 = !$28_1;
      }
      $9 = $5_1 & 65536;
      if ($12_1) {
       $18_1 = 0
      } else {
       $25_1 = !$9;
       $18_1 = HEAP32[HEAP32[18392] + 136 >> 2];
       if (($18_1 | 0) >= 0) {
        $18_1 = $174($18_1, 1)
       } else {
        $18_1 = 0
       }
       $18_1 = $25_1 & ($18_1 & !$28_1);
      }
      label$125 : {
       label$126 : {
        label$127 : {
         if ($12_1) {
          break label$127
         }
         $46_1 = HEAP32[HEAP32[18392] + 132 >> 2];
         if (($46_1 | 0) < 0) {
          break label$127
         }
         if ($174($46_1, 1)) {
          break label$126
         }
        }
        $25_1 = 0;
        if (!$33_1) {
         break label$125
        }
        $33_1 = HEAP32[HEAP32[18392] + 136 >> 2];
        $25_1 = 0;
        if (($33_1 | 0) < 0) {
         break label$125
        }
        $25_1 = 0;
        if (!$174($33_1, 1)) {
         break label$125
        }
       }
       $25_1 = !($9 | $28_1);
      }
      $33_1 = $25_1;
      $9 = HEAP32[HEAP32[18392] + 104 >> 2];
      label$129 : {
       if (($9 | 0) >= 0) {
        $25_1 = 1;
        if ($174($9, 1)) {
         break label$129
        }
       }
       $9 = HEAP32[HEAP32[18392] + 112 >> 2];
       $25_1 = 0;
       if (($9 | 0) < 0) {
        break label$129
       }
       $25_1 = $174($9, 1);
      }
      $46_1 = $25_1;
      label$131 : {
       if ($333(0, 1) > Math_fround(0.0)) {
        $9 = HEAP32[HEAP32[18392] + 100 >> 2];
        $25_1 = 1;
        if (($9 | 0) < 0) {
         break label$131
        }
        $25_1 = 1;
        if (!$174($9, 1)) {
         break label$131
        }
       }
       $25_1 = $333(2, 1) > Math_fround(0.0);
      }
      $51_1 = $25_1;
      $9 = HEAP32[HEAP32[18392] + 108 >> 2];
      label$134 : {
       if (($9 | 0) >= 0) {
        $25_1 = 1;
        if ($174($9, 1)) {
         break label$134
        }
       }
       $25_1 = $333(1, 1) > Math_fround(0.0);
      }
      $9 = $22_1 << 22;
      label$136 : {
       label$141 : {
        $22_1 = HEAP32[HEAP32[18392] + 56 >> 2];
        if (($22_1 | 0) < 0) {
         break label$141
        }
        if (!$174($22_1, 1)) {
         break label$141
        }
        $667($8, $9 | ($15_1 ? 2097156 : $27_1 ? 2097164 : 2097152));
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       label$142 : {
        $22_1 = HEAP32[HEAP32[18392] + 60 >> 2];
        if (($22_1 | 0) < 0) {
         break label$142
        }
        if (!$174($22_1, 1)) {
         break label$142
        }
        $667($8, $9 | ($15_1 ? 2097157 : $27_1 ? 2097165 : 2097153));
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       $48_1 = !$20_1;
       $22_1 = HEAP32[HEAP32[18392] - -64 >> 2];
       if (($22_1 | 0) >= 0) {
        $22_1 = $174($22_1, 1)
       } else {
        $22_1 = 0
       }
       if (!($48_1 | !$22_1)) {
        if (HEAPU8[$10_1 + 252 | 0]) {
         $17_1 = Math_fround(HEAPF32[$29_1 + 92 >> 2] - HEAPF32[$10_1 + 6468 >> 2]);
         $307($29_1, $17_1 >= Math_fround(0.0) ? $17_1 : Math_fround(0.0));
         $9 = 0;
         $7_1 = 0;
         break label$136;
        }
        $667($8, $9 | ($15_1 ? 2097158 : 2097154));
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       $48_1 = !$20_1;
       $22_1 = HEAP32[HEAP32[18392] + 68 >> 2];
       if (($22_1 | 0) >= 0) {
        $22_1 = $174($22_1, 1)
       } else {
        $22_1 = 0
       }
       if (!($48_1 | !$22_1)) {
        if (HEAPU8[$10_1 + 252 | 0]) {
         $17_1 = Math_fround(HEAPF32[$29_1 + 92 >> 2] + HEAPF32[$10_1 + 6468 >> 2]);
         $16_1 = $306();
         $307($29_1, $16_1 > $17_1 ? $17_1 : $16_1);
         $9 = 0;
         $7_1 = 0;
         break label$136;
        }
        $667($8, $9 | ($15_1 ? 2097159 : 2097155));
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       $22_1 = !$20_1;
       $15_1 = HEAP32[HEAP32[18392] + 72 >> 2];
       if (($15_1 | 0) >= 0) {
        $15_1 = $174($15_1, 1)
       } else {
        $15_1 = 0
       }
       if (!($22_1 | !$15_1)) {
        $667($8, $9 | 2097166);
        $9 = 0;
        $14 = Math_fround($14 - Math_fround(Math_fround($31_1 | 0) * HEAPF32[$10_1 + 6468 >> 2]));
        $7_1 = 0;
        break label$136;
       }
       $22_1 = !$20_1;
       $15_1 = HEAP32[HEAP32[18392] + 76 >> 2];
       if (($15_1 | 0) >= 0) {
        $15_1 = $174($15_1, 1)
       } else {
        $15_1 = 0
       }
       if (!($22_1 | !$15_1)) {
        $667($8, $9 | 2097167);
        $9 = 0;
        $14 = Math_fround(Math_fround(Math_fround($31_1 | 0) * HEAPF32[$10_1 + 6468 >> 2]) + $14);
        $7_1 = 0;
        break label$136;
       }
       label$153 : {
        $15_1 = HEAP32[HEAP32[18392] + 80 >> 2];
        if (($15_1 | 0) < 0) {
         break label$153
        }
        if (!$174($15_1, 1)) {
         break label$153
        }
        $667($8, $9 | (HEAPU8[$10_1 + 252 | 0] ? 2097158 : 2097156));
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       label$154 : {
        $15_1 = HEAP32[HEAP32[18392] + 84 >> 2];
        if (($15_1 | 0) < 0) {
         break label$154
        }
        if (!$174($15_1, 1)) {
         break label$154
        }
        $667($8, $9 | (HEAPU8[$10_1 + 252 | 0] ? 2097159 : 2097157));
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       $15_1 = HEAP32[HEAP32[18392] + 92 >> 2];
       if (($15_1 | 0) >= 0) {
        $15_1 = $174($15_1, 1)
       } else {
        $15_1 = 0
       }
       if (!($7_1 | ($15_1 ^ 1 | ($28_1 | 0) != 0))) {
        $667($8, $9 | 2097160);
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       $15_1 = HEAP32[HEAP32[18392] + 96 >> 2];
       if (($15_1 | 0) >= 0) {
        $15_1 = $174($15_1, 1)
       } else {
        $15_1 = 0
       }
       if (!(!$15_1 | $28_1)) {
        label$159 : {
         if (HEAP32[$8 - -64 >> 2] != HEAP32[$8 + 68 >> 2]) {
          break label$159
         }
         if ($27_1) {
          $7_1 = 6291468
         } else {
          if (!$21_1 | !HEAPU8[$10_1 + 255 | 0] | (HEAPU8[$10_1 + 254 | 0] | HEAPU8[$10_1 + 252 | 0])) {
           break label$159
          }
          $7_1 = 6291460;
         }
         $667($8, $7_1);
        }
        $667($8, $9 | 2097161);
        $9 = 0;
        $7_1 = 0;
        break label$136;
       }
       label$137 : {
        label$138 : {
         if ($46_1) {
          if (!$20_1) {
           break label$137
          }
          $12_1 = HEAPU8[$10_1 + 252 | 0];
          label$162 : {
           if ($5_1 & 2048) {
            if (!$12_1) {
             break label$137
            }
            if (!$28_1) {
             break label$162
            }
            $9 = 0;
            $7_1 = 0;
            break label$136;
           }
           $9 = ($12_1 | 0) != 0;
           $7_1 = $9 | $4_1;
           if ($12_1 | $28_1) {
            break label$138
           }
          }
          HEAP32[$11_1 + 88 >> 2] = 10;
          if ($671($11_1 + 88 | 0, $5_1, $6_1, 2)) {
           $667($8, HEAP32[$11_1 + 88 >> 2])
          }
          $9 = 0;
          $7_1 = 0;
          break label$136;
         }
         if ($51_1) {
          $9 = 1;
          $4_1 = 1;
          $7_1 = 0;
          break label$136;
         }
         if ($25_1) {
          $9 = 0;
          $4_1 = 1;
          $7_1 = 1;
          break label$136;
         }
         if (($18_1 | $33_1) == 1) {
          $667($8, $18_1 ? 2097162 : 2097163);
          $7_1 = HEAP32[$8 + 60 >> 2];
          HEAP32[$8 + 68 >> 2] = $7_1;
          HEAP32[$8 - -64 >> 2] = $7_1;
          $9 = 0;
          $7_1 = 0;
          break label$136;
         }
         label$168 : {
          if ($12_1) {
           break label$168
          }
          $9 = HEAP32[HEAP32[18392] + 116 >> 2];
          if (($9 | 0) < 0) {
           break label$168
          }
          if (!$174($9, 1)) {
           break label$168
          }
          HEAP8[$8 + 3692 | 0] = 1;
          HEAP32[$8 - -64 >> 2] = 0;
          $7_1 = HEAP32[$8 + 4 >> 2];
          HEAP32[$8 + 68 >> 2] = $7_1;
          HEAP8[$8 + 82 | 0] = 0;
          HEAP32[$8 + 60 >> 2] = $7_1;
          $9 = 0;
          $7_1 = 0;
          break label$136;
         }
         $21_1 = $8 + 60 | 0;
         label$169 : {
          if (($7_1 | $13) == 1) {
           if (HEAP32[$10_1 + 212 >> 2]) {
            $9 = HEAP32[$8 - -64 >> 2];
            $12_1 = HEAP32[$8 + 68 >> 2];
            $13 = ($9 | 0) == ($12_1 | 0);
            $15_1 = $8 + 20 | 0;
            $18_1 = HEAP32[$15_1 >> 2];
            $27_1 = ($13 ? 0 : ($9 | 0) < ($12_1 | 0) ? $9 : $12_1) << 1;
            $12_1 = ($13 ? HEAP32[$8 + 4 >> 2] : ($9 | 0) > ($12_1 | 0) ? $9 : $12_1) << 1;
            $13 = $28($18_1 + $27_1 | 0, $12_1 + $18_1 | 0) + 1 | 0;
            $9 = $16($13);
            $18_1 = $13;
            $13 = HEAP32[$15_1 >> 2];
            $27($9, $18_1, $13 + $27_1 | 0, $12_1 + $13 | 0);
            $98($9);
            $17($9);
           }
           if (!$7_1) {
            break label$169
           }
           $7_1 = $8 - -64 | 0;
           $9 = $8 + 68 | 0;
           if (HEAP32[$7_1 >> 2] == HEAP32[$9 >> 2]) {
            HEAP32[$8 + 64 >> 2] = 0;
            $12_1 = HEAP32[$8 + 4 >> 2];
            HEAP32[$8 + 68 >> 2] = $12_1;
            HEAP8[$8 + 82 | 0] = 0;
            HEAP32[$8 + 60 >> 2] = $12_1;
           }
           HEAP8[$8 + 3692 | 0] = 1;
           if (HEAP32[$7_1 >> 2] == HEAP32[$9 >> 2]) {
            break label$169
           }
           $672($8, $21_1);
           HEAP8[$8 + 82 | 0] = 0;
           $9 = 0;
           $7_1 = 0;
           break label$136;
          }
          label$175 : {
           if (!$32_1) {
            break label$175
           }
           $13 = $97();
           if (!$13) {
            break label$175
           }
           $15_1 = $16(($1697($13) << 1) + 2 | 0);
           $9 = 0;
           label$176 : {
            if (!HEAPU8[$13 | 0]) {
             break label$176
            }
            $12_1 = 0;
            while (1) {
             $7_1 = $12_1;
             $18_1 = $10($11_1 + 88 | 0, $13, 0);
             $12_1 = 5;
             label$178 : {
              if (!HEAP32[$11_1 + 88 >> 2]) {
               break label$178
              }
              $12_1 = 6;
              if (!$671($11_1 + 88 | 0, $5_1, $6_1, 5)) {
               break label$178
              }
              HEAP16[$15_1 + ($7_1 << 1) >> 1] = HEAP32[$11_1 + 88 >> 2];
              $7_1 = $7_1 + 1 | 0;
              $12_1 = 0;
             }
             $9 = $7_1;
             label$181 : {
              switch ($12_1 | 0) {
              case 0:
              case 6:
               break label$181;
              default:
               break label$176;
              };
             }
             $12_1 = $7_1;
             $13 = $13 + $18_1 | 0;
             if (HEAPU8[$13 | 0]) {
              continue
             }
             break;
            };
           }
           HEAP16[$15_1 + ($9 << 1) >> 1] = 0;
           if (($9 | 0) > 0) {
            $12_1 = HEAP32[$8 + 4 >> 2];
            $7_1 = $21_1;
            $13 = HEAP32[$7_1 + 8 >> 2];
            $21_1 = HEAP32[$7_1 + 4 >> 2];
            label$12 : {
             if (($13 | 0) == ($21_1 | 0)) {
              break label$12
             }
             if (($12_1 | 0) < ($21_1 | 0)) {
              HEAP32[$7_1 + 4 >> 2] = $12_1
             }
             if (($12_1 | 0) < ($13 | 0)) {
              HEAP32[$7_1 + 8 >> 2] = $12_1
             }
             $13 = HEAP32[$7_1 + 4 >> 2];
             if (($13 | 0) != HEAP32[$7_1 + 8 >> 2]) {
              break label$12
             }
             HEAP32[$7_1 >> 2] = $13;
            }
            if (($12_1 | 0) < HEAP32[$7_1 >> 2]) {
             HEAP32[$7_1 >> 2] = $12_1
            }
            $672($8, $7_1);
            if ($676($8, HEAP32[$7_1 >> 2], $15_1, $9)) {
             $675($7_1 + 32 | 0, HEAP32[$7_1 >> 2], 0, $9);
             HEAP8[$7_1 + 22 | 0] = 0;
             HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] + $9;
            }
            HEAP8[$8 + 3692 | 0] = 1;
           }
           $17($15_1);
           $9 = 0;
           $7_1 = 0;
           break label$136;
          }
          $9 = 0;
          $7_1 = 0;
          break label$136;
         }
         $9 = 0;
         $7_1 = 0;
         break label$136;
        }
        $4_1 = $7_1;
        $7_1 = 0;
        break label$136;
       }
       $9 = 1;
       $4_1 = 1;
       $7_1 = 0;
      }
      $19 = $19 | $37 & HEAP32[$8 - -64 >> 2] != HEAP32[$8 + 68 >> 2];
      break label$98;
     }
     $7_1 = 0;
     $9 = 0;
    }
    $32_1 = $19;
    $15_1 = $4_1;
    $31_1 = $9;
    $12_1 = $7_1;
    $21_1 = $5_1 & 262144;
    $7_1 = 0;
    $9 = 0;
    if (($24 | 0) == HEAP32[$10_1 + 7136 >> 2]) {
     label$184 : {
      if ($28_1 | $12_1 ^ 1) {
       break label$184
      }
      $9 = HEAP32[$8 + 44 >> 2];
      if (!$1695($2_1, $9)) {
       $9 = 0;
       break label$184;
      }
      $4_1 = HEAP32[$8 + 36 >> 2];
      HEAP32[$11_1 + 96 >> 2] = 0;
      HEAP32[$11_1 + 88 >> 2] = 0;
      HEAP32[$11_1 + 92 >> 2] = 0;
      $13 = $4_1 - 1 | 0;
      if (($4_1 | 0) >= 2) {
       $7_1 = $9 + $13 | 0;
       $674($11_1 + 88 | 0, $26($9, $7_1) + 1 | 0);
       $25(HEAP32[$11_1 + 96 >> 2], HEAP32[$11_1 + 88 >> 2], $9, $7_1, 0);
      }
      $27_1 = HEAP32[$11_1 + 96 >> 2];
      $18_1 = HEAP32[$8 + 4 >> 2];
      $19 = ($4_1 | 0) > 1 ? HEAP32[$11_1 + 88 >> 2] - 1 | 0 : 0;
      $4_1 = $675($8 + 92 | 0, 0, $18_1, $19);
      if (!(!$4_1 | ($18_1 | 0) <= 0)) {
       $33_1 = HEAP32[$8 + 20 >> 2];
       $7_1 = 0;
       while (1) {
        $22_1 = $7_1 << 1;
        HEAP16[$22_1 + $4_1 >> 1] = HEAPU16[$22_1 + $33_1 >> 1];
        $7_1 = $7_1 + 1 | 0;
        if (($18_1 | 0) != ($7_1 | 0)) {
         continue
        }
        break;
       };
      }
      HEAP8[$8 + 3694 | 0] = 1;
      $4_1 = $8 + 20 | 0;
      $7_1 = HEAP32[$4_1 >> 2];
      $18_1 = HEAP32[$8 + 4 >> 2];
      $33_1 = $18_1 << 1;
      $22_1 = $28($7_1, $33_1 + $7_1 | 0);
      HEAP32[$8 + 8 >> 2] = HEAP32[$8 + 8 >> 2] - $22_1;
      HEAP32[$8 + 4 >> 2] = HEAP32[$8 + 4 >> 2] - $18_1;
      $4_1 = $33_1 + HEAP32[$4_1 >> 2] | 0;
      while (1) {
       $18_1 = HEAPU16[$4_1 >> 1];
       if ($18_1) {
        HEAP16[$7_1 >> 1] = $18_1;
        $7_1 = $7_1 + 2 | 0;
       }
       $4_1 = $4_1 + 2 | 0;
       if ($18_1) {
        continue
       }
       break;
      };
      HEAP16[$7_1 >> 1] = 0;
      label$193 : {
       if (($19 | 0) <= 0) {
        break label$193
       }
       if (!$676($8, 0, $27_1, $19)) {
        break label$193
       }
       HEAP32[$8 + 60 >> 2] = $19;
       HEAP8[$8 + 82 | 0] = 0;
      }
      $4_1 = HEAP32[$11_1 + 96 >> 2];
      if ($4_1) {
       $17($4_1)
      }
      $7_1 = $13;
     }
     label$195 : {
      if (!($5_1 & 32) | $31_1 ^ 1 ? $12_1 : 0) {
       break label$195
      }
      if (!$28_1) {
       HEAP8[$8 + 48 | 0] = 1;
       $4_1 = HEAP32[$8 + 28 >> 2];
       $12_1 = HEAP32[$8 + 12 >> 2] << 2 | 1;
       label$199 : {
        if (($4_1 | 0) >= ($12_1 | 0)) {
         break label$199
        }
        $13 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : 8;
        $13 = ($12_1 | 0) < ($13 | 0) ? $13 : $12_1;
        if (($4_1 | 0) >= ($13 | 0)) {
         break label$199
        }
        $4_1 = $16($13);
        $19 = HEAP32[$8 + 32 >> 2];
        if ($19) {
         $1602($4_1, $19, HEAP32[$8 + 24 >> 2]);
         $17(HEAP32[$8 + 32 >> 2]);
        }
        HEAP32[$8 + 28 >> 2] = $13;
        HEAP32[$8 + 32 >> 2] = $4_1;
       }
       HEAP32[$8 + 24 >> 2] = $12_1;
       $27(HEAP32[$8 + 32 >> 2], $12_1, HEAP32[$8 + 20 >> 2], 0);
      }
      label$203 : {
       if (!($5_1 & 524736)) {
        break label$203
       }
       label$204 : {
        label$205 : {
         if (!($5_1 & 64)) {
          break label$205
         }
         $4_1 = HEAP32[HEAP32[18392] + 52 >> 2];
         if (($4_1 | 0) < 0) {
          break label$205
         }
         if (!$174($4_1, 1)) {
          break label$205
         }
         $12_1 = 64;
         $13 = 0;
         $4_1 = 0;
         break label$204;
        }
        label$206 : {
         if (!($5_1 & 128)) {
          break label$206
         }
         label$207 : {
          $4_1 = HEAP32[HEAP32[18392] - -64 >> 2];
          if (($4_1 | 0) < 0) {
           break label$207
          }
          if (!$174($4_1, 1)) {
           break label$207
          }
          $12_1 = 128;
          $13 = 3;
          $4_1 = 0;
          break label$204;
         }
         $4_1 = HEAP32[HEAP32[18392] + 68 >> 2];
         if (($4_1 | 0) < 0) {
          break label$206
         }
         if (!$174($4_1, 1)) {
          break label$206
         }
         $12_1 = 128;
         $13 = 4;
         $4_1 = 0;
         break label$204;
        }
        if (!(!($5_1 & 524288) | !HEAPU8[$8 + 3694 | 0])) {
         $12_1 = 524288;
         $13 = 22;
         $4_1 = 0;
         break label$204;
        }
        $13 = 22;
        $12_1 = $5_1 & 256;
        $4_1 = !$12_1;
       }
       if ($4_1) {
        break label$203
       }
       $19 = $11_1 + 88 | 0;
       $693($19);
       $4_1 = $11_1 + 96 | 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$4_1 + 4 >> 2] = 0;
       $18_1 = $11_1 + 128 | 0;
       HEAP32[$18_1 >> 2] = 0;
       HEAP32[$18_1 + 4 >> 2] = 0;
       $18_1 = $19 + 32 | 0;
       HEAP32[$18_1 >> 2] = 0;
       HEAP32[$18_1 + 4 >> 2] = 0;
       $18_1 = $11_1 + 112 | 0;
       HEAP32[$18_1 >> 2] = 0;
       HEAP32[$18_1 + 4 >> 2] = 0;
       $18_1 = $11_1 + 104 | 0;
       HEAP32[$18_1 >> 2] = 0;
       HEAP32[$18_1 + 4 >> 2] = 0;
       HEAP32[$4_1 >> 2] = 0;
       HEAP32[$11_1 + 88 >> 2] = 0;
       HEAP32[$11_1 + 92 >> 2] = 0;
       HEAP32[$11_1 + 92 >> 2] = $5_1;
       HEAP32[$11_1 + 88 >> 2] = $12_1;
       HEAP32[$11_1 + 108 >> 2] = $28_1 ? $2_1 : HEAP32[$8 + 32 >> 2];
       HEAP32[$11_1 + 104 >> 2] = $13;
       HEAP32[$11_1 + 112 >> 2] = HEAP32[$8 + 8 >> 2];
       $4_1 = HEAP32[$8 + 52 >> 2];
       HEAP8[$11_1 + 120 | 0] = 0;
       HEAP32[$11_1 + 116 >> 2] = $4_1;
       $4_1 = HEAP32[$8 + 20 >> 2];
       $12_1 = $28($4_1, $4_1 + (HEAP32[$8 + 60 >> 2] << 1) | 0);
       HEAP32[$11_1 + 124 >> 2] = $12_1;
       $13 = $28($4_1, $4_1 + (HEAP32[$8 - -64 >> 2] << 1) | 0);
       HEAP32[$11_1 + 128 >> 2] = $13;
       $18_1 = $28($4_1, $4_1 + (HEAP32[$8 + 68 >> 2] << 1) | 0);
       HEAP32[$11_1 + 132 >> 2] = $18_1;
       FUNCTION_TABLE[$6_1 | 0]($19) | 0;
       $4_1 = HEAPU8[$11_1 + 120 | 0];
       $19 = HEAP32[$11_1 + 124 >> 2];
       if (!(!$4_1 & ($12_1 | 0) == ($19 | 0))) {
        $12_1 = HEAP32[$11_1 + 108 >> 2];
        $12_1 = $26($12_1, $12_1 + $19 | 0);
        HEAP8[$8 + 3692 | 0] = 1;
        HEAP32[$8 + 60 >> 2] = $12_1;
       }
       $12_1 = HEAP32[$11_1 + 128 >> 2];
       if (!(!$4_1 & ($12_1 | 0) == ($13 | 0))) {
        if (HEAP32[$11_1 + 124 >> 2] == ($12_1 | 0)) {
         $12_1 = HEAP32[$8 + 60 >> 2]
        } else {
         $13 = HEAP32[$11_1 + 108 >> 2];
         $12_1 = $26($13, $12_1 + $13 | 0);
        }
        HEAP32[$8 + 64 >> 2] = $12_1;
       }
       $12_1 = HEAP32[$11_1 + 132 >> 2];
       if (!(!$4_1 & ($12_1 | 0) == ($18_1 | 0))) {
        if (HEAP32[$11_1 + 128 >> 2] == ($12_1 | 0)) {
         $12_1 = HEAP32[$8 + 64 >> 2]
        } else {
         $13 = HEAP32[$11_1 + 108 >> 2];
         $12_1 = $26($13, $12_1 + $13 | 0);
        }
        HEAP32[$8 + 68 >> 2] = $12_1;
       }
       if (!$4_1) {
        break label$203
       }
       label$220 : {
        if (!$21_1) {
         break label$220
        }
        $4_1 = HEAP32[$11_1 + 112 >> 2];
        if (($4_1 | 0) <= ($45_1 | 0)) {
         break label$220
        }
        $12_1 = $8 + 12 | 0;
        $674($12_1, HEAP32[$12_1 >> 2] + ($4_1 - $45_1 | 0) | 0);
       }
       HEAP32[$8 + 4 >> 2] = $25(HEAP32[$8 + 20 >> 2], HEAP32[$8 + 12 >> 2], HEAP32[$11_1 + 108 >> 2], 0, 0);
       $4_1 = HEAP32[$11_1 + 112 >> 2];
       HEAP32[$8 + 3688 >> 2] = -1097229926;
       HEAP32[$8 + 8 >> 2] = $4_1;
      }
      if ($28_1) {
       break label$195
      }
      $4_1 = HEAP32[$8 + 32 >> 2];
      if (!$1695($4_1, $2_1)) {
       break label$195
      }
      $7_1 = HEAP32[$8 + 8 >> 2];
      $9 = $4_1;
     }
     HEAP32[$8 + 3696 >> 2] = 0;
    }
    $18_1 = $9;
    label$221 : {
     if (!$9) {
      $7_1 = $2_1;
      break label$221;
     }
     label$223 : {
      if (!$21_1) {
       $9 = $7_1;
       $4_1 = $3;
       break label$223;
      }
      $4_1 = $11_1 + 88 | 0;
      $693($4_1);
      HEAP32[$11_1 + 108 >> 2] = $2_1;
      HEAP32[$11_1 + 92 >> 2] = $5_1;
      HEAP32[$11_1 + 88 >> 2] = 262144;
      HEAP32[$11_1 + 96 >> 2] = 0;
      HEAP32[$11_1 + 112 >> 2] = $7_1;
      $2_1 = $7_1 + 1 | 0;
      HEAP32[$11_1 + 116 >> 2] = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
      FUNCTION_TABLE[$6_1 | 0]($4_1) | 0;
      $2_1 = HEAP32[$11_1 + 112 >> 2];
      $4_1 = HEAP32[$11_1 + 116 >> 2];
      $3 = $4_1 - 1 | 0;
      $9 = ($2_1 | 0) < ($3 | 0) ? $2_1 : $3;
      $2_1 = HEAP32[$11_1 + 108 >> 2];
     }
     $7_1 = $2_1;
     $2_1 = $9 + 1 | 0;
     $15($7_1, $18_1, ($2_1 | 0) < ($4_1 | 0) ? $2_1 : $4_1);
    }
    if (!(!$15_1 | HEAP32[$10_1 + 7136 >> 2] != ($24 | 0))) {
     $86()
    }
    if (!$20_1) {
     $73($11_1 + 152 | 0, $24, 1);
     $2_1 = HEAP32[$11_1 + 156 >> 2];
     HEAP32[$11_1 + 80 >> 2] = HEAP32[$11_1 + 152 >> 2];
     HEAP32[$11_1 + 84 >> 2] = $2_1;
     $2_1 = HEAP32[$11_1 + 164 >> 2];
     HEAP32[$11_1 + 72 >> 2] = HEAP32[$11_1 + 160 >> 2];
     HEAP32[$11_1 + 76 >> 2] = $2_1;
     $2_1 = $51(7, Math_fround(1.0));
     $17_1 = HEAPF32[$10_1 + 5484 >> 2];
     $3 = HEAP32[$11_1 + 84 >> 2];
     HEAP32[$11_1 + 16 >> 2] = HEAP32[$11_1 + 80 >> 2];
     HEAP32[$11_1 + 20 >> 2] = $3;
     $3 = HEAP32[$11_1 + 76 >> 2];
     HEAP32[$11_1 + 8 >> 2] = HEAP32[$11_1 + 72 >> 2];
     HEAP32[$11_1 + 12 >> 2] = $3;
     $71($11_1 + 16 | 0, $11_1 + 8 | 0, $2_1, 1, $17_1);
    }
    $17_1 = HEAPF32[$11_1 + 156 >> 2];
    HEAPF32[$11_1 + 60 >> 2] = $17_1;
    $16_1 = HEAPF32[$11_1 + 152 >> 2];
    HEAPF32[$11_1 + 56 >> 2] = $16_1;
    HEAPF32[$11_1 + 68 >> 2] = $35_1 + $17_1;
    HEAPF32[$11_1 + 64 >> 2] = $36_1 + $16_1;
    label$227 : {
     if ($20_1) {
      $2_1 = HEAP32[$29_1 + 212 >> 2];
      HEAP32[$11_1 + 48 >> 2] = HEAP32[$29_1 + 208 >> 2];
      HEAP32[$11_1 + 52 >> 2] = $2_1;
      break label$227;
     }
     $38_1 = HEAPF32[$10_1 + 5480 >> 2];
     HEAPF32[$11_1 + 48 >> 2] = $16_1 + HEAPF32[$10_1 + 5476 >> 2];
     HEAPF32[$11_1 + 52 >> 2] = $17_1 + $38_1;
    }
    $15_1 = $30 ? HEAP32[$8 + 32 >> 2] : $7_1;
    $9 = 0;
    $38_1 = $14;
    if ($42_1) {
     $15_1 = $1_1;
     $7_1 = $1697($1_1) + $1_1 | 0;
    } else {
     $7_1 = $9
    }
    label$231 : {
     label$232 : {
      label$233 : {
       if (($37 | $32_1) == 1) {
        $27_1 = $42_1 ? $7_1 : $15_1 + HEAP32[$8 + 8 >> 2] | 0;
        $19 = HEAP32[$8 + 20 >> 2];
        $7_1 = 0;
        $9 = -1e3;
        $4_1 = 0;
        if ($37) {
         $7_1 = $19 + (HEAP32[$8 + 60 >> 2] << 1) | 0;
         $9 = -1;
         $4_1 = 1;
        }
        $21_1 = $7_1;
        label$237 : {
         if (!$32_1) {
          $7_1 = 0;
          $3 = $4_1;
          $1_1 = -1e3;
          break label$237;
         }
         $1_1 = HEAP32[$8 - -64 >> 2];
         $2_1 = HEAP32[$8 + 68 >> 2];
         $7_1 = $19 + ((($1_1 | 0) < ($2_1 | 0) ? $1_1 : $2_1) << 1) | 0;
         $3 = $4_1 + 1 | 0;
         $1_1 = -1;
        }
        $30 = $7_1;
        $7_1 = $1_1;
        $4_1 = $9;
        $12_1 = ($20_1 >>> 26 | 0) + $3 | 0;
        $6_1 = 0;
        $1_1 = $19;
        while (1) {
         $3 = $4_1;
         $2_1 = $7_1;
         $13 = $4_1;
         $9 = $6_1;
         label$240 : {
          switch (HEAPU16[$1_1 >> 1]) {
          case 10:
           $6_1 = $6_1 + 1 | 0;
           label$242 : {
            if (($4_1 | 0) != -1) {
             $7_1 = $12_1;
             $3 = $4_1;
             break label$242;
            }
            if ($1_1 >>> 0 < $21_1 >>> 0) {
             $7_1 = $12_1;
             $3 = -1;
             break label$242;
            }
            if (($12_1 | 0) < 2) {
             $13 = $6_1;
             break label$233;
            }
            $7_1 = $12_1 - 1 | 0;
            $3 = $6_1;
           }
           label$246 : {
            label$247 : {
             if (($2_1 | 0) != -1) {
              break label$247
             }
             if ($1_1 >>> 0 < $30 >>> 0) {
              $2_1 = -1;
              break label$247;
             }
             if (($7_1 | 0) < 2) {
              $7_1 = $6_1;
              $13 = $3;
              break label$233;
             }
             $2_1 = $6_1;
             $7_1 = $7_1 - 1 | 0;
             break label$246;
            }
           }
           $12_1 = $7_1;
           break;
          case 0:
           break label$232;
          default:
           break label$240;
          };
         }
         $7_1 = $2_1;
         $4_1 = $3;
         $1_1 = $1_1 + 2 | 0;
         continue;
        };
       }
       label$251 : {
        if ($20_1) {
         $2_1 = $15_1;
         $7_1 = 0;
         while (1) {
          $12_1 = $7_1;
          $9 = 0;
          label$254 : {
           label$255 : {
            label$256 : {
             $1_1 = $2_1;
             $3 = HEAPU8[$1_1 | 0];
             switch ($3 | 0) {
             case 0:
              break label$254;
             case 10:
              break label$256;
             default:
              break label$255;
             };
            }
            $12_1 = $7_1 + 1 | 0;
           }
           $7_1 = $12_1;
           $9 = 1;
          }
          $2_1 = $1_1 + 1 | 0;
          if ($9) {
           continue
          }
          break;
         };
         $9 = $7_1;
         label$257 : {
          switch ($3 - 10 | 0) {
          default:
           $9 = $7_1 + 1 | 0;
           break;
          case 0:
          case 3:
           break label$257;
          };
         }
         $7_1 = $1_1;
         $16_1 = Math_fround(HEAPF32[$10_1 + 6468 >> 2] * Math_fround($9 | 0));
         $14 = $36_1;
         break label$251;
        }
        label$259 : {
         if ($42_1) {
          break label$259
         }
         if (($24 | 0) == HEAP32[$10_1 + 7136 >> 2]) {
          $7_1 = $15_1 + HEAP32[$8 + 8 >> 2] | 0;
          break label$259;
         }
         if ($42_1) {
          break label$259
         }
         $7_1 = $1697($15_1) + $15_1 | 0;
        }
        $16_1 = Math_fround(0.0);
        $14 = Math_fround(0.0);
       }
       $9 = 0;
       label$262 : {
        if (!$20_1) {
         $9 = $11_1 + 56 | 0;
         if (($7_1 - $15_1 | 0) > 2097151) {
          break label$262
         }
        }
        $1_1 = $51($42_1, Math_fround(1.0));
        $413(HEAP32[$29_1 + 580 >> 2], HEAP32[$10_1 + 6464 >> 2], HEAPF32[$10_1 + 6468 >> 2], $11_1 + 48 | 0, $1_1, $15_1, $7_1, Math_fround(0.0), $9);
       }
       break label$231;
      }
      $9 = $6_1;
     }
     $3 = $9 + 1 | 0;
     $4_1 = ($7_1 | 0) == -1 ? $3 : $7_1;
     $17_1 = Math_fround(0.0);
     $9 = $18($21_1, $19);
     if ($21_1 >>> 0 > $9 >>> 0) {
      $1_1 = HEAP32[18392];
      $2_1 = HEAP32[$1_1 + 6464 >> 2];
      $7_1 = $2_1 + 12 | 0;
      $43_1 = Math_fround(HEAPF32[$1_1 + 6468 >> 2] / HEAPF32[$2_1 + 16 >> 2]);
      $16_1 = Math_fround(0.0);
      $14 = Math_fround(0.0);
      while (1) {
       $1_1 = $9 + 2 | 0;
       label$266 : {
        label$267 : {
         label$268 : {
          $6_1 = HEAPU16[$9 >> 1];
          switch ($6_1 - 10 | 0) {
          case 3:
           break label$266;
          case 0:
           break label$268;
          default:
           break label$267;
          };
         }
         $14 = $16_1 >= $23_1 ? $16_1 : $23_1;
         $16_1 = $14;
         $23_1 = Math_fround(0.0);
         break label$266;
        }
        $23_1 = Math_fround($23_1 + Math_fround($43_1 * HEAPF32[(($6_1 | 0) < HEAP32[$2_1 >> 2] ? HEAP32[$2_1 + 8 >> 2] + ($6_1 << 2) | 0 : $7_1) >> 2]));
       }
       $26_1 = $14;
       $17_1 = $23_1;
       $9 = $1_1;
       if ($9 >>> 0 < $21_1 >>> 0) {
        continue
       }
       break;
      };
     }
     $40_1 = $17_1;
     $41_1 = $26_1;
     $44_1 = HEAPF32[$10_1 + 6468 >> 2];
     $14 = Math_fround(0.0);
     $16_1 = Math_fround(0.0);
     if (($4_1 | 0) >= 0) {
      $9 = $18($30, $19);
      label$270 : {
       if ($30 >>> 0 <= $9 >>> 0) {
        $26_1 = Math_fround(0.0);
        $17_1 = Math_fround(0.0);
        break label$270;
       }
       $1_1 = HEAP32[18392];
       $2_1 = HEAP32[$1_1 + 6464 >> 2];
       $7_1 = $2_1 + 12 | 0;
       $43_1 = Math_fround(HEAPF32[$1_1 + 6468 >> 2] / HEAPF32[$2_1 + 16 >> 2]);
       $23_1 = Math_fround(0.0);
       while (1) {
        $1_1 = $9 + 2 | 0;
        label$273 : {
         label$274 : {
          label$275 : {
           $6_1 = HEAPU16[$9 >> 1];
           switch ($6_1 - 10 | 0) {
           case 3:
            break label$273;
           case 0:
            break label$275;
           default:
            break label$274;
           };
          }
          $14 = $16_1 >= $23_1 ? $16_1 : $23_1;
          $16_1 = $14;
          $23_1 = Math_fround(0.0);
          break label$273;
         }
         $23_1 = Math_fround($23_1 + Math_fround($43_1 * HEAPF32[(($6_1 | 0) < HEAP32[$2_1 >> 2] ? HEAP32[$2_1 + 8 >> 2] + ($6_1 << 2) | 0 : $7_1) >> 2]));
        }
        $26_1 = $14;
        $17_1 = $23_1;
        $9 = $1_1;
        if ($9 >>> 0 < $30 >>> 0) {
         continue
        }
        break;
       };
      }
      $16_1 = Math_fround(HEAPF32[$10_1 + 6468 >> 2] * Math_fround($4_1 | 0));
      $14 = $17_1 > $26_1 ? $17_1 : $26_1;
     }
     $17_1 = $16_1;
     $26_1 = $14;
     $14 = Math_fround(0.0);
     $16_1 = Math_fround(0.0);
     if ($20_1) {
      $16_1 = Math_fround(HEAPF32[$10_1 + 6468 >> 2] * Math_fround($3 | 0));
      $14 = $36_1;
     }
     $43_1 = $16_1;
     $52_1 = $14;
     $40_1 = $40_1 > $41_1 ? $40_1 : $41_1;
     $41_1 = Math_fround($44_1 * Math_fround((($13 | 0) == -1 ? $3 : $13) | 0));
     if (!(!$37 | !HEAPU8[$8 + 3692 | 0])) {
      label$278 : {
       if (!($5_1 & 4096)) {
        $14 = Math_fround($36_1 * Math_fround(.25));
        $16_1 = HEAPF32[$8 + 56 >> 2];
        if ($40_1 < $16_1) {
         $14 = Math_fround($40_1 - $14);
         $14 = $14 <= Math_fround(0.0) ? Math_fround(0.0) : $14;
         label$281 : {
          if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
           $1_1 = ~~$14;
           break label$281;
          }
          $1_1 = -2147483648;
         }
         HEAPF32[$8 + 56 >> 2] = $1_1 | 0;
         break label$278;
        }
        $23_1 = Math_fround($40_1 - Math_fround($36_1 - HEAPF32[$10_1 + 5476 >> 2]));
        if (!($16_1 <= $23_1)) {
         break label$278
        }
        $14 = Math_fround($14 + $23_1);
        label$283 : {
         if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
          $1_1 = ~~$14;
          break label$283;
         }
         $1_1 = -2147483648;
        }
        HEAPF32[$8 + 56 >> 2] = $1_1 | 0;
        break label$278;
       }
       HEAP32[$8 + 56 >> 2] = 0;
      }
      if ($20_1) {
       $14 = Math_fround($41_1 - HEAPF32[$10_1 + 6468 >> 2]);
       label$286 : {
        if ($38_1 > $14) {
         $14 = $14 <= Math_fround(0.0) ? Math_fround(0.0) : $14;
         break label$286;
        }
        $14 = $38_1;
        $16_1 = HEAPF32[$10_1 + 5480 >> 2];
        $16_1 = Math_fround($16_1 + $16_1);
        if (!($14 <= Math_fround($41_1 - Math_fround($35_1 - $16_1)))) {
         break label$286
        }
        $14 = Math_fround($16_1 + Math_fround($41_1 - $35_1));
       }
       $1_1 = $29_1 + 92 | 0;
       $16_1 = HEAPF32[$10_1 + 5480 >> 2];
       $16_1 = Math_fround(Math_fround(Math_fround($16_1 + $16_1) + $43_1) - $35_1);
       $16_1 = $16_1 >= Math_fround(0.0) ? $16_1 : Math_fround(0.0);
       $14 = $14 < Math_fround(0.0) ? Math_fround(0.0) : $14 > $16_1 ? $16_1 : $14;
       HEAPF32[$11_1 + 52 >> 2] = HEAPF32[$11_1 + 52 >> 2] + Math_fround(HEAPF32[$1_1 >> 2] - $14);
       HEAPF32[$1_1 >> 2] = $14;
      }
      HEAP8[$8 + 3692 | 0] = 0;
     }
     $38_1 = HEAPF32[$8 + 56 >> 2];
     label$288 : {
      if (!$32_1) {
       break label$288
      }
      $1_1 = HEAP32[$8 + 68 >> 2];
      $2_1 = HEAP32[$8 - -64 >> 2];
      $4_1 = $51(47, $37 ? Math_fround(1.0) : Math_fround(.6000000238418579));
      $6_1 = ($1_1 | 0) > ($2_1 | 0) ? $2_1 : $1_1;
      $1_1 = ($1_1 | 0) < ($2_1 | 0) ? $2_1 : $1_1;
      if (($6_1 | 0) >= ($1_1 | 0)) {
       break label$288
      }
      $53_1 = $20_1 ? Math_fround(0.0) : Math_fround(2.0);
      $54_1 = $20_1 ? Math_fround(0.0) : Math_fround(-1.0);
      $3 = $19 + ($1_1 << 1) | 0;
      $12_1 = $11_1 + 96 | 0;
      $14 = Math_fround($26_1 + HEAPF32[$11_1 + 48 >> 2]);
      $16_1 = Math_fround($17_1 + HEAPF32[$11_1 + 52 >> 2]);
      $7_1 = $19 + ($6_1 << 1) | 0;
      while (1) {
       $35_1 = HEAPF32[$11_1 + 68 >> 2];
       $49 = HEAPF32[$10_1 + 6468 >> 2];
       if (Math_fround($35_1 + $49) < $16_1) {
        break label$288
       }
       $36_1 = $16_1;
       $44_1 = HEAPF32[$11_1 + 60 >> 2];
       label$290 : {
        if ($16_1 < $44_1) {
         $9 = $7_1;
         while (1) {
          $1_1 = $9;
          if ($3 >>> 0 <= $9 >>> 0) {
           $2_1 = $1_1;
           break label$290;
          }
          $9 = $1_1 + 2 | 0;
          $2_1 = $9;
          if (HEAPU16[$1_1 >> 1] != 10) {
           continue
          }
          break;
         };
         break label$290;
        }
        $39_1 = Math_fround($14 - $38_1);
        $2_1 = HEAP32[18392];
        $1_1 = HEAP32[$2_1 + 6464 >> 2];
        $6_1 = $1_1 + 12 | 0;
        $55_1 = Math_fround(HEAPF32[$2_1 + 6468 >> 2] / HEAPF32[$1_1 + 16 >> 2]);
        $23_1 = Math_fround(0.0);
        $16_1 = Math_fround(0.0);
        $14 = Math_fround(0.0);
        while (1) {
         label$294 : {
          if ($3 >>> 0 <= $7_1 >>> 0) {
           $26_1 = $23_1;
           $2_1 = $7_1;
           $17_1 = $14;
           break label$294;
          }
          $17_1 = $16_1;
          $9 = 0;
          $26_1 = $14;
          label$297 : {
           label$298 : {
            label$299 : {
             $2_1 = HEAPU16[$7_1 >> 1];
             switch ($2_1 - 10 | 0) {
             case 3:
              break label$297;
             case 0:
              break label$299;
             default:
              break label$298;
             };
            }
            $17_1 = $14 <= $16_1 ? $16_1 : $14;
            $23_1 = $17_1;
            $9 = 1;
            $26_1 = Math_fround(0.0);
            break label$297;
           }
           $26_1 = Math_fround($14 + Math_fround($55_1 * HEAPF32[(($2_1 | 0) < HEAP32[$1_1 >> 2] ? HEAP32[$1_1 + 8 >> 2] + ($2_1 << 2) | 0 : $6_1) >> 2]));
          }
          $16_1 = $17_1;
          $14 = $26_1;
          $26_1 = $23_1;
          $7_1 = $7_1 + 2 | 0;
          $2_1 = $7_1;
          $17_1 = $14;
          if (!$9) {
           continue
          }
         }
         break;
        };
        $14 = $17_1 > $26_1 ? $17_1 : $26_1;
        if ($14 <= Math_fround(0.0)) {
         $1_1 = HEAP32[$10_1 + 6464 >> 2];
         $14 = Math_fround(HEAPF32[(HEAP32[$1_1 >> 2] > 32 ? HEAP32[$1_1 + 8 >> 2] + 128 | 0 : $1_1 + 12 | 0) >> 2] * Math_fround(.5));
         label$301 : {
          if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
           $1_1 = ~~$14;
           break label$301;
          }
          $1_1 = -2147483648;
         }
         $14 = Math_fround($1_1 | 0);
        }
        $17_1 = Math_fround($39_1 + $14);
        $14 = HEAPF32[$11_1 + 64 >> 2];
        $26_1 = $14 > $17_1 ? $17_1 : $14;
        HEAPF32[$11_1 + 96 >> 2] = $26_1;
        $16_1 = Math_fround($39_1 + Math_fround(0.0));
        $17_1 = HEAPF32[$11_1 + 56 >> 2];
        $16_1 = $16_1 >= $17_1 ? $16_1 : $17_1;
        HEAPF32[$11_1 + 88 >> 2] = $16_1;
        $23_1 = Math_fround($36_1 + Math_fround($54_1 - $49));
        $23_1 = $23_1 >= $44_1 ? $23_1 : $44_1;
        HEAPF32[$11_1 + 92 >> 2] = $23_1;
        $39_1 = Math_fround($53_1 + $36_1);
        $39_1 = $35_1 > $39_1 ? $39_1 : $35_1;
        HEAPF32[$11_1 + 100 >> 2] = $39_1;
        if (!(!($39_1 > $44_1) | !($23_1 < $35_1) | (!($17_1 < $26_1) | !($14 > $16_1)))) {
         $401(HEAP32[$29_1 + 580 >> 2], $11_1 + 88 | 0, $12_1, $4_1, Math_fround(0.0), 0)
        }
       }
       $14 = HEAPF32[$11_1 + 48 >> 2];
       $16_1 = Math_fround($36_1 + HEAPF32[$10_1 + 6468 >> 2]);
       $7_1 = $2_1;
       if ($3 >>> 0 > $7_1 >>> 0) {
        continue
       }
       break;
      };
     }
     $7_1 = 0;
     label$304 : {
      if (!$20_1) {
       $7_1 = $11_1 + 56 | 0;
       if (($27_1 - $15_1 | 0) > 2097151) {
        break label$304
       }
      }
      $1_1 = $51($42_1, Math_fround(1.0));
      $14 = HEAPF32[$10_1 + 6468 >> 2];
      $2_1 = HEAP32[$10_1 + 6464 >> 2];
      $3 = HEAP32[$29_1 + 580 >> 2];
      HEAPF32[$11_1 + 92 >> 2] = HEAPF32[$11_1 + 52 >> 2];
      HEAPF32[$11_1 + 88 >> 2] = HEAPF32[$11_1 + 48 >> 2] - $38_1;
      $413($3, $2_1, $14, $11_1 + 88 | 0, $1_1, $15_1, $27_1, Math_fround(0.0), $7_1);
     }
     label$306 : {
      if (!$37) {
       break label$306
      }
      $14 = Math_fround(HEAPF32[$10_1 + 24 >> 2] + HEAPF32[$8 + 3688 >> 2]);
      HEAPF32[$8 + 3688 >> 2] = $14;
      $1_1 = 1;
      label$307 : {
       if (!HEAPU8[$10_1 + 178 | 0]) {
        break label$307
       }
       $1_1 = 1;
       if ($14 <= Math_fround(0.0)) {
        break label$307
       }
       $1_1 = $1612($14, Math_fround(1.2000000476837158)) <= Math_fround(.800000011920929);
      }
      $14 = HEAPF32[$11_1 + 48 >> 2];
      $16_1 = HEAPF32[$10_1 + 6468 >> 2];
      $3 = $11_1 + 100 | 0;
      $17_1 = Math_fround($41_1 + HEAPF32[$11_1 + 52 >> 2]);
      label$309 : {
       if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$17_1;
        break label$309;
       }
       $2_1 = -2147483648;
      }
      $17_1 = Math_fround($2_1 | 0);
      $26_1 = Math_fround($17_1 + Math_fround(-1.5));
      HEAPF32[$3 >> 2] = $26_1;
      $14 = Math_fround(Math_fround($40_1 + $14) - $38_1);
      label$311 : {
       if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$14;
        break label$311;
       }
       $2_1 = -2147483648;
      }
      $14 = Math_fround($2_1 | 0);
      HEAPF32[$11_1 + 88 >> 2] = $14;
      $23_1 = Math_fround($14 + Math_fround(1.0));
      HEAPF32[$11_1 + 96 >> 2] = $23_1;
      $16_1 = Math_fround(Math_fround($17_1 - $16_1) + Math_fround(.5));
      HEAPF32[$11_1 + 92 >> 2] = $16_1;
      if (!(!($14 < HEAPF32[$11_1 + 64 >> 2]) | (!$1_1 | !($26_1 > HEAPF32[$11_1 + 60 >> 2]) | (!($16_1 < HEAPF32[$11_1 + 68 >> 2]) | !($23_1 > HEAPF32[$11_1 + 56 >> 2]))))) {
       $1_1 = HEAP32[$29_1 + 580 >> 2];
       HEAPF32[$11_1 + 44 >> 2] = $26_1;
       HEAPF32[$11_1 + 40 >> 2] = $14;
       $399($1_1, $11_1 + 88 | 0, $11_1 + 40 | 0, $51(0, Math_fround(1.0)), Math_fround(1.0));
      }
      if ($28_1) {
       break label$306
      }
      HEAPF32[$10_1 + 12108 >> 2] = $14 + Math_fround(-1.0);
      HEAPF32[$10_1 + 12112 >> 2] = $17_1 - HEAPF32[$10_1 + 6468 >> 2];
     }
     $7_1 = $27_1;
     $14 = $52_1;
     $16_1 = $43_1;
    }
    if (!$47_1) {
     $223()
    }
    label$315 : {
     if (!$20_1) {
      break label$315
     }
     $17_1 = HEAPF32[$10_1 + 5480 >> 2];
     HEAPF32[$11_1 + 40 >> 2] = $14;
     $17_1 = Math_fround($16_1 + $17_1);
     HEAPF32[$11_1 + 44 >> 2] = $17_1;
     $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
     HEAP8[$1_1 + 140 | 0] = 1;
     if (!HEAPU8[$1_1 + 143 | 0]) {
      $2_1 = HEAP32[$1_1 + 208 >> 2];
      $3 = HEAP32[$1_1 + 212 >> 2];
      $26_1 = HEAPF32[$1_1 + 208 >> 2];
      HEAPF32[$11_1 + 100 >> 2] = $17_1 + HEAPF32[$1_1 + 212 >> 2];
      HEAPF32[$11_1 + 96 >> 2] = $14 + $26_1;
      HEAP32[$11_1 + 88 >> 2] = $2_1;
      HEAP32[$11_1 + 92 >> 2] = $3;
      $212($11_1 + 40 | 0, Math_fround(-1.0));
      $213($11_1 + 88 | 0, 0, 0, 0);
     }
     $1_1 = HEAP32[$10_1 + 7216 >> 2];
     HEAP32[$10_1 + 7216 >> 2] = $1_1 | 257;
     $211();
     HEAP32[$10_1 + 7216 >> 2] = $1_1;
     $1_1 = HEAP32[$10_1 + 7248 >> 2];
     $275();
     if (HEAP32[$10_1 + 7240 >> 2]) {
      break label$315
     }
     HEAP32[$10_1 + 7240 >> 2] = $24;
     HEAP32[$10_1 + 7244 >> 2] = $50_1;
     HEAP32[$10_1 + 7248 >> 2] = $1_1 & 128 | $34_1;
    }
    if (!(!HEAPU8[$10_1 + 12196 | 0] | $47_1 ^ 1)) {
     $341(1061, 1056);
     $64($11_1 + 48 | 0, $15_1, $7_1);
    }
    if (HEAPF32[$11_1 + 184 >> 2] > Math_fround(0.0)) {
     $14 = HEAPF32[$10_1 + 5500 >> 2];
     HEAPF32[$11_1 + 36 >> 2] = HEAPF32[$11_1 + 156 >> 2] + HEAPF32[$10_1 + 5480 >> 2];
     HEAPF32[$11_1 + 32 >> 2] = $14 + HEAPF32[$11_1 + 160 >> 2];
     $1_1 = HEAP32[$11_1 + 36 >> 2];
     HEAP32[$11_1 >> 2] = HEAP32[$11_1 + 32 >> 2];
     HEAP32[$11_1 + 4 >> 2] = $1_1;
     $63($11_1, $0_1, 0, 1);
    }
    if (!(!$18_1 | $5_1 & 134217728)) {
     $88()
    }
    $9 = $5_1 & 32 ? $31_1 : ($18_1 | 0) != 0;
   }
  }
  global$0 = $11_1 + 192 | 0;
  return $9;
 }
 
 function $634($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $12_1 = HEAP32[18392];
  $9 = HEAP32[$12_1 + 7080 >> 2];
  HEAP8[$9 + 140 | 0] = 1;
  if (!HEAPU8[$9 + 143 | 0]) {
   $301();
   $153($0_1);
   $290($3, $292());
   $9 = 0;
   if (($3 | 0) > 0) {
    $13 = HEAP32[($1_1 << 4) + 48160 >> 2];
    $10_1 = $2_1;
    $2_1 = 0;
    while (1) {
     $266($11_1);
     if ($11_1) {
      $276(Math_fround(0.0), HEAPF32[$12_1 + 5500 >> 2])
     }
     $9 = $630(19354, $1_1, $10_1, $4_1, $5_1, $6_1, $7_1, $8);
     $269();
     $291();
     $2_1 = $2_1 | $9;
     $9 = $2_1;
     $10_1 = $10_1 + $13 | 0;
     $11_1 = $11_1 + 1 | 0;
     if (($11_1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $10_1 = $9;
   $269();
   $1_1 = $62($0_1);
   if (($0_1 | 0) != ($1_1 | 0)) {
    $276(Math_fround(0.0), HEAPF32[$12_1 + 5500 >> 2]);
    $555($0_1, $1_1, 0);
   }
   $275();
  }
  return $10_1 & 1;
 }
 
 function $645($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13 = 0.0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0.0, $18_1 = 0.0, $19 = Math_fround(0), $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = 0, $29_1 = 0, $30 = Math_fround(0), $31_1 = 0, $32_1 = 0, $33_1 = 0.0, $34_1 = 0, $35_1 = Math_fround(0), $36_1 = 0, $37 = Math_fround(0), $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = Math_fround(0), $42_1 = 0;
  $28_1 = global$0 - 16 | 0;
  global$0 = $28_1;
  label$1 : {
   if (HEAP32[HEAP32[18392] + 7244 >> 2] & 128 | $7_1 & 2097152) {
    break label$1
   }
   label$3 : {
    switch ($2_1 | 0) {
    case 0:
     HEAP32[$28_1 + 12 >> 2] = HEAP8[$3 | 0];
     $15_1 = $646($0_1, $1_1, $28_1 + 12 | 0, HEAP8[$4_1 | 0], HEAP8[$5_1 | 0], $6_1, $7_1, $8);
     if ($15_1) {
      HEAP8[$3 | 0] = HEAP32[$28_1 + 12 >> 2]
     }
     break label$1;
    case 1:
     HEAP32[$28_1 + 12 >> 2] = HEAPU8[$3 | 0];
     $15_1 = $647($0_1, $1_1, $28_1 + 12 | 0, HEAPU8[$4_1 | 0], HEAPU8[$5_1 | 0], $6_1, $7_1, $8);
     if ($15_1) {
      HEAP8[$3 | 0] = HEAP32[$28_1 + 12 >> 2]
     }
     break label$1;
    case 2:
     HEAP32[$28_1 + 12 >> 2] = HEAP16[$3 >> 1];
     $15_1 = $646($0_1, $1_1, $28_1 + 12 | 0, HEAP16[$4_1 >> 1], HEAP16[$5_1 >> 1], $6_1, $7_1, $8);
     if ($15_1) {
      HEAP16[$3 >> 1] = HEAP32[$28_1 + 12 >> 2]
     }
     break label$1;
    case 3:
     HEAP32[$28_1 + 12 >> 2] = HEAPU16[$3 >> 1];
     $15_1 = $647($0_1, $1_1, $28_1 + 12 | 0, HEAPU16[$4_1 >> 1], HEAPU16[$5_1 >> 1], $6_1, $7_1, $8);
     if ($15_1) {
      HEAP16[$3 >> 1] = HEAP32[$28_1 + 12 >> 2]
     }
     break label$1;
    case 4:
     $15_1 = $646($0_1, $1_1, $3, HEAP32[$4_1 >> 2], HEAP32[$5_1 >> 2], $6_1, $7_1, $8);
     break label$1;
    case 5:
     $15_1 = $647($0_1, $1_1, $3, HEAP32[$4_1 >> 2], HEAP32[$5_1 >> 2], $6_1, $7_1, $8);
     break label$1;
    case 6:
     $29_1 = global$0 - 16 | 0;
     global$0 = $29_1;
     $14 = HEAP32[$4_1 + 4 >> 2];
     $11_1 = HEAP32[$5_1 + 4 >> 2];
     $15_1 = HEAP32[$4_1 >> 2];
     $5_1 = HEAP32[$5_1 >> 2];
     $2_1 = $14 - ($11_1 + ($15_1 >>> 0 < $5_1 >>> 0) | 0) | 0;
     $4_1 = $2_1;
     $2_1 = $2_1 >> 31;
     $20_1 = $2_1 ^ $15_1 - $5_1;
     $31_1 = $20_1 - $2_1 | 0;
     $32_1 = ($2_1 ^ $4_1) - (($2_1 >>> 0 > $20_1 >>> 0) + $2_1 | 0) | 0;
     $2_1 = $31_1 + 1 | 0;
     $4_1 = $2_1 ? $32_1 : $32_1 + 1 | 0;
     $20_1 = $7_1 & 1048576;
     $26_1 = ($20_1 >>> 18 | 0) + $0_1 | 0;
     $35_1 = HEAPF32[$26_1 + 8 >> 2];
     $9 = HEAPF32[$26_1 >> 2];
     $23_1 = Math_fround(Math_fround($35_1 - $9) + Math_fround(-4.0));
     $10_1 = Math_fround($23_1 / Math_fround(+($2_1 >>> 0) + +($4_1 | 0) * 4294967296.0));
     $2_1 = HEAP32[18392];
     $12_1 = HEAPF32[$2_1 + 5540 >> 2];
     $10_1 = $10_1 >= $12_1 ? $10_1 : $12_1;
     $19 = $10_1 < $23_1 ? $10_1 : $23_1;
     $30 = Math_fround($19 * Math_fround(.5));
     $10_1 = Math_fround($23_1 - $19);
     $26_1 = $7_1 & 32;
     if ($26_1) {
      $16_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 5548 >> 2] * Math_fround(.5)) / ($10_1 >= Math_fround(1.0) ? $10_1 : Math_fround(1.0)));
      $22_1 = $1669(Math_fround(.10000000149011612), Math_fround(1.0));
     }
     $24 = Math_fround($30 + Math_fround($9 + Math_fround(2.0)));
     $21_1 = 0;
     label$50 : {
      if (HEAP32[$2_1 + 7136 >> 2] != ($1_1 | 0)) {
       break label$50
      }
      $9 = Math_fround(0.0);
      $4_1 = 0;
      label$61 : {
       label$72 : {
        switch (HEAP32[$2_1 + 7188 >> 2] - 1 | 0) {
        case 0:
         if (!HEAPU8[$2_1 + 236 | 0]) {
          $86();
          break label$61;
         }
         if ($10_1 > Math_fround(0.0)) {
          $9 = Math_fround(Math_fround(HEAPF32[($2_1 + ($20_1 >>> 20 << 2) | 0) + 228 >> 2] - $24) / $10_1);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
         }
         $9 = $20_1 ? Math_fround(Math_fround(1.0) - $9) : $9;
         $4_1 = 1;
         break label$61;
        case 3:
         break label$72;
        default:
         break label$61;
        };
       }
       if (HEAPU8[$2_1 + 7148 | 0]) {
        HEAP8[$2_1 + 12056 | 0] = 0;
        HEAP32[$2_1 + 12052 >> 2] = 0;
       }
       $154($29_1 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
       $9 = $20_1 ? Math_fround(-HEAPF32[$29_1 + 12 >> 2]) : HEAPF32[$29_1 + 8 >> 2];
       if ($9 != Math_fround(0.0)) {
        $9 = !$32_1 & $31_1 >>> 0 < 101 | HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0) ? Math_fround(($9 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround(+($31_1 >>> 0) + +($32_1 | 0) * 4294967296.0)) : Math_fround($9 / Math_fround(100.0));
        $10_1 = HEAPF32[HEAP32[18392] + 828 >> 2];
        HEAP8[$2_1 + 12056 | 0] = 1;
        HEAPF32[$2_1 + 12052 >> 2] = HEAPF32[$2_1 + 12052 >> 2] + ($10_1 > Math_fround(0.0) ? Math_fround($9 * Math_fround(10.0)) : $9);
       }
       $12_1 = HEAPF32[$2_1 + 12052 >> 2];
       label$19 : {
        if (!(HEAPU8[$2_1 + 7148 | 0] | HEAP32[$2_1 + 7528 >> 2] != ($1_1 | 0))) {
         $86();
         $9 = Math_fround(0.0);
         break label$19;
        }
        if (!HEAPU8[$2_1 + 12056 | 0]) {
         $9 = Math_fround(0.0);
         break label$19;
        }
        $10_1 = $620(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], $15_1, $14, $5_1, $11_1, ($26_1 | 0) != 0, $22_1, $16_1);
        label$22 : {
         if (!(!(!($10_1 >= Math_fround(1.0)) | !($12_1 > Math_fround(0.0))) | !(!($10_1 <= Math_fround(0.0)) | !($12_1 < Math_fround(0.0))))) {
          $9 = Math_fround($12_1 + $10_1);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
          $31_1 = ($26_1 | 0) != 0;
          $1_1 = $621($9, $15_1, $14, $5_1, $11_1, $31_1, $22_1, $16_1);
          $4_1 = i64toi32_i32$HIGH_BITS;
          if (!($7_1 & 64)) {
           $1_1 = $622($6_1, $1_1, $4_1);
           $4_1 = i64toi32_i32$HIGH_BITS;
          }
          $10_1 = Math_fround($620($1_1, $4_1, $15_1, $14, $5_1, $11_1, $31_1, $22_1, $16_1) - $10_1);
          $27_1 = HEAPF32[$2_1 + 12052 >> 2];
          if ($12_1 > Math_fround(0.0)) {
           $12_1 = Math_fround($27_1 - ($10_1 < $12_1 ? $10_1 : $12_1));
           $4_1 = 1;
           break label$22;
          }
          $12_1 = Math_fround($27_1 - ($10_1 >= $12_1 ? $10_1 : $12_1));
          $4_1 = 1;
          break label$22;
         }
         $12_1 = Math_fround(0.0);
         $9 = $10_1;
         $4_1 = 0;
        }
        HEAP8[$2_1 + 12056 | 0] = 0;
        HEAPF32[$2_1 + 12052 >> 2] = $12_1;
       }
      }
      $21_1 = 0;
      if (!$4_1) {
       break label$50
      }
      $1_1 = $621($9, $15_1, $14, $5_1, $11_1, ($26_1 | 0) != 0, $22_1, $16_1);
      $4_1 = i64toi32_i32$HIGH_BITS;
      if (!($7_1 & 64)) {
       $1_1 = $622($6_1, $1_1, $4_1);
       $4_1 = i64toi32_i32$HIGH_BITS;
      }
      $2_1 = HEAP32[$3 >> 2];
      $6_1 = HEAP32[$3 + 4 >> 2];
      if (!(($1_1 | 0) != ($2_1 | 0) | ($4_1 | 0) != ($6_1 | 0))) {
       $21_1 = ($1_1 | 0) != ($2_1 | 0) | ($4_1 | 0) != ($6_1 | 0);
       break label$50;
      }
      HEAP32[$3 >> 2] = $1_1;
      HEAP32[$3 + 4 >> 2] = $4_1;
      $21_1 = 1;
     }
     $2_1 = $21_1;
     label$32 : {
      if ($23_1 < Math_fround(1.0)) {
       $1_1 = HEAP32[$0_1 + 4 >> 2];
       $0_1 = HEAP32[$0_1 >> 2];
       HEAP32[$8 + 8 >> 2] = $0_1;
       HEAP32[$8 + 12 >> 2] = $1_1;
       HEAP32[$8 >> 2] = $0_1;
       HEAP32[$8 + 4 >> 2] = $1_1;
       break label$32;
      }
      $10_1 = Math_fround(-$19);
      $9 = $620(HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], $15_1, $14, $5_1, $11_1, ($26_1 | 0) != 0, $22_1, $16_1);
      $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($35_1 + Math_fround(-2.0)) - $30) - $24) * ($20_1 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $24);
      if (!$20_1) {
       $12_1 = HEAPF32[$0_1 + 12 >> 2];
       $16_1 = HEAPF32[$0_1 + 4 >> 2];
       HEAPF32[$8 + 8 >> 2] = Math_fround($19 * Math_fround(.5)) + $9;
       HEAPF32[$8 + 4 >> 2] = $16_1 + Math_fround(2.0);
       HEAPF32[$8 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
       HEAPF32[$8 + 12 >> 2] = $12_1 + Math_fround(-2.0);
       break label$32;
      }
      $12_1 = HEAPF32[$0_1 >> 2];
      $16_1 = HEAPF32[$0_1 + 8 >> 2];
      HEAPF32[$8 + 12 >> 2] = Math_fround($19 * Math_fround(.5)) + $9;
      HEAPF32[$8 + 8 >> 2] = $16_1 + Math_fround(-2.0);
      HEAPF32[$8 + 4 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
      HEAPF32[$8 >> 2] = $12_1 + Math_fround(2.0);
     }
     global$0 = $29_1 + 16 | 0;
     $15_1 = $2_1;
     break label$1;
    case 7:
     $15_1 = $1_1;
     $38_1 = global$0 - 16 | 0;
     global$0 = $38_1;
     $1_1 = HEAP32[$5_1 >> 2];
     $2_1 = HEAP32[$4_1 >> 2];
     $26_1 = $1_1 - $2_1 | 0;
     $11_1 = $1_1 >>> 0 > $2_1 >>> 0;
     $14 = HEAP32[$4_1 + 4 >> 2];
     $5_1 = HEAP32[$5_1 + 4 >> 2];
     $29_1 = $11_1 & ($14 | 0) == ($5_1 | 0) | $5_1 >>> 0 > $14 >>> 0;
     $25_1 = $29_1 ? $26_1 : $2_1 - $1_1 | 0;
     $4_1 = $0_1;
     $31_1 = $7_1 & 1048576;
     $0_1 = $0_1 + ($31_1 >>> 18 | 0) | 0;
     $27_1 = HEAPF32[$0_1 + 8 >> 2];
     $10_1 = HEAPF32[$0_1 >> 2];
     $22_1 = Math_fround(Math_fround($27_1 - $10_1) + Math_fround(-4.0));
     $20_1 = HEAP32[18392];
     $9 = HEAPF32[$20_1 + 5540 >> 2];
     $32_1 = $5_1 - (($1_1 >>> 0 < $2_1 >>> 0) + $14 | 0) | 0;
     $0_1 = $29_1 ? $32_1 : $14 - ($5_1 + $11_1 | 0) | 0;
     if (($0_1 | 0) > 0 | ($0_1 | 0) >= 0) {
      $11_1 = $25_1 + 1 | 0;
      $36_1 = $11_1 ? $0_1 : $0_1 + 1 | 0;
      $12_1 = Math_fround($22_1 / Math_fround(+($11_1 >>> 0) + +($36_1 | 0) * 4294967296.0));
      $9 = $9 <= $12_1 ? $12_1 : $9;
     }
     $23_1 = $9 < $22_1 ? $9 : $22_1;
     $30 = Math_fround($23_1 * Math_fround(.5));
     $36_1 = $7_1 & 32;
     if ($36_1) {
      $16_1 = $1669(Math_fround(.10000000149011612), Math_fround(1.0))
     }
     $24 = Math_fround($30 + Math_fround($10_1 + Math_fround(2.0)));
     $21_1 = 0;
     label$60 : {
      if (HEAP32[$20_1 + 7136 >> 2] != ($15_1 | 0)) {
       break label$60
      }
      $9 = Math_fround(0.0);
      $11_1 = 0;
      label$71 : {
       label$82 : {
        switch (HEAP32[$20_1 + 7188 >> 2] - 1 | 0) {
        case 0:
         if (!HEAPU8[$20_1 + 236 | 0]) {
          $86();
          break label$71;
         }
         $10_1 = Math_fround($22_1 - $23_1);
         if ($10_1 > Math_fround(0.0)) {
          $9 = Math_fround(Math_fround(HEAPF32[($20_1 + ($31_1 >>> 20 << 2) | 0) + 228 >> 2] - $24) / $10_1);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
         }
         $9 = $31_1 ? Math_fround(Math_fround(1.0) - $9) : $9;
         $11_1 = 1;
         break label$71;
        case 3:
         break label$82;
        default:
         break label$71;
        };
       }
       if (HEAPU8[$20_1 + 7148 | 0]) {
        HEAP8[$20_1 + 12056 | 0] = 0;
        HEAP32[$20_1 + 12052 >> 2] = 0;
       }
       $154($38_1 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
       $9 = $31_1 ? Math_fround(-HEAPF32[$38_1 + 12 >> 2]) : HEAPF32[$38_1 + 8 >> 2];
       if ($9 != Math_fround(0.0)) {
        $10_1 = Math_fround(($9 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround(+($25_1 >>> 0) + +($0_1 | 0) * 4294967296.0));
        $34_1 = $0_1 + 1 | 0;
        $21_1 = $0_1;
        $0_1 = $25_1 + 100 | 0;
        $9 = !($0_1 >>> 0 < 100 ? $34_1 : $21_1) & $0_1 >>> 0 < 201 | HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0) ? $10_1 : Math_fround($9 / Math_fround(100.0));
        $10_1 = HEAPF32[HEAP32[18392] + 828 >> 2];
        HEAP8[$20_1 + 12056 | 0] = 1;
        HEAPF32[$20_1 + 12052 >> 2] = HEAPF32[$20_1 + 12052 >> 2] + ($10_1 > Math_fround(0.0) ? Math_fround($9 * Math_fround(10.0)) : $9);
       }
       $12_1 = HEAPF32[$20_1 + 12052 >> 2];
       label$20 : {
        if (!(HEAPU8[$20_1 + 7148 | 0] | HEAP32[$20_1 + 7528 >> 2] != ($15_1 | 0))) {
         $86();
         $9 = Math_fround(0.0);
         break label$20;
        }
        if (!HEAPU8[$20_1 + 12056 | 0]) {
         $9 = Math_fround(0.0);
         break label$20;
        }
        $25_1 = ($1_1 | 0) == ($2_1 | 0) & ($5_1 | 0) == ($14 | 0);
        $9 = Math_fround(0.0);
        label$23 : {
         if ($25_1) {
          break label$23
         }
         $34_1 = $29_1 ? $2_1 : $1_1;
         $40_1 = $34_1;
         $15_1 = HEAP32[$3 >> 2];
         $11_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
         $21_1 = $11_1 ? $2_1 : $1_1;
         $0_1 = HEAP32[$3 + 4 >> 2];
         $11_1 = $11_1 ? $14 : $5_1;
         $39_1 = ($0_1 | 0) == ($11_1 | 0) & $15_1 >>> 0 < $21_1 >>> 0 | $0_1 >>> 0 < $11_1 >>> 0;
         $42_1 = $39_1 ? $15_1 : $21_1;
         $21_1 = $29_1 ? $14 : $5_1;
         $34_1 = ($21_1 | 0) == ($0_1 | 0) & $15_1 >>> 0 < $34_1 >>> 0 | $0_1 >>> 0 < $21_1 >>> 0;
         $15_1 = $34_1 ? $40_1 : $42_1;
         $0_1 = $34_1 ? $21_1 : $39_1 ? $0_1 : $11_1;
         if ($36_1) {
          $13 = +$16_1;
          $11_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
          $17_1 = +(($11_1 ? $1_1 : $2_1) >>> 0) + +(($11_1 ? $5_1 : $14) >>> 0) * 4294967296.0;
          $17_1 = $13 > $17_1 ? $13 : $17_1;
          $18_1 = +($15_1 >>> 0) + +($0_1 >>> 0) * 4294967296.0;
          $9 = Math_fround(0.0);
          label$25 : {
           if ($17_1 >= $18_1) {
            break label$25
           }
           $0_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 > $2_1 >>> 0 | $5_1 >>> 0 > $14 >>> 0;
           $33_1 = +(($0_1 ? $1_1 : $2_1) >>> 0) + +(($0_1 ? $5_1 : $14) >>> 0) * 4294967296.0;
           $13 = $13 > $33_1 ? $13 : $33_1;
           $9 = Math_fround(1.0);
           if ($13 <= $18_1) {
            break label$25
           }
           $9 = Math_fround($1637($18_1 / $17_1) / $1637($13 / $17_1));
          }
          $9 = $11_1 ? Math_fround(Math_fround(1.0) - $9) : $9;
          break label$23;
         }
         $9 = Math_fround((+($15_1 - $2_1 >>> 0) + +($0_1 - (($2_1 >>> 0 > $15_1 >>> 0) + $14 | 0) | 0) * 4294967296.0) / (+($26_1 >>> 0) + +($32_1 | 0) * 4294967296.0));
        }
        label$26 : {
         if (!(!(!($9 >= Math_fround(1.0)) | !($12_1 > Math_fround(0.0))) | !(!($9 <= Math_fround(0.0)) | !($12_1 < Math_fround(0.0))))) {
          $10_1 = Math_fround($12_1 + $9);
          $10_1 = $10_1 < Math_fround(0.0) ? Math_fround(0.0) : $10_1 > Math_fround(1.0) ? Math_fround(1.0) : $10_1;
          $0_1 = $2_1;
          $11_1 = $14;
          label$30 : {
           if ($25_1) {
            break label$30
           }
           if ($36_1) {
            $11_1 = $14;
            if ($10_1 <= Math_fround(0.0)) {
             break label$30
            }
            $0_1 = $1_1;
            $11_1 = $5_1;
            if ($10_1 >= Math_fround(1.0)) {
             break label$30
            }
            $13 = +$16_1;
            $17_1 = +($1_1 >>> 0) + +($5_1 >>> 0) * 4294967296.0;
            $17_1 = $13 > $17_1 ? $13 : $17_1;
            $18_1 = +($2_1 >>> 0) + +($14 >>> 0) * 4294967296.0;
            $13 = $13 > $18_1 ? $13 : $18_1;
            $0_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
            $18_1 = $0_1 ? $17_1 : $13;
            $13 = $18_1 * $1656(($0_1 ? $13 : $17_1) / $18_1, +($0_1 ? Math_fround(Math_fround(1.0) - $10_1) : $10_1));
            if ($13 < 18446744073709551615.0 & $13 >= 0.0) {
             $0_1 = ~~$13 >>> 0;
             $11_1 = Math_abs($13) >= 1.0 ? ~~($13 > 0.0 ? Math_min(Math_floor($13 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($13 - +(~~$13 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
             break label$30;
            }
            $0_1 = 0;
            $11_1 = 0;
            break label$30;
           }
           $0_1 = $1_1;
           $11_1 = $5_1;
           if (!($10_1 < Math_fround(1.0))) {
            break label$30
           }
           $13 = (($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0 ? -.5 : .5) + +Math_fround($10_1 * Math_fround(+($26_1 >>> 0) + +($32_1 | 0) * 4294967296.0));
           label$35 : {
            if (Math_abs($13) < 9223372036854775808.0) {
             $11_1 = Math_abs($13) >= 1.0 ? ~~($13 > 0.0 ? Math_min(Math_floor($13 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($13 - +(~~$13 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
             $0_1 = ~~$13 >>> 0;
             break label$35;
            }
            $11_1 = -2147483648;
            $0_1 = 0;
           }
           $15_1 = $14 + $11_1 | 0;
           $0_1 = $0_1 + $2_1 | 0;
           $11_1 = $0_1 >>> 0 < $2_1 >>> 0 ? $15_1 + 1 | 0 : $15_1;
          }
          if (!($7_1 & 64)) {
           $0_1 = $622($6_1, $0_1, $11_1);
           $11_1 = i64toi32_i32$HIGH_BITS;
          }
          $19 = Math_fround(0.0);
          label$39 : {
           if ($25_1) {
            break label$39
           }
           $21_1 = $29_1 ? $2_1 : $1_1;
           $40_1 = $21_1;
           $15_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
           $25_1 = $15_1 ? $2_1 : $1_1;
           $15_1 = $15_1 ? $14 : $5_1;
           $34_1 = ($15_1 | 0) == ($11_1 | 0) & $0_1 >>> 0 < $25_1 >>> 0 | $15_1 >>> 0 > $11_1 >>> 0;
           $39_1 = $34_1 ? $0_1 : $25_1;
           $25_1 = $29_1 ? $14 : $5_1;
           $21_1 = ($25_1 | 0) == ($11_1 | 0) & $0_1 >>> 0 < $21_1 >>> 0 | $11_1 >>> 0 < $25_1 >>> 0;
           $0_1 = $21_1 ? $40_1 : $39_1;
           $15_1 = $21_1 ? $25_1 : $34_1 ? $11_1 : $15_1;
           if ($36_1) {
            $13 = +$16_1;
            $11_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
            $17_1 = +(($11_1 ? $1_1 : $2_1) >>> 0) + +(($11_1 ? $5_1 : $14) >>> 0) * 4294967296.0;
            $17_1 = $13 > $17_1 ? $13 : $17_1;
            $18_1 = +($0_1 >>> 0) + +($15_1 >>> 0) * 4294967296.0;
            $19 = Math_fround(0.0);
            label$41 : {
             if ($17_1 >= $18_1) {
              break label$41
             }
             $0_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 > $2_1 >>> 0 | $5_1 >>> 0 > $14 >>> 0;
             $33_1 = +(($0_1 ? $1_1 : $2_1) >>> 0) + +(($0_1 ? $5_1 : $14) >>> 0) * 4294967296.0;
             $13 = $13 > $33_1 ? $13 : $33_1;
             $19 = Math_fround(1.0);
             if ($13 <= $18_1) {
              break label$41
             }
             $19 = Math_fround($1637($18_1 / $17_1) / $1637($13 / $17_1));
            }
            $19 = $11_1 ? Math_fround(Math_fround(1.0) - $19) : $19;
            break label$39;
           }
           $19 = Math_fround((+($0_1 - $2_1 >>> 0) + +($15_1 - (($0_1 >>> 0 < $2_1 >>> 0) + $14 | 0) | 0) * 4294967296.0) / (+($26_1 >>> 0) + +($32_1 | 0) * 4294967296.0));
          }
          $9 = Math_fround($19 - $9);
          $19 = HEAPF32[$20_1 + 12052 >> 2];
          if ($12_1 > Math_fround(0.0)) {
           $19 = Math_fround($19 - ($9 < $12_1 ? $9 : $12_1));
           $9 = $10_1;
           $11_1 = 1;
           break label$26;
          }
          $19 = Math_fround($19 - ($9 >= $12_1 ? $9 : $12_1));
          $9 = $10_1;
          $11_1 = 1;
          break label$26;
         }
         $11_1 = 0;
        }
        HEAP8[$20_1 + 12056 | 0] = 0;
        HEAPF32[$20_1 + 12052 >> 2] = $19;
       }
      }
      $21_1 = 0;
      if (!$11_1) {
       break label$60
      }
      $0_1 = $2_1;
      $11_1 = $14;
      label$43 : {
       if (($1_1 | 0) == ($2_1 | 0) & ($5_1 | 0) == ($14 | 0)) {
        break label$43
       }
       if ($36_1) {
        $11_1 = $14;
        if ($9 <= Math_fround(0.0)) {
         break label$43
        }
        $0_1 = $1_1;
        $11_1 = $5_1;
        if ($9 >= Math_fround(1.0)) {
         break label$43
        }
        $13 = +$16_1;
        $17_1 = +($1_1 >>> 0) + +($5_1 >>> 0) * 4294967296.0;
        $17_1 = $13 > $17_1 ? $13 : $17_1;
        $18_1 = +($2_1 >>> 0) + +($14 >>> 0) * 4294967296.0;
        $13 = $13 > $18_1 ? $13 : $18_1;
        $0_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
        $18_1 = $0_1 ? $17_1 : $13;
        $13 = $18_1 * $1656(($0_1 ? $13 : $17_1) / $18_1, +($0_1 ? Math_fround(Math_fround(1.0) - $9) : $9));
        if ($13 < 18446744073709551615.0 & $13 >= 0.0) {
         $0_1 = ~~$13 >>> 0;
         $11_1 = Math_abs($13) >= 1.0 ? ~~($13 > 0.0 ? Math_min(Math_floor($13 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($13 - +(~~$13 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
         break label$43;
        }
        $0_1 = 0;
        $11_1 = 0;
        break label$43;
       }
       $0_1 = $1_1;
       $11_1 = $5_1;
       if (!($9 < Math_fround(1.0))) {
        break label$43
       }
       $13 = (($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0 ? -.5 : .5) + +Math_fround($9 * Math_fround(+($26_1 >>> 0) + +($32_1 | 0) * 4294967296.0));
       label$48 : {
        if (Math_abs($13) < 9223372036854775808.0) {
         $11_1 = Math_abs($13) >= 1.0 ? ~~($13 > 0.0 ? Math_min(Math_floor($13 * 2.3283064365386963e-10), 4294967295.0) : Math_ceil(($13 - +(~~$13 >>> 0 >>> 0)) * 2.3283064365386963e-10)) >>> 0 : 0;
         $0_1 = ~~$13 >>> 0;
         break label$48;
        }
        $11_1 = -2147483648;
        $0_1 = 0;
       }
       $15_1 = $14 + $11_1 | 0;
       $0_1 = $0_1 + $2_1 | 0;
       $11_1 = $0_1 >>> 0 < $2_1 >>> 0 ? $15_1 + 1 | 0 : $15_1;
      }
      if (!($7_1 & 64)) {
       $0_1 = $622($6_1, $0_1, $11_1);
       $11_1 = i64toi32_i32$HIGH_BITS;
      }
      $6_1 = HEAP32[$3 >> 2];
      $7_1 = HEAP32[$3 + 4 >> 2];
      if (!(($0_1 | 0) != ($6_1 | 0) | ($11_1 | 0) != ($7_1 | 0))) {
       $21_1 = ($0_1 | 0) != ($6_1 | 0) | ($7_1 | 0) != ($11_1 | 0);
       break label$60;
      }
      HEAP32[$3 >> 2] = $0_1;
      HEAP32[$3 + 4 >> 2] = $11_1;
      $21_1 = 1;
     }
     $11_1 = $21_1;
     label$53 : {
      if ($22_1 < Math_fround(1.0)) {
       $0_1 = HEAP32[$4_1 + 4 >> 2];
       $1_1 = HEAP32[$4_1 >> 2];
       HEAP32[$8 + 8 >> 2] = $1_1;
       HEAP32[$8 + 12 >> 2] = $0_1;
       HEAP32[$8 >> 2] = $1_1;
       HEAP32[$8 + 4 >> 2] = $0_1;
       break label$53;
      }
      $10_1 = Math_fround(-$23_1);
      $12_1 = Math_fround(Math_fround(Math_fround($27_1 + Math_fround(-2.0)) - $30) - $24);
      $9 = Math_fround(0.0);
      label$55 : {
       if (($1_1 | 0) == ($2_1 | 0) & ($5_1 | 0) == ($14 | 0)) {
        break label$55
       }
       $20_1 = $29_1 ? $2_1 : $1_1;
       $6_1 = HEAP32[$3 >> 2];
       $7_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
       $15_1 = $7_1 ? $2_1 : $1_1;
       $0_1 = HEAP32[$3 + 4 >> 2];
       $7_1 = $7_1 ? $14 : $5_1;
       $25_1 = ($0_1 | 0) == ($7_1 | 0) & $6_1 >>> 0 < $15_1 >>> 0 | $0_1 >>> 0 < $7_1 >>> 0;
       $3 = $25_1 ? $6_1 : $15_1;
       $15_1 = $29_1 ? $14 : $5_1;
       $6_1 = ($15_1 | 0) == ($0_1 | 0) & $6_1 >>> 0 < $20_1 >>> 0 | $0_1 >>> 0 < $15_1 >>> 0;
       $3 = $6_1 ? $20_1 : $3;
       $0_1 = $6_1 ? $15_1 : $25_1 ? $0_1 : $7_1;
       if ($36_1) {
        $13 = +$16_1;
        $6_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 < $2_1 >>> 0 | $5_1 >>> 0 < $14 >>> 0;
        $17_1 = +(($6_1 ? $1_1 : $2_1) >>> 0) + +(($6_1 ? $5_1 : $14) >>> 0) * 4294967296.0;
        $17_1 = $13 > $17_1 ? $13 : $17_1;
        $18_1 = +($3 >>> 0) + +($0_1 >>> 0) * 4294967296.0;
        $9 = Math_fround(0.0);
        label$57 : {
         if ($17_1 >= $18_1) {
          break label$57
         }
         $0_1 = ($5_1 | 0) == ($14 | 0) & $1_1 >>> 0 > $2_1 >>> 0 | $5_1 >>> 0 > $14 >>> 0;
         $33_1 = +(($0_1 ? $1_1 : $2_1) >>> 0) + +(($0_1 ? $5_1 : $14) >>> 0) * 4294967296.0;
         $13 = $13 > $33_1 ? $13 : $33_1;
         $9 = Math_fround(1.0);
         if ($13 <= $18_1) {
          break label$57
         }
         $9 = Math_fround($1637($18_1 / $17_1) / $1637($13 / $17_1));
        }
        $9 = $6_1 ? Math_fround(Math_fround(1.0) - $9) : $9;
        break label$55;
       }
       $9 = Math_fround((+($3 - $2_1 >>> 0) + +($0_1 - (($2_1 >>> 0 > $3 >>> 0) + $14 | 0) | 0) * 4294967296.0) / (+($26_1 >>> 0) + +($32_1 | 0) * 4294967296.0));
      }
      $9 = Math_fround(Math_fround($12_1 * ($31_1 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $24);
      if (!$31_1) {
       $12_1 = HEAPF32[$4_1 + 12 >> 2];
       $16_1 = HEAPF32[$4_1 + 4 >> 2];
       HEAPF32[$8 + 8 >> 2] = Math_fround($23_1 * Math_fround(.5)) + $9;
       HEAPF32[$8 + 4 >> 2] = $16_1 + Math_fround(2.0);
       HEAPF32[$8 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
       HEAPF32[$8 + 12 >> 2] = $12_1 + Math_fround(-2.0);
       break label$53;
      }
      $12_1 = HEAPF32[$4_1 >> 2];
      $16_1 = HEAPF32[$4_1 + 8 >> 2];
      HEAPF32[$8 + 12 >> 2] = Math_fround($23_1 * Math_fround(.5)) + $9;
      HEAPF32[$8 + 8 >> 2] = $16_1 + Math_fround(-2.0);
      HEAPF32[$8 + 4 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
      HEAPF32[$8 >> 2] = $12_1 + Math_fround(2.0);
     }
     global$0 = $38_1 + 16 | 0;
     $15_1 = $11_1;
     break label$1;
    case 8:
     $14 = global$0 - 16 | 0;
     global$0 = $14;
     $15_1 = $7_1 & 1048576;
     $2_1 = ($15_1 >>> 18 | 0) + $0_1 | 0;
     $41_1 = HEAPF32[$2_1 + 8 >> 2];
     $27_1 = HEAPF32[$2_1 >> 2];
     $24 = Math_fround(Math_fround($41_1 - $27_1) + Math_fround(-4.0));
     $2_1 = HEAP32[18392];
     $10_1 = HEAPF32[$2_1 + 5540 >> 2];
     $16_1 = HEAPF32[$5_1 >> 2];
     $22_1 = HEAPF32[$4_1 >> 2];
     $9 = $16_1 > $22_1 ? Math_fround($16_1 - $22_1) : Math_fround($22_1 - $16_1);
     if (!(!($9 >= Math_fround(0.0)) | 1)) {
      $12_1 = Math_fround($24 / Math_fround($9 + Math_fround(1.0)));
      $10_1 = $10_1 <= $12_1 ? $12_1 : $10_1;
     }
     $30 = $10_1 < $24 ? $10_1 : $24;
     $35_1 = Math_fround($30 * Math_fround(.5));
     $12_1 = Math_fround($24 - $30);
     $4_1 = $7_1 & 32;
     if ($4_1) {
      $5_1 = $615($6_1);
      $23_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 5548 >> 2] * Math_fround(.5)) / ($12_1 >= Math_fround(1.0) ? $12_1 : Math_fround(1.0)));
      $19 = $1669(Math_fround(.10000000149011612), Math_fround($5_1 | 0));
     }
     $27_1 = Math_fround($35_1 + Math_fround($27_1 + Math_fround(2.0)));
     $11_1 = 0;
     label$62 : {
      if (HEAP32[$2_1 + 7136 >> 2] != ($1_1 | 0)) {
       break label$62
      }
      $10_1 = Math_fround(0.0);
      $5_1 = 0;
      label$73 : {
       label$84 : {
        switch (HEAP32[$2_1 + 7188 >> 2] - 1 | 0) {
        case 0:
         if (!HEAPU8[$2_1 + 236 | 0]) {
          $86();
          break label$73;
         }
         $9 = Math_fround(0.0);
         if ($12_1 > Math_fround(0.0)) {
          $9 = Math_fround(Math_fround(HEAPF32[($2_1 + ($15_1 >>> 20 << 2) | 0) + 228 >> 2] - $27_1) / $12_1);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
         }
         $10_1 = $15_1 ? Math_fround(Math_fround(1.0) - $9) : $9;
         $5_1 = 1;
         break label$73;
        case 3:
         break label$84;
        default:
         break label$73;
        };
       }
       if (HEAPU8[$2_1 + 7148 | 0]) {
        HEAP8[$2_1 + 12056 | 0] = 0;
        HEAP32[$2_1 + 12052 >> 2] = 0;
       }
       $154($14 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
       $10_1 = $15_1 ? Math_fround(-HEAPF32[$14 + 12 >> 2]) : HEAPF32[$14 + 8 >> 2];
       if ($10_1 != Math_fround(0.0)) {
        label$15 : {
         if (($615($6_1) | 0) > 0) {
          $9 = Math_fround($10_1 / Math_fround(100.0));
          $12_1 = $9;
          if (!(HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0))) {
           break label$15
          }
          $12_1 = Math_fround($9 / Math_fround(10.0));
          break label$15;
         }
         $12_1 = Math_fround(($10_1 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / $9);
         if ($9 <= Math_fround(100.0) & $9 >= Math_fround(-100.0) | HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0)) {
          break label$15
         }
         $12_1 = Math_fround($10_1 / Math_fround(100.0));
        }
        $9 = $12_1;
        $10_1 = HEAPF32[HEAP32[18392] + 828 >> 2];
        HEAP8[$2_1 + 12056 | 0] = 1;
        HEAPF32[$2_1 + 12052 >> 2] = HEAPF32[$2_1 + 12052 >> 2] + ($10_1 > Math_fround(0.0) ? Math_fround($9 * Math_fround(10.0)) : $9);
       }
       $10_1 = HEAPF32[$2_1 + 12052 >> 2];
       label$21 : {
        if (!(HEAPU8[$2_1 + 7148 | 0] | HEAP32[$2_1 + 7528 >> 2] != ($1_1 | 0))) {
         $86();
         $9 = Math_fround(0.0);
         break label$21;
        }
        if (!HEAPU8[$2_1 + 12056 | 0]) {
         $9 = Math_fround(0.0);
         break label$21;
        }
        $12_1 = $624(HEAPF32[$3 >> 2], $22_1, $16_1, ($4_1 | 0) != 0, $19, $23_1);
        label$24 : {
         if (!(!(!($12_1 >= Math_fround(1.0)) | !($10_1 > Math_fround(0.0))) | !(!($12_1 <= Math_fround(0.0)) | !($10_1 < Math_fround(0.0))))) {
          $9 = Math_fround($10_1 + $12_1);
          $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
          $1_1 = ($4_1 | 0) != 0;
          $37 = $625($9, $22_1, $16_1, $1_1, $19, $23_1);
          if (!($7_1 & 64)) {
           $37 = $626($6_1, $37)
          }
          $12_1 = Math_fround($624($37, $22_1, $16_1, $1_1, $19, $23_1) - $12_1);
          $37 = HEAPF32[$2_1 + 12052 >> 2];
          if ($10_1 > Math_fround(0.0)) {
           $10_1 = Math_fround($37 - ($10_1 > $12_1 ? $12_1 : $10_1));
           $5_1 = 1;
           break label$24;
          }
          $10_1 = Math_fround($37 - ($10_1 <= $12_1 ? $12_1 : $10_1));
          $5_1 = 1;
          break label$24;
         }
         $10_1 = Math_fround(0.0);
         $9 = $12_1;
         $5_1 = 0;
        }
        HEAP8[$2_1 + 12056 | 0] = 0;
        HEAPF32[$2_1 + 12052 >> 2] = $10_1;
       }
       $10_1 = $9;
      }
      $11_1 = 0;
      if (!$5_1) {
       break label$62
      }
      $9 = $625($10_1, $22_1, $16_1, ($4_1 | 0) != 0, $19, $23_1);
      if (!($7_1 & 64)) {
       $9 = $626($6_1, $9)
      }
      $10_1 = HEAPF32[$3 >> 2];
      if ($9 == $10_1) {
       $11_1 = $9 != $10_1;
       break label$62;
      }
      HEAPF32[$3 >> 2] = $9;
      $11_1 = 1;
     }
     $2_1 = $11_1;
     label$34 : {
      if ($24 < Math_fround(1.0)) {
       $1_1 = HEAP32[$0_1 + 4 >> 2];
       $0_1 = HEAP32[$0_1 >> 2];
       HEAP32[$8 + 8 >> 2] = $0_1;
       HEAP32[$8 + 12 >> 2] = $1_1;
       HEAP32[$8 >> 2] = $0_1;
       HEAP32[$8 + 4 >> 2] = $1_1;
       break label$34;
      }
      $10_1 = Math_fround(-$30);
      $9 = $624(HEAPF32[$3 >> 2], $22_1, $16_1, ($4_1 | 0) != 0, $19, $23_1);
      $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($41_1 + Math_fround(-2.0)) - $35_1) - $27_1) * ($15_1 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $27_1);
      if (!$15_1) {
       $12_1 = HEAPF32[$0_1 + 12 >> 2];
       $16_1 = HEAPF32[$0_1 + 4 >> 2];
       HEAPF32[$8 + 8 >> 2] = Math_fround($30 * Math_fround(.5)) + $9;
       HEAPF32[$8 + 4 >> 2] = $16_1 + Math_fround(2.0);
       HEAPF32[$8 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
       HEAPF32[$8 + 12 >> 2] = $12_1 + Math_fround(-2.0);
       break label$34;
      }
      $12_1 = HEAPF32[$0_1 >> 2];
      $16_1 = HEAPF32[$0_1 + 8 >> 2];
      HEAPF32[$8 + 12 >> 2] = Math_fround($30 * Math_fround(.5)) + $9;
      HEAPF32[$8 + 8 >> 2] = $16_1 + Math_fround(-2.0);
      HEAPF32[$8 + 4 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
      HEAPF32[$8 >> 2] = $12_1 + Math_fround(2.0);
     }
     global$0 = $14 + 16 | 0;
     $15_1 = $2_1;
     break label$1;
    case 9:
     break label$3;
    default:
     break label$1;
    };
   }
   $14 = global$0 - 16 | 0;
   global$0 = $14;
   $15_1 = $7_1 & 1048576;
   $2_1 = ($15_1 >>> 18 | 0) + $0_1 | 0;
   $35_1 = HEAPF32[$2_1 + 8 >> 2];
   $12_1 = HEAPF32[$2_1 >> 2];
   $23_1 = Math_fround(Math_fround($35_1 - $12_1) + Math_fround(-4.0));
   $2_1 = HEAP32[18392];
   $9 = HEAPF32[$2_1 + 5540 >> 2];
   $13 = HEAPF64[$5_1 >> 3];
   $17_1 = HEAPF64[$4_1 >> 3];
   $18_1 = $13 > $17_1 ? $13 - $17_1 : $17_1 - $13;
   if (!(!($18_1 >= 0.0) | 1)) {
    $10_1 = Math_fround(+$23_1 / ($18_1 + 1.0));
    $9 = $9 <= $10_1 ? $10_1 : $9;
   }
   $19 = $9 < $23_1 ? $9 : $23_1;
   $30 = Math_fround($19 * Math_fround(.5));
   $10_1 = Math_fround($23_1 - $19);
   $4_1 = $7_1 & 32;
   if ($4_1) {
    $5_1 = $615($6_1);
    $16_1 = Math_fround(Math_fround(HEAPF32[$2_1 + 5548 >> 2] * Math_fround(.5)) / ($10_1 >= Math_fround(1.0) ? $10_1 : Math_fround(1.0)));
    $22_1 = $1669(Math_fround(.10000000149011612), Math_fround($5_1 | 0));
   }
   $24 = Math_fround($30 + Math_fround($12_1 + Math_fround(2.0)));
   $11_1 = 0;
   label$63 : {
    if (HEAP32[$2_1 + 7136 >> 2] != ($1_1 | 0)) {
     break label$63
    }
    $9 = Math_fround(0.0);
    $5_1 = 0;
    label$74 : {
     label$85 : {
      switch (HEAP32[$2_1 + 7188 >> 2] - 1 | 0) {
      case 0:
       if (!HEAPU8[$2_1 + 236 | 0]) {
        $86();
        break label$74;
       }
       if ($10_1 > Math_fround(0.0)) {
        $9 = Math_fround(Math_fround(HEAPF32[($2_1 + ($15_1 >>> 20 << 2) | 0) + 228 >> 2] - $24) / $10_1);
        $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
       }
       $9 = $15_1 ? Math_fround(Math_fround(1.0) - $9) : $9;
       $5_1 = 1;
       break label$74;
      case 3:
       break label$85;
      default:
       break label$74;
      };
     }
     if (HEAPU8[$2_1 + 7148 | 0]) {
      HEAP8[$2_1 + 12056 | 0] = 0;
      HEAP32[$2_1 + 12052 >> 2] = 0;
     }
     $154($14 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
     $9 = $15_1 ? Math_fround(-HEAPF32[$14 + 12 >> 2]) : HEAPF32[$14 + 8 >> 2];
     if ($9 != Math_fround(0.0)) {
      label$157 : {
       if (($615($6_1) | 0) > 0) {
        $9 = Math_fround($9 / Math_fround(100.0));
        $10_1 = $9;
        if (!(HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0))) {
         break label$157
        }
        $10_1 = Math_fround($9 / Math_fround(10.0));
        break label$157;
       }
       $10_1 = Math_fround(($9 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround($18_1));
       if ($18_1 <= 100.0 & $18_1 >= -100.0 | HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0)) {
        break label$157
       }
       $10_1 = Math_fround($9 / Math_fround(100.0));
      }
      $9 = $10_1;
      $10_1 = HEAPF32[HEAP32[18392] + 828 >> 2];
      HEAP8[$2_1 + 12056 | 0] = 1;
      HEAPF32[$2_1 + 12052 >> 2] = HEAPF32[$2_1 + 12052 >> 2] + ($10_1 > Math_fround(0.0) ? Math_fround($9 * Math_fround(10.0)) : $9);
     }
     $12_1 = HEAPF32[$2_1 + 12052 >> 2];
     label$218 : {
      if (!(HEAPU8[$2_1 + 7148 | 0] | HEAP32[$2_1 + 7528 >> 2] != ($1_1 | 0))) {
       $86();
       $9 = Math_fround(0.0);
       break label$218;
      }
      if (!HEAPU8[$2_1 + 12056 | 0]) {
       $9 = Math_fround(0.0);
       break label$218;
      }
      $10_1 = $627(HEAPF64[$3 >> 3], $17_1, $13, ($4_1 | 0) != 0, $22_1, $16_1);
      label$249 : {
       if (!(!(!($10_1 >= Math_fround(1.0)) | !($12_1 > Math_fround(0.0))) | !(!($10_1 <= Math_fround(0.0)) | !($12_1 < Math_fround(0.0))))) {
        $9 = Math_fround($12_1 + $10_1);
        $9 = $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > Math_fround(1.0) ? Math_fround(1.0) : $9;
        $1_1 = ($4_1 | 0) != 0;
        $18_1 = $628($9, $17_1, $13, $1_1, $22_1, $16_1);
        if (!($7_1 & 64)) {
         $18_1 = $629($6_1, $18_1)
        }
        $10_1 = Math_fround($627($18_1, $17_1, $13, $1_1, $22_1, $16_1) - $10_1);
        $27_1 = HEAPF32[$2_1 + 12052 >> 2];
        if ($12_1 > Math_fround(0.0)) {
         $12_1 = Math_fround($27_1 - ($10_1 < $12_1 ? $10_1 : $12_1));
         $5_1 = 1;
         break label$249;
        }
        $12_1 = Math_fround($27_1 - ($10_1 >= $12_1 ? $10_1 : $12_1));
        $5_1 = 1;
        break label$249;
       }
       $12_1 = Math_fround(0.0);
       $9 = $10_1;
       $5_1 = 0;
      }
      HEAP8[$2_1 + 12056 | 0] = 0;
      HEAPF32[$2_1 + 12052 >> 2] = $12_1;
     }
    }
    $11_1 = 0;
    if (!$5_1) {
     break label$63
    }
    $18_1 = $628($9, $17_1, $13, ($4_1 | 0) != 0, $22_1, $16_1);
    if (!($7_1 & 64)) {
     $18_1 = $629($6_1, $18_1)
    }
    $33_1 = HEAPF64[$3 >> 3];
    if ($18_1 == $33_1) {
     $11_1 = $18_1 != $33_1;
     break label$63;
    }
    HEAPF64[$3 >> 3] = $18_1;
    $11_1 = 1;
   }
   $2_1 = $11_1;
   label$3410 : {
    if ($23_1 < Math_fround(1.0)) {
     $1_1 = HEAP32[$0_1 + 4 >> 2];
     $0_1 = HEAP32[$0_1 >> 2];
     HEAP32[$8 + 8 >> 2] = $0_1;
     HEAP32[$8 + 12 >> 2] = $1_1;
     HEAP32[$8 >> 2] = $0_1;
     HEAP32[$8 + 4 >> 2] = $1_1;
     break label$3410;
    }
    $10_1 = Math_fround(-$19);
    $9 = $627(HEAPF64[$3 >> 3], $17_1, $13, ($4_1 | 0) != 0, $22_1, $16_1);
    $9 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($35_1 + Math_fround(-2.0)) - $30) - $24) * ($15_1 ? Math_fround(Math_fround(1.0) - $9) : $9)) + $24);
    if (!$15_1) {
     $12_1 = HEAPF32[$0_1 + 12 >> 2];
     $16_1 = HEAPF32[$0_1 + 4 >> 2];
     HEAPF32[$8 + 8 >> 2] = Math_fround($19 * Math_fround(.5)) + $9;
     HEAPF32[$8 + 4 >> 2] = $16_1 + Math_fround(2.0);
     HEAPF32[$8 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
     HEAPF32[$8 + 12 >> 2] = $12_1 + Math_fround(-2.0);
     break label$3410;
    }
    $12_1 = HEAPF32[$0_1 >> 2];
    $16_1 = HEAPF32[$0_1 + 8 >> 2];
    HEAPF32[$8 + 12 >> 2] = Math_fround($19 * Math_fround(.5)) + $9;
    HEAPF32[$8 + 8 >> 2] = $16_1 + Math_fround(-2.0);
    HEAPF32[$8 + 4 >> 2] = Math_fround($10_1 * Math_fround(.5)) + $9;
    HEAPF32[$8 >> 2] = $12_1 + Math_fround(2.0);
   }
   global$0 = $14 + 16 | 0;
   $15_1 = $2_1;
  }
  global$0 = $28_1 + 16 | 0;
  return $15_1;
 }
 
 function $646($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = 0, $20_1 = Math_fround(0), $21_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = Math_fround(0);
  $16_1 = global$0 - 16 | 0;
  global$0 = $16_1;
  $10_1 = $3 - $4_1 | 0;
  $12_1 = $10_1 >> 31;
  $21_1 = ($10_1 ^ $12_1) - $12_1 | 0;
  $14 = $6_1 & 1048576;
  $12_1 = ($14 >>> 18 | 0) + $0_1 | 0;
  $23_1 = HEAPF32[$12_1 + 8 >> 2];
  $11_1 = HEAPF32[$12_1 >> 2];
  $17_1 = Math_fround(Math_fround($23_1 - $11_1) + Math_fround(-4.0));
  $9 = Math_fround($17_1 / Math_fround($21_1 + 1 | 0));
  $10_1 = HEAP32[18392];
  $8 = HEAPF32[$10_1 + 5540 >> 2];
  $8 = $8 <= $9 ? $9 : $8;
  $18_1 = $8 < $17_1 ? $8 : $17_1;
  $24 = Math_fround($18_1 * Math_fround(.5));
  $9 = Math_fround($17_1 - $18_1);
  $19 = $6_1 & 32;
  if ($19) {
   $13 = Math_fround(Math_fround(HEAPF32[$10_1 + 5548 >> 2] * Math_fround(.5)) / ($9 >= Math_fround(1.0) ? $9 : Math_fround(1.0)));
   $20_1 = $1669(Math_fround(.10000000149011612), Math_fround(1.0));
  }
  $22_1 = Math_fround($24 + Math_fround($11_1 + Math_fround(2.0)));
  $15_1 = 0;
  label$5 : {
   if (HEAP32[$10_1 + 7136 >> 2] != ($1_1 | 0)) {
    break label$5
   }
   $8 = Math_fround(0.0);
   $12_1 = 0;
   label$6 : {
    label$7 : {
     switch (HEAP32[$10_1 + 7188 >> 2] - 1 | 0) {
     case 0:
      if (!HEAPU8[$10_1 + 236 | 0]) {
       $86();
       break label$6;
      }
      if ($9 > Math_fround(0.0)) {
       $8 = Math_fround(Math_fround(HEAPF32[($10_1 + ($14 >>> 20 << 2) | 0) + 228 >> 2] - $22_1) / $9);
       $8 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
      }
      $8 = $14 ? Math_fround(Math_fround(1.0) - $8) : $8;
      $12_1 = 1;
      break label$6;
     case 3:
      break label$7;
     default:
      break label$6;
     };
    }
    if (HEAPU8[$10_1 + 7148 | 0]) {
     HEAP8[$10_1 + 12056 | 0] = 0;
     HEAP32[$10_1 + 12052 >> 2] = 0;
    }
    $154($16_1 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
    $8 = $14 ? Math_fround(-HEAPF32[$16_1 + 12 >> 2]) : HEAPF32[$16_1 + 8 >> 2];
    if ($8 != Math_fround(0.0)) {
     if (!(HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0)) & $21_1 >>> 0 >= 101) {
      $8 = Math_fround($8 / Math_fround(100.0))
     } else {
      $8 = Math_fround(($8 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround($21_1 | 0))
     }
     $9 = HEAPF32[HEAP32[18392] + 828 >> 2];
     HEAP8[$10_1 + 12056 | 0] = 1;
     HEAPF32[$10_1 + 12052 >> 2] = HEAPF32[$10_1 + 12052 >> 2] + ($9 > Math_fround(0.0) ? Math_fround($8 * Math_fround(10.0)) : $8);
    }
    $11_1 = HEAPF32[$10_1 + 12052 >> 2];
    label$19 : {
     if (!(HEAPU8[$10_1 + 7148 | 0] | HEAP32[$10_1 + 7528 >> 2] != ($1_1 | 0))) {
      $86();
      $8 = Math_fround(0.0);
      $1_1 = 0;
      break label$19;
     }
     if (!HEAPU8[$10_1 + 12056 | 0]) {
      $8 = Math_fround(0.0);
      $1_1 = 0;
      break label$19;
     }
     $9 = $616(HEAP32[$2_1 >> 2], $3, $4_1, ($19 | 0) != 0, $20_1, $13);
     label$22 : {
      if (!(!(!($9 >= Math_fround(1.0)) | !($11_1 > Math_fround(0.0))) | !(!($9 <= Math_fround(0.0)) | !($11_1 < Math_fround(0.0))))) {
       $8 = Math_fround($11_1 + $9);
       $8 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
       $12_1 = ($19 | 0) != 0;
       $1_1 = $617($8, $3, $4_1, $12_1, $20_1, $13);
       if (!($6_1 & 64)) {
        $1_1 = $618($5_1, $1_1)
       }
       $9 = Math_fround($616($1_1, $3, $4_1, $12_1, $20_1, $13) - $9);
       $25_1 = HEAPF32[$10_1 + 12052 >> 2];
       if ($11_1 > Math_fround(0.0)) {
        $11_1 = Math_fround($25_1 - ($9 < $11_1 ? $9 : $11_1));
        $1_1 = 1;
        break label$22;
       }
       $11_1 = Math_fround($25_1 - ($9 >= $11_1 ? $9 : $11_1));
       $1_1 = 1;
       break label$22;
      }
      $11_1 = Math_fround(0.0);
      $8 = $9;
      $1_1 = 0;
     }
     HEAP8[$10_1 + 12056 | 0] = 0;
     HEAPF32[$10_1 + 12052 >> 2] = $11_1;
    }
    $12_1 = $1_1;
   }
   $15_1 = 0;
   if (!$12_1) {
    break label$5
   }
   $1_1 = $617($8, $3, $4_1, ($19 | 0) != 0, $20_1, $13);
   if (!($6_1 & 64)) {
    $1_1 = $618($5_1, $1_1)
   }
   $5_1 = HEAP32[$2_1 >> 2];
   if (($1_1 | 0) == ($5_1 | 0)) {
    $15_1 = ($1_1 | 0) != ($5_1 | 0);
    break label$5;
   }
   HEAP32[$2_1 >> 2] = $1_1;
   $15_1 = 1;
  }
  $5_1 = $15_1;
  label$32 : {
   if ($17_1 < Math_fround(1.0)) {
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    $0_1 = HEAP32[$0_1 >> 2];
    HEAP32[$7_1 + 8 >> 2] = $0_1;
    HEAP32[$7_1 + 12 >> 2] = $1_1;
    HEAP32[$7_1 >> 2] = $0_1;
    HEAP32[$7_1 + 4 >> 2] = $1_1;
    break label$32;
   }
   $9 = Math_fround(-$18_1);
   $8 = $616(HEAP32[$2_1 >> 2], $3, $4_1, ($19 | 0) != 0, $20_1, $13);
   $8 = Math_fround(Math_fround(Math_fround(Math_fround(Math_fround($23_1 + Math_fround(-2.0)) - $24) - $22_1) * ($14 ? Math_fround(Math_fround(1.0) - $8) : $8)) + $22_1);
   if (!$14) {
    $11_1 = HEAPF32[$0_1 + 12 >> 2];
    $13 = HEAPF32[$0_1 + 4 >> 2];
    HEAPF32[$7_1 + 8 >> 2] = Math_fround($18_1 * Math_fround(.5)) + $8;
    HEAPF32[$7_1 + 4 >> 2] = $13 + Math_fround(2.0);
    HEAPF32[$7_1 >> 2] = Math_fround($9 * Math_fround(.5)) + $8;
    HEAPF32[$7_1 + 12 >> 2] = $11_1 + Math_fround(-2.0);
    break label$32;
   }
   $11_1 = HEAPF32[$0_1 >> 2];
   $13 = HEAPF32[$0_1 + 8 >> 2];
   HEAPF32[$7_1 + 12 >> 2] = Math_fround($18_1 * Math_fround(.5)) + $8;
   HEAPF32[$7_1 + 8 >> 2] = $13 + Math_fround(-2.0);
   HEAPF32[$7_1 + 4 >> 2] = Math_fround($9 * Math_fround(.5)) + $8;
   HEAPF32[$7_1 >> 2] = $11_1 + Math_fround(2.0);
  }
  global$0 = $16_1 + 16 | 0;
  return $5_1;
 }
 
 function $647($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0), $23_1 = 0, $24 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0);
  $23_1 = global$0 - 16 | 0;
  global$0 = $23_1;
  $19 = $6_1 & 1048576;
  $12_1 = ($19 >>> 18 | 0) + $0_1 | 0;
  $28_1 = HEAPF32[$12_1 + 8 >> 2];
  $9 = HEAPF32[$12_1 >> 2];
  $24 = Math_fround(Math_fround($28_1 - $9) + Math_fround(-4.0));
  $13 = HEAP32[18392];
  $10_1 = HEAPF32[$13 + 5540 >> 2];
  $20_1 = $4_1 - $3 | 0;
  $26_1 = $3 >>> 0 < $4_1 >>> 0;
  $12_1 = $26_1 ? $20_1 : $3 - $4_1 | 0;
  if (($12_1 | 0) >= 0) {
   $8 = Math_fround($24 / Math_fround($12_1 + 1 | 0));
   $10_1 = $8 >= $10_1 ? $8 : $10_1;
  }
  $25_1 = $10_1 < $24 ? $10_1 : $24;
  $29_1 = Math_fround($25_1 * Math_fround(.5));
  $21_1 = $6_1 & 32;
  if ($21_1) {
   $11_1 = $1669(Math_fround(.10000000149011612), Math_fround(1.0))
  }
  $27_1 = Math_fround($29_1 + Math_fround($9 + Math_fround(2.0)));
  $16_1 = 0;
  label$6 : {
   if (HEAP32[$13 + 7136 >> 2] != ($1_1 | 0)) {
    break label$6
   }
   $10_1 = Math_fround(0.0);
   label$7 : {
    label$8 : {
     switch (HEAP32[$13 + 7188 >> 2] - 1 | 0) {
     case 0:
      if (!HEAPU8[$13 + 236 | 0]) {
       $86();
       break label$7;
      }
      $8 = Math_fround($24 - $25_1);
      if ($8 > Math_fround(0.0)) {
       $8 = Math_fround(Math_fround(HEAPF32[($13 + ($19 >>> 20 << 2) | 0) + 228 >> 2] - $27_1) / $8);
       $10_1 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
      }
      $10_1 = $19 ? Math_fround(Math_fround(1.0) - $10_1) : $10_1;
      $18_1 = 1;
      break label$7;
     case 3:
      break label$8;
     default:
      break label$7;
     };
    }
    if (HEAPU8[$13 + 7148 | 0]) {
     HEAP8[$13 + 12056 | 0] = 0;
     HEAP32[$13 + 12052 >> 2] = 0;
    }
    $154($23_1 + 8 | 0, 6, 5, Math_fround(0.0), Math_fround(0.0));
    $8 = $19 ? Math_fround(-HEAPF32[$23_1 + 12 >> 2]) : HEAPF32[$23_1 + 8 >> 2];
    if ($8 != Math_fround(0.0)) {
     if (!(HEAPF32[HEAP32[18392] + 824 >> 2] > Math_fround(0.0)) & $12_1 + 100 >>> 0 >= 201) {
      $10_1 = Math_fround($8 / Math_fround(100.0))
     } else {
      $10_1 = Math_fround(($8 < Math_fround(0.0) ? Math_fround(-1.0) : Math_fround(1.0)) / Math_fround($12_1 | 0))
     }
     $8 = HEAPF32[HEAP32[18392] + 828 >> 2];
     HEAP8[$13 + 12056 | 0] = 1;
     HEAPF32[$13 + 12052 >> 2] = HEAPF32[$13 + 12052 >> 2] + ($8 > Math_fround(0.0) ? Math_fround($10_1 * Math_fround(10.0)) : $10_1);
    }
    $17_1 = HEAPF32[$13 + 12052 >> 2];
    label$20 : {
     if (!(HEAPU8[$13 + 7148 | 0] | HEAP32[$13 + 7528 >> 2] != ($1_1 | 0))) {
      $86();
      $10_1 = Math_fround(0.0);
      $1_1 = 0;
      break label$20;
     }
     if (!HEAPU8[$13 + 12056 | 0]) {
      $10_1 = Math_fround(0.0);
      $1_1 = 0;
      break label$20;
     }
     $16_1 = ($3 | 0) == ($4_1 | 0);
     $10_1 = Math_fround(0.0);
     label$23 : {
      if ($16_1) {
       break label$23
      }
      $12_1 = $26_1 ? $3 : $4_1;
      $18_1 = HEAP32[$2_1 >> 2];
      $1_1 = $3 >>> 0 > $4_1 >>> 0 ? $3 : $4_1;
      $12_1 = $12_1 >>> 0 > $18_1 >>> 0 ? $12_1 : $1_1 >>> 0 > $18_1 >>> 0 ? $18_1 : $1_1;
      if ($21_1) {
       $1_1 = $3 >>> 0 > $4_1 >>> 0;
       $8 = Math_fround(($1_1 ? $4_1 : $3) >>> 0);
       $9 = $8 < $11_1 ? $11_1 : $8;
       $10_1 = Math_fround($12_1 >>> 0);
       $14 = Math_fround(0.0);
       label$25 : {
        if ($9 >= $10_1) {
         break label$25
        }
        $8 = Math_fround(($3 >>> 0 < $4_1 >>> 0 ? $4_1 : $3) >>> 0);
        $8 = $8 < $11_1 ? $11_1 : $8;
        $14 = Math_fround(1.0);
        if ($8 <= $10_1) {
         break label$25
        }
        $14 = Math_fround($1642(Math_fround($10_1 / $9)) / $1642(Math_fround($8 / $9)));
       }
       $8 = $14;
       $10_1 = $1_1 ? Math_fround(Math_fround(1.0) - $8) : $8;
       break label$23;
      }
      $10_1 = Math_fround(Math_fround($12_1 - $3 | 0) / Math_fround($20_1 | 0));
     }
     label$26 : {
      if (!(!(!($10_1 >= Math_fround(1.0)) | !($17_1 > Math_fround(0.0))) | !(!($10_1 <= Math_fround(0.0)) | !($17_1 < Math_fround(0.0))))) {
       $8 = Math_fround($17_1 + $10_1);
       $8 = $8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8;
       $1_1 = $3;
       label$30 : {
        if ($16_1) {
         break label$30
        }
        if ($21_1) {
         $1_1 = $3;
         if ($8 <= Math_fround(0.0)) {
          break label$30
         }
         $1_1 = $4_1;
         if ($8 >= Math_fround(1.0)) {
          break label$30
         }
         $9 = Math_fround($4_1 >>> 0);
         $22_1 = $9 < $11_1 ? $11_1 : $9;
         $9 = Math_fround($3 >>> 0);
         $15_1 = $9 < $11_1 ? $11_1 : $9;
         $1_1 = $3 >>> 0 > $4_1 >>> 0;
         $9 = $1_1 ? $22_1 : $15_1;
         $9 = Math_fround($9 * $1669(Math_fround(($1_1 ? $15_1 : $22_1) / $9), $1_1 ? Math_fround(Math_fround(1.0) - $8) : $8));
         if ($9 < Math_fround(4294967296.0) & $9 >= Math_fround(0.0)) {
          $1_1 = ~~$9 >>> 0;
          break label$30;
         }
         $1_1 = 0;
         break label$30;
        }
        $1_1 = $4_1;
        if (!($8 < Math_fround(1.0))) {
         break label$30
        }
        $9 = Math_fround(($3 >>> 0 > $4_1 >>> 0 ? Math_fround(-.5) : Math_fround(.5)) + Math_fround($8 * Math_fround($20_1 | 0)));
        label$35 : {
         if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
          $1_1 = ~~$9;
          break label$35;
         }
         $1_1 = -2147483648;
        }
        $1_1 = $1_1 + $3 | 0;
       }
       if (!($6_1 & 64)) {
        $1_1 = $618($5_1, $1_1)
       }
       $9 = Math_fround(0.0);
       label$39 : {
        if ($16_1) {
         break label$39
        }
        $18_1 = $26_1 ? $3 : $4_1;
        $12_1 = $3 >>> 0 > $4_1 >>> 0 ? $3 : $4_1;
        $12_1 = $1_1 >>> 0 < $18_1 >>> 0 ? $18_1 : $1_1 >>> 0 < $12_1 >>> 0 ? $1_1 : $12_1;
        if ($21_1) {
         $1_1 = $3 >>> 0 > $4_1 >>> 0;
         $9 = Math_fround(($1_1 ? $4_1 : $3) >>> 0);
         $22_1 = $9 < $11_1 ? $11_1 : $9;
         $15_1 = Math_fround($12_1 >>> 0);
         $14 = Math_fround(0.0);
         label$41 : {
          if ($22_1 >= $15_1) {
           break label$41
          }
          $9 = Math_fround(($3 >>> 0 < $4_1 >>> 0 ? $4_1 : $3) >>> 0);
          $9 = $9 < $11_1 ? $11_1 : $9;
          $14 = Math_fround(1.0);
          if ($9 <= $15_1) {
           break label$41
          }
          $14 = Math_fround($1642(Math_fround($15_1 / $22_1)) / $1642(Math_fround($9 / $22_1)));
         }
         $9 = $14;
         $9 = $1_1 ? Math_fround(Math_fround(1.0) - $9) : $9;
         break label$39;
        }
        $9 = Math_fround(Math_fround($12_1 - $3 | 0) / Math_fround($20_1 | 0));
       }
       $9 = Math_fround($9 - $10_1);
       $10_1 = HEAPF32[$13 + 12052 >> 2];
       if ($17_1 > Math_fround(0.0)) {
        $9 = Math_fround($10_1 - ($9 < $17_1 ? $9 : $17_1));
        $10_1 = $8;
        $1_1 = 1;
        break label$26;
       }
       $9 = Math_fround($10_1 - ($9 >= $17_1 ? $9 : $17_1));
       $10_1 = $8;
       $1_1 = 1;
       break label$26;
      }
      $9 = Math_fround(0.0);
      $1_1 = 0;
     }
     HEAP8[$13 + 12056 | 0] = 0;
     HEAPF32[$13 + 12052 >> 2] = $9;
    }
    $18_1 = $1_1;
   }
   $16_1 = 0;
   if (!$18_1) {
    break label$6
   }
   $1_1 = $3;
   label$43 : {
    if (($3 | 0) == ($4_1 | 0)) {
     break label$43
    }
    if ($21_1) {
     $1_1 = $3;
     if ($10_1 <= Math_fround(0.0)) {
      break label$43
     }
     $1_1 = $4_1;
     if ($10_1 >= Math_fround(1.0)) {
      break label$43
     }
     $8 = Math_fround($4_1 >>> 0);
     $15_1 = $8 < $11_1 ? $11_1 : $8;
     $8 = Math_fround($3 >>> 0);
     $9 = $8 < $11_1 ? $11_1 : $8;
     $1_1 = $3 >>> 0 > $4_1 >>> 0;
     $8 = $1_1 ? $15_1 : $9;
     $8 = Math_fround($8 * $1669(Math_fround(($1_1 ? $9 : $15_1) / $8), $1_1 ? Math_fround(Math_fround(1.0) - $10_1) : $10_1));
     if ($8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0)) {
      $1_1 = ~~$8 >>> 0;
      break label$43;
     }
     $1_1 = 0;
     break label$43;
    }
    $1_1 = $4_1;
    if (!($10_1 < Math_fround(1.0))) {
     break label$43
    }
    $8 = Math_fround(($3 >>> 0 > $4_1 >>> 0 ? Math_fround(-.5) : Math_fround(.5)) + Math_fround($10_1 * Math_fround($20_1 | 0)));
    label$48 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $1_1 = ~~$8;
      break label$48;
     }
     $1_1 = -2147483648;
    }
    $1_1 = $1_1 + $3 | 0;
   }
   if (!($6_1 & 64)) {
    $1_1 = $618($5_1, $1_1)
   }
   $5_1 = HEAP32[$2_1 >> 2];
   if (($1_1 | 0) == ($5_1 | 0)) {
    $16_1 = ($1_1 | 0) != ($5_1 | 0);
    break label$6;
   }
   HEAP32[$2_1 >> 2] = $1_1;
   $16_1 = 1;
  }
  $6_1 = $16_1;
  label$53 : {
   if ($24 < Math_fround(1.0)) {
    $1_1 = HEAP32[$0_1 + 4 >> 2];
    $0_1 = HEAP32[$0_1 >> 2];
    HEAP32[$7_1 + 8 >> 2] = $0_1;
    HEAP32[$7_1 + 12 >> 2] = $1_1;
    HEAP32[$7_1 >> 2] = $0_1;
    HEAP32[$7_1 + 4 >> 2] = $1_1;
    break label$53;
   }
   $15_1 = Math_fround(-$25_1);
   $17_1 = Math_fround(Math_fround(Math_fround($28_1 + Math_fround(-2.0)) - $29_1) - $27_1);
   $8 = Math_fround(0.0);
   label$55 : {
    if (($3 | 0) == ($4_1 | 0)) {
     break label$55
    }
    $5_1 = $26_1 ? $3 : $4_1;
    $2_1 = HEAP32[$2_1 >> 2];
    $1_1 = $3 >>> 0 > $4_1 >>> 0 ? $3 : $4_1;
    $2_1 = $2_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $1_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $1_1;
    if ($21_1) {
     $1_1 = $3 >>> 0 > $4_1 >>> 0;
     $8 = Math_fround(($1_1 ? $4_1 : $3) >>> 0);
     $9 = $8 < $11_1 ? $11_1 : $8;
     $10_1 = Math_fround($2_1 >>> 0);
     $14 = Math_fround(0.0);
     label$57 : {
      if ($9 >= $10_1) {
       break label$57
      }
      $8 = Math_fround(($3 >>> 0 < $4_1 >>> 0 ? $4_1 : $3) >>> 0);
      $8 = $8 < $11_1 ? $11_1 : $8;
      $14 = Math_fround(1.0);
      if ($8 <= $10_1) {
       break label$57
      }
      $14 = Math_fround($1642(Math_fround($10_1 / $9)) / $1642(Math_fround($8 / $9)));
     }
     $8 = $14;
     $8 = $1_1 ? Math_fround(Math_fround(1.0) - $8) : $8;
     break label$55;
    }
    $8 = Math_fround(Math_fround($2_1 - $3 | 0) / Math_fround($20_1 | 0));
   }
   $9 = Math_fround(Math_fround($17_1 * ($19 ? Math_fround(Math_fround(1.0) - $8) : $8)) + $27_1);
   if (!$19) {
    $10_1 = HEAPF32[$0_1 + 12 >> 2];
    $8 = HEAPF32[$0_1 + 4 >> 2];
    HEAPF32[$7_1 + 8 >> 2] = Math_fround($25_1 * Math_fround(.5)) + $9;
    HEAPF32[$7_1 + 4 >> 2] = $8 + Math_fround(2.0);
    HEAPF32[$7_1 >> 2] = Math_fround($15_1 * Math_fround(.5)) + $9;
    HEAPF32[$7_1 + 12 >> 2] = $10_1 + Math_fround(-2.0);
    break label$53;
   }
   $10_1 = HEAPF32[$0_1 >> 2];
   $8 = HEAPF32[$0_1 + 8 >> 2];
   HEAPF32[$7_1 + 12 >> 2] = Math_fround($25_1 * Math_fround(.5)) + $9;
   HEAPF32[$7_1 + 8 >> 2] = $8 + Math_fround(-2.0);
   HEAPF32[$7_1 + 4 >> 2] = Math_fround($15_1 * Math_fround(.5)) + $9;
   HEAPF32[$7_1 >> 2] = $10_1 + Math_fround(2.0);
  }
  global$0 = $23_1 + 16 | 0;
  return $6_1;
 }
 
 function $652($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19 = 0;
  $7_1 = global$0 - 192 | 0;
  global$0 = $7_1;
  $9 = HEAP32[18392];
  $12_1 = HEAP32[$9 + 7080 >> 2];
  HEAP8[$12_1 + 140 | 0] = 1;
  if (!HEAPU8[$12_1 + 143 | 0]) {
   $11_1 = $76($12_1, $0_1);
   $16_1 = $292();
   $68($7_1 + 184 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $17_1 = HEAPF32[$12_1 + 208 >> 2];
   $8 = HEAP32[$12_1 + 208 >> 2];
   $10_1 = HEAP32[$12_1 + 212 >> 2];
   $14 = $7_1 + 180 | 0;
   $15_1 = HEAPF32[$9 + 5480 >> 2];
   HEAPF32[$14 >> 2] = Math_fround(Math_fround($15_1 + $15_1) + HEAPF32[$7_1 + 188 >> 2]) + HEAPF32[$12_1 + 212 >> 2];
   HEAP32[$7_1 + 168 >> 2] = $8;
   HEAP32[$7_1 + 172 >> 2] = $10_1;
   HEAPF32[$7_1 + 176 >> 2] = $16_1 + $17_1;
   $16_1 = Math_fround(0.0);
   $17_1 = HEAPF32[$7_1 + 184 >> 2];
   if ($17_1 > Math_fround(0.0)) {
    $16_1 = Math_fround($17_1 + HEAPF32[$9 + 5500 >> 2])
   }
   $13 = $7_1 + 152 | 0;
   HEAPF32[$13 + 12 >> 2] = HEAPF32[$14 >> 2] + Math_fround(0.0);
   HEAP32[$7_1 + 152 >> 2] = $8;
   HEAP32[$7_1 + 156 >> 2] = $10_1;
   HEAPF32[$7_1 + 160 >> 2] = $16_1 + HEAPF32[$7_1 + 176 >> 2];
   $277($13, $15_1);
   $8 = 0;
   $10_1 = $13;
   $13 = $6_1 & 128;
   label$3 : {
    if (!$213($10_1, $11_1, $7_1 + 168 | 0, $13 << 1 ^ 256)) {
     break label$3
    }
    $8 = HEAP32[($1_1 << 4) + 48168 >> 2];
    label$4 : {
     if (!$5_1) {
      break label$4
     }
     label$6 : {
      if (($1_1 | 0) != 4) {
       break label$6
      }
      if (!$1695($5_1, 13404)) {
       break label$6
      }
      label$7 : {
       if (HEAPU8[$5_1 | 0] != 37 | HEAPU8[$5_1 + 1 | 0] != 46 | (HEAPU8[$5_1 + 2 | 0] != 48 | HEAPU8[$5_1 + 3 | 0] != 102)) {
        break label$7
       }
       if (HEAPU8[$5_1 + 4 | 0]) {
        break label$7
       }
       $8 = 13404;
       break label$4;
      }
      $8 = $5_1;
      while (1) {
       $10_1 = HEAPU8[$8 | 0];
       label$9 : {
        if (!(!$10_1 | ($10_1 | 0) == 37 & HEAPU8[$8 + 1 | 0] != 37)) {
         $8 = ((($10_1 | 0) == 37) + $8 | 0) + 1 | 0;
         $10_1 = 1;
         break label$9;
        }
        $10_1 = 0;
       }
       if ($10_1) {
        continue
       }
       break;
      };
     }
     $8 = $5_1;
    }
    $10_1 = $8;
    $18_1 = $91($7_1 + 168 | 0, $11_1);
    label$13 : {
     $8 = 0;
     label$12 : {
      if ($13) {
       break label$12
      }
      $5_1 = HEAP32[18392];
      $8 = 0;
      if (HEAP32[$5_1 + 7136 >> 2] != ($11_1 | 0)) {
       break label$12
      }
      $8 = HEAP32[$5_1 + 11968 >> 2] == ($11_1 | 0);
     }
     label$14 : {
      if ($8) {
       break label$14
      }
      $5_1 = 0;
      $14 = $13 ? $5_1 : HEAP8[$9 + 7249 | 0] & 1;
      label$17 : {
       $5_1 = $18_1 ? HEAPU8[$9 + 992 | 0] != 0 : $5_1;
       if (!($14 | $5_1 | HEAP32[$9 + 7520 >> 2] == ($11_1 | 0)) & HEAP32[$9 + 7532 >> 2] != ($11_1 | 0)) {
        break label$17
       }
       $85($11_1, $12_1);
       $330($11_1, $12_1);
       $125($12_1);
       HEAP32[$9 + 7156 >> 2] = HEAP32[$9 + 7156 >> 2] | 3;
       if ($13) {
        break label$17
       }
       if (!(HEAPU8[$9 + 252 | 0] ? !$5_1 : 1) | $14) {
        break label$14
       }
       if (HEAP32[$9 + 7532 >> 2] == ($11_1 | 0) | $8) {
        break label$14
       }
       break label$13;
      }
      if (!$8) {
       break label$13
      }
     }
     $5_1 = $0_1;
     $0_1 = $6_1 << 27 >> 31;
     $8 = $631($7_1 + 168 | 0, $11_1, $5_1, $1_1, $2_1, $10_1, $0_1 & $3, $0_1 & $4_1);
     break label$3;
    }
    $18_1 = $51(HEAP32[$9 + 7136 >> 2] == ($11_1 | 0) ? 9 : $18_1 ? 8 : 7, Math_fround(1.0));
    $19 = $7_1 + 168 | 0;
    $73($19, $11_1, 1);
    $14 = HEAP32[$7_1 + 172 >> 2];
    $5_1 = HEAP32[$7_1 + 168 >> 2];
    HEAP32[$7_1 + 144 >> 2] = $5_1;
    HEAP32[$7_1 + 148 >> 2] = $14;
    $13 = HEAP32[$7_1 + 180 >> 2];
    $8 = HEAP32[$7_1 + 176 >> 2];
    HEAP32[$7_1 + 136 >> 2] = $8;
    HEAP32[$7_1 + 140 >> 2] = $13;
    $15_1 = HEAPF32[$9 + 5484 >> 2];
    HEAP32[$7_1 + 24 >> 2] = $5_1;
    HEAP32[$7_1 + 28 >> 2] = $14;
    HEAP32[$7_1 + 16 >> 2] = $8;
    HEAP32[$7_1 + 20 >> 2] = $13;
    $71($7_1 + 24 | 0, $7_1 + 16 | 0, $18_1, 1, $15_1);
    $8 = $7_1 + 120 | 0;
    $5_1 = $8 + 8 | 0;
    HEAP32[$5_1 >> 2] = 0;
    HEAP32[$5_1 + 4 >> 2] = 0;
    HEAP32[$7_1 + 120 >> 2] = 0;
    HEAP32[$7_1 + 124 >> 2] = 0;
    $8 = $645($19, $11_1, $1_1, $2_1, $3, $4_1, $10_1, $6_1, $8);
    if ($8) {
     $88()
    }
    if (HEAPF32[$7_1 + 128 >> 2] > HEAPF32[$7_1 + 120 >> 2]) {
     $401(HEAP32[$12_1 + 580 >> 2], $7_1 + 120 | 0, $5_1, $51(HEAP32[$9 + 7136 >> 2] == ($11_1 | 0) ? 20 : 19, Math_fround(1.0)), HEAPF32[$9 + 5544 >> 2], 0)
    }
    $3 = $7_1 + 176 | 0;
    $4_1 = $7_1 + 48 | 0;
    $1_1 = $4_1 + $603($4_1, 64, $1_1, $2_1, $10_1) | 0;
    if (HEAPU8[$9 + 12196 | 0]) {
     $341(1061, 1056)
    }
    HEAP32[$7_1 + 40 >> 2] = 1056964608;
    HEAP32[$7_1 + 44 >> 2] = 1056964608;
    $69($7_1 + 168 | 0, $3, $7_1 + 48 | 0, $1_1, 0, $7_1 + 40 | 0, 0);
    if (HEAPF32[$7_1 + 184 >> 2] > Math_fround(0.0)) {
     $15_1 = HEAPF32[$9 + 5500 >> 2];
     HEAPF32[$7_1 + 36 >> 2] = HEAPF32[$7_1 + 172 >> 2] + HEAPF32[$9 + 5480 >> 2];
     HEAPF32[$7_1 + 32 >> 2] = $15_1 + HEAPF32[$7_1 + 176 >> 2];
     $1_1 = HEAP32[$7_1 + 36 >> 2];
     HEAP32[$7_1 + 8 >> 2] = HEAP32[$7_1 + 32 >> 2];
     HEAP32[$7_1 + 12 >> 2] = $1_1;
     $63($7_1 + 8 | 0, $0_1, 0, 1);
    }
   }
  }
  global$0 = $7_1 + 192 | 0;
  return $8;
 }
 
 function $653($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $11_1 = HEAP32[18392];
  $8 = HEAP32[$11_1 + 7080 >> 2];
  HEAP8[$8 + 140 | 0] = 1;
  if (!HEAPU8[$8 + 143 | 0]) {
   $301();
   $153($0_1);
   $290($3, $292());
   $8 = 0;
   if (($3 | 0) > 0) {
    $12_1 = HEAP32[($1_1 << 4) + 48160 >> 2];
    $9 = $2_1;
    $2_1 = 0;
    while (1) {
     $266($10_1);
     if ($10_1) {
      $276(Math_fround(0.0), HEAPF32[$11_1 + 5500 >> 2])
     }
     $8 = $652(19354, $1_1, $9, $4_1, $5_1, $6_1, $7_1);
     $269();
     $291();
     $2_1 = $2_1 | $8;
     $8 = $2_1;
     $9 = $9 + $12_1 | 0;
     $10_1 = $10_1 + 1 | 0;
     if (($10_1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $9 = $8;
   $269();
   $1_1 = $62($0_1);
   if (($0_1 | 0) != ($1_1 | 0)) {
    $276(Math_fround(0.0), HEAPF32[$11_1 + 5500 >> 2]);
    $555($0_1, $1_1, 0);
   }
   $275();
  }
  return $9 & 1;
 }
 
 function $659($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = $3;
  HEAP32[$6_1 + 12 >> 2] = $2_1;
  $0_1 = $652($0_1, 4, $1_1, $6_1 + 12 | 0, $6_1 + 8 | 0, $4_1, $5_1);
  global$0 = $6_1 + 16 | 0;
  return $0_1;
 }
 
 function $663($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0;
  $8 = global$0 - 192 | 0;
  global$0 = $8;
  $10_1 = HEAP32[18392];
  $11_1 = HEAP32[$10_1 + 7080 >> 2];
  HEAP8[$11_1 + 140 | 0] = 1;
  if (!HEAPU8[$11_1 + 143 | 0]) {
   $12_1 = $76($11_1, $0_1);
   $68($8 + 184 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $13 = HEAPF32[$1_1 >> 2];
   $16_1 = HEAPF32[$11_1 + 208 >> 2];
   $9 = HEAP32[$11_1 + 208 >> 2];
   $14 = HEAP32[$11_1 + 212 >> 2];
   $15_1 = $8 + 180 | 0;
   HEAPF32[$15_1 >> 2] = HEAPF32[$11_1 + 212 >> 2] + HEAPF32[$1_1 + 4 >> 2];
   HEAP32[$8 + 168 >> 2] = $9;
   HEAP32[$8 + 172 >> 2] = $14;
   HEAPF32[$8 + 176 >> 2] = $16_1 + $13;
   $13 = Math_fround(0.0);
   $16_1 = HEAPF32[$8 + 184 >> 2];
   if ($16_1 > Math_fround(0.0)) {
    $13 = Math_fround($16_1 + HEAPF32[$10_1 + 5500 >> 2])
   }
   $1_1 = $8 + 152 | 0;
   HEAPF32[$1_1 + 12 >> 2] = HEAPF32[$15_1 >> 2] + Math_fround(0.0);
   HEAP32[$8 + 152 >> 2] = $9;
   HEAP32[$8 + 156 >> 2] = $14;
   HEAPF32[$8 + 160 >> 2] = $13 + HEAPF32[$8 + 176 >> 2];
   $277($1_1, HEAPF32[$10_1 + 5480 >> 2]);
   $9 = 0;
   if ($213($8 + 168 | 0, $12_1, 0, 0)) {
    $9 = HEAP32[($2_1 << 4) + 48168 >> 2];
    label$4 : {
     if (!$6_1) {
      break label$4
     }
     label$6 : {
      if (($2_1 | 0) != 4) {
       break label$6
      }
      if (!$1695($6_1, 13404)) {
       break label$6
      }
      label$7 : {
       if (HEAPU8[$6_1 | 0] != 37 | HEAPU8[$6_1 + 1 | 0] != 46 | (HEAPU8[$6_1 + 2 | 0] != 48 | HEAPU8[$6_1 + 3 | 0] != 102)) {
        break label$7
       }
       if (HEAPU8[$6_1 + 4 | 0]) {
        break label$7
       }
       $9 = 13404;
       break label$4;
      }
      $9 = $6_1;
      while (1) {
       $1_1 = HEAPU8[$9 | 0];
       label$9 : {
        if (!(!$1_1 | ($1_1 | 0) == 37 & HEAPU8[$9 + 1 | 0] != 37)) {
         $9 = ((($1_1 | 0) == 37) + $9 | 0) + 1 | 0;
         $1_1 = 1;
         break label$9;
        }
        $1_1 = 0;
       }
       if ($1_1) {
        continue
       }
       break;
      };
     }
     $9 = $6_1;
    }
    $1_1 = $91($8 + 168 | 0, $12_1);
    label$12 : {
     if (!(!(HEAPU8[$10_1 + 992 | 0] ? !$1_1 : 1) | HEAP32[$10_1 + 7520 >> 2] == ($12_1 | 0))) {
      if (HEAP32[$10_1 + 7532 >> 2] != ($12_1 | 0)) {
       break label$12
      }
     }
     $85($12_1, $11_1);
     $330($12_1, $11_1);
     $125($11_1);
     HEAP32[$10_1 + 7156 >> 2] = HEAP32[$10_1 + 7156 >> 2] | 12;
    }
    $18_1 = $51(HEAP32[$10_1 + 7136 >> 2] == ($12_1 | 0) ? 9 : $1_1 ? 8 : 7, Math_fround(1.0));
    $17_1 = $8 + 168 | 0;
    $73($17_1, $12_1, 1);
    $14 = HEAP32[$8 + 172 >> 2];
    $1_1 = HEAP32[$8 + 168 >> 2];
    HEAP32[$8 + 144 >> 2] = $1_1;
    HEAP32[$8 + 148 >> 2] = $14;
    $15_1 = HEAP32[$8 + 180 >> 2];
    $6_1 = HEAP32[$8 + 176 >> 2];
    HEAP32[$8 + 136 >> 2] = $6_1;
    HEAP32[$8 + 140 >> 2] = $15_1;
    $13 = HEAPF32[$10_1 + 5484 >> 2];
    HEAP32[$8 + 16 >> 2] = $1_1;
    HEAP32[$8 + 20 >> 2] = $14;
    HEAP32[$8 + 8 >> 2] = $6_1;
    HEAP32[$8 + 12 >> 2] = $15_1;
    $71($8 + 16 | 0, $8 + 8 | 0, $18_1, 1, $13);
    $6_1 = $8 + 120 | 0;
    $1_1 = $6_1 + 8 | 0;
    HEAP32[$1_1 >> 2] = 0;
    HEAP32[$1_1 + 4 >> 2] = 0;
    HEAP32[$8 + 120 >> 2] = 0;
    HEAP32[$8 + 124 >> 2] = 0;
    $1_1 = $645($17_1, $12_1, $2_1, $3, $4_1, $5_1, $9, $7_1 | 1048576, $6_1);
    if ($1_1) {
     $88()
    }
    $4_1 = $8 + 176 | 0;
    if (HEAPF32[$8 + 132 >> 2] > HEAPF32[$8 + 124 >> 2]) {
     $401(HEAP32[$11_1 + 580 >> 2], $8 + 120 | 0, $8 + 128 | 0, $51(HEAP32[$10_1 + 7136 >> 2] == ($12_1 | 0) ? 20 : 19, Math_fround(1.0)), HEAPF32[$10_1 + 5544 >> 2], 0)
    }
    $5_1 = $8 + 48 | 0;
    $2_1 = $603($5_1, 64, $2_1, $3, $9);
    $13 = HEAPF32[$10_1 + 5480 >> 2];
    HEAPF32[$8 + 40 >> 2] = HEAPF32[$8 + 168 >> 2];
    HEAPF32[$8 + 44 >> 2] = $13 + HEAPF32[$8 + 172 >> 2];
    HEAP32[$8 + 32 >> 2] = 1056964608;
    HEAP32[$8 + 36 >> 2] = 0;
    $69($8 + 40 | 0, $4_1, $5_1, $2_1 + $5_1 | 0, 0, $8 + 32 | 0, 0);
    if (HEAPF32[$8 + 184 >> 2] > Math_fround(0.0)) {
     $13 = HEAPF32[$10_1 + 5500 >> 2];
     HEAPF32[$8 + 28 >> 2] = HEAPF32[$8 + 172 >> 2] + HEAPF32[$10_1 + 5480 >> 2];
     HEAPF32[$8 + 24 >> 2] = $13 + HEAPF32[$8 + 176 >> 2];
     $2_1 = HEAP32[$8 + 28 >> 2];
     HEAP32[$8 >> 2] = HEAP32[$8 + 24 >> 2];
     HEAP32[$8 + 4 >> 2] = $2_1;
     $63($8, $0_1, 0, 1);
    }
    $9 = $1_1;
   }
  }
  global$0 = $8 + 192 | 0;
  return $9;
 }
 
 function $666($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!HEAPU8[$1_1 + 23 | 0]) {
    break label$1
   }
   $4_1 = HEAP32[$0_1 + 20 >> 2];
   $6_1 = $4_1 + (HEAP32[$0_1 + 4 >> 2] << 1) | 0;
   while (1) {
    $5_1 = $4_1;
    if ($6_1 >>> 0 <= $5_1 >>> 0) {
     $3 = Math_fround(0.0);
     break label$1;
    }
    $4_1 = $5_1 + 2 | 0;
    $3 = Math_fround(0.0);
    if (HEAPU16[$5_1 >> 1] != 10) {
     continue
    }
    break;
   };
  }
  $0_1 = $696($0_1, $2_1, $3);
  HEAP8[$1_1 + 22 | 0] = 0;
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  HEAP32[$1_1 + 4 >> 2] = $0_1;
  HEAP32[$1_1 >> 2] = $0_1;
 }
 
 function $667($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = Math_fround(0), $27_1 = 0, $28_1 = Math_fround(0), $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = 0, $33_1 = Math_fround(0), $34_1 = 0;
  $14 = global$0 - 32 | 0;
  global$0 = $14;
  $23_1 = HEAP32[$0_1 + 20 >> 2];
  $9 = HEAP32[$0_1 + 4 >> 2];
  $29_1 = $23_1 + ($9 << 1) | 0;
  $4_1 = $0_1 + 60 | 0;
  $30 = HEAP32[$0_1 + 76 >> 2];
  $27_1 = HEAP32[18392];
  $2_1 = HEAPU8[$0_1 + 83 | 0];
  $31_1 = $2_1;
  $32_1 = ($2_1 | 0) != 0;
  $13 = HEAPF32[$0_1 + 88 >> 2];
  $11_1 = $0_1 + 82 | 0;
  $10_1 = HEAPU8[$11_1 | 0];
  $5_1 = HEAP32[$0_1 + 60 >> 2];
  $6_1 = $0_1 + 68 | 0;
  $2_1 = HEAP32[$6_1 >> 2];
  $7_1 = $0_1 - -64 | 0;
  $3 = HEAP32[$7_1 >> 2];
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              label$13 : {
               label$14 : {
                label$15 : {
                 label$16 : {
                  label$17 : {
                   label$18 : {
                    while (1) {
                     label$19 : {
                      label$21 : {
                       label$22 : {
                        label$23 : {
                         label$24 : {
                          label$25 : {
                           label$26 : {
                            label$27 : {
                             label$28 : {
                              label$29 : {
                               label$30 : {
                                label$31 : {
                                 label$32 : {
                                  label$33 : {
                                   $18_1 = $1_1;
                                   switch ($1_1 - 2097152 | 0) {
                                   case 5:
                                    break label$12;
                                   case 4:
                                    break label$13;
                                   case 7:
                                    break label$16;
                                   case 6:
                                    break label$17;
                                   case 9:
                                    break label$18;
                                   case 8:
                                    break label$19;
                                   case 2:
                                   case 14:
                                    break label$21;
                                   case 3:
                                   case 15:
                                    break label$22;
                                   case 13:
                                    break label$25;
                                   case 12:
                                    break label$27;
                                   case 1:
                                    break label$29;
                                   case 0:
                                    break label$30;
                                   case 11:
                                    break label$31;
                                   case 10:
                                    break label$32;
                                   default:
                                    break label$33;
                                   };
                                  }
                                  label$34 : {
                                   switch ($18_1 - 6291456 | 0) {
                                   case 5:
                                    break label$10;
                                   case 4:
                                    break label$11;
                                   case 7:
                                    break label$14;
                                   case 6:
                                    break label$15;
                                   case 9:
                                    break label$18;
                                   case 8:
                                    break label$19;
                                   case 2:
                                   case 14:
                                    break label$21;
                                   case 3:
                                   case 15:
                                    break label$22;
                                   case 1:
                                    break label$23;
                                   case 13:
                                    break label$24;
                                   case 12:
                                    break label$26;
                                   case 0:
                                    break label$28;
                                   default:
                                    break label$34;
                                   };
                                  }
                                  $1_1 = ($18_1 | 0) <= 2097151 ? $18_1 : 0;
                                  if (($1_1 | 0) <= 0) {
                                   break label$1
                                  }
                                  HEAP16[$14 + 8 >> 1] = $1_1;
                                  if (HEAPU8[$0_1 + 83 | 0] ? ($1_1 | 0) == 10 : 0) {
                                   break label$1
                                  }
                                  label$36 : {
                                   label$37 : {
                                    if (!HEAPU8[$0_1 + 72 | 0] | HEAP32[$7_1 >> 2] != HEAP32[$6_1 >> 2]) {
                                     break label$37
                                    }
                                    $1_1 = HEAP32[$0_1 + 60 >> 2];
                                    if (($1_1 | 0) >= HEAP32[$0_1 + 4 >> 2]) {
                                     break label$37
                                    }
                                    $2_1 = $675($0_1 + 92 | 0, $1_1, 1, 1);
                                    if ($2_1) {
                                     HEAP16[$2_1 >> 1] = HEAPU16[HEAP32[$0_1 + 20 >> 2] + ($1_1 << 1) >> 1]
                                    }
                                    HEAP8[$0_1 + 3694 | 0] = 1;
                                    $1_1 = HEAP32[$0_1 + 60 >> 2] << 1;
                                    $2_1 = $1_1 + HEAP32[$0_1 + 20 >> 2] | 0;
                                    $3 = $28($2_1, $2_1 + 2 | 0);
                                    HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - $3;
                                    HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
                                    $3 = $1_1 + HEAP32[$0_1 + 20 >> 2] | 0;
                                    while (1) {
                                     $1_1 = HEAPU16[$3 + 2 >> 1];
                                     if ($1_1) {
                                      HEAP16[$2_1 >> 1] = $1_1;
                                      $2_1 = $2_1 + 2 | 0;
                                     }
                                     $3 = $3 + 2 | 0;
                                     if ($1_1) {
                                      continue
                                     }
                                     break;
                                    };
                                    HEAP16[$2_1 >> 1] = 0;
                                    if ($676($0_1, HEAP32[$0_1 + 60 >> 2], $14 + 8 | 0, 1)) {
                                     break label$36
                                    }
                                    break label$1;
                                   }
                                   $672($0_1, $4_1);
                                   if (!$676($0_1, HEAP32[$0_1 + 60 >> 2], $14 + 8 | 0, 1)) {
                                    break label$1
                                   }
                                   $675($0_1 + 92 | 0, HEAP32[$0_1 + 60 >> 2], 0, 1);
                                  }
                                  HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
                                  HEAP8[$11_1 | 0] = 0;
                                  break label$1;
                                 }
                                 $1_1 = HEAP16[$0_1 + 3674 >> 1];
                                 label$42 : {
                                  if (!$1_1) {
                                   break label$42
                                  }
                                  $8 = $0_1 + 92 | 0;
                                  $3 = ($8 + ($1_1 << 4) | 0) - 16 | 0;
                                  $15_1 = HEAP32[$3 + 12 >> 2];
                                  $10_1 = HEAP32[$3 >> 2];
                                  $5_1 = HEAP32[$3 + 8 >> 2];
                                  $2_1 = HEAP16[$0_1 + 3676 >> 1];
                                  $1_1 = ($8 + ($2_1 << 4) | 0) - 16 | 0;
                                  $9 = HEAP32[$3 + 4 >> 2];
                                  HEAP32[$1_1 + 8 >> 2] = $9;
                                  HEAP32[$1_1 + 4 >> 2] = $5_1;
                                  HEAP32[$1_1 + 12 >> 2] = -1;
                                  HEAP32[$1_1 >> 2] = $10_1;
                                  if ($5_1) {
                                   label$44 : {
                                    label$45 : {
                                     label$46 : {
                                      $3 = $5_1 + HEAP32[$0_1 + 3680 >> 2] | 0;
                                      if (($3 | 0) <= 998) {
                                       $1_1 = HEAP32[$0_1 + 3684 >> 2];
                                       if (($3 | 0) <= ($1_1 | 0)) {
                                        $3 = ($1_1 | 0) < ($3 | 0);
                                        break label$45;
                                       }
                                       if (($2_1 | 0) == 99) {
                                        break label$42
                                       }
                                       $12_1 = $0_1 + 1676 | 0;
                                       break label$46;
                                      }
                                      HEAP32[$1_1 + 4 >> 2] = 0;
                                      break label$44;
                                     }
                                     while (1) {
                                      if ($2_1 << 16 >> 16 <= 98) {
                                       label$51 : {
                                        if (HEAP32[$0_1 + 1672 >> 2] < 0) {
                                         break label$51
                                        }
                                        $1_1 = HEAP32[$0_1 + 3684 >> 2];
                                        $3 = HEAP32[$0_1 + 1664 >> 2];
                                        $2_1 = $1_1 + $3 | 0;
                                        HEAP32[$0_1 + 3684 >> 2] = $2_1;
                                        $2_1 = $2_1 << 1;
                                        $1603($2_1 + $12_1 | 0, $12_1 + ($1_1 << 1) | 0, 1998 - $2_1 | 0);
                                        $2_1 = HEAP16[$0_1 + 3676 >> 1];
                                        if (($2_1 | 0) > 97) {
                                         break label$51
                                        }
                                        while (1) {
                                         $1_1 = $8 + ($2_1 << 4) | 0;
                                         $17_1 = HEAP32[$1_1 + 12 >> 2];
                                         if (($17_1 | 0) >= 0) {
                                          HEAP32[$1_1 + 12 >> 2] = $3 + $17_1
                                         }
                                         $2_1 = $2_1 + 1 | 0;
                                         if (($2_1 | 0) != 98) {
                                          continue
                                         }
                                         break;
                                        };
                                       }
                                       $1_1 = HEAP16[$0_1 + 3676 >> 1] << 4;
                                       $2_1 = $1_1 + $8 | 0;
                                       $1603($2_1 + 16 | 0, $2_1, 1568 - $1_1 | 0);
                                       HEAP16[$0_1 + 3676 >> 1] = HEAPU16[$0_1 + 3676 >> 1] + 1;
                                      }
                                      $1_1 = HEAP32[$0_1 + 3684 >> 2];
                                      $2_1 = ($1_1 | 0) < ($5_1 + HEAP32[$0_1 + 3680 >> 2] | 0);
                                      $3 = $2_1;
                                      if (!$2_1) {
                                       break label$45
                                      }
                                      $2_1 = HEAPU16[$0_1 + 3676 >> 1];
                                      if (($2_1 | 0) != 99) {
                                       continue
                                      }
                                      break;
                                     };
                                     break label$42;
                                    }
                                    $1_1 = $1_1 - $5_1 | 0;
                                    HEAP32[($8 + (HEAP16[$0_1 + 3676 >> 1] << 4) | 0) - 4 >> 2] = $1_1;
                                    HEAP32[$0_1 + 3684 >> 2] = $1_1;
                                    if (($5_1 | 0) > 0) {
                                     $8 = HEAP32[$0_1 + 20 >> 2];
                                     $2_1 = 0;
                                     while (1) {
                                      HEAP16[(($1_1 + $2_1 << 1) + $0_1 | 0) + 1676 >> 1] = HEAPU16[$8 + ($2_1 + $10_1 << 1) >> 1];
                                      $2_1 = $2_1 + 1 | 0;
                                      if (($5_1 | 0) != ($2_1 | 0)) {
                                       continue
                                      }
                                      break;
                                     };
                                    }
                                    if ($3) {
                                     break label$42
                                    }
                                   }
                                   HEAP8[$0_1 + 3694 | 0] = 1;
                                   $1_1 = $10_1 << 1;
                                   $2_1 = $1_1 + HEAP32[$0_1 + 20 >> 2] | 0;
                                   $3 = $5_1 << 1;
                                   $8 = $28($2_1, $3 + $2_1 | 0);
                                   HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - $8;
                                   HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - $5_1;
                                   $3 = $3 + ($1_1 + HEAP32[$0_1 + 20 >> 2] | 0) | 0;
                                   while (1) {
                                    $1_1 = HEAPU16[$3 >> 1];
                                    if ($1_1) {
                                     HEAP16[$2_1 >> 1] = $1_1;
                                     $2_1 = $2_1 + 2 | 0;
                                    }
                                    $3 = $3 + 2 | 0;
                                    if ($1_1) {
                                     continue
                                    }
                                    break;
                                   };
                                   HEAP16[$2_1 >> 1] = 0;
                                  }
                                  if ($9) {
                                   $676($0_1, $10_1, (($15_1 << 1) + $0_1 | 0) + 1676 | 0, $9);
                                   $1_1 = $0_1 + 3680 | 0;
                                   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - $9;
                                  }
                                  HEAP32[$0_1 + 60 >> 2] = $10_1 + $9;
                                  HEAP16[$0_1 + 3674 >> 1] = HEAPU16[$0_1 + 3674 >> 1] - 1;
                                  HEAP16[$0_1 + 3676 >> 1] = HEAPU16[$0_1 + 3676 >> 1] - 1;
                                 }
                                 HEAP8[$11_1 | 0] = 0;
                                 break label$1;
                                }
                                $1_1 = HEAP16[$0_1 + 3676 >> 1];
                                if (($1_1 | 0) != 99) {
                                 $2_1 = $1_1 << 4;
                                 $1_1 = $0_1 + 92 | 0;
                                 $2_1 = $2_1 + $1_1 | 0;
                                 $9 = HEAP32[$2_1 + 12 >> 2];
                                 $5_1 = HEAP32[$2_1 >> 2];
                                 $10_1 = HEAP32[$2_1 + 4 >> 2];
                                 $1_1 = $1_1 + (HEAP16[$0_1 + 3674 >> 1] << 4) | 0;
                                 $3 = HEAP32[$2_1 + 8 >> 2];
                                 HEAP32[$1_1 + 4 >> 2] = $3;
                                 HEAP32[$1_1 + 8 >> 2] = $10_1;
                                 HEAP32[$1_1 + 12 >> 2] = -1;
                                 HEAP32[$1_1 >> 2] = $5_1;
                                 if ($3) {
                                  $8 = HEAP32[$0_1 + 3680 >> 2];
                                  $2_1 = $8 + $3 | 0;
                                  label$62 : {
                                   if (($2_1 | 0) > HEAP32[$0_1 + 3684 >> 2]) {
                                    HEAP32[$1_1 + 4 >> 2] = 0;
                                    HEAP32[$1_1 + 8 >> 2] = 0;
                                    break label$62;
                                   }
                                   HEAP32[$1_1 + 12 >> 2] = $8;
                                   HEAP32[$0_1 + 3680 >> 2] = $2_1;
                                   if (($3 | 0) <= 0) {
                                    break label$62
                                   }
                                   $1_1 = HEAP32[$0_1 + 20 >> 2];
                                   $2_1 = 0;
                                   while (1) {
                                    HEAP16[(($2_1 + $8 << 1) + $0_1 | 0) + 1676 >> 1] = HEAPU16[$1_1 + ($2_1 + $5_1 << 1) >> 1];
                                    $2_1 = $2_1 + 1 | 0;
                                    if (($3 | 0) != ($2_1 | 0)) {
                                     continue
                                    }
                                    break;
                                   };
                                  }
                                  HEAP8[$0_1 + 3694 | 0] = 1;
                                  $2_1 = $5_1 << 1;
                                  $1_1 = $2_1 + HEAP32[$0_1 + 20 >> 2] | 0;
                                  $8 = $3 << 1;
                                  $12_1 = $28($1_1, $8 + $1_1 | 0);
                                  HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - $12_1;
                                  HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - $3;
                                  $3 = $8 + ($2_1 + HEAP32[$0_1 + 20 >> 2] | 0) | 0;
                                  while (1) {
                                   $2_1 = HEAPU16[$3 >> 1];
                                   if ($2_1) {
                                    HEAP16[$1_1 >> 1] = $2_1;
                                    $1_1 = $1_1 + 2 | 0;
                                   }
                                   $3 = $3 + 2 | 0;
                                   if ($2_1) {
                                    continue
                                   }
                                   break;
                                  };
                                  HEAP16[$1_1 >> 1] = 0;
                                 }
                                 if ($10_1) {
                                  $676($0_1, $5_1, (($9 << 1) + $0_1 | 0) + 1676 | 0, $10_1);
                                  $1_1 = $0_1 + 3684 | 0;
                                  HEAP32[$1_1 >> 2] = $10_1 + HEAP32[$1_1 >> 2];
                                 }
                                 HEAP32[$0_1 + 60 >> 2] = $5_1 + $10_1;
                                 HEAP16[$0_1 + 3674 >> 1] = HEAPU16[$0_1 + 3674 >> 1] + 1;
                                 HEAP16[$0_1 + 3676 >> 1] = HEAPU16[$0_1 + 3676 >> 1] + 1;
                                }
                                HEAP8[$11_1 | 0] = 0;
                                break label$1;
                               }
                               $1_1 = HEAP32[$7_1 >> 2];
                               $2_1 = HEAP32[$6_1 >> 2];
                               label$69 : {
                                if (($1_1 | 0) != ($2_1 | 0)) {
                                 if (($1_1 | 0) > ($2_1 | 0)) {
                                  HEAP32[$6_1 >> 2] = $1_1;
                                  HEAP32[$7_1 >> 2] = $2_1;
                                 }
                                 $1_1 = HEAP32[$7_1 >> 2];
                                 HEAP32[$4_1 >> 2] = $1_1;
                                 HEAP32[$6_1 >> 2] = $1_1;
                                 HEAP8[$11_1 | 0] = 0;
                                 break label$69;
                                }
                                $1_1 = HEAP32[$4_1 >> 2];
                                if (($1_1 | 0) <= 0) {
                                 break label$69
                                }
                                HEAP32[$4_1 >> 2] = $1_1 - 1;
                               }
                               HEAP8[$11_1 | 0] = 0;
                               break label$1;
                              }
                              $1_1 = HEAP32[$7_1 >> 2];
                              $2_1 = HEAP32[$6_1 >> 2];
                              label$72 : {
                               if (($1_1 | 0) != ($2_1 | 0)) {
                                if (($1_1 | 0) > ($2_1 | 0)) {
                                 HEAP32[$6_1 >> 2] = $1_1;
                                 HEAP32[$7_1 >> 2] = $2_1;
                                }
                                $1_1 = HEAP32[$0_1 + 4 >> 2];
                                $2_1 = HEAP32[$0_1 + 64 >> 2];
                                $3 = HEAP32[$0_1 + 68 >> 2];
                                label$75 : {
                                 if (($2_1 | 0) == ($3 | 0)) {
                                  break label$75
                                 }
                                 if (($1_1 | 0) < ($2_1 | 0)) {
                                  HEAP32[$7_1 >> 2] = $1_1
                                 }
                                 if (($1_1 | 0) < ($3 | 0)) {
                                  HEAP32[$6_1 >> 2] = $1_1
                                 }
                                 $2_1 = HEAP32[$7_1 >> 2];
                                 if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
                                  break label$75
                                 }
                                 HEAP32[$4_1 >> 2] = $2_1;
                                }
                                if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
                                 HEAP32[$4_1 >> 2] = $1_1
                                }
                                $1_1 = HEAP32[$6_1 >> 2];
                                HEAP32[$4_1 >> 2] = $1_1;
                                HEAP32[$7_1 >> 2] = $1_1;
                                HEAP8[$11_1 | 0] = 0;
                                break label$72;
                               }
                               HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] + 1;
                              }
                              $1_1 = HEAP32[$0_1 + 4 >> 2];
                              $2_1 = HEAP32[$0_1 + 64 >> 2];
                              $3 = HEAP32[$0_1 + 68 >> 2];
                              label$79 : {
                               if (($2_1 | 0) == ($3 | 0)) {
                                break label$79
                               }
                               if (($1_1 | 0) < ($2_1 | 0)) {
                                HEAP32[$7_1 >> 2] = $1_1
                               }
                               if (($1_1 | 0) < ($3 | 0)) {
                                HEAP32[$6_1 >> 2] = $1_1
                               }
                               $2_1 = HEAP32[$7_1 >> 2];
                               if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
                                break label$79
                               }
                               HEAP32[$4_1 >> 2] = $2_1;
                              }
                              if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
                               HEAP32[$4_1 >> 2] = $1_1
                              }
                              HEAP8[$11_1 | 0] = 0;
                              break label$1;
                             }
                             $1_1 = HEAP32[$0_1 + 4 >> 2];
                             $2_1 = HEAP32[$0_1 + 64 >> 2];
                             $3 = HEAP32[$0_1 + 68 >> 2];
                             label$83 : {
                              if (($2_1 | 0) == ($3 | 0)) {
                               break label$83
                              }
                              if (($1_1 | 0) < ($2_1 | 0)) {
                               HEAP32[$7_1 >> 2] = $1_1
                              }
                              if (($1_1 | 0) < ($3 | 0)) {
                               HEAP32[$6_1 >> 2] = $1_1
                              }
                              $2_1 = HEAP32[$7_1 >> 2];
                              if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
                               break label$83
                              }
                              HEAP32[$4_1 >> 2] = $2_1;
                             }
                             if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
                              HEAP32[$4_1 >> 2] = $1_1
                             }
                             $1_1 = HEAP32[$6_1 >> 2];
                             label$87 : {
                              if (($1_1 | 0) == HEAP32[$7_1 >> 2]) {
                               $1_1 = HEAP32[$4_1 >> 2];
                               HEAP32[$6_1 >> 2] = $1_1;
                               HEAP32[$7_1 >> 2] = $1_1;
                               break label$87;
                              }
                              HEAP32[$4_1 >> 2] = $1_1;
                             }
                             $1_1 = HEAP32[$6_1 >> 2];
                             if (($1_1 | 0) > 0) {
                              HEAP32[$6_1 >> 2] = $1_1 - 1
                             }
                             HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
                             HEAP8[$11_1 | 0] = 0;
                             break label$1;
                            }
                            $1_1 = HEAP32[$7_1 >> 2];
                            $2_1 = HEAP32[$6_1 >> 2];
                            if (($1_1 | 0) != ($2_1 | 0)) {
                             if (($1_1 | 0) > ($2_1 | 0)) {
                              HEAP32[$6_1 >> 2] = $1_1;
                              HEAP32[$7_1 >> 2] = $2_1;
                             }
                             $1_1 = HEAP32[$7_1 >> 2];
                             HEAP32[$4_1 >> 2] = $1_1;
                             HEAP32[$6_1 >> 2] = $1_1;
                             HEAP8[$11_1 | 0] = 0;
                             break label$1;
                            }
                            $1_1 = HEAP32[$4_1 >> 2];
                            $2_1 = ($1_1 >> 31 & $1_1) - 1 | 0;
                            while (1) {
                             label$92 : {
                              if (($1_1 | 0) <= 0) {
                               $3 = $2_1;
                               break label$92;
                              }
                              $3 = $1_1 - 1 | 0;
                              $1_1 = $3;
                              if (!$691($0_1, $1_1)) {
                               continue
                              }
                             }
                             break;
                            };
                            $1_1 = ($3 | 0) > 0 ? $3 : 0;
                            $2_1 = HEAP32[$0_1 + 4 >> 2];
                            HEAP32[$0_1 + 60 >> 2] = ($1_1 | 0) < ($2_1 | 0) ? $1_1 : $2_1;
                            break label$1;
                           }
                           if (HEAP32[$7_1 >> 2] == HEAP32[$6_1 >> 2]) {
                            $1_1 = HEAP32[$4_1 >> 2];
                            HEAP32[$6_1 >> 2] = $1_1;
                            HEAP32[$7_1 >> 2] = $1_1;
                           }
                           $1_1 = HEAP32[$4_1 >> 2];
                           $2_1 = ($1_1 >> 31 & $1_1) - 1 | 0;
                           while (1) {
                            label$96 : {
                             if (($1_1 | 0) <= 0) {
                              $3 = $2_1;
                              break label$96;
                             }
                             $3 = $1_1 - 1 | 0;
                             $1_1 = $3;
                             if (!$691($0_1, $1_1)) {
                              continue
                             }
                            }
                            break;
                           };
                           $2_1 = ($3 | 0) > 0 ? $3 : 0;
                           HEAP32[$0_1 + 68 >> 2] = $2_1;
                           HEAP32[$0_1 + 60 >> 2] = $2_1;
                           $1_1 = HEAP32[$0_1 + 4 >> 2];
                           $3 = HEAP32[$0_1 + 64 >> 2];
                           label$99 : {
                            if (($3 | 0) == ($2_1 | 0)) {
                             break label$99
                            }
                            if (($1_1 | 0) < ($3 | 0)) {
                             HEAP32[$7_1 >> 2] = $1_1
                            }
                            if (($1_1 | 0) < ($2_1 | 0)) {
                             HEAP32[$6_1 >> 2] = $1_1
                            }
                            $2_1 = HEAP32[$7_1 >> 2];
                            if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
                             break label$99
                            }
                            HEAP32[$4_1 >> 2] = $2_1;
                           }
                           if (($1_1 | 0) >= HEAP32[$4_1 >> 2]) {
                            break label$1
                           }
                           HEAP32[$4_1 >> 2] = $1_1;
                           break label$1;
                          }
                          $1_1 = HEAP32[$7_1 >> 2];
                          $2_1 = HEAP32[$6_1 >> 2];
                          if (($1_1 | 0) != ($2_1 | 0)) {
                           if (($1_1 | 0) > ($2_1 | 0)) {
                            HEAP32[$6_1 >> 2] = $1_1;
                            HEAP32[$7_1 >> 2] = $2_1;
                           }
                           $1_1 = HEAP32[$0_1 + 4 >> 2];
                           $2_1 = HEAP32[$0_1 + 64 >> 2];
                           $3 = HEAP32[$0_1 + 68 >> 2];
                           label$104 : {
                            if (($2_1 | 0) == ($3 | 0)) {
                             break label$104
                            }
                            if (($1_1 | 0) < ($2_1 | 0)) {
                             HEAP32[$7_1 >> 2] = $1_1
                            }
                            if (($1_1 | 0) < ($3 | 0)) {
                             HEAP32[$6_1 >> 2] = $1_1
                            }
                            $2_1 = HEAP32[$7_1 >> 2];
                            if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
                             break label$104
                            }
                            HEAP32[$4_1 >> 2] = $2_1;
                           }
                           if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
                            HEAP32[$4_1 >> 2] = $1_1
                           }
                           $1_1 = HEAP32[$6_1 >> 2];
                           HEAP32[$4_1 >> 2] = $1_1;
                           HEAP32[$7_1 >> 2] = $1_1;
                           HEAP8[$11_1 | 0] = 0;
                           break label$1;
                          }
                          $3 = HEAP32[$0_1 + 4 >> 2];
                          $1_1 = HEAP32[$0_1 + 60 >> 2];
                          $2_1 = $1_1 + 1 | 0;
                          $2_1 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
                          while (1) {
                           label$108 : {
                            $1_1 = $1_1 + 1 | 0;
                            if (($3 | 0) <= ($1_1 | 0)) {
                             $5_1 = $2_1;
                             break label$108;
                            }
                            $5_1 = $1_1;
                            if (!$691($0_1, $1_1)) {
                             continue
                            }
                           }
                           break;
                          };
                          HEAP32[$4_1 >> 2] = ($3 | 0) > ($5_1 | 0) ? $5_1 : $3;
                          break label$1;
                         }
                         if (HEAP32[$7_1 >> 2] == HEAP32[$6_1 >> 2]) {
                          $1_1 = HEAP32[$4_1 >> 2];
                          HEAP32[$6_1 >> 2] = $1_1;
                          HEAP32[$7_1 >> 2] = $1_1;
                         }
                         $3 = HEAP32[$0_1 + 4 >> 2];
                         $1_1 = HEAP32[$0_1 + 60 >> 2];
                         $2_1 = $1_1 + 1 | 0;
                         $2_1 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
                         while (1) {
                          label$112 : {
                           $1_1 = $1_1 + 1 | 0;
                           if (($3 | 0) <= ($1_1 | 0)) {
                            $5_1 = $2_1;
                            break label$112;
                           }
                           $5_1 = $1_1;
                           if (!$691($0_1, $1_1)) {
                            continue
                           }
                          }
                          break;
                         };
                         $1_1 = ($3 | 0) > ($5_1 | 0) ? $5_1 : $3;
                         HEAP32[$4_1 >> 2] = $1_1;
                         HEAP32[$6_1 >> 2] = $1_1;
                         $2_1 = HEAP32[$7_1 >> 2];
                         label$115 : {
                          if (($2_1 | 0) == ($1_1 | 0)) {
                           break label$115
                          }
                          if (($2_1 | 0) > ($3 | 0)) {
                           HEAP32[$7_1 >> 2] = $3
                          }
                          $2_1 = $1_1;
                          $1_1 = HEAP32[$7_1 >> 2];
                          if (($2_1 | 0) != ($1_1 | 0)) {
                           break label$115
                          }
                          HEAP32[$4_1 >> 2] = $1_1;
                         }
                         if (($3 | 0) >= HEAP32[$4_1 >> 2]) {
                          break label$1
                         }
                         HEAP32[$4_1 >> 2] = $3;
                         break label$1;
                        }
                        $1_1 = HEAP32[$6_1 >> 2];
                        label$117 : {
                         if (($1_1 | 0) == HEAP32[$7_1 >> 2]) {
                          $1_1 = HEAP32[$4_1 >> 2];
                          HEAP32[$6_1 >> 2] = $1_1;
                          HEAP32[$7_1 >> 2] = $1_1;
                          break label$117;
                         }
                         HEAP32[$4_1 >> 2] = $1_1;
                        }
                        $2_1 = HEAP32[$0_1 + 68 >> 2];
                        $3 = $2_1 + 1 | 0;
                        HEAP32[$0_1 + 68 >> 2] = $3;
                        $1_1 = HEAP32[$0_1 + 4 >> 2];
                        $5_1 = $3;
                        $3 = HEAP32[$0_1 + 64 >> 2];
                        label$119 : {
                         if (($5_1 | 0) == ($3 | 0)) {
                          break label$119
                         }
                         if (($1_1 | 0) < ($3 | 0)) {
                          HEAP32[$7_1 >> 2] = $1_1
                         }
                         if (($1_1 | 0) <= ($2_1 | 0)) {
                          HEAP32[$6_1 >> 2] = $1_1
                         }
                         $2_1 = HEAP32[$7_1 >> 2];
                         if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
                          break label$119
                         }
                         HEAP32[$4_1 >> 2] = $2_1;
                        }
                        if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
                         HEAP32[$4_1 >> 2] = $1_1
                        }
                        HEAP32[$4_1 >> 2] = HEAP32[$6_1 >> 2];
                        HEAP8[$11_1 | 0] = 0;
                        break label$1;
                       }
                       $20_1 = $18_1 & 4194304;
                       $12_1 = ($18_1 & -4194305) != 2097167;
                       $24 = $12_1 & $32_1;
                       if ($24) {
                        $1_1 = $20_1 | 2097153
                       } else {
                        label$125 : {
                         label$126 : {
                          label$127 : {
                           if ($20_1) {
                            if (($2_1 | 0) == ($3 | 0)) {
                             HEAP32[$6_1 >> 2] = $5_1;
                             HEAP32[$7_1 >> 2] = $5_1;
                             $8 = $5_1;
                             $1_1 = $5_1;
                             $2_1 = $1_1;
                             break label$125;
                            }
                            HEAP32[$4_1 >> 2] = $2_1;
                            $5_1 = $2_1;
                            break label$127;
                           }
                           if (($2_1 | 0) != ($3 | 0)) {
                            break label$126
                           }
                          }
                          $8 = $5_1;
                          $1_1 = $2_1;
                          $2_1 = $3;
                          break label$125;
                         }
                         label$130 : {
                          if (($2_1 | 0) >= ($3 | 0)) {
                           $10_1 = $2_1;
                           $2_1 = $3;
                           break label$130;
                          }
                          HEAP32[$6_1 >> 2] = $3;
                          HEAP32[$7_1 >> 2] = $2_1;
                          $10_1 = $3;
                         }
                         $1_1 = $2_1;
                         $2_1 = $10_1;
                         label$132 : {
                          if (($2_1 | 0) == ($1_1 | 0)) {
                           $3 = $5_1;
                           break label$132;
                          }
                          $10_1 = $1_1;
                          if (($9 | 0) < ($1_1 | 0)) {
                           HEAP32[$7_1 >> 2] = $9;
                           $3 = $9;
                          } else {
                           $3 = $10_1
                          }
                          $10_1 = $2_1;
                          if (($2_1 | 0) > ($9 | 0)) {
                           HEAP32[$6_1 >> 2] = $9;
                           $2_1 = $9;
                          } else {
                           $2_1 = $10_1
                          }
                          label$136 : {
                           if (($2_1 | 0) != ($3 | 0)) {
                            $3 = $5_1;
                            break label$136;
                           }
                           HEAP32[$4_1 >> 2] = $3;
                          }
                         }
                         if (($3 | 0) > ($9 | 0)) {
                          HEAP32[$4_1 >> 2] = $9
                         }
                         HEAP32[$4_1 >> 2] = $2_1;
                         HEAP32[$7_1 >> 2] = $2_1;
                         HEAP8[$11_1 | 0] = 0;
                         $10_1 = 0;
                         $8 = $2_1;
                         $1_1 = $2_1;
                        }
                        $5_1 = $8;
                        $3 = $1_1;
                        if (($1_1 | 0) != ($2_1 | 0)) {
                         $8 = $2_1;
                         if (($2_1 | 0) > ($9 | 0)) {
                          HEAP32[$7_1 >> 2] = $9;
                          $2_1 = $9;
                         } else {
                          $2_1 = $8
                         }
                         $8 = $3;
                         if (($3 | 0) > ($9 | 0)) {
                          HEAP32[$6_1 >> 2] = $9;
                          $3 = $9;
                         } else {
                          $3 = $8
                         }
                         if (($3 | 0) == ($2_1 | 0)) {
                          HEAP32[$4_1 >> 2] = $2_1;
                          $5_1 = $2_1;
                         }
                        }
                        $1_1 = $2_1;
                        $2_1 = $3;
                        $25_1 = $12_1 ? 1 : $30;
                        $3 = $5_1;
                        if (($9 | 0) < ($3 | 0)) {
                         HEAP32[$4_1 >> 2] = $9;
                         $3 = $9;
                        }
                        $692($14 + 8 | 0, $0_1, $3, $31_1);
                        label$146 : {
                         if (($25_1 | 0) <= 0) {
                          $5_1 = $3;
                          $12_1 = $1_1;
                          break label$146;
                         }
                         $28_1 = HEAPF32[$14 + 8 >> 2];
                         $8 = $3;
                         $3 = $2_1;
                         $12_1 = $1_1;
                         $5_1 = $2_1;
                         $15_1 = HEAP32[$14 + 24 >> 2];
                         $17_1 = HEAP32[$14 + 20 >> 2];
                         $22_1 = 0;
                         label$148 : {
                          while (1) {
                           $2_1 = $17_1;
                           $17_1 = $3;
                           if (!$15_1) {
                            break label$148
                           }
                           $16_1 = $2_1 + $15_1 | 0;
                           $19 = $23_1 + ($16_1 << 1) | 0;
                           if (HEAPU16[$19 - 2 >> 1] != 10) {
                            break label$148
                           }
                           $15_1 = $5_1;
                           $21_1 = $10_1 & 255 ? $13 : $28_1;
                           HEAP32[$4_1 >> 2] = $16_1;
                           $10_1 = HEAP32[$27_1 + 6464 >> 2];
                           $8 = $10_1 + 12 | 0;
                           $33_1 = Math_fround(HEAPF32[$27_1 + 6468 >> 2] / HEAPF32[$10_1 + 16 >> 2]);
                           $3 = $19;
                           while (1) {
                            label$150 : {
                             $2_1 = $3;
                             if ($29_1 >>> 0 <= $2_1 >>> 0) {
                              $5_1 = $2_1;
                              break label$150;
                             }
                             $3 = $2_1 + 2 | 0;
                             $5_1 = $3;
                             if (HEAPU16[$2_1 >> 1] != 10) {
                              continue
                             }
                            }
                            break;
                           };
                           $3 = $5_1 - $19 | 0;
                           $19 = $3 >> 1;
                           $2_1 = $16_1;
                           label$153 : {
                            if (($3 | 0) <= 0) {
                             break label$153
                            }
                            $3 = $16_1;
                            $5_1 = 0;
                            $13 = Math_fround(0.0);
                            while (1) {
                             $26_1 = $13;
                             $2_1 = $3;
                             $13 = Math_fround(-1.0);
                             $3 = HEAPU16[$23_1 + ($5_1 + $16_1 << 1) >> 1];
                             if (($3 | 0) != 10) {
                              $13 = Math_fround($33_1 * HEAPF32[(($3 | 0) < HEAP32[$10_1 >> 2] ? HEAP32[$10_1 + 8 >> 2] + ($3 << 2) | 0 : $8) >> 2])
                             }
                             label$156 : {
                              if ($13 == Math_fround(-1.0)) {
                               $13 = $26_1;
                               $3 = 0;
                               break label$156;
                              }
                              $13 = Math_fround($26_1 + $13);
                              $3 = 0;
                              if ($13 > $21_1) {
                               break label$156
                              }
                              $2_1 = $2_1 + 1 | 0;
                              HEAP32[$4_1 >> 2] = $2_1;
                              $3 = 1;
                             }
                             if (!$3) {
                              break label$153
                             }
                             $3 = $2_1;
                             $5_1 = $5_1 + 1 | 0;
                             if (($19 | 0) > ($5_1 | 0)) {
                              continue
                             }
                             break;
                            };
                           }
                           label$160 : {
                            if (($1_1 | 0) == ($15_1 | 0)) {
                             $3 = $17_1;
                             $10_1 = $12_1;
                             $5_1 = $15_1;
                             $8 = $1_1;
                             break label$160;
                            }
                            $3 = $12_1;
                            $5_1 = $1_1;
                            if (($9 | 0) < ($1_1 | 0)) {
                             HEAP32[$7_1 >> 2] = $9;
                             $3 = $9;
                             $5_1 = $3;
                            }
                            $8 = $5_1;
                            $10_1 = $3;
                            $3 = $17_1;
                            $5_1 = $15_1;
                            if (($9 | 0) < ($5_1 | 0)) {
                             HEAP32[$6_1 >> 2] = $9;
                             $3 = $9;
                             $5_1 = $3;
                            }
                            if (($5_1 | 0) == ($8 | 0)) {
                             HEAP32[$4_1 >> 2] = $8;
                             $2_1 = $8;
                            }
                           }
                           $1_1 = $8;
                           $12_1 = $10_1;
                           if (($2_1 | 0) > ($9 | 0)) {
                            HEAP32[$4_1 >> 2] = $9;
                            $2_1 = $9;
                           }
                           HEAPF32[$0_1 + 88 >> 2] = $21_1;
                           HEAP8[$0_1 + 82 | 0] = 1;
                           if ($20_1) {
                            HEAP32[$6_1 >> 2] = $2_1;
                            $5_1 = $2_1;
                            $3 = $2_1;
                           }
                           $13 = $21_1;
                           $10_1 = 1;
                           $8 = $2_1;
                           $15_1 = $19;
                           $17_1 = $16_1;
                           $22_1 = $22_1 + 1 | 0;
                           if (($25_1 | 0) != ($22_1 | 0)) {
                            continue
                           }
                           break;
                          };
                          HEAP32[$14 + 24 >> 2] = $19;
                          HEAP32[$14 + 20 >> 2] = $16_1;
                          $5_1 = $2_1;
                          $2_1 = $3;
                          break label$146;
                         }
                         HEAP32[$14 + 24 >> 2] = $15_1;
                         HEAP32[$14 + 20 >> 2] = $2_1;
                         $5_1 = $8;
                         $2_1 = $17_1;
                        }
                        $3 = $12_1;
                        $1_1 = $18_1;
                       }
                       if ($24) {
                        continue
                       }
                       break label$1;
                      }
                      $22_1 = $18_1 & 4194304;
                      $15_1 = ($18_1 & -4194305) != 2097166;
                      $24 = $15_1 & $32_1;
                      label$168 : {
                       if ($24) {
                        $8 = $10_1;
                        $1_1 = $22_1 | 2097152;
                        break label$168;
                       }
                       label$170 : {
                        label$171 : {
                         label$172 : {
                          if ($22_1) {
                           if (($2_1 | 0) == ($3 | 0)) {
                            HEAP32[$6_1 >> 2] = $5_1;
                            HEAP32[$7_1 >> 2] = $5_1;
                            $8 = $5_1;
                            $1_1 = $5_1;
                            $2_1 = $1_1;
                            break label$170;
                           }
                           HEAP32[$4_1 >> 2] = $2_1;
                           $5_1 = $2_1;
                           break label$172;
                          }
                          if (($2_1 | 0) != ($3 | 0)) {
                           break label$171
                          }
                         }
                         $8 = $5_1;
                         $1_1 = $2_1;
                         $2_1 = $3;
                         break label$170;
                        }
                        label$175 : {
                         if (($2_1 | 0) >= ($3 | 0)) {
                          $2_1 = $3;
                          break label$175;
                         }
                         HEAP32[$6_1 >> 2] = $3;
                         HEAP32[$7_1 >> 2] = $2_1;
                        }
                        HEAP32[$4_1 >> 2] = $2_1;
                        HEAP32[$6_1 >> 2] = $2_1;
                        HEAP8[$11_1 | 0] = 0;
                        $10_1 = 0;
                        $8 = $2_1;
                        $1_1 = $2_1;
                       }
                       $5_1 = $8;
                       $8 = $10_1;
                       $3 = $1_1;
                       if (($1_1 | 0) != ($2_1 | 0)) {
                        $10_1 = $2_1;
                        if (($2_1 | 0) > ($9 | 0)) {
                         HEAP32[$7_1 >> 2] = $9;
                         $2_1 = $9;
                        } else {
                         $2_1 = $10_1
                        }
                        $10_1 = $3;
                        if (($3 | 0) > ($9 | 0)) {
                         HEAP32[$6_1 >> 2] = $9;
                         $3 = $9;
                        } else {
                         $3 = $10_1
                        }
                        if (($3 | 0) == ($2_1 | 0)) {
                         HEAP32[$4_1 >> 2] = $2_1;
                         $5_1 = $2_1;
                        }
                       }
                       $10_1 = $2_1;
                       $12_1 = $3;
                       $25_1 = $15_1 ? 1 : $30;
                       $2_1 = $5_1;
                       if (($9 | 0) < ($2_1 | 0)) {
                        HEAP32[$4_1 >> 2] = $9;
                        $2_1 = $9;
                       }
                       $692($14 + 8 | 0, $0_1, $2_1, $31_1);
                       label$184 : {
                        if (($25_1 | 0) <= 0) {
                         $5_1 = $2_1;
                         $3 = $10_1;
                         break label$184;
                        }
                        label$186 : {
                         $5_1 = HEAP32[$14 + 28 >> 2];
                         $3 = HEAP32[$14 + 20 >> 2];
                         label$187 : {
                          if (($5_1 | 0) == ($3 | 0)) {
                           $1_1 = $2_1;
                           $2_1 = $5_1;
                           break label$187;
                          }
                          $21_1 = $8 & 255 ? $13 : HEAPF32[$14 + 8 >> 2];
                          $20_1 = HEAP32[$27_1 + 6464 >> 2];
                          $34_1 = $20_1 + 12 | 0;
                          $28_1 = Math_fround(HEAPF32[$27_1 + 6468 >> 2] / HEAPF32[$20_1 + 16 >> 2]);
                          $3 = 0;
                          $8 = $10_1;
                          $17_1 = $10_1;
                          $1_1 = $12_1;
                          $15_1 = $1_1;
                          while (1) {
                           $10_1 = $8;
                           $19 = $3;
                           $16_1 = $5_1;
                           HEAP32[$4_1 >> 2] = $5_1;
                           $8 = $23_1 + ($5_1 << 1) | 0;
                           $3 = $8;
                           while (1) {
                            label$190 : {
                             $2_1 = $3;
                             if ($29_1 >>> 0 <= $2_1 >>> 0) {
                              $5_1 = $2_1;
                              break label$190;
                             }
                             $3 = $2_1 + 2 | 0;
                             $5_1 = $3;
                             if (HEAPU16[$2_1 >> 1] != 10) {
                              continue
                             }
                            }
                            break;
                           };
                           $2_1 = $16_1;
                           $3 = $5_1 - $8 | 0;
                           label$193 : {
                            if (($3 | 0) <= 0) {
                             break label$193
                            }
                            $8 = $3 >> 1;
                            $3 = $16_1;
                            $13 = Math_fround(0.0);
                            $5_1 = 0;
                            while (1) {
                             $26_1 = $13;
                             $2_1 = $3;
                             $13 = Math_fround(-1.0);
                             $3 = HEAPU16[$23_1 + ($5_1 + $16_1 << 1) >> 1];
                             if (($3 | 0) != 10) {
                              $13 = Math_fround($28_1 * HEAPF32[(($3 | 0) < HEAP32[$20_1 >> 2] ? HEAP32[$20_1 + 8 >> 2] + ($3 << 2) | 0 : $34_1) >> 2])
                             }
                             label$196 : {
                              if ($13 == Math_fround(-1.0)) {
                               $13 = $26_1;
                               $3 = 0;
                               break label$196;
                              }
                              $13 = Math_fround($26_1 + $13);
                              $3 = 0;
                              if ($13 > $21_1) {
                               break label$196
                              }
                              $2_1 = $2_1 + 1 | 0;
                              HEAP32[$4_1 >> 2] = $2_1;
                              $3 = 1;
                             }
                             if (!$3) {
                              break label$193
                             }
                             $3 = $2_1;
                             $5_1 = $5_1 + 1 | 0;
                             if (($8 | 0) > ($5_1 | 0)) {
                              continue
                             }
                             break;
                            };
                           }
                           label$200 : {
                            if (($1_1 | 0) == ($10_1 | 0)) {
                             $8 = $2_1;
                             $2_1 = $15_1;
                             $5_1 = $1_1;
                             break label$200;
                            }
                            $3 = $17_1;
                            $5_1 = $10_1;
                            if (($9 | 0) < ($5_1 | 0)) {
                             HEAP32[$7_1 >> 2] = $9;
                             $3 = $9;
                             $5_1 = $3;
                            }
                            $10_1 = $5_1;
                            $12_1 = $3;
                            $3 = $15_1;
                            $5_1 = $1_1;
                            if (($9 | 0) < ($1_1 | 0)) {
                             HEAP32[$6_1 >> 2] = $9;
                             $3 = $9;
                             $5_1 = $3;
                            }
                            if (!(($5_1 | 0) != ($10_1 | 0))) {
                             HEAP32[$4_1 >> 2] = $10_1;
                             $2_1 = $10_1;
                            }
                            $8 = $2_1;
                            $2_1 = $3;
                            $17_1 = $12_1;
                           }
                           $1_1 = $2_1;
                           $2_1 = $8;
                           if (($9 | 0) < ($2_1 | 0)) {
                            HEAP32[$4_1 >> 2] = $9;
                            $2_1 = $9;
                           }
                           $12_1 = $2_1;
                           HEAPF32[$0_1 + 88 >> 2] = $21_1;
                           HEAP8[$0_1 + 82 | 0] = 1;
                           $2_1 = $1_1;
                           $3 = $5_1;
                           if ($22_1) {
                            HEAP32[$6_1 >> 2] = $12_1;
                            $2_1 = $12_1;
                            $1_1 = $2_1;
                           } else {
                            $1_1 = $3
                           }
                           $15_1 = $2_1;
                           $3 = ($16_1 | 0) > 0 ? $16_1 - 1 | 0 : 0;
                           $5_1 = $3 >> 31 & $3;
                           while (1) {
                            label$208 : {
                             $2_1 = $3;
                             if (($2_1 | 0) <= 0) {
                              $2_1 = $5_1;
                              break label$208;
                             }
                             $3 = $2_1 - 1 | 0;
                             if (HEAPU16[$23_1 + ($3 << 1) >> 1] != 10) {
                              continue
                             }
                            }
                            break;
                           };
                           $3 = $19 + 1 | 0;
                           if (($25_1 | 0) == ($3 | 0)) {
                            break label$186
                           }
                           $5_1 = $2_1;
                           $8 = $10_1;
                           if (($2_1 | 0) != ($16_1 | 0)) {
                            continue
                           }
                           break;
                          };
                          $13 = $21_1;
                          $8 = 1;
                          $1_1 = $12_1;
                          $12_1 = $15_1;
                          $10_1 = $17_1;
                          $3 = $16_1;
                         }
                         HEAP32[$14 + 20 >> 2] = $3;
                         HEAP32[$14 + 28 >> 2] = $2_1;
                         $5_1 = $1_1;
                         $3 = $10_1;
                         break label$184;
                        }
                        HEAP32[$14 + 20 >> 2] = $16_1;
                        HEAP32[$14 + 28 >> 2] = $2_1;
                        $13 = $21_1;
                        $8 = 1;
                        $5_1 = $12_1;
                        $3 = $17_1;
                        $12_1 = $15_1;
                       }
                       $2_1 = $12_1;
                       $1_1 = $18_1;
                      }
                      $10_1 = $8;
                      if ($24) {
                       continue
                      }
                      break label$1;
                     }
                     break;
                    };
                    label$211 : {
                     if (HEAP32[$7_1 >> 2] != HEAP32[$6_1 >> 2]) {
                      $672($0_1, $4_1);
                      break label$211;
                     }
                     $1_1 = HEAP32[$0_1 + 60 >> 2];
                     if (($1_1 | 0) >= HEAP32[$0_1 + 4 >> 2]) {
                      break label$211
                     }
                     $2_1 = $675($0_1 + 92 | 0, $1_1, 1, 0);
                     if ($2_1) {
                      HEAP16[$2_1 >> 1] = HEAPU16[HEAP32[$0_1 + 20 >> 2] + ($1_1 << 1) >> 1]
                     }
                     HEAP8[$0_1 + 3694 | 0] = 1;
                     $2_1 = $1_1 << 1;
                     $1_1 = $2_1 + HEAP32[$0_1 + 20 >> 2] | 0;
                     $3 = $28($1_1, $1_1 + 2 | 0);
                     HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - $3;
                     HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
                     $3 = $2_1 + HEAP32[$0_1 + 20 >> 2] | 0;
                     while (1) {
                      $2_1 = HEAPU16[$3 + 2 >> 1];
                      if ($2_1) {
                       HEAP16[$1_1 >> 1] = $2_1;
                       $1_1 = $1_1 + 2 | 0;
                      }
                      $3 = $3 + 2 | 0;
                      if ($2_1) {
                       continue
                      }
                      break;
                     };
                     HEAP16[$1_1 >> 1] = 0;
                     HEAP8[$11_1 | 0] = 0;
                    }
                    HEAP8[$11_1 | 0] = 0;
                    break label$1;
                   }
                   label$217 : {
                    if (HEAP32[$7_1 >> 2] != HEAP32[$6_1 >> 2]) {
                     $672($0_1, $4_1);
                     break label$217;
                    }
                    $1_1 = HEAP32[$0_1 + 4 >> 2];
                    if (($1_1 | 0) < HEAP32[$0_1 + 60 >> 2]) {
                     HEAP32[$4_1 >> 2] = $1_1
                    }
                    $1_1 = HEAP32[$4_1 >> 2];
                    if (($1_1 | 0) <= 0) {
                     break label$217
                    }
                    $2_1 = $1_1 - 1 | 0;
                    $3 = $675($0_1 + 92 | 0, $2_1, 1, 0);
                    if ($3) {
                     HEAP16[$3 >> 1] = HEAPU16[HEAP32[$0_1 + 20 >> 2] + ($2_1 << 1) >> 1]
                    }
                    HEAP8[$0_1 + 3694 | 0] = 1;
                    $3 = HEAP32[$0_1 + 20 >> 2];
                    $5_1 = $2_1 << 1;
                    $2_1 = $3 + $5_1 | 0;
                    $1_1 = $28($2_1, $3 + ($1_1 << 1) | 0);
                    HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - $1_1;
                    HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
                    $3 = $5_1 + HEAP32[$0_1 + 20 >> 2] | 0;
                    while (1) {
                     $1_1 = HEAPU16[$3 + 2 >> 1];
                     if ($1_1) {
                      HEAP16[$2_1 >> 1] = $1_1;
                      $2_1 = $2_1 + 2 | 0;
                     }
                     $3 = $3 + 2 | 0;
                     if ($1_1) {
                      continue
                     }
                     break;
                    };
                    HEAP16[$2_1 >> 1] = 0;
                    HEAP8[$11_1 | 0] = 0;
                    HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
                   }
                   HEAP8[$11_1 | 0] = 0;
                   break label$1;
                  }
                  HEAP32[$6_1 >> 2] = 0;
                  HEAP32[$7_1 >> 2] = 0;
                  HEAP32[$4_1 >> 2] = 0;
                  HEAP8[$11_1 | 0] = 0;
                  break label$1;
                 }
                 HEAP8[$0_1 + 82 | 0] = 0;
                 HEAP32[$0_1 + 64 >> 2] = 0;
                 HEAP32[$0_1 + 68 >> 2] = 0;
                 HEAP32[$0_1 + 60 >> 2] = HEAP32[$0_1 + 4 >> 2];
                 break label$1;
                }
                $1_1 = HEAP32[$6_1 >> 2];
                label$224 : {
                 if (($1_1 | 0) == HEAP32[$7_1 >> 2]) {
                  $1_1 = HEAP32[$4_1 >> 2];
                  HEAP32[$6_1 >> 2] = $1_1;
                  HEAP32[$7_1 >> 2] = $1_1;
                  break label$224;
                 }
                 HEAP32[$4_1 >> 2] = $1_1;
                }
                HEAP32[$6_1 >> 2] = 0;
                HEAP32[$4_1 >> 2] = 0;
                HEAP8[$11_1 | 0] = 0;
                break label$1;
               }
               $1_1 = HEAP32[$6_1 >> 2];
               label$226 : {
                if (($1_1 | 0) == HEAP32[$7_1 >> 2]) {
                 $1_1 = HEAP32[$4_1 >> 2];
                 HEAP32[$6_1 >> 2] = $1_1;
                 HEAP32[$7_1 >> 2] = $1_1;
                 break label$226;
                }
                HEAP32[$4_1 >> 2] = $1_1;
               }
               HEAP8[$0_1 + 82 | 0] = 0;
               $1_1 = HEAP32[$0_1 + 4 >> 2];
               HEAP32[$0_1 + 68 >> 2] = $1_1;
               HEAP32[$0_1 + 60 >> 2] = $1_1;
               break label$1;
              }
              $1_1 = HEAP32[$0_1 + 4 >> 2];
              $2_1 = HEAP32[$0_1 + 64 >> 2];
              $3 = HEAP32[$0_1 + 68 >> 2];
              label$228 : {
               if (($2_1 | 0) == ($3 | 0)) {
                break label$228
               }
               if (($1_1 | 0) < ($2_1 | 0)) {
                HEAP32[$7_1 >> 2] = $1_1
               }
               if (($1_1 | 0) < ($3 | 0)) {
                HEAP32[$6_1 >> 2] = $1_1
               }
               $2_1 = HEAP32[$7_1 >> 2];
               if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
                break label$228
               }
               HEAP32[$4_1 >> 2] = $2_1;
              }
              if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
               HEAP32[$4_1 >> 2] = $1_1
              }
              $1_1 = HEAP32[$7_1 >> 2];
              $2_1 = HEAP32[$6_1 >> 2];
              if (($1_1 | 0) != ($2_1 | 0)) {
               if (($1_1 | 0) > ($2_1 | 0)) {
                HEAP32[$6_1 >> 2] = $1_1;
                HEAP32[$7_1 >> 2] = $2_1;
               }
               $1_1 = HEAP32[$7_1 >> 2];
               HEAP32[$4_1 >> 2] = $1_1;
               HEAP32[$6_1 >> 2] = $1_1;
               HEAP8[$11_1 | 0] = 0;
              }
              if (HEAPU8[$0_1 + 83 | 0]) {
               break label$9
              }
              $2_1 = HEAP32[$4_1 >> 2];
              if (($2_1 | 0) <= 0) {
               break label$2
              }
              $3 = HEAP32[$0_1 + 20 >> 2];
              while (1) {
               $1_1 = $2_1;
               $2_1 = $1_1 - 1 | 0;
               if (HEAPU16[$3 + ($2_1 << 1) >> 1] == 10) {
                break label$2
               }
               HEAP32[$4_1 >> 2] = $2_1;
               if (($1_1 | 0) > 1) {
                continue
               }
               break;
              };
              break label$2;
             }
             $1_1 = HEAP32[$0_1 + 4 >> 2];
             $2_1 = HEAP32[$0_1 + 64 >> 2];
             $3 = HEAP32[$0_1 + 68 >> 2];
             label$235 : {
              if (($2_1 | 0) == ($3 | 0)) {
               break label$235
              }
              if (($1_1 | 0) < ($2_1 | 0)) {
               HEAP32[$7_1 >> 2] = $1_1
              }
              if (($1_1 | 0) < ($3 | 0)) {
               HEAP32[$6_1 >> 2] = $1_1
              }
              $2_1 = HEAP32[$7_1 >> 2];
              if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
               break label$235
              }
              HEAP32[$4_1 >> 2] = $2_1;
             }
             if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
              HEAP32[$4_1 >> 2] = $1_1
             }
             $2_1 = HEAP32[$7_1 >> 2];
             $3 = HEAP32[$6_1 >> 2];
             if (($2_1 | 0) != ($3 | 0)) {
              if (($2_1 | 0) > ($3 | 0)) {
               HEAP32[$6_1 >> 2] = $2_1;
               HEAP32[$7_1 >> 2] = $3;
              }
              $2_1 = HEAP32[$7_1 >> 2];
              HEAP32[$4_1 >> 2] = $2_1;
              HEAP32[$6_1 >> 2] = $2_1;
              HEAP8[$11_1 | 0] = 0;
             }
             if (HEAPU8[$0_1 + 83 | 0]) {
              break label$8
             }
             $3 = HEAP32[$4_1 >> 2];
             if (($3 | 0) >= ($1_1 | 0)) {
              break label$3
             }
             $2_1 = HEAP32[$0_1 + 20 >> 2];
             while (1) {
              if (HEAPU16[$2_1 + ($3 << 1) >> 1] == 10) {
               break label$3
              }
              $3 = $3 + 1 | 0;
              HEAP32[$4_1 >> 2] = $3;
              if (($1_1 | 0) != ($3 | 0)) {
               continue
              }
              break;
             };
             break label$3;
            }
            $1_1 = HEAP32[$0_1 + 4 >> 2];
            $2_1 = HEAP32[$0_1 + 64 >> 2];
            $3 = HEAP32[$0_1 + 68 >> 2];
            label$242 : {
             if (($2_1 | 0) == ($3 | 0)) {
              break label$242
             }
             if (($1_1 | 0) < ($2_1 | 0)) {
              HEAP32[$7_1 >> 2] = $1_1
             }
             if (($1_1 | 0) < ($3 | 0)) {
              HEAP32[$6_1 >> 2] = $1_1
             }
             $2_1 = HEAP32[$7_1 >> 2];
             if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
              break label$242
             }
             HEAP32[$4_1 >> 2] = $2_1;
            }
            if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
             HEAP32[$4_1 >> 2] = $1_1
            }
            $1_1 = HEAP32[$6_1 >> 2];
            label$246 : {
             if (($1_1 | 0) == HEAP32[$7_1 >> 2]) {
              $1_1 = HEAP32[$4_1 >> 2];
              HEAP32[$6_1 >> 2] = $1_1;
              HEAP32[$7_1 >> 2] = $1_1;
              break label$246;
             }
             HEAP32[$4_1 >> 2] = $1_1;
            }
            if (HEAPU8[$0_1 + 83 | 0]) {
             break label$7
            }
            $2_1 = HEAP32[$4_1 >> 2];
            if (($2_1 | 0) <= 0) {
             break label$4
            }
            $3 = HEAP32[$0_1 + 20 >> 2];
            while (1) {
             $1_1 = $2_1;
             $2_1 = $1_1 - 1 | 0;
             if (HEAPU16[$3 + ($2_1 << 1) >> 1] == 10) {
              break label$4
             }
             HEAP32[$4_1 >> 2] = $2_1;
             if (($1_1 | 0) > 1) {
              continue
             }
             break;
            };
            break label$4;
           }
           $1_1 = HEAP32[$0_1 + 4 >> 2];
           $2_1 = HEAP32[$0_1 + 64 >> 2];
           $3 = HEAP32[$0_1 + 68 >> 2];
           label$249 : {
            if (($2_1 | 0) == ($3 | 0)) {
             break label$249
            }
            if (($1_1 | 0) < ($2_1 | 0)) {
             HEAP32[$7_1 >> 2] = $1_1
            }
            if (($1_1 | 0) < ($3 | 0)) {
             HEAP32[$6_1 >> 2] = $1_1
            }
            $2_1 = HEAP32[$7_1 >> 2];
            if (($2_1 | 0) != HEAP32[$6_1 >> 2]) {
             break label$249
            }
            HEAP32[$4_1 >> 2] = $2_1;
           }
           if (HEAP32[$4_1 >> 2] > ($1_1 | 0)) {
            HEAP32[$4_1 >> 2] = $1_1
           }
           $2_1 = HEAP32[$6_1 >> 2];
           label$253 : {
            if (($2_1 | 0) == HEAP32[$7_1 >> 2]) {
             $2_1 = HEAP32[$4_1 >> 2];
             HEAP32[$6_1 >> 2] = $2_1;
             HEAP32[$7_1 >> 2] = $2_1;
             break label$253;
            }
            HEAP32[$4_1 >> 2] = $2_1;
           }
           if (HEAPU8[$0_1 + 83 | 0]) {
            break label$6
           }
           $3 = HEAP32[$4_1 >> 2];
           if (($3 | 0) >= ($1_1 | 0)) {
            break label$5
           }
           $2_1 = HEAP32[$0_1 + 20 >> 2];
           while (1) {
            if (HEAPU16[$2_1 + ($3 << 1) >> 1] == 10) {
             break label$5
            }
            $3 = $3 + 1 | 0;
            HEAP32[$4_1 >> 2] = $3;
            if (($1_1 | 0) != ($3 | 0)) {
             continue
            }
            break;
           };
           break label$5;
          }
          HEAP32[$4_1 >> 2] = 0;
          break label$2;
         }
         HEAP32[$4_1 >> 2] = $1_1;
         break label$3;
        }
        HEAP32[$4_1 >> 2] = 0;
        break label$4;
       }
       HEAP32[$4_1 >> 2] = $1_1;
      }
      HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
      HEAP8[$11_1 | 0] = 0;
      break label$1;
     }
     HEAP32[$6_1 >> 2] = HEAP32[$4_1 >> 2];
     HEAP8[$11_1 | 0] = 0;
     break label$1;
    }
    HEAP8[$11_1 | 0] = 0;
    break label$1;
   }
   HEAP8[$11_1 | 0] = 0;
  }
  HEAP32[$0_1 + 3688 >> 2] = -1097229926;
  HEAP8[$0_1 + 3692 | 0] = 1;
  global$0 = $14 + 32 | 0;
 }
 
 function $671($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $4_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   if ($4_1 >>> 0 <= 31) {
    $6_1 = $1_1 >>> 26 & ($4_1 | 0) == 10 | $1_1 >>> 10 & ($4_1 | 0) == 9;
    if (!$6_1) {
     break label$1
    }
   }
   label$3 : {
    if (($3 | 0) != 5) {
     if (($4_1 | 0) == 127 | $4_1 >>> 0 > 65535) {
      break label$1
     }
     if ($4_1 - 57344 >>> 0 >= 6400) {
      break label$3
     }
     break label$1;
    }
    if ($4_1 >>> 0 > 65535) {
     break label$1
    }
   }
   if (!(!($1_1 & 131087) | $6_1)) {
    label$9 : {
     label$10 : {
      $7_1 = $4_1 - 48 | 0;
      $6_1 = HEAP8[HEAP32[18392] + 12124 | 0];
      if (!(!($1_1 & 1) | $7_1 >>> 0 < 10 | ($6_1 | 0) == ($4_1 | 0))) {
       $3 = $4_1 - 42 | 0;
       if ($3 >>> 0 > 5 | !(1 << $3 & 43)) {
        break label$10
       }
      }
      label$12 : {
       if (!($1_1 & 131072) | $7_1 >>> 0 < 10 | ($4_1 | 0) == ($6_1 | 0)) {
        break label$12
       }
       $3 = 0;
       $6_1 = $4_1;
       switch ($4_1 - 42 | 0) {
       case 0:
       case 1:
       case 3:
       case 5:
       case 27:
       case 59:
        break label$12;
       default:
        break label$9;
       };
      }
      $3 = $4_1 - 97 | 0;
      if (!(!($1_1 & 2) | $7_1 >>> 0 < 10 | ($3 >>> 0 < 6 | $4_1 - 65 >>> 0 <= 5))) {
       $3 = 0;
       $6_1 = $4_1;
       break label$9;
      }
      if (!(!($1_1 & 4) | $3 >>> 0 > 25)) {
       $4_1 = $4_1 - 32 | 0;
       HEAP32[$0_1 >> 2] = $4_1;
      }
      $3 = !(($4_1 | 0) == 9 | ($4_1 | 0) == 32 | ($4_1 | 0) == 12288 ? $1_1 & 8 : 0);
      $6_1 = $4_1;
      break label$9;
     }
     $3 = 0;
     $6_1 = $4_1;
    }
    $4_1 = $6_1;
    $7_1 = 0;
    if (!$3) {
     break label$1
    }
   }
   label$20 : {
    label$21 : {
     if (!($1_1 & 512)) {
      break label$21
     }
     $693($5_1);
     $6_1 = $5_1 + 8 | 0;
     $3 = $6_1;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $5_1 + 40 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $5_1 + 32 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $5_1 + 24 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     $3 = $5_1 + 16 | 0;
     HEAP32[$3 >> 2] = 0;
     HEAP32[$3 + 4 >> 2] = 0;
     HEAP32[$6_1 >> 2] = 0;
     HEAP32[$5_1 >> 2] = 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     HEAP16[$5_1 + 12 >> 1] = $4_1;
     HEAP32[$5_1 >> 2] = 512;
     HEAP32[$5_1 + 4 >> 2] = $1_1;
     if (FUNCTION_TABLE[$2_1 | 0]($5_1) | 0) {
      break label$20
     }
     $1_1 = $0_1;
     $0_1 = HEAPU16[$5_1 + 12 >> 1];
     HEAP32[$1_1 >> 2] = $0_1;
     if ($0_1) {
      break label$21
     }
     break label$1;
    }
    $7_1 = 1;
   }
  }
  global$0 = $5_1 + 48 | 0;
  return $7_1;
 }
 
 function $672($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $3 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  label$1 : {
   if (($3 | 0) == ($4_1 | 0)) {
    break label$1
   }
   if (($2_1 | 0) < ($3 | 0)) {
    HEAP32[$1_1 + 4 >> 2] = $2_1
   }
   if (($2_1 | 0) < ($4_1 | 0)) {
    HEAP32[$1_1 + 8 >> 2] = $2_1
   }
   $3 = HEAP32[$1_1 + 4 >> 2];
   if (($3 | 0) != HEAP32[$1_1 + 8 >> 2]) {
    break label$1
   }
   HEAP32[$1_1 >> 2] = $3;
  }
  if (HEAP32[$1_1 >> 2] > ($2_1 | 0)) {
   HEAP32[$1_1 >> 2] = $2_1
  }
  $3 = HEAP32[$1_1 + 4 >> 2];
  $4_1 = HEAP32[$1_1 + 8 >> 2];
  if (($3 | 0) != ($4_1 | 0)) {
   $2_1 = $1_1 + 32 | 0;
   label$6 : {
    if (($3 | 0) < ($4_1 | 0)) {
     $6_1 = $4_1 - $3 | 0;
     $5_1 = $675($2_1, $3, $6_1, 0);
     if (!(!$5_1 | ($6_1 | 0) <= 0)) {
      $7_1 = HEAP32[$0_1 + 20 >> 2];
      $2_1 = 0;
      while (1) {
       HEAP16[$5_1 + ($2_1 << 1) >> 1] = HEAPU16[$7_1 + ($2_1 + $3 << 1) >> 1];
       $2_1 = $2_1 + 1 | 0;
       if (($6_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      };
     }
     HEAP8[$0_1 + 3694 | 0] = 1;
     $2_1 = $3 << 1;
     $3 = $0_1 + 20 | 0;
     $5_1 = HEAP32[$3 >> 2];
     $2_1 = $2_1 + $5_1 | 0;
     $4_1 = $4_1 << 1;
     $5_1 = $28($2_1, $4_1 + $5_1 | 0);
     HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - $5_1;
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - $6_1;
     $0_1 = $4_1 + HEAP32[$3 >> 2] | 0;
     while (1) {
      $3 = HEAPU16[$0_1 >> 1];
      if ($3) {
       HEAP16[$2_1 >> 1] = $3;
       $2_1 = $2_1 + 2 | 0;
      }
      $0_1 = $0_1 + 2 | 0;
      if ($3) {
       continue
      }
      break;
     };
     HEAP16[$2_1 >> 1] = 0;
     HEAP8[$1_1 + 22 | 0] = 0;
     $0_1 = HEAP32[$1_1 + 4 >> 2];
     HEAP32[$1_1 + 8 >> 2] = $0_1;
     break label$6;
    }
    $6_1 = $3 - $4_1 | 0;
    $5_1 = $675($2_1, $4_1, $6_1, 0);
    if (!(!$5_1 | ($6_1 | 0) <= 0)) {
     $7_1 = HEAP32[$0_1 + 20 >> 2];
     $2_1 = 0;
     while (1) {
      HEAP16[$5_1 + ($2_1 << 1) >> 1] = HEAPU16[$7_1 + ($2_1 + $4_1 << 1) >> 1];
      $2_1 = $2_1 + 1 | 0;
      if (($6_1 | 0) != ($2_1 | 0)) {
       continue
      }
      break;
     };
    }
    HEAP8[$0_1 + 3694 | 0] = 1;
    $2_1 = $4_1 << 1;
    $4_1 = $0_1 + 20 | 0;
    $5_1 = HEAP32[$4_1 >> 2];
    $2_1 = $2_1 + $5_1 | 0;
    $3 = $3 << 1;
    $5_1 = $28($2_1, $3 + $5_1 | 0);
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] - $5_1;
    HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - $6_1;
    $0_1 = $3 + HEAP32[$4_1 >> 2] | 0;
    while (1) {
     $3 = HEAPU16[$0_1 >> 1];
     if ($3) {
      HEAP16[$2_1 >> 1] = $3;
      $2_1 = $2_1 + 2 | 0;
     }
     $0_1 = $0_1 + 2 | 0;
     if ($3) {
      continue
     }
     break;
    };
    HEAP16[$2_1 >> 1] = 0;
    HEAP8[$1_1 + 22 | 0] = 0;
    $0_1 = HEAP32[$1_1 + 8 >> 2];
    HEAP32[$1_1 + 4 >> 2] = $0_1;
   }
   HEAP32[$1_1 >> 2] = $0_1;
   HEAP8[$1_1 + 22 | 0] = 0;
  }
 }
 
 function $674($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if (($2_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   $4_1 = $2_1;
   if ($2_1) {
    $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
   } else {
    $3 = 8
   }
   $2_1 = ($1_1 | 0) < ($3 | 0) ? $3 : $1_1;
   if (($4_1 | 0) >= ($2_1 | 0)) {
    break label$1
   }
   $3 = $16($2_1 << 1);
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   if ($4_1) {
    $1602($3, $4_1, HEAP32[$0_1 >> 2] << 1);
    $17(HEAP32[$0_1 + 8 >> 2]);
   }
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   HEAP32[$0_1 + 8 >> 2] = $3;
  }
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $675($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  HEAP32[$0_1 + 3592 >> 2] = 999;
  HEAP16[$0_1 + 3584 >> 1] = 99;
  if (HEAPU16[$0_1 + 3582 >> 1] == 99) {
   label$2 : {
    if (HEAP32[$0_1 + 12 >> 2] < 0) {
     break label$2
    }
    $6_1 = HEAP32[$0_1 + 4 >> 2];
    $4_1 = HEAP32[$0_1 + 3588 >> 2] - $6_1 | 0;
    HEAP32[$0_1 + 3588 >> 2] = $4_1;
    $5_1 = $0_1 + 1584 | 0;
    $1603($5_1, $5_1 + ($6_1 << 1) | 0, $4_1 << 1);
    $5_1 = HEAP16[$0_1 + 3582 >> 1];
    if (($5_1 | 0) <= 0) {
     break label$2
    }
    $4_1 = 0;
    while (1) {
     $8 = ($4_1 << 4) + $0_1 | 0;
     $7_1 = HEAP32[$8 + 12 >> 2];
     if (($7_1 | 0) >= 0) {
      HEAP32[$8 + 12 >> 2] = $7_1 - $6_1
     }
     $4_1 = $4_1 + 1 | 0;
     if (($5_1 | 0) != ($4_1 | 0)) {
      continue
     }
     break;
    };
   }
   $4_1 = HEAPU16[$0_1 + 3582 >> 1] - 1 | 0;
   HEAP16[$0_1 + 3582 >> 1] = $4_1;
   $1603($0_1, $0_1 + 16 | 0, $4_1 << 16 >> 16 << 4);
  }
  label$5 : {
   if (($2_1 | 0) <= 999) {
    $4_1 = HEAP32[$0_1 + 3588 >> 2];
    if (($4_1 + $2_1 | 0) >= 1e3) {
     $8 = $0_1 + 16 | 0;
     $6_1 = $0_1 + 1584 | 0;
     while (1) {
      if (HEAP16[$0_1 + 3582 >> 1] > 0) {
       label$10 : {
        if (HEAP32[$0_1 + 12 >> 2] < 0) {
         break label$10
        }
        $5_1 = HEAP32[$0_1 + 4 >> 2];
        $4_1 = $4_1 - $5_1 | 0;
        HEAP32[$0_1 + 3588 >> 2] = $4_1;
        $1603($6_1, ($5_1 << 1) + $6_1 | 0, $4_1 << 1);
        $4_1 = 0;
        $7_1 = HEAP16[$0_1 + 3582 >> 1];
        if (($7_1 | 0) <= 0) {
         break label$10
        }
        while (1) {
         $9 = ($4_1 << 4) + $0_1 | 0;
         $10_1 = HEAP32[$9 + 12 >> 2];
         if (($10_1 | 0) >= 0) {
          HEAP32[$9 + 12 >> 2] = $10_1 - $5_1
         }
         $4_1 = $4_1 + 1 | 0;
         if (($7_1 | 0) != ($4_1 | 0)) {
          continue
         }
         break;
        };
       }
       $4_1 = HEAPU16[$0_1 + 3582 >> 1] - 1 | 0;
       HEAP16[$0_1 + 3582 >> 1] = $4_1;
       $1603($0_1, $8, $4_1 << 16 >> 16 << 4);
      }
      $4_1 = HEAP32[$0_1 + 3588 >> 2];
      if (($4_1 + $2_1 | 0) > 999) {
       continue
      }
      break;
     };
    }
    $4_1 = HEAP16[$0_1 + 3582 >> 1];
    HEAP16[$0_1 + 3582 >> 1] = $4_1 + 1;
    $4_1 = ($4_1 << 4) + $0_1 | 0;
    break label$5;
   }
   HEAP32[$0_1 + 3588 >> 2] = 0;
   HEAP16[$0_1 + 3582 >> 1] = 0;
   $4_1 = 0;
  }
  if (!$4_1) {
   return 0
  }
  HEAP32[$4_1 + 8 >> 2] = $3;
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 >> 2] = $1_1;
  if (!$2_1) {
   HEAP32[$4_1 + 12 >> 2] = -1;
   return 0;
  }
  $1_1 = HEAP32[$0_1 + 3588 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 3588 >> 2] = $1_1 + $2_1;
  return (($1_1 << 1) + $0_1 | 0) + 1584 | 0;
 }
 
 function $676($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $4_1 = HEAP32[$0_1 + 3696 >> 2];
  $8 = HEAP32[$0_1 + 4 >> 2];
  $9 = $28($2_1, ($3 << 1) + $2_1 | 0);
  $5_1 = $4_1 & 262144;
  label$1 : {
   if (!$5_1) {
    $4_1 = 0;
    if (HEAP32[$0_1 + 52 >> 2] <= (HEAP32[$0_1 + 8 >> 2] + $9 | 0)) {
     break label$1
    }
   }
   if (HEAP32[$0_1 + 12 >> 2] <= ($3 + $8 | 0)) {
    $4_1 = 0;
    if (!$5_1) {
     break label$1
    }
    $4_1 = $3 << 2;
    $5_1 = ($3 | 0) <= 256 ? 256 : $3;
    $4_1 = (($3 | 0) < 8 ? 32 : ($4_1 | 0) < ($5_1 | 0) ? $4_1 : $5_1) + $8 | 0;
    $5_1 = $4_1 + 1 | 0;
    $7_1 = $4_1;
    $4_1 = HEAP32[$0_1 + 16 >> 2];
    label$4 : {
     if (($7_1 | 0) < ($4_1 | 0)) {
      break label$4
     }
     $6_1 = 8;
     $7_1 = $4_1;
     $6_1 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : $6_1;
     $4_1 = ($5_1 | 0) < ($6_1 | 0) ? $6_1 : $5_1;
     if (($7_1 | 0) >= ($4_1 | 0)) {
      break label$4
     }
     $6_1 = $16($4_1 << 1);
     $7_1 = HEAP32[$0_1 + 20 >> 2];
     if ($7_1) {
      $1602($6_1, $7_1, HEAP32[$0_1 + 12 >> 2] << 1);
      $17(HEAP32[$0_1 + 20 >> 2]);
     }
     HEAP32[$0_1 + 16 >> 2] = $4_1;
     HEAP32[$0_1 + 20 >> 2] = $6_1;
    }
    HEAP32[$0_1 + 12 >> 2] = $5_1;
   }
   $5_1 = $0_1 + 20 | 0;
   $4_1 = HEAP32[$5_1 >> 2];
   if (($1_1 | 0) != ($8 | 0)) {
    $6_1 = $4_1 + ($1_1 << 1) | 0;
    $1603($6_1 + ($3 << 1) | 0, $6_1, $8 - $1_1 << 1);
   }
   $1602($4_1 + ($1_1 << 1) | 0, $2_1, $3 << 1);
   HEAP8[$0_1 + 3694 | 0] = 1;
   $1_1 = HEAP32[$0_1 + 4 >> 2] + $3 | 0;
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] + $9;
   HEAP16[HEAP32[$5_1 >> 2] + ($1_1 << 1) >> 1] = 0;
   $4_1 = 1;
  }
  return $4_1;
 }
 
 function $677($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  $8 = HEAP32[18392];
  $10_1 = HEAP32[$8 + 7080 >> 2];
  HEAP8[$10_1 + 140 | 0] = 1;
  if (!HEAPU8[$10_1 + 143 | 0]) {
   $9 = $5_1;
   if (!$9) {
    $9 = HEAP32[($1_1 << 4) + 48168 >> 2]
   }
   $5_1 = $9;
   $603($7_1, 64, $1_1, $2_1, $9);
   $10_1 = !($6_1 & 131074) | $6_1 | 134217744;
   label$3 : {
    if ($3) {
     $11_1 = $296();
     $301();
     $153($0_1);
     $13 = $292();
     $12_1 = Math_fround($11_1 + HEAPF32[$8 + 5500 >> 2]);
     $12_1 = Math_fround($13 - Math_fround($12_1 + $12_1));
     $38($12_1 <= Math_fround(1.0) ? Math_fround(1.0) : $12_1);
     HEAP32[$7_1 + 72 >> 2] = 0;
     HEAP32[$7_1 + 76 >> 2] = 0;
     $9 = 0;
     if ($633(19354, 0, $7_1, 64, $7_1 + 72 | 0, $10_1, 0)) {
      $9 = $605($7_1, HEAP32[$8 + 8224 >> 2], $1_1, $2_1, $5_1)
     }
     $10_1 = $8 + 5476 | 0;
     $5_1 = HEAP32[$10_1 >> 2];
     $14 = HEAP32[$10_1 + 4 >> 2];
     HEAPF32[$10_1 >> 2] = HEAPF32[$8 + 5480 >> 2];
     $6_1 = $6_1 & 16384;
     if ($6_1) {
      $226(1)
     }
     $276(Math_fround(0.0), HEAPF32[$8 + 5500 >> 2]);
     HEAPF32[$7_1 + 76 >> 2] = $11_1;
     HEAPF32[$7_1 + 72 >> 2] = $11_1;
     if ($570(17688, $7_1 + 72 | 0, 9216)) {
      $604($1_1, 45, $2_1, $2_1, $4_1 ? (HEAPU8[$8 + 252 | 0] ? $4_1 : $3) : $3);
      $9 = 1;
     }
     $276(Math_fround(0.0), HEAPF32[$8 + 5500 >> 2]);
     HEAPF32[$7_1 + 76 >> 2] = $11_1;
     HEAPF32[$7_1 + 72 >> 2] = $11_1;
     if ($570(17690, $7_1 + 72 | 0, 9216)) {
      $604($1_1, 43, $2_1, $2_1, $4_1 ? (HEAPU8[$8 + 252 | 0] ? $4_1 : $3) : $3);
      $9 = 1;
     }
     if ($6_1) {
      $227()
     }
     $1_1 = $62($0_1);
     if (($0_1 | 0) != ($1_1 | 0)) {
      $276(Math_fround(0.0), HEAPF32[$8 + 5500 >> 2]);
      $555($0_1, $1_1, 0);
     }
     HEAP32[$8 + 5476 >> 2] = $5_1;
     HEAP32[$8 + 5480 >> 2] = $14;
     $269();
     $275();
     break label$3;
    }
    HEAP32[$7_1 + 72 >> 2] = 0;
    HEAP32[$7_1 + 76 >> 2] = 0;
    $9 = 0;
    if (!$633($0_1, 0, $7_1, 64, $7_1 + 72 | 0, $10_1, 0)) {
     break label$3
    }
    $9 = $605($7_1, HEAP32[$8 + 8224 >> 2], $1_1, $2_1, $5_1);
   }
   if ($9) {
    $88()
   }
  }
  global$0 = $7_1 + 80 | 0;
  return $9;
 }
 
 function $678($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $0_1 = $633($0_1, 0, $1_1, $2_1, $5_1 + 8 | 0, $3, $4_1);
  global$0 = $5_1 + 16 | 0;
  return $0_1;
 }
 
 function $679($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $11_1 = HEAP32[18392];
  $8 = HEAP32[$11_1 + 7080 >> 2];
  HEAP8[$8 + 140 | 0] = 1;
  if (!HEAPU8[$8 + 143 | 0]) {
   $301();
   $153($0_1);
   $290($3, $292());
   $8 = 0;
   if (($3 | 0) > 0) {
    $12_1 = HEAP32[($1_1 << 4) + 48160 >> 2];
    $9 = $2_1;
    $2_1 = 0;
    while (1) {
     $266($10_1);
     if ($10_1) {
      $276(Math_fround(0.0), HEAPF32[$11_1 + 5500 >> 2])
     }
     $8 = $677(19354, $1_1, $9, $4_1, $5_1, $6_1, $7_1);
     $269();
     $291();
     $2_1 = $2_1 | $8;
     $8 = $2_1;
     $9 = $9 + $12_1 | 0;
     $10_1 = $10_1 + 1 | 0;
     if (($10_1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
   }
   $9 = $8;
   $269();
   $1_1 = $62($0_1);
   if (($0_1 | 0) != ($1_1 | 0)) {
    $276(Math_fround(0.0), HEAPF32[$11_1 + 5500 >> 2]);
    $555($0_1, $1_1, 0);
   }
   $275();
  }
  return $9 & 1;
 }
 
 function $689($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  return $633($0_1, 0, $1_1, $2_1, $3, $4_1 | 67108864, $5_1);
 }
 
 function $690($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $0_1 = $633($0_1, $1_1, $2_1, $3, $6_1 + 8 | 0, $4_1, $5_1);
  global$0 = $6_1 + 16 | 0;
  return $0_1;
 }
 
 function $691($0_1, $1_1) {
  var $2_1 = 0;
  if (HEAPU8[$0_1 + 3697 | 0] & 128) {
   return 0
  }
  $2_1 = 1;
  label$2 : {
   if (($1_1 | 0) <= 0) {
    break label$2
   }
   $2_1 = 0;
   label$3 : {
    label$4 : {
     $0_1 = HEAP32[$0_1 + 20 >> 2] + ($1_1 << 1) | 0;
     $1_1 = HEAPU16[$0_1 - 2 >> 1];
     switch ($1_1 - 9 | 0) {
     case 2:
     case 3:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 33:
     case 34:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 49:
     case 51:
     case 52:
     case 53:
     case 54:
     case 55:
     case 56:
     case 57:
     case 58:
     case 59:
     case 60:
     case 61:
     case 62:
     case 63:
     case 64:
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 71:
     case 72:
     case 73:
     case 74:
     case 75:
     case 76:
     case 77:
     case 78:
     case 79:
     case 80:
     case 81:
     case 83:
     case 85:
     case 86:
     case 87:
     case 88:
     case 89:
     case 90:
     case 91:
     case 92:
     case 93:
     case 94:
     case 95:
     case 96:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
     case 103:
     case 104:
     case 105:
     case 106:
     case 107:
     case 108:
     case 109:
     case 110:
     case 111:
     case 112:
     case 113:
      break label$2;
     case 0:
     case 1:
     case 4:
     case 23:
     case 31:
     case 32:
     case 35:
     case 50:
     case 82:
     case 84:
     case 114:
     case 115:
     case 116:
      break label$3;
     default:
      break label$4;
     };
    }
    if (($1_1 | 0) == 12288) {
     break label$3
    }
    return 0;
   }
   label$5 : {
    label$6 : {
     $0_1 = HEAPU16[$0_1 >> 1];
     switch ($0_1 - 9 | 0) {
     case 0:
     case 1:
     case 4:
     case 23:
     case 31:
     case 32:
     case 35:
     case 50:
     case 82:
     case 84:
     case 114:
     case 115:
     case 116:
      break label$2;
     case 2:
     case 3:
     case 5:
     case 6:
     case 7:
     case 8:
     case 9:
     case 10:
     case 11:
     case 12:
     case 13:
     case 14:
     case 15:
     case 16:
     case 17:
     case 18:
     case 19:
     case 20:
     case 21:
     case 22:
     case 24:
     case 25:
     case 26:
     case 27:
     case 28:
     case 29:
     case 30:
     case 33:
     case 34:
     case 36:
     case 37:
     case 38:
     case 39:
     case 40:
     case 41:
     case 42:
     case 43:
     case 44:
     case 45:
     case 46:
     case 47:
     case 48:
     case 49:
     case 51:
     case 52:
     case 53:
     case 54:
     case 55:
     case 56:
     case 57:
     case 58:
     case 59:
     case 60:
     case 61:
     case 62:
     case 63:
     case 64:
     case 65:
     case 66:
     case 67:
     case 68:
     case 69:
     case 70:
     case 71:
     case 72:
     case 73:
     case 74:
     case 75:
     case 76:
     case 77:
     case 78:
     case 79:
     case 80:
     case 81:
     case 83:
     case 85:
     case 86:
     case 87:
     case 88:
     case 89:
     case 90:
     case 91:
     case 92:
     case 93:
     case 94:
     case 95:
     case 96:
     case 97:
     case 98:
     case 99:
     case 100:
     case 101:
     case 102:
     case 103:
     case 104:
     case 105:
     case 106:
     case 107:
     case 108:
     case 109:
     case 110:
     case 111:
     case 112:
     case 113:
      break label$5;
     default:
      break label$6;
     };
    }
    if (($0_1 | 0) == 12288) {
     break label$2
    }
   }
   $2_1 = 1;
  }
  return $2_1;
 }
 
 function $692($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = Math_fround(0), $21_1 = 0;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  if (($2_1 | 0) == ($6_1 | 0)) {
   if ($3) {
    $1_1 = HEAP32[$1_1 + 20 >> 2];
    $14 = $1_1 + ($6_1 << 1) | 0;
    $3 = HEAP32[18392];
    $2_1 = HEAP32[$3 + 6464 >> 2];
    $9 = $2_1 + 12 | 0;
    $17_1 = HEAPF32[$3 + 6468 >> 2];
    $20_1 = Math_fround($17_1 / HEAPF32[$2_1 + 16 >> 2]);
    while (1) {
     label$3 : {
      if ($1_1 >>> 0 >= $14 >>> 0) {
       $10_1 = $12_1;
       $8 = $16_1;
       $7_1 = $5_1;
       break label$3;
      }
      $7_1 = $11_1;
      $10_1 = $13;
      $3 = 0;
      $8 = $5_1;
      label$6 : {
       label$7 : {
        label$8 : {
         $4_1 = HEAPU16[$1_1 >> 1];
         switch ($4_1 - 10 | 0) {
         case 3:
          break label$6;
         case 0:
          break label$8;
         default:
          break label$7;
         };
        }
        $7_1 = Math_fround($17_1 + $11_1);
        $12_1 = $7_1;
        $10_1 = $5_1 <= $13 ? $13 : $5_1;
        $16_1 = $10_1;
        $3 = 1;
        $8 = Math_fround(0.0);
        break label$6;
       }
       $8 = Math_fround($5_1 + Math_fround($20_1 * HEAPF32[(($4_1 | 0) < HEAP32[$2_1 >> 2] ? HEAP32[$2_1 + 8 >> 2] + ($4_1 << 2) | 0 : $9) >> 2]));
      }
      $11_1 = $7_1;
      $13 = $10_1;
      $1_1 = $1_1 + 2 | 0;
      $5_1 = $8;
      $10_1 = $12_1;
      $8 = $16_1;
      $7_1 = $5_1;
      if (!$3) {
       continue
      }
     }
     break;
    };
    HEAP32[$0_1 + 16 >> 2] = $6_1;
    HEAP32[$0_1 + 12 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAPF32[$0_1 >> 2] = $7_1 > $8 ? $7_1 : $8;
    HEAPF32[$0_1 + 8 >> 2] = $10_1 + ($7_1 > Math_fround(0.0) ? $17_1 : $10_1 == Math_fround(0.0) ? $17_1 : Math_fround(-0.0));
    return;
   }
   HEAP32[$0_1 + 8 >> 2] = 1065353216;
   HEAP32[$0_1 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   $2_1 = 0;
   if (($6_1 | 0) > 0) {
    $14 = HEAP32[$1_1 + 20 >> 2];
    $9 = $14 + ($6_1 << 1) | 0;
    $3 = 0;
    while (1) {
     $2_1 = $3;
     $15_1 = $14 + ($3 << 1) | 0;
     $3 = $15_1;
     while (1) {
      label$11 : {
       $1_1 = $3;
       if ($9 >>> 0 <= $1_1 >>> 0) {
        $4_1 = $1_1;
        break label$11;
       }
       $3 = $1_1 + 2 | 0;
       $4_1 = $3;
       if (HEAPU16[$1_1 >> 1] != 10) {
        continue
       }
      }
      break;
     };
     $4_1 = ($4_1 - $15_1 >> 1) + $2_1 | 0;
     $3 = $4_1;
     if (($4_1 | 0) < ($6_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$0_1 + 20 >> 2] = $2_1;
   HEAP32[$0_1 + 16 >> 2] = 0;
   HEAP32[$0_1 + 12 >> 2] = $4_1;
   return;
  }
  $15_1 = HEAP32[$1_1 + 20 >> 2];
  $21_1 = $15_1 + ($6_1 << 1) | 0;
  $1_1 = HEAP32[18392];
  $9 = HEAP32[$1_1 + 6464 >> 2];
  $18_1 = $9 + 12 | 0;
  $8 = HEAPF32[$1_1 + 6468 >> 2];
  $16_1 = Math_fround($8 / HEAPF32[$9 + 16 >> 2]);
  $1_1 = 0;
  $3 = 0;
  while (1) {
   $14 = $3;
   $10_1 = $5_1;
   HEAPF32[$0_1 + 4 >> 2] = $5_1;
   $13 = Math_fround(0.0);
   $5_1 = Math_fround(0.0);
   $6_1 = $1_1;
   $19 = ($1_1 << 1) + $15_1 | 0;
   $1_1 = $19;
   $11_1 = Math_fround(0.0);
   while (1) {
    label$15 : {
     $12_1 = $11_1;
     $7_1 = $13;
     if ($1_1 >>> 0 >= $21_1 >>> 0) {
      $4_1 = $1_1;
      break label$15;
     }
     $11_1 = $5_1;
     $3 = 0;
     label$18 : {
      label$19 : {
       label$20 : {
        $4_1 = HEAPU16[$1_1 >> 1];
        switch ($4_1 - 10 | 0) {
        case 3:
         break label$18;
        case 0:
         break label$20;
        default:
         break label$19;
        };
       }
       $11_1 = Math_fround($8 + $5_1);
       $13 = $11_1;
       $3 = 1;
       $12_1 = Math_fround(0.0);
       break label$18;
      }
      $12_1 = Math_fround($12_1 + Math_fround($16_1 * HEAPF32[(($4_1 | 0) < HEAP32[$9 >> 2] ? HEAP32[$9 + 8 >> 2] + ($4_1 << 2) | 0 : $18_1) >> 2]));
     }
     $5_1 = $11_1;
     $7_1 = $13;
     $1_1 = $1_1 + 2 | 0;
     $4_1 = $1_1;
     $11_1 = $12_1;
     if (!$3) {
      continue
     }
    }
    break;
   };
   $7_1 = Math_fround($7_1 + ($12_1 > Math_fround(0.0) ? $8 : $7_1 == Math_fround(0.0) ? $8 : Math_fround(-0.0)));
   $3 = $4_1 - $19 >> 1;
   $1_1 = $3 + $6_1 | 0;
   if (($1_1 | 0) <= ($2_1 | 0)) {
    $5_1 = Math_fround($10_1 + $7_1);
    $3 = $6_1;
    continue;
   }
   break;
  };
  HEAP32[$0_1 + 16 >> 2] = $3;
  HEAP32[$0_1 + 12 >> 2] = $6_1;
  HEAP32[$0_1 + 20 >> 2] = $14;
  HEAPF32[$0_1 + 8 >> 2] = $7_1;
  HEAP32[$0_1 >> 2] = 0;
  if (($2_1 | 0) > ($6_1 | 0)) {
   $2_1 = $2_1 - $6_1 | 0;
   $3 = $6_1;
   $4_1 = 0;
   while (1) {
    $5_1 = Math_fround(-1.0);
    $1_1 = HEAPU16[($3 << 1) + $15_1 >> 1];
    if (($1_1 | 0) != 10) {
     $5_1 = Math_fround($16_1 * HEAPF32[(($1_1 | 0) < HEAP32[$9 >> 2] ? HEAP32[$9 + 8 >> 2] + ($1_1 << 2) | 0 : $18_1) >> 2])
    }
    HEAPF32[$0_1 >> 2] = $5_1 + HEAPF32[$0_1 >> 2];
    $4_1 = $4_1 + 1 | 0;
    $3 = $4_1 + $6_1 | 0;
    if (($2_1 | 0) != ($4_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $693($0_1) {
  var $1_1 = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0_1 = $0_1 + 8 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
 }
 
 function $694($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[$0_1 + 20 >> 2] + $1_1 | 0;
  $4_1 = $3 + $2_1 | 0;
  while (1) {
   $5_1 = HEAPU8[$4_1 | 0];
   if ($5_1) {
    HEAP8[$3 | 0] = $5_1;
    $3 = $3 + 1 | 0;
   }
   $4_1 = $4_1 + 1 | 0;
   if ($5_1) {
    continue
   }
   break;
  };
  HEAP8[$3 | 0] = 0;
  $4_1 = HEAP32[$0_1 + 36 >> 2];
  label$4 : {
   label$5 : {
    if (($4_1 | 0) >= ($1_1 + $2_1 | 0)) {
     $3 = $4_1 - $2_1 | 0;
     break label$5;
    }
    $3 = $1_1;
    if (($4_1 | 0) < ($3 | 0)) {
     break label$4
    }
   }
   HEAP32[$0_1 + 36 >> 2] = $3;
  }
  HEAP8[$0_1 + 32 | 0] = 1;
  $1_1 = HEAP32[$0_1 + 36 >> 2];
  HEAP32[$0_1 + 44 >> 2] = $1_1;
  HEAP32[$0_1 + 40 >> 2] = $1_1;
  HEAP32[$0_1 + 24 >> 2] = HEAP32[$0_1 + 24 >> 2] - $2_1;
 }
 
 function $696($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = Math_fround(0), $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24 = Math_fround(0);
  $6_1 = HEAP32[$0_1 + 4 >> 2];
  $5_1 = ($6_1 | 0) > 0;
  label$1 : {
   if (($6_1 | 0) <= 0) {
    $4_1 = Math_fround(0.0);
    break label$1;
   }
   $14 = HEAP32[$0_1 + 20 >> 2];
   $16_1 = $14 + ($6_1 << 1) | 0;
   $3 = HEAP32[18392];
   $11_1 = HEAP32[$3 + 6464 >> 2];
   $23_1 = $11_1 + 12 | 0;
   $15_1 = HEAPF32[$3 + 6468 >> 2];
   $24 = Math_fround($15_1 / HEAPF32[$11_1 + 16 >> 2]);
   $3 = 0;
   label$3 : {
    while (1) {
     $21_1 = $4_1;
     $17_1 = $5_1;
     $18_1 = Math_fround(0.0);
     $19 = Math_fround(0.0);
     $20_1 = Math_fround(0.0);
     $7_1 = Math_fround(0.0);
     $12_1 = $3;
     $22_1 = ($3 << 1) + $14 | 0;
     $5_1 = $22_1;
     $4_1 = Math_fround(0.0);
     while (1) {
      label$5 : {
       if ($5_1 >>> 0 >= $16_1 >>> 0) {
        $13 = $18_1;
        $10_1 = $19;
        $8 = $5_1;
        $9 = $4_1;
        break label$5;
       }
       $9 = $20_1;
       $13 = $7_1;
       $3 = 0;
       $10_1 = $4_1;
       label$8 : {
        label$9 : {
         label$10 : {
          $8 = HEAPU16[$5_1 >> 1];
          switch ($8 - 10 | 0) {
          case 0:
           break label$10;
          case 3:
           break label$8;
          default:
           break label$9;
          };
         }
         $9 = Math_fround($15_1 + $20_1);
         $18_1 = $9;
         $13 = $4_1 <= $7_1 ? $7_1 : $4_1;
         $19 = $13;
         $3 = 1;
         $10_1 = Math_fround(0.0);
         break label$8;
        }
        $10_1 = Math_fround($4_1 + Math_fround($24 * HEAPF32[(($8 | 0) < HEAP32[$11_1 >> 2] ? HEAP32[$11_1 + 8 >> 2] + ($8 << 2) | 0 : $23_1) >> 2]));
       }
       $20_1 = $9;
       $7_1 = $13;
       $4_1 = $10_1;
       $13 = $18_1;
       $10_1 = $19;
       $5_1 = $5_1 + 2 | 0;
       $8 = $5_1;
       $9 = $4_1;
       if (!$3) {
        continue
       }
      }
      break;
     };
     $3 = $8 - $22_1 | 0;
     if (($3 | 0) < 2) {
      return $6_1
     }
     if (!(!(Math_fround($21_1 + Math_fround(0.0)) > $2_1) | $12_1)) {
      return 0
     }
     $8 = $3 >> 1;
     $4_1 = Math_fround($21_1 + Math_fround($13 + ($9 > Math_fround(0.0) ? $15_1 : $13 == Math_fround(0.0) ? $15_1 : Math_fround(-0.0))));
     if ($4_1 > $2_1) {
      break label$3
     }
     $3 = $8 + $12_1 | 0;
     $5_1 = ($3 | 0) < ($6_1 | 0);
     if ($5_1) {
      continue
     }
     break;
    };
    $4_1 = $9 > $10_1 ? $9 : $10_1;
    break label$1;
   }
   $3 = $12_1;
   $5_1 = $17_1;
   $4_1 = $9 > $10_1 ? $9 : $10_1;
  }
  $12_1 = $3;
  $3 = $6_1;
  if ($5_1 & 1) {
   if ($1_1 < Math_fround(0.0)) {
    return $12_1
   }
   label$15 : {
    if (!($1_1 < $4_1) | ($8 | 0) <= 0) {
     break label$15
    }
    $16_1 = HEAP32[$0_1 + 20 >> 2];
    $11_1 = HEAP32[18392];
    $3 = 0;
    $4_1 = Math_fround(0.0);
    while (1) {
     $17_1 = $3;
     $3 = $3 + $12_1 | 0;
     $14 = HEAPU16[$16_1 + ($3 << 1) >> 1];
     $7_1 = Math_fround(-1.0);
     label$17 : {
      if (($14 | 0) == 10) {
       break label$17
      }
      $6_1 = HEAP32[$11_1 + 6464 >> 2];
      $7_1 = Math_fround(HEAPF32[(($14 | 0) < HEAP32[$6_1 >> 2] ? HEAP32[$6_1 + 8 >> 2] + ($14 << 2) | 0 : $6_1 + 12 | 0) >> 2] * Math_fround(HEAPF32[$11_1 + 6468 >> 2] / HEAPF32[$6_1 + 16 >> 2]));
     }
     $2_1 = $7_1;
     $7_1 = Math_fround($4_1 + $7_1);
     $6_1 = $7_1 > $1_1;
     label$18 : {
      if (!$6_1) {
       break label$18
      }
      if ($1_1 < Math_fround($4_1 + Math_fround($2_1 * Math_fround(.5)))) {
       $7_1 = $4_1;
       $5_1 = $3;
       break label$18;
      }
      $7_1 = $4_1;
      $5_1 = $3 + 1 | 0;
     }
     $4_1 = $7_1;
     if (!$6_1) {
      $3 = $17_1 + 1 | 0;
      if (($8 | 0) == ($3 | 0)) {
       break label$15
      }
      continue;
     }
     break;
    };
    return $5_1;
   }
   $3 = $8 + $12_1 | 0;
   $5_1 = $3 - 1 | 0;
   $3 = HEAPU16[HEAP32[$0_1 + 20 >> 2] + ($5_1 << 1) >> 1] == 10 ? $5_1 : $3;
  }
  return $3;
 }
 
 function $698($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0;
  $3 = global$0 - 208 | 0;
  global$0 = $3;
  $9 = HEAP32[18392];
  $18_1 = HEAP32[$9 + 7080 >> 2];
  HEAP8[$18_1 + 140 | 0] = 1;
  if (!HEAPU8[$18_1 + 143 | 0]) {
   $24 = $296();
   $25_1 = $292();
   $21_1 = $2_1 & 16 ? Math_fround(0.0) : Math_fround($24 + HEAPF32[$9 + 5500 >> 2]);
   $22_1 = $62($0_1);
   HEAP32[$9 + 7220 >> 2] = 0;
   $301();
   $153($0_1);
   $4_1 = $2_1 & 32 ? $2_1 & -7340041 | 1048584 : $2_1;
   if (!($4_1 & 8)) {
    $7_1 = global$0 - 160 | 0;
    global$0 = $7_1;
    $6_1 = $4_1 & 7340032;
    $11_1 = $4_1 & 25165824;
    label$1 : {
     if ($11_1 ? $6_1 : 0) {
      break label$1
     }
     if (!$322(1958, 0)) {
      break label$1
     }
     $20_1 = HEAP32[18392];
     $5_1 = HEAP32[$20_1 + 11972 >> 2];
     label$3 : {
      if ($6_1) {
       break label$3
      }
      $12_1 = $5_1 & -7340033;
      $5_1 = $585(15314, ($5_1 & 1048576) >>> 20 | 0) ? $12_1 | 1048576 : $5_1;
      $5_1 = $585(14802, ($5_1 & 2097152) >>> 21 | 0) ? $12_1 | 2097152 : $5_1;
      if (!$585(1504, ($5_1 & 4194304) >>> 22 | 0)) {
       break label$3
      }
      $5_1 = $5_1 & -7340033 | 4194304;
     }
     if (!$11_1) {
      label$8 : {
       if ($6_1) {
        break label$8
       }
       $6_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
       if (HEAPU8[$6_1 + 143 | 0]) {
        break label$8
       }
       $593(HEAP32[$6_1 + 376 >> 2] ? 5 : 6);
      }
      $6_1 = $5_1 & -25165825;
      $5_1 = $585(16228, ($5_1 & 8388608) >>> 23 | 0) ? $6_1 | 8388608 : $5_1;
      $5_1 = $585(16670, ($5_1 & 16777216) >>> 24 | 0) ? $6_1 | 16777216 : $5_1;
     }
     $6_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
     if (!HEAPU8[$6_1 + 143 | 0]) {
      $593(HEAP32[$6_1 + 376 >> 2] ? 5 : 6)
     }
     HEAP32[$7_1 + 96 >> 2] = -1082130432;
     HEAP32[$7_1 + 100 >> 2] = 0;
     if ($570(17283, $7_1 + 96 | 0, 0)) {
      $317(1159, 0)
     }
     if ($322(1159, 0)) {
      $8 = HEAPF32[$1_1 + 8 >> 2];
      $14 = Math_fround(Math_fround(($8 < Math_fround(0.0) ? Math_fround(0.0) : $8 > Math_fround(1.0) ? Math_fround(1.0) : $8) * Math_fround(255.0)) + Math_fround(.5));
      label$12 : {
       if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
        $6_1 = ~~$14;
        break label$12;
       }
       $6_1 = -2147483648;
      }
      $14 = HEAPF32[$1_1 + 4 >> 2];
      $17_1 = Math_fround(Math_fround(($14 < Math_fround(0.0) ? Math_fround(0.0) : $14 > Math_fround(1.0) ? Math_fround(1.0) : $14) * Math_fround(255.0)) + Math_fround(.5));
      label$14 : {
       if (Math_fround(Math_abs($17_1)) < Math_fround(2147483648.0)) {
        $11_1 = ~~$17_1;
        break label$14;
       }
       $11_1 = -2147483648;
      }
      $17_1 = HEAPF32[$1_1 >> 2];
      $10_1 = Math_fround(Math_fround(($17_1 < Math_fround(0.0) ? Math_fround(0.0) : $17_1 > Math_fround(1.0) ? Math_fround(1.0) : $17_1) * Math_fround(255.0)) + Math_fround(.5));
      label$16 : {
       if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
        $12_1 = ~~$10_1;
        break label$16;
       }
       $12_1 = -2147483648;
      }
      $16_1 = 255;
      $19 = $4_1 & 2;
      if (!$19) {
       $10_1 = HEAPF32[$1_1 + 12 >> 2];
       $10_1 = Math_fround(Math_fround(($10_1 < Math_fround(0.0) ? Math_fround(0.0) : $10_1 > Math_fround(1.0) ? Math_fround(1.0) : $10_1) * Math_fround(255.0)) + Math_fround(.5));
       label$19 : {
        if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
         $16_1 = ~~$10_1;
         break label$19;
        }
        $16_1 = -2147483648;
       }
      }
      HEAPF64[$7_1 + 72 >> 3] = $19 ? 1.0 : +HEAPF32[$1_1 + 12 >> 2];
      HEAPF64[$7_1 - -64 >> 3] = $8;
      HEAPF64[$7_1 + 56 >> 3] = $14;
      HEAPF64[$7_1 + 48 >> 3] = $17_1;
      $13 = $7_1 + 96 | 0;
      $21($13, 64, 18009, $7_1 + 48 | 0);
      HEAP32[$7_1 + 88 >> 2] = 0;
      HEAP32[$7_1 + 92 >> 2] = 0;
      if ($601($13, 0, 0, $7_1 + 88 | 0)) {
       $98($7_1 + 96 | 0)
      }
      HEAP32[$7_1 + 44 >> 2] = $16_1;
      HEAP32[$7_1 + 40 >> 2] = $6_1;
      HEAP32[$7_1 + 36 >> 2] = $11_1;
      HEAP32[$7_1 + 32 >> 2] = $12_1;
      $13 = $7_1 + 96 | 0;
      $21($13, 64, 18399, $7_1 + 32 | 0);
      HEAP32[$7_1 + 88 >> 2] = 0;
      HEAP32[$7_1 + 92 >> 2] = 0;
      if ($601($13, 0, 0, $7_1 + 88 | 0)) {
       $98($7_1 + 96 | 0)
      }
      HEAP32[$7_1 + 24 >> 2] = $6_1;
      HEAP32[$7_1 + 20 >> 2] = $11_1;
      HEAP32[$7_1 + 16 >> 2] = $12_1;
      $13 = $7_1 + 96 | 0;
      $21($13, 64, 14729, $7_1 + 16 | 0);
      HEAP32[$7_1 + 88 >> 2] = 0;
      HEAP32[$7_1 + 92 >> 2] = 0;
      if ($601($13, 0, 0, $7_1 + 88 | 0)) {
       $98($7_1 + 96 | 0)
      }
      label$25 : {
       if ($19) {
        break label$25
       }
       HEAP32[$7_1 + 12 >> 2] = $16_1;
       HEAP32[$7_1 + 8 >> 2] = $6_1;
       HEAP32[$7_1 + 4 >> 2] = $11_1;
       HEAP32[$7_1 >> 2] = $12_1;
       $6_1 = $7_1 + 96 | 0;
       $21($6_1, 64, 14711, $7_1);
       HEAP32[$7_1 + 88 >> 2] = 0;
       HEAP32[$7_1 + 92 >> 2] = 0;
       if (!$601($6_1, 0, 0, $7_1 + 88 | 0)) {
        break label$25
       }
       $98($7_1 + 96 | 0);
      }
      $321();
     }
     HEAP32[$20_1 + 11972 >> 2] = $5_1;
     $321();
    }
    global$0 = $7_1 + 160 | 0;
   }
   $4_1 = $4_1 & 7340032 ? $4_1 : HEAP32[$9 + 11972 >> 2] & 7340032 | $4_1;
   if (!($4_1 & 25165824)) {
    $4_1 = HEAP32[$9 + 11972 >> 2] & 25165824 | $4_1
   }
   if (!($4_1 & 100663296)) {
    $4_1 = HEAP32[$9 + 11972 >> 2] & 100663296 | $4_1
   }
   $7_1 = $4_1 & 402653184 ? $4_1 : HEAP32[$9 + 11972 >> 2] & 402653184 | $4_1;
   $4_1 = HEAP32[$9 + 11972 >> 2];
   $8 = HEAPF32[$1_1 >> 2];
   HEAPF32[$3 + 176 >> 2] = $8;
   HEAPF32[$3 + 180 >> 2] = HEAPF32[$1_1 + 4 >> 2];
   HEAPF32[$3 + 184 >> 2] = HEAPF32[$1_1 + 8 >> 2];
   $12_1 = $4_1 & -535822337 | $7_1;
   $16_1 = $12_1 & 2;
   HEAPF32[$3 + 188 >> 2] = $16_1 ? Math_fround(1.0) : HEAPF32[$1_1 + 12 >> 2];
   $26_1 = $7_1 & 269484032;
   label$13 : {
    if (($26_1 | 0) == 269484032) {
     $4_1 = $3 + 176 | 0;
     $33($8, HEAPF32[$3 + 180 >> 2], HEAPF32[$3 + 184 >> 2], $4_1, $4_1 | 4, $4_1 | 8);
     break label$13;
    }
    if (($7_1 & 136314880) != 136314880) {
     break label$13
    }
    $4_1 = $3 + 176 | 0;
    $32($8, HEAPF32[$3 + 180 >> 2], HEAPF32[$3 + 184 >> 2], $4_1, $4_1 | 4, $4_1 | 8);
    $4_1 = HEAP32[18392];
    $5_1 = HEAP32[$4_1 + 11984 >> 2];
    $6_1 = HEAP32[$1_1 + 4 >> 2];
    $11_1 = HEAP32[$1_1 >> 2];
    $8 = HEAPF32[$1_1 + 8 >> 2];
    HEAP32[$3 + 108 >> 2] = 0;
    HEAPF32[$3 + 104 >> 2] = $8;
    HEAP32[$3 + 96 >> 2] = $11_1;
    HEAP32[$3 + 100 >> 2] = $6_1;
    if (($31($3 + 96 | 0) | 0) != ($5_1 | 0)) {
     break label$13
    }
    if (!((HEAPF32[$3 + 176 >> 2] != Math_fround(0.0) | HEAPF32[$4_1 + 11976 >> 2] != Math_fround(1.0)) & HEAPF32[$3 + 180 >> 2] != Math_fround(0.0))) {
     HEAPF32[$3 + 176 >> 2] = HEAPF32[$4_1 + 11976 >> 2]
    }
    if (HEAPF32[$3 + 184 >> 2] != Math_fround(0.0)) {
     break label$13
    }
    HEAPF32[$3 + 180 >> 2] = HEAPF32[$4_1 + 11980 >> 2];
   }
   $8 = HEAPF32[$3 + 176 >> 2];
   $8 = Math_fround(Math_fround($8 * Math_fround(255.0)) + ($8 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$17 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$8;
     break label$17;
    }
    $4_1 = -2147483648;
   }
   HEAP32[$3 + 160 >> 2] = $4_1;
   $8 = HEAPF32[$3 + 180 >> 2];
   $8 = Math_fround(Math_fround($8 * Math_fround(255.0)) + ($8 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$190 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$8;
     break label$190;
    }
    $5_1 = -2147483648;
   }
   HEAP32[$3 + 164 >> 2] = $5_1;
   $8 = HEAPF32[$3 + 184 >> 2];
   $8 = Math_fround(Math_fround($8 * Math_fround(255.0)) + ($8 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$21 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$8;
     break label$21;
    }
    $5_1 = -2147483648;
   }
   HEAP32[$3 + 168 >> 2] = $5_1;
   $8 = Math_fround($25_1 - $21_1);
   $19 = $16_1 ? 3 : 4;
   $14 = HEAPF32[$3 + 188 >> 2];
   $14 = Math_fround(Math_fround($14 * Math_fround(255.0)) + ($14 >= Math_fround(0.0) ? Math_fround(.5) : Math_fround(-.5)));
   label$23 : {
    if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$14;
     break label$23;
    }
    $5_1 = -2147483648;
   }
   HEAP32[$3 + 172 >> 2] = $5_1;
   $14 = HEAPF32[$18_1 + 208 >> 2];
   HEAPF32[$18_1 + 208 >> 2] = $14 + (HEAP32[$9 + 5564 >> 2] ? Math_fround(0.0) : $21_1);
   $17_1 = HEAPF32[$18_1 + 212 >> 2];
   $20_1 = $12_1 & 32;
   label$251 : {
    if (!($20_1 | !($7_1 & 3145728))) {
     $10_1 = HEAPF32[$9 + 5500 >> 2];
     $27_1 = $7_1 & 16777216;
     $68($3 + 96 | 0, $27_1 ? 16662 : 16656, 0, 0, Math_fround(-1.0));
     $4_1 = $12_1 & 524288;
     $23_1 = $10_1;
     $15_1 = Math_fround($19 - 1 | 0);
     $10_1 = Math_fround(Math_fround($8 - Math_fround($10_1 * $15_1)) / Math_fround($19 | 0));
     label$27 : {
      if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$10_1;
       break label$27;
      }
      $5_1 = -2147483648;
     }
     $10_1 = Math_fround($5_1 | 0);
     $10_1 = $10_1 <= Math_fround(1.0) ? Math_fround(1.0) : $10_1;
     $15_1 = Math_fround($8 - Math_fround(Math_fround($23_1 + $10_1) * $15_1));
     label$29 : {
      if (Math_fround(Math_abs($15_1)) < Math_fround(2147483648.0)) {
       $5_1 = ~~$15_1;
       break label$29;
      }
      $5_1 = -2147483648;
     }
     $15_1 = Math_fround($5_1 | 0);
     $15_1 = $15_1 <= Math_fround(1.0) ? Math_fround(1.0) : $15_1;
     $28_1 = $10_1 <= HEAPF32[$3 + 96 >> 2] ? 0 : $7_1 & 2097152 ? 2 : 1;
     $29_1 = $4_1 ? 0 : 255;
     $23_1 = $4_1 ? Math_fround(0.0) : Math_fround(1.0);
     $30 = $12_1 & 8;
     $4_1 = 0;
     $13 = 0;
     $6_1 = 0;
     while (1) {
      if ($6_1) {
       $276(Math_fround(0.0), HEAPF32[$9 + 5500 >> 2])
      }
      $11_1 = $6_1 + 1 | 0;
      $38($11_1 >>> 0 < $19 >>> 0 ? $10_1 : $15_1);
      $5_1 = $4_1 & 1;
      $4_1 = $6_1 << 2;
      $6_1 = HEAP32[$4_1 + 48320 >> 2];
      label$33 : {
       if ($27_1) {
        HEAP32[$3 + 96 >> 2] = 0;
        HEAPF32[$3 + 200 >> 2] = $23_1;
        $4_1 = $630($6_1, 8, $4_1 + ($3 + 176 | 0) | 0, Math_fround(.003921568859368563), $3 + 96 | 0, $3 + 200 | 0, HEAP32[($4_1 + ($28_1 << 4) | 0) + 48384 >> 2], 0) | $5_1;
        $13 = $4_1 | $13 & 1;
        break label$33;
       }
       HEAP32[$3 + 96 >> 2] = 0;
       HEAP32[$3 + 200 >> 2] = $29_1;
       $4_1 = $630($6_1, 4, $4_1 + ($3 + 160 | 0) | 0, Math_fround(1.0), $3 + 96 | 0, $3 + 200 | 0, HEAP32[($4_1 + ($28_1 << 4) | 0) + 48336 >> 2], 0) | $5_1;
      }
      $5_1 = $4_1;
      if (!$30) {
       $324(1958, 1)
      }
      $6_1 = $11_1;
      if (($6_1 | 0) != ($19 | 0)) {
       continue
      }
      break;
     };
     $6_1 = $13 & 1;
     break label$251;
    }
    if (!($7_1 & 4194304)) {
     $5_1 = 0;
     $6_1 = 0;
     break label$251;
    }
    $5_1 = 0;
    $6_1 = 0;
    if ($20_1) {
     break label$251
    }
    $5_1 = HEAP32[$3 + 168 >> 2];
    $5_1 = ($5_1 | 0) >= 255 ? 255 : $5_1;
    $5_1 = ($5_1 | 0) > 0 ? $5_1 : 0;
    $6_1 = HEAP32[$3 + 164 >> 2];
    $6_1 = ($6_1 | 0) >= 255 ? 255 : $6_1;
    $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
    $4_1 = ($4_1 | 0) >= 255 ? 255 : $4_1;
    $4_1 = ($4_1 | 0) > 0 ? $4_1 : 0;
    label$37 : {
     if (!$16_1) {
      HEAP32[$3 + 48 >> 2] = $4_1;
      HEAP32[$3 + 52 >> 2] = $6_1;
      HEAP32[$3 + 56 >> 2] = $5_1;
      $4_1 = HEAP32[$3 + 172 >> 2];
      $4_1 = ($4_1 | 0) >= 255 ? 255 : $4_1;
      HEAP32[$3 + 60 >> 2] = ($4_1 | 0) > 0 ? $4_1 : 0;
      $21($3 + 96 | 0, 64, 14711, $3 + 48 | 0);
      break label$37;
     }
     HEAP32[$3 + 72 >> 2] = $5_1;
     HEAP32[$3 + 68 >> 2] = $6_1;
     HEAP32[$3 + 64 >> 2] = $4_1;
     $21($3 + 96 | 0, 64, 14729, $3 - -64 | 0);
    }
    $38($8);
    HEAP32[$3 + 200 >> 2] = 0;
    HEAP32[$3 + 204 >> 2] = 0;
    $5_1 = $633(2138, 0, $3 + 96 | 0, 64, $3 + 200 | 0, 6, 0);
    label$39 : {
     if (!$5_1) {
      break label$39
     }
     $4_1 = $3 + 96 | 0;
     while (1) {
      $6_1 = HEAPU8[$4_1 | 0] - 9 | 0;
      if (!($6_1 >>> 0 > 26 | !(1 << $6_1 & 75497473))) {
       $4_1 = $4_1 + 1 | 0;
       continue;
      }
      break;
     };
     HEAP32[$3 + 168 >> 2] = 0;
     HEAP32[$3 + 172 >> 2] = 255;
     HEAP32[$3 + 160 >> 2] = 0;
     HEAP32[$3 + 164 >> 2] = 0;
     $11_1 = $3 + 160 | 0;
     $6_1 = $11_1 | 4;
     $11_1 = $11_1 | 8;
     if (!$16_1) {
      $13 = $3 + 160 | 0;
      HEAP32[$3 + 28 >> 2] = $13 | 12;
      HEAP32[$3 + 24 >> 2] = $11_1;
      HEAP32[$3 + 20 >> 2] = $6_1;
      HEAP32[$3 + 16 >> 2] = $13;
      $1690($4_1, 14712, $3 + 16 | 0);
      break label$39;
     }
     HEAP32[$3 + 40 >> 2] = $11_1;
     HEAP32[$3 + 36 >> 2] = $6_1;
     HEAP32[$3 + 32 >> 2] = $3 + 160;
     $1690($4_1, 14730, $3 + 32 | 0);
    }
    if (!($12_1 & 8)) {
     $324(1958, 1)
    }
    $6_1 = 0;
   }
   label$44 : {
    if ($12_1 & 16) {
     $4_1 = 0;
     break label$44;
    }
    $10_1 = Math_fround(0.0);
    label$46 : {
     if ($20_1) {
      break label$46
     }
     $10_1 = Math_fround(0.0);
     if (!HEAP32[$9 + 5564 >> 2]) {
      break label$46
     }
     $10_1 = Math_fround($8 + HEAPF32[$9 + 5500 >> 2]);
    }
    $8 = $10_1;
    HEAPF32[$18_1 + 212 >> 2] = $17_1;
    HEAPF32[$18_1 + 208 >> 2] = $14 + $8;
    $8 = HEAPF32[$1_1 + 8 >> 2];
    $10_1 = HEAPF32[$1_1 + 4 >> 2];
    $15_1 = HEAPF32[$1_1 >> 2];
    HEAPF32[$3 + 108 >> 2] = $16_1 ? Math_fround(1.0) : HEAPF32[$1_1 + 12 >> 2];
    HEAPF32[$3 + 104 >> 2] = $8;
    HEAPF32[$3 + 100 >> 2] = $10_1;
    HEAPF32[$3 + 96 >> 2] = $15_1;
    HEAP32[$3 + 88 >> 2] = 0;
    HEAP32[$3 + 92 >> 2] = 0;
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    if (!(!$700(7267, $3 + 96 | 0, $12_1, $3 + 8 | 0) | $12_1 & 4)) {
     $4_1 = HEAP32[$3 + 100 >> 2];
     HEAP32[$9 + 11988 >> 2] = HEAP32[$3 + 96 >> 2];
     HEAP32[$9 + 11992 >> 2] = $4_1;
     $4_1 = $3 + 104 | 0;
     $11_1 = HEAP32[$4_1 + 4 >> 2];
     $13 = $9 + 11996 | 0;
     HEAP32[$13 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$13 + 4 >> 2] = $11_1;
     $317(6273, 0);
     $8 = HEAPF32[$9 + 7252 >> 2];
     HEAPF32[$3 + 204 >> 2] = HEAPF32[$9 + 7264 >> 2] + HEAPF32[$9 + 5496 >> 2];
     HEAPF32[$3 + 200 >> 2] = $8 + Math_fround(-1.0);
     HEAP32[$3 + 80 >> 2] = 0;
     HEAP32[$3 + 84 >> 2] = 0;
     $250($3 + 200 | 0, 0, $3 + 80 | 0);
    }
    if (!($12_1 & 8)) {
     $324(1958, 1)
    }
    label$51 : {
     if (!$322(6273, 0)) {
      $4_1 = 0;
      break label$51;
     }
     $4_1 = HEAP32[$9 + 7080 >> 2];
     label$53 : {
      if (($0_1 | 0) == ($22_1 | 0)) {
       break label$53
      }
      $555($0_1, $22_1, 0);
      $11_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
      HEAP8[$11_1 + 140 | 0] = 1;
      if (HEAPU8[$11_1 + 143 | 0]) {
       break label$53
      }
      HEAP32[$3 + 200 >> 2] = 0;
      HEAP32[$3 + 204 >> 2] = 0;
      $212($3 + 200 | 0, Math_fround(-1.0));
     }
     $38(Math_fround($24 * Math_fround(12.0)));
     $2_1 = $701(6271, $1_1, $2_1 & 529072130 | 7602304, $9 + 11988 | 0);
     $321();
     $5_1 = $2_1 | $5_1;
    }
   }
   if (!($12_1 & 128 | ($0_1 | 0) == ($22_1 | 0))) {
    $8 = HEAPF32[$9 + 5480 >> 2];
    HEAPF32[$18_1 + 208 >> 2] = $14 + ($20_1 ? $21_1 : Math_fround($25_1 + HEAPF32[$9 + 5500 >> 2]));
    HEAPF32[$18_1 + 212 >> 2] = $17_1 + $8;
    $555($0_1, $22_1, 0);
   }
   $0_1 = $4_1;
   label$56 : {
    if (!($5_1 & !$4_1)) {
     break label$56
    }
    if (!$6_1) {
     $4_1 = 0;
     while (1) {
      $2_1 = $4_1 << 2;
      HEAPF32[$2_1 + ($3 + 176 | 0) >> 2] = Math_fround(HEAP32[$2_1 + ($3 + 160 | 0) >> 2]) / Math_fround(255.0);
      $4_1 = $4_1 + 1 | 0;
      if (($4_1 | 0) != 4) {
       continue
      }
      break;
     };
    }
    $4_1 = $3 + 176 | 0;
    $2_1 = $4_1 | 8;
    $4_1 = $4_1 | 4;
    if (($7_1 & 136314880) == 136314880) {
     $8 = HEAPF32[$3 + 176 >> 2];
     HEAPF32[$9 + 11976 >> 2] = $8;
     $21_1 = HEAPF32[$3 + 180 >> 2];
     HEAPF32[$9 + 11980 >> 2] = $21_1;
     $33($8, $21_1, HEAPF32[$3 + 184 >> 2], $3 + 176 | 0, $4_1, $2_1);
     HEAP32[$3 + 108 >> 2] = 0;
     HEAPF32[$3 + 104 >> 2] = HEAPF32[$3 + 184 >> 2];
     $6_1 = HEAP32[$3 + 180 >> 2];
     HEAP32[$3 + 96 >> 2] = HEAP32[$3 + 176 >> 2];
     HEAP32[$3 + 100 >> 2] = $6_1;
     HEAP32[$9 + 11984 >> 2] = $31($3 + 96 | 0);
    }
    if (($26_1 | 0) == 269484032) {
     $32(HEAPF32[$3 + 176 >> 2], HEAPF32[$3 + 180 >> 2], HEAPF32[$3 + 184 >> 2], $3 + 176 | 0, $4_1, $2_1)
    }
    HEAPF32[$1_1 >> 2] = HEAPF32[$3 + 176 >> 2];
    HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$3 + 180 >> 2];
    HEAPF32[$1_1 + 8 >> 2] = HEAPF32[$3 + 184 >> 2];
    if ($16_1) {
     break label$56
    }
    HEAPF32[$1_1 + 12 >> 2] = HEAPF32[$3 + 188 >> 2];
   }
   $269();
   $275();
   label$61 : {
    if (!(HEAP8[$9 + 7248 | 0] & 1)) {
     $4_1 = $5_1;
     break label$61;
    }
    if ($12_1 & 512) {
     $4_1 = $5_1;
     break label$61;
    }
    if (!$337()) {
     $4_1 = $5_1;
     break label$61;
    }
    $4_1 = $5_1;
    $6_1 = $338(14967, 0);
    if ($6_1) {
     $2_1 = HEAP32[$6_1 >> 2];
     $4_1 = HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24);
     $5_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
     HEAP8[$1_1 | 0] = $5_1;
     HEAP8[$1_1 + 1 | 0] = $5_1 >>> 8;
     HEAP8[$1_1 + 2 | 0] = $5_1 >>> 16;
     HEAP8[$1_1 + 3 | 0] = $5_1 >>> 24;
     HEAP8[$1_1 + 4 | 0] = $4_1;
     HEAP8[$1_1 + 5 | 0] = $4_1 >>> 8;
     HEAP8[$1_1 + 6 | 0] = $4_1 >>> 16;
     HEAP8[$1_1 + 7 | 0] = $4_1 >>> 24;
     $4_1 = $1_1 + 8 | 0;
     $2_1 = $2_1 + 8 | 0;
     $2_1 = HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24);
     HEAP8[$4_1 | 0] = $2_1;
     HEAP8[$4_1 + 1 | 0] = $2_1 >>> 8;
     HEAP8[$4_1 + 2 | 0] = $2_1 >>> 16;
     HEAP8[$4_1 + 3 | 0] = $2_1 >>> 24;
     $4_1 = 1;
    }
    $2_1 = $338(14960, 0);
    if ($2_1) {
     $1602($1_1, HEAP32[$2_1 >> 2], $19 << 2);
     $4_1 = 1;
     $2_1 = 1;
    } else {
     $2_1 = ($6_1 | 0) != 0
    }
    if (!(!$2_1 | !($7_1 & 268435456))) {
     $32(HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], $1_1, $1_1 + 4 | 0, $1_1 + 8 | 0)
    }
    $339();
   }
   label$69 : {
    if (!$0_1) {
     break label$69
    }
    $1_1 = HEAP32[$9 + 7136 >> 2];
    if (!$1_1 | ($0_1 | 0) != HEAP32[$9 + 7184 >> 2]) {
     break label$69
    }
    HEAP32[$9 + 7240 >> 2] = $1_1;
   }
   if ($4_1) {
    $88()
   }
  }
  global$0 = $3 + 208 | 0;
  return $4_1;
 }
 
 function $700($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = 0.0, $17_1 = 0.0, $18_1 = 0.0, $19 = Math_fround(0), $20_1 = 0;
  $4_1 = global$0 - 240 | 0;
  global$0 = $4_1;
  $12_1 = HEAP32[18392];
  $8 = HEAP32[$12_1 + 7080 >> 2];
  HEAP8[$8 + 140 | 0] = 1;
  if (!HEAPU8[$8 + 143 | 0]) {
   $15_1 = $76($8, $0_1);
   $5_1 = $296();
   if (HEAPF32[$3 >> 2] == Math_fround(0.0)) {
    HEAPF32[$3 >> 2] = $5_1
   }
   if (HEAPF32[$3 + 4 >> 2] == Math_fround(0.0)) {
    HEAPF32[$3 + 4 >> 2] = $5_1
   }
   $7_1 = HEAP32[$8 + 208 >> 2];
   $9 = HEAP32[$8 + 212 >> 2];
   $10_1 = HEAPF32[$3 >> 2];
   $14 = HEAPF32[$8 + 208 >> 2];
   $11_1 = HEAPF32[$3 + 4 >> 2];
   HEAPF32[$4_1 + 236 >> 2] = HEAPF32[$8 + 212 >> 2] + $11_1;
   HEAPF32[$4_1 + 232 >> 2] = $14 + $10_1;
   HEAP32[$4_1 + 224 >> 2] = $7_1;
   HEAP32[$4_1 + 228 >> 2] = $9;
   $7_1 = $4_1 + 224 | 0;
   $277($7_1, $5_1 <= $11_1 ? HEAPF32[$12_1 + 5480 >> 2] : Math_fround(0.0));
   $3 = 0;
   if ($213($7_1, $15_1, 0, 0)) {
    $3 = $569($4_1 + 224 | 0, $15_1, $4_1 + 223 | 0, $4_1 + 222 | 0, 0);
    $7_1 = $1_1 + 8 | 0;
    $6_1 = HEAP32[$7_1 + 4 >> 2];
    $9 = $4_1 + 208 | 0;
    HEAP32[$9 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$9 + 4 >> 2] = $6_1;
    $7_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$4_1 + 200 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 204 >> 2] = $7_1;
    $7_1 = $2_1 & 2 ? $2_1 & -393217 : $2_1;
    if ($7_1 & 268435456) {
     $2_1 = $4_1 + 200 | 0;
     $33(HEAPF32[$4_1 + 200 >> 2], HEAPF32[$4_1 + 204 >> 2], HEAPF32[$4_1 + 208 >> 2], $2_1, $2_1 | 4, $9);
    }
    HEAP32[$4_1 + 196 >> 2] = 1065353216;
    HEAPF32[$4_1 + 192 >> 2] = HEAPF32[$4_1 + 208 >> 2];
    $2_1 = HEAP32[$4_1 + 204 >> 2];
    HEAP32[$4_1 + 184 >> 2] = HEAP32[$4_1 + 200 >> 2];
    HEAP32[$4_1 + 188 >> 2] = $2_1;
    $5_1 = HEAPF32[$12_1 + 5484 >> 2];
    $2_1 = $4_1 + 232 | 0;
    $9 = HEAP32[$2_1 + 4 >> 2];
    $6_1 = $4_1 + 176 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $9;
    $2_1 = HEAP32[$4_1 + 228 >> 2];
    HEAP32[$4_1 + 168 >> 2] = HEAP32[$4_1 + 224 >> 2];
    HEAP32[$4_1 + 172 >> 2] = $2_1;
    $11_1 = Math_fround(($10_1 < $11_1 ? $10_1 : $11_1) / Math_fround(2.990000009536743));
    $14 = Math_fround($11_1 * Math_fround(.5));
    $2_1 = $14 > $5_1;
    $10_1 = Math_fround(0.0);
    $9 = $7_1 & 1024;
    if (!$9) {
     $6_1 = $4_1 + 180 | 0;
     HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 >> 2] + Math_fround(-.75);
     HEAPF32[$4_1 + 168 >> 2] = HEAPF32[$4_1 + 168 >> 2] + Math_fround(.75);
     HEAPF32[$4_1 + 172 >> 2] = HEAPF32[$4_1 + 172 >> 2] + Math_fround(.75);
     HEAPF32[$4_1 + 176 >> 2] = HEAPF32[$4_1 + 176 >> 2] + Math_fround(-.75);
     $10_1 = Math_fround(-.75);
    }
    $5_1 = $2_1 ? $5_1 : $14;
    label$8 : {
     if (!(!($7_1 & 262144) | !(HEAPF32[$4_1 + 212 >> 2] < Math_fround(1.0)))) {
      $2_1 = HEAP32[$8 + 580 >> 2];
      HEAPF32[$4_1 + 164 >> 2] = HEAPF32[$4_1 + 172 >> 2];
      $14 = HEAPF32[$4_1 + 168 >> 2];
      HEAPF32[$4_1 + 160 >> 2] = $11_1 + $14;
      $6_1 = HEAP32[$4_1 + 180 >> 2];
      HEAP32[$4_1 + 152 >> 2] = HEAP32[$4_1 + 176 >> 2];
      HEAP32[$4_1 + 156 >> 2] = $6_1;
      $19 = HEAPF32[$4_1 + 176 >> 2];
      $6_1 = $52($4_1 + 200 | 0);
      HEAPF32[$4_1 + 148 >> 2] = $10_1;
      HEAPF32[$4_1 + 144 >> 2] = $10_1 - $11_1;
      $13 = HEAP32[$4_1 + 164 >> 2];
      HEAP32[$4_1 + 48 >> 2] = HEAP32[$4_1 + 160 >> 2];
      HEAP32[$4_1 + 52 >> 2] = $13;
      $13 = HEAP32[$4_1 + 156 >> 2];
      HEAP32[$4_1 + 40 >> 2] = HEAP32[$4_1 + 152 >> 2];
      HEAP32[$4_1 + 44 >> 2] = $13;
      $13 = HEAP32[$4_1 + 148 >> 2];
      HEAP32[$4_1 + 32 >> 2] = HEAP32[$4_1 + 144 >> 2];
      HEAP32[$4_1 + 36 >> 2] = $13;
      $482($2_1, $4_1 + 48 | 0, $4_1 + 40 | 0, $6_1, $11_1, $4_1 + 32 | 0, $5_1, 160);
      $2_1 = HEAP32[$8 + 580 >> 2];
      HEAPF32[$4_1 + 132 >> 2] = HEAPF32[$4_1 + 180 >> 2];
      $10_1 = Math_fround(Math_fround(Math_fround($14 + $19) * Math_fround(.5)) + Math_fround(.5));
      label$10 : {
       if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
        $6_1 = ~~$10_1;
        break label$10;
       }
       $6_1 = -2147483648;
      }
      HEAPF32[$4_1 + 128 >> 2] = $6_1 | 0;
      $401($2_1, $4_1 + 168 | 0, $4_1 + 128 | 0, $52($4_1 + 184 | 0), $5_1, 80);
      break label$8;
     }
     $2_1 = $7_1 & 131072 ? $4_1 + 200 | 0 : $4_1 + 184 | 0;
     $6_1 = $2_1 + 8 | 0;
     $13 = HEAP32[$6_1 + 4 >> 2];
     $20_1 = $4_1 + 136 | 0;
     HEAP32[$20_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$20_1 + 4 >> 2] = $13;
     $6_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$4_1 + 128 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$4_1 + 132 >> 2] = $6_1;
     $2_1 = HEAP32[$8 + 580 >> 2];
     if (HEAPF32[$4_1 + 140 >> 2] < Math_fround(1.0)) {
      $6_1 = HEAP32[$4_1 + 172 >> 2];
      HEAP32[$4_1 + 120 >> 2] = HEAP32[$4_1 + 168 >> 2];
      HEAP32[$4_1 + 124 >> 2] = $6_1;
      $6_1 = HEAP32[$4_1 + 180 >> 2];
      HEAP32[$4_1 + 112 >> 2] = HEAP32[$4_1 + 176 >> 2];
      HEAP32[$4_1 + 116 >> 2] = $6_1;
      $6_1 = $52($4_1 + 128 | 0);
      HEAPF32[$4_1 + 108 >> 2] = $10_1;
      HEAPF32[$4_1 + 104 >> 2] = $10_1;
      $13 = HEAP32[$4_1 + 124 >> 2];
      HEAP32[$4_1 + 72 >> 2] = HEAP32[$4_1 + 120 >> 2];
      HEAP32[$4_1 + 76 >> 2] = $13;
      $13 = HEAP32[$4_1 + 116 >> 2];
      HEAP32[$4_1 + 64 >> 2] = HEAP32[$4_1 + 112 >> 2];
      HEAP32[$4_1 + 68 >> 2] = $13;
      $13 = HEAP32[$4_1 + 108 >> 2];
      HEAP32[$4_1 + 56 >> 2] = HEAP32[$4_1 + 104 >> 2];
      HEAP32[$4_1 + 60 >> 2] = $13;
      $482($2_1, $4_1 + 72 | 0, $4_1 - -64 | 0, $6_1, $11_1, $4_1 + 56 | 0, $5_1, 0);
      break label$8;
     }
     $6_1 = $2_1;
     $2_1 = $4_1 + 168 | 0;
     $401($6_1, $2_1, $2_1 + 8 | 0, $52($4_1 + 128 | 0), $5_1, 0);
    }
    $73($4_1 + 224 | 0, $15_1, 1);
    label$13 : {
     if ($9) {
      break label$13
     }
     if (HEAPF32[$12_1 + 5488 >> 2] > Math_fround(0.0)) {
      $2_1 = HEAP32[$4_1 + 228 >> 2];
      $9 = HEAP32[$4_1 + 224 >> 2];
      HEAP32[$4_1 + 96 >> 2] = $9;
      HEAP32[$4_1 + 100 >> 2] = $2_1;
      $8 = HEAP32[$4_1 + 236 >> 2];
      $6_1 = HEAP32[$4_1 + 232 >> 2];
      HEAP32[$4_1 + 88 >> 2] = $6_1;
      HEAP32[$4_1 + 92 >> 2] = $8;
      HEAP32[$4_1 + 24 >> 2] = $9;
      HEAP32[$4_1 + 28 >> 2] = $2_1;
      HEAP32[$4_1 + 16 >> 2] = $6_1;
      HEAP32[$4_1 + 20 >> 2] = $8;
      $72($4_1 + 24 | 0, $4_1 + 16 | 0, $5_1);
      break label$13;
     }
     $400(HEAP32[$8 + 580 >> 2], $4_1 + 224 | 0, $4_1 + 232 | 0, $51(7, Math_fround(1.0)), $5_1, 0, Math_fround(1.0));
    }
    label$15 : {
     if ($7_1 & 512 | ($15_1 | 0) != HEAP32[$12_1 + 7136 >> 2]) {
      break label$15
     }
     if (!$334(0)) {
      break label$15
     }
     label$16 : {
      if ($7_1 & 2) {
       $336(14967, $4_1 + 200 | 0, 12, 2);
       break label$16;
      }
      $336(14960, $4_1 + 200 | 0, 16, 2);
     }
     HEAP32[$4_1 + 8 >> 2] = 0;
     HEAP32[$4_1 + 12 >> 2] = 0;
     HEAP32[$4_1 + 80 >> 2] = 0;
     HEAP32[$4_1 + 84 >> 2] = 0;
     $700($0_1, $1_1, $7_1, $4_1 + 8 | 0);
     $276(Math_fround(0.0), Math_fround(-1.0));
     $555(6176, 0, 0);
     $335();
    }
    if (!(!HEAPU8[$4_1 + 223 | 0] | $7_1 & 64)) {
     $8 = 0;
     $2_1 = global$0 - 208 | 0;
     global$0 = $2_1;
     $12_1 = HEAP32[18392];
     $141(1);
     $7_1 = $7_1 & 403046402;
     if ($0_1) {
      $8 = $62($0_1)
     }
     label$2 : {
      if ($0_1 >>> 0 >= $8 >>> 0) {
       break label$2
      }
      $555($0_1, $8, 0);
      $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
      if (HEAPU8[$0_1 + 143 | 0]) {
       break label$2
      }
      $593(HEAP32[$0_1 + 376 >> 2] ? 5 : 6);
     }
     $5_1 = HEAPF32[$1_1 + 8 >> 2];
     $19 = HEAPF32[$12_1 + 6468 >> 2];
     $14 = HEAPF32[$12_1 + 5480 >> 2];
     $10_1 = HEAPF32[$1_1 + 4 >> 2];
     $11_1 = HEAPF32[$1_1 >> 2];
     $15_1 = $7_1 & 2;
     HEAPF32[$2_1 + 204 >> 2] = $15_1 ? Math_fround(1.0) : HEAPF32[$1_1 + 12 >> 2];
     HEAPF32[$2_1 + 200 >> 2] = $5_1;
     $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
     label$4 : {
      if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$5_1;
       break label$4;
      }
      $0_1 = -2147483648;
     }
     HEAPF32[$2_1 + 196 >> 2] = $10_1;
     $5_1 = Math_fround(Math_fround(($10_1 < Math_fround(0.0) ? Math_fround(0.0) : $10_1 > Math_fround(1.0) ? Math_fround(1.0) : $10_1) * Math_fround(255.0)) + Math_fround(.5));
     label$6 : {
      if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
       $8 = ~~$5_1;
       break label$6;
      }
      $8 = -2147483648;
     }
     HEAPF32[$2_1 + 192 >> 2] = $11_1;
     $5_1 = Math_fround(Math_fround(($11_1 < Math_fround(0.0) ? Math_fround(0.0) : $11_1 > Math_fround(1.0) ? Math_fround(1.0) : $11_1) * Math_fround(255.0)) + Math_fround(.5));
     label$80 : {
      if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
       $12_1 = ~~$5_1;
       break label$80;
      }
      $12_1 = -2147483648;
     }
     $9 = 255;
     if (!$15_1) {
      $5_1 = HEAPF32[$1_1 + 12 >> 2];
      $5_1 = Math_fround(Math_fround(($5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1) * Math_fround(255.0)) + Math_fround(.5));
      label$11 : {
       if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
        $9 = ~~$5_1;
        break label$11;
       }
       $9 = -2147483648;
      }
     }
     $5_1 = Math_fround(Math_fround($19 * Math_fround(3.0)) + Math_fround($14 + $14));
     HEAPF32[$2_1 + 188 >> 2] = $5_1;
     HEAPF32[$2_1 + 184 >> 2] = $5_1;
     $6_1 = HEAP32[$2_1 + 188 >> 2];
     HEAP32[$2_1 + 176 >> 2] = HEAP32[$2_1 + 184 >> 2];
     HEAP32[$2_1 + 180 >> 2] = $6_1;
     $700(1849, $2_1 + 192 | 0, $7_1 & 403046402 | 64, $2_1 + 176 | 0);
     $276(Math_fround(0.0), Math_fround(-1.0));
     label$131 : {
      if ($7_1 & 402653184 ? $7_1 & 134217728 : 1) {
       $16_1 = +HEAPF32[$1_1 + 8 >> 2];
       $17_1 = +HEAPF32[$1_1 + 4 >> 2];
       $18_1 = +HEAPF32[$1_1 >> 2];
       if ($15_1) {
        HEAPF64[$2_1 + 104 >> 3] = $16_1;
        HEAPF64[$2_1 + 96 >> 3] = $17_1;
        HEAPF64[$2_1 + 88 >> 3] = $18_1;
        HEAP32[$2_1 + 84 >> 2] = $0_1;
        HEAP32[$2_1 + 80 >> 2] = $8;
        HEAP32[$2_1 + 76 >> 2] = $12_1;
        HEAP32[$2_1 + 72 >> 2] = $0_1;
        HEAP32[$2_1 + 68 >> 2] = $8;
        HEAP32[$2_1 + 64 >> 2] = $12_1;
        $557(18038, $2_1 - -64 | 0);
        break label$131;
       }
       $5_1 = HEAPF32[$1_1 + 12 >> 2];
       HEAPF64[$2_1 + 48 >> 3] = $16_1;
       HEAPF64[$2_1 + 40 >> 3] = $17_1;
       HEAPF64[$2_1 + 32 >> 3] = $18_1;
       HEAP32[$2_1 + 28 >> 2] = $9;
       HEAP32[$2_1 + 24 >> 2] = $0_1;
       HEAP32[$2_1 + 20 >> 2] = $8;
       HEAP32[$2_1 + 16 >> 2] = $12_1;
       HEAPF64[$2_1 + 56 >> 3] = $5_1;
       HEAP32[$2_1 + 12 >> 2] = $9;
       HEAP32[$2_1 + 8 >> 2] = $0_1;
       HEAP32[$2_1 + 4 >> 2] = $8;
       HEAP32[$2_1 >> 2] = $12_1;
       $557(18091, $2_1);
       break label$131;
      }
      if (!($7_1 & 268435456)) {
       break label$131
      }
      $16_1 = +HEAPF32[$1_1 + 8 >> 2];
      $17_1 = +HEAPF32[$1_1 + 4 >> 2];
      $18_1 = +HEAPF32[$1_1 >> 2];
      if ($15_1) {
       HEAPF64[$2_1 + 160 >> 3] = $16_1;
       HEAPF64[$2_1 + 152 >> 3] = $17_1;
       HEAPF64[$2_1 + 144 >> 3] = $18_1;
       $557(9709, $2_1 + 144 | 0);
       break label$131;
      }
      $5_1 = HEAPF32[$1_1 + 12 >> 2];
      HEAPF64[$2_1 + 128 >> 3] = $16_1;
      HEAPF64[$2_1 + 136 >> 3] = $5_1;
      HEAPF64[$2_1 + 120 >> 3] = $17_1;
      HEAPF64[$2_1 + 112 >> 3] = $18_1;
      $557(9735, $2_1 + 112 | 0);
     }
     $142();
     global$0 = $2_1 + 208 | 0;
    }
   }
   $7_1 = $3;
  }
  global$0 = $4_1 + 240 | 0;
  return $7_1;
 }
 
 function $701($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = 0, $20_1 = 0, $21_1 = Math_fround(0), $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = Math_fround(0), $26_1 = Math_fround(0), $27_1 = Math_fround(0), $28_1 = 0, $29_1 = Math_fround(0), $30 = Math_fround(0), $31_1 = Math_fround(0), $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = Math_fround(0), $37 = Math_fround(0), $38_1 = Math_fround(0), $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = 0, $42_1 = 0, $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0;
  $4_1 = global$0 - 576 | 0;
  global$0 = $4_1;
  $20_1 = HEAP32[18392];
  $24 = HEAP32[$20_1 + 7080 >> 2];
  HEAP8[$24 + 140 | 0] = 1;
  if (!HEAPU8[$24 + 143 | 0]) {
   $11_1 = HEAP32[$24 + 580 >> 2];
   $13 = $292();
   HEAP32[$20_1 + 7220 >> 2] = 0;
   $153($0_1);
   $9 = ($2_1 ^ -1) >>> 4 & 16 | $2_1;
   $301();
   if (!($2_1 & 8)) {
    $19 = global$0 - 32 | 0;
    global$0 = $19;
    $22_1 = $9 & 100663296;
    $34_1 = $9 & 65538;
    label$1 : {
     if ($34_1 ? $22_1 : 0) {
      break label$1
     }
     if (!$322(1958, 0)) {
      break label$1
     }
     $23_1 = HEAP32[18392];
     if (!$22_1) {
      $33_1 = $9 & 2;
      $5_1 = HEAPF32[$23_1 + 6468 >> 2];
      $14 = $296();
      $25_1 = HEAPF32[$23_1 + 5500 >> 2];
      $5_1 = Math_fround($5_1 * Math_fround(8.0));
      HEAPF32[$19 + 24 >> 2] = $5_1;
      $14 = Math_fround($5_1 - Math_fround($14 + $25_1));
      HEAPF32[$19 + 28 >> 2] = $14 >= Math_fround(1.0) ? $14 : Math_fround(1.0);
      $289($5_1);
      while (1) {
       $8 = $15_1;
       label$5 : {
        if (($8 | 0) != 1) {
         break label$5
        }
        $15_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
        if (HEAPU8[$15_1 + 143 | 0]) {
         break label$5
        }
        $593(HEAP32[$15_1 + 376 >> 2] ? 5 : 6);
       }
       $266($8);
       $15_1 = ($8 ? 424 : 33554856) | $33_1;
       $15_1 = ($8 | 0) == 1 ? $15_1 | 67108864 : $15_1;
       $278($19 + 16 | 0);
       if ($601(11380, 0, 0, $19 + 24 | 0)) {
        HEAP32[$23_1 + 11972 >> 2] = HEAP32[$23_1 + 11972 >> 2] & -100663297 | $15_1 & 100663296
       }
       $279($19 + 16 | 0);
       $35_1 = $15_1 & 2;
       $28_1 = $35_1 ? 12 : 16;
       $1604($28_1 + $19 | 0, 0, $35_1 << 1);
       $701(6251, $1602($19, $1_1, $28_1), $15_1, 0);
       $269();
       $15_1 = $8 + 1 | 0;
       if (!$8) {
        continue
       }
       break;
      };
      $291();
     }
     label$7 : {
      if ($34_1) {
       break label$7
      }
      label$8 : {
       if ($22_1) {
        break label$8
       }
       $8 = HEAP32[HEAP32[18392] + 7080 >> 2];
       if (HEAPU8[$8 + 143 | 0]) {
        break label$8
       }
       $593(HEAP32[$8 + 376 >> 2] ? 5 : 6);
      }
      HEAP8[$19 | 0] = HEAP8[$23_1 + 11974 | 0] & 1;
      if (!$583(6687, $19)) {
       break label$7
      }
      HEAP32[$23_1 + 11972 >> 2] = HEAP32[$23_1 + 11972 >> 2] & -65537 | HEAPU8[$19 | 0] << 16;
     }
     $321();
    }
    global$0 = $19 + 32 | 0;
   }
   if ($2_1 & 100663296) {
    $2_1 = $9
   } else {
    $2_1 = HEAP32[$20_1 + 11972 >> 2] & 100663296;
    $2_1 = $9 | ($2_1 ? $2_1 : 33554432);
   }
   if (!($2_1 & 402653184)) {
    $9 = HEAP32[$20_1 + 11972 >> 2] & 402653184;
    $2_1 = $2_1 | ($9 ? $9 : 134217728);
   }
   if (!($2_1 & 8)) {
    $2_1 = HEAP32[$20_1 + 11972 >> 2] & 65536 | $2_1
   }
   $9 = HEAP32[$24 + 212 >> 2];
   HEAP32[$4_1 + 504 >> 2] = HEAP32[$24 + 208 >> 2];
   HEAP32[$4_1 + 508 >> 2] = $9;
   $25_1 = $296();
   $27_1 = HEAPF32[$20_1 + 5500 >> 2];
   $16_1 = HEAPF32[$4_1 + 504 >> 2];
   $15_1 = $2_1;
   $24 = $2_1 & 2;
   $35_1 = $24 ? 12 : 16;
   $1602($4_1 + 480 | 0, $1_1, $35_1);
   $34_1 = $2_1 & 65538;
   $5_1 = Math_fround($13 - Math_fround(Math_fround((($34_1 | 0) == 65536 ? 2 : 1) | 0) * Math_fround($25_1 + $27_1)));
   $14 = $5_1 <= $25_1 ? $25_1 : $5_1;
   $6_1 = Math_fround($14 * Math_fround(.5));
   HEAPF32[$4_1 + 476 >> 2] = $6_1 + HEAPF32[$4_1 + 508 >> 2];
   HEAPF32[$4_1 + 472 >> 2] = $16_1 + Math_fround(Math_fround($25_1 + $14) * Math_fround(.5));
   HEAP32[$4_1 + 468 >> 2] = 0;
   $43_1 = Math_fround($14 * Math_fround(.07999999821186066));
   $12_1 = Math_fround($6_1 - $43_1);
   $5_1 = Math_fround($14 * Math_fround(.027000000700354576));
   label$9 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$5_1;
     break label$9;
    }
    $2_1 = -2147483648;
   }
   $5_1 = Math_fround($12_1 - Math_fround($2_1 | 0));
   HEAPF32[$4_1 + 464 >> 2] = $5_1;
   HEAPF32[$4_1 + 460 >> 2] = $5_1 * Math_fround(-.8660249710083008);
   $13 = Math_fround($5_1 * Math_fround(-.5));
   HEAPF32[$4_1 + 456 >> 2] = $13;
   HEAPF32[$4_1 + 452 >> 2] = $5_1 * Math_fround(.8660249710083008);
   HEAPF32[$4_1 + 448 >> 2] = $13;
   $5_1 = HEAPF32[$1_1 >> 2];
   HEAPF32[$4_1 + 444 >> 2] = $5_1;
   $13 = HEAPF32[$1_1 + 4 >> 2];
   HEAPF32[$4_1 + 440 >> 2] = $13;
   $7_1 = HEAPF32[$1_1 + 8 >> 2];
   HEAPF32[$4_1 + 436 >> 2] = $7_1;
   HEAPF32[$4_1 + 432 >> 2] = $5_1;
   HEAPF32[$4_1 + 428 >> 2] = $13;
   HEAPF32[$4_1 + 424 >> 2] = $7_1;
   $16_1 = Math_fround($16_1 + $14);
   $23_1 = $15_1 & 134217728;
   $10_1 = Math_fround($25_1 * Math_fround(.20000000298023224));
   label$11 : {
    if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
     $33_1 = ~~$10_1;
     break label$11;
    }
    $33_1 = -2147483648;
   }
   $16_1 = Math_fround($27_1 + $16_1);
   label$13 : {
    if ($23_1) {
     $32($5_1, $13, $7_1, $4_1 + 444 | 0, $4_1 + 440 | 0, $4_1 + 436 | 0);
     $2_1 = HEAP32[18392];
     $9 = HEAP32[$2_1 + 11984 >> 2];
     $8 = HEAP32[$1_1 >> 2];
     $19 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = HEAPF32[$1_1 + 8 >> 2];
     HEAP32[$4_1 + 364 >> 2] = 0;
     HEAPF32[$4_1 + 360 >> 2] = $5_1;
     HEAP32[$4_1 + 352 >> 2] = $8;
     HEAP32[$4_1 + 356 >> 2] = $19;
     if (($31($4_1 + 352 | 0) | 0) != ($9 | 0)) {
      break label$13
     }
     if (!((HEAPF32[$4_1 + 444 >> 2] != Math_fround(0.0) | HEAPF32[$2_1 + 11976 >> 2] != Math_fround(1.0)) & HEAPF32[$4_1 + 440 >> 2] != Math_fround(0.0))) {
      HEAPF32[$4_1 + 444 >> 2] = HEAPF32[$2_1 + 11976 >> 2]
     }
     if (HEAPF32[$4_1 + 436 >> 2] != Math_fround(0.0)) {
      break label$13
     }
     HEAPF32[$4_1 + 440 >> 2] = HEAPF32[$2_1 + 11980 >> 2];
     break label$13;
    }
    if (!($15_1 & 268435456)) {
     break label$13
    }
    $33($5_1, $13, $7_1, $4_1 + 432 | 0, $4_1 + 428 | 0, $4_1 + 424 | 0);
   }
   $36_1 = Math_fround($25_1 + $16_1);
   $224(8, 1);
   $28_1 = $15_1 & 67108864;
   label$17 : {
    if ($28_1) {
     $5_1 = HEAPF32[$20_1 + 5500 >> 2];
     HEAPF32[$4_1 + 356 >> 2] = $14;
     HEAPF32[$4_1 + 352 >> 2] = $25_1 + Math_fround($14 + $5_1);
     $573(1861, $4_1 + 352 | 0, 0);
     $9 = 0;
     $8 = 0;
     $2_1 = 0;
     label$20 : {
      if (!$191()) {
       break label$20
      }
      $5_1 = HEAPF32[$4_1 + 476 >> 2];
      $13 = Math_fround(HEAPF32[$20_1 + 232 >> 2] - $5_1);
      $10_1 = HEAPF32[$4_1 + 472 >> 2];
      $7_1 = Math_fround(HEAPF32[$20_1 + 228 >> 2] - $10_1);
      $10_1 = Math_fround(HEAPF32[$20_1 + 908 >> 2] - $10_1);
      $17_1 = Math_fround(HEAPF32[$20_1 + 912 >> 2] - $5_1);
      $5_1 = Math_fround(Math_fround($10_1 * $10_1) + Math_fround($17_1 * $17_1));
      $18_1 = Math_fround($12_1 + Math_fround(-1.0));
      $9 = 0;
      label$21 : {
       if (!($5_1 >= Math_fround($18_1 * $18_1))) {
        break label$21
       }
       $18_1 = Math_fround($6_1 + Math_fround(1.0));
       $9 = 0;
       if (!($5_1 <= Math_fround($18_1 * $18_1))) {
        break label$21
       }
       $5_1 = $13;
       __inlined_func$1592 : {
        if (!(((wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 < 2139095041 & ((wasm2js_scratch_store_f32($7_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 <= 2139095040)) {
         $5_1 = Math_fround($5_1 + $7_1);
         break __inlined_func$1592;
        }
        $8 = (wasm2js_scratch_store_f32($7_1), wasm2js_scratch_load_i32(2));
        if (($8 | 0) == 1065353216) {
         $5_1 = $1594($5_1);
         break __inlined_func$1592;
        }
        $19 = $8 >>> 30 & 2;
        $9 = (wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(2));
        $2_1 = $19 | $9 >>> 31;
        folding_inner0 : {
         label$41 : {
          $9 = $9 & 2147483647;
          label$52 : {
           if (!$9) {
            label$73 : {
             switch ($2_1 - 2 | 0) {
             case 0:
              $5_1 = Math_fround(3.1415927410125732);
              break __inlined_func$1592;
             case 1:
              break label$73;
             default:
              break label$52;
             };
            }
            $5_1 = Math_fround(-3.1415927410125732);
            break __inlined_func$1592;
           }
           $8 = $8 & 2147483647;
           if (($8 | 0) != 2139095040) {
            if (!$8 | !(($9 | 0) != 2139095040 & $9 >>> 0 <= $8 + 218103808 >>> 0)) {
             break folding_inner0
            }
            label$135 : {
             if ($19) {
              $21_1 = Math_fround(0.0);
              if ($8 >>> 0 > $9 + 218103808 >>> 0) {
               break label$135
              }
             }
             $21_1 = $1594(Math_fround(Math_abs(Math_fround($5_1 / $7_1))));
            }
            $5_1 = $21_1;
            label$15 : {
             switch ($2_1 | 0) {
             case 1:
              $5_1 = Math_fround(-$5_1);
              break __inlined_func$1592;
             case 2:
              $5_1 = Math_fround(Math_fround(3.1415927410125732) - Math_fround($5_1 + Math_fround(8.742277657347586e-08)));
              break __inlined_func$1592;
             case 0:
              break label$52;
             default:
              break label$15;
             };
            }
            $5_1 = Math_fround(Math_fround($5_1 + Math_fround(8.742277657347586e-08)) + Math_fround(-3.1415927410125732));
            break __inlined_func$1592;
           }
           if (($9 | 0) == 2139095040) {
            break label$41
           }
           $5_1 = HEAPF32[($2_1 << 2) + 56744 >> 2];
          }
          break __inlined_func$1592;
         }
         $5_1 = HEAPF32[($2_1 << 2) + 56728 >> 2];
         break __inlined_func$1592;
        }
        $5_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($5_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141403), wasm2js_scratch_load_f32());
       }
       $5_1 = Math_fround(Math_fround($5_1 / Math_fround(3.1415927410125732)) * Math_fround(.5));
       HEAPF32[$4_1 + 444 >> 2] = $5_1 < Math_fround(0.0) ? Math_fround($5_1 + Math_fround(1.0)) : $5_1;
       $9 = 1;
      }
      $18_1 = Math_fround(Math_fround(HEAPF32[$4_1 + 444 >> 2] * Math_fround(-2.0)) * Math_fround(3.1415927410125732));
      $5_1 = $1601($18_1);
      $18_1 = $1688($18_1);
      HEAPF32[$4_1 + 356 >> 2] = Math_fround($10_1 * $18_1) + Math_fround($17_1 * $5_1);
      HEAPF32[$4_1 + 352 >> 2] = Math_fround($10_1 * $5_1) - Math_fround($18_1 * $17_1);
      if (!$12($4_1 + 464 | 0, $4_1 + 456 | 0, $4_1 + 448 | 0, $4_1 + 352 | 0)) {
       $8 = $9;
       $2_1 = 0;
       break label$20;
      }
      HEAPF32[$4_1 + 356 >> 2] = Math_fround($7_1 * $18_1) + Math_fround($13 * $5_1);
      HEAPF32[$4_1 + 352 >> 2] = Math_fround($7_1 * $5_1) - Math_fround($18_1 * $13);
      if (!$12($4_1 + 464 | 0, $4_1 + 456 | 0, $4_1 + 448 | 0, $4_1 + 352 | 0)) {
       $22_1 = $4_1 + 400 | 0;
       $2_1 = $4_1 + 448 | 0;
       $8 = $4_1 + 456 | 0;
       $17_1 = HEAPF32[$8 >> 2];
       $19 = $4_1 + 464 | 0;
       $18_1 = HEAPF32[$19 >> 2];
       $5_1 = Math_fround($17_1 - $18_1);
       $21_1 = HEAPF32[$8 + 4 >> 2];
       $31_1 = HEAPF32[$19 + 4 >> 2];
       $10_1 = Math_fround($21_1 - $31_1);
       $32_1 = $4_1 + 352 | 0;
       $13 = HEAPF32[$32_1 >> 2];
       $7_1 = HEAPF32[$32_1 + 4 >> 2];
       $29_1 = Math_fround(Math_fround(Math_fround($13 - $18_1) * $5_1) + Math_fround(Math_fround($7_1 - $31_1) * $10_1));
       label$12 : {
        if ($29_1 < Math_fround(0.0)) {
         $5_1 = HEAPF32[$19 >> 2];
         $37 = HEAPF32[$19 + 4 >> 2];
         break label$12;
        }
        $26_1 = Math_fround(Math_fround($5_1 * $5_1) + Math_fround($10_1 * $10_1));
        if ($29_1 > $26_1) {
         $5_1 = HEAPF32[$8 >> 2];
         $37 = HEAPF32[$8 + 4 >> 2];
         break label$12;
        }
        $5_1 = Math_fround($18_1 + Math_fround(Math_fround($5_1 * $29_1) / $26_1));
        $37 = Math_fround($31_1 + Math_fround(Math_fround($10_1 * $29_1) / $26_1));
       }
       $10_1 = Math_fround($13 - $5_1);
       $26_1 = Math_fround($10_1 * $10_1);
       $10_1 = Math_fround($7_1 - $37);
       $40_1 = Math_fround($26_1 + Math_fround($10_1 * $10_1));
       $29_1 = HEAPF32[$2_1 >> 2];
       $26_1 = Math_fround($29_1 - $17_1);
       $38_1 = HEAPF32[$2_1 + 4 >> 2];
       $10_1 = Math_fround($38_1 - $21_1);
       $39_1 = Math_fround(Math_fround(Math_fround($13 - $17_1) * $26_1) + Math_fround(Math_fround($7_1 - $21_1) * $10_1));
       label$43 : {
        if ($39_1 < Math_fround(0.0)) {
         $10_1 = HEAPF32[$8 + 4 >> 2];
         $26_1 = HEAPF32[$8 >> 2];
         break label$43;
        }
        $30 = Math_fround(Math_fround($26_1 * $26_1) + Math_fround($10_1 * $10_1));
        if ($39_1 > $30) {
         $10_1 = HEAPF32[$2_1 + 4 >> 2];
         $26_1 = HEAPF32[$2_1 >> 2];
         break label$43;
        }
        $10_1 = Math_fround($21_1 + Math_fround(Math_fround($10_1 * $39_1) / $30));
        $26_1 = Math_fround($17_1 + Math_fround(Math_fround($26_1 * $39_1) / $30));
       }
       $17_1 = Math_fround($13 - $26_1);
       $21_1 = Math_fround($17_1 * $17_1);
       $17_1 = Math_fround($7_1 - $10_1);
       $21_1 = Math_fround($21_1 + Math_fround($17_1 * $17_1));
       $30 = $13;
       $17_1 = Math_fround($18_1 - $29_1);
       $18_1 = Math_fround(Math_fround($13 - $29_1) * $17_1);
       $13 = Math_fround($31_1 - $38_1);
       $18_1 = Math_fround($18_1 + Math_fround(Math_fround($7_1 - $38_1) * $13));
       label$74 : {
        if ($18_1 < Math_fround(0.0)) {
         $13 = HEAPF32[$2_1 + 4 >> 2];
         $17_1 = HEAPF32[$2_1 >> 2];
         break label$74;
        }
        $31_1 = Math_fround(Math_fround($17_1 * $17_1) + Math_fround($13 * $13));
        if ($18_1 > $31_1) {
         $13 = HEAPF32[$19 + 4 >> 2];
         $17_1 = HEAPF32[$19 >> 2];
         break label$74;
        }
        $13 = Math_fround($38_1 + Math_fround(Math_fround($13 * $18_1) / $31_1));
        $17_1 = Math_fround($29_1 + Math_fround(Math_fround($17_1 * $18_1) / $31_1));
       }
       $18_1 = Math_fround($30 - $17_1);
       $7_1 = Math_fround($7_1 - $13);
       $7_1 = Math_fround(Math_fround($18_1 * $18_1) + Math_fround($7_1 * $7_1));
       $7_1 = $7_1 > $21_1 ? $21_1 : $7_1;
       $7_1 = $7_1 > $40_1 ? $40_1 : $7_1;
       $2_1 = $7_1 == $21_1;
       $8 = $7_1 == $40_1;
       HEAPF32[$22_1 + 4 >> 2] = $8 ? $37 : $2_1 ? $10_1 : $13;
       HEAPF32[$22_1 >> 2] = $8 ? $5_1 : $2_1 ? $26_1 : $17_1;
       $2_1 = HEAP32[$4_1 + 404 >> 2];
       HEAP32[$4_1 + 352 >> 2] = HEAP32[$4_1 + 400 >> 2];
       HEAP32[$4_1 + 356 >> 2] = $2_1;
      }
      $2_1 = $4_1 + 352 | 0;
      $8 = $4_1 + 464 | 0;
      $5_1 = HEAPF32[$8 >> 2];
      $13 = Math_fround(HEAPF32[$2_1 >> 2] - $5_1);
      $19 = $4_1 + 456 | 0;
      $10_1 = Math_fround(HEAPF32[$19 >> 2] - $5_1);
      $22_1 = $4_1 + 448 | 0;
      $7_1 = HEAPF32[$8 + 4 >> 2];
      $17_1 = Math_fround(HEAPF32[$22_1 + 4 >> 2] - $7_1);
      $18_1 = Math_fround(HEAPF32[$19 + 4 >> 2] - $7_1);
      $21_1 = Math_fround(HEAPF32[$22_1 >> 2] - $5_1);
      $5_1 = Math_fround(Math_fround($10_1 * $17_1) - Math_fround($18_1 * $21_1));
      $8 = $4_1 + 336 | 0;
      $7_1 = Math_fround(HEAPF32[$2_1 + 4 >> 2] - $7_1);
      HEAPF32[$8 >> 2] = Math_fround(Math_fround($13 * $17_1) - Math_fround($7_1 * $21_1)) / $5_1;
      $5_1 = Math_fround(Math_fround(Math_fround($10_1 * $7_1) - Math_fround($18_1 * $13)) / $5_1);
      HEAPF32[$4_1 + 568 >> 2] = $5_1;
      HEAPF32[$4_1 + 400 >> 2] = Math_fround(Math_fround(1.0) - HEAPF32[$8 >> 2]) - $5_1;
      $5_1 = Math_fround(Math_fround(1.0) - HEAPF32[$4_1 + 336 >> 2]);
      $5_1 = $5_1 < Math_fround(9.999999747378752e-05) ? Math_fround(9.999999747378752e-05) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1;
      HEAPF32[$4_1 + 436 >> 2] = $5_1;
      $5_1 = Math_fround(HEAPF32[$4_1 + 400 >> 2] / $5_1);
      HEAPF32[$4_1 + 440 >> 2] = $5_1 < Math_fround(9.999999747378752e-05) ? Math_fround(9.999999747378752e-05) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1;
      $8 = 1;
      $2_1 = 1;
     }
     if ($15_1 & 8) {
      break label$17
     }
     $324(1958, 1);
     break label$17;
    }
    $2_1 = 0;
    $9 = 0;
    $8 = 0;
    if (!($15_1 & 33554432)) {
     break label$17
    }
    HEAPF32[$4_1 + 356 >> 2] = $14;
    HEAPF32[$4_1 + 352 >> 2] = $14;
    $573(1862, $4_1 + 352 | 0, 0);
    $2_1 = $191();
    label$24 : {
     if (!$2_1) {
      break label$24
     }
     $13 = Math_fround($14 + Math_fround(-1.0));
     $5_1 = Math_fround(Math_fround(HEAPF32[$20_1 + 228 >> 2] - HEAPF32[$4_1 + 504 >> 2]) / $13);
     HEAPF32[$4_1 + 440 >> 2] = $5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1;
     $5_1 = Math_fround(Math_fround(HEAPF32[$20_1 + 232 >> 2] - HEAPF32[$4_1 + 508 >> 2]) / $13);
     HEAPF32[$4_1 + 436 >> 2] = $5_1 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1));
     $9 = HEAP32[$20_1 + 11984 >> 2];
     $8 = HEAP32[$1_1 >> 2];
     $19 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = HEAPF32[$1_1 + 8 >> 2];
     HEAP32[$4_1 + 364 >> 2] = 0;
     HEAPF32[$4_1 + 360 >> 2] = $5_1;
     HEAP32[$4_1 + 352 >> 2] = $8;
     HEAP32[$4_1 + 356 >> 2] = $19;
     if (($31($4_1 + 352 | 0) | 0) != ($9 | 0)) {
      break label$24
     }
     HEAPF32[$4_1 + 444 >> 2] = HEAPF32[$20_1 + 11976 >> 2];
    }
    if (!($15_1 & 8)) {
     $324(1958, 1)
    }
    HEAPF32[$4_1 + 356 >> 2] = HEAPF32[$4_1 + 508 >> 2];
    HEAPF32[$4_1 + 352 >> 2] = $16_1;
    $9 = $4_1 + 352 | 0;
    $279($9);
    HEAPF32[$4_1 + 356 >> 2] = $14;
    HEAPF32[$4_1 + 352 >> 2] = $25_1;
    $573(10673, $9, 0);
    if (!$191()) {
     $9 = 0;
     $8 = $2_1;
     break label$17;
    }
    $5_1 = Math_fround(Math_fround(HEAPF32[$20_1 + 232 >> 2] - HEAPF32[$4_1 + 508 >> 2]) / Math_fround($14 + Math_fround(-1.0)));
    HEAPF32[$4_1 + 444 >> 2] = $5_1 < Math_fround(0.0) ? Math_fround(0.0) : $5_1 > Math_fround(1.0) ? Math_fround(1.0) : $5_1;
    $9 = 1;
    $8 = 1;
   }
   $5_1 = Math_fround($27_1 + $36_1);
   label$27 : {
    if (($34_1 | 0) != 65536) {
     break label$27
    }
    HEAPF32[$4_1 + 356 >> 2] = HEAPF32[$4_1 + 508 >> 2];
    HEAPF32[$4_1 + 352 >> 2] = $5_1;
    $19 = $4_1 + 352 | 0;
    $279($19);
    HEAPF32[$4_1 + 356 >> 2] = $14;
    HEAPF32[$4_1 + 352 >> 2] = $25_1;
    $573(13898, $19, 0);
    if (!$191()) {
     break label$27
    }
    $13 = Math_fround(Math_fround(HEAPF32[$20_1 + 232 >> 2] - HEAPF32[$4_1 + 508 >> 2]) / Math_fround($14 + Math_fround(-1.0)));
    HEAPF32[$1_1 + 12 >> 2] = $13 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($13 > Math_fround(1.0) ? Math_fround(1.0) : $13));
    $8 = 1;
   }
   $225();
   $22_1 = $15_1 & 256;
   if (!$22_1) {
    $276(Math_fround(0.0), HEAPF32[$20_1 + 5500 >> 2]);
    $301();
   }
   $19 = $2_1;
   $2_1 = $15_1 & 128;
   label$30 : {
    if ($2_1) {
     break label$30
    }
    $32_1 = $62($0_1);
    if (($32_1 | 0) == ($0_1 | 0)) {
     break label$30
    }
    if ($22_1) {
     $276(Math_fround(0.0), HEAPF32[$20_1 + 5500 >> 2])
    }
    $555($0_1, $32_1, 0);
   }
   label$32 : {
    if ($22_1) {
     $0_1 = $8;
     break label$32;
    }
    $224(16, 1);
    $13 = HEAPF32[$1_1 + 8 >> 2];
    $7_1 = HEAPF32[$1_1 + 4 >> 2];
    $10_1 = HEAPF32[$1_1 >> 2];
    HEAPF32[$4_1 + 364 >> 2] = $24 ? Math_fround(1.0) : HEAPF32[$1_1 + 12 >> 2];
    HEAPF32[$4_1 + 360 >> 2] = $13;
    HEAPF32[$4_1 + 356 >> 2] = $7_1;
    HEAPF32[$4_1 + 352 >> 2] = $10_1;
    if ($2_1) {
     $557(3061, 0)
    }
    $13 = Math_fround($25_1 + $25_1);
    HEAPF32[$4_1 + 420 >> 2] = $13;
    $7_1 = Math_fround($25_1 * Math_fround(3.0));
    HEAPF32[$4_1 + 416 >> 2] = $7_1;
    $0_1 = HEAP32[$4_1 + 420 >> 2];
    HEAP32[$4_1 + 232 >> 2] = HEAP32[$4_1 + 416 >> 2];
    HEAP32[$4_1 + 236 >> 2] = $0_1;
    $0_1 = $15_1 & 403570752;
    $700(3040, $4_1 + 352 | 0, $0_1, $4_1 + 232 | 0);
    if ($3) {
     $557(8356, 0);
     $10_1 = HEAPF32[$3 + 8 >> 2];
     $27_1 = HEAPF32[$3 + 4 >> 2];
     $17_1 = HEAPF32[$3 >> 2];
     $18_1 = $24 ? Math_fround(1.0) : HEAPF32[$3 + 12 >> 2];
     HEAPF32[$4_1 + 396 >> 2] = $13;
     HEAPF32[$4_1 + 392 >> 2] = $7_1;
     HEAPF32[$4_1 + 412 >> 2] = $18_1;
     HEAPF32[$4_1 + 408 >> 2] = $10_1;
     HEAPF32[$4_1 + 404 >> 2] = $27_1;
     HEAPF32[$4_1 + 400 >> 2] = $17_1;
     $2_1 = HEAP32[$4_1 + 396 >> 2];
     HEAP32[$4_1 + 224 >> 2] = HEAP32[$4_1 + 392 >> 2];
     HEAP32[$4_1 + 228 >> 2] = $2_1;
     if ($700(8345, $4_1 + 400 | 0, $0_1, $4_1 + 224 | 0)) {
      $1602($1_1, $3, $35_1);
      $0_1 = 1;
     } else {
      $0_1 = $8
     }
    } else {
     $0_1 = $8
    }
    $225();
    $275();
   }
   $3 = $0_1;
   $8 = $1_1 + 8 | 0;
   $24 = $1_1 + 4 | 0;
   label$40 : {
    if (($9 | $19) != 1) {
     break label$40
    }
    if ($23_1) {
     $33(HEAPF32[$4_1 + 444 >> 2], HEAPF32[$4_1 + 440 >> 2], HEAPF32[$4_1 + 436 >> 2], $1_1, $24, $8);
     HEAPF32[$20_1 + 11976 >> 2] = HEAPF32[$4_1 + 444 >> 2];
     HEAPF32[$20_1 + 11980 >> 2] = HEAPF32[$4_1 + 440 >> 2];
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $13 = HEAPF32[$1_1 + 8 >> 2];
     HEAP32[$4_1 + 364 >> 2] = 0;
     HEAPF32[$4_1 + 360 >> 2] = $13;
     HEAP32[$4_1 + 352 >> 2] = $0_1;
     HEAP32[$4_1 + 356 >> 2] = $2_1;
     HEAP32[$20_1 + 11984 >> 2] = $31($4_1 + 352 | 0);
     break label$40;
    }
    if (!($15_1 & 268435456)) {
     break label$40
    }
    HEAPF32[$1_1 >> 2] = HEAPF32[$4_1 + 444 >> 2];
    HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$4_1 + 440 >> 2];
    HEAPF32[$1_1 + 8 >> 2] = HEAPF32[$4_1 + 436 >> 2];
   }
   label$42 : {
    if ($15_1 & 32) {
     $0_1 = 0;
     break label$42;
    }
    $289(Math_fround(Math_fround($25_1 + (($34_1 | 0) == 65536 ? $5_1 : $16_1)) - HEAPF32[$4_1 + 504 >> 2]));
    $2_1 = $15_1 & 428736538;
    label$44 : {
     label$45 : {
      $22_1 = $15_1 & 7340032;
      if (!($22_1 ? $15_1 & 1048576 : 1)) {
       break label$45
      }
      if (!$698(13533, $1_1, $2_1 | 1048580)) {
       break label$45
      }
      $3 = 1;
      $0_1 = !(HEAP32[$20_1 + 7136 >> 2] ? HEAPU8[$20_1 + 7149 | 0] : 1);
      break label$44;
     }
     $0_1 = 0;
    }
    if (!$22_1 | $15_1 & 2097152) {
     $3 = $698(1859, $1_1, $2_1 | 2097156) | $3
    }
    if (!$22_1 | $15_1 & 4194304) {
     $3 = $698(1406, $1_1, $2_1 | 4194308) | $3
    }
    $291();
   }
   label$53 : {
    if (!$23_1 | !$0_1) {
     break label$53
    }
    $32(HEAPF32[$1_1 >> 2], HEAPF32[$1_1 + 4 >> 2], HEAPF32[$1_1 + 8 >> 2], $4_1 + 352 | 0, $4_1 + 400 | 0, $4_1 + 336 | 0);
    if (!(HEAPF32[$4_1 + 352 >> 2] <= Math_fround(0.0))) {
     break label$53
    }
    $13 = HEAPF32[$4_1 + 444 >> 2];
    if (!($13 > Math_fround(0.0))) {
     break label$53
    }
    $17_1 = $13;
    label$54 : {
     label$55 : {
      $13 = HEAPF32[$4_1 + 336 >> 2];
      if (!($13 <= Math_fround(0.0))) {
       break label$55
      }
      $7_1 = HEAPF32[$4_1 + 436 >> 2];
      if ($7_1 == $13) {
       break label$55
      }
      $13 = Math_fround($7_1 * Math_fround(.5));
      $21_1 = HEAPF32[$4_1 + 440 >> 2];
      break label$54;
     }
     if (!(HEAPF32[$4_1 + 400 >> 2] <= Math_fround(0.0))) {
      break label$53
     }
     $21_1 = Math_fround(HEAPF32[$4_1 + 440 >> 2] * Math_fround(.5));
    }
    $33($17_1, $21_1, $13, $1_1, $24, $8);
   }
   label$56 : {
    if (!$3) {
     break label$56
    }
    if ($23_1) {
     $13 = HEAPF32[$1_1 >> 2];
     HEAPF32[$4_1 + 432 >> 2] = $13;
     $7_1 = HEAPF32[$1_1 + 4 >> 2];
     HEAPF32[$4_1 + 428 >> 2] = $7_1;
     $10_1 = HEAPF32[$1_1 + 8 >> 2];
     HEAPF32[$4_1 + 424 >> 2] = $10_1;
     $32($13, $7_1, $10_1, $4_1 + 444 | 0, $4_1 + 440 | 0, $4_1 + 436 | 0);
     $0_1 = HEAP32[18392];
     $2_1 = HEAP32[$0_1 + 11984 >> 2];
     $8 = HEAP32[$1_1 >> 2];
     $23_1 = HEAP32[$1_1 + 4 >> 2];
     $13 = HEAPF32[$1_1 + 8 >> 2];
     HEAP32[$4_1 + 364 >> 2] = 0;
     HEAPF32[$4_1 + 360 >> 2] = $13;
     HEAP32[$4_1 + 352 >> 2] = $8;
     HEAP32[$4_1 + 356 >> 2] = $23_1;
     if (($31($4_1 + 352 | 0) | 0) != ($2_1 | 0)) {
      break label$56
     }
     if (!((HEAPF32[$4_1 + 444 >> 2] != Math_fround(0.0) | HEAPF32[$0_1 + 11976 >> 2] != Math_fround(1.0)) & HEAPF32[$4_1 + 440 >> 2] != Math_fround(0.0))) {
      HEAPF32[$4_1 + 444 >> 2] = HEAPF32[$0_1 + 11976 >> 2]
     }
     if (HEAPF32[$4_1 + 436 >> 2] != Math_fround(0.0)) {
      break label$56
     }
     HEAPF32[$4_1 + 440 >> 2] = HEAPF32[$0_1 + 11980 >> 2];
     break label$56;
    }
    if (!($15_1 & 268435456)) {
     break label$56
    }
    $13 = HEAPF32[$1_1 >> 2];
    HEAPF32[$4_1 + 444 >> 2] = $13;
    $7_1 = HEAPF32[$1_1 + 4 >> 2];
    HEAPF32[$4_1 + 440 >> 2] = $7_1;
    $10_1 = HEAPF32[$1_1 + 8 >> 2];
    HEAPF32[$4_1 + 436 >> 2] = $10_1;
    $33($13, $7_1, $10_1, $4_1 + 432 | 0, $4_1 + 428 | 0, $4_1 + 424 | 0);
   }
   $13 = Math_fround($33_1 | 0);
   $7_1 = HEAPF32[$20_1 + 5416 >> 2];
   $10_1 = Math_fround(Math_fround(($7_1 < Math_fround(0.0) ? Math_fround(0.0) : $7_1 > Math_fround(1.0) ? Math_fround(1.0) : $7_1) * Math_fround(255.0)) + Math_fround(.5));
   label$60 : {
    if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$10_1;
     break label$60;
    }
    $0_1 = -2147483648;
   }
   $8 = $0_1 << 24;
   $0_1 = $8 | 255;
   HEAP32[$4_1 + 376 >> 2] = $0_1;
   HEAP32[$4_1 + 372 >> 2] = $8 | 16711935;
   HEAP32[$4_1 + 368 >> 2] = $8 | 16711680;
   HEAP32[$4_1 + 364 >> 2] = $8 | 16776960;
   HEAP32[$4_1 + 360 >> 2] = $8 | 65280;
   HEAP32[$4_1 + 356 >> 2] = $8 | 65535;
   HEAP32[$4_1 + 352 >> 2] = $0_1;
   HEAPF32[$4_1 + 412 >> 2] = $7_1;
   HEAP32[$4_1 + 408 >> 2] = 1065353216;
   HEAP32[$4_1 + 400 >> 2] = 1065353216;
   HEAP32[$4_1 + 404 >> 2] = 1065353216;
   $0_1 = $4_1 + 400 | 0;
   $33(HEAPF32[$4_1 + 444 >> 2], Math_fround(1.0), Math_fround(1.0), $0_1, $4_1 + 404 | 0, $4_1 + 408 | 0);
   $24 = $31($0_1);
   HEAPF32[$4_1 + 348 >> 2] = HEAPF32[$20_1 + 5416 >> 2];
   HEAPF32[$4_1 + 344 >> 2] = HEAPF32[$4_1 + 424 >> 2];
   HEAPF32[$4_1 + 340 >> 2] = HEAPF32[$4_1 + 428 >> 2];
   HEAPF32[$4_1 + 336 >> 2] = HEAPF32[$4_1 + 432 >> 2];
   $22_1 = $31($4_1 + 336 | 0);
   HEAP32[$4_1 + 328 >> 2] = 0;
   HEAP32[$4_1 + 332 >> 2] = 0;
   $33_1 = $8 | 8421504;
   $23_1 = $8 | 16777215;
   label$62 : {
    if ($28_1) {
     $0_1 = ((Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0) ? ~~$6_1 : -2147483648) | 0) / 12 | 0;
     $45_1 = ($0_1 | 0) <= 4 ? 4 : $0_1;
     $16_1 = Math_fround($6_1 + $12_1);
     $27_1 = Math_fround($16_1 * Math_fround(.5));
     $36_1 = Math_fround(Math_fround(.5) / $6_1);
     $17_1 = Math_fround(-$36_1);
     $2_1 = 0;
     while (1) {
      $28_1 = HEAP32[$11_1 + 24 >> 2];
      $7_1 = Math_fround($2_1 | 0);
      $6_1 = Math_fround($7_1 / Math_fround(6.0));
      $6_1 = Math_fround(Math_fround(Math_fround($6_1 + $6_1) * Math_fround(3.1415927410125732)) + $17_1);
      $7_1 = Math_fround(Math_fround($7_1 + Math_fround(1.0)) / Math_fround(6.0));
      $7_1 = Math_fround(Math_fround(Math_fround($7_1 + $7_1) * Math_fround(3.1415927410125732)) + $36_1);
      $393($11_1, $4_1 + 472 | 0, $27_1, $6_1, $7_1, $45_1);
      $388($11_1, HEAP32[$11_1 + 92 >> 2], HEAP32[$11_1 + 84 >> 2], $23_1, 0, $43_1);
      HEAP32[$11_1 + 84 >> 2] = 0;
      $10_1 = $1688($6_1);
      $32_1 = HEAP32[$11_1 + 24 >> 2];
      $21_1 = Math_fround($10_1 * $12_1);
      $10_1 = HEAPF32[$4_1 + 476 >> 2];
      HEAPF32[$4_1 + 324 >> 2] = $21_1 + $10_1;
      $21_1 = Math_fround($1601($6_1) * $12_1);
      $6_1 = HEAPF32[$4_1 + 472 >> 2];
      HEAPF32[$4_1 + 320 >> 2] = $21_1 + $6_1;
      HEAPF32[$4_1 + 316 >> 2] = $10_1 + Math_fround($1688($7_1) * $12_1);
      HEAPF32[$4_1 + 312 >> 2] = $6_1 + Math_fround($1601($7_1) * $12_1);
      $0_1 = HEAP32[$4_1 + 324 >> 2];
      HEAP32[$4_1 + 216 >> 2] = HEAP32[$4_1 + 320 >> 2];
      HEAP32[$4_1 + 220 >> 2] = $0_1;
      $0_1 = HEAP32[$4_1 + 316 >> 2];
      HEAP32[$4_1 + 208 >> 2] = HEAP32[$4_1 + 312 >> 2];
      HEAP32[$4_1 + 212 >> 2] = $0_1;
      $15_1 = $4_1 + 352 | 0;
      $0_1 = HEAP32[$15_1 + ($2_1 << 2) >> 2];
      $2_1 = $2_1 + 1 | 0;
      $15_1 = HEAP32[($2_1 << 2) + $15_1 >> 2];
      if (($32_1 | 0) > ($28_1 | 0)) {
       $44_1 = HEAP32[$11_1 + 32 >> 2];
       $32_1 = $44_1 + Math_imul($32_1, 20) | 0;
       $41_1 = $4_1 + 208 | 0;
       $42_1 = $4_1 + 216 | 0;
       $18_1 = HEAPF32[$42_1 >> 2];
       $6_1 = Math_fround(HEAPF32[$41_1 >> 2] - $18_1);
       $21_1 = HEAPF32[$42_1 + 4 >> 2];
       $7_1 = Math_fround(HEAPF32[$41_1 + 4 >> 2] - $21_1);
       $31_1 = Math_fround(Math_fround(1.0) / Math_fround(Math_fround($6_1 * $6_1) + Math_fround($7_1 * $7_1)));
       $41_1 = $0_1 & 255;
       $29_1 = Math_fround(($15_1 & 255) - $41_1 | 0);
       $42_1 = $0_1 >>> 16 & 255;
       $26_1 = Math_fround(($15_1 >>> 16 & 255) - $42_1 | 0);
       $0_1 = $0_1 >>> 8 & 255;
       $38_1 = Math_fround(($15_1 >>> 8 & 255) - $0_1 | 0);
       $39_1 = Math_fround($41_1 | 0);
       $37 = Math_fround($42_1 | 0);
       $40_1 = Math_fround($0_1 | 0);
       $0_1 = Math_imul($28_1, 20) + $44_1 | 0;
       while (1) {
        $10_1 = Math_fround($31_1 * Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 >> 2] - $18_1) * $6_1) + Math_fround($7_1 * Math_fround(HEAPF32[$0_1 + 4 >> 2] - $21_1))));
        $10_1 = $10_1 < Math_fround(0.0) ? Math_fround(0.0) : $10_1 > Math_fround(1.0) ? Math_fround(1.0) : $10_1;
        $30 = Math_fround(Math_fround($38_1 * $10_1) + $40_1);
        label$3 : {
         if (Math_fround(Math_abs($30)) < Math_fround(2147483648.0)) {
          $15_1 = ~~$30;
          break label$3;
         }
         $15_1 = -2147483648;
        }
        $15_1 = $15_1 << 8;
        $30 = Math_fround(Math_fround($29_1 * $10_1) + $39_1);
        label$50 : {
         if (Math_fround(Math_abs($30)) < Math_fround(2147483648.0)) {
          $28_1 = ~~$30;
          break label$50;
         }
         $28_1 = -2147483648;
        }
        $15_1 = $15_1 | ($28_1 | HEAPU8[$0_1 + 19 | 0] << 24);
        $10_1 = Math_fround(Math_fround($26_1 * $10_1) + $37);
        label$71 : {
         if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
          $28_1 = ~~$10_1;
          break label$71;
         }
         $28_1 = -2147483648;
        }
        HEAP32[$0_1 + 16 >> 2] = $15_1 | $28_1 << 16;
        $0_1 = $0_1 + 20 | 0;
        if ($32_1 >>> 0 > $0_1 >>> 0) {
         continue
        }
        break;
       };
      }
      if (($2_1 | 0) != 6) {
       continue
      }
      break;
     };
     $6_1 = HEAPF32[$4_1 + 444 >> 2];
     $12_1 = Math_fround(Math_fround($6_1 + $6_1) * Math_fround(3.1415927410125732));
     $6_1 = $1688($12_1);
     HEAPF32[$4_1 + 340 >> 2] = Math_fround(Math_fround($16_1 * $6_1) * Math_fround(.5)) + HEAPF32[$4_1 + 476 >> 2];
     $12_1 = $1601($12_1);
     HEAPF32[$4_1 + 336 >> 2] = Math_fround(Math_fround($16_1 * $12_1) * Math_fround(.5)) + HEAPF32[$4_1 + 472 >> 2];
     $16_1 = Math_fround($43_1 * ($9 ? Math_fround(.6499999761581421) : Math_fround(.550000011920929)));
     $7_1 = Math_fround($16_1 / Math_fround(1.399999976158142));
     label$67 : {
      if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$7_1;
       break label$67;
      }
      $0_1 = -2147483648;
     }
     $2_1 = $4_1 + 336 | 0;
     $0_1 = ($0_1 | 0) >= 32 ? 32 : $0_1;
     $0_1 = ($0_1 | 0) <= 9 ? 9 : $0_1;
     $408($11_1, $2_1, $16_1, $24, $0_1);
     $407($11_1, $2_1, Math_fround($16_1 + Math_fround(1.0)), $33_1, $0_1, Math_fround(1.0));
     $407($11_1, $2_1, $16_1, $23_1, $0_1, Math_fround(1.0));
     $10_1 = HEAPF32[$4_1 + 464 >> 2];
     $27_1 = HEAPF32[$4_1 + 468 >> 2];
     $16_1 = HEAPF32[$4_1 + 476 >> 2];
     HEAPF32[$4_1 + 572 >> 2] = Math_fround(Math_fround($10_1 * $6_1) + Math_fround($12_1 * $27_1)) + $16_1;
     $7_1 = HEAPF32[$4_1 + 472 >> 2];
     HEAPF32[$4_1 + 568 >> 2] = $7_1 + Math_fround(Math_fround($10_1 * $12_1) - Math_fround($6_1 * $27_1));
     $10_1 = HEAPF32[$4_1 + 456 >> 2];
     $27_1 = HEAPF32[$4_1 + 460 >> 2];
     HEAPF32[$4_1 + 564 >> 2] = $16_1 + Math_fround(Math_fround($10_1 * $6_1) + Math_fround($12_1 * $27_1));
     HEAPF32[$4_1 + 560 >> 2] = $7_1 + Math_fround(Math_fround($10_1 * $12_1) - Math_fround($6_1 * $27_1));
     $17_1 = $16_1;
     $16_1 = HEAPF32[$4_1 + 448 >> 2];
     $10_1 = HEAPF32[$4_1 + 452 >> 2];
     HEAPF32[$4_1 + 556 >> 2] = $17_1 + Math_fround(Math_fround($16_1 * $6_1) + Math_fround($12_1 * $10_1));
     HEAPF32[$4_1 + 552 >> 2] = $7_1 + Math_fround(Math_fround($16_1 * $12_1) - Math_fround($6_1 * $10_1));
     $260($4_1 + 544 | 0);
     $383($11_1, 6, 6);
     $0_1 = HEAP32[$11_1 + 56 >> 2];
     HEAP16[$0_1 >> 1] = HEAP32[$11_1 + 40 >> 2];
     HEAP32[$11_1 + 56 >> 2] = $0_1 + 2;
     $0_1 = HEAP32[$4_1 + 572 >> 2];
     $2_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$4_1 + 568 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $0_1;
     $0_1 = HEAP32[$4_1 + 548 >> 2];
     $2_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$4_1 + 544 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $0_1;
     $0_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$0_1 + 16 >> 2] = $24;
     HEAP32[$11_1 + 52 >> 2] = $0_1 + 20;
     $2_1 = HEAP32[$11_1 + 40 >> 2] + 1 | 0;
     HEAP32[$11_1 + 40 >> 2] = $2_1;
     $9 = HEAP32[$11_1 + 56 >> 2];
     HEAP16[$9 >> 1] = $2_1;
     HEAP32[$11_1 + 56 >> 2] = $9 + 2;
     $2_1 = HEAP32[$4_1 + 564 >> 2];
     HEAP32[$0_1 + 20 >> 2] = HEAP32[$4_1 + 560 >> 2];
     HEAP32[$0_1 + 24 >> 2] = $2_1;
     $0_1 = HEAP32[$4_1 + 548 >> 2];
     $2_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$4_1 + 544 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $0_1;
     $0_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$0_1 + 16 >> 2] = $24;
     HEAP32[$11_1 + 52 >> 2] = $0_1 + 20;
     $2_1 = HEAP32[$11_1 + 40 >> 2] + 1 | 0;
     HEAP32[$11_1 + 40 >> 2] = $2_1;
     $9 = HEAP32[$11_1 + 56 >> 2];
     HEAP16[$9 >> 1] = $2_1;
     HEAP32[$11_1 + 56 >> 2] = $9 + 2;
     $2_1 = HEAP32[$4_1 + 556 >> 2];
     HEAP32[$0_1 + 20 >> 2] = HEAP32[$4_1 + 552 >> 2];
     HEAP32[$0_1 + 24 >> 2] = $2_1;
     $0_1 = HEAP32[$4_1 + 548 >> 2];
     $2_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$4_1 + 544 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $0_1;
     $0_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$0_1 + 16 >> 2] = $23_1;
     HEAP32[$11_1 + 52 >> 2] = $0_1 + 20;
     $2_1 = HEAP32[$11_1 + 40 >> 2] + 1 | 0;
     HEAP32[$11_1 + 40 >> 2] = $2_1;
     $9 = HEAP32[$11_1 + 56 >> 2];
     HEAP16[$9 >> 1] = $2_1;
     HEAP32[$11_1 + 56 >> 2] = $9 + 2;
     $2_1 = HEAP32[$4_1 + 572 >> 2];
     HEAP32[$0_1 + 20 >> 2] = HEAP32[$4_1 + 568 >> 2];
     HEAP32[$0_1 + 24 >> 2] = $2_1;
     $0_1 = HEAP32[$4_1 + 548 >> 2];
     $2_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$4_1 + 544 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $0_1;
     $0_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$0_1 + 16 >> 2] = 0;
     HEAP32[$11_1 + 52 >> 2] = $0_1 + 20;
     $2_1 = HEAP32[$11_1 + 40 >> 2] + 1 | 0;
     HEAP32[$11_1 + 40 >> 2] = $2_1;
     $9 = HEAP32[$11_1 + 56 >> 2];
     HEAP16[$9 >> 1] = $2_1;
     HEAP32[$11_1 + 56 >> 2] = $9 + 2;
     $2_1 = HEAP32[$4_1 + 564 >> 2];
     HEAP32[$0_1 + 20 >> 2] = HEAP32[$4_1 + 560 >> 2];
     HEAP32[$0_1 + 24 >> 2] = $2_1;
     $0_1 = HEAP32[$4_1 + 548 >> 2];
     $2_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$4_1 + 544 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $0_1;
     $0_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$0_1 + 16 >> 2] = $8;
     HEAP32[$11_1 + 52 >> 2] = $0_1 + 20;
     $2_1 = HEAP32[$11_1 + 40 >> 2] + 1 | 0;
     HEAP32[$11_1 + 40 >> 2] = $2_1;
     $9 = HEAP32[$11_1 + 56 >> 2];
     HEAP16[$9 >> 1] = $2_1;
     HEAP32[$11_1 + 56 >> 2] = $9 + 2;
     $2_1 = HEAP32[$4_1 + 556 >> 2];
     HEAP32[$0_1 + 20 >> 2] = HEAP32[$4_1 + 552 >> 2];
     HEAP32[$0_1 + 24 >> 2] = $2_1;
     $0_1 = HEAP32[$4_1 + 548 >> 2];
     $2_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$2_1 + 8 >> 2] = HEAP32[$4_1 + 544 >> 2];
     HEAP32[$2_1 + 12 >> 2] = $0_1;
     $0_1 = HEAP32[$11_1 + 52 >> 2];
     HEAP32[$0_1 + 16 >> 2] = 0;
     HEAP32[$11_1 + 52 >> 2] = $0_1 + 20;
     HEAP32[$11_1 + 40 >> 2] = HEAP32[$11_1 + 40 >> 2] + 1;
     $405($11_1, $4_1 + 568 | 0, $4_1 + 560 | 0, $4_1 + 552 | 0, $33_1, Math_fround(1.5));
     $12_1 = HEAPF32[$4_1 + 556 >> 2];
     $6_1 = HEAPF32[$4_1 + 440 >> 2];
     $16_1 = $6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1;
     $12_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 572 >> 2] - $12_1) * $16_1) + $12_1);
     $6_1 = Math_fround(Math_fround(1.0) - HEAPF32[$4_1 + 436 >> 2]);
     $6_1 = $6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1;
     HEAPF32[$4_1 + 332 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 564 >> 2] - $12_1) * $6_1) + $12_1;
     $12_1 = HEAPF32[$4_1 + 552 >> 2];
     $12_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 568 >> 2] - $12_1) * $16_1) + $12_1);
     HEAPF32[$4_1 + 328 >> 2] = Math_fround(Math_fround(HEAPF32[$4_1 + 560 >> 2] - $12_1) * $6_1) + $12_1;
     break label$62;
    }
    if (!($15_1 & 33554432)) {
     break label$62
    }
    HEAPF32[$4_1 + 340 >> 2] = $14 + HEAPF32[$4_1 + 508 >> 2];
    HEAPF32[$4_1 + 336 >> 2] = $14 + HEAPF32[$4_1 + 504 >> 2];
    $0_1 = $4_1 + 504 | 0;
    $2_1 = $4_1 + 336 | 0;
    $402($11_1, $0_1, $2_1, $23_1, $24, $24, $23_1);
    HEAPF32[$4_1 + 340 >> 2] = $14 + HEAPF32[$4_1 + 508 >> 2];
    HEAPF32[$4_1 + 336 >> 2] = $14 + HEAPF32[$4_1 + 504 >> 2];
    $402($11_1, $0_1, $2_1, 0, 0, $8, $8);
    HEAPF32[$4_1 + 300 >> 2] = $14 + HEAPF32[$4_1 + 508 >> 2];
    HEAPF32[$4_1 + 296 >> 2] = $14 + HEAPF32[$4_1 + 504 >> 2];
    $0_1 = HEAP32[$4_1 + 508 >> 2];
    $2_1 = HEAP32[$4_1 + 504 >> 2];
    HEAP32[$4_1 + 304 >> 2] = $2_1;
    HEAP32[$4_1 + 308 >> 2] = $0_1;
    HEAP32[$4_1 + 200 >> 2] = $2_1;
    HEAP32[$4_1 + 204 >> 2] = $0_1;
    $0_1 = HEAP32[$4_1 + 300 >> 2];
    HEAP32[$4_1 + 192 >> 2] = HEAP32[$4_1 + 296 >> 2];
    HEAP32[$4_1 + 196 >> 2] = $0_1;
    $72($4_1 + 200 | 0, $4_1 + 192 | 0, Math_fround(0.0));
    $6_1 = HEAPF32[$4_1 + 440 >> 2];
    $12_1 = Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * $14);
    $6_1 = HEAPF32[$4_1 + 504 >> 2];
    $12_1 = Math_fround(Math_fround($12_1 + $6_1) + Math_fround(.5));
    label$69 : {
     if (Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$12_1;
      break label$69;
     }
     $0_1 = -2147483648;
    }
    $12_1 = Math_fround($6_1 + Math_fround(2.0));
    $7_1 = Math_fround(Math_fround($14 + $6_1) + Math_fround(-2.0));
    $6_1 = Math_fround($0_1 | 0);
    HEAPF32[$4_1 + 328 >> 2] = $6_1 < $12_1 ? $12_1 : $6_1 > $7_1 ? $7_1 : $6_1;
    $6_1 = Math_fround(Math_fround(1.0) - HEAPF32[$4_1 + 436 >> 2]);
    $12_1 = Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(0.0) : $6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1) * $14);
    $6_1 = HEAPF32[$4_1 + 508 >> 2];
    $12_1 = Math_fround(Math_fround($12_1 + $6_1) + Math_fround(.5));
    label$712 : {
     if (Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$12_1;
      break label$712;
     }
     $0_1 = -2147483648;
    }
    $12_1 = Math_fround($6_1 + Math_fround(2.0));
    $7_1 = Math_fround(Math_fround($14 + $6_1) + Math_fround(-2.0));
    $6_1 = Math_fround($0_1 | 0);
    HEAPF32[$4_1 + 332 >> 2] = $6_1 < $12_1 ? $12_1 : $6_1 > $7_1 ? $7_1 : $6_1;
    $6_1 = Math_fround($14 / Math_fround(6.0));
    $2_1 = 0;
    while (1) {
     HEAPF32[$4_1 + 336 >> 2] = $16_1;
     $12_1 = HEAPF32[$4_1 + 508 >> 2];
     HEAPF32[$4_1 + 340 >> 2] = Math_fround(Math_fround($2_1 | 0) * $6_1) + $12_1;
     $0_1 = $2_1 + 1 | 0;
     HEAPF32[$4_1 + 572 >> 2] = $12_1 + Math_fround(Math_fround($0_1 | 0) * $6_1);
     HEAPF32[$4_1 + 568 >> 2] = $36_1;
     $9 = $4_1 + 352 | 0;
     $2_1 = HEAP32[$9 + ($2_1 << 2) >> 2];
     $8 = $2_1;
     $2_1 = HEAP32[($0_1 << 2) + $9 >> 2];
     $402($11_1, $4_1 + 336 | 0, $4_1 + 568 | 0, $8, $8, $2_1, $2_1);
     $2_1 = $0_1;
     if (($0_1 | 0) != 6) {
      continue
     }
     break;
    };
    $6_1 = HEAPF32[$4_1 + 508 >> 2];
    HEAPF32[$4_1 + 292 >> 2] = $6_1;
    HEAPF32[$4_1 + 280 >> 2] = $36_1;
    HEAPF32[$4_1 + 284 >> 2] = $14 + $6_1;
    HEAPF32[$4_1 + 288 >> 2] = $16_1;
    $0_1 = HEAP32[$4_1 + 292 >> 2];
    HEAP32[$4_1 + 184 >> 2] = HEAP32[$4_1 + 288 >> 2];
    HEAP32[$4_1 + 188 >> 2] = $0_1;
    $0_1 = HEAP32[$4_1 + 284 >> 2];
    HEAP32[$4_1 + 176 >> 2] = HEAP32[$4_1 + 280 >> 2];
    HEAP32[$4_1 + 180 >> 2] = $0_1;
    $6_1 = Math_fround(Math_fround($6_1 + Math_fround(HEAPF32[$4_1 + 444 >> 2] * $14)) + Math_fround(.5));
    label$745 : {
     if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$6_1;
      break label$745;
     }
     $0_1 = -2147483648;
    }
    $72($4_1 + 184 | 0, $4_1 + 176 | 0, Math_fround(0.0));
    $12_1 = HEAPF32[$20_1 + 5416 >> 2];
    $7_1 = Math_fround($0_1 | 0);
    HEAPF32[$4_1 + 340 >> 2] = $7_1;
    $6_1 = Math_fround($13 + Math_fround(1.0));
    $16_1 = Math_fround($16_1 + Math_fround(-1.0));
    $10_1 = Math_fround($6_1 + $16_1);
    HEAPF32[$4_1 + 336 >> 2] = $10_1 + Math_fround(1.0);
    HEAPF32[$4_1 + 572 >> 2] = $6_1;
    $27_1 = Math_fround($6_1 + Math_fround(2.0));
    HEAPF32[$4_1 + 568 >> 2] = $27_1;
    $0_1 = HEAP32[$4_1 + 340 >> 2];
    HEAP32[$4_1 + 168 >> 2] = HEAP32[$4_1 + 336 >> 2];
    HEAP32[$4_1 + 172 >> 2] = $0_1;
    $0_1 = HEAP32[$4_1 + 572 >> 2];
    HEAP32[$4_1 + 160 >> 2] = HEAP32[$4_1 + 568 >> 2];
    HEAP32[$4_1 + 164 >> 2] = $0_1;
    $2_1 = $4_1 + 168 | 0;
    $8 = $4_1 + 160 | 0;
    $12_1 = Math_fround(Math_fround(($12_1 < Math_fround(0.0) ? Math_fround(0.0) : $12_1 > Math_fround(1.0) ? Math_fround(1.0) : $12_1) * Math_fround(255.0)) + Math_fround(.5));
    label$76 : {
     if (Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$12_1;
      break label$76;
     }
     $0_1 = -2147483648;
    }
    $0_1 = $0_1 << 24;
    $480($11_1, $2_1, $8, 1, $0_1);
    HEAPF32[$4_1 + 564 >> 2] = $7_1;
    HEAPF32[$4_1 + 560 >> 2] = $10_1;
    HEAPF32[$4_1 + 556 >> 2] = $13;
    HEAPF32[$4_1 + 552 >> 2] = $6_1;
    $2_1 = HEAP32[$4_1 + 564 >> 2];
    HEAP32[$4_1 + 152 >> 2] = HEAP32[$4_1 + 560 >> 2];
    HEAP32[$4_1 + 156 >> 2] = $2_1;
    $2_1 = HEAP32[$4_1 + 556 >> 2];
    HEAP32[$4_1 + 144 >> 2] = HEAP32[$4_1 + 552 >> 2];
    HEAP32[$4_1 + 148 >> 2] = $2_1;
    $2_1 = $0_1 | 16777215;
    $480($11_1, $4_1 + 152 | 0, $4_1 + 144 | 0, 1, $2_1);
    HEAPF32[$4_1 + 548 >> 2] = $7_1;
    $12_1 = Math_fround(Math_fround(Math_fround($25_1 + Math_fround(2.0)) + $16_1) - $6_1);
    HEAPF32[$4_1 + 544 >> 2] = $12_1 + Math_fround(-1.0);
    HEAPF32[$4_1 + 540 >> 2] = $6_1;
    HEAPF32[$4_1 + 536 >> 2] = $27_1;
    $9 = HEAP32[$4_1 + 548 >> 2];
    HEAP32[$4_1 + 136 >> 2] = HEAP32[$4_1 + 544 >> 2];
    HEAP32[$4_1 + 140 >> 2] = $9;
    $9 = HEAP32[$4_1 + 540 >> 2];
    HEAP32[$4_1 + 128 >> 2] = HEAP32[$4_1 + 536 >> 2];
    HEAP32[$4_1 + 132 >> 2] = $9;
    $480($11_1, $4_1 + 136 | 0, $4_1 + 128 | 0, 0, $0_1);
    HEAPF32[$4_1 + 532 >> 2] = $7_1;
    HEAPF32[$4_1 + 528 >> 2] = $12_1;
    HEAPF32[$4_1 + 524 >> 2] = $13;
    HEAPF32[$4_1 + 520 >> 2] = $6_1;
    $0_1 = HEAP32[$4_1 + 532 >> 2];
    HEAP32[$4_1 + 120 >> 2] = HEAP32[$4_1 + 528 >> 2];
    HEAP32[$4_1 + 124 >> 2] = $0_1;
    $0_1 = HEAP32[$4_1 + 524 >> 2];
    HEAP32[$4_1 + 112 >> 2] = HEAP32[$4_1 + 520 >> 2];
    HEAP32[$4_1 + 116 >> 2] = $0_1;
    $480($11_1, $4_1 + 120 | 0, $4_1 + 112 | 0, 0, $2_1);
   }
   $0_1 = $4_1 + 328 | 0;
   $6_1 = $19 ? Math_fround(10.0) : Math_fround(6.0);
   $408($11_1, $0_1, $6_1, $22_1, 12);
   $407($11_1, $0_1, Math_fround($6_1 + Math_fround(1.0)), $33_1, 12, Math_fround(1.0));
   $407($11_1, $0_1, $6_1, $23_1, 12, Math_fround(1.0));
   if (($34_1 | 0) == 65536) {
    $6_1 = HEAPF32[$1_1 + 12 >> 2];
    $2_1 = $4_1 + 336 | 0;
    $12_1 = HEAPF32[$4_1 + 508 >> 2];
    HEAPF32[$2_1 + 12 >> 2] = $14 + $12_1;
    HEAPF32[$4_1 + 340 >> 2] = $12_1;
    HEAP32[$4_1 + 256 >> 2] = 0;
    HEAP32[$4_1 + 260 >> 2] = 0;
    HEAP32[$4_1 + 88 >> 2] = 0;
    HEAP32[$4_1 + 92 >> 2] = 0;
    HEAPF32[$4_1 + 336 >> 2] = $5_1;
    $0_1 = HEAP32[$4_1 + 340 >> 2];
    $9 = HEAP32[$4_1 + 336 >> 2];
    HEAP32[$4_1 + 272 >> 2] = $9;
    HEAP32[$4_1 + 276 >> 2] = $0_1;
    HEAP32[$4_1 + 104 >> 2] = $9;
    HEAP32[$4_1 + 108 >> 2] = $0_1;
    $12_1 = Math_fround($25_1 + $5_1);
    HEAPF32[$4_1 + 344 >> 2] = $12_1;
    $0_1 = HEAP32[$4_1 + 348 >> 2];
    $9 = HEAP32[$4_1 + 344 >> 2];
    HEAP32[$4_1 + 264 >> 2] = $9;
    HEAP32[$4_1 + 268 >> 2] = $0_1;
    HEAP32[$4_1 + 96 >> 2] = $9;
    HEAP32[$4_1 + 100 >> 2] = $0_1;
    $482($11_1, $4_1 + 104 | 0, $4_1 + 96 | 0, 0, Math_fround(Math_fround($12_1 - $5_1) * Math_fround(.5)), $4_1 + 88 | 0, Math_fround(0.0), 0);
    $0_1 = $22_1 & 16777215;
    $402($11_1, $2_1, $4_1 + 344 | 0, $22_1, $22_1, $0_1, $0_1);
    $0_1 = HEAP32[$4_1 + 340 >> 2];
    $9 = HEAP32[$4_1 + 336 >> 2];
    HEAP32[$4_1 + 248 >> 2] = $9;
    HEAP32[$4_1 + 252 >> 2] = $0_1;
    $2_1 = HEAP32[$4_1 + 348 >> 2];
    $8 = HEAP32[$4_1 + 344 >> 2];
    HEAP32[$4_1 + 240 >> 2] = $8;
    HEAP32[$4_1 + 244 >> 2] = $2_1;
    HEAP32[$4_1 + 80 >> 2] = $9;
    HEAP32[$4_1 + 84 >> 2] = $0_1;
    HEAP32[$4_1 + 72 >> 2] = $8;
    HEAP32[$4_1 + 76 >> 2] = $2_1;
    $16_1 = HEAPF32[$4_1 + 508 >> 2];
    $72($4_1 + 80 | 0, $4_1 + 72 | 0, Math_fround(0.0));
    $12_1 = HEAPF32[$20_1 + 5416 >> 2];
    $14 = Math_fround(Math_fround($16_1 + Math_fround(($6_1 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1))) * $14)) + Math_fround(.5));
    label$79 : {
     if (Math_fround(Math_abs($14)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$14;
      break label$79;
     }
     $0_1 = -2147483648;
    }
    $6_1 = Math_fround($0_1 | 0);
    HEAPF32[$4_1 + 572 >> 2] = $6_1;
    $14 = Math_fround($13 + Math_fround(1.0));
    $5_1 = Math_fround($5_1 + Math_fround(-1.0));
    $16_1 = Math_fround($14 + $5_1);
    HEAPF32[$4_1 + 568 >> 2] = $16_1 + Math_fround(1.0);
    HEAPF32[$4_1 + 564 >> 2] = $14;
    $7_1 = Math_fround($14 + Math_fround(2.0));
    HEAPF32[$4_1 + 560 >> 2] = $7_1;
    $0_1 = HEAP32[$4_1 + 572 >> 2];
    HEAP32[$4_1 + 64 >> 2] = HEAP32[$4_1 + 568 >> 2];
    HEAP32[$4_1 + 68 >> 2] = $0_1;
    $0_1 = HEAP32[$4_1 + 564 >> 2];
    HEAP32[$4_1 + 56 >> 2] = HEAP32[$4_1 + 560 >> 2];
    HEAP32[$4_1 + 60 >> 2] = $0_1;
    $2_1 = $4_1 - -64 | 0;
    $8 = $4_1 + 56 | 0;
    $12_1 = Math_fround(Math_fround(($12_1 < Math_fround(0.0) ? Math_fround(0.0) : $12_1 > Math_fround(1.0) ? Math_fround(1.0) : $12_1) * Math_fround(255.0)) + Math_fround(.5));
    label$81 : {
     if (Math_fround(Math_abs($12_1)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$12_1;
      break label$81;
     }
     $0_1 = -2147483648;
    }
    $0_1 = $0_1 << 24;
    $480($11_1, $2_1, $8, 1, $0_1);
    HEAPF32[$4_1 + 556 >> 2] = $6_1;
    HEAPF32[$4_1 + 552 >> 2] = $16_1;
    HEAPF32[$4_1 + 548 >> 2] = $13;
    HEAPF32[$4_1 + 544 >> 2] = $14;
    $2_1 = HEAP32[$4_1 + 556 >> 2];
    HEAP32[$4_1 + 48 >> 2] = HEAP32[$4_1 + 552 >> 2];
    HEAP32[$4_1 + 52 >> 2] = $2_1;
    $2_1 = HEAP32[$4_1 + 548 >> 2];
    HEAP32[$4_1 + 40 >> 2] = HEAP32[$4_1 + 544 >> 2];
    HEAP32[$4_1 + 44 >> 2] = $2_1;
    $2_1 = $0_1 | 16777215;
    $480($11_1, $4_1 + 48 | 0, $4_1 + 40 | 0, 1, $2_1);
    HEAPF32[$4_1 + 540 >> 2] = $6_1;
    $5_1 = Math_fround(Math_fround(Math_fround($25_1 + Math_fround(2.0)) + $5_1) - $14);
    HEAPF32[$4_1 + 536 >> 2] = $5_1 + Math_fround(-1.0);
    HEAPF32[$4_1 + 532 >> 2] = $14;
    HEAPF32[$4_1 + 528 >> 2] = $7_1;
    $9 = HEAP32[$4_1 + 540 >> 2];
    HEAP32[$4_1 + 32 >> 2] = HEAP32[$4_1 + 536 >> 2];
    HEAP32[$4_1 + 36 >> 2] = $9;
    $9 = HEAP32[$4_1 + 532 >> 2];
    HEAP32[$4_1 + 24 >> 2] = HEAP32[$4_1 + 528 >> 2];
    HEAP32[$4_1 + 28 >> 2] = $9;
    $480($11_1, $4_1 + 32 | 0, $4_1 + 24 | 0, 0, $0_1);
    HEAPF32[$4_1 + 524 >> 2] = $6_1;
    HEAPF32[$4_1 + 520 >> 2] = $5_1;
    HEAPF32[$4_1 + 516 >> 2] = $13;
    HEAPF32[$4_1 + 512 >> 2] = $14;
    $0_1 = HEAP32[$4_1 + 524 >> 2];
    HEAP32[$4_1 + 16 >> 2] = HEAP32[$4_1 + 520 >> 2];
    HEAP32[$4_1 + 20 >> 2] = $0_1;
    $0_1 = HEAP32[$4_1 + 516 >> 2];
    HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 512 >> 2];
    HEAP32[$4_1 + 12 >> 2] = $0_1;
    $480($11_1, $4_1 + 16 | 0, $4_1 + 8 | 0, 0, $2_1);
   }
   $275();
   if ($3) {
    $3 = $3 & ($1645($4_1 + 480 | 0, $1_1, $35_1) | 0) != 0
   }
   $9 = $3;
   if ($9) {
    $88()
   }
   $269();
  }
  global$0 = $4_1 + 576 | 0;
  return $9;
 }
 
 function $705($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = $0_1 & 7340032 ? $0_1 : $0_1 | 1048576;
  $0_1 = $0_1 & 25165824 ? $0_1 : $0_1 | 8388608;
  $0_1 = $0_1 & 100663296 ? $0_1 : $0_1 | 33554432;
  HEAP32[HEAP32[18392] + 11972 >> 2] = $0_1 & 402653184 ? $0_1 : $0_1 | 134217728;
 }
 
 function $706($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  $6_1 = HEAP32[18392];
  $5_1 = HEAP32[$6_1 + 7080 >> 2];
  HEAP8[$5_1 + 140 | 0] = 1;
  if (!HEAPU8[$5_1 + 143 | 0]) {
   $3 = $6_1 + 12800 | 0;
   $1_1 = $22($3, $1_1, $2_1);
   $3 = $707($76($5_1, $0_1), 0, $3, $1_1 + $3 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return $3;
 }
 
 function $707($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = 0, $24 = Math_fround(0);
  $4_1 = global$0 - 208 | 0;
  global$0 = $4_1;
  $7_1 = HEAP32[18392];
  $9 = HEAP32[$7_1 + 7080 >> 2];
  HEAP8[$9 + 140 | 0] = 1;
  if (!HEAPU8[$9 + 143 | 0]) {
   if ($1_1 & 1026) {
    $11_1 = HEAPF32[$7_1 + 5480 >> 2]
   } else {
    $10_1 = HEAPF32[$9 + 264 >> 2];
    $11_1 = HEAPF32[$7_1 + 5480 >> 2];
    $11_1 = $10_1 < $11_1 ? $10_1 : $11_1;
   }
   $20_1 = HEAPF32[$7_1 + 5476 >> 2];
   $6_1 = $3;
   if (!$3) {
    $6_1 = $62($2_1)
   }
   $68($4_1 + 200 | 0, $2_1, $6_1, 0, Math_fround(-1.0));
   $10_1 = HEAPF32[$9 + 252 >> 2];
   $13 = HEAPF32[$7_1 + 5480 >> 2];
   $21_1 = HEAPF32[$7_1 + 6468 >> 2];
   $24 = HEAPF32[$4_1 + 204 >> 2];
   $18_1 = $4_1 + 192 | 0;
   $3 = $18_1;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$4_1 + 184 >> 2] = 0;
   HEAP32[$4_1 + 188 >> 2] = 0;
   $22_1 = HEAPF32[$9 + ($1_1 & 4096 ? 464 : 208) >> 2];
   HEAPF32[$4_1 + 184 >> 2] = $22_1;
   $14 = HEAPF32[$9 + 212 >> 2];
   HEAPF32[$4_1 + 188 >> 2] = $14;
   $17_1 = HEAPF32[$9 + 472 >> 2];
   $13 = Math_fround($21_1 + Math_fround($13 + $13));
   $10_1 = $10_1 < $13 ? $10_1 : $13;
   $13 = Math_fround($24 + Math_fround($11_1 + $11_1));
   $21_1 = $10_1 >= $13 ? $10_1 : $13;
   HEAPF32[$4_1 + 196 >> 2] = $14 + $21_1;
   HEAPF32[$3 >> 2] = $17_1;
   $10_1 = Math_fround(2.0);
   $19 = $1_1 & 2;
   if ($19) {
    $10_1 = Math_fround(HEAPF32[$9 + 60 >> 2] * Math_fround(.5));
    label$6 : {
     if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$10_1;
      break label$6;
     }
     $3 = -2147483648;
    }
    HEAPF32[$4_1 + 192 >> 2] = $17_1 + Math_fround($3 | 0);
    $10_1 = Math_fround($10_1 + Math_fround(-1.0));
    label$8 : {
     if (Math_fround(Math_abs($10_1)) < Math_fround(2147483648.0)) {
      $3 = ~~$10_1;
      break label$8;
     }
     $3 = -2147483648;
    }
    HEAPF32[$4_1 + 184 >> 2] = $22_1 - Math_fround($3 | 0);
    $10_1 = Math_fround(3.0);
   }
   $13 = HEAPF32[$7_1 + 6468 >> 2];
   $17_1 = HEAPF32[$4_1 + 200 >> 2];
   $24 = HEAPF32[$9 + 208 >> 2];
   $22_1 = $14;
   $14 = HEAPF32[$9 + 264 >> 2];
   HEAPF32[$4_1 + 180 >> 2] = $22_1 + ($11_1 >= $14 ? $11_1 : $14);
   $10_1 = Math_fround($13 + Math_fround($20_1 * $10_1));
   HEAPF32[$4_1 + 176 >> 2] = $24 + $10_1;
   HEAPF32[$4_1 + 164 >> 2] = $21_1;
   $14 = $13;
   $13 = Math_fround($20_1 + $20_1);
   $14 = Math_fround($14 + ($17_1 > Math_fround(0.0) ? Math_fround($17_1 + $13) : Math_fround(0.0)));
   HEAPF32[$4_1 + 160 >> 2] = $14;
   $3 = $4_1 + 160 | 0;
   $212($3, $11_1);
   $8 = HEAP32[$18_1 + 4 >> 2];
   $3 = $3 + 8 | 0;
   HEAP32[$3 >> 2] = HEAP32[$18_1 >> 2];
   HEAP32[$3 + 4 >> 2] = $8;
   $3 = HEAP32[$4_1 + 188 >> 2];
   HEAP32[$4_1 + 160 >> 2] = HEAP32[$4_1 + 184 >> 2];
   HEAP32[$4_1 + 164 >> 2] = $3;
   if (!($1_1 & 6146)) {
    $11_1 = HEAPF32[$7_1 + 5492 >> 2];
    HEAPF32[$4_1 + 168 >> 2] = Math_fround($11_1 + $11_1) + Math_fround($14 + HEAPF32[$4_1 + 184 >> 2]);
   }
   if ($1_1 & 256) {
    $3 = 1
   } else {
    $3 = HEAP32[18392];
    $5_1 = HEAP32[$3 + 7080 >> 2];
    $8 = HEAP32[$5_1 + 364 >> 2];
    label$2 : {
     if (HEAPU8[$3 + 7220 | 0] & 2) {
      if (HEAP8[$3 + 7232 | 0] & 1) {
       $12_1 = $8;
       $8 = HEAPU8[$3 + 7236 | 0];
       $36($12_1, $0_1, $8);
       $8 = ($8 | 0) != 0;
       break label$2;
      }
      $15_1 = $34($8, $0_1, -1);
      if (($15_1 | 0) == -1) {
       $12_1 = $8;
       $8 = HEAPU8[$3 + 7236 | 0];
       $36($12_1, $0_1, $8);
       $8 = ($8 | 0) != 0;
       break label$2;
      }
      $8 = ($15_1 | 0) != 0;
      break label$2;
     }
     $8 = ($34($8, $0_1, $1_1 >>> 5 & 1) | 0) != 0;
    }
    __inlined_func$710 : {
     if ($1_1 & 16) {
      break __inlined_func$710
     }
     if (!HEAPU8[$3 + 12196 | 0]) {
      break __inlined_func$710
     }
     $8 = HEAP32[$3 + 12240 >> 2] > (HEAP32[$5_1 + 344 >> 2] - HEAP32[$3 + 12236 >> 2] | 0) | $8;
    }
    $3 = $8;
   }
   if (!(!$3 | ($1_1 & 8200) != 8192 | HEAPU8[$7_1 + 7568 | 0])) {
    $8 = $9 + 348 | 0;
    HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 1 << HEAP32[$9 + 344 >> 2];
   }
   $8 = $6_1;
   $6_1 = $213($4_1 + 160 | 0, $0_1, 0, 0);
   $5_1 = $7_1 + 7248 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 2;
   $5_1 = HEAP32[$4_1 + 188 >> 2];
   $15_1 = $7_1 + 7284 | 0;
   HEAP32[$15_1 >> 2] = HEAP32[$4_1 + 184 >> 2];
   HEAP32[$15_1 + 4 >> 2] = $5_1;
   $5_1 = $4_1 + 192 | 0;
   $15_1 = HEAP32[$5_1 + 4 >> 2];
   $16_1 = $7_1 + 7292 | 0;
   HEAP32[$16_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$16_1 + 4 >> 2] = $15_1;
   label$12 : {
    if (!$6_1) {
     if ($3 ^ 1 | ($1_1 & 8) >>> 3) {
      break label$12
     }
     $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
     $287(Math_fround(0.0));
     $1_1 = $1_1 + 344 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
     $267($0_1);
     break label$12;
    }
    $16_1 = $1_1 & 4;
    $6_1 = $16_1 << 10;
    $15_1 = $1_1 & 256;
    $5_1 = $15_1 ? $6_1 : $6_1 | 512;
    $6_1 = 0;
    $11_1 = HEAPF32[$7_1 + 228 >> 2];
    $14 = Math_fround(HEAPF32[$4_1 + 176 >> 2] - $10_1);
    $17_1 = HEAPF32[$7_1 + 5516 >> 2];
    if ($11_1 >= Math_fround($14 - $17_1)) {
     $6_1 = $11_1 < Math_fround($17_1 + Math_fround($14 + Math_fround($13 + HEAPF32[$7_1 + 6468 >> 2])))
    }
    $12_1 = $5_1;
    $5_1 = $5_1 | 65536;
    $23_1 = ($9 | 0) == HEAP32[$7_1 + 7084 >> 2] ? $12_1 : $5_1;
    $12_1 = $5_1;
    $5_1 = $6_1;
    $6_1 = $569($4_1 + 160 | 0, $0_1, $4_1 + 159 | 0, $4_1 + 158 | 0, ($5_1 ? $23_1 : $12_1) | ($5_1 ? 16 : $1_1 & 64 ? 288 : 32));
    label$16 : {
     if ($15_1) {
      break label$16
     }
     $12_1 = 0;
     label$19 : {
      if (!$6_1) {
       break label$19
      }
      if (($0_1 | 0) != HEAP32[$7_1 + 7988 >> 2]) {
       label$21 : {
        if ($1_1 & 192) {
         $6_1 = 0;
         if (HEAP32[$7_1 + 7520 >> 2] != ($0_1 | 0)) {
          break label$21
         }
        }
        $6_1 = 1;
       }
       $6_1 = $1_1 & 128 ? ($5_1 ? HEAPU8[$7_1 + 7571 | 0] ^ 1 : 0) & 1 | $6_1 : $6_1;
       $12_1 = $6_1;
       if (!($1_1 & 64)) {
        break label$19
       }
       $12_1 = HEAPU16[$7_1 + 1002 >> 1] == 2 | ($6_1 | 0) != 0;
       break label$19;
      }
      $12_1 = $6_1 & ($3 ^ 1);
     }
     $6_1 = $12_1;
     if (!($3 ^ 1 | HEAP32[$7_1 + 7612 >> 2] != 0 | ($0_1 | 0) != HEAP32[$7_1 + 7512 >> 2])) {
      $203();
      $6_1 = 1;
     }
     label$17 : {
      if (!(HEAP32[$7_1 + 7612 >> 2] != 1 | $3 | HEAP32[$7_1 + 7512 >> 2] != ($0_1 | 0))) {
       $203();
       break label$17;
      }
      if ($6_1) {
       break label$17
      }
      break label$16;
     }
     $3 = $3 ^ 1;
     $36(HEAP32[$9 + 364 >> 2], $0_1, $3);
     HEAP32[$7_1 + 7248 >> 2] = HEAP32[$7_1 + 7248 >> 2] | 16;
    }
    if ($16_1) {
     $202()
    }
    $6_1 = $51(0, Math_fround(1.0));
    label$30 : {
     if ($19) {
      $16_1 = $51(HEAPU8[$4_1 + 159 | 0] ? (HEAPU8[$4_1 + 158 | 0] ? 26 : 25) : 24, Math_fround(1.0));
      $5_1 = HEAP32[$4_1 + 188 >> 2];
      $12_1 = HEAP32[$4_1 + 184 >> 2];
      HEAP32[$4_1 + 144 >> 2] = $12_1;
      HEAP32[$4_1 + 148 >> 2] = $5_1;
      $19 = HEAP32[$4_1 + 196 >> 2];
      $23_1 = HEAP32[$4_1 + 192 >> 2];
      HEAP32[$4_1 + 136 >> 2] = $23_1;
      HEAP32[$4_1 + 140 >> 2] = $19;
      $11_1 = HEAPF32[$7_1 + 5484 >> 2];
      HEAP32[$4_1 + 64 >> 2] = $12_1;
      HEAP32[$4_1 + 68 >> 2] = $5_1;
      HEAP32[$4_1 + 56 >> 2] = $23_1;
      HEAP32[$4_1 + 60 >> 2] = $19;
      $71($4_1 - -64 | 0, $4_1 + 56 | 0, $16_1, 1, $11_1);
      $73($4_1 + 184 | 0, $0_1, 2);
      label$32 : {
       if ($1_1 & 512) {
        $5_1 = HEAP32[$9 + 580 >> 2];
        $11_1 = HEAPF32[$7_1 + 6468 >> 2];
        HEAPF32[$4_1 + 128 >> 2] = HEAPF32[$4_1 + 176 >> 2] + Math_fround($10_1 * Math_fround(-.6000000238418579));
        HEAPF32[$4_1 + 132 >> 2] = Math_fround($11_1 * Math_fround(.5)) + HEAPF32[$4_1 + 180 >> 2];
        $9 = HEAP32[$4_1 + 132 >> 2];
        HEAP32[$4_1 + 48 >> 2] = HEAP32[$4_1 + 128 >> 2];
        HEAP32[$4_1 + 52 >> 2] = $9;
        $477($5_1, $4_1 + 48 | 0, $6_1);
        break label$32;
       }
       if (!$15_1) {
        $5_1 = HEAP32[$9 + 580 >> 2];
        HEAPF32[$4_1 + 124 >> 2] = HEAPF32[$4_1 + 180 >> 2];
        HEAPF32[$4_1 + 120 >> 2] = $20_1 + Math_fround(HEAPF32[$4_1 + 176 >> 2] - $10_1);
        $9 = HEAP32[$4_1 + 124 >> 2];
        HEAP32[$4_1 + 40 >> 2] = HEAP32[$4_1 + 120 >> 2];
        HEAP32[$4_1 + 44 >> 2] = $9;
        $476($5_1, $4_1 + 40 | 0, $6_1, $3 ? 3 : 1, Math_fround(1.0));
        break label$32;
       }
       HEAPF32[$4_1 + 176 >> 2] = HEAPF32[$4_1 + 176 >> 2] - $10_1;
      }
      if ($1_1 & 1048576) {
       HEAPF32[$4_1 + 192 >> 2] = HEAPF32[$4_1 + 192 >> 2] - Math_fround(HEAPF32[$7_1 + 6468 >> 2] + HEAPF32[$7_1 + 5476 >> 2])
      }
      if (HEAPU8[$7_1 + 12196 | 0]) {
       $341(18920, 18920)
      }
      HEAP32[$4_1 + 112 >> 2] = 0;
      HEAP32[$4_1 + 116 >> 2] = 0;
      $69($4_1 + 176 | 0, $18_1, $2_1, $8, $4_1 + 200 | 0, $4_1 + 112 | 0, 0);
      break label$30;
     }
     $5_1 = HEAPU8[$4_1 + 159 | 0];
     if ($5_1 | $1_1 & 1) {
      $19 = $51($5_1 ? (HEAPU8[$4_1 + 158 | 0] ? 26 : 25) : 24, Math_fround(1.0));
      $5_1 = HEAP32[$4_1 + 188 >> 2];
      $16_1 = HEAP32[$4_1 + 184 >> 2];
      HEAP32[$4_1 + 104 >> 2] = $16_1;
      HEAP32[$4_1 + 108 >> 2] = $5_1;
      $18_1 = HEAP32[$4_1 + 196 >> 2];
      $12_1 = HEAP32[$4_1 + 192 >> 2];
      HEAP32[$4_1 + 96 >> 2] = $12_1;
      HEAP32[$4_1 + 100 >> 2] = $18_1;
      HEAP32[$4_1 + 32 >> 2] = $16_1;
      HEAP32[$4_1 + 36 >> 2] = $5_1;
      HEAP32[$4_1 + 24 >> 2] = $12_1;
      HEAP32[$4_1 + 28 >> 2] = $18_1;
      $71($4_1 + 32 | 0, $4_1 + 24 | 0, $19, 0, Math_fround(0.0));
     }
     $73($4_1 + 184 | 0, $0_1, 2);
     label$39 : {
      if ($1_1 & 512) {
       $5_1 = HEAP32[$9 + 580 >> 2];
       $11_1 = HEAPF32[$7_1 + 6468 >> 2];
       HEAPF32[$4_1 + 88 >> 2] = HEAPF32[$4_1 + 176 >> 2] - Math_fround($10_1 * Math_fround(.5));
       HEAPF32[$4_1 + 92 >> 2] = Math_fround($11_1 * Math_fround(.5)) + HEAPF32[$4_1 + 180 >> 2];
       $9 = HEAP32[$4_1 + 92 >> 2];
       HEAP32[$4_1 + 16 >> 2] = HEAP32[$4_1 + 88 >> 2];
       HEAP32[$4_1 + 20 >> 2] = $9;
       $477($5_1, $4_1 + 16 | 0, $6_1);
       break label$39;
      }
      if ($15_1) {
       break label$39
      }
      $5_1 = HEAP32[$9 + 580 >> 2];
      $11_1 = HEAPF32[$7_1 + 6468 >> 2];
      HEAPF32[$4_1 + 80 >> 2] = $20_1 + Math_fround(HEAPF32[$4_1 + 176 >> 2] - $10_1);
      HEAPF32[$4_1 + 84 >> 2] = Math_fround($11_1 * Math_fround(.15000000596046448)) + HEAPF32[$4_1 + 180 >> 2];
      $9 = HEAP32[$4_1 + 84 >> 2];
      HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 80 >> 2];
      HEAP32[$4_1 + 12 >> 2] = $9;
      $476($5_1, $4_1 + 8 | 0, $6_1, $3 ? 3 : 1, Math_fround(.699999988079071));
     }
     if (HEAPU8[$7_1 + 12196 | 0]) {
      $341(16149, 0)
     }
     $6_1 = HEAP32[$4_1 + 180 >> 2];
     $5_1 = HEAP32[$4_1 + 176 >> 2];
     HEAP32[$4_1 + 72 >> 2] = $5_1;
     HEAP32[$4_1 + 76 >> 2] = $6_1;
     HEAP32[$4_1 >> 2] = $5_1;
     HEAP32[$4_1 + 4 >> 2] = $6_1;
     $63($4_1, $2_1, $8, 0);
    }
    if (!($3 ^ 1 | ($1_1 & 8) >>> 3)) {
     $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
     $287(Math_fround(0.0));
     $1_1 = $1_1 + 344 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
     $267($0_1);
    }
   }
   $6_1 = $3;
  }
  global$0 = $4_1 + 208 | 0;
  return $6_1;
 }
 
 function $708($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  $6_1 = HEAP32[18392];
  $5_1 = HEAP32[$6_1 + 7080 >> 2];
  HEAP8[$5_1 + 140 | 0] = 1;
  if (!HEAPU8[$5_1 + 143 | 0]) {
   $3 = $6_1 + 12800 | 0;
   $1_1 = $22($3, $1_1, $2_1);
   $3 = $707($80($5_1, $0_1), 0, $3, $1_1 + $3 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return $3;
 }
 
 function $709($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  if (!HEAPU8[$1_1 + 143 | 0]) {
   $2_1 = $707($76($1_1, $0_1), 0, $0_1, 0)
  }
  return $2_1;
 }
 
 function $712($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $3;
  $7_1 = HEAP32[18392];
  $6_1 = HEAP32[$7_1 + 7080 >> 2];
  HEAP8[$6_1 + 140 | 0] = 1;
  if (!HEAPU8[$6_1 + 143 | 0]) {
   $4_1 = $7_1 + 12800 | 0;
   $2_1 = $22($4_1, $2_1, $3);
   $4_1 = $707($76($6_1, $0_1), $1_1, $4_1, $2_1 + $4_1 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  return $4_1;
 }
 
 function $716() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[18392];
  $0_1 = HEAP32[$1_1 + 7080 >> 2];
  $288(Math_fround(0.0));
  $4_1 = $0_1 + 344 | 0;
  $3 = HEAP32[$4_1 >> 2] - 1 | 0;
  HEAP32[$4_1 >> 2] = $3;
  $3 = 1 << $3;
  label$1 : {
   if (HEAP32[$1_1 + 7612 >> 2] | ($0_1 | 0) != HEAP32[$1_1 + 7508 >> 2]) {
    break label$1
   }
   if (!$331() | !HEAPU8[$1_1 + 7568 | 0] | !($3 & HEAP32[$0_1 + 348 >> 2])) {
    break label$1
   }
   $4_1 = HEAP32[(HEAP32[$0_1 + 204 >> 2] + (HEAP32[$0_1 + 196 >> 2] << 2) | 0) - 4 >> 2];
   $1_1 = HEAP32[$1_1 + 7564 >> 2];
   $5_1 = $2_1 + 8 | 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   $329($4_1, $1_1, 0, $2_1);
   $203();
  }
  $0_1 = $0_1 + 348 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] & $3 - 1;
  $269();
  global$0 = $2_1 + 16 | 0;
 }
 
 function $717() {
  var $0_1 = 0, $1_1 = Math_fround(0);
  $0_1 = HEAP32[18392];
  $1_1 = HEAPF32[$0_1 + 5476 >> 2];
  return Math_fround(Math_fround(Math_fround($1_1 + $1_1) + HEAPF32[$0_1 + 6468 >> 2]));
 }
 
 function $718($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[18392];
  if (!HEAPU8[HEAP32[$2_1 + 7080 >> 2] + 143 | 0]) {
   HEAP8[$2_1 + 7236 | 0] = $0_1;
   HEAP32[$2_1 + 7220 >> 2] = HEAP32[$2_1 + 7220 >> 2] | 2;
   HEAP32[$2_1 + 7232 >> 2] = $1_1 >>> 0 <= 1 ? 1 : $1_1;
  }
 }
 
 function $722($0_1, $1_1) {
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $2_1 = global$0 - 80 | 0;
  global$0 = $2_1;
  $8 = HEAP32[18392];
  $7_1 = HEAP32[$8 + 7080 >> 2];
  HEAP8[$7_1 + 140 | 0] = 1;
  if (!HEAPU8[$7_1 + 143 | 0]) {
   $12_1 = $270($0_1);
   $68($2_1 + 72 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$2_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 68 >> 2] = $4_1;
   $5_1 = $292();
   $6_1 = $295();
   $3 = HEAPF32[$8 + 5480 >> 2];
   $1_1 = HEAP32[$2_1 + 68 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[$2_1 + 64 >> 2];
   HEAP32[$2_1 + 12 >> 2] = $1_1;
   $293($2_1 + 48 | 0, $2_1 + 8 | 0, $5_1, Math_fround(Math_fround($6_1 * Math_fround(7.25)) + Math_fround($3 + $3)));
   $3 = HEAPF32[$2_1 + 52 >> 2];
   label$2 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $4_1 = ~~$3;
     break label$2;
    }
    $4_1 = -2147483648;
   }
   $3 = HEAPF32[$2_1 + 48 >> 2];
   $5_1 = HEAPF32[$7_1 + 208 >> 2];
   $1_1 = HEAP32[$7_1 + 208 >> 2];
   $10_1 = HEAP32[$7_1 + 212 >> 2];
   $6_1 = Math_fround($4_1 | 0);
   $9 = HEAPF32[$2_1 + 76 >> 2];
   HEAPF32[$2_1 + 60 >> 2] = ($6_1 >= $9 ? $6_1 : $9) + HEAPF32[$7_1 + 212 >> 2];
   HEAP32[$2_1 + 48 >> 2] = $1_1;
   HEAP32[$2_1 + 52 >> 2] = $10_1;
   if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
    $4_1 = ~~$3
   } else {
    $4_1 = -2147483648
   }
   HEAPF32[$2_1 + 56 >> 2] = $5_1 + Math_fround($4_1 | 0);
   $3 = Math_fround(0.0);
   $5_1 = HEAPF32[$2_1 + 72 >> 2];
   if ($5_1 > Math_fround(0.0)) {
    $3 = Math_fround($5_1 + HEAPF32[$8 + 5500 >> 2])
   }
   $4_1 = $2_1 + 32 | 0;
   $11_1 = $4_1 + 12 | 0;
   HEAPF32[$11_1 >> 2] = HEAPF32[$2_1 + 60 >> 2] + Math_fround(0.0);
   HEAP32[$2_1 + 32 >> 2] = $1_1;
   HEAP32[$2_1 + 36 >> 2] = $10_1;
   HEAPF32[$2_1 + 40 >> 2] = $3 + HEAPF32[$2_1 + 56 >> 2];
   HEAP32[$8 + 7220 >> 2] = 0;
   $4_1 = $273($4_1, $2_1 + 40 | 0);
   label$7 : {
    if (!$4_1) {
     HEAPF32[$2_1 + 24 >> 2] = HEAPF32[$2_1 + 40 >> 2] - HEAPF32[$2_1 + 32 >> 2];
     HEAPF32[$2_1 + 28 >> 2] = HEAPF32[$11_1 >> 2] - HEAPF32[$2_1 + 36 >> 2];
     $212($2_1 + 24 | 0, HEAPF32[$8 + 5480 >> 2]);
     $213($2_1 + 32 | 0, 0, $2_1 + 48 | 0, 0);
     break label$7;
    }
    $301();
    if (HEAPF32[$2_1 + 72 >> 2] > Math_fround(0.0)) {
     $3 = HEAPF32[$8 + 5480 >> 2];
     $5_1 = Math_fround(HEAPF32[$2_1 + 56 >> 2] + HEAPF32[$8 + 5500 >> 2]);
     HEAPF32[$2_1 + 16 >> 2] = $5_1;
     $6_1 = Math_fround($3 + HEAPF32[$2_1 + 52 >> 2]);
     HEAPF32[$2_1 + 20 >> 2] = $6_1;
     $1_1 = HEAP32[$2_1 + 20 >> 2];
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 + 16 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $63($2_1, $0_1, 0, 1);
     $9 = HEAPF32[$2_1 + 72 >> 2];
     $0_1 = $7_1 + 236 | 0;
     $3 = HEAPF32[$0_1 >> 2];
     $6_1 = Math_fround($6_1 + HEAPF32[$2_1 + 76 >> 2]);
     HEAPF32[$0_1 >> 2] = $3 >= $6_1 ? $3 : $6_1;
     $0_1 = $7_1 + 232 | 0;
     $3 = HEAPF32[$0_1 >> 2];
     $5_1 = Math_fround($5_1 + $9);
     HEAPF32[$0_1 >> 2] = $3 >= $5_1 ? $3 : $5_1;
    }
    HEAPF32[$2_1 + 24 >> 2] = HEAPF32[$2_1 + 56 >> 2] - HEAPF32[$2_1 + 48 >> 2];
    HEAPF32[$2_1 + 28 >> 2] = HEAPF32[$2_1 + 60 >> 2] - HEAPF32[$2_1 + 52 >> 2];
    $216($12_1, $2_1 + 24 | 0, 0);
   }
  }
  global$0 = $2_1 + 80 | 0;
  return $4_1;
 }
 
 function $723() {
  $211();
  $275();
 }
 
 function $724($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[18392];
  $8 = $295();
  $7_1 = HEAPF32[$6_1 + 5480 >> 2];
  HEAP32[$5_1 + 40 >> 2] = 0;
  $7_1 = Math_fround(Math_fround($8 * Math_fround(Math_fround((($4_1 | 0) < 0 ? (($3 | 0) >= 7 ? 7 : $3) : $4_1) | 0) + Math_fround(.25))) + Math_fround($7_1 + $7_1));
  label$1 : {
   if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
    $4_1 = ~~$7_1;
    break label$1;
   }
   $4_1 = -2147483648;
  }
  HEAPF32[$5_1 + 44 >> 2] = $4_1 | 0;
  $4_1 = 0;
  if ($722($0_1, $5_1 + 40 | 0)) {
   $6_1 = $42($5_1 + 16 | 0);
   $46($6_1, $3, $295());
   if ($48($6_1)) {
    $3 = 0;
    while (1) {
     $4_1 = $3;
     $3 = HEAP32[$6_1 >> 2];
     if (($3 | 0) < HEAP32[$6_1 + 4 >> 2]) {
      while (1) {
       $0_1 = $4_1;
       if (!(FUNCTION_TABLE[$2_1 | 0](0, $3, $5_1 + 12 | 0) | 0)) {
        HEAP32[$5_1 + 12 >> 2] = 17692
       }
       $266($3);
       $4_1 = HEAP32[$1_1 >> 2];
       $9 = HEAP32[$5_1 + 12 >> 2];
       HEAP32[$5_1 + 4 >> 2] = 0;
       HEAP32[$5_1 + 8 >> 2] = 0;
       if ($601($9, ($3 | 0) == ($4_1 | 0), 0, $5_1 + 4 | 0)) {
        HEAP32[$1_1 >> 2] = $3;
        $0_1 = 1;
       }
       if (($3 | 0) == ($4_1 | 0)) {
        $263()
       }
       $269();
       $4_1 = $0_1;
       $3 = $3 + 1 | 0;
       if (($3 | 0) < HEAP32[$6_1 + 4 >> 2]) {
        continue
       }
       break;
      }
     }
     $3 = $4_1;
     if ($48($6_1)) {
      continue
     }
     break;
    };
   }
   $211();
   $275();
   if ($4_1 & 1) {
    $88()
   }
   $43($6_1);
  }
  global$0 = $5_1 + 48 | 0;
  return $4_1 & 1;
 }
 
 function $725($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = Math_fround(0), $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = Math_fround(0), $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0);
  $9 = global$0 - 160 | 0;
  global$0 = $9;
  $17_1 = HEAP32[18392];
  $18_1 = HEAP32[$17_1 + 7080 >> 2];
  HEAP8[$18_1 + 140 | 0] = 1;
  if (!HEAPU8[$18_1 + 143 | 0]) {
   $19 = $76($18_1, $1_1);
   $68($9 + 152 | 0, $1_1, 0, 1, Math_fround(-1.0));
   if (HEAPF32[$8 >> 2] == Math_fround(0.0)) {
    HEAPF32[$8 >> 2] = $292()
   }
   if (HEAPF32[$8 + 4 >> 2] == Math_fround(0.0)) {
    $11_1 = HEAPF32[$17_1 + 5480 >> 2];
    HEAPF32[$8 + 4 >> 2] = Math_fround($11_1 + $11_1) + HEAPF32[$9 + 156 >> 2];
   }
   $10_1 = HEAP32[$18_1 + 212 >> 2];
   $21_1 = HEAP32[$18_1 + 208 >> 2];
   $13 = HEAPF32[$8 >> 2];
   $11_1 = HEAPF32[$18_1 + 208 >> 2];
   $20_1 = Math_fround(HEAPF32[$18_1 + 212 >> 2] + HEAPF32[$8 + 4 >> 2]);
   HEAPF32[$9 + 148 >> 2] = $20_1;
   $15_1 = Math_fround($11_1 + $13);
   HEAPF32[$9 + 144 >> 2] = $15_1;
   HEAP32[$9 + 136 >> 2] = $21_1;
   HEAP32[$9 + 140 >> 2] = $10_1;
   $11_1 = HEAPF32[$9 + 152 >> 2];
   if ($11_1 > Math_fround(0.0)) {
    $12_1 = Math_fround($11_1 + HEAPF32[$17_1 + 5500 >> 2])
   }
   $8 = $17_1 + 5480 | 0;
   $16_1 = HEAPF32[$8 >> 2];
   $23_1 = HEAPF32[$17_1 + 5476 >> 2];
   $24 = HEAPF32[$9 + 140 >> 2];
   $25_1 = HEAPF32[$9 + 136 >> 2];
   $10_1 = $9 + 120 | 0;
   HEAPF32[$10_1 + 12 >> 2] = $20_1 + Math_fround(0.0);
   $21_1 = HEAP32[$9 + 140 >> 2];
   HEAP32[$9 + 120 >> 2] = HEAP32[$9 + 136 >> 2];
   HEAP32[$9 + 124 >> 2] = $21_1;
   HEAPF32[$9 + 128 >> 2] = $15_1 + $12_1;
   $277($10_1, HEAPF32[$8 >> 2]);
   if ($213($10_1, 0, $9 + 136 | 0, 0)) {
    $19 = $91($9 + 136 | 0, $19);
    label$6 : {
     if (!($6_1 == Math_fround(3402823466385288598117041.0e14) | $7_1 == Math_fround(3402823466385288598117041.0e14))) {
      $11_1 = $6_1;
      $6_1 = $7_1;
      break label$6;
     }
     label$8 : {
      if (($3 | 0) <= 0) {
       $12_1 = Math_fround(-3402823466385288598117041.0e14);
       $11_1 = Math_fround(3402823466385288598117041.0e14);
       break label$8;
      }
      $11_1 = Math_fround(3402823466385288598117041.0e14);
      $12_1 = Math_fround(-3402823466385288598117041.0e14);
      $8 = 0;
      while (1) {
       $14 = Math_fround(FUNCTION_TABLE[$2_1 | 0](0, $8));
       $10_1 = $14 != $14;
       $12_1 = $10_1 ? $12_1 : $12_1 >= $14 ? $12_1 : $14;
       $11_1 = $10_1 ? $11_1 : $11_1 < $14 ? $11_1 : $14;
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($3 | 0)) {
        continue
       }
       break;
      };
     }
     $11_1 = $6_1 == Math_fround(3402823466385288598117041.0e14) ? $11_1 : $6_1;
     $6_1 = $7_1 == Math_fround(3402823466385288598117041.0e14) ? $12_1 : $7_1;
    }
    $14 = Math_fround($24 + $16_1);
    $8 = HEAP32[$9 + 140 >> 2];
    HEAP32[$9 + 112 >> 2] = HEAP32[$9 + 136 >> 2];
    HEAP32[$9 + 116 >> 2] = $8;
    $8 = HEAP32[$9 + 148 >> 2];
    HEAP32[$9 + 104 >> 2] = HEAP32[$9 + 144 >> 2];
    HEAP32[$9 + 108 >> 2] = $8;
    $8 = $51(7, Math_fround(1.0));
    $7_1 = HEAPF32[$17_1 + 5484 >> 2];
    $10_1 = HEAP32[$9 + 116 >> 2];
    HEAP32[$9 + 72 >> 2] = HEAP32[$9 + 112 >> 2];
    HEAP32[$9 + 76 >> 2] = $10_1;
    $10_1 = HEAP32[$9 + 108 >> 2];
    HEAP32[$9 + 64 >> 2] = HEAP32[$9 + 104 >> 2];
    HEAP32[$9 + 68 >> 2] = $10_1;
    $71($9 + 72 | 0, $9 - -64 | 0, $8, 1, $7_1);
    $8 = -1;
    if (($3 | 0) >= (($0_1 ? 1 : 2) | 0)) {
     $20_1 = Math_fround($20_1 - $16_1);
     $12_1 = Math_fround($15_1 - $23_1);
     $7_1 = Math_fround($25_1 + $23_1);
     $22_1 = !$0_1;
     $8 = $3 - $22_1 | 0;
     $10_1 = Math_fround(Math_abs($13)) < Math_fround(2147483648.0) ? ~~$13 : -2147483648;
     $26_1 = ($3 | 0) > ($10_1 | 0) ? $10_1 : $3;
     label$14 : {
      if (!$19) {
       $10_1 = -1;
       break label$14;
      }
      $13 = HEAPF32[$17_1 + 228 >> 2];
      if (!($13 >= $7_1)) {
       $10_1 = -1;
       break label$14;
      }
      $15_1 = HEAPF32[$17_1 + 232 >> 2];
      if (!($15_1 >= $14)) {
       $10_1 = -1;
       break label$14;
      }
      if (!($12_1 > $13)) {
       $10_1 = -1;
       break label$14;
      }
      $10_1 = -1;
      if (!($15_1 < $20_1)) {
       break label$14
      }
      $13 = Math_fround(Math_fround($13 - $7_1) / Math_fround($12_1 - $7_1));
      $13 = Math_fround(($13 < Math_fround(0.0) ? Math_fround(0.0) : $13 > Math_fround(.9998999834060669) ? Math_fround(.9998999834060669) : $13) * Math_fround($8 | 0));
      label$19 : {
       if (Math_fround(Math_abs($13)) < Math_fround(2147483648.0)) {
        $10_1 = ~~$13;
        break label$19;
       }
       $10_1 = -2147483648;
      }
      $13 = Math_fround(FUNCTION_TABLE[$2_1 | 0](0, ($10_1 + $4_1 | 0) % ($3 | 0) | 0));
      $19 = $10_1 + 1 | 0;
      $15_1 = Math_fround(FUNCTION_TABLE[$2_1 | 0](0, ($19 + $4_1 | 0) % ($3 | 0) | 0));
      label$21 : {
       if (!$0_1) {
        HEAPF64[$9 + 40 >> 3] = $15_1;
        HEAP32[$9 + 32 >> 2] = $19;
        HEAP32[$9 + 16 >> 2] = $10_1;
        HEAPF64[$9 + 24 >> 3] = $13;
        $162(9599, $9 + 16 | 0);
        break label$21;
       }
       if (($0_1 | 0) != 1) {
        break label$21
       }
       HEAP32[$9 + 48 >> 2] = $10_1;
       HEAPF64[$9 + 56 >> 3] = $13;
       $162(9609, $9 + 48 | 0);
      }
     }
     $16_1 = Math_fround(FUNCTION_TABLE[$2_1 | 0](0, ($4_1 | 0) % ($3 | 0) | 0));
     $19 = $51($0_1 ? 40 : 38, Math_fround(1.0));
     $21_1 = $51($0_1 ? 41 : 39, Math_fround(1.0));
     $22_1 = $26_1 - $22_1 | 0;
     if (($22_1 | 0) > 0) {
      $23_1 = Math_fround(Math_fround(1.0) / Math_fround($22_1 | 0));
      $13 = $6_1 != $11_1 ? Math_fround(Math_fround(1.0) / Math_fround($6_1 - $11_1)) : Math_fround(0.0);
      $24 = Math_fround($6_1 * $11_1) < Math_fround(0.0) ? Math_fround(Math_fround($11_1 * $13) + Math_fround(1.0)) : $11_1 < Math_fround(0.0) ? Math_fround(0.0) : Math_fround(1.0);
      $20_1 = Math_fround($20_1 - $14);
      $15_1 = Math_fround($12_1 - $7_1);
      $26_1 = $4_1 + 1 | 0;
      $25_1 = Math_fround($8 | 0);
      $8 = 0;
      $6_1 = Math_fround($13 * Math_fround($16_1 - $11_1));
      $12_1 = $6_1 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($6_1 > Math_fround(1.0) ? Math_fround(1.0) : $6_1));
      $6_1 = Math_fround(0.0);
      while (1) {
       $12_1 = Math_fround(Math_fround($20_1 * $12_1) + $14);
       $16_1 = Math_fround(Math_fround($6_1 * $25_1) + Math_fround(.5));
       label$26 : {
        if (Math_fround(Math_abs($16_1)) < Math_fround(2147483648.0)) {
         $4_1 = ~~$16_1;
         break label$26;
        }
        $4_1 = -2147483648;
       }
       $28_1 = Math_fround(FUNCTION_TABLE[$2_1 | 0](0, ($26_1 + $4_1 | 0) % ($3 | 0) | 0));
       HEAPF32[$9 + 100 >> 2] = $12_1;
       $27_1 = Math_fround(Math_fround($15_1 * $6_1) + $7_1);
       HEAPF32[$9 + 96 >> 2] = $27_1;
       $6_1 = Math_fround($23_1 + $6_1);
       $16_1 = Math_fround(Math_fround($15_1 * $6_1) + $7_1);
       HEAPF32[$9 + 88 >> 2] = $16_1;
       $12_1 = Math_fround($13 * Math_fround($28_1 - $11_1));
       $12_1 = $12_1 < Math_fround(0.0) ? Math_fround(1.0) : Math_fround(Math_fround(1.0) - ($12_1 > Math_fround(1.0) ? Math_fround(1.0) : $12_1));
       HEAPF32[$9 + 92 >> 2] = Math_fround($20_1 * ($0_1 ? $24 : $12_1)) + $14;
       label$28 : {
        if (!$0_1) {
         $399(HEAP32[$18_1 + 580 >> 2], $9 + 96 | 0, $9 + 88 | 0, ($4_1 | 0) == ($10_1 | 0) ? $21_1 : $19, Math_fround(1.0));
         break label$28;
        }
        if (($0_1 | 0) != 1) {
         break label$28
        }
        if (Math_fround($27_1 + Math_fround(2.0)) <= $16_1) {
         HEAPF32[$9 + 88 >> 2] = $16_1 + Math_fround(-1.0)
        }
        $401(HEAP32[$18_1 + 580 >> 2], $9 + 96 | 0, $9 + 88 | 0, ($4_1 | 0) == ($10_1 | 0) ? $21_1 : $19, Math_fround(0.0), 0);
       }
       $8 = $8 + 1 | 0;
       if (($8 | 0) != ($22_1 | 0)) {
        continue
       }
       break;
      };
     }
     $8 = 0;
    }
    if ($5_1) {
     $6_1 = HEAPF32[$17_1 + 5480 >> 2];
     HEAPF32[$9 + 96 >> 2] = HEAPF32[$9 + 136 >> 2];
     HEAPF32[$9 + 100 >> 2] = $6_1 + HEAPF32[$9 + 140 >> 2];
     HEAP32[$9 + 88 >> 2] = 1056964608;
     HEAP32[$9 + 92 >> 2] = 0;
     $69($9 + 96 | 0, $9 + 144 | 0, $5_1, 0, 0, $9 + 88 | 0, 0);
    }
    if (HEAPF32[$9 + 152 >> 2] > Math_fround(0.0)) {
     $6_1 = HEAPF32[$17_1 + 5500 >> 2];
     HEAPF32[$9 + 84 >> 2] = $14;
     HEAPF32[$9 + 80 >> 2] = $6_1 + HEAPF32[$9 + 144 >> 2];
     $0_1 = HEAP32[$9 + 84 >> 2];
     HEAP32[$9 + 8 >> 2] = HEAP32[$9 + 80 >> 2];
     HEAP32[$9 + 12 >> 2] = $0_1;
     $63($9 + 8 | 0, $1_1, 0, 1);
    }
   }
  }
  global$0 = $9 + 160 | 0;
 }
 
 function $733() {
  var $0_1 = 0, $1_1 = Math_fround(0), $2_1 = 0, $3 = Math_fround(0), $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  $2_1 = 0;
  label$1 : {
   if (HEAPU8[$0_1 + 143 | 0]) {
    break label$1
   }
   $2_1 = 0;
   if (!(HEAPU8[$0_1 + 9 | 0] & 4)) {
    break label$1
   }
   $301();
   $153(6548);
   $2_1 = $0_1 + 16 | 0;
   $6_1 = HEAP32[$0_1 + 8 >> 2];
   if ($6_1 & 1) {
    $1_1 = $3
   } else {
    $10_1 = HEAP32[18392];
    $3 = Math_fround(HEAPF32[$10_1 + 6472 >> 2] * HEAPF32[$0_1 + 572 >> 2]);
    $11_1 = HEAP32[$0_1 + 728 >> 2];
    if ($11_1) {
     $3 = Math_fround($3 * HEAPF32[$11_1 + 572 >> 2])
    }
    $1_1 = HEAPF32[$10_1 + 5480 >> 2];
    $1_1 = Math_fround(Math_fround($1_1 + $1_1) + $3);
   }
   $9 = HEAPF32[$2_1 >> 2];
   if ($6_1 & 1024) {
    $2_1 = HEAP32[18392];
    $3 = Math_fround(HEAPF32[$2_1 + 6472 >> 2] * HEAPF32[$0_1 + 572 >> 2]);
    $4_1 = HEAPF32[$0_1 + 312 >> 2];
    $6_1 = HEAP32[$0_1 + 728 >> 2];
    if ($6_1) {
     $3 = Math_fround($3 * HEAPF32[$6_1 + 572 >> 2])
    }
    $8 = HEAPF32[$2_1 + 5480 >> 2];
    $4_1 = Math_fround(Math_fround($8 + $8) + Math_fround($4_1 + $3));
   }
   $7_1 = HEAPF32[$0_1 + 28 >> 2];
   $3 = HEAPF32[$0_1 + 12 >> 2];
   $9 = Math_fround($9 + $1_1);
   $1_1 = Math_fround(Math_fround($9 + $4_1) + Math_fround(.5));
   label$9 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$1_1;
     break label$9;
    }
    $2_1 = -2147483648;
   }
   $4_1 = HEAPF32[$0_1 + 68 >> 2];
   $1_1 = HEAPF32[$0_1 + 72 >> 2];
   $6_1 = $5_1 + 12 | 0;
   $8 = Math_fround($2_1 | 0);
   HEAPF32[$6_1 >> 2] = $8;
   $4_1 = Math_fround(Math_fround($3 + $7_1) - ($1_1 <= $4_1 ? $4_1 : $1_1));
   $4_1 = Math_fround(($3 >= $4_1 ? $3 : $4_1) + Math_fround(.5));
   label$11 : {
    if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$4_1;
     break label$11;
    }
    $2_1 = -2147483648;
   }
   $4_1 = Math_fround($2_1 | 0);
   HEAPF32[$5_1 + 8 >> 2] = $4_1;
   $7_1 = Math_fround(Math_fround($3 + $1_1) + Math_fround(.5));
   label$13 : {
    if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$7_1;
     break label$13;
    }
    $2_1 = -2147483648;
   }
   $7_1 = Math_fround($2_1 | 0);
   HEAPF32[$5_1 >> 2] = $7_1;
   $1_1 = Math_fround(Math_fround($9 + $1_1) + Math_fround(.5));
   label$15 : {
    if (Math_fround(Math_abs($1_1)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$1_1;
     break label$15;
    }
    $2_1 = -2147483648;
   }
   $1_1 = Math_fround($2_1 | 0);
   HEAPF32[$5_1 + 4 >> 2] = $1_1;
   $12_1 = HEAPF32[$0_1 + 416 >> 2];
   $13 = HEAPF32[$0_1 + 420 >> 2];
   HEAPF32[$5_1 + 4 >> 2] = $1_1 >= $13 ? $1_1 : $13;
   HEAPF32[$5_1 >> 2] = $7_1 >= $12_1 ? $7_1 : $12_1;
   $1_1 = HEAPF32[$0_1 + 424 >> 2];
   $7_1 = HEAPF32[$0_1 + 428 >> 2];
   HEAPF32[$6_1 >> 2] = $7_1 > $8 ? $8 : $7_1;
   HEAPF32[$5_1 + 8 >> 2] = $1_1 > $4_1 ? $4_1 : $1_1;
   $158($5_1, $5_1 + 8 | 0, 0);
   HEAP32[$0_1 + 376 >> 2] = 0;
   HEAP8[$0_1 + 306 | 0] = 1;
   HEAP32[$0_1 + 292 >> 2] = 1;
   $1_1 = Math_fround($9 + HEAPF32[$0_1 + 312 >> 2]);
   HEAPF32[$0_1 + 236 >> 2] = $1_1;
   $3 = Math_fround($3 + HEAPF32[$0_1 + 308 >> 2]);
   HEAPF32[$0_1 + 232 >> 2] = $3;
   HEAPF32[$0_1 + 212 >> 2] = $1_1;
   HEAPF32[$0_1 + 208 >> 2] = $3;
   $2_1 = HEAP32[18392];
   $0_1 = HEAP32[$2_1 + 7080 >> 2];
   HEAP8[$0_1 + 140 | 0] = 1;
   if (!HEAPU8[$0_1 + 143 | 0]) {
    $4_1 = HEAPF32[$2_1 + 6468 >> 2];
    $6_1 = $0_1 + 264 | 0;
    $1_1 = HEAPF32[$6_1 >> 2];
    $3 = HEAPF32[$2_1 + 5480 >> 2];
    HEAPF32[$6_1 >> 2] = $1_1 >= $3 ? $1_1 : $3;
    $0_1 = $0_1 + 252 | 0;
    $1_1 = HEAPF32[$0_1 >> 2];
    $3 = Math_fround($4_1 + Math_fround($3 + $3));
    HEAPF32[$0_1 >> 2] = $1_1 >= $3 ? $1_1 : $3;
   }
   $2_1 = 1;
  }
  global$0 = $5_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $734() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  if (!HEAPU8[$2_1 + 143 | 0]) {
   label$2 : {
    if (!$331() | HEAPU32[$1_1 + 7612 >> 2] > 1) {
     break label$2
    }
    $0_1 = HEAP32[$1_1 + 7508 >> 2];
    if (!(HEAPU8[$0_1 + 11 | 0] & 16)) {
     break label$2
    }
    while (1) {
     $3 = $0_1;
     $0_1 = HEAP32[$0_1 + 728 >> 2];
     if (HEAPU8[$0_1 + 11 | 0] & 16 ? $0_1 : 0) {
      continue
     }
     break;
    };
    if (HEAPU8[$1_1 + 7600 | 0] & 128 | (HEAP32[$3 + 380 >> 2] | ($0_1 | 0) != ($2_1 | 0))) {
     break label$2
    }
    $125($2_1);
    $329(HEAP32[$2_1 + 760 >> 2], 1, 0, $2_1 + 780 | 0);
    HEAP8[$1_1 + 7571 | 0] = 1;
    HEAP8[$1_1 + 7569 | 0] = 1;
    HEAP8[$1_1 + 7570 | 0] = 1;
    $3 = HEAP32[$1_1 + 7612 >> 2];
    $4_1 = HEAP32[$1_1 + 7620 >> 2];
    $5_1 = HEAP32[$1_1 + 7600 >> 2];
    $6_1 = HEAP32[$1_1 + 7604 >> 2];
    $0_1 = HEAP32[18392];
    HEAP8[$0_1 + 7596 | 0] = 0;
    HEAP8[$0_1 + 7597 | 0] = 0;
    HEAP8[$0_1 + 7598 | 0] = 1;
    HEAP32[$0_1 + 7620 >> 2] = $4_1;
    HEAP32[$0_1 + 7612 >> 2] = $3;
    HEAP32[$0_1 + 7604 >> 2] = $6_1;
    HEAP32[$0_1 + 7600 >> 2] = $5_1 | 128;
    HEAP8[$0_1 + 7572 | 0] = HEAPU8[$0_1 + 7573 | 0];
   }
   $159();
   $269();
   HEAPF32[$2_1 + 308 >> 2] = HEAPF32[$2_1 + 208 >> 2] - HEAPF32[$2_1 + 12 >> 2];
   HEAP8[(HEAP32[$1_1 + 7464 >> 2] + Math_imul(HEAP32[$1_1 + 7456 >> 2], 48) | 0) - 2 | 0] = 0;
   $275();
   HEAP8[$2_1 + 306 | 0] = 0;
   HEAP32[$2_1 + 292 >> 2] = 0;
   HEAP32[$2_1 + 376 >> 2] = 1;
  }
 }
 
 function $736() {
  var $0_1 = 0, $1_1 = 0, $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0);
  $0_1 = HEAP32[18392];
  $1_1 = $221();
  $7_1 = $0_1 + 7388 | 0;
  HEAP32[$7_1 >> 2] = HEAP32[$0_1 + 5592 >> 2];
  $5_1 = Math_fround(HEAPF32[$0_1 + 5596 >> 2] - HEAPF32[$0_1 + 5480 >> 2]);
  HEAPF32[$0_1 + 7392 >> 2] = $5_1 >= Math_fround(0.0) ? $5_1 : Math_fround(0.0);
  $5_1 = $296();
  $0_1 = global$0 - 48 | 0;
  global$0 = $0_1;
  $4_1 = $218(6628);
  if (!(HEAPU16[$4_1 + 150 >> 1] ? $4_1 : 0)) {
   if (!$1_1) {
    $1_1 = $221()
   }
   $6_1 = HEAPF32[$1_1 + 4 >> 2];
   $9 = HEAPF32[$1_1 + 144 >> 2];
   $10_1 = HEAPF32[$1_1 + 12 >> 2];
   $2_1 = HEAPF32[$1_1 + 136 >> 2];
   $4_1 = $1_1 + 140 | 0;
   $3 = HEAPF32[$4_1 >> 2];
   $8 = Math_fround(HEAPF32[$1_1 + 8 >> 2] + $3);
   $3 = Math_fround(Math_fround(HEAPF32[$1_1 + 16 >> 2] - $3) + HEAPF32[$1_1 + 148 >> 2]);
   $3 = Math_fround($8 + ($3 <= Math_fround(0.0) ? Math_fround(0.0) : $3));
   HEAPF32[$0_1 + 44 >> 2] = $3;
   HEAPF32[$0_1 + 36 >> 2] = $8;
   $6_1 = Math_fround($6_1 + $2_1);
   HEAPF32[$0_1 + 32 >> 2] = $6_1;
   $2_1 = Math_fround($9 + Math_fround($10_1 - $2_1));
   $2_1 = Math_fround($6_1 + ($2_1 <= Math_fround(0.0) ? Math_fround(0.0) : $2_1));
   HEAPF32[$0_1 + 40 >> 2] = $2_1;
   $1_1 = HEAP32[$0_1 + 36 >> 2];
   HEAP32[$0_1 + 24 >> 2] = HEAP32[$0_1 + 32 >> 2];
   HEAP32[$0_1 + 28 >> 2] = $1_1;
   HEAPF32[$0_1 + 20 >> 2] = $3 - $8;
   HEAPF32[$0_1 + 16 >> 2] = $2_1 - HEAPF32[$0_1 + 32 >> 2];
   $1_1 = $0_1 + 16 | 0;
   HEAPF32[$1_1 + 4 >> 2] = $5_1;
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 + 12 >> 2] = 0;
   $250($0_1 + 24 | 0, 0, $0_1 + 8 | 0);
   $145($1_1, 0);
   HEAPF32[$4_1 >> 2] = HEAPF32[$4_1 >> 2] + $5_1;
  }
  $58(3, Math_fround(0.0));
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = 0;
  $59(5, $0_1 + 32 | 0);
  $1_1 = $143(6628, 0, 1295);
  $60(2);
  global$0 = $0_1 + 48 | 0;
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  if ($1_1) {
   $733();
   return $1_1 | 0;
  }
  $142();
  return $1_1 | 0;
 }
 
 function $737() {
  var $0_1 = 0, $1_1 = 0;
  $734();
  $0_1 = HEAP32[18392];
  $1_1 = HEAP32[$0_1 + 7508 >> 2];
  if (!(($1_1 | 0) != HEAP32[$0_1 + 7080 >> 2] | HEAP32[$0_1 + 7564 >> 2] | HEAPU8[$0_1 + 7572 | 0])) {
   $144($1_1)
  }
  $142();
 }
 
 function $740() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18392];
  label$1 : {
   if (HEAP32[$1_1 + 7612 >> 2]) {
    break label$1
   }
   $2_1 = HEAP32[$1_1 + 7080 >> 2];
   if (!$331() | HEAP32[$2_1 + 376 >> 2] != 1) {
    break label$1
   }
   $0_1 = HEAP32[$1_1 + 7508 >> 2];
   if (!$0_1) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 + 748 >> 2];
   if (!(HEAPU8[$0_1 + 11 | 0] & 4) | HEAP32[$0_1 + 728 >> 2] != ($2_1 | 0)) {
    break label$1
   }
   $132(HEAP32[$1_1 + 7480 >> 2], 1);
   $203();
  }
  $321();
 }
 
 function $741($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  $11_1 = HEAP32[18392];
  $7_1 = HEAP32[$11_1 + 7080 >> 2];
  HEAP8[$7_1 + 140 | 0] = 1;
  if (!HEAPU8[$7_1 + 143 | 0]) {
   $16_1 = HEAPF32[$7_1 + 212 >> 2];
   $14 = HEAPF32[$7_1 + 208 >> 2];
   $68($4_1 + 88 | 0, $0_1, 0, 1, Math_fround(-1.0));
   $18_1 = HEAP32[$11_1 + 7508 >> 2];
   $6_1 = HEAP32[18392];
   $5_1 = HEAP32[$6_1 + 7480 >> 2];
   $10_1 = 0;
   label$2 : {
    if (($5_1 | 0) >= HEAP32[$6_1 + 7468 >> 2]) {
     break label$2
    }
    $10_1 = 0;
    if (HEAPU8[HEAP32[$6_1 + 7080 >> 2] + 11 | 0] & 16) {
     break label$2
    }
    $6_1 = HEAP32[(HEAP32[$6_1 + 7476 >> 2] + Math_imul($5_1, 36) | 0) + 4 >> 2];
    $10_1 = 0;
    if (!$6_1) {
     break label$2
    }
    $10_1 = (HEAPU8[$6_1 + 11 | 0] & 16) >>> 4 | 0;
   }
   $6_1 = $10_1;
   $19 = $6_1;
   if ($6_1) {
    HEAP32[$11_1 + 7508 >> 2] = $7_1
   }
   $153($0_1);
   if (!$3) {
    $226(1)
   }
   label$7 : {
    if (!HEAP32[$7_1 + 376 >> 2]) {
     $14 = HEAPF32[$4_1 + 88 >> 2];
     $12_1 = HEAPF32[$7_1 + 208 >> 2];
     $1_1 = $11_1 + 5492 | 0;
     $8 = HEAPF32[$1_1 >> 2];
     $9 = Math_fround($8 * Math_fround(.5));
     label$9 : {
      if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
       $6_1 = ~~$9;
       break label$9;
      }
      $6_1 = -2147483648;
     }
     $9 = Math_fround($12_1 + Math_fround($6_1 | 0));
     HEAPF32[$7_1 + 208 >> 2] = $9;
     $5_1 = HEAPU16[$7_1 + 328 >> 1];
     $16_1 = HEAPF32[$7_1 + 212 >> 2];
     $13 = HEAPF32[$7_1 + 264 >> 2];
     HEAPF32[$4_1 + 84 >> 2] = HEAPF32[$11_1 + 5496 >> 2];
     HEAPF32[$4_1 + 80 >> 2] = $8 + $8;
     $6_1 = $4_1 + 80 | 0;
     $59(14, $6_1);
     HEAP32[$4_1 + 84 >> 2] = 0;
     HEAPF32[$4_1 + 80 >> 2] = $14;
     $6_1 = $601(19354, $2_1, 75497472, $6_1);
     $60(1);
     HEAPF32[$4_1 + 76 >> 2] = $16_1 + $13;
     HEAPF32[$4_1 + 72 >> 2] = $9 + Math_fround($5_1 >>> 0);
     $2_1 = HEAP32[$4_1 + 76 >> 2];
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 + 72 >> 2];
     HEAP32[$4_1 + 4 >> 2] = $2_1;
     $63($4_1, $0_1, 0, 1);
     $12_1 = HEAPF32[$7_1 + 208 >> 2];
     $8 = Math_fround(HEAPF32[$1_1 >> 2] * Math_fround(-.5));
     label$11 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$8;
       break label$11;
      }
      $0_1 = -2147483648;
     }
     HEAPF32[$7_1 + 208 >> 2] = $12_1 + Math_fround($0_1 | 0);
     break label$7;
    }
    $8 = Math_fround(0.0);
    label$14 : {
     if (!$1_1) {
      break label$14
     }
     $8 = Math_fround(0.0);
     if (!HEAPU8[$1_1 | 0]) {
      break label$14
     }
     $68($4_1 + 80 | 0, $1_1, 0, 0, Math_fround(-1.0));
     $8 = HEAPF32[$4_1 + 80 >> 2];
    }
    $5_1 = $7_1 + 334 | 0;
    $6_1 = HEAPU16[$5_1 >> 1];
    $13 = HEAPF32[$11_1 + 6468 >> 2];
    $9 = HEAPF32[$4_1 + 88 >> 2];
    HEAP16[$5_1 >> 1] = $6_1;
    $5_1 = $7_1 + 336 | 0;
    $6_1 = HEAPU16[$5_1 >> 1];
    $10_1 = $5_1;
    $5_1 = $9 < Math_fround(4294967296.0) & $9 >= Math_fround(0.0) ? ~~$9 >>> 0 : 0;
    HEAP16[$10_1 >> 1] = $6_1 >>> 0 > $5_1 >>> 0 ? $6_1 : $5_1;
    $5_1 = $7_1 + 338 | 0;
    $6_1 = HEAPU16[$5_1 >> 1];
    $10_1 = $5_1;
    $5_1 = $8 < Math_fround(4294967296.0) & $8 >= Math_fround(0.0) ? ~~$8 >>> 0 : 0;
    HEAP16[$10_1 >> 1] = $6_1 >>> 0 > $5_1 >>> 0 ? $6_1 : $5_1;
    $5_1 = $7_1 + 340 | 0;
    $6_1 = HEAPU16[$5_1 >> 1];
    $10_1 = $5_1;
    $9 = Math_fround($13 * Math_fround(1.2000000476837158));
    label$22 : {
     if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
      $5_1 = ~~$9;
      break label$22;
     }
     $5_1 = -2147483648;
    }
    $5_1 = $5_1 & 65535;
    HEAP16[$10_1 >> 1] = $6_1 >>> 0 > $5_1 >>> 0 ? $6_1 : $5_1;
    $10_1 = HEAPU16[$7_1 + 324 >> 1];
    $6_1 = 0;
    $5_1 = 0;
    while (1) {
     $17_1 = HEAPU16[(($5_1 << 1) + $7_1 | 0) + 334 >> 1];
     $6_1 = ($17_1 + $6_1 | 0) + ($15_1 & 1 ? ($17_1 ? $10_1 : 0) : 0) | 0;
     $15_1 = ($17_1 | 0) != 0 | $15_1;
     $5_1 = $5_1 + 1 | 0;
     if (($5_1 | 0) != 4) {
      continue
     }
     break;
    };
    $6_1 = $6_1 & 65535;
    HEAP32[$7_1 + 320 >> 2] = $6_1;
    $5_1 = HEAP32[$7_1 + 316 >> 2];
    $15_1 = $4_1 + 80 | 0;
    $208($15_1);
    $9 = HEAPF32[$4_1 + 80 >> 2];
    HEAP32[$4_1 + 84 >> 2] = 0;
    $13 = Math_fround(($6_1 >>> 0 < $5_1 >>> 0 ? $5_1 : $6_1) >>> 0);
    HEAPF32[$4_1 + 80 >> 2] = $13;
    $6_1 = $601(19354, 0, 92274688, $15_1);
    $5_1 = HEAPU16[$7_1 + 328 >> 1];
    $12_1 = Math_fround($16_1 + Math_fround(0.0));
    HEAPF32[$4_1 + 68 >> 2] = $12_1;
    HEAPF32[$4_1 + 64 >> 2] = $14 + Math_fround($5_1 >>> 0);
    $5_1 = HEAP32[$4_1 + 68 >> 2];
    HEAP32[$4_1 + 32 >> 2] = HEAP32[$4_1 + 64 >> 2];
    HEAP32[$4_1 + 36 >> 2] = $5_1;
    $63($4_1 + 32 | 0, $0_1, 0, 1);
    $9 = Math_fround($9 - $13);
    $0_1 = $9 <= Math_fround(0.0);
    $9 = $0_1 ? Math_fround(0.0) : $9;
    if ($8 > Math_fround(0.0)) {
     $56(0, $11_1 + 5632 | 0);
     $0_1 = HEAPU16[$7_1 + 330 >> 1];
     HEAPF32[$4_1 + 52 >> 2] = $12_1;
     HEAPF32[$4_1 + 48 >> 2] = $14 + Math_fround($9 + Math_fround($0_1 >>> 0));
     $0_1 = HEAP32[$4_1 + 52 >> 2];
     HEAP32[$4_1 + 16 >> 2] = HEAP32[$4_1 + 48 >> 2];
     HEAP32[$4_1 + 20 >> 2] = $0_1;
     $63($4_1 + 16 | 0, $1_1, 0, 0);
     $57(1);
    }
    if ($2_1) {
     $0_1 = HEAPU16[$7_1 + 332 >> 1];
     $1_1 = HEAP32[$7_1 + 580 >> 2];
     $8 = HEAPF32[$11_1 + 6468 >> 2];
     HEAPF32[$4_1 + 44 >> 2] = $16_1 + Math_fround(Math_fround($8 * Math_fround(.1340000033378601)) * Math_fround(.5));
     HEAPF32[$4_1 + 40 >> 2] = $14 + Math_fround(Math_fround($8 * Math_fround(.4000000059604645)) + Math_fround($9 + Math_fround($0_1 >>> 0)));
     $0_1 = $51(0, Math_fround(1.0));
     $8 = HEAPF32[$11_1 + 6468 >> 2];
     $2_1 = HEAP32[$4_1 + 44 >> 2];
     HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 40 >> 2];
     HEAP32[$4_1 + 12 >> 2] = $2_1;
     $478($1_1, $4_1 + 8 | 0, $0_1, Math_fround($8 * Math_fround(.8659999966621399)));
    }
   }
   if (!$3) {
    $227()
   }
   $269();
   if ($19) {
    HEAP32[$11_1 + 7508 >> 2] = $18_1
   }
  }
  global$0 = $4_1 + 96 | 0;
  return $6_1;
 }
 
 function $742($0_1, $1_1, $2_1, $3) {
  return $741($0_1, $1_1, $2_1, $3);
 }
 
 function $748($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP16[$0_1 + 32 >> 1] - HEAP16[$1_1 + 32 >> 1] | 0;
 }
 
 function $749() {
  var $0_1 = 0, $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  label$1 : {
   $2_1 = HEAP32[18392];
   $1_1 = HEAP32[$2_1 + 7080 >> 2];
   if (HEAPU8[$1_1 + 143 | 0]) {
    break label$1
   }
   $0_1 = HEAP32[$2_1 + 8112 >> 2];
   if (!$0_1) {
    break label$1
   }
   if (HEAPU8[$0_1 + 103 | 0]) {
    $750($0_1)
   }
   label$3 : {
    if (!(!(HEAPU8[$0_1 + 104 | 0] | !HEAP32[$0_1 + 28 >> 2]) & HEAP32[$2_1 + 6984 >> 2] <= (HEAP32[$0_1 + 36 >> 2] + 1 | 0))) {
     $4_1 = $1_1 + 212 | 0;
     $5_1 = HEAPF32[$0_1 + 52 >> 2];
     $3 = Math_fround(HEAPF32[$4_1 >> 2] - $5_1);
     $6_1 = HEAPF32[$0_1 + 56 >> 2];
     $3 = $3 >= $6_1 ? $3 : $6_1;
     HEAPF32[$0_1 + 56 >> 2] = $3;
     HEAPF32[$4_1 >> 2] = $5_1 + $3;
     break label$3;
    }
    HEAPF32[$1_1 + 212 >> 2] = HEAPF32[$0_1 + 52 >> 2] + HEAPF32[$0_1 + 60 >> 2];
   }
   if (HEAP8[$0_1 + 102 | 0] >= 2) {
    $4_1 = HEAP32[$0_1 + 128 >> 2];
    HEAP32[$1_1 + 208 >> 2] = HEAP32[$0_1 + 124 >> 2];
    HEAP32[$1_1 + 212 >> 2] = $4_1;
   }
   if (!(HEAPU8[$0_1 + 14 | 0] & 16)) {
    $269()
   }
   $0_1 = HEAP32[$2_1 + 8148 >> 2];
   $1_1 = $0_1 - 1 | 0;
   HEAP32[$2_1 + 8148 >> 2] = $1_1;
   label$8 : {
    if (!$1_1) {
     $0_1 = 0;
     break label$8;
    }
    $1_1 = HEAP32[$2_1 + 8156 >> 2] + ($0_1 - 2 << 3) | 0;
    $0_1 = HEAP32[$1_1 >> 2];
    if ($0_1) {
     break label$8
    }
    $0_1 = HEAP32[HEAP32[18392] + 8124 >> 2] + Math_imul(HEAP32[$1_1 + 4 >> 2], 144) | 0;
   }
   HEAP32[$2_1 + 8112 >> 2] = $0_1;
  }
 }
 
 function $750($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = 0, $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = 0;
  $8 = global$0 - 112 | 0;
  global$0 = $8;
  $16_1 = HEAP32[18392];
  HEAP8[$0_1 + 103 | 0] = 0;
  HEAP32[$8 - -64 >> 2] = 0;
  $2_1 = $8 + 32 | 0;
  $1_1 = $2_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $2_1 = $2_1 + 16 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$8 + 40 >> 2] = 0;
  HEAP32[$8 + 44 >> 2] = 0;
  HEAP32[$8 + 32 >> 2] = 0;
  HEAP32[$8 + 36 >> 2] = 0;
  $18_1 = HEAP32[$0_1 >> 2];
  label$1 : {
   if (($18_1 | 0) <= 0) {
    $2_1 = 0;
    break label$1;
   }
   $2_1 = 0;
   while (1) {
    $3 = HEAP32[$0_1 + 8 >> 2];
    $1_1 = $3 + Math_imul($9, 40) | 0;
    label$4 : {
     if (!(HEAP32[$1_1 + 8 >> 2] >= HEAP32[$0_1 + 36 >> 2] & !HEAPU8[$1_1 + 36 | 0])) {
      $1_1 = HEAP32[$1_1 >> 2];
      if (($1_1 | 0) == HEAP32[$0_1 + 28 >> 2]) {
       HEAP32[$0_1 + 28 >> 2] = 0
      }
      if (HEAP32[$0_1 + 20 >> 2] == ($1_1 | 0)) {
       HEAP32[$0_1 + 20 >> 2] = 0
      }
      if (($1_1 | 0) != HEAP32[$0_1 + 24 >> 2]) {
       break label$4
      }
      HEAP32[$0_1 + 24 >> 2] = 0;
      break label$4;
     }
     if (($2_1 | 0) != ($9 | 0)) {
      $6_1 = HEAP32[$1_1 + 4 >> 2];
      $11_1 = $3 + Math_imul($2_1, 40) | 0;
      $3 = $11_1;
      HEAP32[$3 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$3 + 4 >> 2] = $6_1;
      $3 = $1_1 + 29 | 0;
      $13 = HEAPU8[$3 + 4 | 0] | HEAPU8[$3 + 5 | 0] << 8 | (HEAPU8[$3 + 6 | 0] << 16 | HEAPU8[$3 + 7 | 0] << 24);
      $6_1 = $11_1 + 29 | 0;
      $3 = HEAPU8[$3 | 0] | HEAPU8[$3 + 1 | 0] << 8 | (HEAPU8[$3 + 2 | 0] << 16 | HEAPU8[$3 + 3 | 0] << 24);
      HEAP8[$6_1 | 0] = $3;
      HEAP8[$6_1 + 1 | 0] = $3 >>> 8;
      HEAP8[$6_1 + 2 | 0] = $3 >>> 16;
      HEAP8[$6_1 + 3 | 0] = $3 >>> 24;
      HEAP8[$6_1 + 4 | 0] = $13;
      HEAP8[$6_1 + 5 | 0] = $13 >>> 8;
      HEAP8[$6_1 + 6 | 0] = $13 >>> 16;
      HEAP8[$6_1 + 7 | 0] = $13 >>> 24;
      $3 = $1_1 + 24 | 0;
      $6_1 = HEAP32[$3 + 4 >> 2];
      $13 = $11_1 + 24 | 0;
      HEAP32[$13 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$13 + 4 >> 2] = $6_1;
      $3 = $1_1 + 16 | 0;
      $6_1 = HEAP32[$3 + 4 >> 2];
      $13 = $11_1 + 16 | 0;
      HEAP32[$13 >> 2] = HEAP32[$3 >> 2];
      HEAP32[$13 + 4 >> 2] = $6_1;
      $1_1 = $1_1 + 8 | 0;
      $3 = HEAP32[$1_1 + 4 >> 2];
      $6_1 = $11_1 + 8 | 0;
      HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$6_1 + 4 >> 2] = $3;
     }
     $1_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul($2_1, 40) | 0;
     HEAP16[$1_1 + 34 >> 1] = $2_1;
     $3 = HEAP32[$1_1 + 4 >> 2];
     $6_1 = $3 & 64;
     if (($2_1 | 0) > 0) {
      $1_1 = HEAP32[$1_1 - 36 >> 2];
      $5_1 = $5_1 | (($1_1 & 192) == 128 & ($3 & 192) != 128 | !($1_1 & 64) & ($6_1 | 0) != 0);
     }
     $1_1 = ($8 + 32 | 0) + Math_imul($6_1 >>> 6 | 0 ? 0 : $3 & 128 ? 2 : 1, 12) | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
     $2_1 = $2_1 + 1 | 0;
    }
    $1_1 = HEAP32[$0_1 >> 2];
    $18_1 = $1_1;
    $9 = $9 + 1 | 0;
    if (($1_1 | 0) > ($9 | 0)) {
     continue
    }
    break;
   };
  }
  if (($2_1 | 0) != ($18_1 | 0)) {
   $1_1 = HEAP32[$0_1 + 4 >> 2];
   label$14 : {
    if (($1_1 | 0) >= ($2_1 | 0)) {
     break label$14
    }
    $3 = $1_1;
    $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $1_1 = ($1_1 | 0) > ($2_1 | 0) ? $1_1 : $2_1;
    if (($3 | 0) >= ($1_1 | 0)) {
     break label$14
    }
    $3 = $16(Math_imul($1_1, 40));
    $9 = HEAP32[$0_1 + 8 >> 2];
    if ($9) {
     $1602($3, $9, Math_imul(HEAP32[$0_1 >> 2], 40));
     $17(HEAP32[$0_1 + 8 >> 2]);
    }
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    HEAP32[$0_1 + 8 >> 2] = $3;
   }
   HEAP32[$0_1 >> 2] = $2_1;
  }
  label$18 : {
   if (!($5_1 & 1)) {
    break label$18
   }
   $2_1 = HEAP32[$0_1 >> 2];
   if ($2_1 >>> 0 < 2) {
    break label$18
   }
   $1685(HEAP32[$0_1 + 8 >> 2], $2_1, 40, 23);
  }
  $13 = HEAP32[$8 + 32 >> 2];
  $4_1 = Math_fround(0.0);
  label$19 : {
   if (($13 | 0) <= 0) {
    break label$19
   }
   $4_1 = Math_fround(0.0);
   if ((HEAP32[$8 + 56 >> 2] + HEAP32[$8 + 44 >> 2] | 0) <= 0) {
    break label$19
   }
   $4_1 = HEAPF32[$16_1 + 5500 >> 2];
  }
  HEAPF32[$8 + 40 >> 2] = $4_1;
  $18_1 = HEAP32[$8 + 56 >> 2];
  $2_1 = $8 + 52 | 0;
  $4_1 = Math_fround(0.0);
  label$20 : {
   if (HEAP32[$8 + 44 >> 2] <= 0) {
    break label$20
   }
   $4_1 = Math_fround(0.0);
   if (($18_1 | 0) <= 0) {
    break label$20
   }
   $4_1 = HEAPF32[$16_1 + 5500 >> 2];
  }
  HEAPF32[$2_1 >> 2] = $4_1;
  $2_1 = HEAP32[$0_1 + 24 >> 2];
  label$22 : {
   if (!$2_1) {
    $2_1 = 0;
    break label$22;
   }
   HEAP32[$0_1 + 24 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = $2_1;
  }
  if (HEAP32[$0_1 + 96 >> 2]) {
   $1_1 = 0;
   $6_1 = 0;
   $9 = global$0 - 48 | 0;
   global$0 = $9;
   $10_1 = HEAP32[$0_1 + 96 >> 2];
   label$10 : {
    if ($10_1) {
     $11_1 = HEAP32[$0_1 >> 2];
     label$31 : {
      if (($11_1 | 0) <= 0) {
       $3 = ($11_1 | 0) > 0;
       break label$31;
      }
      $3 = HEAP32[$0_1 + 8 >> 2];
      if (HEAP32[$3 >> 2] == ($10_1 | 0)) {
       $1_1 = $3;
       $3 = 1;
       break label$31;
      }
      $5_1 = ($3 + Math_imul($11_1, 40) | 0) - 40 | 0;
      while (1) {
       label$6 : {
        $6_1 = $6_1 + 1 | 0;
        if (($11_1 | 0) == ($6_1 | 0)) {
         $1_1 = $5_1;
         break label$6;
        }
        $1_1 = $3 + Math_imul($6_1, 40) | 0;
        if (($10_1 | 0) != HEAP32[$1_1 >> 2]) {
         continue
        }
       }
       break;
      };
      $3 = ($6_1 | 0) < ($11_1 | 0);
     }
     if ($3) {
      break label$10
     }
    }
    $1_1 = 0;
   }
   $10_1 = 0;
   label$9 : {
    if (!$1_1) {
     break label$9
    }
    $5_1 = HEAP32[$1_1 + 4 >> 2];
    $10_1 = 0;
    if ($5_1 & 32) {
     break label$9
    }
    $6_1 = HEAP16[$0_1 + 100 >> 1];
    $11_1 = HEAP32[$0_1 + 8 >> 2];
    $3 = $6_1 + (($1_1 - $11_1 | 0) / 40 | 0) | 0;
    $10_1 = 0;
    if (($3 | 0) < 0) {
     break label$9
    }
    $10_1 = 0;
    if (HEAP32[$0_1 >> 2] <= ($3 | 0)) {
     break label$9
    }
    $3 = $11_1 + Math_imul($3, 40) | 0;
    $11_1 = HEAP32[$3 + 4 >> 2];
    $10_1 = 0;
    if ($11_1 & 32) {
     break label$9
    }
    $10_1 = 0;
    if (($5_1 ^ $11_1) & 192) {
     break label$9
    }
    $11_1 = $1_1 + 32 | 0;
    $10_1 = HEAP32[$11_1 + 4 >> 2];
    $5_1 = $9 + 8 | 0;
    $14 = $5_1 + 32 | 0;
    HEAP32[$14 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$14 + 4 >> 2] = $10_1;
    $11_1 = $1_1 + 24 | 0;
    $14 = HEAP32[$11_1 + 4 >> 2];
    $10_1 = $5_1 + 24 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $14;
    $11_1 = $1_1 + 16 | 0;
    $17_1 = HEAP32[$11_1 + 4 >> 2];
    $14 = $5_1 + 16 | 0;
    HEAP32[$14 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$14 + 4 >> 2] = $17_1;
    $17_1 = $1_1 + 8 | 0;
    $21_1 = HEAP32[$17_1 + 4 >> 2];
    $11_1 = $5_1 + 8 | 0;
    HEAP32[$11_1 >> 2] = HEAP32[$17_1 >> 2];
    HEAP32[$11_1 + 4 >> 2] = $21_1;
    $17_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$9 + 8 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$9 + 12 >> 2] = $17_1;
    $17_1 = ($6_1 | 0) > 0;
    $21_1 = $17_1 ? $1_1 : $3 + 40 | 0;
    $17_1 = $17_1 ? $1_1 + 40 | 0 : $3;
    $1_1 = $6_1 >> 31;
    $1603($21_1, $17_1, Math_imul(($1_1 ^ $6_1) - $1_1 | 0, 40));
    $1_1 = $5_1 + 29 | 0;
    $6_1 = HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24);
    $5_1 = $3 + 29 | 0;
    $1_1 = HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24);
    HEAP8[$5_1 | 0] = $1_1;
    HEAP8[$5_1 + 1 | 0] = $1_1 >>> 8;
    HEAP8[$5_1 + 2 | 0] = $1_1 >>> 16;
    HEAP8[$5_1 + 3 | 0] = $1_1 >>> 24;
    HEAP8[$5_1 + 4 | 0] = $6_1;
    HEAP8[$5_1 + 5 | 0] = $6_1 >>> 8;
    HEAP8[$5_1 + 6 | 0] = $6_1 >>> 16;
    HEAP8[$5_1 + 7 | 0] = $6_1 >>> 24;
    $1_1 = HEAP32[$10_1 + 4 >> 2];
    $5_1 = $3 + 24 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$14 + 4 >> 2];
    $5_1 = $3 + 16 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$14 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$11_1 + 4 >> 2];
    $5_1 = $3 + 8 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$11_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$9 + 12 >> 2];
    HEAP32[$3 >> 2] = HEAP32[$9 + 8 >> 2];
    HEAP32[$3 + 4 >> 2] = $1_1;
    if (HEAPU8[$0_1 + 14 | 0] & 64) {
     $346()
    }
    $10_1 = 1;
   }
   $1_1 = $10_1;
   global$0 = $9 + 48 | 0;
   if ($1_1) {
    $1_1 = HEAP32[$0_1 + 96 >> 2];
    $2_1 = ($1_1 | 0) == HEAP32[$0_1 + 20 >> 2] ? $1_1 : $2_1;
   }
   HEAP32[$0_1 + 96 >> 2] = 0;
  }
  $3 = $2_1;
  label$28 : {
   if (!(HEAPU8[$0_1 + 12 | 0] & 4)) {
    break label$28
   }
   $2_1 = HEAP32[18392];
   $4_1 = HEAPF32[$2_1 + 5480 >> 2];
   $9 = HEAP32[$2_1 + 7080 >> 2];
   $1_1 = $9;
   $6_1 = HEAP32[$1_1 + 208 >> 2];
   $11_1 = HEAP32[$1_1 + 212 >> 2];
   $7_1 = HEAPF32[$2_1 + 6468 >> 2];
   $12_1 = HEAPF32[$0_1 + 40 >> 2];
   HEAP32[$1_1 + 212 >> 2] = HEAP32[$0_1 + 44 >> 2];
   HEAPF32[$1_1 + 208 >> 2] = $12_1 - $4_1;
   HEAPF32[$0_1 + 40 >> 2] = Math_fround($7_1 + $4_1) + HEAPF32[$0_1 + 40 >> 2];
   $1_1 = $2_1 + 5624 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $10_1 = $8 + 96 | 0;
   $14 = $10_1 + 8 | 0;
   HEAP32[$14 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$14 + 4 >> 2] = $5_1;
   $2_1 = $2_1 + 5616 | 0;
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$8 + 96 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$8 + 100 >> 2] = $1_1;
   HEAPF32[$8 + 108 >> 2] = HEAPF32[$8 + 108 >> 2] * Math_fround(.5);
   $56(0, $10_1);
   $2_1 = $8 + 80 | 0;
   $1_1 = $2_1 + 8 | 0;
   HEAP32[$1_1 >> 2] = 0;
   HEAP32[$1_1 + 4 >> 2] = 0;
   HEAP32[$8 + 80 >> 2] = 0;
   HEAP32[$8 + 84 >> 2] = 0;
   $56(21, $2_1);
   $2_1 = $597(1869, 0, 80);
   $57(2);
   $5_1 = 0;
   if ($2_1) {
    label$312 : {
     if (HEAP32[$0_1 >> 2] <= 0) {
      $1_1 = 0;
      break label$312;
     }
     $2_1 = 0;
     while (1) {
      $1_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul($5_1, 40) | 0;
      if (!(HEAPU8[$1_1 + 6 | 0] & 32)) {
       $10_1 = HEAP32[$1_1 + 28 >> 2];
       $14 = HEAP32[$1_1 >> 2];
       $17_1 = HEAP32[$0_1 + 140 >> 2];
       $21_1 = HEAP32[$0_1 + 20 >> 2];
       HEAP32[$8 + 80 >> 2] = 0;
       HEAP32[$8 + 84 >> 2] = 0;
       $2_1 = $601($10_1 + $17_1 | 0, ($14 | 0) == ($21_1 | 0), 0, $8 + 80 | 0) ? $1_1 : $2_1;
      }
      $1_1 = $2_1;
      $5_1 = $5_1 + 1 | 0;
      if (($5_1 | 0) < HEAP32[$0_1 >> 2]) {
       continue
      }
      break;
     };
    }
    $321();
    $5_1 = $1_1;
   }
   HEAP32[$9 + 208 >> 2] = $6_1;
   HEAP32[$9 + 212 >> 2] = $11_1;
   $2_1 = $3;
   if (!$5_1) {
    break label$28
   }
   $2_1 = HEAP32[$5_1 >> 2];
   HEAP32[$0_1 + 20 >> 2] = $2_1;
  }
  HEAP32[$8 + 20 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = $13;
  HEAP32[$8 + 24 >> 2] = $13 + $18_1;
  $1_1 = HEAP32[$16_1 + 8164 >> 2];
  $3 = HEAP32[$0_1 >> 2];
  label$36 : {
   if (($1_1 | 0) >= ($3 | 0)) {
    break label$36
   }
   $5_1 = $1_1;
   $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
   $1_1 = ($1_1 | 0) > ($3 | 0) ? $1_1 : $3;
   if (($5_1 | 0) >= ($1_1 | 0)) {
    break label$36
   }
   $5_1 = $16($1_1 << 3);
   $9 = HEAP32[$16_1 + 8168 >> 2];
   if ($9) {
    $1602($5_1, $9, HEAP32[$16_1 + 8160 >> 2] << 3);
    $17(HEAP32[$16_1 + 8168 >> 2]);
   }
   HEAP32[$16_1 + 8164 >> 2] = $1_1;
   HEAP32[$16_1 + 8168 >> 2] = $5_1;
  }
  HEAP32[$16_1 + 8160 >> 2] = $3;
  $6_1 = HEAP32[$0_1 >> 2];
  label$40 : {
   if (($6_1 | 0) <= 0) {
    $18_1 = 0;
    $1_1 = 0;
    break label$40;
   }
   $1_1 = 0;
   $5_1 = -1;
   $3 = 0;
   $9 = 0;
   while (1) {
    $11_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul($9, 40) | 0;
    if (!$1_1 | HEAP32[$1_1 + 12 >> 2] < HEAP32[$11_1 + 12 >> 2]) {
     $1_1 = HEAPU8[$11_1 + 6 | 0] & 32 ? $1_1 : $11_1
    }
    $6_1 = $3;
    $13 = HEAP32[$11_1 >> 2];
    $3 = $2_1;
    if (!$2_1) {
     $3 = ($13 | 0) == HEAP32[$16_1 + 7540 >> 2] ? $13 : 0
    }
    $18_1 = HEAP32[$0_1 + 20 >> 2];
    $10_1 = HEAP32[$11_1 + 4 >> 2];
    $2_1 = HEAP32[18392];
    $68($8 + 96 | 0, HEAP32[$0_1 + 140 >> 2] + HEAP32[$11_1 + 28 >> 2] | 0, 0, 1, Math_fround(-1.0));
    $4_1 = HEAPF32[$2_1 + 5476 >> 2];
    $4_1 = Math_fround(Math_fround(HEAPF32[$8 + 96 >> 2] + $4_1) + Math_fround($4_1 + ($10_1 & 1048576 ? Math_fround(1.0) : Math_fround(HEAPF32[$2_1 + 5500 >> 2] + HEAPF32[$2_1 + 6468 >> 2]))));
    $7_1 = Math_fround(HEAPF32[HEAP32[18392] + 6468 >> 2] * Math_fround(20.0));
    $4_1 = $4_1 < $7_1 ? $4_1 : $7_1;
    HEAPF32[$11_1 + 24 >> 2] = $4_1;
    $10_1 = $5_1;
    $2_1 = HEAP32[$11_1 + 4 >> 2];
    $5_1 = $2_1 & 64 ? 0 : $2_1 & 128 ? 2 : 1;
    $7_1 = ($10_1 | 0) == ($5_1 | 0) ? HEAPF32[$16_1 + 5500 >> 2] : Math_fround(0.0);
    $2_1 = ($8 + 32 | 0) + Math_imul($5_1, 12) | 0;
    HEAPF32[$2_1 + 4 >> 2] = HEAPF32[$2_1 + 4 >> 2] + Math_fround($4_1 + $7_1);
    $10_1 = ($8 + 20 | 0) + ($5_1 << 2) | 0;
    $2_1 = HEAP32[$10_1 >> 2];
    HEAP32[$10_1 >> 2] = $2_1 + 1;
    $2_1 = HEAP32[$16_1 + 8168 >> 2] + ($2_1 << 3) | 0;
    HEAPF32[$2_1 + 4 >> 2] = $4_1;
    HEAP32[$2_1 >> 2] = $9;
    HEAPF32[$11_1 + 20 >> 2] = $4_1;
    $2_1 = $3;
    $18_1 = ($13 | 0) == ($18_1 | 0) | $6_1;
    $3 = $18_1;
    $9 = $9 + 1 | 0;
    $6_1 = HEAP32[$0_1 >> 2];
    if (($9 | 0) < ($6_1 | 0)) {
     continue
    }
    break;
   };
  }
  $3 = $2_1;
  $11_1 = $1_1;
  HEAP32[$0_1 + 68 >> 2] = 0;
  $2_1 = 0;
  $4_1 = Math_fround(0.0);
  while (1) {
   $1_1 = ($8 + 32 | 0) + Math_imul($2_1, 12) | 0;
   $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[$1_1 + 4 >> 2] + HEAPF32[$1_1 + 8 >> 2]));
   $2_1 = $2_1 + 1 | 0;
   if (($2_1 | 0) != 3) {
    continue
   }
   break;
  };
  HEAPF32[$0_1 + 68 >> 2] = $4_1;
  label$49 : {
   if (!($4_1 > Math_fround(HEAPF32[$0_1 + 48 >> 2] - HEAPF32[$0_1 + 40 >> 2]))) {
    $2_1 = $3;
    break label$49;
   }
   if (($6_1 | 0) <= 1) {
    $2_1 = $3;
    break label$49;
   }
   if ((HEAP32[$0_1 + 12 >> 2] & 144) != 128) {
    $2_1 = $3;
    break label$49;
   }
   $2_1 = HEAP32[18392];
   $7_1 = HEAPF32[$2_1 + 5480 >> 2];
   $10_1 = HEAP32[$2_1 + 7080 >> 2];
   $1_1 = $10_1;
   $21_1 = HEAP32[$1_1 + 208 >> 2];
   $25_1 = HEAP32[$1_1 + 212 >> 2];
   $12_1 = HEAPF32[$2_1 + 6468 >> 2];
   $1_1 = $2_1 + 5624 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   $9 = $8 + 96 | 0;
   $6_1 = $9 + 8 | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $5_1;
   $1_1 = $2_1 + 5616 | 0;
   $5_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$8 + 96 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$8 + 100 >> 2] = $5_1;
   HEAPF32[$8 + 108 >> 2] = HEAPF32[$8 + 108 >> 2] * Math_fround(.5);
   $56(0, $9);
   $1_1 = $8 + 80 | 0;
   $5_1 = $1_1 + 8 | 0;
   HEAP32[$5_1 >> 2] = 0;
   HEAP32[$5_1 + 4 >> 2] = 0;
   HEAP32[$8 + 80 >> 2] = 0;
   HEAP32[$8 + 84 >> 2] = 0;
   $56(21, $1_1);
   $2_1 = $2_1 + 140 | 0;
   $1_1 = HEAP32[$2_1 >> 2];
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = 1048576e3;
   HEAP32[$2_1 + 4 >> 2] = 1045220557;
   $4_1 = HEAPF32[$0_1 + 48 >> 2];
   $20_1 = HEAPF32[$0_1 + 40 >> 2];
   $9 = $10_1 + 212 | 0;
   $6_1 = $0_1 + 44 | 0;
   HEAP32[$9 >> 2] = HEAP32[$6_1 >> 2];
   $19 = $4_1;
   $4_1 = Math_fround($12_1 + Math_fround(-2.0));
   $15_1 = Math_fround($4_1 + $4_1);
   $22_1 = Math_fround($19 - $15_1);
   $20_1 = $20_1 >= $22_1 ? $20_1 : $22_1;
   HEAPF32[$10_1 + 208 >> 2] = $20_1;
   $7_1 = Math_fround($12_1 + Math_fround($7_1 + $7_1));
   HEAPF32[$8 + 84 >> 2] = $7_1;
   HEAPF32[$8 + 80 >> 2] = $4_1;
   $13 = HEAP32[$8 + 84 >> 2];
   HEAP32[$8 + 8 >> 2] = HEAP32[$8 + 80 >> 2];
   HEAP32[$8 + 12 >> 2] = $13;
   $13 = $574(16151, 0, $8 + 8 | 0, 1040);
   HEAP32[$9 >> 2] = HEAP32[$6_1 >> 2];
   HEAPF32[$10_1 + 208 >> 2] = $4_1 + $20_1;
   HEAPF32[$8 + 76 >> 2] = $7_1;
   HEAPF32[$8 + 72 >> 2] = $4_1;
   $9 = HEAP32[$8 + 76 >> 2];
   HEAP32[$8 >> 2] = HEAP32[$8 + 72 >> 2];
   HEAP32[$8 + 4 >> 2] = $9;
   $9 = $574(16147, 1, $8, 1040);
   $57(2);
   HEAP32[$2_1 >> 2] = $1_1;
   HEAP32[$2_1 + 4 >> 2] = $5_1;
   $14 = $9 ? 1 : 0 - $13 | 0;
   label$53 : {
    if (!$14) {
     $1_1 = 0;
     break label$53;
    }
    $17_1 = HEAP32[$0_1 + 20 >> 2];
    label$55 : {
     if ($17_1) {
      $9 = HEAP32[$0_1 >> 2];
      label$57 : {
       if (($9 | 0) <= 0) {
        $5_1 = ($9 | 0) > 0;
        break label$57;
       }
       $6_1 = HEAP32[$0_1 + 8 >> 2];
       if (HEAP32[$6_1 >> 2] == ($17_1 | 0)) {
        $5_1 = 1;
        $2_1 = $6_1;
        break label$57;
       }
       $13 = ($6_1 + Math_imul($9, 40) | 0) - 40 | 0;
       $5_1 = 0;
       while (1) {
        label$60 : {
         $5_1 = $5_1 + 1 | 0;
         if (($9 | 0) == ($5_1 | 0)) {
          $2_1 = $9;
          $1_1 = $13;
          break label$60;
         }
         $2_1 = $5_1;
         $1_1 = $6_1 + Math_imul($2_1, 40) | 0;
         if (($17_1 | 0) != HEAP32[$1_1 >> 2]) {
          continue
         }
        }
        break;
       };
       $5_1 = ($2_1 | 0) < ($9 | 0);
       $2_1 = $1_1;
      }
      if ($5_1) {
       break label$55
      }
     }
     $2_1 = 0;
    }
    $1_1 = 0;
    if (!$2_1) {
     break label$53
    }
    $6_1 = HEAP32[$0_1 + 8 >> 2];
    $5_1 = ($2_1 - $6_1 | 0) / 40 | 0;
    $2_1 = $14 + $5_1 | 0;
    while (1) {
     label$64 : {
      if (($2_1 | 0) >= 0) {
       $1_1 = $2_1;
       if (HEAP32[$0_1 >> 2] > ($2_1 | 0)) {
        break label$64
       }
      }
      $1_1 = $5_1;
     }
     $9 = $6_1 + Math_imul($1_1, 40) | 0;
     if (HEAPU8[$9 + 6 | 0] & 32) {
      $5_1 = $5_1 + $14 | 0;
      $2_1 = $2_1 + $14 | 0;
      $1_1 = ($2_1 | 0) < 0 | HEAP32[$0_1 >> 2] <= ($2_1 | 0) ? $9 : 0;
     } else {
      $1_1 = $9
     }
     if (!$1_1) {
      continue
     }
     break;
    };
   }
   HEAP32[$10_1 + 208 >> 2] = $21_1;
   HEAP32[$10_1 + 212 >> 2] = $25_1;
   HEAPF32[$0_1 + 48 >> 2] = HEAPF32[$0_1 + 48 >> 2] - Math_fround($15_1 + Math_fround(1.0));
   $2_1 = $3;
   if (!$1_1) {
    break label$49
   }
   $2_1 = HEAP32[$1_1 >> 2];
   if (!(HEAPU8[$1_1 + 6 | 0] & 32)) {
    HEAP32[$0_1 + 20 >> 2] = $2_1
   }
  }
  $1_1 = $2_1;
  $20_1 = HEAPF32[$8 + 52 >> 2];
  $22_1 = HEAPF32[$8 + 40 >> 2];
  $7_1 = Math_fround(HEAPF32[$8 + 36 >> 2] + $22_1);
  $12_1 = Math_fround(HEAPF32[$8 + 60 >> 2] + HEAPF32[$8 - -64 >> 2]);
  $15_1 = Math_fround($7_1 + $12_1);
  $4_1 = Math_fround(HEAPF32[$0_1 + 48 >> 2] - HEAPF32[$0_1 + 40 >> 2]);
  $3 = $15_1 < $4_1;
  label$71 : {
   if ($3) {
    $4_1 = Math_fround(Math_fround($20_1 + HEAPF32[$8 + 48 >> 2]) - Math_fround(Math_fround($4_1 - $7_1) - $12_1));
    $4_1 = $4_1 >= Math_fround(0.0) ? $4_1 : Math_fround(0.0);
    break label$71;
   }
   $4_1 = Math_fround($15_1 - $4_1);
  }
  label$73 : {
   if (!($4_1 > Math_fround(0.0)) | !(!$3 | HEAP32[$0_1 + 12 >> 2] & 64)) {
    break label$73
   }
   $13 = $16_1 + 8168 | 0;
   $5_1 = HEAP32[$8 + 56 >> 2] + HEAP32[$8 + 32 >> 2] | 0;
   $2_1 = $3 ? $5_1 : 0;
   $6_1 = HEAP32[$13 >> 2] + ($2_1 << 3) | 0;
   __inlined_func$595 : {
    label$2 : {
     label$32 : {
      label$43 : {
       $9 = $3 ? HEAP32[$8 + 44 >> 2] : $5_1;
       switch ($9 | 0) {
       case 0:
        break label$2;
       case 1:
        break label$43;
       default:
        break label$32;
       };
      }
      $7_1 = HEAPF32[$6_1 + 4 >> 2];
      if (!($7_1 >= Math_fround(0.0))) {
       break __inlined_func$595
      }
      $4_1 = Math_fround($7_1 - $4_1);
      HEAPF32[$6_1 + 4 >> 2] = $4_1 >= Math_fround(1.0) ? $4_1 : Math_fround(1.0);
      break __inlined_func$595;
     }
     $1685($6_1, $9, 8, 21);
    }
    $3 = 1;
    while (1) {
     if (!(!($4_1 > Math_fround(0.0)) | ($3 | 0) >= ($9 | 0))) {
      $7_1 = HEAPF32[$6_1 + 4 >> 2];
      label$76 : {
       label$8 : {
        label$97 : {
         label$108 : {
          while (1) {
           $12_1 = HEAPF32[(($3 << 3) + $6_1 | 0) + 4 >> 2];
           if (!($12_1 >= $7_1)) {
            break label$108
           }
           $3 = $3 + 1 | 0;
           if (($3 | 0) != ($9 | 0)) {
            continue
           }
           break;
          };
          $3 = $9;
          break label$97;
         }
         if ($12_1 >= Math_fround(0.0)) {
          break label$8
         }
        }
        $7_1 = Math_fround(HEAPF32[$6_1 + 4 >> 2] + Math_fround(-1.0));
        break label$76;
       }
       $7_1 = Math_fround($7_1 - $12_1);
      }
      $5_1 = $3;
      $10_1 = $7_1 <= Math_fround(0.0);
      if (!$10_1) {
       $12_1 = Math_fround($5_1 | 0);
       $15_1 = Math_fround($4_1 / $12_1);
       $7_1 = $7_1 > $15_1 ? $15_1 : $7_1;
       $3 = 0;
       if (($5_1 | 0) > 0) {
        while (1) {
         $14 = ($3 << 3) + $6_1 | 0;
         HEAPF32[$14 + 4 >> 2] = HEAPF32[$14 + 4 >> 2] - $7_1;
         $3 = $3 + 1 | 0;
         if (($5_1 | 0) != ($3 | 0)) {
          continue
         }
         break;
        }
       }
       $4_1 = Math_fround($4_1 - Math_fround($7_1 * $12_1));
      }
      $3 = $5_1;
      if (!$10_1) {
       continue
      }
     }
     break;
    };
    $4_1 = Math_fround(0.0);
    if (($9 | 0) > 0) {
     $3 = 0;
     while (1) {
      $5_1 = ($3 << 3) + $6_1 | 0;
      $7_1 = HEAPF32[$5_1 + 4 >> 2];
      label$1810 : {
       if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
        $10_1 = ~~$7_1;
        break label$1810;
       }
       $10_1 = -2147483648;
      }
      $12_1 = Math_fround($10_1 | 0);
      HEAPF32[$5_1 + 4 >> 2] = $12_1;
      $4_1 = Math_fround($4_1 + Math_fround($7_1 - $12_1));
      $3 = $3 + 1 | 0;
      if (($3 | 0) != ($9 | 0)) {
       continue
      }
      break;
     };
    }
    if (!($4_1 > Math_fround(0.0)) | ($9 | 0) <= 0) {
     break __inlined_func$595
    }
    $4_1 = Math_fround($4_1 + Math_fround(.009999999776482582));
    label$2011 : {
     if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
      $3 = 0;
      $10_1 = ~~$4_1;
      break label$2011;
     }
     $3 = 0;
     $10_1 = -2147483648;
    }
    while (1) {
     $5_1 = ($3 << 3) + $6_1 | 0;
     if (($10_1 | 0) > HEAP32[$5_1 >> 2]) {
      HEAPF32[$5_1 + 4 >> 2] = HEAPF32[$5_1 + 4 >> 2] + Math_fround(1.0)
     }
     $3 = $3 + 1 | 0;
     if (($3 | 0) != ($9 | 0)) {
      continue
     }
     break;
    };
   }
   if (($9 | 0) <= 0) {
    break label$73
   }
   $5_1 = $2_1 + $9 | 0;
   $9 = HEAP32[$13 >> 2];
   while (1) {
    $3 = $9 + ($2_1 << 3) | 0;
    $4_1 = HEAPF32[$3 + 4 >> 2];
    label$7613 : {
     if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
      $6_1 = ~~$4_1;
      break label$7613;
     }
     $6_1 = -2147483648;
    }
    if (($6_1 | 0) >= 0) {
     $3 = HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$3 >> 2], 40) | 0;
     $13 = HEAP32[$3 + 4 >> 2];
     $13 = ($8 + 32 | 0) + Math_imul($13 & 64 ? 0 : $13 & 128 ? 2 : 1, 12) | 0;
     $4_1 = Math_fround($6_1 | 0);
     HEAPF32[$13 + 4 >> 2] = HEAPF32[$13 + 4 >> 2] - Math_fround(HEAPF32[$3 + 20 >> 2] - $4_1);
     HEAPF32[$3 + 20 >> 2] = $4_1;
    }
    $2_1 = $2_1 + 1 | 0;
    if (($5_1 | 0) > ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  HEAP32[$0_1 + 64 >> 2] = 0;
  $2_1 = 0;
  $4_1 = Math_fround(0.0);
  $5_1 = 0;
  $7_1 = Math_fround(0.0);
  while (1) {
   $9 = ($8 + 32 | 0) + Math_imul($2_1, 12) | 0;
   if (($2_1 | 0) == 2) {
    $12_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 48 >> 2] - HEAPF32[$0_1 + 40 >> 2]) - HEAPF32[$9 + 4 >> 2]);
    $12_1 = $12_1 <= Math_fround(0.0) ? Math_fround(0.0) : $12_1;
    $4_1 = $4_1 > $12_1 ? $12_1 : $4_1;
   }
   $12_1 = $7_1;
   $3 = $2_1;
   $6_1 = HEAP32[$9 >> 2];
   label$82 : {
    if (($6_1 | 0) <= 0) {
     $7_1 = $4_1;
     break label$82;
    }
    $13 = $6_1 - 1 | 0;
    $10_1 = HEAP32[$0_1 + 8 >> 2];
    $2_1 = 0;
    while (1) {
     $14 = $10_1 + Math_imul($2_1 + $5_1 | 0, 40) | 0;
     HEAPF32[$14 + 16 >> 2] = $4_1;
     $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[$14 + 20 >> 2] + (($2_1 | 0) < ($13 | 0) ? HEAPF32[$16_1 + 5500 >> 2] : Math_fround(0.0))));
     $7_1 = $4_1;
     $2_1 = $2_1 + 1 | 0;
     if (($6_1 | 0) != ($2_1 | 0)) {
      continue
     }
     break;
    };
   }
   $4_1 = $7_1;
   $7_1 = HEAPF32[$9 + 8 >> 2];
   $4_1 = Math_fround($4_1 + $7_1);
   $5_1 = $5_1 + $6_1 | 0;
   $7_1 = Math_fround(HEAPF32[$9 + 4 >> 2] + $7_1);
   $7_1 = Math_fround($12_1 + ($7_1 >= Math_fround(0.0) ? $7_1 : Math_fround(0.0)));
   $2_1 = $3 + 1 | 0;
   if (($2_1 | 0) != 3) {
    continue
   }
   break;
  };
  HEAPF32[$0_1 + 64 >> 2] = $7_1;
  if (!($18_1 & 1)) {
   HEAP32[$0_1 + 20 >> 2] = 0
  }
  label$87 : {
   if (HEAP32[$0_1 + 20 >> 2]) {
    $2_1 = $1_1;
    break label$87;
   }
   if (HEAP32[$0_1 + 24 >> 2]) {
    $2_1 = $1_1;
    break label$87;
   }
   $2_1 = $1_1;
   if (!$11_1) {
    break label$87
   }
   $2_1 = HEAP32[$11_1 >> 2];
   HEAP32[$0_1 + 20 >> 2] = $2_1;
  }
  HEAP8[$0_1 + 104 | 0] = 0;
  HEAP32[$0_1 + 28 >> 2] = HEAP32[$0_1 + 20 >> 2];
  label$90 : {
   if (!$2_1) {
    break label$90
   }
   $9 = $2_1;
   $1_1 = HEAP32[$0_1 >> 2];
   label$91 : {
    if (($1_1 | 0) <= 0) {
     $1_1 = ($1_1 | 0) > 0;
     break label$91;
    }
    $3 = HEAP32[$0_1 + 8 >> 2];
    if (HEAP32[$3 >> 2] == ($9 | 0)) {
     $2_1 = $3;
     $1_1 = 1;
     break label$91;
    }
    $6_1 = ($3 + Math_imul($1_1, 40) | 0) - 40 | 0;
    $5_1 = 0;
    while (1) {
     label$94 : {
      $5_1 = $5_1 + 1 | 0;
      if (($1_1 | 0) == ($5_1 | 0)) {
       $5_1 = $1_1;
       $2_1 = $6_1;
       break label$94;
      }
      $2_1 = $3 + Math_imul($5_1, 40) | 0;
      if (($9 | 0) != HEAP32[$2_1 >> 2]) {
       continue
      }
     }
     break;
    };
    $1_1 = ($1_1 | 0) > ($5_1 | 0);
   }
   if (!$1_1 | !$2_1 | HEAPU8[$2_1 + 4 | 0] & 192) {
    break label$90
   }
   $15_1 = HEAPF32[$8 + 52 >> 2];
   $24 = HEAPF32[$8 + 60 >> 2];
   $7_1 = HEAPF32[$2_1 + 20 >> 2];
   $19 = HEAPF32[$2_1 + 16 >> 2];
   $4_1 = HEAPF32[HEAP32[18392] + 6468 >> 2];
   $1_1 = HEAP32[$8 + 56 >> 2];
   $12_1 = HEAPF32[$8 + 36 >> 2];
   $3 = HEAP32[$8 + 32 >> 2];
   HEAP32[$0_1 + 80 >> 2] = 0;
   $19 = Math_fround($19 - $12_1);
   $2_1 = ($2_1 - HEAP32[$0_1 + 8 >> 2] | 0) / 40 | 0;
   $7_1 = Math_fround(Math_fround($7_1 + $19) + (($2_1 + 1 | 0) < (HEAP32[$0_1 >> 2] - $1_1 | 0) ? $4_1 : Math_fround(1.0)));
   label$9714 : {
    label$98 : {
     $4_1 = Math_fround($19 - (($2_1 | 0) < ($3 | 0) ? Math_fround(-0.0) : $4_1));
     $19 = HEAPF32[$0_1 + 76 >> 2];
     if (!($4_1 < $19)) {
      $15_1 = Math_fround(Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 48 >> 2] - HEAPF32[$0_1 + 40 >> 2]) - $12_1) - $24) - $15_1);
      if (!($15_1 <= Math_fround($7_1 - $4_1))) {
       break label$98
      }
     }
     $15_1 = HEAPF32[$0_1 + 72 >> 2];
     break label$9714;
    }
    $12_1 = Math_fround($7_1 - $15_1);
    if (!($19 < $12_1)) {
     break label$90
    }
    $7_1 = HEAPF32[$0_1 + 72 >> 2];
    $15_1 = Math_fround($4_1 - $15_1);
    $4_1 = $12_1;
   }
   HEAPF32[$0_1 + 76 >> 2] = $4_1;
   $4_1 = Math_fround($15_1 - $7_1);
   HEAPF32[$0_1 + 80 >> 2] = $4_1 >= Math_fround(0.0) ? $4_1 : Math_fround(0.0);
  }
  $7_1 = HEAPF32[$0_1 + 72 >> 2];
  $15_1 = HEAPF32[$0_1 + 48 >> 2];
  $24 = HEAPF32[$0_1 + 40 >> 2];
  $4_1 = Math_fround(HEAPF32[$0_1 + 64 >> 2] - Math_fround($15_1 - $24));
  $7_1 = $4_1 > $7_1 ? $7_1 : $4_1;
  $7_1 = $7_1 >= Math_fround(0.0) ? $7_1 : Math_fround(0.0);
  HEAPF32[$0_1 + 72 >> 2] = $7_1;
  $12_1 = HEAPF32[$0_1 + 76 >> 2];
  $4_1 = $4_1 > $12_1 ? $12_1 : $4_1;
  $4_1 = $4_1 >= Math_fround(0.0) ? $4_1 : Math_fround(0.0);
  HEAPF32[$0_1 + 76 >> 2] = $4_1;
  label$100 : {
   if ($4_1 != $7_1) {
    $12_1 = HEAPF32[$0_1 + 84 >> 2];
    $19 = HEAPF32[$16_1 + 6468 >> 2];
    $23_1 = Math_fround($19 * Math_fround(70.0));
    $12_1 = $12_1 >= $23_1 ? $12_1 : $23_1;
    $23_1 = Math_fround(Math_fround(Math_abs(Math_fround($4_1 - $7_1))) / Math_fround(.30000001192092896));
    $12_1 = $12_1 >= $23_1 ? $12_1 : $23_1;
    HEAPF32[$0_1 + 84 >> 2] = $12_1;
    label$102 : {
     if (HEAP32[$16_1 + 6984 >> 2] > (HEAP32[$0_1 + 36 >> 2] + 1 | 0) | HEAPF32[$0_1 + 80 >> 2] > Math_fround($19 * Math_fround(10.0))) {
      break label$102
     }
     $12_1 = Math_fround($12_1 * HEAPF32[$16_1 + 24 >> 2]);
     if ($4_1 > $7_1) {
      $7_1 = Math_fround($7_1 + $12_1);
      $4_1 = $4_1 > $7_1 ? $7_1 : $4_1;
      break label$102;
     }
     if (!($4_1 < $7_1)) {
      $4_1 = $7_1;
      break label$102;
     }
     $7_1 = Math_fround($7_1 - $12_1);
     $4_1 = $4_1 <= $7_1 ? $7_1 : $4_1;
    }
    HEAPF32[$0_1 + 72 >> 2] = $4_1;
    break label$100;
   }
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  HEAPF32[$0_1 + 88 >> 2] = $22_1 + Math_fround($24 + HEAPF32[$8 + 36 >> 2]);
  HEAPF32[$0_1 + 92 >> 2] = Math_fround($15_1 - HEAPF32[$8 + 60 >> 2]) - $20_1;
  if (!(HEAPU8[$0_1 + 14 | 0] & 16)) {
   $2_1 = HEAP32[$0_1 + 136 >> 2];
   label$10815 : {
    if (($2_1 | 0) >= 0) {
     break label$10815
    }
    $1_1 = $2_1 + (($2_1 | 0) / 2 | 0) | 0;
    $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
    if (($2_1 | 0) >= ($1_1 | 0)) {
     break label$10815
    }
    $2_1 = $16($1_1);
    $3 = HEAP32[$0_1 + 140 >> 2];
    if ($3) {
     $1602($2_1, $3, HEAP32[$0_1 + 132 >> 2]);
     $17(HEAP32[$0_1 + 140 >> 2]);
    }
    HEAP32[$0_1 + 136 >> 2] = $1_1;
    HEAP32[$0_1 + 140 >> 2] = $2_1;
   }
   HEAP32[$0_1 + 132 >> 2] = 0;
  }
  $1_1 = HEAP32[$0_1 + 44 >> 2];
  $2_1 = HEAP32[$16_1 + 7080 >> 2];
  HEAP32[$2_1 + 208 >> 2] = HEAP32[$0_1 + 40 >> 2];
  HEAP32[$2_1 + 212 >> 2] = $1_1;
  $4_1 = HEAPF32[$0_1 + 44 >> 2];
  $7_1 = HEAPF32[$0_1 + 52 >> 2];
  HEAPF32[$8 + 96 >> 2] = HEAPF32[$0_1 + 64 >> 2];
  HEAPF32[$8 + 100 >> 2] = $7_1 - $4_1;
  $212($8 + 96 | 0, HEAPF32[$0_1 + 120 >> 2]);
  $2_1 = $2_1 + 240 | 0;
  $4_1 = HEAPF32[$2_1 >> 2];
  $7_1 = Math_fround(HEAPF32[$0_1 + 40 >> 2] + HEAPF32[$0_1 + 68 >> 2]);
  HEAPF32[$2_1 >> 2] = $4_1 >= $7_1 ? $4_1 : $7_1;
  global$0 = $8 + 112 | 0;
 }
 
 function $751($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = $2_1 & 64 ? 0 : $2_1 & 128 ? 2 : 1;
  $3 = HEAP32[$1_1 + 4 >> 2];
  $3 = $3 & 64 ? 0 : $3 & 128 ? 2 : 1;
  if (($2_1 | 0) != ($3 | 0)) {
   return $2_1 - $3 | 0
  }
  return HEAP16[$0_1 + 34 >> 1] - HEAP16[$1_1 + 34 >> 1] | 0;
 }
 
 function $753($0_1, $1_1, $2_1) {
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP16[$0_1 + 100 >> 1] = $2_1;
  HEAP32[$0_1 + 96 >> 2] = $1_1;
 }
 
 function $756($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = Math_fround(0), $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = Math_fround(0), $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = Math_fround(0), $44_1 = 0, $45_1 = 0;
  $6_1 = global$0 - 96 | 0;
  global$0 = $6_1;
  if (HEAPU8[$0_1 + 103 | 0]) {
   $750($0_1)
  }
  $16_1 = HEAP32[18392];
  $22_1 = HEAP32[$16_1 + 7080 >> 2];
  $4_1 = 0;
  label$2 : {
   if (HEAPU8[$22_1 + 143 | 0]) {
    break label$2
   }
   label$3 : {
    if (HEAPU8[$0_1 + 14 | 0] & 16) {
     $15_1 = $23($1_1, 0);
     $79($15_1);
     break label$3;
    }
    $15_1 = $76($22_1, $1_1);
   }
   if (!(HEAPU8[$2_1 | 0] | !$2_1)) {
    $0_1 = $6_1 + 88 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$6_1 + 80 >> 2] = 0;
    HEAP32[$6_1 + 84 >> 2] = 0;
    $213($6_1 + 80 | 0, $15_1, 0, 24);
    $4_1 = 0;
    break label$2;
   }
   $4_1 = HEAP32[18392];
   $68($6_1 + 80 | 0, $1_1, 0, 1, Math_fround(-1.0));
   $9 = $3 & 1048576;
   $33_1 = $9 ? 0 : $2_1;
   $8 = $33_1 ? Math_fround(HEAPF32[$4_1 + 5500 >> 2] + HEAPF32[$4_1 + 6468 >> 2]) : Math_fround(1.0);
   $7_1 = $4_1 + 5480 | 0;
   $5_1 = $2_1 | $9;
   $11_1 = HEAPF32[$4_1 + 5476 >> 2];
   $11_1 = Math_fround(Math_fround(HEAPF32[$6_1 + 80 >> 2] + $11_1) + Math_fround($11_1 + $8));
   $12_1 = Math_fround(HEAPF32[HEAP32[18392] + 6468 >> 2] * Math_fround(20.0));
   $24 = $11_1 < $12_1;
   label$8 : {
    if ($15_1) {
     $13 = HEAP32[$0_1 >> 2];
     label$10 : {
      if (($13 | 0) <= 0) {
       $4_1 = ($13 | 0) > 0;
       break label$10;
      }
      $4_1 = HEAP32[$0_1 + 8 >> 2];
      if (($15_1 | 0) == HEAP32[$4_1 >> 2]) {
       $2_1 = $4_1;
       $4_1 = 1;
       break label$10;
      }
      $9 = ($4_1 + Math_imul($13, 40) | 0) - 40 | 0;
      while (1) {
       label$13 : {
        $17_1 = $17_1 + 1 | 0;
        if (($13 | 0) == ($17_1 | 0)) {
         $2_1 = $9;
         break label$13;
        }
        $2_1 = $4_1 + Math_imul($17_1, 40) | 0;
        if (HEAP32[$2_1 >> 2] != ($15_1 | 0)) {
         continue
        }
       }
       break;
      };
      $4_1 = ($13 | 0) > ($17_1 | 0);
     }
     if ($4_1) {
      break label$8
     }
    }
    $2_1 = 0;
   }
   $8 = HEAPF32[$7_1 >> 2];
   $14 = HEAPF32[$6_1 + 84 >> 2];
   $11_1 = $24 ? $11_1 : $12_1;
   $4_1 = $2_1;
   if (!$4_1) {
    $9 = HEAP32[$0_1 >> 2];
    $2_1 = HEAP32[$0_1 + 4 >> 2];
    label$17 : {
     if (($9 | 0) != ($2_1 | 0)) {
      break label$17
     }
     $13 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
     $9 = $9 + 1 | 0;
     $9 = ($9 | 0) < ($13 | 0) ? $13 : $9;
     if (($2_1 | 0) >= ($9 | 0)) {
      break label$17
     }
     $2_1 = $16(Math_imul($9, 40));
     $13 = HEAP32[$0_1 + 8 >> 2];
     if ($13) {
      $1602($2_1, $13, Math_imul(HEAP32[$0_1 >> 2], 40));
      $17(HEAP32[$0_1 + 8 >> 2]);
     }
     HEAP32[$0_1 + 4 >> 2] = $9;
     HEAP32[$0_1 + 8 >> 2] = $2_1;
    }
    $2_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0;
    HEAP32[$2_1 + 16 >> 2] = 0;
    HEAP32[$2_1 + 20 >> 2] = 0;
    HEAP32[$2_1 + 8 >> 2] = -1;
    HEAP32[$2_1 + 12 >> 2] = -1;
    HEAP32[$2_1 >> 2] = 0;
    HEAP32[$2_1 + 4 >> 2] = 0;
    HEAP32[$2_1 + 36 >> 2] = 0;
    HEAP32[$2_1 + 28 >> 2] = -1;
    HEAP32[$2_1 + 32 >> 2] = -1;
    HEAP32[$2_1 + 24 >> 2] = 0;
    $2_1 = HEAP32[$0_1 >> 2];
    HEAP32[$0_1 >> 2] = $2_1 + 1;
    $2_1 = HEAP32[$0_1 + 8 >> 2] + Math_imul($2_1, 40) | 0;
    HEAPF32[$2_1 + 20 >> 2] = $11_1;
    HEAP32[$2_1 >> 2] = $15_1;
    HEAP8[$0_1 + 105 | 0] = 1;
   }
   HEAP16[$0_1 + 108 >> 1] = ($2_1 - HEAP32[$0_1 + 8 >> 2] | 0) / 40;
   HEAPF32[$2_1 + 24 >> 2] = $11_1;
   $9 = HEAPU16[$0_1 + 106 >> 1];
   HEAP16[$0_1 + 106 >> 1] = $9 + 1;
   HEAP16[$2_1 + 32 >> 1] = $9;
   $13 = HEAP32[$0_1 + 36 >> 2];
   $23_1 = HEAP32[$0_1 + 12 >> 2];
   $9 = HEAP32[$16_1 + 6984 >> 2];
   $17_1 = $5_1 ? $3 : $3 | 1048576;
   HEAP32[$2_1 + 4 >> 2] = $17_1;
   $7_1 = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $9;
   $3 = HEAP32[$0_1 + 132 >> 2];
   $5_1 = $3 - 1 | 0;
   HEAP32[$2_1 + 28 >> 2] = $3 >>> 0 >= $5_1 >>> 0 ? $5_1 : 0;
   $39($0_1 + 132 | 0, $1_1, ($1697($1_1) + $1_1 | 0) + 1 | 0);
   $24 = $17_1 & 2097152;
   $3 = $13 + 1 | 0;
   $7_1 = $7_1 + 1 | 0;
   $5_1 = ($7_1 | 0) >= ($9 | 0);
   label$21 : {
    if (HEAP32[$0_1 + 24 >> 2] | ($5_1 | !(HEAPU8[$0_1 + 12 | 0] & 2))) {
     break label$21
    }
    label$22 : {
     if (($3 | 0) < ($9 | 0)) {
      if (!($24 | HEAP32[$0_1 + 20 >> 2])) {
       break label$22
      }
      break label$21;
     }
     if ($24) {
      break label$21
     }
    }
    HEAP32[$0_1 + 24 >> 2] = $15_1;
   }
   if (!($24 | !($17_1 & 2) | HEAP32[$0_1 + 20 >> 2] == ($15_1 | 0))) {
    HEAP32[$0_1 + 24 >> 2] = $15_1
   }
   label$25 : {
    if (($15_1 | 0) == HEAP32[$0_1 + 28 >> 2]) {
     HEAP8[$0_1 + 104 | 0] = 1;
     $13 = 1;
     break label$25;
    }
    $13 = 0;
    if (HEAP32[$0_1 + 20 >> 2]) {
     break label$25
    }
    $13 = 0;
    if (($3 | 0) >= ($9 | 0)) {
     break label$25
    }
    $13 = 0;
    if (HEAP32[$0_1 >> 2] != 1) {
     break label$25
    }
    $13 = !(HEAPU8[$0_1 + 12 | 0] & 2);
   }
   if (!(!(!$4_1 | ($3 | 0) >= ($9 | 0)) | $5_1)) {
    $0_1 = $6_1 + 88 | 0;
    HEAP32[$0_1 >> 2] = 0;
    HEAP32[$0_1 + 4 >> 2] = 0;
    HEAP32[$6_1 + 80 >> 2] = 0;
    HEAP32[$6_1 + 84 >> 2] = 0;
    $213($6_1 + 80 | 0, $15_1, 0, 24);
    $4_1 = !$24 & $13;
    break label$2;
   }
   if (($15_1 | 0) == HEAP32[$0_1 + 20 >> 2]) {
    HEAP32[$2_1 + 12 >> 2] = HEAP32[$16_1 + 6984 >> 2]
   }
   $12_1 = Math_fround(Math_fround($8 + $8) + $14);
   $8 = HEAPF32[$2_1 + 16 >> 2];
   $14 = HEAPF32[$2_1 + 20 >> 2];
   $39_1 = HEAP32[$22_1 + 208 >> 2];
   $40_1 = HEAP32[$22_1 + 212 >> 2];
   $3 = HEAP32[$2_1 + 4 >> 2] & 192;
   label$31 : {
    if (!$3) {
     $8 = Math_fround($8 - HEAPF32[$0_1 + 72 >> 2]);
     label$33 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $4_1 = ~~$8;
       break label$33;
      }
      $4_1 = -2147483648;
     }
     $11_1 = Math_fround($4_1 | 0);
     $8 = HEAPF32[$0_1 + 40 >> 2];
     break label$31;
    }
    $11_1 = HEAPF32[$0_1 + 40 >> 2];
   }
   $25_1 = HEAPF32[$0_1 + 44 >> 2];
   $8 = Math_fround($8 + $11_1);
   HEAPF32[$22_1 + 208 >> 2] = $8;
   $11_1 = Math_fround($25_1 + Math_fround(0.0));
   HEAPF32[$22_1 + 212 >> 2] = $11_1;
   HEAPF32[$6_1 + 92 >> 2] = $12_1 + $11_1;
   HEAPF32[$6_1 + 88 >> 2] = $14 + $8;
   HEAPF32[$6_1 + 84 >> 2] = $11_1;
   HEAPF32[$6_1 + 80 >> 2] = $8;
   $4_1 = 0;
   label$35 : {
    if ($3) {
     break label$35
    }
    $4_1 = 1;
    if (HEAPF32[$6_1 + 80 >> 2] < HEAPF32[$0_1 + 88 >> 2]) {
     break label$35
    }
    $4_1 = HEAPF32[$6_1 + 88 >> 2] > HEAPF32[$0_1 + 92 >> 2];
   }
   $41_1 = $4_1;
   if ($4_1) {
    $8 = HEAPF32[$0_1 + 88 >> 2];
    HEAPF32[$6_1 + 76 >> 2] = HEAPF32[$6_1 + 84 >> 2] + Math_fround(-1.0);
    $11_1 = HEAPF32[$6_1 + 80 >> 2];
    HEAPF32[$6_1 + 72 >> 2] = $8 <= $11_1 ? $11_1 : $8;
    $8 = HEAPF32[$0_1 + 92 >> 2];
    HEAPF32[$6_1 + 68 >> 2] = HEAPF32[$6_1 + 92 >> 2];
    HEAPF32[$6_1 + 64 >> 2] = $8;
    $158($6_1 + 72 | 0, $6_1 - -64 | 0, 1);
   }
   $3 = $22_1 + 232 | 0;
   $4_1 = HEAP32[$3 + 4 >> 2];
   $5_1 = HEAP32[$3 >> 2];
   HEAPF32[$6_1 + 76 >> 2] = HEAPF32[$6_1 + 92 >> 2] - HEAPF32[$6_1 + 84 >> 2];
   HEAPF32[$6_1 + 72 >> 2] = HEAPF32[$6_1 + 88 >> 2] - HEAPF32[$6_1 + 80 >> 2];
   $212($6_1 + 72 | 0, HEAPF32[$16_1 + 5480 >> 2]);
   HEAP32[$3 >> 2] = $5_1;
   HEAP32[$3 + 4 >> 2] = $4_1;
   label$37 : {
    if (!$213($6_1 + 80 | 0, $15_1, 0, 0)) {
     if ($41_1) {
      $159()
     }
     HEAP32[$22_1 + 208 >> 2] = $39_1;
     HEAP32[$22_1 + 212 >> 2] = $40_1;
     $4_1 = $13;
     break label$37;
    }
    $3 = $24 ? 4128 : 4112;
    $42_1 = $569($6_1 + 80 | 0, $15_1, $6_1 + 72 | 0, $6_1 - -64 | 0, HEAPU8[$16_1 + 7876 | 0] ? $3 | 512 : $3);
    if (!(!$42_1 | $24)) {
     HEAP32[$0_1 + 24 >> 2] = $15_1
    }
    if (($15_1 | 0) != HEAP32[$16_1 + 7136 >> 2]) {
     $202()
    }
    label$42 : {
     if (!HEAPU8[$6_1 + 64 | 0] | ($7_1 | 0) < ($9 | 0)) {
      break label$42
     }
     if (!$181(0, Math_fround(-1.0)) | HEAPU8[$16_1 + 7876 | 0] | !(HEAP8[$0_1 + 12 | 0] & 1)) {
      break label$42
     }
     $8 = HEAPF32[$16_1 + 880 >> 2];
     label$43 : {
      if (!(!($8 < Math_fround(0.0)) | !(HEAPF32[$16_1 + 228 >> 2] < HEAPF32[$6_1 + 80 >> 2]))) {
       $3 = HEAP32[$16_1 + 232 >> 2];
       HEAP32[$6_1 + 56 >> 2] = HEAP32[$16_1 + 228 >> 2];
       HEAP32[$6_1 + 60 >> 2] = $3;
       $3 = $6_1 + 56 | 0;
       break label$43;
      }
      if (!($8 > Math_fround(0.0)) | !(HEAPF32[$16_1 + 228 >> 2] > HEAPF32[$6_1 + 88 >> 2])) {
       break label$42
      }
      $3 = HEAP32[$16_1 + 232 >> 2];
      HEAP32[$6_1 + 48 >> 2] = HEAP32[$16_1 + 228 >> 2];
      HEAP32[$6_1 + 52 >> 2] = $3;
      $3 = $6_1 + 48 | 0;
     }
     $4_1 = HEAP32[$3 + 4 >> 2];
     HEAP32[$6_1 + 24 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$6_1 + 28 >> 2] = $4_1;
     $4_1 = $6_1 + 24 | 0;
     label$1 : {
      if (!(HEAP8[$0_1 + 12 | 0] & 1)) {
       break label$1
      }
      $10_1 = HEAP32[$2_1 + 4 >> 2];
      $11_1 = $10_1 & 192 ? Math_fround(0.0) : HEAPF32[$0_1 + 76 >> 2];
      $26_1 = HEAP32[$0_1 + 8 >> 2];
      $9 = $2_1 - $26_1 | 0;
      $7_1 = ($9 | 0) / 40 | 0;
      $3 = $7_1;
      label$30 : {
       if (($9 | 0) < -39) {
        break label$30
       }
       $19 = HEAP32[18392];
       $8 = HEAPF32[$4_1 >> 2];
       $14 = Math_fround(HEAPF32[$0_1 + 40 >> 2] - $11_1);
       $18_1 = $8 < Math_fround($14 + HEAPF32[$2_1 + 16 >> 2]);
       $20_1 = $18_1 ? -1 : 1;
       $27_1 = HEAP32[$0_1 >> 2];
       $4_1 = $7_1;
       $9 = $7_1;
       while (1) {
        $3 = $4_1;
        if (($9 | 0) >= ($27_1 | 0)) {
         break label$30
        }
        $5_1 = Math_imul($9, 40) + $26_1 | 0;
        $4_1 = HEAP32[$5_1 + 4 >> 2];
        label$6 : {
         if (!($4_1 & 32 | ($4_1 ^ $10_1) & 192)) {
          $11_1 = Math_fround($14 + HEAPF32[$5_1 + 16 >> 2]);
          $12_1 = HEAPF32[$19 + 5500 >> 2];
          label$81 : {
           if ($18_1) {
            $3 = $9;
            $4_1 = 0;
            if (!(Math_fround($11_1 - $12_1) < $8)) {
             break label$81
            }
            break label$6;
           }
           $3 = $9;
           $4_1 = 0;
           if (Math_fround($12_1 + Math_fround($11_1 + HEAPF32[$5_1 + 20 >> 2])) > $8) {
            break label$6
           }
          }
          $3 = $9;
          $4_1 = 1;
          break label$6;
         }
         $4_1 = 0;
        }
        if (!$4_1) {
         break label$30
        }
        $4_1 = $3;
        $9 = $9 + $20_1 | 0;
        if (($9 | 0) >= 0) {
         continue
        }
        break;
       };
      }
      if (($3 | 0) == ($7_1 | 0)) {
       break label$1
      }
      $4_1 = HEAP32[$2_1 >> 2];
      HEAP16[$0_1 + 100 >> 1] = $3 - $7_1;
      HEAP32[$0_1 + 96 >> 2] = $4_1;
     }
    }
    $9 = HEAP32[$22_1 + 580 >> 2];
    $3 = $9;
    $26_1 = $6_1 + 80 | 0;
    $4_1 = $26_1;
    $21_1 = 34;
    label$45 : {
     if (HEAPU8[$6_1 + 64 | 0] | HEAPU8[$6_1 + 72 | 0]) {
      break label$45
     }
     $7_1 = $23_1 & 2097152;
     $21_1 = $7_1 ? 35 : 37;
     if ($13) {
      break label$45
     }
     $21_1 = $7_1 ? 33 : 36;
    }
    $19 = $51($21_1, Math_fround(1.0));
    $7_1 = global$0 - 16 | 0;
    global$0 = $7_1;
    $23_1 = HEAP32[18392];
    $8 = HEAPF32[$23_1 + ($17_1 & 2097152 ? 5484 : 5552) >> 2];
    $12_1 = HEAPF32[$4_1 >> 2];
    $11_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$4_1 + 8 >> 2] - $12_1) * Math_fround(.5)) + Math_fround(-1.0));
    $8 = $8 < $11_1 ? $8 : $11_1;
    $8 = $8 <= Math_fround(0.0) ? Math_fround(0.0) : $8;
    $14 = Math_fround(HEAPF32[$4_1 + 4 >> 2] + Math_fround(1.0));
    $11_1 = Math_fround(HEAPF32[$4_1 + 12 >> 2] + Math_fround(-1.0));
    $10_1 = HEAP32[$3 + 84 >> 2];
    $5_1 = HEAP32[$3 + 88 >> 2];
    label$11 : {
     if (($10_1 | 0) != ($5_1 | 0)) {
      break label$11
     }
     $18_1 = $5_1 ? $5_1 + (($5_1 | 0) / 2 | 0) | 0 : 8;
     $10_1 = $10_1 + 1 | 0;
     $10_1 = ($10_1 | 0) < ($18_1 | 0) ? $18_1 : $10_1;
     if (($5_1 | 0) >= ($10_1 | 0)) {
      break label$11
     }
     $5_1 = $16($10_1 << 3);
     $18_1 = HEAP32[$3 + 92 >> 2];
     if ($18_1) {
      $1602($5_1, $18_1, HEAP32[$3 + 84 >> 2] << 3);
      $17(HEAP32[$3 + 92 >> 2]);
     }
     HEAP32[$3 + 88 >> 2] = $10_1;
     HEAP32[$3 + 92 >> 2] = $5_1;
    }
    $5_1 = HEAP32[$3 + 92 >> 2] + (HEAP32[$3 + 84 >> 2] << 3) | 0;
    HEAPF32[$5_1 + 4 >> 2] = $11_1;
    HEAPF32[$5_1 >> 2] = $12_1;
    HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 84 >> 2] + 1;
    $25_1 = HEAPF32[$4_1 >> 2];
    $12_1 = Math_fround($14 + $8);
    HEAPF32[$7_1 + 12 >> 2] = $12_1;
    HEAPF32[$7_1 + 8 >> 2] = $8 + $25_1;
    $5_1 = $7_1 + 8 | 0;
    $392($3, $5_1, $8, 6, 9);
    $14 = HEAPF32[$4_1 + 8 >> 2];
    HEAPF32[$7_1 + 12 >> 2] = $12_1;
    HEAPF32[$7_1 + 8 >> 2] = $14 - $8;
    $392($3, $5_1, $8, 9, 12);
    $18_1 = HEAP32[$4_1 + 8 >> 2];
    $10_1 = HEAP32[$3 + 84 >> 2];
    $5_1 = HEAP32[$3 + 88 >> 2];
    label$5 : {
     if (($10_1 | 0) != ($5_1 | 0)) {
      break label$5
     }
     $20_1 = $5_1 ? $5_1 + (($5_1 | 0) / 2 | 0) | 0 : 8;
     $10_1 = $10_1 + 1 | 0;
     $10_1 = ($10_1 | 0) < ($20_1 | 0) ? $20_1 : $10_1;
     if (($5_1 | 0) >= ($10_1 | 0)) {
      break label$5
     }
     $5_1 = $16($10_1 << 3);
     $20_1 = HEAP32[$3 + 92 >> 2];
     if ($20_1) {
      $1602($5_1, $20_1, HEAP32[$3 + 84 >> 2] << 3);
      $17(HEAP32[$3 + 92 >> 2]);
     }
     HEAP32[$3 + 88 >> 2] = $10_1;
     HEAP32[$3 + 92 >> 2] = $5_1;
    }
    $5_1 = HEAP32[$3 + 92 >> 2] + (HEAP32[$3 + 84 >> 2] << 3) | 0;
    HEAPF32[$5_1 + 4 >> 2] = $11_1;
    HEAP32[$5_1 >> 2] = $18_1;
    $5_1 = HEAP32[$3 + 84 >> 2] + 1 | 0;
    HEAP32[$3 + 84 >> 2] = $5_1;
    $389($3, HEAP32[$3 + 92 >> 2], $5_1, $19);
    HEAP32[$3 + 84 >> 2] = 0;
    if (HEAPF32[$23_1 + 5556 >> 2] > Math_fround(0.0)) {
     $14 = Math_fround(HEAPF32[$4_1 >> 2] + Math_fround(.5));
     if (!HEAP32[$3 + 88 >> 2]) {
      $5_1 = $16(64);
      $10_1 = HEAP32[$3 + 92 >> 2];
      if ($10_1) {
       $1602($5_1, $10_1, HEAP32[$3 + 84 >> 2] << 3);
       $17(HEAP32[$3 + 92 >> 2]);
      }
      HEAP32[$3 + 88 >> 2] = 8;
      HEAP32[$3 + 92 >> 2] = $5_1;
     }
     $5_1 = HEAP32[$3 + 92 >> 2] + (HEAP32[$3 + 84 >> 2] << 3) | 0;
     HEAPF32[$5_1 + 4 >> 2] = $11_1;
     HEAPF32[$5_1 >> 2] = $14;
     HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 84 >> 2] + 1;
     $14 = HEAPF32[$4_1 >> 2];
     $12_1 = Math_fround($12_1 + Math_fround(.5));
     HEAPF32[$7_1 + 12 >> 2] = $12_1;
     HEAPF32[$7_1 + 8 >> 2] = Math_fround($8 + $14) + Math_fround(.5);
     $5_1 = $7_1 + 8 | 0;
     $392($3, $5_1, $8, 6, 9);
     $14 = HEAPF32[$4_1 + 8 >> 2];
     HEAPF32[$7_1 + 12 >> 2] = $12_1;
     HEAPF32[$7_1 + 8 >> 2] = Math_fround($14 - $8) + Math_fround(-.5);
     $392($3, $5_1, $8, 9, 12);
     $8 = Math_fround(HEAPF32[$4_1 + 8 >> 2] + Math_fround(-.5));
     $5_1 = HEAP32[$3 + 84 >> 2];
     $4_1 = HEAP32[$3 + 88 >> 2];
     label$12 : {
      if (($5_1 | 0) != ($4_1 | 0)) {
       break label$12
      }
      $10_1 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : 8;
      $5_1 = $5_1 + 1 | 0;
      $5_1 = ($5_1 | 0) < ($10_1 | 0) ? $10_1 : $5_1;
      if (($4_1 | 0) >= ($5_1 | 0)) {
       break label$12
      }
      $4_1 = $16($5_1 << 3);
      $10_1 = HEAP32[$3 + 92 >> 2];
      if ($10_1) {
       $1602($4_1, $10_1, HEAP32[$3 + 84 >> 2] << 3);
       $17(HEAP32[$3 + 92 >> 2]);
      }
      HEAP32[$3 + 88 >> 2] = $5_1;
      HEAP32[$3 + 92 >> 2] = $4_1;
     }
     $4_1 = HEAP32[$3 + 92 >> 2] + (HEAP32[$3 + 84 >> 2] << 3) | 0;
     HEAPF32[$4_1 + 4 >> 2] = $11_1;
     HEAPF32[$4_1 >> 2] = $8;
     HEAP32[$3 + 84 >> 2] = HEAP32[$3 + 84 >> 2] + 1;
     $4_1 = $51(5, Math_fround(1.0));
     $388($3, HEAP32[$3 + 92 >> 2], HEAP32[$3 + 84 >> 2], $4_1, 0, HEAPF32[$23_1 + 5556 >> 2]);
     HEAP32[$3 + 84 >> 2] = 0;
    }
    global$0 = $7_1 + 16 | 0;
    $73($26_1, $15_1, 1);
    label$47 : {
     if (!$89(32)) {
      break label$47
     }
     label$48 : {
      if (!$176(1, 0)) {
       $3 = $177(1);
       if ($24) {
        break label$47
       }
       if ($3) {
        break label$48
       }
       break label$47;
      }
      if ($24) {
       break label$47
      }
     }
     HEAP32[$0_1 + 24 >> 2] = $15_1;
    }
    $17_1 = $17_1 | HEAP32[$0_1 + 12 >> 2] >>> 1 & 4;
    if ($33_1) {
     $4_1 = $268($15_1)
    } else {
     $4_1 = 0
    }
    $3 = HEAP32[$0_1 + 120 >> 2];
    $7_1 = HEAP32[$0_1 + 116 >> 2];
    HEAP32[$6_1 + 16 >> 2] = $7_1;
    HEAP32[$6_1 + 20 >> 2] = $3;
    HEAP32[$6_1 + 32 >> 2] = $7_1;
    HEAP32[$6_1 + 36 >> 2] = $3;
    $23_1 = $6_1 + 80 | 0;
    $10_1 = $6_1 + 16 | 0;
    $3 = $6_1 + 46 | 0;
    $7_1 = global$0 - 112 | 0;
    global$0 = $7_1;
    $5_1 = HEAP32[18392];
    $68($7_1 + 104 | 0, $1_1, 0, 1, Math_fround(-1.0));
    $26_1 = $6_1 + 47 | 0;
    if ($26_1) {
     HEAP8[$26_1 | 0] = 0
    }
    if ($3) {
     HEAP8[$3 | 0] = 0
    }
    $32_1 = HEAPF32[$23_1 + 8 >> 2];
    $14 = HEAPF32[$23_1 >> 2];
    $43_1 = Math_fround($32_1 - $14);
    label$32 : {
     if ($43_1 <= Math_fround(1.0)) {
      break label$32
     }
     $8 = HEAPF32[$10_1 + 4 >> 2];
     $25_1 = HEAPF32[$23_1 + 4 >> 2];
     $12_1 = HEAPF32[$10_1 >> 2];
     HEAPF32[$7_1 + 100 >> 2] = HEAPF32[$23_1 + 12 >> 2];
     $11_1 = Math_fround($32_1 - $12_1);
     HEAPF32[$7_1 + 96 >> 2] = $11_1;
     HEAPF32[$7_1 + 92 >> 2] = $25_1 + $8;
     $8 = Math_fround($14 + $12_1);
     HEAPF32[$7_1 + 88 >> 2] = $8;
     if ($3) {
      HEAP8[$3 | 0] = Math_fround($8 + HEAPF32[$7_1 + 104 >> 2]) > $11_1
     }
     $8 = HEAPF32[$5_1 + 6468 >> 2];
     HEAPF32[$7_1 + 84 >> 2] = $25_1;
     $12_1 = Math_fround(Math_fround($32_1 - Math_fround($12_1 + $12_1)) - $8);
     $12_1 = $12_1 <= $14 ? $14 : $12_1;
     HEAPF32[$7_1 + 80 >> 2] = $12_1;
     $14 = Math_fround($8 + $12_1);
     $3 = $14 <= HEAPF32[$23_1 + 8 >> 2] & $17_1;
     $21_1 = 0;
     label$53 : {
      if (!$4_1) {
       break label$53
      }
      label$7 : {
       if ($13) {
        break label$7
       }
       $12_1 = HEAPF32[$5_1 + 5560 >> 2];
       if (($8 >= $12_1 ? $8 : $12_1) <= $43_1) {
        break label$7
       }
       $21_1 = 0;
       break label$53;
      }
      $19 = HEAP32[$5_1 + 7116 >> 2];
      label$84 : {
       if (($19 | 0) == ($15_1 | 0) | ($4_1 | 0) == ($19 | 0)) {
        break label$84
       }
       $19 = HEAP32[$5_1 + 7136 >> 2];
       if (($19 | 0) == ($15_1 | 0)) {
        break label$84
       }
       $21_1 = 0;
       if (($4_1 | 0) != ($19 | 0)) {
        break label$53
       }
      }
      $21_1 = 1;
     }
     label$9 : {
      if ($21_1) {
       $44_1 = $7_1 + 72 | 0;
       $45_1 = $5_1 + 7296 | 0;
       HEAP32[$44_1 >> 2] = HEAP32[$45_1 >> 2];
       $19 = $5_1 + 7288 | 0;
       $20_1 = HEAP32[$19 + 4 >> 2];
       $18_1 = $7_1 - -64 | 0;
       HEAP32[$18_1 >> 2] = HEAP32[$19 >> 2];
       HEAP32[$18_1 + 4 >> 2] = $20_1;
       $20_1 = $5_1 + 7280 | 0;
       $28_1 = HEAP32[$20_1 + 4 >> 2];
       $27_1 = $7_1 + 56 | 0;
       HEAP32[$27_1 >> 2] = HEAP32[$20_1 >> 2];
       HEAP32[$27_1 + 4 >> 2] = $28_1;
       $28_1 = $5_1 + 7272 | 0;
       $29_1 = HEAP32[$28_1 + 4 >> 2];
       $34_1 = $7_1 + 48 | 0;
       HEAP32[$34_1 >> 2] = HEAP32[$28_1 >> 2];
       HEAP32[$34_1 + 4 >> 2] = $29_1;
       $29_1 = $5_1 + 7264 | 0;
       $30 = HEAP32[$29_1 + 4 >> 2];
       $35_1 = $7_1 + 40 | 0;
       HEAP32[$35_1 >> 2] = HEAP32[$29_1 >> 2];
       HEAP32[$35_1 + 4 >> 2] = $30;
       $30 = $5_1 + 7256 | 0;
       $31_1 = HEAP32[$30 + 4 >> 2];
       $36_1 = $7_1 + 32 | 0;
       HEAP32[$36_1 >> 2] = HEAP32[$30 >> 2];
       HEAP32[$36_1 + 4 >> 2] = $31_1;
       $31_1 = $5_1 + 7248 | 0;
       $38_1 = HEAP32[$31_1 + 4 >> 2];
       $37 = $7_1 + 24 | 0;
       HEAP32[$37 >> 2] = HEAP32[$31_1 >> 2];
       HEAP32[$37 + 4 >> 2] = $38_1;
       $38_1 = HEAP32[$5_1 + 7244 >> 2];
       HEAP32[$7_1 + 16 >> 2] = HEAP32[$5_1 + 7240 >> 2];
       HEAP32[$7_1 + 20 >> 2] = $38_1;
       $59(11, $10_1);
       $10_1 = $576($4_1, $7_1 + 80 | 0);
       $60(1);
       HEAP32[$45_1 >> 2] = HEAP32[$44_1 >> 2];
       $4_1 = HEAP32[$18_1 + 4 >> 2];
       HEAP32[$19 >> 2] = HEAP32[$18_1 >> 2];
       HEAP32[$19 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$27_1 + 4 >> 2];
       HEAP32[$20_1 >> 2] = HEAP32[$27_1 >> 2];
       HEAP32[$20_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$34_1 + 4 >> 2];
       HEAP32[$28_1 >> 2] = HEAP32[$34_1 >> 2];
       HEAP32[$28_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$35_1 + 4 >> 2];
       HEAP32[$29_1 >> 2] = HEAP32[$35_1 >> 2];
       HEAP32[$29_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$36_1 + 4 >> 2];
       HEAP32[$30 >> 2] = HEAP32[$36_1 >> 2];
       HEAP32[$30 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$37 + 4 >> 2];
       HEAP32[$31_1 >> 2] = HEAP32[$37 >> 2];
       HEAP32[$31_1 + 4 >> 2] = $4_1;
       $4_1 = HEAP32[$7_1 + 20 >> 2];
       HEAP32[$5_1 + 7240 >> 2] = HEAP32[$7_1 + 16 >> 2];
       HEAP32[$5_1 + 7244 >> 2] = $4_1;
       if (!($17_1 & 4)) {
        $10_1 = $176(2, 0) ? 1 : $10_1
       }
       $4_1 = 1;
       break label$9;
      }
      $10_1 = 0;
      $4_1 = $3;
      if (!$3) {
       break label$9
      }
      $12_1 = HEAPF32[$5_1 + 5476 >> 2];
      $32_1 = Math_fround($25_1 + $8);
      $25_1 = HEAPF32[$5_1 + 5480 >> 2];
      HEAPF32[$7_1 + 12 >> 2] = Math_fround(HEAPF32[$7_1 + 84 >> 2] + Math_fround($32_1 + Math_fround($25_1 + $25_1))) * Math_fround(.5);
      HEAPF32[$7_1 + 8 >> 2] = Math_fround(HEAPF32[$7_1 + 80 >> 2] + Math_fround($14 + Math_fround($12_1 + $12_1))) * Math_fround(.5);
      $4_1 = $51(0, Math_fround(1.0));
      $17_1 = HEAP32[$7_1 + 12 >> 2];
      HEAP32[$7_1 >> 2] = HEAP32[$7_1 + 8 >> 2];
      HEAP32[$7_1 + 4 >> 2] = $17_1;
      $477($9, $7_1, $4_1);
      $4_1 = $3;
     }
     label$135 : {
      if (!$4_1) {
       $8 = $21_1 ? $11_1 : Math_fround(HEAPF32[$23_1 + 8 >> 2] + Math_fround(-1.0));
       break label$135;
      }
      $12_1 = Math_fround($8 * Math_fround(.800000011920929));
      HEAPF32[$7_1 + 96 >> 2] = HEAPF32[$7_1 + 96 >> 2] - ($3 ? $12_1 : Math_fround(0.0));
      $8 = Math_fround($11_1 - ($21_1 ? $8 : $12_1));
      $11_1 = $8;
     }
     $70($9, $7_1 + 88 | 0, $7_1 + 96 | 0, $11_1, $8, $1_1, 0, $7_1 + 104 | 0);
     if (!$26_1) {
      break label$32
     }
     HEAP8[$26_1 | 0] = $10_1;
    }
    global$0 = $7_1 + 112 | 0;
    label$52 : {
     if (!$33_1 | !HEAPU8[$6_1 + 47 | 0]) {
      break label$52
     }
     HEAP8[$33_1 | 0] = 0;
     if (!(HEAP8[$2_1 + 4 | 0] & 1)) {
      HEAP8[$2_1 + 36 | 0] = 1;
      if (HEAP32[$0_1 + 28 >> 2] != HEAP32[$2_1 >> 2]) {
       break label$52
      }
      HEAP32[$2_1 + 8 >> 2] = -1;
      HEAP32[$0_1 + 20 >> 2] = 0;
      HEAP32[$0_1 + 24 >> 2] = 0;
      break label$52;
     }
     $3 = HEAP32[$2_1 >> 2];
     if (($3 | 0) == HEAP32[$0_1 + 28 >> 2]) {
      break label$52
     }
     HEAP32[$0_1 + 24 >> 2] = $3;
    }
    if ($41_1) {
     $159()
    }
    HEAP32[$22_1 + 208 >> 2] = $39_1;
    HEAP32[$22_1 + 212 >> 2] = $40_1;
    label$55 : {
     if (!HEAPU8[$6_1 + 46 | 0] | HEAP32[$16_1 + 7116 >> 2] != ($15_1 | 0) | (HEAPU8[$6_1 + 64 | 0] | !(HEAPF32[$16_1 + 7132 >> 2] > HEAPF32[$16_1 + 12080 >> 2]))) {
      break label$55
     }
     if (!$89(0) | HEAPU8[$0_1 + 12 | 0] & 32 | HEAPU8[$2_1 + 4 | 0] & 16) {
      break label$55
     }
     $0_1 = $62($1_1);
     HEAP32[$6_1 + 4 >> 2] = $1_1;
     HEAP32[$6_1 >> 2] = $0_1 - $1_1;
     $162(5445, $6_1);
    }
    $4_1 = $24 ? $42_1 : $13;
   }
  }
  $0_1 = $4_1;
  global$0 = $6_1 + 96 | 0;
  return $0_1;
 }
 
 function $759() {
  var $0_1 = 0;
  label$1 : {
   $0_1 = HEAP32[18392];
   if (HEAPU8[HEAP32[$0_1 + 7080 >> 2] + 143 | 0]) {
    break label$1
   }
   $0_1 = HEAP32[$0_1 + 8112 >> 2];
   if (!$0_1 | HEAPU8[(HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP16[$0_1 + 108 >> 1], 40) | 0) + 4 | 0] & 8) {
    break label$1
   }
   $269();
  }
 }
 
 function $762($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 32 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  if (!HEAP32[24402]) {
   HEAP32[24405] = -1;
   HEAP32[24406] = -1;
   HEAP32[24403] = 4096;
   HEAP32[24404] = 4096;
   HEAP32[24402] = global$0 - 4 & -16 ^ 1431655768;
   HEAP32[24407] = 0;
   HEAP32[24395] = 0;
  }
  $11_1 = HEAP32[24290];
  if ($11_1) {
   $5_1 = 97584;
   $9 = 1;
   $12_1 = HEAP32[24287];
   $6_1 = $12_1 + 40 | 0;
   $8 = $6_1;
   while (1) {
    $7_1 = HEAP32[$5_1 >> 2];
    $4_1 = $7_1 + ($7_1 + 8 & 7 ? -8 - $7_1 & 7 : 0) | 0;
    $3 = HEAP32[$5_1 + 4 >> 2] + $7_1 | 0;
    while (1) {
     label$4 : {
      if (($4_1 | 0) == ($11_1 | 0) | $3 >>> 0 <= $4_1 >>> 0) {
       break label$4
      }
      $1_1 = HEAP32[$4_1 + 4 >> 2];
      if (($1_1 | 0) == 7) {
       break label$4
      }
      $10_1 = $1_1 & -8;
      $1_1 = ($1_1 & 3) == 1;
      $8 = ($1_1 ? $10_1 : 0) + $8 | 0;
      $6_1 = $6_1 + $10_1 | 0;
      $9 = $1_1 + $9 | 0;
      $4_1 = $4_1 + $10_1 | 0;
      if ($7_1 >>> 0 <= $4_1 >>> 0) {
       continue
      }
     }
     break;
    };
    $5_1 = HEAP32[$5_1 + 8 >> 2];
    if ($5_1) {
     continue
    }
    break;
   };
   HEAP32[$2_1 + 4 >> 2] = $9;
   HEAP32[$2_1 >> 2] = $6_1;
   $3 = HEAP32[24392];
   HEAP32[$2_1 + 16 >> 2] = $3 - $6_1;
   $1_1 = HEAP32[24393];
   HEAP32[$2_1 + 36 >> 2] = $12_1;
   HEAP32[$2_1 + 32 >> 2] = $8;
   HEAP32[$2_1 + 28 >> 2] = $3 - $8;
   HEAP32[$2_1 + 20 >> 2] = $1_1;
  }
  $3 = fimport$0() | 0;
  HEAP32[$0_1 >> 2] = $3;
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(13892) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 4 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(4824) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 8 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(4801) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 12 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(4808) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 16 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(11919) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 20 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(4792) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 24 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(4800) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 28 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(4814) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 32 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(4823) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$2_1 + 40 >> 2] = HEAP32[$2_1 + 36 >> 2];
  $1_1 = fimport$1(72724, $2_1 + 40 | 0) | 0;
  $0_1 = fimport$2(2193) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  global$0 = $2_1 + 48 | 0;
 }
 
 function $763($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3 = HEAP32[$0_1 >> 2];
  $6_1 = fimport$2(1643) | 0;
  $3 = fimport$7($3 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  $4_1 = +fimport$5($3 | 0, 72808, $5_1 + 8 | 0);
  fimport$6(HEAP32[$5_1 + 8 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround($4_1);
  }
  HEAPF32[$1_1 >> 2] = $2_1;
  fimport$4($3 | 0);
  $0_1 = HEAP32[$0_1 >> 2];
  $3 = fimport$2(1245) | 0;
  $0_1 = fimport$7($0_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $4_1 = +fimport$5($0_1 | 0, 72808, $5_1 + 12 | 0);
  fimport$6(HEAP32[$5_1 + 12 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $2_1 = Math_fround($4_1);
  }
  HEAPF32[$1_1 + 4 >> 2] = $2_1;
  fimport$4($0_1 | 0);
  global$0 = $5_1 + 16 | 0;
  return $1_1;
 }
 
 function $764($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAPF32[$3 + 8 >> 2] = HEAPF32[$1_1 >> 2];
  $4_1 = fimport$1(72796, $3 + 8 | 0) | 0;
  $6_1 = HEAP32[$2_1 >> 2];
  $5_1 = fimport$2(1643) | 0;
  fimport$3($6_1 | 0, $5_1 | 0, $4_1 | 0);
  fimport$4($5_1 | 0);
  fimport$4($4_1 | 0);
  HEAPF32[$3 + 8 >> 2] = HEAPF32[$1_1 + 4 >> 2];
  $1_1 = fimport$1(72796, $3 + 8 | 0) | 0;
  $5_1 = HEAP32[$2_1 >> 2];
  $4_1 = fimport$2(1245) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $1_1 | 0);
  fimport$4($4_1 | 0);
  fimport$4($1_1 | 0);
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$2_1 >> 2] = 0;
  global$0 = $3 + 16 | 0;
 }
 
 function $765($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0;
  $5_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1643) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, HEAP32[$2_1 >> 2]);
  fimport$4($4_1 | 0);
  $4_1 = HEAP32[$1_1 >> 2];
  $2_1 = fimport$2(1245) | 0;
  fimport$3($4_1 | 0, $2_1 | 0, HEAP32[$3 >> 2]);
  fimport$4($2_1 | 0);
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $766($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[$2_1 >> 2];
  $4_1 = fimport$2(1643) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $5_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1643) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  $2_1 = HEAP32[$2_1 >> 2];
  $3 = fimport$2(1245) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $4_1 = HEAP32[$1_1 >> 2];
  $3 = fimport$2(1245) | 0;
  fimport$3($4_1 | 0, $3 | 0, $2_1 | 0);
  fimport$4($3 | 0);
  fimport$4($2_1 | 0);
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $767($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2];
  $3 = fimport$2(1643) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $3 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1643) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $4_1 = fimport$8($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  fimport$4($2_1 | 0);
  $2_1 = 0;
  if ($4_1) {
   $0_1 = HEAP32[$0_1 >> 2];
   $2_1 = fimport$2(1245) | 0;
   $0_1 = fimport$7($0_1 | 0, $2_1 | 0) | 0;
   fimport$4($2_1 | 0);
   $1_1 = HEAP32[$1_1 >> 2];
   $2_1 = fimport$2(1245) | 0;
   $1_1 = fimport$7($1_1 | 0, $2_1 | 0) | 0;
   fimport$4($2_1 | 0);
   $2_1 = fimport$8($0_1 | 0, $1_1 | 0) | 0;
   fimport$4($1_1 | 0);
   fimport$4($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $768($0_1, $1_1) {
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3 = HEAP32[$0_1 >> 2];
  $6_1 = fimport$2(1643) | 0;
  $3 = fimport$7($3 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  $4_1 = +fimport$5($3 | 0, 72808, $5_1 + 12 | 0);
  fimport$6(HEAP32[$5_1 + 12 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround($4_1);
  }
  HEAPF32[$1_1 >> 2] = $2_1;
  fimport$4($3 | 0);
  $3 = HEAP32[$0_1 >> 2];
  $6_1 = fimport$2(1245) | 0;
  $3 = fimport$7($3 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  $4_1 = +fimport$5($3 | 0, 72808, $5_1 + 12 | 0);
  fimport$6(HEAP32[$5_1 + 12 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $2_1 = Math_fround($4_1);
  }
  HEAPF32[$1_1 + 4 >> 2] = $2_1;
  fimport$4($3 | 0);
  $3 = HEAP32[$0_1 >> 2];
  $6_1 = fimport$2(1063) | 0;
  $3 = fimport$7($3 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  $4_1 = +fimport$5($3 | 0, 72808, $5_1 + 12 | 0);
  fimport$6(HEAP32[$5_1 + 12 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $2_1 = Math_fround($4_1);
  }
  HEAPF32[$1_1 + 8 >> 2] = $2_1;
  fimport$4($3 | 0);
  $0_1 = HEAP32[$0_1 >> 2];
  $3 = fimport$2(1857) | 0;
  $0_1 = fimport$7($0_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $4_1 = +fimport$5($0_1 | 0, 72808, $5_1 + 12 | 0);
  fimport$6(HEAP32[$5_1 + 12 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$4 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$4
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$4
   }
   $2_1 = Math_fround($4_1);
  }
  HEAPF32[$1_1 + 12 >> 2] = $2_1;
  fimport$4($0_1 | 0);
  global$0 = $5_1 + 16 | 0;
  return $1_1;
 }
 
 function $770($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0;
  $7_1 = HEAP32[$1_1 >> 2];
  $6_1 = fimport$2(1643) | 0;
  fimport$3($7_1 | 0, $6_1 | 0, HEAP32[$2_1 >> 2]);
  fimport$4($6_1 | 0);
  $6_1 = HEAP32[$1_1 >> 2];
  $2_1 = fimport$2(1245) | 0;
  fimport$3($6_1 | 0, $2_1 | 0, HEAP32[$3 >> 2]);
  fimport$4($2_1 | 0);
  $3 = HEAP32[$1_1 >> 2];
  $2_1 = fimport$2(1063) | 0;
  fimport$3($3 | 0, $2_1 | 0, HEAP32[$4_1 >> 2]);
  fimport$4($2_1 | 0);
  $3 = HEAP32[$1_1 >> 2];
  $2_1 = fimport$2(1857) | 0;
  fimport$3($3 | 0, $2_1 | 0, HEAP32[$5_1 >> 2]);
  fimport$4($2_1 | 0);
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $771($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[$2_1 >> 2];
  $4_1 = fimport$2(1643) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $5_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1643) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  $3 = HEAP32[$2_1 >> 2];
  $4_1 = fimport$2(1245) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $5_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1245) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  $3 = HEAP32[$2_1 >> 2];
  $4_1 = fimport$2(1063) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $5_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1063) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  $2_1 = HEAP32[$2_1 >> 2];
  $3 = fimport$2(1857) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $4_1 = HEAP32[$1_1 >> 2];
  $3 = fimport$2(1857) | 0;
  fimport$3($4_1 | 0, $3 | 0, $2_1 | 0);
  fimport$4($3 | 0);
  fimport$4($2_1 | 0);
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$1_1 >> 2] = 0;
 }
 
 function $772($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = HEAP32[$0_1 >> 2];
  $3 = fimport$2(1643) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $3 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1643) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $4_1 = fimport$8($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  fimport$4($2_1 | 0);
  if (!$4_1) {
   return 0
  }
  $2_1 = HEAP32[$0_1 >> 2];
  $3 = fimport$2(1245) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $3 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1245) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $4_1 = fimport$8($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  fimport$4($2_1 | 0);
  if (!$4_1) {
   return 0
  }
  $2_1 = HEAP32[$0_1 >> 2];
  $3 = fimport$2(1063) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $3 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(1063) | 0;
  $3 = fimport$7($3 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $4_1 = fimport$8($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  fimport$4($2_1 | 0);
  $2_1 = 0;
  if ($4_1) {
   $0_1 = HEAP32[$0_1 >> 2];
   $2_1 = fimport$2(1857) | 0;
   $0_1 = fimport$7($0_1 | 0, $2_1 | 0) | 0;
   fimport$4($2_1 | 0);
   $1_1 = HEAP32[$1_1 >> 2];
   $2_1 = fimport$2(1857) | 0;
   $1_1 = fimport$7($1_1 | 0, $2_1 | 0) | 0;
   fimport$4($2_1 | 0);
   $2_1 = fimport$8($0_1 | 0, $1_1 | 0) | 0;
   fimport$4($1_1 | 0);
   fimport$4($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $773($0_1, $1_1) {
  var $2_1 = 0, $3 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0.0, $12_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $7_1 = $426($0_1);
  $8 = HEAP32[$1_1 >> 2];
  $0_1 = fimport$2(13688) | 0;
  $10_1 = fimport$7($8 | 0, $0_1 | 0) | 0;
  fimport$4($0_1 | 0);
  label$1 : {
   if (($10_1 | 0) == 2) {
    HEAP32[$7_1 >> 2] = 0;
    HEAP32[$7_1 + 4 >> 2] = 0;
    break label$1;
   }
   $0_1 = fimport$2(6308) | 0;
   $4_1 = fimport$7($10_1 | 0, $0_1 | 0) | 0;
   fimport$4($0_1 | 0);
   $5_1 = fimport$2(3533) | 0;
   $0_1 = fimport$7($10_1 | 0, $5_1 | 0) | 0;
   fimport$4($5_1 | 0);
   $3 = +fimport$5($0_1 | 0, 72760, $2_1 + 16 | 0);
   fimport$6(HEAP32[$2_1 + 16 >> 2]);
   fimport$4($0_1 | 0);
   $5_1 = fimport$2(8631) | 0;
   $0_1 = fimport$7($10_1 | 0, $5_1 | 0) | 0;
   fimport$4($5_1 | 0);
   $11_1 = +fimport$5($0_1 | 0, 72760, $2_1 + 16 | 0);
   fimport$6(HEAP32[$2_1 + 16 >> 2]);
   fimport$4($0_1 | 0);
   HEAP32[$7_1 >> 2] = 0;
   HEAP32[$7_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = $11_1 < 4294967296.0 & $11_1 >= 0.0 ? ~~$11_1 >>> 0 : 0;
   HEAP32[$2_1 >> 2] = $3 < 4294967296.0 & $3 >= 0.0 ? ~~$3 >>> 0 : 0;
   $1675(19156, $2_1);
   fimport$4($4_1 | 0);
  }
  $0_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(5409) | 0;
  $0_1 = fimport$7($0_1 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $8 = $2_1 + 16 | 0;
  $4_1 = $8;
  $3 = +fimport$5($0_1 | 0, 72652, $4_1 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  HEAP8[$7_1 + 8 | 0] = $3 != 0.0;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $5_1 = fimport$2(7123) | 0;
  $0_1 = fimport$7($0_1 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  $3 = +fimport$5($0_1 | 0, 72724, $4_1 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  HEAP32[$7_1 + 12 >> 2] = Math_abs($3) < 2147483648.0 ? ~~$3 : -2147483648;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(4774) | 0;
  $0_1 = fimport$7($0_1 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $3 = +fimport$5($0_1 | 0, 72808, $8 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  $6_1 = Math_fround(3402823466385288598117041.0e14);
  label$9 : {
   if ($3 >= 3402823466385288598117041.0e14) {
    break label$9
   }
   $6_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($3 <= -3402823466385288598117041.0e14) {
    break label$9
   }
   $6_1 = Math_fround($3);
  }
  HEAPF32[$7_1 + 16 >> 2] = $6_1;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(14893) | 0;
  $0_1 = fimport$7($0_1 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $8 = $2_1 + 16 | 0;
  $3 = +fimport$5($0_1 | 0, 72724, $8 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  HEAP32[$7_1 + 20 >> 2] = Math_abs($3) < 2147483648.0 ? ~~$3 : -2147483648;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(14751) | 0;
  $0_1 = fimport$7($0_1 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $3 = +fimport$5($0_1 | 0, 72724, $2_1 + 16 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  HEAP32[$7_1 + 24 >> 2] = Math_abs($3) < 2147483648.0 ? ~~$3 : -2147483648;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $4_1 = fimport$2(14882) | 0;
  $0_1 = fimport$7($0_1 | 0, $4_1 | 0) | 0;
  fimport$4($4_1 | 0);
  $4_1 = $8;
  $3 = +fimport$5($0_1 | 0, 72652, $4_1 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  HEAP8[$7_1 + 28 | 0] = $3 != 0.0;
  fimport$4($0_1 | 0);
  $9 = HEAP32[$1_1 >> 2];
  $0_1 = fimport$2(9411) | 0;
  $5_1 = fimport$7($9 | 0, $0_1 | 0) | 0;
  HEAP32[$2_1 + 28 >> 2] = $5_1;
  fimport$4($0_1 | 0);
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  $9 = $2_1 + 28 | 0;
  $0_1 = $763($9, $4_1);
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$7_1 + 32 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 36 >> 2] = $4_1;
  fimport$4($5_1 | 0);
  $4_1 = HEAP32[$1_1 >> 2];
  $0_1 = fimport$2(3521) | 0;
  $4_1 = fimport$7($4_1 | 0, $0_1 | 0) | 0;
  HEAP32[$2_1 + 28 >> 2] = $4_1;
  fimport$4($0_1 | 0);
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  $0_1 = $763($9, $8);
  $5_1 = HEAP32[$0_1 + 4 >> 2];
  HEAP32[$7_1 + 40 >> 2] = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 44 >> 2] = $5_1;
  fimport$4($4_1 | 0);
  $8 = HEAP32[$1_1 >> 2];
  $0_1 = fimport$2(5204) | 0;
  $4_1 = fimport$7($8 | 0, $0_1 | 0) | 0;
  fimport$4($0_1 | 0);
  if (($4_1 | 0) == 2) {
   $0_1 = 0
  } else {
   $3 = +fimport$5($4_1 | 0, 72748, $2_1 + 16 | 0);
   fimport$6(HEAP32[$2_1 + 16 >> 2]);
   $0_1 = Math_abs($3) < 2147483648.0 ? ~~$3 : -2147483648;
  }
  HEAP32[$7_1 + 48 >> 2] = $0_1;
  $0_1 = HEAP32[$1_1 >> 2];
  $5_1 = fimport$2(14322) | 0;
  $0_1 = fimport$7($0_1 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  $3 = +fimport$5($0_1 | 0, 72808, $2_1 + 16 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  $6_1 = Math_fround(3402823466385288598117041.0e14);
  label$18 : {
   if ($3 >= 3402823466385288598117041.0e14) {
    break label$18
   }
   $6_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($3 <= -3402823466385288598117041.0e14) {
    break label$18
   }
   $6_1 = Math_fround($3);
  }
  HEAPF32[$7_1 + 52 >> 2] = $6_1;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $5_1 = fimport$2(14305) | 0;
  $0_1 = fimport$7($0_1 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  $3 = +fimport$5($0_1 | 0, 72808, $2_1 + 16 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  $6_1 = Math_fround(3402823466385288598117041.0e14);
  label$19 : {
   if ($3 >= 3402823466385288598117041.0e14) {
    break label$19
   }
   $6_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($3 <= -3402823466385288598117041.0e14) {
    break label$19
   }
   $6_1 = Math_fround($3);
  }
  HEAPF32[$7_1 + 56 >> 2] = $6_1;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $5_1 = fimport$2(11606) | 0;
  $0_1 = fimport$7($0_1 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  $9 = $2_1 + 16 | 0;
  $5_1 = $9;
  $3 = +fimport$5($0_1 | 0, 72652, $5_1 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  HEAP8[$7_1 + 60 | 0] = $3 != 0.0;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $8 = fimport$2(4895) | 0;
  $0_1 = fimport$7($0_1 | 0, $8 | 0) | 0;
  fimport$4($8 | 0);
  $3 = +fimport$5($0_1 | 0, 72736, $5_1 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  HEAP32[$7_1 + 64 >> 2] = $3 < 4294967296.0 & $3 >= 0.0 ? ~~$3 >>> 0 : 0;
  fimport$4($0_1 | 0);
  $0_1 = HEAP32[$1_1 >> 2];
  $5_1 = fimport$2(1170) | 0;
  $0_1 = fimport$7($0_1 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  $3 = +fimport$5($0_1 | 0, 72808, $9 | 0);
  fimport$6(HEAP32[$2_1 + 16 >> 2]);
  $6_1 = Math_fround(3402823466385288598117041.0e14);
  label$22 : {
   if ($3 >= 3402823466385288598117041.0e14) {
    break label$22
   }
   $6_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($3 <= -3402823466385288598117041.0e14) {
    break label$22
   }
   $6_1 = Math_fround($3);
  }
  HEAPF32[$7_1 + 68 >> 2] = $6_1;
  fimport$4($0_1 | 0);
  $1_1 = HEAP32[$1_1 >> 2];
  $0_1 = fimport$2(11255) | 0;
  $5_1 = fimport$7($1_1 | 0, $0_1 | 0) | 0;
  fimport$4($0_1 | 0);
  $3 = +fimport$5($5_1 | 0, 49072, $2_1 + 28 | 0);
  label$23 : {
   if ($3 < 4294967296.0 & $3 >= 0.0) {
    $8 = ~~$3 >>> 0;
    break label$23;
   }
   $8 = 0;
  }
  $1_1 = HEAP32[$8 >> 2];
  if ($1_1 >>> 0 < 2147483632) {
   $9 = HEAP32[$2_1 + 28 >> 2];
   label$26 : {
    if ($1_1 >>> 0 <= 10) {
     HEAP8[$2_1 + 27 | 0] = $1_1;
     $0_1 = $2_1 + 16 | 0;
     break label$26;
    }
    $12_1 = ($1_1 | 15) + 1 | 0;
    $0_1 = $1782($12_1);
    HEAP32[$2_1 + 24 >> 2] = $12_1 | -2147483648;
    HEAP32[$2_1 + 16 >> 2] = $0_1;
    HEAP32[$2_1 + 20 >> 2] = $1_1;
   }
   if ($1_1) {
    $1602($0_1, $8 + 4 | 0, $1_1)
   }
   HEAP8[$0_1 + $1_1 | 0] = 0;
   fimport$6($9 | 0);
   $0_1 = HEAP32[$2_1 + 16 >> 2];
   $1_1 = HEAP8[$2_1 + 27 | 0];
   $1699($7_1 + 74 | 0, ($1_1 | 0) < 0 ? $0_1 : $2_1 + 16 | 0, 39);
   if (($1_1 | 0) < 0) {
    $1756($0_1)
   }
   fimport$4($5_1 | 0);
   fimport$4($4_1 | 0);
   fimport$4($10_1 | 0);
   global$0 = $2_1 + 32 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $774() {
  $813(8867);
  wasm2js_trap();
 }
 
 function $775() {
  fimport$9(7023, 1, 48472, 48504, 24, 25, 0);
 }
 
 function $776($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1 + 12 | 0);
  fimport$10(HEAP32[$1_1 + 12 >> 2]);
  $0_1 = HEAP32[$1_1 + 12 >> 2];
  fimport$4($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $777() {
  fimport$11(48528, 48556, 48596, 0, 48504, 26, 48612, 0, 48612, 0, 2017, 48614, 27);
 }
 
 function $778($0_1) {
  $0_1 = $0_1 | 0;
  return 48528;
 }
 
 function $779($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  if ($0_1) {
   $2_1 = HEAP32[18392];
   $101(HEAP32[$0_1 >> 2]);
   $3 = $118();
   HEAP32[$3 + 208 >> 2] = 0;
   HEAP32[$3 + 200 >> 2] = 0;
   HEAP32[$3 + 204 >> 2] = 0;
   HEAP32[$3 + 24 >> 2] = 0;
   HEAP32[$3 + 28 >> 2] = 0;
   $101($2_1);
   $8 = global$0 - 16 | 0;
   global$0 = $8;
   $3 = HEAP32[$0_1 >> 2];
   $3 = $3 ? $3 : HEAP32[18392];
   $2_1 = HEAP32[$3 + 152 >> 2];
   if (!(!$2_1 | !HEAPU8[$3 + 1 | 0])) {
    HEAP8[$2_1 + 16 | 0] = 0;
    $2_1 = $428($2_1);
    $1_1 = HEAP32[18392];
    if ($1_1) {
     $1_1 = $1_1 + 876 | 0;
     HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
   }
   HEAP32[$3 + 152 >> 2] = 0;
   if (HEAPU8[$3 | 0]) {
    label$4 : {
     if (!HEAPU8[$3 + 12125 | 0]) {
      break label$4
     }
     $2_1 = HEAP32[$3 + 32 >> 2];
     if (!$2_1) {
      break label$4
     }
     $1_1 = HEAP32[18392];
     HEAP32[18392] = $3;
     HEAP32[$3 + 12128 >> 2] = 0;
     HEAP32[$8 + 12 >> 2] = 0;
     $4_1 = $114($8 + 12 | 0);
     $2_1 = $1622($2_1, 2145);
     if ($2_1) {
      $1633($4_1, HEAP32[$8 + 12 >> 2], $2_1);
      $1609($2_1);
     }
     HEAP32[18392] = $1_1;
    }
    if (HEAP32[$3 + 12180 >> 2] > 0) {
     $2_1 = 0;
     while (1) {
      $1_1 = HEAP32[$3 + 12188 >> 2] + Math_imul($2_1, 20) | 0;
      if (HEAP32[$1_1 + 4 >> 2] == 6) {
       FUNCTION_TABLE[HEAP32[$1_1 + 12 >> 2]]($3, $1_1)
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) < HEAP32[$3 + 12180 >> 2]) {
       continue
      }
      break;
     };
    }
    if (HEAP32[$3 + 7008 >> 2] > 0) {
     $2_1 = 0;
     while (1) {
      $1_1 = HEAP32[HEAP32[$3 + 7016 >> 2] + ($2_1 << 2) >> 2];
      if ($1_1) {
       $4_1 = HEAP32[$1_1 >> 2];
       if ($4_1) {
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       if (HEAP32[$1_1 + 560 >> 2] > 0) {
        $4_1 = 0;
        while (1) {
         $5_1 = HEAP32[$1_1 + 568 >> 2] + Math_imul($4_1, 124) | 0;
         $374($5_1 + 104 | 0);
         $6_1 = HEAP32[$5_1 + 120 >> 2];
         if ($6_1) {
          $7_1 = HEAP32[18392];
          if ($7_1) {
           $7_1 = $7_1 + 876 | 0;
           HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
          }
          FUNCTION_TABLE[HEAP32[18315]]($6_1, HEAP32[18394]);
         }
         $5_1 = HEAP32[$5_1 + 100 >> 2];
         if ($5_1) {
          $6_1 = HEAP32[18392];
          if ($6_1) {
           $6_1 = $6_1 + 876 | 0;
           HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
          }
          FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
         }
         $4_1 = $4_1 + 1 | 0;
         if (($4_1 | 0) < HEAP32[$1_1 + 560 >> 2]) {
          continue
         }
         break;
        };
       }
       $4_1 = HEAP32[$1_1 + 568 >> 2];
       if ($4_1) {
        HEAP32[$1_1 + 560 >> 2] = 0;
        HEAP32[$1_1 + 564 >> 2] = 0;
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
        HEAP32[$1_1 + 568 >> 2] = 0;
       }
       $78($1_1 + 584 | 0);
       $4_1 = HEAP32[$1_1 + 568 >> 2];
       if ($4_1) {
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $4_1 = HEAP32[$1_1 + 556 >> 2];
       if ($4_1) {
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $4_1 = HEAP32[$1_1 + 412 >> 2];
       if ($4_1) {
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $4_1 = HEAP32[$1_1 + 400 >> 2];
       if ($4_1) {
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $4_1 = HEAP32[$1_1 + 360 >> 2];
       if ($4_1) {
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $4_1 = HEAP32[$1_1 + 204 >> 2];
       if ($4_1) {
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $4_1 = HEAP32[18392];
       if ($4_1) {
        $4_1 = $4_1 + 876 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) < HEAP32[$3 + 7008 >> 2]) {
       continue
      }
      break;
     };
    }
    $2_1 = HEAP32[$3 + 7016 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7008 >> 2] = 0;
     HEAP32[$3 + 7012 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7016 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 7028 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7020 >> 2] = 0;
     HEAP32[$3 + 7024 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7028 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 7040 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7032 >> 2] = 0;
     HEAP32[$3 + 7036 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7040 >> 2] = 0;
    }
    HEAP32[$3 + 7080 >> 2] = 0;
    $2_1 = HEAP32[$3 + 7052 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7044 >> 2] = 0;
     HEAP32[$3 + 7048 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7052 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 7064 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7056 >> 2] = 0;
     HEAP32[$3 + 7060 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7064 >> 2] = 0;
    }
    HEAP32[$3 + 7508 >> 2] = 0;
    HEAP32[$3 + 7204 >> 2] = 0;
    HEAP32[$3 + 7084 >> 2] = 0;
    HEAP32[$3 + 7088 >> 2] = 0;
    HEAP32[$3 + 7184 >> 2] = 0;
    HEAP32[$3 + 7092 >> 2] = 0;
    $2_1 = HEAP32[$3 + 7404 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7396 >> 2] = 0;
     HEAP32[$3 + 7400 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7404 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 7416 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7408 >> 2] = 0;
     HEAP32[$3 + 7412 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7416 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 7428 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7420 >> 2] = 0;
     HEAP32[$3 + 7424 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7428 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 7476 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7468 >> 2] = 0;
     HEAP32[$3 + 7472 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7476 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 7488 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7480 >> 2] = 0;
     HEAP32[$3 + 7484 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7488 >> 2] = 0;
    }
    if (HEAP32[$3 + 7496 >> 2] > 0) {
     $2_1 = 0;
     while (1) {
      $1_1 = HEAP32[HEAP32[$3 + 7504 >> 2] + ($2_1 << 2) >> 2];
      if ($1_1) {
       $4_1 = HEAP32[$1_1 + 44 >> 2];
       if ($4_1) {
        $4_1 = $78($4_1);
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $4_1 = HEAP32[$1_1 + 48 >> 2];
       if ($4_1) {
        $4_1 = $78($4_1);
        $5_1 = HEAP32[18392];
        if ($5_1) {
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       $5_1 = $1_1 + 96 | 0;
       $4_1 = $1_1 + 120 | 0;
       while (1) {
        $4_1 = $4_1 - 12 | 0;
        $6_1 = HEAP32[$4_1 + 8 >> 2];
        if ($6_1) {
         $7_1 = HEAP32[18392];
         if ($7_1) {
          $7_1 = $7_1 + 876 | 0;
          HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
         }
         FUNCTION_TABLE[HEAP32[18315]]($6_1, HEAP32[18394]);
        }
        if (($4_1 | 0) != ($5_1 | 0)) {
         continue
        }
        break;
       };
       $4_1 = HEAP32[18392];
       if ($4_1) {
        $4_1 = $4_1 + 876 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) < HEAP32[$3 + 7496 >> 2]) {
       continue
      }
      break;
     };
    }
    $2_1 = HEAP32[$3 + 7504 >> 2];
    if ($2_1) {
     HEAP32[$3 + 7496 >> 2] = 0;
     HEAP32[$3 + 7500 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 7504 >> 2] = 0;
    }
    $116($3 + 8116 | 0);
    $2_1 = HEAP32[$3 + 8156 >> 2];
    if ($2_1) {
     HEAP32[$3 + 8148 >> 2] = 0;
     HEAP32[$3 + 8152 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8156 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 8168 >> 2];
    if ($2_1) {
     HEAP32[$3 + 8160 >> 2] = 0;
     HEAP32[$3 + 8164 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8168 >> 2] = 0;
    }
    if (HEAP32[$3 + 8024 >> 2] > 0) {
     $2_1 = 0;
     while (1) {
      $1_1 = HEAP32[(HEAP32[$3 + 8032 >> 2] + Math_imul($2_1, 28) | 0) + 24 >> 2];
      if ($1_1) {
       $4_1 = HEAP32[18392];
       if ($4_1) {
        $4_1 = $4_1 + 876 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) < HEAP32[$3 + 8024 >> 2]) {
       continue
      }
      break;
     };
    }
    $2_1 = HEAP32[$3 + 8032 >> 2];
    if ($2_1) {
     HEAP32[$3 + 8024 >> 2] = 0;
     HEAP32[$3 + 8028 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8032 >> 2] = 0;
    }
    $117($3 + 8056 | 0);
    if (HEAP32[$3 + 8044 >> 2] > 0) {
     $2_1 = 0;
     while (1) {
      $1_1 = HEAP32[$3 + 8052 >> 2] + Math_imul($2_1, 104) | 0;
      $374($1_1 + 16 | 0);
      $1_1 = HEAP32[$1_1 + 32 >> 2];
      if ($1_1) {
       $4_1 = HEAP32[18392];
       if ($4_1) {
        $4_1 = $4_1 + 876 | 0;
        HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
      }
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) < HEAP32[$3 + 8044 >> 2]) {
       continue
      }
      break;
     };
    }
    $2_1 = HEAP32[$3 + 8052 >> 2];
    if ($2_1) {
     HEAP32[$3 + 8044 >> 2] = 0;
     HEAP32[$3 + 8048 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8052 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 8108 >> 2];
    if ($2_1) {
     HEAP32[$3 + 8100 >> 2] = 0;
     HEAP32[$3 + 8104 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8108 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 12092 >> 2];
    if ($2_1) {
     HEAP32[$3 + 12084 >> 2] = 0;
     HEAP32[$3 + 12088 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 12092 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 12104 >> 2];
    if ($2_1) {
     HEAP32[$3 + 12096 >> 2] = 0;
     HEAP32[$3 + 12100 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 12104 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 8200 >> 2];
    if ($2_1) {
     $1_1 = $3 - -8192 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8200 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 8212 >> 2];
    if ($2_1) {
     $1_1 = $3 + 8204 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8212 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 8224 >> 2];
    if ($2_1) {
     $1_1 = $3 + 8216 | 0;
     HEAP32[$1_1 >> 2] = 0;
     HEAP32[$1_1 + 4 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 8224 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 12164 >> 2];
    if ($2_1) {
     HEAP32[$3 + 12156 >> 2] = 0;
     HEAP32[$3 + 12160 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 12164 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 12152 >> 2];
    if ($2_1) {
     HEAP32[$3 + 12144 >> 2] = 0;
     HEAP32[$3 + 12148 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 12152 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 12204 >> 2];
    if ($2_1) {
     if (HEAP32[17792] != ($2_1 | 0)) {
      $1609($2_1)
     }
     HEAP32[$3 + 12204 >> 2] = 0;
    }
    $2_1 = HEAP32[$3 + 12216 >> 2];
    if ($2_1) {
     HEAP32[$3 + 12208 >> 2] = 0;
     HEAP32[$3 + 12212 >> 2] = 0;
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
     HEAP32[$3 + 12216 >> 2] = 0;
    }
    HEAP8[$3 | 0] = 0;
   }
   global$0 = $8 + 16 | 0;
   if (HEAP32[18392] == ($3 | 0)) {
    HEAP32[18392] = 0
   }
   if ($3) {
    $2_1 = HEAP32[$3 + 12292 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12216 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12188 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12176 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12164 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12152 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12140 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12104 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 12092 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $471($3 + 11880 | 0);
    $2_1 = HEAP32[$3 + 8224 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8212 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8200 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8168 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8156 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $116($3 + 8116 | 0);
    $2_1 = HEAP32[$3 + 8136 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8124 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8108 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8096 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $117($3 + 8056 | 0);
    $2_1 = HEAP32[$3 + 8076 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8064 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8052 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8032 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 8e3 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7504 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7488 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7476 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7464 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7452 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7440 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7428 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7416 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7404 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7064 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7052 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7040 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7028 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 7016 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[$3 + 5412 >> 2];
    if ($2_1) {
     $1_1 = HEAP32[18392];
     if ($1_1) {
      $1_1 = $1_1 + 876 | 0;
      HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - 1;
     }
     FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
    }
    $2_1 = HEAP32[18392];
    if ($2_1) {
     $2_1 = $2_1 + 876 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($3, HEAP32[18394]);
   }
   HEAP32[$0_1 >> 2] = 0;
   fimport$4(HEAP32[$0_1 + 180 >> 2]);
   fimport$4(HEAP32[$0_1 + 176 >> 2]);
   fimport$4(HEAP32[$0_1 + 172 >> 2]);
   if (HEAP8[$0_1 + 171 | 0] < 0) {
    $1756(HEAP32[$0_1 + 160 >> 2])
   }
   fimport$4(HEAP32[$0_1 + 152 >> 2]);
   fimport$4(HEAP32[$0_1 + 148 >> 2]);
   if (HEAP8[$0_1 + 147 | 0] < 0) {
    $1756(HEAP32[$0_1 + 136 >> 2])
   }
   fimport$4(HEAP32[$0_1 + 128 >> 2]);
   fimport$4(HEAP32[$0_1 + 124 >> 2]);
   fimport$4(HEAP32[$0_1 + 120 >> 2]);
   if (HEAP8[$0_1 + 119 | 0] < 0) {
    $1756(HEAP32[$0_1 + 108 >> 2])
   }
   fimport$4(HEAP32[$0_1 + 100 >> 2]);
   fimport$4(HEAP32[$0_1 + 96 >> 2]);
   fimport$4(HEAP32[$0_1 + 92 >> 2]);
   fimport$4(HEAP32[$0_1 + 88 >> 2]);
   fimport$4(HEAP32[$0_1 + 84 >> 2]);
   fimport$4(HEAP32[$0_1 + 80 >> 2]);
   fimport$4(HEAP32[$0_1 + 76 >> 2]);
   fimport$4(HEAP32[$0_1 + 72 >> 2]);
   fimport$4(HEAP32[$0_1 + 68 >> 2]);
   fimport$4(HEAP32[$0_1 + 64 >> 2]);
   if (HEAP8[$0_1 + 63 | 0] < 0) {
    $1756(HEAP32[$0_1 + 52 >> 2])
   }
   fimport$4(HEAP32[$0_1 + 48 >> 2]);
   fimport$4(HEAP32[$0_1 + 44 >> 2]);
   fimport$4(HEAP32[$0_1 + 40 >> 2]);
   fimport$4(HEAP32[$0_1 + 36 >> 2]);
   fimport$4(HEAP32[$0_1 + 32 >> 2]);
   fimport$4(HEAP32[$0_1 + 28 >> 2]);
   if (HEAP8[$0_1 + 27 | 0] < 0) {
    $1756(HEAP32[$0_1 + 16 >> 2])
   }
   if (HEAP8[$0_1 + 15 | 0] < 0) {
    $1756(HEAP32[$0_1 + 4 >> 2])
   }
   $1756($0_1);
  }
 }
 
 function $781() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(48628, 48648, 48676, 0, 48504, 28, 48612, 0, 48612, 0, 16568, 48614, 29);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(48628, 1643, 72796, 48692, 30, $0_1 | 0, 72796, 48696, 31, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(48628, 1245, 72796, 48692, 30, $0_1 | 0, 72796, 48696, 31, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 32;
  fimport$13(48628, 3608, 4, 48704, 48720, 33, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 34;
  fimport$13(48628, 1159, 3, 48728, 48740, 35, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 36;
  fimport$13(48628, 4785, 3, 48748, 48740, 37, $0_1 | 0, 0, 0);
 }
 
 function $782($0_1) {
  $0_1 = $0_1 | 0;
  return 48628;
 }
 
 function $783($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   $1756($0_1)
  }
 }
 
 function $784($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(HEAPF32[HEAP32[$0_1 >> 2] + $1_1 >> 2]);
 }
 
 function $785($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  HEAPF32[HEAP32[$0_1 >> 2] + $1_1 >> 2] = $2_1;
 }
 
 function $786($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $2_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = $3;
  FUNCTION_TABLE[$0_1 | 0]($4_1 + 12 | 0, $4_1 + 8 | 0, $4_1 + 4 | 0, $4_1);
  fimport$10(HEAP32[$4_1 + 12 >> 2]);
  $0_1 = HEAP32[$4_1 + 12 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$4_1 >> 2]);
  fimport$4(HEAP32[$4_1 + 4 >> 2]);
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $787($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 4 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1;
  FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $3 + 8 | 0, $3 + 4 | 0);
  fimport$10(HEAP32[$3 + 12 >> 2]);
  $0_1 = HEAP32[$3 + 12 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$3 + 4 >> 2]);
  fimport$4(HEAP32[$3 + 8 >> 2]);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $788($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 8 >> 2] = $2_1;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $3 + 8 | 0) | 0;
  fimport$4(HEAP32[$3 + 8 >> 2]);
  fimport$4(HEAP32[$3 + 12 >> 2]);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $789() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(48768, 48788, 48816, 0, 48504, 38, 48612, 0, 48612, 0, 16367, 48614, 39);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(48768, 1643, 72796, 48692, 40, $0_1 | 0, 72796, 48696, 41, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(48768, 1245, 72796, 48692, 40, $0_1 | 0, 72796, 48696, 41, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 8;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 8;
  fimport$12(48768, 1063, 72796, 48692, 40, $0_1 | 0, 72796, 48696, 41, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(48768, 1857, 72796, 48692, 40, $0_1 | 0, 72796, 48696, 41, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 42;
  fimport$13(48768, 3608, 6, 48832, 48856, 43, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 44;
  fimport$13(48768, 1159, 3, 48728, 48740, 35, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 45;
  fimport$13(48768, 4785, 3, 48748, 48740, 37, $0_1 | 0, 0, 0);
 }
 
 function $790($0_1) {
  $0_1 = $0_1 | 0;
  return 48768;
 }
 
 function $794($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$6_1 + 20 >> 2] = $2_1;
  HEAP32[$6_1 + 24 >> 2] = $1_1;
  HEAP32[$6_1 + 16 >> 2] = $3;
  HEAP32[$6_1 + 12 >> 2] = $4_1;
  HEAP32[$6_1 + 8 >> 2] = $5_1;
  FUNCTION_TABLE[$0_1 | 0]($6_1 + 28 | 0, $6_1 + 24 | 0, $6_1 + 20 | 0, $6_1 + 16 | 0, $6_1 + 12 | 0, $6_1 + 8 | 0);
  fimport$10(HEAP32[$6_1 + 28 >> 2]);
  $0_1 = HEAP32[$6_1 + 28 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$6_1 + 8 >> 2]);
  fimport$4(HEAP32[$6_1 + 12 >> 2]);
  fimport$4(HEAP32[$6_1 + 16 >> 2]);
  fimport$4(HEAP32[$6_1 + 20 >> 2]);
  fimport$4(HEAP32[$6_1 + 24 >> 2]);
  global$0 = $6_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $795() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(48896, 48936, 48984, 0, 48504, 46, 48612, 0, 48612, 0, 13787, 48614, 47);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(48896, 9451, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(48896, 4951, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(48896, 6491, 72712, 49e3, 50, $0_1 | 0, 72712, 49004, 51, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(48896, 1223, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 52;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 53;
  fimport$12(48896, 9619, 48496, 49e3, 54, $0_1 | 0, 48496, 49004, 55, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 24;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 24;
  fimport$12(48896, 7850, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 28;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 28;
  fimport$12(48896, 10340, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 32;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 32;
  fimport$12(48896, 1076, 72652, 49e3, 56, $0_1 | 0, 72652, 49004, 57, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 36;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 36;
  fimport$12(48896, 4470, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 40;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 40;
  fimport$12(48896, 2727, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 44;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 44;
  fimport$12(48896, 11792, 72724, 49e3, 48, $0_1 | 0, 72724, 49004, 49, $1_1 | 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 58;
  fimport$13(48896, 4355, 4, 49088, 49104, 59, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 60;
  fimport$13(48896, 4343, 4, 49120, 49104, 61, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 62;
  fimport$13(48896, 7473, 2, 49136, 49e3, 63, $0_1 | 0, 0, 0);
 }
 
 function $796($0_1) {
  $0_1 = $0_1 | 0;
  return 48896;
 }
 
 function $798($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP32[HEAP32[$0_1 >> 2] + $1_1 >> 2];
 }
 
 function $799($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP32[HEAP32[$0_1 >> 2] + $1_1 >> 2] = $2_1;
 }
 
 function $800($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAPU16[HEAP32[$0_1 >> 2] + $1_1 >> 1];
 }
 
 function $801($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP16[HEAP32[$0_1 >> 2] + $1_1 >> 1] = $2_1;
 }
 
 function $802($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $4_1 = HEAP32[$1_1 + 20 >> 2];
  $3 = $1697($4_1);
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 23 | 0] = $3;
     $1_1 = $2_1 + 12 | 0;
     break label$2;
    }
    $5_1 = ($3 | 15) + 1 | 0;
    $1_1 = $1782($5_1);
    HEAP32[$2_1 + 20 >> 2] = $5_1 | -2147483648;
    HEAP32[$2_1 + 12 >> 2] = $1_1;
    HEAP32[$2_1 + 16 >> 2] = $3;
   }
   if ($3) {
    $1603($1_1, $4_1, $3)
   }
   HEAP8[$1_1 + $3 | 0] = 0;
   $3 = HEAP8[$2_1 + 23 | 0];
   $1_1 = ($3 | 0) < 0;
   $3 = $1_1 ? HEAP32[$2_1 + 16 >> 2] : $3 & 127;
   $4_1 = $1755($3 + 4 | 0);
   HEAP32[$4_1 >> 2] = $3;
   $1602($4_1 + 4 | 0, $1_1 ? HEAP32[$2_1 + 12 >> 2] : $2_1 + 12 | 0, $3);
   HEAP32[$2_1 + 24 >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = fimport$1(49072, $2_1 + 24 | 0);
   if (HEAP8[$2_1 + 23 | 0] < 0) {
    $1756(HEAP32[$2_1 + 12 >> 2])
   }
   global$0 = $2_1 + 32 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $803($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $7_1 = HEAP32[$0_1 + 20 >> 2];
  $4_1 = +fimport$5(HEAP32[$1_1 >> 2], 49072, $2_1 + 12 | 0);
  label$1 : {
   if ($4_1 < 4294967296.0 & $4_1 >= 0.0) {
    $5_1 = ~~$4_1 >>> 0;
    break label$1;
   }
   $5_1 = 0;
  }
  $3 = HEAP32[$5_1 >> 2];
  if ($3 >>> 0 < 2147483632) {
   $8 = HEAP32[$2_1 + 12 >> 2];
   label$4 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 11 | 0] = $3;
     $1_1 = $2_1;
     break label$4;
    }
    $6_1 = ($3 | 15) + 1 | 0;
    $1_1 = $1782($6_1);
    HEAP32[$2_1 + 8 >> 2] = $6_1 | -2147483648;
    HEAP32[$2_1 >> 2] = $1_1;
    HEAP32[$2_1 + 4 >> 2] = $3;
   }
   if ($3) {
    $1602($1_1, $5_1 + 4 | 0, $3)
   }
   HEAP8[$1_1 + $3 | 0] = 0;
   fimport$6($8 | 0);
   $1699($7_1, HEAP8[$2_1 + 11 | 0] < 0 ? HEAP32[$2_1 >> 2] : $2_1, HEAP32[$0_1 + 28 >> 2] - 1 | 0);
   if (HEAP8[$2_1 + 11 | 0] < 0) {
    $1756(HEAP32[$2_1 >> 2])
   }
   global$0 = $2_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $804($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($2_1 + 12 | 0, $1_1);
  fimport$10(HEAP32[$2_1 + 12 >> 2]);
  $0_1 = HEAP32[$2_1 + 12 >> 2];
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $805($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $3 + 12 | 0);
  fimport$4(HEAP32[$3 + 12 >> 2]);
  global$0 = $3 + 16 | 0;
 }
 
 function $806($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAPU8[HEAP32[$0_1 >> 2] + $1_1 | 0];
 }
 
 function $807($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  HEAP8[HEAP32[$0_1 >> 2] + $1_1 | 0] = $2_1;
 }
 
 function $808($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($4_1 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  FUNCTION_TABLE[(!($4_1 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1, $2_1, $3);
 }
 
 function $809($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $3 = HEAP32[$0_1 + 4 >> 2];
  $6_1 = HEAP8[$2_1 + 11 | 0] < 0 ? HEAP32[$2_1 >> 2] : $2_1;
  $2_1 = $1697($6_1);
  $4_1 = HEAP32[$0_1 + 24 >> 2];
  label$3 : {
   if (($2_1 + $4_1 | 0) >= HEAP32[$0_1 + 28 >> 2]) {
    if (!($3 & 262144)) {
     break label$3
    }
    $3 = $2_1 << 2;
    $5_1 = ($2_1 | 0) <= 256 ? 256 : $2_1;
    $3 = $4_1 + (($2_1 | 0) < 8 ? 32 : ($3 | 0) < ($5_1 | 0) ? $3 : $5_1) | 0;
    $4_1 = $3 + 1 | 0;
    $5_1 = $3 + 2 | 0;
    $3 = HEAP32[18392];
    if (($5_1 | 0) > HEAP32[$3 + 8208 >> 2]) {
     $7_1 = $16($5_1);
     $8 = HEAP32[$3 + 8212 >> 2];
     if ($8) {
      $1602($7_1, $8, HEAP32[$3 + 8204 >> 2]);
      $17(HEAP32[$3 + 8212 >> 2]);
     }
     HEAP32[$3 + 8208 >> 2] = $5_1;
     HEAP32[$3 + 8212 >> 2] = $7_1;
    }
    HEAP32[$0_1 + 20 >> 2] = HEAP32[$3 + 8212 >> 2];
    HEAP32[$3 + 8232 >> 2] = $4_1;
    HEAP32[$0_1 + 28 >> 2] = $4_1;
   }
   $3 = HEAP32[$0_1 + 24 >> 2];
   if (($1_1 | 0) != ($3 | 0)) {
    $4_1 = HEAP32[$0_1 + 20 >> 2] + $1_1 | 0;
    $1603($4_1 + $2_1 | 0, $4_1, $3 - $1_1 | 0);
   }
   $1602(HEAP32[$0_1 + 20 >> 2] + $1_1 | 0, $6_1, $2_1);
   HEAP8[HEAP32[$0_1 + 20 >> 2] + (HEAP32[$0_1 + 24 >> 2] + $2_1 | 0) | 0] = 0;
   $3 = HEAP32[$0_1 + 36 >> 2];
   if (($1_1 | 0) <= ($3 | 0)) {
    HEAP32[$0_1 + 36 >> 2] = $2_1 + $3
   }
   HEAP8[$0_1 + 32 | 0] = 1;
   $1_1 = HEAP32[$0_1 + 36 >> 2];
   HEAP32[$0_1 + 44 >> 2] = $1_1;
   HEAP32[$0_1 + 40 >> 2] = $1_1;
   HEAP32[$0_1 + 24 >> 2] = HEAP32[$0_1 + 24 >> 2] + $2_1;
  }
 }
 
 function $810($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$3 >> 2];
  if ($5_1 >>> 0 < 2147483632) {
   $7_1 = HEAP32[$0_1 >> 2];
   label$2 : {
    if ($5_1 >>> 0 <= 10) {
     HEAP8[$4_1 + 15 | 0] = $5_1;
     $0_1 = $4_1 + 4 | 0;
     break label$2;
    }
    $6_1 = ($5_1 | 15) + 1 | 0;
    $0_1 = $1782($6_1);
    HEAP32[$4_1 + 12 >> 2] = $6_1 | -2147483648;
    HEAP32[$4_1 + 4 >> 2] = $0_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
   }
   if ($5_1) {
    $1602($0_1, $3 + 4 | 0, $5_1)
   }
   HEAP8[$0_1 + $5_1 | 0] = 0;
   FUNCTION_TABLE[$7_1 | 0]($1_1, $2_1, $4_1 + 4 | 0);
   if (HEAP8[$4_1 + 15 | 0] < 0) {
    $1756(HEAP32[$4_1 + 4 >> 2])
   }
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $811($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 40 >> 2] != HEAP32[$0_1 + 44 >> 2] | 0;
 }
 
 function $812($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($2_1 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  return FUNCTION_TABLE[(!($2_1 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1) | 0;
 }
 
 function $813($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = $1788($1876(8));
  HEAP32[$1_1 >> 2] = 73136;
  $2_1 = $1697($0_1);
  $3 = $1782($2_1 + 13 | 0);
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = $2_1;
  HEAP32[$3 >> 2] = $2_1;
  HEAP32[$1_1 + 4 >> 2] = $1602($3 + 12 | 0, $0_1, $2_1 + 1 | 0);
  HEAP32[$1_1 >> 2] = 73184;
  fimport$14($1_1 | 0, 73216, 64);
  wasm2js_trap();
 }
 
 function $815() {
  var $0_1 = 0;
  $0_1 = $1788($1876(4));
  HEAP32[$0_1 >> 2] = 72984;
  HEAP32[$0_1 >> 2] = 73004;
  fimport$14($0_1 | 0, 73116, 65);
  wasm2js_trap();
 }
 
 function $816() {
  var $0_1 = 0;
  fimport$11(49168, 49204, 49248, 0, 48504, 66, 48612, 0, 48612, 0, 13814, 48614, 67);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 68;
  fimport$12(49168, 4621, 48496, 49e3, 69, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 70;
  fimport$12(49168, 10184, 48496, 49e3, 69, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 71;
  fimport$12(49168, 10381, 48496, 49e3, 69, $0_1 | 0, 0, 0, 0, 0);
 }
 
 function $817($0_1) {
  $0_1 = $0_1 | 0;
  return 49168;
 }
 
 function $819($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 4;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $821($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 12;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $822($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 20;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $823() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(49284, 49312, 49352, 0, 48504, 72, 48612, 0, 48612, 0, 6209, 48614, 73);
  fimport$15(49284, 1, 49368, 48504, 74, 75);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(49284, 2714, 72724, 49e3, 76, $0_1 | 0, 72724, 49004, 77, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(49284, 11781, 72724, 49e3, 76, $0_1 | 0, 72724, 49004, 77, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 8;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 8;
  fimport$12(49284, 2848, 72724, 49e3, 76, $0_1 | 0, 72724, 49004, 77, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(49284, 3341, 72796, 48692, 78, $0_1 | 0, 72796, 48696, 79, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(49284, 14003, 72796, 48692, 78, $0_1 | 0, 72796, 48696, 79, $1_1 | 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 80;
  fimport$13(49284, 7622, 4, 49376, 49392, 81, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 82;
  fimport$13(49284, 11801, 2, 49400, 49408, 83, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 84;
  fimport$13(49284, 6932, 2, 49412, 49e3, 85, $0_1 | 0, 0, 0);
 }
 
 function $824($0_1) {
  $0_1 = $0_1 | 0;
  return 49284;
 }
 
 function $825($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   $1756($43($0_1))
  }
 }
 
 function $826($0_1) {
  $0_1 = $0_1 | 0;
  return FUNCTION_TABLE[$0_1 | 0]() | 0;
 }
 
 function $827() {
  return $42($1782(24)) | 0;
 }
 
 function $832($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  var $4_1 = 0;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($4_1 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  FUNCTION_TABLE[(!($4_1 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1, $2_1, $3);
 }
 
 function $833($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($2_1 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  FUNCTION_TABLE[(!($2_1 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1);
 }
 
 function $835() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(49448, 49488, 49536, 0, 48504, 86, 48612, 0, 48612, 0, 5383, 48614, 87);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(49448, 15037, 72736, 49e3, 88, $0_1 | 0, 72736, 49004, 89, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(49448, 1469, 72700, 49e3, 90, $0_1 | 0, 72700, 49004, 91, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 6;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 6;
  fimport$12(49448, 6396, 72700, 49e3, 90, $0_1 | 0, 72700, 49004, 91, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 92;
  fimport$12(49448, 7459, 48496, 49e3, 93, $0_1 | 0, 0, 0, 0, 0);
 }
 
 function $836($0_1) {
  $0_1 = $0_1 | 0;
  return 49448;
 }
 
 function $840($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return HEAP16[HEAP32[$0_1 >> 2] + $1_1 >> 1];
 }
 
 function $842($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP8[$1_1 + 8 | 0];
  HEAP32[$0_1 >> 2] = fimport$1(72724, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $844() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(49576, 49608, 49648, 0, 48504, 94, 48612, 0, 48612, 0, 5363, 48614, 95);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 96;
  fimport$13(49576, 13511, 3, 49664, 48740, 97, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(49576, 2859, 72724, 49e3, 98, $0_1 | 0, 72724, 49004, 99, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 8;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 8;
  fimport$12(49576, 1065, 72652, 49e3, 100, $0_1 | 0, 72652, 49004, 101, $1_1 | 0);
 }
 
 function $845($0_1) {
  $0_1 = $0_1 | 0;
  return 49576;
 }
 
 function $847($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = HEAP32[$1_1 >> 2] + Math_imul($2_1, 12);
  HEAP32[$0_1 >> 2] = fimport$1(49536, $3 + 8 | 0);
  global$0 = $3 + 16 | 0;
 }
 
 function $848($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($3 + 12 | 0, $1_1, $2_1);
  fimport$10(HEAP32[$3 + 12 >> 2]);
  $0_1 = HEAP32[$3 + 12 >> 2];
  fimport$4($0_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $853() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(49688, 49708, 49740, 0, 48504, 102, 48612, 0, 48612, 0, 11805, 48614, 103);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 28;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 28;
  fimport$12(49688, 2890, 72736, 49e3, 104, $0_1 | 0, 72736, 49004, 105, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 106;
  fimport$12(49688, 3722, 48496, 49e3, 107, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 108;
  fimport$12(49688, 12804, 48496, 49e3, 107, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 20;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 20;
  fimport$12(49688, 3429, 72736, 49e3, 104, $0_1 | 0, 72736, 49004, 105, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 24;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 24;
  fimport$12(49688, 3439, 72736, 49e3, 104, $0_1 | 0, 72736, 49004, 105, $1_1 | 0);
 }
 
 function $854($0_1) {
  $0_1 = $0_1 | 0;
  return 49688;
 }
 
 function $858($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = fimport$1(48816, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $860($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 16 >> 2];
  HEAP32[$0_1 >> 2] = fimport$1(72724, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $861() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(49772, 49796, 49828, 0, 48504, 109, 48612, 0, 48612, 0, 2556, 48614, 110);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 111;
  fimport$13(49772, 5329, 3, 49844, 49004, 112, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 113;
  fimport$12(49772, 6325, 48496, 49e3, 114, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 115;
  fimport$12(49772, 6315, 48496, 49e3, 114, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 36;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 36;
  fimport$12(49772, 4951, 72724, 49e3, 116, $0_1 | 0, 72724, 49004, 117, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 118;
  fimport$13(49772, 3699, 5, 49904, 49924, 119, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 120;
  fimport$13(49772, 7827, 2, 49932, 49408, 121, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 122;
  fimport$13(49772, 3687, 2, 49932, 49408, 121, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 123;
  fimport$13(49772, 15076, 3, 49940, 49004, 124, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 125;
  fimport$13(49772, 15063, 2, 49932, 49408, 121, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 126;
  fimport$13(49772, 7628, 3, 49952, 48740, 127, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 128;
  fimport$13(49772, 1527, 3, 49952, 48740, 127, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 129;
  fimport$13(49772, 11e3, 6, 49968, 49992, 130, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 131;
  fimport$13(49772, 3803, 8, 5e4, 50032, 132, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 133;
  fimport$13(49772, 12491, 7, 50048, 50076, 134, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 135;
  fimport$13(49772, 6113, 8, 50096, 50128, 136, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 137;
  fimport$13(49772, 12728, 8, 50144, 50176, 138, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 139;
  fimport$13(49772, 12553, 7, 50192, 50220, 140, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 141;
  fimport$13(49772, 11302, 7, 50240, 50268, 142, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 143;
  fimport$13(49772, 12519, 6, 50288, 50312, 144, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 145;
  fimport$13(49772, 11326, 7, 50320, 50348, 146, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 147;
  fimport$13(49772, 12537, 6, 50368, 50392, 148, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 149;
  fimport$13(49772, 7575, 7, 50320, 50348, 146, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 150;
  fimport$13(49772, 12505, 6, 50368, 50392, 148, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 151;
  fimport$13(49772, 15377, 5, 50400, 49924, 152, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 153;
  fimport$13(49772, 15170, 9, 50432, 50468, 154, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 155;
  fimport$13(49772, 11589, 8, 50576, 50128, 156, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 157;
  fimport$13(49772, 12715, 12, 50608, 50656, 158, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 159;
  fimport$13(49772, 12690, 10, 50672, 50712, 160, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 161;
  fimport$13(49772, 10952, 7, 50736, 50268, 162, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 163;
  fimport$13(49772, 12471, 5, 50768, 49924, 164, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 165;
  fimport$13(49772, 13496, 9, 50800, 50836, 166, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 167;
  fimport$13(49772, 13435, 8, 50848, 50880, 168, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 169;
  fimport$13(49772, 6538, 2, 49932, 49408, 121, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 170;
  fimport$13(49772, 7102, 3, 49940, 49004, 124, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 171;
  fimport$13(49772, 10702, 3, 49940, 49004, 124, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 172;
  fimport$13(49772, 1391, 3, 50892, 49004, 173, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 174;
  fimport$13(49772, 11525, 5, 50912, 50932, 175, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 176;
  fimport$13(49772, 7113, 7, 50944, 50972, 177, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 178;
  fimport$13(49772, 2655, 6, 50992, 50392, 179, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 180;
  fimport$13(49772, 7079, 6, 51024, 50312, 181, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 182;
  fimport$13(49772, 7052, 5, 51056, 49924, 183, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 184;
  fimport$13(49772, 3774, 6, 51088, 51112, 185, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 186;
  fimport$13(49772, 3216, 3, 51120, 49004, 187, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 188;
  fimport$13(49772, 11536, 2, 49932, 49408, 121, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 189;
  fimport$13(49772, 3050, 3, 51120, 49004, 187, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 190;
  fimport$13(49772, 8528, 4, 51136, 49104, 191, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 192;
  fimport$13(49772, 11815, 2, 49932, 49408, 121, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 193;
  fimport$13(49772, 10464, 4, 51152, 49104, 194, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 195;
  fimport$13(49772, 10450, 4, 51152, 49104, 194, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 196;
  fimport$13(49772, 3749, 5, 51168, 49924, 197, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 198;
  fimport$13(49772, 14763, 7, 50192, 50220, 140, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 199;
  fimport$13(49772, 14774, 11, 51200, 51244, 200, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 201;
  fimport$13(49772, 1255, 5, 51168, 49924, 197, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 202;
  fimport$13(49772, 1508, 3, 51260, 49004, 203, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 204;
  fimport$13(49772, 1247, 5, 51168, 49924, 197, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 205;
  fimport$13(49772, 2790, 3, 51272, 51284, 206, $0_1 | 0, 0, 0);
 }
 
 function $862($0_1) {
  $0_1 = $0_1 | 0;
  return 49772;
 }
 
 function $863($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   $1756($78($0_1))
  }
 }
 
 function $864($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (HEAP32[$0_1 >> 2]) {
   $4_1 = HEAP32[$0_1 + 8 >> 2];
   while (1) {
    HEAP32[$2_1 >> 2] = $4_1;
    $3 = fimport$1(49740, $2_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = $6_1;
    $5_1 = fimport$1(72736, $2_1 | 0) | 0;
    fimport$10($3 | 0);
    HEAP32[$2_1 >> 2] = $3;
    fimport$10($5_1 | 0);
    HEAP32[$2_1 + 8 >> 2] = $5_1;
    fimport$4(fimport$16(HEAP32[$1_1 >> 2], 2, 49856, $2_1 | 0) | 0);
    fimport$4($5_1 | 0);
    fimport$4($3 | 0);
    $3 = $4_1;
    $4_1 = $3 + 40 | 0;
    $6_1 = HEAP32[$3 + 28 >> 2] + $6_1 | 0;
    if ((HEAP32[$0_1 + 8 >> 2] + Math_imul(HEAP32[$0_1 >> 2], 40) | 0) != ($4_1 | 0)) {
     continue
    }
    break;
   };
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $866($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$1_1 + 12 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 20 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $3 << 1;
  HEAP32[$0_1 >> 2] = fimport$1(49896, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $868($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$1_1 + 24 >> 2];
  HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 32 >> 2];
  HEAP32[$2_1 + 8 >> 2] = Math_imul($3, 20);
  HEAP32[$0_1 >> 2] = fimport$1(49896, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $871($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 24 >> 2] = 0;
  HEAP32[$4_1 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $4_1 + 24 | 0);
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $4_1 + 16 | 0);
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$4_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $5_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $1_1;
  $378($0_1, $4_1 + 8 | 0, $4_1, $3);
  global$0 = $4_1 + 32 | 0;
 }
 
 function $872($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$5_1 + 8 >> 2] = $3;
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $5_1 + 12 | 0, $5_1 + 8 | 0, $4_1);
  fimport$4(HEAP32[$5_1 + 8 >> 2]);
  fimport$4(HEAP32[$5_1 + 12 >> 2]);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $874($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = +fimport$5(HEAP32[$1_1 >> 2], 72724, $2_1 + 12 | 0);
  fimport$6(HEAP32[$2_1 + 12 >> 2]);
  if (Math_abs($3) < 2147483648.0) {
   $1_1 = ~~$3
  } else {
   $1_1 = -2147483648
  }
  $381($0_1, $1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $876($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $1_1 = (HEAP32[$1_1 + 68 >> 2] + (HEAP32[$1_1 + 60 >> 2] << 4) | 0) - 16 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$3 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3 + 8 | 0, $3 + 4 | 0);
  fimport$4(HEAP32[$3 + 4 >> 2]);
  global$0 = $3 + 16 | 0;
 }
 
 function $877($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 8 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $1_1, $3 + 8 | 0);
  fimport$10(HEAP32[$3 + 12 >> 2]);
  $0_1 = HEAP32[$3 + 12 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$3 + 8 >> 2]);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $878($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $1_1 = (HEAP32[$1_1 + 68 >> 2] + (HEAP32[$1_1 + 60 >> 2] << 4) | 0) - 8 | 0;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $4_1;
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$3 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3 + 8 | 0, $3 + 4 | 0);
  fimport$4(HEAP32[$3 + 4 >> 2]);
  global$0 = $3 + 16 | 0;
 }
 
 function $879($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = Math_fround($4_1);
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $5_1 + 8 | 0);
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $399($0_1, $1_1, $763($2_1, $5_1), $3, $4_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $880($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$6_1 + 8 >> 2] = $3;
  HEAP32[$6_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $6_1 + 12 | 0, $6_1 + 8 | 0, $4_1, $5_1);
  fimport$4(HEAP32[$6_1 + 8 >> 2]);
  fimport$4(HEAP32[$6_1 + 12 >> 2]);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $881($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $7_1 + 8 | 0);
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  $400($0_1, $1_1, $763($2_1, $7_1), $3, $4_1, $5_1, $6_1);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $882($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  $7_1 = Math_fround($7_1);
  var $8 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$8 + 8 >> 2] = $3;
  HEAP32[$8 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $8 + 12 | 0, $8 + 8 | 0, $4_1, $5_1, $6_1, $7_1);
  fimport$4(HEAP32[$8 + 8 >> 2]);
  fimport$4(HEAP32[$8 + 12 >> 2]);
  global$0 = $8 + 16 | 0;
 }
 
 function $883($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $6_1 + 8 | 0);
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $401($0_1, $1_1, $763($2_1, $6_1), $3, $4_1, $5_1);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $884($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 8 >> 2] = $3;
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $7_1 + 12 | 0, $7_1 + 8 | 0, $4_1, $5_1, $6_1);
  fimport$4(HEAP32[$7_1 + 8 >> 2]);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $885($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $7_1 + 8 | 0);
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  $402($0_1, $1_1, $763($2_1, $7_1), $3, $4_1, $5_1, $6_1);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $886($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$8 + 8 >> 2] = $3;
  HEAP32[$8 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $8 + 12 | 0, $8 + 8 | 0, $4_1, $5_1, $6_1, $7_1);
  fimport$4(HEAP32[$8 + 8 >> 2]);
  fimport$4(HEAP32[$8 + 12 >> 2]);
  global$0 = $8 + 16 | 0;
 }
 
 function $887($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $8 + 24 | 0);
  HEAP32[$8 + 16 >> 2] = 0;
  HEAP32[$8 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $8 + 16 | 0);
  HEAP32[$8 + 8 >> 2] = 0;
  HEAP32[$8 + 12 >> 2] = 0;
  $3 = $763($3, $8 + 8 | 0);
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $10_1 = $763($4_1, $8);
  if ($5_1 >>> 0 >= 16777216) {
   $7_1 = HEAP32[$0_1 + 84 >> 2];
   $4_1 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($7_1 | 0) != ($4_1 | 0)) {
     break label$2
    }
    $9 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : 8;
    $7_1 = $7_1 + 1 | 0;
    $7_1 = ($7_1 | 0) < ($9 | 0) ? $9 : $7_1;
    if (($4_1 | 0) >= ($7_1 | 0)) {
     break label$2
    }
    $4_1 = $16($7_1 << 3);
    $9 = HEAP32[$0_1 + 92 >> 2];
    if ($9) {
     $1602($4_1, $9, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $7_1;
    HEAP32[$0_1 + 92 >> 2] = $4_1;
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$0_1 + 84 >> 2];
   $7_1 = $4_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $7_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$6 : {
    if (($7_1 | 0) != ($1_1 | 0)) {
     break label$6
    }
    $7_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $4_1 = $4_1 + 2 | 0;
    $4_1 = ($4_1 | 0) < ($7_1 | 0) ? $7_1 : $4_1;
    if (($1_1 | 0) >= ($4_1 | 0)) {
     break label$6
    }
    $1_1 = $16($4_1 << 3);
    $7_1 = HEAP32[$0_1 + 92 >> 2];
    if ($7_1) {
     $1602($1_1, $7_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $4_1;
    HEAP32[$0_1 + 92 >> 2] = $1_1;
   }
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   $2_1 = HEAP32[$0_1 + 84 >> 2];
   $4_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $4_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$10 : {
    if (($4_1 | 0) != ($1_1 | 0)) {
     break label$10
    }
    $4_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = $2_1 + 2 | 0;
    $2_1 = ($2_1 | 0) < ($4_1 | 0) ? $4_1 : $2_1;
    if (($1_1 | 0) >= ($2_1 | 0)) {
     break label$10
    }
    $1_1 = $16($2_1 << 3);
    $4_1 = HEAP32[$0_1 + 92 >> 2];
    if ($4_1) {
     $1602($1_1, $4_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $2_1;
    HEAP32[$0_1 + 92 >> 2] = $1_1;
   }
   $1_1 = HEAP32[$3 + 4 >> 2];
   $2_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $2_1 = HEAP32[$0_1 + 84 >> 2];
   $3 = $2_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $3;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$14 : {
    if (($3 | 0) != ($1_1 | 0)) {
     break label$14
    }
    $3 = $1_1;
    $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = $2_1 + 2 | 0;
    $1_1 = ($1_1 | 0) > ($2_1 | 0) ? $1_1 : $2_1;
    if (($3 | 0) >= ($1_1 | 0)) {
     break label$14
    }
    $2_1 = $16($1_1 << 3);
    $3 = HEAP32[$0_1 + 92 >> 2];
    if ($3) {
     $1602($2_1, $3, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $2_1;
   }
   $1_1 = HEAP32[$10_1 + 4 >> 2];
   $2_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$10_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$0_1 + 84 >> 2] + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $388($0_1, HEAP32[$0_1 + 92 >> 2], $1_1, $5_1, 1, $6_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  global$0 = $8 + 32 | 0;
 }
 
 function $888($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = Math_fround($7_1);
  var $8 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$8 + 8 >> 2] = $3;
  HEAP32[$8 + 12 >> 2] = $2_1;
  HEAP32[$8 + 4 >> 2] = $4_1;
  HEAP32[$8 >> 2] = $5_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $8, $6_1, $7_1);
  fimport$4(HEAP32[$8 >> 2]);
  fimport$4(HEAP32[$8 + 4 >> 2]);
  fimport$4(HEAP32[$8 + 8 >> 2]);
  fimport$4(HEAP32[$8 + 12 >> 2]);
  global$0 = $8 + 16 | 0;
 }
 
 function $889($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 24 >> 2] = 0;
  HEAP32[$7_1 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $7_1 + 24 | 0);
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $7_1 + 16 | 0);
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  $3 = $763($3, $7_1 + 8 | 0);
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  $9 = $763($4_1, $7_1);
  if ($5_1 >>> 0 >= 16777216) {
   $6_1 = HEAP32[$0_1 + 84 >> 2];
   $4_1 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($6_1 | 0) != ($4_1 | 0)) {
     break label$2
    }
    $8 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : 8;
    $6_1 = $6_1 + 1 | 0;
    $6_1 = ($6_1 | 0) < ($8 | 0) ? $8 : $6_1;
    if (($4_1 | 0) >= ($6_1 | 0)) {
     break label$2
    }
    $4_1 = $16($6_1 << 3);
    $8 = HEAP32[$0_1 + 92 >> 2];
    if ($8) {
     $1602($4_1, $8, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $6_1;
    HEAP32[$0_1 + 92 >> 2] = $4_1;
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $6_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$6_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$6_1 + 4 >> 2] = $4_1;
   $4_1 = HEAP32[$0_1 + 84 >> 2];
   $6_1 = $4_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $6_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$6 : {
    if (($6_1 | 0) != ($1_1 | 0)) {
     break label$6
    }
    $6_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $4_1 = $4_1 + 2 | 0;
    $4_1 = ($4_1 | 0) < ($6_1 | 0) ? $6_1 : $4_1;
    if (($1_1 | 0) >= ($4_1 | 0)) {
     break label$6
    }
    $1_1 = $16($4_1 << 3);
    $6_1 = HEAP32[$0_1 + 92 >> 2];
    if ($6_1) {
     $1602($1_1, $6_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $4_1;
    HEAP32[$0_1 + 92 >> 2] = $1_1;
   }
   $1_1 = HEAP32[$2_1 + 4 >> 2];
   $4_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   $2_1 = HEAP32[$0_1 + 84 >> 2];
   $4_1 = $2_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $4_1;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$10 : {
    if (($4_1 | 0) != ($1_1 | 0)) {
     break label$10
    }
    $4_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = $2_1 + 2 | 0;
    $2_1 = ($2_1 | 0) < ($4_1 | 0) ? $4_1 : $2_1;
    if (($1_1 | 0) >= ($2_1 | 0)) {
     break label$10
    }
    $1_1 = $16($2_1 << 3);
    $4_1 = HEAP32[$0_1 + 92 >> 2];
    if ($4_1) {
     $1602($1_1, $4_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $2_1;
    HEAP32[$0_1 + 92 >> 2] = $1_1;
   }
   $1_1 = HEAP32[$3 + 4 >> 2];
   $2_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $2_1 = HEAP32[$0_1 + 84 >> 2];
   $3 = $2_1 + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $3;
   $1_1 = HEAP32[$0_1 + 88 >> 2];
   label$14 : {
    if (($3 | 0) != ($1_1 | 0)) {
     break label$14
    }
    $3 = $1_1;
    $1_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
    $2_1 = $2_1 + 2 | 0;
    $1_1 = ($1_1 | 0) > ($2_1 | 0) ? $1_1 : $2_1;
    if (($3 | 0) >= ($1_1 | 0)) {
     break label$14
    }
    $2_1 = $16($1_1 << 3);
    $3 = HEAP32[$0_1 + 92 >> 2];
    if ($3) {
     $1602($2_1, $3, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $1_1;
    HEAP32[$0_1 + 92 >> 2] = $2_1;
   }
   $1_1 = HEAP32[$9 + 4 >> 2];
   $2_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$9 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[$0_1 + 84 >> 2] + 1 | 0;
   HEAP32[$0_1 + 84 >> 2] = $1_1;
   $389($0_1, HEAP32[$0_1 + 92 >> 2], $1_1, $5_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  global$0 = $7_1 + 32 | 0;
 }
 
 function $890($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 8 >> 2] = $3;
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  HEAP32[$7_1 + 4 >> 2] = $4_1;
  HEAP32[$7_1 >> 2] = $5_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $7_1 + 12 | 0, $7_1 + 8 | 0, $7_1 + 4 | 0, $7_1, $6_1);
  fimport$4(HEAP32[$7_1 >> 2]);
  fimport$4(HEAP32[$7_1 + 4 >> 2]);
  fimport$4(HEAP32[$7_1 + 8 >> 2]);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $891($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 24 >> 2] = 0;
  HEAP32[$6_1 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $6_1 + 24 | 0);
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $6_1 + 16 | 0);
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $405($0_1, $1_1, $2_1, $763($3, $6_1 + 8 | 0), $4_1, $5_1);
  global$0 = $6_1 + 32 | 0;
 }
 
 function $892($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 8 >> 2] = $3;
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  HEAP32[$7_1 + 4 >> 2] = $4_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $7_1 + 12 | 0, $7_1 + 8 | 0, $7_1 + 4 | 0, $5_1, $6_1);
  fimport$4(HEAP32[$7_1 + 4 >> 2]);
  fimport$4(HEAP32[$7_1 + 8 >> 2]);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $893($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 24 >> 2] = 0;
  HEAP32[$5_1 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $5_1 + 24 | 0);
  HEAP32[$5_1 + 16 >> 2] = 0;
  HEAP32[$5_1 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $5_1 + 16 | 0);
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $406($0_1, $1_1, $2_1, $763($3, $5_1 + 8 | 0), $4_1);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $894($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$6_1 + 8 >> 2] = $3;
  HEAP32[$6_1 + 12 >> 2] = $2_1;
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $6_1 + 12 | 0, $6_1 + 8 | 0, $6_1 + 4 | 0, $5_1);
  fimport$4(HEAP32[$6_1 + 4 >> 2]);
  fimport$4(HEAP32[$6_1 + 8 >> 2]);
  fimport$4(HEAP32[$6_1 + 12 >> 2]);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $895($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $407($0_1, $763($1_1, $6_1 + 8 | 0), $2_1, $3, $4_1, $5_1);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $896($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $7_1 + 12 | 0, $3, $4_1, $5_1, $6_1);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $897($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $408($0_1, $763($1_1, $5_1 + 8 | 0), $2_1, $3, $4_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $898($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $6_1 + 12 | 0, $3, $4_1, $5_1);
  fimport$4(HEAP32[$6_1 + 12 >> 2]);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $899($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0, $7_1 = Math_fround(0);
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $6_1 + 8 | 0);
  if (!(($4_1 | 0) < 3 | $3 >>> 0 < 16777216)) {
   $7_1 = Math_fround($2_1 + Math_fround(-.5));
   $2_1 = Math_fround($4_1 | 0);
   $393($0_1, $1_1, $7_1, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2_1 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2_1), $4_1 - 1 | 0);
   $388($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $3, 1, $5_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $900($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $5_1 + 8 | 0);
  if (!(($4_1 | 0) < 3 | $3 >>> 0 < 16777216)) {
   $6_1 = $2_1;
   $2_1 = Math_fround($4_1 | 0);
   $393($0_1, $1_1, $6_1, Math_fround(0.0), Math_fround(Math_fround(Math_fround($2_1 + Math_fround(-1.0)) * Math_fround(6.2831854820251465)) / $2_1), $4_1 - 1 | 0);
   $389($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $3);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $901($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $416($0_1, $763($1_1, $4_1 + 8 | 0), $2_1, HEAP8[$3 + 11 | 0] < 0 ? HEAP32[$3 >> 2] : $3);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $902($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $7_1 = HEAP32[$0_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  $0_1 = HEAP32[$4_1 >> 2];
  if ($0_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($0_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 11 | 0] = $0_1;
     $2_1 = $5_1;
     break label$2;
    }
    $6_1 = ($0_1 | 15) + 1 | 0;
    $2_1 = $1782($6_1);
    HEAP32[$5_1 + 8 >> 2] = $6_1 | -2147483648;
    HEAP32[$5_1 >> 2] = $2_1;
    HEAP32[$5_1 + 4 >> 2] = $0_1;
   }
   if ($0_1) {
    $1602($2_1, $4_1 + 4 | 0, $0_1)
   }
   HEAP8[$0_1 + $2_1 | 0] = 0;
   FUNCTION_TABLE[$7_1 | 0]($1_1, $5_1 + 12 | 0, $3, $5_1);
   if (HEAP8[$5_1 + 11 | 0] < 0) {
    $1756(HEAP32[$5_1 >> 2])
   }
   fimport$4(HEAP32[$5_1 + 12 >> 2]);
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $903($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $8 = global$0 - 48 | 0;
  global$0 = $8;
  $10_1 = +fimport$5(HEAP32[$1_1 >> 2], 50504, $8 | 0);
  fimport$6(HEAP32[$8 >> 2]);
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  $11_1 = $763($3, $8 + 24 | 0);
  $12_1 = HEAP32[$5_1 >> 2];
  $13 = HEAP8[$5_1 + 11 | 0];
  $1_1 = $8 + 12 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  HEAP32[$8 >> 2] = 50528;
  HEAP32[$8 + 20 >> 2] = $7_1;
  $1_1 = $8 + 4 | 0;
  if (HEAP32[$7_1 >> 2] != 2) {
   $9 = $8 + 32 | 0;
   $3 = $9 + 8 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$8 + 32 >> 2] = 0;
   HEAP32[$8 + 36 >> 2] = 0;
   $3 = $768($7_1, $9);
   $7_1 = HEAP32[$3 + 4 >> 2];
   HEAP32[$1_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$1_1 + 4 >> 2] = $7_1;
   $3 = $3 + 8 | 0;
   $9 = HEAP32[$3 + 4 >> 2];
   $7_1 = $1_1 + 8 | 0;
   HEAP32[$7_1 >> 2] = HEAP32[$3 >> 2];
   HEAP32[$7_1 + 4 >> 2] = $9;
  }
  $3 = ($13 | 0) < 0 ? $12_1 : $5_1;
  $5_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2] != 2 ? $1_1 : 0;
  if ($10_1 < 4294967296.0 & $10_1 >= 0.0) {
   $1_1 = ~~$10_1 >>> 0
  } else {
   $1_1 = 0
  }
  $413($0_1, $1_1, $2_1, $11_1, $4_1, $3, 0, $6_1, $5_1);
  global$0 = $8 + 48 | 0;
 }
 
 function $904($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = Math_fround($7_1);
  $8 = $8 | 0;
  var $9 = 0, $10_1 = 0;
  $9 = global$0 - 32 | 0;
  global$0 = $9;
  $10_1 = HEAP32[$0_1 >> 2];
  HEAP32[$9 + 24 >> 2] = $4_1;
  HEAP32[$9 + 28 >> 2] = $2_1;
  $0_1 = HEAP32[$6_1 >> 2];
  if ($0_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($0_1 >>> 0 <= 10) {
     HEAP8[$9 + 23 | 0] = $0_1;
     $4_1 = $9 + 12 | 0;
     break label$2;
    }
    $2_1 = ($0_1 | 15) + 1 | 0;
    $4_1 = $1782($2_1);
    HEAP32[$9 + 20 >> 2] = $2_1 | -2147483648;
    HEAP32[$9 + 12 >> 2] = $4_1;
    HEAP32[$9 + 16 >> 2] = $0_1;
   }
   if ($0_1) {
    $1602($4_1, $6_1 + 4 | 0, $0_1)
   }
   HEAP8[$0_1 + $4_1 | 0] = 0;
   HEAP32[$9 + 8 >> 2] = $8;
   FUNCTION_TABLE[$10_1 | 0]($1_1, $9 + 28 | 0, $3, $9 + 24 | 0, $5_1, $9 + 12 | 0, $7_1, $9 + 8 | 0);
   fimport$4(HEAP32[$9 + 8 >> 2]);
   if (HEAP8[$9 + 23 | 0] < 0) {
    $1756(HEAP32[$9 + 12 >> 2])
   }
   fimport$4(HEAP32[$9 + 24 >> 2]);
   fimport$4(HEAP32[$9 + 28 >> 2]);
   global$0 = $9 + 32 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $905($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0.0, $9 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $9 = HEAP32[$1_1 >> 2];
  $1_1 = $7_1 + 24 | 0;
  $8 = +fimport$5($9 | 0, 72724, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 24 >> 2]);
  HEAP32[$7_1 + 24 >> 2] = 0;
  HEAP32[$7_1 + 28 >> 2] = 0;
  $1_1 = $763($2_1, $1_1);
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 20 >> 2] = 0;
  $2_1 = $763($3, $7_1 + 16 | 0);
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  $3 = $763($4_1, $7_1 + 8 | 0);
  HEAP32[$7_1 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  if (Math_abs($8) < 2147483648.0) {
   $4_1 = ~~$8
  } else {
   $4_1 = -2147483648
  }
  $417($0_1, $4_1, $1_1, $2_1, $3, $763($5_1, $7_1), $6_1);
  global$0 = $7_1 + 32 | 0;
 }
 
 function $906($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$8 + 24 >> 2] = $3;
  HEAP32[$8 + 28 >> 2] = $2_1;
  HEAP32[$8 + 20 >> 2] = $4_1;
  HEAP32[$8 + 16 >> 2] = $5_1;
  HEAP32[$8 + 12 >> 2] = $6_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $8 + 28 | 0, $8 + 24 | 0, $8 + 20 | 0, $8 + 16 | 0, $8 + 12 | 0, $7_1);
  fimport$4(HEAP32[$8 + 12 >> 2]);
  fimport$4(HEAP32[$8 + 16 >> 2]);
  fimport$4(HEAP32[$8 + 20 >> 2]);
  fimport$4(HEAP32[$8 + 24 >> 2]);
  fimport$4(HEAP32[$8 + 28 >> 2]);
  global$0 = $8 + 32 | 0;
 }
 
 function $907($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0.0;
  $11_1 = global$0 + -64 | 0;
  global$0 = $11_1;
  $12_1 = HEAP32[$1_1 >> 2];
  $1_1 = $11_1 + 56 | 0;
  $14 = +fimport$5($12_1 | 0, 72724, $1_1 | 0);
  fimport$6(HEAP32[$11_1 + 56 >> 2]);
  HEAP32[$11_1 + 56 >> 2] = 0;
  HEAP32[$11_1 + 60 >> 2] = 0;
  $1_1 = $763($2_1, $1_1);
  HEAP32[$11_1 + 48 >> 2] = 0;
  HEAP32[$11_1 + 52 >> 2] = 0;
  $2_1 = $763($3, $11_1 + 48 | 0);
  HEAP32[$11_1 + 40 >> 2] = 0;
  HEAP32[$11_1 + 44 >> 2] = 0;
  $3 = $763($4_1, $11_1 + 40 | 0);
  HEAP32[$11_1 + 32 >> 2] = 0;
  HEAP32[$11_1 + 36 >> 2] = 0;
  $4_1 = $763($5_1, $11_1 + 32 | 0);
  HEAP32[$11_1 + 24 >> 2] = 0;
  HEAP32[$11_1 + 28 >> 2] = 0;
  $5_1 = $763($6_1, $11_1 + 24 | 0);
  HEAP32[$11_1 + 16 >> 2] = 0;
  HEAP32[$11_1 + 20 >> 2] = 0;
  $6_1 = $763($7_1, $11_1 + 16 | 0);
  HEAP32[$11_1 + 8 >> 2] = 0;
  HEAP32[$11_1 + 12 >> 2] = 0;
  $7_1 = $763($8, $11_1 + 8 | 0);
  HEAP32[$11_1 >> 2] = 0;
  HEAP32[$11_1 + 4 >> 2] = 0;
  $9 = $763($9, $11_1);
  if ($10_1 >>> 0 >= 16777216) {
   __inlined_func$418 : {
    $8 = Math_abs($14) < 2147483648.0 ? ~~$14 : -2147483648;
    if (($8 | 0) != HEAP32[$0_1 + 112 >> 2]) {
     $381($0_1, $8);
     $383($0_1, 6, 4);
     $8 = HEAP32[$0_1 + 56 >> 2];
     $12_1 = HEAPU16[$0_1 + 40 >> 1];
     HEAP16[$8 + 6 >> 1] = $12_1;
     HEAP16[$8 >> 1] = $12_1;
     HEAP16[$8 + 10 >> 1] = $12_1 + 3;
     $13 = $12_1 + 2 | 0;
     HEAP16[$8 + 8 >> 1] = $13;
     HEAP16[$8 + 4 >> 1] = $13;
     HEAP16[$8 + 2 >> 1] = $12_1 + 1;
     $8 = HEAP32[$1_1 + 4 >> 2];
     $12_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$12_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$12_1 + 4 >> 2] = $8;
     $1_1 = HEAP32[$5_1 + 4 >> 2];
     $8 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$8 + 8 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$8 + 12 >> 2] = $1_1;
     $1_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$1_1 + 16 >> 2] = $10_1;
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     HEAP32[$1_1 + 20 >> 2] = HEAP32[$2_1 >> 2];
     HEAP32[$1_1 + 24 >> 2] = $5_1;
     $1_1 = HEAP32[$6_1 + 4 >> 2];
     $2_1 = HEAP32[$0_1 + 52 >> 2] + 28 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$1_1 + 36 >> 2] = $10_1;
     $2_1 = HEAP32[$3 + 4 >> 2];
     HEAP32[$1_1 + 40 >> 2] = HEAP32[$3 >> 2];
     HEAP32[$1_1 + 44 >> 2] = $2_1;
     $1_1 = HEAP32[$7_1 + 4 >> 2];
     $2_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$1_1 + 56 >> 2] = $10_1;
     $2_1 = HEAP32[$4_1 + 4 >> 2];
     HEAP32[$1_1 + 60 >> 2] = HEAP32[$4_1 >> 2];
     HEAP32[$1_1 + 64 >> 2] = $2_1;
     $1_1 = HEAP32[$9 + 4 >> 2];
     $2_1 = HEAP32[$0_1 + 52 >> 2] + 68 | 0;
     HEAP32[$2_1 >> 2] = HEAP32[$9 >> 2];
     HEAP32[$2_1 + 4 >> 2] = $1_1;
     $1_1 = HEAP32[$0_1 + 52 >> 2];
     HEAP32[$1_1 + 76 >> 2] = $10_1;
     HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
     HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
     HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
     $1_1 = HEAP32[$0_1 + 72 >> 2];
     $2_1 = $1_1 - 1 | 0;
     HEAP32[$0_1 + 72 >> 2] = $2_1;
     $1_1 = $2_1 ? HEAP32[(HEAP32[$0_1 + 80 >> 2] + ($1_1 << 2) | 0) - 8 >> 2] : 0;
     HEAP32[$0_1 + 112 >> 2] = $1_1;
     $4_1 = HEAP32[$0_1 + 8 >> 2];
     $5_1 = HEAP32[$0_1 >> 2];
     $2_1 = $5_1 - 1 | 0;
     $3 = $4_1 + Math_imul($2_1, 40) | 0;
     $6_1 = HEAP32[$3 + 28 >> 2];
     if (!(!$6_1 | HEAP32[$3 + 16 >> 2] == ($1_1 | 0))) {
      $375($0_1);
      break __inlined_func$418;
     }
     label$6 : {
      if (($5_1 | 0) < 2 | $6_1) {
       break label$6
      }
      $3 = $3 - 40 | 0;
      if ($1645($0_1 + 96 | 0, $3, 24) | HEAP32[$3 + 32 >> 2]) {
       break label$6
      }
      HEAP32[$0_1 >> 2] = $2_1;
      break __inlined_func$418;
     }
     HEAP32[($4_1 + Math_imul($2_1, 40) | 0) + 16 >> 2] = $1_1;
     break __inlined_func$418;
    }
    $383($0_1, 6, 4);
    $8 = HEAP32[$0_1 + 56 >> 2];
    $12_1 = HEAPU16[$0_1 + 40 >> 1];
    HEAP16[$8 + 6 >> 1] = $12_1;
    HEAP16[$8 >> 1] = $12_1;
    HEAP16[$8 + 10 >> 1] = $12_1 + 3;
    $13 = $12_1 + 2 | 0;
    HEAP16[$8 + 8 >> 1] = $13;
    HEAP16[$8 + 4 >> 1] = $13;
    HEAP16[$8 + 2 >> 1] = $12_1 + 1;
    $8 = HEAP32[$1_1 + 4 >> 2];
    $12_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$12_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $8;
    $1_1 = HEAP32[$5_1 + 4 >> 2];
    $8 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$8 + 8 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$8 + 12 >> 2] = $1_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 16 >> 2] = $10_1;
    $5_1 = HEAP32[$2_1 + 4 >> 2];
    HEAP32[$1_1 + 20 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$1_1 + 24 >> 2] = $5_1;
    $1_1 = HEAP32[$6_1 + 4 >> 2];
    $2_1 = HEAP32[$0_1 + 52 >> 2] + 28 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 36 >> 2] = $10_1;
    $2_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$1_1 + 40 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$1_1 + 44 >> 2] = $2_1;
    $1_1 = HEAP32[$7_1 + 4 >> 2];
    $2_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 56 >> 2] = $10_1;
    $2_1 = HEAP32[$4_1 + 4 >> 2];
    HEAP32[$1_1 + 60 >> 2] = HEAP32[$4_1 >> 2];
    HEAP32[$1_1 + 64 >> 2] = $2_1;
    $1_1 = HEAP32[$9 + 4 >> 2];
    $2_1 = HEAP32[$0_1 + 52 >> 2] + 68 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$9 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $1_1;
    $1_1 = HEAP32[$0_1 + 52 >> 2];
    HEAP32[$1_1 + 76 >> 2] = $10_1;
    HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
    HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
    HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
   }
  }
  global$0 = $11_1 - -64 | 0;
 }
 
 function $908($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9, $10_1, $11_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10_1 = $10_1 | 0;
  $11_1 = $11_1 | 0;
  var $12_1 = 0;
  $12_1 = global$0 - 48 | 0;
  global$0 = $12_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$12_1 + 40 >> 2] = $3;
  HEAP32[$12_1 + 44 >> 2] = $2_1;
  HEAP32[$12_1 + 36 >> 2] = $4_1;
  HEAP32[$12_1 + 32 >> 2] = $5_1;
  HEAP32[$12_1 + 28 >> 2] = $6_1;
  HEAP32[$12_1 + 24 >> 2] = $7_1;
  HEAP32[$12_1 + 20 >> 2] = $8;
  HEAP32[$12_1 + 16 >> 2] = $9;
  HEAP32[$12_1 + 12 >> 2] = $10_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $12_1 + 44 | 0, $12_1 + 40 | 0, $12_1 + 36 | 0, $12_1 + 32 | 0, $12_1 + 28 | 0, $12_1 + 24 | 0, $12_1 + 20 | 0, $12_1 + 16 | 0, $12_1 + 12 | 0, $11_1);
  fimport$4(HEAP32[$12_1 + 12 >> 2]);
  fimport$4(HEAP32[$12_1 + 16 >> 2]);
  fimport$4(HEAP32[$12_1 + 20 >> 2]);
  fimport$4(HEAP32[$12_1 + 24 >> 2]);
  fimport$4(HEAP32[$12_1 + 28 >> 2]);
  fimport$4(HEAP32[$12_1 + 32 >> 2]);
  fimport$4(HEAP32[$12_1 + 36 >> 2]);
  fimport$4(HEAP32[$12_1 + 40 >> 2]);
  fimport$4(HEAP32[$12_1 + 44 >> 2]);
  global$0 = $12_1 + 48 | 0;
 }
 
 function $909($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = Math_fround($7_1);
  $8 = $8 | 0;
  var $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0), $17_1 = Math_fround(0), $18_1 = Math_fround(0), $19 = 0.0;
  $11_1 = global$0 - 32 | 0;
  global$0 = $11_1;
  $14 = HEAP32[$1_1 >> 2];
  $1_1 = $11_1 + 24 | 0;
  $19 = +fimport$5($14 | 0, 72724, $1_1 | 0);
  fimport$6(HEAP32[$11_1 + 24 >> 2]);
  HEAP32[$11_1 + 24 >> 2] = 0;
  HEAP32[$11_1 + 28 >> 2] = 0;
  $1_1 = $763($2_1, $1_1);
  HEAP32[$11_1 + 16 >> 2] = 0;
  HEAP32[$11_1 + 20 >> 2] = 0;
  $3 = $763($3, $11_1 + 16 | 0);
  HEAP32[$11_1 + 8 >> 2] = 0;
  HEAP32[$11_1 + 12 >> 2] = 0;
  $2_1 = $763($4_1, $11_1 + 8 | 0);
  HEAP32[$11_1 >> 2] = 0;
  HEAP32[$11_1 + 4 >> 2] = 0;
  $14 = Math_abs($19) < 2147483648.0 ? ~~$19 : -2147483648;
  $4_1 = $763($5_1, $11_1);
  __inlined_func$419 : {
   if ($6_1 >>> 0 < 16777216) {
    break __inlined_func$419
   }
   label$2 : {
    if (!($7_1 <= Math_fround(0.0))) {
     $5_1 = $8 & 496 ? $8 : $8 | 240;
     if (($5_1 & 496) != 256) {
      break label$2
     }
    }
    $417($0_1, $14, $1_1, $3, $2_1, $4_1, $6_1);
    break __inlined_func$419;
   }
   if (($14 | 0) != HEAP32[$0_1 + 112 >> 2]) {
    $381($0_1, $14);
    $8 = HEAP32[$0_1 + 24 >> 2];
    $398($0_1, $1_1, $3, $7_1, $5_1);
    $389($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $6_1);
    HEAP32[$0_1 + 84 >> 2] = 0;
    $5_1 = HEAP32[$0_1 + 24 >> 2];
    if (($8 | 0) < ($5_1 | 0)) {
     $7_1 = HEAPF32[$4_1 + 4 >> 2];
     $10_1 = HEAPF32[$2_1 + 4 >> 2];
     $9 = Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2]);
     $16_1 = $9 != Math_fround(0.0) ? Math_fround(Math_fround($7_1 - $10_1) / $9) : Math_fround(0.0);
     $9 = HEAPF32[$4_1 >> 2];
     $12_1 = HEAPF32[$2_1 >> 2];
     $13 = Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$1_1 >> 2]);
     $17_1 = $13 != Math_fround(0.0) ? Math_fround(Math_fround($9 - $12_1) / $13) : Math_fround(0.0);
     $3 = HEAP32[$0_1 + 32 >> 2];
     $4_1 = $3 + Math_imul($5_1, 20) | 0;
     $13 = $7_1 <= $10_1 ? $10_1 : $7_1;
     $15_1 = $9 <= $12_1 ? $12_1 : $9;
     $7_1 = $7_1 > $10_1 ? $10_1 : $7_1;
     $10_1 = $9 > $12_1 ? $12_1 : $9;
     $3 = $3 + Math_imul($8, 20) | 0;
     while (1) {
      $12_1 = HEAPF32[$2_1 >> 2];
      $18_1 = HEAPF32[$1_1 >> 2];
      $9 = Math_fround(HEAPF32[$2_1 + 4 >> 2] + Math_fround($16_1 * Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2])));
      HEAPF32[$3 + 12 >> 2] = $7_1 > $9 ? $7_1 : $9 > $13 ? $13 : $9;
      $9 = Math_fround($12_1 + Math_fround($17_1 * Math_fround(HEAPF32[$3 >> 2] - $18_1)));
      HEAPF32[$3 + 8 >> 2] = $9 < $10_1 ? $10_1 : $9 > $15_1 ? $15_1 : $9;
      $3 = $3 + 20 | 0;
      if ($4_1 >>> 0 > $3 >>> 0) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[$0_1 + 72 >> 2];
    $2_1 = $1_1 - 1 | 0;
    HEAP32[$0_1 + 72 >> 2] = $2_1;
    $1_1 = $2_1 ? HEAP32[(HEAP32[$0_1 + 80 >> 2] + ($1_1 << 2) | 0) - 8 >> 2] : 0;
    HEAP32[$0_1 + 112 >> 2] = $1_1;
    $4_1 = HEAP32[$0_1 + 8 >> 2];
    $5_1 = HEAP32[$0_1 >> 2];
    $2_1 = $5_1 - 1 | 0;
    $3 = $4_1 + Math_imul($2_1, 40) | 0;
    $6_1 = HEAP32[$3 + 28 >> 2];
    if (!(!$6_1 | HEAP32[$3 + 16 >> 2] == ($1_1 | 0))) {
     $375($0_1);
     break __inlined_func$419;
    }
    label$9 : {
     if (($5_1 | 0) < 2 | $6_1) {
      break label$9
     }
     $3 = $3 - 40 | 0;
     if ($1645($0_1 + 96 | 0, $3, 24) | HEAP32[$3 + 32 >> 2]) {
      break label$9
     }
     HEAP32[$0_1 >> 2] = $2_1;
     break __inlined_func$419;
    }
    HEAP32[($4_1 + Math_imul($2_1, 40) | 0) + 16 >> 2] = $1_1;
    break __inlined_func$419;
   }
   $8 = HEAP32[$0_1 + 24 >> 2];
   $398($0_1, $1_1, $3, $7_1, $5_1);
   $389($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $6_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
   $5_1 = HEAP32[$0_1 + 24 >> 2];
   if (($5_1 | 0) <= ($8 | 0)) {
    break __inlined_func$419
   }
   $7_1 = HEAPF32[$4_1 + 4 >> 2];
   $10_1 = HEAPF32[$2_1 + 4 >> 2];
   $9 = Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2]);
   $16_1 = $9 != Math_fround(0.0) ? Math_fround(Math_fround($7_1 - $10_1) / $9) : Math_fround(0.0);
   $9 = HEAPF32[$4_1 >> 2];
   $12_1 = HEAPF32[$2_1 >> 2];
   $13 = Math_fround(HEAPF32[$3 >> 2] - HEAPF32[$1_1 >> 2]);
   $17_1 = $13 != Math_fround(0.0) ? Math_fround(Math_fround($9 - $12_1) / $13) : Math_fround(0.0);
   $0_1 = HEAP32[$0_1 + 32 >> 2];
   $4_1 = $0_1 + Math_imul($5_1, 20) | 0;
   $13 = $7_1 <= $10_1 ? $10_1 : $7_1;
   $15_1 = $9 <= $12_1 ? $12_1 : $9;
   $7_1 = $7_1 > $10_1 ? $10_1 : $7_1;
   $10_1 = $9 > $12_1 ? $12_1 : $9;
   $3 = $0_1 + Math_imul($8, 20) | 0;
   while (1) {
    $12_1 = HEAPF32[$2_1 >> 2];
    $18_1 = HEAPF32[$1_1 >> 2];
    $9 = Math_fround(HEAPF32[$2_1 + 4 >> 2] + Math_fround($16_1 * Math_fround(HEAPF32[$3 + 4 >> 2] - HEAPF32[$1_1 + 4 >> 2])));
    HEAPF32[$3 + 12 >> 2] = $7_1 > $9 ? $7_1 : $9 > $13 ? $13 : $9;
    $9 = Math_fround($12_1 + Math_fround($17_1 * Math_fround(HEAPF32[$3 >> 2] - $18_1)));
    HEAPF32[$3 + 8 >> 2] = $9 < $10_1 ? $10_1 : $9 > $15_1 ? $15_1 : $9;
    $3 = $3 + 20 | 0;
    if ($4_1 >>> 0 > $3 >>> 0) {
     continue
    }
    break;
   };
  }
  global$0 = $11_1 + 32 | 0;
 }
 
 function $910($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = Math_fround($8);
  $9 = $9 | 0;
  var $10_1 = 0;
  $10_1 = global$0 - 32 | 0;
  global$0 = $10_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$10_1 + 24 >> 2] = $3;
  HEAP32[$10_1 + 28 >> 2] = $2_1;
  HEAP32[$10_1 + 20 >> 2] = $4_1;
  HEAP32[$10_1 + 16 >> 2] = $5_1;
  HEAP32[$10_1 + 12 >> 2] = $6_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $10_1 + 28 | 0, $10_1 + 24 | 0, $10_1 + 20 | 0, $10_1 + 16 | 0, $10_1 + 12 | 0, $7_1, $8, $9);
  fimport$4(HEAP32[$10_1 + 12 >> 2]);
  fimport$4(HEAP32[$10_1 + 16 >> 2]);
  fimport$4(HEAP32[$10_1 + 20 >> 2]);
  fimport$4(HEAP32[$10_1 + 24 >> 2]);
  fimport$4(HEAP32[$10_1 + 28 >> 2]);
  global$0 = $10_1 + 32 | 0;
 }
 
 function $911($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $7_1 = $2_1 << 3;
  $9 = $6_1 - ($7_1 + 15 & -16) | 0;
  global$0 = $9;
  if ($2_1) {
   $1604($9, 0, $7_1)
  }
  if (($2_1 | 0) > 0) {
   $7_1 = 0;
   while (1) {
    $8 = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 8 >> 2] = $7_1;
    $10_1 = $8;
    $8 = $6_1 + 8 | 0;
    $11_1 = fimport$1(72724, $8 | 0) | 0;
    $10_1 = fimport$7($10_1 | 0, $11_1 | 0) | 0;
    HEAP32[$6_1 + 4 >> 2] = $10_1;
    fimport$4($11_1 | 0);
    HEAP32[$6_1 + 8 >> 2] = 0;
    HEAP32[$6_1 + 12 >> 2] = 0;
    $8 = $763($6_1 + 4 | 0, $8);
    $11_1 = HEAP32[$8 + 4 >> 2];
    $12_1 = ($7_1 << 3) + $9 | 0;
    HEAP32[$12_1 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$12_1 + 4 >> 2] = $11_1;
    fimport$4($10_1 | 0);
    $7_1 = $7_1 + 1 | 0;
    if (($7_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  $388($0_1, $9, $2_1, $3, $4_1, $5_1);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $912($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $7_1 + 12 | 0, $3, $4_1, $5_1, $6_1);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $913($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = $2_1 << 3;
  $7_1 = $4_1 - ($5_1 + 15 & -16) | 0;
  global$0 = $7_1;
  if ($2_1) {
   $1604($7_1, 0, $5_1)
  }
  if (($2_1 | 0) > 0) {
   $5_1 = 0;
   while (1) {
    $6_1 = HEAP32[$1_1 >> 2];
    HEAP32[$4_1 + 8 >> 2] = $5_1;
    $8 = $6_1;
    $6_1 = $4_1 + 8 | 0;
    $9 = fimport$1(72724, $6_1 | 0) | 0;
    $8 = fimport$7($8 | 0, $9 | 0) | 0;
    HEAP32[$4_1 + 4 >> 2] = $8;
    fimport$4($9 | 0);
    HEAP32[$4_1 + 8 >> 2] = 0;
    HEAP32[$4_1 + 12 >> 2] = 0;
    $6_1 = $763($4_1 + 4 | 0, $6_1);
    $9 = HEAP32[$6_1 + 4 >> 2];
    $10_1 = ($5_1 << 3) + $7_1 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $9;
    fimport$4($8 | 0);
    $5_1 = $5_1 + 1 | 0;
    if (($5_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
  $389($0_1, $7_1, $2_1, $3);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $914($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $5_1 + 12 | 0, $3, $4_1);
  fimport$4(HEAP32[$5_1 + 12 >> 2]);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $915($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $8 + 24 | 0);
  HEAP32[$8 + 16 >> 2] = 0;
  HEAP32[$8 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $8 + 16 | 0);
  HEAP32[$8 + 8 >> 2] = 0;
  HEAP32[$8 + 12 >> 2] = 0;
  $3 = $763($3, $8 + 8 | 0);
  HEAP32[$8 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  $11_1 = $763($4_1, $8);
  if ($5_1 >>> 0 >= 16777216) {
   $9 = HEAP32[$0_1 + 84 >> 2];
   $4_1 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($9 | 0) != ($4_1 | 0)) {
     break label$2
    }
    $10_1 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : 8;
    $9 = $9 + 1 | 0;
    $9 = ($9 | 0) < ($10_1 | 0) ? $10_1 : $9;
    if (($4_1 | 0) >= ($9 | 0)) {
     break label$2
    }
    $4_1 = $16($9 << 3);
    $10_1 = HEAP32[$0_1 + 92 >> 2];
    if ($10_1) {
     $1602($4_1, $10_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $9;
    HEAP32[$0_1 + 92 >> 2] = $4_1;
   }
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $9 = $0_1 + 92 | 0;
   $10_1 = HEAP32[$9 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$10_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$10_1 + 4 >> 2] = $4_1;
   HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
   $394($0_1, $2_1, $3, $11_1, $7_1);
   $388($0_1, HEAP32[$9 >> 2], HEAP32[$0_1 + 84 >> 2], $5_1, 0, $6_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  global$0 = $8 + 32 | 0;
 }
 
 function $916($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = Math_fround($7_1);
  $8 = $8 | 0;
  var $9 = 0;
  $9 = global$0 - 16 | 0;
  global$0 = $9;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$9 + 8 >> 2] = $3;
  HEAP32[$9 + 12 >> 2] = $2_1;
  HEAP32[$9 + 4 >> 2] = $4_1;
  HEAP32[$9 >> 2] = $5_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $9 + 12 | 0, $9 + 8 | 0, $9 + 4 | 0, $9, $6_1, $7_1, $8);
  fimport$4(HEAP32[$9 >> 2]);
  fimport$4(HEAP32[$9 + 4 >> 2]);
  fimport$4(HEAP32[$9 + 8 >> 2]);
  fimport$4(HEAP32[$9 + 12 >> 2]);
  global$0 = $9 + 16 | 0;
 }
 
 function $917($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $8 + 24 | 0);
  HEAP32[$8 + 16 >> 2] = 0;
  HEAP32[$8 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $8 + 16 | 0);
  HEAP32[$8 + 8 >> 2] = 0;
  HEAP32[$8 + 12 >> 2] = 0;
  $10_1 = $763($3, $8 + 8 | 0);
  if ($4_1 >>> 0 >= 16777216) {
   $7_1 = HEAP32[$0_1 + 84 >> 2];
   $3 = HEAP32[$0_1 + 88 >> 2];
   label$2 : {
    if (($7_1 | 0) != ($3 | 0)) {
     break label$2
    }
    $9 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
    $7_1 = $7_1 + 1 | 0;
    $7_1 = ($7_1 | 0) < ($9 | 0) ? $9 : $7_1;
    if (($3 | 0) >= ($7_1 | 0)) {
     break label$2
    }
    $3 = $16($7_1 << 3);
    $9 = HEAP32[$0_1 + 92 >> 2];
    if ($9) {
     $1602($3, $9, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $7_1;
    HEAP32[$0_1 + 92 >> 2] = $3;
   }
   $3 = HEAP32[$1_1 + 4 >> 2];
   $7_1 = $0_1 + 92 | 0;
   $9 = HEAP32[$7_1 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$9 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$9 + 4 >> 2] = $3;
   HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
   $396($0_1, $2_1, $10_1, $6_1);
   $388($0_1, HEAP32[$7_1 >> 2], HEAP32[$0_1 + 84 >> 2], $4_1, 0, $5_1);
   HEAP32[$0_1 + 84 >> 2] = 0;
  }
  global$0 = $8 + 32 | 0;
 }
 
 function $918($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = Math_fround($6_1);
  $7_1 = $7_1 | 0;
  var $8 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$8 + 8 >> 2] = $3;
  HEAP32[$8 + 12 >> 2] = $2_1;
  HEAP32[$8 + 4 >> 2] = $4_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $5_1, $6_1, $7_1);
  fimport$4(HEAP32[$8 + 4 >> 2]);
  fimport$4(HEAP32[$8 + 8 >> 2]);
  fimport$4(HEAP32[$8 + 12 >> 2]);
  global$0 = $8 + 16 | 0;
 }
 
 function $919($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 + 84 >> 2] = 0;
 }
 
 function $920($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  $5_1 = $763($1_1, $3 + 8 | 0);
  $2_1 = HEAP32[$0_1 + 84 >> 2];
  $1_1 = HEAP32[$0_1 + 88 >> 2];
  label$1 : {
   if (($2_1 | 0) != ($1_1 | 0)) {
    break label$1
   }
   $4_1 = $2_1 + 1 | 0;
   $6_1 = $1_1;
   if ($1_1) {
    $2_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0
   } else {
    $2_1 = 8
   }
   $1_1 = ($2_1 | 0) > ($4_1 | 0) ? $2_1 : $4_1;
   if (($6_1 | 0) >= ($1_1 | 0)) {
    break label$1
   }
   $2_1 = $16($1_1 << 3);
   $4_1 = HEAP32[$0_1 + 92 >> 2];
   if ($4_1) {
    $1602($2_1, $4_1, HEAP32[$0_1 + 84 >> 2] << 3);
    $17(HEAP32[$0_1 + 92 >> 2]);
   }
   HEAP32[$0_1 + 88 >> 2] = $1_1;
   HEAP32[$0_1 + 92 >> 2] = $2_1;
  }
  $2_1 = HEAP32[$5_1 + 4 >> 2];
  $1_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
  global$0 = $3 + 16 | 0;
 }
 
 function $921($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $4_1 + 8 | 0);
  $3 = HEAP32[$0_1 + 84 >> 2];
  label$1 : {
   if ($3) {
    $2_1 = (HEAP32[$0_1 + 92 >> 2] + ($3 << 3) | 0) - 8 | 0;
    if ((HEAPU8[$2_1 | 0] | HEAPU8[$2_1 + 1 | 0] << 8 | (HEAPU8[$2_1 + 2 | 0] << 16 | HEAPU8[$2_1 + 3 | 0] << 24)) == (HEAPU8[$1_1 | 0] | HEAPU8[$1_1 + 1 | 0] << 8 | (HEAPU8[$1_1 + 2 | 0] << 16 | HEAPU8[$1_1 + 3 | 0] << 24)) & (HEAPU8[$2_1 + 4 | 0] | HEAPU8[$2_1 + 5 | 0] << 8 | (HEAPU8[$2_1 + 6 | 0] << 16 | HEAPU8[$2_1 + 7 | 0] << 24)) == (HEAPU8[$1_1 + 4 | 0] | HEAPU8[$1_1 + 5 | 0] << 8 | (HEAPU8[$1_1 + 6 | 0] << 16 | HEAPU8[$1_1 + 7 | 0] << 24))) {
     break label$1
    }
   }
   $2_1 = HEAP32[$0_1 + 88 >> 2];
   label$3 : {
    if (($2_1 | 0) != ($3 | 0)) {
     break label$3
    }
    $5_1 = $3 + 1 | 0;
    $6_1 = $2_1;
    if ($2_1) {
     $3 = $2_1 + (($2_1 | 0) / 2 | 0) | 0
    } else {
     $3 = 8
    }
    $2_1 = ($3 | 0) > ($5_1 | 0) ? $3 : $5_1;
    if (($6_1 | 0) >= ($2_1 | 0)) {
     break label$3
    }
    $3 = $16($2_1 << 3);
    $5_1 = HEAP32[$0_1 + 92 >> 2];
    if ($5_1) {
     $1602($3, $5_1, HEAP32[$0_1 + 84 >> 2] << 3);
     $17(HEAP32[$0_1 + 92 >> 2]);
    }
    HEAP32[$0_1 + 88 >> 2] = $2_1;
    HEAP32[$0_1 + 92 >> 2] = $3;
   }
   $3 = HEAP32[$1_1 + 4 >> 2];
   $2_1 = HEAP32[$0_1 + 92 >> 2] + (HEAP32[$0_1 + 84 >> 2] << 3) | 0;
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3;
   HEAP32[$0_1 + 84 >> 2] = HEAP32[$0_1 + 84 >> 2] + 1;
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $922($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $389($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $1_1);
  HEAP32[$0_1 + 84 >> 2] = 0;
 }
 
 function $923($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($1_1, $2_1);
 }
 
 function $924($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $388($0_1, HEAP32[$0_1 + 92 >> 2], HEAP32[$0_1 + 84 >> 2], $1_1, $2_1, $3);
  HEAP32[$0_1 + 84 >> 2] = 0;
 }
 
 function $925($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = Math_fround($4_1);
  FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($1_1, $2_1, $3, $4_1);
 }
 
 function $926($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = Math_fround($3);
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $393($0_1, $763($1_1, $6_1 + 8 | 0), $2_1, $3, $4_1, $5_1);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $927($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = Math_fround($4_1);
  $5_1 = Math_fround($5_1);
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $7_1 + 12 | 0, $3, $4_1, $5_1, $6_1);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $928($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $392($0_1, $763($1_1, $5_1 + 8 | 0), $2_1, $3, $4_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $930($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 24 >> 2] = 0;
  HEAP32[$5_1 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $5_1 + 24 | 0);
  HEAP32[$5_1 + 16 >> 2] = 0;
  HEAP32[$5_1 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $5_1 + 16 | 0);
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $394($0_1, $1_1, $2_1, $763($3, $5_1 + 8 | 0), $4_1);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $932($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $4_1 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $396($0_1, $1_1, $763($2_1, $4_1), $3);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $934($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $5_1 + 8 | 0);
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  $398($0_1, $1_1, $763($2_1, $5_1), $3, $4_1);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $935($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$6_1 + 8 >> 2] = $3;
  HEAP32[$6_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $6_1 + 12 | 0, $6_1 + 8 | 0, $4_1, $5_1);
  fimport$4(HEAP32[$6_1 + 8 >> 2]);
  fimport$4(HEAP32[$6_1 + 12 >> 2]);
  global$0 = $6_1 + 16 | 0;
 }
 
 function $936($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $420($0_1 + 120 | 0, $1_1);
 }
 
 function $937($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($3 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  FUNCTION_TABLE[(!($3 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1, $2_1);
 }
 
 function $938($0_1) {
  $0_1 = $0_1 | 0;
  $421($0_1 + 120 | 0, $0_1);
 }
 
 function $939($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $422($0_1 + 120 | 0, $0_1, $1_1);
 }
 
 function $940($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
 }
 
 function $941($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$4_1 + 8 >> 2] = $3;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $4_1 + 12 | 0, $4_1 + 8 | 0);
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $943($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $1_1 = $763($1_1, $4_1 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $6_1 = $763($2_1, $4_1);
  $10_1 = HEAP32[$6_1 + 4 >> 2];
  $11_1 = HEAP32[$1_1 >> 2];
  $12_1 = HEAP32[$1_1 + 4 >> 2];
  $13 = HEAP32[$6_1 >> 2];
  $2_1 = HEAP32[$0_1 + 44 >> 2];
  $7_1 = HEAP32[$2_1 >> 2];
  $8 = HEAP32[$2_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 56 >> 2];
  $5_1 = HEAPU16[$0_1 + 40 >> 1];
  HEAP16[$2_1 + 10 >> 1] = $5_1 + 3;
  $9 = $5_1 + 2 | 0;
  HEAP16[$2_1 + 8 >> 1] = $9;
  HEAP16[$2_1 + 6 >> 1] = $5_1;
  HEAP16[$2_1 + 4 >> 1] = $9;
  HEAP16[$2_1 + 2 >> 1] = $5_1 + 1;
  HEAP16[$2_1 >> 1] = $5_1;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  $5_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 8 >> 2] = $7_1;
  HEAP32[$1_1 + 12 >> 2] = $8;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $13;
  HEAP32[$1_1 + 16 >> 2] = $3;
  HEAP32[$1_1 + 24 >> 2] = $12_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2] + 28 | 0;
  HEAP32[$1_1 >> 2] = $7_1;
  HEAP32[$1_1 + 4 >> 2] = $8;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $3;
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 + 44 >> 2] = $2_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
  HEAP32[$1_1 >> 2] = $7_1;
  HEAP32[$1_1 + 4 >> 2] = $8;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 60 >> 2] = $11_1;
  HEAP32[$1_1 - -64 >> 2] = $10_1;
  HEAP32[$1_1 + 56 >> 2] = $3;
  $1_1 = HEAP32[$0_1 + 52 >> 2] + 68 | 0;
  HEAP32[$1_1 >> 2] = $7_1;
  HEAP32[$1_1 + 4 >> 2] = $8;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 76 >> 2] = $3;
  HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $945($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 24 >> 2] = 0;
  HEAP32[$6_1 + 28 >> 2] = 0;
  $8 = $763($1_1, $6_1 + 24 | 0);
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 20 >> 2] = 0;
  $2_1 = $763($2_1, $6_1 + 16 | 0);
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $1_1 = $763($3, $6_1 + 8 | 0);
  HEAP32[$6_1 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  $9 = $763($4_1, $6_1);
  $10_1 = HEAP32[$1_1 >> 2];
  $11_1 = HEAP32[$9 + 4 >> 2];
  $12_1 = HEAP32[$2_1 + 4 >> 2];
  $13 = HEAP32[$8 >> 2];
  $14 = HEAP32[$9 >> 2];
  $15_1 = HEAP32[$1_1 + 4 >> 2];
  $16_1 = HEAP32[$8 + 4 >> 2];
  $17_1 = HEAP32[$2_1 >> 2];
  $7_1 = HEAP32[$0_1 + 56 >> 2];
  $4_1 = HEAPU16[$0_1 + 40 >> 1];
  HEAP16[$7_1 + 6 >> 1] = $4_1;
  HEAP16[$7_1 >> 1] = $4_1;
  HEAP16[$7_1 + 10 >> 1] = $4_1 + 3;
  $3 = $4_1 + 2 | 0;
  HEAP16[$7_1 + 8 >> 1] = $3;
  HEAP16[$7_1 + 4 >> 1] = $3;
  HEAP16[$7_1 + 2 >> 1] = $4_1 + 1;
  $4_1 = HEAP32[$8 + 4 >> 2];
  $3 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$3 + 4 >> 2] = $4_1;
  $4_1 = HEAP32[$1_1 + 4 >> 2];
  $3 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$3 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $4_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 20 >> 2] = $17_1;
  HEAP32[$1_1 + 16 >> 2] = $5_1;
  HEAP32[$1_1 + 24 >> 2] = $16_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 32 >> 2] = $15_1;
  HEAP32[$1_1 + 28 >> 2] = $14;
  $3 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$3 + 36 >> 2] = $5_1;
  $1_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$3 + 40 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$3 + 44 >> 2] = $1_1;
  $2_1 = HEAP32[$9 + 4 >> 2];
  $1_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 60 >> 2] = $13;
  HEAP32[$1_1 - -64 >> 2] = $12_1;
  HEAP32[$1_1 + 56 >> 2] = $5_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 72 >> 2] = $11_1;
  HEAP32[$1_1 + 68 >> 2] = $10_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 76 >> 2] = $5_1;
  HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
  global$0 = $6_1 + 32 | 0;
 }
 
 function $946($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $10_1 = global$0 + -64 | 0;
  global$0 = $10_1;
  HEAP32[$10_1 + 56 >> 2] = 0;
  HEAP32[$10_1 + 60 >> 2] = 0;
  $11_1 = $763($1_1, $10_1 + 56 | 0);
  HEAP32[$10_1 + 48 >> 2] = 0;
  HEAP32[$10_1 + 52 >> 2] = 0;
  $12_1 = $763($2_1, $10_1 + 48 | 0);
  HEAP32[$10_1 + 40 >> 2] = 0;
  HEAP32[$10_1 + 44 >> 2] = 0;
  $3 = $763($3, $10_1 + 40 | 0);
  HEAP32[$10_1 + 32 >> 2] = 0;
  HEAP32[$10_1 + 36 >> 2] = 0;
  $4_1 = $763($4_1, $10_1 + 32 | 0);
  HEAP32[$10_1 + 24 >> 2] = 0;
  HEAP32[$10_1 + 28 >> 2] = 0;
  $5_1 = $763($5_1, $10_1 + 24 | 0);
  HEAP32[$10_1 + 16 >> 2] = 0;
  HEAP32[$10_1 + 20 >> 2] = 0;
  $6_1 = $763($6_1, $10_1 + 16 | 0);
  HEAP32[$10_1 + 8 >> 2] = 0;
  HEAP32[$10_1 + 12 >> 2] = 0;
  $7_1 = $763($7_1, $10_1 + 8 | 0);
  HEAP32[$10_1 >> 2] = 0;
  HEAP32[$10_1 + 4 >> 2] = 0;
  $8 = $763($8, $10_1);
  $1_1 = HEAP32[$0_1 + 56 >> 2];
  $2_1 = HEAPU16[$0_1 + 40 >> 1];
  HEAP16[$1_1 + 6 >> 1] = $2_1;
  HEAP16[$1_1 >> 1] = $2_1;
  HEAP16[$1_1 + 10 >> 1] = $2_1 + 3;
  $13 = $2_1 + 2 | 0;
  HEAP16[$1_1 + 8 >> 1] = $13;
  HEAP16[$1_1 + 4 >> 1] = $13;
  HEAP16[$1_1 + 2 >> 1] = $2_1 + 1;
  $1_1 = HEAP32[$11_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$11_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 16 >> 2] = $9;
  $2_1 = HEAP32[$12_1 + 4 >> 2];
  HEAP32[$1_1 + 20 >> 2] = HEAP32[$12_1 >> 2];
  HEAP32[$1_1 + 24 >> 2] = $2_1;
  $1_1 = HEAP32[$6_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2] + 28 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 36 >> 2] = $9;
  $2_1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$1_1 + 40 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$1_1 + 44 >> 2] = $2_1;
  $1_1 = HEAP32[$7_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2] + 48 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$7_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 56 >> 2] = $9;
  $2_1 = HEAP32[$4_1 + 4 >> 2];
  HEAP32[$1_1 + 60 >> 2] = HEAP32[$4_1 >> 2];
  HEAP32[$1_1 + 64 >> 2] = $2_1;
  $1_1 = HEAP32[$8 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2] + 68 | 0;
  HEAP32[$2_1 >> 2] = HEAP32[$8 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 76 >> 2] = $9;
  HEAP32[$0_1 + 52 >> 2] = $1_1 + 80;
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 4;
  HEAP32[$0_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2] + 12;
  global$0 = $10_1 - -64 | 0;
 }
 
 function $947($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9, $10_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  $10_1 = $10_1 | 0;
  var $11_1 = 0;
  $11_1 = global$0 - 32 | 0;
  global$0 = $11_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$11_1 + 24 >> 2] = $3;
  HEAP32[$11_1 + 28 >> 2] = $2_1;
  HEAP32[$11_1 + 20 >> 2] = $4_1;
  HEAP32[$11_1 + 16 >> 2] = $5_1;
  HEAP32[$11_1 + 12 >> 2] = $6_1;
  HEAP32[$11_1 + 8 >> 2] = $7_1;
  HEAP32[$11_1 + 4 >> 2] = $8;
  HEAP32[$11_1 >> 2] = $9;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $11_1 + 28 | 0, $11_1 + 24 | 0, $11_1 + 20 | 0, $11_1 + 16 | 0, $11_1 + 12 | 0, $11_1 + 8 | 0, $11_1 + 4 | 0, $11_1, $10_1);
  fimport$4(HEAP32[$11_1 >> 2]);
  fimport$4(HEAP32[$11_1 + 4 >> 2]);
  fimport$4(HEAP32[$11_1 + 8 >> 2]);
  fimport$4(HEAP32[$11_1 + 12 >> 2]);
  fimport$4(HEAP32[$11_1 + 16 >> 2]);
  fimport$4(HEAP32[$11_1 + 20 >> 2]);
  fimport$4(HEAP32[$11_1 + 24 >> 2]);
  fimport$4(HEAP32[$11_1 + 28 >> 2]);
  global$0 = $11_1 + 32 | 0;
 }
 
 function $948($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $5_1 = $763($1_1, $4_1 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $6_1 = $763($2_1, $4_1);
  $1_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$6_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 16 >> 2] = $3;
  HEAP32[$0_1 + 52 >> 2] = $1_1 + 20;
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $949($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP16[$2_1 >> 1] = $1_1;
  HEAP32[$0_1 + 56 >> 2] = $2_1 + 2;
 }
 
 function $951($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $5_1 = $763($1_1, $4_1 + 8 | 0);
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  $6_1 = $763($2_1, $4_1);
  $1_1 = HEAP32[$0_1 + 56 >> 2];
  HEAP16[$1_1 >> 1] = HEAP32[$0_1 + 40 >> 2];
  HEAP32[$0_1 + 56 >> 2] = $1_1 + 2;
  $1_1 = HEAP32[$5_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 >> 2] = HEAP32[$5_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  $1_1 = HEAP32[$6_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1_1 = HEAP32[$0_1 + 52 >> 2];
  HEAP32[$1_1 + 16 >> 2] = $3;
  HEAP32[$0_1 + 52 >> 2] = $1_1 + 20;
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$0_1 + 40 >> 2] + 1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $952($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3 = 0;
  $3 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($3 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  return FUNCTION_TABLE[(!($3 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1, $2_1) | 0;
 }
 
 function $953($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0_1 + 20 >> 2];
  $3 = $2_1 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $1_1 = $768($1_1, $2_1);
  $3 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $3;
  $1_1 = $1_1 + 8 | 0;
  $3 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 12 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $3;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $956() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(51304, 51328, 51360, 0, 48504, 207, 48612, 0, 48612, 0, 13646, 48614, 208);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 209;
  fimport$13(51304, 4142, 3, 51376, 49004, 210, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(51304, 11913, 72652, 49e3, 211, $0_1 | 0, 72652, 49004, 212, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(51304, 2818, 72724, 49e3, 213, $0_1 | 0, 72724, 49004, 214, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 8;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 8;
  fimport$12(51304, 2776, 72724, 49e3, 213, $0_1 | 0, 72724, 49004, 214, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(51304, 2762, 72724, 49e3, 213, $0_1 | 0, 72724, 49004, 214, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 215;
  fimport$12(51304, 4382, 48496, 49e3, 216, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 217;
  fimport$12(51304, 10047, 48496, 49e3, 216, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 218;
  fimport$12(51304, 11492, 48496, 49e3, 216, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 219;
  fimport$13(51304, 4325, 2, 51388, 49408, 220, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 221;
  fimport$13(51304, 4222, 3, 51396, 49004, 222, $0_1 | 0, 0, 0);
 }
 
 function $957($0_1) {
  $0_1 = $0_1 | 0;
  return 51304;
 }
 
 function $959($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (HEAP32[$0_1 + 4 >> 2] > 0) {
   while (1) {
    HEAP32[$2_1 + 8 >> 2] = HEAP32[HEAP32[$0_1 + 16 >> 2] + ($3 << 2) >> 2];
    $5_1 = $2_1 + 8 | 0;
    $4_1 = fimport$1(49828, $5_1 | 0) | 0;
    fimport$10($4_1 | 0);
    HEAP32[$2_1 + 8 >> 2] = $4_1;
    fimport$4(fimport$16(HEAP32[$1_1 >> 2], 1, 48472, $5_1 | 0) | 0);
    fimport$4($4_1 | 0);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0_1 + 4 >> 2]) {
     continue
    }
    break;
   }
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $967($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 28;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $968($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 36;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $970($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  $5_1 = $763($1_1, $3 + 8 | 0);
  $1_1 = 0;
  if (HEAP32[$0_1 + 4 >> 2] > 0) {
   while (1) {
    $8 = $1_1;
    $4_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] + ($1_1 << 2) >> 2];
    if (HEAP32[$4_1 >> 2] > 0) {
     $1_1 = 0;
     while (1) {
      $6_1 = HEAPF32[$5_1 >> 2];
      $2_1 = HEAP32[$4_1 + 8 >> 2] + Math_imul($1_1, 40) | 0;
      $7_1 = HEAPF32[$5_1 + 4 >> 2];
      HEAPF32[$2_1 + 12 >> 2] = $7_1 * HEAPF32[$2_1 + 12 >> 2];
      HEAPF32[$2_1 + 8 >> 2] = $6_1 * HEAPF32[$2_1 + 8 >> 2];
      HEAPF32[$2_1 + 4 >> 2] = $7_1 * HEAPF32[$2_1 + 4 >> 2];
      HEAPF32[$2_1 >> 2] = $6_1 * HEAPF32[$2_1 >> 2];
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) < HEAP32[$4_1 >> 2]) {
       continue
      }
      break;
     };
    }
    $1_1 = $8 + 1 | 0;
    if (($1_1 | 0) < HEAP32[$0_1 + 4 >> 2]) {
     continue
    }
    break;
   }
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $972() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(51424, 51448, 51480, 0, 48504, 223, 48612, 0, 48612, 0, 8786, 48614, 224);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 225;
  fimport$12(51424, 12239, 48496, 49e3, 226, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 227;
  fimport$12(51424, 11372, 48496, 49e3, 226, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 228;
  fimport$12(51424, 2991, 48496, 49e3, 226, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(51424, 14347, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 8;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 8;
  fimport$12(51424, 16647, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(51424, 16644, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(51424, 16625, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 20;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 20;
  fimport$12(51424, 16622, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 24;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 24;
  fimport$12(51424, 16653, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 28;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 28;
  fimport$12(51424, 16650, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 32;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 32;
  fimport$12(51424, 16631, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 36;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 36;
  fimport$12(51424, 16628, 72796, 48692, 229, $0_1 | 0, 72796, 48696, 230, $1_1 | 0);
 }
 
 function $973($0_1) {
  $0_1 = $0_1 | 0;
  return 51424;
 }
 
 function $975($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2] & 1;
  HEAP32[$0_1 >> 2] = fimport$1(72652, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $977($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2] >>> 1 & 1;
  HEAP32[$0_1 >> 2] = fimport$1(72652, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $978($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 >> 2] >>> 2;
  HEAP32[$0_1 >> 2] = fimport$1(72736, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $981() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(51512, 51536, 51572, 0, 48504, 231, 48612, 0, 48612, 0, 9429, 48614, 232);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 233;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 234;
  fimport$12(51512, 13688, 48496, 49e3, 235, $0_1 | 0, 48496, 49004, 236, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 8;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 8;
  fimport$12(51512, 5409, 72652, 49e3, 237, $0_1 | 0, 72652, 49004, 238, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(51512, 7123, 72724, 49e3, 239, $0_1 | 0, 72724, 49004, 240, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(51512, 4774, 72796, 48692, 241, $0_1 | 0, 72796, 48696, 242, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 20;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 20;
  fimport$12(51512, 14893, 72724, 49e3, 239, $0_1 | 0, 72724, 49004, 240, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 24;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 24;
  fimport$12(51512, 14751, 72724, 49e3, 239, $0_1 | 0, 72724, 49004, 240, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 28;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 28;
  fimport$12(51512, 14882, 72652, 49e3, 237, $0_1 | 0, 72652, 49004, 238, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 243;
  fimport$12(51512, 9411, 48496, 49e3, 235, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 244;
  fimport$12(51512, 3521, 48496, 49e3, 235, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 245;
  fimport$12(51512, 5204, 48496, 49e3, 235, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 52;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 52;
  fimport$12(51512, 14322, 72796, 48692, 241, $0_1 | 0, 72796, 48696, 242, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 56;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 56;
  fimport$12(51512, 14305, 72796, 48692, 241, $0_1 | 0, 72796, 48696, 242, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 60;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 60;
  fimport$12(51512, 11606, 72652, 49e3, 237, $0_1 | 0, 72652, 49004, 238, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 64;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 64;
  fimport$12(51512, 4895, 72736, 49e3, 246, $0_1 | 0, 72736, 49004, 247, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 68;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 68;
  fimport$12(51512, 1170, 72796, 48692, 241, $0_1 | 0, 72796, 48696, 242, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 248;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 249;
  fimport$12(51512, 11255, 48496, 49e3, 235, $0_1 | 0, 48496, 49004, 236, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 250;
  fimport$12(51512, 2951, 48496, 49e3, 235, $0_1 | 0, 0, 0, 0, 0);
 }
 
 function $982($0_1) {
  $0_1 = $0_1 | 0;
  return 51512;
 }
 
 function $984($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = 2447;
  $1675(19180, $1_1);
  HEAP32[$0_1 >> 2] = 2;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $985($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 >> 2] = 2281;
  $1675(19180, $0_1);
  global$0 = $0_1 + 16 | 0;
 }
 
 function $994($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 32;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $995($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 40;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $996($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$1_1 + 48 >> 2];
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 >> 2] = 2;
    break label$1;
   }
   HEAP32[$2_1 + 8 >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = fimport$1(72748, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $999($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $4_1 = $1_1 + 74 | 0;
  $3 = $1697($4_1);
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 23 | 0] = $3;
     $1_1 = $2_1 + 12 | 0;
     break label$2;
    }
    $5_1 = ($3 | 15) + 1 | 0;
    $1_1 = $1782($5_1);
    HEAP32[$2_1 + 20 >> 2] = $5_1 | -2147483648;
    HEAP32[$2_1 + 12 >> 2] = $1_1;
    HEAP32[$2_1 + 16 >> 2] = $3;
   }
   if ($3) {
    $1602($1_1, $4_1, $3)
   }
   HEAP8[$1_1 + $3 | 0] = 0;
   $3 = HEAP8[$2_1 + 23 | 0];
   $1_1 = ($3 | 0) < 0;
   $3 = $1_1 ? HEAP32[$2_1 + 16 >> 2] : $3 & 127;
   $4_1 = $1755($3 + 4 | 0);
   HEAP32[$4_1 >> 2] = $3;
   $1602($4_1 + 4 | 0, $1_1 ? HEAP32[$2_1 + 12 >> 2] : $2_1 + 12 | 0, $3);
   HEAP32[$2_1 + 24 >> 2] = $4_1;
   HEAP32[$0_1 >> 2] = fimport$1(49072, $2_1 + 24 | 0);
   if (HEAP8[$2_1 + 23 | 0] < 0) {
    $1756(HEAP32[$2_1 + 12 >> 2])
   }
   global$0 = $2_1 + 32 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1000($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $5_1 = +fimport$5(HEAP32[$1_1 >> 2], 49072, $2_1 + 12 | 0);
  label$1 : {
   if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
    $4_1 = ~~$5_1 >>> 0;
    break label$1;
   }
   $4_1 = 0;
  }
  $3 = HEAP32[$4_1 >> 2];
  if ($3 >>> 0 < 2147483632) {
   $7_1 = HEAP32[$2_1 + 12 >> 2];
   label$4 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 11 | 0] = $3;
     $1_1 = $2_1;
     break label$4;
    }
    $6_1 = ($3 | 15) + 1 | 0;
    $1_1 = $1782($6_1);
    HEAP32[$2_1 + 8 >> 2] = $6_1 | -2147483648;
    HEAP32[$2_1 >> 2] = $1_1;
    HEAP32[$2_1 + 4 >> 2] = $3;
   }
   if ($3) {
    $1602($1_1, $4_1 + 4 | 0, $3)
   }
   HEAP8[$1_1 + $3 | 0] = 0;
   fimport$6($7_1 | 0);
   $4_1 = $0_1 + 74 | 0;
   $0_1 = HEAP32[$2_1 >> 2];
   $1_1 = HEAP8[$2_1 + 11 | 0];
   $1699($4_1, ($1_1 | 0) < 0 ? $0_1 : $2_1, 39);
   if (($1_1 | 0) < 0) {
    $1756($0_1)
   }
   global$0 = $2_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1001($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$1_1 + 116 >> 2];
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 >> 2] = 2;
    break label$1;
   }
   HEAP32[$2_1 + 8 >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = fimport$1(50504, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1002() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(50496, 50504, 51600, 0, 48504, 251, 48612, 0, 48612, 0, 2975, 48614, 252);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(50496, 10150, 72796, 48692, 253, $0_1 | 0, 72796, 48696, 254, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 68;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 68;
  fimport$12(50496, 11519, 72796, 48692, 253, $0_1 | 0, 72796, 48696, 254, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 255;
  fimport$13(50496, 4832, 3, 51616, 49004, 256, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 257;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 258;
  fimport$12(50496, 8798, 48496, 49e3, 259, $0_1 | 0, 48496, 49004, 260, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(50496, 14339, 72796, 48692, 253, $0_1 | 0, 72796, 48696, 254, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 58;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 58;
  fimport$12(50496, 6525, 72712, 49e3, 261, $0_1 | 0, 72712, 49004, 262, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 60;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 60;
  fimport$12(50496, 6501, 72712, 49e3, 261, $0_1 | 0, 72712, 49004, 262, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 62;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 62;
  fimport$12(50496, 6483, 72712, 49e3, 261, $0_1 | 0, 72712, 49004, 262, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 56;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 56;
  fimport$12(50496, 2935, 72700, 49e3, 263, $0_1 | 0, 72700, 49004, 264, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 265;
  fimport$13(50496, 13852, 3, 51616, 49004, 256, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 72;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 72;
  fimport$12(50496, 3093, 72796, 48692, 253, $0_1 | 0, 72796, 48696, 254, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 76;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 76;
  fimport$12(50496, 3085, 72796, 48692, 253, $0_1 | 0, 72796, 48696, 254, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 80;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 80;
  fimport$12(50496, 11683, 72724, 49e3, 266, $0_1 | 0, 72724, 49004, 267, $1_1 | 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 268;
  fimport$13(50496, 13657, 2, 51628, 49408, 269, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 270;
  fimport$13(50496, 11401, 2, 51628, 49408, 269, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 271;
  fimport$13(50496, 8812, 3, 51636, 48740, 272, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 273;
  fimport$13(50496, 8508, 3, 51636, 48740, 272, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 274;
  fimport$13(50496, 11668, 3, 51648, 51660, 275, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 276;
  fimport$13(50496, 12706, 2, 51668, 49e3, 277, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 278;
  fimport$13(50496, 11247, 2, 51676, 49e3, 279, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 280;
  fimport$13(50496, 15340, 8, 51696, 51728, 281, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 282;
  fimport$13(50496, 15318, 5, 51744, 51764, 283, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 284;
  fimport$13(50496, 6514, 7, 51776, 51804, 285, $0_1 | 0, 0, 0);
 }
 
 function $1003($0_1) {
  $0_1 = $0_1 | 0;
  return 50496;
 }
 
 function $1004($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   $1756($471($0_1))
  }
 }
 
 function $1007($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (HEAP32[$0_1 + 32 >> 2] > 0) {
   while (1) {
    HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 40 >> 2] + Math_imul($3, 40);
    $5_1 = $2_1 + 8 | 0;
    $4_1 = fimport$1(51448, $5_1 | 0) | 0;
    fimport$10($4_1 | 0);
    HEAP32[$2_1 + 8 >> 2] = $4_1;
    fimport$4(fimport$16(HEAP32[$1_1 >> 2], 1, 48472, $5_1 | 0) | 0);
    fimport$4($4_1 | 0);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0_1 + 32 >> 2]) {
     continue
    }
    break;
   }
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1009($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$1_1 + 44 >> 2];
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 >> 2] = 2;
    break label$1;
   }
   HEAP32[$2_1 + 8 >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = fimport$1(51480, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1010($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$1_1 >> 2];
  if (($1_1 | 0) == 2) {
   $1_1 = 0
  } else {
   $3 = +fimport$5($1_1 | 0, 51480, $2_1 + 12 | 0);
   fimport$6(HEAP32[$2_1 + 12 >> 2]);
   if ($3 < 4294967296.0 & $3 >= 0.0) {
    $1_1 = ~~$3 >>> 0
   } else {
    $1_1 = 0
   }
  }
  HEAP32[$0_1 + 44 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1017($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (HEAP16[$0_1 + 56 >> 1] > 0) {
   while (1) {
    HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 52 >> 2] + Math_imul($3, 120);
    $5_1 = $2_1 + 8 | 0;
    $4_1 = fimport$1(51572, $5_1 | 0) | 0;
    fimport$10($4_1 | 0);
    HEAP32[$2_1 + 8 >> 2] = $4_1;
    fimport$4(fimport$16(HEAP32[$1_1 >> 2], 1, 48472, $5_1 | 0) | 0);
    fimport$4($4_1 | 0);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP16[$0_1 + 56 >> 1]) {
     continue
    }
    break;
   }
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1021($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $1_1 = $472($1_1, $2_1);
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 >> 2] = 2;
    break label$1;
   }
   HEAP32[$3 + 8 >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = fimport$1(51480, $3 + 8 | 0);
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $1023($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  if ($2_1 >>> 0 < HEAPU32[$1_1 + 20 >> 2]) {
   $4_1 = HEAP32[$1_1 + 40 >> 2];
   $1_1 = HEAPU16[HEAP32[$1_1 + 28 >> 2] + ($2_1 << 1) >> 1];
   $1_1 = ($1_1 | 0) != 65535 ? $4_1 + Math_imul($1_1, 40) | 0 : 0;
  } else {
   $1_1 = 0
  }
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 >> 2] = 2;
    break label$1;
   }
   HEAP32[$3 + 8 >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = fimport$1(51480, $3 + 8 | 0);
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $1024($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(HEAPF32[(HEAP32[$0_1 >> 2] > ($1_1 | 0) ? HEAP32[$0_1 + 8 >> 2] + ($1_1 << 2) | 0 : $0_1 + 12 | 0) >> 2]);
 }
 
 function $1025($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($3 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  return Math_fround(Math_fround(FUNCTION_TABLE[(!($3 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1, $2_1)));
 }
 
 function $1026($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 48 >> 2] != 0 | 0;
 }
 
 function $1028($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $1_1 = HEAP32[$1_1 + 52 >> 2];
  $3 = $1_1 ? $1_1 + 74 | 0 : 16019;
  $2_1 = $1697($3);
  if ($2_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($2_1 >>> 0 <= 10) {
     HEAP8[$0_1 + 11 | 0] = $2_1;
     break label$2;
    }
    $4_1 = ($2_1 | 15) + 1 | 0;
    $1_1 = $1782($4_1);
    HEAP32[$0_1 + 8 >> 2] = $4_1 | -2147483648;
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = $1_1;
   }
   $1_1 = $0_1 + $2_1 | 0;
   if ($2_1) {
    $1603($0_1, $3, $2_1)
   }
   HEAP8[$1_1 | 0] = 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1029($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2_1 + 4 | 0;
  FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($4_1, $1_1);
  $1_1 = HEAPU8[$2_1 + 15 | 0];
  $5_1 = $1_1 << 24 >> 24;
  $0_1 = ($5_1 | 0) < 0;
  $1_1 = $0_1 ? HEAP32[$2_1 + 8 >> 2] : $1_1 & 127;
  $3 = $1755($1_1 + 4 | 0);
  HEAP32[$3 >> 2] = $1_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $1602($3 + 4 | 0, $0_1 ? $6_1 : $4_1, $1_1);
  if (($5_1 | 0) < 0) {
   $1756($6_1)
  }
  global$0 = $2_1 + 16 | 0;
  return $3 | 0;
 }
 
 function $1030($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = Math_fround($3);
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $9 = HEAP32[$5_1 >> 2];
  $10_1 = HEAP8[$5_1 + 11 | 0];
  HEAP32[$8 + 20 >> 2] = 0;
  $5_1 = ($10_1 | 0) < 0 ? $9 : $5_1;
  $474($8 + 12 | 0, $1_1, $2_1, $3, $4_1, $5_1, 0, $8 + 20 | 0);
  $6_1 = HEAP32[$6_1 >> 2];
  if (($6_1 | 0) != 2) {
   $9 = HEAP32[$8 + 20 >> 2];
   HEAP32[$8 + 24 >> 2] = 0;
   $1_1 = fimport$1(72724, $8 + 24 | 0) | 0;
   HEAP32[$8 + 24 >> 2] = $9 - $5_1;
   $5_1 = fimport$1(72724, $8 + 24 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($5_1 | 0);
   fimport$4($1_1 | 0);
  }
  $1_1 = HEAP32[$7_1 >> 2];
  HEAP32[$8 + 24 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $8 + 12 | 0, $8 + 24 | 0);
  fimport$4(HEAP32[$8 + 24 >> 2]);
  global$0 = $8 + 32 | 0;
 }
 
 function $1031($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = Math_fround($3);
  $4_1 = Math_fround($4_1);
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $9 = HEAP32[$5_1 >> 2];
  if ($9 >>> 0 < 2147483632) {
   $11_1 = HEAP32[$0_1 >> 2];
   label$2 : {
    if ($9 >>> 0 <= 10) {
     HEAP8[$8 + 27 | 0] = $9;
     $0_1 = $8 + 16 | 0;
     break label$2;
    }
    $10_1 = ($9 | 15) + 1 | 0;
    $0_1 = $1782($10_1);
    HEAP32[$8 + 24 >> 2] = $10_1 | -2147483648;
    HEAP32[$8 + 16 >> 2] = $0_1;
    HEAP32[$8 + 20 >> 2] = $9;
   }
   if ($9) {
    $1602($0_1, $5_1 + 4 | 0, $9)
   }
   HEAP8[$0_1 + $9 | 0] = 0;
   HEAP32[$8 + 8 >> 2] = $7_1;
   HEAP32[$8 + 12 >> 2] = $6_1;
   FUNCTION_TABLE[$11_1 | 0]($8 + 28 | 0, $1_1, $2_1, $3, $4_1, $8 + 16 | 0, $8 + 12 | 0, $8 + 8 | 0);
   fimport$10(HEAP32[$8 + 28 >> 2]);
   $0_1 = HEAP32[$8 + 28 >> 2];
   fimport$4($0_1 | 0);
   fimport$4(HEAP32[$8 + 8 >> 2]);
   fimport$4(HEAP32[$8 + 12 >> 2]);
   if (HEAP8[$8 + 27 | 0] < 0) {
    $1756(HEAP32[$8 + 16 >> 2])
   }
   global$0 = $8 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1032($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  var $4_1 = 0;
  $4_1 = $0_1;
  $0_1 = HEAP8[$2_1 + 11 | 0] < 0 ? HEAP32[$2_1 >> 2] : $2_1;
  return $415($4_1, $1_1, $0_1, 0, $3) - $0_1 | 0;
 }
 
 function $1033($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = Math_fround($4_1);
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$3 >> 2];
  if ($6_1 >>> 0 < 2147483632) {
   $8 = HEAP32[$0_1 >> 2];
   label$2 : {
    if ($6_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 15 | 0] = $6_1;
     $0_1 = $5_1 + 4 | 0;
     break label$2;
    }
    $7_1 = ($6_1 | 15) + 1 | 0;
    $0_1 = $1782($7_1);
    HEAP32[$5_1 + 12 >> 2] = $7_1 | -2147483648;
    HEAP32[$5_1 + 4 >> 2] = $0_1;
    HEAP32[$5_1 + 8 >> 2] = $6_1;
   }
   if ($6_1) {
    $1602($0_1, $3 + 4 | 0, $6_1)
   }
   HEAP8[$0_1 + $6_1 | 0] = 0;
   $0_1 = FUNCTION_TABLE[$8 | 0]($1_1, $2_1, $5_1 + 4 | 0, $4_1) | 0;
   if (HEAP8[$5_1 + 15 | 0] < 0) {
    $1756(HEAP32[$5_1 + 4 >> 2])
   }
   global$0 = $5_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1034($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0.0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = +fimport$5(HEAP32[$1_1 >> 2], 49796, $6_1 + 28 | 0);
  fimport$6(HEAP32[$6_1 + 28 >> 2]);
  HEAP32[$6_1 + 20 >> 2] = 0;
  HEAP32[$6_1 + 24 >> 2] = 0;
  $1_1 = $763($3, $6_1 + 20 | 0);
  $3 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$6_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 12 >> 2] = $3;
  if ($7_1 < 4294967296.0 & $7_1 >= 0.0) {
   $1_1 = ~~$7_1 >>> 0
  } else {
   $1_1 = 0
  }
  $475($0_1, $1_1, $2_1, $6_1 + 8 | 0, $4_1, $5_1);
  global$0 = $6_1 + 32 | 0;
 }
 
 function $1035($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$7_1 + 8 >> 2] = $4_1;
  HEAP32[$7_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $7_1 + 12 | 0, $3, $7_1 + 8 | 0, $5_1, $6_1);
  fimport$4(HEAP32[$7_1 + 8 >> 2]);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1036() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(51828, 51852, 51884, 0, 48504, 286, 48612, 0, 48612, 0, 5430, 48614, 287);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 288;
  fimport$13(51828, 3135, 3, 51900, 48740, 289, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 290;
  fimport$13(51828, 14935, 6, 51920, 51944, 291, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 292;
  fimport$13(51828, 13621, 2, 52e3, 49408, 293, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 294;
  fimport$13(51828, 13673, 2, 52e3, 49408, 293, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 295;
  fimport$13(51828, 4169, 2, 52e3, 49408, 293, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 296;
  fimport$13(51828, 6542, 2, 52e3, 49408, 293, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 297;
  fimport$13(51828, 11850, 2, 52008, 49e3, 298, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 299;
  fimport$13(51828, 3187, 2, 52016, 49e3, 300, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 301;
  fimport$13(51828, 16167, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 303;
  fimport$13(51828, 16603, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 304;
  fimport$13(51828, 3150, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 305;
  fimport$13(51828, 7865, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 306;
  fimport$13(51828, 10811, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 307;
  fimport$13(51828, 8143, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 308;
  fimport$13(51828, 7361, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 309;
  fimport$13(51828, 13473, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 310;
  fimport$13(51828, 8556, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 311;
  fimport$13(51828, 10834, 2, 52024, 49e3, 302, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(51828, 12628, 72652, 49e3, 312, $0_1 | 0, 72652, 49004, 313, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(51828, 4951, 72724, 49e3, 314, $0_1 | 0, 72724, 49004, 315, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 316;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 317;
  fimport$12(51828, 15025, 48496, 49e3, 318, $0_1 | 0, 48496, 49004, 319, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 8;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 8;
  fimport$12(51828, 8760, 72724, 49e3, 314, $0_1 | 0, 72724, 49004, 315, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 12;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 12;
  fimport$12(51828, 9188, 72724, 49e3, 314, $0_1 | 0, 72724, 49004, 315, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 28;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 28;
  fimport$12(51828, 8648, 72724, 49e3, 314, $0_1 | 0, 72724, 49004, 315, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 32;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 32;
  fimport$12(51828, 3315, 72724, 49e3, 314, $0_1 | 0, 72724, 49004, 315, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 320;
  fimport$12(51828, 11438, 48496, 49e3, 318, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 321;
  fimport$12(51828, 8302, 48496, 49e3, 318, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 322;
  fimport$13(51828, 4180, 3, 52032, 49004, 323, $0_1 | 0, 0, 0);
 }
 
 function $1037($0_1) {
  $0_1 = $0_1 | 0;
  return 51828;
 }
 
 function $1038($0_1) {
  $0_1 = $0_1 | 0;
  if ($0_1) {
   $1756($428($0_1))
  }
 }
 
 function $1039($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = Math_fround(0);
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  $3 = HEAP32[$2_1 >> 2];
  label$1 : {
   if (($3 | 0) == 2) {
    $426($4_1 + 16 | 0);
    break label$1;
   }
   HEAP32[$4_1 + 12 >> 2] = $3;
   fimport$10($3 | 0);
   $773($4_1 + 16 | 0, $4_1 + 12 | 0);
  }
  if (($3 | 0) != 2) {
   fimport$4(HEAP32[$4_1 + 12 >> 2])
  }
  $3 = global$0 - 128 | 0;
  global$0 = $3;
  $2_1 = HEAP32[$2_1 >> 2] != 2 ? $4_1 + 16 | 0 : 0;
  label$10 : {
   if ($2_1) {
    $1602($3 + 8 | 0, $2_1, 120);
    break label$10;
   }
   $426($3 + 8 | 0);
  }
  if (!$2_1) {
   HEAP8[$3 + 36 | 0] = 1;
   HEAP32[$3 + 28 >> 2] = 1;
   HEAP32[$3 + 32 >> 2] = 1;
  }
  if (HEAPF32[$3 + 24 >> 2] <= Math_fround(0.0)) {
   HEAP32[$3 + 24 >> 2] = 1095761920
  }
  if (!HEAPU8[$3 + 82 | 0]) {
   $2_1 = $3 + 82 | 0;
   $5_1 = HEAPF32[$3 + 24 >> 2];
   label$6 : {
    if (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0)) {
     $6_1 = ~~$5_1;
     break label$6;
    }
    $6_1 = -2147483648;
   }
   HEAP32[$3 >> 2] = $6_1;
   $21($2_1, 40, 1268, $3);
  }
  $2_1 = $3 + 52 | 0;
  $5_1 = HEAPF32[$3 + 24 >> 2];
  $7_1 = Math_fround($5_1 / Math_fround(13.0));
  label$8 : {
   if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
    $6_1 = ~~$7_1;
    break label$8;
   }
   $6_1 = -2147483648;
  }
  HEAPF32[$2_1 >> 2] = $6_1 | 0;
  HEAP16[$3 + 80 >> 1] = 133;
  $2_1 = $1_1;
  $1_1 = HEAP32[$3 + 56 >> 2];
  $1_1 = $435($2_1, $5_1, $3 + 8 | 0, $1_1 ? $1_1 : 21640);
  global$0 = $3 + 128 | 0;
  HEAP32[$4_1 + 136 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = fimport$1(50504, $4_1 + 136 | 0);
  global$0 = $4_1 + 144 | 0;
 }
 
 function $1041($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 160 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 148 >> 2] = 0;
  HEAP32[$6_1 + 140 >> 2] = 0;
  HEAP32[$6_1 + 144 >> 2] = 0;
  $8 = HEAP32[$2_1 >> 2];
  $7_1 = fimport$2(8624) | 0;
  $8 = fimport$7($8 | 0, $7_1 | 0) | 0;
  fimport$4($7_1 | 0);
  $9 = +fimport$5($8 | 0, 72760, $6_1 + 16 | 0);
  fimport$6(HEAP32[$6_1 + 16 >> 2]);
  $11_1 = HEAP32[$6_1 + 140 >> 2];
  $10_1 = HEAP32[$6_1 + 144 >> 2] - $11_1 | 0;
  $7_1 = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
  label$3 : {
   if ($10_1 >>> 0 < $7_1 >>> 0) {
    $1070($6_1 + 140 | 0, $7_1 - $10_1 | 0);
    break label$3;
   }
   if ($7_1 >>> 0 >= $10_1 >>> 0) {
    break label$3
   }
   HEAP32[$6_1 + 144 >> 2] = $7_1 + $11_1;
  }
  fimport$4($8 | 0);
  $7_1 = HEAP32[$6_1 + 144 >> 2];
  $8 = HEAP32[$6_1 + 140 >> 2];
  HEAP32[$6_1 + 20 >> 2] = $8;
  HEAP32[$6_1 + 16 >> 2] = $7_1 - $8;
  $7_1 = fimport$1(51984, $6_1 + 16 | 0) | 0;
  if (!(HEAP8[95820] & 1)) {
   $8 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $8;
  }
  $8 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$6_1 + 16 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($8 | 0, $7_1 | 0, 3559, $6_1 + 16 | 0);
  fimport$4($7_1 | 0);
  $7_1 = HEAP32[$6_1 + 144 >> 2] - HEAP32[$6_1 + 140 >> 2] | 0;
  $8 = $1602($16($7_1), HEAP32[$6_1 + 140 >> 2], $7_1);
  $2_1 = HEAP32[$4_1 >> 2];
  label$6 : {
   if (($2_1 | 0) == 2) {
    $426($6_1 + 16 | 0);
    break label$6;
   }
   HEAP32[$6_1 + 12 >> 2] = $2_1;
   fimport$10($2_1 | 0);
   $773($6_1 + 16 | 0, $6_1 + 12 | 0);
  }
  if (($2_1 | 0) != 2) {
   fimport$4(HEAP32[$6_1 + 12 >> 2])
  }
  $2_1 = 0;
  $5_1 = HEAP32[$5_1 >> 2];
  if (($5_1 | 0) != 2) {
   $9 = +fimport$5($5_1 | 0, 72748, $6_1 + 152 | 0);
   fimport$6(HEAP32[$6_1 + 152 >> 2]);
   $2_1 = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
  }
  $5_1 = global$0 - 128 | 0;
  global$0 = $5_1;
  $4_1 = HEAP32[$4_1 >> 2] != 2 ? $6_1 + 16 | 0 : 0;
  label$1 : {
   if ($4_1) {
    $1602($5_1 + 8 | 0, $4_1, 120);
    break label$1;
   }
   $426($5_1 + 8 | 0);
  }
  HEAP32[$5_1 + 12 >> 2] = $7_1;
  HEAP32[$5_1 + 8 >> 2] = $8;
  HEAPF32[$5_1 + 24 >> 2] = $3 > Math_fround(0.0) ? $3 : HEAPF32[$5_1 + 24 >> 2];
  if ($2_1) {
   HEAP32[$5_1 + 56 >> 2] = $2_1
  }
  $1_1 = $438($1_1, $5_1 + 8 | 0);
  global$0 = $5_1 + 128 | 0;
  HEAP32[$6_1 + 152 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = fimport$1(50504, $6_1 + 152 | 0);
  $0_1 = HEAP32[$6_1 + 140 >> 2];
  if ($0_1) {
   HEAP32[$6_1 + 144 >> 2] = $0_1;
   $1756($0_1);
  }
  global$0 = $6_1 + 160 | 0;
 }
 
 function $1042($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$6_1 + 4 >> 2] = $4_1;
  HEAP32[$6_1 + 8 >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $5_1;
  FUNCTION_TABLE[$0_1 | 0]($6_1 + 12 | 0, $1_1, $6_1 + 8 | 0, $3, $6_1 + 4 | 0, $6_1);
  fimport$10(HEAP32[$6_1 + 12 >> 2]);
  $0_1 = HEAP32[$6_1 + 12 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$6_1 >> 2]);
  fimport$4(HEAP32[$6_1 + 4 >> 2]);
  fimport$4(HEAP32[$6_1 + 8 >> 2]);
  global$0 = $6_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1045($0_1) {
  $0_1 = $0_1 | 0;
  return HEAPU8[$0_1 + 17 | 0] != 0 & HEAP32[$0_1 + 52 >> 2] > 0;
 }
 
 function $1047($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = -1;
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 8 >> 2] = -1;
  $6_1 = $2_1 + 20 | 0;
  $3 = $2_1 + 16 | 0;
  $4_1 = $2_1 + 12 | 0;
  $5_1 = $2_1 + 8 | 0;
  if (!HEAP32[$1_1 + 20 >> 2]) {
   $434($1_1)
  }
  HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 20 >> 2];
  if ($3) {
   HEAP32[$3 >> 2] = HEAP32[$1_1 + 28 >> 2]
  }
  if ($4_1) {
   HEAP32[$4_1 >> 2] = HEAP32[$1_1 + 32 >> 2]
  }
  if ($5_1) {
   HEAP32[$5_1 >> 2] = 1
  }
  $1_1 = $0_1;
  $0_1 = fimport$0() | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  $1_1 = fimport$2(4767) | 0;
  $3 = HEAP32[$2_1 + 8 >> 2];
  $4_1 = HEAP32[$2_1 + 12 >> 2];
  $5_1 = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$2_1 + 24 >> 2] = Math_imul($3, Math_imul($4_1, $5_1));
  $5_1 = $2_1 + 24 | 0;
  $3 = $5_1;
  $4_1 = fimport$1(51984, $3 | 0) | 0;
  fimport$3($0_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($4_1 | 0);
  fimport$4($1_1 | 0);
  $1_1 = fimport$2(8642) | 0;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 16 >> 2];
  $3 = fimport$1(72724, $3 | 0) | 0;
  fimport$3($0_1 | 0, $1_1 | 0, $3 | 0);
  fimport$4($3 | 0);
  fimport$4($1_1 | 0);
  $1_1 = fimport$2(3301) | 0;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 12 >> 2];
  $3 = fimport$1(72724, $5_1 | 0) | 0;
  fimport$3($0_1 | 0, $1_1 | 0, $3 | 0);
  fimport$4($3 | 0);
  fimport$4($1_1 | 0);
  $1_1 = fimport$2(8279) | 0;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 8 >> 2];
  $3 = $0_1;
  $0_1 = fimport$1(72724, $2_1 + 24 | 0) | 0;
  fimport$3($3 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1049($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = -1;
  HEAP32[$2_1 + 12 >> 2] = -1;
  HEAP32[$2_1 + 8 >> 2] = -1;
  $10_1 = $2_1 + 20 | 0;
  $7_1 = $2_1 + 16 | 0;
  $8 = $2_1 + 12 | 0;
  $9 = $2_1 + 8 | 0;
  label$1 : {
   if (HEAP32[$1_1 + 24 >> 2]) {
    break label$1
   }
   if (!HEAP32[$1_1 + 20 >> 2]) {
    $434($1_1)
   }
   $4_1 = HEAP32[$1_1 + 20 >> 2];
   if (!$4_1) {
    break label$1
   }
   $6_1 = $16(Math_imul(HEAP32[$1_1 + 28 >> 2], HEAP32[$1_1 + 32 >> 2]) << 2);
   HEAP32[$1_1 + 24 >> 2] = $6_1;
   $3 = Math_imul(HEAP32[$1_1 + 32 >> 2], HEAP32[$1_1 + 28 >> 2]);
   if (($3 | 0) <= 0) {
    break label$1
   }
   while (1) {
    HEAP32[$6_1 >> 2] = HEAPU8[$4_1 | 0] << 24 | 16777215;
    $5_1 = $3;
    $3 = $3 - 1 | 0;
    $6_1 = $6_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($5_1 | 0) > 1) {
     continue
    }
    break;
   };
  }
  HEAP32[$10_1 >> 2] = HEAP32[$1_1 + 24 >> 2];
  if ($7_1) {
   HEAP32[$7_1 >> 2] = HEAP32[$1_1 + 28 >> 2]
  }
  if ($8) {
   HEAP32[$8 >> 2] = HEAP32[$1_1 + 32 >> 2]
  }
  if ($9) {
   HEAP32[$9 >> 2] = 4
  }
  $1_1 = $0_1;
  $0_1 = fimport$0() | 0;
  HEAP32[$1_1 >> 2] = $0_1;
  $1_1 = fimport$2(4767) | 0;
  $3 = HEAP32[$2_1 + 8 >> 2];
  $5_1 = HEAP32[$2_1 + 12 >> 2];
  $4_1 = HEAP32[$2_1 + 16 >> 2];
  HEAP32[$2_1 + 28 >> 2] = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$2_1 + 24 >> 2] = Math_imul($3, Math_imul($4_1, $5_1));
  $4_1 = $2_1 + 24 | 0;
  $3 = $4_1;
  $5_1 = fimport$1(51984, $3 | 0) | 0;
  fimport$3($0_1 | 0, $1_1 | 0, $5_1 | 0);
  fimport$4($5_1 | 0);
  fimport$4($1_1 | 0);
  $1_1 = fimport$2(8642) | 0;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 16 >> 2];
  $3 = fimport$1(72724, $3 | 0) | 0;
  fimport$3($0_1 | 0, $1_1 | 0, $3 | 0);
  fimport$4($3 | 0);
  fimport$4($1_1 | 0);
  $1_1 = fimport$2(3301) | 0;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 12 >> 2];
  $3 = fimport$1(72724, $4_1 | 0) | 0;
  fimport$3($0_1 | 0, $1_1 | 0, $3 | 0);
  fimport$4($3 | 0);
  fimport$4($1_1 | 0);
  $1_1 = fimport$2(8279) | 0;
  HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 8 >> 2];
  $3 = $0_1;
  $0_1 = fimport$1(72724, $2_1 + 24 | 0) | 0;
  fimport$3($3 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1050($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 21640;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1051($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 21648;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1052($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (!HEAPU16[41808]) {
   HEAP32[20908] = HEAP32[8192];
   $1_1 = HEAP32[8191];
   HEAP32[20906] = HEAP32[8190];
   HEAP32[20907] = $1_1;
   $1_1 = HEAP32[8189];
   HEAP32[20904] = HEAP32[8188];
   HEAP32[20905] = $1_1;
   $1_1 = 83636;
   $3 = 19968;
   while (1) {
    $3 = HEAPU16[($4_1 << 1) + 26752 >> 1] + $3 | 0;
    HEAP16[$1_1 >> 1] = $3;
    HEAP16[$1_1 + 2 >> 1] = $3;
    $1_1 = $1_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != 2999) {
     continue
    }
    break;
   };
   HEAP16[$1_1 >> 1] = 0;
  }
  HEAP32[$2_1 + 8 >> 2] = 83616;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1053($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 21680;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1054($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (!HEAPU16[36792]) {
   $1_1 = HEAP32[6685];
   HEAP32[18400] = HEAP32[6684];
   HEAP32[18401] = $1_1;
   $1_1 = HEAP32[6683];
   HEAP32[18398] = HEAP32[6682];
   HEAP32[18399] = $1_1;
   $1_1 = HEAP32[6681];
   HEAP32[18396] = HEAP32[6680];
   HEAP32[18397] = $1_1;
   $1_1 = 73608;
   $3 = 19968;
   while (1) {
    $3 = HEAPU16[($4_1 << 1) + 21712 >> 1] + $3 | 0;
    HEAP16[$1_1 >> 1] = $3;
    HEAP16[$1_1 + 2 >> 1] = $3;
    $1_1 = $1_1 + 4 | 0;
    $4_1 = $4_1 + 1 | 0;
    if (($4_1 | 0) != 2500) {
     continue
    }
    break;
   };
   HEAP16[$1_1 >> 1] = 0;
  }
  HEAP32[$2_1 + 8 >> 2] = 73584;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1055($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 32784;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1056($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 32802;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1057($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 32816;
  HEAP32[$0_1 >> 2] = fimport$1(72748, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1062($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = fimport$1(72724, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1063($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = +fimport$5(HEAP32[$1_1 >> 2], 72724, $2_1 + 12 | 0);
  fimport$6(HEAP32[$2_1 + 12 >> 2]);
  if (Math_abs($3) < 2147483648.0) {
   $1_1 = ~~$3
  } else {
   $1_1 = -2147483648
  }
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1067($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 44;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1068($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  if (HEAP32[$0_1 + 52 >> 2] > 0) {
   while (1) {
    HEAP32[$2_1 + 8 >> 2] = HEAP32[HEAP32[$0_1 + 60 >> 2] + ($3 << 2) >> 2];
    $5_1 = $2_1 + 8 | 0;
    $4_1 = fimport$1(50504, $5_1 | 0) | 0;
    fimport$10($4_1 | 0);
    HEAP32[$2_1 + 8 >> 2] = $4_1;
    fimport$4(fimport$16(HEAP32[$1_1 >> 2], 1, 48472, $5_1 | 0) | 0);
    fimport$4($4_1 | 0);
    $3 = $3 + 1 | 0;
    if (($3 | 0) < HEAP32[$0_1 + 52 >> 2]) {
     continue
    }
    break;
   }
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1070($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[$0_1 + 8 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  if ($1_1 >>> 0 <= $4_1 - $2_1 >>> 0) {
   if ($1_1) {
    $2_1 = $1604($2_1, 0, $1_1) + $1_1 | 0
   }
   HEAP32[$0_1 + 4 >> 2] = $2_1;
   return;
  }
  $3 = $2_1;
  $2_1 = HEAP32[$0_1 >> 2];
  $5_1 = $3 - $2_1 | 0;
  $3 = $5_1 + $1_1 | 0;
  if (($3 | 0) >= 0) {
   $4_1 = $4_1 - $2_1 | 0;
   $6_1 = $4_1 << 1;
   $3 = $4_1 >>> 0 >= 1073741823 ? 2147483647 : $3 >>> 0 < $6_1 >>> 0 ? $6_1 : $3;
   label$5 : {
    if (!$3) {
     $3 = 0;
     $4_1 = 0;
     break label$5;
    }
    $4_1 = $1782($3);
   }
   $6_1 = $1604($4_1 + $5_1 | 0, 0, $1_1);
   $5_1 = $1603($4_1, $2_1, $5_1);
   HEAP32[$0_1 + 8 >> 2] = $3 + $5_1;
   HEAP32[$0_1 + 4 >> 2] = $1_1 + $6_1;
   HEAP32[$0_1 >> 2] = $5_1;
   if ($2_1) {
    $1756($2_1)
   }
   return;
  }
  $1071();
  wasm2js_trap();
 }
 
 function $1071() {
  $813(5988);
  wasm2js_trap();
 }
 
 function $1072() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(52060, 52088, 52124, 0, 48504, 324, 48612, 0, 48612, 0, 2685, 48614, 325);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(52060, 4951, 72724, 49e3, 326, $0_1 | 0, 72724, 49004, 327, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 328;
  fimport$12(52060, 4621, 48496, 49e3, 329, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 330;
  fimport$12(52060, 10422, 48496, 49e3, 329, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 331;
  fimport$12(52060, 4549, 48496, 49e3, 329, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 332;
  fimport$12(52060, 10331, 48496, 49e3, 329, $0_1 | 0, 0, 0, 0, 0);
 }
 
 function $1073($0_1) {
  $0_1 = $0_1 | 0;
  return 52060;
 }
 
 function $1082() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(52152, 52172, 52200, 0, 48504, 333, 48612, 0, 48612, 0, 14828, 48614, 334);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(52152, 4932, 72724, 49e3, 335, $0_1 | 0, 72724, 49004, 336, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(52152, 4944, 72724, 49e3, 335, $0_1 | 0, 72724, 49004, 336, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 337;
  fimport$12(52152, 10047, 48496, 49e3, 338, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(52152, 11066, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 20;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 20;
  fimport$12(52152, 10741, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 341;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 342;
  fimport$12(52152, 11124, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 344;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 345;
  fimport$12(52152, 11136, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 32;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 32;
  fimport$12(52152, 11045, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 36;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 36;
  fimport$12(52152, 2631, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 40;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 40;
  fimport$12(52152, 11826, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 346;
  fimport$13(52152, 6971, 3, 52216, 48740, 347, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 348;
  fimport$13(52152, 6957, 4, 52240, 48720, 349, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 132;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 132;
  fimport$12(52152, 1232, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 136;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 136;
  fimport$12(52152, 10727, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 350;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 351;
  fimport$12(52152, 13778, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 352;
  fimport$12(52152, 4187, 48496, 49e3, 338, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 148;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 148;
  fimport$12(52152, 11509, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 152;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 152;
  fimport$12(52152, 9018, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 355;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 356;
  fimport$12(52152, 3138, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 357;
  fimport$12(52152, 11485, 48496, 49e3, 338, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 168;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 168;
  fimport$12(52152, 6040, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 169;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 169;
  fimport$12(52152, 4265, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 170;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 170;
  fimport$12(52152, 8460, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 171;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 171;
  fimport$12(52152, 2048, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 172;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 172;
  fimport$12(52152, 5216, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 173;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 173;
  fimport$12(52152, 1189, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 176;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 176;
  fimport$12(52152, 6226, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 358;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 359;
  fimport$12(52152, 11227, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 360;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 361;
  fimport$12(52152, 11188, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 362;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 363;
  fimport$12(52152, 13721, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 364;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 365;
  fimport$12(52152, 13697, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 366;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 367;
  fimport$12(52152, 13745, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 368;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 369;
  fimport$12(52152, 7905, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 370;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 371;
  fimport$12(52152, 7886, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 372;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 373;
  fimport$12(52152, 13769, 48496, 49e3, 338, $0_1 | 0, 48496, 49004, 343, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 374;
  fimport$12(52152, 4576, 48496, 49e3, 338, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 375;
  fimport$13(52152, 7224, 3, 52256, 48740, 376, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 377;
  fimport$13(52152, 7207, 4, 52272, 48720, 378, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 236;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 236;
  fimport$12(52152, 8318, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 244;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 244;
  fimport$12(52152, 8071, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 245;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 245;
  fimport$12(52152, 3420, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 246;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 246;
  fimport$12(52152, 3195, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 247;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 247;
  fimport$12(52152, 6200, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 379;
  fimport$13(52152, 7164, 3, 52256, 48740, 376, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 380;
  fimport$13(52152, 7148, 4, 52272, 48720, 378, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 381;
  fimport$13(52152, 4111, 3, 52288, 51660, 382, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 383;
  fimport$13(52152, 4094, 4, 52304, 52320, 384, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 385;
  fimport$13(52152, 6182, 3, 52328, 49004, 386, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 387;
  fimport$13(52152, 16192, 3, 52340, 49004, 388, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 389;
  fimport$13(52152, 16192, 3, 52352, 49004, 390, $0_1 | 0, 0, 0);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 391;
  fimport$13(52152, 4287, 2, 52364, 49408, 392, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 840;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 840;
  fimport$12(52152, 10755, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 841;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 841;
  fimport$12(52152, 11703, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 842;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 842;
  fimport$12(52152, 2148, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 843;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 843;
  fimport$12(52152, 4557, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 844;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 844;
  fimport$12(52152, 4861, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 845;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 845;
  fimport$12(52152, 10476, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 846;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 846;
  fimport$12(52152, 11355, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 848;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 848;
  fimport$12(52152, 10692, 72796, 48692, 339, $0_1 | 0, 72796, 48696, 340, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 852;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 852;
  fimport$12(52152, 5245, 72724, 49e3, 335, $0_1 | 0, 72724, 49004, 336, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 856;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 856;
  fimport$12(52152, 5267, 72724, 49e3, 335, $0_1 | 0, 72724, 49004, 336, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 860;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 860;
  fimport$12(52152, 3909, 72724, 49e3, 335, $0_1 | 0, 72724, 49004, 336, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 864;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 864;
  fimport$12(52152, 3930, 72724, 49e3, 335, $0_1 | 0, 72724, 49004, 336, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 868;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 868;
  fimport$12(52152, 4720, 72724, 49e3, 335, $0_1 | 0, 72724, 49004, 336, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 393;
  fimport$12(52152, 13610, 48496, 49e3, 338, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 880;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 880;
  fimport$12(52152, 10772, 72652, 49e3, 353, $0_1 | 0, 72652, 49004, 354, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 394;
  fimport$13(52152, 4602, 3, 52372, 48740, 395, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 396;
  fimport$13(52152, 7539, 3, 52288, 51660, 382, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 397;
  fimport$13(52152, 7486, 3, 52288, 51660, 382, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 398;
  fimport$13(52152, 7510, 3, 52288, 51660, 382, $0_1 | 0, 0, 0);
 }
 
 function $1083($0_1) {
  $0_1 = $0_1 | 0;
  return 52152;
 }
 
 function $1084($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  if ($0_1) {
   $1_1 = HEAP32[$0_1 + 5404 >> 2];
   if ($1_1) {
    $17($1_1)
   }
   $1756($0_1);
  }
 }
 
 function $1087($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 8;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1091($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 + 24 >> 2];
  if ($1_1) {
   $1_1 = fimport$2($1_1 | 0) | 0
  } else {
   $1_1 = 2
  }
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1092($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8 = 0, $9 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $6_1 = HEAP32[23915];
  $7_1 = +fimport$5(HEAP32[$1_1 >> 2], 49072, $2_1 + 12 | 0);
  label$1 : {
   if ($7_1 < 4294967296.0 & $7_1 >= 0.0) {
    $8 = ~~$7_1 >>> 0;
    break label$1;
   }
   $8 = 0;
  }
  $3 = HEAP32[$8 >> 2];
  if ($3 >>> 0 < 2147483632) {
   $9 = HEAP32[$2_1 + 12 >> 2];
   label$4 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 11 | 0] = $3;
     $5_1 = $2_1;
     break label$4;
    }
    $4_1 = ($3 | 15) + 1 | 0;
    $5_1 = $1782($4_1);
    HEAP32[$2_1 + 8 >> 2] = $4_1 | -2147483648;
    HEAP32[$2_1 >> 2] = $5_1;
    HEAP32[$2_1 + 4 >> 2] = $3;
   }
   if ($3) {
    $1602($5_1, $8 + 4 | 0, $3)
   }
   HEAP8[$3 + $5_1 | 0] = 0;
   fimport$6($9 | 0);
   $4_1 = $6_1 + 4 | 0;
   if (HEAP8[$6_1 + 15 | 0] < 0) {
    $1756(HEAP32[$4_1 >> 2])
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   HEAP32[$4_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$0_1 + 24 >> 2] = HEAP32[$1_1 >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $4_1) : 0;
   global$0 = $2_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1094($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = HEAP32[$1_1 + 28 >> 2];
  if ($1_1) {
   $1_1 = fimport$2($1_1 | 0) | 0
  } else {
   $1_1 = 2
  }
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1095($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8 = 0, $9 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $6_1 = HEAP32[23915];
  $7_1 = +fimport$5(HEAP32[$1_1 >> 2], 49072, $2_1 + 12 | 0);
  label$1 : {
   if ($7_1 < 4294967296.0 & $7_1 >= 0.0) {
    $8 = ~~$7_1 >>> 0;
    break label$1;
   }
   $8 = 0;
  }
  $3 = HEAP32[$8 >> 2];
  if ($3 >>> 0 < 2147483632) {
   $9 = HEAP32[$2_1 + 12 >> 2];
   label$4 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 11 | 0] = $3;
     $5_1 = $2_1;
     break label$4;
    }
    $4_1 = ($3 | 15) + 1 | 0;
    $5_1 = $1782($4_1);
    HEAP32[$2_1 + 8 >> 2] = $4_1 | -2147483648;
    HEAP32[$2_1 >> 2] = $5_1;
    HEAP32[$2_1 + 4 >> 2] = $3;
   }
   if ($3) {
    $1602($5_1, $8 + 4 | 0, $3)
   }
   HEAP8[$3 + $5_1 | 0] = 0;
   fimport$6($9 | 0);
   $4_1 = $6_1 + 16 | 0;
   if (HEAP8[$6_1 + 27 | 0] < 0) {
    $1756(HEAP32[$4_1 >> 2])
   }
   $5_1 = HEAP32[$2_1 + 4 >> 2];
   HEAP32[$4_1 >> 2] = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 4 >> 2] = $5_1;
   HEAP32[$4_1 + 8 >> 2] = HEAP32[$2_1 + 8 >> 2];
   HEAP32[$0_1 + 28 >> 2] = HEAP32[$1_1 >> 2] != 2 ? (HEAP8[$6_1 + 27 | 0] < 0 ? HEAP32[$6_1 + 16 >> 2] : $4_1) : 0;
   global$0 = $2_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1096($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($1_1 >>> 0 <= 21 ? HEAP32[(($1_1 << 2) + $0_1 | 0) + 44 >> 2] : -1) | 0;
 }
 
 function $1097($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($1_1, $2_1) | 0;
 }
 
 function $1098($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($1_1 >>> 0 <= 21) {
   HEAP32[(($1_1 << 2) + $0_1 | 0) + 44 >> 2] = $2_1
  }
  return $1_1 >>> 0 < 22 | 0;
 }
 
 function $1099($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  return FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($1_1, $2_1, $3) | 0;
 }
 
 function $1100($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 28 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 28 >> 2]);
  HEAP32[$0_1 + 28 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1102($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$1_1 + 144 >> 2];
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 >> 2] = 2;
    break label$1;
   }
   HEAP32[$2_1 + 8 >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = fimport$1(51852, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1105($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$1_1 + 156 >> 2];
  label$1 : {
   if (!$1_1) {
    HEAP32[$0_1 >> 2] = 2;
    break label$1;
   }
   HEAP32[$2_1 + 8 >> 2] = $1_1;
   HEAP32[$0_1 >> 2] = fimport$1(50504, $2_1 + 8 | 0);
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1106($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$1_1 >> 2];
  if (($1_1 | 0) == 2) {
   $1_1 = 0
  } else {
   $3 = +fimport$5($1_1 | 0, 50504, $2_1 + 12 | 0);
   fimport$6(HEAP32[$2_1 + 12 >> 2]);
   if ($3 < 4294967296.0 & $3 >= 0.0) {
    $1_1 = ~~$3 >>> 0
   } else {
    $1_1 = 0
   }
  }
  HEAP32[$0_1 + 156 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1107($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 160;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1108($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 32 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 32 >> 2]);
  HEAP32[$0_1 + 32 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1110($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 36 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1111($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 36 >> 2]);
  HEAP32[$0_1 + 36 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 40 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1113($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 40 >> 2]);
  HEAP32[$0_1 + 40 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1114($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 44 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1115($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 44 >> 2]);
  HEAP32[$0_1 + 44 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1116($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 48 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1117($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 48 >> 2]);
  HEAP32[$0_1 + 48 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1118($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 64 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1119($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 64 >> 2]);
  HEAP32[$0_1 + 64 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1120($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 68 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1121($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 68 >> 2]);
  HEAP32[$0_1 + 68 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1122($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1_1 = $0_1;
  $0_1 = HEAP32[HEAP32[23915] + 72 >> 2];
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10($0_1 | 0);
 }
 
 function $1123($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$0_1 + 72 >> 2]);
  HEAP32[$0_1 + 72 >> 2] = HEAP32[$1_1 >> 2];
 }
 
 function $1124($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 220;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1125($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  return ($1_1 >>> 0 <= 4 ? HEAPU8[($0_1 + $1_1 | 0) + 228 | 0] != 0 : $2_1) | 0;
 }
 
 function $1127($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($1_1 >>> 0 <= 4) {
   HEAP8[($0_1 + $1_1 | 0) + 228 | 0] = $2_1
  }
  return $1_1 >>> 0 < 5 | 0;
 }
 
 function $1129($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  return ($1_1 >>> 0 <= 511 ? HEAPU8[($0_1 + $1_1 | 0) + 248 | 0] != 0 : $2_1) | 0;
 }
 
 function $1130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  if ($1_1 >>> 0 <= 511) {
   HEAP8[($0_1 + $1_1 | 0) + 248 | 0] = $2_1
  }
  return $1_1 >>> 0 < 512 | 0;
 }
 
 function $1131($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0);
  return Math_fround($1_1 >>> 0 <= 19 ? HEAPF32[(($1_1 << 2) + $0_1 | 0) + 760 >> 2] : $2_1);
 }
 
 function $1132($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($1_1, $2_1)));
 }
 
 function $1133($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  if ($1_1 >>> 0 <= 19) {
   HEAPF32[(($1_1 << 2) + $0_1 | 0) + 760 >> 2] = $2_1
  }
  return $1_1 >>> 0 < 20 | 0;
 }
 
 function $1134($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  return FUNCTION_TABLE[HEAP32[$0_1 >> 2]]($1_1, $2_1, $3) | 0;
 }
 
 function $1136($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = $1_1 & 65535;
  $3 = $0_1;
  $0_1 = HEAPU16[$3 + 5394 >> 1];
  if ($1_1 | $0_1) {
   __inlined_func$8 : {
    $2_1 = $1_1 & 64512;
    if (($2_1 | 0) == 55296) {
     if ($0_1) {
      $2_1 = HEAP32[$3 + 5396 >> 2];
      $0_1 = HEAP32[$3 + 5400 >> 2];
      label$4 : {
       if (($2_1 | 0) != ($0_1 | 0)) {
        break label$4
       }
       $4_1 = $0_1;
       $0_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
       $2_1 = $2_1 + 1 | 0;
       $0_1 = ($0_1 | 0) > ($2_1 | 0) ? $0_1 : $2_1;
       if (($4_1 | 0) >= ($0_1 | 0)) {
        break label$4
       }
       $2_1 = HEAP32[18392];
       if ($2_1) {
        $2_1 = $2_1 + 876 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
       }
       $2_1 = FUNCTION_TABLE[HEAP32[18314]]($0_1 << 1, HEAP32[18394]) | 0;
       $4_1 = HEAP32[$3 + 5404 >> 2];
       if ($4_1) {
        $1602($2_1, $4_1, HEAP32[$3 + 5396 >> 2] << 1);
        $4_1 = HEAP32[$3 + 5404 >> 2];
        label$9 : {
         if (!$4_1) {
          break label$9
         }
         $5_1 = HEAP32[18392];
         if (!$5_1) {
          break label$9
         }
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       HEAP32[$3 + 5400 >> 2] = $0_1;
       HEAP32[$3 + 5404 >> 2] = $2_1;
      }
      HEAP16[HEAP32[$3 + 5404 >> 2] + (HEAP32[$3 + 5396 >> 2] << 1) >> 1] = 65533;
      HEAP32[$3 + 5396 >> 2] = HEAP32[$3 + 5396 >> 2] + 1;
     }
     HEAP16[$3 + 5394 >> 1] = $1_1;
     break __inlined_func$8;
    }
    if ($0_1) {
     $0_1 = 65533;
     if (($2_1 | 0) != 56320) {
      $2_1 = HEAP32[$3 + 5396 >> 2];
      $0_1 = HEAP32[$3 + 5400 >> 2];
      label$13 : {
       if (($2_1 | 0) != ($0_1 | 0)) {
        break label$13
       }
       $4_1 = $0_1;
       $0_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
       $2_1 = $2_1 + 1 | 0;
       $0_1 = ($0_1 | 0) > ($2_1 | 0) ? $0_1 : $2_1;
       if (($4_1 | 0) >= ($0_1 | 0)) {
        break label$13
       }
       $2_1 = HEAP32[18392];
       if ($2_1) {
        $2_1 = $2_1 + 876 | 0;
        HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
       }
       $2_1 = FUNCTION_TABLE[HEAP32[18314]]($0_1 << 1, HEAP32[18394]) | 0;
       $4_1 = HEAP32[$3 + 5404 >> 2];
       if ($4_1) {
        $1602($2_1, $4_1, HEAP32[$3 + 5396 >> 2] << 1);
        $4_1 = HEAP32[$3 + 5404 >> 2];
        label$18 : {
         if (!$4_1) {
          break label$18
         }
         $5_1 = HEAP32[18392];
         if (!$5_1) {
          break label$18
         }
         $5_1 = $5_1 + 876 | 0;
         HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
        }
        FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
       }
       HEAP32[$3 + 5400 >> 2] = $0_1;
       HEAP32[$3 + 5404 >> 2] = $2_1;
      }
      HEAP16[HEAP32[$3 + 5404 >> 2] + (HEAP32[$3 + 5396 >> 2] << 1) >> 1] = 65533;
      HEAP32[$3 + 5396 >> 2] = HEAP32[$3 + 5396 >> 2] + 1;
      $0_1 = $1_1;
     }
     HEAP16[$3 + 5394 >> 1] = 0;
     $1_1 = $0_1;
    }
    $2_1 = HEAP32[$3 + 5396 >> 2];
    $0_1 = HEAP32[$3 + 5400 >> 2];
    label$19 : {
     if (($2_1 | 0) != ($0_1 | 0)) {
      break label$19
     }
     $4_1 = $0_1;
     $0_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
     $2_1 = $2_1 + 1 | 0;
     $0_1 = ($0_1 | 0) > ($2_1 | 0) ? $0_1 : $2_1;
     if (($4_1 | 0) >= ($0_1 | 0)) {
      break label$19
     }
     $2_1 = HEAP32[18392];
     if ($2_1) {
      $2_1 = $2_1 + 876 | 0;
      HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
     }
     $2_1 = FUNCTION_TABLE[HEAP32[18314]]($0_1 << 1, HEAP32[18394]) | 0;
     $4_1 = HEAP32[$3 + 5404 >> 2];
     if ($4_1) {
      $1602($2_1, $4_1, HEAP32[$3 + 5396 >> 2] << 1);
      $4_1 = HEAP32[$3 + 5404 >> 2];
      label$24 : {
       if (!$4_1) {
        break label$24
       }
       $5_1 = HEAP32[18392];
       if (!$5_1) {
        break label$24
       }
       $5_1 = $5_1 + 876 | 0;
       HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
     }
     HEAP32[$3 + 5400 >> 2] = $0_1;
     HEAP32[$3 + 5404 >> 2] = $2_1;
    }
    HEAP16[HEAP32[$3 + 5404 >> 2] + (HEAP32[$3 + 5396 >> 2] << 1) >> 1] = $1_1;
    HEAP32[$3 + 5396 >> 2] = HEAP32[$3 + 5396 >> 2] + 1;
   }
  }
 }
 
 function $1138($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1_1 = HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1;
  if (HEAPU8[$1_1 | 0]) {
   while (1) {
    HEAP32[$5_1 + 12 >> 2] = 0;
    $1_1 = $10($5_1 + 12 | 0, $1_1, 0) + $1_1 | 0;
    $7_1 = HEAP32[$5_1 + 12 >> 2];
    if ($7_1) {
     $3 = HEAP32[$0_1 + 5396 >> 2];
     $2_1 = HEAP32[$0_1 + 5400 >> 2];
     label$4 : {
      if (($3 | 0) != ($2_1 | 0)) {
       break label$4
      }
      $4_1 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
      $3 = $3 + 1 | 0;
      $3 = ($3 | 0) < ($4_1 | 0) ? $4_1 : $3;
      if (($2_1 | 0) >= ($3 | 0)) {
       break label$4
      }
      $2_1 = HEAP32[18392];
      if ($2_1) {
       $2_1 = $2_1 + 876 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] + 1;
      }
      $2_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 1, HEAP32[18394]) | 0;
      $4_1 = HEAP32[$0_1 + 5404 >> 2];
      if ($4_1) {
       $1602($2_1, $4_1, HEAP32[$0_1 + 5396 >> 2] << 1);
       $4_1 = HEAP32[$0_1 + 5404 >> 2];
       label$9 : {
        if (!$4_1) {
         break label$9
        }
        $6_1 = HEAP32[18392];
        if (!$6_1) {
         break label$9
        }
        $6_1 = $6_1 + 876 | 0;
        HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($4_1, HEAP32[18394]);
      }
      HEAP32[$0_1 + 5400 >> 2] = $3;
      HEAP32[$0_1 + 5404 >> 2] = $2_1;
     }
     HEAP16[HEAP32[$0_1 + 5404 >> 2] + (HEAP32[$0_1 + 5396 >> 2] << 1) >> 1] = $7_1;
     HEAP32[$0_1 + 5396 >> 2] = HEAP32[$0_1 + 5396 >> 2] + 1;
    }
    if (HEAPU8[$1_1 | 0]) {
     continue
    }
    break;
   }
  }
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1139($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$2_1 >> 2];
  if ($4_1 >>> 0 < 2147483632) {
   $6_1 = HEAP32[$0_1 >> 2];
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     HEAP8[$3 + 15 | 0] = $4_1;
     $0_1 = $3 + 4 | 0;
     break label$2;
    }
    $5_1 = ($4_1 | 15) + 1 | 0;
    $0_1 = $1782($5_1);
    HEAP32[$3 + 12 >> 2] = $5_1 | -2147483648;
    HEAP32[$3 + 4 >> 2] = $0_1;
    HEAP32[$3 + 8 >> 2] = $4_1;
   }
   if ($4_1) {
    $1602($0_1, $2_1 + 4 | 0, $4_1)
   }
   HEAP8[$0_1 + $4_1 | 0] = 0;
   FUNCTION_TABLE[$6_1 | 0]($1_1, $3 + 4 | 0);
   if (HEAP8[$3 + 15 | 0] < 0) {
    $1756(HEAP32[$3 + 4 >> 2])
   }
   global$0 = $3 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1141($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 872;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1142($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   if ($2_1 >>> 0 <= 4) {
    HEAP32[$3 + 8 >> 2] = (($2_1 << 3) + $1_1 | 0) + 900;
    HEAP32[$0_1 >> 2] = fimport$1(48676, $3 + 8 | 0);
    break label$1;
   }
   HEAP32[$0_1 >> 2] = 1;
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $1144($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround($1_1 >>> 0 <= 4 ? HEAPF32[(($1_1 << 2) + $0_1 | 0) + 1032 >> 2] : Math_fround(-1.0));
 }
 
 function $1145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround($1_1 >>> 0 <= 511 ? HEAPF32[(($1_1 << 2) + $0_1 | 0) + 1132 >> 2] : Math_fround(-1.0));
 }
 
 function $1146($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround($1_1 >>> 0 <= 19 ? HEAPF32[(($1_1 << 2) + $0_1 | 0) + 5228 >> 2] : Math_fround(-1.0));
 }
 
 function $1147() {
  var $0_1 = 0, $1_1 = 0;
  fimport$11(52400, 52424, 52456, 0, 48504, 399, 48612, 0, 48612, 0, 11269, 48614, 400);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 0;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 0;
  fimport$12(52400, 13933, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 4;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 4;
  fimport$12(52400, 13925, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 403;
  fimport$12(52400, 9162, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 16;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 16;
  fimport$12(52400, 9055, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 20;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 20;
  fimport$12(52400, 10212, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 405;
  fimport$12(52400, 10305, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 406;
  fimport$12(52400, 7720, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 40;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 40;
  fimport$12(52400, 7414, 72724, 49e3, 407, $0_1 | 0, 72724, 49004, 408, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 44;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 44;
  fimport$12(52400, 9116, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 48;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 48;
  fimport$12(52400, 10261, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 52;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 52;
  fimport$12(52400, 9088, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 56;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 56;
  fimport$12(52400, 10229, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 409;
  fimport$12(52400, 9215, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 68;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 68;
  fimport$12(52400, 9102, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 72;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 72;
  fimport$12(52400, 10245, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 410;
  fimport$12(52400, 9318, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 411;
  fimport$12(52400, 9283, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 412;
  fimport$12(52400, 9176, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 413;
  fimport$12(52400, 9228, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 108;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 108;
  fimport$12(52400, 9269, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 112;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 112;
  fimport$12(52400, 9300, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 116;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 116;
  fimport$12(52400, 10291, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 120;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 120;
  fimport$12(52400, 9070, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 124;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 124;
  fimport$12(52400, 10319, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 128;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 128;
  fimport$12(52400, 9130, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 132;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 132;
  fimport$12(52400, 10929, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 136;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 136;
  fimport$12(52400, 9143, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 140;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 140;
  fimport$12(52400, 10277, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 144;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 144;
  fimport$12(52400, 7307, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 148;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 148;
  fimport$12(52400, 7439, 72724, 49e3, 407, $0_1 | 0, 72724, 49004, 408, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 414;
  fimport$12(52400, 7684, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 415;
  fimport$12(52400, 7700, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 416;
  fimport$12(52400, 9155, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 417;
  fimport$12(52400, 9246, 48496, 49e3, 404, $0_1 | 0, 0, 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 184;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 184;
  fimport$12(52400, 11468, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 188;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 188;
  fimport$12(52400, 5125, 72652, 49e3, 418, $0_1 | 0, 72652, 49004, 419, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 189;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 189;
  fimport$12(52400, 1481, 72652, 49e3, 418, $0_1 | 0, 72652, 49004, 419, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 190;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 190;
  fimport$12(52400, 8169, 72652, 49e3, 418, $0_1 | 0, 72652, 49004, 419, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 192;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 192;
  fimport$12(52400, 8122, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 196;
  $1_1 = $1782(4);
  HEAP32[$1_1 >> 2] = 196;
  fimport$12(52400, 6086, 72796, 48692, 401, $0_1 | 0, 72796, 48696, 402, $1_1 | 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 420;
  fimport$13(52400, 4251, 3, 52472, 48740, 421, $0_1 | 0, 0, 0);
  $0_1 = $1782(4);
  HEAP32[$0_1 >> 2] = 422;
  fimport$13(52400, 4237, 4, 52496, 48720, 423, $0_1 | 0, 0, 0);
  fimport$15(52400, 1, 52512, 48504, 424, 425);
  $0_1 = $1782(8);
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 426;
  fimport$13(52400, 4957, 3, 52516, 48696, 427, $0_1 | 0, 0, 0);
 }
 
 function $1148($0_1) {
  $0_1 = $0_1 | 0;
  return 52400;
 }
 
 function $1154($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 24;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1158($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 60;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1159($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 76;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 84;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 92;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 100;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 152;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 168;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1166($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1 + 176;
  HEAP32[$0_1 >> 2] = fimport$1(48676, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1169($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   if ($2_1 >>> 0 <= 52) {
    HEAP32[$3 + 8 >> 2] = (($2_1 << 4) + $1_1 | 0) + 200;
    HEAP32[$0_1 >> 2] = fimport$1(48788, $3 + 8 | 0);
    break label$1;
   }
   HEAP32[$0_1 >> 2] = 1;
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $1171($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  if ($1_1 >>> 0 <= 52) {
   $3 = $4_1 + 8 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$4_1 >> 2] = 0;
   HEAP32[$4_1 + 4 >> 2] = 0;
   $3 = ($1_1 << 4) + $0_1 | 0;
   $5_1 = $3 + 200 | 0;
   $0_1 = $768($2_1, $4_1);
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $2_1;
   $2_1 = $3 + 208 | 0;
   $0_1 = $0_1 + 8 | 0;
   $3 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $3;
  }
  global$0 = $4_1 + 16 | 0;
  return $1_1 >>> 0 < 53 | 0;
 }
 
 function $1172($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$4_1 + 12 >> 2] = $3;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $4_1 + 12 | 0) | 0;
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1174() {
  return $1($1782(1048)) | 0;
 }
 
 function $1175($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  var $3 = 0;
  $3 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = ($3 >> 1) + $1_1 | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  FUNCTION_TABLE[(!($3 & 1) ? $0_1 : HEAP32[HEAP32[$1_1 >> 2] + $0_1 >> 2]) | 0]($1_1, $2_1);
 }
 
 function $1176() {
  var $0_1 = 0, $1_1 = 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP8[$0_1 + 8 | 0] = 0;
  HEAP32[$0_1 + 4 >> 2] = 909651505;
  HEAP8[$0_1 + 15 | 0] = 4;
  $1_1 = $1755(8);
  HEAP32[$1_1 >> 2] = 4;
  $1602($1_1 + 4 | 0, $0_1 + 4 | 0, 4);
  fimport$19(14836, 49072, +($1_1 >>> 0));
  if (HEAP8[$0_1 + 15 | 0] < 0) {
   $1756(HEAP32[$0_1 + 4 >> 2])
  }
  fimport$9(14850, 1, 52528, 48504, 428, 429, 0);
  fimport$19(10393, 72760, 5408.0);
  fimport$19(10366, 72760, 1048.0);
  fimport$19(10416, 72760, 8.0);
  fimport$19(10405, 72760, 16.0);
  fimport$19(10132, 72760, 20.0);
  fimport$19(10059, 72760, 2.0);
  fimport$19(3449, 72760, 0.0);
  fimport$19(3544, 72760, 8.0);
  fimport$19(3501, 72760, 16.0);
  fimport$9(2034, 2, 52532, 49e3, 430, 431, 0);
  fimport$9(1966, 2, 52552, 49408, 432, 433, 0);
  fimport$9(1999, 1, 52560, 48504, 434, 435, 0);
  fimport$9(1981, 2, 52552, 49408, 432, 436, 0);
  fimport$9(14822, 1, 48472, 48504, 24, 437, 0);
  fimport$9(11260, 1, 48472, 48504, 24, 438, 0);
  fimport$9(11076, 1, 52564, 48614, 439, 440, 0);
  fimport$9(11085, 1, 52564, 48614, 439, 441, 0);
  fimport$9(6406, 1, 52564, 48614, 439, 442, 0);
  fimport$9(13634, 1, 48472, 48504, 24, 443, 0);
  fimport$9(1727, 2, 52568, 49408, 444, 445, 0);
  fimport$9(1709, 2, 52568, 49408, 444, 446, 0);
  fimport$9(1760, 2, 52568, 49408, 444, 447, 0);
  fimport$9(1669, 2, 52568, 49408, 444, 448, 0);
  fimport$9(5972, 2, 52568, 49408, 444, 449, 0);
  fimport$9(6012, 2, 52644, 49408, 450, 451, 0);
  fimport$9(5995, 2, 52644, 49408, 450, 452, 0);
  fimport$9(11616, 1, 52564, 48614, 439, 453, 0);
  fimport$9(7564, 1, 52652, 48504, 454, 455, 0);
  fimport$9(8444, 2, 52656, 49408, 456, 457, 0);
  fimport$9(3386, 2, 52656, 49408, 456, 458, 0);
  fimport$9(13454, 2, 52656, 49408, 456, 459, 0);
  fimport$9(7622, 4, 52672, 48720, 460, 461, 0);
  fimport$9(11801, 1, 52564, 48614, 439, 462, 0);
  fimport$9(11856, 5, 52688, 52708, 463, 464, 0);
  fimport$9(11867, 1, 52564, 48614, 439, 465, 0);
  fimport$9(9e3, 1, 52528, 48504, 428, 466, 0);
  fimport$9(12104, 1, 52528, 48504, 428, 467, 0);
  fimport$9(12002, 2, 52716, 49e3, 468, 469, 0);
  fimport$9(12247, 2, 52716, 49e3, 468, 470, 0);
  fimport$9(2538, 1, 48472, 48504, 24, 471, 0);
  fimport$9(4423, 2, 49856, 49e3, 472, 473, 0);
  fimport$9(10105, 2, 49856, 49e3, 472, 474, 0);
  fimport$9(8657, 1, 52724, 52728, 475, 476, 0);
  fimport$9(3325, 1, 52724, 52728, 475, 477, 0);
  fimport$9(4393, 4, 52736, 49104, 478, 479, 0);
  fimport$9(10073, 3, 52752, 49004, 480, 481, 0);
  fimport$9(4193, 5, 52768, 49924, 482, 483, 0);
  fimport$9(10159, 2, 52568, 49408, 444, 484, 0);
  fimport$9(12062, 3, 52788, 49004, 485, 486, 0);
  fimport$9(3964, 1, 52564, 48614, 439, 487, 0);
  fimport$9(13904, 2, 52800, 52808, 488, 489, 0);
  fimport$9(4410, 3, 52752, 49004, 480, 490, 0);
  fimport$9(10091, 3, 52752, 49004, 480, 491, 0);
  fimport$9(12085, 3, 52788, 49004, 485, 492, 0);
  fimport$9(3983, 1, 52564, 48614, 439, 493, 0);
  fimport$9(11449, 2, 52800, 52808, 488, 494, 0);
  fimport$9(4585, 4, 52816, 49104, 495, 496, 0);
  fimport$9(10348, 4, 52816, 49104, 495, 497, 0);
  fimport$9(12139, 4, 52832, 49104, 498, 499, 0);
  fimport$9(4018, 2, 52644, 49408, 450, 500, 0);
  fimport$9(8257, 2, 49856, 49e3, 472, 501, 0);
  fimport$9(1583, 2, 49856, 49e3, 472, 502, 0);
  fimport$9(7658, 2, 49856, 49e3, 472, 503, 0);
  fimport$9(1557, 2, 49856, 49e3, 472, 504, 0);
  fimport$9(14200, 1, 52724, 52728, 475, 505, 0);
  fimport$9(14070, 1, 52724, 52728, 475, 506, 0);
  fimport$9(14189, 2, 52800, 52808, 488, 507, 0);
  fimport$9(14059, 2, 52800, 52808, 488, 508, 0);
  fimport$9(14129, 1, 52724, 52728, 475, 509, 0);
  fimport$9(13989, 1, 52724, 52728, 475, 510, 0);
  fimport$9(14290, 2, 52800, 52808, 488, 511, 0);
  fimport$9(14081, 2, 52800, 52808, 488, 512, 0);
  fimport$9(14171, 3, 52848, 52860, 513, 514, 0);
  fimport$9(14041, 3, 52848, 52860, 513, 515, 0);
  fimport$9(2982, 2, 52568, 49408, 444, 516, 0);
  fimport$9(2967, 1, 52564, 48614, 439, 517, 0);
  fimport$9(6167, 3, 52868, 49004, 518, 519, 0);
  fimport$9(6153, 2, 52880, 49408, 520, 521, 0);
  fimport$9(6570, 3, 52868, 49004, 518, 522, 0);
  fimport$9(6558, 2, 52880, 49408, 520, 523, 0);
  fimport$9(4059, 2, 52888, 49408, 524, 525, 0);
  fimport$9(4037, 1, 52564, 48614, 439, 526, 0);
  fimport$9(3867, 2, 52888, 49408, 524, 527, 0);
  fimport$9(3851, 1, 52564, 48614, 439, 528, 0);
  fimport$9(8732, 2, 52800, 52808, 488, 529, 0);
  fimport$9(8719, 1, 52564, 48614, 439, 530, 0);
  fimport$9(8702, 2, 52800, 52808, 488, 531, 0);
  fimport$9(8746, 1, 52724, 52728, 475, 532, 0);
  fimport$9(4495, 2, 52800, 52808, 488, 533, 0);
  fimport$9(4480, 1, 52564, 48614, 439, 534, 0);
  fimport$9(2959, 1, 48472, 48504, 24, 535, 0);
  fimport$9(10147, 1, 52724, 52728, 475, 536, 0);
  fimport$9(8295, 2, 49856, 49e3, 472, 537, 0);
  fimport$9(15490, 3, 52896, 48740, 538, 539, 0);
  fimport$9(15283, 2, 52908, 49e3, 540, 541, 0);
  fimport$9(15133, 2, 52916, 49e3, 542, 543, 0);
  fimport$9(16349, 2, 52924, 49e3, 544, 545, 0);
  fimport$9(6030, 1, 52564, 48614, 439, 546, 0);
  fimport$9(10991, 3, 52848, 52860, 513, 547, 0);
  fimport$9(10983, 1, 52564, 48614, 439, 548, 0);
  fimport$9(9421, 1, 52564, 48614, 439, 549, 0);
  fimport$9(1164, 2, 52568, 49408, 444, 550, 0);
  fimport$9(3078, 2, 52800, 52808, 488, 551, 0);
  fimport$9(3069, 2, 52800, 52808, 488, 552, 0);
  fimport$9(6791, 1, 52564, 48614, 439, 553, 0);
  fimport$9(6802, 1, 52564, 48614, 439, 554, 0);
  fimport$9(4467, 2, 49856, 49e3, 472, 555, 0);
  fimport$9(14157, 1, 52724, 52728, 475, 556, 0);
  fimport$9(14027, 1, 52724, 52728, 475, 557, 0);
  fimport$9(4454, 2, 52568, 49408, 444, 558, 0);
  fimport$9(14143, 2, 52800, 52808, 488, 559, 0);
  fimport$9(14013, 2, 52800, 52808, 488, 560, 0);
  fimport$9(4436, 2, 49856, 49e3, 472, 561, 0);
  fimport$9(4530, 2, 49856, 49e3, 472, 562, 0);
  fimport$9(4511, 2, 52568, 49408, 444, 563, 0);
  fimport$9(9204, 1, 52564, 48614, 439, 564, 0);
  fimport$9(3353, 1, 52724, 52728, 475, 565, 0);
  fimport$9(9356, 1, 52724, 52728, 475, 566, 0);
  fimport$9(3371, 1, 52724, 52728, 475, 567, 0);
  fimport$9(9385, 1, 52724, 52728, 475, 568, 0);
  fimport$9(15056, 2, 52568, 49408, 444, 569, 0);
  fimport$9(15050, 1, 52564, 48614, 439, 570, 0);
  fimport$9(15031, 2, 52908, 49e3, 540, 571, 0);
  fimport$9(11926, 2, 52644, 49408, 450, 572, 0);
  fimport$9(2140, 2, 52644, 49408, 450, 573, 0);
  fimport$9(12235, 3, 52932, 49004, 574, 575, 0);
  fimport$9(12567, 2, 52644, 49408, 450, 576, 0);
  fimport$9(12459, 2, 52644, 49408, 450, 577, 0);
  fimport$9(2086, 3, 52944, 49004, 578, 579, 0);
  fimport$9(2075, 2, 52644, 49408, 450, 580, 0);
  fimport$9(7354, 3, 52956, 48740, 581, 582, 0);
  fimport$9(7295, 2, 52968, 49e3, 583, 584, 0);
  fimport$9(7333, 4, 52672, 48720, 460, 585, 0);
  fimport$9(7255, 3, 52976, 48740, 586, 587, 0);
  fimport$9(11592, 7, 52992, 50220, 588, 589, 0);
  fimport$9(7349, 8, 53024, 53056, 590, 591, 0);
  fimport$9(1358, 3, 52956, 48740, 581, 592, 0);
  fimport$9(4881, 4, 53136, 48720, 593, 594, 0);
  fimport$9(15406, 3, 53208, 48740, 595, 596, 0);
  fimport$9(15199, 4, 52672, 48720, 460, 597, 0);
  fimport$9(6653, 4, 53280, 53296, 598, 599, 0);
  fimport$9(3563, 1, 52564, 48614, 439, 600, 0);
  fimport$9(7032, 4, 52672, 48720, 460, 601, 0);
  fimport$9(7043, 1, 52564, 48614, 439, 602, 0);
  fimport$9(7046, 7, 53472, 53500, 603, 604, 0);
  fimport$9(3841, 8, 53536, 53056, 605, 606, 0);
  fimport$9(16527, 8, 53536, 53056, 605, 607, 0);
  fimport$9(16448, 8, 53536, 53056, 605, 608, 0);
  fimport$9(16325, 8, 53536, 53056, 605, 609, 0);
  fimport$9(16552, 10, 53792, 53832, 610, 611, 0);
  fimport$9(3120, 8, 53856, 53056, 612, 613, 0);
  fimport$9(16493, 8, 53856, 53056, 612, 614, 0);
  fimport$9(16403, 8, 53856, 53056, 612, 615, 0);
  fimport$9(16256, 8, 53856, 53056, 612, 616, 0);
  fimport$9(16538, 10, 53792, 53832, 610, 617, 0);
  fimport$9(6458, 9, 54064, 54100, 618, 619, 0);
  fimport$9(3829, 7, 54880, 53500, 620, 621, 0);
  fimport$9(16514, 7, 54880, 53500, 620, 622, 0);
  fimport$9(16435, 7, 54880, 53500, 620, 623, 0);
  fimport$9(16288, 7, 54880, 53500, 620, 624, 0);
  fimport$9(11314, 7, 54880, 53500, 620, 625, 0);
  fimport$9(3110, 7, 54912, 53500, 626, 627, 0);
  fimport$9(16482, 7, 54912, 53500, 626, 628, 0);
  fimport$9(16392, 7, 54912, 53500, 626, 629, 0);
  fimport$9(16245, 7, 54912, 53500, 626, 630, 0);
  fimport$9(6445, 8, 54944, 53056, 631, 632, 0);
  fimport$9(3828, 8, 53536, 53056, 605, 633, 0);
  fimport$9(3109, 8, 53856, 53056, 612, 634, 0);
  fimport$9(6444, 9, 54976, 54100, 635, 636, 0);
  fimport$9(2065, 7, 55024, 53500, 637, 638, 0);
  fimport$9(10964, 8, 55056, 53056, 639, 640, 0);
  fimport$9(3001, 8, 55088, 53056, 641, 642, 0);
  fimport$9(3817, 7, 54880, 53500, 620, 643, 0);
  fimport$9(16502, 5, 55120, 52708, 644, 645, 0);
  fimport$9(16423, 5, 55120, 52708, 644, 646, 0);
  fimport$9(16276, 5, 55120, 52708, 644, 647, 0);
  fimport$9(3100, 6, 55152, 48856, 648, 649, 0);
  fimport$9(16472, 4, 52672, 48720, 460, 650, 0);
  fimport$9(16382, 4, 52672, 48720, 460, 651, 0);
  fimport$9(16235, 4, 52672, 48720, 460, 652, 0);
  fimport$9(11343, 7, 55184, 55212, 653, 654, 0);
  fimport$9(6432, 8, 54944, 53056, 631, 655, 0);
  fimport$9(16412, 4, 52672, 48720, 460, 656, 0);
  fimport$9(16265, 4, 52672, 48720, 460, 657, 0);
  fimport$9(16459, 4, 52672, 48720, 460, 658, 0);
  fimport$9(16336, 5, 55280, 52708, 659, 660, 0);
  fimport$9(7269, 5, 55280, 52708, 659, 661, 0);
  fimport$9(4636, 2, 52880, 49408, 520, 662, 0);
  fimport$9(15479, 2, 52968, 49e3, 583, 663, 0);
  fimport$9(15272, 3, 55368, 48740, 664, 665, 0);
  fimport$9(15122, 3, 55380, 48740, 666, 667, 0);
  fimport$9(15364, 3, 52976, 48740, 586, 668, 0);
  fimport$9(15157, 4, 55392, 48720, 669, 670, 0);
  fimport$9(15101, 4, 55408, 48720, 671, 672, 0);
  fimport$9(15431, 2, 52644, 49408, 450, 673, 0);
  fimport$9(15224, 2, 52880, 49408, 520, 674, 0);
  fimport$9(6878, 1, 52564, 48614, 439, 675, 0);
  fimport$9(9330, 1, 52724, 52728, 475, 676, 0);
  fimport$9(15387, 3, 52976, 48740, 586, 677, 0);
  fimport$9(15180, 4, 52672, 48720, 460, 678, 0);
  fimport$9(7793, 3, 52788, 49004, 485, 679, 0);
  fimport$9(15466, 5, 55424, 52708, 680, 681, 0);
  fimport$9(15259, 5, 55280, 52708, 659, 682, 0);
  fimport$9(1367, 3, 52956, 48740, 581, 683, 0);
  fimport$9(1380, 1, 52564, 48614, 439, 684, 0);
  fimport$9(15354, 6, 55456, 48856, 685, 686, 0);
  fimport$9(15147, 7, 53472, 53500, 603, 687, 0);
  fimport$9(5115, 10, 55488, 55528, 688, 689, 0);
  fimport$9(8057, 10, 55488, 55528, 688, 690, 0);
  fimport$9(15442, 3, 55548, 49004, 691, 692, 0);
  fimport$9(15235, 3, 55560, 49004, 693, 694, 0);
  fimport$9(15114, 3, 55572, 49004, 695, 696, 0);
  fimport$9(15017, 4, 55584, 55600, 697, 698, 0);
  fimport$9(6583, 1, 52528, 48504, 428, 699, 0);
  fimport$9(6642, 1, 52564, 48614, 439, 700, 0);
  fimport$9(6596, 1, 52528, 48504, 428, 701, 0);
  fimport$9(6613, 1, 52564, 48614, 439, 702, 0);
  fimport$9(1887, 3, 53208, 48740, 595, 703, 0);
  fimport$9(1897, 1, 52564, 48614, 439, 704, 0);
  fimport$9(15420, 5, 55616, 52708, 705, 706, 0);
  fimport$9(15213, 5, 55648, 52708, 707, 708, 0);
  fimport$9(6897, 1, 52564, 48614, 439, 709, 0);
  fimport$9(6910, 1, 52564, 48614, 439, 710, 0);
  fimport$9(6886, 2, 52644, 49408, 450, 711, 0);
  fimport$9(6761, 3, 52976, 48740, 586, 712, 0);
  fimport$9(8405, 4, 52672, 48720, 460, 713, 0);
  fimport$9(6782, 1, 52564, 48614, 439, 714, 0);
  fimport$9(6772, 3, 55560, 49004, 693, 715, 0);
  fimport$9(8487, 3, 52752, 49004, 480, 716, 0);
  fimport$9(6730, 1, 52564, 48614, 439, 717, 0);
  fimport$9(8011, 3, 55668, 48740, 718, 719, 0);
  fimport$9(1645, 3, 55668, 48740, 718, 720, 0);
  fimport$9(11881, 3, 55668, 48740, 718, 721, 0);
  fimport$9(7781, 3, 52976, 48740, 586, 722, 0);
  fimport$9(11418, 6, 55680, 55704, 723, 724, 0);
  fimport$9(11429, 1, 52564, 48614, 439, 725, 0);
  fimport$9(1820, 3, 55712, 48696, 726, 727, 0);
  fimport$9(7583, 1, 52528, 48504, 428, 728, 0);
  fimport$9(1441, 2, 52716, 49e3, 468, 729, 0);
  fimport$9(7599, 5, 55728, 55748, 730, 731, 0);
  fimport$9(10427, 3, 55756, 49004, 732, 733, 0);
  fimport$9(1833, 1, 52564, 48614, 439, 734, 0);
  fimport$9(6413, 2, 52644, 49408, 450, 735, 0);
  fimport$9(5345, 1, 48472, 48504, 24, 736, 0);
  fimport$9(2870, 1, 55768, 48504, 737, 738, 0);
  fimport$9(1461, 1, 55768, 48504, 737, 739, 0);
  fimport$9(1424, 1, 55768, 48504, 737, 740, 0);
  fimport$9(11208, 2, 55772, 49e3, 741, 742, 0);
  fimport$9(4912, 2, 55780, 49e3, 743, 744, 0);
  fimport$9(12606, 3, 55788, 49004, 745, 746, 0);
  fimport$9(6137, 4, 55808, 49104, 747, 748, 0);
  fimport$9(4753, 4, 55824, 49104, 749, 750, 0);
  fimport$9(7588, 1, 52564, 48614, 439, 751, 0);
  fimport$9(1466, 1, 55768, 48504, 737, 752, 0);
  fimport$9(8687, 2, 55840, 48692, 753, 754, 0);
  fimport$9(8672, 3, 55712, 48696, 726, 755, 0);
  fimport$9(3485, 2, 55840, 48692, 753, 756, 0);
  fimport$9(3469, 3, 55712, 48696, 726, 757, 0);
  fimport$9(2832, 1, 55768, 48504, 737, 758, 0);
  fimport$9(6665, 3, 52976, 48740, 586, 759, 0);
  fimport$9(6677, 1, 52564, 48614, 439, 760, 0);
  fimport$9(8033, 4, 52672, 48720, 460, 761, 0);
  fimport$9(8046, 1, 52564, 48614, 439, 762, 0);
  fimport$9(7281, 3, 52976, 48740, 586, 763, 0);
  fimport$9(12162, 2, 52644, 49408, 450, 764, 0);
  fimport$9(14096, 2, 52880, 49408, 520, 765, 0);
  fimport$9(11280, 3, 52868, 49004, 518, 766, 0);
  fimport$9(11723, 2, 52880, 49408, 520, 767, 0);
  fimport$9(8776, 1, 52564, 48614, 439, 768, 0);
  fimport$9(4625, 1, 52564, 48614, 439, 769, 0);
  fimport$9(2096, 2, 52644, 49408, 450, 770, 0);
  fimport$9(11630, 2, 52716, 49e3, 468, 771, 0);
  fimport$9(12766, 5, 55856, 52708, 772, 773, 0);
  fimport$9(11650, 1, 52564, 48614, 439, 774, 0);
  fimport$9(3570, 1, 52528, 48504, 428, 775, 0);
  fimport$9(12744, 3, 52976, 48740, 586, 776, 0);
  fimport$9(3590, 1, 52564, 48614, 439, 777, 0);
  fimport$9(12785, 1, 48472, 48504, 24, 778, 0);
  fimport$9(12580, 2, 52888, 49408, 524, 779, 0);
  fimport$9(12594, 1, 52564, 48614, 439, 780, 0);
  fimport$9(3699, 4, 55888, 49104, 781, 782, 0);
  fimport$9(3687, 1, 52564, 48614, 439, 783, 0);
  fimport$9(3998, 1, 52564, 48614, 439, 784, 0);
  fimport$9(10859, 2, 52880, 49408, 520, 785, 0);
  fimport$9(12360, 2, 52716, 49e3, 468, 786, 0);
  fimport$9(10561, 1, 52528, 48504, 428, 787, 0);
  fimport$9(12035, 1, 52528, 48504, 428, 788, 0);
  fimport$9(12635, 2, 52716, 49e3, 468, 789, 0);
  fimport$9(11366, 1, 52528, 48504, 428, 790, 0);
  fimport$9(11942, 1, 52528, 48504, 428, 791, 0);
  fimport$9(11973, 1, 52528, 48504, 428, 792, 0);
  fimport$9(11955, 1, 52528, 48504, 428, 793, 0);
  fimport$9(3230, 1, 52528, 48504, 428, 794, 0);
  fimport$9(7809, 1, 52528, 48504, 428, 795, 0);
  fimport$9(12343, 1, 52528, 48504, 428, 796, 0);
  fimport$9(10545, 1, 52528, 48504, 428, 797, 0);
  fimport$9(12018, 1, 52528, 48504, 428, 798, 0);
  fimport$9(7643, 2, 49856, 49e3, 472, 799, 0);
  fimport$9(1542, 2, 49856, 49e3, 472, 800, 0);
  fimport$9(10196, 2, 49856, 49e3, 472, 801, 0);
  fimport$9(6937, 1, 52564, 48614, 439, 802, 0);
  fimport$9(2669, 1, 48472, 48504, 24, 803, 0);
  fimport$9(15450, 2, 55904, 49e3, 804, 805, 0);
  fimport$9(15243, 3, 48748, 48740, 806, 807, 0);
  fimport$9(11037, 1, 55912, 55916, 808, 809, 0);
  fimport$9(2900, 1, 55768, 48504, 737, 810, 0);
  fimport$9(2567, 1, 48472, 48504, 24, 811, 0);
  fimport$9(2589, 1, 48472, 48504, 24, 812, 0);
  fimport$9(13870, 1, 48472, 48504, 24, 813, 0);
  fimport$9(11170, 2, 55772, 49e3, 741, 814, 0);
  fimport$9(11550, 2, 52568, 49408, 444, 815, 0);
  fimport$9(11566, 1, 48472, 48504, 24, 816, 0);
  fimport$9(11094, 4, 56e3, 48720, 817, 818, 0);
  fimport$9(11110, 1, 52564, 48614, 439, 819, 0);
  fimport$9(10119, 5, 56016, 56036, 820, 821, 0);
  fimport$9(16301, 3, 56044, 48740, 822, 823, 0);
  fimport$9(16575, 2, 52908, 49e3, 540, 824, 0);
  fimport$9(14785, 7, 56064, 56092, 825, 826, 0);
  fimport$9(15297, 7, 56064, 56092, 825, 827, 0);
  fimport$9(1412, 2, 55780, 49e3, 743, 828, 0);
  fimport$9(7138, 2, 52716, 49e3, 468, 829, 0);
  fimport$9(12049, 3, 56104, 48740, 830, 831, 0);
  fimport$9(12179, 2, 52716, 49e3, 468, 832, 0);
  fimport$9(2742, 4, 56128, 56144, 833, 834, 0);
  fimport$9(6843, 2, 52888, 49408, 524, 835, 0);
  fimport$9(7195, 2, 52716, 49e3, 468, 836, 0);
  fimport$9(12649, 3, 56104, 48740, 830, 837, 0);
  fimport$9(12193, 2, 52716, 49e3, 468, 838, 0);
  fimport$9(12664, 2, 52716, 49e3, 468, 839, 0);
  fimport$9(2914, 2, 55780, 49e3, 743, 840, 0);
  fimport$9(3783, 4, 56160, 48720, 841, 842, 0);
  fimport$9(11903, 2, 55904, 49e3, 804, 843, 0);
  fimport$9(7180, 1, 52528, 48504, 428, 844, 0);
  fimport$9(4573, 2, 49856, 49e3, 472, 845, 0);
  fimport$9(6697, 2, 49856, 49e3, 472, 846, 0);
  fimport$9(9039, 3, 56232, 51284, 847, 848, 0);
  fimport$9(13592, 4, 56256, 56272, 849, 850, 0);
  fimport$9(13572, 2, 52880, 49408, 520, 851, 0);
  fimport$9(6071, 1, 55768, 48504, 737, 852, 0);
  fimport$9(6056, 2, 52880, 49408, 520, 853, 0);
  fimport$9(6823, 2, 52888, 49408, 524, 854, 0);
  fimport$9(2121, 1, 52652, 48504, 454, 855, 0);
  fimport$9(2104, 2, 52568, 49408, 444, 856, 0);
  fimport$9(1133, 2, 52644, 49408, 450, 857, 0);
  fimport$9(1109, 1, 52652, 48504, 454, 858, 0);
  fimport$9(2162, 8, 56288, 53056, 859, 860, 0);
  fimport$9(4656, 4, 56320, 49104, 861, 862, 0);
  fimport$9(13426, 2, 56344, 49e3, 863, 864, 0);
  fimport$9(11598, 2, 52568, 49408, 444, 865, 0);
  global$0 = $0_1 + 16 | 0;
 }
 
 function $1178() {
  return $274(16215, 5408, 1048, 8, 16, 20, 2) | 0;
 }
 
 function $1179($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return FUNCTION_TABLE[$0_1 | 0]($1_1) | 0;
 }
 
 function $1180($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $4_1 = $1782(184);
  $1_1 = HEAP32[18392];
  if ($1_1) {
   $1_1 = $1_1 + 876 | 0;
   HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
  }
  $2_1 = FUNCTION_TABLE[HEAP32[18314]](15880, HEAP32[18394]) | 0;
  $1_1 = $2_1 + 8 | 0;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 160 >> 2] = 0;
  HEAP32[$1_1 + 164 >> 2] = 0;
  HEAP32[$1_1 + 220 >> 2] = 0;
  HEAP32[$1_1 + 224 >> 2] = 0;
  HEAP32[$1_1 + 892 >> 2] = 0;
  HEAP32[$1_1 + 896 >> 2] = 0;
  HEAP32[$1_1 + 872 >> 2] = 0;
  HEAP32[$1_1 + 876 >> 2] = 0;
  $3 = $1_1 + 900 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 908 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 916 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 924 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 932 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 1072 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 1080 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 1088 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 1096 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $1_1 + 1104 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $1_1 = $1604($1_1, 0, 5408);
  HEAP32[$1_1 + 32 >> 2] = 1050253722;
  HEAP32[$1_1 + 36 >> 2] = 1086324736;
  HEAP32[$1_1 + 28 >> 2] = 1924;
  HEAP32[$1_1 + 24 >> 2] = 8540;
  HEAP32[$1_1 + 16 >> 2] = 1015580809;
  HEAP32[$1_1 + 20 >> 2] = 1084227584;
  HEAP32[$1_1 + 8 >> 2] = -1082130432;
  HEAP32[$1_1 + 12 >> 2] = -1082130432;
  $1604($1_1 + 44 | 0, 255, 88);
  HEAP32[$1_1 + 156 >> 2] = 0;
  HEAP32[$1_1 + 148 >> 2] = 1065353216;
  HEAP32[$1_1 + 140 >> 2] = 0;
  HEAP32[$1_1 + 144 >> 2] = 0;
  HEAP32[$1_1 + 132 >> 2] = 1049414861;
  HEAP32[$1_1 + 136 >> 2] = 1028443341;
  HEAP32[$1_1 + 180 >> 2] = 0;
  HEAP32[$1_1 + 184 >> 2] = 0;
  HEAP32[$1_1 + 176 >> 2] = 1114636288;
  HEAP16[$1_1 + 172 >> 1] = 1;
  HEAP8[$1_1 + 170 | 0] = 1;
  HEAP16[$1_1 + 168 >> 1] = 0;
  HEAP32[$1_1 + 160 >> 2] = 1065353216;
  HEAP32[$1_1 + 164 >> 2] = 1065353216;
  HEAP8[$1_1 + 152 | 0] = 0;
  $3 = $1_1 + 188 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$1_1 + 196 >> 2] = 0;
  HEAP32[$1_1 + 892 >> 2] = -8388609;
  HEAP32[$1_1 + 896 >> 2] = -8388609;
  HEAP32[$1_1 + 224 >> 2] = -8388609;
  HEAP32[$1_1 + 216 >> 2] = 0;
  HEAP32[$1_1 + 220 >> 2] = -8388609;
  HEAP32[$1_1 + 212 >> 2] = 1;
  HEAP32[$1_1 + 208 >> 2] = 0;
  HEAP32[$1_1 + 204 >> 2] = 2;
  HEAP32[$1_1 + 200 >> 2] = 3;
  HEAP32[$1_1 + 40 >> 2] = 1086324736;
  $3 = 0;
  while (1) {
   $5_1 = $1_1 + ($3 << 2) | 0;
   HEAP32[$5_1 + 1032 >> 2] = -1082130432;
   HEAP32[$5_1 + 1052 >> 2] = -1082130432;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 5) {
    continue
   }
   break;
  };
  $3 = 0;
  while (1) {
   $5_1 = $1_1 + ($3 << 2) | 0;
   HEAP32[$5_1 + 1132 >> 2] = -1082130432;
   HEAP32[$5_1 + 3180 >> 2] = -1082130432;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 512) {
    continue
   }
   break;
  };
  $3 = 0;
  while (1) {
   HEAP32[($1_1 + ($3 << 2) | 0) + 5228 >> 2] = -1082130432;
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 20) {
    continue
   }
   break;
  };
  $1($2_1 + 5416 | 0);
  $1_1 = $2_1 + 6476 | 0;
  HEAP32[$1_1 + 24 >> 2] = 0;
  HEAP32[$1_1 + 28 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $3 = $1_1 + 32 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $1604($1_1 + 44 | 0, 0, 384);
  $3 = $1604($1_1, 0, 500);
  $1_1 = 0;
  while (1) {
   $5_1 = ($1_1 << 3) + $3 | 0;
   $7_1 = Math_fround($1_1 | 0);
   $7_1 = Math_fround(Math_fround(Math_fround($7_1 + $7_1) * Math_fround(3.1415927410125732)) / Math_fround(48.0));
   HEAPF32[$5_1 + 48 >> 2] = $1688($7_1);
   HEAPF32[$5_1 + 44 >> 2] = $1601($7_1);
   $1_1 = $1_1 + 1 | 0;
   if (($1_1 | 0) != 48) {
    continue
   }
   break;
  };
  HEAPF32[$3 + 428 >> 2] = HEAPF32[$3 + 20 >> 2] / Math_fround(2.1410584449768066e-03);
  HEAP32[$2_1 + 7072 >> 2] = 0;
  HEAP32[$2_1 + 7076 >> 2] = 0;
  HEAP32[$2_1 + 7100 >> 2] = 0;
  HEAP32[$2_1 + 7104 >> 2] = 0;
  HEAP32[$2_1 + 7176 >> 2] = 0;
  HEAP32[$2_1 + 7180 >> 2] = 0;
  HEAP32[$2_1 + 7580 >> 2] = 0;
  HEAP32[$2_1 + 7584 >> 2] = 0;
  HEAP32[$2_1 + 7504 >> 2] = 0;
  HEAP32[$2_1 + 7496 >> 2] = 0;
  HEAP32[$2_1 + 7500 >> 2] = 0;
  $1_1 = $2_1 + 7588 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7668 >> 2] = 0;
  HEAP32[$2_1 + 7672 >> 2] = 0;
  $1_1 = $2_1 + 7676 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7684 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7692 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7008 >> 2] = 0;
  HEAP32[$2_1 + 7012 >> 2] = 0;
  $1_1 = $2_1 + 7016 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7024 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7032 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7040 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7048 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7056 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7064 >> 2] = 0;
  $1604($2_1 + 7220 | 0, 0, 272);
  $1_1 = $2_1 + 7648 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7640 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7632 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7624 >> 2] = 0;
  HEAP32[$2_1 + 7628 >> 2] = 0;
  HEAP32[$2_1 + 7708 >> 2] = 2139095039;
  HEAP32[$2_1 + 7712 >> 2] = 0;
  HEAP32[$2_1 + 7716 >> 2] = 0;
  $1_1 = $2_1 + 7700 | 0;
  HEAP32[$1_1 >> 2] = 2139095039;
  HEAP32[$1_1 + 4 >> 2] = 2139095039;
  $1_1 = $2_1 + 7720 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7728 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7736 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7752 >> 2] = 2139095039;
  HEAP32[$2_1 + 7756 >> 2] = 0;
  HEAP32[$2_1 + 7760 >> 2] = 0;
  $1_1 = $2_1 + 7744 | 0;
  HEAP32[$1_1 >> 2] = 2139095039;
  HEAP32[$1_1 + 4 >> 2] = 2139095039;
  $1_1 = $2_1 + 7764 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7772 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7780 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7792 | 0;
  HEAP32[$1_1 >> 2] = 2139095039;
  HEAP32[$1_1 + 4 >> 2] = 2139095039;
  HEAP32[$2_1 + 7788 >> 2] = 2139095039;
  $1_1 = $2_1 + 7824 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7816 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7808 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7800 >> 2] = 0;
  HEAP32[$2_1 + 7804 >> 2] = 0;
  $1_1 = $2_1 + 7836 | 0;
  HEAP32[$1_1 >> 2] = 2139095039;
  HEAP32[$1_1 + 4 >> 2] = 2139095039;
  HEAP32[$2_1 + 7832 >> 2] = 2139095039;
  $1_1 = $2_1 + 7912 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7920 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7928 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 7936 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP16[$2_1 + 7944 >> 1] = 0;
  HEAP32[$2_1 + 7892 >> 2] = 0;
  HEAP32[$2_1 + 7896 >> 2] = 0;
  $1_1 = $2_1 + 7900 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7908 >> 2] = -1;
  HEAP8[$2_1 + 7946 | 0] = 0;
  HEAP32[$2_1 + 7948 >> 2] = 0;
  HEAP32[$2_1 + 7952 >> 2] = 0;
  $1_1 = $2_1 + 7956 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7996 >> 2] = 0;
  $1_1 = $2_1 + 8028 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 8e3 >> 2] = 0;
  HEAP32[$2_1 + 7992 >> 2] = 0;
  HEAP32[$2_1 + 8024 >> 2] = 0;
  $1604($2_1 + 8044 | 0, 0, 68);
  $1604($2_1 + 8116 | 0, 0, 3764);
  $470($2_1 + 11880 | 0);
  HEAP32[$2_1 + 12256 >> 2] = 0;
  HEAP32[$2_1 + 12216 >> 2] = 0;
  HEAP32[$2_1 + 12208 >> 2] = 0;
  HEAP32[$2_1 + 12212 >> 2] = 0;
  HEAP32[$2_1 + 11988 >> 2] = 0;
  HEAP32[$2_1 + 11992 >> 2] = 0;
  $1_1 = $2_1 + 11996 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12004 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12012 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12020 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12028 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12036 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12044 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 12084 >> 2] = 0;
  HEAP32[$2_1 + 12088 >> 2] = 0;
  $1_1 = $2_1 + 12092 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12100 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12108 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12116 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 12132 >> 2] = 0;
  HEAP32[$2_1 + 12136 >> 2] = 0;
  $1_1 = $2_1 + 12140 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12148 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12156 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12164 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12172 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12180 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 12188 >> 2] = 0;
  $1_1 = $2_1 + 12264 | 0;
  HEAP32[$1_1 >> 2] = -1;
  HEAP32[$1_1 + 4 >> 2] = -1;
  HEAP16[$2_1 + 12260 >> 1] = 257;
  HEAP32[$2_1 + 12272 >> 2] = 0;
  HEAP32[$2_1 + 12276 >> 2] = 0;
  $1_1 = $2_1 + 12280 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $2_1 + 12288 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 6464 >> 2] = 0;
  HEAP8[$2_1 + 1 | 0] = !$0_1;
  HEAP8[$2_1 | 0] = 0;
  HEAP32[$2_1 + 6468 >> 2] = 0;
  HEAP32[$2_1 + 6472 >> 2] = 0;
  if (!$0_1) {
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $0_1 = FUNCTION_TABLE[HEAP32[18314]](1128, HEAP32[18394]) | 0;
   $1604($0_1 + 36 | 0, 0, 1076);
   $0_1 = $1604($0_1, 0, 1128);
   HEAP32[$0_1 + 12 >> 2] = 1;
   HEAP32[$0_1 + 1120 >> 2] = -1;
   HEAP32[$0_1 + 1124 >> 2] = -1;
  }
  HEAP32[$2_1 + 6976 >> 2] = 0;
  HEAP32[$2_1 + 6980 >> 2] = 0;
  HEAP32[$2_1 + 7168 >> 2] = 0;
  HEAP32[$2_1 + 7172 >> 2] = 0;
  HEAP32[$2_1 + 7156 >> 2] = 0;
  HEAP32[$2_1 + 7160 >> 2] = 0;
  HEAP32[$2_1 + 7068 >> 2] = 0;
  HEAP32[$2_1 + 7004 >> 2] = 0;
  HEAP32[$2_1 + 6984 >> 2] = 0;
  HEAP32[$2_1 + 6988 >> 2] = -1;
  HEAP32[$2_1 + 6992 >> 2] = -1;
  HEAP32[$2_1 + 6996 >> 2] = 0;
  HEAP32[$2_1 + 7080 >> 2] = 0;
  HEAP32[$2_1 + 7084 >> 2] = 0;
  HEAP32[$2_1 + 7108 >> 2] = 0;
  HEAP32[$2_1 + 7112 >> 2] = 0;
  HEAP32[$2_1 + 152 >> 2] = $0_1;
  HEAP8[$2_1 + 7e3 | 0] = 0;
  $0_1 = $2_1 + 7088 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7096 >> 2] = 0;
  $0_1 = $2_1 + 7116 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7124 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7132 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7140 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7147 | 0;
  HEAP8[$0_1 | 0] = 0;
  HEAP8[$0_1 + 1 | 0] = 0;
  HEAP8[$0_1 + 2 | 0] = 0;
  HEAP8[$0_1 + 3 | 0] = 0;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP8[$0_1 + 5 | 0] = 0;
  HEAP8[$0_1 + 6 | 0] = 0;
  HEAP8[$0_1 + 7 | 0] = 0;
  HEAP32[$2_1 + 7492 >> 2] = 0;
  HEAP16[$2_1 + 7200 >> 1] = 0;
  HEAP32[$2_1 + 7192 >> 2] = -1;
  HEAP32[$2_1 + 7196 >> 2] = 0;
  HEAP32[$2_1 + 7184 >> 2] = 0;
  HEAP32[$2_1 + 7188 >> 2] = 0;
  HEAP32[$2_1 + 7176 >> 2] = -1082130432;
  HEAP32[$2_1 + 7180 >> 2] = -1082130432;
  HEAP32[$2_1 + 7204 >> 2] = 0;
  HEAP32[$2_1 + 7208 >> 2] = 0;
  $0_1 = $2_1 + 7212 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7508 >> 2] = 0;
  HEAP32[$2_1 + 7512 >> 2] = 0;
  $0_1 = $2_1 + 7516 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7524 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7532 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7540 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7548 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7556 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $0_1 = $2_1 + 7562 | 0;
  HEAP16[$0_1 >> 1] = 0;
  HEAP16[$0_1 + 2 >> 1] = 0;
  HEAP16[$0_1 + 4 >> 1] = 0;
  HEAP16[$0_1 + 6 >> 1] = 0;
  HEAP32[$2_1 + 7576 >> 2] = 0;
  HEAP32[$2_1 + 7608 >> 2] = 0;
  HEAP32[$2_1 + 7600 >> 2] = 0;
  HEAP32[$2_1 + 7604 >> 2] = 0;
  HEAP16[$2_1 + 7596 >> 1] = 0;
  HEAP8[$2_1 + 7598 | 0] = 0;
  HEAP8[$2_1 + 7570 | 0] = 1;
  HEAP32[$2_1 + 7620 >> 2] = -1;
  HEAP8[$2_1 + 7571 | 0] = 0;
  HEAP8[$2_1 + 7572 | 0] = 0;
  HEAP8[$2_1 + 7573 | 0] = 0;
  HEAP8[$2_1 + 7574 | 0] = 0;
  HEAP32[$2_1 + 7656 >> 2] = 0;
  HEAP32[$2_1 + 7660 >> 2] = 0;
  HEAP32[$2_1 + 7880 >> 2] = 0;
  HEAP32[$2_1 + 7664 >> 2] = 0;
  HEAP32[$2_1 + 7612 >> 2] = -1;
  HEAP32[$2_1 + 7616 >> 2] = -1;
  $0_1 = $2_1 + 7857 | 0;
  HEAP8[$0_1 | 0] = 0;
  HEAP8[$0_1 + 1 | 0] = 0;
  HEAP8[$0_1 + 2 | 0] = 0;
  HEAP8[$0_1 + 3 | 0] = 0;
  HEAP8[$0_1 + 4 | 0] = 0;
  HEAP8[$0_1 + 5 | 0] = 0;
  HEAP8[$0_1 + 6 | 0] = 0;
  HEAP8[$0_1 + 7 | 0] = 0;
  $0_1 = $2_1 + 7852 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7844 >> 2] = 0;
  HEAP32[$2_1 + 7848 >> 2] = 0;
  $0_1 = $2_1 + 7875 | 0;
  HEAP8[$0_1 | 0] = 0;
  HEAP8[$0_1 + 1 | 0] = 0;
  HEAP8[$0_1 + 2 | 0] = 0;
  HEAP8[$0_1 + 3 | 0] = 0;
  HEAP32[$2_1 + 7868 >> 2] = 0;
  HEAP32[$2_1 + 7872 >> 2] = 0;
  HEAP32[$2_1 + 7980 >> 2] = 0;
  HEAP32[$2_1 + 7884 >> 2] = -1;
  HEAP32[$2_1 + 7888 >> 2] = -1;
  $0_1 = $2_1 + 7972 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 7964 >> 2] = 0;
  HEAP32[$2_1 + 7968 >> 2] = 0;
  HEAP32[$2_1 + 8112 >> 2] = 0;
  HEAP32[$2_1 + 11968 >> 2] = 0;
  HEAP32[$2_1 + 7984 >> 2] = -1;
  HEAP32[$2_1 + 7988 >> 2] = 0;
  HEAP32[$2_1 + 8036 >> 2] = 0;
  HEAP32[$2_1 + 8040 >> 2] = 0;
  HEAP32[$2_1 + 8020 >> 2] = 0;
  $0_1 = $2_1 + 8012 | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$2_1 + 8004 >> 2] = 0;
  HEAP32[$2_1 + 8008 >> 2] = 0;
  HEAP32[$2_1 + 11980 >> 2] = 0;
  HEAP32[$2_1 + 11972 >> 2] = 177209344;
  HEAP32[$2_1 + 12060 >> 2] = 0;
  HEAP32[$2_1 + 12064 >> 2] = 1008981770;
  HEAP16[$2_1 + 12056 >> 1] = 0;
  HEAP32[$2_1 + 12052 >> 2] = 0;
  HEAP32[$2_1 + 11984 >> 2] = 0;
  HEAP32[$2_1 + 11976 >> 2] = 0;
  HEAP32[$2_1 + 12076 >> 2] = 0;
  HEAP32[$2_1 + 12068 >> 2] = 0;
  HEAP32[$2_1 + 12072 >> 2] = 0;
  HEAP32[$2_1 + 12116 >> 2] = 2139095039;
  HEAP32[$2_1 + 12120 >> 2] = 2139095039;
  HEAP32[$2_1 + 12080 >> 2] = 1056964608;
  HEAP32[$2_1 + 12224 >> 2] = 0;
  HEAP32[$2_1 + 12200 >> 2] = 0;
  HEAP8[$2_1 + 12196 | 0] = 0;
  HEAP32[$2_1 + 12192 >> 2] = 0;
  HEAP32[$2_1 + 12128 >> 2] = 0;
  HEAP16[$2_1 + 12124 >> 1] = 46;
  HEAP32[$2_1 + 12108 >> 2] = 2139095039;
  HEAP32[$2_1 + 12112 >> 2] = 2139095039;
  HEAP32[$2_1 + 12220 >> 2] = 0;
  HEAP32[$2_1 + 12244 >> 2] = 2;
  HEAP32[$2_1 + 12236 >> 2] = 0;
  HEAP8[$2_1 + 12232 | 0] = 0;
  HEAP32[$2_1 + 12228 >> 2] = 2139095039;
  HEAP32[$2_1 + 12204 >> 2] = 0;
  HEAP32[$2_1 + 12252 >> 2] = 0;
  HEAP8[$2_1 + 12248 | 0] = 0;
  HEAP32[$2_1 + 12240 >> 2] = 2;
  $1604($2_1 + 12296 | 0, 0, 492);
  HEAP32[$2_1 + 12796 >> 2] = -1;
  HEAP32[$2_1 + 12788 >> 2] = -1;
  HEAP32[$2_1 + 12792 >> 2] = -1;
  $1604($2_1 + 12800 | 0, 0, 3073);
  if (!HEAP32[18392]) {
   HEAP32[18392] = $2_1
  }
  $0_1 = 1800;
  $3 = -1;
  while (1) {
   $1_1 = $0_1;
   $0_1 = $1_1 + 1 | 0;
   $5_1 = HEAPU8[$1_1 | 0];
   if ($5_1) {
    $3 = ($5_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $3 : HEAPU8[$1_1 + 2 | 0] == 35 ? -1 : $3;
    $3 = HEAP32[(($5_1 ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
   }
   if (($1_1 | 0) != 1806) {
    continue
   }
   break;
  };
  $3 = $3 ^ -1;
  $1_1 = HEAP32[$2_1 + 12144 >> 2];
  $0_1 = HEAP32[$2_1 + 12148 >> 2];
  label$7 : {
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$7
   }
   $5_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
   $1_1 = $1_1 + 1 | 0;
   $1_1 = ($1_1 | 0) < ($5_1 | 0) ? $5_1 : $1_1;
   if (($0_1 | 0) >= ($1_1 | 0)) {
    break label$7
   }
   $0_1 = HEAP32[18392];
   if ($0_1) {
    $0_1 = $0_1 + 876 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
   }
   $0_1 = FUNCTION_TABLE[HEAP32[18314]](Math_imul($1_1, 36), HEAP32[18394]) | 0;
   $5_1 = HEAP32[$2_1 + 12152 >> 2];
   if ($5_1) {
    $1602($0_1, $5_1, Math_imul(HEAP32[$2_1 + 12144 >> 2], 36));
    $5_1 = HEAP32[$2_1 + 12152 >> 2];
    label$12 : {
     if (!$5_1) {
      break label$12
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$12
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
   }
   HEAP32[$2_1 + 12148 >> 2] = $1_1;
   HEAP32[$2_1 + 12152 >> 2] = $0_1;
  }
  $0_1 = HEAP32[$2_1 + 12152 >> 2] + Math_imul(HEAP32[$2_1 + 12144 >> 2], 36) | 0;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 4;
  HEAP32[$0_1 + 24 >> 2] = 5;
  HEAP32[$0_1 + 20 >> 2] = 6;
  HEAP32[$0_1 + 16 >> 2] = 7;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 8;
  HEAP32[$0_1 + 4 >> 2] = $3;
  HEAP32[$0_1 >> 2] = 1800;
  HEAP32[$2_1 + 12144 >> 2] = HEAP32[$2_1 + 12144 >> 2] + 1;
  $3 = $23(11432, 0);
  $1_1 = HEAP32[$2_1 + 12144 >> 2];
  $0_1 = HEAP32[$2_1 + 12148 >> 2];
  label$11 : {
   if (($1_1 | 0) != ($0_1 | 0)) {
    break label$11
   }
   $5_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
   $1_1 = $1_1 + 1 | 0;
   $1_1 = ($1_1 | 0) < ($5_1 | 0) ? $5_1 : $1_1;
   if (($0_1 | 0) >= ($1_1 | 0)) {
    break label$11
   }
   $0_1 = $16(Math_imul($1_1, 36));
   $5_1 = HEAP32[$2_1 + 12152 >> 2];
   if ($5_1) {
    $1602($0_1, $5_1, Math_imul(HEAP32[$2_1 + 12144 >> 2], 36));
    $17(HEAP32[$2_1 + 12152 >> 2]);
   }
   HEAP32[$2_1 + 12148 >> 2] = $1_1;
   HEAP32[$2_1 + 12152 >> 2] = $0_1;
  }
  $0_1 = HEAP32[$2_1 + 12152 >> 2] + Math_imul(HEAP32[$2_1 + 12144 >> 2], 36) | 0;
  HEAP32[$0_1 + 32 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 16;
  HEAP32[$0_1 + 24 >> 2] = 17;
  HEAP32[$0_1 + 20 >> 2] = 18;
  HEAP32[$0_1 + 16 >> 2] = 19;
  HEAP32[$0_1 + 12 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 20;
  HEAP32[$0_1 + 4 >> 2] = $3;
  HEAP32[$0_1 >> 2] = 11432;
  HEAP32[$2_1 + 12144 >> 2] = HEAP32[$2_1 + 12144 >> 2] + 1;
  $0_1 = HEAP32[18392];
  if ($0_1) {
   $0_1 = $0_1 + 876 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
  }
  $0_1 = FUNCTION_TABLE[HEAP32[18314]](152, HEAP32[18394]) | 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 32 >> 2] = 0;
  $1_1 = $0_1 + 24 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 16 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 8 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1604($0_1 + 52 | 0, 0, 100);
  HEAP32[$0_1 + 48 >> 2] = 0;
  HEAP32[$0_1 + 36 >> 2] = -1;
  $1_1 = $0_1 + 40 | 0;
  HEAP32[$1_1 >> 2] = -1;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $3 = HEAP32[$2_1 + 7496 >> 2];
  $1_1 = HEAP32[$2_1 + 7500 >> 2];
  label$14 : {
   if (($3 | 0) != ($1_1 | 0)) {
    break label$14
   }
   $5_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
   $3 = $3 + 1 | 0;
   $3 = ($3 | 0) < ($5_1 | 0) ? $5_1 : $3;
   if (($1_1 | 0) >= ($3 | 0)) {
    break label$14
   }
   $1_1 = HEAP32[18392];
   if ($1_1) {
    $1_1 = $1_1 + 876 | 0;
    HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
   }
   $1_1 = FUNCTION_TABLE[HEAP32[18314]]($3 << 2, HEAP32[18394]) | 0;
   $5_1 = HEAP32[$2_1 + 7504 >> 2];
   if ($5_1) {
    $1602($1_1, $5_1, HEAP32[$2_1 + 7496 >> 2] << 2);
    $5_1 = HEAP32[$2_1 + 7504 >> 2];
    label$18 : {
     if (!$5_1) {
      break label$18
     }
     $6_1 = HEAP32[18392];
     if (!$6_1) {
      break label$18
     }
     $6_1 = $6_1 + 876 | 0;
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] - 1;
    }
    FUNCTION_TABLE[HEAP32[18315]]($5_1, HEAP32[18394]);
   }
   HEAP32[$2_1 + 7500 >> 2] = $3;
   HEAP32[$2_1 + 7504 >> 2] = $1_1;
  }
  HEAP32[HEAP32[$2_1 + 7504 >> 2] + (HEAP32[$2_1 + 7496 >> 2] << 2) >> 2] = $0_1;
  HEAP8[$2_1 | 0] = 1;
  HEAP32[$2_1 + 7496 >> 2] = HEAP32[$2_1 + 7496 >> 2] + 1;
  HEAP32[$4_1 >> 2] = $2_1;
  HEAP8[$4_1 + 27 | 0] = 0;
  HEAP8[$4_1 + 4 | 0] = 0;
  HEAP8[$4_1 + 63 | 0] = 0;
  HEAP32[$4_1 + 44 >> 2] = 2;
  HEAP32[$4_1 + 48 >> 2] = 2;
  HEAP32[$4_1 + 36 >> 2] = 2;
  HEAP32[$4_1 + 40 >> 2] = 2;
  HEAP32[$4_1 + 28 >> 2] = 2;
  HEAP32[$4_1 + 32 >> 2] = 2;
  HEAP8[$4_1 + 15 | 0] = 0;
  HEAP8[$4_1 + 16 | 0] = 0;
  HEAP8[$4_1 + 119 | 0] = 0;
  HEAP32[$4_1 + 104 >> 2] = 0;
  HEAP32[$4_1 + 96 >> 2] = 1;
  HEAP32[$4_1 + 100 >> 2] = 1;
  HEAP32[$4_1 + 88 >> 2] = 1;
  HEAP32[$4_1 + 92 >> 2] = 1;
  HEAP32[$4_1 + 80 >> 2] = 1;
  HEAP32[$4_1 + 84 >> 2] = 1;
  HEAP32[$4_1 + 72 >> 2] = 2;
  HEAP32[$4_1 + 76 >> 2] = 1;
  HEAP32[$4_1 + 64 >> 2] = 2;
  HEAP32[$4_1 + 68 >> 2] = 2;
  HEAP8[$4_1 + 52 | 0] = 0;
  HEAP32[$4_1 + 128 >> 2] = 1;
  HEAP32[$4_1 + 132 >> 2] = 0;
  HEAP32[$4_1 + 120 >> 2] = 1;
  HEAP32[$4_1 + 124 >> 2] = 1;
  HEAP8[$4_1 + 147 | 0] = 0;
  HEAP8[$4_1 + 108 | 0] = 0;
  HEAP8[$4_1 + 171 | 0] = 0;
  HEAP32[$4_1 + 156 >> 2] = 0;
  HEAP32[$4_1 + 148 >> 2] = 1;
  HEAP32[$4_1 + 152 >> 2] = 1;
  HEAP8[$4_1 + 136 | 0] = 0;
  HEAP32[$4_1 + 180 >> 2] = 1;
  HEAP32[$4_1 + 172 >> 2] = 1;
  HEAP32[$4_1 + 176 >> 2] = 1;
  HEAP8[$4_1 + 160 | 0] = 0;
  $1_1 = HEAP32[18392];
  $101(HEAP32[$4_1 >> 2]);
  $0_1 = $118();
  HEAP32[$0_1 + 208 >> 2] = 0;
  HEAP32[$0_1 + 204 >> 2] = 877;
  HEAP32[$0_1 + 200 >> 2] = 878;
  HEAP32[$0_1 + 24 >> 2] = 0;
  HEAP32[$0_1 + 28 >> 2] = 0;
  $101($1_1);
  return $4_1 | 0;
 }
 
 function $1181($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  FUNCTION_TABLE[$0_1 | 0]($1_1);
 }
 
 function $1184() {
  return HEAP32[23915];
 }
 
 function $1185($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  HEAP32[23915] = $0_1;
  $101($0_1 ? HEAP32[$0_1 >> 2] : $1_1);
 }
 
 function $1186($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $118();
  HEAP32[$0_1 >> 2] = fimport$1(52172, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1187($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $50();
  HEAP32[$0_1 >> 2] = fimport$1(52424, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1188($0_1) {
  $0_1 = $0_1 | 0;
  FUNCTION_TABLE[$0_1 | 0]();
 }
 
 function $1189($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2];
  HEAP32[$1_1 + 8 >> 2] = HEAPU8[$2_1 + 52 | 0] ? $2_1 + 52 | 0 : 0;
  HEAP32[$0_1 >> 2] = fimport$1(51328, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1190($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  FUNCTION_TABLE[$0_1 | 0]($2_1 + 12 | 0);
  fimport$4(HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1191($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $0_1 = $1488($2_1 + 12 | 0, $0_1);
  HEAP32[$0_1 >> 2] = 52584;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (HEAP32[$1_1 >> 2] != 2) {
   HEAP32[$2_1 + 24 >> 2] = HEAPU8[$0_1 + 4 | 0];
   $3 = $2_1 + 24 | 0;
   $0_1 = fimport$1(72652, $3 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 24 >> 2] = 0;
   $4_1 = $1_1;
   $1_1 = fimport$1(72760, $3 | 0) | 0;
   fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1192($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = Math_fround(0), $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = Math_fround(0), $24 = Math_fround(0), $25_1 = 0, $26_1 = 0, $27_1 = Math_fround(0), $28_1 = Math_fround(0), $29_1 = Math_fround(0), $30 = 0, $31_1 = 0, $32_1 = Math_fround(0), $33_1 = Math_fround(0), $34_1 = Math_fround(0), $35_1 = Math_fround(0), $36_1 = 0, $37 = 0, $38_1 = 0, $39_1 = Math_fround(0), $40_1 = Math_fround(0), $41_1 = Math_fround(0), $42_1 = 0, $43_1 = 0, $44_1 = 0.0, $45_1 = 0.0, $46_1 = 0.0, $47_1 = 0.0, $48_1 = Math_fround(0), $49 = Math_fround(0), $50_1 = Math_fround(0), $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74 = 0, $75_1 = 0, $76_1 = 0, $77 = 0, $78_1 = 0.0, $79_1 = 0.0, $80_1 = 0, $81_1 = 0, $82_1 = 0;
  $31_1 = global$0 - 32 | 0;
  global$0 = $31_1;
  $36_1 = $1488($31_1 + 12 | 0, $0_1);
  $1_1 = HEAP32[HEAP32[$36_1 + 8 >> 2] >> 2] != 2 ? $36_1 + 4 | 0 : 0;
  $3 = global$0 - 1184 | 0;
  global$0 = $3;
  $7_1 = HEAP32[18392];
  $0_1 = $7_1 + 12256 | 0;
  if (HEAPU8[$7_1 + 12256 | 0]) {
   $349($0_1)
  }
  label$2 : {
   if (!$143(6280, $1_1, 0)) {
    break label$2
   }
   $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
   HEAP8[$1_1 + 140 | 0] = 1;
   if (HEAP16[$1_1 + 150 >> 1] >= 2) {
    break label$2
   }
   HEAP32[$3 + 912 >> 2] = 16215;
   $557(5689, $3 + 912 | 0);
   $8 = HEAPF32[$7_1 + 856 >> 2];
   HEAPF64[$3 + 904 >> 3] = $8;
   HEAPF64[$3 + 896 >> 3] = Math_fround(Math_fround(1.0e3) / $8);
   $557(18577, $3 + 896 | 0);
   $1_1 = HEAP32[$7_1 + 860 >> 2];
   $2_1 = HEAP32[$7_1 + 864 >> 2];
   HEAP32[$3 + 884 >> 2] = $2_1;
   HEAP32[$3 + 880 >> 2] = $1_1;
   HEAP32[$3 + 888 >> 2] = ($2_1 | 0) / 3;
   $557(17880, $3 + 880 | 0);
   $1_1 = HEAP32[$7_1 + 868 >> 2];
   HEAP32[$3 + 868 >> 2] = HEAP32[$7_1 + 876 >> 2];
   HEAP32[$3 + 864 >> 2] = $1_1;
   $557(4678, $3 + 864 | 0);
   $594();
   $1_1 = HEAP32[5203];
   $2_1 = $3 + 1152 | 0;
   $5_1 = $2_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[5202];
   HEAP32[$5_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[5201];
   $2_1 = $2_1 + 16 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[5200];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[5199];
   HEAP32[$3 + 1160 >> 2] = HEAP32[5198];
   HEAP32[$3 + 1164 >> 2] = $1_1;
   $1_1 = HEAP32[5197];
   HEAP32[$3 + 1152 >> 2] = HEAP32[5196];
   HEAP32[$3 + 1156 >> 2] = $1_1;
   HEAP32[$3 + 1136 >> 2] = HEAP32[5216];
   $1_1 = HEAP32[5215];
   $2_1 = $3 + 1128 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[5214];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[5213];
   $2_1 = $3 + 1120 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[5212];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[5211];
   $2_1 = $3 + 1088 | 0;
   $5_1 = $2_1 + 24 | 0;
   HEAP32[$5_1 >> 2] = HEAP32[5210];
   HEAP32[$5_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[5209];
   $2_1 = $2_1 + 16 | 0;
   HEAP32[$2_1 >> 2] = HEAP32[5208];
   HEAP32[$2_1 + 4 >> 2] = $1_1;
   $1_1 = HEAP32[5207];
   HEAP32[$3 + 1096 >> 2] = HEAP32[5206];
   HEAP32[$3 + 1100 >> 2] = $1_1;
   $1_1 = HEAP32[5205];
   HEAP32[$3 + 1088 >> 2] = HEAP32[5204];
   HEAP32[$3 + 1092 >> 2] = $1_1;
   $38_1 = $7_1 + 12264 | 0;
   if (HEAP32[$38_1 >> 2] < 0) {
    HEAP32[$38_1 >> 2] = 4
   }
   $37 = $7_1 + 12268 | 0;
   if (HEAP32[$37 >> 2] < 0) {
    HEAP32[$37 >> 2] = 2
   }
   if ($709(4761)) {
    $583(8079, $0_1);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    if (!HEAPU8[$0_1 + 143 | 0]) {
     $8 = HEAPF32[$1_1 + 5492 >> 2];
     HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
     $1_1 = $0_1 + 256 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = $0_1 + 248 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
     HEAPF32[$0_1 + 208 >> 2] = $8 + HEAPF32[$0_1 + 216 >> 2];
    }
    $350(17167);
    $583(6371, $7_1 + 12258 | 0);
    $2_1 = $7_1 + 12257 | 0;
    $583(5142, $2_1);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    if (!HEAPU8[$0_1 + 143 | 0]) {
     $8 = HEAPF32[$1_1 + 5492 >> 2];
     HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
     $5_1 = $0_1 + 256 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $9 = $0_1 + 248 | 0;
     HEAP32[$9 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$9 + 4 >> 2] = $6_1;
     HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
     HEAPF32[$0_1 + 208 >> 2] = $8 + HEAPF32[$0_1 + 216 >> 2];
    }
    HEAPF32[$1_1 + 7224 >> 2] = HEAPF32[$1_1 + 6468 >> 2] * Math_fround(12.0);
    HEAP32[$1_1 + 7220 >> 2] = HEAP32[$1_1 + 7220 >> 2] | 1;
    $0_1 = $602(10880, $38_1, $3 + 1152 | 0, 8, 8) | HEAPU8[$2_1 | 0];
    HEAP8[$2_1 | 0] = $0_1;
    label$8 : {
     if (!($0_1 & 255)) {
      break label$8
     }
     $0_1 = HEAP32[$7_1 + 7508 >> 2];
     if (!$0_1) {
      break label$8
     }
     HEAP32[$3 + 848 >> 2] = HEAP32[$0_1 >> 2];
     $567(16161, $3 + 848 | 0);
     $1_1 = HEAP32[18392];
     $0_1 = HEAP32[$1_1 + 7080 >> 2];
     HEAP8[$0_1 + 140 | 0] = 1;
     $10_1 = HEAPF32[$1_1 + 5524 >> 2];
     $1_1 = $0_1 + 272 | 0;
     $8 = Math_fround($10_1 + HEAPF32[$1_1 >> 2]);
     HEAPF32[$1_1 >> 2] = $8;
     HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
     $0_1 = $3 + 784 | 0;
     $2_1 = $0_1 + 16 | 0;
     $5_1 = $0_1 + 24 | 0;
     $6_1 = $3 + 816 | 0;
     $9 = $0_1 + 40 | 0;
     $13 = $0_1 + 48 | 0;
     $1_1 = 0;
     while (1) {
      $0_1 = HEAP32[$7_1 + 7508 >> 2];
      $8 = Math_fround(0.0);
      $11_1 = Math_fround(0.0);
      $10_1 = Math_fround(0.0);
      $16_1 = Math_fround(0.0);
      label$10 : {
       label$11 : {
        switch ($1_1 | 0) {
        case 0:
         $10_1 = HEAPF32[$0_1 + 16 >> 2];
         $8 = Math_fround($10_1 + HEAPF32[$0_1 + 24 >> 2]);
         $16_1 = HEAPF32[$0_1 + 12 >> 2];
         $11_1 = Math_fround($16_1 + HEAPF32[$0_1 + 20 >> 2]);
         break label$10;
        case 1:
         $8 = HEAPF32[$0_1 + 428 >> 2];
         $11_1 = HEAPF32[$0_1 + 424 >> 2];
         $10_1 = HEAPF32[$0_1 + 420 >> 2];
         $16_1 = HEAPF32[$0_1 + 416 >> 2];
         break label$10;
        case 2:
         $8 = HEAPF32[$0_1 + 444 >> 2];
         $11_1 = HEAPF32[$0_1 + 440 >> 2];
         $10_1 = HEAPF32[$0_1 + 436 >> 2];
         $16_1 = HEAPF32[$0_1 + 432 >> 2];
         break label$10;
        case 3:
         $8 = HEAPF32[$0_1 + 460 >> 2];
         $11_1 = HEAPF32[$0_1 + 456 >> 2];
         $10_1 = HEAPF32[$0_1 + 452 >> 2];
         $16_1 = HEAPF32[$0_1 + 448 >> 2];
         break label$10;
        case 4:
         $8 = HEAPF32[$0_1 + 476 >> 2];
         $11_1 = HEAPF32[$0_1 + 472 >> 2];
         $10_1 = HEAPF32[$0_1 + 468 >> 2];
         $16_1 = HEAPF32[$0_1 + 464 >> 2];
         break label$10;
        case 5:
         $10_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 436 >> 2] - HEAPF32[$0_1 + 92 >> 2]) + HEAPF32[$0_1 - -64 >> 2]);
         $8 = Math_fround($10_1 + HEAPF32[$0_1 + 40 >> 2]);
         $16_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 432 >> 2] - HEAPF32[$0_1 + 88 >> 2]) + HEAPF32[$0_1 + 60 >> 2]);
         $11_1 = Math_fround($16_1 + HEAPF32[$0_1 + 36 >> 2]);
         break label$10;
        case 6:
         $10_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 436 >> 2] - HEAPF32[$0_1 + 92 >> 2]) + HEAPF32[$0_1 - -64 >> 2]);
         $8 = Math_fround($10_1 + HEAPF32[$0_1 + 48 >> 2]);
         $16_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 432 >> 2] - HEAPF32[$0_1 + 88 >> 2]) + HEAPF32[$0_1 + 60 >> 2]);
         $11_1 = Math_fround($16_1 + HEAPF32[$0_1 + 44 >> 2]);
         break label$10;
        case 7:
         break label$11;
        default:
         break label$10;
        };
       }
       $8 = HEAPF32[$0_1 + 524 >> 2];
       $11_1 = HEAPF32[$0_1 + 520 >> 2];
       $10_1 = HEAPF32[$0_1 + 516 >> 2];
       $16_1 = HEAPF32[$0_1 + 512 >> 2];
      }
      HEAPF64[$2_1 >> 3] = $11_1;
      HEAPF64[$5_1 >> 3] = $8;
      HEAPF64[$6_1 >> 3] = Math_fround($11_1 - $16_1);
      HEAPF64[$9 >> 3] = Math_fround($8 - $10_1);
      HEAP32[$13 >> 2] = HEAP32[($3 + 1152 | 0) + ($1_1 << 2) >> 2];
      HEAPF64[$3 + 784 >> 3] = $16_1;
      HEAPF64[$3 + 792 >> 3] = $10_1;
      $557(5903, $3 + 784 | 0);
      $0_1 = $1_1 + 1 | 0;
      $1_1 = $0_1;
      if (($1_1 | 0) != 8) {
       continue
      }
      break;
     };
     $1_1 = HEAP32[18392];
     $0_1 = HEAP32[$1_1 + 7080 >> 2];
     HEAP8[$0_1 + 140 | 0] = 1;
     $2_1 = $0_1 + 272 | 0;
     $8 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 + 5524 >> 2]);
     HEAPF32[$2_1 >> 2] = $8;
     HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    }
    $2_1 = $7_1 + 12259 | 0;
    $583(5166, $2_1);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    if (!HEAPU8[$0_1 + 143 | 0]) {
     $8 = HEAPF32[$1_1 + 5492 >> 2];
     HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
     $5_1 = $0_1 + 256 | 0;
     $6_1 = HEAP32[$5_1 + 4 >> 2];
     $9 = $0_1 + 248 | 0;
     HEAP32[$9 >> 2] = HEAP32[$5_1 >> 2];
     HEAP32[$9 + 4 >> 2] = $6_1;
     HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
     HEAPF32[$0_1 + 208 >> 2] = $8 + HEAPF32[$0_1 + 216 >> 2];
    }
    HEAPF32[$1_1 + 7224 >> 2] = HEAPF32[$1_1 + 6468 >> 2] * Math_fround(12.0);
    HEAP32[$1_1 + 7220 >> 2] = HEAP32[$1_1 + 7220 >> 2] | 1;
    $0_1 = $602(10905, $37, $3 + 1088 | 0, 13, 13) | HEAPU8[$2_1 | 0];
    HEAP8[$2_1 | 0] = $0_1;
    if (!(!($0_1 & 255) | !HEAP32[$7_1 + 7508 >> 2] | HEAP32[$7_1 + 8068 >> 2] <= 0)) {
     $0_1 = $3 + 640 | 0;
     $9 = $0_1 + 48 | 0;
     $13 = $3 + 692 | 0;
     $15_1 = $0_1 + 16 | 0;
     $17_1 = $0_1 + 24 | 0;
     $20_1 = $0_1 + 32 | 0;
     $22_1 = $0_1 + 40 | 0;
     $0_1 = 0;
     while (1) {
      $2_1 = $0_1;
      $0_1 = HEAP32[(HEAP32[$7_1 + 8076 >> 2] + ($0_1 << 3) | 0) + 4 >> 2];
      label$22 : {
       if (($0_1 | 0) == -1) {
        break label$22
       }
       $1_1 = HEAP32[$7_1 + 8064 >> 2];
       if (!$1_1) {
        break label$22
       }
       $5_1 = $1_1 + Math_imul($0_1, 456) | 0;
       if (HEAP32[$5_1 + 80 >> 2] < (HEAP32[$7_1 + 6984 >> 2] - 1 | 0)) {
        break label$22
       }
       $0_1 = HEAP32[$5_1 + 356 >> 2];
       $1_1 = HEAP32[$7_1 + 7508 >> 2];
       if (($0_1 | 0) != ($1_1 | 0) & ($1_1 | 0) != HEAP32[$5_1 + 360 >> 2]) {
        break label$22
       }
       $1_1 = HEAP32[$5_1 + 84 >> 2];
       $6_1 = HEAP32[$5_1 >> 2];
       HEAP32[$3 + 776 >> 2] = HEAP32[$0_1 >> 2];
       HEAP32[$3 + 772 >> 2] = $1_1;
       HEAP32[$3 + 768 >> 2] = $6_1;
       $567(18663, $3 + 768 | 0);
       if ($89(0)) {
        $0_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
        $8 = HEAPF32[$5_1 + 212 >> 2];
        HEAPF32[$3 + 964 >> 2] = HEAPF32[$5_1 + 216 >> 2] + Math_fround(-1.0);
        HEAPF32[$3 + 960 >> 2] = $8 + Math_fround(-1.0);
        $8 = HEAPF32[$5_1 + 220 >> 2];
        HEAPF32[$3 + 948 >> 2] = HEAPF32[$5_1 + 224 >> 2] + Math_fround(1.0);
        HEAPF32[$3 + 944 >> 2] = $8 + Math_fround(1.0);
        $400($0_1, $3 + 960 | 0, $3 + 944 | 0, -16711681, Math_fround(0.0), 0, Math_fround(2.0));
       }
       $6_1 = $5_1 + 84 | 0;
       $1_1 = HEAP32[18392];
       $0_1 = HEAP32[$1_1 + 7080 >> 2];
       HEAP8[$0_1 + 140 | 0] = 1;
       $10_1 = HEAPF32[$1_1 + 5524 >> 2];
       $1_1 = $0_1 + 272 | 0;
       $8 = Math_fround($10_1 + HEAPF32[$1_1 >> 2]);
       HEAPF32[$1_1 >> 2] = $8;
       HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
       $0_1 = 0;
       while (1) {
        $1_1 = $0_1;
        label$26 : {
         if ($1_1 >>> 0 >= 6) {
          label$28 : {
           switch ($1_1 - 6 | 0) {
           case 0:
           case 2:
            break label$28;
           default:
            break label$26;
           };
          }
          if (HEAP32[$6_1 >> 2] <= 0) {
           break label$26
          }
          $25_1 = ($3 + 1088 | 0) + ($1_1 << 2) | 0;
          $0_1 = 0;
          while (1) {
           $351($3 + 944 | 0, $5_1, $1_1, $0_1);
           $26_1 = HEAP32[$25_1 >> 2];
           HEAP32[$9 >> 2] = $0_1;
           HEAP32[$13 >> 2] = $26_1;
           $8 = HEAPF32[$3 + 952 >> 2];
           HEAPF64[$15_1 >> 3] = $8;
           $10_1 = HEAPF32[$3 + 956 >> 2];
           HEAPF64[$17_1 >> 3] = $10_1;
           $11_1 = HEAPF32[$3 + 944 >> 2];
           HEAPF64[$20_1 >> 3] = Math_fround($8 - $11_1);
           $14 = $10_1;
           $10_1 = HEAPF32[$3 + 948 >> 2];
           HEAPF64[$22_1 >> 3] = Math_fround($14 - $10_1);
           HEAPF64[$3 + 640 >> 3] = $11_1;
           HEAPF64[$3 + 648 >> 3] = $10_1;
           $26_1 = $3 + 960 | 0;
           $21($26_1, 128, 5703, $3 + 640 | 0);
           HEAP32[$3 + 936 >> 2] = 0;
           HEAP32[$3 + 940 >> 2] = 0;
           $601($26_1, 0, 0, $3 + 936 | 0);
           if ($89(0)) {
            $26_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
            HEAPF32[$3 + 940 >> 2] = $10_1 + Math_fround(-1.0);
            HEAPF32[$3 + 936 >> 2] = $11_1 + Math_fround(-1.0);
            HEAPF32[$3 + 932 >> 2] = HEAPF32[$3 + 956 >> 2] + Math_fround(1.0);
            HEAPF32[$3 + 928 >> 2] = $8 + Math_fround(1.0);
            $400($26_1, $3 + 936 | 0, $3 + 928 | 0, -16711681, Math_fround(0.0), 0, Math_fround(2.0));
           }
           $0_1 = $0_1 + 1 | 0;
           if (($0_1 | 0) < HEAP32[$6_1 >> 2]) {
            continue
           }
           break;
          };
          break label$26;
         }
         $351($3 + 944 | 0, $5_1, $1_1, -1);
         $0_1 = $3 + 704 | 0;
         $8 = HEAPF32[$3 + 952 >> 2];
         HEAPF64[$0_1 + 16 >> 3] = $8;
         $10_1 = HEAPF32[$3 + 956 >> 2];
         HEAPF64[$0_1 + 24 >> 3] = $10_1;
         HEAP32[$0_1 + 48 >> 2] = HEAP32[($3 + 1088 | 0) + ($1_1 << 2) >> 2];
         $11_1 = HEAPF32[$3 + 944 >> 2];
         HEAPF64[$0_1 + 32 >> 3] = Math_fround($8 - $11_1);
         $14 = $10_1;
         $10_1 = HEAPF32[$3 + 948 >> 2];
         HEAPF64[$0_1 + 40 >> 3] = Math_fround($14 - $10_1);
         HEAPF64[$3 + 704 >> 3] = $11_1;
         HEAPF64[$3 + 712 >> 3] = $10_1;
         $25_1 = $3 + 960 | 0;
         $21($25_1, 128, 5903, $0_1);
         HEAP32[$3 + 936 >> 2] = 0;
         HEAP32[$3 + 940 >> 2] = 0;
         $601($25_1, 0, 0, $3 + 936 | 0);
         if (!$89(0)) {
          break label$26
         }
         $0_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
         HEAPF32[$3 + 940 >> 2] = $10_1 + Math_fround(-1.0);
         HEAPF32[$3 + 936 >> 2] = $11_1 + Math_fround(-1.0);
         HEAPF32[$3 + 932 >> 2] = HEAPF32[$3 + 956 >> 2] + Math_fround(1.0);
         HEAPF32[$3 + 928 >> 2] = $8 + Math_fround(1.0);
         $400($0_1, $3 + 936 | 0, $3 + 928 | 0, -16711681, Math_fround(0.0), 0, Math_fround(2.0));
        }
        $0_1 = $1_1 + 1 | 0;
        if (($0_1 | 0) != 13) {
         continue
        }
        break;
       };
       $1_1 = HEAP32[18392];
       $0_1 = HEAP32[$1_1 + 7080 >> 2];
       HEAP8[$0_1 + 140 | 0] = 1;
       $5_1 = $0_1 + 272 | 0;
       $8 = Math_fround(HEAPF32[$5_1 >> 2] - HEAPF32[$1_1 + 5524 >> 2]);
       HEAPF32[$5_1 >> 2] = $8;
       HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
      }
      $0_1 = $2_1 + 1 | 0;
      if (($0_1 | 0) < HEAP32[$7_1 + 8068 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAP32[$3 + 960 >> 2] = 0;
    HEAP32[$3 + 964 >> 2] = 0;
    if ($571(17668, $3 + 960 | 0)) {
     HEAP8[HEAP32[18392] + 12248 | 0] = 1
    }
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    if (!HEAPU8[$0_1 + 143 | 0]) {
     $8 = HEAPF32[$1_1 + 5492 >> 2];
     HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
     $1_1 = $0_1 + 256 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = $0_1 + 248 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
     HEAPF32[$0_1 + 208 >> 2] = $8 + HEAPF32[$0_1 + 216 >> 2];
    }
    $350(17006);
    $716();
   }
   HEAP32[$3 + 624 >> 2] = HEAP32[$7_1 + 7008 >> 2];
   if ($706(3956, 18413, $3 + 624 | 0)) {
    HEAP32[$3 + 612 >> 2] = HEAP32[$7_1 + 7008 >> 2];
    HEAP32[$3 + 608 >> 2] = 6342;
    if ($706(6342, 18512, $3 + 608 | 0)) {
     $0_1 = HEAP32[$7_1 + 7008 >> 2];
     if (($0_1 | 0) > 0) {
      while (1) {
       $1_1 = $0_1;
       $0_1 = $1_1 - 1 | 0;
       $2_1 = $0_1 << 2;
       $265(HEAP32[$2_1 + HEAP32[$7_1 + 7016 >> 2] >> 2]);
       $352(HEAP32[$2_1 + HEAP32[$7_1 + 7016 >> 2] >> 2], 1800);
       $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
       HEAP32[$2_1 + 196 >> 2] = HEAP32[$2_1 + 196 >> 2] - 1;
       if (($1_1 | 0) > 1) {
        continue
       }
       break;
      }
     }
     $716();
    }
    HEAP32[$3 + 596 >> 2] = HEAP32[$7_1 + 7020 >> 2];
    HEAP32[$3 + 592 >> 2] = 17764;
    if ($706(17764, 18512, $3 + 592 | 0)) {
     $0_1 = HEAP32[$7_1 + 7020 >> 2];
     if (($0_1 | 0) > 0) {
      while (1) {
       $1_1 = $0_1;
       $0_1 = $1_1 - 1 | 0;
       $2_1 = $0_1 << 2;
       $265(HEAP32[$2_1 + HEAP32[$7_1 + 7028 >> 2] >> 2]);
       $352(HEAP32[$2_1 + HEAP32[$7_1 + 7028 >> 2] >> 2], 1800);
       $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
       HEAP32[$2_1 + 196 >> 2] = HEAP32[$2_1 + 196 >> 2] - 1;
       if (($1_1 | 0) > 1) {
        continue
       }
       break;
      }
     }
     $716();
    }
    if ($709(17975)) {
     $0_1 = HEAP32[$7_1 + 7036 >> 2];
     label$41 : {
      if (($0_1 | 0) >= 0) {
       break label$41
      }
      $1_1 = $0_1 + (($0_1 | 0) / 2 | 0) | 0;
      $1_1 = ($1_1 | 0) > 0 ? $1_1 : 0;
      if (($0_1 | 0) >= ($1_1 | 0)) {
       break label$41
      }
      $0_1 = HEAP32[18392];
      if ($0_1) {
       $0_1 = $0_1 + 876 | 0;
       HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] + 1;
      }
      $0_1 = FUNCTION_TABLE[HEAP32[18314]]($1_1 << 2, HEAP32[18394]) | 0;
      $2_1 = HEAP32[$7_1 + 7040 >> 2];
      if ($2_1) {
       $1602($0_1, $2_1, HEAP32[$7_1 + 7032 >> 2] << 2);
       $2_1 = HEAP32[$7_1 + 7040 >> 2];
       label$44 : {
        if (!$2_1) {
         break label$44
        }
        $5_1 = HEAP32[18392];
        if (!$5_1) {
         break label$44
        }
        $5_1 = $5_1 + 876 | 0;
        HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] - 1;
       }
       FUNCTION_TABLE[HEAP32[18315]]($2_1, HEAP32[18394]);
      }
      HEAP32[$7_1 + 7036 >> 2] = $1_1;
      HEAP32[$7_1 + 7040 >> 2] = $0_1;
     }
     HEAP32[$7_1 + 7032 >> 2] = 0;
     if (HEAP32[$7_1 + 7008 >> 2] > 0) {
      $0_1 = 0;
      while (1) {
       $5_1 = HEAP32[$7_1 + 7016 >> 2] + ($0_1 << 2) | 0;
       if (HEAP32[$7_1 + 6984 >> 2] <= (HEAP32[HEAP32[$5_1 >> 2] + 536 >> 2] + 1 | 0)) {
        $2_1 = HEAP32[$7_1 + 7032 >> 2];
        $1_1 = HEAP32[$7_1 + 7036 >> 2];
        label$48 : {
         if (($2_1 | 0) != ($1_1 | 0)) {
          break label$48
         }
         $6_1 = $1_1 ? $1_1 + (($1_1 | 0) / 2 | 0) | 0 : 8;
         $2_1 = $2_1 + 1 | 0;
         $2_1 = ($2_1 | 0) < ($6_1 | 0) ? $6_1 : $2_1;
         if (($1_1 | 0) >= ($2_1 | 0)) {
          break label$48
         }
         $1_1 = HEAP32[18392];
         if ($1_1) {
          $1_1 = $1_1 + 876 | 0;
          HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
         }
         $1_1 = FUNCTION_TABLE[HEAP32[18314]]($2_1 << 2, HEAP32[18394]) | 0;
         $6_1 = HEAP32[$7_1 + 7040 >> 2];
         if ($6_1) {
          $1602($1_1, $6_1, HEAP32[$7_1 + 7032 >> 2] << 2);
          $6_1 = HEAP32[$7_1 + 7040 >> 2];
          label$53 : {
           if (!$6_1) {
            break label$53
           }
           $9 = HEAP32[18392];
           if (!$9) {
            break label$53
           }
           $9 = $9 + 876 | 0;
           HEAP32[$9 >> 2] = HEAP32[$9 >> 2] - 1;
          }
          FUNCTION_TABLE[HEAP32[18315]]($6_1, HEAP32[18394]);
         }
         HEAP32[$7_1 + 7036 >> 2] = $2_1;
         HEAP32[$7_1 + 7040 >> 2] = $1_1;
        }
        HEAP32[HEAP32[$7_1 + 7040 >> 2] + (HEAP32[$7_1 + 7032 >> 2] << 2) >> 2] = HEAP32[$5_1 >> 2];
        HEAP32[$7_1 + 7032 >> 2] = HEAP32[$7_1 + 7032 >> 2] + 1;
       }
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) < HEAP32[$7_1 + 7008 >> 2]) {
        continue
       }
       break;
      };
     }
     $0_1 = HEAP32[$7_1 + 7032 >> 2];
     if ($0_1 >>> 0 >= 2) {
      $1685(HEAP32[$7_1 + 7040 >> 2], $0_1, 4, 10)
     }
     $354(HEAP32[$7_1 + 7040 >> 2], HEAP32[$7_1 + 7032 >> 2], 0);
     $716();
    }
    $716();
   }
   $9 = HEAP32[$7_1 + 7496 >> 2];
   label$55 : {
    if (($9 | 0) <= 0) {
     $0_1 = 0;
     break label$55;
    }
    $13 = HEAP32[$7_1 + 7504 >> 2];
    $0_1 = 0;
    $1_1 = 0;
    while (1) {
     $5_1 = $1_1;
     $15_1 = HEAP32[$13 + ($1_1 << 2) >> 2] + 96 | 0;
     $1_1 = 0;
     $6_1 = 0;
     while (1) {
      $2_1 = $1_1;
      $1_1 = $1_1 + 1 | 0;
      $6_1 = HEAP32[$15_1 + Math_imul($2_1, 12) >> 2] + $6_1 | 0;
      if (!$2_1) {
       continue
      }
      break;
     };
     $0_1 = $0_1 + $6_1 | 0;
     $1_1 = $5_1 + 1 | 0;
     if (($9 | 0) != ($1_1 | 0)) {
      continue
     }
     break;
    };
   }
   HEAP32[$3 + 576 >> 2] = $0_1;
   if ($706(4149, 18426, $3 + 576 | 0)) {
    $583(8966, $7_1 + 12260 | 0);
    $583(8922, $7_1 + 12261 | 0);
    if (HEAP32[$7_1 + 7496 >> 2] > 0) {
     $0_1 = 0;
     while (1) {
      $2_1 = $0_1;
      $6_1 = HEAP32[HEAP32[$7_1 + 7504 >> 2] + ($0_1 << 2) >> 2] + 96 | 0;
      $0_1 = 0;
      while (1) {
       $1_1 = $0_1;
       $5_1 = $6_1 + Math_imul($1_1, 12) | 0;
       if (HEAP32[$5_1 >> 2] > 0) {
        $9 = $5_1 + 8 | 0;
        $0_1 = 0;
        while (1) {
         $355(0, HEAP32[HEAP32[$9 >> 2] + ($0_1 << 2) >> 2]);
         $0_1 = $0_1 + 1 | 0;
         if (($0_1 | 0) < HEAP32[$5_1 >> 2]) {
          continue
         }
         break;
        };
       }
       $0_1 = $1_1 + 1 | 0;
       if (!$1_1) {
        continue
       }
       break;
      };
      $0_1 = $2_1 + 1 | 0;
      if (($0_1 | 0) < HEAP32[$7_1 + 7496 >> 2]) {
       continue
      }
      break;
     };
    }
    $716();
   }
   HEAP32[$3 + 560 >> 2] = HEAP32[$7_1 + 7496 >> 2];
   if ($706(4159, 18441, $3 + 560 | 0)) {
    $8 = $717();
    $17_1 = HEAP32[18392];
    $15_1 = HEAP32[$17_1 + 7080 >> 2];
    HEAP8[$15_1 + 140 | 0] = 1;
    $0_1 = $15_1 + 272 | 0;
    $8 = Math_fround(($8 == Math_fround(0.0) ? HEAPF32[$17_1 + 5524 >> 2] : $8) + HEAPF32[$0_1 >> 2]);
    HEAPF32[$0_1 >> 2] = $8;
    $18_1 = Math_fround(Math_fround($8 + HEAPF32[$15_1 + 12 >> 2]) + HEAPF32[$15_1 + 276 >> 2]);
    HEAPF32[$15_1 + 208 >> 2] = $18_1;
    $2_1 = HEAP32[$17_1 + 7496 >> 2];
    label$67 : {
     if (($2_1 | 0) <= 0) {
      $11_1 = Math_fround(3402823466385288598117041.0e14);
      $8 = Math_fround(3402823466385288598117041.0e14);
      $16_1 = Math_fround(-3402823466385288598117041.0e14);
      $10_1 = Math_fround(-3402823466385288598117041.0e14);
      break label$67;
     }
     $5_1 = HEAP32[$17_1 + 7504 >> 2];
     $0_1 = 0;
     $10_1 = Math_fround(-3402823466385288598117041.0e14);
     $16_1 = Math_fround(-3402823466385288598117041.0e14);
     $8 = Math_fround(3402823466385288598117041.0e14);
     $11_1 = Math_fround(3402823466385288598117041.0e14);
     while (1) {
      $1_1 = HEAP32[$5_1 + ($0_1 << 2) >> 2];
      $4_1 = HEAPF32[$1_1 + 4 >> 2];
      $11_1 = $4_1 < $11_1 ? $4_1 : $11_1;
      $14 = HEAPF32[$1_1 + 8 >> 2];
      $8 = $8 > $14 ? $14 : $8;
      $4_1 = Math_fround($4_1 + HEAPF32[$1_1 + 12 >> 2]);
      $16_1 = $4_1 > $16_1 ? $4_1 : $16_1;
      $4_1 = Math_fround($14 + HEAPF32[$1_1 + 16 >> 2]);
      $10_1 = $4_1 > $10_1 ? $4_1 : $10_1;
      $0_1 = $0_1 + 1 | 0;
      if (($2_1 | 0) != ($0_1 | 0)) {
       continue
      }
      break;
     };
    }
    if (($2_1 | 0) > 0) {
     $48_1 = Math_fround(HEAPF32[$15_1 + 212 >> 2] - Math_fround($8 * Math_fround(.125)));
     $49 = Math_fround($18_1 - Math_fround($11_1 * Math_fround(.125)));
     $0_1 = 0;
     while (1) {
      $1_1 = HEAP32[HEAP32[$17_1 + 7504 >> 2] + ($0_1 << 2) >> 2];
      $14 = HEAPF32[$1_1 + 12 >> 2];
      $18_1 = HEAPF32[$1_1 + 16 >> 2];
      $4_1 = HEAPF32[$1_1 + 4 >> 2];
      $23_1 = HEAPF32[$1_1 + 8 >> 2];
      HEAPF32[$3 + 964 >> 2] = $48_1 + Math_fround($23_1 * Math_fround(.125));
      HEAPF32[$3 + 960 >> 2] = $49 + Math_fround($4_1 * Math_fround(.125));
      HEAPF32[$3 + 972 >> 2] = $48_1 + Math_fround(Math_fround($23_1 + $18_1) * Math_fround(.125));
      HEAPF32[$3 + 968 >> 2] = $49 + Math_fround(Math_fround($4_1 + $14) * Math_fround(.125));
      $25_1 = HEAP32[$15_1 + 580 >> 2];
      $9 = $3 + 960 | 0;
      $6_1 = global$0 - 32 | 0;
      global$0 = $6_1;
      $13 = HEAP32[18392];
      $4_1 = Math_fround(HEAPF32[$13 + 5708 >> 2] * Math_fround(HEAPF32[$13 + 5416 >> 2] * Math_fround(.4000000059604645)));
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$1 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$4_1;
        break label$1;
       }
       $2_1 = -2147483648;
      }
      $4_1 = HEAPF32[$13 + 5700 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$3 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $12_1 = ~~$4_1;
        break label$3;
       }
       $12_1 = -2147483648;
      }
      $5_1 = $12_1 << 8;
      $2_1 = $2_1 << 24;
      $4_1 = HEAPF32[$13 + 5696 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$5 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $12_1 = ~~$4_1;
        break label$5;
       }
       $12_1 = -2147483648;
      }
      $5_1 = $12_1 | $5_1;
      $23_1 = HEAPF32[$1_1 + 8 >> 2];
      $28_1 = HEAPF32[$1_1 + 16 >> 2];
      $24 = HEAPF32[$9 + 12 >> 2];
      $32_1 = HEAPF32[$1_1 + 4 >> 2];
      $27_1 = HEAPF32[$1_1 + 12 >> 2];
      $4_1 = HEAPF32[$9 >> 2];
      $33_1 = HEAPF32[$9 + 8 >> 2];
      $14 = HEAPF32[$9 + 4 >> 2];
      $20_1 = HEAP32[$13 + 7080 >> 2];
      $12_1 = HEAP32[$20_1 + 580 >> 2];
      $26_1 = $9 + 8 | 0;
      $18_1 = HEAPF32[$13 + 5704 >> 2];
      $18_1 = Math_fround(Math_fround(($18_1 < Math_fround(0.0) ? Math_fround(0.0) : $18_1 > Math_fround(1.0) ? Math_fround(1.0) : $18_1) * Math_fround(255.0)) + Math_fround(.5));
      label$7 : {
       if (Math_fround(Math_abs($18_1)) < Math_fround(2147483648.0)) {
        $1_1 = ~~$18_1;
        break label$7;
       }
       $1_1 = -2147483648;
      }
      $401($12_1, $9, $26_1, $2_1 | ($5_1 | $1_1 << 16), Math_fround(0.0), 0);
      if (HEAP32[$13 + 7008 >> 2]) {
       $34_1 = Math_fround(Math_fround($24 - $14) / $28_1);
       $41_1 = Math_fround($14 - Math_fround($34_1 * $23_1));
       $23_1 = Math_fround(Math_fround($33_1 - $4_1) / $27_1);
       $28_1 = Math_fround($4_1 - Math_fround($23_1 * $32_1));
       $42_1 = $6_1 + 8 | 0;
       $22_1 = $6_1 + 24 | 0;
       $1_1 = 0;
       while (1) {
        $5_1 = $1_1;
        $1_1 = HEAP32[HEAP32[$13 + 7016 >> 2] + ($1_1 << 2) >> 2];
        if (!(!HEAPU8[$1_1 + 139 | 0] | HEAP8[$1_1 + 11 | 0] & 1)) {
         $18_1 = HEAPF32[$1_1 + 24 >> 2];
         $4_1 = HEAPF32[$1_1 + 16 >> 2];
         $14 = HEAPF32[$1_1 + 12 >> 2];
         $29_1 = Math_fround($14 + HEAPF32[$1_1 + 20 >> 2]);
         HEAPF32[$6_1 + 24 >> 2] = $29_1;
         HEAPF32[$6_1 + 20 >> 2] = $4_1;
         HEAPF32[$6_1 + 16 >> 2] = $14;
         HEAPF32[$6_1 + 28 >> 2] = $4_1 + $18_1;
         label$121 : {
          if (HEAP8[$1_1 + 8 | 0] & 1) {
           break label$121
          }
         }
         $18_1 = HEAPF32[$1_1 + 28 >> 2];
         $35_1 = HEAPF32[$1_1 + 12 >> 2];
         $2_1 = HEAP32[$1_1 + 16 >> 2];
         HEAP32[$6_1 >> 2] = HEAP32[$1_1 + 12 >> 2];
         HEAP32[$6_1 + 4 >> 2] = $2_1;
         $24 = Math_fround($41_1 + Math_fround($34_1 * HEAPF32[$6_1 + 4 >> 2]));
         label$132 : {
          if (Math_fround(Math_abs($24)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$24;
           break label$132;
          }
          $2_1 = -2147483648;
         }
         $24 = Math_fround($2_1 | 0);
         HEAPF32[$6_1 + 4 >> 2] = $24;
         $32_1 = Math_fround($24 + Math_fround(5.0));
         HEAPF32[$6_1 + 12 >> 2] = $32_1;
         $27_1 = Math_fround($41_1 + Math_fround($34_1 * HEAPF32[$6_1 + 28 >> 2]));
         label$153 : {
          if (Math_fround(Math_abs($27_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$27_1;
           break label$153;
          }
          $2_1 = -2147483648;
         }
         $27_1 = Math_fround($2_1 | 0);
         HEAPF32[$6_1 + 28 >> 2] = $27_1;
         $4_1 = Math_fround($41_1 + Math_fround($34_1 * $4_1));
         label$174 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$174;
          }
          $2_1 = -2147483648;
         }
         $33_1 = Math_fround($2_1 | 0);
         HEAPF32[$6_1 + 20 >> 2] = $33_1;
         $4_1 = Math_fround($28_1 + Math_fround($23_1 * Math_fround($35_1 + $18_1)));
         label$19 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$19;
          }
          $2_1 = -2147483648;
         }
         $35_1 = Math_fround($2_1 | 0);
         HEAPF32[$6_1 + 8 >> 2] = $35_1;
         $4_1 = Math_fround($28_1 + Math_fround($23_1 * HEAPF32[$6_1 >> 2]));
         label$215 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$215;
          }
          $2_1 = -2147483648;
         }
         $39_1 = Math_fround($2_1 | 0);
         HEAPF32[$6_1 >> 2] = $39_1;
         $4_1 = Math_fround($28_1 + Math_fround($23_1 * $29_1));
         label$23 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$23;
          }
          $2_1 = -2147483648;
         }
         $29_1 = Math_fround($2_1 | 0);
         HEAPF32[$6_1 + 24 >> 2] = $29_1;
         $4_1 = Math_fround($28_1 + Math_fround($23_1 * $14));
         label$256 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$256;
          }
          $2_1 = -2147483648;
         }
         $40_1 = Math_fround($2_1 | 0);
         HEAPF32[$6_1 + 16 >> 2] = $40_1;
         $4_1 = HEAPF32[$9 + 4 >> 2];
         $50_1 = HEAPF32[$9 + 12 >> 2];
         $14 = HEAPF32[$9 >> 2];
         $18_1 = HEAPF32[$9 + 8 >> 2];
         HEAPF32[$6_1 + 16 >> 2] = $14 > $40_1 ? $14 : $18_1 < $40_1 ? $18_1 : $40_1;
         HEAPF32[$6_1 + 24 >> 2] = $14 > $29_1 ? $14 : $18_1 < $29_1 ? $18_1 : $29_1;
         HEAPF32[$6_1 >> 2] = $14 > $39_1 ? $14 : $18_1 < $39_1 ? $18_1 : $39_1;
         HEAPF32[$6_1 + 8 >> 2] = $14 > $35_1 ? $14 : $18_1 < $35_1 ? $18_1 : $35_1;
         $14 = $50_1;
         HEAPF32[$6_1 + 20 >> 2] = $4_1 > $33_1 ? $4_1 : $14 < $33_1 ? $14 : $33_1;
         HEAPF32[$6_1 + 28 >> 2] = $4_1 > $27_1 ? $4_1 : $14 < $27_1 ? $14 : $27_1;
         HEAPF32[$6_1 + 4 >> 2] = $4_1 > $24 ? $4_1 : $14 < $24 ? $14 : $24;
         HEAPF32[$6_1 + 12 >> 2] = $4_1 > $32_1 ? $4_1 : $14 < $32_1 ? $14 : $32_1;
         $2_1 = HEAP32[$13 + 7508 >> 2];
         if ($2_1) {
          $12_1 = HEAP32[$1_1 + 744 >> 2] == HEAP32[$2_1 + 744 >> 2]
         } else {
          $12_1 = 0
         }
         $2_1 = HEAP32[18392];
         $4_1 = HEAPF32[$2_1 + 5652 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$297 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $19 = ~~$4_1;
           break label$297;
          }
          $19 = -2147483648;
         }
         $19 = $19 << 8;
         $4_1 = HEAPF32[$2_1 + 5648 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$31 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $21_1 = ~~$4_1;
           break label$31;
          }
          $21_1 = -2147483648;
         }
         $19 = $21_1 | $19;
         $4_1 = HEAPF32[$2_1 + 5656 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$33 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $21_1 = ~~$4_1;
           break label$33;
          }
          $21_1 = -2147483648;
         }
         $19 = $19 | $21_1 << 16;
         $21_1 = HEAP32[$20_1 + 580 >> 2];
         $30 = $6_1 + 16 | 0;
         $4_1 = Math_fround(HEAPF32[$2_1 + 5660 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$35 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$35;
          }
          $2_1 = -2147483648;
         }
         $401($21_1, $30, $22_1, $19 | $2_1 << 24, Math_fround(0.0), 0);
         $19 = HEAP32[18392];
         $2_1 = ($19 + 5416 | 0) + ($12_1 ? 176 : 160) | 0;
         $4_1 = HEAPF32[$2_1 + 204 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$37 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $12_1 = ~~$4_1;
           break label$37;
          }
          $12_1 = -2147483648;
         }
         $12_1 = $12_1 << 8;
         $4_1 = HEAPF32[$2_1 + 200 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$398 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $21_1 = ~~$4_1;
           break label$398;
          }
          $21_1 = -2147483648;
         }
         $12_1 = $21_1 | $12_1;
         $4_1 = HEAPF32[$2_1 + 208 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$419 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $21_1 = ~~$4_1;
           break label$419;
          }
          $21_1 = -2147483648;
         }
         $12_1 = $12_1 | $21_1 << 16;
         $21_1 = HEAP32[$20_1 + 580 >> 2];
         $4_1 = Math_fround(HEAPF32[$2_1 + 212 >> 2] * HEAPF32[$19 + 5416 >> 2]);
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$43 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$43;
          }
          $2_1 = -2147483648;
         }
         $401($21_1, $6_1, $42_1, $12_1 | $2_1 << 24, Math_fround(0.0), 0);
         $2_1 = HEAP32[18392];
         $4_1 = HEAPF32[$2_1 + 5700 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$45 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $12_1 = ~~$4_1;
           break label$45;
          }
          $12_1 = -2147483648;
         }
         $12_1 = $12_1 << 8;
         $4_1 = HEAPF32[$2_1 + 5696 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$47 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $19 = ~~$4_1;
           break label$47;
          }
          $19 = -2147483648;
         }
         $12_1 = $19 | $12_1;
         $4_1 = HEAPF32[$2_1 + 5704 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$49 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $19 = ~~$4_1;
           break label$49;
          }
          $19 = -2147483648;
         }
         $12_1 = $12_1 | $19 << 16;
         $19 = HEAP32[$20_1 + 580 >> 2];
         $21_1 = $6_1 + 16 | 0;
         $4_1 = Math_fround(HEAPF32[$2_1 + 5708 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$51 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$51;
          }
          $2_1 = -2147483648;
         }
         $400($19, $21_1, $22_1, $12_1 | $2_1 << 24, Math_fround(0.0), 0, Math_fround(1.0));
         $2_1 = HEAP32[18392];
         $4_1 = HEAPF32[$2_1 + 5620 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$5310 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $12_1 = ~~$4_1;
           break label$5310;
          }
          $12_1 = -2147483648;
         }
         $12_1 = $12_1 << 8;
         $4_1 = HEAPF32[$2_1 + 5616 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$5511 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $19 = ~~$4_1;
           break label$5511;
          }
          $19 = -2147483648;
         }
         $12_1 = $19 | $12_1;
         $4_1 = HEAPF32[$2_1 + 5624 >> 2];
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$5712 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $19 = ~~$4_1;
           break label$5712;
          }
          $19 = -2147483648;
         }
         $12_1 = $12_1 | $19 << 16;
         $4_1 = Math_fround(HEAPF32[$2_1 + 5628 >> 2] * HEAPF32[$2_1 + 5416 >> 2]);
         $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
         label$59 : {
          if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
           $2_1 = ~~$4_1;
           break label$59;
          }
          $2_1 = -2147483648;
         }
         $12_1 = $12_1 | $2_1 << 24;
         $4_1 = HEAPF32[$13 + 6468 >> 2];
         $19 = HEAP32[$13 + 6464 >> 2];
         $43_1 = HEAP32[$20_1 + 580 >> 2];
         $21_1 = HEAP32[$1_1 >> 2];
         $1_1 = $21_1;
         $2_1 = $1_1;
         label$6113 : {
          if (($1_1 | 0) == -1) {
           break label$6113
          }
          while (1) {
           label$63 : {
            $2_1 = HEAPU8[$1_1 | 0];
            if (($2_1 | 0) != 35) {
             if ($2_1) {
              break label$63
             }
             $2_1 = $1_1;
             break label$6113;
            }
            if (HEAPU8[$1_1 + 1 | 0] != 35) {
             break label$63
            }
            $2_1 = $1_1;
            break label$6113;
           }
           $2_1 = -1;
           $1_1 = $1_1 + 1 | 0;
           if (($1_1 | 0) != -1) {
            continue
           }
           break;
          };
         }
         $413($43_1, $19, $4_1, $6_1, $12_1, $21_1, $2_1, Math_fround(0.0), 0);
        }
        $1_1 = $5_1 + 1 | 0;
        if (($1_1 | 0) != HEAP32[$13 + 7008 >> 2]) {
         continue
        }
        break;
       };
      }
      $1_1 = HEAP32[18392];
      $4_1 = HEAPF32[$1_1 + 5700 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$65 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $2_1 = ~~$4_1;
        break label$65;
       }
       $2_1 = -2147483648;
      }
      $2_1 = $2_1 << 8;
      $4_1 = HEAPF32[$1_1 + 5696 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$6715 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $12_1 = ~~$4_1;
        break label$6715;
       }
       $12_1 = -2147483648;
      }
      $2_1 = $12_1 | $2_1;
      $4_1 = HEAPF32[$1_1 + 5704 >> 2];
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$6916 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $12_1 = ~~$4_1;
        break label$6916;
       }
       $12_1 = -2147483648;
      }
      $2_1 = $2_1 | $12_1 << 16;
      $4_1 = Math_fround(HEAPF32[$1_1 + 5708 >> 2] * HEAPF32[$1_1 + 5416 >> 2]);
      $4_1 = Math_fround(Math_fround(($4_1 < Math_fround(0.0) ? Math_fround(0.0) : $4_1 > Math_fround(1.0) ? Math_fround(1.0) : $4_1) * Math_fround(255.0)) + Math_fround(.5));
      label$7117 : {
       if (Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0)) {
        $1_1 = ~~$4_1;
        break label$7117;
       }
       $1_1 = -2147483648;
      }
      $400($25_1, $9, $26_1, $2_1 | $1_1 << 24, Math_fround(0.0), 0, Math_fround(1.0));
      global$0 = $6_1 + 32 | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) < HEAP32[$17_1 + 7496 >> 2]) {
       continue
      }
      break;
     };
    }
    HEAPF32[$3 + 964 >> 2] = Math_fround($10_1 - $8) * Math_fround(.125);
    HEAPF32[$3 + 960 >> 2] = Math_fround($16_1 - $11_1) * Math_fround(.125);
    $590($3 + 960 | 0);
    $8 = $717();
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    $2_1 = $0_1 + 272 | 0;
    $8 = Math_fround(HEAPF32[$2_1 >> 2] - ($8 == Math_fround(0.0) ? HEAPF32[$1_1 + 5524 >> 2] : $8));
    HEAPF32[$2_1 >> 2] = $8;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    if (HEAP32[$7_1 + 7496 >> 2] > 0) {
     $0_1 = 0;
     while (1) {
      $1_1 = HEAP32[HEAP32[$7_1 + 7504 >> 2] + ($0_1 << 2) >> 2];
      $5_1 = global$0 - 96 | 0;
      global$0 = $5_1;
      $718(1, 2);
      HEAP32[$5_1 + 80 >> 2] = 0;
      if ($706(16634, 13e3, $5_1 + 80 | 0)) {
       $8 = HEAPF32[$1_1 + 8 >> 2];
       $11_1 = HEAPF32[$1_1 + 16 >> 2];
       $10_1 = HEAPF32[$1_1 + 124 >> 2];
       $16_1 = HEAPF32[$1_1 + 132 >> 2];
       $2_1 = HEAP32[$1_1 >> 2];
       $4_1 = HEAPF32[$1_1 + 4 >> 2];
       $14 = HEAPF32[$1_1 + 12 >> 2];
       $18_1 = HEAPF32[$1_1 + 120 >> 2];
       HEAPF64[$5_1 - -64 >> 3] = HEAPF32[$1_1 + 128 >> 2];
       HEAPF64[$5_1 + 48 >> 3] = $18_1;
       $6_1 = $5_1 + 16 | 0;
       HEAPF64[$6_1 + 16 >> 3] = $14;
       HEAPF64[$5_1 + 72 >> 3] = $16_1;
       HEAPF64[$5_1 + 56 >> 3] = $10_1;
       HEAPF64[$5_1 + 40 >> 3] = $11_1;
       HEAPF64[$5_1 + 16 >> 3] = $4_1;
       HEAPF64[$5_1 + 24 >> 3] = $8;
       $567(9913, $6_1);
       $6_1 = HEAP32[$1_1 >> 2];
       HEAP32[$5_1 + 12 >> 2] = $2_1 & 4 ? 6811 : 19354;
       HEAP32[$5_1 + 8 >> 2] = $2_1 & 2 ? 5953 : 19354;
       HEAP32[$5_1 + 4 >> 2] = $2_1 & 1 ? 1742 : 19354;
       HEAP32[$5_1 >> 2] = $6_1;
       $567(5450, $5_1);
       $9 = $1_1 + 96 | 0;
       $2_1 = 0;
       while (1) {
        $1_1 = $2_1;
        $6_1 = Math_imul($1_1, 12) + $9 | 0;
        if (HEAP32[$6_1 >> 2] > 0) {
         $13 = $6_1 + 8 | 0;
         $2_1 = 0;
         while (1) {
          $355(0, HEAP32[HEAP32[$13 >> 2] + ($2_1 << 2) >> 2]);
          $2_1 = $2_1 + 1 | 0;
          if (($2_1 | 0) < HEAP32[$6_1 >> 2]) {
           continue
          }
          break;
         };
        }
        $2_1 = $1_1 + 1 | 0;
        if (!$1_1) {
         continue
        }
        break;
       };
       $716();
      }
      global$0 = $5_1 + 96 | 0;
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) < HEAP32[$7_1 + 7496 >> 2]) {
       continue
      }
      break;
     };
    }
    $716();
   }
   HEAP32[$3 + 544 >> 2] = HEAP32[$7_1 + 7468 >> 2];
   if ($706(4375, 18488, $3 + 544 | 0)) {
    if (HEAP32[$7_1 + 7468 >> 2] > 0) {
     $0_1 = 0;
     while (1) {
      $2_1 = HEAP32[$7_1 + 7476 >> 2] + Math_imul($0_1, 36) | 0;
      $1_1 = HEAP32[$2_1 + 4 >> 2];
      if ($1_1) {
       $5_1 = HEAP32[$1_1 >> 2]
      } else {
       $5_1 = 14877
      }
      $2_1 = HEAP32[$2_1 >> 2];
      $6_1 = HEAPU8[$1_1 + 11 | 0];
      $9 = $1_1 ? ($6_1 & 16) >>> 4 | 0 : 0;
      HEAP32[$3 + 536 >> 2] = ($1_1 ? $6_1 & 1 : 0) ? 1780 : 19354;
      HEAP32[$3 + 532 >> 2] = $5_1;
      HEAP32[$3 + 528 >> 2] = $2_1;
      HEAP32[$3 + 540 >> 2] = $9 ? 1905 : 19354;
      $567(5517, $3 + 528 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) < HEAP32[$7_1 + 7468 >> 2]) {
       continue
      }
      break;
     };
    }
    $716();
   }
   HEAP32[$3 + 512 >> 2] = HEAP32[$7_1 + 8144 >> 2];
   if ($706(4367, 18474, $3 + 512 | 0)) {
    if (HEAP32[$7_1 + 8128 >> 2] > 0) {
     $0_1 = 0;
     while (1) {
      $1_1 = HEAP32[(HEAP32[$7_1 + 8136 >> 2] + ($0_1 << 3) | 0) + 4 >> 2];
      label$85 : {
       if (($1_1 | 0) == -1) {
        break label$85
       }
       $2_1 = HEAP32[$7_1 + 8124 >> 2];
       if (!$2_1) {
        break label$85
       }
       $5_1 = $2_1 + Math_imul($1_1, 144) | 0;
       $265($5_1);
       $1_1 = global$0 - 368 | 0;
       global$0 = $1_1;
       $13 = HEAP32[$5_1 + 36 >> 2];
       $2_1 = HEAP32[HEAP32[18392] + 6984 >> 2];
       $6_1 = HEAP32[$5_1 >> 2];
       $9 = HEAP32[$5_1 + 16 >> 2];
       HEAP32[$1_1 + 80 >> 2] = 6680;
       HEAP32[$1_1 + 84 >> 2] = $9;
       HEAP32[$1_1 + 88 >> 2] = $6_1;
       $17_1 = $2_1 - 2 | 0;
       $20_1 = ($17_1 | 0) > ($13 | 0);
       HEAP32[$1_1 + 92 >> 2] = $20_1 ? 17707 : 19354;
       $2_1 = $1_1 + 112 | 0;
       $6_1 = $21($2_1, 256, 5620, $1_1 + 80 | 0);
       $9 = $2_1 + $6_1 | 0;
       $9 = $21($9, 256 - $6_1 | 0, 19041, 0) + $9 | 0;
       $15_1 = $2_1 + 256 | 0;
       $2_1 = HEAP32[$5_1 >> 2];
       if (($2_1 | 0) > 0) {
        $6_1 = 0;
        while (1) {
         $2_1 = $6_1 ? 19147 : 19354;
         $22_1 = $15_1 - $9 | 0;
         $25_1 = HEAP32[(HEAP32[$5_1 + 8 >> 2] + Math_imul($6_1, 40) | 0) + 28 >> 2];
         if (($25_1 | 0) == -1) {
          $12_1 = 15508
         } else {
          $12_1 = $25_1 + HEAP32[$5_1 + 140 >> 2] | 0
         }
         HEAP32[$1_1 + 68 >> 2] = $12_1;
         HEAP32[$1_1 + 64 >> 2] = $2_1;
         $9 = $21($9, $22_1, 18702, $1_1 - -64 | 0) + $9 | 0;
         $6_1 = $6_1 + 1 | 0;
         $2_1 = HEAP32[$5_1 >> 2];
         if (($6_1 | 0) < ((($2_1 | 0) >= 3 ? 3 : $2_1) | 0)) {
          continue
         }
         break;
        };
       }
       $21($9, $15_1 - $9 | 0, ($2_1 | 0) > 3 ? 1051 : 19037, 0);
       if ($20_1) {
        $56(0, HEAP32[18392] + 5632 | 0)
       }
       HEAP32[$1_1 + 48 >> 2] = $1_1 + 112;
       $9 = $706(6680, 5950, $1_1 + 48 | 0);
       label$72 : {
        if (($13 | 0) < ($17_1 | 0)) {
         $2_1 = HEAP32[18392];
         $6_1 = (Math_imul(HEAP32[$2_1 + 7396 >> 2], 20) + HEAP32[$2_1 + 7404 >> 2] | 0) - 20 | 0;
         $13 = (HEAP32[$6_1 >> 2] << 4) + $2_1 | 0;
         $15_1 = $13 + 5624 | 0;
         $17_1 = $6_1 + 12 | 0;
         $20_1 = HEAP32[$17_1 + 4 >> 2];
         HEAP32[$15_1 >> 2] = HEAP32[$17_1 >> 2];
         HEAP32[$15_1 + 4 >> 2] = $20_1;
         $15_1 = HEAP32[$6_1 + 8 >> 2];
         $13 = $13 + 5616 | 0;
         HEAP32[$13 >> 2] = HEAP32[$6_1 + 4 >> 2];
         HEAP32[$13 + 4 >> 2] = $15_1;
         HEAP32[$2_1 + 7396 >> 2] = HEAP32[$2_1 + 7396 >> 2] - 1;
         break label$72;
        }
        if (!$89(0)) {
         break label$72
        }
        $2_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
        $400($2_1, $5_1 + 40 | 0, $5_1 + 48 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
        $8 = HEAPF32[$5_1 + 88 >> 2];
        $6_1 = $5_1 + 44 | 0;
        HEAPF32[$1_1 + 108 >> 2] = HEAPF32[$6_1 >> 2];
        HEAPF32[$1_1 + 104 >> 2] = $8;
        $13 = $5_1 + 52 | 0;
        HEAPF32[$1_1 + 100 >> 2] = HEAPF32[$13 >> 2];
        HEAPF32[$1_1 + 96 >> 2] = $8;
        $15_1 = $1_1 + 104 | 0;
        $17_1 = $1_1 + 96 | 0;
        $399($2_1, $15_1, $17_1, -16711936, Math_fround(1.0));
        $8 = HEAPF32[$5_1 + 92 >> 2];
        HEAPF32[$1_1 + 108 >> 2] = HEAPF32[$6_1 >> 2];
        HEAPF32[$1_1 + 104 >> 2] = $8;
        HEAPF32[$1_1 + 100 >> 2] = HEAPF32[$13 >> 2];
        HEAPF32[$1_1 + 96 >> 2] = $8;
        $399($2_1, $15_1, $17_1, -16711936, Math_fround(1.0));
       }
       if ($9) {
        if (HEAP32[$5_1 >> 2] > 0) {
         $13 = $1_1 + 24 | 0;
         $15_1 = $1_1 + 16 | 0;
         $6_1 = 0;
         while (1) {
          $9 = HEAP32[$5_1 + 8 >> 2] + Math_imul($6_1, 40) | 0;
          $265($9);
          if ($572(16153)) {
           $753($5_1, $9, -1)
          }
          $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
          HEAP8[$2_1 + 140 | 0] = 1;
          if (!HEAPU8[$2_1 + 143 | 0]) {
           HEAPF32[$2_1 + 212 >> 2] = HEAPF32[$2_1 + 220 >> 2];
           $17_1 = $2_1 + 256 | 0;
           $20_1 = HEAP32[$17_1 + 4 >> 2];
           $22_1 = $2_1 + 248 | 0;
           HEAP32[$22_1 >> 2] = HEAP32[$17_1 >> 2];
           HEAP32[$22_1 + 4 >> 2] = $20_1;
           HEAPF32[$2_1 + 264 >> 2] = HEAPF32[$2_1 + 268 >> 2];
           HEAPF32[$2_1 + 208 >> 2] = HEAPF32[$2_1 + 216 >> 2] + Math_fround(2.0);
          }
          if ($572(16149)) {
           $753($5_1, $9, 1)
          }
          $17_1 = HEAP32[18392];
          $2_1 = HEAP32[$17_1 + 7080 >> 2];
          HEAP8[$2_1 + 140 | 0] = 1;
          if (!HEAPU8[$2_1 + 143 | 0]) {
           $8 = HEAPF32[$17_1 + 5492 >> 2];
           HEAPF32[$2_1 + 212 >> 2] = HEAPF32[$2_1 + 220 >> 2];
           $17_1 = $2_1 + 256 | 0;
           $20_1 = HEAP32[$17_1 + 4 >> 2];
           $22_1 = $2_1 + 248 | 0;
           HEAP32[$22_1 >> 2] = HEAP32[$17_1 >> 2];
           HEAP32[$22_1 + 4 >> 2] = $20_1;
           HEAPF32[$2_1 + 264 >> 2] = HEAPF32[$2_1 + 268 >> 2];
           HEAPF32[$2_1 + 208 >> 2] = $8 + HEAPF32[$2_1 + 216 >> 2];
          }
          $2_1 = HEAP32[$9 >> 2];
          $17_1 = ($2_1 | 0) == HEAP32[$5_1 + 20 >> 2] ? 42 : 32;
          $20_1 = HEAP32[$9 + 28 >> 2];
          if (($20_1 | 0) == -1) {
           $20_1 = 15508
          } else {
           $20_1 = $20_1 + HEAP32[$5_1 + 140 >> 2] | 0
          }
          $8 = HEAPF32[$9 + 16 >> 2];
          $11_1 = HEAPF32[$9 + 20 >> 2];
          HEAPF64[$1_1 + 32 >> 3] = HEAPF32[$9 + 24 >> 2];
          HEAPF64[$13 >> 3] = $11_1;
          HEAPF64[$15_1 >> 3] = $8;
          HEAP32[$1_1 + 12 >> 2] = $20_1;
          HEAP32[$1_1 + 8 >> 2] = $2_1;
          HEAP32[$1_1 + 4 >> 2] = $17_1;
          HEAP32[$1_1 >> 2] = $6_1;
          $557(9794, $1_1);
          $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
          HEAP32[$2_1 + 196 >> 2] = HEAP32[$2_1 + 196 >> 2] - 1;
          $2_1 = $6_1 + 1 | 0;
          $6_1 = $2_1;
          if (($2_1 | 0) < HEAP32[$5_1 >> 2]) {
           continue
          }
          break;
         };
        }
        $716();
       }
       global$0 = $1_1 + 368 | 0;
       $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
       HEAP32[$1_1 + 196 >> 2] = HEAP32[$1_1 + 196 >> 2] - 1;
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) < HEAP32[$7_1 + 8128 >> 2]) {
       continue
      }
      break;
     };
    }
    $716();
   }
   HEAP32[$3 + 496 >> 2] = HEAP32[$7_1 + 8084 >> 2];
   if ($706(5197, 18500, $3 + 496 | 0)) {
    if (HEAP32[$7_1 + 8068 >> 2] > 0) {
     $0_1 = 0;
     while (1) {
      $2_1 = HEAP32[(HEAP32[$7_1 + 8076 >> 2] + ($0_1 << 3) | 0) + 4 >> 2];
      label$89 : {
       if (($2_1 | 0) == -1) {
        break label$89
       }
       $5_1 = HEAP32[$7_1 + 8064 >> 2];
       if (!$5_1) {
        break label$89
       }
       $1_1 = global$0 - 944 | 0;
       global$0 = $1_1;
       $5_1 = $5_1 + Math_imul($2_1, 456) | 0;
       $2_1 = HEAP32[$5_1 + 80 >> 2];
       $6_1 = $121();
       $9 = HEAP32[$5_1 >> 2];
       $13 = HEAP32[$5_1 + 84 >> 2];
       HEAP32[$1_1 + 392 >> 2] = HEAP32[HEAP32[$5_1 + 356 >> 2] >> 2];
       HEAP32[$1_1 + 388 >> 2] = $13;
       HEAP32[$1_1 + 384 >> 2] = $9;
       $6_1 = $6_1 - 2 | 0;
       HEAP32[$1_1 + 396 >> 2] = ($6_1 | 0) > ($2_1 | 0) ? 17707 : 19354;
       $21($1_1 + 432 | 0, 512, 5642, $1_1 + 384 | 0);
       $2_1 = ($2_1 | 0) >= ($6_1 | 0);
       if (!$2_1) {
        $56(0, $53(1))
       }
       HEAP32[$1_1 + 368 >> 2] = $1_1 + 432;
       $6_1 = $708($5_1, 5950, $1_1 + 368 | 0);
       if (!$2_1) {
        $57(1)
       }
       if ($89(0)) {
        $400($94(), $5_1 + 212 | 0, $5_1 + 220 | 0, -16711681, Math_fround(0.0), 0, Math_fround(1.0))
       }
       if (!(!$200() | HEAPU8[$5_1 + 420 | 0] == 255)) {
        $2_1 = $94();
        $9 = $1_1 + 408 | 0;
        $204($9);
        $13 = $1_1 + 424 | 0;
        $205($13);
        $400($2_1, $9, $13, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
       }
       if ($6_1) {
        $13 = $572(4846);
        $8 = HEAPF32[$5_1 + 216 >> 2];
        $44_1 = +Math_fround(HEAPF32[$5_1 + 224 >> 2] - $8);
        $45_1 = +$8;
        $8 = HEAPF32[$5_1 + 212 >> 2];
        $46_1 = +Math_fround(HEAPF32[$5_1 + 220 >> 2] - $8);
        $47_1 = +$8;
        $6_1 = $1_1 + 352 | 0;
        $2_1 = (HEAP32[$5_1 + 4 >> 2] & 57344) + -8192 | 0;
        if ($2_1 >>> 0 <= 32767) {
         $2_1 = HEAP32[($2_1 >>> 11 | 0) + 48144 >> 2]
        } else {
         $2_1 = 15504
        }
        HEAP32[$6_1 >> 2] = $2_1;
        $2_1 = $1_1 + 320 | 0;
        HEAPF64[$2_1 + 24 >> 3] = $44_1;
        HEAPF64[$2_1 + 16 >> 3] = $46_1;
        HEAPF64[$1_1 + 328 >> 3] = $45_1;
        HEAPF64[$1_1 + 320 >> 3] = $47_1;
        $567(18854, $2_1);
        $8 = HEAPF32[$5_1 + 192 >> 2];
        $11_1 = HEAPF32[$5_1 + 196 >> 2];
        $2_1 = $1_1 + 288 | 0;
        $10_1 = HEAPF32[$5_1 + 188 >> 2];
        HEAPF64[$2_1 + 16 >> 3] = $10_1;
        HEAP32[$2_1 + 24 >> 2] = $10_1 == Math_fround(0.0) ? 17950 : 19354;
        HEAPF64[$1_1 + 296 >> 3] = $11_1;
        HEAPF64[$1_1 + 288 >> 3] = $8;
        $567(5549, $2_1);
        $8 = HEAPF32[$5_1 + 164 >> 2];
        $11_1 = HEAPF32[$5_1 + 172 >> 2];
        $10_1 = HEAPF32[$5_1 + 176 >> 2];
        $2_1 = $1_1 + 256 | 0;
        HEAPF64[$2_1 + 24 >> 3] = HEAPF32[$5_1 + 160 >> 2];
        HEAPF64[$2_1 + 16 >> 3] = $10_1;
        HEAPF64[$1_1 + 264 >> 3] = $11_1;
        HEAPF64[$1_1 + 256 >> 3] = $8;
        $567(9848, $2_1);
        $2_1 = HEAP8[$5_1 + 420 | 0];
        HEAP32[$1_1 + 244 >> 2] = HEAP8[$5_1 + 421 | 0];
        HEAP32[$1_1 + 240 >> 2] = $2_1;
        $567(13224, $1_1 + 240 | 0);
        $2_1 = HEAP8[$5_1 + 423 | 0];
        $6_1 = HEAP8[$5_1 + 426 | 0];
        HEAP32[$1_1 + 232 >> 2] = HEAP8[$5_1 + 425 | 0];
        HEAP32[$1_1 + 228 >> 2] = $6_1;
        HEAP32[$1_1 + 224 >> 2] = $2_1;
        $567(13318, $1_1 + 224 | 0);
        $11_1 = Math_fround(0.0);
        $2_1 = HEAP32[$5_1 + 84 >> 2];
        if (($2_1 | 0) > 0) {
         $9 = HEAP32[$5_1 + 16 >> 2];
         $6_1 = 0;
         while (1) {
          $15_1 = $9 + Math_imul($6_1, 104) | 0;
          if (HEAPU8[$15_1 | 0] & 8) {
           $11_1 = Math_fround($11_1 + HEAPF32[$15_1 + 24 >> 2])
          }
          $6_1 = $6_1 + 1 | 0;
          if (($2_1 | 0) != ($6_1 | 0)) {
           continue
          }
          break;
         };
        }
        $2_1 = HEAP32[$5_1 + 84 >> 2];
        if (($2_1 | 0) > 0) {
         $15_1 = $1_1 + 416 | 0;
         $17_1 = $1_1 + 208 | 0;
         $20_1 = $1_1 + 204 | 0;
         $22_1 = $1_1 + 200 | 0;
         $25_1 = $1_1 + 196 | 0;
         $26_1 = $1_1 + 192 | 0;
         $42_1 = $1_1 + 184 | 0;
         $12_1 = $1_1 + 128 | 0;
         $19 = $1_1 + 120 | 0;
         $43_1 = $1_1 + 112 | 0;
         $21_1 = $1_1 + 96 | 0;
         $51_1 = $1_1 + 88 | 0;
         $52_1 = $1_1 + 80 | 0;
         $53_1 = $1_1 + 72 | 0;
         $54_1 = $1_1 - -64 | 0;
         $55_1 = $1_1 + 60 | 0;
         $56_1 = $1_1 + 56 | 0;
         $57_1 = $1_1 + 52 | 0;
         $58_1 = $1_1 + 48 | 0;
         $59_1 = $1_1 + 44 | 0;
         $60_1 = $1_1 + 36 | 0;
         $61 = $1_1 + 24 | 0;
         $62_1 = $1_1 + 176 | 0;
         $63_1 = $1_1 + 168 | 0;
         $64_1 = $1_1 + 160 | 0;
         $65_1 = $1_1 + 152 | 0;
         $66 = $1_1 + 136 | 0;
         $67_1 = $1_1 + 144 | 0;
         $68_1 = $1_1 + 188 | 0;
         $6_1 = 0;
         while (1) {
          $2_1 = HEAP32[$5_1 + 16 >> 2] + Math_imul($6_1, 104) | 0;
          label$133 : {
           if (!HEAPU8[$5_1 + 441 | 0]) {
            $30 = 19354;
            if (($6_1 | 0) >= HEAP8[$5_1 + 419 | 0]) {
             break label$133
            }
           }
           $9 = HEAP16[$2_1 + 80 >> 1];
           $30 = 19354;
           if (($9 | 0) == -1) {
            break label$133
           }
           $30 = $9 + HEAP32[$5_1 + 372 >> 2] | 0;
          }
          $69_1 = ($6_1 | 0) < HEAP8[$5_1 + 435 | 0] ? 17958 : 19354;
          $70_1 = HEAPU8[$2_1 + 89 | 0];
          $71_1 = HEAPU8[$2_1 + 88 | 0];
          $72_1 = HEAPU8[$2_1 + 96 | 0];
          $73_1 = HEAPU8[$2_1 + 95 | 0];
          $74 = HEAPU8[$2_1 + 94 | 0];
          $75_1 = HEAPU8[$2_1 + 93 | 0];
          $76_1 = HEAPU8[$2_1 + 90 | 0];
          $77 = HEAP8[$2_1 + 82 | 0];
          $10_1 = HEAPF32[$2_1 + 24 >> 2];
          $44_1 = +$10_1;
          $45_1 = +HEAPF32[$2_1 + 20 >> 2];
          $46_1 = +HEAPF32[$2_1 + 16 >> 2];
          $47_1 = +HEAPF32[$2_1 + 4 >> 2];
          $16_1 = HEAPF32[$2_1 + 12 >> 2];
          $8 = HEAPF32[$5_1 + 244 >> 2];
          $78_1 = +Math_fround($16_1 - $8);
          $4_1 = HEAPF32[$2_1 + 8 >> 2];
          $79_1 = +Math_fround($4_1 - $8);
          $80_1 = HEAPU8[$2_1 + 101 | 0];
          $14 = HEAPF32[$2_1 + 40 >> 2];
          $23_1 = HEAPF32[$2_1 + 64 >> 2];
          $28_1 = HEAPF32[$2_1 + 68 >> 2];
          $24 = HEAPF32[$2_1 + 72 >> 2];
          $34_1 = HEAPF32[$2_1 + 76 >> 2];
          $8 = HEAPF32[$2_1 + 52 >> 2];
          $18_1 = HEAPF32[$2_1 + 32 >> 2];
          $81_1 = HEAP8[$2_1 + 86 | 0];
          $82_1 = HEAP32[$2_1 + 48 >> 2];
          $9 = HEAP32[$2_1 >> 2];
          HEAP32[$17_1 >> 2] = $9 & 32 ? 19118 : 19354;
          HEAP32[$20_1 >> 2] = $9 & 16 ? 19135 : 19354;
          HEAP32[$22_1 >> 2] = $9 & 8 ? 19104 : 19354;
          HEAP32[$25_1 >> 2] = $9;
          HEAP32[$26_1 >> 2] = $82_1;
          HEAP32[$42_1 >> 2] = $81_1;
          HEAPF64[$12_1 >> 3] = $18_1;
          HEAPF64[$19 >> 3] = Math_fround($16_1 - $4_1);
          HEAPF64[$43_1 >> 3] = $16_1;
          HEAPF64[$1_1 + 104 >> 3] = $4_1;
          HEAPF64[$21_1 >> 3] = $10_1 > Math_fround(0.0) ? Math_fround(Math_fround($10_1 / $11_1) * Math_fround(100.0)) : Math_fround(0.0);
          HEAPF64[$51_1 >> 3] = $44_1;
          HEAPF64[$52_1 >> 3] = $45_1;
          HEAPF64[$53_1 >> 3] = $46_1;
          HEAPF64[$54_1 >> 3] = $47_1;
          HEAP32[$55_1 >> 2] = $70_1;
          HEAP32[$56_1 >> 2] = $71_1;
          HEAP32[$57_1 >> 2] = $72_1;
          HEAP32[$58_1 >> 2] = $73_1;
          HEAP32[$59_1 >> 2] = $74;
          HEAP32[$1_1 + 40 >> 2] = $75_1;
          HEAP32[$60_1 >> 2] = $76_1;
          HEAP32[$1_1 + 32 >> 2] = $69_1;
          HEAPF64[$61 >> 3] = $78_1;
          HEAPF64[$1_1 + 16 >> 3] = $79_1;
          HEAPF64[$62_1 >> 3] = Math_fround($34_1 - $8);
          HEAPF64[$63_1 >> 3] = Math_fround($24 - $8);
          HEAPF64[$64_1 >> 3] = Math_fround($28_1 - $8);
          HEAPF64[$65_1 >> 3] = Math_fround($23_1 - $8);
          HEAPF64[$66 >> 3] = $14;
          HEAPF64[$67_1 >> 3] = Math_fround($14 - $18_1);
          $9 = $80_1 & 3;
          HEAP32[$68_1 >> 2] = ($9 | 0) == 1 ? 18570 : ($9 | 0) == 2 ? 17919 : 19354;
          HEAP32[$1_1 + 8 >> 2] = $30;
          HEAP32[$1_1 + 4 >> 2] = $77;
          HEAP32[$1_1 >> 2] = $6_1;
          $9 = $1_1 + 432 | 0;
          $21($9, 512, 17293, $1_1);
          $588();
          HEAP32[$1_1 + 408 >> 2] = 0;
          HEAP32[$1_1 + 412 >> 2] = 0;
          $601($9, 0, 0, $1_1 + 408 | 0);
          if ($89(0)) {
           $8 = HEAPF32[$2_1 + 8 >> 2];
           $10_1 = HEAPF32[$5_1 + 216 >> 2];
           $16_1 = HEAPF32[$2_1 + 12 >> 2];
           HEAPF32[$1_1 + 420 >> 2] = HEAPF32[$5_1 + 224 >> 2];
           HEAPF32[$1_1 + 416 >> 2] = $16_1;
           HEAPF32[$1_1 + 412 >> 2] = $10_1;
           HEAPF32[$1_1 + 408 >> 2] = $8;
           $400($94(), $1_1 + 408 | 0, $15_1, -16711681, Math_fround(0.0), 0, Math_fround(1.0));
          }
          $6_1 = $6_1 + 1 | 0;
          $2_1 = HEAP32[$5_1 + 84 >> 2];
          if (($6_1 | 0) < ($2_1 | 0)) {
           continue
          }
          break;
         };
        }
        $6_1 = HEAP32[$5_1 + 76 >> 2];
        label$184 : {
         if (($6_1 | 0) == -1) {
          $6_1 = 0;
          break label$184;
         }
         $6_1 = $6_1 + HEAP32[HEAP32[18392] + 12176 >> 2] | 0;
         if (HEAP8[$6_1 + 13 | 0] >= ($2_1 | 0)) {
          break label$184
         }
         HEAP32[$6_1 >> 2] = 0;
         $6_1 = 0;
        }
        if ($6_1) {
         $540($6_1)
        }
        if ($13) {
         HEAP8[$5_1 + 450 | 0] = 1
        }
        $716();
       }
       global$0 = $1_1 + 944 | 0;
      }
      $0_1 = $0_1 + 1 | 0;
      if (($0_1 | 0) < HEAP32[$7_1 + 8068 >> 2]) {
       continue
      }
      break;
     };
    }
    $716();
   }
   if ($709(4872)) {
    label$91 : {
     if (!$572(6542)) {
      break label$91
     }
     $0_1 = HEAP32[18392];
     $1_1 = HEAP32[$0_1 + 12140 >> 2];
     if ($1_1) {
      HEAP32[$0_1 + 12132 >> 2] = 0;
      HEAP32[$0_1 + 12136 >> 2] = 0;
      if ($0_1) {
       $2_1 = $0_1 + 876 | 0;
       HEAP32[$2_1 >> 2] = HEAP32[$2_1 >> 2] - 1;
      }
      FUNCTION_TABLE[HEAP32[18315]]($1_1, HEAP32[18394]);
      HEAP32[$0_1 + 12140 >> 2] = 0;
     }
     if (HEAP32[$0_1 + 12144 >> 2] <= 0) {
      break label$91
     }
     $1_1 = 0;
     while (1) {
      $2_1 = HEAP32[$0_1 + 12152 >> 2] + Math_imul($1_1, 36) | 0;
      $5_1 = HEAP32[$2_1 + 8 >> 2];
      if ($5_1) {
       FUNCTION_TABLE[$5_1 | 0]($0_1, $2_1)
      }
      $1_1 = $1_1 + 1 | 0;
      if (($1_1 | 0) < HEAP32[$0_1 + 12144 >> 2]) {
       continue
      }
      break;
     };
    }
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    if (!HEAPU8[$0_1 + 143 | 0]) {
     $8 = HEAPF32[$1_1 + 5492 >> 2];
     HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
     $1_1 = $0_1 + 256 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = $0_1 + 248 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
     HEAPF32[$0_1 + 208 >> 2] = $8 + HEAPF32[$0_1 + 216 >> 2];
    }
    if ($572(1094)) {
     $114(0)
    }
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    if (!HEAPU8[$0_1 + 143 | 0]) {
     $8 = HEAPF32[$1_1 + 5492 >> 2];
     HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
     $1_1 = $0_1 + 256 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = $0_1 + 248 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
     HEAPF32[$0_1 + 208 >> 2] = $8 + HEAPF32[$0_1 + 216 >> 2];
    }
    label$99 : {
     if (!$572(8421)) {
      break label$99
     }
     $0_1 = HEAP32[$7_1 + 32 >> 2];
     HEAP32[HEAP32[18392] + 12128 >> 2] = 0;
     if (!$0_1) {
      break label$99
     }
     HEAP32[$3 + 960 >> 2] = 0;
     $1_1 = $114($3 + 960 | 0);
     $0_1 = $1622($0_1, 2145);
     if (!$0_1) {
      break label$99
     }
     $1633($1_1, HEAP32[$3 + 960 >> 2], $0_1);
     $1609($0_1);
    }
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    if (!HEAPU8[$0_1 + 143 | 0]) {
     $8 = HEAPF32[$1_1 + 5492 >> 2];
     HEAPF32[$0_1 + 212 >> 2] = HEAPF32[$0_1 + 220 >> 2];
     $1_1 = $0_1 + 256 | 0;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $5_1 = $0_1 + 248 | 0;
     HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
     HEAP32[$5_1 + 4 >> 2] = $2_1;
     HEAPF32[$0_1 + 264 >> 2] = HEAPF32[$0_1 + 268 >> 2];
     HEAPF32[$0_1 + 208 >> 2] = $8 + HEAPF32[$0_1 + 216 >> 2];
    }
    $0_1 = HEAP32[$7_1 + 32 >> 2];
    label$101 : {
     if ($0_1) {
      HEAP32[$3 + 480 >> 2] = $0_1;
      $557(18931, $3 + 480 | 0);
      break label$101;
     }
     $556(16140);
    }
    HEAPF64[$3 + 464 >> 3] = HEAPF32[$7_1 + 12128 >> 2];
    $557(9770, $3 + 464 | 0);
    HEAP32[$3 + 448 >> 2] = HEAP32[$7_1 + 12144 >> 2];
    if ($706(4308, 18520, $3 + 448 | 0)) {
     if (HEAP32[$7_1 + 12144 >> 2] > 0) {
      $0_1 = 0;
      while (1) {
       HEAP32[$3 + 432 >> 2] = HEAP32[HEAP32[$7_1 + 12152 >> 2] + Math_imul($0_1, 36) >> 2];
       $567(5950, $3 + 432 | 0);
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) < HEAP32[$7_1 + 12144 >> 2]) {
        continue
       }
       break;
      };
     }
     $716();
    }
    HEAP32[$3 + 416 >> 2] = HEAP32[$7_1 + 12156 >> 2];
    if ($706(3893, 4971, $3 + 416 | 0)) {
     $0_1 = HEAP32[$7_1 + 12164 >> 2];
     if ($0_1) {
      $2_1 = $3 + 408 | 0;
      $5_1 = $3 + 404 | 0;
      $0_1 = $0_1 + 4 | 0;
      while (1) {
       $1_1 = HEAP16[$0_1 + 6 >> 1];
       $6_1 = HEAP16[$0_1 + 10 >> 1];
       $9 = HEAP32[$0_1 >> 2];
       $13 = HEAP16[$0_1 + 4 >> 1];
       $15_1 = HEAP16[$0_1 + 8 >> 1];
       HEAP32[$2_1 >> 2] = HEAPU8[$0_1 + 12 | 0];
       HEAP32[$5_1 >> 2] = $6_1;
       $6_1 = $3 + 384 | 0;
       HEAP32[$6_1 + 16 >> 2] = $15_1;
       HEAP32[$3 + 396 >> 2] = $1_1;
       HEAP32[$3 + 392 >> 2] = $13;
       HEAP32[$3 + 388 >> 2] = $0_1 + 16;
       HEAP32[$3 + 384 >> 2] = $9;
       $557(12940, $6_1);
       $0_1 = HEAP32[$0_1 - 4 >> 2] + $0_1 | 0;
       $1_1 = ($0_1 | 0) == ((HEAP32[$7_1 + 12164 >> 2] + HEAP32[$7_1 + 12156 >> 2] | 0) + 4 | 0);
       $0_1 = $1_1 ? 0 : $0_1;
       if (!$1_1) {
        continue
       }
       break;
      };
     }
     $716();
    }
    HEAP32[$3 + 368 >> 2] = HEAP32[$7_1 + 12168 >> 2];
    if ($706(5189, 5011, $3 + 368 | 0)) {
     $0_1 = HEAP32[$7_1 + 12176 >> 2];
     if ($0_1) {
      $0_1 = $0_1 + 4 | 0;
      while (1) {
       $540($0_1);
       $0_1 = HEAP32[$0_1 - 4 >> 2] + $0_1 | 0;
       $0_1 = ($0_1 | 0) != ((HEAP32[$7_1 + 12176 >> 2] + HEAP32[$7_1 + 12168 >> 2] | 0) + 4 | 0) ? $0_1 : 0;
       if ($0_1) {
        continue
       }
       break;
      };
     }
     $716();
    }
    $0_1 = HEAP32[$7_1 + 12132 >> 2];
    $1_1 = $0_1 - 1 | 0;
    HEAP32[$3 + 352 >> 2] = $0_1 >>> 0 >= $1_1 >>> 0 ? $1_1 : 0;
    if ($706(13836, 5050, $3 + 352 | 0)) {
     $0_1 = HEAP32[$7_1 + 12140 >> 2];
     $1_1 = HEAP32[$7_1 + 12132 >> 2];
     $8 = HEAPF32[HEAP32[18392] + 6468 >> 2];
     HEAP32[$3 + 960 >> 2] = -2139095040;
     HEAPF32[$3 + 964 >> 2] = $8 * Math_fround(20.0);
     $689(8550, $0_1 ? $0_1 : 73572, $1_1, $3 + 960 | 0, 16384, 0);
     $716();
    }
    $716();
   }
   if ($709(10677)) {
    $557(14905, 0);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    $10_1 = HEAPF32[$1_1 + 5524 >> 2];
    $1_1 = $0_1 + 272 | 0;
    $8 = Math_fround($10_1 + HEAPF32[$1_1 >> 2]);
    HEAPF32[$1_1 >> 2] = $8;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    $0_1 = HEAP32[$7_1 + 7084 >> 2];
    if ($0_1) {
     $0_1 = HEAP32[$0_1 >> 2]
    } else {
     $0_1 = 14877
    }
    HEAP32[$3 + 336 >> 2] = $0_1;
    $557(18762, $3 + 336 | 0);
    $0_1 = HEAP32[$7_1 + 7084 >> 2];
    if ($0_1) {
     $0_1 = HEAP32[HEAP32[$0_1 + 736 >> 2] >> 2]
    } else {
     $0_1 = 14877
    }
    HEAP32[$3 + 320 >> 2] = $0_1;
    $557(18803, $3 + 320 | 0);
    $0_1 = HEAP32[$7_1 + 7088 >> 2];
    if ($0_1) {
     $0_1 = HEAP32[$0_1 >> 2]
    } else {
     $0_1 = 14877
    }
    HEAP32[$3 + 304 >> 2] = $0_1;
    $557(18725, $3 + 304 | 0);
    $0_1 = HEAP32[$7_1 + 7092 >> 2];
    if ($0_1) {
     $0_1 = HEAP32[$0_1 >> 2]
    } else {
     $0_1 = 14877
    }
    HEAP32[$3 + 288 >> 2] = $0_1;
    $557(18743, $3 + 288 | 0);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    $2_1 = $0_1 + 272 | 0;
    $8 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 + 5524 >> 2]);
    HEAPF32[$2_1 >> 2] = $8;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    $557(14816, 0);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    $10_1 = HEAPF32[$1_1 + 5524 >> 2];
    $1_1 = $0_1 + 272 | 0;
    $8 = Math_fround($10_1 + HEAPF32[$1_1 >> 2]);
    HEAPF32[$1_1 >> 2] = $8;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    $8 = HEAPF32[$7_1 + 7144 >> 2];
    $0_1 = HEAP32[$7_1 + 7136 >> 2];
    $1_1 = HEAP32[$7_1 + 7196 >> 2];
    $2_1 = HEAP32[$7_1 + 7188 >> 2];
    $5_1 = $3 + 256 | 0;
    HEAP32[$5_1 + 16 >> 2] = HEAPU8[$7_1 + 7149 | 0];
    HEAP32[$3 + 276 >> 2] = HEAP32[($2_1 << 2) + 20880 >> 2];
    HEAP32[$3 + 260 >> 2] = $1_1;
    HEAP32[$3 + 256 >> 2] = $0_1;
    HEAPF64[$3 + 264 >> 3] = $8;
    $557(5838, $5_1);
    $0_1 = HEAP32[$7_1 + 7184 >> 2];
    if ($0_1) {
     $0_1 = HEAP32[$0_1 >> 2]
    } else {
     $0_1 = 14877
    }
    HEAP32[$3 + 240 >> 2] = $0_1;
    $557(18782, $3 + 240 | 0);
    $0_1 = HEAPU8[$7_1 + 7154 | 0];
    $1_1 = HEAP32[$7_1 + 7156 >> 2];
    $2_1 = HEAP32[$7_1 + 7160 >> 2];
    $5_1 = HEAP32[$7_1 + 7172 >> 2];
    $6_1 = $3 + 208 | 0;
    $9 = $6_1 + 16 | 0;
    HEAP32[$9 >> 2] = HEAP32[$7_1 + 7168 >> 2];
    HEAP32[$9 + 4 >> 2] = $5_1;
    HEAP32[$3 + 212 >> 2] = $1_1;
    HEAP32[$3 + 216 >> 2] = $2_1;
    HEAP32[$3 + 208 >> 2] = $0_1;
    $557(14211, $6_1);
    $8 = HEAPF32[$7_1 + 7128 >> 2];
    $0_1 = HEAP32[$7_1 + 7120 >> 2];
    $1_1 = $3 + 176 | 0;
    HEAP32[$1_1 + 16 >> 2] = HEAPU8[$7_1 + 7124 | 0];
    HEAP32[$3 + 176 >> 2] = $0_1;
    HEAPF64[$3 + 184 >> 3] = $8;
    $557(13271, $1_1);
    $0_1 = HEAP32[$7_1 + 7900 >> 2];
    $1_1 = HEAPU8[$7_1 + 7876 | 0];
    HEAP32[$3 + 172 >> 2] = HEAP32[$7_1 + 7896 >> 2];
    HEAP32[$3 + 168 >> 2] = $7_1 + 7912;
    HEAP32[$3 + 164 >> 2] = $0_1;
    HEAP32[$3 + 160 >> 2] = $1_1;
    $557(17823, $3 + 160 | 0);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    $2_1 = $0_1 + 272 | 0;
    $8 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 + 5524 >> 2]);
    HEAPF32[$2_1 >> 2] = $8;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    $557(14806, 0);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    $10_1 = HEAPF32[$1_1 + 5524 >> 2];
    $1_1 = $0_1 + 272 | 0;
    $8 = Math_fround($10_1 + HEAPF32[$1_1 >> 2]);
    HEAPF32[$1_1 >> 2] = $8;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    $0_1 = HEAP32[$7_1 + 7508 >> 2];
    if ($0_1) {
     $0_1 = HEAP32[$0_1 >> 2]
    } else {
     $0_1 = 14877
    }
    HEAP32[$3 + 144 >> 2] = $0_1;
    $557(18709, $3 + 144 | 0);
    $0_1 = HEAP32[$7_1 + 7512 >> 2];
    HEAP32[$3 + 132 >> 2] = HEAP32[$7_1 + 7564 >> 2];
    HEAP32[$3 + 128 >> 2] = $0_1;
    $557(13146, $3 + 128 | 0);
    HEAP32[$3 + 112 >> 2] = HEAP32[(HEAP32[$7_1 + 7560 >> 2] << 2) + 20880 >> 2];
    $557(5819, $3 + 112 | 0);
    $0_1 = HEAPU8[$7_1 + 853 | 0];
    HEAP32[$3 + 100 >> 2] = HEAPU8[$7_1 + 854 | 0];
    HEAP32[$3 + 96 >> 2] = $0_1;
    $557(13377, $3 + 96 | 0);
    $0_1 = HEAP32[$7_1 + 7520 >> 2];
    $1_1 = HEAP32[$7_1 + 7524 >> 2];
    $2_1 = HEAP32[$7_1 + 7532 >> 2];
    HEAP32[$3 + 88 >> 2] = HEAP32[$7_1 + 7528 >> 2];
    HEAP32[$3 + 92 >> 2] = $2_1;
    HEAP32[$3 + 80 >> 2] = $0_1;
    HEAP32[$3 + 84 >> 2] = $1_1;
    $557(14583, $3 + 80 | 0);
    HEAP32[$3 + 64 >> 2] = HEAP32[$7_1 + 7536 >> 2];
    $557(14688, $3 - -64 | 0);
    $0_1 = HEAPU8[$7_1 + 7570 | 0];
    HEAP32[$3 + 52 >> 2] = HEAPU8[$7_1 + 7571 | 0];
    HEAP32[$3 + 48 >> 2] = $0_1;
    $557(13174, $3 + 48 | 0);
    HEAP32[$3 + 32 >> 2] = HEAP32[$7_1 + 7516 >> 2];
    $557(14430, $3 + 32 | 0);
    $0_1 = HEAP32[$7_1 + 7844 >> 2];
    if ($0_1) {
     $0_1 = HEAP32[$0_1 >> 2]
    } else {
     $0_1 = 14877
    }
    HEAP32[$3 + 16 >> 2] = $0_1;
    $557(18829, $3 + 16 | 0);
    $1_1 = HEAP32[18392];
    $0_1 = HEAP32[$1_1 + 7080 >> 2];
    HEAP8[$0_1 + 140 | 0] = 1;
    $2_1 = $0_1 + 272 | 0;
    $8 = Math_fround(HEAPF32[$2_1 >> 2] - HEAPF32[$1_1 + 5524 >> 2]);
    HEAPF32[$2_1 >> 2] = $8;
    HEAPF32[$0_1 + 208 >> 2] = Math_fround($8 + HEAPF32[$0_1 + 12 >> 2]) + HEAPF32[$0_1 + 276 >> 2];
    $716();
   }
   if (!(!(HEAPU8[$7_1 + 12257 | 0] | HEAPU8[$7_1 + 12258 | 0]) | HEAP32[$7_1 + 7008 >> 2] <= 0)) {
    $2_1 = $3 + 968 | 0;
    $0_1 = 0;
    while (1) {
     $1_1 = HEAP32[HEAP32[$7_1 + 7016 >> 2] + ($0_1 << 2) >> 2];
     label$125 : {
      if (!HEAPU8[$1_1 + 139 | 0]) {
       break label$125
      }
      $5_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
      if (HEAPU8[$7_1 + 12257 | 0]) {
       label$127 : {
        label$128 : {
         switch (HEAP32[$38_1 >> 2]) {
         case 0:
          $11_1 = HEAPF32[$1_1 + 24 >> 2];
          $8 = HEAPF32[$1_1 + 16 >> 2];
          $10_1 = HEAPF32[$1_1 + 12 >> 2];
          HEAPF32[$3 + 968 >> 2] = $10_1 + HEAPF32[$1_1 + 20 >> 2];
          HEAPF32[$3 + 964 >> 2] = $8;
          HEAPF32[$3 + 960 >> 2] = $10_1;
          HEAPF32[$3 + 972 >> 2] = $8 + $11_1;
          break label$127;
         case 1:
          $6_1 = $1_1 + 424 | 0;
          $9 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $9;
          $6_1 = HEAP32[$1_1 + 420 >> 2];
          HEAP32[$3 + 960 >> 2] = HEAP32[$1_1 + 416 >> 2];
          HEAP32[$3 + 964 >> 2] = $6_1;
          break label$127;
         case 2:
          $6_1 = $1_1 + 440 | 0;
          $9 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $9;
          $6_1 = HEAP32[$1_1 + 436 >> 2];
          HEAP32[$3 + 960 >> 2] = HEAP32[$1_1 + 432 >> 2];
          HEAP32[$3 + 964 >> 2] = $6_1;
          break label$127;
         case 3:
          $6_1 = $1_1 + 456 | 0;
          $9 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $9;
          $6_1 = HEAP32[$1_1 + 452 >> 2];
          HEAP32[$3 + 960 >> 2] = HEAP32[$1_1 + 448 >> 2];
          HEAP32[$3 + 964 >> 2] = $6_1;
          break label$127;
         case 4:
          $6_1 = $1_1 + 472 | 0;
          $9 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $9;
          $6_1 = HEAP32[$1_1 + 468 >> 2];
          HEAP32[$3 + 960 >> 2] = HEAP32[$1_1 + 464 >> 2];
          HEAP32[$3 + 964 >> 2] = $6_1;
          break label$127;
         case 5:
          $8 = HEAPF32[$1_1 + 40 >> 2];
          $11_1 = HEAPF32[$1_1 - -64 >> 2];
          $10_1 = HEAPF32[$1_1 + 92 >> 2];
          $16_1 = HEAPF32[$1_1 + 436 >> 2];
          $4_1 = HEAPF32[$1_1 + 36 >> 2];
          $14 = Math_fround(Math_fround(HEAPF32[$1_1 + 432 >> 2] - HEAPF32[$1_1 + 88 >> 2]) + HEAPF32[$1_1 + 60 >> 2]);
          HEAPF32[$3 + 960 >> 2] = $14;
          HEAPF32[$3 + 968 >> 2] = $14 + $4_1;
          $11_1 = Math_fround($11_1 + Math_fround($16_1 - $10_1));
          HEAPF32[$3 + 964 >> 2] = $11_1;
          HEAPF32[$3 + 972 >> 2] = $11_1 + $8;
          break label$127;
         case 6:
          $8 = HEAPF32[$1_1 + 48 >> 2];
          $11_1 = HEAPF32[$1_1 - -64 >> 2];
          $10_1 = HEAPF32[$1_1 + 92 >> 2];
          $16_1 = HEAPF32[$1_1 + 436 >> 2];
          $4_1 = HEAPF32[$1_1 + 44 >> 2];
          $14 = Math_fround(Math_fround(HEAPF32[$1_1 + 432 >> 2] - HEAPF32[$1_1 + 88 >> 2]) + HEAPF32[$1_1 + 60 >> 2]);
          HEAPF32[$3 + 960 >> 2] = $14;
          HEAPF32[$3 + 968 >> 2] = $14 + $4_1;
          $11_1 = Math_fround($11_1 + Math_fround($16_1 - $10_1));
          HEAPF32[$3 + 964 >> 2] = $11_1;
          HEAPF32[$3 + 972 >> 2] = $11_1 + $8;
          break label$127;
         case 7:
          $6_1 = $1_1 + 520 | 0;
          $9 = HEAP32[$6_1 + 4 >> 2];
          HEAP32[$2_1 >> 2] = HEAP32[$6_1 >> 2];
          HEAP32[$2_1 + 4 >> 2] = $9;
          $6_1 = HEAP32[$1_1 + 516 >> 2];
          HEAP32[$3 + 960 >> 2] = HEAP32[$1_1 + 512 >> 2];
          HEAP32[$3 + 964 >> 2] = $6_1;
          break label$127;
         default:
          break label$128;
         };
        }
        HEAP32[$2_1 >> 2] = 0;
        HEAP32[$2_1 + 4 >> 2] = 0;
        HEAP32[$3 + 960 >> 2] = 0;
        HEAP32[$3 + 964 >> 2] = 0;
       }
       $400($5_1, $3 + 960 | 0, $2_1, -8388353, Math_fround(0.0), 0, Math_fround(1.0));
      }
      if (!HEAPU8[$7_1 + 12258 | 0] | HEAP8[$1_1 + 11 | 0] & 1) {
       break label$125
      }
      HEAP32[$3 >> 2] = HEAP16[$1_1 + 154 >> 1];
      $6_1 = $3 + 960 | 0;
      $21($6_1, 32, 13404, $3);
      $8 = HEAPF32[$1_1 + 12 >> 2];
      $11_1 = HEAPF32[HEAP32[18392] + 6468 >> 2];
      HEAPF32[$3 + 948 >> 2] = $11_1 + HEAPF32[$1_1 + 16 >> 2];
      HEAPF32[$3 + 944 >> 2] = $11_1 + $8;
      $1_1 = $1_1 + 12 | 0;
      $401($5_1, $1_1, $3 + 944 | 0, -10197816, Math_fround(0.0), 0);
      $416($5_1, $1_1, -1, $6_1);
     }
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) < HEAP32[$7_1 + 7008 >> 2]) {
      continue
     }
     break;
    };
   }
   if (!HEAPU8[$7_1 + 12259 | 0] | HEAP32[$7_1 + 8068 >> 2] <= 0) {
    break label$2
   }
   $5_1 = $3 + 968 | 0;
   $0_1 = 0;
   while (1) {
    $1_1 = $0_1;
    $0_1 = HEAP32[(HEAP32[$7_1 + 8076 >> 2] + ($1_1 << 3) | 0) + 4 >> 2];
    label$138 : {
     if (($0_1 | 0) == -1) {
      break label$138
     }
     $2_1 = HEAP32[$7_1 + 8064 >> 2];
     if (!$2_1) {
      break label$138
     }
     $2_1 = $2_1 + Math_imul($0_1, 456) | 0;
     if (HEAP32[$2_1 + 80 >> 2] < (HEAP32[$7_1 + 6984 >> 2] - 1 | 0)) {
      break label$138
     }
     $6_1 = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 1, 11768);
     $0_1 = HEAP32[$37 >> 2];
     if (($0_1 | 0) >= 6) {
      if (HEAP32[$2_1 + 84 >> 2] <= 0) {
       break label$138
      }
      $9 = $2_1 + 84 | 0;
      $13 = $2_1 + 420 | 0;
      $0_1 = 0;
      while (1) {
       $15_1 = $3 + 960 | 0;
       $351($15_1, $2_1, HEAP32[$37 >> 2], $0_1);
       $12_1 = $15_1;
       $15_1 = HEAP8[$13 | 0] == ($0_1 | 0);
       $400($6_1, $12_1, $5_1, $15_1 ? -8323073 : -8388353, Math_fround(0.0), 0, $15_1 ? Math_fround(3.0) : Math_fround(1.0));
       $0_1 = $0_1 + 1 | 0;
       if (($0_1 | 0) < HEAP32[$9 >> 2]) {
        continue
       }
       break;
      };
      break label$138;
     }
     $9 = $3 + 960 | 0;
     $351($9, $2_1, $0_1, -1);
     $400($6_1, $9, $5_1, -8388353, Math_fround(0.0), 0, Math_fround(1.0));
    }
    $0_1 = $1_1 + 1 | 0;
    if (($0_1 | 0) < HEAP32[$7_1 + 8068 >> 2]) {
     continue
    }
    break;
   };
  }
  $142();
  global$0 = $3 + 1184 | 0;
  HEAP32[$36_1 >> 2] = 52584;
  $1_1 = HEAP32[$36_1 + 8 >> 2];
  if (HEAP32[$1_1 >> 2] != 2) {
   HEAP32[$31_1 + 24 >> 2] = HEAPU8[$36_1 + 4 | 0];
   $2_1 = $31_1 + 24 | 0;
   $0_1 = fimport$1(72652, $2_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$31_1 + 24 >> 2] = 0;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $2_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $0_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $31_1 + 32 | 0;
 }
 
 function $1193($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $0_1 = $1488($2_1 + 12 | 0, $0_1);
  $349(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2] != 2 ? $0_1 + 4 | 0 : 0);
  HEAP32[$0_1 >> 2] = 52584;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (HEAP32[$1_1 >> 2] != 2) {
   HEAP32[$2_1 + 24 >> 2] = HEAPU8[$0_1 + 4 | 0];
   $3 = $2_1 + 24 | 0;
   $0_1 = fimport$1(72652, $3 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 24 >> 2] = 0;
   $4_1 = $1_1;
   $1_1 = fimport$1(72760, $3 | 0) | 0;
   fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1195($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[$0_1 >> 2];
  if (!(($0_1 | 0) == 2)) {
   +fimport$5($0_1 | 0, 52424, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
  }
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1196($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$1_1 >> 2];
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 15 | 0] = $3;
     $4_1 = $2_1 + 4 | 0;
     break label$2;
    }
    $5_1 = ($3 | 15) + 1 | 0;
    $4_1 = $1782($5_1);
    HEAP32[$2_1 + 12 >> 2] = $5_1 | -2147483648;
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    HEAP32[$2_1 + 8 >> 2] = $3;
   }
   if ($3) {
    $1602($4_1, $1_1 + 4 | 0, $3)
   }
   HEAP8[$3 + $4_1 | 0] = 0;
   FUNCTION_TABLE[$0_1 | 0]($2_1 + 4 | 0);
   if (HEAP8[$2_1 + 15 | 0] < 0) {
    $1756(HEAP32[$2_1 + 4 >> 2])
   }
   global$0 = $2_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1199($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $4_1 = $1_1 + 4 | 0;
  FUNCTION_TABLE[$0_1 | 0]($4_1);
  $2_1 = HEAPU8[$1_1 + 15 | 0];
  $5_1 = $2_1 << 24 >> 24;
  $0_1 = ($5_1 | 0) < 0;
  $2_1 = $0_1 ? HEAP32[$1_1 + 8 >> 2] : $2_1 & 127;
  $3 = $1755($2_1 + 4 | 0);
  HEAP32[$3 >> 2] = $2_1;
  $6_1 = HEAP32[$1_1 + 4 >> 2];
  $1602($3 + 4 | 0, $0_1 ? $6_1 : $4_1, $2_1);
  if (($5_1 | 0) < 0) {
   $1756($6_1)
  }
  global$0 = $1_1 + 16 | 0;
  return $3 | 0;
 }
 
 function $1200($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = $1697(16215);
  if ($1_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($1_1 >>> 0 <= 10) {
     HEAP8[$0_1 + 11 | 0] = $1_1;
     break label$2;
    }
    $2_1 = ($1_1 | 15) + 1 | 0;
    $3 = $1782($2_1);
    HEAP32[$0_1 + 8 >> 2] = $2_1 | -2147483648;
    HEAP32[$0_1 >> 2] = $3;
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    $0_1 = $3;
   }
   if ($1_1) {
    $1603($0_1, 16215, $1_1)
   }
   HEAP8[$0_1 + $1_1 | 0] = 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1202($0_1) {
  $0_1 = $0_1 | 0;
  $367($0_1);
 }
 
 function $1203($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0);
  if (!$0_1) {
   $0_1 = $50()
  }
  HEAP32[$0_1 + 200 >> 2] = 0;
  HEAP32[$0_1 + 204 >> 2] = 0;
  $1_1 = $0_1 + 248 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 240 | 0;
  HEAP32[$1_1 >> 2] = 1064346583;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 232 | 0;
  HEAP32[$1_1 >> 2] = 1064346583;
  HEAP32[$1_1 + 4 >> 2] = 1064346583;
  $1_1 = $0_1 + 224 | 0;
  HEAP32[$1_1 >> 2] = 1058642330;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 216 | 0;
  HEAP32[$1_1 >> 2] = 1058642330;
  HEAP32[$1_1 + 4 >> 2] = 1058642330;
  $1_1 = $0_1 + 208 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 256 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 288 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1050253722;
  $1_1 = $0_1 + 280 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 272 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065017672;
  $1_1 = $0_1 + 264 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 296 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 304 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 312 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 320 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 328 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 336 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 352 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1059816735;
  $12_1 = $0_1 + 360 | 0;
  $1_1 = $12_1;
  HEAP32[$1_1 >> 2] = 1064682127;
  HEAP32[$1_1 + 4 >> 2] = 1064682127;
  $14 = $0_1 + 368 | 0;
  $1_1 = $14;
  HEAP32[$1_1 >> 2] = 1064682127;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 376 | 0;
  HEAP32[$1_1 >> 2] = 1062333317;
  HEAP32[$1_1 + 4 >> 2] = 1062333317;
  $15_1 = $0_1 + 384 | 0;
  $1_1 = $15_1;
  HEAP32[$1_1 >> 2] = 1062333317;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 392 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 400 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1057132380;
  $1_1 = $0_1 + 408 | 0;
  HEAP32[$1_1 >> 2] = 1063004406;
  HEAP32[$1_1 + 4 >> 2] = 1063004406;
  $1_1 = $0_1 + 416 | 0;
  HEAP32[$1_1 >> 2] = 1063004406;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 424 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065017672;
  $1_1 = $0_1 + 432 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1057467924;
  $1_1 = $0_1 + 440 | 0;
  HEAP32[$1_1 >> 2] = 1060152279;
  HEAP32[$1_1 + 4 >> 2] = 1060152279;
  $1_1 = $0_1 + 448 | 0;
  HEAP32[$1_1 >> 2] = 1060152279;
  HEAP32[$1_1 + 4 >> 2] = 1061997773;
  $1_1 = $0_1 + 456 | 0;
  HEAP32[$1_1 >> 2] = 1056629064;
  HEAP32[$1_1 + 4 >> 2] = 1056629064;
  $1_1 = $0_1 + 464 | 0;
  HEAP32[$1_1 >> 2] = 1056629064;
  HEAP32[$1_1 + 4 >> 2] = 1061997773;
  $1_1 = $0_1 + 472 | 0;
  HEAP32[$1_1 >> 2] = 1056629064;
  HEAP32[$1_1 + 4 >> 2] = 1056629064;
  $1_1 = $0_1 + 480 | 0;
  HEAP32[$1_1 >> 2] = 1056629064;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 488 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 496 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 504 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 512 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1061662228;
  $1_1 = $0_1 + 520 | 0;
  HEAP32[$1_1 >> 2] = 1055622431;
  HEAP32[$1_1 + 4 >> 2] = 1057635697;
  $1_1 = $0_1 + 528 | 0;
  HEAP32[$1_1 >> 2] = 1061997773;
  HEAP32[$1_1 + 4 >> 2] = 1058642330;
  $1_1 = $0_1 + 536 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 544 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 552 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $1_1 = $0_1 + 560 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 568 | 0;
  HEAP32[$1_1 >> 2] = 1031127695;
  HEAP32[$1_1 + 4 >> 2] = 1057467924;
  $1_1 = $0_1 + 576 | 0;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 584 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $16_1 = $0_1 + 592 | 0;
  $1_1 = $16_1;
  HEAP32[$1_1 >> 2] = 1065017672;
  HEAP32[$1_1 + 4 >> 2] = 1050589266;
  $1_1 = $0_1 + 600 | 0;
  HEAP32[$1_1 >> 2] = 1048911544;
  HEAP32[$1_1 + 4 >> 2] = 1058474557;
  $9 = $0_1 + 608 | 0;
  HEAP32[$9 >> 2] = 1065017672;
  HEAP32[$9 + 4 >> 2] = 1061997773;
  $2_1 = $0_1 + 616 | 0;
  HEAP32[$2_1 >> 2] = 1048911544;
  HEAP32[$2_1 + 4 >> 2] = 1058474557;
  $2_1 = $0_1 + 624 | 0;
  HEAP32[$2_1 >> 2] = 1065017672;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $3 = $0_1 + 632 | 0;
  HEAP32[$3 >> 2] = 1053273620;
  HEAP32[$3 + 4 >> 2] = 1053273620;
  $3 = $0_1 + 640 | 0;
  HEAP32[$3 >> 2] = 1053273620;
  HEAP32[$3 + 4 >> 2] = 1058977874;
  $3 = $0_1 + 648 | 0;
  HEAP32[$3 >> 2] = 1041194025;
  HEAP32[$3 + 4 >> 2] = 1054951342;
  $3 = $0_1 + 656 | 0;
  HEAP32[$3 >> 2] = 1061997773;
  HEAP32[$3 + 4 >> 2] = 1061662228;
  $3 = $0_1 + 664 | 0;
  HEAP32[$3 >> 2] = 1041194025;
  HEAP32[$3 + 4 >> 2] = 1054951342;
  $3 = $0_1 + 672 | 0;
  HEAP32[$3 >> 2] = 1061997773;
  HEAP32[$3 + 4 >> 2] = 1065353216;
  $3 = $0_1 + 680 | 0;
  HEAP32[$3 >> 2] = 1051931443;
  HEAP32[$3 + 4 >> 2] = 1051931443;
  $3 = $0_1 + 688 | 0;
  HEAP32[$3 >> 2] = 1051931443;
  HEAP32[$3 + 4 >> 2] = 1043207291;
  $3 = $0_1 + 696 | 0;
  HEAP32[$3 >> 2] = 1048911544;
  HEAP32[$3 + 4 >> 2] = 1058474557;
  $3 = $0_1 + 704 | 0;
  HEAP32[$3 >> 2] = 1065017672;
  HEAP32[$3 + 4 >> 2] = 1059816735;
  $3 = $0_1 + 712 | 0;
  HEAP32[$3 >> 2] = 1048911544;
  HEAP32[$3 + 4 >> 2] = 1058474557;
  $3 = $0_1 + 720 | 0;
  HEAP32[$3 >> 2] = 1065017672;
  HEAP32[$3 + 4 >> 2] = 1064514355;
  HEAP32[$0_1 + 728 >> 2] = 1061393793;
  HEAP32[$0_1 + 760 >> 2] = 1058575221;
  $3 = HEAP32[$9 + 4 >> 2];
  $13 = $0_1 + 752 | 0;
  HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$13 + 4 >> 2] = $3;
  $3 = HEAP32[$1_1 + 4 >> 2];
  $13 = $0_1 + 744 | 0;
  HEAP32[$13 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$13 + 4 >> 2] = $3;
  $4_1 = HEAPF32[$0_1 + 388 >> 2];
  $11_1 = HEAPF32[$0_1 + 596 >> 2];
  $11_1 = Math_fround(Math_fround(Math_fround($4_1 - $11_1) * Math_fround(.8999999761581421)) + $11_1);
  HEAPF32[$0_1 + 740 >> 2] = $11_1;
  $5_1 = HEAPF32[$15_1 >> 2];
  $6_1 = HEAPF32[$16_1 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($5_1 - $6_1) * Math_fround(.8999999761581421)) + $6_1);
  HEAPF32[$0_1 + 736 >> 2] = $6_1;
  $7_1 = HEAPF32[$0_1 + 380 >> 2];
  $8 = HEAPF32[$0_1 + 588 >> 2];
  $8 = Math_fround(Math_fround(Math_fround($7_1 - $8) * Math_fround(.8999999761581421)) + $8);
  HEAPF32[$0_1 + 732 >> 2] = $8;
  $10_1 = $4_1;
  $4_1 = HEAPF32[$0_1 + 628 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround($10_1 - $4_1) * Math_fround(.6000000238418579)) + $4_1);
  HEAPF32[$0_1 + 772 >> 2] = $4_1;
  $10_1 = $5_1;
  $5_1 = HEAPF32[$2_1 >> 2];
  $5_1 = Math_fround(Math_fround(Math_fround($10_1 - $5_1) * Math_fround(.6000000238418579)) + $5_1);
  HEAPF32[$0_1 + 768 >> 2] = $5_1;
  $10_1 = $7_1;
  $7_1 = HEAPF32[$0_1 + 620 >> 2];
  $7_1 = Math_fround(Math_fround(Math_fround($10_1 - $7_1) * Math_fround(.6000000238418579)) + $7_1);
  HEAPF32[$0_1 + 764 >> 2] = $7_1;
  $2_1 = $0_1 + 808 | 0;
  HEAP32[$2_1 >> 2] = 1053273620;
  HEAP32[$2_1 + 4 >> 2] = 1053273620;
  $2_1 = $0_1 + 816 | 0;
  HEAP32[$2_1 >> 2] = 1053273620;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 824 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1054615798;
  $2_1 = $0_1 + 832 | 0;
  HEAP32[$2_1 >> 2] = 1051931443;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 840 | 0;
  HEAP32[$2_1 >> 2] = 1063675494;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 848 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 856 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1055286886;
  $2_1 = $0_1 + 864 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 872 | 0;
  HEAP32[$2_1 >> 2] = 1061662228;
  HEAP32[$2_1 + 4 >> 2] = 1063172178;
  $2_1 = $0_1 + 880 | 0;
  HEAP32[$2_1 >> 2] = 1065017672;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 888 | 0;
  HEAP32[$2_1 >> 2] = 1058139013;
  HEAP32[$2_1 + 4 >> 2] = 1058139013;
  $2_1 = $0_1 + 896 | 0;
  HEAP32[$2_1 >> 2] = 1059313418;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 904 | 0;
  HEAP32[$2_1 >> 2] = 1059984507;
  HEAP32[$2_1 + 4 >> 2] = 1059984507;
  $2_1 = $0_1 + 912 | 0;
  HEAP32[$2_1 >> 2] = 1060991140;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $10_1 = HEAPF32[$12_1 >> 2];
  HEAPF32[$0_1 + 776 >> 2] = Math_fround(Math_fround($10_1 + Math_fround(-.7639999985694885)) * Math_fround(.800000011920929)) + Math_fround(.7639999985694885);
  $17_1 = HEAPF32[$0_1 + 364 >> 2];
  HEAPF32[$0_1 + 780 >> 2] = Math_fround(Math_fround($17_1 - $8) * Math_fround(.800000011920929)) + $8;
  $8 = HEAPF32[$14 >> 2];
  HEAPF32[$0_1 + 784 >> 2] = Math_fround(Math_fround($8 - $6_1) * Math_fround(.800000011920929)) + $6_1;
  $6_1 = HEAPF32[$0_1 + 372 >> 2];
  HEAPF32[$0_1 + 788 >> 2] = Math_fround(Math_fround($6_1 - $11_1) * Math_fround(.800000011920929)) + $11_1;
  HEAPF32[$0_1 + 792 >> 2] = Math_fround(Math_fround($10_1 + Math_fround(-.5960000157356262)) * Math_fround(.4000000059604645)) + Math_fround(.5960000157356262);
  HEAPF32[$0_1 + 796 >> 2] = Math_fround(Math_fround($17_1 - $7_1) * Math_fround(.4000000059604645)) + $7_1;
  HEAPF32[$0_1 + 800 >> 2] = Math_fround(Math_fround($8 - $5_1) * Math_fround(.4000000059604645)) + $5_1;
  HEAPF32[$0_1 + 804 >> 2] = Math_fround(Math_fround($6_1 - $4_1) * Math_fround(.4000000059604645)) + $4_1;
  $2_1 = $0_1 + 928 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 920 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 976 | 0;
  HEAP32[$2_1 >> 2] = 1065017672;
  HEAP32[$2_1 + 4 >> 2] = 1064514355;
  $2_1 = $0_1 + 968 | 0;
  HEAP32[$2_1 >> 2] = 1048911544;
  HEAP32[$2_1 + 4 >> 2] = 1058474557;
  $2_1 = $0_1 + 960 | 0;
  HEAP32[$2_1 >> 2] = 1065017672;
  HEAP32[$2_1 + 4 >> 2] = 1051931443;
  $2_1 = $0_1 + 952 | 0;
  HEAP32[$2_1 >> 2] = 1048911544;
  HEAP32[$2_1 + 4 >> 2] = 1058474557;
  $2_1 = $0_1 + 944 | 0;
  HEAP32[$2_1 >> 2] = 1050253722;
  HEAP32[$2_1 + 4 >> 2] = 1035489772;
  $2_1 = $0_1 + 936 | 0;
  HEAP32[$2_1 >> 2] = 1050253722;
  HEAP32[$2_1 + 4 >> 2] = 1050253722;
  $2_1 = $0_1 + 1e3 | 0;
  HEAP32[$2_1 >> 2] = 1060320051;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 1008 | 0;
  HEAP32[$2_1 >> 2] = 1060320051;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 1016 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0_1 + 1024 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0_1 + 1032 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0_1 + 1040 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1051931443;
  $2_1 = HEAP32[$9 + 4 >> 2];
  $12_1 = $0_1 + 992 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $2_1;
  $9 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 984 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $9;
 }
 
 function $1204($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0);
  if (!$0_1) {
   $0_1 = $50()
  }
  HEAP32[$0_1 + 200 >> 2] = 1063675494;
  HEAP32[$0_1 + 204 >> 2] = 1063675494;
  $1_1 = $0_1 + 248 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 240 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 1062836634;
  $1_1 = $0_1 + 232 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 224 | 0;
  HEAP32[$1_1 >> 2] = 1058642330;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 216 | 0;
  HEAP32[$1_1 >> 2] = 1058642330;
  HEAP32[$1_1 + 4 >> 2] = 1058642330;
  $1_1 = $0_1 + 208 | 0;
  HEAP32[$1_1 >> 2] = 1063675494;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 256 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 288 | 0;
  HEAP32[$1_1 >> 2] = 1056964608;
  HEAP32[$1_1 + 4 >> 2] = 1056964608;
  $1_1 = $0_1 + 280 | 0;
  HEAP32[$1_1 >> 2] = 1056964608;
  HEAP32[$1_1 + 4 >> 2] = 1056964608;
  $1_1 = $0_1 + 272 | 0;
  HEAP32[$1_1 >> 2] = 1041194025;
  HEAP32[$1_1 + 4 >> 2] = 1064011039;
  $1_1 = $0_1 + 264 | 0;
  HEAP32[$1_1 >> 2] = 1038174126;
  HEAP32[$1_1 + 4 >> 2] = 1038174126;
  $1_1 = $0_1 + 296 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 304 | 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $1_1 = $0_1 + 312 | 0;
  HEAP32[$1_1 >> 2] = 1054615798;
  HEAP32[$1_1 + 4 >> 2] = 1054615798;
  $1_1 = $0_1 + 320 | 0;
  HEAP32[$1_1 >> 2] = 1054615798;
  HEAP32[$1_1 + 4 >> 2] = 1053273620;
  $1_1 = $0_1 + 328 | 0;
  HEAP32[$1_1 >> 2] = 1055957975;
  HEAP32[$1_1 + 4 >> 2] = 1055957975;
  $1_1 = $0_1 + 336 | 0;
  HEAP32[$1_1 >> 2] = 1060152279;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = 1054280253;
  HEAP32[$1_1 + 4 >> 2] = 1053944709;
  $1_1 = $0_1 + 352 | 0;
  HEAP32[$1_1 >> 2] = 1059313418;
  HEAP32[$1_1 + 4 >> 2] = 1060152279;
  $12_1 = $0_1 + 360 | 0;
  $1_1 = $12_1;
  HEAP32[$1_1 >> 2] = 1049247089;
  HEAP32[$1_1 + 4 >> 2] = 1049247089;
  $14 = $0_1 + 368 | 0;
  $1_1 = $14;
  HEAP32[$1_1 >> 2] = 1057635697;
  HEAP32[$1_1 + 4 >> 2] = 1062501089;
  $1_1 = $0_1 + 376 | 0;
  HEAP32[$1_1 >> 2] = 1050924810;
  HEAP32[$1_1 + 4 >> 2] = 1050924810;
  $15_1 = $0_1 + 384 | 0;
  $1_1 = $15_1;
  HEAP32[$1_1 >> 2] = 1059145646;
  HEAP32[$1_1 + 4 >> 2] = 1063172178;
  $1_1 = $0_1 + 392 | 0;
  HEAP32[$1_1 >> 2] = 1053609165;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 400 | 0;
  HEAP32[$1_1 >> 2] = 1061997773;
  HEAP32[$1_1 + 4 >> 2] = 1045220557;
  $1_1 = $0_1 + 408 | 0;
  HEAP32[$1_1 >> 2] = 1053609165;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 416 | 0;
  HEAP32[$1_1 >> 2] = 1057803469;
  HEAP32[$1_1 + 4 >> 2] = 1061997773;
  $1_1 = $0_1 + 424 | 0;
  HEAP32[$1_1 >> 2] = 1045220557;
  HEAP32[$1_1 + 4 >> 2] = 1048576e3;
  $1_1 = $0_1 + 432 | 0;
  HEAP32[$1_1 >> 2] = 1050253722;
  HEAP32[$1_1 + 4 >> 2] = 1058642330;
  $1_1 = $0_1 + 440 | 0;
  HEAP32[$1_1 >> 2] = 1053609165;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 448 | 0;
  HEAP32[$1_1 >> 2] = 1061997773;
  HEAP32[$1_1 + 4 >> 2] = 1050253722;
  $1_1 = $0_1 + 456 | 0;
  HEAP32[$1_1 >> 2] = 1053609165;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 464 | 0;
  HEAP32[$1_1 >> 2] = 1061997773;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 472 | 0;
  HEAP32[$1_1 >> 2] = 1053944709;
  HEAP32[$1_1 + 4 >> 2] = 1053273620;
  $1_1 = $0_1 + 480 | 0;
  HEAP32[$1_1 >> 2] = 1061997773;
  HEAP32[$1_1 + 4 >> 2] = 1058642330;
  $1_1 = $0_1 + 488 | 0;
  HEAP32[$1_1 >> 2] = 1063675494;
  HEAP32[$1_1 + 4 >> 2] = 1063675494;
  $1_1 = $0_1 + 496 | 0;
  HEAP32[$1_1 >> 2] = 1063675494;
  HEAP32[$1_1 + 4 >> 2] = 1056964608;
  $1_1 = $0_1 + 504 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 512 | 0;
  HEAP32[$1_1 >> 2] = 1065353216;
  HEAP32[$1_1 + 4 >> 2] = 1050253722;
  $1_1 = $0_1 + 520 | 0;
  HEAP32[$1_1 >> 2] = 1053944709;
  HEAP32[$1_1 + 4 >> 2] = 1053273620;
  $1_1 = $0_1 + 528 | 0;
  HEAP32[$1_1 >> 2] = 1061997773;
  HEAP32[$1_1 + 4 >> 2] = 1058642330;
  $1_1 = $0_1 + 536 | 0;
  HEAP32[$1_1 >> 2] = 1051931443;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $1_1 = $0_1 + 544 | 0;
  HEAP32[$1_1 >> 2] = 1058810102;
  HEAP32[$1_1 + 4 >> 2] = 1058977874;
  $1_1 = $0_1 + 552 | 0;
  HEAP32[$1_1 >> 2] = 1053609165;
  HEAP32[$1_1 + 4 >> 2] = 1056293519;
  $1_1 = $0_1 + 560 | 0;
  HEAP32[$1_1 >> 2] = 1060487823;
  HEAP32[$1_1 + 4 >> 2] = 1061830001;
  $1_1 = $0_1 + 568 | 0;
  HEAP32[$1_1 >> 2] = 1055622431;
  HEAP32[$1_1 + 4 >> 2] = 1057635697;
  $1_1 = $0_1 + 576 | 0;
  HEAP32[$1_1 >> 2] = 1061997773;
  HEAP32[$1_1 + 4 >> 2] = 1065353216;
  $1_1 = $0_1 + 584 | 0;
  HEAP32[$1_1 >> 2] = 1053609165;
  HEAP32[$1_1 + 4 >> 2] = 1053609165;
  $16_1 = $0_1 + 592 | 0;
  $1_1 = $16_1;
  HEAP32[$1_1 >> 2] = 1063675494;
  HEAP32[$1_1 + 4 >> 2] = 1055286886;
  $1_1 = $0_1 + 600 | 0;
  HEAP32[$1_1 >> 2] = 1055286886;
  HEAP32[$1_1 + 4 >> 2] = 1055286886;
  $9 = $0_1 + 608 | 0;
  HEAP32[$9 >> 2] = 1063675494;
  HEAP32[$9 + 4 >> 2] = 1061997773;
  $2_1 = $0_1 + 616 | 0;
  HEAP32[$2_1 >> 2] = 1057467924;
  HEAP32[$2_1 + 4 >> 2] = 1057467924;
  $2_1 = $0_1 + 624 | 0;
  HEAP32[$2_1 >> 2] = 1063172178;
  HEAP32[$2_1 + 4 >> 2] = 1061997773;
  $3 = $0_1 + 632 | 0;
  HEAP32[$3 >> 2] = 1056964608;
  HEAP32[$3 + 4 >> 2] = 1056964608;
  $3 = $0_1 + 640 | 0;
  HEAP32[$3 >> 2] = 1056964608;
  HEAP32[$3 + 4 >> 2] = 1058642330;
  $3 = $0_1 + 648 | 0;
  HEAP32[$3 >> 2] = 1058642330;
  HEAP32[$3 + 4 >> 2] = 1058642330;
  $3 = $0_1 + 656 | 0;
  HEAP32[$3 >> 2] = 1060320051;
  HEAP32[$3 + 4 >> 2] = 1065353216;
  $3 = $0_1 + 664 | 0;
  HEAP32[$3 >> 2] = 1060320051;
  HEAP32[$3 + 4 >> 2] = 1060320051;
  $3 = $0_1 + 672 | 0;
  HEAP32[$3 >> 2] = 1063675494;
  HEAP32[$3 + 4 >> 2] = 1065353216;
  $3 = $0_1 + 680 | 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$3 + 4 >> 2] = 1065353216;
  $3 = $0_1 + 688 | 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$3 + 4 >> 2] = 1036831949;
  $3 = $0_1 + 696 | 0;
  HEAP32[$3 >> 2] = 1061662228;
  HEAP32[$3 + 4 >> 2] = 1062333317;
  $3 = $0_1 + 704 | 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$3 + 4 >> 2] = 1058642330;
  $3 = $0_1 + 712 | 0;
  HEAP32[$3 >> 2] = 1061662228;
  HEAP32[$3 + 4 >> 2] = 1062333317;
  $3 = $0_1 + 720 | 0;
  HEAP32[$3 >> 2] = 1065353216;
  HEAP32[$3 + 4 >> 2] = 1063675494;
  HEAP32[$0_1 + 728 >> 2] = 1051461681;
  HEAP32[$0_1 + 760 >> 2] = 1053743382;
  $3 = HEAP32[$9 + 4 >> 2];
  $13 = $0_1 + 752 | 0;
  HEAP32[$13 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$13 + 4 >> 2] = $3;
  $3 = HEAP32[$1_1 + 4 >> 2];
  $13 = $0_1 + 744 | 0;
  HEAP32[$13 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$13 + 4 >> 2] = $3;
  $4_1 = HEAPF32[$0_1 + 388 >> 2];
  $11_1 = HEAPF32[$0_1 + 596 >> 2];
  $11_1 = Math_fround(Math_fround(Math_fround($4_1 - $11_1) * Math_fround(.800000011920929)) + $11_1);
  HEAPF32[$0_1 + 740 >> 2] = $11_1;
  $5_1 = HEAPF32[$15_1 >> 2];
  $6_1 = HEAPF32[$16_1 >> 2];
  $6_1 = Math_fround(Math_fround(Math_fround($5_1 - $6_1) * Math_fround(.800000011920929)) + $6_1);
  HEAPF32[$0_1 + 736 >> 2] = $6_1;
  $7_1 = HEAPF32[$0_1 + 380 >> 2];
  $8 = HEAPF32[$0_1 + 588 >> 2];
  $8 = Math_fround(Math_fround(Math_fround($7_1 - $8) * Math_fround(.800000011920929)) + $8);
  HEAPF32[$0_1 + 732 >> 2] = $8;
  $10_1 = $4_1;
  $4_1 = HEAPF32[$0_1 + 628 >> 2];
  $4_1 = Math_fround(Math_fround(Math_fround($10_1 - $4_1) * Math_fround(.6000000238418579)) + $4_1);
  HEAPF32[$0_1 + 772 >> 2] = $4_1;
  $10_1 = $5_1;
  $5_1 = HEAPF32[$2_1 >> 2];
  $5_1 = Math_fround(Math_fround(Math_fround($10_1 - $5_1) * Math_fround(.6000000238418579)) + $5_1);
  HEAPF32[$0_1 + 768 >> 2] = $5_1;
  $10_1 = $7_1;
  $7_1 = HEAPF32[$0_1 + 620 >> 2];
  $7_1 = Math_fround(Math_fround(Math_fround($10_1 - $7_1) * Math_fround(.6000000238418579)) + $7_1);
  HEAPF32[$0_1 + 764 >> 2] = $7_1;
  $2_1 = $0_1 + 808 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 816 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 824 | 0;
  HEAP32[$2_1 >> 2] = 1063675494;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 832 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 840 | 0;
  HEAP32[$2_1 >> 2] = 1063675494;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 848 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 856 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1058642330;
  $2_1 = $0_1 + 864 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 872 | 0;
  HEAP32[$2_1 >> 2] = 1049247089;
  HEAP32[$2_1 + 4 >> 2] = 1049247089;
  $2_1 = $0_1 + 880 | 0;
  HEAP32[$2_1 >> 2] = 1052938076;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 888 | 0;
  HEAP32[$2_1 >> 2] = 1050589266;
  HEAP32[$2_1 + 4 >> 2] = 1050589266;
  $2_1 = $0_1 + 896 | 0;
  HEAP32[$2_1 >> 2] = 1055286886;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 904 | 0;
  HEAP32[$2_1 >> 2] = 1048911544;
  HEAP32[$2_1 + 4 >> 2] = 1048911544;
  $2_1 = $0_1 + 912 | 0;
  HEAP32[$2_1 >> 2] = 1049582633;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $10_1 = HEAPF32[$12_1 >> 2];
  HEAPF32[$0_1 + 776 >> 2] = Math_fround(Math_fround($10_1 + Math_fround(-.335999995470047)) * Math_fround(.800000011920929)) + Math_fround(.335999995470047);
  $17_1 = HEAPF32[$0_1 + 364 >> 2];
  HEAPF32[$0_1 + 780 >> 2] = Math_fround(Math_fround($17_1 - $8) * Math_fround(.800000011920929)) + $8;
  $8 = HEAPF32[$14 >> 2];
  HEAPF32[$0_1 + 784 >> 2] = Math_fround(Math_fround($8 - $6_1) * Math_fround(.800000011920929)) + $6_1;
  $6_1 = HEAPF32[$0_1 + 372 >> 2];
  HEAPF32[$0_1 + 788 >> 2] = Math_fround(Math_fround($6_1 - $11_1) * Math_fround(.800000011920929)) + $11_1;
  HEAPF32[$0_1 + 792 >> 2] = Math_fround(Math_fround($10_1 + Math_fround(-.4039999842643738)) * Math_fround(.4000000059604645)) + Math_fround(.4039999842643738);
  HEAPF32[$0_1 + 796 >> 2] = Math_fround(Math_fround($17_1 - $7_1) * Math_fround(.4000000059604645)) + $7_1;
  HEAPF32[$0_1 + 800 >> 2] = Math_fround(Math_fround($8 - $5_1) * Math_fround(.4000000059604645)) + $5_1;
  HEAPF32[$0_1 + 804 >> 2] = Math_fround(Math_fround($6_1 - $4_1) * Math_fround(.4000000059604645)) + $4_1;
  $2_1 = $0_1 + 928 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 920 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 976 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 1063675494;
  $2_1 = $0_1 + 968 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 960 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1051931443;
  $2_1 = $0_1 + 952 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $2_1 = $0_1 + 944 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1032805417;
  $2_1 = $0_1 + 936 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 1e3 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1065353216;
  $2_1 = $0_1 + 1008 | 0;
  HEAP32[$2_1 >> 2] = 1065353216;
  HEAP32[$2_1 + 4 >> 2] = 1060320051;
  $2_1 = $0_1 + 1016 | 0;
  HEAP32[$2_1 >> 2] = 1061997773;
  HEAP32[$2_1 + 4 >> 2] = 1061997773;
  $2_1 = $0_1 + 1024 | 0;
  HEAP32[$2_1 >> 2] = 1061997773;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0_1 + 1032 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1045220557;
  $2_1 = $0_1 + 1040 | 0;
  HEAP32[$2_1 >> 2] = 1045220557;
  HEAP32[$2_1 + 4 >> 2] = 1051931443;
  $2_1 = HEAP32[$9 + 4 >> 2];
  $12_1 = $0_1 + 992 | 0;
  HEAP32[$12_1 >> 2] = HEAP32[$9 >> 2];
  HEAP32[$12_1 + 4 >> 2] = $2_1;
  $9 = HEAP32[$1_1 + 4 >> 2];
  $0_1 = $0_1 + 984 | 0;
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $9;
 }
 
 function $1205($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2];
  if ($5_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($5_1 >>> 0 <= 10) {
     HEAP8[$4_1 + 15 | 0] = $5_1;
     $6_1 = $4_1 + 4 | 0;
     break label$2;
    }
    $7_1 = ($5_1 | 15) + 1 | 0;
    $6_1 = $1782($7_1);
    HEAP32[$4_1 + 12 >> 2] = $7_1 | -2147483648;
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
   }
   if ($5_1) {
    $1602($6_1, $1_1 + 4 | 0, $5_1)
   }
   HEAP8[$5_1 + $6_1 | 0] = 0;
   HEAP32[$4_1 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($4_1 + 4 | 0, $4_1, $3) | 0;
   fimport$4(HEAP32[$4_1 >> 2]);
   if (HEAP8[$4_1 + 15 | 0] < 0) {
    $1756(HEAP32[$4_1 + 4 >> 2])
   }
   global$0 = $4_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1206($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $0_1 = $1488($3 + 12 | 0, $1_1);
  $1_1 = $143($4_1, HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2] != 2 ? $0_1 + 4 | 0 : 0, $2_1);
  HEAP32[$0_1 >> 2] = 52584;
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  if (HEAP32[$2_1 >> 2] != 2) {
   HEAP32[$3 + 24 >> 2] = HEAPU8[$0_1 + 4 | 0];
   $5_1 = $3 + 24 | 0;
   $0_1 = fimport$1(72652, $5_1 | 0) | 0;
   $2_1 = HEAP32[$2_1 >> 2];
   HEAP32[$3 + 24 >> 2] = 0;
   $4_1 = $2_1;
   $2_1 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($4_1 | 0, $2_1 | 0, $0_1 | 0);
   fimport$4($2_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $3 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1207($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = $2_1;
  HEAP32[$5_1 + 12 >> 2] = $1_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($5_1 + 12 | 0, $5_1 + 8 | 0, $3, $4_1) | 0;
  fimport$4(HEAP32[$5_1 + 8 >> 2]);
  fimport$4(HEAP32[$5_1 + 12 >> 2]);
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1208($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0.0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $4_1 = fimport$20(HEAP32[$0_1 >> 2]) | 0;
  $6_1 = fimport$2(8915) | 0;
  $7_1 = fimport$8($4_1 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  fimport$4($4_1 | 0);
  label$1 : {
   label$2 : {
    if ($7_1) {
     $8 = +fimport$5(HEAP32[$0_1 >> 2], 49072, $5_1 + 12 | 0);
     label$4 : {
      if ($8 < 4294967296.0 & $8 >= 0.0) {
       $6_1 = ~~$8 >>> 0;
       break label$4;
      }
      $6_1 = 0;
     }
     $4_1 = HEAP32[$6_1 >> 2];
     if ($4_1 >>> 0 >= 2147483632) {
      break label$1
     }
     $7_1 = HEAP32[$5_1 + 12 >> 2];
     label$6 : {
      if ($4_1 >>> 0 <= 10) {
       HEAP8[$5_1 + 31 | 0] = $4_1;
       $0_1 = $5_1 + 20 | 0;
       break label$6;
      }
      $9 = ($4_1 | 15) + 1 | 0;
      $0_1 = $1782($9);
      HEAP32[$5_1 + 28 >> 2] = $9 | -2147483648;
      HEAP32[$5_1 + 20 >> 2] = $0_1;
      HEAP32[$5_1 + 24 >> 2] = $4_1;
     }
     if ($4_1) {
      $1602($0_1, $6_1 + 4 | 0, $4_1)
     }
     HEAP8[$0_1 + $4_1 | 0] = 0;
     fimport$6($7_1 | 0);
     $0_1 = HEAP32[$5_1 + 20 >> 2];
     $4_1 = HEAP8[$5_1 + 31 | 0];
     HEAP32[$5_1 + 12 >> 2] = 0;
     HEAP32[$5_1 + 16 >> 2] = 0;
     $11_1 = $763($1_1, $5_1 + 12 | 0);
     $6_1 = HEAP32[18392];
     $1_1 = HEAP32[$6_1 + 7080 >> 2];
     HEAP8[$1_1 + 140 | 0] = 1;
     $9 = ($4_1 | 0) < 0 ? $0_1 : $5_1 + 20 | 0;
     $0_1 = $9;
     $10_1 = HEAP32[(HEAP32[$1_1 + 204 >> 2] + (HEAP32[$1_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
     $4_1 = $10_1;
     while (1) {
      $1_1 = $0_1;
      $0_1 = $0_1 + 1 | 0;
      $7_1 = HEAPU8[$1_1 | 0];
      if ($7_1) {
       $4_1 = ($7_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $4_1 : HEAPU8[$1_1 + 2 | 0] == 35 ? $10_1 : $4_1;
       $4_1 = HEAP32[(($7_1 ^ $4_1 & 255) << 2) + 19360 >> 2] ^ $4_1 >>> 8;
      }
      if ($7_1) {
       continue
      }
      break;
     };
     $0_1 = $4_1 ^ -1;
     if (($0_1 | 0) == HEAP32[$6_1 + 7136 >> 2]) {
      HEAP32[$6_1 + 7140 >> 2] = $0_1
     }
     if (HEAP32[$6_1 + 7196 >> 2] == ($0_1 | 0)) {
      HEAP8[$6_1 + 7200 | 0] = 1
     }
     if (HEAP32[$6_1 + 7112 >> 2] == ($0_1 | 0)) {
      $75($0_1, 11, $9)
     }
     $0_1 = $207($9, $0_1, $11_1, $2_1, $3);
     if (HEAP8[$5_1 + 31 | 0] < 0) {
      $1756(HEAP32[$5_1 + 20 >> 2])
     }
     break label$2;
    }
    $4_1 = HEAP32[$0_1 >> 2];
    $0_1 = $5_1 + 20 | 0;
    $8 = +fimport$5($4_1 | 0, 72736, $0_1 | 0);
    fimport$6(HEAP32[$5_1 + 20 >> 2]);
    HEAP32[$5_1 + 20 >> 2] = 0;
    HEAP32[$5_1 + 24 >> 2] = 0;
    $0_1 = $207(0, $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0, $763($1_1, $0_1), $2_1, $3);
   }
   global$0 = $5_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1210($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$2_1 + 580 >> 2];
  HEAP32[$0_1 >> 2] = fimport$1(49796, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1211($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  FUNCTION_TABLE[$0_1 | 0]($2_1 + 12 | 0, $2_1 + 8 | 0);
  fimport$10(HEAP32[$2_1 + 12 >> 2]);
  $0_1 = HEAP32[$2_1 + 12 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$2_1 + 8 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1212($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $5_1 = HEAP32[$4_1 + 16 >> 2];
  $3 = $2_1 + 8 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4_1 + 12 >> 2];
  HEAP32[$3 + 4 >> 2] = $5_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1213($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $5_1 = HEAP32[$4_1 + 24 >> 2];
  $3 = $2_1 + 8 | 0;
  HEAP32[$3 >> 2] = HEAP32[$4_1 + 20 >> 2];
  HEAP32[$3 + 4 >> 2] = $5_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1214($0_1) {
  $0_1 = $0_1 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0_1 | 0]()));
 }
 
 function $1215($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $3;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  FUNCTION_TABLE[$0_1 | 0]($4_1 + 12 | 0, $2_1, $4_1 + 8 | 0);
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1216($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  $0_1 = $763($0_1, $3 + 8 | 0);
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $250($0_1, $1_1, $763($2_1, $3));
  global$0 = $3 + 16 | 0;
 }
 
 function $1217($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $2_1);
  fimport$4(HEAP32[$3 + 12 >> 2]);
  global$0 = $3 + 16 | 0;
 }
 
 function $1218($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $145($763($0_1, $2_1 + 8 | 0), $1_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1219($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 8 >> 2] = $2_1;
  HEAP32[$5_1 + 12 >> 2] = $1_1;
  HEAP32[$5_1 + 4 >> 2] = $3;
  HEAP32[$5_1 >> 2] = $4_1;
  FUNCTION_TABLE[$0_1 | 0]($5_1 + 12 | 0, $5_1 + 8 | 0, $5_1 + 4 | 0, $5_1);
  fimport$4(HEAP32[$5_1 >> 2]);
  fimport$4(HEAP32[$5_1 + 4 >> 2]);
  fimport$4(HEAP32[$5_1 + 8 >> 2]);
  fimport$4(HEAP32[$5_1 + 12 >> 2]);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1220($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$2_1 >> 2];
  label$1 : {
   if (($4_1 | 0) != 2) {
    $5_1 = HEAP32[23915];
    fimport$10($4_1 | 0);
    fimport$4(HEAP32[$5_1 + 76 >> 2]);
    HEAP32[$5_1 + 76 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$3 + 8 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = 0;
    $0_1 = $763($0_1, $3 + 8 | 0);
    HEAP32[$3 >> 2] = 0;
    HEAP32[$3 + 4 >> 2] = 0;
    $251($0_1, $763($1_1, $3), 866);
    break label$1;
   }
   HEAP32[$3 + 8 >> 2] = 0;
   HEAP32[$3 + 12 >> 2] = 0;
   $0_1 = $763($0_1, $3 + 8 | 0);
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   $251($0_1, $763($1_1, $3), 0);
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $1221($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $252($763($0_1, $1_1 + 8 | 0));
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1222($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1);
 }
 
 function $1223($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  FUNCTION_TABLE[$0_1 | 0]($1_1);
 }
 
 function $1224($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $5_1 = $763($0_1, $4_1 + 8 | 0);
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  if (!$1_1 | HEAP8[$0_1 + 176 | 0] & $1_1) {
   HEAP32[$0_1 + 180 >> 2] = 2139095039;
   HEAP32[$0_1 + 184 >> 2] = 2139095039;
   HEAP32[$0_1 + 176 >> 2] = HEAP32[$0_1 + 176 >> 2] & -15;
   $1_1 = $0_1 + 16 | 0;
   $3 = HEAPF32[$1_1 >> 2];
   $2_1 = HEAPF32[$5_1 >> 2];
   $6_1 = HEAPF32[$5_1 + 4 >> 2];
   label$3 : {
    if (Math_fround(Math_abs($6_1)) < Math_fround(2147483648.0)) {
     $5_1 = ~~$6_1;
     break label$3;
    }
    $5_1 = -2147483648;
   }
   $6_1 = Math_fround($5_1 | 0);
   HEAPF32[$1_1 >> 2] = $6_1;
   $7_1 = HEAPF32[$0_1 + 12 >> 2];
   $2_1 = Math_fround((Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0) ? ~~$2_1 : -2147483648) | 0);
   HEAPF32[$0_1 + 12 >> 2] = $2_1;
   $2_1 = Math_fround($2_1 - $7_1);
   HEAPF32[$0_1 + 208 >> 2] = $2_1 + HEAPF32[$0_1 + 208 >> 2];
   $1_1 = $0_1 + 212 | 0;
   $3 = Math_fround($6_1 - $3);
   HEAPF32[$1_1 >> 2] = $3 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 232 | 0;
   HEAPF32[$1_1 >> 2] = $2_1 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 236 | 0;
   HEAPF32[$1_1 >> 2] = $3 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 240 | 0;
   HEAPF32[$1_1 >> 2] = $2_1 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 244 | 0;
   HEAPF32[$1_1 >> 2] = $3 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 224 | 0;
   HEAPF32[$1_1 >> 2] = $2_1 + HEAPF32[$1_1 >> 2];
   $0_1 = $0_1 + 228 | 0;
   HEAPF32[$0_1 >> 2] = $3 + HEAPF32[$0_1 >> 2];
  }
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1225($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  $0_1 = $763($0_1, $3 + 8 | 0);
  $4_1 = !$1_1;
  $5_1 = $1_1;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  if ($4_1 | $5_1 & HEAP32[$1_1 + 176 >> 2] << 16 >> 24) {
   __inlined_func$242 : {
    HEAP32[$1_1 + 176 >> 2] = HEAP32[$1_1 + 176 >> 2] & -3585;
    $2_1 = HEAPF32[$0_1 >> 2];
    label$3 : {
     if ($2_1 > Math_fround(0.0)) {
      HEAP8[$1_1 + 164 | 0] = 0;
      HEAPF32[$1_1 + 28 >> 2] = (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0) ? ~~$2_1 : -2147483648) | 0;
      break label$3;
     }
     HEAP8[$1_1 + 167 | 0] = 0;
     HEAP8[$1_1 + 164 | 0] = 2;
    }
    $2_1 = HEAPF32[$0_1 + 4 >> 2];
    if ($2_1 > Math_fround(0.0)) {
     HEAP8[$1_1 + 165 | 0] = 0;
     HEAPF32[$1_1 + 32 >> 2] = (Math_fround(Math_abs($2_1)) < Math_fround(2147483648.0) ? ~~$2_1 : -2147483648) | 0;
     break __inlined_func$242;
    }
    HEAP8[$1_1 + 167 | 0] = 0;
    HEAP8[$1_1 + 165 | 0] = 2;
   }
  }
  global$0 = $3 + 16 | 0;
 }
 
 function $1226($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = !$1_1;
  $3 = $1_1;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  if ($2_1 | $3 & HEAP32[$1_1 + 176 >> 2] << 8 >> 24) {
   HEAP8[$1_1 + 141 | 0] = $0_1;
   HEAP32[$1_1 + 176 >> 2] = HEAP32[$1_1 + 176 >> 2] & -917505;
  }
 }
 
 function $1227() {
  $125(HEAP32[HEAP32[18392] + 7080 >> 2]);
 }
 
 function $1228($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2];
  if ($5_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($5_1 >>> 0 <= 10) {
     HEAP8[$4_1 + 15 | 0] = $5_1;
     $6_1 = $4_1 + 4 | 0;
     break label$2;
    }
    $7_1 = ($5_1 | 15) + 1 | 0;
    $6_1 = $1782($7_1);
    HEAP32[$4_1 + 12 >> 2] = $7_1 | -2147483648;
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
   }
   if ($5_1) {
    $1602($6_1, $1_1 + 4 | 0, $5_1)
   }
   HEAP8[$5_1 + $6_1 | 0] = 0;
   HEAP32[$4_1 >> 2] = $2_1;
   FUNCTION_TABLE[$0_1 | 0]($4_1 + 4 | 0, $4_1, $3);
   fimport$4(HEAP32[$4_1 >> 2]);
   if (HEAP8[$4_1 + 15 | 0] < 0) {
    $1756(HEAP32[$4_1 + 4 >> 2])
   }
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1229($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0), $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0);
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $3 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  $10_1 = $763($1_1, $7_1 + 8 | 0);
  $0_1 = ($5_1 | 0) < 0 ? $3 : $0_1;
  $3 = -1;
  while (1) {
   $1_1 = $0_1;
   $0_1 = $0_1 + 1 | 0;
   $5_1 = HEAPU8[$1_1 | 0];
   if ($5_1) {
    $3 = ($5_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $3 : HEAPU8[$1_1 + 2 | 0] == 35 ? -1 : $3;
    $3 = HEAP32[(($5_1 ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
   }
   if ($5_1) {
    continue
   }
   break;
  };
  $5_1 = $3 ^ -1;
  $1_1 = HEAP32[18392];
  $11_1 = HEAP32[$1_1 + 7064 >> 2];
  $0_1 = $11_1;
  $3 = HEAP32[$1_1 + 7056 >> 2];
  if ($3) {
   $1_1 = $3;
   while (1) {
    $9 = $1_1 >>> 1 | 0;
    $12_1 = ($9 << 3) + $0_1 | 0;
    $13 = HEAPU32[$12_1 >> 2] < $5_1 >>> 0;
    $0_1 = $13 ? $12_1 + 8 | 0 : $0_1;
    $1_1 = $13 ? $1_1 + ($9 ^ -1) | 0 : $9;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  $1_1 = 0;
  label$9 : {
   if ((($3 << 3) + $11_1 | 0) == ($0_1 | 0)) {
    break label$9
   }
   $1_1 = 0;
   if (HEAP32[$0_1 >> 2] != ($5_1 | 0)) {
    break label$9
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $0_1 = $1_1;
  if (!(!$0_1 | !(!$2_1 | HEAP8[$0_1 + 176 | 0] & $2_1))) {
   HEAP32[$0_1 + 180 >> 2] = 2139095039;
   HEAP32[$0_1 + 184 >> 2] = 2139095039;
   HEAP32[$0_1 + 176 >> 2] = HEAP32[$0_1 + 176 >> 2] & -15;
   $1_1 = $0_1 + 16 | 0;
   $6_1 = HEAPF32[$1_1 >> 2];
   $4_1 = HEAPF32[$10_1 >> 2];
   $8 = HEAPF32[$10_1 + 4 >> 2];
   label$13 : {
    if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
     $2_1 = ~~$8;
     break label$13;
    }
    $2_1 = -2147483648;
   }
   $8 = Math_fround($2_1 | 0);
   HEAPF32[$1_1 >> 2] = $8;
   $14 = HEAPF32[$0_1 + 12 >> 2];
   $4_1 = Math_fround((Math_fround(Math_abs($4_1)) < Math_fround(2147483648.0) ? ~~$4_1 : -2147483648) | 0);
   HEAPF32[$0_1 + 12 >> 2] = $4_1;
   $4_1 = Math_fround($4_1 - $14);
   HEAPF32[$0_1 + 208 >> 2] = $4_1 + HEAPF32[$0_1 + 208 >> 2];
   $1_1 = $0_1 + 212 | 0;
   $6_1 = Math_fround($8 - $6_1);
   HEAPF32[$1_1 >> 2] = $6_1 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 232 | 0;
   HEAPF32[$1_1 >> 2] = $4_1 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 236 | 0;
   HEAPF32[$1_1 >> 2] = $6_1 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 240 | 0;
   HEAPF32[$1_1 >> 2] = $4_1 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 244 | 0;
   HEAPF32[$1_1 >> 2] = $6_1 + HEAPF32[$1_1 >> 2];
   $1_1 = $0_1 + 224 | 0;
   HEAPF32[$1_1 >> 2] = $4_1 + HEAPF32[$1_1 >> 2];
   $0_1 = $0_1 + 228 | 0;
   HEAPF32[$0_1 >> 2] = $6_1 + HEAPF32[$0_1 >> 2];
  }
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1230($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $4_1 = HEAP32[$0_1 >> 2];
  $3 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $8 = $763($1_1, $6_1 + 8 | 0);
  $0_1 = ($3 | 0) < 0 ? $4_1 : $0_1;
  $1_1 = -1;
  while (1) {
   $4_1 = $0_1;
   $0_1 = $0_1 + 1 | 0;
   $3 = HEAPU8[$4_1 | 0];
   if ($3) {
    $1_1 = ($3 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $1_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? -1 : $1_1;
    $1_1 = HEAP32[(($3 ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $3 = $1_1 ^ -1;
  $1_1 = HEAP32[18392];
  $9 = HEAP32[$1_1 + 7064 >> 2];
  $0_1 = $9;
  $4_1 = HEAP32[$1_1 + 7056 >> 2];
  if ($4_1) {
   $1_1 = $4_1;
   while (1) {
    $7_1 = $1_1 >>> 1 | 0;
    $10_1 = ($7_1 << 3) + $0_1 | 0;
    $11_1 = HEAPU32[$10_1 >> 2] < $3 >>> 0;
    $0_1 = $11_1 ? $10_1 + 8 | 0 : $0_1;
    $1_1 = $11_1 ? $1_1 + ($7_1 ^ -1) | 0 : $7_1;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  $1_1 = 0;
  label$9 : {
   if ((($4_1 << 3) + $9 | 0) == ($0_1 | 0)) {
    break label$9
   }
   $1_1 = 0;
   if (HEAP32[$0_1 >> 2] != ($3 | 0)) {
    break label$9
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $0_1 = $1_1;
  if (!(!$0_1 | !(!$2_1 | HEAP32[$0_1 + 176 >> 2] << 16 >> 24 & $2_1))) {
   __inlined_func$243 : {
    HEAP32[$0_1 + 176 >> 2] = HEAP32[$0_1 + 176 >> 2] & -3585;
    $5_1 = HEAPF32[$8 >> 2];
    label$13 : {
     if ($5_1 > Math_fround(0.0)) {
      HEAP8[$0_1 + 164 | 0] = 0;
      HEAPF32[$0_1 + 28 >> 2] = (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0) ? ~~$5_1 : -2147483648) | 0;
      break label$13;
     }
     HEAP8[$0_1 + 167 | 0] = 0;
     HEAP8[$0_1 + 164 | 0] = 2;
    }
    $5_1 = HEAPF32[$8 + 4 >> 2];
    if ($5_1 > Math_fround(0.0)) {
     HEAP8[$0_1 + 165 | 0] = 0;
     HEAPF32[$0_1 + 32 >> 2] = (Math_fround(Math_abs($5_1)) < Math_fround(2147483648.0) ? ~~$5_1 : -2147483648) | 0;
     break __inlined_func$243;
    }
    HEAP8[$0_1 + 167 | 0] = 0;
    HEAP8[$0_1 + 165 | 0] = 2;
   }
  }
  global$0 = $6_1 + 16 | 0;
 }
 
 function $1231($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2];
  if ($5_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($5_1 >>> 0 <= 10) {
     HEAP8[$4_1 + 15 | 0] = $5_1;
     $6_1 = $4_1 + 4 | 0;
     break label$2;
    }
    $7_1 = ($5_1 | 15) + 1 | 0;
    $6_1 = $1782($7_1);
    HEAP32[$4_1 + 12 >> 2] = $7_1 | -2147483648;
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
   }
   if ($5_1) {
    $1602($6_1, $1_1 + 4 | 0, $5_1)
   }
   HEAP8[$5_1 + $6_1 | 0] = 0;
   FUNCTION_TABLE[$0_1 | 0]($4_1 + 4 | 0, $2_1, $3);
   if (HEAP8[$4_1 + 15 | 0] < 0) {
    $1756(HEAP32[$4_1 + 4 >> 2])
   }
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1232($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $9 = $1_1;
  $0_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $1_1 = -1;
  while (1) {
   $4_1 = $0_1;
   $0_1 = $0_1 + 1 | 0;
   $3 = HEAPU8[$4_1 | 0];
   if ($3) {
    $1_1 = ($3 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $1_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? -1 : $1_1;
    $1_1 = HEAP32[(($3 ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
   }
   if ($3) {
    continue
   }
   break;
  };
  $3 = $1_1 ^ -1;
  $1_1 = HEAP32[18392];
  $6_1 = HEAP32[$1_1 + 7064 >> 2];
  $0_1 = $6_1;
  $4_1 = HEAP32[$1_1 + 7056 >> 2];
  if ($4_1) {
   $1_1 = $4_1;
   while (1) {
    $5_1 = $1_1 >>> 1 | 0;
    $7_1 = ($5_1 << 3) + $0_1 | 0;
    $8 = HEAPU32[$7_1 >> 2] < $3 >>> 0;
    $0_1 = $8 ? $7_1 + 8 | 0 : $0_1;
    $1_1 = $8 ? $1_1 + ($5_1 ^ -1) | 0 : $5_1;
    if ($1_1) {
     continue
    }
    break;
   };
  }
  $1_1 = 0;
  label$9 : {
   if (($0_1 | 0) == (($4_1 << 3) + $6_1 | 0)) {
    break label$9
   }
   $1_1 = 0;
   if (HEAP32[$0_1 >> 2] != ($3 | 0)) {
    break label$9
   }
   $1_1 = HEAP32[$0_1 + 4 >> 2];
  }
  $0_1 = $1_1;
  if (!(!$0_1 | !(!$2_1 | HEAP32[$0_1 + 176 >> 2] << 8 >> 24 & $2_1))) {
   HEAP8[$0_1 + 141 | 0] = $9;
   HEAP32[$0_1 + 176 >> 2] = HEAP32[$0_1 + 176 >> 2] & -917505;
  }
 }
 
 function $1233($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  __inlined_func$249 : {
   $0_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
   if ($0_1) {
    $1_1 = -1;
    while (1) {
     $3 = $0_1;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = HEAPU8[$3 | 0];
     if ($2_1) {
      $1_1 = ($2_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $1_1 : HEAPU8[$3 + 2 | 0] == 35 ? -1 : $1_1;
      $1_1 = HEAP32[(($2_1 ^ $1_1 & 255) << 2) + 19360 >> 2] ^ $1_1 >>> 8;
     }
     if ($2_1) {
      continue
     }
     break;
    };
    $2_1 = $1_1 ^ -1;
    $1_1 = HEAP32[18392];
    $5_1 = HEAP32[$1_1 + 7064 >> 2];
    $0_1 = $5_1;
    $3 = HEAP32[$1_1 + 7056 >> 2];
    if ($3) {
     $1_1 = $3;
     while (1) {
      $4_1 = $1_1 >>> 1 | 0;
      $6_1 = ($4_1 << 3) + $0_1 | 0;
      $7_1 = HEAPU32[$6_1 >> 2] < $2_1 >>> 0;
      $0_1 = $7_1 ? $6_1 + 8 | 0 : $0_1;
      $1_1 = $7_1 ? $1_1 + ($4_1 ^ -1) | 0 : $4_1;
      if ($1_1) {
       continue
      }
      break;
     };
    }
    $1_1 = 0;
    label$11 : {
     if (($0_1 | 0) == (($3 << 3) + $5_1 | 0)) {
      break label$11
     }
     $1_1 = 0;
     if (HEAP32[$0_1 >> 2] != ($2_1 | 0)) {
      break label$11
     }
     $1_1 = HEAP32[$0_1 + 4 >> 2];
    }
    $0_1 = $1_1;
    if (!$0_1) {
     break __inlined_func$249
    }
    $125($0_1);
    break __inlined_func$249;
   }
   $125(0);
  }
 }
 
 function $1234($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $2_1 + 8 | 0;
  $208($3);
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1235($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $5_1 = HEAP32[18392];
  $3 = HEAP32[$5_1 + 7080 >> 2];
  $7_1 = HEAPF32[$3 + 520 >> 2];
  $6_1 = HEAPF32[$3 + 12 >> 2];
  $4_1 = $2_1 + 8 | 0;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$3 + 524 >> 2] - HEAPF32[$3 + 16 >> 2];
  HEAPF32[$4_1 >> 2] = $7_1 - $6_1;
  if (HEAP32[$3 + 368 >> 2] | HEAP32[$5_1 + 8036 >> 2]) {
   HEAPF32[$4_1 >> 2] = HEAPF32[$3 + 472 >> 2] - $6_1
  }
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $4_1, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1236($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $5_1 = HEAPF32[$3 + 16 >> 2];
  $6_1 = HEAPF32[$3 + 516 >> 2];
  $4_1 = $2_1 + 8 | 0;
  HEAPF32[$4_1 >> 2] = HEAPF32[$3 + 512 >> 2] - HEAPF32[$3 + 12 >> 2];
  HEAPF32[$4_1 + 4 >> 2] = $6_1 - $5_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $4_1, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1237($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $5_1 = HEAPF32[$3 + 520 >> 2];
  $6_1 = HEAPF32[$3 + 12 >> 2];
  $4_1 = $2_1 + 8 | 0;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$3 + 524 >> 2] - HEAPF32[$3 + 16 >> 2];
  HEAPF32[$4_1 >> 2] = $5_1 - $6_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $4_1, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1238($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1);
 }
 
 function $1239($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $0_1 = HEAP32[$0_1 >> 2];
  if (($0_1 | 0) == 2) {
   $0_1 = 0
  } else {
   $2_1 = +fimport$5($0_1 | 0, 50504, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
   if ($2_1 < 4294967296.0 & $2_1 >= 0.0) {
    $0_1 = ~~$2_1 >>> 0
   } else {
    $0_1 = 0
   }
  }
  $222($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1240($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $3 + 12 | 0);
  fimport$4(HEAP32[$3 + 12 >> 2]);
  global$0 = $3 + 16 | 0;
 }
 
 function $1241($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = fimport$20(HEAP32[$1_1 >> 2]) | 0;
  $5_1 = fimport$2(6425) | 0;
  $6_1 = fimport$8($3 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  fimport$4($3 | 0);
  label$1 : {
   if ($6_1) {
    $4_1 = +fimport$5(HEAP32[$1_1 >> 2], 72736, $2_1 | 0);
    fimport$6(HEAP32[$2_1 >> 2]);
    if ($4_1 < 4294967296.0 & $4_1 >= 0.0) {
     $1_1 = ~~$4_1 >>> 0
    } else {
     $1_1 = 0
    }
    $55($0_1, $1_1);
    break label$1;
   }
   $3 = $2_1 + 8 | 0;
   HEAP32[$3 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$2_1 >> 2] = 0;
   HEAP32[$2_1 + 4 >> 2] = 0;
   $56($0_1, $768($1_1, $2_1));
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1243($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0.0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $5_1 = fimport$20(HEAP32[$1_1 >> 2]) | 0;
  $6_1 = fimport$2(6425) | 0;
  $7_1 = fimport$8($5_1 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  fimport$4($5_1 | 0);
  label$1 : {
   if ($7_1) {
    $4_1 = +fimport$5(HEAP32[$1_1 >> 2], 72808, $2_1 + 12 | 0);
    fimport$6(HEAP32[$2_1 + 12 >> 2]);
    $3 = Math_fround(3402823466385288598117041.0e14);
    label$3 : {
     if ($4_1 >= 3402823466385288598117041.0e14) {
      break label$3
     }
     $3 = Math_fround(-3402823466385288598117041.0e14);
     if ($4_1 <= -3402823466385288598117041.0e14) {
      break label$3
     }
     $3 = Math_fround($4_1);
    }
    $58($0_1, $3);
    break label$1;
   }
   HEAP32[$2_1 + 4 >> 2] = 0;
   HEAP32[$2_1 + 8 >> 2] = 0;
   $59($0_1, $763($1_1, $2_1 + 4 | 0));
  }
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1245($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = HEAP32[HEAP32[18392] + 6464 >> 2];
  HEAP32[$0_1 >> 2] = fimport$1(50504, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1246($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $2_1 + 8 | 0;
  $260($3);
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1247($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $2_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($1_1, $3 + 12 | 0) | 0;
  fimport$4(HEAP32[$3 + 12 >> 2]);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1248($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0.0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = +fimport$5(HEAP32[$1_1 >> 2], 72808, $3 + 12 | 0);
  fimport$6(HEAP32[$3 + 12 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround($4_1);
  }
  $0_1 = $51($0_1, $2_1);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1249($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($2_1 + 12 | 0) | 0;
  fimport$4(HEAP32[$2_1 + 12 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1250($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0_1 = $52($768($0_1, $1_1));
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1252($0_1) {
  $0_1 = $0_1 | 0;
  return $54($0_1) | 0;
 }
 
 function $1253($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($2_1 + 12 | 0, $1_1);
  fimport$10(HEAP32[$2_1 + 12 >> 2]);
  $0_1 = HEAP32[$2_1 + 12 >> 2];
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1254($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $53($1_1);
  HEAP32[$0_1 >> 2] = fimport$1(48816, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1255($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $590($763($0_1, $1_1 + 8 | 0));
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1256($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0), $7_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $5_1 = HEAPF32[$3 + 92 >> 2];
  $6_1 = HEAPF32[$3 + 16 >> 2];
  $7_1 = HEAPF32[$3 + 212 >> 2];
  $4_1 = $2_1 + 8 | 0;
  HEAPF32[$4_1 >> 2] = Math_fround(HEAPF32[$3 + 208 >> 2] - HEAPF32[$3 + 12 >> 2]) + HEAPF32[$3 + 88 >> 2];
  HEAPF32[$4_1 + 4 >> 2] = $5_1 + Math_fround($7_1 - $6_1);
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $4_1, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1257($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0), $2_1 = 0, $3 = 0, $4_1 = Math_fround(0), $5_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $3 = $763($0_1, $2_1 + 8 | 0);
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  $4_1 = HEAPF32[$3 + 4 >> 2];
  $1_1 = Math_fround(Math_fround(HEAPF32[$0_1 + 12 >> 2] - HEAPF32[$0_1 + 88 >> 2]) + HEAPF32[$3 >> 2]);
  HEAPF32[$0_1 + 208 >> 2] = $1_1;
  $4_1 = Math_fround($4_1 + Math_fround(HEAPF32[$0_1 + 16 >> 2] - HEAPF32[$0_1 + 92 >> 2]));
  HEAPF32[$0_1 + 212 >> 2] = $4_1;
  $3 = $0_1 + 232 | 0;
  $5_1 = HEAPF32[$3 >> 2];
  HEAPF32[$3 >> 2] = $1_1 <= $5_1 ? $5_1 : $1_1;
  $0_1 = $0_1 + 236 | 0;
  $1_1 = HEAPF32[$0_1 >> 2];
  HEAPF32[$0_1 >> 2] = $1_1 >= $4_1 ? $1_1 : $4_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1258($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $5_1 = HEAPF32[$3 + 224 >> 2];
  $6_1 = HEAPF32[$3 + 12 >> 2];
  $4_1 = $2_1 + 8 | 0;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$3 + 228 >> 2] - HEAPF32[$3 + 16 >> 2];
  HEAPF32[$4_1 >> 2] = $5_1 - $6_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $4_1, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1259($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $2_1 + 8 | 0;
  $278($3);
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1260($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $279($763($0_1, $1_1 + 8 | 0));
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1261($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = fimport$20(HEAP32[$0_1 >> 2]) | 0;
  $3 = fimport$2(6425) | 0;
  $5_1 = fimport$8($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  fimport$4($2_1 | 0);
  label$1 : {
   label$2 : {
    if ($5_1) {
     $4_1 = +fimport$5(HEAP32[$0_1 >> 2], 72724, $1_1 | 0);
     fimport$6(HEAP32[$1_1 >> 2]);
     $266(Math_abs($4_1) < 2147483648.0 ? ~~$4_1 : -2147483648);
     break label$2;
    }
    $4_1 = +fimport$5(HEAP32[$0_1 >> 2], 49072, $1_1 + 12 | 0);
    label$6 : {
     if ($4_1 < 4294967296.0 & $4_1 >= 0.0) {
      $3 = ~~$4_1 >>> 0;
      break label$6;
     }
     $3 = 0;
    }
    $2_1 = HEAP32[$3 >> 2];
    if ($2_1 >>> 0 >= 2147483632) {
     break label$1
    }
    $5_1 = HEAP32[$1_1 + 12 >> 2];
    label$8 : {
     if ($2_1 >>> 0 <= 10) {
      HEAP8[$1_1 + 11 | 0] = $2_1;
      $0_1 = $1_1;
      break label$8;
     }
     $6_1 = ($2_1 | 15) + 1 | 0;
     $0_1 = $1782($6_1);
     HEAP32[$1_1 + 8 >> 2] = $6_1 | -2147483648;
     HEAP32[$1_1 >> 2] = $0_1;
     HEAP32[$1_1 + 4 >> 2] = $2_1;
    }
    if ($2_1) {
     $1602($0_1, $3 + 4 | 0, $2_1)
    }
    HEAP8[$0_1 + $2_1 | 0] = 0;
    fimport$6($5_1 | 0);
    $153(HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1);
    if (HEAP8[$1_1 + 11 | 0] >= 0) {
     break label$2
    }
    $1756(HEAP32[$1_1 >> 2]);
   }
   global$0 = $1_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1262($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = fimport$20(HEAP32[$0_1 >> 2]) | 0;
  $3 = fimport$2(6425) | 0;
  $4_1 = fimport$8($1_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  fimport$4($1_1 | 0);
  label$1 : {
   label$2 : {
    if ($4_1) {
     $5_1 = +fimport$5(HEAP32[$0_1 >> 2], 72724, $2_1 | 0);
     fimport$6(HEAP32[$2_1 >> 2]);
     $4_1 = global$0 - 16 | 0;
     global$0 = $4_1;
     $3 = HEAP32[18392];
     $1_1 = HEAP32[$3 + 7080 >> 2];
     $8 = Math_abs($5_1) < 2147483648.0 ? ~~$5_1 : -2147483648;
     HEAP32[$4_1 + 12 >> 2] = $8;
     $7_1 = 4;
     $0_1 = $4_1 + 12 | 0;
     $6_1 = HEAP32[(HEAP32[$1_1 + 204 >> 2] + (HEAP32[$1_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
     while (1) {
      $1_1 = $0_1;
      $0_1 = $1_1 + 1 | 0;
      $1_1 = HEAP32[((HEAPU8[$1_1 | 0] ^ $6_1 & 255) << 2) + 19360 >> 2] ^ $6_1 >>> 8;
      $6_1 = $1_1;
      $7_1 = $7_1 - 1 | 0;
      if ($7_1) {
       continue
      }
      break;
     };
     $0_1 = $1_1 ^ -1;
     if (($0_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
      HEAP32[$3 + 7140 >> 2] = $0_1
     }
     if (HEAP32[$3 + 7196 >> 2] == ($0_1 | 0)) {
      HEAP8[$3 + 7200 | 0] = 1
     }
     if (HEAP32[$3 + 7112 >> 2] == ($0_1 | 0)) {
      $75($0_1, 12, $8)
     }
     global$0 = $4_1 + 16 | 0;
     break label$2;
    }
    $5_1 = +fimport$5(HEAP32[$0_1 >> 2], 49072, $2_1 + 12 | 0);
    label$6 : {
     if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
      $3 = ~~$5_1 >>> 0;
      break label$6;
     }
     $3 = 0;
    }
    $1_1 = HEAP32[$3 >> 2];
    if ($1_1 >>> 0 >= 2147483632) {
     break label$1
    }
    $4_1 = HEAP32[$2_1 + 12 >> 2];
    label$8 : {
     if ($1_1 >>> 0 <= 10) {
      HEAP8[$2_1 + 11 | 0] = $1_1;
      $0_1 = $2_1;
      break label$8;
     }
     $6_1 = ($1_1 | 15) + 1 | 0;
     $0_1 = $1782($6_1);
     HEAP32[$2_1 + 8 >> 2] = $6_1 | -2147483648;
     HEAP32[$2_1 >> 2] = $0_1;
     HEAP32[$2_1 + 4 >> 2] = $1_1;
    }
    if ($1_1) {
     $1602($0_1, $3 + 4 | 0, $1_1)
    }
    HEAP8[$0_1 + $1_1 | 0] = 0;
    fimport$6($4_1 | 0);
    $0_1 = $270(HEAP8[$2_1 + 11 | 0] < 0 ? HEAP32[$2_1 >> 2] : $2_1);
    if (HEAP8[$2_1 + 11 | 0] < 0) {
     $1756(HEAP32[$2_1 >> 2])
    }
   }
   global$0 = $2_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1263($0_1) {
  $0_1 = $0_1 | 0;
  $556(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1);
 }
 
 function $1264($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $557(5950, $1_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1265($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $4_1 = HEAP32[$2_1 >> 2];
  if ($4_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     HEAP8[$3 + 11 | 0] = $4_1;
     $1_1 = $3;
     break label$2;
    }
    $5_1 = ($4_1 | 15) + 1 | 0;
    $1_1 = $1782($5_1);
    HEAP32[$3 + 8 >> 2] = $5_1 | -2147483648;
    HEAP32[$3 >> 2] = $1_1;
    HEAP32[$3 + 4 >> 2] = $4_1;
   }
   if ($4_1) {
    $1602($1_1, $2_1 + 4 | 0, $4_1)
   }
   HEAP8[$1_1 + $4_1 | 0] = 0;
   FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $3);
   if (HEAP8[$3 + 11 | 0] < 0) {
    $1756(HEAP32[$3 >> 2])
   }
   fimport$4(HEAP32[$3 + 12 >> 2]);
   global$0 = $3 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1266($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3 = $2_1 + 24 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  $0_1 = $768($0_1, $2_1 + 16 | 0);
  HEAP32[$2_1 >> 2] = HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1;
  $559($0_1, 5950, $2_1);
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1267($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $561(5950, $1_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1268($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = Math_fround(0), $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  $3 = HEAPF32[HEAP32[HEAP32[18392] + 7080 >> 2] + 388 >> 2];
  if ($3 < Math_fround(0.0)) {
   $232(Math_fround(0.0))
  }
  label$2 : {
   if (!(HEAPU8[5952] | (HEAPU8[5950] != 37 | HEAPU8[5951] != 115))) {
    $555(HEAP32[$1_1 >> 2], 0, 1);
    break label$2;
   }
   $2_1 = HEAP32[18392];
   $4_1 = HEAP32[$2_1 + 7080 >> 2];
   HEAP8[$4_1 + 140 | 0] = 1;
   if (HEAPU8[$4_1 + 143 | 0]) {
    break label$2
   }
   $2_1 = $2_1 + 12800 | 0;
   $555($2_1, $22($2_1, 5950, $1_1) + $2_1 | 0, 1);
  }
  if ($3 < Math_fround(0.0)) {
   $233()
  }
  global$0 = $0_1 + 16 | 0;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1269($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  label$1 : {
   $4_1 = HEAP32[$1_1 >> 2];
   if ($4_1 >>> 0 < 2147483632) {
    label$3 : {
     if ($4_1 >>> 0 <= 10) {
      HEAP8[$3 + 31 | 0] = $4_1;
      $5_1 = $3 + 20 | 0;
      break label$3;
     }
     $6_1 = ($4_1 | 15) + 1 | 0;
     $5_1 = $1782($6_1);
     HEAP32[$3 + 28 >> 2] = $6_1 | -2147483648;
     HEAP32[$3 + 20 >> 2] = $5_1;
     HEAP32[$3 + 24 >> 2] = $4_1;
    }
    if ($4_1) {
     $1602($5_1, $1_1 + 4 | 0, $4_1)
    }
    HEAP8[$4_1 + $5_1 | 0] = 0;
    $4_1 = HEAP32[$2_1 >> 2];
    if ($4_1 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($4_1 >>> 0 <= 10) {
      HEAP8[$3 + 19 | 0] = $4_1;
      $1_1 = $3 + 8 | 0;
      break label$6;
     }
     $5_1 = ($4_1 | 15) + 1 | 0;
     $1_1 = $1782($5_1);
     HEAP32[$3 + 16 >> 2] = $5_1 | -2147483648;
     HEAP32[$3 + 8 >> 2] = $1_1;
     HEAP32[$3 + 12 >> 2] = $4_1;
    }
    if ($4_1) {
     $1602($1_1, $2_1 + 4 | 0, $4_1)
    }
    HEAP8[$1_1 + $4_1 | 0] = 0;
    FUNCTION_TABLE[$0_1 | 0]($3 + 20 | 0, $3 + 8 | 0);
    if (HEAP8[$3 + 19 | 0] < 0) {
     $1756(HEAP32[$3 + 8 >> 2])
    }
    if (HEAP8[$3 + 31 | 0] < 0) {
     $1756(HEAP32[$3 + 20 >> 2])
    }
    global$0 = $3 + 32 | 0;
    return;
   }
   $774();
   wasm2js_trap();
  }
  $774();
  wasm2js_trap();
 }
 
 function $1270($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0), $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = 0, $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $2_1 = HEAP32[$0_1 >> 2];
  $3 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$5_1 >> 2] = HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1;
  $12_1 = ($3 | 0) < 0 ? $2_1 : $0_1;
  $9 = global$0 - 16 | 0;
  global$0 = $9;
  HEAP32[$9 + 12 >> 2] = $5_1;
  $0_1 = global$0 - 80 | 0;
  global$0 = $0_1;
  $1_1 = HEAP32[18392];
  $2_1 = HEAP32[$1_1 + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$2_1 + 143 | 0]) {
    break label$1
   }
   $13 = $292();
   $3 = $1_1 + 12800 | 0;
   $14 = $3 + $22($3, 5950, $5_1) | 0;
   $68($0_1 + 72 | 0, $3, $14, 0, Math_fround(-1.0));
   $68($0_1 - -64 | 0, $12_1, 0, 1, Math_fround(-1.0));
   $15_1 = HEAPF32[$2_1 + 208 >> 2];
   $16_1 = HEAP32[$2_1 + 208 >> 2];
   $4_1 = $2_1 + 212 | 0;
   $2_1 = HEAP32[$4_1 >> 2];
   $10_1 = HEAPF32[$1_1 + 5480 >> 2];
   $6_1 = Math_fround($10_1 + $10_1);
   $11_1 = HEAPF32[$0_1 + 76 >> 2];
   $17_1 = HEAPF32[$4_1 >> 2];
   HEAPF32[$0_1 + 60 >> 2] = Math_fround($6_1 + $11_1) + $17_1;
   HEAPF32[$0_1 + 56 >> 2] = $13 + $15_1;
   HEAP32[$0_1 + 52 >> 2] = $2_1;
   HEAP32[$0_1 + 48 >> 2] = $16_1;
   $8 = HEAPF32[$0_1 + 64 >> 2];
   if ($8 > Math_fround(0.0)) {
    $7_1 = Math_fround($8 + HEAPF32[$1_1 + 5500 >> 2])
   }
   $4_1 = $0_1 + 32 | 0;
   $8 = $6_1;
   $6_1 = HEAPF32[$0_1 + 68 >> 2];
   HEAPF32[$4_1 + 12 >> 2] = Math_fround($8 + ($6_1 <= $11_1 ? $11_1 : $6_1)) + $17_1;
   HEAP32[$0_1 + 36 >> 2] = $2_1;
   HEAP32[$0_1 + 32 >> 2] = $16_1;
   HEAPF32[$0_1 + 40 >> 2] = Math_fround($13 + $7_1) + $15_1;
   $277($4_1, $10_1);
   if (!$213($4_1, 0, 0, 0)) {
    break label$1
   }
   $7_1 = HEAPF32[$1_1 + 5480 >> 2];
   HEAPF32[$0_1 + 24 >> 2] = HEAPF32[$0_1 + 48 >> 2] + HEAPF32[$1_1 + 5476 >> 2];
   HEAPF32[$0_1 + 28 >> 2] = $7_1 + HEAPF32[$0_1 + 52 >> 2];
   HEAP32[$0_1 + 16 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 0;
   $69($0_1 + 24 | 0, $0_1 + 56 | 0, $3, $14, $0_1 + 72 | 0, $0_1 + 16 | 0, 0);
   if (!(HEAPF32[$0_1 + 64 >> 2] > Math_fround(0.0))) {
    break label$1
   }
   $7_1 = HEAPF32[$1_1 + 5500 >> 2];
   HEAPF32[$0_1 + 12 >> 2] = HEAPF32[$0_1 + 52 >> 2] + HEAPF32[$1_1 + 5480 >> 2];
   HEAPF32[$0_1 + 8 >> 2] = $7_1 + HEAPF32[$0_1 + 56 >> 2];
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   $63($0_1, $12_1, 0, 1);
  }
  global$0 = $0_1 + 80 | 0;
  global$0 = $9 + 16 | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1271($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $567(5950, $1_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1272($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$1_1 >> 2];
  if ($4_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     HEAP8[$3 + 15 | 0] = $4_1;
     $5_1 = $3 + 4 | 0;
     break label$2;
    }
    $6_1 = ($4_1 | 15) + 1 | 0;
    $5_1 = $1782($6_1);
    HEAP32[$3 + 12 >> 2] = $6_1 | -2147483648;
    HEAP32[$3 + 4 >> 2] = $5_1;
    HEAP32[$3 + 8 >> 2] = $4_1;
   }
   if ($4_1) {
    $1602($5_1, $1_1 + 4 | 0, $4_1)
   }
   HEAP8[$4_1 + $5_1 | 0] = 0;
   HEAP32[$3 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($3 + 4 | 0, $3) | 0;
   fimport$4(HEAP32[$3 >> 2]);
   if (HEAP8[$3 + 15 | 0] < 0) {
    $1756(HEAP32[$3 + 4 >> 2])
   }
   global$0 = $3 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1273($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $0_1 = $571(($4_1 | 0) < 0 ? $3 : $0_1, $763($1_1, $2_1 + 8 | 0));
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1274($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$1_1 >> 2];
  if ($3 >>> 0 < 2147483632) {
   label$2 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$2_1 + 15 | 0] = $3;
     $4_1 = $2_1 + 4 | 0;
     break label$2;
    }
    $5_1 = ($3 | 15) + 1 | 0;
    $4_1 = $1782($5_1);
    HEAP32[$2_1 + 12 >> 2] = $5_1 | -2147483648;
    HEAP32[$2_1 + 4 >> 2] = $4_1;
    HEAP32[$2_1 + 8 >> 2] = $3;
   }
   if ($3) {
    $1602($4_1, $1_1 + 4 | 0, $3)
   }
   HEAP8[$3 + $4_1 | 0] = 0;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($2_1 + 4 | 0) | 0;
   if (HEAP8[$2_1 + 15 | 0] < 0) {
    $1756(HEAP32[$2_1 + 4 >> 2])
   }
   global$0 = $2_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1275($0_1) {
  $0_1 = $0_1 | 0;
  return $572(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1) | 0;
 }
 
 function $1276($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  $0_1 = $573(($5_1 | 0) < 0 ? $4_1 : $0_1, $763($1_1, $3 + 8 | 0), $2_1);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1277($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$1_1 >> 2];
  if ($4_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     HEAP8[$3 + 15 | 0] = $4_1;
     $5_1 = $3 + 4 | 0;
     break label$2;
    }
    $6_1 = ($4_1 | 15) + 1 | 0;
    $5_1 = $1782($6_1);
    HEAP32[$3 + 12 >> 2] = $6_1 | -2147483648;
    HEAP32[$3 + 4 >> 2] = $5_1;
    HEAP32[$3 + 8 >> 2] = $4_1;
   }
   if ($4_1) {
    $1602($5_1, $1_1 + 4 | 0, $4_1)
   }
   HEAP8[$4_1 + $5_1 | 0] = 0;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($3 + 4 | 0, $2_1) | 0;
   if (HEAP8[$3 + 15 | 0] < 0) {
    $1756(HEAP32[$3 + 4 >> 2])
   }
   global$0 = $3 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1278($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = Math_fround(0), $3 = 0, $4_1 = 0;
  $3 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $2_1 = $296();
  HEAPF32[$0_1 + 12 >> 2] = $2_1;
  HEAPF32[$0_1 + 8 >> 2] = $2_1;
  $4_1 = HEAP32[$0_1 + 12 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $4_1;
  $1_1 = $574($3, $1_1, $0_1, 0);
  global$0 = $0_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $1279($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 24 >> 2] = $2_1;
  HEAP32[$7_1 + 28 >> 2] = $1_1;
  HEAP32[$7_1 + 20 >> 2] = $3;
  HEAP32[$7_1 + 16 >> 2] = $4_1;
  HEAP32[$7_1 + 12 >> 2] = $5_1;
  HEAP32[$7_1 + 8 >> 2] = $6_1;
  FUNCTION_TABLE[$0_1 | 0]($7_1 + 28 | 0, $7_1 + 24 | 0, $7_1 + 20 | 0, $7_1 + 16 | 0, $7_1 + 12 | 0, $7_1 + 8 | 0);
  fimport$4(HEAP32[$7_1 + 8 >> 2]);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  fimport$4(HEAP32[$7_1 + 16 >> 2]);
  fimport$4(HEAP32[$7_1 + 20 >> 2]);
  fimport$4(HEAP32[$7_1 + 24 >> 2]);
  fimport$4(HEAP32[$7_1 + 28 >> 2]);
  global$0 = $7_1 + 32 | 0;
 }
 
 function $1280($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0);
  $6_1 = global$0 + -64 | 0;
  global$0 = $6_1;
  $7_1 = $6_1 + 24 | 0;
  $9 = +fimport$5(HEAP32[$0_1 >> 2], 72724, $7_1 | 0);
  fimport$6(HEAP32[$6_1 + 24 >> 2]);
  HEAP32[$6_1 + 56 >> 2] = 0;
  HEAP32[$6_1 + 60 >> 2] = 0;
  $0_1 = $763($1_1, $6_1 + 56 | 0);
  HEAP32[$6_1 + 48 >> 2] = 0;
  HEAP32[$6_1 + 52 >> 2] = 0;
  $1_1 = $763($2_1, $6_1 + 48 | 0);
  HEAP32[$6_1 + 40 >> 2] = 0;
  HEAP32[$6_1 + 44 >> 2] = 0;
  $2_1 = $763($3, $6_1 + 40 | 0);
  $3 = $7_1 + 8 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$6_1 + 24 >> 2] = 0;
  HEAP32[$6_1 + 28 >> 2] = 0;
  $3 = $768($4_1, $7_1);
  $4_1 = $6_1 + 16 | 0;
  HEAP32[$4_1 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  $10_1 = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
  $7_1 = $768($5_1, $6_1 + 8 | 0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$5_1 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$5_1 + 143 | 0]) {
    break label$1
   }
   $11_1 = HEAP32[$5_1 + 212 >> 2];
   $12_1 = HEAP32[$5_1 + 208 >> 2];
   $13 = HEAPF32[$0_1 >> 2];
   $14 = HEAPF32[$5_1 + 208 >> 2];
   $8 = $4_1 + 28 | 0;
   HEAPF32[$8 >> 2] = HEAPF32[$5_1 + 212 >> 2] + HEAPF32[$0_1 + 4 >> 2];
   HEAPF32[$4_1 + 24 >> 2] = $14 + $13;
   HEAP32[$4_1 + 16 >> 2] = $12_1;
   HEAP32[$4_1 + 20 >> 2] = $11_1;
   if (HEAPF32[$7_1 + 12 >> 2] > Math_fround(0.0)) {
    HEAPF32[$8 >> 2] = HEAPF32[$8 >> 2] + Math_fround(2.0);
    HEAPF32[$4_1 + 24 >> 2] = HEAPF32[$4_1 + 24 >> 2] + Math_fround(2.0);
   }
   $0_1 = $4_1 + 16 | 0;
   $277($0_1, Math_fround(-1.0));
   if (!$213($0_1, 0, 0, 0)) {
    break label$1
   }
   $0_1 = $4_1 + 24 | 0;
   $8 = HEAP32[$5_1 + 580 >> 2];
   if (HEAPF32[$7_1 + 12 >> 2] > Math_fround(0.0)) {
    $400($8, $4_1 + 16 | 0, $0_1, $52($7_1), Math_fround(0.0), 0, Math_fround(1.0));
    $0_1 = HEAP32[$5_1 + 580 >> 2];
    HEAPF32[$4_1 + 12 >> 2] = HEAPF32[$4_1 + 20 >> 2] + Math_fround(1.0);
    HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$4_1 + 16 >> 2] + Math_fround(1.0);
    HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$4_1 + 28 >> 2] + Math_fround(-1.0);
    HEAPF32[$4_1 >> 2] = HEAPF32[$4_1 + 24 >> 2] + Math_fround(-1.0);
    $417($0_1, $10_1, $4_1 + 8 | 0, $4_1, $1_1, $2_1, $52($3));
    break label$1;
   }
   $417($8, $10_1, $4_1 + 16 | 0, $0_1, $1_1, $2_1, $52($3));
  }
  global$0 = $4_1 + 32 | 0;
  global$0 = $6_1 - -64 | 0;
 }
 
 function $1281($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 24 >> 2] = $2_1;
  HEAP32[$8 + 28 >> 2] = $1_1;
  HEAP32[$8 + 20 >> 2] = $3;
  HEAP32[$8 + 16 >> 2] = $4_1;
  HEAP32[$8 + 12 >> 2] = $6_1;
  HEAP32[$8 + 8 >> 2] = $7_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($8 + 28 | 0, $8 + 24 | 0, $8 + 20 | 0, $8 + 16 | 0, $5_1, $8 + 12 | 0, $8 + 8 | 0) | 0;
  fimport$4(HEAP32[$8 + 8 >> 2]);
  fimport$4(HEAP32[$8 + 12 >> 2]);
  fimport$4(HEAP32[$8 + 16 >> 2]);
  fimport$4(HEAP32[$8 + 20 >> 2]);
  fimport$4(HEAP32[$8 + 24 >> 2]);
  fimport$4(HEAP32[$8 + 28 >> 2]);
  global$0 = $8 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1282($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0.0, $19 = 0, $20_1 = Math_fround(0), $21_1 = 0;
  $8 = global$0 + -64 | 0;
  global$0 = $8;
  $14 = $8 + 24 | 0;
  $18_1 = +fimport$5(HEAP32[$0_1 >> 2], 72724, $14 | 0);
  fimport$6(HEAP32[$8 + 24 >> 2]);
  HEAP32[$8 + 56 >> 2] = 0;
  HEAP32[$8 + 60 >> 2] = 0;
  $16_1 = $763($1_1, $8 + 56 | 0);
  HEAP32[$8 + 48 >> 2] = 0;
  HEAP32[$8 + 52 >> 2] = 0;
  $1_1 = $763($2_1, $8 + 48 | 0);
  HEAP32[$8 + 40 >> 2] = 0;
  HEAP32[$8 + 44 >> 2] = 0;
  $0_1 = $763($3, $8 + 40 | 0);
  $2_1 = $14 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 28 >> 2] = 0;
  $2_1 = $768($5_1, $14);
  $3 = $8 + 16 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  HEAP32[$8 + 12 >> 2] = 0;
  $19 = Math_abs($18_1) < 2147483648.0 ? ~~$18_1 : -2147483648;
  $3 = $2_1;
  $21_1 = $768($6_1, $8 + 8 | 0);
  $2_1 = 0;
  $13 = global$0 - 16 | 0;
  global$0 = $13;
  $6_1 = HEAP32[18392];
  $5_1 = HEAP32[$6_1 + 7080 >> 2];
  if (!HEAPU8[$5_1 + 143 | 0]) {
   $265($19);
   $15_1 = $76($5_1, 11582);
   $269();
   label$2 : {
    if (($4_1 | 0) >= 0) {
     $9 = Math_fround($4_1 | 0);
     HEAPF32[$13 + 12 >> 2] = $9;
     HEAPF32[$13 + 8 >> 2] = $9;
     break label$2;
    }
    $5_1 = $6_1 + 5476 | 0;
    $4_1 = HEAP32[$5_1 + 4 >> 2];
    HEAP32[$13 + 8 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$13 + 12 >> 2] = $4_1;
   }
   $7_1 = global$0 - 80 | 0;
   global$0 = $7_1;
   $14 = HEAP32[18392];
   $11_1 = HEAP32[$14 + 7080 >> 2];
   HEAP8[$11_1 + 140 | 0] = 1;
   if (!HEAPU8[$11_1 + 143 | 0]) {
    $12_1 = $13 + 8 | 0;
    $20_1 = HEAPF32[$12_1 >> 2];
    $17_1 = HEAPF32[$16_1 >> 2];
    $10_1 = HEAPF32[$11_1 + 208 >> 2];
    $5_1 = HEAP32[$11_1 + 208 >> 2];
    $4_1 = HEAP32[$11_1 + 212 >> 2];
    $9 = HEAPF32[$12_1 + 4 >> 2];
    HEAPF32[$7_1 + 76 >> 2] = Math_fround(HEAPF32[$11_1 + 212 >> 2] + HEAPF32[$16_1 + 4 >> 2]) + Math_fround($9 + $9);
    HEAP32[$7_1 + 64 >> 2] = $5_1;
    HEAP32[$7_1 + 68 >> 2] = $4_1;
    HEAPF32[$7_1 + 72 >> 2] = Math_fround($10_1 + $17_1) + Math_fround($20_1 + $20_1);
    $4_1 = $7_1 - -64 | 0;
    $277($4_1, Math_fround(-1.0));
    if ($213($4_1, $15_1, 0, 0)) {
     $4_1 = $7_1 - -64 | 0;
     $2_1 = $569($4_1, $15_1, $7_1 + 63 | 0, $7_1 + 62 | 0, 0);
     $6_1 = $51(HEAPU8[$7_1 + 63 | 0] ? (HEAPU8[$7_1 + 62 | 0] ? 23 : 22) : 21, Math_fround(1.0));
     $73($4_1, $15_1, 1);
     $15_1 = HEAP32[$7_1 + 68 >> 2];
     $5_1 = HEAP32[$7_1 + 64 >> 2];
     HEAP32[$7_1 + 48 >> 2] = $5_1;
     HEAP32[$7_1 + 52 >> 2] = $15_1;
     $16_1 = HEAP32[$7_1 + 76 >> 2];
     $4_1 = HEAP32[$7_1 + 72 >> 2];
     HEAP32[$7_1 + 40 >> 2] = $4_1;
     HEAP32[$7_1 + 44 >> 2] = $16_1;
     $17_1 = HEAPF32[$14 + 5484 >> 2];
     $10_1 = HEAPF32[$12_1 >> 2];
     $9 = HEAPF32[$12_1 + 4 >> 2];
     HEAP32[$7_1 + 8 >> 2] = $4_1;
     HEAP32[$7_1 + 12 >> 2] = $16_1;
     HEAP32[$7_1 + 16 >> 2] = $5_1;
     HEAP32[$7_1 + 20 >> 2] = $15_1;
     $9 = $9 > $10_1 ? $10_1 : $9;
     $71($7_1 + 16 | 0, $7_1 + 8 | 0, $6_1, 1, $9 < Math_fround(0.0) ? Math_fround(0.0) : $9 > $17_1 ? $17_1 : $9);
     if (HEAPF32[$3 + 12 >> 2] > Math_fround(0.0)) {
      $4_1 = HEAP32[$11_1 + 580 >> 2];
      $10_1 = HEAPF32[$12_1 >> 2];
      $9 = HEAPF32[$12_1 + 4 >> 2];
      HEAPF32[$7_1 + 36 >> 2] = HEAPF32[$7_1 + 68 >> 2] + $9;
      HEAPF32[$7_1 + 32 >> 2] = $10_1 + HEAPF32[$7_1 + 64 >> 2];
      HEAPF32[$7_1 + 28 >> 2] = HEAPF32[$7_1 + 76 >> 2] - $9;
      HEAPF32[$7_1 + 24 >> 2] = HEAPF32[$7_1 + 72 >> 2] - $10_1;
      $401($4_1, $7_1 + 32 | 0, $7_1 + 24 | 0, $52($3), Math_fround(0.0), 0);
     }
     $3 = HEAP32[$11_1 + 580 >> 2];
     $10_1 = HEAPF32[$12_1 >> 2];
     $9 = HEAPF32[$12_1 + 4 >> 2];
     HEAPF32[$7_1 + 36 >> 2] = HEAPF32[$7_1 + 68 >> 2] + $9;
     HEAPF32[$7_1 + 32 >> 2] = $10_1 + HEAPF32[$7_1 + 64 >> 2];
     HEAPF32[$7_1 + 28 >> 2] = HEAPF32[$7_1 + 76 >> 2] - $9;
     HEAPF32[$7_1 + 24 >> 2] = HEAPF32[$7_1 + 72 >> 2] - $10_1;
     $417($3, $19, $7_1 + 32 | 0, $7_1 + 24 | 0, $1_1, $0_1, $52($21_1));
    }
   }
   global$0 = $7_1 + 80 | 0;
  }
  global$0 = $13 + 16 | 0;
  global$0 = $8 - -64 | 0;
  return $2_1 | 0;
 }
 
 function $1283($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$2_1 + 12 >> 2] = 53076;
  HEAP32[$2_1 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 24 >> 2] = 0;
  $4_1 = $2_1 + 24 | 0;
  $5_1 = fimport$1(72760, $4_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  $7_1 = +fimport$5($1_1 | 0, 72652, $4_1 | 0);
  fimport$6(HEAP32[$2_1 + 24 >> 2]);
  HEAP8[$2_1 + 16 | 0] = $7_1 != 0.0;
  fimport$4($1_1 | 0);
  $1_1 = $583(($6_1 | 0) < 0 ? $3 : $0_1, $2_1 + 16 | 0);
  HEAP32[$2_1 + 12 >> 2] = 53076;
  $3 = HEAP32[$2_1 + 20 >> 2];
  HEAP32[$2_1 + 24 >> 2] = HEAPU8[$2_1 + 16 | 0];
  $0_1 = fimport$1(72652, $4_1 | 0) | 0;
  $3 = HEAP32[$3 >> 2];
  HEAP32[$2_1 + 24 >> 2] = 0;
  $4_1 = $3;
  $3 = fimport$1(72760, $2_1 + 24 | 0) | 0;
  fimport$3($4_1 | 0, $3 | 0, $0_1 | 0);
  fimport$4($3 | 0);
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1285($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $5_1 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 12 >> 2] = 53160;
  HEAP32[$3 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 24 >> 2] = 0;
  $6_1 = $3 + 24 | 0;
  $8 = fimport$1(72760, $6_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $8 | 0) | 0;
  fimport$4($8 | 0);
  $7_1 = +fimport$5($1_1 | 0, 72736, $6_1 | 0);
  fimport$6(HEAP32[$3 + 24 >> 2]);
  HEAP32[$3 + 16 >> 2] = $7_1 < 4294967296.0 & $7_1 >= 0.0 ? ~~$7_1 >>> 0 : 0;
  fimport$4($1_1 | 0);
  $5_1 = ($4_1 | 0) < 0 ? $5_1 : $0_1;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $1_1 = $3 + 16 | 0;
  $4_1 = HEAP32[$1_1 >> 2] & $2_1;
  $6_1 = ($4_1 | 0) == ($2_1 | 0);
  HEAP8[$0_1 + 15 | 0] = $6_1;
  label$1 : {
   if (!(!$4_1 | $6_1)) {
    $4_1 = HEAP32[18392];
    $6_1 = HEAP32[$4_1 + 7216 >> 2];
    HEAP32[$4_1 + 7216 >> 2] = $6_1 | 64;
    $5_1 = $583($5_1, $0_1 + 15 | 0);
    HEAP32[$4_1 + 7216 >> 2] = $6_1;
    break label$1;
   }
   $5_1 = $583($5_1, $0_1 + 15 | 0);
  }
  if ($5_1) {
   HEAP32[$1_1 >> 2] = HEAPU8[$0_1 + 15 | 0] ? HEAP32[$1_1 >> 2] | $2_1 : HEAP32[$1_1 >> 2] & ($2_1 ^ -1)
  }
  global$0 = $0_1 + 16 | 0;
  HEAP32[$3 + 12 >> 2] = 53160;
  $1_1 = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2];
  $2_1 = $3 + 24 | 0;
  $0_1 = fimport$1(72736, $2_1 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 24 >> 2] = 0;
  $4_1 = $1_1;
  $1_1 = fimport$1(72760, $2_1 | 0) | 0;
  fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $3 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $1287($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $585(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, $1_1) | 0;
 }
 
 function $1288($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $8 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 12 >> 2] = 53228;
  HEAP32[$3 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 24 >> 2] = 0;
  $5_1 = $3 + 24 | 0;
  $6_1 = fimport$1(72760, $5_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  $7_1 = +fimport$5($1_1 | 0, 72724, $5_1 | 0);
  fimport$6(HEAP32[$3 + 24 >> 2]);
  HEAP32[$3 + 16 >> 2] = Math_abs($7_1) < 2147483648.0 ? ~~$7_1 : -2147483648;
  fimport$4($1_1 | 0);
  $1_1 = ($8 | 0) < 0 ? $4_1 : $0_1;
  $0_1 = $3 + 16 | 0;
  $1_1 = $585($1_1, HEAP32[$0_1 >> 2] == ($2_1 | 0));
  if ($1_1) {
   HEAP32[$0_1 >> 2] = $2_1
  }
  HEAP32[$3 + 12 >> 2] = 53228;
  $2_1 = HEAP32[$3 + 20 >> 2];
  HEAP32[$3 + 24 >> 2] = HEAP32[$3 + 16 >> 2];
  $4_1 = $3 + 24 | 0;
  $0_1 = fimport$1(72724, $4_1 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$3 + 24 >> 2] = 0;
  $5_1 = $2_1;
  $2_1 = fimport$1(72760, $4_1 | 0) | 0;
  fimport$3($5_1 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $3 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1289($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $3;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $4_1 + 12 | 0, $4_1 + 8 | 0);
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1290($0_1, $1_1, $2_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0, $12_1 = 0, $13 = Math_fround(0), $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = 0, $20_1 = Math_fround(0), $21_1 = Math_fround(0), $22_1 = Math_fround(0), $23_1 = Math_fround(0), $24 = 0;
  $12_1 = global$0 - 32 | 0;
  global$0 = $12_1;
  HEAP32[$12_1 + 24 >> 2] = 0;
  HEAP32[$12_1 + 28 >> 2] = 0;
  $1_1 = $763($1_1, $12_1 + 24 | 0);
  HEAP32[$12_1 + 16 >> 2] = 0;
  HEAP32[$12_1 + 8 >> 2] = 0;
  HEAP32[$12_1 + 12 >> 2] = 0;
  HEAP32[$12_1 + 4 >> 2] = 53464;
  HEAP32[$12_1 + 20 >> 2] = $2_1;
  if (HEAP32[$2_1 >> 2] != 2) {
   $1506($12_1 + 4 | 0)
  }
  HEAP32[$12_1 + 4 >> 2] = 53312;
  $19 = HEAP32[HEAP32[$12_1 + 20 >> 2] >> 2] != 2 ? (HEAP8[$12_1 + 19 | 0] < 0 ? HEAP32[$12_1 + 8 >> 2] : $12_1 + 8 | 0) : 0;
  $2_1 = global$0 - 144 | 0;
  global$0 = $2_1;
  $18_1 = HEAP32[18392];
  $6_1 = HEAP32[$18_1 + 7080 >> 2];
  HEAP8[$6_1 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$6_1 + 143 | 0]) {
    break label$1
   }
   $3 = $6_1 + 212 | 0;
   $14 = HEAPF32[$3 >> 2];
   $3 = HEAP32[$3 >> 2];
   $13 = HEAPF32[$6_1 + 208 >> 2];
   $16_1 = HEAP32[$6_1 + 208 >> 2];
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$2_1 + 128 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 132 >> 2] = $4_1;
   $15_1 = $292();
   $4_1 = $18_1 + 5480 | 0;
   $10_1 = HEAPF32[$4_1 >> 2];
   $7_1 = HEAPF32[$18_1 + 6468 >> 2];
   $1_1 = HEAP32[$2_1 + 132 >> 2];
   HEAP32[$2_1 + 32 >> 2] = HEAP32[$2_1 + 128 >> 2];
   HEAP32[$2_1 + 36 >> 2] = $1_1;
   $5_1 = $2_1 + 136 | 0;
   $293($5_1, $2_1 + 32 | 0, $15_1, Math_fround($7_1 + Math_fround($10_1 + $10_1)));
   $1_1 = $2_1 + 124 | 0;
   HEAPF32[$1_1 >> 2] = HEAPF32[$2_1 + 140 >> 2] + $14;
   HEAP32[$2_1 + 116 >> 2] = $3;
   HEAP32[$2_1 + 112 >> 2] = $16_1;
   HEAPF32[$2_1 + 120 >> 2] = HEAPF32[$2_1 + 136 >> 2] + $13;
   $212($5_1, HEAPF32[$4_1 >> 2]);
   if (!$213($2_1 + 112 | 0, 0, 0, 0)) {
    break label$1
   }
   $3 = HEAP32[$2_1 + 116 >> 2];
   HEAP32[$2_1 + 104 >> 2] = HEAP32[$2_1 + 112 >> 2];
   HEAP32[$2_1 + 108 >> 2] = $3;
   $3 = HEAP32[$2_1 + 124 >> 2];
   HEAP32[$2_1 + 96 >> 2] = HEAP32[$2_1 + 120 >> 2];
   HEAP32[$2_1 + 100 >> 2] = $3;
   $3 = $51(7, Math_fround(1.0));
   $4_1 = $18_1 + 5484 | 0;
   $10_1 = HEAPF32[$4_1 >> 2];
   $16_1 = HEAP32[$2_1 + 108 >> 2];
   HEAP32[$2_1 + 24 >> 2] = HEAP32[$2_1 + 104 >> 2];
   HEAP32[$2_1 + 28 >> 2] = $16_1;
   $16_1 = HEAP32[$2_1 + 100 >> 2];
   HEAP32[$2_1 + 16 >> 2] = HEAP32[$2_1 + 96 >> 2];
   HEAP32[$2_1 + 20 >> 2] = $16_1;
   $71($2_1 + 24 | 0, $2_1 + 16 | 0, $3, 1, $10_1);
   $10_1 = HEAPF32[$18_1 + 5488 >> 2];
   HEAPF32[$1_1 >> 2] = HEAPF32[$1_1 >> 2] - $10_1;
   HEAPF32[$2_1 + 116 >> 2] = $10_1 + HEAPF32[$2_1 + 116 >> 2];
   $21_1 = Math_fround($10_1 + HEAPF32[$2_1 + 112 >> 2]);
   HEAPF32[$2_1 + 112 >> 2] = $21_1;
   $23_1 = Math_fround(HEAPF32[$2_1 + 120 >> 2] - $10_1);
   HEAPF32[$2_1 + 120 >> 2] = $23_1;
   $1_1 = HEAP32[$6_1 + 580 >> 2];
   $3 = $2_1 + 112 | 0;
   $16_1 = $51(40, Math_fround(1.0));
   $7_1 = HEAPF32[$4_1 >> 2];
   $6_1 = global$0 - 16 | 0;
   global$0 = $6_1;
   $22_1 = $0_1 < Math_fround(0.0) ? Math_fround(0.0) : $0_1 > Math_fround(1.0) ? Math_fround(1.0) : $0_1;
   $0_1 = $22_1;
   label$10 : {
    if ($0_1 == Math_fround(0.0)) {
     break label$10
    }
    $8 = HEAPF32[$3 >> 2];
    $9 = Math_fround(HEAPF32[$3 + 8 >> 2] - $8);
    $4_1 = $0_1 < Math_fround(0.0);
    $13 = Math_fround(Math_fround($9 * ($4_1 ? Math_fround(0.0) : $0_1)) + $8);
    $15_1 = Math_fround(Math_fround($9 * ($4_1 ? $0_1 : Math_fround(0.0))) + $8);
    $10_1 = HEAPF32[$3 + 12 >> 2];
    $14 = HEAPF32[$3 + 4 >> 2];
    if ($7_1 == Math_fround(0.0)) {
     if ($16_1 >>> 0 < 16777216) {
      break label$10
     }
     $383($1_1, 6, 4);
     $3 = HEAP32[$1_1 + 44 >> 2];
     $4_1 = HEAP32[$3 >> 2];
     $5_1 = HEAP32[$3 + 4 >> 2];
     $3 = HEAP32[$1_1 + 56 >> 2];
     $11_1 = HEAPU16[$1_1 + 40 >> 1];
     HEAP16[$3 + 10 >> 1] = $11_1 + 3;
     $24 = $11_1 + 2 | 0;
     HEAP16[$3 + 8 >> 1] = $24;
     HEAP16[$3 + 6 >> 1] = $11_1;
     HEAP16[$3 + 4 >> 1] = $24;
     HEAP16[$3 + 2 >> 1] = $11_1 + 1;
     HEAP16[$3 >> 1] = $11_1;
     $3 = HEAP32[$1_1 + 52 >> 2];
     HEAPF32[$3 + 4 >> 2] = $14;
     HEAPF32[$3 >> 2] = $15_1;
     $3 = HEAP32[$1_1 + 52 >> 2];
     HEAP32[$3 + 8 >> 2] = $4_1;
     HEAP32[$3 + 12 >> 2] = $5_1;
     $3 = HEAP32[$1_1 + 52 >> 2];
     HEAPF32[$3 + 20 >> 2] = $13;
     HEAP32[$3 + 16 >> 2] = $16_1;
     HEAPF32[$3 + 24 >> 2] = $14;
     $3 = HEAP32[$1_1 + 52 >> 2] + 28 | 0;
     HEAP32[$3 >> 2] = $4_1;
     HEAP32[$3 + 4 >> 2] = $5_1;
     $3 = HEAP32[$1_1 + 52 >> 2];
     HEAPF32[$3 + 40 >> 2] = $13;
     HEAPF32[$3 + 44 >> 2] = $10_1;
     HEAP32[$3 + 36 >> 2] = $16_1;
     $3 = HEAP32[$1_1 + 52 >> 2] + 48 | 0;
     HEAP32[$3 >> 2] = $4_1;
     HEAP32[$3 + 4 >> 2] = $5_1;
     $3 = HEAP32[$1_1 + 52 >> 2];
     HEAPF32[$3 + 60 >> 2] = $15_1;
     HEAPF32[$3 - -64 >> 2] = $10_1;
     HEAP32[$3 + 56 >> 2] = $16_1;
     $3 = HEAP32[$1_1 + 52 >> 2] + 68 | 0;
     HEAP32[$3 >> 2] = $4_1;
     HEAP32[$3 + 4 >> 2] = $5_1;
     $3 = HEAP32[$1_1 + 52 >> 2];
     HEAP32[$3 + 76 >> 2] = $16_1;
     HEAP32[$1_1 + 52 >> 2] = $3 + 80;
     HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 4;
     HEAP32[$1_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2] + 12;
     break label$10;
    }
    $0_1 = Math_fround($9 * Math_fround(.5));
    $9 = Math_fround(Math_fround($10_1 - $14) * Math_fround(.5));
    $0_1 = Math_fround(($0_1 < $9 ? $0_1 : $9) + Math_fround(-1.0));
    $0_1 = $0_1 < Math_fround(0.0) ? Math_fround(0.0) : $0_1 > $7_1 ? $7_1 : $0_1;
    $20_1 = Math_fround(Math_fround(1.0) / $0_1);
    $7_1 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($15_1 - $8) * $20_1));
    $9 = Math_fround(1.5707963705062866);
    label$3 : {
     if ($7_1 <= Math_fround(0.0)) {
      break label$3
     }
     $9 = Math_fround(0.0);
     if ($7_1 >= Math_fround(1.0)) {
      break label$3
     }
     $9 = $1590($7_1);
    }
    $7_1 = Math_fround($8 + $0_1);
    $7_1 = $7_1 <= $15_1 ? $15_1 : $7_1;
    $8 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($13 - $8) * $20_1));
    $17_1 = Math_fround(1.5707963705062866);
    label$4 : {
     if ($8 <= Math_fround(0.0)) {
      break label$4
     }
     $17_1 = Math_fround(0.0);
     if ($8 >= Math_fround(1.0)) {
      break label$4
     }
     $17_1 = $1590($8);
    }
    $8 = $17_1;
    label$5 : {
     if ($8 == $9) {
      $5_1 = HEAP32[$1_1 + 84 >> 2];
      $4_1 = HEAP32[$1_1 + 88 >> 2];
      label$7 : {
       if (($5_1 | 0) != ($4_1 | 0)) {
        break label$7
       }
       $11_1 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : 8;
       $5_1 = $5_1 + 1 | 0;
       $5_1 = ($5_1 | 0) < ($11_1 | 0) ? $11_1 : $5_1;
       if (($4_1 | 0) >= ($5_1 | 0)) {
        break label$7
       }
       $4_1 = $16($5_1 << 3);
       $11_1 = HEAP32[$1_1 + 92 >> 2];
       if ($11_1) {
        $1602($4_1, $11_1, HEAP32[$1_1 + 84 >> 2] << 3);
        $17(HEAP32[$1_1 + 92 >> 2]);
       }
       HEAP32[$1_1 + 88 >> 2] = $5_1;
       HEAP32[$1_1 + 92 >> 2] = $4_1;
      }
      $4_1 = HEAP32[$1_1 + 92 >> 2] + (HEAP32[$1_1 + 84 >> 2] << 3) | 0;
      HEAPF32[$4_1 + 4 >> 2] = $10_1;
      HEAPF32[$4_1 >> 2] = $7_1;
      $5_1 = HEAP32[$1_1 + 84 >> 2];
      $11_1 = $5_1 + 1 | 0;
      HEAP32[$1_1 + 84 >> 2] = $11_1;
      $4_1 = HEAP32[$1_1 + 88 >> 2];
      label$11 : {
       if (($11_1 | 0) != ($4_1 | 0)) {
        break label$11
       }
       $11_1 = $4_1 ? $4_1 + (($4_1 | 0) / 2 | 0) | 0 : 8;
       $5_1 = $5_1 + 2 | 0;
       $5_1 = ($5_1 | 0) < ($11_1 | 0) ? $11_1 : $5_1;
       if (($4_1 | 0) >= ($5_1 | 0)) {
        break label$11
       }
       $4_1 = $16($5_1 << 3);
       $11_1 = HEAP32[$1_1 + 92 >> 2];
       if ($11_1) {
        $1602($4_1, $11_1, HEAP32[$1_1 + 84 >> 2] << 3);
        $17(HEAP32[$1_1 + 92 >> 2]);
       }
       HEAP32[$1_1 + 88 >> 2] = $5_1;
       HEAP32[$1_1 + 92 >> 2] = $4_1;
      }
      $4_1 = HEAP32[$1_1 + 92 >> 2] + (HEAP32[$1_1 + 84 >> 2] << 3) | 0;
      HEAPF32[$4_1 + 4 >> 2] = $14;
      HEAPF32[$4_1 >> 2] = $7_1;
      HEAP32[$1_1 + 84 >> 2] = HEAP32[$1_1 + 84 >> 2] + 1;
      break label$5;
     }
     $17_1 = Math_fround($10_1 - $0_1);
     if (!($9 != Math_fround(0.0) | $8 != Math_fround(1.5707963705062866))) {
      HEAPF32[$6_1 + 12 >> 2] = $17_1;
      HEAPF32[$6_1 + 8 >> 2] = $7_1;
      $4_1 = $6_1 + 8 | 0;
      $392($1_1, $4_1, $0_1, 3, 6);
      HEAPF32[$6_1 + 12 >> 2] = $14 + $0_1;
      HEAPF32[$6_1 + 8 >> 2] = $7_1;
      $392($1_1, $4_1, $0_1, 6, 9);
      break label$5;
     }
     HEAPF32[$6_1 + 12 >> 2] = $17_1;
     HEAPF32[$6_1 + 8 >> 2] = $7_1;
     $4_1 = $6_1 + 8 | 0;
     $393($1_1, $4_1, $0_1, Math_fround(Math_fround(3.1415927410125732) - $8), Math_fround(Math_fround(3.1415927410125732) - $9), 3);
     HEAPF32[$6_1 + 12 >> 2] = $14 + $0_1;
     HEAPF32[$6_1 + 8 >> 2] = $7_1;
     $393($1_1, $4_1, $0_1, Math_fround($9 + Math_fround(3.1415927410125732)), Math_fround($8 + Math_fround(3.1415927410125732)), 3);
    }
    label$16 : {
     if (!($13 > Math_fround($0_1 + HEAPF32[$3 >> 2]))) {
      break label$16
     }
     $8 = HEAPF32[$3 + 8 >> 2];
     $7_1 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($8 - $13) * $20_1));
     $9 = Math_fround(1.5707963705062866);
     label$17 : {
      if ($7_1 <= Math_fround(0.0)) {
       break label$17
      }
      $9 = Math_fround(0.0);
      if ($7_1 >= Math_fround(1.0)) {
       break label$17
      }
      $9 = $1590($7_1);
     }
     $7_1 = $9;
     $9 = Math_fround($8 - $0_1);
     $13 = $13 < $9 ? $13 : $9;
     $15_1 = Math_fround(Math_fround(1.0) - Math_fround(Math_fround($8 - $15_1) * $20_1));
     $8 = Math_fround(1.5707963705062866);
     label$18 : {
      if ($15_1 <= Math_fround(0.0)) {
       break label$18
      }
      $8 = Math_fround(0.0);
      if ($15_1 >= Math_fround(1.0)) {
       break label$18
      }
      $8 = $1590($15_1);
     }
     $15_1 = $8;
     if ($15_1 == $7_1) {
      $4_1 = HEAP32[$1_1 + 84 >> 2];
      $3 = HEAP32[$1_1 + 88 >> 2];
      label$20 : {
       if (($4_1 | 0) != ($3 | 0)) {
        break label$20
       }
       $5_1 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
       $4_1 = $4_1 + 1 | 0;
       $4_1 = ($4_1 | 0) < ($5_1 | 0) ? $5_1 : $4_1;
       if (($3 | 0) >= ($4_1 | 0)) {
        break label$20
       }
       $3 = $16($4_1 << 3);
       $5_1 = HEAP32[$1_1 + 92 >> 2];
       if ($5_1) {
        $1602($3, $5_1, HEAP32[$1_1 + 84 >> 2] << 3);
        $17(HEAP32[$1_1 + 92 >> 2]);
       }
       HEAP32[$1_1 + 88 >> 2] = $4_1;
       HEAP32[$1_1 + 92 >> 2] = $3;
      }
      $3 = HEAP32[$1_1 + 92 >> 2] + (HEAP32[$1_1 + 84 >> 2] << 3) | 0;
      HEAPF32[$3 + 4 >> 2] = $14;
      HEAPF32[$3 >> 2] = $13;
      $4_1 = HEAP32[$1_1 + 84 >> 2];
      $5_1 = $4_1 + 1 | 0;
      HEAP32[$1_1 + 84 >> 2] = $5_1;
      $3 = HEAP32[$1_1 + 88 >> 2];
      label$24 : {
       if (($5_1 | 0) != ($3 | 0)) {
        break label$24
       }
       $5_1 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
       $4_1 = $4_1 + 2 | 0;
       $4_1 = ($4_1 | 0) < ($5_1 | 0) ? $5_1 : $4_1;
       if (($3 | 0) >= ($4_1 | 0)) {
        break label$24
       }
       $3 = $16($4_1 << 3);
       $5_1 = HEAP32[$1_1 + 92 >> 2];
       if ($5_1) {
        $1602($3, $5_1, HEAP32[$1_1 + 84 >> 2] << 3);
        $17(HEAP32[$1_1 + 92 >> 2]);
       }
       HEAP32[$1_1 + 88 >> 2] = $4_1;
       HEAP32[$1_1 + 92 >> 2] = $3;
      }
      $3 = HEAP32[$1_1 + 92 >> 2] + (HEAP32[$1_1 + 84 >> 2] << 3) | 0;
      HEAPF32[$3 + 4 >> 2] = $10_1;
      HEAPF32[$3 >> 2] = $13;
      HEAP32[$1_1 + 84 >> 2] = HEAP32[$1_1 + 84 >> 2] + 1;
      break label$16;
     }
     $14 = Math_fround($14 + $0_1);
     if (!($7_1 != Math_fround(0.0) | $15_1 != Math_fround(1.5707963705062866))) {
      HEAPF32[$6_1 + 12 >> 2] = $14;
      HEAPF32[$6_1 + 8 >> 2] = $13;
      $3 = $6_1 + 8 | 0;
      $392($1_1, $3, $0_1, 9, 12);
      HEAPF32[$6_1 + 12 >> 2] = $10_1 - $0_1;
      HEAPF32[$6_1 + 8 >> 2] = $13;
      $392($1_1, $3, $0_1, 0, 3);
      break label$16;
     }
     HEAPF32[$6_1 + 12 >> 2] = $14;
     HEAPF32[$6_1 + 8 >> 2] = $13;
     $3 = $6_1 + 8 | 0;
     $393($1_1, $3, $0_1, Math_fround(-$15_1), Math_fround(-$7_1), 3);
     HEAPF32[$6_1 + 12 >> 2] = $10_1 - $0_1;
     HEAPF32[$6_1 + 8 >> 2] = $13;
     $393($1_1, $3, $0_1, $7_1, $15_1, 3);
    }
    $389($1_1, HEAP32[$1_1 + 92 >> 2], HEAP32[$1_1 + 84 >> 2], $16_1);
    HEAP32[$1_1 + 84 >> 2] = 0;
   }
   global$0 = $6_1 + 16 | 0;
   if (!$19) {
    HEAPF64[$2_1 >> 3] = Math_fround(Math_fround($22_1 * Math_fround(100.0)) + Math_fround(.009999999776482582));
    $19 = $2_1 - -64 | 0;
    $21($19, 32, 18913, $2_1);
   }
   $68($2_1 + 56 | 0, $19, 0, 0, Math_fround(-1.0));
   $0_1 = HEAPF32[$2_1 + 56 >> 2];
   if (!($0_1 > Math_fround(0.0))) {
    break label$1
   }
   $10_1 = HEAPF32[$18_1 + 5492 >> 2];
   $14 = HEAPF32[$18_1 + 5500 >> 2];
   HEAPF32[$2_1 + 52 >> 2] = HEAPF32[$2_1 + 116 >> 2];
   $13 = HEAPF32[$2_1 + 112 >> 2];
   $14 = Math_fround(Math_fround(HEAPF32[$2_1 + 120 >> 2] - $0_1) - $14);
   $0_1 = Math_fround($10_1 + Math_fround(Math_fround(Math_fround($23_1 - $21_1) * $22_1) + $21_1));
   HEAPF32[$2_1 + 48 >> 2] = $0_1 < $13 ? $13 : $0_1 > $14 ? $14 : $0_1;
   HEAP32[$2_1 + 40 >> 2] = 0;
   HEAP32[$2_1 + 44 >> 2] = 1056964608;
   $69($2_1 + 48 | 0, $2_1 + 120 | 0, $19, 0, $2_1 + 56 | 0, $2_1 + 40 | 0, $2_1 + 112 | 0);
  }
  global$0 = $2_1 + 144 | 0;
  HEAP32[$12_1 + 4 >> 2] = 53464;
  if (HEAP8[$12_1 + 19 | 0] < 0) {
   $1756(HEAP32[$12_1 + 8 >> 2])
  }
  global$0 = $12_1 + 32 | 0;
 }
 
 function $1291($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 53464;
  HEAP32[$3 + 28 >> 2] = $1_1;
  if (HEAP32[$1_1 >> 2] != 2) {
   $1506($3 + 12 | 0)
  }
  HEAP32[$3 + 12 >> 2] = 53312;
  $0_1 = $597(($5_1 | 0) < 0 ? $4_1 : $0_1, HEAP32[HEAP32[$3 + 28 >> 2] >> 2] != 2 ? (HEAP8[$3 + 27 | 0] < 0 ? HEAP32[$3 + 16 >> 2] : $3 + 16 | 0) : 0, $2_1);
  HEAP32[$3 + 12 >> 2] = 53464;
  if (HEAP8[$3 + 27 | 0] < 0) {
   $1756(HEAP32[$3 + 16 >> 2])
  }
  global$0 = $3 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1292($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8 = HEAP32[$1_1 >> 2];
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     HEAP8[$7_1 + 31 | 0] = $8;
     $9 = $7_1 + 20 | 0;
     break label$2;
    }
    $10_1 = ($8 | 15) + 1 | 0;
    $9 = $1782($10_1);
    HEAP32[$7_1 + 28 >> 2] = $10_1 | -2147483648;
    HEAP32[$7_1 + 20 >> 2] = $9;
    HEAP32[$7_1 + 24 >> 2] = $8;
   }
   if ($8) {
    $1602($9, $1_1 + 4 | 0, $8)
   }
   HEAP8[$8 + $9 | 0] = 0;
   HEAP32[$7_1 + 12 >> 2] = $3;
   HEAP32[$7_1 + 16 >> 2] = $2_1;
   HEAP32[$7_1 + 8 >> 2] = $4_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($7_1 + 20 | 0, $7_1 + 16 | 0, $7_1 + 12 | 0, $7_1 + 8 | 0, $5_1, $6_1) | 0;
   fimport$4(HEAP32[$7_1 + 8 >> 2]);
   fimport$4(HEAP32[$7_1 + 12 >> 2]);
   fimport$4(HEAP32[$7_1 + 16 >> 2]);
   if (HEAP8[$7_1 + 31 | 0] < 0) {
    $1756(HEAP32[$7_1 + 20 >> 2])
   }
   global$0 = $7_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1293($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0.0, $11_1 = Math_fround(0);
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[23915];
  fimport$10(HEAP32[$2_1 >> 2]);
  fimport$4(HEAP32[$7_1 + 96 >> 2]);
  HEAP32[$7_1 + 96 >> 2] = HEAP32[$2_1 >> 2];
  fimport$10(HEAP32[$3 >> 2]);
  fimport$4(HEAP32[$7_1 + 100 >> 2]);
  $2_1 = HEAP32[$3 >> 2];
  HEAP32[$7_1 + 104 >> 2] = $4_1;
  HEAP32[$7_1 + 100 >> 2] = $2_1;
  $2_1 = HEAP32[$0_1 >> 2];
  $3 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 12 >> 2] = 53228;
  HEAP32[$6_1 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 24 >> 2] = 0;
  $7_1 = $6_1 + 24 | 0;
  $9 = fimport$1(72760, $7_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $9 | 0) | 0;
  fimport$4($9 | 0);
  $10_1 = +fimport$5($1_1 | 0, 72724, $7_1 | 0);
  fimport$6(HEAP32[$6_1 + 24 >> 2]);
  HEAP32[$6_1 + 16 >> 2] = Math_abs($10_1) < 2147483648.0 ? ~~$10_1 : -2147483648;
  fimport$4($1_1 | 0);
  $1_1 = ($3 | 0) < 0 ? $2_1 : $0_1;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  $7_1 = HEAP32[18392];
  HEAP32[$2_1 + 28 >> 2] = 0;
  $3 = $6_1 + 16 | 0;
  $0_1 = HEAP32[$3 >> 2];
  if (!(($0_1 | 0) < 0 | ($0_1 | 0) >= ($4_1 | 0))) {
   FUNCTION_TABLE[867](0, $0_1, $2_1 + 28 | 0) | 0
  }
  if (!(HEAPU8[$7_1 + 7300 | 0] & 16 | ($5_1 | 0) == -1)) {
   HEAP32[$2_1 + 20 >> 2] = 0;
   HEAP32[$2_1 + 24 >> 2] = 0;
   if (($5_1 | 0) <= 0) {
    $8 = Math_fround(3402823466385288598117041.0e14)
   } else {
    $0_1 = HEAP32[18392];
    $8 = HEAPF32[$0_1 + 5428 >> 2];
    $11_1 = Math_fround($8 + $8);
    $8 = HEAPF32[$0_1 + 5496 >> 2];
    $8 = Math_fround($11_1 + Math_fround(Math_fround(Math_fround(HEAPF32[$0_1 + 6468 >> 2] + $8) * Math_fround($5_1 | 0)) - $8));
   }
   HEAPF32[$2_1 + 16 >> 2] = $8;
   HEAP32[$2_1 + 12 >> 2] = 2139095039;
   $251($2_1 + 20 | 0, $2_1 + 12 | 0, 0);
  }
  $0_1 = 0;
  if ($597($1_1, HEAP32[$2_1 + 28 >> 2], 0)) {
   label$6 : {
    if (($4_1 | 0) <= 0) {
     $1_1 = 0;
     break label$6;
    }
    $1_1 = 0;
    while (1) {
     $266($0_1);
     $5_1 = HEAP32[$3 >> 2];
     if (!(FUNCTION_TABLE[867](0, $0_1, $2_1 + 12 | 0) | 0)) {
      HEAP32[$2_1 + 12 >> 2] = 17692
     }
     $7_1 = HEAP32[$2_1 + 12 >> 2];
     HEAP32[$2_1 + 20 >> 2] = 0;
     HEAP32[$2_1 + 24 >> 2] = 0;
     if ($601($7_1, ($0_1 | 0) == ($5_1 | 0), 0, $2_1 + 20 | 0)) {
      HEAP32[$3 >> 2] = $0_1;
      $1_1 = 1;
     }
     if (($0_1 | 0) == ($5_1 | 0)) {
      $263()
     }
     $269();
     $0_1 = $0_1 + 1 | 0;
     if (($0_1 | 0) != ($4_1 | 0)) {
      continue
     }
     break;
    };
   }
   $321();
   $0_1 = $1_1;
   if ($0_1) {
    $88()
   }
  }
  global$0 = $2_1 + 32 | 0;
  $1_1 = $0_1 & 1;
  HEAP32[$6_1 + 12 >> 2] = 53228;
  $2_1 = HEAP32[$6_1 + 20 >> 2];
  HEAP32[$6_1 + 24 >> 2] = HEAP32[$6_1 + 16 >> 2];
  $3 = $6_1 + 24 | 0;
  $0_1 = fimport$1(72724, $3 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 24 >> 2] = 0;
  $4_1 = $2_1;
  $2_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1294($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $9 = HEAP32[$1_1 >> 2];
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     HEAP8[$8 + 31 | 0] = $9;
     $10_1 = $8 + 20 | 0;
     break label$2;
    }
    $11_1 = ($9 | 15) + 1 | 0;
    $10_1 = $1782($11_1);
    HEAP32[$8 + 28 >> 2] = $11_1 | -2147483648;
    HEAP32[$8 + 20 >> 2] = $10_1;
    HEAP32[$8 + 24 >> 2] = $9;
   }
   if ($9) {
    $1602($10_1, $1_1 + 4 | 0, $9)
   }
   HEAP8[$9 + $10_1 | 0] = 0;
   HEAP32[$8 + 12 >> 2] = $3;
   HEAP32[$8 + 16 >> 2] = $2_1;
   HEAP32[$8 + 8 >> 2] = $4_1;
   HEAP32[$8 + 4 >> 2] = $5_1;
   HEAP32[$8 >> 2] = $6_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($8 + 20 | 0, $8 + 16 | 0, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $8, $7_1) | 0;
   fimport$4(HEAP32[$8 >> 2]);
   fimport$4(HEAP32[$8 + 4 >> 2]);
   fimport$4(HEAP32[$8 + 8 >> 2]);
   fimport$4(HEAP32[$8 + 12 >> 2]);
   fimport$4(HEAP32[$8 + 16 >> 2]);
   if (HEAP8[$8 + 31 | 0] < 0) {
    $1756(HEAP32[$8 + 20 >> 2])
   }
   global$0 = $8 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1295($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0.0, $12_1 = 0.0, $13 = 0.0, $14 = 0, $15_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $14 = HEAP32[$0_1 >> 2];
  $15_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 28 >> 2] = $1_1;
  HEAP32[$7_1 + 20 >> 2] = 53576;
  $1508($7_1 + 20 | 0);
  $11_1 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  $12_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  $13 = +fimport$5(HEAP32[$4_1 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 >> 2] = 53464;
  HEAP32[$7_1 + 16 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11_1);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12_1);
  }
  $2_1 = ($15_1 | 0) < 0;
  HEAP32[$7_1 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$7_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 15 | 0] < 0 ? HEAP32[$7_1 + 4 >> 2] : $7_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $10_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround($13);
  }
  HEAPF32[$1_1 + 8 >> 2] = $10_1;
  HEAPF32[$1_1 + 12 >> 2] = $9;
  $0_1 = $630($2_1 ? $14 : $0_1, 8, $7_1 + 24 | 0, $8, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $6_1);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$7_1 >> 2] = 53464;
  if (HEAP8[$7_1 + 15 | 0] < 0) {
   $1756(HEAP32[$7_1 + 4 >> 2])
  }
  HEAP32[$7_1 + 20 >> 2] = 53576;
  $2_1 = HEAP32[$7_1 + 28 >> 2];
  HEAPF32[$7_1 >> 2] = HEAPF32[$7_1 + 24 >> 2];
  $0_1 = fimport$1(72796, $7_1 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$7_1 >> 2] = 0;
  $3 = $2_1;
  $2_1 = fimport$1(72760, $7_1 | 0) | 0;
  fimport$3($3 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $7_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1296($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0.0, $12_1 = 0.0, $13 = 0.0, $14 = 0, $15_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $14 = HEAP32[$0_1 >> 2];
  $15_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 44 >> 2] = $1_1;
  HEAP32[$7_1 + 32 >> 2] = 53632;
  $1512($7_1 + 32 | 0);
  $1_1 = $7_1 + 8 | 0;
  $11_1 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  $12_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  $13 = +fimport$5(HEAP32[$4_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  HEAP32[$7_1 + 24 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1 + 8 | 0)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11_1);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12_1);
  }
  $2_1 = ($15_1 | 0) < 0;
  HEAP32[$7_1 + 8 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$7_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 23 | 0] < 0 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $10_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround($13);
  }
  HEAPF32[$1_1 + 8 >> 2] = $10_1;
  HEAPF32[$1_1 + 12 >> 2] = $9;
  $0_1 = $634($2_1 ? $14 : $0_1, 8, $7_1 + 36 | 0, 2, $8, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $6_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  if (HEAP8[$7_1 + 23 | 0] < 0) {
   $1756(HEAP32[$7_1 + 12 >> 2])
  }
  HEAP32[$7_1 + 32 >> 2] = 53632;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$7_1 + 44 >> 2];
   HEAPF32[$7_1 + 8 >> 2] = HEAPF32[($7_1 + ($0_1 << 2) | 0) + 36 >> 2];
   $4_1 = $7_1 + 8 | 0;
   $1_1 = fimport$1(72796, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$7_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $7_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1297($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0.0, $12_1 = 0.0, $13 = 0.0, $14 = 0, $15_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $14 = HEAP32[$0_1 >> 2];
  $15_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 44 >> 2] = $1_1;
  HEAP32[$7_1 + 28 >> 2] = 53688;
  $1516($7_1 + 28 | 0);
  $1_1 = $7_1 + 8 | 0;
  $11_1 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  $12_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  $13 = +fimport$5(HEAP32[$4_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  HEAP32[$7_1 + 24 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1 + 8 | 0)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11_1);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12_1);
  }
  $2_1 = ($15_1 | 0) < 0;
  HEAP32[$7_1 + 8 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$7_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 23 | 0] < 0 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $10_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround($13);
  }
  HEAPF32[$1_1 + 8 >> 2] = $10_1;
  HEAPF32[$1_1 + 12 >> 2] = $9;
  $0_1 = $634($2_1 ? $14 : $0_1, 8, $7_1 + 32 | 0, 3, $8, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $6_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  if (HEAP8[$7_1 + 23 | 0] < 0) {
   $1756(HEAP32[$7_1 + 12 >> 2])
  }
  HEAP32[$7_1 + 28 >> 2] = 53688;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$7_1 + 44 >> 2];
   HEAPF32[$7_1 + 8 >> 2] = HEAPF32[($7_1 + ($0_1 << 2) | 0) + 32 >> 2];
   $4_1 = $7_1 + 8 | 0;
   $1_1 = fimport$1(72796, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$7_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $7_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1298($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = 0.0, $12_1 = 0.0, $13 = 0.0, $14 = 0, $15_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $14 = HEAP32[$0_1 >> 2];
  $15_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 44 >> 2] = $1_1;
  HEAP32[$7_1 + 24 >> 2] = 53744;
  $1520($7_1 + 24 | 0);
  $11_1 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  $12_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  $13 = +fimport$5(HEAP32[$4_1 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 >> 2] = 53464;
  HEAP32[$7_1 + 16 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($11_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($11_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($11_1);
  }
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($12_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($12_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($12_1);
  }
  $2_1 = ($15_1 | 0) < 0;
  HEAP32[$7_1 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$7_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 15 | 0] < 0 ? HEAP32[$7_1 + 4 >> 2] : $7_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $10_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $10_1 = Math_fround($13);
  }
  HEAPF32[$1_1 + 8 >> 2] = $10_1;
  HEAPF32[$1_1 + 12 >> 2] = $9;
  $0_1 = $634($2_1 ? $14 : $0_1, 8, $7_1 + 28 | 0, 4, $8, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $6_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$7_1 >> 2] = 53464;
  if (HEAP8[$7_1 + 15 | 0] < 0) {
   $1756(HEAP32[$7_1 + 4 >> 2])
  }
  HEAP32[$7_1 + 24 >> 2] = 53744;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$7_1 + 44 >> 2];
   HEAPF32[$7_1 >> 2] = HEAPF32[($7_1 + ($0_1 << 2) | 0) + 28 >> 2];
   $1_1 = fimport$1(72796, $7_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$7_1 >> 2] = $0_1;
   $4_1 = $3;
   $3 = fimport$1(72760, $7_1 | 0) | 0;
   fimport$3($4_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $7_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1299($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $10_1 = global$0 - 48 | 0;
  global$0 = $10_1;
  $11_1 = HEAP32[$1_1 >> 2];
  if ($11_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($11_1 >>> 0 <= 10) {
     HEAP8[$10_1 + 47 | 0] = $11_1;
     $12_1 = $10_1 + 36 | 0;
     break label$2;
    }
    $13 = ($11_1 | 15) + 1 | 0;
    $12_1 = $1782($13);
    HEAP32[$10_1 + 44 >> 2] = $13 | -2147483648;
    HEAP32[$10_1 + 36 >> 2] = $12_1;
    HEAP32[$10_1 + 40 >> 2] = $11_1;
   }
   if ($11_1) {
    $1602($12_1, $1_1 + 4 | 0, $11_1)
   }
   HEAP8[$11_1 + $12_1 | 0] = 0;
   HEAP32[$10_1 + 28 >> 2] = $3;
   HEAP32[$10_1 + 32 >> 2] = $2_1;
   HEAP32[$10_1 + 24 >> 2] = $4_1;
   HEAP32[$10_1 + 20 >> 2] = $5_1;
   HEAP32[$10_1 + 16 >> 2] = $6_1;
   HEAP32[$10_1 + 12 >> 2] = $7_1;
   HEAP32[$10_1 + 8 >> 2] = $8;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($10_1 + 36 | 0, $10_1 + 32 | 0, $10_1 + 28 | 0, $10_1 + 24 | 0, $10_1 + 20 | 0, $10_1 + 16 | 0, $10_1 + 12 | 0, $10_1 + 8 | 0, $9) | 0;
   fimport$4(HEAP32[$10_1 + 8 >> 2]);
   fimport$4(HEAP32[$10_1 + 12 >> 2]);
   fimport$4(HEAP32[$10_1 + 16 >> 2]);
   fimport$4(HEAP32[$10_1 + 20 >> 2]);
   fimport$4(HEAP32[$10_1 + 24 >> 2]);
   fimport$4(HEAP32[$10_1 + 28 >> 2]);
   fimport$4(HEAP32[$10_1 + 32 >> 2]);
   if (HEAP8[$10_1 + 47 | 0] < 0) {
    $1756(HEAP32[$10_1 + 36 >> 2])
   }
   global$0 = $10_1 + 48 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1300($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = 0, $15_1 = Math_fround(0), $16_1 = 0.0, $17_1 = 0.0, $18_1 = 0.0, $19 = 0;
  $9 = global$0 - 80 | 0;
  global$0 = $9;
  $19 = HEAP32[$0_1 >> 2];
  $14 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$9 + 76 >> 2] = $1_1;
  HEAP32[$9 + 68 >> 2] = 53576;
  $1508($9 + 68 | 0);
  HEAP32[$9 + 64 >> 2] = $2_1;
  HEAP32[$9 + 56 >> 2] = 53576;
  $1508($9 + 56 | 0);
  $1_1 = $9 + 32 | 0;
  $16_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  $17_1 = +fimport$5(HEAP32[$4_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  $18_1 = +fimport$5(HEAP32[$5_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  $5_1 = $1_1;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$9 + 36 >> 2] = 0;
  HEAP32[$9 + 40 >> 2] = 0;
  HEAP32[$9 + 32 >> 2] = 53464;
  HEAP32[$9 + 48 >> 2] = $6_1;
  if (HEAP32[$6_1 >> 2] != 2) {
   $1506($9 + 32 | 0)
  }
  HEAP32[$9 + 32 >> 2] = 53312;
  $4_1 = HEAP32[HEAP32[$9 + 48 >> 2] >> 2];
  $3 = HEAP32[$9 + 36 >> 2];
  $2_1 = HEAP8[$9 + 47 | 0];
  $1_1 = $9 + 12 | 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$9 + 16 >> 2] = 0;
  HEAP32[$9 + 20 >> 2] = 0;
  HEAP32[$9 + 12 >> 2] = 53464;
  HEAP32[$9 + 28 >> 2] = $7_1;
  if (HEAP32[$7_1 >> 2] != 2) {
   $1506($9 + 12 | 0)
  }
  HEAP32[$9 + 12 >> 2] = 53312;
  $14 = ($14 | 0) < 0 ? $19 : $0_1;
  $7_1 = $9 + 72 | 0;
  $6_1 = $9 + 60 | 0;
  $13 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($16_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $13 = Math_fround(-3402823466385288598117041.0e14);
   if ($16_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $13 = Math_fround($16_1);
  }
  $11_1 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($17_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $11_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($17_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $11_1 = Math_fround($17_1);
  }
  $12_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($18_1 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $12_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($18_1 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $12_1 = Math_fround($18_1);
  }
  $4_1 = ($4_1 | 0) != 2 ? (($2_1 | 0) < 0 ? $3 : $5_1 + 4 | 0) : 0;
  $3 = HEAP32[HEAP32[$9 + 28 >> 2] >> 2] != 2 ? (HEAP8[$9 + 27 | 0] < 0 ? HEAP32[$9 + 16 >> 2] : $1_1 + 4 | 0) : 0;
  $2_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $1_1 = HEAP32[18392];
  $0_1 = HEAP32[$1_1 + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  if (!HEAPU8[$0_1 + 143 | 0]) {
   $153($14);
   $301();
   $290(2, $292());
   $0_1 = $11_1 >= $12_1;
   $15_1 = $0_1 ? Math_fround(-3402823466385288598117041.0e14) : $11_1;
   HEAPF32[$5_1 + 12 >> 2] = $15_1;
   $10_1 = HEAPF32[$6_1 >> 2];
   $10_1 = $0_1 ? $10_1 : $10_1 > $12_1 ? $12_1 : $10_1;
   HEAPF32[$5_1 + 8 >> 2] = $10_1;
   $2_1 = $630(7616, 8, $7_1, $13, $5_1 + 12 | 0, $5_1 + 8 | 0, $4_1, ($10_1 == $15_1) << 21 | $8);
   $291();
   $1_1 = $1_1 + 5500 | 0;
   $276(Math_fround(0.0), HEAPF32[$1_1 >> 2]);
   $10_1 = HEAPF32[$7_1 >> 2];
   $15_1 = $0_1 ? $10_1 : $10_1 <= $11_1 ? $11_1 : $10_1;
   HEAPF32[$5_1 + 4 >> 2] = $15_1;
   $10_1 = $0_1 ? Math_fround(3402823466385288598117041.0e14) : $12_1;
   HEAPF32[$5_1 >> 2] = $10_1;
   $0_1 = $630(1521, 8, $6_1, $13, $5_1 + 4 | 0, $5_1, $3 ? $3 : $4_1, ($10_1 == $15_1) << 21 | $8);
   $291();
   $276(Math_fround(0.0), HEAPF32[$1_1 >> 2]);
   $555($14, $62($14), 0);
   $275();
   $269();
   $2_1 = $0_1 | $2_1;
  }
  global$0 = $5_1 + 16 | 0;
  HEAP32[$9 + 12 >> 2] = 53464;
  if (HEAP8[$9 + 27 | 0] < 0) {
   $1756(HEAP32[$9 + 16 >> 2])
  }
  HEAP32[$9 + 32 >> 2] = 53464;
  if (HEAP8[$9 + 47 | 0] < 0) {
   $1756(HEAP32[$9 + 36 >> 2])
  }
  HEAP32[$9 + 56 >> 2] = 53576;
  $0_1 = HEAP32[$9 + 64 >> 2];
  HEAPF32[$9 + 32 >> 2] = HEAPF32[$9 + 60 >> 2];
  $4_1 = $9 + 32 | 0;
  $1_1 = $4_1;
  $3 = fimport$1(72796, $1_1 | 0) | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$9 + 32 >> 2] = 0;
  $5_1 = $0_1;
  $0_1 = fimport$1(72760, $1_1 | 0) | 0;
  fimport$3($5_1 | 0, $0_1 | 0, $3 | 0);
  fimport$4($0_1 | 0);
  fimport$4($3 | 0);
  HEAP32[$9 + 68 >> 2] = 53576;
  $0_1 = HEAP32[$9 + 76 >> 2];
  HEAPF32[$9 + 32 >> 2] = HEAPF32[$9 + 72 >> 2];
  $1_1 = fimport$1(72796, $1_1 | 0) | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$9 + 32 >> 2] = 0;
  $3 = $0_1;
  $0_1 = fimport$1(72760, $4_1 | 0) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  global$0 = $9 + 80 | 0;
  return $2_1 | 0;
 }
 
 function $1301($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $9 = HEAP32[$1_1 >> 2];
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     HEAP8[$8 + 31 | 0] = $9;
     $10_1 = $8 + 20 | 0;
     break label$2;
    }
    $11_1 = ($9 | 15) + 1 | 0;
    $10_1 = $1782($11_1);
    HEAP32[$8 + 28 >> 2] = $11_1 | -2147483648;
    HEAP32[$8 + 20 >> 2] = $10_1;
    HEAP32[$8 + 24 >> 2] = $9;
   }
   if ($9) {
    $1602($10_1, $1_1 + 4 | 0, $9)
   }
   HEAP8[$9 + $10_1 | 0] = 0;
   HEAP32[$8 + 12 >> 2] = $3;
   HEAP32[$8 + 16 >> 2] = $2_1;
   HEAP32[$8 + 8 >> 2] = $6_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($8 + 20 | 0, $8 + 16 | 0, $8 + 12 | 0, $4_1, $5_1, $8 + 8 | 0, $7_1) | 0;
   fimport$4(HEAP32[$8 + 8 >> 2]);
   fimport$4(HEAP32[$8 + 12 >> 2]);
   fimport$4(HEAP32[$8 + 16 >> 2]);
   if (HEAP8[$8 + 31 | 0] < 0) {
    $1756(HEAP32[$8 + 20 >> 2])
   }
   global$0 = $8 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1302($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0.0, $9 = Math_fround(0), $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $11_1 = HEAP32[$0_1 >> 2];
  $12_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 20 >> 2] = 53228;
  HEAP32[$7_1 + 28 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$7_1 >> 2] = 0;
  $10_1 = fimport$1(72760, $7_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $10_1 | 0) | 0;
  fimport$4($10_1 | 0);
  $8 = +fimport$5($1_1 | 0, 72724, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  HEAP32[$7_1 + 24 >> 2] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
  fimport$4($1_1 | 0);
  $8 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 >> 2] = 53464;
  HEAP32[$7_1 + 16 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1)
  }
  HEAP32[$7_1 >> 2] = 53312;
  $2_1 = HEAP32[HEAP32[$7_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 15 | 0] < 0 ? HEAP32[$7_1 + 4 >> 2] : $7_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  HEAP32[$1_1 + 12 >> 2] = $3;
  $0_1 = ($12_1 | 0) < 0 ? $11_1 : $0_1;
  $3 = $7_1 + 24 | 0;
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($8 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($8 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $9 = Math_fround($8);
  }
  $0_1 = $630($0_1, 4, $3, $9, $1_1 + 12 | 0, $1_1 + 8 | 0, $2_1, $6_1);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$7_1 >> 2] = 53464;
  if (HEAP8[$7_1 + 15 | 0] < 0) {
   $1756(HEAP32[$7_1 + 4 >> 2])
  }
  HEAP32[$7_1 + 20 >> 2] = 53228;
  $2_1 = HEAP32[$7_1 + 28 >> 2];
  HEAP32[$7_1 >> 2] = HEAP32[$7_1 + 24 >> 2];
  $0_1 = fimport$1(72724, $7_1 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$7_1 >> 2] = 0;
  $3 = $2_1;
  $2_1 = fimport$1(72760, $7_1 | 0) | 0;
  fimport$3($3 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $7_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1303($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = 0.0, $10_1 = 0, $11_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $10_1 = HEAP32[$0_1 >> 2];
  $11_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 44 >> 2] = $1_1;
  HEAP32[$7_1 + 32 >> 2] = 53896;
  $1524($7_1 + 32 | 0);
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $7_1 + 8 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  HEAP32[$7_1 + 24 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1 + 8 | 0)
  }
  HEAP32[$7_1 + 8 >> 2] = 53312;
  $2_1 = HEAP32[HEAP32[$7_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 23 | 0] < 0 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  HEAP32[$1_1 + 12 >> 2] = $3;
  $0_1 = ($11_1 | 0) < 0 ? $10_1 : $0_1;
  $3 = $7_1 + 36 | 0;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($9);
  }
  $0_1 = $634($0_1, 4, $3, 2, $8, $1_1 + 12 | 0, $1_1 + 8 | 0, $2_1, $6_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  if (HEAP8[$7_1 + 23 | 0] < 0) {
   $1756(HEAP32[$7_1 + 12 >> 2])
  }
  HEAP32[$7_1 + 32 >> 2] = 53896;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$7_1 + 44 >> 2];
   HEAP32[$7_1 + 8 >> 2] = HEAP32[($7_1 + ($0_1 << 2) | 0) + 36 >> 2];
   $4_1 = $7_1 + 8 | 0;
   $1_1 = fimport$1(72724, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$7_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $7_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1304($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = 0.0, $10_1 = 0, $11_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $10_1 = HEAP32[$0_1 >> 2];
  $11_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 44 >> 2] = $1_1;
  HEAP32[$7_1 + 28 >> 2] = 53952;
  $1528($7_1 + 28 | 0);
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $7_1 + 8 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  HEAP32[$7_1 + 24 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1 + 8 | 0)
  }
  HEAP32[$7_1 + 8 >> 2] = 53312;
  $2_1 = HEAP32[HEAP32[$7_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 23 | 0] < 0 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  HEAP32[$1_1 + 12 >> 2] = $3;
  $0_1 = ($11_1 | 0) < 0 ? $10_1 : $0_1;
  $3 = $7_1 + 32 | 0;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($9);
  }
  $0_1 = $634($0_1, 4, $3, 3, $8, $1_1 + 12 | 0, $1_1 + 8 | 0, $2_1, $6_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  if (HEAP8[$7_1 + 23 | 0] < 0) {
   $1756(HEAP32[$7_1 + 12 >> 2])
  }
  HEAP32[$7_1 + 28 >> 2] = 53952;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$7_1 + 44 >> 2];
   HEAP32[$7_1 + 8 >> 2] = HEAP32[($7_1 + ($0_1 << 2) | 0) + 32 >> 2];
   $4_1 = $7_1 + 8 | 0;
   $1_1 = fimport$1(72724, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$7_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $7_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1305($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = 0.0, $10_1 = 0, $11_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $10_1 = HEAP32[$0_1 >> 2];
  $11_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 44 >> 2] = $1_1;
  HEAP32[$7_1 + 24 >> 2] = 54008;
  $1532($7_1 + 24 | 0);
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $7_1 | 0);
  fimport$6(HEAP32[$7_1 >> 2]);
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 4 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 0;
  HEAP32[$7_1 >> 2] = 53464;
  HEAP32[$7_1 + 16 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1)
  }
  HEAP32[$7_1 >> 2] = 53312;
  $2_1 = HEAP32[HEAP32[$7_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 15 | 0] < 0 ? HEAP32[$7_1 + 4 >> 2] : $7_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  HEAP32[$1_1 + 12 >> 2] = $3;
  $0_1 = ($11_1 | 0) < 0 ? $10_1 : $0_1;
  $3 = $7_1 + 28 | 0;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($9);
  }
  $0_1 = $634($0_1, 4, $3, 4, $8, $1_1 + 12 | 0, $1_1 + 8 | 0, $2_1, $6_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$7_1 >> 2] = 53464;
  if (HEAP8[$7_1 + 15 | 0] < 0) {
   $1756(HEAP32[$7_1 + 4 >> 2])
  }
  HEAP32[$7_1 + 24 >> 2] = 54008;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$7_1 + 44 >> 2];
   HEAP32[$7_1 >> 2] = HEAP32[($7_1 + ($0_1 << 2) | 0) + 28 >> 2];
   $1_1 = fimport$1(72724, $7_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$7_1 >> 2] = $0_1;
   $4_1 = $3;
   $3 = fimport$1(72760, $7_1 | 0) | 0;
   fimport$3($4_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $7_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1306($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = 0, $13 = 0.0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0.0, $19 = 0, $20_1 = 0.0;
  $9 = global$0 - 80 | 0;
  global$0 = $9;
  $15_1 = HEAP32[$0_1 >> 2];
  $16_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$9 + 68 >> 2] = 53228;
  HEAP32[$9 + 76 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$9 + 32 >> 2] = 0;
  $10_1 = $1_1;
  $12_1 = $9 + 32 | 0;
  $1_1 = fimport$1(72760, $12_1 | 0) | 0;
  $14 = fimport$7($10_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $13 = +fimport$5($14 | 0, 72724, $12_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  HEAP32[$9 + 72 >> 2] = Math_abs($13) < 2147483648.0 ? ~~$13 : -2147483648;
  fimport$4($14 | 0);
  HEAP32[$9 + 56 >> 2] = 53228;
  HEAP32[$9 + 64 >> 2] = $2_1;
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$9 + 32 >> 2] = 0;
  $10_1 = $1_1;
  $2_1 = $12_1;
  $1_1 = fimport$1(72760, $2_1 | 0) | 0;
  $12_1 = fimport$7($10_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $13 = +fimport$5($12_1 | 0, 72724, $2_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  HEAP32[$9 + 60 >> 2] = Math_abs($13) < 2147483648.0 ? ~~$13 : -2147483648;
  fimport$4($12_1 | 0);
  $18_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $2_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  $1_1 = $2_1;
  $20_1 = +fimport$5(HEAP32[$4_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  $13 = +fimport$5(HEAP32[$5_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 32 >> 2]);
  HEAP32[$9 + 44 >> 2] = 0;
  HEAP32[$9 + 36 >> 2] = 0;
  HEAP32[$9 + 40 >> 2] = 0;
  HEAP32[$9 + 32 >> 2] = 53464;
  HEAP32[$9 + 48 >> 2] = $6_1;
  $1_1 = HEAP32[$6_1 >> 2];
  $11_1 = Math_fround($20_1);
  label$6 : {
   if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
    $2_1 = ~~$11_1;
    break label$6;
   }
   $2_1 = -2147483648;
  }
  $3 = ($1_1 | 0) == 2;
  $11_1 = Math_fround($13);
  label$8 : {
   if (Math_fround(Math_abs($11_1)) < Math_fround(2147483648.0)) {
    $1_1 = ~~$11_1;
    break label$8;
   }
   $1_1 = -2147483648;
  }
  if (!$3) {
   $1506($9 + 32 | 0)
  }
  HEAP32[$9 + 32 >> 2] = 53312;
  $5_1 = HEAP32[HEAP32[$9 + 48 >> 2] >> 2];
  $4_1 = HEAP32[$9 + 36 >> 2];
  $3 = HEAP8[$9 + 47 | 0];
  HEAP32[$9 + 24 >> 2] = 0;
  HEAP32[$9 + 16 >> 2] = 0;
  HEAP32[$9 + 20 >> 2] = 0;
  HEAP32[$9 + 12 >> 2] = 53464;
  HEAP32[$9 + 28 >> 2] = $7_1;
  if (HEAP32[$7_1 >> 2] != 2) {
   $1506($9 + 12 | 0)
  }
  HEAP32[$9 + 12 >> 2] = 53312;
  $19 = ($16_1 | 0) < 0 ? $15_1 : $0_1;
  $14 = $9 + 72 | 0;
  $15_1 = $9 + 60 | 0;
  $11_1 = Math_fround(3402823466385288598117041.0e14);
  label$5 : {
   if ($18_1 >= 3402823466385288598117041.0e14) {
    break label$5
   }
   $11_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($18_1 <= -3402823466385288598117041.0e14) {
    break label$5
   }
   $11_1 = Math_fround($18_1);
  }
  $16_1 = ($5_1 | 0) != 2 ? (($3 | 0) < 0 ? $4_1 : $9 + 36 | 0) : 0;
  $12_1 = HEAP32[HEAP32[$9 + 28 >> 2] >> 2] != 2 ? (HEAP8[$9 + 27 | 0] < 0 ? HEAP32[$9 + 16 >> 2] : $9 + 16 | 0) : 0;
  $3 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $7_1 = HEAP32[18392];
  $0_1 = HEAP32[$7_1 + 7080 >> 2];
  HEAP8[$0_1 + 140 | 0] = 1;
  if (!HEAPU8[$0_1 + 143 | 0]) {
   $153($19);
   $301();
   $290(2, $292());
   $0_1 = HEAP32[$15_1 >> 2];
   $17_1 = ($1_1 | 0) > ($2_1 | 0);
   $3 = $17_1 ? (($0_1 | 0) > ($1_1 | 0) ? $1_1 : $0_1) : $0_1;
   HEAP32[$10_1 + 8 >> 2] = $3;
   $0_1 = $17_1 ? $2_1 : -2147483648;
   HEAP32[$10_1 + 12 >> 2] = $0_1;
   $6_1 = $10_1 + 12 | 0;
   $5_1 = $10_1 + 8 | 0;
   $4_1 = $630(7616, 4, $14, $11_1, $6_1, $5_1, $16_1, (($0_1 | 0) == ($3 | 0)) << 21 | $8);
   $291();
   $3 = $7_1 + 5500 | 0;
   $276(Math_fround(0.0), HEAPF32[$3 >> 2]);
   $0_1 = HEAP32[$14 >> 2];
   $2_1 = $17_1 ? (($0_1 | 0) < ($2_1 | 0) ? $2_1 : $0_1) : $0_1;
   HEAP32[$10_1 + 12 >> 2] = $2_1;
   $0_1 = $17_1 ? $1_1 : 2147483647;
   HEAP32[$10_1 + 8 >> 2] = $0_1;
   $0_1 = $630(1521, 4, $15_1, $11_1, $6_1, $5_1, $12_1 ? $12_1 : $16_1, (($0_1 | 0) == ($2_1 | 0)) << 21 | $8);
   $291();
   $276(Math_fround(0.0), HEAPF32[$3 >> 2]);
   $555($19, $62($19), 0);
   $275();
   $269();
   $3 = $0_1 | $4_1;
  }
  global$0 = $10_1 + 16 | 0;
  $2_1 = $3;
  HEAP32[$9 + 12 >> 2] = 53464;
  if (HEAP8[$9 + 27 | 0] < 0) {
   $1756(HEAP32[$9 + 16 >> 2])
  }
  HEAP32[$9 + 32 >> 2] = 53464;
  if (HEAP8[$9 + 47 | 0] < 0) {
   $1756(HEAP32[$9 + 36 >> 2])
  }
  HEAP32[$9 + 56 >> 2] = 53228;
  $0_1 = HEAP32[$9 + 64 >> 2];
  HEAP32[$9 + 32 >> 2] = HEAP32[$9 + 60 >> 2];
  $4_1 = $9 + 32 | 0;
  $1_1 = $4_1;
  $3 = fimport$1(72724, $1_1 | 0) | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$9 + 32 >> 2] = 0;
  $5_1 = $0_1;
  $0_1 = fimport$1(72760, $1_1 | 0) | 0;
  fimport$3($5_1 | 0, $0_1 | 0, $3 | 0);
  fimport$4($0_1 | 0);
  fimport$4($3 | 0);
  HEAP32[$9 + 68 >> 2] = 53228;
  $0_1 = HEAP32[$9 + 76 >> 2];
  HEAP32[$9 + 32 >> 2] = HEAP32[$9 + 72 >> 2];
  $1_1 = fimport$1(72724, $1_1 | 0) | 0;
  $0_1 = HEAP32[$0_1 >> 2];
  HEAP32[$9 + 32 >> 2] = 0;
  $3 = $0_1;
  $0_1 = fimport$1(72760, $4_1 | 0) | 0;
  fimport$3($3 | 0, $0_1 | 0, $1_1 | 0);
  fimport$4($0_1 | 0);
  fimport$4($1_1 | 0);
  global$0 = $9 + 80 | 0;
  return $2_1 | 0;
 }
 
 function $1307($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $9 = global$0 - 32 | 0;
  global$0 = $9;
  $10_1 = HEAP32[$1_1 >> 2];
  if ($10_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($10_1 >>> 0 <= 10) {
     HEAP8[$9 + 31 | 0] = $10_1;
     $11_1 = $9 + 20 | 0;
     break label$2;
    }
    $12_1 = ($10_1 | 15) + 1 | 0;
    $11_1 = $1782($12_1);
    HEAP32[$9 + 28 >> 2] = $12_1 | -2147483648;
    HEAP32[$9 + 20 >> 2] = $11_1;
    HEAP32[$9 + 24 >> 2] = $10_1;
   }
   if ($10_1) {
    $1602($11_1, $1_1 + 4 | 0, $10_1)
   }
   HEAP8[$10_1 + $11_1 | 0] = 0;
   HEAP32[$9 + 12 >> 2] = $4_1;
   HEAP32[$9 + 16 >> 2] = $3;
   HEAP32[$9 + 8 >> 2] = $5_1;
   HEAP32[$9 + 4 >> 2] = $6_1;
   HEAP32[$9 >> 2] = $7_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($9 + 20 | 0, $2_1, $9 + 16 | 0, $9 + 12 | 0, $9 + 8 | 0, $9 + 4 | 0, $9, $8) | 0;
   fimport$4(HEAP32[$9 >> 2]);
   fimport$4(HEAP32[$9 + 4 >> 2]);
   fimport$4(HEAP32[$9 + 8 >> 2]);
   fimport$4(HEAP32[$9 + 12 >> 2]);
   fimport$4(HEAP32[$9 + 16 >> 2]);
   if (HEAP8[$9 + 31 | 0] < 0) {
    $1756(HEAP32[$9 + 20 >> 2])
   }
   global$0 = $9 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1308($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = Math_fround(0), $10_1 = 0.0, $11_1 = 0.0, $12_1 = 0, $13 = 0;
  $8 = global$0 - 96 | 0;
  global$0 = $8;
  label$1 : {
   label$2 : {
    switch ($1_1 | 0) {
    case 0:
     $12_1 = HEAP32[$0_1 >> 2];
     $13 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1536($8 + 32 | 0, $2_1);
     $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
     fimport$6(HEAP32[$8 + 56 >> 2]);
     HEAP32[$8 + 12 >> 2] = 54160;
     HEAP32[$8 + 20 >> 2] = $4_1;
     $2_1 = HEAP32[$4_1 >> 2];
     if (($2_1 | 0) != 2) {
      $10_1 = +fimport$5($2_1 | 0, 72688, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP8[$8 + 16 | 0] = Math_abs($10_1) < 2147483648.0 ? ~~$10_1 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2];
     HEAP32[$8 + 80 >> 2] = 54160;
     HEAP32[$8 + 88 >> 2] = $5_1;
     $3 = HEAP32[$5_1 >> 2];
     if (($3 | 0) != 2) {
      $10_1 = +fimport$5($3 | 0, 72688, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP8[$8 + 84 | 0] = Math_abs($10_1) < 2147483648.0 ? ~~$10_1 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$8 + 88 >> 2] >> 2];
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 64 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 53464;
     HEAP32[$8 + 72 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 56 | 0)
     }
     HEAP32[$8 + 56 >> 2] = 53312;
     $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$10 : {
      if ($11_1 >= 3402823466385288598117041.0e14) {
       break label$10
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11_1 <= -3402823466385288598117041.0e14) {
       break label$10
      }
      $9 = Math_fround($11_1);
     }
     $12_1 = $634($4_1, 0, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, HEAP32[HEAP32[$8 + 72 >> 2] >> 2] != 2 ? (HEAP8[$8 + 71 | 0] < 0 ? HEAP32[$8 + 60 >> 2] : $8 + 60 | 0) : 0, $7_1);
     HEAP32[$8 + 56 >> 2] = 53464;
     if (HEAP8[$8 + 71 | 0] < 0) {
      $1756(HEAP32[$8 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95828] & 1)) {
      $4_1 = fimport$17(2, 54204) | 0;
      HEAP8[95828] = 1;
      HEAP32[23956] = $4_1;
     }
     $4_1 = HEAP32[23956];
     HEAP32[$8 + 60 >> 2] = $0_1;
     HEAP32[$8 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 1:
     $12_1 = HEAP32[$0_1 >> 2];
     $13 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1537($8 + 32 | 0, $2_1);
     $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
     fimport$6(HEAP32[$8 + 56 >> 2]);
     HEAP32[$8 + 12 >> 2] = 54220;
     HEAP32[$8 + 20 >> 2] = $4_1;
     $2_1 = HEAP32[$4_1 >> 2];
     if (($2_1 | 0) != 2) {
      $10_1 = +fimport$5($2_1 | 0, 72676, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP8[$8 + 16 | 0] = $10_1 < 4294967296.0 & $10_1 >= 0.0 ? ~~$10_1 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2];
     HEAP32[$8 + 80 >> 2] = 54220;
     HEAP32[$8 + 88 >> 2] = $5_1;
     $3 = HEAP32[$5_1 >> 2];
     if (($3 | 0) != 2) {
      $10_1 = +fimport$5($3 | 0, 72676, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP8[$8 + 84 | 0] = $10_1 < 4294967296.0 & $10_1 >= 0.0 ? ~~$10_1 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$8 + 88 >> 2] >> 2];
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 64 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 53464;
     HEAP32[$8 + 72 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 56 | 0)
     }
     HEAP32[$8 + 56 >> 2] = 53312;
     $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$21 : {
      if ($11_1 >= 3402823466385288598117041.0e14) {
       break label$21
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11_1 <= -3402823466385288598117041.0e14) {
       break label$21
      }
      $9 = Math_fround($11_1);
     }
     $12_1 = $634($4_1, 1, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, HEAP32[HEAP32[$8 + 72 >> 2] >> 2] != 2 ? (HEAP8[$8 + 71 | 0] < 0 ? HEAP32[$8 + 60 >> 2] : $8 + 60 | 0) : 0, $7_1);
     HEAP32[$8 + 56 >> 2] = 53464;
     if (HEAP8[$8 + 71 | 0] < 0) {
      $1756(HEAP32[$8 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95836] & 1)) {
      $4_1 = fimport$17(2, 54264) | 0;
      HEAP8[95836] = 1;
      HEAP32[23958] = $4_1;
     }
     $4_1 = HEAP32[23958];
     HEAP32[$8 + 60 >> 2] = $0_1;
     HEAP32[$8 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 2:
     $12_1 = HEAP32[$0_1 >> 2];
     $13 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1538($8 + 32 | 0, $2_1);
     $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
     fimport$6(HEAP32[$8 + 56 >> 2]);
     HEAP32[$8 + 12 >> 2] = 54320;
     HEAP32[$8 + 20 >> 2] = $4_1;
     $2_1 = HEAP32[$4_1 >> 2];
     if (($2_1 | 0) != 2) {
      $10_1 = +fimport$5($2_1 | 0, 72700, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP16[$8 + 16 >> 1] = Math_abs($10_1) < 2147483648.0 ? ~~$10_1 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2];
     HEAP32[$8 + 80 >> 2] = 54320;
     HEAP32[$8 + 88 >> 2] = $5_1;
     $3 = HEAP32[$5_1 >> 2];
     if (($3 | 0) != 2) {
      $10_1 = +fimport$5($3 | 0, 72700, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP16[$8 + 84 >> 1] = Math_abs($10_1) < 2147483648.0 ? ~~$10_1 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$8 + 88 >> 2] >> 2];
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 64 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 53464;
     HEAP32[$8 + 72 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 56 | 0)
     }
     HEAP32[$8 + 56 >> 2] = 53312;
     $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$32 : {
      if ($11_1 >= 3402823466385288598117041.0e14) {
       break label$32
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11_1 <= -3402823466385288598117041.0e14) {
       break label$32
      }
      $9 = Math_fround($11_1);
     }
     $12_1 = $634($4_1, 2, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, HEAP32[HEAP32[$8 + 72 >> 2] >> 2] != 2 ? (HEAP8[$8 + 71 | 0] < 0 ? HEAP32[$8 + 60 >> 2] : $8 + 60 | 0) : 0, $7_1);
     HEAP32[$8 + 56 >> 2] = 53464;
     if (HEAP8[$8 + 71 | 0] < 0) {
      $1756(HEAP32[$8 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95844] & 1)) {
      $4_1 = fimport$17(2, 54364) | 0;
      HEAP8[95844] = 1;
      HEAP32[23960] = $4_1;
     }
     $4_1 = HEAP32[23960];
     HEAP32[$8 + 60 >> 2] = $0_1;
     HEAP32[$8 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 3:
     $12_1 = HEAP32[$0_1 >> 2];
     $13 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1539($8 + 32 | 0, $2_1);
     $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
     fimport$6(HEAP32[$8 + 56 >> 2]);
     HEAP32[$8 + 12 >> 2] = 54420;
     HEAP32[$8 + 20 >> 2] = $4_1;
     $2_1 = HEAP32[$4_1 >> 2];
     if (($2_1 | 0) != 2) {
      $10_1 = +fimport$5($2_1 | 0, 72712, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP16[$8 + 16 >> 1] = $10_1 < 4294967296.0 & $10_1 >= 0.0 ? ~~$10_1 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2];
     HEAP32[$8 + 80 >> 2] = 54420;
     HEAP32[$8 + 88 >> 2] = $5_1;
     $3 = HEAP32[$5_1 >> 2];
     if (($3 | 0) != 2) {
      $10_1 = +fimport$5($3 | 0, 72712, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP16[$8 + 84 >> 1] = $10_1 < 4294967296.0 & $10_1 >= 0.0 ? ~~$10_1 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$8 + 88 >> 2] >> 2];
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 64 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 53464;
     HEAP32[$8 + 72 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 56 | 0)
     }
     HEAP32[$8 + 56 >> 2] = 53312;
     $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$43 : {
      if ($11_1 >= 3402823466385288598117041.0e14) {
       break label$43
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11_1 <= -3402823466385288598117041.0e14) {
       break label$43
      }
      $9 = Math_fround($11_1);
     }
     $12_1 = $634($4_1, 3, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, HEAP32[HEAP32[$8 + 72 >> 2] >> 2] != 2 ? (HEAP8[$8 + 71 | 0] < 0 ? HEAP32[$8 + 60 >> 2] : $8 + 60 | 0) : 0, $7_1);
     HEAP32[$8 + 56 >> 2] = 53464;
     if (HEAP8[$8 + 71 | 0] < 0) {
      $1756(HEAP32[$8 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95852] & 1)) {
      $4_1 = fimport$17(2, 54464) | 0;
      HEAP8[95852] = 1;
      HEAP32[23962] = $4_1;
     }
     $4_1 = HEAP32[23962];
     HEAP32[$8 + 60 >> 2] = $0_1;
     HEAP32[$8 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 4:
     $12_1 = HEAP32[$0_1 >> 2];
     $13 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1540($8 + 32 | 0, $2_1);
     $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
     fimport$6(HEAP32[$8 + 56 >> 2]);
     HEAP32[$8 + 12 >> 2] = 54520;
     HEAP32[$8 + 20 >> 2] = $4_1;
     $2_1 = HEAP32[$4_1 >> 2];
     if (($2_1 | 0) != 2) {
      $10_1 = +fimport$5($2_1 | 0, 72724, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP32[$8 + 16 >> 2] = Math_abs($10_1) < 2147483648.0 ? ~~$10_1 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2];
     HEAP32[$8 + 80 >> 2] = 54520;
     HEAP32[$8 + 88 >> 2] = $5_1;
     $3 = HEAP32[$5_1 >> 2];
     if (($3 | 0) != 2) {
      $10_1 = +fimport$5($3 | 0, 72724, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP32[$8 + 84 >> 2] = Math_abs($10_1) < 2147483648.0 ? ~~$10_1 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$8 + 88 >> 2] >> 2];
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 64 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 53464;
     HEAP32[$8 + 72 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 56 | 0)
     }
     HEAP32[$8 + 56 >> 2] = 53312;
     $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$54 : {
      if ($11_1 >= 3402823466385288598117041.0e14) {
       break label$54
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11_1 <= -3402823466385288598117041.0e14) {
       break label$54
      }
      $9 = Math_fround($11_1);
     }
     $12_1 = $634($4_1, 4, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, HEAP32[HEAP32[$8 + 72 >> 2] >> 2] != 2 ? (HEAP8[$8 + 71 | 0] < 0 ? HEAP32[$8 + 60 >> 2] : $8 + 60 | 0) : 0, $7_1);
     HEAP32[$8 + 56 >> 2] = 53464;
     if (HEAP8[$8 + 71 | 0] < 0) {
      $1756(HEAP32[$8 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95860] & 1)) {
      $4_1 = fimport$17(2, 54564) | 0;
      HEAP8[95860] = 1;
      HEAP32[23964] = $4_1;
     }
     $4_1 = HEAP32[23964];
     HEAP32[$8 + 60 >> 2] = $0_1;
     HEAP32[$8 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 5:
     $12_1 = HEAP32[$0_1 >> 2];
     $13 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1541($8 + 32 | 0, $2_1);
     $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
     fimport$6(HEAP32[$8 + 56 >> 2]);
     HEAP32[$8 + 12 >> 2] = 54620;
     HEAP32[$8 + 20 >> 2] = $4_1;
     $2_1 = HEAP32[$4_1 >> 2];
     if (($2_1 | 0) != 2) {
      $10_1 = +fimport$5($2_1 | 0, 72736, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP32[$8 + 16 >> 2] = $10_1 < 4294967296.0 & $10_1 >= 0.0 ? ~~$10_1 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2];
     HEAP32[$8 + 80 >> 2] = 54620;
     HEAP32[$8 + 88 >> 2] = $5_1;
     $3 = HEAP32[$5_1 >> 2];
     if (($3 | 0) != 2) {
      $10_1 = +fimport$5($3 | 0, 72736, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      HEAP32[$8 + 84 >> 2] = $10_1 < 4294967296.0 & $10_1 >= 0.0 ? ~~$10_1 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$8 + 88 >> 2] >> 2];
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 64 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 53464;
     HEAP32[$8 + 72 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 56 | 0)
     }
     HEAP32[$8 + 56 >> 2] = 53312;
     $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$65 : {
      if ($11_1 >= 3402823466385288598117041.0e14) {
       break label$65
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11_1 <= -3402823466385288598117041.0e14) {
       break label$65
      }
      $9 = Math_fround($11_1);
     }
     $12_1 = $634($4_1, 5, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, HEAP32[HEAP32[$8 + 72 >> 2] >> 2] != 2 ? (HEAP8[$8 + 71 | 0] < 0 ? HEAP32[$8 + 60 >> 2] : $8 + 60 | 0) : 0, $7_1);
     HEAP32[$8 + 56 >> 2] = 53464;
     if (HEAP8[$8 + 71 | 0] < 0) {
      $1756(HEAP32[$8 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95868] & 1)) {
      $4_1 = fimport$17(2, 54664) | 0;
      HEAP8[95868] = 1;
      HEAP32[23966] = $4_1;
     }
     $4_1 = HEAP32[23966];
     HEAP32[$8 + 60 >> 2] = $0_1;
     HEAP32[$8 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 8:
     $12_1 = HEAP32[$0_1 >> 2];
     $13 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1542($8 + 32 | 0, $2_1);
     $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
     fimport$6(HEAP32[$8 + 56 >> 2]);
     HEAP32[$8 + 12 >> 2] = 54720;
     HEAP32[$8 + 20 >> 2] = $4_1;
     $2_1 = HEAP32[$4_1 >> 2];
     if (($2_1 | 0) != 2) {
      $10_1 = +fimport$5($2_1 | 0, 72808, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      $9 = Math_fround(3402823466385288598117041.0e14);
      label$78 : {
       if ($10_1 >= 3402823466385288598117041.0e14) {
        break label$78
       }
       $9 = Math_fround(-3402823466385288598117041.0e14);
       if ($10_1 <= -3402823466385288598117041.0e14) {
        break label$78
       }
       $9 = Math_fround($10_1);
      }
      HEAPF32[$8 + 16 >> 2] = $9;
     }
     $2_1 = HEAP32[HEAP32[$8 + 20 >> 2] >> 2];
     HEAP32[$8 + 80 >> 2] = 54720;
     HEAP32[$8 + 88 >> 2] = $5_1;
     $3 = HEAP32[$5_1 >> 2];
     if (($3 | 0) != 2) {
      $10_1 = +fimport$5($3 | 0, 72808, $8 + 56 | 0);
      fimport$6(HEAP32[$8 + 56 >> 2]);
      $9 = Math_fround(3402823466385288598117041.0e14);
      label$80 : {
       if ($10_1 >= 3402823466385288598117041.0e14) {
        break label$80
       }
       $9 = Math_fround(-3402823466385288598117041.0e14);
       if ($10_1 <= -3402823466385288598117041.0e14) {
        break label$80
       }
       $9 = Math_fround($10_1);
      }
      HEAPF32[$8 + 84 >> 2] = $9;
     }
     $3 = HEAP32[HEAP32[$8 + 88 >> 2] >> 2];
     HEAP32[$8 + 68 >> 2] = 0;
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 64 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 53464;
     HEAP32[$8 + 72 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 56 | 0)
     }
     HEAP32[$8 + 56 >> 2] = 53312;
     $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $9 = Math_fround(3402823466385288598117041.0e14);
     label$76 : {
      if ($11_1 >= 3402823466385288598117041.0e14) {
       break label$76
      }
      $9 = Math_fround(-3402823466385288598117041.0e14);
      if ($11_1 <= -3402823466385288598117041.0e14) {
       break label$76
      }
      $9 = Math_fround($11_1);
     }
     $12_1 = $634($4_1, 8, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 + 16 | 0 : 0, ($3 | 0) != 2 ? $8 + 84 | 0 : 0, HEAP32[HEAP32[$8 + 72 >> 2] >> 2] != 2 ? (HEAP8[$8 + 71 | 0] < 0 ? HEAP32[$8 + 60 >> 2] : $8 + 60 | 0) : 0, $7_1);
     HEAP32[$8 + 56 >> 2] = 53464;
     if (HEAP8[$8 + 71 | 0] < 0) {
      $1756(HEAP32[$8 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95876] & 1)) {
      $4_1 = fimport$17(2, 54764) | 0;
      HEAP8[95876] = 1;
      HEAP32[23968] = $4_1;
     }
     $4_1 = HEAP32[23968];
     HEAP32[$8 + 60 >> 2] = $0_1;
     HEAP32[$8 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $12_1 = HEAP32[$0_1 >> 2];
   $13 = HEAP8[$0_1 + 11 | 0];
   $1_1 = $1543($8 + 80 | 0, $2_1);
   $11_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $8 + 56 | 0);
   fimport$6(HEAP32[$8 + 56 >> 2]);
   HEAP32[$8 + 56 >> 2] = 54820;
   HEAP32[$8 + 72 >> 2] = $4_1;
   $2_1 = HEAP32[$4_1 >> 2];
   if (($2_1 | 0) != 2) {
    $10_1 = +fimport$5($2_1 | 0, 72808, $8 + 32 | 0);
    fimport$6(HEAP32[$8 + 32 >> 2]);
    HEAPF64[$8 + 64 >> 3] = $10_1;
   }
   $2_1 = HEAP32[HEAP32[$8 + 72 >> 2] >> 2];
   HEAP32[$8 + 32 >> 2] = 54820;
   HEAP32[$8 + 48 >> 2] = $5_1;
   $3 = HEAP32[$5_1 >> 2];
   if (($3 | 0) != 2) {
    $10_1 = +fimport$5($3 | 0, 72808, $8 + 12 | 0);
    fimport$6(HEAP32[$8 + 12 >> 2]);
    HEAPF64[$8 + 40 >> 3] = $10_1;
   }
   $3 = HEAP32[HEAP32[$8 + 48 >> 2] >> 2];
   HEAP32[$8 + 24 >> 2] = 0;
   HEAP32[$8 + 16 >> 2] = 0;
   HEAP32[$8 + 20 >> 2] = 0;
   HEAP32[$8 + 12 >> 2] = 53464;
   HEAP32[$8 + 28 >> 2] = $6_1;
   if (HEAP32[$6_1 >> 2] != 2) {
    $1506($8 + 12 | 0)
   }
   HEAP32[$8 + 12 >> 2] = 53312;
   $4_1 = ($13 | 0) < 0 ? $12_1 : $0_1;
   $0_1 = HEAP32[$1_1 >> 2];
   $5_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 3;
   $9 = Math_fround(3402823466385288598117041.0e14);
   label$85 : {
    if ($11_1 >= 3402823466385288598117041.0e14) {
     break label$85
    }
    $9 = Math_fround(-3402823466385288598117041.0e14);
    if ($11_1 <= -3402823466385288598117041.0e14) {
     break label$85
    }
    $9 = Math_fround($11_1);
   }
   $12_1 = $634($4_1, 9, $0_1, $5_1, $9, ($2_1 | 0) != 2 ? $8 - -64 | 0 : 0, ($3 | 0) != 2 ? $8 + 40 | 0 : 0, HEAP32[HEAP32[$8 + 28 >> 2] >> 2] != 2 ? (HEAP8[$8 + 27 | 0] < 0 ? HEAP32[$8 + 16 >> 2] : $8 + 16 | 0) : 0, $7_1);
   HEAP32[$8 + 12 >> 2] = 53464;
   if (HEAP8[$8 + 27 | 0] < 0) {
    $1756(HEAP32[$8 + 16 >> 2])
   }
   $0_1 = HEAP32[$1_1 >> 2];
   $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 3;
   $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
   if (!(HEAP8[95884] & 1)) {
    $4_1 = fimport$17(2, 54864) | 0;
    HEAP8[95884] = 1;
    HEAP32[23970] = $4_1;
   }
   $4_1 = HEAP32[23970];
   HEAP32[$8 + 60 >> 2] = $0_1;
   HEAP32[$8 + 56 >> 2] = $2_1;
   fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 56 | 0);
   $0_1 = HEAP32[$1_1 >> 2];
   if ($0_1) {
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    $1756($0_1);
   }
  }
  global$0 = $8 + 96 | 0;
  return $12_1 | 0;
 }
 
 function $1309($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8 = HEAP32[$1_1 >> 2];
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     HEAP8[$7_1 + 31 | 0] = $8;
     $9 = $7_1 + 20 | 0;
     break label$2;
    }
    $10_1 = ($8 | 15) + 1 | 0;
    $9 = $1782($10_1);
    HEAP32[$7_1 + 28 >> 2] = $10_1 | -2147483648;
    HEAP32[$7_1 + 20 >> 2] = $9;
    HEAP32[$7_1 + 24 >> 2] = $8;
   }
   if ($8) {
    $1602($9, $1_1 + 4 | 0, $8)
   }
   HEAP8[$8 + $9 | 0] = 0;
   HEAP32[$7_1 + 12 >> 2] = $3;
   HEAP32[$7_1 + 16 >> 2] = $2_1;
   HEAP32[$7_1 + 8 >> 2] = $4_1;
   HEAP32[$7_1 + 4 >> 2] = $5_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($7_1 + 20 | 0, $7_1 + 16 | 0, $7_1 + 12 | 0, $7_1 + 8 | 0, $7_1 + 4 | 0, $6_1) | 0;
   fimport$4(HEAP32[$7_1 + 4 >> 2]);
   fimport$4(HEAP32[$7_1 + 8 >> 2]);
   fimport$4(HEAP32[$7_1 + 12 >> 2]);
   fimport$4(HEAP32[$7_1 + 16 >> 2]);
   if (HEAP8[$7_1 + 31 | 0] < 0) {
    $1756(HEAP32[$7_1 + 20 >> 2])
   }
   global$0 = $7_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1310($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $11_1 = HEAP32[$0_1 >> 2];
  $12_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 28 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = 53576;
  $1508($6_1 + 20 | 0);
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  $10_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 53464;
  HEAP32[$6_1 + 16 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1)
  }
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround($9);
  }
  $2_1 = ($12_1 | 0) < 0;
  HEAP32[$6_1 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $6_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10_1);
  }
  HEAPF32[$1_1 + 8 >> 2] = $8;
  HEAPF32[$1_1 + 12 >> 2] = $7_1;
  $0_1 = $652($2_1 ? $11_1 : $0_1, 8, $6_1 + 24 | 0, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $5_1);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$6_1 >> 2] = 53464;
  if (HEAP8[$6_1 + 15 | 0] < 0) {
   $1756(HEAP32[$6_1 + 4 >> 2])
  }
  HEAP32[$6_1 + 20 >> 2] = 53576;
  $2_1 = HEAP32[$6_1 + 28 >> 2];
  HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 + 24 >> 2];
  $0_1 = fimport$1(72796, $6_1 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $3 = $2_1;
  $2_1 = fimport$1(72760, $6_1 | 0) | 0;
  fimport$3($3 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1311($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $11_1 = HEAP32[$0_1 >> 2];
  $12_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 44 >> 2] = $1_1;
  HEAP32[$6_1 + 32 >> 2] = 53632;
  $1512($6_1 + 32 | 0);
  $1_1 = $6_1 + 8 | 0;
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$6_1 + 8 >> 2]);
  $10_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$6_1 + 8 >> 2]);
  HEAP32[$6_1 + 20 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  HEAP32[$6_1 + 24 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1 + 8 | 0)
  }
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround($9);
  }
  $2_1 = ($12_1 | 0) < 0;
  HEAP32[$6_1 + 8 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$6_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 23 | 0] < 0 ? HEAP32[$6_1 + 12 >> 2] : $6_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10_1);
  }
  HEAPF32[$1_1 + 8 >> 2] = $8;
  HEAPF32[$1_1 + 12 >> 2] = $7_1;
  $0_1 = $653($2_1 ? $11_1 : $0_1, 8, $6_1 + 36 | 0, 2, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $5_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  if (HEAP8[$6_1 + 23 | 0] < 0) {
   $1756(HEAP32[$6_1 + 12 >> 2])
  }
  HEAP32[$6_1 + 32 >> 2] = 53632;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$6_1 + 44 >> 2];
   HEAPF32[$6_1 + 8 >> 2] = HEAPF32[($6_1 + ($0_1 << 2) | 0) + 36 >> 2];
   $4_1 = $6_1 + 8 | 0;
   $1_1 = fimport$1(72796, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$6_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $6_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1312($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $11_1 = HEAP32[$0_1 >> 2];
  $12_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 44 >> 2] = $1_1;
  HEAP32[$6_1 + 28 >> 2] = 53688;
  $1516($6_1 + 28 | 0);
  $1_1 = $6_1 + 8 | 0;
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$6_1 + 8 >> 2]);
  $10_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$6_1 + 8 >> 2]);
  HEAP32[$6_1 + 20 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  HEAP32[$6_1 + 24 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1 + 8 | 0)
  }
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround($9);
  }
  $2_1 = ($12_1 | 0) < 0;
  HEAP32[$6_1 + 8 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$6_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 23 | 0] < 0 ? HEAP32[$6_1 + 12 >> 2] : $6_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10_1);
  }
  HEAPF32[$1_1 + 8 >> 2] = $8;
  HEAPF32[$1_1 + 12 >> 2] = $7_1;
  $0_1 = $653($2_1 ? $11_1 : $0_1, 8, $6_1 + 32 | 0, 3, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $5_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  if (HEAP8[$6_1 + 23 | 0] < 0) {
   $1756(HEAP32[$6_1 + 12 >> 2])
  }
  HEAP32[$6_1 + 28 >> 2] = 53688;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$6_1 + 44 >> 2];
   HEAPF32[$6_1 + 8 >> 2] = HEAPF32[($6_1 + ($0_1 << 2) | 0) + 32 >> 2];
   $4_1 = $6_1 + 8 | 0;
   $1_1 = fimport$1(72796, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$6_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $6_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1313($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $11_1 = HEAP32[$0_1 >> 2];
  $12_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 44 >> 2] = $1_1;
  HEAP32[$6_1 + 24 >> 2] = 53744;
  $1520($6_1 + 24 | 0);
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  $10_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 53464;
  HEAP32[$6_1 + 16 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1)
  }
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround($9);
  }
  $2_1 = ($12_1 | 0) < 0;
  HEAP32[$6_1 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $6_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10_1);
  }
  HEAPF32[$1_1 + 8 >> 2] = $8;
  HEAPF32[$1_1 + 12 >> 2] = $7_1;
  $0_1 = $653($2_1 ? $11_1 : $0_1, 8, $6_1 + 28 | 0, 4, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $5_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$6_1 >> 2] = 53464;
  if (HEAP8[$6_1 + 15 | 0] < 0) {
   $1756(HEAP32[$6_1 + 4 >> 2])
  }
  HEAP32[$6_1 + 24 >> 2] = 53744;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$6_1 + 44 >> 2];
   HEAPF32[$6_1 >> 2] = HEAPF32[($6_1 + ($0_1 << 2) | 0) + 28 >> 2];
   $1_1 = fimport$1(72796, $6_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$6_1 >> 2] = $0_1;
   $4_1 = $3;
   $3 = fimport$1(72760, $6_1 | 0) | 0;
   fimport$3($4_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $6_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1314($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = 0.0, $9 = 0.0, $10_1 = 0, $11_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $10_1 = HEAP32[$0_1 >> 2];
  $11_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 28 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = 53576;
  $1508($6_1 + 20 | 0);
  $8 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  $9 = +fimport$5(HEAP32[$3 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 53464;
  HEAP32[$6_1 + 16 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1)
  }
  $3 = ($11_1 | 0) < 0;
  HEAP32[$6_1 >> 2] = 53312;
  $2_1 = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $6_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $4_1 = $6_1 + 24 | 0;
  HEAPF32[$1_1 + 4 >> 2] = Math_fround(HEAPF32[$4_1 >> 2] * Math_fround(360.0)) / Math_fround(6.2831854820251465);
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($8 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($8 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround($8);
  }
  HEAPF32[$1_1 + 12 >> 2] = $7_1;
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $7_1 = Math_fround($9);
  }
  HEAPF32[$1_1 + 8 >> 2] = $7_1;
  $0_1 = $652($3 ? $10_1 : $0_1, 8, $1_1 + 4 | 0, $1_1 + 12 | 0, $1_1 + 8 | 0, $2_1 ? $2_1 : 9442, $5_1);
  HEAPF32[$4_1 >> 2] = Math_fround(HEAPF32[$1_1 + 4 >> 2] * Math_fround(6.2831854820251465)) / Math_fround(360.0);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$6_1 >> 2] = 53464;
  if (HEAP8[$6_1 + 15 | 0] < 0) {
   $1756(HEAP32[$6_1 + 4 >> 2])
  }
  HEAP32[$6_1 + 20 >> 2] = 53576;
  $2_1 = HEAP32[$6_1 + 28 >> 2];
  HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 + 24 >> 2];
  $0_1 = fimport$1(72796, $6_1 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $3 = $2_1;
  $2_1 = fimport$1(72760, $6_1 | 0) | 0;
  fimport$3($3 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1315($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8 = HEAP32[$1_1 >> 2];
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     HEAP8[$7_1 + 31 | 0] = $8;
     $9 = $7_1 + 20 | 0;
     break label$2;
    }
    $10_1 = ($8 | 15) + 1 | 0;
    $9 = $1782($10_1);
    HEAP32[$7_1 + 28 >> 2] = $10_1 | -2147483648;
    HEAP32[$7_1 + 20 >> 2] = $9;
    HEAP32[$7_1 + 24 >> 2] = $8;
   }
   if ($8) {
    $1602($9, $1_1 + 4 | 0, $8)
   }
   HEAP8[$8 + $9 | 0] = 0;
   HEAP32[$7_1 + 12 >> 2] = $5_1;
   HEAP32[$7_1 + 16 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($7_1 + 20 | 0, $7_1 + 16 | 0, $3, $4_1, $7_1 + 12 | 0, $6_1) | 0;
   fimport$4(HEAP32[$7_1 + 12 >> 2]);
   fimport$4(HEAP32[$7_1 + 16 >> 2]);
   if (HEAP8[$7_1 + 31 | 0] < 0) {
    $1756(HEAP32[$7_1 + 20 >> 2])
   }
   global$0 = $7_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1316($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0.0, $9 = 0, $10_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $9 = HEAP32[$0_1 >> 2];
  $10_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 20 >> 2] = 53228;
  HEAP32[$6_1 + 28 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $7_1 = fimport$1(72760, $6_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $7_1 | 0) | 0;
  fimport$4($7_1 | 0);
  $8 = +fimport$5($1_1 | 0, 72724, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  HEAP32[$6_1 + 24 >> 2] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
  fimport$4($1_1 | 0);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 53464;
  HEAP32[$6_1 + 16 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1)
  }
  HEAP32[$6_1 >> 2] = 53312;
  $1_1 = $659(($10_1 | 0) < 0 ? $9 : $0_1, $6_1 + 24 | 0, $2_1, $3, HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $6_1 + 4 | 0) : 0, $5_1);
  HEAP32[$6_1 >> 2] = 53464;
  if (HEAP8[$6_1 + 15 | 0] < 0) {
   $1756(HEAP32[$6_1 + 4 >> 2])
  }
  HEAP32[$6_1 + 20 >> 2] = 53228;
  $2_1 = HEAP32[$6_1 + 28 >> 2];
  HEAP32[$6_1 >> 2] = HEAP32[$6_1 + 24 >> 2];
  $0_1 = fimport$1(72724, $6_1 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $3 = $2_1;
  $2_1 = fimport$1(72760, $6_1 | 0) | 0;
  fimport$3($3 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1317($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $8 = HEAP32[$0_1 >> 2];
  $9 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 44 >> 2] = $1_1;
  HEAP32[$6_1 + 32 >> 2] = 53896;
  $7_1 = $6_1 + 32 | 0;
  $1524($7_1);
  HEAP32[$6_1 + 20 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  HEAP32[$6_1 + 24 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1 + 8 | 0)
  }
  HEAP32[$6_1 + 8 >> 2] = 53312;
  $4_1 = HEAP32[HEAP32[$6_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 23 | 0] < 0 ? HEAP32[$6_1 + 12 >> 2] : $6_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $3;
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $0_1 = $653(($9 | 0) < 0 ? $8 : $0_1, 4, $7_1 + 4 | 0, 2, $1_1 + 12 | 0, $1_1 + 8 | 0, $4_1, $5_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  if (HEAP8[$6_1 + 23 | 0] < 0) {
   $1756(HEAP32[$6_1 + 12 >> 2])
  }
  HEAP32[$6_1 + 32 >> 2] = 53896;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$6_1 + 44 >> 2];
   HEAP32[$6_1 + 8 >> 2] = HEAP32[($6_1 + ($0_1 << 2) | 0) + 36 >> 2];
   $4_1 = $6_1 + 8 | 0;
   $1_1 = fimport$1(72724, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$6_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $6_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1318($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $8 = HEAP32[$0_1 >> 2];
  $9 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 44 >> 2] = $1_1;
  HEAP32[$6_1 + 28 >> 2] = 53952;
  $7_1 = $6_1 + 28 | 0;
  $1528($7_1);
  HEAP32[$6_1 + 20 >> 2] = 0;
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 16 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  HEAP32[$6_1 + 24 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1 + 8 | 0)
  }
  HEAP32[$6_1 + 8 >> 2] = 53312;
  $4_1 = HEAP32[HEAP32[$6_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 23 | 0] < 0 ? HEAP32[$6_1 + 12 >> 2] : $6_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $3;
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $0_1 = $653(($9 | 0) < 0 ? $8 : $0_1, 4, $7_1 + 4 | 0, 3, $1_1 + 12 | 0, $1_1 + 8 | 0, $4_1, $5_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$6_1 + 8 >> 2] = 53464;
  if (HEAP8[$6_1 + 23 | 0] < 0) {
   $1756(HEAP32[$6_1 + 12 >> 2])
  }
  HEAP32[$6_1 + 28 >> 2] = 53952;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$6_1 + 44 >> 2];
   HEAP32[$6_1 + 8 >> 2] = HEAP32[($6_1 + ($0_1 << 2) | 0) + 32 >> 2];
   $4_1 = $6_1 + 8 | 0;
   $1_1 = fimport$1(72724, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$6_1 + 8 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $6_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1319($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $8 = HEAP32[$0_1 >> 2];
  $9 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 44 >> 2] = $1_1;
  HEAP32[$6_1 + 24 >> 2] = 54008;
  $7_1 = $6_1 + 24 | 0;
  $1532($7_1);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 53464;
  HEAP32[$6_1 + 16 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1)
  }
  HEAP32[$6_1 >> 2] = 53312;
  $4_1 = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $6_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $3;
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $0_1 = $653(($9 | 0) < 0 ? $8 : $0_1, 4, $7_1 + 4 | 0, 4, $1_1 + 12 | 0, $1_1 + 8 | 0, $4_1, $5_1);
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$6_1 >> 2] = 53464;
  if (HEAP8[$6_1 + 15 | 0] < 0) {
   $1756(HEAP32[$6_1 + 4 >> 2])
  }
  HEAP32[$6_1 + 24 >> 2] = 54008;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$6_1 + 44 >> 2];
   HEAP32[$6_1 >> 2] = HEAP32[($6_1 + ($0_1 << 2) | 0) + 28 >> 2];
   $1_1 = fimport$1(72724, $6_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$6_1 >> 2] = $0_1;
   $4_1 = $3;
   $3 = fimport$1(72760, $6_1 | 0) | 0;
   fimport$3($4_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $6_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1320($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $9 = HEAP32[$1_1 >> 2];
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     HEAP8[$8 + 31 | 0] = $9;
     $10_1 = $8 + 20 | 0;
     break label$2;
    }
    $11_1 = ($9 | 15) + 1 | 0;
    $10_1 = $1782($11_1);
    HEAP32[$8 + 28 >> 2] = $11_1 | -2147483648;
    HEAP32[$8 + 20 >> 2] = $10_1;
    HEAP32[$8 + 24 >> 2] = $9;
   }
   if ($9) {
    $1602($10_1, $1_1 + 4 | 0, $9)
   }
   HEAP8[$9 + $10_1 | 0] = 0;
   HEAP32[$8 + 12 >> 2] = $4_1;
   HEAP32[$8 + 16 >> 2] = $3;
   HEAP32[$8 + 8 >> 2] = $5_1;
   HEAP32[$8 + 4 >> 2] = $6_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($8 + 20 | 0, $2_1, $8 + 16 | 0, $8 + 12 | 0, $8 + 8 | 0, $8 + 4 | 0, $7_1) | 0;
   fimport$4(HEAP32[$8 + 4 >> 2]);
   fimport$4(HEAP32[$8 + 8 >> 2]);
   fimport$4(HEAP32[$8 + 12 >> 2]);
   fimport$4(HEAP32[$8 + 16 >> 2]);
   if (HEAP8[$8 + 31 | 0] < 0) {
    $1756(HEAP32[$8 + 20 >> 2])
   }
   global$0 = $8 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1321($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0.0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0);
  $7_1 = global$0 - 96 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    switch ($1_1 | 0) {
    case 0:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1536($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54160;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72688, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 16 | 0] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54160;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72688, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 84 | 0] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $653($4_1, 0, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 | 0, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95828] & 1)) {
      $4_1 = fimport$17(2, 54204) | 0;
      HEAP8[95828] = 1;
      HEAP32[23956] = $4_1;
     }
     $4_1 = HEAP32[23956];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 1:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1537($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54220;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72676, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 16 | 0] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54220;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72676, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 84 | 0] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $653($4_1, 1, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 | 0, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95836] & 1)) {
      $4_1 = fimport$17(2, 54264) | 0;
      HEAP8[95836] = 1;
      HEAP32[23958] = $4_1;
     }
     $4_1 = HEAP32[23958];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 2:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1538($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54320;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72700, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 16 >> 1] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54320;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72700, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 84 >> 1] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $653($4_1, 2, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95844] & 1)) {
      $4_1 = fimport$17(2, 54364) | 0;
      HEAP8[95844] = 1;
      HEAP32[23960] = $4_1;
     }
     $4_1 = HEAP32[23960];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 3:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1539($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54420;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72712, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 16 >> 1] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54420;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72712, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 84 >> 1] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $653($4_1, 3, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95852] & 1)) {
      $4_1 = fimport$17(2, 54464) | 0;
      HEAP8[95852] = 1;
      HEAP32[23962] = $4_1;
     }
     $4_1 = HEAP32[23962];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 4:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1540($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54520;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72724, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 16 >> 2] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54520;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72724, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 84 >> 2] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $653($4_1, 4, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95860] & 1)) {
      $4_1 = fimport$17(2, 54564) | 0;
      HEAP8[95860] = 1;
      HEAP32[23964] = $4_1;
     }
     $4_1 = HEAP32[23964];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 5:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1541($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54620;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72736, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 16 >> 2] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54620;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72736, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 84 >> 2] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $653($4_1, 5, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95868] & 1)) {
      $4_1 = fimport$17(2, 54664) | 0;
      HEAP8[95868] = 1;
      HEAP32[23966] = $4_1;
     }
     $4_1 = HEAP32[23966];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 8:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1542($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54720;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72808, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      $11_1 = Math_fround(3402823466385288598117041.0e14);
      label$71 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$71
       }
       $11_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$71
       }
       $11_1 = Math_fround($8);
      }
      HEAPF32[$7_1 + 16 >> 2] = $11_1;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54720;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72808, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      $11_1 = Math_fround(3402823466385288598117041.0e14);
      label$73 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$73
       }
       $11_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$73
       }
       $11_1 = Math_fround($8);
      }
      HEAPF32[$7_1 + 84 >> 2] = $11_1;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $653($4_1, 8, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95876] & 1)) {
      $4_1 = fimport$17(2, 54764) | 0;
      HEAP8[95876] = 1;
      HEAP32[23968] = $4_1;
     }
     $4_1 = HEAP32[23968];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $9 = HEAP32[$0_1 >> 2];
   $10_1 = HEAP8[$0_1 + 11 | 0];
   $1_1 = $1543($7_1 + 80 | 0, $2_1);
   HEAP32[$7_1 + 56 >> 2] = 54820;
   HEAP32[$7_1 + 72 >> 2] = $3;
   $2_1 = HEAP32[$3 >> 2];
   if (($2_1 | 0) != 2) {
    $8 = +fimport$5($2_1 | 0, 72808, $7_1 + 32 | 0);
    fimport$6(HEAP32[$7_1 + 32 >> 2]);
    HEAPF64[$7_1 + 64 >> 3] = $8;
   }
   $2_1 = HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2];
   HEAP32[$7_1 + 32 >> 2] = 54820;
   HEAP32[$7_1 + 48 >> 2] = $4_1;
   $3 = HEAP32[$4_1 >> 2];
   if (($3 | 0) != 2) {
    $8 = +fimport$5($3 | 0, 72808, $7_1 + 12 | 0);
    fimport$6(HEAP32[$7_1 + 12 >> 2]);
    HEAPF64[$7_1 + 40 >> 3] = $8;
   }
   $3 = HEAP32[HEAP32[$7_1 + 48 >> 2] >> 2];
   HEAP32[$7_1 + 24 >> 2] = 0;
   HEAP32[$7_1 + 16 >> 2] = 0;
   HEAP32[$7_1 + 20 >> 2] = 0;
   HEAP32[$7_1 + 12 >> 2] = 53464;
   HEAP32[$7_1 + 28 >> 2] = $5_1;
   if (HEAP32[$5_1 >> 2] != 2) {
    $1506($7_1 + 12 | 0)
   }
   HEAP32[$7_1 + 12 >> 2] = 53312;
   $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
   $0_1 = HEAP32[$1_1 >> 2];
   $9 = $653($4_1, 9, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 3, ($2_1 | 0) != 2 ? $7_1 - -64 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 40 | 0 : 0, HEAP32[HEAP32[$7_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 27 | 0] < 0 ? HEAP32[$7_1 + 16 >> 2] : $7_1 + 16 | 0) : 0, $6_1);
   HEAP32[$7_1 + 12 >> 2] = 53464;
   if (HEAP8[$7_1 + 27 | 0] < 0) {
    $1756(HEAP32[$7_1 + 16 >> 2])
   }
   $0_1 = HEAP32[$1_1 >> 2];
   $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 3;
   $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
   if (!(HEAP8[95884] & 1)) {
    $4_1 = fimport$17(2, 54864) | 0;
    HEAP8[95884] = 1;
    HEAP32[23970] = $4_1;
   }
   $4_1 = HEAP32[23970];
   HEAP32[$7_1 + 60 >> 2] = $0_1;
   HEAP32[$7_1 + 56 >> 2] = $2_1;
   fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
   $0_1 = HEAP32[$1_1 >> 2];
   if ($0_1) {
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    $1756($0_1);
   }
  }
  global$0 = $7_1 + 96 | 0;
  return $9 | 0;
 }
 
 function $1322($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = 0.0, $11_1 = 0.0, $12_1 = 0, $13 = 0, $14 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $12_1 = HEAP32[$0_1 >> 2];
  $13 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 40 >> 2] = 0;
  HEAP32[$7_1 + 44 >> 2] = 0;
  $14 = $763($1_1, $7_1 + 40 | 0);
  HEAP32[$7_1 + 36 >> 2] = $2_1;
  HEAP32[$7_1 + 28 >> 2] = 53576;
  $1508($7_1 + 28 | 0);
  $1_1 = $7_1 + 8 | 0;
  $10_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  $11_1 = +fimport$5(HEAP32[$4_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  HEAP32[$7_1 + 24 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1 + 8 | 0)
  }
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($10_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $8 = Math_fround($10_1);
  }
  $2_1 = ($13 | 0) < 0;
  HEAP32[$7_1 + 8 >> 2] = 53312;
  $3 = HEAP32[HEAP32[$7_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 23 | 0] < 0 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $9 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($11_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround(-3402823466385288598117041.0e14);
   if ($11_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $9 = Math_fround($11_1);
  }
  HEAPF32[$1_1 + 8 >> 2] = $9;
  HEAPF32[$1_1 + 12 >> 2] = $8;
  $0_1 = $663($2_1 ? $12_1 : $0_1, $14, 8, $7_1 + 32 | 0, $1_1 + 12 | 0, $1_1 + 8 | 0, $3, $6_1);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  if (HEAP8[$7_1 + 23 | 0] < 0) {
   $1756(HEAP32[$7_1 + 12 >> 2])
  }
  HEAP32[$7_1 + 28 >> 2] = 53576;
  $2_1 = HEAP32[$7_1 + 36 >> 2];
  HEAPF32[$7_1 + 8 >> 2] = HEAPF32[$7_1 + 32 >> 2];
  $3 = $7_1 + 8 | 0;
  $0_1 = fimport$1(72796, $3 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$7_1 + 8 >> 2] = 0;
  $4_1 = $2_1;
  $2_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $7_1 + 48 | 0;
  return $1_1 | 0;
 }
 
 function $1323($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $10_1 = HEAP32[$0_1 >> 2];
  $11_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$7_1 + 40 >> 2] = 0;
  HEAP32[$7_1 + 44 >> 2] = 0;
  $12_1 = $763($1_1, $7_1 + 40 | 0);
  HEAP32[$7_1 + 28 >> 2] = 53228;
  HEAP32[$7_1 + 36 >> 2] = $2_1;
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$7_1 + 8 >> 2] = 0;
  $2_1 = $7_1 + 8 | 0;
  $8 = fimport$1(72760, $2_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $8 | 0) | 0;
  fimport$4($8 | 0);
  $9 = +fimport$5($1_1 | 0, 72724, $2_1 | 0);
  fimport$6(HEAP32[$7_1 + 8 >> 2]);
  HEAP32[$7_1 + 32 >> 2] = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
  fimport$4($1_1 | 0);
  HEAP32[$7_1 + 20 >> 2] = 0;
  HEAP32[$7_1 + 12 >> 2] = 0;
  HEAP32[$7_1 + 16 >> 2] = 0;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  HEAP32[$7_1 + 24 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($7_1 + 8 | 0)
  }
  HEAP32[$7_1 + 8 >> 2] = 53312;
  $2_1 = HEAP32[HEAP32[$7_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 23 | 0] < 0 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $4_1;
  HEAP32[$1_1 + 12 >> 2] = $3;
  $0_1 = $663(($11_1 | 0) < 0 ? $10_1 : $0_1, $12_1, 4, $7_1 + 32 | 0, $1_1 + 12 | 0, $1_1 + 8 | 0, $2_1, $6_1);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$7_1 + 8 >> 2] = 53464;
  if (HEAP8[$7_1 + 23 | 0] < 0) {
   $1756(HEAP32[$7_1 + 12 >> 2])
  }
  HEAP32[$7_1 + 28 >> 2] = 53228;
  $2_1 = HEAP32[$7_1 + 36 >> 2];
  HEAP32[$7_1 + 8 >> 2] = HEAP32[$7_1 + 32 >> 2];
  $3 = $7_1 + 8 | 0;
  $0_1 = fimport$1(72724, $3 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$7_1 + 8 >> 2] = 0;
  $4_1 = $2_1;
  $2_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $7_1 + 48 | 0;
  return $1_1 | 0;
 }
 
 function $1324($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $9 = global$0 - 32 | 0;
  global$0 = $9;
  $10_1 = HEAP32[$1_1 >> 2];
  if ($10_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($10_1 >>> 0 <= 10) {
     HEAP8[$9 + 31 | 0] = $10_1;
     $11_1 = $9 + 20 | 0;
     break label$2;
    }
    $12_1 = ($10_1 | 15) + 1 | 0;
    $11_1 = $1782($12_1);
    HEAP32[$9 + 28 >> 2] = $12_1 | -2147483648;
    HEAP32[$9 + 20 >> 2] = $11_1;
    HEAP32[$9 + 24 >> 2] = $10_1;
   }
   if ($10_1) {
    $1602($11_1, $1_1 + 4 | 0, $10_1)
   }
   HEAP8[$10_1 + $11_1 | 0] = 0;
   HEAP32[$9 + 12 >> 2] = $4_1;
   HEAP32[$9 + 16 >> 2] = $2_1;
   HEAP32[$9 + 8 >> 2] = $5_1;
   HEAP32[$9 + 4 >> 2] = $6_1;
   HEAP32[$9 >> 2] = $7_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($9 + 20 | 0, $9 + 16 | 0, $3, $9 + 12 | 0, $9 + 8 | 0, $9 + 4 | 0, $9, $8) | 0;
   fimport$4(HEAP32[$9 >> 2]);
   fimport$4(HEAP32[$9 + 4 >> 2]);
   fimport$4(HEAP32[$9 + 8 >> 2]);
   fimport$4(HEAP32[$9 + 12 >> 2]);
   fimport$4(HEAP32[$9 + 16 >> 2]);
   if (HEAP8[$9 + 31 | 0] < 0) {
    $1756(HEAP32[$9 + 20 >> 2])
   }
   global$0 = $9 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1325($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0);
  $8 = global$0 - 96 | 0;
  global$0 = $8;
  label$1 : {
   label$2 : {
    switch ($2_1 | 0) {
    case 0:
     $2_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     HEAP32[$8 + 88 >> 2] = 0;
     HEAP32[$8 + 92 >> 2] = 0;
     $11_1 = $763($1_1, $8 + 88 | 0);
     $1_1 = $1536($8 + 24 | 0, $3);
     $3 = HEAP32[$1_1 >> 2];
     HEAP32[$8 + 4 >> 2] = 54160;
     HEAP32[$8 + 12 >> 2] = $4_1;
     $4_1 = HEAP32[$4_1 >> 2];
     if (($4_1 | 0) != 2) {
      $9 = +fimport$5($4_1 | 0, 72688, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP8[$8 + 8 | 0] = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
     }
     $4_1 = HEAP32[HEAP32[$8 + 12 >> 2] >> 2];
     HEAP32[$8 + 72 >> 2] = 54160;
     HEAP32[$8 + 80 >> 2] = $5_1;
     $5_1 = HEAP32[$5_1 >> 2];
     if (($5_1 | 0) != 2) {
      $9 = +fimport$5($5_1 | 0, 72688, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP8[$8 + 76 | 0] = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
     }
     $5_1 = HEAP32[HEAP32[$8 + 80 >> 2] >> 2];
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 52 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     HEAP32[$8 + 48 >> 2] = 53464;
     HEAP32[$8 + 64 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 48 | 0)
     }
     HEAP32[$8 + 48 >> 2] = 53312;
     $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 0, $3, ($4_1 | 0) != 2 ? $8 + 8 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 76 | 0 : 0, HEAP32[HEAP32[$8 + 64 >> 2] >> 2] != 2 ? (HEAP8[$8 + 63 | 0] < 0 ? HEAP32[$8 + 52 >> 2] : $8 + 52 | 0) : 0, $7_1);
     HEAP32[$8 + 48 >> 2] = 53464;
     if (HEAP8[$8 + 63 | 0] < 0) {
      $1756(HEAP32[$8 + 52 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95828] & 1)) {
      $4_1 = fimport$17(2, 54204) | 0;
      HEAP8[95828] = 1;
      HEAP32[23956] = $4_1;
     }
     $4_1 = HEAP32[23956];
     HEAP32[$8 + 52 >> 2] = $0_1;
     HEAP32[$8 + 48 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 1:
     $2_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     HEAP32[$8 + 88 >> 2] = 0;
     HEAP32[$8 + 92 >> 2] = 0;
     $11_1 = $763($1_1, $8 + 88 | 0);
     $1_1 = $1537($8 + 24 | 0, $3);
     $3 = HEAP32[$1_1 >> 2];
     HEAP32[$8 + 4 >> 2] = 54220;
     HEAP32[$8 + 12 >> 2] = $4_1;
     $4_1 = HEAP32[$4_1 >> 2];
     if (($4_1 | 0) != 2) {
      $9 = +fimport$5($4_1 | 0, 72676, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP8[$8 + 8 | 0] = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
     }
     $4_1 = HEAP32[HEAP32[$8 + 12 >> 2] >> 2];
     HEAP32[$8 + 72 >> 2] = 54220;
     HEAP32[$8 + 80 >> 2] = $5_1;
     $5_1 = HEAP32[$5_1 >> 2];
     if (($5_1 | 0) != 2) {
      $9 = +fimport$5($5_1 | 0, 72676, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP8[$8 + 76 | 0] = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
     }
     $5_1 = HEAP32[HEAP32[$8 + 80 >> 2] >> 2];
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 52 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     HEAP32[$8 + 48 >> 2] = 53464;
     HEAP32[$8 + 64 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 48 | 0)
     }
     HEAP32[$8 + 48 >> 2] = 53312;
     $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 1, $3, ($4_1 | 0) != 2 ? $8 + 8 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 76 | 0 : 0, HEAP32[HEAP32[$8 + 64 >> 2] >> 2] != 2 ? (HEAP8[$8 + 63 | 0] < 0 ? HEAP32[$8 + 52 >> 2] : $8 + 52 | 0) : 0, $7_1);
     HEAP32[$8 + 48 >> 2] = 53464;
     if (HEAP8[$8 + 63 | 0] < 0) {
      $1756(HEAP32[$8 + 52 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95836] & 1)) {
      $4_1 = fimport$17(2, 54264) | 0;
      HEAP8[95836] = 1;
      HEAP32[23958] = $4_1;
     }
     $4_1 = HEAP32[23958];
     HEAP32[$8 + 52 >> 2] = $0_1;
     HEAP32[$8 + 48 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 2:
     $2_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     HEAP32[$8 + 88 >> 2] = 0;
     HEAP32[$8 + 92 >> 2] = 0;
     $11_1 = $763($1_1, $8 + 88 | 0);
     $1_1 = $1538($8 + 24 | 0, $3);
     $3 = HEAP32[$1_1 >> 2];
     HEAP32[$8 + 4 >> 2] = 54320;
     HEAP32[$8 + 12 >> 2] = $4_1;
     $4_1 = HEAP32[$4_1 >> 2];
     if (($4_1 | 0) != 2) {
      $9 = +fimport$5($4_1 | 0, 72700, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP16[$8 + 8 >> 1] = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
     }
     $4_1 = HEAP32[HEAP32[$8 + 12 >> 2] >> 2];
     HEAP32[$8 + 72 >> 2] = 54320;
     HEAP32[$8 + 80 >> 2] = $5_1;
     $5_1 = HEAP32[$5_1 >> 2];
     if (($5_1 | 0) != 2) {
      $9 = +fimport$5($5_1 | 0, 72700, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP16[$8 + 76 >> 1] = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
     }
     $5_1 = HEAP32[HEAP32[$8 + 80 >> 2] >> 2];
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 52 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     HEAP32[$8 + 48 >> 2] = 53464;
     HEAP32[$8 + 64 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 48 | 0)
     }
     HEAP32[$8 + 48 >> 2] = 53312;
     $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 2, $3, ($4_1 | 0) != 2 ? $8 + 8 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 76 | 0 : 0, HEAP32[HEAP32[$8 + 64 >> 2] >> 2] != 2 ? (HEAP8[$8 + 63 | 0] < 0 ? HEAP32[$8 + 52 >> 2] : $8 + 52 | 0) : 0, $7_1);
     HEAP32[$8 + 48 >> 2] = 53464;
     if (HEAP8[$8 + 63 | 0] < 0) {
      $1756(HEAP32[$8 + 52 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95844] & 1)) {
      $4_1 = fimport$17(2, 54364) | 0;
      HEAP8[95844] = 1;
      HEAP32[23960] = $4_1;
     }
     $4_1 = HEAP32[23960];
     HEAP32[$8 + 52 >> 2] = $0_1;
     HEAP32[$8 + 48 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 3:
     $2_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     HEAP32[$8 + 88 >> 2] = 0;
     HEAP32[$8 + 92 >> 2] = 0;
     $11_1 = $763($1_1, $8 + 88 | 0);
     $1_1 = $1539($8 + 24 | 0, $3);
     $3 = HEAP32[$1_1 >> 2];
     HEAP32[$8 + 4 >> 2] = 54420;
     HEAP32[$8 + 12 >> 2] = $4_1;
     $4_1 = HEAP32[$4_1 >> 2];
     if (($4_1 | 0) != 2) {
      $9 = +fimport$5($4_1 | 0, 72712, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP16[$8 + 8 >> 1] = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
     }
     $4_1 = HEAP32[HEAP32[$8 + 12 >> 2] >> 2];
     HEAP32[$8 + 72 >> 2] = 54420;
     HEAP32[$8 + 80 >> 2] = $5_1;
     $5_1 = HEAP32[$5_1 >> 2];
     if (($5_1 | 0) != 2) {
      $9 = +fimport$5($5_1 | 0, 72712, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP16[$8 + 76 >> 1] = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
     }
     $5_1 = HEAP32[HEAP32[$8 + 80 >> 2] >> 2];
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 52 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     HEAP32[$8 + 48 >> 2] = 53464;
     HEAP32[$8 + 64 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 48 | 0)
     }
     HEAP32[$8 + 48 >> 2] = 53312;
     $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 3, $3, ($4_1 | 0) != 2 ? $8 + 8 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 76 | 0 : 0, HEAP32[HEAP32[$8 + 64 >> 2] >> 2] != 2 ? (HEAP8[$8 + 63 | 0] < 0 ? HEAP32[$8 + 52 >> 2] : $8 + 52 | 0) : 0, $7_1);
     HEAP32[$8 + 48 >> 2] = 53464;
     if (HEAP8[$8 + 63 | 0] < 0) {
      $1756(HEAP32[$8 + 52 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95852] & 1)) {
      $4_1 = fimport$17(2, 54464) | 0;
      HEAP8[95852] = 1;
      HEAP32[23962] = $4_1;
     }
     $4_1 = HEAP32[23962];
     HEAP32[$8 + 52 >> 2] = $0_1;
     HEAP32[$8 + 48 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 4:
     $2_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     HEAP32[$8 + 88 >> 2] = 0;
     HEAP32[$8 + 92 >> 2] = 0;
     $11_1 = $763($1_1, $8 + 88 | 0);
     $1_1 = $1540($8 + 24 | 0, $3);
     $3 = HEAP32[$1_1 >> 2];
     HEAP32[$8 + 4 >> 2] = 54520;
     HEAP32[$8 + 12 >> 2] = $4_1;
     $4_1 = HEAP32[$4_1 >> 2];
     if (($4_1 | 0) != 2) {
      $9 = +fimport$5($4_1 | 0, 72724, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP32[$8 + 8 >> 2] = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
     }
     $4_1 = HEAP32[HEAP32[$8 + 12 >> 2] >> 2];
     HEAP32[$8 + 72 >> 2] = 54520;
     HEAP32[$8 + 80 >> 2] = $5_1;
     $5_1 = HEAP32[$5_1 >> 2];
     if (($5_1 | 0) != 2) {
      $9 = +fimport$5($5_1 | 0, 72724, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP32[$8 + 76 >> 2] = Math_abs($9) < 2147483648.0 ? ~~$9 : -2147483648;
     }
     $5_1 = HEAP32[HEAP32[$8 + 80 >> 2] >> 2];
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 52 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     HEAP32[$8 + 48 >> 2] = 53464;
     HEAP32[$8 + 64 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 48 | 0)
     }
     HEAP32[$8 + 48 >> 2] = 53312;
     $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 4, $3, ($4_1 | 0) != 2 ? $8 + 8 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 76 | 0 : 0, HEAP32[HEAP32[$8 + 64 >> 2] >> 2] != 2 ? (HEAP8[$8 + 63 | 0] < 0 ? HEAP32[$8 + 52 >> 2] : $8 + 52 | 0) : 0, $7_1);
     HEAP32[$8 + 48 >> 2] = 53464;
     if (HEAP8[$8 + 63 | 0] < 0) {
      $1756(HEAP32[$8 + 52 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95860] & 1)) {
      $4_1 = fimport$17(2, 54564) | 0;
      HEAP8[95860] = 1;
      HEAP32[23964] = $4_1;
     }
     $4_1 = HEAP32[23964];
     HEAP32[$8 + 52 >> 2] = $0_1;
     HEAP32[$8 + 48 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 5:
     $2_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     HEAP32[$8 + 88 >> 2] = 0;
     HEAP32[$8 + 92 >> 2] = 0;
     $11_1 = $763($1_1, $8 + 88 | 0);
     $1_1 = $1541($8 + 24 | 0, $3);
     $3 = HEAP32[$1_1 >> 2];
     HEAP32[$8 + 4 >> 2] = 54620;
     HEAP32[$8 + 12 >> 2] = $4_1;
     $4_1 = HEAP32[$4_1 >> 2];
     if (($4_1 | 0) != 2) {
      $9 = +fimport$5($4_1 | 0, 72736, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP32[$8 + 8 >> 2] = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
     }
     $4_1 = HEAP32[HEAP32[$8 + 12 >> 2] >> 2];
     HEAP32[$8 + 72 >> 2] = 54620;
     HEAP32[$8 + 80 >> 2] = $5_1;
     $5_1 = HEAP32[$5_1 >> 2];
     if (($5_1 | 0) != 2) {
      $9 = +fimport$5($5_1 | 0, 72736, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      HEAP32[$8 + 76 >> 2] = $9 < 4294967296.0 & $9 >= 0.0 ? ~~$9 >>> 0 : 0;
     }
     $5_1 = HEAP32[HEAP32[$8 + 80 >> 2] >> 2];
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 52 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     HEAP32[$8 + 48 >> 2] = 53464;
     HEAP32[$8 + 64 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 48 | 0)
     }
     HEAP32[$8 + 48 >> 2] = 53312;
     $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 5, $3, ($4_1 | 0) != 2 ? $8 + 8 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 76 | 0 : 0, HEAP32[HEAP32[$8 + 64 >> 2] >> 2] != 2 ? (HEAP8[$8 + 63 | 0] < 0 ? HEAP32[$8 + 52 >> 2] : $8 + 52 | 0) : 0, $7_1);
     HEAP32[$8 + 48 >> 2] = 53464;
     if (HEAP8[$8 + 63 | 0] < 0) {
      $1756(HEAP32[$8 + 52 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95868] & 1)) {
      $4_1 = fimport$17(2, 54664) | 0;
      HEAP8[95868] = 1;
      HEAP32[23966] = $4_1;
     }
     $4_1 = HEAP32[23966];
     HEAP32[$8 + 52 >> 2] = $0_1;
     HEAP32[$8 + 48 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 8:
     $2_1 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     HEAP32[$8 + 88 >> 2] = 0;
     HEAP32[$8 + 92 >> 2] = 0;
     $11_1 = $763($1_1, $8 + 88 | 0);
     $1_1 = $1542($8 + 24 | 0, $3);
     $3 = HEAP32[$1_1 >> 2];
     HEAP32[$8 + 4 >> 2] = 54720;
     HEAP32[$8 + 12 >> 2] = $4_1;
     $4_1 = HEAP32[$4_1 >> 2];
     if (($4_1 | 0) != 2) {
      $9 = +fimport$5($4_1 | 0, 72808, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      $12_1 = Math_fround(3402823466385288598117041.0e14);
      label$71 : {
       if ($9 >= 3402823466385288598117041.0e14) {
        break label$71
       }
       $12_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($9 <= -3402823466385288598117041.0e14) {
        break label$71
       }
       $12_1 = Math_fround($9);
      }
      HEAPF32[$8 + 8 >> 2] = $12_1;
     }
     $4_1 = HEAP32[HEAP32[$8 + 12 >> 2] >> 2];
     HEAP32[$8 + 72 >> 2] = 54720;
     HEAP32[$8 + 80 >> 2] = $5_1;
     $5_1 = HEAP32[$5_1 >> 2];
     if (($5_1 | 0) != 2) {
      $9 = +fimport$5($5_1 | 0, 72808, $8 + 48 | 0);
      fimport$6(HEAP32[$8 + 48 >> 2]);
      $12_1 = Math_fround(3402823466385288598117041.0e14);
      label$73 : {
       if ($9 >= 3402823466385288598117041.0e14) {
        break label$73
       }
       $12_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($9 <= -3402823466385288598117041.0e14) {
        break label$73
       }
       $12_1 = Math_fround($9);
      }
      HEAPF32[$8 + 76 >> 2] = $12_1;
     }
     $5_1 = HEAP32[HEAP32[$8 + 80 >> 2] >> 2];
     HEAP32[$8 + 60 >> 2] = 0;
     HEAP32[$8 + 52 >> 2] = 0;
     HEAP32[$8 + 56 >> 2] = 0;
     HEAP32[$8 + 48 >> 2] = 53464;
     HEAP32[$8 + 64 >> 2] = $6_1;
     if (HEAP32[$6_1 >> 2] != 2) {
      $1506($8 + 48 | 0)
     }
     HEAP32[$8 + 48 >> 2] = 53312;
     $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 8, $3, ($4_1 | 0) != 2 ? $8 + 8 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 76 | 0 : 0, HEAP32[HEAP32[$8 + 64 >> 2] >> 2] != 2 ? (HEAP8[$8 + 63 | 0] < 0 ? HEAP32[$8 + 52 >> 2] : $8 + 52 | 0) : 0, $7_1);
     HEAP32[$8 + 48 >> 2] = 53464;
     if (HEAP8[$8 + 63 | 0] < 0) {
      $1756(HEAP32[$8 + 52 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95876] & 1)) {
      $4_1 = fimport$17(2, 54764) | 0;
      HEAP8[95876] = 1;
      HEAP32[23968] = $4_1;
     }
     $4_1 = HEAP32[23968];
     HEAP32[$8 + 52 >> 2] = $0_1;
     HEAP32[$8 + 48 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $2_1 = HEAP32[$0_1 >> 2];
   $10_1 = HEAP8[$0_1 + 11 | 0];
   HEAP32[$8 + 88 >> 2] = 0;
   HEAP32[$8 + 92 >> 2] = 0;
   $11_1 = $763($1_1, $8 + 88 | 0);
   $1_1 = $1543($8 + 72 | 0, $3);
   $3 = HEAP32[$1_1 >> 2];
   HEAP32[$8 + 48 >> 2] = 54820;
   HEAP32[$8 + 64 >> 2] = $4_1;
   $4_1 = HEAP32[$4_1 >> 2];
   if (($4_1 | 0) != 2) {
    $9 = +fimport$5($4_1 | 0, 72808, $8 + 24 | 0);
    fimport$6(HEAP32[$8 + 24 >> 2]);
    HEAPF64[$8 + 56 >> 3] = $9;
   }
   $4_1 = HEAP32[HEAP32[$8 + 64 >> 2] >> 2];
   HEAP32[$8 + 24 >> 2] = 54820;
   HEAP32[$8 + 40 >> 2] = $5_1;
   $5_1 = HEAP32[$5_1 >> 2];
   if (($5_1 | 0) != 2) {
    $9 = +fimport$5($5_1 | 0, 72808, $8 + 4 | 0);
    fimport$6(HEAP32[$8 + 4 >> 2]);
    HEAPF64[$8 + 32 >> 3] = $9;
   }
   $5_1 = HEAP32[HEAP32[$8 + 40 >> 2] >> 2];
   HEAP32[$8 + 16 >> 2] = 0;
   HEAP32[$8 + 8 >> 2] = 0;
   HEAP32[$8 + 12 >> 2] = 0;
   HEAP32[$8 + 4 >> 2] = 53464;
   HEAP32[$8 + 20 >> 2] = $6_1;
   if (HEAP32[$6_1 >> 2] != 2) {
    $1506($8 + 4 | 0)
   }
   HEAP32[$8 + 4 >> 2] = 53312;
   $10_1 = $663(($10_1 | 0) < 0 ? $2_1 : $0_1, $11_1, 9, $3, ($4_1 | 0) != 2 ? $8 + 56 | 0 : 0, ($5_1 | 0) != 2 ? $8 + 32 | 0 : 0, HEAP32[HEAP32[$8 + 20 >> 2] >> 2] != 2 ? (HEAP8[$8 + 19 | 0] < 0 ? HEAP32[$8 + 8 >> 2] : $8 + 8 | 0) : 0, $7_1);
   HEAP32[$8 + 4 >> 2] = 53464;
   if (HEAP8[$8 + 19 | 0] < 0) {
    $1756(HEAP32[$8 + 8 >> 2])
   }
   $0_1 = HEAP32[$1_1 >> 2];
   $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 3;
   $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
   if (!(HEAP8[95884] & 1)) {
    $4_1 = fimport$17(2, 54864) | 0;
    HEAP8[95884] = 1;
    HEAP32[23970] = $4_1;
   }
   $4_1 = HEAP32[23970];
   HEAP32[$8 + 52 >> 2] = $0_1;
   HEAP32[$8 + 48 >> 2] = $2_1;
   fimport$18($4_1 | 0, $3 | 0, 3559, $8 + 48 | 0);
   $0_1 = HEAP32[$1_1 >> 2];
   if ($0_1) {
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    $1756($0_1);
   }
  }
  global$0 = $8 + 96 | 0;
  return $10_1 | 0;
 }
 
 function $1326($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8 = HEAP32[$1_1 >> 2];
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     HEAP8[$7_1 + 31 | 0] = $8;
     $9 = $7_1 + 20 | 0;
     break label$2;
    }
    $10_1 = ($8 | 15) + 1 | 0;
    $9 = $1782($10_1);
    HEAP32[$7_1 + 28 >> 2] = $10_1 | -2147483648;
    HEAP32[$7_1 + 20 >> 2] = $9;
    HEAP32[$7_1 + 24 >> 2] = $8;
   }
   if ($8) {
    $1602($9, $1_1 + 4 | 0, $8)
   }
   HEAP8[$8 + $9 | 0] = 0;
   HEAP32[$7_1 + 12 >> 2] = $5_1;
   HEAP32[$7_1 + 16 >> 2] = $2_1;
   HEAP32[$7_1 + 8 >> 2] = $6_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($7_1 + 20 | 0, $7_1 + 16 | 0, $3, $4_1, $7_1 + 12 | 0, $7_1 + 8 | 0) | 0;
   fimport$4(HEAP32[$7_1 + 8 >> 2]);
   fimport$4(HEAP32[$7_1 + 12 >> 2]);
   fimport$4(HEAP32[$7_1 + 16 >> 2]);
   if (HEAP8[$7_1 + 31 | 0] < 0) {
    $1756(HEAP32[$7_1 + 20 >> 2])
   }
   global$0 = $7_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1327($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $5_1 = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 24 >> 2] = 0;
  $8 = $5_1;
  $5_1 = fimport$1(72724, $6_1 + 24 | 0) | 0;
  $10_1 = fimport$7($8 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  label$3 : {
   $9 = +fimport$5($10_1 | 0, 49072, $6_1 + 12 | 0);
   label$1 : {
    if ($9 < 4294967296.0 & $9 >= 0.0) {
     $8 = ~~$9 >>> 0;
     break label$1;
    }
    $8 = 0;
   }
   $7_1 = HEAP32[$8 >> 2];
   if ($7_1 >>> 0 < 2147483632) {
    $12_1 = HEAP32[$6_1 + 12 >> 2];
    label$5 : {
     if ($7_1 >>> 0 <= 10) {
      HEAP8[$6_1 + 35 | 0] = $7_1;
      $5_1 = $6_1 + 24 | 0;
      break label$5;
     }
     $11_1 = ($7_1 | 15) + 1 | 0;
     $5_1 = $1782($11_1);
     HEAP32[$6_1 + 32 >> 2] = $11_1 | -2147483648;
     HEAP32[$6_1 + 24 >> 2] = $5_1;
     HEAP32[$6_1 + 28 >> 2] = $7_1;
    }
    if ($7_1) {
     $1602($5_1, $8 + 4 | 0, $7_1)
    }
    HEAP8[$5_1 + $7_1 | 0] = 0;
    fimport$6($12_1 | 0);
    fimport$4($10_1 | 0);
    $1840($6_1 + 24 | 0, $2_1);
    $7_1 = HEAP32[$4_1 >> 2];
    label$8 : {
     if (($7_1 | 0) != 2) {
      $5_1 = HEAP32[23915];
      fimport$10($7_1 | 0);
      fimport$4(HEAP32[$5_1 + 120 >> 2]);
      HEAP32[$5_1 + 120 >> 2] = HEAP32[$4_1 >> 2];
      $4_1 = $678(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, HEAP8[$6_1 + 35 | 0] < 0 ? HEAP32[$6_1 + 24 >> 2] : $6_1 + 24 | 0, $2_1, $3, 868);
      break label$8;
     }
     $4_1 = $678(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, HEAP8[$6_1 + 35 | 0] < 0 ? HEAP32[$6_1 + 24 >> 2] : $6_1 + 24 | 0, $2_1, $3, 0);
    }
    $3 = HEAP8[$6_1 + 35 | 0] < 0 ? HEAP32[$6_1 + 24 >> 2] : $6_1 + 24 | 0;
    $2_1 = $1697($3);
    if ($2_1 >>> 0 >= 2147483632) {
     break label$3
    }
    label$10 : {
     if ($2_1 >>> 0 <= 10) {
      HEAP8[$6_1 + 23 | 0] = $2_1;
      $0_1 = $6_1 + 12 | 0;
      break label$10;
     }
     $5_1 = ($2_1 | 15) + 1 | 0;
     $0_1 = $1782($5_1);
     HEAP32[$6_1 + 20 >> 2] = $5_1 | -2147483648;
     HEAP32[$6_1 + 12 >> 2] = $0_1;
     HEAP32[$6_1 + 16 >> 2] = $2_1;
    }
    if ($2_1) {
     $1603($0_1, $3, $2_1)
    }
    HEAP8[$0_1 + $2_1 | 0] = 0;
    $5_1 = HEAP32[$1_1 >> 2];
    HEAP32[$6_1 + 40 >> 2] = 0;
    $7_1 = $6_1 + 40 | 0;
    $0_1 = fimport$1(72724, $7_1 | 0) | 0;
    $2_1 = HEAP8[$6_1 + 23 | 0];
    $1_1 = ($2_1 | 0) < 0;
    $2_1 = $1_1 ? HEAP32[$6_1 + 16 >> 2] : $2_1 & 127;
    $3 = $1755($2_1 + 4 | 0);
    HEAP32[$3 >> 2] = $2_1;
    $1602($3 + 4 | 0, $1_1 ? HEAP32[$6_1 + 12 >> 2] : $6_1 + 12 | 0, $2_1);
    HEAP32[$6_1 + 40 >> 2] = $3;
    $1_1 = fimport$1(49072, $7_1 | 0) | 0;
    fimport$3($5_1 | 0, $0_1 | 0, $1_1 | 0);
    fimport$4($1_1 | 0);
    fimport$4($0_1 | 0);
    if (HEAP8[$6_1 + 23 | 0] < 0) {
     $1756(HEAP32[$6_1 + 12 >> 2])
    }
    if (HEAP8[$6_1 + 35 | 0] < 0) {
     $1756(HEAP32[$6_1 + 24 >> 2])
    }
    global$0 = $6_1 + 48 | 0;
    return $4_1 | 0;
   }
   $774();
   wasm2js_trap();
  }
  $774();
  wasm2js_trap();
 }
 
 function $1328($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  $9 = HEAP32[$1_1 >> 2];
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     HEAP8[$8 + 31 | 0] = $9;
     $10_1 = $8 + 20 | 0;
     break label$2;
    }
    $11_1 = ($9 | 15) + 1 | 0;
    $10_1 = $1782($11_1);
    HEAP32[$8 + 28 >> 2] = $11_1 | -2147483648;
    HEAP32[$8 + 20 >> 2] = $10_1;
    HEAP32[$8 + 24 >> 2] = $9;
   }
   if ($9) {
    $1602($10_1, $1_1 + 4 | 0, $9)
   }
   HEAP8[$9 + $10_1 | 0] = 0;
   HEAP32[$8 + 12 >> 2] = $4_1;
   HEAP32[$8 + 16 >> 2] = $2_1;
   HEAP32[$8 + 8 >> 2] = $6_1;
   HEAP32[$8 + 4 >> 2] = $7_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($8 + 20 | 0, $8 + 16 | 0, $3, $8 + 12 | 0, $5_1, $8 + 8 | 0, $8 + 4 | 0) | 0;
   fimport$4(HEAP32[$8 + 4 >> 2]);
   fimport$4(HEAP32[$8 + 8 >> 2]);
   fimport$4(HEAP32[$8 + 12 >> 2]);
   fimport$4(HEAP32[$8 + 16 >> 2]);
   if (HEAP8[$8 + 31 | 0] < 0) {
    $1756(HEAP32[$8 + 20 >> 2])
   }
   global$0 = $8 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1329($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0.0, $12_1 = 0, $13 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $6_1 = HEAP32[$1_1 >> 2];
  HEAP32[$7_1 + 24 >> 2] = 0;
  $10_1 = $6_1;
  $6_1 = fimport$1(72724, $7_1 + 24 | 0) | 0;
  $9 = fimport$7($10_1 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  label$3 : {
   $11_1 = +fimport$5($9 | 0, 49072, $7_1 + 12 | 0);
   label$1 : {
    if ($11_1 < 4294967296.0 & $11_1 >= 0.0) {
     $10_1 = ~~$11_1 >>> 0;
     break label$1;
    }
    $10_1 = 0;
   }
   $8 = HEAP32[$10_1 >> 2];
   if ($8 >>> 0 < 2147483632) {
    $13 = HEAP32[$7_1 + 12 >> 2];
    label$5 : {
     if ($8 >>> 0 <= 10) {
      HEAP8[$7_1 + 35 | 0] = $8;
      $6_1 = $7_1 + 24 | 0;
      break label$5;
     }
     $12_1 = ($8 | 15) + 1 | 0;
     $6_1 = $1782($12_1);
     HEAP32[$7_1 + 32 >> 2] = $12_1 | -2147483648;
     HEAP32[$7_1 + 24 >> 2] = $6_1;
     HEAP32[$7_1 + 28 >> 2] = $8;
    }
    if ($8) {
     $1602($6_1, $10_1 + 4 | 0, $8)
    }
    HEAP8[$6_1 + $8 | 0] = 0;
    fimport$6($13 | 0);
    fimport$4($9 | 0);
    $1840($7_1 + 24 | 0, $2_1);
    $8 = HEAP32[$5_1 >> 2];
    label$8 : {
     if (($8 | 0) != 2) {
      $6_1 = HEAP32[23915];
      fimport$10($8 | 0);
      fimport$4(HEAP32[$6_1 + 124 >> 2]);
      HEAP32[$6_1 + 124 >> 2] = HEAP32[$5_1 >> 2];
      $5_1 = HEAP32[$0_1 >> 2];
      $6_1 = HEAP8[$0_1 + 11 | 0];
      $8 = HEAP32[$7_1 + 24 >> 2];
      $9 = HEAP8[$7_1 + 35 | 0];
      HEAP32[$7_1 + 12 >> 2] = 0;
      HEAP32[$7_1 + 16 >> 2] = 0;
      $4_1 = $689(($6_1 | 0) < 0 ? $5_1 : $0_1, ($9 | 0) < 0 ? $8 : $7_1 + 24 | 0, $2_1, $763($3, $7_1 + 12 | 0), $4_1, 869);
      break label$8;
     }
     $5_1 = HEAP32[$0_1 >> 2];
     $6_1 = HEAP8[$0_1 + 11 | 0];
     $8 = HEAP32[$7_1 + 24 >> 2];
     $9 = HEAP8[$7_1 + 35 | 0];
     HEAP32[$7_1 + 12 >> 2] = 0;
     HEAP32[$7_1 + 16 >> 2] = 0;
     $4_1 = $689(($6_1 | 0) < 0 ? $5_1 : $0_1, ($9 | 0) < 0 ? $8 : $7_1 + 24 | 0, $2_1, $763($3, $7_1 + 12 | 0), $4_1, 0);
    }
    $3 = HEAP8[$7_1 + 35 | 0] < 0 ? HEAP32[$7_1 + 24 >> 2] : $7_1 + 24 | 0;
    $2_1 = $1697($3);
    if ($2_1 >>> 0 >= 2147483632) {
     break label$3
    }
    label$10 : {
     if ($2_1 >>> 0 <= 10) {
      HEAP8[$7_1 + 23 | 0] = $2_1;
      $0_1 = $7_1 + 12 | 0;
      break label$10;
     }
     $5_1 = ($2_1 | 15) + 1 | 0;
     $0_1 = $1782($5_1);
     HEAP32[$7_1 + 20 >> 2] = $5_1 | -2147483648;
     HEAP32[$7_1 + 12 >> 2] = $0_1;
     HEAP32[$7_1 + 16 >> 2] = $2_1;
    }
    if ($2_1) {
     $1603($0_1, $3, $2_1)
    }
    HEAP8[$0_1 + $2_1 | 0] = 0;
    $5_1 = HEAP32[$1_1 >> 2];
    HEAP32[$7_1 + 40 >> 2] = 0;
    $6_1 = $7_1 + 40 | 0;
    $0_1 = fimport$1(72724, $6_1 | 0) | 0;
    $2_1 = HEAP8[$7_1 + 23 | 0];
    $1_1 = ($2_1 | 0) < 0;
    $2_1 = $1_1 ? HEAP32[$7_1 + 16 >> 2] : $2_1 & 127;
    $3 = $1755($2_1 + 4 | 0);
    HEAP32[$3 >> 2] = $2_1;
    $1602($3 + 4 | 0, $1_1 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0, $2_1);
    HEAP32[$7_1 + 40 >> 2] = $3;
    $1_1 = fimport$1(49072, $6_1 | 0) | 0;
    fimport$3($5_1 | 0, $0_1 | 0, $1_1 | 0);
    fimport$4($1_1 | 0);
    fimport$4($0_1 | 0);
    if (HEAP8[$7_1 + 23 | 0] < 0) {
     $1756(HEAP32[$7_1 + 12 >> 2])
    }
    if (HEAP8[$7_1 + 35 | 0] < 0) {
     $1756(HEAP32[$7_1 + 24 >> 2])
    }
    global$0 = $7_1 + 48 | 0;
    return $4_1 | 0;
   }
   $774();
   wasm2js_trap();
  }
  $774();
  wasm2js_trap();
 }
 
 function $1330($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 48 | 0;
  global$0 = $8;
  label$1 : {
   $9 = HEAP32[$1_1 >> 2];
   if ($9 >>> 0 < 2147483632) {
    label$3 : {
     if ($9 >>> 0 <= 10) {
      HEAP8[$8 + 47 | 0] = $9;
      $10_1 = $8 + 36 | 0;
      break label$3;
     }
     $11_1 = ($9 | 15) + 1 | 0;
     $10_1 = $1782($11_1);
     HEAP32[$8 + 44 >> 2] = $11_1 | -2147483648;
     HEAP32[$8 + 36 >> 2] = $10_1;
     HEAP32[$8 + 40 >> 2] = $9;
    }
    if ($9) {
     $1602($10_1, $1_1 + 4 | 0, $9)
    }
    HEAP8[$9 + $10_1 | 0] = 0;
    $9 = HEAP32[$2_1 >> 2];
    if ($9 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($9 >>> 0 <= 10) {
      HEAP8[$8 + 35 | 0] = $9;
      $1_1 = $8 + 24 | 0;
      break label$6;
     }
     $10_1 = ($9 | 15) + 1 | 0;
     $1_1 = $1782($10_1);
     HEAP32[$8 + 32 >> 2] = $10_1 | -2147483648;
     HEAP32[$8 + 24 >> 2] = $1_1;
     HEAP32[$8 + 28 >> 2] = $9;
    }
    if ($9) {
     $1602($1_1, $2_1 + 4 | 0, $9)
    }
    HEAP8[$1_1 + $9 | 0] = 0;
    HEAP32[$8 + 16 >> 2] = $6_1;
    HEAP32[$8 + 20 >> 2] = $3;
    HEAP32[$8 + 12 >> 2] = $7_1;
    $0_1 = FUNCTION_TABLE[$0_1 | 0]($8 + 36 | 0, $8 + 24 | 0, $8 + 20 | 0, $4_1, $5_1, $8 + 16 | 0, $8 + 12 | 0) | 0;
    fimport$4(HEAP32[$8 + 12 >> 2]);
    fimport$4(HEAP32[$8 + 16 >> 2]);
    fimport$4(HEAP32[$8 + 20 >> 2]);
    if (HEAP8[$8 + 35 | 0] < 0) {
     $1756(HEAP32[$8 + 24 >> 2])
    }
    if (HEAP8[$8 + 47 | 0] < 0) {
     $1756(HEAP32[$8 + 36 >> 2])
    }
    global$0 = $8 + 48 | 0;
    return $0_1 | 0;
   }
   $774();
   wasm2js_trap();
  }
  $774();
  wasm2js_trap();
 }
 
 function $1331($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  $6_1 = HEAP32[$2_1 >> 2];
  HEAP32[$7_1 + 24 >> 2] = 0;
  $9 = $6_1;
  $6_1 = fimport$1(72724, $7_1 + 24 | 0) | 0;
  $11_1 = fimport$7($9 | 0, $6_1 | 0) | 0;
  fimport$4($6_1 | 0);
  label$3 : {
   $10_1 = +fimport$5($11_1 | 0, 49072, $7_1 + 12 | 0);
   label$1 : {
    if ($10_1 < 4294967296.0 & $10_1 >= 0.0) {
     $9 = ~~$10_1 >>> 0;
     break label$1;
    }
    $9 = 0;
   }
   $8 = HEAP32[$9 >> 2];
   if ($8 >>> 0 < 2147483632) {
    $13 = HEAP32[$7_1 + 12 >> 2];
    label$5 : {
     if ($8 >>> 0 <= 10) {
      HEAP8[$7_1 + 35 | 0] = $8;
      $6_1 = $7_1 + 24 | 0;
      break label$5;
     }
     $12_1 = ($8 | 15) + 1 | 0;
     $6_1 = $1782($12_1);
     HEAP32[$7_1 + 32 >> 2] = $12_1 | -2147483648;
     HEAP32[$7_1 + 24 >> 2] = $6_1;
     HEAP32[$7_1 + 28 >> 2] = $8;
    }
    if ($8) {
     $1602($6_1, $9 + 4 | 0, $8)
    }
    HEAP8[$6_1 + $8 | 0] = 0;
    fimport$6($13 | 0);
    fimport$4($11_1 | 0);
    $1840($7_1 + 24 | 0, $3);
    $8 = HEAP32[$5_1 >> 2];
    label$8 : {
     if (($8 | 0) != 2) {
      $6_1 = HEAP32[23915];
      fimport$10($8 | 0);
      fimport$4(HEAP32[$6_1 + 120 >> 2]);
      HEAP32[$6_1 + 120 >> 2] = HEAP32[$5_1 >> 2];
      $4_1 = $690(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1, HEAP8[$7_1 + 35 | 0] < 0 ? HEAP32[$7_1 + 24 >> 2] : $7_1 + 24 | 0, $3, $4_1, 870);
      break label$8;
     }
     $4_1 = $690(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1, HEAP8[$7_1 + 35 | 0] < 0 ? HEAP32[$7_1 + 24 >> 2] : $7_1 + 24 | 0, $3, $4_1, 0);
    }
    $3 = HEAP8[$7_1 + 35 | 0] < 0 ? HEAP32[$7_1 + 24 >> 2] : $7_1 + 24 | 0;
    $0_1 = $1697($3);
    if ($0_1 >>> 0 >= 2147483632) {
     break label$3
    }
    label$10 : {
     if ($0_1 >>> 0 <= 10) {
      HEAP8[$7_1 + 23 | 0] = $0_1;
      $1_1 = $7_1 + 12 | 0;
      break label$10;
     }
     $5_1 = ($0_1 | 15) + 1 | 0;
     $1_1 = $1782($5_1);
     HEAP32[$7_1 + 20 >> 2] = $5_1 | -2147483648;
     HEAP32[$7_1 + 12 >> 2] = $1_1;
     HEAP32[$7_1 + 16 >> 2] = $0_1;
    }
    if ($0_1) {
     $1603($1_1, $3, $0_1)
    }
    HEAP8[$0_1 + $1_1 | 0] = 0;
    $5_1 = HEAP32[$2_1 >> 2];
    HEAP32[$7_1 + 40 >> 2] = 0;
    $6_1 = $7_1 + 40 | 0;
    $0_1 = fimport$1(72724, $6_1 | 0) | 0;
    $2_1 = HEAP8[$7_1 + 23 | 0];
    $1_1 = ($2_1 | 0) < 0;
    $2_1 = $1_1 ? HEAP32[$7_1 + 16 >> 2] : $2_1 & 127;
    $3 = $1755($2_1 + 4 | 0);
    HEAP32[$3 >> 2] = $2_1;
    $1602($3 + 4 | 0, $1_1 ? HEAP32[$7_1 + 12 >> 2] : $7_1 + 12 | 0, $2_1);
    HEAP32[$7_1 + 40 >> 2] = $3;
    $1_1 = fimport$1(49072, $6_1 | 0) | 0;
    fimport$3($5_1 | 0, $0_1 | 0, $1_1 | 0);
    fimport$4($1_1 | 0);
    fimport$4($0_1 | 0);
    if (HEAP8[$7_1 + 23 | 0] < 0) {
     $1756(HEAP32[$7_1 + 12 >> 2])
    }
    if (HEAP8[$7_1 + 35 | 0] < 0) {
     $1756(HEAP32[$7_1 + 24 >> 2])
    }
    global$0 = $7_1 + 48 | 0;
    return $4_1 | 0;
   }
   $774();
   wasm2js_trap();
  }
  $774();
  wasm2js_trap();
 }
 
 function $1332($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0.0, $10_1 = 0.0, $11_1 = 0, $12_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $11_1 = HEAP32[$0_1 >> 2];
  $12_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 28 >> 2] = $1_1;
  HEAP32[$6_1 + 20 >> 2] = 53576;
  $1508($6_1 + 20 | 0);
  $9 = +fimport$5(HEAP32[$2_1 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  $10_1 = +fimport$5(HEAP32[$3 >> 2], 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 53464;
  HEAP32[$6_1 + 16 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1)
  }
  $2_1 = ($12_1 | 0) < 0;
  HEAP32[$6_1 >> 2] = 53312;
  $7_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($9 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($9 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $7_1 = Math_fround($9);
  }
  $3 = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $6_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $8 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($10_1 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround(-3402823466385288598117041.0e14);
   if ($10_1 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $8 = Math_fround($10_1);
  }
  HEAPF32[$1_1 + 8 >> 2] = $8;
  HEAPF32[$1_1 + 12 >> 2] = $7_1;
  $0_1 = $677($2_1 ? $11_1 : $0_1, 8, $6_1 + 24 | 0, $7_1 > Math_fround(0.0) ? $1_1 + 12 | 0 : 0, $8 > Math_fround(0.0) ? $1_1 + 8 | 0 : 0, $3, $5_1 | 131072);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$6_1 >> 2] = 53464;
  if (HEAP8[$6_1 + 15 | 0] < 0) {
   $1756(HEAP32[$6_1 + 4 >> 2])
  }
  HEAP32[$6_1 + 20 >> 2] = 53576;
  $2_1 = HEAP32[$6_1 + 28 >> 2];
  HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 + 24 >> 2];
  $0_1 = fimport$1(72796, $6_1 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $3 = $2_1;
  $2_1 = fimport$1(72760, $6_1 | 0) | 0;
  fimport$3($3 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1333($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2];
  if ($6_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($6_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 31 | 0] = $6_1;
     $7_1 = $5_1 + 20 | 0;
     break label$2;
    }
    $8 = ($6_1 | 15) + 1 | 0;
    $7_1 = $1782($8);
    HEAP32[$5_1 + 28 >> 2] = $8 | -2147483648;
    HEAP32[$5_1 + 20 >> 2] = $7_1;
    HEAP32[$5_1 + 24 >> 2] = $6_1;
   }
   if ($6_1) {
    $1602($7_1, $1_1 + 4 | 0, $6_1)
   }
   HEAP8[$6_1 + $7_1 | 0] = 0;
   HEAP32[$5_1 + 12 >> 2] = $3;
   HEAP32[$5_1 + 16 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($5_1 + 20 | 0, $5_1 + 16 | 0, $5_1 + 12 | 0, $4_1) | 0;
   fimport$4(HEAP32[$5_1 + 12 >> 2]);
   fimport$4(HEAP32[$5_1 + 16 >> 2]);
   if (HEAP8[$5_1 + 31 | 0] < 0) {
    $1756(HEAP32[$5_1 + 20 >> 2])
   }
   global$0 = $5_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1334($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 44 >> 2] = $1_1;
  HEAP32[$4_1 + 32 >> 2] = 53632;
  $1_1 = $4_1 + 32 | 0;
  $1512($1_1);
  HEAP32[$4_1 + 20 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = 53464;
  HEAP32[$4_1 + 24 >> 2] = $2_1;
  if (HEAP32[$2_1 >> 2] != 2) {
   $1506($4_1 + 8 | 0)
  }
  HEAP32[$4_1 + 8 >> 2] = 53312;
  $2_1 = $679(($6_1 | 0) < 0 ? $5_1 : $0_1, 8, $1_1 + 4 | 0, 2, 0, 0, HEAP32[HEAP32[$4_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$4_1 + 23 | 0] < 0 ? HEAP32[$4_1 + 12 >> 2] : $4_1 + 12 | 0) : 0, $3);
  HEAP32[$4_1 + 8 >> 2] = 53464;
  if (HEAP8[$4_1 + 23 | 0] < 0) {
   $1756(HEAP32[$4_1 + 12 >> 2])
  }
  HEAP32[$4_1 + 32 >> 2] = 53632;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$4_1 + 44 >> 2];
   HEAPF32[$4_1 + 8 >> 2] = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 36 >> 2];
   $5_1 = $4_1 + 8 | 0;
   $1_1 = fimport$1(72796, $5_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$4_1 + 8 >> 2] = $0_1;
   $6_1 = $3;
   $3 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $4_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1335($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 44 >> 2] = $1_1;
  HEAP32[$4_1 + 28 >> 2] = 53688;
  $1_1 = $4_1 + 28 | 0;
  $1516($1_1);
  HEAP32[$4_1 + 20 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = 53464;
  HEAP32[$4_1 + 24 >> 2] = $2_1;
  if (HEAP32[$2_1 >> 2] != 2) {
   $1506($4_1 + 8 | 0)
  }
  HEAP32[$4_1 + 8 >> 2] = 53312;
  $2_1 = $679(($6_1 | 0) < 0 ? $5_1 : $0_1, 8, $1_1 + 4 | 0, 3, 0, 0, HEAP32[HEAP32[$4_1 + 24 >> 2] >> 2] != 2 ? (HEAP8[$4_1 + 23 | 0] < 0 ? HEAP32[$4_1 + 12 >> 2] : $4_1 + 12 | 0) : 0, $3);
  HEAP32[$4_1 + 8 >> 2] = 53464;
  if (HEAP8[$4_1 + 23 | 0] < 0) {
   $1756(HEAP32[$4_1 + 12 >> 2])
  }
  HEAP32[$4_1 + 28 >> 2] = 53688;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$4_1 + 44 >> 2];
   HEAPF32[$4_1 + 8 >> 2] = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 32 >> 2];
   $5_1 = $4_1 + 8 | 0;
   $1_1 = fimport$1(72796, $5_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$4_1 + 8 >> 2] = $0_1;
   $6_1 = $3;
   $3 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $4_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1336($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 44 >> 2] = $1_1;
  HEAP32[$4_1 + 24 >> 2] = 53744;
  $1_1 = $4_1 + 24 | 0;
  $1520($1_1);
  HEAP32[$4_1 + 12 >> 2] = 0;
  HEAP32[$4_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 >> 2] = 53464;
  HEAP32[$4_1 + 16 >> 2] = $2_1;
  if (HEAP32[$2_1 >> 2] != 2) {
   $1506($4_1)
  }
  HEAP32[$4_1 >> 2] = 53312;
  $2_1 = $679(($6_1 | 0) < 0 ? $5_1 : $0_1, 8, $1_1 + 4 | 0, 4, 0, 0, HEAP32[HEAP32[$4_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$4_1 + 15 | 0] < 0 ? HEAP32[$4_1 + 4 >> 2] : $4_1 + 4 | 0) : 0, $3);
  HEAP32[$4_1 >> 2] = 53464;
  if (HEAP8[$4_1 + 15 | 0] < 0) {
   $1756(HEAP32[$4_1 + 4 >> 2])
  }
  HEAP32[$4_1 + 24 >> 2] = 53744;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$4_1 + 44 >> 2];
   HEAPF32[$4_1 >> 2] = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 28 >> 2];
   $1_1 = fimport$1(72796, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$4_1 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $4_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1337($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[$1_1 >> 2];
  if ($7_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($7_1 >>> 0 <= 10) {
     HEAP8[$6_1 + 15 | 0] = $7_1;
     $8 = $6_1 + 4 | 0;
     break label$2;
    }
    $9 = ($7_1 | 15) + 1 | 0;
    $8 = $1782($9);
    HEAP32[$6_1 + 12 >> 2] = $9 | -2147483648;
    HEAP32[$6_1 + 4 >> 2] = $8;
    HEAP32[$6_1 + 8 >> 2] = $7_1;
   }
   if ($7_1) {
    $1602($8, $1_1 + 4 | 0, $7_1)
   }
   HEAP8[$7_1 + $8 | 0] = 0;
   HEAP32[$6_1 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($6_1 + 4 | 0, $6_1, $3, $4_1, $5_1) | 0;
   fimport$4(HEAP32[$6_1 >> 2]);
   if (HEAP8[$6_1 + 15 | 0] < 0) {
    $1756(HEAP32[$6_1 + 4 >> 2])
   }
   global$0 = $6_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1338($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0.0, $9 = 0, $10_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $9 = HEAP32[$0_1 >> 2];
  $10_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$5_1 + 12 >> 2] = 53228;
  HEAP32[$5_1 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 24 >> 2] = 0;
  $6_1 = $5_1 + 24 | 0;
  $7_1 = fimport$1(72760, $6_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $7_1 | 0) | 0;
  fimport$4($7_1 | 0);
  $8 = +fimport$5($1_1 | 0, 72724, $6_1 | 0);
  fimport$6(HEAP32[$5_1 + 24 >> 2]);
  HEAP32[$5_1 + 16 >> 2] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
  fimport$4($1_1 | 0);
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $3;
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $2_1 = $677(($10_1 | 0) < 0 ? $9 : $0_1, 4, $5_1 + 16 | 0, ($2_1 | 0) > 0 ? $1_1 + 12 | 0 : 0, ($3 | 0) > 0 ? $1_1 + 8 | 0 : 0, $4_1 & 2 ? 14638 : 13404, $4_1);
  global$0 = $1_1 + 16 | 0;
  HEAP32[$5_1 + 12 >> 2] = 53228;
  $1_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$5_1 + 24 >> 2] = HEAP32[$5_1 + 16 >> 2];
  $3 = $6_1;
  $0_1 = fimport$1(72724, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 24 >> 2] = 0;
  $4_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $5_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1339($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 20 >> 2] = $1_1;
  HEAP32[$3 + 8 >> 2] = 53896;
  $1_1 = $3 + 8 | 0;
  $1524($1_1);
  $2_1 = $679(($5_1 | 0) < 0 ? $4_1 : $0_1, 4, $1_1 + 4 | 0, 2, 0, 0, 13404, $2_1);
  HEAP32[$3 + 8 >> 2] = 53896;
  $0_1 = 0;
  while (1) {
   $4_1 = HEAP32[$3 + 20 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[($3 + ($0_1 << 2) | 0) + 12 >> 2];
   $5_1 = $3 + 24 | 0;
   $1_1 = fimport$1(72724, $5_1 | 0) | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP32[$3 + 24 >> 2] = $0_1;
   $6_1 = $4_1;
   $4_1 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $4_1 | 0, $1_1 | 0);
   fimport$4($4_1 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1340($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 20 >> 2] = $1_1;
  HEAP32[$3 + 4 >> 2] = 53952;
  $1_1 = $3 + 4 | 0;
  $1528($1_1);
  $2_1 = $679(($5_1 | 0) < 0 ? $4_1 : $0_1, 4, $1_1 + 4 | 0, 3, 0, 0, 13404, $2_1);
  HEAP32[$3 + 4 >> 2] = 53952;
  $0_1 = 0;
  while (1) {
   $4_1 = HEAP32[$3 + 20 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[($3 + ($0_1 << 2) | 0) + 8 >> 2];
   $5_1 = $3 + 24 | 0;
   $1_1 = fimport$1(72724, $5_1 | 0) | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP32[$3 + 24 >> 2] = $0_1;
   $6_1 = $4_1;
   $4_1 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $4_1 | 0, $1_1 | 0);
   fimport$4($4_1 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1341($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 20 >> 2] = $1_1;
  HEAP32[$3 >> 2] = 54008;
  $1532($3);
  $2_1 = $679(($5_1 | 0) < 0 ? $4_1 : $0_1, 4, $3 + 4 | 0, 4, 0, 0, 13404, $2_1);
  HEAP32[$3 >> 2] = 54008;
  $0_1 = 0;
  while (1) {
   $4_1 = HEAP32[$3 + 20 >> 2];
   HEAP32[$3 + 24 >> 2] = HEAP32[(($0_1 << 2) + $3 | 0) + 4 >> 2];
   $5_1 = $3 + 24 | 0;
   $1_1 = fimport$1(72724, $5_1 | 0) | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP32[$3 + 24 >> 2] = $0_1;
   $6_1 = $4_1;
   $4_1 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $4_1 | 0, $1_1 | 0);
   fimport$4($4_1 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1342($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = +$3;
  $4_1 = +$4_1;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $8 = HEAP32[$1_1 >> 2];
  if ($8 >>> 0 < 2147483632) {
   label$2 : {
    if ($8 >>> 0 <= 10) {
     HEAP8[$7_1 + 31 | 0] = $8;
     $9 = $7_1 + 20 | 0;
     break label$2;
    }
    $10_1 = ($8 | 15) + 1 | 0;
    $9 = $1782($10_1);
    HEAP32[$7_1 + 28 >> 2] = $10_1 | -2147483648;
    HEAP32[$7_1 + 20 >> 2] = $9;
    HEAP32[$7_1 + 24 >> 2] = $8;
   }
   if ($8) {
    $1602($9, $1_1 + 4 | 0, $8)
   }
   HEAP8[$8 + $9 | 0] = 0;
   HEAP32[$7_1 + 12 >> 2] = $5_1;
   HEAP32[$7_1 + 16 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($7_1 + 20 | 0, $7_1 + 16 | 0, $3, $4_1, $7_1 + 12 | 0, $6_1) | 0;
   fimport$4(HEAP32[$7_1 + 12 >> 2]);
   fimport$4(HEAP32[$7_1 + 16 >> 2]);
   if (HEAP8[$7_1 + 31 | 0] < 0) {
    $1756(HEAP32[$7_1 + 20 >> 2])
   }
   global$0 = $7_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1343($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = +$2_1;
  $3 = +$3;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0.0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  $8 = HEAP32[$0_1 >> 2];
  $9 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 24 >> 2] = 55232;
  HEAP32[$6_1 + 40 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $7_1 = fimport$1(72760, $6_1 | 0) | 0;
  $1_1 = fimport$7($1_1 | 0, $7_1 | 0) | 0;
  fimport$4($7_1 | 0);
  $10_1 = +fimport$5($1_1 | 0, 72808, $6_1 | 0);
  fimport$6(HEAP32[$6_1 >> 2]);
  HEAPF64[$6_1 + 32 >> 3] = $10_1;
  fimport$4($1_1 | 0);
  HEAP32[$6_1 + 12 >> 2] = 0;
  HEAP32[$6_1 + 4 >> 2] = 0;
  HEAP32[$6_1 + 8 >> 2] = 0;
  HEAP32[$6_1 >> 2] = 53464;
  HEAP32[$6_1 + 16 >> 2] = $4_1;
  if (HEAP32[$4_1 >> 2] != 2) {
   $1506($6_1)
  }
  HEAP32[$6_1 >> 2] = 53312;
  $4_1 = HEAP32[HEAP32[$6_1 + 16 >> 2] >> 2] != 2 ? (HEAP8[$6_1 + 15 | 0] < 0 ? HEAP32[$6_1 + 4 >> 2] : $6_1 + 4 | 0) : 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAPF64[$1_1 >> 3] = $3;
  HEAPF64[$1_1 + 8 >> 3] = $2_1;
  $0_1 = $677(($9 | 0) < 0 ? $8 : $0_1, 9, $6_1 + 32 | 0, $2_1 > 0.0 ? $1_1 + 8 | 0 : 0, $3 > 0.0 ? $1_1 : 0, $4_1, $5_1 | 131072);
  global$0 = $1_1 + 16 | 0;
  $1_1 = $0_1;
  HEAP32[$6_1 >> 2] = 53464;
  if (HEAP8[$6_1 + 15 | 0] < 0) {
   $1756(HEAP32[$6_1 + 4 >> 2])
  }
  HEAP32[$6_1 + 24 >> 2] = 55232;
  $4_1 = HEAP32[$6_1 + 40 >> 2];
  HEAPF64[$6_1 >> 3] = HEAPF64[$6_1 + 32 >> 3];
  $0_1 = fimport$1(72808, $6_1 | 0) | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $5_1 = $4_1;
  $4_1 = fimport$1(72760, $6_1 | 0) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $0_1 | 0);
  fimport$4($4_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $6_1 + 48 | 0;
  return $1_1 | 0;
 }
 
 function $1344($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $8 = 0.0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0);
  $7_1 = global$0 - 96 | 0;
  global$0 = $7_1;
  label$1 : {
   label$2 : {
    switch ($1_1 | 0) {
    case 0:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1536($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54160;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72688, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 16 | 0] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54160;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72688, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 84 | 0] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $679($4_1, 0, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 | 0, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95828] & 1)) {
      $4_1 = fimport$17(2, 54204) | 0;
      HEAP8[95828] = 1;
      HEAP32[23956] = $4_1;
     }
     $4_1 = HEAP32[23956];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 1:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1537($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54220;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72676, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 16 | 0] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54220;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72676, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP8[$7_1 + 84 | 0] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $679($4_1, 1, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 | 0, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 | 0;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95836] & 1)) {
      $4_1 = fimport$17(2, 54264) | 0;
      HEAP8[95836] = 1;
      HEAP32[23958] = $4_1;
     }
     $4_1 = HEAP32[23958];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 2:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1538($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54320;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72700, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 16 >> 1] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54320;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72700, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 84 >> 1] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $679($4_1, 2, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95844] & 1)) {
      $4_1 = fimport$17(2, 54364) | 0;
      HEAP8[95844] = 1;
      HEAP32[23960] = $4_1;
     }
     $4_1 = HEAP32[23960];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 3:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1539($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54420;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72712, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 16 >> 1] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54420;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72712, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP16[$7_1 + 84 >> 1] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $679($4_1, 3, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 1;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95852] & 1)) {
      $4_1 = fimport$17(2, 54464) | 0;
      HEAP8[95852] = 1;
      HEAP32[23962] = $4_1;
     }
     $4_1 = HEAP32[23962];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 4:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1540($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54520;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72724, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 16 >> 2] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54520;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72724, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 84 >> 2] = Math_abs($8) < 2147483648.0 ? ~~$8 : -2147483648;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $679($4_1, 4, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95860] & 1)) {
      $4_1 = fimport$17(2, 54564) | 0;
      HEAP8[95860] = 1;
      HEAP32[23964] = $4_1;
     }
     $4_1 = HEAP32[23964];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 5:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1541($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54620;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72736, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 16 >> 2] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54620;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72736, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      HEAP32[$7_1 + 84 >> 2] = $8 < 4294967296.0 & $8 >= 0.0 ? ~~$8 >>> 0 : 0;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $679($4_1, 5, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95868] & 1)) {
      $4_1 = fimport$17(2, 54664) | 0;
      HEAP8[95868] = 1;
      HEAP32[23966] = $4_1;
     }
     $4_1 = HEAP32[23966];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 8:
     $9 = HEAP32[$0_1 >> 2];
     $10_1 = HEAP8[$0_1 + 11 | 0];
     $1_1 = $1542($7_1 + 32 | 0, $2_1);
     HEAP32[$7_1 + 12 >> 2] = 54720;
     HEAP32[$7_1 + 20 >> 2] = $3;
     $2_1 = HEAP32[$3 >> 2];
     if (($2_1 | 0) != 2) {
      $8 = +fimport$5($2_1 | 0, 72808, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      $11_1 = Math_fround(3402823466385288598117041.0e14);
      label$71 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$71
       }
       $11_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$71
       }
       $11_1 = Math_fround($8);
      }
      HEAPF32[$7_1 + 16 >> 2] = $11_1;
     }
     $2_1 = HEAP32[HEAP32[$7_1 + 20 >> 2] >> 2];
     HEAP32[$7_1 + 80 >> 2] = 54720;
     HEAP32[$7_1 + 88 >> 2] = $4_1;
     $3 = HEAP32[$4_1 >> 2];
     if (($3 | 0) != 2) {
      $8 = +fimport$5($3 | 0, 72808, $7_1 + 56 | 0);
      fimport$6(HEAP32[$7_1 + 56 >> 2]);
      $11_1 = Math_fround(3402823466385288598117041.0e14);
      label$73 : {
       if ($8 >= 3402823466385288598117041.0e14) {
        break label$73
       }
       $11_1 = Math_fround(-3402823466385288598117041.0e14);
       if ($8 <= -3402823466385288598117041.0e14) {
        break label$73
       }
       $11_1 = Math_fround($8);
      }
      HEAPF32[$7_1 + 84 >> 2] = $11_1;
     }
     $3 = HEAP32[HEAP32[$7_1 + 88 >> 2] >> 2];
     HEAP32[$7_1 + 68 >> 2] = 0;
     HEAP32[$7_1 + 60 >> 2] = 0;
     HEAP32[$7_1 + 64 >> 2] = 0;
     HEAP32[$7_1 + 56 >> 2] = 53464;
     HEAP32[$7_1 + 72 >> 2] = $5_1;
     if (HEAP32[$5_1 >> 2] != 2) {
      $1506($7_1 + 56 | 0)
     }
     HEAP32[$7_1 + 56 >> 2] = 53312;
     $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
     $0_1 = HEAP32[$1_1 >> 2];
     $9 = $679($4_1, 8, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2, ($2_1 | 0) != 2 ? $7_1 + 16 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 84 | 0 : 0, HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 71 | 0] < 0 ? HEAP32[$7_1 + 60 >> 2] : $7_1 + 60 | 0) : 0, $6_1);
     HEAP32[$7_1 + 56 >> 2] = 53464;
     if (HEAP8[$7_1 + 71 | 0] < 0) {
      $1756(HEAP32[$7_1 + 60 >> 2])
     }
     $0_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 2;
     $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
     if (!(HEAP8[95876] & 1)) {
      $4_1 = fimport$17(2, 54764) | 0;
      HEAP8[95876] = 1;
      HEAP32[23968] = $4_1;
     }
     $4_1 = HEAP32[23968];
     HEAP32[$7_1 + 60 >> 2] = $0_1;
     HEAP32[$7_1 + 56 >> 2] = $2_1;
     fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
     $0_1 = HEAP32[$1_1 >> 2];
     if ($0_1) {
      HEAP32[$1_1 + 4 >> 2] = $0_1;
      $1756($0_1);
     }
     break label$1;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   $9 = HEAP32[$0_1 >> 2];
   $10_1 = HEAP8[$0_1 + 11 | 0];
   $1_1 = $1543($7_1 + 80 | 0, $2_1);
   HEAP32[$7_1 + 56 >> 2] = 54820;
   HEAP32[$7_1 + 72 >> 2] = $3;
   $2_1 = HEAP32[$3 >> 2];
   if (($2_1 | 0) != 2) {
    $8 = +fimport$5($2_1 | 0, 72808, $7_1 + 32 | 0);
    fimport$6(HEAP32[$7_1 + 32 >> 2]);
    HEAPF64[$7_1 + 64 >> 3] = $8;
   }
   $2_1 = HEAP32[HEAP32[$7_1 + 72 >> 2] >> 2];
   HEAP32[$7_1 + 32 >> 2] = 54820;
   HEAP32[$7_1 + 48 >> 2] = $4_1;
   $3 = HEAP32[$4_1 >> 2];
   if (($3 | 0) != 2) {
    $8 = +fimport$5($3 | 0, 72808, $7_1 + 12 | 0);
    fimport$6(HEAP32[$7_1 + 12 >> 2]);
    HEAPF64[$7_1 + 40 >> 3] = $8;
   }
   $3 = HEAP32[HEAP32[$7_1 + 48 >> 2] >> 2];
   HEAP32[$7_1 + 24 >> 2] = 0;
   HEAP32[$7_1 + 16 >> 2] = 0;
   HEAP32[$7_1 + 20 >> 2] = 0;
   HEAP32[$7_1 + 12 >> 2] = 53464;
   HEAP32[$7_1 + 28 >> 2] = $5_1;
   if (HEAP32[$5_1 >> 2] != 2) {
    $1506($7_1 + 12 | 0)
   }
   HEAP32[$7_1 + 12 >> 2] = 53312;
   $4_1 = ($10_1 | 0) < 0 ? $9 : $0_1;
   $0_1 = HEAP32[$1_1 >> 2];
   $9 = $679($4_1, 9, $0_1, HEAP32[$1_1 + 4 >> 2] - $0_1 >> 3, ($2_1 | 0) != 2 ? $7_1 - -64 | 0 : 0, ($3 | 0) != 2 ? $7_1 + 40 | 0 : 0, HEAP32[HEAP32[$7_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$7_1 + 27 | 0] < 0 ? HEAP32[$7_1 + 16 >> 2] : $7_1 + 16 | 0) : 0, $6_1);
   HEAP32[$7_1 + 12 >> 2] = 53464;
   if (HEAP8[$7_1 + 27 | 0] < 0) {
    $1756(HEAP32[$7_1 + 16 >> 2])
   }
   $0_1 = HEAP32[$1_1 >> 2];
   $2_1 = HEAP32[$1_1 + 4 >> 2] - $0_1 >> 3;
   $3 = HEAP32[HEAP32[$1_1 + 12 >> 2] >> 2];
   if (!(HEAP8[95884] & 1)) {
    $4_1 = fimport$17(2, 54864) | 0;
    HEAP8[95884] = 1;
    HEAP32[23970] = $4_1;
   }
   $4_1 = HEAP32[23970];
   HEAP32[$7_1 + 60 >> 2] = $0_1;
   HEAP32[$7_1 + 56 >> 2] = $2_1;
   fimport$18($4_1 | 0, $3 | 0, 3559, $7_1 + 56 | 0);
   $0_1 = HEAP32[$1_1 >> 2];
   if ($0_1) {
    HEAP32[$1_1 + 4 >> 2] = $0_1;
    $1756($0_1);
   }
  }
  global$0 = $7_1 + 96 | 0;
  return $9 | 0;
 }
 
 function $1345($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 20 >> 2] = $1_1;
  HEAP32[$3 + 4 >> 2] = 53688;
  $1_1 = $3 + 4 | 0;
  $1516($1_1);
  $2_1 = $698(($5_1 | 0) < 0 ? $4_1 : $0_1, $1_1 + 4 | 0, $2_1 | 2);
  HEAP32[$3 + 4 >> 2] = 53688;
  $0_1 = 0;
  while (1) {
   $4_1 = HEAP32[$3 + 20 >> 2];
   HEAPF32[$3 + 24 >> 2] = HEAPF32[($3 + ($0_1 << 2) | 0) + 8 >> 2];
   $5_1 = $3 + 24 | 0;
   $1_1 = fimport$1(72796, $5_1 | 0) | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP32[$3 + 24 >> 2] = $0_1;
   $6_1 = $4_1;
   $4_1 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $4_1 | 0, $1_1 | 0);
   fimport$4($4_1 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1346($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 20 >> 2] = $1_1;
  HEAP32[$3 >> 2] = 53744;
  $1520($3);
  $2_1 = $698(($5_1 | 0) < 0 ? $4_1 : $0_1, $3 + 4 | 0, $2_1);
  HEAP32[$3 >> 2] = 53744;
  $0_1 = 0;
  while (1) {
   $4_1 = HEAP32[$3 + 20 >> 2];
   HEAPF32[$3 + 24 >> 2] = HEAPF32[(($0_1 << 2) + $3 | 0) + 4 >> 2];
   $5_1 = $3 + 24 | 0;
   $1_1 = fimport$1(72796, $5_1 | 0) | 0;
   $4_1 = HEAP32[$4_1 >> 2];
   HEAP32[$3 + 24 >> 2] = $0_1;
   $6_1 = $4_1;
   $4_1 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $4_1 | 0, $1_1 | 0);
   fimport$4($4_1 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $3 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1347($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0);
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 20 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = 53688;
  $3 = $4_1 + 4 | 0;
  $1516($3);
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3 = $3 + 4 | 0;
  HEAPF32[$1_1 >> 2] = HEAPF32[$3 >> 2];
  HEAPF32[$1_1 + 4 >> 2] = HEAPF32[$3 + 4 >> 2];
  $7_1 = HEAPF32[$3 + 8 >> 2];
  HEAP32[$1_1 + 12 >> 2] = 1065353216;
  HEAPF32[$1_1 + 8 >> 2] = $7_1;
  $0_1 = $701(($6_1 | 0) < 0 ? $5_1 : $0_1, $1_1, $2_1 | 2, 0);
  if ($0_1) {
   HEAPF32[$3 >> 2] = HEAPF32[$1_1 >> 2];
   HEAPF32[$3 + 4 >> 2] = HEAPF32[$1_1 + 4 >> 2];
   HEAPF32[$3 + 8 >> 2] = HEAPF32[$1_1 + 8 >> 2];
  }
  global$0 = $1_1 + 16 | 0;
  $2_1 = $0_1;
  HEAP32[$4_1 + 4 >> 2] = 53688;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$4_1 + 20 >> 2];
   HEAPF32[$4_1 + 24 >> 2] = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 8 >> 2];
   $5_1 = $4_1 + 24 | 0;
   $1_1 = fimport$1(72796, $5_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$4_1 + 24 >> 2] = $0_1;
   $6_1 = $3;
   $3 = fimport$1(72760, $5_1 | 0) | 0;
   fimport$3($6_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $4_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1348($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2];
  if ($6_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($6_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 31 | 0] = $6_1;
     $7_1 = $5_1 + 20 | 0;
     break label$2;
    }
    $8 = ($6_1 | 15) + 1 | 0;
    $7_1 = $1782($8);
    HEAP32[$5_1 + 28 >> 2] = $8 | -2147483648;
    HEAP32[$5_1 + 20 >> 2] = $7_1;
    HEAP32[$5_1 + 24 >> 2] = $6_1;
   }
   if ($6_1) {
    $1602($7_1, $1_1 + 4 | 0, $6_1)
   }
   HEAP8[$6_1 + $7_1 | 0] = 0;
   HEAP32[$5_1 + 12 >> 2] = $4_1;
   HEAP32[$5_1 + 16 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($5_1 + 20 | 0, $5_1 + 16 | 0, $3, $5_1 + 12 | 0) | 0;
   fimport$4(HEAP32[$5_1 + 12 >> 2]);
   fimport$4(HEAP32[$5_1 + 16 >> 2]);
   if (HEAP8[$5_1 + 31 | 0] < 0) {
    $1756(HEAP32[$5_1 + 20 >> 2])
   }
   global$0 = $5_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1349($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 44 >> 2] = $1_1;
  HEAP32[$4_1 + 24 >> 2] = 53744;
  $1_1 = $4_1 + 24 | 0;
  $1520($1_1);
  HEAP32[$4_1 >> 2] = 55308;
  $0_1 = ($6_1 | 0) < 0 ? $5_1 : $0_1;
  HEAP32[$4_1 + 20 >> 2] = $3;
  $1_1 = $1_1 + 4 | 0;
  if (HEAP32[$3 >> 2] != 2) {
   $1520($4_1)
  }
  $2_1 = $701($0_1, $1_1, $2_1, HEAP32[HEAP32[$4_1 + 20 >> 2] >> 2] != 2 ? $4_1 + 4 | 0 : 0);
  $1574($4_1);
  HEAP32[$4_1 + 24 >> 2] = 53744;
  $0_1 = 0;
  while (1) {
   $3 = HEAP32[$4_1 + 44 >> 2];
   HEAPF32[$4_1 >> 2] = HEAPF32[($4_1 + ($0_1 << 2) | 0) + 28 >> 2];
   $1_1 = fimport$1(72796, $4_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$4_1 >> 2] = $0_1;
   $5_1 = $3;
   $3 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($5_1 | 0, $3 | 0, $1_1 | 0);
   fimport$4($3 | 0);
   fimport$4($1_1 | 0);
   $0_1 = $0_1 + 1 | 0;
   if (($0_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $4_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1350($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $6_1 = HEAP32[$0_1 >> 2];
  $7_1 = HEAP8[$0_1 + 11 | 0];
  $5_1 = $4_1 + 24 | 0;
  HEAP32[$5_1 >> 2] = 0;
  HEAP32[$5_1 + 4 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  $1_1 = $768($1_1, $4_1 + 16 | 0);
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $3 = $763($3, $4_1 + 8 | 0);
  $5_1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$4_1 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$4_1 + 4 >> 2] = $5_1;
  $0_1 = $700(($7_1 | 0) < 0 ? $6_1 : $0_1, $1_1, $2_1, $4_1);
  global$0 = $4_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1351($0_1) {
  $0_1 = $0_1 | 0;
  return $709(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1) | 0;
 }
 
 function $1352($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  label$1 : {
   $4_1 = HEAP32[$1_1 >> 2];
   if ($4_1 >>> 0 < 2147483632) {
    label$3 : {
     if ($4_1 >>> 0 <= 10) {
      HEAP8[$3 + 31 | 0] = $4_1;
      $5_1 = $3 + 20 | 0;
      break label$3;
     }
     $6_1 = ($4_1 | 15) + 1 | 0;
     $5_1 = $1782($6_1);
     HEAP32[$3 + 28 >> 2] = $6_1 | -2147483648;
     HEAP32[$3 + 20 >> 2] = $5_1;
     HEAP32[$3 + 24 >> 2] = $4_1;
    }
    if ($4_1) {
     $1602($5_1, $1_1 + 4 | 0, $4_1)
    }
    HEAP8[$4_1 + $5_1 | 0] = 0;
    $4_1 = HEAP32[$2_1 >> 2];
    if ($4_1 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($4_1 >>> 0 <= 10) {
      HEAP8[$3 + 19 | 0] = $4_1;
      $1_1 = $3 + 8 | 0;
      break label$6;
     }
     $5_1 = ($4_1 | 15) + 1 | 0;
     $1_1 = $1782($5_1);
     HEAP32[$3 + 16 >> 2] = $5_1 | -2147483648;
     HEAP32[$3 + 8 >> 2] = $1_1;
     HEAP32[$3 + 12 >> 2] = $4_1;
    }
    if ($4_1) {
     $1602($1_1, $2_1 + 4 | 0, $4_1)
    }
    HEAP8[$1_1 + $4_1 | 0] = 0;
    $0_1 = FUNCTION_TABLE[$0_1 | 0]($3 + 20 | 0, $3 + 8 | 0) | 0;
    if (HEAP8[$3 + 19 | 0] < 0) {
     $1756(HEAP32[$3 + 8 >> 2])
    }
    if (HEAP8[$3 + 31 | 0] < 0) {
     $1756(HEAP32[$3 + 20 >> 2])
    }
    global$0 = $3 + 32 | 0;
    return $0_1 | 0;
   }
   $774();
   wasm2js_trap();
  }
  $774();
  wasm2js_trap();
 }
 
 function $1353($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$2_1 >> 2] = HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1;
  $0_1 = $706(($4_1 | 0) < 0 ? $3 : $0_1, 5950, $2_1);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1354($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$2_1 >> 2];
  if ($4_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     HEAP8[$3 + 15 | 0] = $4_1;
     $5_1 = $3 + 4 | 0;
     break label$2;
    }
    $6_1 = ($4_1 | 15) + 1 | 0;
    $5_1 = $1782($6_1);
    HEAP32[$3 + 12 >> 2] = $6_1 | -2147483648;
    HEAP32[$3 + 4 >> 2] = $5_1;
    HEAP32[$3 + 8 >> 2] = $4_1;
   }
   if ($4_1) {
    $1602($5_1, $2_1 + 4 | 0, $4_1)
   }
   HEAP8[$4_1 + $5_1 | 0] = 0;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($1_1, $3 + 4 | 0) | 0;
   if (HEAP8[$3 + 15 | 0] < 0) {
    $1756(HEAP32[$3 + 4 >> 2])
   }
   global$0 = $3 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1355($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1;
  $0_1 = $708($0_1, 5950, $2_1);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1356($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  if (HEAPU8[$2_1 + 143 | 0]) {
   $0_1 = 0
  } else {
   $0_1 = $707($76($2_1, $0_1), $1_1, $0_1, 0)
  }
  return $0_1 | 0;
 }
 
 function $1357($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  label$1 : {
   $5_1 = HEAP32[$1_1 >> 2];
   if ($5_1 >>> 0 < 2147483632) {
    label$3 : {
     if ($5_1 >>> 0 <= 10) {
      HEAP8[$4_1 + 31 | 0] = $5_1;
      $6_1 = $4_1 + 20 | 0;
      break label$3;
     }
     $7_1 = ($5_1 | 15) + 1 | 0;
     $6_1 = $1782($7_1);
     HEAP32[$4_1 + 28 >> 2] = $7_1 | -2147483648;
     HEAP32[$4_1 + 20 >> 2] = $6_1;
     HEAP32[$4_1 + 24 >> 2] = $5_1;
    }
    if ($5_1) {
     $1602($6_1, $1_1 + 4 | 0, $5_1)
    }
    HEAP8[$5_1 + $6_1 | 0] = 0;
    $5_1 = HEAP32[$3 >> 2];
    if ($5_1 >>> 0 >= 2147483632) {
     break label$1
    }
    label$6 : {
     if ($5_1 >>> 0 <= 10) {
      HEAP8[$4_1 + 19 | 0] = $5_1;
      $1_1 = $4_1 + 8 | 0;
      break label$6;
     }
     $6_1 = ($5_1 | 15) + 1 | 0;
     $1_1 = $1782($6_1);
     HEAP32[$4_1 + 16 >> 2] = $6_1 | -2147483648;
     HEAP32[$4_1 + 8 >> 2] = $1_1;
     HEAP32[$4_1 + 12 >> 2] = $5_1;
    }
    if ($5_1) {
     $1602($1_1, $3 + 4 | 0, $5_1)
    }
    HEAP8[$1_1 + $5_1 | 0] = 0;
    $0_1 = FUNCTION_TABLE[$0_1 | 0]($4_1 + 20 | 0, $2_1, $4_1 + 8 | 0) | 0;
    if (HEAP8[$4_1 + 19 | 0] < 0) {
     $1756(HEAP32[$4_1 + 8 >> 2])
    }
    if (HEAP8[$4_1 + 31 | 0] < 0) {
     $1756(HEAP32[$4_1 + 20 >> 2])
    }
    global$0 = $4_1 + 32 | 0;
    return $0_1 | 0;
   }
   $774();
   wasm2js_trap();
  }
  $774();
  wasm2js_trap();
 }
 
 function $1358($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 >> 2] = HEAP8[$2_1 + 11 | 0] < 0 ? HEAP32[$2_1 >> 2] : $2_1;
  $0_1 = $712(($5_1 | 0) < 0 ? $4_1 : $0_1, $1_1, 5950, $3);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1359($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$3 >> 2];
  if ($5_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($5_1 >>> 0 <= 10) {
     HEAP8[$4_1 + 15 | 0] = $5_1;
     $6_1 = $4_1 + 4 | 0;
     break label$2;
    }
    $7_1 = ($5_1 | 15) + 1 | 0;
    $6_1 = $1782($7_1);
    HEAP32[$4_1 + 12 >> 2] = $7_1 | -2147483648;
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
   }
   if ($5_1) {
    $1602($6_1, $3 + 4 | 0, $5_1)
   }
   HEAP8[$5_1 + $6_1 | 0] = 0;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $4_1 + 4 | 0) | 0;
   if (HEAP8[$4_1 + 15 | 0] < 0) {
    $1756(HEAP32[$4_1 + 4 >> 2])
   }
   global$0 = $4_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1360($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 >> 2] = HEAP8[$2_1 + 11 | 0] < 0 ? HEAP32[$2_1 >> 2] : $2_1;
  $2_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 12 >> 2] = $3;
  $4_1 = HEAP32[18392];
  $6_1 = HEAP32[$4_1 + 7080 >> 2];
  HEAP8[$6_1 + 140 | 0] = 1;
  if (!HEAPU8[$6_1 + 143 | 0]) {
   $2_1 = $4_1 + 12800 | 0;
   $4_1 = $22($2_1, 5950, $3);
   $2_1 = $707($80($6_1, $0_1), $1_1, $2_1, $2_1 + $4_1 | 0);
  }
  global$0 = $5_1 + 16 | 0;
  global$0 = $3 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $1361($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $0_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  $287(Math_fround(0.0));
  $1_1 = $1_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
  $153($0_1);
 }
 
 function $1362($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$1_1 + 140 | 0] = 1;
  $287(Math_fround(0.0));
  $1_1 = $1_1 + 344 | 0;
  HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] + 1;
  $265($0_1);
 }
 
 function $1363($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $0_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $2_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$2_1 + 140 | 0] = 1;
  if (HEAPU8[$2_1 + 143 | 0]) {
   $0_1 = 0
  } else {
   $0_1 = $707($76($2_1, $0_1), $1_1 | 26, $0_1, 0)
  }
  return $0_1 | 0;
 }
 
 function $1364($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = Math_fround(0), $15_1 = 0, $16_1 = 0, $17_1 = Math_fround(0), $18_1 = 0, $19 = Math_fround(0), $20_1 = Math_fround(0), $21_1 = Math_fround(0);
  $11_1 = global$0 - 32 | 0;
  global$0 = $11_1;
  $0_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $9 = $1488($11_1 + 12 | 0, $1_1);
  $4_1 = HEAP32[HEAP32[$9 + 8 >> 2] >> 2] != 2 ? $9 + 4 | 0 : 0;
  $1_1 = global$0 - 80 | 0;
  global$0 = $1_1;
  $3 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$3 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$3 + 143 | 0]) {
    break label$1
   }
   label$3 : {
    if (!$4_1) {
     $5_1 = 26;
     break label$3;
    }
    $5_1 = 1048606;
    if (!HEAPU8[$4_1 | 0]) {
     break label$1
    }
   }
   $10_1 = $76($3, $0_1);
   $15_1 = $707($10_1, $2_1 | $5_1, $0_1, 0);
   if ($4_1) {
    $2_1 = $1_1 + 16 | 0;
    $16_1 = $2_1 + 56 | 0;
    $0_1 = HEAP32[18392];
    HEAP32[$16_1 >> 2] = HEAP32[$0_1 + 7296 >> 2];
    $5_1 = $0_1 + 7288 | 0;
    $6_1 = HEAP32[$5_1 + 4 >> 2];
    $3 = $2_1 + 48 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$3 + 4 >> 2] = $6_1;
    $6_1 = $0_1 + 7280 | 0;
    $7_1 = HEAP32[$6_1 + 4 >> 2];
    $5_1 = $2_1 + 40 | 0;
    HEAP32[$5_1 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    $7_1 = $0_1 + 7272 | 0;
    $8 = HEAP32[$7_1 + 4 >> 2];
    $6_1 = $2_1 + 32 | 0;
    HEAP32[$6_1 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $8;
    $8 = $0_1 + 7264 | 0;
    $13 = HEAP32[$8 + 4 >> 2];
    $7_1 = $2_1 + 24 | 0;
    HEAP32[$7_1 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$7_1 + 4 >> 2] = $13;
    $13 = $0_1 + 7256 | 0;
    $12_1 = HEAP32[$13 + 4 >> 2];
    $8 = $2_1 + 16 | 0;
    HEAP32[$8 >> 2] = HEAP32[$13 >> 2];
    HEAP32[$8 + 4 >> 2] = $12_1;
    $12_1 = $0_1 + 7248 | 0;
    $18_1 = HEAP32[$12_1 + 4 >> 2];
    $2_1 = $2_1 + 8 | 0;
    HEAP32[$2_1 >> 2] = HEAP32[$12_1 >> 2];
    HEAP32[$2_1 + 4 >> 2] = $18_1;
    $12_1 = HEAP32[$0_1 + 7244 >> 2];
    HEAP32[$1_1 + 16 >> 2] = HEAP32[$0_1 + 7240 >> 2];
    HEAP32[$1_1 + 20 >> 2] = $12_1;
    $17_1 = HEAPF32[$0_1 + 7252 >> 2];
    $19 = HEAPF32[$0_1 + 7260 >> 2];
    $14 = HEAPF32[$0_1 + 5476 >> 2];
    $20_1 = HEAPF32[$13 >> 2];
    $21_1 = HEAPF32[$0_1 + 6468 >> 2];
    $10_1 = $268($10_1);
    HEAPF32[$1_1 + 12 >> 2] = $20_1;
    $14 = Math_fround(Math_fround($19 - Math_fround($14 + $14)) - $21_1);
    HEAPF32[$1_1 + 8 >> 2] = $14 <= $17_1 ? $17_1 : $14;
    if ($576($10_1, $1_1 + 8 | 0)) {
     HEAP8[$4_1 | 0] = 0
    }
    $4_1 = HEAP32[$1_1 + 20 >> 2];
    $0_1 = $0_1 + 7240 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 + 16 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $4_1;
    HEAP32[$0_1 + 56 >> 2] = HEAP32[$16_1 >> 2];
    $4_1 = HEAP32[$3 + 4 >> 2];
    $10_1 = $0_1 + 48 | 0;
    HEAP32[$10_1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$10_1 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$5_1 + 4 >> 2];
    $3 = $0_1 + 40 | 0;
    HEAP32[$3 >> 2] = HEAP32[$5_1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$6_1 + 4 >> 2];
    $3 = $0_1 + 32 | 0;
    HEAP32[$3 >> 2] = HEAP32[$6_1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$7_1 + 4 >> 2];
    $3 = $0_1 + 24 | 0;
    HEAP32[$3 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$8 + 4 >> 2];
    $3 = $0_1 + 16 | 0;
    HEAP32[$3 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$3 + 4 >> 2] = $4_1;
    $4_1 = HEAP32[$2_1 + 4 >> 2];
    $0_1 = $0_1 + 8 | 0;
    HEAP32[$0_1 >> 2] = HEAP32[$2_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $4_1;
   }
  }
  global$0 = $1_1 + 80 | 0;
  $1_1 = $15_1;
  HEAP32[$9 >> 2] = 52584;
  $2_1 = HEAP32[$9 + 8 >> 2];
  if (HEAP32[$2_1 >> 2] != 2) {
   HEAP32[$11_1 + 24 >> 2] = HEAPU8[$9 + 4 | 0];
   $9 = $11_1 + 24 | 0;
   $0_1 = fimport$1(72652, $9 | 0) | 0;
   $2_1 = HEAP32[$2_1 >> 2];
   HEAP32[$11_1 + 24 >> 2] = 0;
   $15_1 = $2_1;
   $2_1 = fimport$1(72760, $9 | 0) | 0;
   fimport$3($15_1 | 0, $2_1 | 0, $0_1 | 0);
   fimport$4($2_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $11_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1365($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2];
  if ($6_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($6_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 15 | 0] = $6_1;
     $7_1 = $5_1 + 4 | 0;
     break label$2;
    }
    $8 = ($6_1 | 15) + 1 | 0;
    $7_1 = $1782($8);
    HEAP32[$5_1 + 12 >> 2] = $8 | -2147483648;
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    HEAP32[$5_1 + 8 >> 2] = $6_1;
   }
   if ($6_1) {
    $1602($7_1, $1_1 + 4 | 0, $6_1)
   }
   HEAP8[$6_1 + $7_1 | 0] = 0;
   HEAP32[$5_1 >> 2] = $4_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($5_1 + 4 | 0, $2_1, $3, $5_1) | 0;
   fimport$4(HEAP32[$5_1 >> 2]);
   if (HEAP8[$5_1 + 15 | 0] < 0) {
    $1756(HEAP32[$5_1 + 4 >> 2])
   }
   global$0 = $5_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1366($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 8 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $0_1 = $601(($6_1 | 0) < 0 ? $5_1 : $0_1, $1_1, $2_1, $763($3, $4_1 + 8 | 0));
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1367($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  $1_1 = $1488($4_1 + 12 | 0, $1_1);
  $7_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2];
  HEAP32[$4_1 + 24 >> 2] = 0;
  HEAP32[$4_1 + 28 >> 2] = 0;
  $3 = $763($3, $4_1 + 24 | 0);
  $5_1 = ($6_1 | 0) < 0 ? $5_1 : $0_1;
  $0_1 = ($7_1 | 0) != 2 ? $1_1 + 4 | 0 : 0;
  $2_1 = $601($5_1, HEAPU8[$0_1 | 0], $2_1, $3);
  if ($2_1) {
   HEAP8[$0_1 | 0] = HEAPU8[$0_1 | 0] ^ 1
  }
  HEAP32[$1_1 >> 2] = 52584;
  $3 = HEAP32[$1_1 + 8 >> 2];
  if (HEAP32[$3 >> 2] != 2) {
   HEAP32[$4_1 + 24 >> 2] = HEAPU8[$1_1 + 4 | 0];
   $1_1 = $4_1 + 24 | 0;
   $0_1 = fimport$1(72652, $1_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$4_1 + 24 >> 2] = 0;
   $1_1 = fimport$1(72760, $1_1 | 0) | 0;
   fimport$3($3 | 0, $1_1 | 0, $0_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return $2_1 | 0;
 }
 
 function $1368($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $0_1 = $722(($4_1 | 0) < 0 ? $3 : $0_1, $763($1_1, $2_1 + 8 | 0));
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1369($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[$1_1 >> 2];
  if ($7_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($7_1 >>> 0 <= 10) {
     HEAP8[$6_1 + 31 | 0] = $7_1;
     $8 = $6_1 + 20 | 0;
     break label$2;
    }
    $9 = ($7_1 | 15) + 1 | 0;
    $8 = $1782($9);
    HEAP32[$6_1 + 28 >> 2] = $9 | -2147483648;
    HEAP32[$6_1 + 20 >> 2] = $8;
    HEAP32[$6_1 + 24 >> 2] = $7_1;
   }
   if ($7_1) {
    $1602($8, $1_1 + 4 | 0, $7_1)
   }
   HEAP8[$7_1 + $8 | 0] = 0;
   HEAP32[$6_1 + 12 >> 2] = $3;
   HEAP32[$6_1 + 16 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($6_1 + 20 | 0, $6_1 + 16 | 0, $6_1 + 12 | 0, $4_1, $5_1) | 0;
   fimport$4(HEAP32[$6_1 + 12 >> 2]);
   fimport$4(HEAP32[$6_1 + 16 >> 2]);
   if (HEAP8[$6_1 + 31 | 0] < 0) {
    $1756(HEAP32[$6_1 + 20 >> 2])
   }
   global$0 = $6_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1370($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0.0, $9 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[23915];
  fimport$10(HEAP32[$2_1 >> 2]);
  fimport$4(HEAP32[$6_1 + 128 >> 2]);
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 132 >> 2] = $3;
  HEAP32[$6_1 + 128 >> 2] = $2_1;
  $6_1 = HEAP32[$0_1 >> 2];
  $9 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$5_1 + 12 >> 2] = 53228;
  HEAP32[$5_1 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$5_1 + 24 >> 2] = 0;
  $2_1 = $1_1;
  $7_1 = $5_1 + 24 | 0;
  $1_1 = fimport$1(72760, $7_1 | 0) | 0;
  $2_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $8 = +fimport$5($2_1 | 0, 72724, $7_1 | 0);
  fimport$6(HEAP32[$5_1 + 24 >> 2]);
  if (Math_abs($8) < 2147483648.0) {
   $1_1 = ~~$8
  } else {
   $1_1 = -2147483648
  }
  HEAP32[$5_1 + 16 >> 2] = $1_1;
  fimport$4($2_1 | 0);
  $1_1 = $724(($9 | 0) < 0 ? $6_1 : $0_1, $5_1 + 16 | 0, 871, $3, $4_1);
  HEAP32[$5_1 + 12 >> 2] = 53228;
  $2_1 = HEAP32[$5_1 + 20 >> 2];
  HEAP32[$5_1 + 24 >> 2] = HEAP32[$5_1 + 16 >> 2];
  $3 = $5_1 + 24 | 0;
  $0_1 = fimport$1(72724, $3 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$5_1 + 24 >> 2] = 0;
  $4_1 = $2_1;
  $2_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $5_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1371($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0.0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[23915];
  fimport$10(HEAP32[$2_1 >> 2]);
  fimport$4(HEAP32[$7_1 + 148 >> 2]);
  HEAP32[$7_1 + 148 >> 2] = HEAP32[$2_1 >> 2];
  fimport$10(HEAP32[$3 >> 2]);
  fimport$4(HEAP32[$7_1 + 152 >> 2]);
  $2_1 = HEAP32[$3 >> 2];
  HEAP32[$7_1 + 156 >> 2] = $4_1;
  HEAP32[$7_1 + 152 >> 2] = $2_1;
  $3 = HEAP32[$0_1 >> 2];
  $7_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$6_1 + 12 >> 2] = 53228;
  HEAP32[$6_1 + 20 >> 2] = $1_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$6_1 + 24 >> 2] = 0;
  $2_1 = $1_1;
  $8 = $6_1 + 24 | 0;
  $1_1 = fimport$1(72760, $8 | 0) | 0;
  $2_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $9 = +fimport$5($2_1 | 0, 72724, $8 | 0);
  fimport$6(HEAP32[$6_1 + 24 >> 2]);
  if (Math_abs($9) < 2147483648.0) {
   $1_1 = ~~$9
  } else {
   $1_1 = -2147483648
  }
  HEAP32[$6_1 + 16 >> 2] = $1_1;
  fimport$4($2_1 | 0);
  $1_1 = $724(($7_1 | 0) < 0 ? $3 : $0_1, $6_1 + 16 | 0, 872, $4_1, $5_1);
  HEAP32[$6_1 + 12 >> 2] = 53228;
  $2_1 = HEAP32[$6_1 + 20 >> 2];
  HEAP32[$6_1 + 24 >> 2] = HEAP32[$6_1 + 16 >> 2];
  $3 = $6_1 + 24 | 0;
  $0_1 = fimport$1(72724, $3 | 0) | 0;
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$6_1 + 24 >> 2] = 0;
  $4_1 = $2_1;
  $2_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $2_1 | 0, $0_1 | 0);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $6_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1372($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8, $9) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  $9 = $9 | 0;
  var $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0;
  $10_1 = global$0 - 48 | 0;
  global$0 = $10_1;
  $11_1 = HEAP32[$1_1 >> 2];
  if ($11_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($11_1 >>> 0 <= 10) {
     HEAP8[$10_1 + 47 | 0] = $11_1;
     $12_1 = $10_1 + 36 | 0;
     break label$2;
    }
    $13 = ($11_1 | 15) + 1 | 0;
    $12_1 = $1782($13);
    HEAP32[$10_1 + 44 >> 2] = $13 | -2147483648;
    HEAP32[$10_1 + 36 >> 2] = $12_1;
    HEAP32[$10_1 + 40 >> 2] = $11_1;
   }
   if ($11_1) {
    $1602($12_1, $1_1 + 4 | 0, $11_1)
   }
   HEAP8[$11_1 + $12_1 | 0] = 0;
   HEAP32[$10_1 + 28 >> 2] = $3;
   HEAP32[$10_1 + 32 >> 2] = $2_1;
   HEAP32[$10_1 + 24 >> 2] = $6_1;
   HEAP32[$10_1 + 20 >> 2] = $7_1;
   HEAP32[$10_1 + 16 >> 2] = $8;
   HEAP32[$10_1 + 12 >> 2] = $9;
   FUNCTION_TABLE[$0_1 | 0]($10_1 + 36 | 0, $10_1 + 32 | 0, $10_1 + 28 | 0, $4_1, $5_1, $10_1 + 24 | 0, $10_1 + 20 | 0, $10_1 + 16 | 0, $10_1 + 12 | 0);
   fimport$4(HEAP32[$10_1 + 12 >> 2]);
   fimport$4(HEAP32[$10_1 + 16 >> 2]);
   fimport$4(HEAP32[$10_1 + 20 >> 2]);
   fimport$4(HEAP32[$10_1 + 24 >> 2]);
   fimport$4(HEAP32[$10_1 + 28 >> 2]);
   fimport$4(HEAP32[$10_1 + 32 >> 2]);
   if (HEAP8[$10_1 + 47 | 0] < 0) {
    $1756(HEAP32[$10_1 + 36 >> 2])
   }
   global$0 = $10_1 + 48 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1373($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0.0, $14 = 0.0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $9 = global$0 - 48 | 0;
  global$0 = $9;
  $10_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$10_1 + 80 >> 2]);
  HEAP32[$10_1 + 80 >> 2] = HEAP32[$1_1 >> 2];
  fimport$10(HEAP32[$2_1 >> 2]);
  fimport$4(HEAP32[$10_1 + 84 >> 2]);
  HEAP32[$10_1 + 84 >> 2] = HEAP32[$2_1 >> 2];
  $10_1 = HEAP32[$0_1 >> 2];
  $15_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$9 + 40 >> 2] = 0;
  HEAP32[$9 + 32 >> 2] = 0;
  HEAP32[$9 + 36 >> 2] = 0;
  HEAP32[$9 + 28 >> 2] = 53464;
  HEAP32[$9 + 44 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($9 + 28 | 0)
  }
  HEAP32[$9 + 28 >> 2] = 53312;
  $5_1 = HEAP32[HEAP32[$9 + 44 >> 2] >> 2];
  $16_1 = HEAP32[$9 + 32 >> 2];
  $17_1 = HEAP8[$9 + 43 | 0];
  $1_1 = $9 + 20 | 0;
  $13 = +fimport$5(HEAP32[$6_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 20 >> 2]);
  $14 = +fimport$5(HEAP32[$7_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 20 >> 2]);
  HEAP32[$9 + 20 >> 2] = 0;
  HEAP32[$9 + 24 >> 2] = 0;
  $1_1 = $763($8, $1_1);
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$9 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$9 + 12 >> 2] = $2_1;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $6_1 = $9 + 8 | 0;
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  $6_1 = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 >> 2] = $6_1;
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  HEAP32[$1_1 + 8 >> 2] = $6_1;
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $0_1 = ($15_1 | 0) < 0 ? $10_1 : $0_1;
  $2_1 = ($5_1 | 0) != 2 ? (($17_1 | 0) < 0 ? $16_1 : $9 + 32 | 0) : 0;
  $11_1 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $11_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $11_1 = Math_fround($13);
  }
  $12_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($14 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $12_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($14 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $12_1 = Math_fround($14);
  }
  $725(0, $0_1, 873, $3, $4_1, $2_1, $11_1, $12_1, $1_1);
  global$0 = $1_1 + 16 | 0;
  HEAP32[$9 + 28 >> 2] = 53464;
  if (HEAP8[$9 + 43 | 0] < 0) {
   $1756(HEAP32[$9 + 32 >> 2])
  }
  global$0 = $9 + 48 | 0;
 }
 
 function $1374($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8 = $8 | 0;
  var $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0.0, $14 = 0.0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $9 = global$0 - 48 | 0;
  global$0 = $9;
  $10_1 = HEAP32[23915];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$10_1 + 88 >> 2]);
  HEAP32[$10_1 + 88 >> 2] = HEAP32[$1_1 >> 2];
  fimport$10(HEAP32[$2_1 >> 2]);
  fimport$4(HEAP32[$10_1 + 92 >> 2]);
  HEAP32[$10_1 + 92 >> 2] = HEAP32[$2_1 >> 2];
  $10_1 = HEAP32[$0_1 >> 2];
  $15_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$9 + 40 >> 2] = 0;
  HEAP32[$9 + 32 >> 2] = 0;
  HEAP32[$9 + 36 >> 2] = 0;
  HEAP32[$9 + 28 >> 2] = 53464;
  HEAP32[$9 + 44 >> 2] = $5_1;
  if (HEAP32[$5_1 >> 2] != 2) {
   $1506($9 + 28 | 0)
  }
  HEAP32[$9 + 28 >> 2] = 53312;
  $5_1 = HEAP32[HEAP32[$9 + 44 >> 2] >> 2];
  $16_1 = HEAP32[$9 + 32 >> 2];
  $17_1 = HEAP8[$9 + 43 | 0];
  $1_1 = $9 + 20 | 0;
  $13 = +fimport$5(HEAP32[$6_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 20 >> 2]);
  $14 = +fimport$5(HEAP32[$7_1 >> 2], 72808, $1_1 | 0);
  fimport$6(HEAP32[$9 + 20 >> 2]);
  HEAP32[$9 + 20 >> 2] = 0;
  HEAP32[$9 + 24 >> 2] = 0;
  $1_1 = $763($8, $1_1);
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$9 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$9 + 12 >> 2] = $2_1;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $6_1 = $9 + 8 | 0;
  $2_1 = HEAP32[$6_1 + 4 >> 2];
  $6_1 = HEAP32[$6_1 >> 2];
  HEAP32[$1_1 >> 2] = $6_1;
  HEAP32[$1_1 + 4 >> 2] = $2_1;
  HEAP32[$1_1 + 8 >> 2] = $6_1;
  HEAP32[$1_1 + 12 >> 2] = $2_1;
  $0_1 = ($15_1 | 0) < 0 ? $10_1 : $0_1;
  $2_1 = ($5_1 | 0) != 2 ? (($17_1 | 0) < 0 ? $16_1 : $9 + 32 | 0) : 0;
  $11_1 = Math_fround(3402823466385288598117041.0e14);
  label$2 : {
   if ($13 >= 3402823466385288598117041.0e14) {
    break label$2
   }
   $11_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($13 <= -3402823466385288598117041.0e14) {
    break label$2
   }
   $11_1 = Math_fround($13);
  }
  $12_1 = Math_fround(3402823466385288598117041.0e14);
  label$3 : {
   if ($14 >= 3402823466385288598117041.0e14) {
    break label$3
   }
   $12_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($14 <= -3402823466385288598117041.0e14) {
    break label$3
   }
   $12_1 = Math_fround($14);
  }
  $725(1, $0_1, 874, $3, $4_1, $2_1, $11_1, $12_1, $1_1);
  global$0 = $1_1 + 16 | 0;
  HEAP32[$9 + 28 >> 2] = 53464;
  if (HEAP8[$9 + 43 | 0] < 0) {
   $1756(HEAP32[$9 + 32 >> 2])
  }
  global$0 = $9 + 48 | 0;
 }
 
 function $1375($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$1_1 >> 2];
  if ($4_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($4_1 >>> 0 <= 10) {
     HEAP8[$3 + 15 | 0] = $4_1;
     $5_1 = $3 + 4 | 0;
     break label$2;
    }
    $6_1 = ($4_1 | 15) + 1 | 0;
    $5_1 = $1782($6_1);
    HEAP32[$3 + 12 >> 2] = $6_1 | -2147483648;
    HEAP32[$3 + 4 >> 2] = $5_1;
    HEAP32[$3 + 8 >> 2] = $4_1;
   }
   if ($4_1) {
    $1602($5_1, $1_1 + 4 | 0, $4_1)
   }
   HEAP8[$4_1 + $5_1 | 0] = 0;
   FUNCTION_TABLE[$0_1 | 0]($3 + 4 | 0, $2_1);
   if (HEAP8[$3 + 15 | 0] < 0) {
    $1756(HEAP32[$3 + 4 >> 2])
   }
   global$0 = $3 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1376($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 >> 2] = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  HEAP32[$2_1 + 4 >> 2] = $1_1 ? 10668 : 10805;
  $557(5812, $2_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1378($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = $2_1;
  $557(13139, $0_1);
  global$0 = $0_1 + 16 | 0;
 }
 
 function $1381($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$1_1 >> 2];
  if ($5_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($5_1 >>> 0 <= 10) {
     HEAP8[$4_1 + 15 | 0] = $5_1;
     $6_1 = $4_1 + 4 | 0;
     break label$2;
    }
    $7_1 = ($5_1 | 15) + 1 | 0;
    $6_1 = $1782($7_1);
    HEAP32[$4_1 + 12 >> 2] = $7_1 | -2147483648;
    HEAP32[$4_1 + 4 >> 2] = $6_1;
    HEAP32[$4_1 + 8 >> 2] = $5_1;
   }
   if ($5_1) {
    $1602($6_1, $1_1 + 4 | 0, $5_1)
   }
   HEAP8[$5_1 + $6_1 | 0] = 0;
   HEAP32[$4_1 >> 2] = $3;
   FUNCTION_TABLE[$0_1 | 0]($4_1 + 4 | 0, $2_1, $4_1);
   fimport$4(HEAP32[$4_1 >> 2]);
   if (HEAP8[$4_1 + 15 | 0] < 0) {
    $1756(HEAP32[$4_1 + 4 >> 2])
   }
   global$0 = $4_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1382($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 >> 2];
  $5_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$3 + 24 >> 2] = 0;
  HEAP32[$3 + 16 >> 2] = 0;
  HEAP32[$3 + 20 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 53464;
  HEAP32[$3 + 28 >> 2] = $2_1;
  if (HEAP32[$2_1 >> 2] != 2) {
   $1506($3 + 12 | 0)
  }
  HEAP32[$3 + 12 >> 2] = 53312;
  $2_1 = ($5_1 | 0) < 0 ? $4_1 : $0_1;
  $0_1 = global$0 - 112 | 0;
  global$0 = $0_1;
  $4_1 = HEAP32[HEAP32[$3 + 28 >> 2] >> 2] != 2 ? (HEAP8[$3 + 27 | 0] < 0 ? HEAP32[$3 + 16 >> 2] : $3 + 16 | 0) : 0;
  label$1 : {
   if ($4_1) {
    HEAP32[$0_1 + 32 >> 2] = $4_1;
    $4_1 = $0_1 + 48 | 0;
    $21($4_1, 64, 5811, $0_1 + 32 | 0);
    HEAPF64[$0_1 + 24 >> 3] = $1_1;
    HEAP32[$0_1 + 16 >> 2] = $2_1;
    $557($4_1, $0_1 + 16 | 0);
    break label$1;
   }
   HEAP32[$0_1 >> 2] = $2_1;
   HEAPF64[$0_1 + 8 >> 3] = $1_1;
   $557(9700, $0_1);
  }
  global$0 = $0_1 + 112 | 0;
  HEAP32[$3 + 12 >> 2] = 53464;
  if (HEAP8[$3 + 27 | 0] < 0) {
   $1756(HEAP32[$3 + 16 >> 2])
  }
  global$0 = $3 + 32 | 0;
 }
 
 function $1383($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = Math_fround(0), $10_1 = Math_fround(0), $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = 0, $15_1 = 0, $16_1 = Math_fround(0), $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = Math_fround(0);
  $17_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $18_1 = $1_1;
  $0_1 = 0;
  $3 = global$0 - 112 | 0;
  global$0 = $3;
  $5_1 = HEAP32[18392];
  $4_1 = HEAP32[$5_1 + 7080 >> 2];
  HEAP8[$4_1 + 140 | 0] = 1;
  label$1 : {
   if (HEAPU8[$4_1 + 143 | 0]) {
    break label$1
   }
   $15_1 = $76($4_1, $17_1);
   $1_1 = $133($15_1);
   $0_1 = HEAP32[$5_1 + 12104 >> 2];
   $6_1 = HEAP32[$5_1 + 12096 >> 2];
   $13 = $0_1 + ($6_1 << 2) | 0;
   $20_1 = HEAPU8[$4_1 + 11 | 0] & 16 ? 285737285 : 268960069;
   label$2 : {
    while (1) {
     $2_1 = $0_1;
     $19 = $0_1 >>> 0 >= $13 >>> 0;
     if ($19) {
      break label$2
     }
     $0_1 = $2_1 + 4 | 0;
     if (HEAP32[$2_1 >> 2] != ($15_1 | 0)) {
      continue
     }
     break;
    };
    if ($19) {
     break label$2
    }
    if ($1_1) {
     $0_1 = $320($15_1, $20_1);
     break label$1;
    }
    HEAP32[$5_1 + 7300 >> 2] = 0;
    $0_1 = $1_1;
    break label$1;
   }
   $0_1 = HEAP32[$5_1 + 12100 >> 2];
   label$5 : {
    if (($0_1 | 0) != ($6_1 | 0)) {
     break label$5
    }
    $2_1 = $0_1 ? $0_1 + (($0_1 | 0) / 2 | 0) | 0 : 8;
    $6_1 = $6_1 + 1 | 0;
    $2_1 = ($2_1 | 0) > ($6_1 | 0) ? $2_1 : $6_1;
    if (($0_1 | 0) >= ($2_1 | 0)) {
     break label$5
    }
    $0_1 = $16($2_1 << 2);
    $6_1 = HEAP32[$5_1 + 12104 >> 2];
    if ($6_1) {
     $1602($0_1, $6_1, HEAP32[$5_1 + 12096 >> 2] << 2);
     $17(HEAP32[$5_1 + 12104 >> 2]);
    }
    HEAP32[$5_1 + 12100 >> 2] = $2_1;
    HEAP32[$5_1 + 12104 >> 2] = $0_1;
   }
   HEAP32[HEAP32[$5_1 + 12104 >> 2] + (HEAP32[$5_1 + 12096 >> 2] << 2) >> 2] = $15_1;
   HEAP32[$5_1 + 12096 >> 2] = HEAP32[$5_1 + 12096 >> 2] + 1;
   $68($3 + 104 | 0, $17_1, 0, 1, Math_fround(-1.0));
   $19 = HEAP32[$5_1 + 7508 >> 2];
   $0_1 = HEAP32[18392];
   $2_1 = HEAP32[$0_1 + 7480 >> 2];
   $6_1 = 0;
   label$9 : {
    if (($2_1 | 0) >= HEAP32[$0_1 + 7468 >> 2]) {
     break label$9
    }
    $6_1 = 0;
    if (HEAPU8[HEAP32[$0_1 + 7080 >> 2] + 11 | 0] & 16) {
     break label$9
    }
    $0_1 = HEAP32[(HEAP32[$0_1 + 7476 >> 2] + Math_imul($2_1, 36) | 0) + 4 >> 2];
    $6_1 = 0;
    if (!$0_1) {
     break label$9
    }
    $6_1 = (HEAPU8[$0_1 + 11 | 0] & 16) >>> 4 | 0;
   }
   $0_1 = $6_1;
   $6_1 = $0_1;
   if ($0_1) {
    HEAP32[$5_1 + 7508 >> 2] = $4_1
   }
   HEAP32[$3 + 96 >> 2] = 0;
   HEAP32[$3 + 100 >> 2] = 0;
   $9 = HEAPF32[$4_1 + 212 >> 2];
   $8 = HEAPF32[$4_1 + 208 >> 2];
   $0_1 = HEAP32[$4_1 + 208 >> 2];
   $153($17_1);
   if (!$18_1) {
    $226(1)
   }
   label$14 : {
    if (!HEAP32[$4_1 + 376 >> 2]) {
     $11_1 = Math_fround($8 + Math_fround(-1.0));
     $7_1 = HEAPF32[$5_1 + 5492 >> 2];
     $8 = Math_fround($7_1 * Math_fround(.5));
     label$16 : {
      if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$8;
       break label$16;
      }
      $0_1 = -2147483648;
     }
     $10_1 = Math_fround($0_1 | 0);
     $11_1 = Math_fround($11_1 - $10_1);
     $8 = Math_fround(0.0);
     if (HEAPU8[$4_1 + 9 | 0] & 4) {
      $0_1 = HEAP32[18392];
      $8 = Math_fround(HEAPF32[$0_1 + 6472 >> 2] * HEAPF32[$4_1 + 572 >> 2]);
      $12_1 = HEAPF32[$0_1 + 5480 >> 2];
      $12_1 = Math_fround($12_1 + $12_1);
      $16_1 = HEAPF32[$4_1 + 312 >> 2];
      $0_1 = HEAP32[$4_1 + 728 >> 2];
      if ($0_1) {
       $8 = Math_fround($8 * HEAPF32[$0_1 + 572 >> 2])
      }
      $8 = Math_fround($12_1 + Math_fround($16_1 + $8));
     }
     $9 = Math_fround($9 - HEAPF32[$5_1 + 5480 >> 2]);
     HEAPF32[$3 + 96 >> 2] = $11_1;
     HEAPF32[$3 + 100 >> 2] = $9 + $8;
     HEAPF32[$4_1 + 208 >> 2] = HEAPF32[$4_1 + 208 >> 2] + $10_1;
     HEAPF32[$3 + 92 >> 2] = HEAPF32[$5_1 + 5496 >> 2];
     HEAPF32[$3 + 88 >> 2] = $7_1 + $7_1;
     $0_1 = $3 + 88 | 0;
     $59(14, $0_1);
     $2_1 = HEAPU16[$4_1 + 328 >> 1];
     $9 = HEAPF32[$4_1 + 264 >> 2];
     $7_1 = HEAPF32[$4_1 + 212 >> 2];
     $8 = HEAPF32[$4_1 + 208 >> 2];
     $10_1 = HEAPF32[$3 + 104 >> 2];
     HEAP32[$3 + 92 >> 2] = 0;
     HEAPF32[$3 + 88 >> 2] = $10_1;
     $0_1 = $601(19354, $1_1, 5242881, $0_1);
     HEAPF32[$3 + 84 >> 2] = $7_1 + $9;
     HEAPF32[$3 + 80 >> 2] = $8 + Math_fround($2_1 >>> 0);
     $2_1 = HEAP32[$3 + 84 >> 2];
     HEAP32[$3 + 8 >> 2] = HEAP32[$3 + 80 >> 2];
     HEAP32[$3 + 12 >> 2] = $2_1;
     $63($3 + 8 | 0, $17_1, 0, 1);
     $60(1);
     $8 = HEAPF32[$4_1 + 208 >> 2];
     $9 = Math_fround(HEAPF32[$5_1 + 5492 >> 2] * Math_fround(-.5));
     label$21 : {
      if (Math_fround(Math_abs($9)) < Math_fround(2147483648.0)) {
       $2_1 = ~~$9;
       break label$21;
      }
      $2_1 = -2147483648;
     }
     HEAPF32[$4_1 + 208 >> 2] = $8 + Math_fround($2_1 | 0);
     break label$14;
    }
    $7_1 = HEAPF32[$5_1 + 5428 >> 2];
    HEAP32[$3 + 96 >> 2] = $0_1;
    HEAPF32[$3 + 100 >> 2] = $9 - $7_1;
    $0_1 = $4_1 + 334 | 0;
    $2_1 = HEAPU16[$0_1 >> 1];
    $10_1 = HEAPF32[$5_1 + 6468 >> 2];
    $7_1 = HEAPF32[$3 + 104 >> 2];
    HEAP16[$0_1 >> 1] = $2_1;
    $2_1 = $4_1 + 336 | 0;
    $0_1 = HEAPU16[$2_1 >> 1];
    $13 = $2_1;
    $2_1 = $7_1 < Math_fround(4294967296.0) & $7_1 >= Math_fround(0.0) ? ~~$7_1 >>> 0 : 0;
    HEAP16[$13 >> 1] = $0_1 >>> 0 > $2_1 >>> 0 ? $0_1 : $2_1;
    $2_1 = $4_1 + 340 | 0;
    $0_1 = HEAPU16[$2_1 >> 1];
    $13 = $2_1;
    $7_1 = Math_fround($10_1 * Math_fround(1.2000000476837158));
    label$28 : {
     if (Math_fround(Math_abs($7_1)) < Math_fround(2147483648.0)) {
      $2_1 = ~~$7_1;
      break label$28;
     }
     $2_1 = -2147483648;
    }
    $2_1 = $2_1 & 65535;
    HEAP16[$13 >> 1] = $0_1 >>> 0 > $2_1 >>> 0 ? $0_1 : $2_1;
    $21_1 = HEAPU16[$4_1 + 324 >> 1];
    $0_1 = 0;
    $2_1 = 0;
    while (1) {
     $13 = HEAPU16[($4_1 + ($2_1 << 1) | 0) + 334 >> 1];
     $0_1 = ($13 + $0_1 | 0) + ($14 & 1 ? ($13 ? $21_1 : 0) : 0) | 0;
     $14 = ($13 | 0) != 0 | $14;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != 4) {
      continue
     }
     break;
    };
    $0_1 = $0_1 & 65535;
    HEAP32[$4_1 + 320 >> 2] = $0_1;
    $2_1 = HEAP32[$4_1 + 316 >> 2];
    $14 = $3 + 88 | 0;
    $208($14);
    $7_1 = HEAPF32[$3 + 88 >> 2];
    $13 = HEAPU16[$4_1 + 328 >> 1];
    $10_1 = HEAPF32[$4_1 + 264 >> 2];
    $11_1 = HEAPF32[$4_1 + 212 >> 2];
    $12_1 = HEAPF32[$4_1 + 208 >> 2];
    HEAP32[$3 + 92 >> 2] = 0;
    $16_1 = Math_fround(($0_1 >>> 0 < $2_1 >>> 0 ? $2_1 : $0_1) >>> 0);
    HEAPF32[$3 + 88 >> 2] = $16_1;
    $0_1 = $601(19354, $1_1, 22020097, $14);
    HEAPF32[$3 + 76 >> 2] = $11_1 + $10_1;
    HEAPF32[$3 + 72 >> 2] = $12_1 + Math_fround($13 >>> 0);
    $2_1 = HEAP32[$3 + 76 >> 2];
    HEAP32[$3 + 32 >> 2] = HEAP32[$3 + 72 >> 2];
    HEAP32[$3 + 36 >> 2] = $2_1;
    $63($3 + 32 | 0, $17_1, 0, 1);
    $2_1 = HEAPU16[$4_1 + 332 >> 1];
    $14 = HEAP32[$4_1 + 580 >> 2];
    $10_1 = HEAPF32[$5_1 + 6468 >> 2];
    HEAPF32[$3 + 60 >> 2] = $9 + Math_fround(0.0);
    $9 = Math_fround($7_1 - $16_1);
    HEAPF32[$3 + 56 >> 2] = Math_fround(Math_fround($10_1 * Math_fround(.30000001192092896)) + Math_fround(($9 <= Math_fround(0.0) ? Math_fround(0.0) : $9) + Math_fround($2_1 >>> 0))) + $8;
    $2_1 = $51(0, Math_fround(1.0));
    $13 = HEAP32[$3 + 60 >> 2];
    HEAP32[$3 + 16 >> 2] = HEAP32[$3 + 56 >> 2];
    HEAP32[$3 + 20 >> 2] = $13;
    $476($14, $3 + 16 | 0, $2_1, 1, Math_fround(1.0));
   }
   if (!$18_1) {
    $227()
   }
   $2_1 = HEAP32[$5_1 + 7116 >> 2] == ($15_1 | 0);
   if ($6_1) {
    HEAP32[$5_1 + 7508 >> 2] = $19
   }
   $14 = $2_1 & $18_1;
   label$34 : {
    label$35 : {
     label$37 : {
      if (HEAP32[$4_1 + 376 >> 2] == 1) {
       $2_1 = HEAP32[$5_1 + 7480 >> 2];
       $6_1 = 0;
       label$39 : {
        if (($2_1 | 0) >= HEAP32[$5_1 + 7468 >> 2]) {
         break label$39
        }
        $2_1 = HEAP32[$5_1 + 7476 >> 2] + Math_imul($2_1, 36) | 0;
        $6_1 = 0;
        if (($4_1 | 0) != HEAP32[$2_1 + 8 >> 2]) {
         break label$39
        }
        $6_1 = HEAP32[$2_1 + 4 >> 2];
       }
       $2_1 = $6_1;
       $6_1 = 1;
       label$41 : {
        if (($4_1 | 0) != HEAP32[$5_1 + 7084 >> 2]) {
         break label$41
        }
        $6_1 = 1;
        if (!$2_1) {
         break label$41
        }
        $6_1 = 1;
        if (HEAPU8[$4_1 + 9 | 0] & 4) {
         break label$41
        }
        $16_1 = HEAPF32[$2_1 + 24 >> 2];
        $10_1 = HEAPF32[$2_1 + 16 >> 2];
        $9 = HEAPF32[$5_1 + 6468 >> 2];
        $12_1 = HEAPF32[$2_1 + 20 >> 2];
        $7_1 = HEAPF32[$2_1 + 12 >> 2];
        $11_1 = HEAPF32[$5_1 + 880 >> 2];
        $6_1 = $5_1 + 228 | 0;
        $22_1 = HEAPF32[$6_1 >> 2];
        $8 = Math_fround(HEAPF32[$5_1 + 232 >> 2] - HEAPF32[$5_1 + 884 >> 2]);
        HEAPF32[$3 + 92 >> 2] = $8;
        $11_1 = Math_fround($22_1 - $11_1);
        HEAPF32[$3 + 88 >> 2] = $11_1;
        $12_1 = Math_fround($7_1 + $12_1);
        label$42 : {
         if (HEAPF32[$4_1 + 12 >> 2] < $7_1) {
          HEAPF32[$3 + 48 >> 2] = $7_1;
          break label$42;
         }
         HEAPF32[$3 + 48 >> 2] = $12_1;
        }
        $16_1 = Math_fround($10_1 + $16_1);
        HEAPF32[$3 + 52 >> 2] = $10_1;
        label$44 : {
         if (HEAPF32[$4_1 + 12 >> 2] < HEAPF32[$2_1 + 12 >> 2]) {
          HEAPF32[$3 + 40 >> 2] = $7_1;
          break label$44;
         }
         HEAPF32[$3 + 40 >> 2] = $12_1;
        }
        HEAPF32[$3 + 44 >> 2] = $16_1;
        HEAPF32[$3 + 88 >> 2] = $11_1 + (HEAPF32[$4_1 + 12 >> 2] < HEAPF32[$2_1 + 12 >> 2] ? Math_fround(-.5) : Math_fround(.5));
        $10_1 = Math_fround($9 * Math_fround(.5));
        $12_1 = Math_fround($9 * Math_fround(2.5));
        $7_1 = Math_fround(Math_fround(Math_abs(Math_fround($11_1 - HEAPF32[$3 + 48 >> 2]))) * Math_fround(.30000001192092896));
        $7_1 = $7_1 < $10_1 ? $10_1 : $7_1 > $12_1 ? $12_1 : $7_1;
        $10_1 = Math_fround(Math_fround(HEAPF32[$3 + 52 >> 2] - $7_1) - $8);
        $11_1 = Math_fround($9 * Math_fround(-8.0));
        HEAPF32[$3 + 52 >> 2] = $8 + ($10_1 >= $11_1 ? $10_1 : $11_1);
        $7_1 = Math_fround(Math_fround($16_1 + $7_1) - $8);
        $9 = Math_fround($9 * Math_fround(8.0));
        HEAPF32[$3 + 44 >> 2] = $8 + ($7_1 < $9 ? $7_1 : $9);
        $6_1 = $12($3 + 88 | 0, $3 + 48 | 0, $3 + 40 | 0, $6_1) ^ 1;
       }
       $2_1 = 0;
       label$46 : {
        if ($14 | $1_1 ^ 1) {
         break label$46
        }
        $2_1 = 0;
        if (($4_1 | 0) != HEAP32[$5_1 + 7084 >> 2]) {
         break label$46
        }
        $2_1 = HEAP32[$5_1 + 7120 >> 2];
        $2_1 = $6_1 & (($2_1 | 0) != 0 & ($2_1 | 0) != ($15_1 | 0));
       }
       $4_1 = ($1_1 ^ 1) & $0_1;
       $0_1 = $1_1 ? $4_1 : $0_1 ? $4_1 : $14 ? $6_1 : $4_1;
       if (HEAP32[$5_1 + 7512 >> 2] != ($15_1 | 0) | HEAP32[$5_1 + 7612 >> 2] != 1) {
        break label$35
       }
       break label$37;
      }
      if ($0_1) {
       $2_1 = $0_1 & $1_1 & $6_1;
       $0_1 = $2_1 ^ 1;
       $1_1 = $1_1 ^ $2_1;
       break label$34;
      }
      if (($6_1 & $14 ^ 1 | $1_1) != 1) {
       $2_1 = 0;
       $0_1 = 1;
       break label$35;
      }
      if (($15_1 | 0) != HEAP32[$5_1 + 7512 >> 2]) {
       $2_1 = 0;
       $0_1 = 0;
       break label$35;
      }
      $2_1 = 0;
      if (HEAP32[$5_1 + 7612 >> 2] == 3) {
       break label$37
      }
      $0_1 = 0;
      break label$35;
     }
     $203();
     $0_1 = 1;
    }
   }
   label$51 : {
    if (!(!$18_1 | $2_1)) {
     break label$51
    }
    if (!$133($15_1)) {
     break label$51
    }
    $132(HEAP32[$5_1 + 7480 >> 2], 1);
   }
   $269();
   label$53 : {
    if (!($1_1 | $0_1 ^ 1 | HEAP32[$5_1 + 7468 >> 2] <= HEAP32[$5_1 + 7480 >> 2])) {
     $317($17_1, 0);
     $0_1 = 0;
     break label$53;
    }
    if ($0_1) {
     $317($17_1, 0)
    }
    if ($0_1 | $1_1) {
     HEAP32[$3 + 88 >> 2] = 0;
     HEAP32[$3 + 92 >> 2] = 0;
     $250($3 + 96 | 0, 1, $3 + 88 | 0);
     $58(7, HEAPF32[$5_1 + 5468 >> 2]);
     $0_1 = $320($15_1, $20_1);
     $60(1);
     break label$53;
    }
    HEAP32[$5_1 + 7300 >> 2] = 0;
    $0_1 = 0;
   }
  }
  global$0 = $3 + 112 | 0;
  return $0_1 | 0;
 }
 
 function $1384($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2];
  if ($6_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($6_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 15 | 0] = $6_1;
     $7_1 = $5_1 + 4 | 0;
     break label$2;
    }
    $8 = ($6_1 | 15) + 1 | 0;
    $7_1 = $1782($8);
    HEAP32[$5_1 + 12 >> 2] = $8 | -2147483648;
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    HEAP32[$5_1 + 8 >> 2] = $6_1;
   }
   if ($6_1) {
    $1602($7_1, $1_1 + 4 | 0, $6_1)
   }
   HEAP8[$6_1 + $7_1 | 0] = 0;
   HEAP32[$5_1 >> 2] = $2_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($5_1 + 4 | 0, $5_1, $3, $4_1) | 0;
   fimport$4(HEAP32[$5_1 >> 2]);
   if (HEAP8[$5_1 + 15 | 0] < 0) {
    $1756(HEAP32[$5_1 + 4 >> 2])
   }
   global$0 = $5_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1385($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 24 >> 2] = 0;
  HEAP32[$4_1 + 16 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 0;
  HEAP32[$4_1 + 12 >> 2] = 53464;
  HEAP32[$4_1 + 28 >> 2] = $1_1;
  if (HEAP32[$1_1 >> 2] != 2) {
   $1506($4_1 + 12 | 0)
  }
  HEAP32[$4_1 + 12 >> 2] = 53312;
  $0_1 = $742(($6_1 | 0) < 0 ? $5_1 : $0_1, HEAP32[HEAP32[$4_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$4_1 + 27 | 0] < 0 ? HEAP32[$4_1 + 16 >> 2] : $4_1 + 16 | 0) : 0, $2_1, $3);
  HEAP32[$4_1 + 12 >> 2] = 53464;
  if (HEAP8[$4_1 + 27 | 0] < 0) {
   $1756(HEAP32[$4_1 + 16 >> 2])
  }
  global$0 = $4_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1387($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  $5_1 = HEAP32[$0_1 >> 2];
  $6_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$4_1 + 32 >> 2] = 0;
  HEAP32[$4_1 + 24 >> 2] = 0;
  HEAP32[$4_1 + 28 >> 2] = 0;
  HEAP32[$4_1 + 20 >> 2] = 53464;
  HEAP32[$4_1 + 36 >> 2] = $1_1;
  if (HEAP32[$1_1 >> 2] != 2) {
   $1506($4_1 + 20 | 0)
  }
  HEAP32[$4_1 + 20 >> 2] = 53312;
  $7_1 = HEAP32[HEAP32[$4_1 + 36 >> 2] >> 2] != 2 ? (HEAP8[$4_1 + 35 | 0] < 0 ? HEAP32[$4_1 + 24 >> 2] : $4_1 + 24 | 0) : 0;
  $1_1 = $1488($4_1 + 8 | 0, $2_1);
  $2_1 = HEAP32[HEAP32[$1_1 + 8 >> 2] >> 2] != 2 ? $1_1 + 4 | 0 : 0;
  $0_1 = $741(($6_1 | 0) < 0 ? $5_1 : $0_1, $7_1, $2_1 ? HEAPU8[$2_1 | 0] != 0 : 0, $3);
  if (!(!$2_1 | !$0_1)) {
   HEAP8[$2_1 | 0] = HEAPU8[$2_1 | 0] ^ 1
  }
  $2_1 = $0_1;
  HEAP32[$1_1 >> 2] = 52584;
  $3 = HEAP32[$1_1 + 8 >> 2];
  if (HEAP32[$3 >> 2] != 2) {
   HEAP32[$4_1 + 40 >> 2] = HEAPU8[$1_1 + 4 | 0];
   $1_1 = $4_1 + 40 | 0;
   $0_1 = fimport$1(72652, $1_1 | 0) | 0;
   $3 = HEAP32[$3 >> 2];
   HEAP32[$4_1 + 40 >> 2] = 0;
   $1_1 = fimport$1(72760, $1_1 | 0) | 0;
   fimport$3($3 | 0, $1_1 | 0, $0_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($0_1 | 0);
  }
  HEAP32[$4_1 + 20 >> 2] = 53464;
  if (HEAP8[$4_1 + 35 | 0] < 0) {
   $1756(HEAP32[$4_1 + 24 >> 2])
  }
  global$0 = $4_1 + 48 | 0;
  return $2_1 | 0;
 }
 
 function $1388($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $162(5950, $1_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1389($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $322(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, $1_1) | 0;
 }
 
 function $1390($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = Math_fround(0), $14 = Math_fround(0);
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $7_1 = $1488($5_1 + 12 | 0, $1_1);
  $9 = HEAP32[HEAP32[$7_1 + 8 >> 2] >> 2] != 2 ? $7_1 + 4 | 0 : 0;
  $0_1 = $6_1;
  $4_1 = HEAP32[18392];
  $1_1 = HEAP32[$4_1 + 7080 >> 2];
  $10_1 = HEAP32[((HEAP32[$1_1 + 196 >> 2] << 2) + HEAP32[$1_1 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
  $3 = $10_1;
  while (1) {
   $1_1 = $0_1;
   $0_1 = $0_1 + 1 | 0;
   $8 = HEAPU8[$1_1 | 0];
   if ($8) {
    $3 = ($8 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $3 : HEAPU8[$1_1 + 2 | 0] == 35 ? $10_1 : $3;
    $3 = HEAP32[(($8 ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
   }
   if ($8) {
    continue
   }
   break;
  };
  $1_1 = $3 ^ -1;
  if (($1_1 | 0) == HEAP32[$4_1 + 7136 >> 2]) {
   HEAP32[$4_1 + 7140 >> 2] = $1_1
  }
  if (HEAP32[$4_1 + 7196 >> 2] == ($1_1 | 0)) {
   HEAP8[$4_1 + 7200 | 0] = 1
  }
  if (HEAP32[$4_1 + 7112 >> 2] == ($1_1 | 0)) {
   $75($1_1, 11, $6_1)
  }
  $0_1 = HEAP32[18392];
  $3 = HEAP32[$0_1 + 7480 >> 2];
  __inlined_func$323 : {
   if (!(($1_1 | 0) == HEAP32[HEAP32[$0_1 + 7476 >> 2] + Math_imul($3, 36) >> 2] & HEAP32[$0_1 + 7468 >> 2] > ($3 | 0))) {
    HEAP32[$4_1 + 7300 >> 2] = 0;
    $1_1 = 0;
    break __inlined_func$323;
   }
   if (!(HEAP8[$4_1 + 7300 | 0] & 1)) {
    $1_1 = HEAP32[HEAP32[$0_1 + 7504 >> 2] >> 2];
    $11_1 = HEAPF32[$1_1 + 8 >> 2];
    $12_1 = HEAPF32[$1_1 + 16 >> 2];
    $13 = HEAPF32[$1_1 + 4 >> 2];
    $14 = HEAPF32[$1_1 + 12 >> 2];
    $1_1 = $0_1 + 7324 | 0;
    HEAP32[$1_1 >> 2] = 1056964608;
    HEAP32[$1_1 + 4 >> 2] = 1056964608;
    HEAP32[$0_1 + 7300 >> 2] = HEAP32[$0_1 + 7300 >> 2] | 1;
    HEAP32[$0_1 + 7304 >> 2] = 4;
    HEAPF32[$0_1 + 7316 >> 2] = $13 + Math_fround($14 * Math_fround(.5));
    HEAPF32[$0_1 + 7320 >> 2] = $11_1 + Math_fround($12_1 * Math_fround(.5));
   }
   $2_1 = $143($6_1, $9, $2_1 | 201326624);
   label$13 : {
    if ($2_1) {
     $1_1 = 1;
     if (!$9) {
      break __inlined_func$323
     }
     $1_1 = 1;
     if (HEAPU8[$9 | 0]) {
      break label$13
     }
     $0_1 = HEAP32[18392];
     $1_1 = HEAP32[$0_1 + 7080 >> 2];
     if (!(HEAP32[$0_1 + 7564 >> 2] | (!HEAPU8[$0_1 + 7597 | 0] | ($1_1 | 0) != HEAP32[$0_1 + 7508 >> 2]))) {
      HEAP32[$0_1 + 7600 >> 2] = HEAP32[$0_1 + 7600 >> 2] | 2
     }
     if (HEAP8[$1_1 + 11 | 0] & 1) {
      HEAP8[$0_1 + 6998 | 0] = 1
     }
     $142();
     HEAP8[$0_1 + 6998 | 0] = 0;
     $1_1 = 0;
     if (!$2_1) {
      break __inlined_func$323
     }
     $132(HEAP32[$4_1 + 7480 >> 2], 1);
     $1_1 = 0;
     break __inlined_func$323;
    }
    $0_1 = HEAP32[18392];
    $1_1 = HEAP32[$0_1 + 7080 >> 2];
    if (!(HEAP32[$0_1 + 7564 >> 2] | (!HEAPU8[$0_1 + 7597 | 0] | ($1_1 | 0) != HEAP32[$0_1 + 7508 >> 2]))) {
     HEAP32[$0_1 + 7600 >> 2] = HEAP32[$0_1 + 7600 >> 2] | 2
    }
    if (HEAP8[$1_1 + 11 | 0] & 1) {
     HEAP8[$0_1 + 6998 | 0] = 1
    }
    $142();
    HEAP8[$0_1 + 6998 | 0] = 0;
    $1_1 = 0;
   }
  }
  HEAP32[$7_1 >> 2] = 52584;
  $2_1 = HEAP32[$7_1 + 8 >> 2];
  if (HEAP32[$2_1 >> 2] != 2) {
   HEAP32[$5_1 + 24 >> 2] = HEAPU8[$7_1 + 4 | 0];
   $6_1 = $5_1 + 24 | 0;
   $0_1 = fimport$1(72652, $6_1 | 0) | 0;
   $2_1 = HEAP32[$2_1 >> 2];
   HEAP32[$5_1 + 24 >> 2] = 0;
   $3 = $2_1;
   $2_1 = fimport$1(72760, $6_1 | 0) | 0;
   fimport$3($3 | 0, $2_1 | 0, $0_1 | 0);
   fimport$4($2_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $5_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1391($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $317(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, $1_1);
 }
 
 function $1392($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 53464;
  HEAP32[$2_1 + 28 >> 2] = $0_1;
  if (HEAP32[$0_1 >> 2] != 2) {
   $1506($2_1 + 12 | 0)
  }
  HEAP32[$2_1 + 12 >> 2] = 53312;
  $324(HEAP32[HEAP32[$2_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$2_1 + 27 | 0] < 0 ? HEAP32[$2_1 + 16 >> 2] : $2_1 + 16 | 0) : 0, $1_1);
  HEAP32[$2_1 + 12 >> 2] = 53464;
  if (HEAP8[$2_1 + 27 | 0] < 0) {
   $1756(HEAP32[$2_1 + 16 >> 2])
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1393($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $2_1) | 0;
  fimport$4(HEAP32[$3 + 12 >> 2]);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1394($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 53464;
  HEAP32[$2_1 + 28 >> 2] = $0_1;
  if (HEAP32[$0_1 >> 2] != 2) {
   $1506($2_1 + 12 | 0)
  }
  $0_1 = $2_1 + 16 | 0;
  HEAP32[$2_1 + 12 >> 2] = 53312;
  $4_1 = HEAP32[18392];
  $5_1 = HEAP32[$4_1 + 7080 >> 2];
  if (HEAPU8[$5_1 + 143 | 0]) {
   $0_1 = 0
  } else {
   $7_1 = HEAP32[HEAP32[$2_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$2_1 + 27 | 0] < 0 ? HEAP32[$2_1 + 16 >> 2] : $0_1) : 0;
   label$2 : {
    if ($7_1) {
     $0_1 = $7_1;
     $8 = HEAP32[(HEAP32[$5_1 + 204 >> 2] + (HEAP32[$5_1 + 196 >> 2] << 2) | 0) - 4 >> 2] ^ -1;
     $3 = $8;
     while (1) {
      $5_1 = $0_1;
      $0_1 = $0_1 + 1 | 0;
      $6_1 = HEAPU8[$5_1 | 0];
      if ($6_1) {
       $3 = ($6_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $3 : HEAPU8[$5_1 + 2 | 0] == 35 ? $8 : $3;
       $3 = HEAP32[(($6_1 ^ $3 & 255) << 2) + 19360 >> 2] ^ $3 >>> 8;
      }
      if ($6_1) {
       continue
      }
      break;
     };
     $3 = $3 ^ -1;
     if (($3 | 0) == HEAP32[$4_1 + 7136 >> 2]) {
      HEAP32[$4_1 + 7140 >> 2] = $3
     }
     if (($3 | 0) == HEAP32[$4_1 + 7196 >> 2]) {
      HEAP8[$4_1 + 7200 | 0] = 1
     }
     if (($3 | 0) != HEAP32[$4_1 + 7112 >> 2]) {
      break label$2
     }
     $75($3, 11, $7_1);
     break label$2;
    }
    $3 = HEAP32[$4_1 + 7240 >> 2];
   }
   label$13 : {
    if (!HEAPU8[(HEAP32[18392] + ($1_1 & 31) | 0) + 1022 | 0]) {
     break label$13
    }
    if (!$89(32)) {
     break label$13
    }
    $318($3, $1_1);
   }
   $0_1 = $320($3, 321);
  }
  HEAP32[$2_1 + 12 >> 2] = 53464;
  if (HEAP8[$2_1 + 27 | 0] < 0) {
   $1756(HEAP32[$2_1 + 16 >> 2])
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1395($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 53464;
  HEAP32[$2_1 + 28 >> 2] = $0_1;
  if (HEAP32[$0_1 >> 2] != 2) {
   $1506($2_1 + 12 | 0)
  }
  HEAP32[$2_1 + 12 >> 2] = 53312;
  $0_1 = HEAP32[HEAP32[$2_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$2_1 + 27 | 0] < 0 ? HEAP32[$2_1 + 16 >> 2] : $2_1 + 16 | 0) : 0;
  $6_1 = $0_1 ? $0_1 : 1938;
  $0_1 = $6_1;
  $3 = HEAP32[18392];
  $4_1 = HEAP32[$3 + 7080 >> 2];
  $7_1 = HEAP32[((HEAP32[$4_1 + 196 >> 2] << 2) + HEAP32[$4_1 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
  $5_1 = $7_1;
  while (1) {
   $4_1 = $0_1;
   $0_1 = $0_1 + 1 | 0;
   $8 = HEAPU8[$4_1 | 0];
   if ($8) {
    $5_1 = ($8 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $5_1 : HEAPU8[$4_1 + 2 | 0] == 35 ? $7_1 : $5_1;
    $5_1 = HEAP32[(($8 ^ $5_1 & 255) << 2) + 19360 >> 2] ^ $5_1 >>> 8;
   }
   if ($8) {
    continue
   }
   break;
  };
  $4_1 = $5_1 ^ -1;
  if (($4_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
   HEAP32[$3 + 7140 >> 2] = $4_1
  }
  if (HEAP32[$3 + 7196 >> 2] == ($4_1 | 0)) {
   HEAP8[$3 + 7200 | 0] = 1
  }
  if (HEAP32[$3 + 7112 >> 2] == ($4_1 | 0)) {
   $75($4_1, 11, $6_1)
  }
  $0_1 = HEAP32[18392];
  label$10 : {
   if (!HEAPU8[($0_1 + ($1_1 & 31) | 0) + 1022 | 0]) {
    break label$10
   }
   $5_1 = HEAP32[$0_1 + 7084 >> 2];
   if (!$5_1 | ($5_1 | 0) != HEAP32[$0_1 + 7080 >> 2]) {
    break label$10
   }
   $3 = HEAP32[$0_1 + 7508 >> 2];
   label$11 : {
    if (!$3) {
     break label$11
    }
    $3 = HEAP32[$3 + 736 >> 2];
    if (!$3 | !HEAPU8[$3 + 139 | 0] | ($3 | 0) == HEAP32[$5_1 + 736 >> 2]) {
     break label$11
    }
    if (HEAPU8[$3 + 11 | 0] & 8) {
     break label$10
    }
   }
   $6_1 = HEAP32[$0_1 + 7116 >> 2] | HEAP32[$0_1 + 7120 >> 2] ? $1_1 & 64 : 0;
   $7_1 = HEAPU8[$0_1 + 7149 | 0];
   $0_1 = HEAP32[$0_1 + 7136 >> 2];
   if ($6_1 | !($7_1 | !$0_1) & ($0_1 | 0) != HEAP32[$5_1 + 80 >> 2]) {
    break label$10
   }
   $318($4_1, $1_1);
  }
  $0_1 = $320($4_1, 321);
  HEAP32[$2_1 + 12 >> 2] = 53464;
  if (HEAP8[$2_1 + 27 | 0] < 0) {
   $1756(HEAP32[$2_1 + 16 >> 2])
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1396($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 53464;
  HEAP32[$2_1 + 28 >> 2] = $0_1;
  if (HEAP32[$0_1 >> 2] != 2) {
   $1506($2_1 + 12 | 0)
  }
  HEAP32[$2_1 + 12 >> 2] = 53312;
  $7_1 = $1_1;
  $0_1 = HEAP32[HEAP32[$2_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$2_1 + 27 | 0] < 0 ? HEAP32[$2_1 + 16 >> 2] : $2_1 + 16 | 0) : 0;
  $6_1 = $0_1 ? $0_1 : 1953;
  $0_1 = $6_1;
  $3 = HEAP32[18392];
  $1_1 = HEAP32[$3 + 7080 >> 2];
  $8 = HEAP32[((HEAP32[$1_1 + 196 >> 2] << 2) + HEAP32[$1_1 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
  $4_1 = $8;
  while (1) {
   $1_1 = $0_1;
   $0_1 = $0_1 + 1 | 0;
   $5_1 = HEAPU8[$1_1 | 0];
   if ($5_1) {
    $4_1 = ($5_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $4_1 : HEAPU8[$1_1 + 2 | 0] == 35 ? $8 : $4_1;
    $4_1 = HEAP32[(($5_1 ^ $4_1 & 255) << 2) + 19360 >> 2] ^ $4_1 >>> 8;
   }
   if ($5_1) {
    continue
   }
   break;
  };
  $5_1 = $4_1 ^ -1;
  if (($5_1 | 0) == HEAP32[$3 + 7136 >> 2]) {
   HEAP32[$3 + 7140 >> 2] = $5_1
  }
  if (($5_1 | 0) == HEAP32[$3 + 7196 >> 2]) {
   HEAP8[$3 + 7200 | 0] = 1
  }
  if (($5_1 | 0) == HEAP32[$3 + 7112 >> 2]) {
   $75($5_1, 11, $6_1)
  }
  $3 = HEAP32[18392];
  label$10 : {
   if (!HEAPU8[($3 + ($7_1 & 31) | 0) + 1022 | 0]) {
    break label$10
   }
   $1_1 = HEAP32[$3 + 7084 >> 2];
   label$11 : {
    if (!$1_1) {
     break label$11
    }
    $0_1 = HEAP32[$3 + 7508 >> 2];
    label$12 : {
     if (!$0_1) {
      break label$12
     }
     $0_1 = HEAP32[$0_1 + 736 >> 2];
     if (!$0_1 | !HEAPU8[$0_1 + 139 | 0] | HEAP32[$1_1 + 736 >> 2] == ($0_1 | 0)) {
      break label$12
     }
     if (HEAPU8[$0_1 + 11 | 0] & 12) {
      break label$11
     }
    }
    $0_1 = HEAP32[$3 + 7136 >> 2];
    if (HEAPU8[$3 + 7149 | 0] | !$0_1 | HEAP32[$1_1 + 80 >> 2] == ($0_1 | 0)) {
     break label$10
    }
   }
   $4_1 = HEAP32[$3 + 7468 >> 2];
   while (1) {
    label$13 : {
     $1_1 = $0_1;
     if (($4_1 | 0) <= 0) {
      $0_1 = 0;
      break label$13;
     }
     $4_1 = $4_1 - 1 | 0;
     $0_1 = HEAP32[(HEAP32[$3 + 7476 >> 2] + Math_imul($4_1, 36) | 0) + 4 >> 2];
     label$16 : {
      if ($0_1) {
       $6_1 = 0;
       if (HEAPU8[$0_1 + 11 | 0] & 8) {
        break label$16
       }
      }
      $0_1 = $1_1;
      $6_1 = 1;
     }
     if ($6_1) {
      continue
     }
    }
    break;
   };
   if ($0_1) {
    break label$10
   }
   $318($5_1, $7_1);
  }
  $0_1 = $320($5_1, 321);
  HEAP32[$2_1 + 12 >> 2] = 53464;
  if (HEAP8[$2_1 + 27 | 0] < 0) {
   $1756(HEAP32[$2_1 + 16 >> 2])
  }
  global$0 = $2_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1397($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $4_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $7_1 = $1_1 & 128;
  if (!$7_1) {
   $0_1 = $4_1;
   $5_1 = HEAP32[18392];
   $3 = HEAP32[$5_1 + 7080 >> 2];
   $8 = HEAP32[((HEAP32[$3 + 196 >> 2] << 2) + HEAP32[$3 + 204 >> 2] | 0) - 4 >> 2] ^ -1;
   $2_1 = $8;
   while (1) {
    $3 = $0_1;
    $0_1 = $3 + 1 | 0;
    $6_1 = HEAPU8[$3 | 0];
    if ($6_1) {
     $2_1 = ($6_1 | 0) != 35 | HEAPU8[$0_1 | 0] != 35 ? $2_1 : HEAPU8[$3 + 2 | 0] == 35 ? $8 : $2_1;
     $2_1 = HEAP32[(($6_1 ^ $2_1 & 255) << 2) + 19360 >> 2] ^ $2_1 >>> 8;
    }
    if ($6_1) {
     continue
    }
    break;
   };
   $2_1 = $2_1 ^ -1;
   if (($2_1 | 0) == HEAP32[$5_1 + 7136 >> 2]) {
    HEAP32[$5_1 + 7140 >> 2] = $2_1
   }
   if (($2_1 | 0) == HEAP32[$5_1 + 7196 >> 2]) {
    HEAP8[$5_1 + 7200 | 0] = 1
   }
   if (($2_1 | 0) == HEAP32[$5_1 + 7112 >> 2]) {
    $75($2_1, 11, $4_1)
   }
  }
  $1_1 = $1_1 & 256;
  $3 = HEAP32[18392];
  $4_1 = HEAP32[$3 + 7468 >> 2];
  __inlined_func$316 : {
   if ($7_1) {
    $2_1 = ($4_1 | 0) > 0;
    if ($1_1) {
     break __inlined_func$316
    }
    $2_1 = ($4_1 | 0) > HEAP32[$3 + 7480 >> 2];
    break __inlined_func$316;
   }
   $0_1 = $2_1;
   label$13 : {
    if ($1_1) {
     $2_1 = ($4_1 | 0) > 0;
     if (($4_1 | 0) <= 0) {
      break __inlined_func$316
     }
     $1_1 = HEAP32[$3 + 7476 >> 2];
     $2_1 = 1;
     if (($0_1 | 0) == HEAP32[$1_1 >> 2]) {
      break label$13
     }
     $2_1 = 0;
     while (1) {
      $2_1 = $2_1 + 1 | 0;
      if (($4_1 | 0) != ($2_1 | 0) & ($0_1 | 0) != HEAP32[$1_1 + Math_imul($2_1, 36) >> 2]) {
       continue
      }
      break;
     };
     $2_1 = ($2_1 | 0) < ($4_1 | 0);
     break __inlined_func$316;
    }
    $1_1 = HEAP32[$3 + 7480 >> 2];
    $2_1 = 0;
    if (($4_1 | 0) <= ($1_1 | 0)) {
     break label$13
    }
    $2_1 = ($0_1 | 0) == HEAP32[HEAP32[$3 + 7476 >> 2] + Math_imul($1_1, 36) >> 2];
   }
  }
  return $2_1 | 0;
 }
 
 function $1398($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = Math_fround($5_1);
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  $7_1 = HEAP32[$1_1 >> 2];
  if ($7_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($7_1 >>> 0 <= 10) {
     HEAP8[$6_1 + 15 | 0] = $7_1;
     $8 = $6_1 + 4 | 0;
     break label$2;
    }
    $9 = ($7_1 | 15) + 1 | 0;
    $8 = $1782($9);
    HEAP32[$6_1 + 12 >> 2] = $9 | -2147483648;
    HEAP32[$6_1 + 4 >> 2] = $8;
    HEAP32[$6_1 + 8 >> 2] = $7_1;
   }
   if ($7_1) {
    $1602($8, $1_1 + 4 | 0, $7_1)
   }
   HEAP8[$7_1 + $8 | 0] = 0;
   HEAP32[$6_1 >> 2] = $4_1;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($6_1 + 4 | 0, $2_1, $3, $6_1, $5_1) | 0;
   fimport$4(HEAP32[$6_1 >> 2]);
   if (HEAP8[$6_1 + 15 | 0] < 0) {
    $1756(HEAP32[$6_1 + 4 >> 2])
   }
   global$0 = $6_1 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1399($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = Math_fround($4_1);
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$0_1 >> 2];
  $7_1 = HEAP8[$0_1 + 11 | 0];
  HEAP32[$5_1 + 8 >> 2] = 0;
  HEAP32[$5_1 + 12 >> 2] = 0;
  $0_1 = $490(($7_1 | 0) < 0 ? $6_1 : $0_1, $1_1, $2_1, $763($3, $5_1 + 8 | 0), $4_1);
  global$0 = $5_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1400() {
  $503();
 }
 
 function $1401($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1);
 }
 
 function $1402($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $517($0_1, $1_1);
 }
 
 function $1403() {
  return $521() | 0;
 }
 
 function $1404($0_1) {
  $0_1 = $0_1 | 0;
  return $519($0_1) | 0;
 }
 
 function $1405($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2];
  if ($6_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($6_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 15 | 0] = $6_1;
     $7_1 = $5_1 + 4 | 0;
     break label$2;
    }
    $8 = ($6_1 | 15) + 1 | 0;
    $7_1 = $1782($8);
    HEAP32[$5_1 + 12 >> 2] = $8 | -2147483648;
    HEAP32[$5_1 + 4 >> 2] = $7_1;
    HEAP32[$5_1 + 8 >> 2] = $6_1;
   }
   if ($6_1) {
    $1602($7_1, $1_1 + 4 | 0, $6_1)
   }
   HEAP8[$6_1 + $7_1 | 0] = 0;
   FUNCTION_TABLE[$0_1 | 0]($5_1 + 4 | 0, $2_1, $3, $4_1);
   if (HEAP8[$5_1 + 15 | 0] < 0) {
    $1756(HEAP32[$5_1 + 4 >> 2])
   }
   global$0 = $5_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1406($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $509(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, $1_1, $2_1, $3);
 }
 
 function $1408($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = Math_fround(0);
  $3 = HEAP32[HEAP32[18392] + 8036 >> 2];
  $4_1 = HEAP32[$3 + 4 >> 2];
  if ($4_1 & 16777216) {
   $2_1 = HEAP32[$3 + 84 >> 2];
   $2_1 = ($0_1 | 0) < ($2_1 | 0) ? $0_1 : $2_1;
  }
  HEAP8[$3 + 435 | 0] = $2_1;
  $0_1 = HEAP32[$3 + 360 >> 2];
  $6_1 = HEAPF32[$0_1 + 88 >> 2];
  $1_1 = $4_1 << 6 >> 31 & $1_1;
  HEAP8[$3 + 433 | 0] = $1_1;
  HEAP8[$3 + 436 | 0] = $6_1 != Math_fround(0.0) ? $2_1 : 0;
  $0_1 = HEAPF32[$0_1 + 92 >> 2] != Math_fround(0.0) ? $1_1 : 0;
  HEAP8[$3 + 434 | 0] = $0_1;
  HEAP8[$3 + 452 | 0] = !($0_1 & 255);
  $1_1 = $2_1 << 24 >> 24;
  if (($1_1 | 0) > 0) {
   $2_1 = 0;
   while (1) {
    $4_1 = HEAP32[$3 + 24 >> 2];
    $0_1 = HEAP8[$4_1 + $2_1 | 0];
    if (!(($0_1 | 0) == ($2_1 | 0) | ($0_1 | 0) < $1_1 << 24 >> 24)) {
     $1_1 = HEAP32[$3 + 16 >> 2];
     $4_1 = $1_1 + Math_imul(HEAP8[$0_1 + $4_1 | 0], 104) | 0;
     $5_1 = HEAPU8[$4_1 + 82 | 0];
     $1_1 = $1_1 + Math_imul($0_1, 104) | 0;
     HEAP8[$4_1 + 82 | 0] = HEAPU8[$1_1 + 82 | 0];
     HEAP8[$1_1 + 82 | 0] = $5_1;
     $1_1 = HEAP32[$3 + 24 >> 2];
     $0_1 = $0_1 + $1_1 | 0;
     $4_1 = HEAPU8[$0_1 | 0];
     $5_1 = $0_1;
     $0_1 = $1_1 + $2_1 | 0;
     HEAP8[$5_1 | 0] = HEAPU8[$0_1 | 0];
     HEAP8[$0_1 | 0] = $4_1;
    }
    $0_1 = HEAP8[$3 + 435 | 0];
    $1_1 = $0_1;
    $2_1 = $2_1 + 1 | 0;
    if (($0_1 | 0) > ($2_1 | 0)) {
     continue
    }
    break;
   };
  }
 }
 
 function $1409() {
  $528();
 }
 
 function $1410($0_1) {
  $0_1 = $0_1 | 0;
  $529(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1);
 }
 
 function $1411($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if (HEAPU8[$1_1 + 4 | 0] & 8) {
   if (!HEAPU8[$1_1 + 441 | 0]) {
    $496($1_1)
   }
   $501($1_1);
   $1_1 = $1_1 + 404 | 0;
  } else {
   $1_1 = 0
  }
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = fimport$1(49608, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1413() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($0_1) {
   $0_1 = HEAP32[$0_1 + 84 >> 2]
  } else {
   $0_1 = 0
  }
  return $0_1 | 0;
 }
 
 function $1414() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($0_1) {
   $0_1 = HEAP32[$0_1 + 92 >> 2]
  } else {
   $0_1 = 0
  }
  return $0_1 | 0;
 }
 
 function $1415() {
  var $0_1 = 0;
  $0_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($0_1) {
   $0_1 = HEAP32[$0_1 + 88 >> 2]
  } else {
   $0_1 = 0
  }
  return $0_1 | 0;
 }
 
 function $1416($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = $2_1 + 4 | 0;
  FUNCTION_TABLE[$0_1 | 0]($4_1, $1_1);
  $1_1 = HEAPU8[$2_1 + 15 | 0];
  $5_1 = $1_1 << 24 >> 24;
  $0_1 = ($5_1 | 0) < 0;
  $1_1 = $0_1 ? HEAP32[$2_1 + 8 >> 2] : $1_1 & 127;
  $3 = $1755($1_1 + 4 | 0);
  HEAP32[$3 >> 2] = $1_1;
  $6_1 = HEAP32[$2_1 + 4 >> 2];
  $1602($3 + 4 | 0, $0_1 ? $6_1 : $4_1, $1_1);
  if (($5_1 | 0) < 0) {
   $1756($6_1)
  }
  global$0 = $2_1 + 16 | 0;
  return $3 | 0;
 }
 
 function $1417($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  $3 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $1_1 = ($1_1 | 0) < 0 ? HEAP32[$2_1 + 92 >> 2] : $1_1;
   if (!HEAPU8[$2_1 + 441 | 0]) {
    $3 = 19354;
    if (($1_1 | 0) >= HEAP8[$2_1 + 419 | 0]) {
     break label$1
    }
   }
   $1_1 = HEAP16[(HEAP32[$2_1 + 16 >> 2] + Math_imul($1_1, 104) | 0) + 80 >> 1];
   $3 = 19354;
   if (($1_1 | 0) == -1) {
    break label$1
   }
   $3 = $1_1 + HEAP32[$2_1 + 372 >> 2] | 0;
  }
  $2_1 = $1697($3);
  if ($2_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($2_1 >>> 0 <= 10) {
     HEAP8[$0_1 + 11 | 0] = $2_1;
     break label$2;
    }
    $4_1 = ($2_1 | 15) + 1 | 0;
    $1_1 = $1782($4_1);
    HEAP32[$0_1 + 8 >> 2] = $4_1 | -2147483648;
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = $1_1;
   }
   if ($2_1) {
    $1603($0_1, $3, $2_1)
   }
   HEAP8[$0_1 + $2_1 | 0] = 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1419($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($1_1) {
   $0_1 = ($0_1 | 0) < 0 ? HEAP32[$1_1 + 92 >> 2] : $0_1;
   $0_1 = HEAP32[$1_1 + 84 >> 2] == ($0_1 | 0) ? (($0_1 | 0) == HEAP8[$1_1 + 420 | 0]) << 27 : HEAP32[HEAP32[$1_1 + 16 >> 2] + Math_imul($0_1, 104) >> 2];
  } else {
   $0_1 = 0
  }
  return $0_1 | 0;
 }
 
 function $1421($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = HEAP32[HEAP32[18392] + 8036 >> 2];
  if ($2_1) {
   HEAP8[(HEAP32[$2_1 + 16 >> 2] + Math_imul(($0_1 | 0) < 0 ? HEAP32[$2_1 + 92 >> 2] : $0_1, 104) | 0) + 92 | 0] = $1_1
  }
 }
 
 function $1422($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3);
 }
 
 function $1423($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $515($0_1, $1_1, $2_1);
 }
 
 function $1424($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $4_1 + 12 | 0, $3);
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1425($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = Math_fround(0), $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = Math_fround(0), $13 = 0, $14 = Math_fround(0), $15_1 = Math_fround(0), $16_1 = 0, $17_1 = Math_fround(0), $18_1 = Math_fround(0);
  $8 = global$0 - 32 | 0;
  global$0 = $8;
  HEAP32[$8 + 24 >> 2] = 0;
  HEAP32[$8 + 16 >> 2] = 0;
  HEAP32[$8 + 20 >> 2] = 0;
  HEAP32[$8 + 12 >> 2] = 53464;
  HEAP32[$8 + 28 >> 2] = $1_1;
  if (HEAP32[$1_1 >> 2] != 2) {
   $1506($8 + 12 | 0)
  }
  HEAP32[$8 + 12 >> 2] = 53312;
  $1_1 = HEAP32[HEAP32[$8 + 28 >> 2] >> 2] != 2 ? (HEAP8[$8 + 27 | 0] < 0 ? HEAP32[$8 + 16 >> 2] : $8 + 16 | 0) : 0;
  $10_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  HEAP8[$10_1 + 140 | 0] = 1;
  $5_1 = $2_1 ^ 1;
  $2_1 = HEAP32[$10_1 + 368 >> 2];
  label$1 : {
   if ($2_1) {
    if (($0_1 | 0) == HEAP32[$2_1 + 16 >> 2] & HEAP32[$2_1 + 4 >> 2] == ($5_1 | 0)) {
     break label$1
    }
    $553();
   }
   if (($0_1 | 0) == 1) {
    break label$1
   }
   $2_1 = 0;
   $9 = HEAP32[18392];
   $4_1 = HEAP32[$9 + 7080 >> 2];
   HEAP8[$4_1 + 140 | 0] = 1;
   $10_1 = $0_1;
   $266($1_1 ? 287454023 : $0_1 + 287454023 | 0);
   $6_1 = $76($4_1, $1_1 ? $1_1 : 4745);
   $269();
   $13 = global$0 - 128 | 0;
   global$0 = $13;
   $16_1 = HEAP32[$4_1 + 560 >> 2];
   $0_1 = ($16_1 | 0) > 0;
   label$10 : {
    if (($16_1 | 0) <= 0) {
     $2_1 = $0_1;
     break label$10;
    }
    $1_1 = HEAP32[$4_1 + 568 >> 2];
    if (($6_1 | 0) == HEAP32[$1_1 >> 2]) {
     $2_1 = $0_1;
     $0_1 = $1_1;
     break label$10;
    }
    $0_1 = $1_1;
    while (1) {
     $2_1 = $2_1 + 1 | 0;
     if (($16_1 | 0) != ($2_1 | 0)) {
      $0_1 = Math_imul($2_1, 124) + $1_1 | 0;
      if (HEAP32[$0_1 >> 2] != ($6_1 | 0)) {
       continue
      }
     }
     break;
    };
    $2_1 = ($2_1 | 0) < ($16_1 | 0);
   }
   if (!$2_1) {
    $1604($13 + 4 | 0, 0, 124);
    $11_1 = HEAP32[$4_1 + 564 >> 2];
    label$7 : {
     if (($11_1 | 0) != ($16_1 | 0)) {
      break label$7
     }
     $1_1 = $11_1 ? $11_1 + (($11_1 | 0) / 2 | 0) | 0 : 8;
     $0_1 = $16_1 + 1 | 0;
     $2_1 = ($0_1 | 0) < ($1_1 | 0) ? $1_1 : $0_1;
     if (($11_1 | 0) >= ($2_1 | 0)) {
      break label$7
     }
     $1_1 = $16(Math_imul($2_1, 124));
     $0_1 = HEAP32[$4_1 + 568 >> 2];
     if ($0_1) {
      $1602($1_1, $0_1, Math_imul(HEAP32[$4_1 + 560 >> 2], 124));
      $17(HEAP32[$4_1 + 568 >> 2]);
     }
     HEAP32[$4_1 + 564 >> 2] = $2_1;
     HEAP32[$4_1 + 568 >> 2] = $1_1;
    }
    $1602(HEAP32[$4_1 + 568 >> 2] + Math_imul(HEAP32[$4_1 + 560 >> 2], 124) | 0, $13 + 4 | 0, 124);
    HEAP32[$4_1 + 560 >> 2] = HEAP32[$4_1 + 560 >> 2] + 1;
    $374($13 + 108 | 0);
    $0_1 = HEAP32[$13 + 124 >> 2];
    if ($0_1) {
     $17($0_1)
    }
    $0_1 = HEAP32[$13 + 104 >> 2];
    if ($0_1) {
     $17($0_1)
    }
    $0_1 = (HEAP32[$4_1 + 568 >> 2] + Math_imul(HEAP32[$4_1 + 560 >> 2], 124) | 0) - 124 | 0;
    HEAP32[$0_1 >> 2] = $6_1;
   }
   global$0 = $13 + 128 | 0;
   $2_1 = $0_1;
   HEAP32[$0_1 + 16 >> 2] = $10_1;
   HEAP32[$0_1 + 12 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   HEAP32[$4_1 + 368 >> 2] = $0_1;
   $6_1 = $4_1 + 212 | 0;
   HEAPF32[$0_1 + 36 >> 2] = HEAPF32[$6_1 >> 2];
   HEAPF32[$0_1 + 40 >> 2] = HEAPF32[$4_1 + 232 >> 2];
   $5_1 = $4_1 + 504 | 0;
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   $0_1 = $0_1 + 52 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   $0_1 = HEAP32[$4_1 + 500 >> 2];
   HEAP32[$2_1 + 44 >> 2] = HEAP32[$4_1 + 496 >> 2];
   HEAP32[$2_1 + 48 >> 2] = $0_1;
   $5_1 = $4_1 + 488 | 0;
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   $0_1 = $2_1 + 84 | 0;
   HEAP32[$0_1 >> 2] = HEAP32[$5_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $1_1;
   $0_1 = HEAP32[$4_1 + 484 >> 2];
   HEAP32[$2_1 + 76 >> 2] = HEAP32[$4_1 + 480 >> 2];
   HEAP32[$2_1 + 80 >> 2] = $0_1;
   $1_1 = $4_1 + 472 | 0;
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$5_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$5_1 + 4 >> 2] = $0_1;
   $0_1 = HEAP32[$4_1 + 468 >> 2];
   HEAP32[$4_1 + 480 >> 2] = HEAP32[$4_1 + 464 >> 2];
   HEAP32[$4_1 + 484 >> 2] = $0_1;
   $17_1 = HEAPF32[$1_1 >> 2];
   $14 = HEAPF32[$4_1 + 72 >> 2];
   $18_1 = HEAPF32[$9 + 5492 >> 2];
   $15_1 = HEAPF32[$4_1 + 60 >> 2];
   $3 = Math_fround($18_1 - $15_1);
   $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
   $12_1 = Math_fround($3 + Math_fround(HEAPF32[$4_1 + 272 >> 2] - $18_1));
   HEAPF32[$2_1 + 20 >> 2] = $12_1;
   $7_1 = Math_fround(Math_fround($18_1 + $17_1) - $3);
   $3 = Math_fround($15_1 * Math_fround(.5));
   $3 = $3 >= $14 ? $3 : $14;
   label$101 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$3;
     break label$101;
    }
    $0_1 = -2147483648;
   }
   $3 = Math_fround($17_1 + Math_fround($0_1 | 0));
   $7_1 = Math_fround(($3 > $7_1 ? $7_1 : $3) - HEAPF32[$4_1 + 12 >> 2]);
   $3 = Math_fround($12_1 + Math_fround(1.0));
   HEAPF32[$2_1 + 24 >> 2] = $3 <= $7_1 ? $7_1 : $3;
   $3 = HEAPF32[$6_1 >> 2];
   HEAPF32[$2_1 + 28 >> 2] = $3;
   HEAPF32[$2_1 + 32 >> 2] = $3;
   $0_1 = HEAP32[$2_1 + 92 >> 2];
   $6_1 = $10_1 + 1 | 0;
   if (!(!$0_1 | ($0_1 | 0) == ($6_1 | 0))) {
    $1_1 = HEAP32[$2_1 + 96 >> 2];
    label$4 : {
     if (($1_1 | 0) >= 0) {
      break label$4
     }
     $0_1 = $1_1 + (($1_1 | 0) / 2 | 0) | 0;
     $5_1 = ($0_1 | 0) > 0 ? $0_1 : 0;
     if (($1_1 | 0) >= ($5_1 | 0)) {
      break label$4
     }
     $1_1 = $16(Math_imul($5_1, 28));
     $0_1 = HEAP32[$2_1 + 100 >> 2];
     if ($0_1) {
      $1602($1_1, $0_1, Math_imul(HEAP32[$2_1 + 92 >> 2], 28));
      $17(HEAP32[$2_1 + 100 >> 2]);
     }
     HEAP32[$2_1 + 96 >> 2] = $5_1;
     HEAP32[$2_1 + 100 >> 2] = $1_1;
    }
    HEAP32[$2_1 + 92 >> 2] = 0;
   }
   $0_1 = HEAP32[$2_1 + 92 >> 2];
   HEAP8[$2_1 + 8 | 0] = !$0_1;
   label$6 : {
    if ($0_1) {
     break label$6
    }
    if (($10_1 | 0) >= HEAP32[$2_1 + 96 >> 2]) {
     $1_1 = $16(Math_imul($6_1, 28));
     $0_1 = HEAP32[$2_1 + 100 >> 2];
     if ($0_1) {
      $1602($1_1, $0_1, Math_imul(HEAP32[$2_1 + 92 >> 2], 28));
      $17(HEAP32[$2_1 + 100 >> 2]);
     }
     HEAP32[$2_1 + 96 >> 2] = $6_1;
     HEAP32[$2_1 + 100 >> 2] = $1_1;
    }
    if (($10_1 | 0) < 0) {
     break label$6
    }
    $7_1 = Math_fround($10_1 | 0);
    $0_1 = 0;
    while (1) {
     $1_1 = $0_1;
     $3 = Math_fround(Math_fround($0_1 | 0) / $7_1);
     $0_1 = HEAP32[$2_1 + 92 >> 2];
     $9 = HEAP32[$2_1 + 96 >> 2];
     label$1012 : {
      if (($0_1 | 0) != ($9 | 0)) {
       break label$1012
      }
      $5_1 = $9 ? $9 + (($9 | 0) / 2 | 0) | 0 : 8;
      $0_1 = $0_1 + 1 | 0;
      $6_1 = ($0_1 | 0) < ($5_1 | 0) ? $5_1 : $0_1;
      if (($9 | 0) >= ($6_1 | 0)) {
       break label$1012
      }
      $5_1 = $16(Math_imul($6_1, 28));
      $0_1 = HEAP32[$2_1 + 100 >> 2];
      if ($0_1) {
       $1602($5_1, $0_1, Math_imul(HEAP32[$2_1 + 92 >> 2], 28));
       $17(HEAP32[$2_1 + 100 >> 2]);
      }
      HEAP32[$2_1 + 96 >> 2] = $6_1;
      HEAP32[$2_1 + 100 >> 2] = $5_1;
     }
     $5_1 = HEAP32[$2_1 + 100 >> 2] + Math_imul(HEAP32[$2_1 + 92 >> 2], 28) | 0;
     HEAP32[$5_1 + 4 >> 2] = 0;
     HEAP32[$5_1 + 8 >> 2] = 0;
     HEAPF32[$5_1 >> 2] = $3;
     $0_1 = $5_1 + 12 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     $0_1 = $5_1 + 20 | 0;
     HEAP32[$0_1 >> 2] = 0;
     HEAP32[$0_1 + 4 >> 2] = 0;
     HEAP32[$2_1 + 92 >> 2] = HEAP32[$2_1 + 92 >> 2] + 1;
     $0_1 = $1_1 + 1 | 0;
     if (($1_1 | 0) != ($10_1 | 0)) {
      continue
     }
     break;
    };
   }
   if (($10_1 | 0) > 0) {
    $0_1 = 0;
    while (1) {
     $5_1 = HEAP32[$2_1 + 100 >> 2];
     $1_1 = $0_1 + 1 | 0;
     $7_1 = HEAPF32[$4_1 + 12 >> 2];
     $6_1 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
     if ($6_1) {
      $3 = HEAPF32[$6_1 + 20 >> 2];
      $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 24 >> 2] - $3) * HEAPF32[HEAP32[$6_1 + 100 >> 2] + Math_imul($0_1, 28) >> 2]) + $3);
     } else {
      $3 = Math_fround(0.0)
     }
     $3 = Math_fround(Math_fround($7_1 + $3) + Math_fround(.5));
     label$18 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $9 = ~~$3;
       break label$18;
      }
      $9 = -2147483648;
     }
     $14 = Math_fround($9 | 0);
     if ($6_1) {
      $3 = HEAPF32[$6_1 + 20 >> 2];
      $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$6_1 + 24 >> 2] - $3) * HEAPF32[HEAP32[$6_1 + 100 >> 2] + Math_imul($1_1, 28) >> 2]) + $3);
     } else {
      $3 = Math_fround(0.0)
     }
     $11_1 = $5_1 + Math_imul($0_1, 28) | 0;
     HEAPF32[$11_1 + 12 >> 2] = $14;
     $9 = $11_1 + 24 | 0;
     HEAP32[$9 >> 2] = 2139095039;
     $6_1 = $11_1 + 16 | 0;
     HEAP32[$6_1 >> 2] = -8388609;
     $5_1 = $11_1 + 20 | 0;
     $3 = Math_fround(Math_fround(Math_fround($7_1 + $3) + Math_fround(-1.0)) + Math_fround(.5));
     label$22 : {
      if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
       $0_1 = ~~$3;
       break label$22;
      }
      $0_1 = -2147483648;
     }
     $15_1 = Math_fround($0_1 | 0);
     HEAPF32[$5_1 >> 2] = $15_1;
     $12_1 = HEAPF32[$4_1 + 500 >> 2];
     $17_1 = HEAPF32[$4_1 + 508 >> 2];
     $7_1 = HEAPF32[$4_1 + 496 >> 2];
     $3 = HEAPF32[$4_1 + 504 >> 2];
     HEAPF32[$11_1 + 12 >> 2] = $7_1 > $14 ? $7_1 : $3 < $14 ? $3 : $14;
     $3 = $17_1;
     HEAPF32[$6_1 >> 2] = $12_1 > Math_fround(-3402823466385288598117041.0e14) ? $12_1 : $3 < Math_fround(-3402823466385288598117041.0e14) ? $3 : Math_fround(-3402823466385288598117041.0e14);
     $12_1 = HEAPF32[$4_1 + 500 >> 2];
     $17_1 = HEAPF32[$4_1 + 508 >> 2];
     $7_1 = HEAPF32[$4_1 + 496 >> 2];
     $3 = HEAPF32[$4_1 + 504 >> 2];
     HEAPF32[$5_1 >> 2] = $7_1 > $15_1 ? $7_1 : $3 < $15_1 ? $3 : $15_1;
     $3 = $17_1;
     HEAPF32[$9 >> 2] = $12_1 > Math_fround(3402823466385288598117041.0e14) ? $12_1 : $3 < Math_fround(3402823466385288598117041.0e14) ? $3 : Math_fround(3402823466385288598117041.0e14);
     $0_1 = $1_1;
     if (($10_1 | 0) != ($0_1 | 0)) {
      continue
     }
     break;
    };
   }
   $1_1 = HEAP32[$2_1 + 16 >> 2];
   if (($1_1 | 0) > 1) {
    $0_1 = $2_1 + 104 | 0;
    $420($0_1, $1_1 + 1 | 0);
    $422($0_1, HEAP32[$4_1 + 580 >> 2], 1);
    $0_1 = HEAP32[HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2] + 100 >> 2];
    $158($0_1 + 12 | 0, $0_1 + 20 | 0, 0);
   }
   $0_1 = HEAP32[$2_1 + 12 >> 2];
   $1_1 = HEAP32[HEAP32[HEAP32[18392] + 7080 >> 2] + 368 >> 2];
   if ($1_1) {
    $3 = HEAPF32[$1_1 + 20 >> 2];
    $7_1 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 24 >> 2] - $3) * HEAPF32[HEAP32[$1_1 + 100 >> 2] + Math_imul(($0_1 | 0) < 0 ? HEAP32[$1_1 + 12 >> 2] : $0_1, 28) >> 2]) + $3);
   } else {
    $7_1 = Math_fround(0.0)
   }
   $3 = Math_fround(0.0);
   if ($1_1) {
    $3 = HEAPF32[$1_1 + 20 >> 2];
    $3 = Math_fround(Math_fround(Math_fround(HEAPF32[$1_1 + 24 >> 2] - $3) * HEAPF32[HEAP32[$1_1 + 100 >> 2] + Math_imul(($0_1 | 0) > -2 ? $0_1 + 1 | 0 : HEAP32[$1_1 + 12 >> 2], 28) >> 2]) + $3);
   }
   $289(Math_fround(Math_fround($3 - $7_1) * Math_fround(.6499999761581421)));
   $7_1 = HEAPF32[$4_1 + 12 >> 2];
   HEAPF32[$4_1 + 472 >> 2] = Math_fround($3 + $7_1) - $18_1;
   $3 = Math_fround($18_1 - HEAPF32[$4_1 + 60 >> 2]);
   $3 = $3 >= Math_fround(0.0) ? $3 : Math_fround(0.0);
   HEAPF32[$4_1 + 276 >> 2] = $3;
   $3 = Math_fround($3 + Math_fround($7_1 + HEAPF32[$4_1 + 272 >> 2]));
   label$30 : {
    if (Math_fround(Math_abs($3)) < Math_fround(2147483648.0)) {
     $0_1 = ~~$3;
     break label$30;
    }
    $0_1 = -2147483648;
   }
   HEAPF32[$4_1 + 208 >> 2] = $0_1 | 0;
  }
  HEAP32[$8 + 12 >> 2] = 53464;
  if (HEAP8[$8 + 27 | 0] < 0) {
   $1756(HEAP32[$8 + 16 >> 2])
  }
  global$0 = $8 + 32 | 0;
 }
 
 function $1426($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return Math_fround(Math_fround(FUNCTION_TABLE[$0_1 | 0]($1_1)));
 }
 
 function $1427($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = Math_fround(0), $9 = 0, $10_1 = 0, $11_1 = Math_fround(0), $12_1 = Math_fround(0), $13 = 0, $14 = 0, $15_1 = Math_fround(0), $16_1 = Math_fround(0);
  $3 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $0_1 = 0;
  $10_1 = global$0 - 16 | 0;
  global$0 = $10_1;
  $5_1 = HEAP32[18392];
  $6_1 = HEAP32[$5_1 + 7080 >> 2];
  if (!HEAPU8[$6_1 + 143 | 0]) {
   $13 = $76($6_1, $3);
   $0_1 = $35($5_1 + 8128 | 0, $13);
   $3 = HEAP32[$0_1 >> 2];
   label$2 : {
    if (($3 | 0) != -1) {
     $0_1 = HEAP32[$5_1 + 8124 >> 2] + Math_imul($3, 144) | 0;
     break label$2;
    }
    HEAP32[$0_1 >> 2] = HEAP32[$5_1 + 8140 >> 2];
    $0_1 = $5_1 + 8116 | 0;
    $7_1 = HEAP32[$0_1 + 24 >> 2];
    $4_1 = HEAP32[$0_1 >> 2];
    label$1 : {
     if (($7_1 | 0) == ($4_1 | 0)) {
      $2_1 = $4_1 + 1 | 0;
      $3 = HEAP32[$0_1 + 4 >> 2];
      label$3 : {
       if (($4_1 | 0) < ($3 | 0)) {
        break label$3
       }
       $4_1 = $3 ? $3 + (($3 | 0) / 2 | 0) | 0 : 8;
       $4_1 = ($2_1 | 0) < ($4_1 | 0) ? $4_1 : $2_1;
       if (($3 | 0) >= ($4_1 | 0)) {
        break label$3
       }
       $3 = $16(Math_imul($4_1, 144));
       $9 = HEAP32[$0_1 + 8 >> 2];
       if ($9) {
        $1602($3, $9, Math_imul(HEAP32[$0_1 >> 2], 144));
        $17(HEAP32[$0_1 + 8 >> 2]);
       }
       HEAP32[$0_1 + 4 >> 2] = $4_1;
       HEAP32[$0_1 + 8 >> 2] = $3;
      }
      HEAP32[$0_1 >> 2] = $2_1;
      $9 = HEAP32[$0_1 + 24 >> 2] + 1 | 0;
      break label$1;
     }
     $9 = HEAP32[HEAP32[$0_1 + 8 >> 2] + Math_imul($7_1, 144) >> 2];
    }
    HEAP32[$0_1 + 24 >> 2] = $9;
    $2_1 = Math_imul($7_1, 144);
    $3 = $1604($2_1 + HEAP32[$0_1 + 8 >> 2] | 0, 0, 144);
    HEAP16[$3 + 108 >> 1] = 65535;
    HEAP32[$3 + 32 >> 2] = -1;
    HEAP32[$3 + 36 >> 2] = -1;
    HEAP32[$0_1 + 28 >> 2] = HEAP32[$0_1 + 28 >> 2] + 1;
    $0_1 = $2_1 + HEAP32[$0_1 + 8 >> 2] | 0;
   }
   $11_1 = HEAPF32[$6_1 + 472 >> 2];
   $8 = HEAPF32[$6_1 + 208 >> 2];
   $12_1 = HEAPF32[$5_1 + 5480 >> 2];
   $15_1 = Math_fround($12_1 + $12_1);
   $12_1 = HEAPF32[$6_1 + 212 >> 2];
   HEAPF32[$10_1 + 12 >> 2] = $15_1 + Math_fround($12_1 + HEAPF32[$5_1 + 6468 >> 2]);
   HEAPF32[$10_1 + 8 >> 2] = $11_1;
   HEAPF32[$10_1 + 4 >> 2] = $12_1;
   HEAPF32[$10_1 >> 2] = $8;
   HEAP32[$0_1 + 16 >> 2] = $13;
   $3 = $1_1 | 2097152;
   $6_1 = global$0 - 16 | 0;
   global$0 = $6_1;
   $1_1 = HEAP32[18392];
   $5_1 = HEAP32[$1_1 + 7080 >> 2];
   $13 = HEAPU8[$5_1 + 143 | 0];
   label$10 : {
    if ($13) {
     break label$10
    }
    if (!($3 & 1048576)) {
     $267(HEAP32[$0_1 + 16 >> 2])
    }
    $4_1 = HEAP32[18392];
    $2_1 = HEAP32[$4_1 + 8124 >> 2];
    label$31 : {
     if ($0_1 >>> 0 < $2_1 >>> 0) {
      $7_1 = -1;
      $9 = $0_1;
      break label$31;
     }
     $7_1 = -1;
     $9 = $0_1;
     if ($2_1 + Math_imul(HEAP32[$4_1 + 8116 >> 2], 144) >>> 0 <= $0_1 >>> 0) {
      break label$31
     }
     $7_1 = ($0_1 - $2_1 | 0) / 144 | 0;
     $9 = 0;
    }
    $4_1 = HEAP32[$1_1 + 8148 >> 2];
    $2_1 = HEAP32[$1_1 + 8152 >> 2];
    label$5 : {
     if (($4_1 | 0) != ($2_1 | 0)) {
      break label$5
     }
     $14 = $2_1 ? $2_1 + (($2_1 | 0) / 2 | 0) | 0 : 8;
     $4_1 = $4_1 + 1 | 0;
     $4_1 = ($4_1 | 0) < ($14 | 0) ? $14 : $4_1;
     if (($2_1 | 0) >= ($4_1 | 0)) {
      break label$5
     }
     $2_1 = $16($4_1 << 3);
     $14 = HEAP32[$1_1 + 8156 >> 2];
     if ($14) {
      $1602($2_1, $14, HEAP32[$1_1 + 8148 >> 2] << 3);
      $17(HEAP32[$1_1 + 8156 >> 2]);
     }
     HEAP32[$1_1 + 8152 >> 2] = $4_1;
     HEAP32[$1_1 + 8156 >> 2] = $2_1;
    }
    $2_1 = HEAP32[$1_1 + 8156 >> 2] + (HEAP32[$1_1 + 8148 >> 2] << 3) | 0;
    HEAP32[$2_1 + 4 >> 2] = $7_1;
    HEAP32[$2_1 >> 2] = $9;
    HEAP32[$1_1 + 8112 >> 2] = $0_1;
    HEAP32[$1_1 + 8148 >> 2] = HEAP32[$1_1 + 8148 >> 2] + 1;
    $2_1 = HEAP32[$5_1 + 212 >> 2];
    HEAP32[$0_1 + 124 >> 2] = HEAP32[$5_1 + 208 >> 2];
    HEAP32[$0_1 + 128 >> 2] = $2_1;
    if (HEAP32[$0_1 + 32 >> 2] == HEAP32[$1_1 + 6984 >> 2]) {
     $11_1 = HEAPF32[$0_1 + 52 >> 2];
     $8 = HEAPF32[$0_1 + 112 >> 2];
     HEAP32[$5_1 + 208 >> 2] = HEAP32[$0_1 + 40 >> 2];
     HEAPF32[$5_1 + 212 >> 2] = $11_1 + $8;
     HEAP8[$0_1 + 102 | 0] = HEAPU8[$0_1 + 102 | 0] + 1;
     break label$10;
    }
    $2_1 = $3 & 1;
    label$102 : {
     if (($2_1 | 0) == (HEAP32[$0_1 + 12 >> 2] & 1) & (!HEAPU8[$0_1 + 105 | 0] | $2_1)) {
      break label$102
     }
     $2_1 = HEAP32[$0_1 >> 2];
     if ($2_1 >>> 0 < 2) {
      break label$102
     }
     $1685(HEAP32[$0_1 + 8 >> 2], $2_1, 40, 22);
    }
    HEAP8[$0_1 + 105 | 0] = 0;
    $2_1 = $3 & 192 ? $3 : $3 | 64;
    HEAP32[$0_1 + 12 >> 2] = $2_1;
    $3 = HEAP32[$10_1 + 4 >> 2];
    HEAP32[$0_1 + 40 >> 2] = HEAP32[$10_1 >> 2];
    HEAP32[$0_1 + 44 >> 2] = $3;
    $7_1 = $10_1 + 8 | 0;
    $4_1 = HEAP32[$7_1 + 4 >> 2];
    $3 = $0_1 + 48 | 0;
    HEAP32[$3 >> 2] = HEAP32[$7_1 >> 2];
    HEAP32[$3 + 4 >> 2] = $4_1;
    HEAP8[$0_1 + 103 | 0] = 1;
    HEAP32[$0_1 + 36 >> 2] = HEAP32[$0_1 + 32 >> 2];
    $7_1 = HEAP32[$1_1 + 6984 >> 2];
    HEAPF32[$0_1 + 60 >> 2] = HEAPF32[$0_1 + 56 >> 2];
    HEAP32[$0_1 + 32 >> 2] = $7_1;
    HEAP32[$0_1 + 56 >> 2] = 0;
    $11_1 = HEAPF32[$1_1 + 5496 >> 2];
    HEAPF32[$0_1 + 112 >> 2] = $11_1;
    $1_1 = $1_1 + 5476 | 0;
    $7_1 = HEAP32[$1_1 >> 2];
    $1_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP16[$0_1 + 106 >> 1] = 0;
    HEAP32[$0_1 + 116 >> 2] = $7_1;
    HEAP32[$0_1 + 120 >> 2] = $1_1;
    HEAP8[$0_1 + 102 | 0] = 1;
    $1_1 = $0_1 + 52 | 0;
    $8 = HEAPF32[$1_1 >> 2];
    HEAP32[$5_1 + 208 >> 2] = HEAP32[$0_1 + 40 >> 2];
    HEAPF32[$5_1 + 212 >> 2] = $11_1 + $8;
    $2_1 = $51($2_1 & 2097152 ? 35 : 37, Math_fround(1.0));
    $11_1 = HEAPF32[$3 >> 2];
    $3 = HEAP32[$5_1 + 580 >> 2];
    $8 = HEAPF32[$0_1 + 40 >> 2];
    $12_1 = HEAPF32[$5_1 + 60 >> 2];
    $16_1 = Math_fround(HEAPF32[$1_1 >> 2] + Math_fround(-1.0));
    HEAPF32[$6_1 + 12 >> 2] = $16_1;
    $15_1 = $8;
    $8 = Math_fround($12_1 * Math_fround(.5));
    label$12 : {
     if (Math_fround(Math_abs($8)) < Math_fround(2147483648.0)) {
      $0_1 = ~~$8;
      break label$12;
     }
     $0_1 = -2147483648;
    }
    $8 = Math_fround($0_1 | 0);
    HEAPF32[$6_1 + 8 >> 2] = $15_1 - $8;
    HEAPF32[$6_1 + 4 >> 2] = $16_1;
    HEAPF32[$6_1 >> 2] = $11_1 + $8;
    $399($3, $6_1 + 8 | 0, $6_1, $2_1, Math_fround(1.0));
   }
   global$0 = $6_1 + 16 | 0;
   $0_1 = !$13;
  }
  global$0 = $10_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1428($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  $5_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $0_1 = $1488($4_1 + 12 | 0, $1_1);
  $6_1 = HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2] != 2 ? $0_1 + 4 | 0 : 0;
  $1_1 = HEAP32[18392];
  $3 = 0;
  __inlined_func$755 : {
   if (HEAPU8[HEAP32[$1_1 + 7080 >> 2] + 143 | 0]) {
    break __inlined_func$755
   }
   $1_1 = HEAP32[$1_1 + 8112 >> 2];
   if ($1_1) {
    $3 = $756($1_1, $5_1, $6_1, $2_1);
    if (!(!$3 | $2_1 & 8)) {
     $267(HEAP32[HEAP32[$1_1 + 8 >> 2] + Math_imul(HEAP16[$1_1 + 108 >> 1], 40) >> 2])
    }
   }
  }
  $1_1 = $3;
  HEAP32[$0_1 >> 2] = 52584;
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  if (HEAP32[$2_1 >> 2] != 2) {
   HEAP32[$4_1 + 24 >> 2] = HEAPU8[$0_1 + 4 | 0];
   $3 = $4_1 + 24 | 0;
   $0_1 = fimport$1(72652, $3 | 0) | 0;
   $2_1 = HEAP32[$2_1 >> 2];
   HEAP32[$4_1 + 24 >> 2] = 0;
   $5_1 = $2_1;
   $2_1 = fimport$1(72760, $3 | 0) | 0;
   fimport$3($5_1 | 0, $2_1 | 0, $0_1 | 0);
   fimport$4($2_1 | 0);
   fimport$4($0_1 | 0);
  }
  global$0 = $4_1 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1429($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $0_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $2_1 = HEAP32[18392];
  $3 = 0;
  __inlined_func$760 : {
   if (HEAPU8[HEAP32[$2_1 + 7080 >> 2] + 143 | 0]) {
    break __inlined_func$760
   }
   $2_1 = HEAP32[$2_1 + 8112 >> 2];
   if ($2_1) {
    $3 = $756($2_1, $0_1, 0, $1_1 | 2097184)
   } else {
    $3 = 0
   }
  }
  return $3 | 0;
 }
 
 function $1430($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $1_1 = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $3 = HEAP32[18392];
  $0_1 = HEAP32[$3 + 8112 >> 2];
  label$1 : {
   if (!$0_1 | HEAPU8[$0_1 + 14 | 0] & 16) {
    break label$1
   }
   $5_1 = $76(HEAP32[$3 + 7080 >> 2], $1_1);
   label$2 : {
    if ($5_1) {
     $2_1 = HEAP32[$0_1 >> 2];
     label$4 : {
      if (($2_1 | 0) <= 0) {
       $1_1 = ($2_1 | 0) > 0;
       break label$4;
      }
      $1_1 = HEAP32[$0_1 + 8 >> 2];
      if (($5_1 | 0) == HEAP32[$1_1 >> 2]) {
       $0_1 = $1_1;
       $1_1 = 1;
       break label$4;
      }
      $3 = (Math_imul($2_1, 40) + $1_1 | 0) - 40 | 0;
      while (1) {
       label$7 : {
        $4_1 = $4_1 + 1 | 0;
        if (($2_1 | 0) == ($4_1 | 0)) {
         $0_1 = $3;
         break label$7;
        }
        $0_1 = Math_imul($4_1, 40) + $1_1 | 0;
        if (HEAP32[$0_1 >> 2] != ($5_1 | 0)) {
         continue
        }
       }
       break;
      };
      $1_1 = ($2_1 | 0) > ($4_1 | 0);
     }
     if ($1_1) {
      break label$2
     }
    }
    $0_1 = 0;
   }
   if (!$0_1) {
    break label$1
   }
   HEAP8[$0_1 + 36 | 0] = 1;
  }
 }
 
 function $1431($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 53464;
  HEAP32[$2_1 + 28 >> 2] = $1_1;
  if (HEAP32[$1_1 >> 2] != 2) {
   $1506($2_1 + 12 | 0)
  }
  HEAP32[$2_1 + 12 >> 2] = 53312;
  $1_1 = HEAP32[HEAP32[$2_1 + 28 >> 2] >> 2] != 2 ? (HEAP8[$2_1 + 27 | 0] < 0 ? HEAP32[$2_1 + 16 >> 2] : $2_1 + 16 | 0) : 0;
  $3 = HEAP32[18392];
  label$1 : {
   if (HEAPU8[$3 + 12196 | 0]) {
    break label$1
   }
   $1_1 = $1_1 ? $1_1 : HEAP32[$3 + 36 >> 2];
   if (!$1_1 | !HEAPU8[$1_1 | 0]) {
    break label$1
   }
   $4_1 = $1622($1_1, 13565);
   if (!$4_1) {
    break label$1
   }
   $1_1 = HEAP32[18392];
   HEAP32[$1_1 + 12200 >> 2] = 2;
   HEAP8[$1_1 + 12196 | 0] = 1;
   HEAP32[$1_1 + 12220 >> 2] = 0;
   HEAP32[$1_1 + 12224 >> 2] = 0;
   HEAP32[$1_1 + 12236 >> 2] = HEAP32[HEAP32[$1_1 + 7080 >> 2] + 344 >> 2];
   $0_1 = ($0_1 | 0) < 0 ? HEAP32[$1_1 + 12244 >> 2] : $0_1;
   HEAP8[$1_1 + 12232 | 0] = 1;
   HEAP32[$1_1 + 12228 >> 2] = 2139095039;
   HEAP32[$1_1 + 12240 >> 2] = $0_1;
   HEAP32[$3 + 12204 >> 2] = $4_1;
  }
  HEAP32[$2_1 + 12 >> 2] = 53464;
  if (HEAP8[$2_1 + 27 | 0] < 0) {
   $1756(HEAP32[$2_1 + 16 >> 2])
  }
  global$0 = $2_1 + 32 | 0;
 }
 
 function $1432($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1;
  $65(5950, $1_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1434($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  return $336(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, 0, 0, $3) | 0;
 }
 
 function $1435($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return ($338(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, $1_1) | 0) != 0 | 0;
 }
 
 function $1436($0_1) {
  $0_1 = $0_1 | 0;
  HEAP32[$0_1 >> 2] = 2;
 }
 
 function $1437($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $2_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  FUNCTION_TABLE[$0_1 | 0]($4_1 + 12 | 0, $4_1 + 8 | 0, $3);
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1438($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  $0_1 = $763($0_1, $3 + 8 | 0);
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $158($0_1, $763($1_1, $3), $2_1);
  global$0 = $3 + 16 | 0;
 }
 
 function $1439($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $2_1 + 8 | 0;
  $204($3);
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1440($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $2_1 + 8 | 0;
  $205($3);
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1441($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0), $6_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = HEAP32[18392];
  $5_1 = HEAPF32[$3 + 7252 >> 2];
  $6_1 = HEAPF32[$3 + 7260 >> 2];
  $4_1 = $2_1 + 8 | 0;
  HEAPF32[$4_1 + 4 >> 2] = HEAPF32[$3 + 7264 >> 2] - HEAPF32[$3 + 7256 >> 2];
  HEAPF32[$4_1 >> 2] = $6_1 - $5_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $4_1, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1442($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $221();
  HEAP32[$0_1 >> 2] = fimport$1(52088, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1444($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = Math_fround(0);
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $3 = $763($0_1, $2_1 + 8 | 0);
  $0_1 = HEAP32[HEAP32[18392] + 7080 >> 2];
  $4_1 = $0_1 + 212 | 0;
  $1_1 = 0;
  __inlined_func$272 : {
   if (!(HEAPF32[$4_1 >> 2] < HEAPF32[$0_1 + 508 >> 2])) {
    break __inlined_func$272
   }
   $1_1 = 0;
   if (!(HEAPF32[$0_1 + 500 >> 2] < Math_fround(HEAPF32[$4_1 >> 2] + HEAPF32[$3 + 4 >> 2]))) {
    break __inlined_func$272
   }
   $5_1 = HEAPF32[$0_1 + 208 >> 2];
   if ($5_1 < HEAPF32[$0_1 + 504 >> 2]) {
    $1_1 = HEAPF32[$0_1 + 496 >> 2] < Math_fround($5_1 + HEAPF32[$3 >> 2])
   } else {
    $1_1 = 0
   }
  }
  $0_1 = $1_1;
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1445($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $2_1;
  HEAP32[$3 + 12 >> 2] = $1_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $3 + 8 | 0) | 0;
  fimport$4(HEAP32[$3 + 8 >> 2]);
  fimport$4(HEAP32[$3 + 12 >> 2]);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1446($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = 0;
  HEAP32[$2_1 + 12 >> 2] = 0;
  $0_1 = $763($0_1, $2_1 + 8 | 0);
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  $0_1 = $273($0_1, $763($1_1, $2_1));
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1447($0_1) {
  $0_1 = $0_1 | 0;
  return +FUNCTION_TABLE[$0_1 | 0]();
 }
 
 function $1448($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $92(HEAP32[HEAP32[HEAP32[18392] + 7504 >> 2] >> 2], 0, 11755);
  HEAP32[$0_1 >> 2] = fimport$1(49796, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1449($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = $94();
  HEAP32[$0_1 >> 2] = fimport$1(49796, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1450($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 8 >> 2] = HEAP32[18392] + 6476;
  HEAP32[$0_1 >> 2] = fimport$1(55976, $1_1 + 8 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1451($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = $1_1 >>> 0 > 52 ? 7130 : HEAP32[($1_1 << 2) + 21212 >> 2];
  $2_1 = $1697($3);
  if ($2_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($2_1 >>> 0 <= 10) {
     HEAP8[$0_1 + 11 | 0] = $2_1;
     break label$2;
    }
    $4_1 = ($2_1 | 15) + 1 | 0;
    $1_1 = $1782($4_1);
    HEAP32[$0_1 + 8 >> 2] = $4_1 | -2147483648;
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    $0_1 = $1_1;
   }
   if ($2_1) {
    $1603($0_1, $3, $2_1)
   }
   HEAP8[$0_1 + $2_1 | 0] = 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1452($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  HEAP32[$0_1 >> 2] = 2202;
  $1675(19180, $0_1);
  global$0 = $0_1 + 16 | 0;
 }
 
 function $1453($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 >> 2] = 2383;
  $1675(19180, $1_1);
  HEAP32[$0_1 >> 2] = 2;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1454($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $2_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($4_1 + 12 | 0, $4_1 + 8 | 0, $3) | 0;
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1455($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0.0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $4_1 = +fimport$5(HEAP32[$0_1 >> 2], 72736, $3 + 12 | 0);
  fimport$6(HEAP32[$3 + 12 >> 2]);
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  if ($4_1 < 4294967296.0 & $4_1 >= 0.0) {
   $0_1 = ~~$4_1 >>> 0
  } else {
   $0_1 = 0
  }
  $0_1 = $216($0_1, $763($1_1, $3 + 4 | 0), $2_1);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1456($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $6_1 = HEAP32[$1_1 >> 2];
  if ($6_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($6_1 >>> 0 <= 10) {
     HEAP8[$5_1 + 27 | 0] = $6_1;
     $7_1 = $5_1 + 16 | 0;
     break label$2;
    }
    $8 = ($6_1 | 15) + 1 | 0;
    $7_1 = $1782($8);
    HEAP32[$5_1 + 24 >> 2] = $8 | -2147483648;
    HEAP32[$5_1 + 16 >> 2] = $7_1;
    HEAP32[$5_1 + 20 >> 2] = $6_1;
   }
   if ($6_1) {
    $1602($7_1, $1_1 + 4 | 0, $6_1)
   }
   HEAP8[$6_1 + $7_1 | 0] = 0;
   HEAP32[$5_1 + 12 >> 2] = $4_1;
   FUNCTION_TABLE[$0_1 | 0]($5_1 + 28 | 0, $5_1 + 16 | 0, $2_1, $3, $5_1 + 12 | 0);
   fimport$10(HEAP32[$5_1 + 28 >> 2]);
   $0_1 = HEAP32[$5_1 + 28 >> 2];
   fimport$4($0_1 | 0);
   fimport$4(HEAP32[$5_1 + 12 >> 2]);
   if (HEAP8[$5_1 + 27 | 0] < 0) {
    $1756(HEAP32[$5_1 + 16 >> 2])
   }
   global$0 = $5_1 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1457($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $6_1 = $5_1 + 8 | 0;
  $68($6_1, HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1, 0, $2_1, $3);
  $1_1 = HEAP32[$4_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $6_1, $5_1 + 4 | 0);
  fimport$4(HEAP32[$5_1 + 4 >> 2]);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1458($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = $2_1;
  FUNCTION_TABLE[$0_1 | 0]($3 + 12 | 0, $1_1, $3 + 8 | 0);
  fimport$10(HEAP32[$3 + 12 >> 2]);
  $0_1 = HEAP32[$3 + 12 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$3 + 8 >> 2]);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1459($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  $3 = $5_1 + 16 | 0;
  HEAPF32[$3 + 12 >> 2] = Math_fround($1_1 >>> 24 >>> 0) * Math_fround(.003921568859368563);
  HEAPF32[$3 >> 2] = Math_fround(($1_1 & 255) >>> 0) * Math_fround(.003921568859368563);
  HEAPF32[$3 + 8 >> 2] = Math_fround(($1_1 >>> 16 & 255) >>> 0) * Math_fround(.003921568859368563);
  HEAPF32[$3 + 4 >> 2] = Math_fround(($1_1 >>> 8 & 255) >>> 0) * Math_fround(.003921568859368563);
  $1_1 = HEAP32[$2_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$3 >> 2];
  $2_1 = fimport$1(72796, $4_1 + 8 | 0) | 0;
  $6_1 = $5_1 + 12 | 0;
  $7_1 = HEAP32[$6_1 >> 2];
  $1_1 = fimport$2(1643) | 0;
  fimport$3($7_1 | 0, $1_1 | 0, $2_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($2_1 | 0);
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$3 + 4 >> 2];
  $2_1 = fimport$1(72796, $4_1 + 8 | 0) | 0;
  $7_1 = HEAP32[$6_1 >> 2];
  $1_1 = fimport$2(1245) | 0;
  fimport$3($7_1 | 0, $1_1 | 0, $2_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($2_1 | 0);
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$3 + 8 >> 2];
  $2_1 = fimport$1(72796, $4_1 + 8 | 0) | 0;
  $7_1 = HEAP32[$6_1 >> 2];
  $1_1 = fimport$2(1063) | 0;
  fimport$3($7_1 | 0, $1_1 | 0, $2_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($2_1 | 0);
  HEAPF32[$4_1 + 8 >> 2] = HEAPF32[$3 + 12 >> 2];
  $2_1 = fimport$1(72796, $4_1 + 8 | 0) | 0;
  $3 = HEAP32[$6_1 >> 2];
  $1_1 = fimport$2(1857) | 0;
  fimport$3($3 | 0, $1_1 | 0, $2_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($2_1 | 0);
  HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  global$0 = $4_1 + 16 | 0;
  fimport$4(HEAP32[$5_1 + 12 >> 2]);
  global$0 = $5_1 + 32 | 0;
 }
 
 function $1460($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = $1_1 + 8 | 0;
  HEAP32[$2_1 >> 2] = 0;
  HEAP32[$2_1 + 4 >> 2] = 0;
  HEAP32[$1_1 >> 2] = 0;
  HEAP32[$1_1 + 4 >> 2] = 0;
  $0_1 = $31($768($0_1, $1_1));
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1461($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3 = Math_fround($3);
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 + 8 >> 2] = $5_1;
  HEAP32[$7_1 + 12 >> 2] = $4_1;
  HEAP32[$7_1 + 4 >> 2] = $6_1;
  FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3, $7_1 + 12 | 0, $7_1 + 8 | 0, $7_1 + 4 | 0);
  fimport$4(HEAP32[$7_1 + 4 >> 2]);
  fimport$4(HEAP32[$7_1 + 8 >> 2]);
  fimport$4(HEAP32[$7_1 + 12 >> 2]);
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1462($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 36 >> 2] = $3;
  HEAP32[$6_1 + 28 >> 2] = 53576;
  $3 = $6_1 + 28 | 0;
  $1508($3);
  HEAP32[$6_1 + 24 >> 2] = $4_1;
  HEAP32[$6_1 + 16 >> 2] = 53576;
  $7_1 = $6_1 + 16 | 0;
  $1508($7_1);
  HEAP32[$6_1 + 8 >> 2] = $5_1;
  HEAP32[$6_1 >> 2] = 53576;
  $1508($6_1);
  $32($0_1, $1_1, $2_1, $3 + 4 | 0, $7_1 + 4 | 0, $6_1 + 4 | 0);
  HEAP32[$6_1 >> 2] = 53576;
  $4_1 = HEAP32[$6_1 + 8 >> 2];
  HEAPF32[$6_1 + 40 >> 2] = HEAPF32[$6_1 + 4 >> 2];
  $5_1 = $6_1 + 40 | 0;
  $3 = fimport$1(72796, $5_1 | 0) | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 40 >> 2] = 0;
  $8 = $4_1;
  $4_1 = fimport$1(72760, $5_1 | 0) | 0;
  fimport$3($8 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  HEAP32[$6_1 + 16 >> 2] = 53576;
  $4_1 = HEAP32[$6_1 + 24 >> 2];
  HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 + 20 >> 2];
  $3 = fimport$1(72796, $6_1 | 0) | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $5_1 = $4_1;
  $4_1 = fimport$1(72760, $6_1 | 0) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  HEAP32[$6_1 + 28 >> 2] = 53576;
  $4_1 = HEAP32[$6_1 + 36 >> 2];
  HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 32 >> 2];
  $3 = fimport$1(72796, $7_1 | 0) | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 16 >> 2] = 0;
  $5_1 = $4_1;
  $4_1 = fimport$1(72760, $7_1 | 0) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  global$0 = $6_1 + 48 | 0;
 }
 
 function $1463($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = Math_fround($0_1);
  $1_1 = Math_fround($1_1);
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[$6_1 + 36 >> 2] = $3;
  HEAP32[$6_1 + 28 >> 2] = 53576;
  $3 = $6_1 + 28 | 0;
  $1508($3);
  HEAP32[$6_1 + 24 >> 2] = $4_1;
  HEAP32[$6_1 + 16 >> 2] = 53576;
  $7_1 = $6_1 + 16 | 0;
  $1508($7_1);
  HEAP32[$6_1 + 8 >> 2] = $5_1;
  HEAP32[$6_1 >> 2] = 53576;
  $1508($6_1);
  $33($0_1, $1_1, $2_1, $3 + 4 | 0, $7_1 + 4 | 0, $6_1 + 4 | 0);
  HEAP32[$6_1 >> 2] = 53576;
  $4_1 = HEAP32[$6_1 + 8 >> 2];
  HEAPF32[$6_1 + 40 >> 2] = HEAPF32[$6_1 + 4 >> 2];
  $5_1 = $6_1 + 40 | 0;
  $3 = fimport$1(72796, $5_1 | 0) | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 40 >> 2] = 0;
  $8 = $4_1;
  $4_1 = fimport$1(72760, $5_1 | 0) | 0;
  fimport$3($8 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  HEAP32[$6_1 + 16 >> 2] = 53576;
  $4_1 = HEAP32[$6_1 + 24 >> 2];
  HEAPF32[$6_1 >> 2] = HEAPF32[$6_1 + 20 >> 2];
  $3 = fimport$1(72796, $6_1 | 0) | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 >> 2] = 0;
  $5_1 = $4_1;
  $4_1 = fimport$1(72760, $6_1 | 0) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  HEAP32[$6_1 + 28 >> 2] = 53576;
  $4_1 = HEAP32[$6_1 + 36 >> 2];
  HEAPF32[$6_1 + 16 >> 2] = HEAPF32[$6_1 + 32 >> 2];
  $3 = fimport$1(72796, $7_1 | 0) | 0;
  $4_1 = HEAP32[$4_1 >> 2];
  HEAP32[$6_1 + 16 >> 2] = 0;
  $5_1 = $4_1;
  $4_1 = fimport$1(72760, $7_1 | 0) | 0;
  fimport$3($5_1 | 0, $4_1 | 0, $3 | 0);
  fimport$4($4_1 | 0);
  fimport$4($3 | 0);
  global$0 = $6_1 + 48 | 0;
 }
 
 function $1464($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1) | 0;
 }
 
 function $1465($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = Math_fround($3);
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3) | 0;
 }
 
 function $1467($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 8 >> 2] = 0;
  HEAP32[$3 + 12 >> 2] = 0;
  $0_1 = $763($0_1, $3 + 8 | 0);
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $0_1 = $93($0_1, $763($1_1, $3), $2_1);
  global$0 = $3 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1468($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = global$0 - 32 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 20 >> 2] = $0_1;
  HEAP32[$1_1 + 12 >> 2] = 0;
  HEAP32[$1_1 + 16 >> 2] = 0;
  HEAP32[$1_1 + 8 >> 2] = 56184;
  $2_1 = $1_1 + 12 | 0;
  if (HEAP32[$0_1 >> 2] != 2) {
   HEAP32[$1_1 + 24 >> 2] = 0;
   HEAP32[$1_1 + 28 >> 2] = 0;
   $0_1 = $763($0_1, $1_1 + 24 | 0);
   $3 = HEAP32[$0_1 + 4 >> 2];
   HEAP32[$1_1 + 12 >> 2] = HEAP32[$0_1 >> 2];
   HEAP32[$1_1 + 16 >> 2] = $3;
  }
  $0_1 = $128(HEAP32[HEAP32[$1_1 + 20 >> 2] >> 2] != 2 ? $2_1 : 0);
  global$0 = $1_1 + 32 | 0;
  return $0_1 | 0;
 }
 
 function $1469($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = $2_1 + 8 | 0;
  $182($3);
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $3, $2_1 + 4 | 0);
  fimport$4(HEAP32[$2_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1470($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  $5_1 = $3 + 8 | 0;
  $2_1 = HEAP32[18392];
  $4_1 = HEAP32[$2_1 + 7480 >> 2];
  label$1 : {
   if (($4_1 | 0) > 0) {
    $2_1 = (HEAP32[$2_1 + 7476 >> 2] + Math_imul($4_1, 36) | 0) - 8 | 0;
    break label$1;
   }
   $2_1 = $2_1 + 228 | 0;
  }
  $4_1 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$5_1 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $4_1;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$3 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $5_1, $3 + 4 | 0);
  fimport$4(HEAP32[$3 + 4 >> 2]);
  global$0 = $3 + 16 | 0;
 }
 
 function $1471($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  return FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1) | 0;
 }
 
 function $1472($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $3;
  FUNCTION_TABLE[$0_1 | 0]($4_1 + 12 | 0, $1_1, $2_1, $4_1 + 8 | 0);
  fimport$10(HEAP32[$4_1 + 12 >> 2]);
  $0_1 = HEAP32[$4_1 + 12 >> 2];
  fimport$4($0_1 | 0);
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  global$0 = $4_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1473($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = Math_fround($2_1);
  $3 = $3 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = Math_fround(0), $8 = Math_fround(0), $9 = 0, $10_1 = Math_fround(0);
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $9 = $5_1 + 8 | 0;
  $4_1 = HEAP32[18392];
  $2_1 = $2_1 < Math_fround(0.0) ? HEAPF32[$4_1 + 48 >> 2] : $2_1;
  $6_1 = $1_1 + $4_1 | 0;
  label$2 : {
   if (!(HEAPU8[$6_1 + 236 | 0] | HEAPU8[$6_1 + 1022 | 0])) {
    $2_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    break label$2;
   }
   label$4 : {
    if (!(HEAPF32[(($1_1 << 2) + $4_1 | 0) + 1120 >> 2] >= Math_fround($2_1 * $2_1))) {
     break label$4
    }
    $8 = HEAPF32[$4_1 + 228 >> 2];
    if (!($8 >= Math_fround(-256.0e3)) | !(HEAPF32[$4_1 + 232 >> 2] >= Math_fround(-256.0e3))) {
     break label$4
    }
    $6_1 = ($1_1 << 3) + $4_1 | 0;
    $10_1 = HEAPF32[$6_1 + 908 >> 2];
    if (!($10_1 >= Math_fround(-256.0e3))) {
     break label$4
    }
    $2_1 = Math_fround(0.0);
    $7_1 = Math_fround(0.0);
    if (!(HEAPF32[$6_1 + 912 >> 2] >= Math_fround(-256.0e3))) {
     break label$2
    }
    $2_1 = Math_fround(HEAPF32[$4_1 + 232 >> 2] - HEAPF32[(($1_1 << 3) + $4_1 | 0) + 912 >> 2]);
    $7_1 = Math_fround($8 - $10_1);
    break label$2;
   }
   $2_1 = Math_fround(0.0);
   $7_1 = Math_fround(0.0);
  }
  $8 = $7_1;
  HEAPF32[$9 + 4 >> 2] = $2_1;
  HEAPF32[$9 >> 2] = $8;
  $1_1 = HEAP32[$3 >> 2];
  HEAP32[$5_1 + 4 >> 2] = $1_1;
  fimport$10($1_1 | 0);
  $764($0_1, $9, $5_1 + 4 | 0);
  fimport$4(HEAP32[$5_1 + 4 >> 2]);
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1474($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = $97();
  $3 = $2_1 ? $2_1 : 19354;
  $1_1 = $1697($3);
  if ($1_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($1_1 >>> 0 <= 10) {
     HEAP8[$0_1 + 11 | 0] = $1_1;
     break label$2;
    }
    $4_1 = ($1_1 | 15) + 1 | 0;
    $2_1 = $1782($4_1);
    HEAP32[$0_1 + 8 >> 2] = $4_1 | -2147483648;
    HEAP32[$0_1 >> 2] = $2_1;
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    $0_1 = $2_1;
   }
   $2_1 = $0_1 + $1_1 | 0;
   if ($1_1) {
    $1603($0_1, $3, $1_1)
   }
   HEAP8[$2_1 | 0] = 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1475($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3 = +fimport$5(HEAP32[$0_1 >> 2], 49072, $1_1 + 12 | 0);
  label$1 : {
   if ($3 < 4294967296.0 & $3 >= 0.0) {
    $4_1 = ~~$3 >>> 0;
    break label$1;
   }
   $4_1 = 0;
  }
  $2_1 = HEAP32[$4_1 >> 2];
  if ($2_1 >>> 0 < 2147483632) {
   $6_1 = HEAP32[$1_1 + 12 >> 2];
   label$4 : {
    if ($2_1 >>> 0 <= 10) {
     HEAP8[$1_1 + 11 | 0] = $2_1;
     $0_1 = $1_1;
     break label$4;
    }
    $5_1 = ($2_1 | 15) + 1 | 0;
    $0_1 = $1782($5_1);
    HEAP32[$1_1 + 8 >> 2] = $5_1 | -2147483648;
    HEAP32[$1_1 >> 2] = $0_1;
    HEAP32[$1_1 + 4 >> 2] = $2_1;
   }
   if ($2_1) {
    $1602($0_1, $4_1 + 4 | 0, $2_1)
   }
   HEAP8[$0_1 + $2_1 | 0] = 0;
   fimport$6($6_1 | 0);
   $98(HEAP8[$1_1 + 11 | 0] < 0 ? HEAP32[$1_1 >> 2] : $1_1);
   if (HEAP8[$1_1 + 11 | 0] < 0) {
    $1756(HEAP32[$1_1 >> 2])
   }
   global$0 = $1_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1476($0_1) {
  $0_1 = $0_1 | 0;
  $137(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, 0);
 }
 
 function $1477($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $3 = $114(0);
  $1_1 = $1697($3);
  if ($1_1 >>> 0 < 2147483632) {
   label$2 : {
    if ($1_1 >>> 0 <= 10) {
     HEAP8[$0_1 + 11 | 0] = $1_1;
     break label$2;
    }
    $4_1 = ($1_1 | 15) + 1 | 0;
    $2_1 = $1782($4_1);
    HEAP32[$0_1 + 8 >> 2] = $4_1 | -2147483648;
    HEAP32[$0_1 >> 2] = $2_1;
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    $0_1 = $2_1;
   }
   $2_1 = $0_1 + $1_1 | 0;
   if ($1_1) {
    $1603($0_1, $3, $1_1)
   }
   HEAP8[$2_1 | 0] = 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1478($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = global$0 - 16 | 0;
  global$0 = $8;
  $9 = HEAP32[$1_1 >> 2];
  if ($9 >>> 0 < 2147483632) {
   label$2 : {
    if ($9 >>> 0 <= 10) {
     HEAP8[$8 + 15 | 0] = $9;
     $10_1 = $8 + 4 | 0;
     break label$2;
    }
    $11_1 = ($9 | 15) + 1 | 0;
    $10_1 = $1782($11_1);
    HEAP32[$8 + 12 >> 2] = $11_1 | -2147483648;
    HEAP32[$8 + 4 >> 2] = $10_1;
    HEAP32[$8 + 8 >> 2] = $9;
   }
   if ($9) {
    $1602($10_1, $1_1 + 4 | 0, $9)
   }
   HEAP8[$9 + $10_1 | 0] = 0;
   $0_1 = FUNCTION_TABLE[$0_1 | 0]($8 + 4 | 0, $2_1, $3, $4_1, $5_1, $6_1, $7_1) | 0;
   if (HEAP8[$8 + 15 | 0] < 0) {
    $1756(HEAP32[$8 + 4 >> 2])
   }
   global$0 = $8 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1479($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  return $274(HEAP8[$0_1 + 11 | 0] < 0 ? HEAP32[$0_1 >> 2] : $0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) | 0;
 }
 
 function $1480($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = $2_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  HEAP32[$4_1 + 4 >> 2] = $3;
  FUNCTION_TABLE[$0_1 | 0]($4_1 + 12 | 0, $4_1 + 8 | 0, $4_1 + 4 | 0);
  fimport$4(HEAP32[$4_1 + 4 >> 2]);
  fimport$4(HEAP32[$4_1 + 8 >> 2]);
  fimport$4(HEAP32[$4_1 + 12 >> 2]);
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1481($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0;
  $3 = HEAP32[23915];
  fimport$10(HEAP32[$0_1 >> 2]);
  fimport$4(HEAP32[$3 + 172 >> 2]);
  HEAP32[$3 + 172 >> 2] = HEAP32[$0_1 >> 2];
  fimport$10(HEAP32[$1_1 >> 2]);
  fimport$4(HEAP32[$3 + 176 >> 2]);
  HEAP32[$3 + 176 >> 2] = HEAP32[$1_1 >> 2];
  fimport$10(HEAP32[$2_1 >> 2]);
  fimport$4(HEAP32[$3 + 180 >> 2]);
  HEAP32[$3 + 180 >> 2] = HEAP32[$2_1 >> 2];
  if (!(HEAP32[$0_1 >> 2] != 2 & HEAP32[$1_1 >> 2] != 2)) {
   $102(0, 0);
   return;
  }
  $102(875, 876);
 }
 
 function $1483($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 8 >> 2] = $16($1_1);
  HEAP32[$0_1 >> 2] = fimport$1(72620, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1484($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[$0_1 >> 2], 72620, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if ($2_1 < 4294967296.0 & $2_1 >= 0.0) {
   $0_1 = ~~$2_1 >>> 0
  } else {
   $0_1 = 0
  }
  $17($0_1);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1486($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $7_1 = global$0 - 16 | 0;
  global$0 = $7_1;
  $0_1 = HEAP32[23915];
  $4_1 = $0_1 + 52 | 0;
  $3 = $1697($1_1);
  $6_1 = $1798($4_1);
  __inlined_func$1838 : {
   if ($3 >>> 0 <= $6_1 >>> 0) {
    $2_1 = $1799($4_1);
    $1603($2_1, $1_1, $3);
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    __inlined_func$1810 : {
     if ($1794($4_1)) {
      $1824($4_1, $3);
      break __inlined_func$1810;
     }
     $1826($4_1, $3);
    }
    HEAP8[$1_1 + 15 | 0] = 0;
    $1812($2_1 + $3 | 0, $1_1 + 15 | 0);
    global$0 = $1_1 + 16 | 0;
    break __inlined_func$1838;
   }
   $1797($4_1);
   $2_1 = global$0 - 16 | 0;
   global$0 = $2_1;
   __inlined_func$1803 : {
    $8 = $3 - $6_1 | 0;
    $5_1 = 2147483631;
    if ($8 >>> 0 <= $5_1 + ($6_1 ^ -1) >>> 0) {
     $9 = $1799($4_1);
     $10_1 = $2_1 + 4 | 0;
     if ($6_1 >>> 0 < ($5_1 >>> 1 | 0) - 16 >>> 0) {
      HEAP32[$2_1 + 12 >> 2] = $6_1 << 1;
      HEAP32[$2_1 + 4 >> 2] = $6_1 + $8;
      $5_1 = $1815(HEAP32[$1814($2_1 + 4 | 0, $2_1 + 12 | 0) >> 2]) + 1 | 0;
     }
     $1817($10_1, $4_1, $5_1);
     $5_1 = HEAP32[$2_1 + 4 >> 2];
     if ($3) {
      $1820($5_1, $1_1, $3)
     }
     if (($6_1 | 0) != 10) {
      $1756($9)
     }
     $1822($4_1, $5_1);
     $1823($4_1, HEAP32[$2_1 + 8 >> 2]);
     $1824($4_1, $3);
     HEAP8[$2_1 + 12 | 0] = 0;
     $1812($3 + $5_1 | 0, $2_1 + 12 | 0);
     global$0 = $2_1 + 16 | 0;
     break __inlined_func$1803;
    }
    $774();
    wasm2js_trap();
   }
  }
  if (HEAP32[$0_1 + 68 >> 2] != 2) {
   fimport$10(HEAP32[$0_1 + 72 >> 2]);
   HEAP32[$7_1 >> 2] = HEAP32[$0_1 + 72 >> 2];
   $2_1 = HEAPU8[$0_1 + 63 | 0];
   $1_1 = $2_1 << 24 >> 24 < 0;
   $2_1 = $1_1 ? HEAP32[$0_1 + 56 >> 2] : $2_1 & 127;
   $3 = $1755($2_1 + 4 | 0);
   HEAP32[$3 >> 2] = $2_1;
   $1602($3 + 4 | 0, $1_1 ? HEAP32[$0_1 + 52 >> 2] : $4_1, $2_1);
   HEAP32[$7_1 + 8 >> 2] = $3;
   fimport$4(fimport$16(HEAP32[$0_1 + 68 >> 2], 2, 52544, $7_1 | 0) | 0);
  }
  global$0 = $7_1 + 16 | 0;
 }
 
 function $1487($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   $3 = HEAP32[23915];
   if (HEAP32[$3 + 64 >> 2] != 2) {
    fimport$10(HEAP32[$3 + 72 >> 2]);
    HEAP32[$1_1 >> 2] = HEAP32[$3 + 72 >> 2];
    $6_1 = fimport$16(HEAP32[$3 + 64 >> 2], 1, 52540, $1_1 | 0) | 0;
    $4_1 = +fimport$5($6_1 | 0, 49072, $1_1 + 12 | 0);
    label$3 : {
     if ($4_1 < 4294967296.0 & $4_1 >= 0.0) {
      $5_1 = ~~$4_1 >>> 0;
      break label$3;
     }
     $5_1 = 0;
    }
    $2_1 = HEAP32[$5_1 >> 2];
    if ($2_1 >>> 0 >= 2147483632) {
     break label$1
    }
    $8 = HEAP32[$1_1 + 12 >> 2];
    label$5 : {
     if ($2_1 >>> 0 <= 10) {
      HEAP8[$1_1 + 11 | 0] = $2_1;
      $0_1 = $1_1;
      break label$5;
     }
     $7_1 = ($2_1 | 15) + 1 | 0;
     $0_1 = $1782($7_1);
     HEAP32[$1_1 + 8 >> 2] = $7_1 | -2147483648;
     HEAP32[$1_1 >> 2] = $0_1;
     HEAP32[$1_1 + 4 >> 2] = $2_1;
    }
    if ($2_1) {
     $1602($0_1, $5_1 + 4 | 0, $2_1)
    }
    HEAP8[$0_1 + $2_1 | 0] = 0;
    fimport$6($8 | 0);
    $0_1 = $3 + 52 | 0;
    if (HEAP8[$3 + 63 | 0] < 0) {
     $1756(HEAP32[$0_1 >> 2])
    }
    $2_1 = HEAP32[$1_1 + 4 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
    HEAP8[$1_1 + 11 | 0] = 0;
    HEAP8[$1_1 | 0] = 0;
    fimport$4($6_1 | 0);
   }
   global$0 = $1_1 + 16 | 0;
   return (HEAP8[$3 + 63 | 0] < 0 ? HEAP32[$3 + 52 >> 2] : $3 + 52 | 0) | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1488($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 >> 2] = 52584;
  $1_1 = HEAP32[$1_1 >> 2];
  if (($1_1 | 0) != 2) {
   HEAP32[$2_1 >> 2] = 0;
   $3 = fimport$1(72760, $2_1 | 0) | 0;
   $1_1 = fimport$7($1_1 | 0, $3 | 0) | 0;
   fimport$4($3 | 0);
   $4_1 = +fimport$5($1_1 | 0, 72652, $2_1 + 12 | 0);
   fimport$6(HEAP32[$2_1 + 12 >> 2]);
   HEAP8[$0_1 + 4 | 0] = $4_1 != 0.0;
   fimport$4($1_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1;
 }
 
 function $1489($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 52584;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (HEAP32[$1_1 >> 2] != 2) {
   HEAP32[$2_1 + 8 >> 2] = HEAPU8[$0_1 + 4 | 0];
   $3 = $2_1 + 8 | 0;
   $4_1 = fimport$1(72652, $3 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = 0;
   $5_1 = $1_1;
   $1_1 = fimport$1(72760, $3 | 0) | 0;
   fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($4_1 | 0);
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1490($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 52584;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  if (HEAP32[$1_1 >> 2] != 2) {
   HEAP32[$2_1 + 8 >> 2] = HEAPU8[$0_1 + 4 | 0];
   $3 = $2_1 + 8 | 0;
   $4_1 = fimport$1(72652, $3 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = 0;
   $5_1 = $1_1;
   $1_1 = fimport$1(72760, $3 | 0) | 0;
   fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($4_1 | 0);
  }
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1491($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2];
  HEAP32[$1_1 >> 2] = 0;
  $3 = fimport$1(72760, $1_1 | 0) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $4_1 = +fimport$5($2_1 | 0, 72652, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  HEAP8[$0_1 + 4 | 0] = $4_1 != 0.0;
  fimport$4($2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1492($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAPU8[$0_1 + 4 | 0];
  $3 = $2_1 + 8 | 0;
  $0_1 = fimport$1(72652, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $4_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1493($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3 = HEAP32[23915];
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  $2_1 = $1_1 + 8 | 0;
  $0_1 = fimport$1(49204, $2_1 | 0) | 0;
  fimport$10($0_1 | 0);
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  fimport$4(fimport$16(HEAP32[$3 + 76 >> 2], 1, 48472, $2_1 | 0) | 0);
  fimport$4($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1494($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53076;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAPU8[$0_1 + 4 | 0];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72652, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1495($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53076;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAPU8[$0_1 + 4 | 0];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72652, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1498($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53160;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72736, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1499($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53160;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72736, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1500($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3 = HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2];
  HEAP32[$1_1 >> 2] = 0;
  $2_1 = fimport$1(72760, $1_1 | 0) | 0;
  $3 = fimport$7($3 | 0, $2_1 | 0) | 0;
  fimport$4($2_1 | 0);
  $4_1 = +fimport$5($3 | 0, 72736, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if ($4_1 < 4294967296.0 & $4_1 >= 0.0) {
   $2_1 = ~~$4_1 >>> 0
  } else {
   $2_1 = 0
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  fimport$4($3 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1501($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $0_1 = fimport$1(72736, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $4_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1502($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53228;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72724, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1503($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53228;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72724, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1504($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3 = HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2];
  HEAP32[$1_1 >> 2] = 0;
  $2_1 = fimport$1(72760, $1_1 | 0) | 0;
  $3 = fimport$7($3 | 0, $2_1 | 0) | 0;
  fimport$4($2_1 | 0);
  $4_1 = +fimport$5($3 | 0, 72724, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if (Math_abs($4_1) < 2147483648.0) {
   $2_1 = ~~$4_1
  } else {
   $2_1 = -2147483648
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  fimport$4($3 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1505($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAP32[$2_1 + 8 >> 2] = HEAP32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $0_1 = fimport$1(72724, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $4_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1506($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $4_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 16 >> 2] >> 2], 49072, $1_1 + 12 | 0);
  label$1 : {
   if ($4_1 < 4294967296.0 & $4_1 >= 0.0) {
    $5_1 = ~~$4_1 >>> 0;
    break label$1;
   }
   $5_1 = 0;
  }
  $3 = HEAP32[$5_1 >> 2];
  if ($3 >>> 0 < 2147483632) {
   $7_1 = HEAP32[$1_1 + 12 >> 2];
   label$4 : {
    if ($3 >>> 0 <= 10) {
     HEAP8[$1_1 + 11 | 0] = $3;
     $2_1 = $1_1;
     break label$4;
    }
    $6_1 = ($3 | 15) + 1 | 0;
    $2_1 = $1782($6_1);
    HEAP32[$1_1 + 8 >> 2] = $6_1 | -2147483648;
    HEAP32[$1_1 >> 2] = $2_1;
    HEAP32[$1_1 + 4 >> 2] = $3;
   }
   if ($3) {
    $1602($2_1, $5_1 + 4 | 0, $3)
   }
   HEAP8[$2_1 + $3 | 0] = 0;
   fimport$6($7_1 | 0);
   $2_1 = $0_1 + 4 | 0;
   if (HEAP8[$0_1 + 15 | 0] < 0) {
    $1756(HEAP32[$2_1 >> 2])
   }
   $0_1 = HEAP32[$1_1 + 4 >> 2];
   HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 4 >> 2] = $0_1;
   HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
   global$0 = $1_1 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1507($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  label$1 : {
   $0_1 = 0;
   label$2 : {
    if (($1_1 | 0) < 0) {
     break label$2
    }
    $4_1 = HEAP32[23915];
    $0_1 = 0;
    if (HEAP32[$4_1 + 104 >> 2] <= ($1_1 | 0)) {
     break label$2
    }
    $6_1 = $4_1 + 108 | 0;
    label$4 : {
     if (HEAP8[$4_1 + 119 | 0] < 0) {
      HEAP32[$4_1 + 112 >> 2] = 0;
      $0_1 = HEAP32[$4_1 + 108 >> 2];
      break label$4;
     }
     HEAP8[$4_1 + 119 | 0] = 0;
     $0_1 = $6_1;
    }
    HEAP8[$0_1 | 0] = 0;
    $8 = fimport$21() | 0;
    $5_1 = HEAPU8[$4_1 + 119 | 0];
    $0_1 = $5_1 << 24 >> 24 < 0;
    $5_1 = $0_1 ? HEAP32[$4_1 + 112 >> 2] : $5_1 & 127;
    $7_1 = $1755($5_1 + 4 | 0);
    HEAP32[$7_1 >> 2] = $5_1;
    $1602($7_1 + 4 | 0, $0_1 ? HEAP32[$4_1 + 108 >> 2] : $6_1, $5_1);
    HEAP32[$3 >> 2] = $7_1;
    $0_1 = fimport$1(49072, $3 | 0) | 0;
    HEAP32[$3 >> 2] = 0;
    $5_1 = fimport$1(72724, $3 | 0) | 0;
    fimport$3($8 | 0, $5_1 | 0, $0_1 | 0);
    fimport$4($5_1 | 0);
    fimport$4($0_1 | 0);
    HEAP32[$3 >> 2] = $1_1;
    $0_1 = fimport$1(72724, $3 | 0) | 0;
    fimport$10(HEAP32[$4_1 + 100 >> 2]);
    HEAP32[$3 >> 2] = HEAP32[$4_1 + 100 >> 2];
    fimport$10($0_1 | 0);
    HEAP32[$3 + 8 >> 2] = $0_1;
    fimport$10($8 | 0);
    HEAP32[$3 + 16 >> 2] = $8;
    $5_1 = fimport$16(HEAP32[$4_1 + 96 >> 2], 3, 53512, $3 | 0) | 0;
    fimport$4($0_1 | 0);
    HEAP32[$3 >> 2] = 0;
    $0_1 = fimport$1(72724, $3 | 0) | 0;
    $7_1 = fimport$7($8 | 0, $0_1 | 0) | 0;
    fimport$4($0_1 | 0);
    $9 = +fimport$5($7_1 | 0, 49072, $3 + 28 | 0);
    label$6 : {
     if ($9 < 4294967296.0 & $9 >= 0.0) {
      $10_1 = ~~$9 >>> 0;
      break label$6;
     }
     $10_1 = 0;
    }
    $1_1 = HEAP32[$10_1 >> 2];
    if ($1_1 >>> 0 >= 2147483632) {
     break label$1
    }
    $12_1 = HEAP32[$3 + 28 >> 2];
    label$8 : {
     if ($1_1 >>> 0 <= 10) {
      HEAP8[$3 + 11 | 0] = $1_1;
      $0_1 = $3;
      break label$8;
     }
     $11_1 = ($1_1 | 15) + 1 | 0;
     $0_1 = $1782($11_1);
     HEAP32[$3 + 8 >> 2] = $11_1 | -2147483648;
     HEAP32[$3 >> 2] = $0_1;
     HEAP32[$3 + 4 >> 2] = $1_1;
    }
    if ($1_1) {
     $1602($0_1, $10_1 + 4 | 0, $1_1)
    }
    HEAP8[$0_1 + $1_1 | 0] = 0;
    fimport$6($12_1 | 0);
    if (HEAP8[$4_1 + 119 | 0] < 0) {
     $1756(HEAP32[$6_1 >> 2])
    }
    $0_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $0_1;
    HEAP32[$6_1 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP8[$3 + 11 | 0] = 0;
    HEAP8[$3 | 0] = 0;
    fimport$4($7_1 | 0);
    HEAP32[$2_1 >> 2] = HEAP8[$4_1 + 119 | 0] < 0 ? HEAP32[$4_1 + 108 >> 2] : $6_1;
    $9 = +fimport$5($5_1 | 0, 72652, $3 | 0);
    fimport$6(HEAP32[$3 >> 2]);
    fimport$4($5_1 | 0);
    fimport$4($8 | 0);
    $0_1 = $9 != 0.0;
   }
   global$0 = $3 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1508($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = 0.0, $5_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $3 = HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2];
  HEAP32[$1_1 >> 2] = 0;
  $5_1 = fimport$1(72760, $1_1 | 0) | 0;
  $3 = fimport$7($3 | 0, $5_1 | 0) | 0;
  fimport$4($5_1 | 0);
  $4_1 = +fimport$5($3 | 0, 72808, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  $2_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $2_1 = Math_fround($4_1);
  }
  HEAPF32[$0_1 + 4 >> 2] = $2_1;
  fimport$4($3 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1509($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53576;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72796, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1510($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53576;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72796, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1511($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  HEAPF32[$2_1 + 8 >> 2] = HEAPF32[$0_1 + 4 >> 2];
  $3 = $2_1 + 8 | 0;
  $0_1 = fimport$1(72796, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $4_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1512($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  while (1) {
   $3 = HEAP32[HEAP32[$0_1 + 12 >> 2] >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   $5_1 = fimport$1(72760, $1_1 | 0) | 0;
   $3 = fimport$7($3 | 0, $5_1 | 0) | 0;
   fimport$4($5_1 | 0);
   $6_1 = +fimport$5($3 | 0, 72808, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
   $5_1 = (($4_1 << 2) + $0_1 | 0) + 4 | 0;
   $2_1 = Math_fround(3402823466385288598117041.0e14);
   label$2 : {
    if ($6_1 >= 3402823466385288598117041.0e14) {
     break label$2
    }
    $2_1 = Math_fround(-3402823466385288598117041.0e14);
    if ($6_1 <= -3402823466385288598117041.0e14) {
     break label$2
    }
    $2_1 = Math_fround($6_1);
   }
   HEAPF32[$5_1 >> 2] = $2_1;
   fimport$4($3 | 0);
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1513($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53632;
  while (1) {
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1514($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53632;
  while (1) {
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1515($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  while (1) {
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1516($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  while (1) {
   $3 = HEAP32[HEAP32[$0_1 + 16 >> 2] >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   $5_1 = fimport$1(72760, $1_1 | 0) | 0;
   $3 = fimport$7($3 | 0, $5_1 | 0) | 0;
   fimport$4($5_1 | 0);
   $6_1 = +fimport$5($3 | 0, 72808, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
   $5_1 = (($4_1 << 2) + $0_1 | 0) + 4 | 0;
   $2_1 = Math_fround(3402823466385288598117041.0e14);
   label$2 : {
    if ($6_1 >= 3402823466385288598117041.0e14) {
     break label$2
    }
    $2_1 = Math_fround(-3402823466385288598117041.0e14);
    if ($6_1 <= -3402823466385288598117041.0e14) {
     break label$2
    }
    $2_1 = Math_fround($6_1);
   }
   HEAPF32[$5_1 >> 2] = $2_1;
   fimport$4($3 | 0);
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1517($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53688;
  while (1) {
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1518($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53688;
  while (1) {
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1519($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  while (1) {
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1520($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  while (1) {
   $3 = HEAP32[HEAP32[$0_1 + 20 >> 2] >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   $5_1 = fimport$1(72760, $1_1 | 0) | 0;
   $3 = fimport$7($3 | 0, $5_1 | 0) | 0;
   fimport$4($5_1 | 0);
   $6_1 = +fimport$5($3 | 0, 72808, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
   $5_1 = (($4_1 << 2) + $0_1 | 0) + 4 | 0;
   $2_1 = Math_fround(3402823466385288598117041.0e14);
   label$2 : {
    if ($6_1 >= 3402823466385288598117041.0e14) {
     break label$2
    }
    $2_1 = Math_fround(-3402823466385288598117041.0e14);
    if ($6_1 <= -3402823466385288598117041.0e14) {
     break label$2
    }
    $2_1 = Math_fround($6_1);
   }
   HEAPF32[$5_1 >> 2] = $2_1;
   fimport$4($3 | 0);
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1521($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53744;
  while (1) {
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1522($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53744;
  while (1) {
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1523($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  while (1) {
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72796, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1524($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  while (1) {
   $3 = HEAP32[HEAP32[$0_1 + 12 >> 2] >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   $2_1 = fimport$1(72760, $1_1 | 0) | 0;
   $3 = fimport$7($3 | 0, $2_1 | 0) | 0;
   fimport$4($2_1 | 0);
   $5_1 = +fimport$5($3 | 0, 72724, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
   $6_1 = (($4_1 << 2) + $0_1 | 0) + 4 | 0;
   if (Math_abs($5_1) < 2147483648.0) {
    $2_1 = ~~$5_1
   } else {
    $2_1 = -2147483648
   }
   HEAP32[$6_1 >> 2] = $2_1;
   fimport$4($3 | 0);
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1525($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53896;
  while (1) {
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1526($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53896;
  while (1) {
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1527($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  while (1) {
   $1_1 = HEAP32[$0_1 + 12 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 2) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1528($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  while (1) {
   $3 = HEAP32[HEAP32[$0_1 + 16 >> 2] >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   $2_1 = fimport$1(72760, $1_1 | 0) | 0;
   $3 = fimport$7($3 | 0, $2_1 | 0) | 0;
   fimport$4($2_1 | 0);
   $5_1 = +fimport$5($3 | 0, 72724, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
   $6_1 = (($4_1 << 2) + $0_1 | 0) + 4 | 0;
   if (Math_abs($5_1) < 2147483648.0) {
    $2_1 = ~~$5_1
   } else {
    $2_1 = -2147483648
   }
   HEAP32[$6_1 >> 2] = $2_1;
   fimport$4($3 | 0);
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1529($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53952;
  while (1) {
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1530($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 53952;
  while (1) {
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1531($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  while (1) {
   $1_1 = HEAP32[$0_1 + 16 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 3) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1532($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  while (1) {
   $3 = HEAP32[HEAP32[$0_1 + 20 >> 2] >> 2];
   HEAP32[$1_1 >> 2] = $4_1;
   $2_1 = fimport$1(72760, $1_1 | 0) | 0;
   $3 = fimport$7($3 | 0, $2_1 | 0) | 0;
   fimport$4($2_1 | 0);
   $5_1 = +fimport$5($3 | 0, 72724, $1_1 + 12 | 0);
   fimport$6(HEAP32[$1_1 + 12 >> 2]);
   $6_1 = (($4_1 << 2) + $0_1 | 0) + 4 | 0;
   if (Math_abs($5_1) < 2147483648.0) {
    $2_1 = ~~$5_1
   } else {
    $2_1 = -2147483648
   }
   HEAP32[$6_1 >> 2] = $2_1;
   fimport$4($3 | 0);
   $4_1 = $4_1 + 1 | 0;
   if (($4_1 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1533($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 54008;
  while (1) {
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1534($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 54008;
  while (1) {
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1535($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  while (1) {
   $1_1 = HEAP32[$0_1 + 20 >> 2];
   HEAP32[$2_1 + 8 >> 2] = HEAP32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
   $4_1 = $2_1 + 8 | 0;
   $5_1 = fimport$1(72724, $4_1 | 0) | 0;
   $1_1 = HEAP32[$1_1 >> 2];
   HEAP32[$2_1 + 8 >> 2] = $3;
   $6_1 = $1_1;
   $1_1 = fimport$1(72760, $4_1 | 0) | 0;
   fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
   fimport$4($1_1 | 0);
   fimport$4($5_1 | 0);
   $3 = $3 + 1 | 0;
   if (($3 | 0) != 4) {
    continue
   }
   break;
  };
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1536($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $4_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $5_1 = +fimport$5($4_1 | 0, 72760, $3 + 8 | 0);
  fimport$6(HEAP32[$3 + 8 >> 2]);
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $6_1 | 0;
  if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
   $1_1 = ~~$5_1 >>> 0
  } else {
   $1_1 = 0
  }
  label$3 : {
   if ($1_1 >>> 0 > $2_1 >>> 0) {
    $1070($0_1, $1_1 - $2_1 | 0);
    break label$3;
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = $1_1 + $6_1;
  }
  fimport$4($4_1 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1 - $2_1;
  $1_1 = fimport$1(54144, $3 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $4_1 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $4_1;
  }
  $4_1 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$3 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($4_1 | 0, $1_1 | 0, 3559, $3 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $1537($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $4_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $5_1 = +fimport$5($4_1 | 0, 72760, $3 + 8 | 0);
  fimport$6(HEAP32[$3 + 8 >> 2]);
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $6_1 | 0;
  if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
   $1_1 = ~~$5_1 >>> 0
  } else {
   $1_1 = 0
  }
  label$3 : {
   if ($1_1 >>> 0 > $2_1 >>> 0) {
    $1070($0_1, $1_1 - $2_1 | 0);
    break label$3;
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = $1_1 + $6_1;
  }
  fimport$4($4_1 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1 - $2_1;
  $1_1 = fimport$1(51984, $3 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $4_1 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $4_1;
  }
  $4_1 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$3 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($4_1 | 0, $1_1 | 0, 3559, $3 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $1538($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $4_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $5_1 = +fimport$5($4_1 | 0, 72760, $3 + 8 | 0);
  fimport$6(HEAP32[$3 + 8 >> 2]);
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $6_1 >> 1;
  if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
   $1_1 = ~~$5_1 >>> 0
  } else {
   $1_1 = 0
  }
  label$3 : {
   if ($1_1 >>> 0 > $2_1 >>> 0) {
    $1545($0_1, $1_1 - $2_1 | 0);
    break label$3;
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = ($1_1 << 1) + $6_1;
  }
  fimport$4($4_1 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1 - $2_1 >> 1;
  $1_1 = fimport$1(54304, $3 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $4_1 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $4_1;
  }
  $4_1 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$3 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($4_1 | 0, $1_1 | 0, 3559, $3 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $1539($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $4_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $5_1 = +fimport$5($4_1 | 0, 72760, $3 + 8 | 0);
  fimport$6(HEAP32[$3 + 8 >> 2]);
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $6_1 >> 1;
  if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
   $1_1 = ~~$5_1 >>> 0
  } else {
   $1_1 = 0
  }
  label$3 : {
   if ($1_1 >>> 0 > $2_1 >>> 0) {
    $1545($0_1, $1_1 - $2_1 | 0);
    break label$3;
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = ($1_1 << 1) + $6_1;
  }
  fimport$4($4_1 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1 - $2_1 >> 1;
  $1_1 = fimport$1(54404, $3 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $4_1 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $4_1;
  }
  $4_1 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$3 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($4_1 | 0, $1_1 | 0, 3559, $3 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $1540($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $4_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $5_1 = +fimport$5($4_1 | 0, 72760, $3 + 8 | 0);
  fimport$6(HEAP32[$3 + 8 >> 2]);
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $6_1 >> 2;
  if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
   $1_1 = ~~$5_1 >>> 0
  } else {
   $1_1 = 0
  }
  label$3 : {
   if ($1_1 >>> 0 > $2_1 >>> 0) {
    $1547($0_1, $1_1 - $2_1 | 0);
    break label$3;
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = ($1_1 << 2) + $6_1;
  }
  fimport$4($4_1 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1 - $2_1 >> 2;
  $1_1 = fimport$1(54504, $3 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $4_1 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $4_1;
  }
  $4_1 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$3 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($4_1 | 0, $1_1 | 0, 3559, $3 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $1541($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $4_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $5_1 = +fimport$5($4_1 | 0, 72760, $3 + 8 | 0);
  fimport$6(HEAP32[$3 + 8 >> 2]);
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $6_1 >> 2;
  if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
   $1_1 = ~~$5_1 >>> 0
  } else {
   $1_1 = 0
  }
  label$3 : {
   if ($1_1 >>> 0 > $2_1 >>> 0) {
    $1547($0_1, $1_1 - $2_1 | 0);
    break label$3;
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = ($1_1 << 2) + $6_1;
  }
  fimport$4($4_1 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1 - $2_1 >> 2;
  $1_1 = fimport$1(54604, $3 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $4_1 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $4_1;
  }
  $4_1 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$3 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($4_1 | 0, $1_1 | 0, 3559, $3 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $1542($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $4_1 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $5_1 = +fimport$5($4_1 | 0, 72760, $3 + 8 | 0);
  fimport$6(HEAP32[$3 + 8 >> 2]);
  $6_1 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $6_1 >> 2;
  if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
   $1_1 = ~~$5_1 >>> 0
  } else {
   $1_1 = 0
  }
  label$3 : {
   if ($1_1 >>> 0 > $2_1 >>> 0) {
    $1547($0_1, $1_1 - $2_1 | 0);
    break label$3;
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = ($1_1 << 2) + $6_1;
  }
  fimport$4($4_1 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$3 + 12 >> 2] = $2_1;
  HEAP32[$3 + 8 >> 2] = $1_1 - $2_1 >> 2;
  $1_1 = fimport$1(54704, $3 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $4_1 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $4_1;
  }
  $4_1 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$3 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($4_1 | 0, $1_1 | 0, 3559, $3 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $3 + 16 | 0;
  return $0_1;
 }
 
 function $1543($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8 = 0, $9 = 0, $10_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  HEAP32[$0_1 + 12 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = 0;
  HEAP32[$0_1 >> 2] = 0;
  HEAP32[$0_1 + 4 >> 2] = 0;
  $2_1 = HEAP32[$1_1 >> 2];
  $1_1 = fimport$2(8624) | 0;
  $8 = fimport$7($2_1 | 0, $1_1 | 0) | 0;
  fimport$4($1_1 | 0);
  $7_1 = +fimport$5($8 | 0, 72760, $5_1 + 8 | 0);
  fimport$6(HEAP32[$5_1 + 8 >> 2]);
  $3 = HEAP32[$0_1 >> 2];
  $2_1 = HEAP32[$0_1 + 4 >> 2] - $3 >> 3;
  $1_1 = $7_1 < 4294967296.0 & $7_1 >= 0.0 ? ~~$7_1 >>> 0 : 0;
  label$3 : {
   if ($2_1 >>> 0 < $1_1 >>> 0) {
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[$0_1 + 8 >> 2];
    $2_1 = HEAP32[$0_1 + 4 >> 2];
    if ($1_1 >>> 0 <= $4_1 - $2_1 >> 3 >>> 0) {
     if ($1_1) {
      $1_1 = $1_1 << 3;
      $2_1 = $1604($2_1, 0, $1_1) + $1_1 | 0;
     }
     HEAP32[$0_1 + 4 >> 2] = $2_1;
     break label$3;
    }
    label$4 : {
     $3 = $2_1;
     $2_1 = HEAP32[$0_1 >> 2];
     $9 = $3 - $2_1 | 0;
     $6_1 = $9 >> 3;
     $3 = $6_1 + $1_1 | 0;
     if ($3 >>> 0 < 536870912) {
      $4_1 = $4_1 - $2_1 | 0;
      $10_1 = $4_1 >> 2;
      $3 = $4_1 >>> 0 >= 2147483640 ? 536870911 : $3 >>> 0 < $10_1 >>> 0 ? $10_1 : $3;
      label$6 : {
       if (!$3) {
        $3 = 0;
        $4_1 = 0;
        break label$6;
       }
       if ($3 >>> 0 >= 536870912) {
        break label$4
       }
       $4_1 = $1782($3 << 3);
      }
      $1_1 = $1_1 << 3;
      $6_1 = $1604($4_1 + ($6_1 << 3) | 0, 0, $1_1);
      $4_1 = $1603($4_1, $2_1, $9);
      HEAP32[$0_1 + 8 >> 2] = $4_1 + ($3 << 3);
      HEAP32[$0_1 + 4 >> 2] = $1_1 + $6_1;
      HEAP32[$0_1 >> 2] = $4_1;
      if ($2_1) {
       $1756($2_1)
      }
      break label$3;
     }
     $1071();
     wasm2js_trap();
    }
    $815();
    wasm2js_trap();
   }
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = ($1_1 << 3) + $3;
  }
  fimport$4($8 | 0);
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $2_1 = HEAP32[$0_1 >> 2];
  HEAP32[$5_1 + 12 >> 2] = $2_1;
  HEAP32[$5_1 + 8 >> 2] = $1_1 - $2_1 >> 3;
  $1_1 = fimport$1(54804, $5_1 + 8 | 0) | 0;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  if (!(HEAP8[95820] & 1)) {
   $3 = fimport$17(2, 51992) | 0;
   HEAP8[95820] = 1;
   HEAP32[23954] = $3;
  }
  $3 = HEAP32[23954];
  fimport$10(HEAP32[$2_1 >> 2]);
  HEAP32[$5_1 + 8 >> 2] = HEAP32[$2_1 >> 2];
  fimport$18($3 | 0, $1_1 | 0, 3559, $5_1 + 8 | 0);
  fimport$4($1_1 | 0);
  global$0 = $5_1 + 16 | 0;
  return $0_1;
 }
 
 function $1545($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  $3 = HEAP32[$0_1 + 4 >> 2];
  if ($1_1 >>> 0 <= $2_1 - $3 >> 1 >>> 0) {
   $2_1 = $0_1;
   if ($1_1) {
    $0_1 = $1_1 << 1;
    $3 = $1604($3, 0, $0_1) + $0_1 | 0;
   }
   HEAP32[$2_1 + 4 >> 2] = $3;
   return;
  }
  label$4 : {
   $4_1 = $3;
   $3 = HEAP32[$0_1 >> 2];
   $6_1 = $4_1 - $3 | 0;
   $5_1 = $6_1 >> 1;
   $4_1 = $5_1 + $1_1 | 0;
   if (($4_1 | 0) >= 0) {
    $2_1 = $2_1 - $3 | 0;
    $4_1 = $2_1 >>> 0 >= 2147483646 ? 2147483647 : $2_1 >>> 0 > $4_1 >>> 0 ? $2_1 : $4_1;
    label$6 : {
     if (!$4_1) {
      $4_1 = 0;
      $2_1 = 0;
      break label$6;
     }
     if (($4_1 | 0) < 0) {
      break label$4
     }
     $2_1 = $1782($4_1 << 1);
    }
    $1_1 = $1_1 << 1;
    $5_1 = $1604($2_1 + ($5_1 << 1) | 0, 0, $1_1);
    $2_1 = $1603($2_1, $3, $6_1);
    HEAP32[$0_1 + 8 >> 2] = $2_1 + ($4_1 << 1);
    HEAP32[$0_1 + 4 >> 2] = $1_1 + $5_1;
    HEAP32[$0_1 >> 2] = $2_1;
    if ($3) {
     $1756($3)
    }
    return;
   }
   $1071();
   wasm2js_trap();
  }
  $815();
  wasm2js_trap();
 }
 
 function $1547($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $2_1 = HEAP32[$0_1 + 8 >> 2];
  $3 = HEAP32[$0_1 + 4 >> 2];
  if ($1_1 >>> 0 <= $2_1 - $3 >> 2 >>> 0) {
   $2_1 = $0_1;
   if ($1_1) {
    $0_1 = $1_1 << 2;
    $3 = $1604($3, 0, $0_1) + $0_1 | 0;
   }
   HEAP32[$2_1 + 4 >> 2] = $3;
   return;
  }
  label$4 : {
   $4_1 = $3;
   $3 = HEAP32[$0_1 >> 2];
   $6_1 = $4_1 - $3 | 0;
   $5_1 = $6_1 >> 2;
   $4_1 = $5_1 + $1_1 | 0;
   if ($4_1 >>> 0 < 1073741824) {
    $2_1 = $2_1 - $3 | 0;
    $7_1 = $2_1 >> 1;
    $4_1 = $2_1 >>> 0 >= 2147483644 ? 1073741823 : $4_1 >>> 0 < $7_1 >>> 0 ? $7_1 : $4_1;
    label$6 : {
     if (!$4_1) {
      $4_1 = 0;
      $2_1 = 0;
      break label$6;
     }
     if ($4_1 >>> 0 >= 1073741824) {
      break label$4
     }
     $2_1 = $1782($4_1 << 2);
    }
    $1_1 = $1_1 << 2;
    $5_1 = $1604($2_1 + ($5_1 << 2) | 0, 0, $1_1);
    $2_1 = $1603($2_1, $3, $6_1);
    HEAP32[$0_1 + 8 >> 2] = $2_1 + ($4_1 << 2);
    HEAP32[$0_1 + 4 >> 2] = $1_1 + $5_1;
    HEAP32[$0_1 >> 2] = $2_1;
    if ($3) {
     $1756($3)
    }
    return;
   }
   $1071();
   wasm2js_trap();
  }
  $815();
  wasm2js_trap();
 }
 
 function $1552($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2], 72688, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if (Math_abs($2_1) < 2147483648.0) {
   $3 = ~~$2_1
  } else {
   $3 = -2147483648
  }
  HEAP8[$0_1 + 4 | 0] = $3;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1553($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2], 72676, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if ($2_1 < 4294967296.0 & $2_1 >= 0.0) {
   $3 = ~~$2_1 >>> 0
  } else {
   $3 = 0
  }
  HEAP8[$0_1 + 4 | 0] = $3;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1555($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2], 72700, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if (Math_abs($2_1) < 2147483648.0) {
   $3 = ~~$2_1
  } else {
   $3 = -2147483648
  }
  HEAP16[$0_1 + 4 >> 1] = $3;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1557($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2], 72712, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if ($2_1 < 4294967296.0 & $2_1 >= 0.0) {
   $3 = ~~$2_1 >>> 0
  } else {
   $3 = 0
  }
  HEAP16[$0_1 + 4 >> 1] = $3;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1559($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2], 72724, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if (Math_abs($2_1) < 2147483648.0) {
   $3 = ~~$2_1
  } else {
   $3 = -2147483648
  }
  HEAP32[$0_1 + 4 >> 2] = $3;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1561($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2], 72736, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  if ($2_1 < 4294967296.0 & $2_1 >= 0.0) {
   $3 = ~~$2_1 >>> 0
  } else {
   $3 = 0
  }
  HEAP32[$0_1 + 4 >> 2] = $3;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1563($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = Math_fround(0), $2_1 = 0, $3 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3 = +fimport$5(HEAP32[HEAP32[$0_1 + 8 >> 2] >> 2], 72808, $2_1 + 12 | 0);
  fimport$6(HEAP32[$2_1 + 12 >> 2]);
  $1_1 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($3 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $1_1 = Math_fround(-3402823466385288598117041.0e14);
   if ($3 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $1_1 = Math_fround($3);
  }
  HEAPF32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1565($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = +fimport$5(HEAP32[HEAP32[$0_1 + 16 >> 2] >> 2], 72808, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  HEAPF64[$0_1 + 8 >> 3] = $2_1;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1566($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[23915];
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  $3 = $1_1 + 8 | 0;
  $0_1 = fimport$1(48936, $3 | 0) | 0;
  fimport$10($0_1 | 0);
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  $2_1 = fimport$16(HEAP32[$2_1 + 120 >> 2], 1, 48472, $3 | 0) | 0;
  $4_1 = +fimport$5($2_1 | 0, 72724, $3 | 0);
  fimport$6(HEAP32[$1_1 + 8 >> 2]);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  if (Math_abs($4_1) < 2147483648.0) {
   $0_1 = ~~$4_1
  } else {
   $0_1 = -2147483648
  }
  return $0_1 | 0;
 }
 
 function $1567($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[23915];
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  $3 = $1_1 + 8 | 0;
  $0_1 = fimport$1(48936, $3 | 0) | 0;
  fimport$10($0_1 | 0);
  HEAP32[$1_1 + 8 >> 2] = $0_1;
  $2_1 = fimport$16(HEAP32[$2_1 + 124 >> 2], 1, 48472, $3 | 0) | 0;
  $4_1 = +fimport$5($2_1 | 0, 72724, $3 | 0);
  fimport$6(HEAP32[$1_1 + 8 >> 2]);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  if (Math_abs($4_1) < 2147483648.0) {
   $0_1 = ~~$4_1
  } else {
   $0_1 = -2147483648
  }
  return $0_1 | 0;
 }
 
 function $1569($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 55232;
  $1_1 = HEAP32[$0_1 + 16 >> 2];
  HEAPF64[$2_1 + 8 >> 3] = HEAPF64[$0_1 + 8 >> 3];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72808, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1570($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 55232;
  $1_1 = HEAP32[$0_1 + 16 >> 2];
  HEAPF64[$2_1 + 8 >> 3] = HEAPF64[$0_1 + 8 >> 3];
  $3 = $2_1 + 8 | 0;
  $4_1 = fimport$1(72808, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $5_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($5_1 | 0, $1_1 | 0, $4_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($4_1 | 0);
  $1756($0_1);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1571($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[HEAP32[$0_1 + 16 >> 2] >> 2];
  HEAP32[$1_1 >> 2] = 0;
  $3 = fimport$1(72760, $1_1 | 0) | 0;
  $2_1 = fimport$7($2_1 | 0, $3 | 0) | 0;
  fimport$4($3 | 0);
  $4_1 = +fimport$5($2_1 | 0, 72808, $1_1 + 12 | 0);
  fimport$6(HEAP32[$1_1 + 12 >> 2]);
  HEAPF64[$0_1 + 8 >> 3] = $4_1;
  fimport$4($2_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1572($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = HEAP32[$0_1 + 16 >> 2];
  HEAPF64[$2_1 + 8 >> 3] = HEAPF64[$0_1 + 8 >> 3];
  $3 = $2_1 + 8 | 0;
  $0_1 = fimport$1(72808, $3 | 0) | 0;
  $1_1 = HEAP32[$1_1 >> 2];
  HEAP32[$2_1 + 8 >> 2] = 0;
  $4_1 = $1_1;
  $1_1 = fimport$1(72760, $3 | 0) | 0;
  fimport$3($4_1 | 0, $1_1 | 0, $0_1 | 0);
  fimport$4($1_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1574($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$0_1 >> 2] = 55308;
  if (HEAP32[HEAP32[$0_1 + 20 >> 2] >> 2] != 2) {
   while (1) {
    $1_1 = HEAP32[$0_1 + 20 >> 2];
    HEAPF32[$2_1 + 8 >> 2] = HEAPF32[(($3 << 2) + $0_1 | 0) + 4 >> 2];
    $4_1 = $2_1 + 8 | 0;
    $5_1 = fimport$1(72796, $4_1 | 0) | 0;
    $1_1 = HEAP32[$1_1 >> 2];
    HEAP32[$2_1 + 8 >> 2] = $3;
    $6_1 = $1_1;
    $1_1 = fimport$1(72760, $4_1 | 0) | 0;
    fimport$3($6_1 | 0, $1_1 | 0, $5_1 | 0);
    fimport$4($1_1 | 0);
    fimport$4($5_1 | 0);
    $3 = $3 + 1 | 0;
    if (($3 | 0) != 4) {
     continue
    }
    break;
   }
  }
  global$0 = $2_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1575($0_1) {
  $0_1 = $0_1 | 0;
  $1756($1574($0_1));
 }
 
 function $1577($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0.0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  label$1 : {
   $0_1 = 0;
   label$2 : {
    if (($1_1 | 0) < 0) {
     break label$2
    }
    $4_1 = HEAP32[23915];
    $0_1 = 0;
    if (HEAP32[$4_1 + 132 >> 2] < ($1_1 | 0)) {
     break label$2
    }
    $0_1 = HEAP32[$4_1 + 128 >> 2];
    HEAP32[$3 >> 2] = $1_1;
    $1_1 = $0_1;
    $0_1 = fimport$1(72724, $3 | 0) | 0;
    $7_1 = fimport$7($1_1 | 0, $0_1 | 0) | 0;
    fimport$4($0_1 | 0);
    $5_1 = +fimport$5($7_1 | 0, 49072, $3 + 12 | 0);
    label$4 : {
     if ($5_1 < 4294967296.0 & $5_1 >= 0.0) {
      $6_1 = ~~$5_1 >>> 0;
      break label$4;
     }
     $6_1 = 0;
    }
    $1_1 = HEAP32[$6_1 >> 2];
    if ($1_1 >>> 0 >= 2147483632) {
     break label$1
    }
    $9 = HEAP32[$3 + 12 >> 2];
    label$6 : {
     if ($1_1 >>> 0 <= 10) {
      HEAP8[$3 + 11 | 0] = $1_1;
      $0_1 = $3;
      break label$6;
     }
     $8 = ($1_1 | 15) + 1 | 0;
     $0_1 = $1782($8);
     HEAP32[$3 + 8 >> 2] = $8 | -2147483648;
     HEAP32[$3 >> 2] = $0_1;
     HEAP32[$3 + 4 >> 2] = $1_1;
    }
    if ($1_1) {
     $1602($0_1, $6_1 + 4 | 0, $1_1)
    }
    HEAP8[$0_1 + $1_1 | 0] = 0;
    fimport$6($9 | 0);
    $0_1 = $4_1 + 136 | 0;
    if (HEAP8[$4_1 + 147 | 0] < 0) {
     $1756(HEAP32[$0_1 >> 2])
    }
    $1_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$0_1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$0_1 + 4 >> 2] = $1_1;
    HEAP32[$0_1 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP8[$3 + 11 | 0] = 0;
    HEAP8[$3 | 0] = 0;
    fimport$4($7_1 | 0);
    HEAP32[$2_1 >> 2] = HEAP8[$4_1 + 147 | 0] < 0 ? HEAP32[$4_1 + 136 >> 2] : $0_1;
    $0_1 = 1;
   }
   global$0 = $3 + 16 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1578($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  label$1 : {
   $0_1 = 0;
   label$2 : {
    if (($1_1 | 0) < 0) {
     break label$2
    }
    $4_1 = HEAP32[23915];
    $0_1 = 0;
    if (HEAP32[$4_1 + 156 >> 2] < ($1_1 | 0)) {
     break label$2
    }
    $6_1 = $4_1 + 160 | 0;
    label$4 : {
     if (HEAP8[$4_1 + 171 | 0] < 0) {
      HEAP32[$4_1 + 164 >> 2] = 0;
      $0_1 = HEAP32[$4_1 + 160 >> 2];
      break label$4;
     }
     HEAP8[$4_1 + 171 | 0] = 0;
     $0_1 = $6_1;
    }
    HEAP8[$0_1 | 0] = 0;
    $8 = fimport$21() | 0;
    $5_1 = HEAPU8[$4_1 + 171 | 0];
    $0_1 = $5_1 << 24 >> 24 < 0;
    $5_1 = $0_1 ? HEAP32[$4_1 + 164 >> 2] : $5_1 & 127;
    $7_1 = $1755($5_1 + 4 | 0);
    HEAP32[$7_1 >> 2] = $5_1;
    $1602($7_1 + 4 | 0, $0_1 ? HEAP32[$4_1 + 160 >> 2] : $6_1, $5_1);
    HEAP32[$3 >> 2] = $7_1;
    $0_1 = fimport$1(49072, $3 | 0) | 0;
    HEAP32[$3 >> 2] = 0;
    $5_1 = fimport$1(72724, $3 | 0) | 0;
    fimport$3($8 | 0, $5_1 | 0, $0_1 | 0);
    fimport$4($5_1 | 0);
    fimport$4($0_1 | 0);
    HEAP32[$3 >> 2] = $1_1;
    $0_1 = fimport$1(72724, $3 | 0) | 0;
    fimport$10(HEAP32[$4_1 + 152 >> 2]);
    HEAP32[$3 >> 2] = HEAP32[$4_1 + 152 >> 2];
    fimport$10($0_1 | 0);
    HEAP32[$3 + 8 >> 2] = $0_1;
    fimport$10($8 | 0);
    HEAP32[$3 + 16 >> 2] = $8;
    $5_1 = fimport$16(HEAP32[$4_1 + 148 >> 2], 3, 53512, $3 | 0) | 0;
    fimport$4($0_1 | 0);
    HEAP32[$3 >> 2] = 0;
    $0_1 = fimport$1(72724, $3 | 0) | 0;
    $7_1 = fimport$7($8 | 0, $0_1 | 0) | 0;
    fimport$4($0_1 | 0);
    $9 = +fimport$5($7_1 | 0, 49072, $3 + 28 | 0);
    label$6 : {
     if ($9 < 4294967296.0 & $9 >= 0.0) {
      $10_1 = ~~$9 >>> 0;
      break label$6;
     }
     $10_1 = 0;
    }
    $1_1 = HEAP32[$10_1 >> 2];
    if ($1_1 >>> 0 >= 2147483632) {
     break label$1
    }
    $12_1 = HEAP32[$3 + 28 >> 2];
    label$8 : {
     if ($1_1 >>> 0 <= 10) {
      HEAP8[$3 + 11 | 0] = $1_1;
      $0_1 = $3;
      break label$8;
     }
     $11_1 = ($1_1 | 15) + 1 | 0;
     $0_1 = $1782($11_1);
     HEAP32[$3 + 8 >> 2] = $11_1 | -2147483648;
     HEAP32[$3 >> 2] = $0_1;
     HEAP32[$3 + 4 >> 2] = $1_1;
    }
    if ($1_1) {
     $1602($0_1, $10_1 + 4 | 0, $1_1)
    }
    HEAP8[$0_1 + $1_1 | 0] = 0;
    fimport$6($12_1 | 0);
    if (HEAP8[$4_1 + 171 | 0] < 0) {
     $1756(HEAP32[$6_1 >> 2])
    }
    $0_1 = HEAP32[$3 + 4 >> 2];
    HEAP32[$6_1 >> 2] = HEAP32[$3 >> 2];
    HEAP32[$6_1 + 4 >> 2] = $0_1;
    HEAP32[$6_1 + 8 >> 2] = HEAP32[$3 + 8 >> 2];
    HEAP8[$3 + 11 | 0] = 0;
    HEAP8[$3 | 0] = 0;
    fimport$4($7_1 | 0);
    HEAP32[$2_1 >> 2] = HEAP8[$4_1 + 171 | 0] < 0 ? HEAP32[$4_1 + 160 >> 2] : $6_1;
    $9 = +fimport$5($5_1 | 0, 72652, $3 | 0);
    fimport$6(HEAP32[$3 >> 2]);
    fimport$4($5_1 | 0);
    fimport$4($8 | 0);
    $0_1 = $9 != 0.0;
   }
   global$0 = $3 + 32 | 0;
   return $0_1 | 0;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1579($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0.0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $2_1 = HEAP32[23915];
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = fimport$1(72724, $0_1 | 0) | 0;
  fimport$10(HEAP32[$2_1 + 84 >> 2]);
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 84 >> 2];
  fimport$10($1_1 | 0);
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  $2_1 = fimport$16(HEAP32[$2_1 + 80 >> 2], 2, 55540, $0_1 | 0) | 0;
  $4_1 = +fimport$5($2_1 | 0, 72808, $0_1 | 0);
  fimport$6(HEAP32[$0_1 >> 2]);
  fimport$4($2_1 | 0);
  fimport$4($1_1 | 0);
  global$0 = $0_1 + 16 | 0;
  $3 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround($4_1);
  }
  return Math_fround($3);
 }
 
 function $1580($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = Math_fround(0), $4_1 = 0.0;
  $0_1 = global$0 - 16 | 0;
  global$0 = $0_1;
  $2_1 = HEAP32[23915];
  HEAP32[$0_1 >> 2] = $1_1;
  $1_1 = fimport$1(72724, $0_1 | 0) | 0;
  fimport$10(HEAP32[$2_1 + 92 >> 2]);
  HEAP32[$0_1 >> 2] = HEAP32[$2_1 + 92 >> 2];
  fimport$10($1_1 | 0);
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  $2_1 = fimport$16(HEAP32[$2_1 + 88 >> 2], 2, 55540, $0_1 | 0) | 0;
  $4_1 = +fimport$5($2_1 | 0, 72808, $0_1 | 0);
  fimport$6(HEAP32[$0_1 >> 2]);
  fimport$4($2_1 | 0);
  fimport$4($1_1 | 0);
  global$0 = $0_1 + 16 | 0;
  $3 = Math_fround(3402823466385288598117041.0e14);
  label$1 : {
   if ($4_1 >= 3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround(-3402823466385288598117041.0e14);
   if ($4_1 <= -3402823466385288598117041.0e14) {
    break label$1
   }
   $3 = Math_fround($4_1);
  }
  return Math_fround($3);
 }
 
 function $1581($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[$0_1 + 12 >> 2];
  HEAP32[$1_1 + 8 >> 2] = 0;
  HEAP32[$1_1 + 12 >> 2] = 0;
  $2_1 = $763($2_1, $1_1 + 8 | 0);
  $3 = HEAP32[$2_1 + 4 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 + 8 >> 2] = $3;
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1582($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $3 = 0.0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[23915];
  HEAP32[$1_1 >> 2] = $0_1;
  $0_1 = fimport$1(72760, $1_1 | 0) | 0;
  fimport$10($0_1 | 0);
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10(HEAP32[$2_1 + 180 >> 2]);
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$2_1 + 180 >> 2];
  $2_1 = fimport$16(HEAP32[$2_1 + 172 >> 2], 2, 56336, $1_1 | 0) | 0;
  $3 = +fimport$5($2_1 | 0, 72620, $1_1 | 0);
  fimport$6(HEAP32[$1_1 >> 2]);
  fimport$4($2_1 | 0);
  fimport$4($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
  if ($3 < 4294967296.0 & $3 >= 0.0) {
   $0_1 = ~~$3 >>> 0
  } else {
   $0_1 = 0
  }
  return $0_1 | 0;
 }
 
 function $1583($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $2_1 = HEAP32[23915];
  HEAP32[$1_1 >> 2] = $0_1;
  $0_1 = fimport$1(72620, $1_1 | 0) | 0;
  fimport$10($0_1 | 0);
  HEAP32[$1_1 >> 2] = $0_1;
  fimport$10(HEAP32[$2_1 + 180 >> 2]);
  HEAP32[$1_1 + 8 >> 2] = HEAP32[$2_1 + 180 >> 2];
  fimport$4(fimport$16(HEAP32[$2_1 + 176 >> 2], 2, 56336, $1_1 | 0) | 0);
  fimport$4($0_1 | 0);
  global$0 = $1_1 + 16 | 0;
 }
 
 function $1585($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = $1697($0_1) + 1 | 0;
  $2_1 = $1755($1_1);
  if ($2_1) {
   $0_1 = $1602($2_1, $0_1, $1_1)
  } else {
   $0_1 = 0
  }
  return $0_1 | 0;
 }
 
 function $1586() {
  var $0_1 = 0;
  $0_1 = HEAP32[23972];
  if ($0_1) {
   while (1) {
    FUNCTION_TABLE[HEAP32[$0_1 >> 2]]();
    $0_1 = HEAP32[$0_1 + 4 >> 2];
    if ($0_1) {
     continue
    }
    break;
   }
  }
 }
 
 function $1587($0_1) {
  HEAP32[$0_1 + 4 >> 2] = HEAP32[23972];
  HEAP32[23972] = $0_1;
 }
 
 function $1588() {
  fimport$22(72608, 11876);
  fimport$23(72652, 8095, 1, 1, 0);
  fimport$24(72664, 6478, 1, -128, 127);
  fimport$24(72688, 6471, 1, -128, 127);
  fimport$24(72676, 6469, 1, 0, 255);
  fimport$24(72700, 2708, 2, -32768, 32767);
  fimport$24(72712, 2699, 2, 0, 65535);
  fimport$24(72724, 3028, 4, -2147483648, 2147483647);
  fimport$24(72736, 3019, 4, 0, -1);
  fimport$24(72748, 8849, 4, -2147483648, 2147483647);
  fimport$24(72760, 8840, 4, 0, -1);
  $1931(72772, 3885, -2147483648, 2147483647);
  $1931(72784, 3884, 0, -1);
  fimport$25(72796, 3811, 4);
  fimport$25(72808, 11336, 8);
  fimport$26(49072, 8880);
  fimport$26(56416, 15949);
  fimport$27(56488, 4, 8854);
  fimport$27(56564, 2, 8892);
  fimport$27(56640, 4, 8907);
  fimport$28(48496, 8329);
  fimport$29(49896, 0, 15880);
  fimport$29(54144, 0, 15982);
  fimport$29(51984, 1, 15910);
  fimport$29(54304, 2, 15512);
  fimport$29(54404, 3, 15543);
  fimport$29(54504, 4, 15583);
  fimport$29(54604, 5, 15612);
  fimport$29(56680, 4, 16039);
  fimport$29(56720, 5, 16069);
  fimport$29(54144, 0, 15714);
  fimport$29(51984, 1, 15681);
  fimport$29(54304, 2, 15780);
  fimport$29(54404, 3, 15746);
  fimport$29(54504, 4, 15847);
  fimport$29(54604, 5, 15813);
  fimport$29(54704, 6, 15650);
  fimport$29(54804, 7, 16108);
 }
 
 function $1590($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3 = 0, $4_1 = Math_fround(0);
  $3 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $3 & 2147483647;
  if ($2_1 >>> 0 >= 1065353216) {
   if (($2_1 | 0) == 1065353216) {
    return ($3 | 0) >= 0 ? Math_fround(0.0) : Math_fround(3.141592502593994)
   }
   return Math_fround(Math_fround(0.0) / Math_fround($0_1 - $0_1));
  }
  label$3 : {
   if ($2_1 >>> 0 <= 1056964607) {
    $1_1 = Math_fround(1.570796251296997);
    if ($2_1 >>> 0 < 847249409) {
     break label$3
    }
    return Math_fround(Math_fround(Math_fround(Math_fround(7.549789415861596e-08) - Math_fround($0_1 * $1591(Math_fround($0_1 * $0_1)))) - $0_1) + Math_fround(1.570796251296997));
   }
   if (($3 | 0) < 0) {
    $0_1 = Math_fround(Math_fround($0_1 + Math_fround(1.0)) * Math_fround(.5));
    $1_1 = Math_fround(Math_sqrt($0_1));
    $0_1 = Math_fround(Math_fround(1.570796251296997) - Math_fround($1_1 + Math_fround(Math_fround($1_1 * $1591($0_1)) + Math_fround(-7.549789415861596e-08))));
    return Math_fround($0_1 + $0_1);
   }
   $1_1 = Math_fround(Math_fround(Math_fround(1.0) - $0_1) * Math_fround(.5));
   $4_1 = Math_fround(Math_sqrt($1_1));
   $0_1 = (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($4_1), wasm2js_scratch_load_i32(2)) & -4096), wasm2js_scratch_load_f32());
   $0_1 = Math_fround(Math_fround(Math_fround($4_1 * $1591($1_1)) + Math_fround(Math_fround($1_1 - Math_fround($0_1 * $0_1)) / Math_fround($4_1 + $0_1))) + $0_1);
   $1_1 = Math_fround($0_1 + $0_1);
  }
  return $1_1;
 }
 
 function $1591($0_1) {
  return Math_fround(Math_fround(Math_fround(Math_fround($0_1 * Math_fround(Math_fround($0_1 * Math_fround(-.008656363002955914)) + Math_fround(-.04274342209100723))) + Math_fround(.16666586697101593)) * $0_1) / Math_fround(Math_fround($0_1 * Math_fround(-.7066296339035034)) + Math_fround(1.0)));
 }
 
 function $1594($0_1) {
  var $1_1 = 0, $2_1 = Math_fround(0), $3 = 0, $4_1 = Math_fround(0), $5_1 = 0, $6_1 = Math_fround(0);
  $5_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $1_1 = $5_1 & 2147483647;
  if ($1_1 >>> 0 >= 1283457024) {
   return ((wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & 2147483647) >>> 0 > 2139095040 ? $0_1 : (wasm2js_scratch_store_i32(2, (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2)) & -2147483648 | 1070141402), wasm2js_scratch_load_f32())
  }
  label$2 : {
   label$3 : {
    if ($1_1 >>> 0 <= 1054867455) {
     $3 = -1;
     if ($1_1 >>> 0 >= 964689920) {
      break label$3
     }
     break label$2;
    }
    $0_1 = Math_fround(Math_abs($0_1));
    if ($1_1 >>> 0 <= 1066926079) {
     if ($1_1 >>> 0 <= 1060110335) {
      $0_1 = Math_fround(Math_fround(Math_fround($0_1 + $0_1) + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(2.0)));
      $3 = 0;
      break label$3;
     }
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.0)) / Math_fround($0_1 + Math_fround(1.0)));
     $3 = 1;
     break label$3;
    }
    if ($1_1 >>> 0 <= 1075576831) {
     $0_1 = Math_fround(Math_fround($0_1 + Math_fround(-1.5)) / Math_fround(Math_fround($0_1 * Math_fround(1.5)) + Math_fround(1.0)));
     $3 = 2;
     break label$3;
    }
    $0_1 = Math_fround(Math_fround(-1.0) / $0_1);
    $3 = 3;
   }
   $4_1 = Math_fround($0_1 * $0_1);
   $2_1 = Math_fround($4_1 * $4_1);
   $6_1 = Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(-.106480173766613)) + Math_fround(-.19999158382415771)));
   $2_1 = Math_fround($4_1 * Math_fround(Math_fround($2_1 * Math_fround(Math_fround($2_1 * Math_fround(.06168760731816292)) + Math_fround(.14253635704517365))) + Math_fround(.333333283662796)));
   if ($1_1 >>> 0 <= 1054867455) {
    return Math_fround($0_1 - Math_fround($0_1 * Math_fround($6_1 + $2_1)))
   }
   $1_1 = $3 << 2;
   $0_1 = Math_fround(HEAPF32[$1_1 + 56768 >> 2] - Math_fround(Math_fround(Math_fround($0_1 * Math_fround($6_1 + $2_1)) - HEAPF32[$1_1 + 56784 >> 2]) - $0_1));
   $0_1 = ($5_1 | 0) < 0 ? Math_fround(-$0_1) : $0_1;
  }
  return $0_1;
 }
 
 function $1597($0_1) {
  var $1_1 = 0.0;
  $0_1 = $0_1 * $0_1;
  $1_1 = $0_1 * $0_1;
  return Math_fround($0_1 * $1_1 * ($0_1 * 2.439044879627741e-05 + -.001388676377460993) + ($1_1 * .04166662332373906 + ($0_1 * -.499999997251031 + 1.0)));
 }
 
 function $1598($0_1) {
  var $1_1 = 0.0, $2_1 = 0.0;
  $1_1 = $0_1 * $0_1;
  $2_1 = $1_1 * $0_1;
  return Math_fround($2_1 * ($1_1 * $1_1) * ($1_1 * 2.718311493989822e-06 + -1.9839334836096632e-04) + ($2_1 * ($1_1 * .008333329385889463 + -.16666666641626524) + $0_1));
 }
 
 function $1600($0_1, $1_1) {
  var $2_1 = 0, $3 = 0.0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0.0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0;
  $14 = global$0 - 16 | 0;
  global$0 = $14;
  $18_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $4_1 = $18_1 & 2147483647;
  label$1 : {
   if ($4_1 >>> 0 <= 1305022426) {
    $9 = +$0_1;
    $3 = $9 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $17_1 = $9 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
    HEAPF64[$1_1 >> 3] = $17_1;
    $4_1 = Math_abs($3) < 2147483648.0 ? ~~$3 : -2147483648;
    if ($17_1 < -.7853981852531433) {
     $3 = $3 + -1.0;
     HEAPF64[$1_1 >> 3] = $9 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
     $4_1 = $4_1 - 1 | 0;
     break label$1;
    }
    if (!($17_1 > .7853981852531433)) {
     break label$1
    }
    $3 = $3 + 1.0;
    HEAPF64[$1_1 >> 3] = $9 + $3 * -1.5707963109016418 + $3 * -1.5893254773528196e-08;
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   if ($4_1 >>> 0 >= 2139095040) {
    HEAPF64[$1_1 >> 3] = Math_fround($0_1 - $0_1);
    $4_1 = 0;
    break label$1;
   }
   $2_1 = $4_1;
   $4_1 = ($4_1 >>> 23 | 0) - 150 | 0;
   HEAPF64[$14 + 8 >> 3] = (wasm2js_scratch_store_i32(2, $2_1 - ($4_1 << 23) | 0), wasm2js_scratch_load_f32());
   $19 = $14 + 8 | 0;
   $6_1 = global$0 - 560 | 0;
   global$0 = $6_1;
   $2_1 = ($4_1 - 3 | 0) / 24 | 0;
   $15_1 = ($2_1 | 0) > 0 ? $2_1 : 0;
   $8 = $4_1 + Math_imul($15_1, -24) | 0;
   $11_1 = HEAP32[14200];
   if (($11_1 | 0) >= 0) {
    $4_1 = $11_1 + 1 | 0;
    $2_1 = $15_1;
    while (1) {
     HEAPF64[($6_1 + 320 | 0) + ($5_1 << 3) >> 3] = ($2_1 | 0) < 0 ? 0.0 : +HEAP32[($2_1 << 2) + 56816 >> 2];
     $2_1 = $2_1 + 1 | 0;
     $5_1 = $5_1 + 1 | 0;
     if (($4_1 | 0) != ($5_1 | 0)) {
      continue
     }
     break;
    };
   }
   $10_1 = $8 - 24 | 0;
   $4_1 = 0;
   $5_1 = ($11_1 | 0) > 0 ? $11_1 : 0;
   while (1) {
    $2_1 = 0;
    $3 = 0.0;
    while (1) {
     $3 = HEAPF64[($2_1 << 3) + $19 >> 3] * HEAPF64[($6_1 + 320 | 0) + ($4_1 - $2_1 << 3) >> 3] + $3;
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != 1) {
      continue
     }
     break;
    };
    HEAPF64[($4_1 << 3) + $6_1 >> 3] = $3;
    $2_1 = ($4_1 | 0) == ($5_1 | 0);
    $4_1 = $4_1 + 1 | 0;
    if (!$2_1) {
     continue
    }
    break;
   };
   $23_1 = 47 - $8 | 0;
   $20_1 = 48 - $8 | 0;
   $24 = $8 - 25 | 0;
   $4_1 = $11_1;
   label$9 : {
    while (1) {
     $3 = HEAPF64[($4_1 << 3) + $6_1 >> 3];
     $2_1 = 0;
     $5_1 = $4_1;
     $13 = ($4_1 | 0) <= 0;
     if (!$13) {
      while (1) {
       $12_1 = ($6_1 + 480 | 0) + ($2_1 << 2) | 0;
       $9 = $3 * 5.9604644775390625e-08;
       label$13 : {
        if (Math_abs($9) < 2147483648.0) {
         $7_1 = ~~$9;
         break label$13;
        }
        $7_1 = -2147483648;
       }
       $9 = +($7_1 | 0);
       $3 = $9 * -16777216.0 + $3;
       label$15 : {
        if (Math_abs($3) < 2147483648.0) {
         $7_1 = ~~$3;
         break label$15;
        }
        $7_1 = -2147483648;
       }
       HEAP32[$12_1 >> 2] = $7_1;
       $5_1 = $5_1 - 1 | 0;
       $3 = HEAPF64[($5_1 << 3) + $6_1 >> 3] + $9;
       $2_1 = $2_1 + 1 | 0;
       if (($4_1 | 0) != ($2_1 | 0)) {
        continue
       }
       break;
      }
     }
     $3 = $1687($3, $10_1);
     $3 = $3 + Math_floor($3 * .125) * -8.0;
     label$17 : {
      if (Math_abs($3) < 2147483648.0) {
       $12_1 = ~~$3;
       break label$17;
      }
      $12_1 = -2147483648;
     }
     $3 = $3 - +($12_1 | 0);
     label$19 : {
      label$20 : {
       label$21 : {
        $21_1 = ($10_1 | 0) <= 0;
        label$22 : {
         if (!$21_1) {
          $5_1 = ($6_1 + ($4_1 << 2) | 0) + 476 | 0;
          $7_1 = HEAP32[$5_1 >> 2];
          $2_1 = $7_1 >> $20_1;
          $16_1 = $5_1;
          $5_1 = $7_1 - ($2_1 << $20_1) | 0;
          HEAP32[$16_1 >> 2] = $5_1;
          $12_1 = $2_1 + $12_1 | 0;
          $7_1 = $5_1 >> $23_1;
          break label$22;
         }
         if ($10_1) {
          break label$21
         }
         $7_1 = HEAP32[($6_1 + ($4_1 << 2) | 0) + 476 >> 2] >> 23;
        }
        if (($7_1 | 0) <= 0) {
         break label$19
        }
        break label$20;
       }
       $7_1 = 2;
       if ($3 >= .5) {
        break label$20
       }
       $7_1 = 0;
       break label$19;
      }
      $2_1 = 0;
      $5_1 = 0;
      if (!$13) {
       while (1) {
        $16_1 = ($6_1 + 480 | 0) + ($2_1 << 2) | 0;
        $13 = HEAP32[$16_1 >> 2];
        $22_1 = 16777215;
        label$26 : {
         label$27 : {
          if ($5_1) {
           break label$27
          }
          $22_1 = 16777216;
          if ($13) {
           break label$27
          }
          $5_1 = 0;
          break label$26;
         }
         HEAP32[$16_1 >> 2] = $22_1 - $13;
         $5_1 = 1;
        }
        $2_1 = $2_1 + 1 | 0;
        if (($4_1 | 0) != ($2_1 | 0)) {
         continue
        }
        break;
       }
      }
      label$28 : {
       if ($21_1) {
        break label$28
       }
       $2_1 = 8388607;
       label$29 : {
        switch ($24 | 0) {
        case 1:
         $2_1 = 4194303;
         break;
        case 0:
         break label$29;
        default:
         break label$28;
        };
       }
       $13 = ($6_1 + ($4_1 << 2) | 0) + 476 | 0;
       HEAP32[$13 >> 2] = HEAP32[$13 >> 2] & $2_1;
      }
      $12_1 = $12_1 + 1 | 0;
      if (($7_1 | 0) != 2) {
       break label$19
      }
      $3 = 1.0 - $3;
      $7_1 = 2;
      if (!$5_1) {
       break label$19
      }
      $3 = $3 - $1687(1.0, $10_1);
     }
     if ($3 == 0.0) {
      $5_1 = 0;
      label$32 : {
       $2_1 = $4_1;
       if (($11_1 | 0) >= ($4_1 | 0)) {
        break label$32
       }
       while (1) {
        $2_1 = $2_1 - 1 | 0;
        $5_1 = HEAP32[($6_1 + 480 | 0) + ($2_1 << 2) >> 2] | $5_1;
        if (($2_1 | 0) > ($11_1 | 0)) {
         continue
        }
        break;
       };
       if (!$5_1) {
        break label$32
       }
       $8 = $10_1;
       while (1) {
        $8 = $8 - 24 | 0;
        $4_1 = $4_1 - 1 | 0;
        if (!HEAP32[($6_1 + 480 | 0) + ($4_1 << 2) >> 2]) {
         continue
        }
        break;
       };
       break label$9;
      }
      $2_1 = 1;
      while (1) {
       $5_1 = $2_1;
       $2_1 = $2_1 + 1 | 0;
       if (!HEAP32[($6_1 + 480 | 0) + ($11_1 - $5_1 << 2) >> 2]) {
        continue
       }
       break;
      };
      $5_1 = $4_1 + $5_1 | 0;
      while (1) {
       $4_1 = $4_1 + 1 | 0;
       HEAPF64[($6_1 + 320 | 0) + ($4_1 << 3) >> 3] = HEAP32[($4_1 + $15_1 << 2) + 56816 >> 2];
       $2_1 = 0;
       $3 = 0.0;
       while (1) {
        $3 = HEAPF64[($2_1 << 3) + $19 >> 3] * HEAPF64[($6_1 + 320 | 0) + ($4_1 - $2_1 << 3) >> 3] + $3;
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != 1) {
         continue
        }
        break;
       };
       HEAPF64[($4_1 << 3) + $6_1 >> 3] = $3;
       if (($4_1 | 0) < ($5_1 | 0)) {
        continue
       }
       break;
      };
      $4_1 = $5_1;
      continue;
     }
     break;
    };
    $3 = $1687($3, 24 - $8 | 0);
    label$39 : {
     if ($3 >= 16777216.0) {
      $10_1 = ($6_1 + 480 | 0) + ($4_1 << 2) | 0;
      $9 = $3 * 5.9604644775390625e-08;
      label$41 : {
       if (Math_abs($9) < 2147483648.0) {
        $2_1 = ~~$9;
        break label$41;
       }
       $2_1 = -2147483648;
      }
      $3 = +($2_1 | 0) * -16777216.0 + $3;
      label$43 : {
       if (Math_abs($3) < 2147483648.0) {
        $5_1 = ~~$3;
        break label$43;
       }
       $5_1 = -2147483648;
      }
      HEAP32[$10_1 >> 2] = $5_1;
      $4_1 = $4_1 + 1 | 0;
      break label$39;
     }
     $2_1 = Math_abs($3) < 2147483648.0 ? ~~$3 : -2147483648;
     $8 = $10_1;
    }
    HEAP32[($6_1 + 480 | 0) + ($4_1 << 2) >> 2] = $2_1;
   }
   $3 = $1687(1.0, $8);
   label$47 : {
    if (($4_1 | 0) < 0) {
     break label$47
    }
    $2_1 = $4_1;
    while (1) {
     $5_1 = $2_1;
     HEAPF64[($2_1 << 3) + $6_1 >> 3] = $3 * +HEAP32[($6_1 + 480 | 0) + ($2_1 << 2) >> 2];
     $2_1 = $2_1 - 1 | 0;
     $3 = $3 * 5.9604644775390625e-08;
     if ($5_1) {
      continue
     }
     break;
    };
    if (($4_1 | 0) < 0) {
     break label$47
    }
    $5_1 = $4_1;
    while (1) {
     $3 = 0.0;
     $2_1 = 0;
     $8 = $4_1 - $5_1 | 0;
     $10_1 = ($8 | 0) > ($11_1 | 0) ? $11_1 : $8;
     if (($10_1 | 0) >= 0) {
      while (1) {
       $3 = HEAPF64[($2_1 << 3) + 59584 >> 3] * HEAPF64[($2_1 + $5_1 << 3) + $6_1 >> 3] + $3;
       $15_1 = ($2_1 | 0) != ($10_1 | 0);
       $2_1 = $2_1 + 1 | 0;
       if ($15_1) {
        continue
       }
       break;
      }
     }
     HEAPF64[($6_1 + 160 | 0) + ($8 << 3) >> 3] = $3;
     $2_1 = ($5_1 | 0) > 0;
     $5_1 = $5_1 - 1 | 0;
     if ($2_1) {
      continue
     }
     break;
    };
   }
   $3 = 0.0;
   if (($4_1 | 0) >= 0) {
    while (1) {
     $2_1 = $4_1;
     $4_1 = $4_1 - 1 | 0;
     $3 = $3 + HEAPF64[($6_1 + 160 | 0) + ($2_1 << 3) >> 3];
     if ($2_1) {
      continue
     }
     break;
    }
   }
   HEAPF64[$14 >> 3] = $7_1 ? -$3 : $3;
   global$0 = $6_1 + 560 | 0;
   $4_1 = $12_1 & 7;
   $3 = HEAPF64[$14 >> 3];
   if (($18_1 | 0) < 0) {
    HEAPF64[$1_1 >> 3] = -$3;
    $4_1 = 0 - $4_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $3;
  }
  global$0 = $14 + 16 | 0;
  return $4_1;
 }
 
 function $1601($0_1) {
  var $1_1 = Math_fround(0), $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $3 = $4_1 & 2147483647;
  label$1 : {
   if ($3 >>> 0 <= 1061752794) {
    $1_1 = Math_fround(1.0);
    if ($3 >>> 0 < 964689920) {
     break label$1
    }
    $1_1 = $1597(+$0_1);
    break label$1;
   }
   if ($3 >>> 0 <= 1081824209) {
    if ($3 >>> 0 >= 1075235812) {
     $1_1 = Math_fround(-$1597((($4_1 | 0) < 0 ? 3.141592653589793 : -3.141592653589793) + +$0_1));
     break label$1;
    }
    $5_1 = +$0_1;
    if (($4_1 | 0) < 0) {
     $1_1 = $1598($5_1 + 1.5707963267948966);
     break label$1;
    }
    $1_1 = $1598(1.5707963267948966 - $5_1);
    break label$1;
   }
   if ($3 >>> 0 <= 1088565717) {
    if ($3 >>> 0 >= 1085271520) {
     $1_1 = $1597((($4_1 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0_1);
     break label$1;
    }
    if (($4_1 | 0) < 0) {
     $1_1 = $1598(-4.71238898038469 - +$0_1);
     break label$1;
    }
    $1_1 = $1598(+$0_1 + -4.71238898038469);
    break label$1;
   }
   $1_1 = Math_fround($0_1 - $0_1);
   if ($3 >>> 0 >= 2139095040) {
    break label$1
   }
   label$10 : {
    switch ($1600($0_1, $2_1 + 8 | 0) & 3) {
    case 0:
     $1_1 = $1597(HEAPF64[$2_1 + 8 >> 3]);
     break label$1;
    case 1:
     $1_1 = $1598(-HEAPF64[$2_1 + 8 >> 3]);
     break label$1;
    case 2:
     $1_1 = Math_fround(-$1597(HEAPF64[$2_1 + 8 >> 3]));
     break label$1;
    default:
     break label$10;
    };
   }
   $1_1 = $1598(HEAPF64[$2_1 + 8 >> 3]);
  }
  $0_1 = $1_1;
  global$0 = $2_1 + 16 | 0;
  return $0_1;
 }
 
 function $1602($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  if ($2_1 >>> 0 >= 512) {
   fimport$30($0_1 | 0, $1_1 | 0, $2_1 | 0);
   return $0_1;
  }
  $4_1 = $0_1 + $2_1 | 0;
  label$2 : {
   if (!(($0_1 ^ $1_1) & 3)) {
    label$4 : {
     if (!($0_1 & 3)) {
      $2_1 = $0_1;
      break label$4;
     }
     if (!$2_1) {
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     while (1) {
      HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3)) {
       break label$4
      }
      if ($2_1 >>> 0 < $4_1 >>> 0) {
       continue
      }
      break;
     };
    }
    $3 = $4_1 & -4;
    label$8 : {
     if ($3 >>> 0 < 64) {
      break label$8
     }
     $5_1 = $3 + -64 | 0;
     if ($5_1 >>> 0 < $2_1 >>> 0) {
      break label$8
     }
     while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2];
      HEAP32[$2_1 + 8 >> 2] = HEAP32[$1_1 + 8 >> 2];
      HEAP32[$2_1 + 12 >> 2] = HEAP32[$1_1 + 12 >> 2];
      HEAP32[$2_1 + 16 >> 2] = HEAP32[$1_1 + 16 >> 2];
      HEAP32[$2_1 + 20 >> 2] = HEAP32[$1_1 + 20 >> 2];
      HEAP32[$2_1 + 24 >> 2] = HEAP32[$1_1 + 24 >> 2];
      HEAP32[$2_1 + 28 >> 2] = HEAP32[$1_1 + 28 >> 2];
      HEAP32[$2_1 + 32 >> 2] = HEAP32[$1_1 + 32 >> 2];
      HEAP32[$2_1 + 36 >> 2] = HEAP32[$1_1 + 36 >> 2];
      HEAP32[$2_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2];
      HEAP32[$2_1 + 44 >> 2] = HEAP32[$1_1 + 44 >> 2];
      HEAP32[$2_1 + 48 >> 2] = HEAP32[$1_1 + 48 >> 2];
      HEAP32[$2_1 + 52 >> 2] = HEAP32[$1_1 + 52 >> 2];
      HEAP32[$2_1 + 56 >> 2] = HEAP32[$1_1 + 56 >> 2];
      HEAP32[$2_1 + 60 >> 2] = HEAP32[$1_1 + 60 >> 2];
      $1_1 = $1_1 - -64 | 0;
      $2_1 = $2_1 - -64 | 0;
      if ($5_1 >>> 0 >= $2_1 >>> 0) {
       continue
      }
      break;
     };
    }
    if ($2_1 >>> 0 >= $3 >>> 0) {
     break label$2
    }
    while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($3 >>> 0 > $2_1 >>> 0) {
      continue
     }
     break;
    };
    break label$2;
   }
   if ($4_1 >>> 0 < 4) {
    $2_1 = $0_1;
    break label$2;
   }
   $3 = $4_1 - 4 | 0;
   if ($0_1 >>> 0 > $3 >>> 0) {
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   while (1) {
    HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
    HEAP8[$2_1 + 1 | 0] = HEAPU8[$1_1 + 1 | 0];
    HEAP8[$2_1 + 2 | 0] = HEAPU8[$1_1 + 2 | 0];
    HEAP8[$2_1 + 3 | 0] = HEAPU8[$1_1 + 3 | 0];
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($3 >>> 0 >= $2_1 >>> 0) {
     continue
    }
    break;
   };
  }
  if ($2_1 >>> 0 < $4_1 >>> 0) {
   while (1) {
    HEAP8[$2_1 | 0] = HEAPU8[$1_1 | 0];
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($4_1 | 0) != ($2_1 | 0)) {
     continue
    }
    break;
   }
  }
  return $0_1;
 }
 
 function $1603($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  label$1 : {
   if (($0_1 | 0) == ($1_1 | 0)) {
    break label$1
   }
   $4_1 = $0_1 + $2_1 | 0;
   if ($1_1 - $4_1 >>> 0 <= 0 - ($2_1 << 1) >>> 0) {
    return $1602($0_1, $1_1, $2_1)
   }
   $3 = ($0_1 ^ $1_1) & 3;
   label$3 : {
    label$4 : {
     if ($0_1 >>> 0 < $1_1 >>> 0) {
      if ($3) {
       $3 = $0_1;
       break label$3;
      }
      if (!($0_1 & 3)) {
       $3 = $0_1;
       break label$4;
      }
      $3 = $0_1;
      while (1) {
       if (!$2_1) {
        break label$1
       }
       HEAP8[$3 | 0] = HEAPU8[$1_1 | 0];
       $1_1 = $1_1 + 1 | 0;
       $2_1 = $2_1 - 1 | 0;
       $3 = $3 + 1 | 0;
       if ($3 & 3) {
        continue
       }
       break;
      };
      break label$4;
     }
     label$9 : {
      if ($3) {
       break label$9
      }
      if ($4_1 & 3) {
       while (1) {
        if (!$2_1) {
         break label$1
        }
        $2_1 = $2_1 - 1 | 0;
        $3 = $2_1 + $0_1 | 0;
        HEAP8[$3 | 0] = HEAPU8[$1_1 + $2_1 | 0];
        if ($3 & 3) {
         continue
        }
        break;
       }
      }
      if ($2_1 >>> 0 <= 3) {
       break label$9
      }
      while (1) {
       $2_1 = $2_1 - 4 | 0;
       HEAP32[$2_1 + $0_1 >> 2] = HEAP32[$1_1 + $2_1 >> 2];
       if ($2_1 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2_1) {
      break label$1
     }
     while (1) {
      $2_1 = $2_1 - 1 | 0;
      HEAP8[$2_1 + $0_1 | 0] = HEAPU8[$1_1 + $2_1 | 0];
      if ($2_1) {
       continue
      }
      break;
     };
     break label$1;
    }
    if ($2_1 >>> 0 <= 3) {
     break label$3
    }
    while (1) {
     HEAP32[$3 >> 2] = HEAP32[$1_1 >> 2];
     $1_1 = $1_1 + 4 | 0;
     $3 = $3 + 4 | 0;
     $2_1 = $2_1 - 4 | 0;
     if ($2_1 >>> 0 > 3) {
      continue
     }
     break;
    };
   }
   if (!$2_1) {
    break label$1
   }
   while (1) {
    HEAP8[$3 | 0] = HEAPU8[$1_1 | 0];
    $3 = $3 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 - 1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  return $0_1;
 }
 
 function $1604($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   HEAP8[$0_1 | 0] = $1_1;
   $3 = $0_1 + $2_1 | 0;
   HEAP8[$3 - 1 | 0] = $1_1;
   if ($2_1 >>> 0 < 3) {
    break label$1
   }
   HEAP8[$0_1 + 2 | 0] = $1_1;
   HEAP8[$0_1 + 1 | 0] = $1_1;
   HEAP8[$3 - 3 | 0] = $1_1;
   HEAP8[$3 - 2 | 0] = $1_1;
   if ($2_1 >>> 0 < 7) {
    break label$1
   }
   HEAP8[$0_1 + 3 | 0] = $1_1;
   HEAP8[$3 - 4 | 0] = $1_1;
   if ($2_1 >>> 0 < 9) {
    break label$1
   }
   $3 = 0 - $0_1 & 3;
   $4_1 = $3 + $0_1 | 0;
   $1_1 = Math_imul($1_1 & 255, 16843009);
   HEAP32[$4_1 >> 2] = $1_1;
   $3 = $2_1 - $3 & -4;
   $2_1 = $3 + $4_1 | 0;
   HEAP32[$2_1 - 4 >> 2] = $1_1;
   if ($3 >>> 0 < 9) {
    break label$1
   }
   HEAP32[$4_1 + 8 >> 2] = $1_1;
   HEAP32[$4_1 + 4 >> 2] = $1_1;
   HEAP32[$2_1 - 8 >> 2] = $1_1;
   HEAP32[$2_1 - 12 >> 2] = $1_1;
   if ($3 >>> 0 < 25) {
    break label$1
   }
   HEAP32[$4_1 + 24 >> 2] = $1_1;
   HEAP32[$4_1 + 20 >> 2] = $1_1;
   HEAP32[$4_1 + 16 >> 2] = $1_1;
   HEAP32[$4_1 + 12 >> 2] = $1_1;
   HEAP32[$2_1 - 16 >> 2] = $1_1;
   HEAP32[$2_1 - 20 >> 2] = $1_1;
   HEAP32[$2_1 - 24 >> 2] = $1_1;
   HEAP32[$2_1 - 28 >> 2] = $1_1;
   $6_1 = $4_1 & 4 | 24;
   $2_1 = $3 - $6_1 | 0;
   if ($2_1 >>> 0 < 32) {
    break label$1
   }
   $3 = __wasm_i64_mul($1_1, 0, 1, 1);
   $5_1 = i64toi32_i32$HIGH_BITS;
   $1_1 = $4_1 + $6_1 | 0;
   while (1) {
    HEAP32[$1_1 + 24 >> 2] = $3;
    HEAP32[$1_1 + 28 >> 2] = $5_1;
    HEAP32[$1_1 + 16 >> 2] = $3;
    HEAP32[$1_1 + 20 >> 2] = $5_1;
    HEAP32[$1_1 + 8 >> 2] = $3;
    HEAP32[$1_1 + 12 >> 2] = $5_1;
    HEAP32[$1_1 >> 2] = $3;
    HEAP32[$1_1 + 4 >> 2] = $5_1;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 - 32 | 0;
    if ($2_1 >>> 0 > 31) {
     continue
    }
    break;
   };
  }
  return $0_1;
 }
 
 function $1609($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1610($0_1);
  FUNCTION_TABLE[HEAP32[$0_1 + 12 >> 2]]($0_1) | 0;
  if (!(HEAP8[$0_1 | 0] & 1)) {
   $1_1 = HEAP32[$0_1 + 52 >> 2];
   if ($1_1) {
    HEAP32[$1_1 + 56 >> 2] = HEAP32[$0_1 + 56 >> 2]
   }
   $2_1 = HEAP32[$0_1 + 56 >> 2];
   if ($2_1) {
    HEAP32[$2_1 + 52 >> 2] = $1_1
   }
   if (($0_1 | 0) == HEAP32[23991]) {
    HEAP32[23991] = $2_1
   }
   $1756(HEAP32[$0_1 + 96 >> 2]);
   $1756($0_1);
  }
 }
 
 function $1610($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  if (!$0_1) {
   if (HEAP32[18352]) {
    $1_1 = $1610(HEAP32[18352])
   }
   if (HEAP32[18390]) {
    $1_1 = $1610(HEAP32[18390]) | $1_1
   }
   $0_1 = HEAP32[23991];
   if ($0_1) {
    while (1) {
     if (HEAP32[$0_1 + 20 >> 2] != HEAP32[$0_1 + 28 >> 2]) {
      $1_1 = $1610($0_1) | $1_1
     }
     $0_1 = HEAP32[$0_1 + 56 >> 2];
     if ($0_1) {
      continue
     }
     break;
    }
   }
   return $1_1;
  }
  $3 = HEAP32[$0_1 + 76 >> 2] >= 0;
  label$10 : {
   label$12 : {
    if (HEAP32[$0_1 + 20 >> 2] == HEAP32[$0_1 + 28 >> 2]) {
     break label$12
    }
    FUNCTION_TABLE[HEAP32[$0_1 + 36 >> 2]]($0_1, 0, 0) | 0;
    if (HEAP32[$0_1 + 20 >> 2]) {
     break label$12
    }
    $1_1 = -1;
    break label$10;
   }
   $1_1 = HEAP32[$0_1 + 8 >> 2];
   $2_1 = HEAP32[$0_1 + 4 >> 2];
   if (($1_1 | 0) != ($2_1 | 0)) {
    $1_1 = $2_1 - $1_1 | 0;
    FUNCTION_TABLE[HEAP32[$0_1 + 40 >> 2]]($0_1, $1_1, $1_1 >> 31, 1) | 0;
   }
   $1_1 = 0;
   HEAP32[$0_1 + 28 >> 2] = 0;
   HEAP32[$0_1 + 16 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 0;
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 8 >> 2] = 0;
   if (!$3) {
    break label$10
   }
  }
  return $1_1;
 }
 
 function $1612($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   $6_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
   $3 = $6_1 << 1;
   label$2 : {
    if (!$3) {
     break label$2
    }
    $2_1 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
    $7_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
    $4_1 = $7_1 >>> 23 & 255;
    if (($4_1 | 0) == 255) {
     break label$2
    }
    if (($2_1 & 2147483647) >>> 0 < 2139095041) {
     break label$1
    }
   }
   $0_1 = Math_fround($0_1 * $1_1);
   return Math_fround($0_1 / $0_1);
  }
  $2_1 = $7_1 << 1;
  if ($3 >>> 0 >= $2_1 >>> 0) {
   return ($2_1 | 0) == ($3 | 0) ? Math_fround($0_1 * Math_fround(0.0)) : $0_1
  }
  $5_1 = $6_1 >>> 23 & 255;
  label$4 : {
   if (!$4_1) {
    $4_1 = 0;
    $2_1 = $7_1 << 9;
    if (($2_1 | 0) >= 0) {
     while (1) {
      $4_1 = $4_1 - 1 | 0;
      $2_1 = $2_1 << 1;
      if (($2_1 | 0) >= 0) {
       continue
      }
      break;
     }
    }
    $2_1 = $7_1 << 1 - $4_1;
    break label$4;
   }
   $2_1 = $7_1 & 8388607 | 8388608;
  }
  label$8 : {
   if (!$5_1) {
    $5_1 = 0;
    $3 = $6_1 << 9;
    if (($3 | 0) >= 0) {
     while (1) {
      $5_1 = $5_1 - 1 | 0;
      $3 = $3 << 1;
      if (($3 | 0) >= 0) {
       continue
      }
      break;
     }
    }
    $6_1 = $6_1 << 1 - $5_1;
    break label$8;
   }
   $6_1 = $6_1 & 8388607 | 8388608;
  }
  if (($4_1 | 0) > ($5_1 | 0)) {
   while (1) {
    label$14 : {
     $3 = $2_1 - $6_1 | 0;
     if (($3 | 0) < 0) {
      break label$14
     }
     $2_1 = $3;
     if ($2_1) {
      break label$14
     }
     return Math_fround($0_1 * Math_fround(0.0));
    }
    $2_1 = $2_1 << 1;
    $4_1 = $4_1 - 1 | 0;
    if (($4_1 | 0) > ($5_1 | 0)) {
     continue
    }
    break;
   };
   $4_1 = $5_1;
  }
  label$15 : {
   $3 = $2_1 - $6_1 | 0;
   if (($3 | 0) < 0) {
    break label$15
   }
   $2_1 = $3;
   if ($2_1) {
    break label$15
   }
   return Math_fround($0_1 * Math_fround(0.0));
  }
  label$16 : {
   if ($2_1 >>> 0 > 8388607) {
    $3 = $2_1;
    break label$16;
   }
   while (1) {
    $4_1 = $4_1 - 1 | 0;
    $5_1 = $2_1 >>> 0 < 4194304;
    $3 = $2_1 << 1;
    $2_1 = $3;
    if ($5_1) {
     continue
    }
    break;
   };
  }
  return wasm2js_scratch_store_i32(2, $7_1 & -2147483648 | (($4_1 | 0) > 0 ? $3 - 8388608 | $4_1 << 23 : $3 >>> 1 - $4_1 | 0)), wasm2js_scratch_load_f32();
 }
 
 function $1614() {
  return 95900;
 }
 
 function $1616($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  $0_1 = $1752(fimport$40(HEAP32[$0_1 + 60 >> 2], $1_1 | 0, $2_1 | 0, $3 & 255, $4_1 + 8 | 0) | 0);
  global$0 = $4_1 + 16 | 0;
  i64toi32_i32$HIGH_BITS = $0_1 ? -1 : HEAP32[$4_1 + 12 >> 2];
  return ($0_1 ? -1 : HEAP32[$4_1 + 8 >> 2]) | 0;
 }
 
 function $1617($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = HEAP32[$0_1 + 28 >> 2];
  HEAP32[$3 + 16 >> 2] = $4_1;
  $5_1 = HEAP32[$0_1 + 20 >> 2];
  HEAP32[$3 + 28 >> 2] = $2_1;
  HEAP32[$3 + 24 >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[$3 + 20 >> 2] = $1_1;
  $5_1 = $1_1 + $2_1 | 0;
  $1_1 = $3 + 16 | 0;
  $8 = 2;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($1752(fimport$34(HEAP32[$0_1 + 60 >> 2], $1_1 | 0, 2, $3 + 12 | 0) | 0)) {
       $4_1 = $1_1;
       break label$4;
      }
      while (1) {
       $6_1 = HEAP32[$3 + 12 >> 2];
       if (($6_1 | 0) == ($5_1 | 0)) {
        break label$3
       }
       if (($6_1 | 0) < 0) {
        $4_1 = $1_1;
        break label$2;
       }
       $7_1 = HEAP32[$1_1 + 4 >> 2];
       $9 = $7_1 >>> 0 < $6_1 >>> 0;
       $4_1 = ($9 << 3) + $1_1 | 0;
       $7_1 = $6_1 - ($9 ? $7_1 : 0) | 0;
       HEAP32[$4_1 >> 2] = $7_1 + HEAP32[$4_1 >> 2];
       $1_1 = ($9 ? 12 : 4) + $1_1 | 0;
       HEAP32[$1_1 >> 2] = HEAP32[$1_1 >> 2] - $7_1;
       $5_1 = $5_1 - $6_1 | 0;
       $1_1 = $4_1;
       $8 = $8 - $9 | 0;
       if (!$1752(fimport$34(HEAP32[$0_1 + 60 >> 2], $1_1 | 0, $8 | 0, $3 + 12 | 0) | 0)) {
        continue
       }
       break;
      };
     }
     if (($5_1 | 0) != -1) {
      break label$2
     }
    }
    $1_1 = HEAP32[$0_1 + 44 >> 2];
    HEAP32[$0_1 + 28 >> 2] = $1_1;
    HEAP32[$0_1 + 20 >> 2] = $1_1;
    HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 48 >> 2];
    $1_1 = $2_1;
    break label$1;
   }
   HEAP32[$0_1 + 28 >> 2] = 0;
   HEAP32[$0_1 + 16 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 32;
   $1_1 = 0;
   if (($8 | 0) == 2) {
    break label$1
   }
   $1_1 = $2_1 - HEAP32[$4_1 + 4 >> 2] | 0;
  }
  global$0 = $3 + 32 | 0;
  return $1_1 | 0;
 }
 
 function $1618($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 16 >> 2] = $1_1;
  $3 = HEAP32[$0_1 + 48 >> 2];
  HEAP32[$4_1 + 20 >> 2] = $2_1 - (($3 | 0) != 0);
  $6_1 = HEAP32[$0_1 + 44 >> 2];
  HEAP32[$4_1 + 28 >> 2] = $3;
  HEAP32[$4_1 + 24 >> 2] = $6_1;
  $3 = 32;
  label$1 : {
   label$2 : {
    if (!$1752(fimport$35(HEAP32[$0_1 + 60 >> 2], $4_1 + 16 | 0, 2, $4_1 + 12 | 0) | 0)) {
     $3 = HEAP32[$4_1 + 12 >> 2];
     if (($3 | 0) > 0) {
      break label$2
     }
     $3 = $3 ? 32 : 16;
    }
    HEAP32[$0_1 >> 2] = $3 | HEAP32[$0_1 >> 2];
    break label$1;
   }
   $5_1 = $3;
   $6_1 = HEAP32[$4_1 + 20 >> 2];
   if ($6_1 >>> 0 >= $3 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[$0_1 + 44 >> 2];
   HEAP32[$0_1 + 4 >> 2] = $5_1;
   HEAP32[$0_1 + 8 >> 2] = $5_1 + ($3 - $6_1 | 0);
   if (HEAP32[$0_1 + 48 >> 2]) {
    HEAP32[$0_1 + 4 >> 2] = $5_1 + 1;
    HEAP8[($1_1 + $2_1 | 0) - 1 | 0] = HEAPU8[$5_1 | 0];
   }
   $5_1 = $2_1;
  }
  global$0 = $4_1 + 32 | 0;
  return $5_1 | 0;
 }
 
 function $1619($0_1) {
  return $0_1;
 }
 
 function $1620($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$36(HEAP32[$0_1 + 60 >> 2]) | 0;
 }
 
 function $1622($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  label$1 : {
   label$2 : {
    if (!$1693(13568, HEAP8[$1_1 | 0])) {
     HEAP32[23975] = 28;
     break label$2;
    }
    $2_1 = 2;
    if (!$1693($1_1, 43)) {
     $2_1 = HEAPU8[$1_1 | 0] != 114
    }
    $2_1 = $1693($1_1, 120) ? $2_1 | 128 : $2_1;
    $2_1 = $1693($1_1, 101) ? $2_1 | 524288 : $2_1;
    $4_1 = $2_1;
    $6_1 = $2_1 | 64;
    $2_1 = HEAPU8[$1_1 | 0];
    $4_1 = ($2_1 | 0) == 114 ? $4_1 : $6_1;
    $4_1 = ($2_1 | 0) == 119 ? $4_1 | 512 : $4_1;
    $2_1 = ($2_1 | 0) == 97 ? $4_1 | 1024 : $4_1;
    HEAP32[$5_1 >> 2] = 438;
    HEAP32[$5_1 + 4 >> 2] = 0;
    $0_1 = fimport$31(-100, $0_1 | 0, $2_1 | 32768, $5_1 | 0) | 0;
    if ($0_1 >>> 0 >= 4294963201) {
     HEAP32[23975] = 0 - $0_1;
     $0_1 = -1;
    }
    if (($0_1 | 0) < 0) {
     break label$1
    }
    $3 = global$0 - 32 | 0;
    global$0 = $3;
    label$10 : {
     label$21 : {
      label$3 : {
       if (!$1693(13568, HEAP8[$1_1 | 0])) {
        HEAP32[23975] = 28;
        break label$3;
       }
       $2_1 = $1755(1176);
       if ($2_1) {
        break label$21
       }
      }
      $1_1 = 0;
      break label$10;
     }
     $1604($2_1, 0, 144);
     if (!$1693($1_1, 43)) {
      HEAP32[$2_1 >> 2] = HEAPU8[$1_1 | 0] == 114 ? 8 : 4
     }
     label$6 : {
      if (HEAPU8[$1_1 | 0] != 97) {
       $1_1 = HEAP32[$2_1 >> 2];
       break label$6;
      }
      $1_1 = fimport$32($0_1 | 0, 3, 0) | 0;
      if (!($1_1 & 1024)) {
       $1_1 = $1_1 | 1024;
       HEAP32[$3 + 16 >> 2] = $1_1;
       HEAP32[$3 + 20 >> 2] = $1_1 >> 31;
       fimport$32($0_1 | 0, 4, $3 + 16 | 0) | 0;
      }
      $1_1 = HEAP32[$2_1 >> 2] | 128;
      HEAP32[$2_1 >> 2] = $1_1;
     }
     HEAP32[$2_1 + 80 >> 2] = -1;
     HEAP32[$2_1 + 48 >> 2] = 1024;
     HEAP32[$2_1 + 60 >> 2] = $0_1;
     HEAP32[$2_1 + 44 >> 2] = $2_1 + 152;
     label$9 : {
      if ($1_1 & 8) {
       break label$9
      }
      HEAP32[$3 >> 2] = $3 + 24;
      HEAP32[$3 + 4 >> 2] = 0;
      if (fimport$33($0_1 | 0, 21523, $3 | 0) | 0) {
       break label$9
      }
      HEAP32[$2_1 + 80 >> 2] = 10;
     }
     HEAP32[$2_1 + 40 >> 2] = 963;
     HEAP32[$2_1 + 36 >> 2] = 964;
     HEAP32[$2_1 + 32 >> 2] = 965;
     HEAP32[$2_1 + 12 >> 2] = 966;
     if (!HEAPU8[95905]) {
      HEAP32[$2_1 + 76 >> 2] = -1
     }
     HEAP32[$2_1 + 56 >> 2] = HEAP32[23991];
     $1_1 = HEAP32[23991];
     if ($1_1) {
      HEAP32[$1_1 + 52 >> 2] = $2_1
     }
     HEAP32[23991] = $2_1;
     $1_1 = $2_1;
    }
    global$0 = $3 + 32 | 0;
    $3 = $1_1;
    if ($1_1) {
     break label$1
    }
    fimport$36($0_1 | 0) | 0;
   }
   $3 = 0;
  }
  global$0 = $5_1 + 16 | 0;
  return $3;
 }
 
 function $1623($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  HEAP32[$0_1 + 72 >> 2] = $1_1 - 1 | $1_1;
  if (HEAP32[$0_1 + 20 >> 2] != HEAP32[$0_1 + 28 >> 2]) {
   FUNCTION_TABLE[HEAP32[$0_1 + 36 >> 2]]($0_1, 0, 0) | 0
  }
  HEAP32[$0_1 + 28 >> 2] = 0;
  HEAP32[$0_1 + 16 >> 2] = 0;
  HEAP32[$0_1 + 20 >> 2] = 0;
  $1_1 = HEAP32[$0_1 >> 2];
  if ($1_1 & 4) {
   HEAP32[$0_1 >> 2] = $1_1 | 32;
   return -1;
  }
  $2_1 = HEAP32[$0_1 + 44 >> 2] + HEAP32[$0_1 + 48 >> 2] | 0;
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  return $1_1 << 27 >> 31;
 }
 
 function $1625($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0;
  label$1 : {
   if ($3 >>> 0 >= 3) {
    HEAP32[23975] = 28;
    break label$1;
   }
   label$3 : {
    if (($3 | 0) != 1) {
     break label$3
    }
    $4_1 = HEAP32[$0_1 + 8 >> 2];
    if (!$4_1) {
     break label$3
    }
    $5_1 = $1_1;
    $4_1 = $4_1 - HEAP32[$0_1 + 4 >> 2] | 0;
    $1_1 = $1_1 - $4_1 | 0;
    $2_1 = $2_1 - (($4_1 >> 31) + ($4_1 >>> 0 > $5_1 >>> 0) | 0) | 0;
   }
   if (HEAP32[$0_1 + 20 >> 2] != HEAP32[$0_1 + 28 >> 2]) {
    FUNCTION_TABLE[HEAP32[$0_1 + 36 >> 2]]($0_1, 0, 0) | 0;
    if (!HEAP32[$0_1 + 20 >> 2]) {
     break label$1
    }
   }
   HEAP32[$0_1 + 28 >> 2] = 0;
   HEAP32[$0_1 + 16 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 0;
   FUNCTION_TABLE[HEAP32[$0_1 + 40 >> 2]]($0_1, $1_1, $2_1, $3) | 0;
   if ((i64toi32_i32$HIGH_BITS | 0) < 0) {
    break label$1
   }
   HEAP32[$0_1 + 4 >> 2] = 0;
   HEAP32[$0_1 + 8 >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] & -17;
   return 0;
  }
  return -1;
 }
 
 function $1627($0_1, $1_1, $2_1) {
  var $3 = 0;
  $3 = $1_1 >> 31;
  __inlined_func$1626 : {
   if (HEAP32[$0_1 + 76 >> 2] < 0) {
    $0_1 = $1625($0_1, $1_1, $3, $2_1);
    break __inlined_func$1626;
   }
   $0_1 = $1625($0_1, $1_1, $3, $2_1);
  }
  return $0_1;
 }
 
 function $1628($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[$0_1 + 40 >> 2];
  $3 = 1;
  $2_1 = FUNCTION_TABLE[$2_1 | 0]($0_1, 0, 0, HEAPU8[$0_1 | 0] & 128 ? (HEAP32[$0_1 + 20 >> 2] == HEAP32[$0_1 + 28 >> 2] ? 1 : 2) : $3) | 0;
  $1_1 = i64toi32_i32$HIGH_BITS;
  label$2 : {
   if (($1_1 | 0) < 0) {
    break label$2
   }
   $3 = HEAP32[$0_1 + 8 >> 2];
   if ($3) {
    $0_1 = $0_1 + 4 | 0
   } else {
    $3 = HEAP32[$0_1 + 28 >> 2];
    if (!$3) {
     break label$2
    }
    $0_1 = $0_1 + 20 | 0;
   }
   $0_1 = HEAP32[$0_1 >> 2] - $3 | 0;
   $2_1 = $0_1 + $2_1 | 0;
   $1_1 = ($0_1 >> 31) + $1_1 | 0;
   $1_1 = $0_1 >>> 0 > $2_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
  }
  i64toi32_i32$HIGH_BITS = $1_1;
  return $2_1;
 }
 
 function $1630($0_1) {
  var $1_1 = 0;
  __inlined_func$1629 : {
   if (HEAP32[$0_1 + 76 >> 2] < 0) {
    $0_1 = $1628($0_1);
    break __inlined_func$1629;
   }
   $0_1 = $1628($0_1);
  }
  $1_1 = i64toi32_i32$HIGH_BITS;
  if (!($0_1 >>> 0 < 2147483648 & ($1_1 | 0) <= 0 | ($1_1 | 0) < 0)) {
   HEAP32[23975] = 61;
   return -1;
  }
  return $0_1;
 }
 
 function $1631($0_1) {
  var $1_1 = 0;
  $1_1 = HEAP32[$0_1 + 72 >> 2];
  HEAP32[$0_1 + 72 >> 2] = $1_1 - 1 | $1_1;
  $1_1 = HEAP32[$0_1 >> 2];
  if ($1_1 & 8) {
   HEAP32[$0_1 >> 2] = $1_1 | 32;
   return -1;
  }
  HEAP32[$0_1 + 4 >> 2] = 0;
  HEAP32[$0_1 + 8 >> 2] = 0;
  $1_1 = HEAP32[$0_1 + 44 >> 2];
  HEAP32[$0_1 + 28 >> 2] = $1_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  HEAP32[$0_1 + 16 >> 2] = $1_1 + HEAP32[$0_1 + 48 >> 2];
  return 0;
 }
 
 function $1632($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $3 = HEAP32[$2_1 + 16 >> 2];
  label$1 : {
   if (!$3) {
    if ($1631($2_1)) {
     break label$1
    }
    $3 = HEAP32[$2_1 + 16 >> 2];
   }
   $5_1 = HEAP32[$2_1 + 20 >> 2];
   if ($1_1 >>> 0 > $3 - $5_1 >>> 0) {
    return FUNCTION_TABLE[HEAP32[$2_1 + 36 >> 2]]($2_1, $0_1, $1_1) | 0
   }
   label$4 : {
    if (HEAP32[$2_1 + 80 >> 2] < 0) {
     $3 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    while (1) {
     $3 = $4_1;
     if (!$3) {
      $3 = 0;
      break label$4;
     }
     $4_1 = $3 - 1 | 0;
     if (HEAPU8[$4_1 + $0_1 | 0] != 10) {
      continue
     }
     break;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[$2_1 + 36 >> 2]]($2_1, $0_1, $3) | 0;
    if ($4_1 >>> 0 < $3 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3 | 0;
    $1_1 = $1_1 - $3 | 0;
    $5_1 = HEAP32[$2_1 + 20 >> 2];
   }
   $1602($5_1, $0_1, $1_1);
   HEAP32[$2_1 + 20 >> 2] = HEAP32[$2_1 + 20 >> 2] + $1_1;
   $4_1 = $1_1 + $3 | 0;
  }
  return $4_1;
 }
 
 function $1633($0_1, $1_1, $2_1) {
  $1632($0_1, $1_1, $2_1);
 }
 
 function $1635($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF64[$1_1 + 8 >> 3] = $0_1;
  return HEAPF64[$1_1 + 8 >> 3];
 }
 
 function $1636($0_1) {
  $0_1 = $0_1 - $0_1;
  return $0_1 / $0_1;
 }
 
 function $1637($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0.0, $4_1 = 0.0, $5_1 = 0.0, $6_1 = 0, $7_1 = 0.0, $8 = 0.0, $9 = 0.0, $10_1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  $2_1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  $1_1 = $2_1 >>> 16 | 0;
  wasm2js_scratch_store_f64(+$0_1);
  $2_1 = wasm2js_scratch_load_i32(1) | 0;
  $6_1 = wasm2js_scratch_load_i32(0) | 0;
  if ($2_1 - 1072562176 >>> 0 <= 198911) {
   if (!(($6_1 | 0) != 0 | ($2_1 | 0) != 1072693248)) {
    return 0.0
   }
   $0_1 = $0_1 + -1.0;
   $3 = $0_1 * 134217728.0;
   $3 = $0_1 + $3 - $3;
   $7_1 = HEAPF64[7463];
   $8 = $3 * $3 * $7_1;
   $9 = $0_1 + $8;
   $4_1 = $0_1 * $0_1;
   $5_1 = $0_1 * $4_1;
   return $9 + ($5_1 * ($5_1 * ($5_1 * ($5_1 * HEAPF64[7473] + ($4_1 * HEAPF64[7472] + ($0_1 * HEAPF64[7471] + HEAPF64[7470]))) + ($4_1 * HEAPF64[7469] + ($0_1 * HEAPF64[7468] + HEAPF64[7467]))) + ($4_1 * HEAPF64[7466] + ($0_1 * HEAPF64[7465] + HEAPF64[7464]))) + (($0_1 - $3) * $7_1 * ($0_1 + $3) + ($8 + ($0_1 - $9))));
  }
  label$3 : {
   if ($1_1 - 32752 >>> 0 <= 4294934559) {
    if (!($2_1 & 2147483647 | $6_1)) {
     return $1635(-1.0) / 0.0
    }
    if (!$6_1 & ($2_1 | 0) == 2146435072) {
     break label$3
    }
    if (!(($1_1 & 32752) != 32752 & $1_1 >>> 0 <= 32767)) {
     return $1636($0_1)
    }
    wasm2js_scratch_store_f64(+($0_1 * 4503599627370496.0));
    $2_1 = wasm2js_scratch_load_i32(1) | 0;
    $6_1 = wasm2js_scratch_load_i32(0) | 0;
    $2_1 = $2_1 - 54525952 | 0;
   }
   $1_1 = $2_1 - 1072037888 | 0;
   $10_1 = $1_1;
   $4_1 = +($1_1 >> 20);
   $1_1 = ($1_1 >>> 13 & 127) << 4;
   $5_1 = $4_1 * HEAPF64[7456] + HEAPF64[$1_1 + 59800 >> 3];
   $0_1 = HEAPF64[$1_1 + 59792 >> 3];
   wasm2js_scratch_store_i32(0, $6_1 | 0);
   wasm2js_scratch_store_i32(1, $2_1 - ($10_1 & -1048576) | 0);
   $0_1 = $0_1 * (+wasm2js_scratch_load_f64() - HEAPF64[$1_1 + 61840 >> 3] - HEAPF64[$1_1 + 61848 >> 3]);
   $7_1 = $5_1 + $0_1;
   $3 = $0_1 * $0_1;
   $0_1 = $7_1 + ($0_1 * $3 * ($3 * ($0_1 * HEAPF64[7462] + HEAPF64[7461]) + ($0_1 * HEAPF64[7460] + HEAPF64[7459])) + ($3 * HEAPF64[7458] + ($4_1 * HEAPF64[7457] + ($0_1 + ($5_1 - $7_1)))));
  }
  return $0_1;
 }
 
 function $1640($0_1) {
  var $1_1 = 0;
  $1_1 = global$0 - 16 | 0;
  HEAPF32[$1_1 + 12 >> 2] = $0_1;
  return HEAPF32[$1_1 + 12 >> 2];
 }
 
 function $1641($0_1) {
  $0_1 = Math_fround($0_1 - $0_1);
  return Math_fround($0_1 / $0_1);
 }
 
 function $1642($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0.0, $4_1 = 0, $5_1 = 0.0;
  $1_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  if (($1_1 | 0) == 1065353216) {
   return Math_fround(0.0)
  }
  label$2 : {
   if ($1_1 - 2139095040 >>> 0 <= 2164260863) {
    $2_1 = $1_1 << 1;
    if (!$2_1) {
     return Math_fround($1640(Math_fround(-1.0)) / Math_fround(0.0))
    }
    if (($1_1 | 0) == 2139095040) {
     break label$2
    }
    if (!($2_1 >>> 0 < 4278190080 & ($1_1 | 0) >= 0)) {
     return $1641($0_1)
    }
    $1_1 = (wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) - 192937984 | 0;
   }
   $2_1 = $1_1 - 1060306944 | 0;
   $4_1 = $2_1 >>> 15 & 240;
   $3 = +(wasm2js_scratch_store_i32(2, $1_1 - ($2_1 & -8388608) | 0), wasm2js_scratch_load_f32()) * HEAPF64[$4_1 + 63888 >> 3] + -1.0;
   $5_1 = $3 * $3;
   $0_1 = Math_fround((HEAPF64[8019] * $5_1 + (HEAPF64[8020] * $3 + HEAPF64[8021])) * $5_1 + (+($2_1 >> 23) * HEAPF64[8018] + HEAPF64[$4_1 + 63896 >> 3] + $3));
  }
  return $0_1;
 }
 
 function $1644($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  $3 = ($2_1 | 0) != 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3) | !$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255;
     while (1) {
      if (($4_1 | 0) == HEAPU8[$0_1 | 0]) {
       break label$2
      }
      $2_1 = $2_1 - 1 | 0;
      $3 = ($2_1 | 0) != 0;
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3)) {
       break label$3
      }
      if ($2_1) {
       continue
      }
      break;
     };
    }
    if (!$3) {
     break label$1
    }
    if (!(HEAPU8[$0_1 | 0] == ($1_1 & 255) | $2_1 >>> 0 < 4)) {
     $3 = Math_imul($1_1 & 255, 16843009);
     while (1) {
      $4_1 = $3 ^ HEAP32[$0_1 >> 2];
      if (($4_1 ^ -1) & $4_1 - 16843009 & -2139062144) {
       break label$2
      }
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 - 4 | 0;
      if ($2_1 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   $1_1 = $1_1 & 255;
   while (1) {
    if (HEAPU8[$0_1 | 0] == ($1_1 | 0)) {
     return $0_1
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 - 1 | 0;
    if ($2_1) {
     continue
    }
    break;
   };
  }
  return 0;
 }
 
 function $1645($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    if ($2_1 >>> 0 >= 4) {
     if (($0_1 | $1_1) & 3) {
      break label$2
     }
     while (1) {
      if (HEAP32[$0_1 >> 2] != HEAP32[$1_1 >> 2]) {
       break label$2
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 - 4 | 0;
      if ($2_1 >>> 0 > 3) {
       continue
      }
      break;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   while (1) {
    $3 = HEAPU8[$0_1 | 0];
    $4_1 = HEAPU8[$1_1 | 0];
    if (($3 | 0) == ($4_1 | 0)) {
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 - 1 | 0;
     if ($2_1) {
      continue
     }
     break label$1;
    }
    break;
   };
   return $3 - $4_1 | 0;
  }
  return 0;
 }
 
 function $1651($0_1, $1_1) {
  return $1635($0_1 ? -$1_1 : $1_1) * $1_1;
 }
 
 function $1653($0_1) {
  return $1651($0_1, 3105036184601417870297958.0e207);
 }
 
 function $1654($0_1) {
  return $1651($0_1, 1.2882297539194267e-231);
 }
 
 function $1656($0_1, $1_1) {
  var $2_1 = 0.0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0.0, $8 = 0.0, $9 = 0, $10_1 = 0, $11_1 = 0.0, $12_1 = 0.0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0.0, $18_1 = 0.0, $19 = 0.0, $20_1 = 0.0, wasm2js_f64$0 = 0.0, wasm2js_f64$1 = 0.0, wasm2js_i32$0 = 0;
  $13 = global$0 - 16 | 0;
  global$0 = $13;
  $9 = $1657($0_1);
  $14 = $1657($1_1);
  $15_1 = $14 & 2047;
  $16_1 = $15_1 - 1086 | 0;
  wasm2js_scratch_store_f64(+$1_1);
  $5_1 = wasm2js_scratch_load_i32(1) | 0;
  $6_1 = wasm2js_scratch_load_i32(0) | 0;
  wasm2js_scratch_store_f64(+$0_1);
  $4_1 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  label$1 : {
   label$2 : {
    if ($16_1 >>> 0 > 4294967167 & $9 - 2047 >>> 0 >= 4294965250) {
     break label$2
    }
    if ($1658($6_1, $5_1)) {
     $2_1 = 1.0;
     if (!$3 & ($4_1 | 0) == 1072693248) {
      break label$1
     }
     $9 = $6_1 << 1;
     $6_1 = $5_1 << 1 | $6_1 >>> 31;
     if (!($9 | $6_1)) {
      break label$1
     }
     $4_1 = $4_1 << 1 | $3 >>> 31;
     $3 = $3 << 1;
     if (!(!(($4_1 | 0) == -2097152 & ($3 | 0) != 0 | $4_1 >>> 0 > 4292870144) & (!$9 & ($6_1 | 0) == -2097152 | $6_1 >>> 0 < 4292870144))) {
      $2_1 = $0_1 + $1_1;
      break label$1;
     }
     if (!$3 & ($4_1 | 0) == 2145386496) {
      break label$1
     }
     $2_1 = $4_1 >>> 0 > 2145386495 ^ ($5_1 | 0) >= 0 ? 0.0 : $1_1 * $1_1;
     break label$1;
    }
    if ($1658($3, $4_1)) {
     $2_1 = $0_1 * $0_1;
     if (($4_1 | 0) < 0) {
      $2_1 = ($1659($6_1, $5_1) | 0) == 1 ? -$2_1 : $2_1
     }
     if (($5_1 | 0) >= 0) {
      break label$1
     }
     $2_1 = $1635(1.0 / $2_1);
     break label$1;
    }
    if (($4_1 | 0) < 0) {
     $10_1 = $1659($6_1, $5_1);
     if (!$10_1) {
      $2_1 = $1636($0_1);
      break label$1;
     }
     $9 = $9 & 2047;
     $10_1 = (($10_1 | 0) == 1) << 18;
     $4_1 = $4_1 & 2147483647;
    }
    if ($16_1 >>> 0 <= 4294967167) {
     $2_1 = 1.0;
     if (!$3 & ($4_1 | 0) == 1072693248) {
      break label$1
     }
     if ($15_1 >>> 0 <= 957) {
      $2_1 = (($4_1 | 0) == 1072693248 & ($3 | 0) != 0 | $4_1 >>> 0 > 1072693248 ? $1_1 : -$1_1) + 1.0;
      break label$1;
     }
     if ((!$3 & ($4_1 | 0) == 1072693248 | $4_1 >>> 0 < 1072693248) != ($14 >>> 0 < 2048 | 0)) {
      $2_1 = $1653(0);
      break label$1;
     }
     $2_1 = $1654(0);
     break label$1;
    }
    if ($9) {
     break label$2
    }
    wasm2js_scratch_store_f64(+($0_1 * 4503599627370496.0));
    $4_1 = wasm2js_scratch_load_i32(1) | 0;
    $3 = wasm2js_scratch_load_i32(0) | 0;
    $4_1 = ($4_1 & 2147483647) - 54525952 | 0;
   }
   wasm2js_scratch_store_i32(0, $6_1 & -134217728);
   wasm2js_scratch_store_i32(1, $5_1 | 0);
   $17_1 = +wasm2js_scratch_load_f64();
   $5_1 = $4_1 - 1072076117 | 0;
   $6_1 = $5_1;
   $8 = +($5_1 >> 20);
   $5_1 = ($5_1 >>> 13 & 127) << 5;
   $20_1 = $8 * HEAPF64[8293] + HEAPF64[$5_1 + 66432 >> 3];
   wasm2js_scratch_store_i32(0, 0);
   $4_1 = $4_1 - ($6_1 & -1048576) | 0;
   wasm2js_scratch_store_i32(1, ($3 - -2147483648 >>> 0 < 2147483648 ? $4_1 + 1 | 0 : $4_1) | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $7_1 = HEAPF64[$5_1 + 66408 >> 3];
   $2_1 = $0_1 * $7_1 + -1.0;
   wasm2js_scratch_store_i32(0, $3 | 0);
   wasm2js_scratch_store_i32(1, $4_1 | 0);
   $18_1 = (+wasm2js_scratch_load_f64() - $0_1) * $7_1;
   $0_1 = $2_1 + $18_1;
   $11_1 = HEAPF64[8294];
   $7_1 = $0_1 * $11_1;
   $19 = $8 * HEAPF64[8292] + HEAPF64[$5_1 + 66424 >> 3];
   $8 = $0_1 + $19;
   $12_1 = $2_1;
   $2_1 = $2_1 * $11_1;
   $12_1 = $12_1 * $2_1;
   $11_1 = $8 + $12_1;
   $12_1 = $20_1 + ($0_1 + ($19 - $8)) + $18_1 * ($7_1 + $2_1) + ($12_1 + ($8 - $11_1));
   $2_1 = $0_1 * $7_1;
   $0_1 = $12_1 + $0_1 * $2_1 * ($2_1 * ($2_1 * ($0_1 * HEAPF64[8300] + HEAPF64[8299]) + ($0_1 * HEAPF64[8298] + HEAPF64[8297])) + ($0_1 * HEAPF64[8296] + HEAPF64[8295]));
   $2_1 = $11_1 + $0_1;
   HEAPF64[$13 + 8 >> 3] = $0_1 + ($11_1 - $2_1);
   wasm2js_scratch_store_f64(+$2_1);
   $3 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_store_i32(0, wasm2js_scratch_load_i32(0) & -134217728);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $7_1 = +wasm2js_scratch_load_f64();
   $0_1 = $17_1 * $7_1;
   $1_1 = ($1_1 - $17_1) * $7_1 + (HEAPF64[$13 + 8 >> 3] + ($2_1 - $7_1)) * $1_1;
   __inlined_func$1662 : {
    label$10 : {
     $4_1 = $1657($0_1) & 2047;
     $3 = $1657(5.551115123125783e-17);
     if ($4_1 - $3 >>> 0 < $1657(512.0) - $3 >>> 0) {
      break label$10
     }
     if ($4_1 >>> 0 < $3 >>> 0) {
      $0_1 = $0_1 + 1.0;
      $2_1 = $10_1 ? -$0_1 : $0_1;
      break __inlined_func$1662;
     }
     $3 = $1657(1024.0) >>> 0 > $4_1 >>> 0;
     $4_1 = 0;
     if ($3) {
      break label$10
     }
     wasm2js_scratch_store_f64(+$0_1);
     $3 = wasm2js_scratch_load_i32(1) | 0;
     wasm2js_scratch_load_i32(0) | 0;
     if (($3 | 0) < 0) {
      $2_1 = $1654($10_1);
      break __inlined_func$1662;
     }
     $2_1 = $1653($10_1);
     break __inlined_func$1662;
    }
    $2_1 = HEAPF64[8023];
    $7_1 = HEAPF64[8022] * $0_1 + $2_1;
    $2_1 = $7_1 - $2_1;
    $0_1 = $2_1 * HEAPF64[8025] + ($2_1 * HEAPF64[8024] + $0_1) + $1_1;
    $1_1 = $0_1 * $0_1;
    $2_1 = $1_1 * $1_1 * ($0_1 * HEAPF64[8029] + HEAPF64[8028]);
    $1_1 = $1_1 * ($0_1 * HEAPF64[8027] + HEAPF64[8026]);
    wasm2js_scratch_store_f64(+$7_1);
    wasm2js_scratch_load_i32(1) | 0;
    $6_1 = wasm2js_scratch_load_i32(0) | 0;
    $3 = $6_1 << 4 & 2032;
    $0_1 = $2_1 + ($1_1 + (HEAPF64[$3 + 64288 >> 3] + $0_1));
    $5_1 = $3 + 64296 | 0;
    $3 = HEAP32[$5_1 >> 2];
    $5_1 = HEAP32[$5_1 + 4 >> 2] + ($6_1 + $10_1 << 13) | 0;
    if (!$4_1) {
     __inlined_func$1663 : {
      if (!($6_1 & -2147483648)) {
       wasm2js_scratch_store_i32(0, $3 | 0);
       wasm2js_scratch_store_i32(1, $5_1 - 1058013184 | 0);
       $1_1 = +wasm2js_scratch_load_f64();
       $2_1 = ($1_1 * $0_1 + $1_1) * 5486124068793688683255936.0e279;
       break __inlined_func$1663;
      }
      wasm2js_scratch_store_i32(0, $3 | 0);
      $3 = $5_1 + 1071644672 | 0;
      wasm2js_scratch_store_i32(1, $3 | 0);
      $1_1 = +wasm2js_scratch_load_f64();
      $7_1 = $1_1 * $0_1;
      $0_1 = $7_1 + $1_1;
      if (Math_abs($0_1) < 1.0) {
       $2_1 = $1635(2.2250738585072014e-308) * 2.2250738585072014e-308;
       HEAPF64[(global$0 - 16 | 0) + 8 >> 3] = $2_1;
       wasm2js_scratch_store_i32(0, 0);
       wasm2js_scratch_store_i32(1, $3 & -2147483648);
       $2_1 = $0_1 < 0.0 ? -1.0 : 1.0;
       $8 = $0_1 + $2_1;
       $0_1 = $8 + ($7_1 + ($1_1 - $0_1) + ($0_1 + ($2_1 - $8))) - $2_1;
       $0_1 = (wasm2js_f64$0 = +wasm2js_scratch_load_f64(), wasm2js_f64$1 = $0_1, wasm2js_i32$0 = $0_1 == 0.0, wasm2js_i32$0 ? wasm2js_f64$0 : wasm2js_f64$1);
      }
      $2_1 = $0_1 * 2.2250738585072014e-308;
     }
     break __inlined_func$1662;
    }
    wasm2js_scratch_store_i32(0, $3 | 0);
    wasm2js_scratch_store_i32(1, $5_1 | 0);
    $1_1 = +wasm2js_scratch_load_f64();
    $2_1 = $1_1 * $0_1 + $1_1;
   }
  }
  global$0 = $13 + 16 | 0;
  return $2_1;
 }
 
 function $1657($0_1) {
  var $1_1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  $1_1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  return $1_1 >>> 20 | 0;
 }
 
 function $1658($0_1, $1_1) {
  var $2_1 = 0;
  $1_1 = $1_1 << 1 | $0_1 >>> 31;
  $2_1 = !($0_1 << 1);
  $0_1 = $1_1 + 2097152 | 0;
  return $2_1 & ($0_1 | 0) == 2097152 | $0_1 >>> 0 < 2097152;
 }
 
 function $1659($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $2_1 = $1_1 >>> 20 & 2047;
  label$1 : {
   if ($2_1 >>> 0 < 1023) {
    break label$1
   }
   $5_1 = 2;
   if ($2_1 >>> 0 > 1075) {
    break label$1
   }
   $5_1 = 0;
   $2_1 = 1075 - $2_1 | 0;
   $3 = $2_1 & 31;
   if (($2_1 & 63) >>> 0 >= 32) {
    $2_1 = 1 << $3;
    $4_1 = 0;
   } else {
    $4_1 = 1 << $3;
    $2_1 = $4_1 - 1 & 1 >>> 32 - $3;
   }
   $3 = $2_1 - 1 | 0;
   $6_1 = $4_1 - 1 | 0;
   $3 = ($6_1 | 0) != -1 ? $3 + 1 | 0 : $3;
   if ($0_1 & $6_1 | $1_1 & $3) {
    break label$1
   }
   $5_1 = $0_1 & $4_1 | $1_1 & $2_1 ? 1 : 2;
  }
  return $5_1;
 }
 
 function $1665($0_1, $1_1) {
  return Math_fround($1640($0_1 ? Math_fround(-$1_1) : $1_1) * $1_1);
 }
 
 function $1669($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0.0, $5_1 = 0.0, $6_1 = 0, $7_1 = Math_fround(0), $8 = 0, $9 = 0.0;
  $3 = (wasm2js_scratch_store_f32($1_1), wasm2js_scratch_load_i32(2));
  $2_1 = $1670($3);
  label$1 : {
   label$2 : {
    label$3 : {
     $6_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
     label$4 : {
      if ($6_1 - 2139095040 >>> 0 >= 2164260864) {
       if ($2_1) {
        break label$4
       }
       break label$2;
      }
      if (!$2_1) {
       break label$3
      }
     }
     $7_1 = Math_fround(1.0);
     if (($6_1 | 0) == 1065353216) {
      break label$1
     }
     $2_1 = $3 << 1;
     if (!$2_1) {
      break label$1
     }
     $8 = $2_1 >>> 0 < 4278190081;
     $2_1 = $6_1 << 1;
     if (!($8 & $2_1 >>> 0 <= 4278190080)) {
      return Math_fround($0_1 + $1_1)
     }
     if (($2_1 | 0) == 2130706432) {
      break label$1
     }
     return $2_1 >>> 0 > 2130706431 ^ ($3 | 0) >= 0 ? Math_fround(0.0) : Math_fround($1_1 * $1_1);
    }
    if ($1670($6_1)) {
     $7_1 = Math_fround($0_1 * $0_1);
     if (($6_1 | 0) < 0) {
      $7_1 = ($1671($3) | 0) == 1 ? Math_fround(-$7_1) : $7_1
     }
     if (($3 | 0) >= 0) {
      break label$1
     }
     return $1640(Math_fround(Math_fround(1.0) / $7_1));
    }
    if (($6_1 | 0) < 0) {
     $2_1 = $1671($3);
     if (!$2_1) {
      return $1641($0_1)
     }
     $6_1 = $6_1 & 2147483647;
     $8 = (($2_1 | 0) == 1) << 16;
    }
    if ($6_1 >>> 0 > 8388607) {
     break label$2
    }
    $6_1 = ((wasm2js_scratch_store_f32(Math_fround($0_1 * Math_fround(8388608.0))), wasm2js_scratch_load_i32(2)) & 2147483647) - 192937984 | 0;
   }
   $3 = $6_1 - 1060306944 | 0;
   $2_1 = $3 >>> 15 & 240;
   $4_1 = +(wasm2js_scratch_store_i32(2, $6_1 - ($3 & -8388608) | 0), wasm2js_scratch_load_f32()) * HEAPF64[$2_1 + 70832 >> 3] + -1.0;
   $5_1 = $4_1 * $4_1;
   $4_1 = ((HEAPF64[8886] * $4_1 + HEAPF64[8887]) * ($5_1 * $5_1) + ((HEAPF64[8888] * $4_1 + HEAPF64[8889]) * $5_1 + (HEAPF64[8890] * $4_1 + (HEAPF64[$2_1 + 70840 >> 3] + +($3 >> 23))))) * +$1_1;
   wasm2js_scratch_store_f64(+$4_1);
   $2_1 = wasm2js_scratch_load_i32(1) | 0;
   wasm2js_scratch_load_i32(0) | 0;
   label$12 : {
    $2_1 = $2_1 & 2147450880;
    if (($2_1 | 0) == 1079967744 | $2_1 >>> 0 < 1079967744) {
     break label$12
    }
    if ($4_1 > 127.99999995700433) {
     return $1665($8, Math_fround(1584563250285286751870879.0e5))
    }
    if (!($4_1 <= -150.0)) {
     break label$12
    }
    return $1665($8, Math_fround(2.524354896707238e-29));
   }
   $9 = $4_1;
   $5_1 = HEAPF64[8845];
   $4_1 = $5_1 + $4_1;
   $5_1 = $9 - ($4_1 - $5_1);
   $5_1 = (HEAPF64[8846] * $5_1 + HEAPF64[8847]) * ($5_1 * $5_1) + (HEAPF64[8848] * $5_1 + 1.0);
   wasm2js_scratch_store_f64(+$4_1);
   wasm2js_scratch_load_i32(1) | 0;
   $2_1 = wasm2js_scratch_load_i32(0) | 0;
   $8 = $8 + $2_1 << 15;
   $3 = (($2_1 & 31) << 3) + 70504 | 0;
   $2_1 = HEAP32[$3 >> 2];
   $3 = HEAP32[$3 + 4 >> 2] + $8 | 0;
   wasm2js_scratch_store_i32(0, $2_1 | 0);
   wasm2js_scratch_store_i32(1, $3 | 0);
   $7_1 = Math_fround($5_1 * +wasm2js_scratch_load_f64());
  }
  return $7_1;
 }
 
 function $1670($0_1) {
  return ($0_1 << 1) + 16777216 >>> 0 < 16777217;
 }
 
 function $1671($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $2_1 = $0_1 >>> 23 & 255;
  $1_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 127) {
    break label$1
   }
   $1_1 = 2;
   if ($2_1 >>> 0 > 150) {
    break label$1
   }
   $2_1 = 1 << 150 - $2_1;
   $1_1 = 0;
   if ($2_1 - 1 & $0_1) {
    break label$1
   }
   $1_1 = $0_1 & $2_1 ? 1 : 2;
  }
  return $1_1;
 }
 
 function $1675($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[$2_1 + 12 >> 2] = $1_1;
  $1724(73264, $0_1, $1_1, 0, 0);
  global$0 = $2_1 + 16 | 0;
 }
 
 function $1677($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $7_1 = global$0 - 240 | 0;
  global$0 = $7_1;
  HEAP32[$7_1 >> 2] = $0_1;
  $8 = 1;
  label$1 : {
   if (($3 | 0) < 2) {
    break label$1
   }
   $10_1 = 0 - $1_1 | 0;
   $5_1 = $0_1;
   while (1) {
    $5_1 = $5_1 + $10_1 | 0;
    $9 = $3 - 2 | 0;
    $6_1 = $5_1 - HEAP32[($9 << 2) + $4_1 >> 2] | 0;
    if ((FUNCTION_TABLE[967]($0_1, $6_1, $2_1) | 0) >= 0) {
     if ((FUNCTION_TABLE[967]($0_1, $5_1, $2_1) | 0) >= 0) {
      break label$1
     }
    }
    $11_1 = $6_1;
    $6_1 = (FUNCTION_TABLE[967]($6_1, $5_1, $2_1) | 0) >= 0;
    $5_1 = $6_1 ? $11_1 : $5_1;
    HEAP32[($8 << 2) + $7_1 >> 2] = $5_1;
    $8 = $8 + 1 | 0;
    $3 = $6_1 ? $3 - 1 | 0 : $9;
    if (($3 | 0) > 1) {
     continue
    }
    break;
   };
  }
  $1682($1_1, $7_1, $8);
  global$0 = $7_1 + 240 | 0;
 }
 
 function $1678($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   if ($1_1 >>> 0 <= 31) {
    $3 = HEAP32[$0_1 >> 2];
    break label$1;
   }
   $1_1 = $1_1 - 32 | 0;
   $3 = $2_1;
   $2_1 = 0;
  }
  HEAP32[$0_1 + 4 >> 2] = $2_1 >>> $1_1;
  HEAP32[$0_1 >> 2] = $2_1 << 32 - $1_1 | $3 >>> $1_1;
 }
 
 function $1679($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $7_1 = global$0 - 240 | 0;
  global$0 = $7_1;
  $8 = HEAP32[$3 >> 2];
  HEAP32[$7_1 + 232 >> 2] = $8;
  $3 = HEAP32[$3 + 4 >> 2];
  HEAP32[$7_1 >> 2] = $0_1;
  HEAP32[$7_1 + 236 >> 2] = $3;
  $10_1 = 1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($3 | ($8 | 0) != 1)) {
      $3 = $0_1;
      break label$3;
     }
     $11_1 = 0 - $1_1 | 0;
     $8 = $0_1;
     while (1) {
      $9 = ($4_1 << 2) + $6_1 | 0;
      $3 = $8 - HEAP32[$9 >> 2] | 0;
      if ((FUNCTION_TABLE[967]($3, $0_1, $2_1) | 0) <= 0) {
       $3 = $8;
       break label$3;
      }
      label$7 : {
       if (!(($4_1 | 0) < 2 | $5_1)) {
        $5_1 = HEAP32[$9 - 8 >> 2];
        $9 = $8 + $11_1 | 0;
        if ((FUNCTION_TABLE[967]($9, $3, $2_1) | 0) >= 0) {
         break label$7
        }
        if ((FUNCTION_TABLE[967]($9 - $5_1 | 0, $3, $2_1) | 0) >= 0) {
         break label$7
        }
       }
       HEAP32[($10_1 << 2) + $7_1 >> 2] = $3;
       $5_1 = $7_1 + 232 | 0;
       $8 = $5_1;
       $5_1 = $1681($5_1);
       $1678($8, $5_1);
       $10_1 = $10_1 + 1 | 0;
       $4_1 = $4_1 + $5_1 | 0;
       $5_1 = 0;
       $8 = $3;
       if (HEAP32[$7_1 + 236 >> 2] | HEAP32[$7_1 + 232 >> 2] != 1) {
        continue
       }
       break label$2;
      }
      break;
     };
     $3 = $8;
     break label$2;
    }
    if ($5_1) {
     break label$1
    }
   }
   $1682($1_1, $7_1, $10_1);
   $1677($3, $1_1, $2_1, $4_1, $6_1);
  }
  global$0 = $7_1 + 240 | 0;
 }
 
 function $1680($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  label$1 : {
   if ($1_1 >>> 0 <= 31) {
    $3 = HEAP32[$0_1 >> 2];
    $2_1 = $0_1 + 4 | 0;
    break label$1;
   }
   $1_1 = $1_1 - 32 | 0;
   $2_1 = $0_1;
  }
  $2_1 = HEAP32[$2_1 >> 2];
  HEAP32[$0_1 >> 2] = $3 << $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1 << $1_1 | $3 >>> 32 - $1_1;
 }
 
 function $1681($0_1) {
  var $1_1 = 0;
  $1_1 = $1684(HEAP32[$0_1 >> 2] - 1 | 0);
  if (!$1_1) {
   $0_1 = $1684(HEAP32[$0_1 + 4 >> 2]);
   $1_1 = $0_1 ? $0_1 + 32 | 0 : 0;
  }
  return $1_1;
 }
 
 function $1682($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if (($2_1 | 0) < 2) {
    break label$1
   }
   $7_1 = ($2_1 << 2) + $1_1 | 0;
   HEAP32[$7_1 >> 2] = $5_1;
   if (!$0_1) {
    break label$1
   }
   while (1) {
    $4_1 = $0_1 >>> 0 >= 256 ? 256 : $0_1;
    $1602(HEAP32[$7_1 >> 2], HEAP32[$1_1 >> 2], $4_1);
    $3 = 0;
    while (1) {
     $6_1 = ($3 << 2) + $1_1 | 0;
     $3 = $3 + 1 | 0;
     $1602(HEAP32[$6_1 >> 2], HEAP32[($3 << 2) + $1_1 >> 2], $4_1);
     HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] + $4_1;
     if (($2_1 | 0) != ($3 | 0)) {
      continue
     }
     break;
    };
    $0_1 = $0_1 - $4_1 | 0;
    if ($0_1) {
     continue
    }
    break;
   };
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $1684($0_1) {
  return HEAP8[(Math_imul(0 - $0_1 & $0_1, 124511785) >>> 27 | 0) + 71136 | 0];
 }
 
 function $1685($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0;
  $6_1 = $0_1;
  $4_1 = global$0 - 208 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 8 >> 2] = 1;
  HEAP32[$4_1 + 12 >> 2] = 0;
  $7_1 = Math_imul($1_1, $2_1);
  label$1 : {
   if (!$7_1) {
    break label$1
   }
   HEAP32[$4_1 + 16 >> 2] = $2_1;
   HEAP32[$4_1 + 20 >> 2] = $2_1;
   $9 = 0 - $2_1 | 0;
   $0_1 = $2_1;
   $1_1 = $0_1;
   $5_1 = 2;
   while (1) {
    $8 = $1_1 + $2_1 | 0;
    $1_1 = $0_1;
    $0_1 = $0_1 + $8 | 0;
    HEAP32[($4_1 + 16 | 0) + ($5_1 << 2) >> 2] = $0_1;
    $5_1 = $5_1 + 1 | 0;
    if ($0_1 >>> 0 < $7_1 >>> 0) {
     continue
    }
    break;
   };
   $1_1 = ($6_1 + $7_1 | 0) + $9 | 0;
   label$3 : {
    if ($6_1 >>> 0 >= $1_1 >>> 0) {
     $5_1 = 0;
     $0_1 = 1;
     $1_1 = 0;
     break label$3;
    }
    $5_1 = 1;
    $0_1 = 1;
    while (1) {
     label$6 : {
      if (($5_1 & 3) == 3) {
       $1677($6_1, $2_1, $3, $0_1, $4_1 + 16 | 0);
       $1678($4_1 + 8 | 0, 2);
       $0_1 = $0_1 + 2 | 0;
       break label$6;
      }
      $5_1 = $0_1 - 1 | 0;
      label$8 : {
       if (HEAPU32[($4_1 + 16 | 0) + ($5_1 << 2) >> 2] >= $1_1 - $6_1 >>> 0) {
        $1679($6_1, $2_1, $3, $4_1 + 8 | 0, $0_1, 0, $4_1 + 16 | 0);
        break label$8;
       }
       $1677($6_1, $2_1, $3, $0_1, $4_1 + 16 | 0);
      }
      if (($0_1 | 0) == 1) {
       $1680($4_1 + 8 | 0, 1);
       $0_1 = 0;
       break label$6;
      }
      $1680($4_1 + 8 | 0, $5_1);
      $0_1 = 1;
     }
     $7_1 = HEAP32[$4_1 + 8 >> 2];
     $5_1 = $7_1 | 1;
     HEAP32[$4_1 + 8 >> 2] = $5_1;
     $6_1 = $2_1 + $6_1 | 0;
     if ($1_1 >>> 0 > $6_1 >>> 0) {
      continue
     }
     break;
    };
    $5_1 = $7_1 >>> 0 > 1;
    $1_1 = HEAP32[$4_1 + 12 >> 2] != 0;
   }
   $1679($6_1, $2_1, $3, $4_1 + 8 | 0, $0_1, 0, $4_1 + 16 | 0);
   if (!($5_1 | ($0_1 | 0) != 1 | $1_1)) {
    break label$1
   }
   while (1) {
    label$13 : {
     if (($0_1 | 0) <= 1) {
      $1_1 = $4_1 + 8 | 0;
      $8 = $1_1;
      $1_1 = $1681($1_1);
      $1678($8, $1_1);
      $5_1 = HEAP32[$4_1 + 8 >> 2];
      $0_1 = $0_1 + $1_1 | 0;
      break label$13;
     }
     $1_1 = $4_1 + 8 | 0;
     $1680($1_1, 2);
     HEAP32[$4_1 + 8 >> 2] = HEAP32[$4_1 + 8 >> 2] ^ 7;
     $1678($1_1, 1);
     $10_1 = $6_1 + $9 | 0;
     $7_1 = $4_1 + 16 | 0;
     $8 = $0_1 - 2 | 0;
     $1679($10_1 - HEAP32[$7_1 + ($8 << 2) >> 2] | 0, $2_1, $3, $1_1, $0_1 - 1 | 0, 1, $7_1);
     $1680($1_1, 1);
     $5_1 = HEAP32[$4_1 + 8 >> 2] | 1;
     HEAP32[$4_1 + 8 >> 2] = $5_1;
     $1679($10_1, $2_1, $3, $1_1, $8, 1, $7_1);
     $0_1 = $8;
    }
    $6_1 = $6_1 + $9 | 0;
    if (HEAP32[$4_1 + 12 >> 2] | (($0_1 | 0) != 1 | ($5_1 | 0) != 1)) {
     continue
    }
    break;
   };
  }
  global$0 = $4_1 + 208 | 0;
 }
 
 function $1686($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return FUNCTION_TABLE[$2_1 | 0]($0_1, $1_1) | 0;
 }
 
 function $1687($0_1, $1_1) {
  label$1 : {
   if (($1_1 | 0) >= 1024) {
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    if ($1_1 >>> 0 < 2047) {
     $1_1 = $1_1 - 1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) >= 3069 ? 3069 : $1_1) - 2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > -1023) {
    break label$1
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   if ($1_1 >>> 0 > 4294965304) {
    $1_1 = $1_1 + 969 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.004168360008973e-292;
   $1_1 = (($1_1 | 0) <= -2960 ? -2960 : $1_1) + 1938 | 0;
  }
  wasm2js_scratch_store_i32(0, 0);
  wasm2js_scratch_store_i32(1, $1_1 + 1023 << 20);
  return $0_1 * +wasm2js_scratch_load_f64();
 }
 
 function $1688($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0.0, $4_1 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  $4_1 = (wasm2js_scratch_store_f32($0_1), wasm2js_scratch_load_i32(2));
  $2_1 = $4_1 & 2147483647;
  label$1 : {
   if ($2_1 >>> 0 <= 1061752794) {
    if ($2_1 >>> 0 < 964689920) {
     break label$1
    }
    $0_1 = $1598(+$0_1);
    break label$1;
   }
   if ($2_1 >>> 0 <= 1081824209) {
    $3 = +$0_1;
    if ($2_1 >>> 0 <= 1075235811) {
     if (($4_1 | 0) < 0) {
      $0_1 = Math_fround(-$1597($3 + 1.5707963267948966));
      break label$1;
     }
     $0_1 = $1597($3 + -1.5707963267948966);
     break label$1;
    }
    $0_1 = $1598(-((($4_1 | 0) >= 0 ? -3.141592653589793 : 3.141592653589793) + $3));
    break label$1;
   }
   if ($2_1 >>> 0 <= 1088565717) {
    if ($2_1 >>> 0 <= 1085271519) {
     $3 = +$0_1;
     if (($4_1 | 0) < 0) {
      $0_1 = $1597($3 + 4.71238898038469);
      break label$1;
     }
     $0_1 = Math_fround(-$1597($3 + -4.71238898038469));
     break label$1;
    }
    $0_1 = $1598((($4_1 | 0) < 0 ? 6.283185307179586 : -6.283185307179586) + +$0_1);
    break label$1;
   }
   if ($2_1 >>> 0 >= 2139095040) {
    $0_1 = Math_fround($0_1 - $0_1);
    break label$1;
   }
   label$10 : {
    switch ($1600($0_1, $1_1 + 8 | 0) & 3) {
    case 0:
     $0_1 = $1598(HEAPF64[$1_1 + 8 >> 3]);
     break label$1;
    case 1:
     $0_1 = $1597(HEAPF64[$1_1 + 8 >> 3]);
     break label$1;
    case 2:
     $0_1 = $1598(-HEAPF64[$1_1 + 8 >> 3]);
     break label$1;
    default:
     break label$10;
    };
   }
   $0_1 = Math_fround(-$1597(HEAPF64[$1_1 + 8 >> 3]));
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1;
 }
 
 function $1690($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0;
  $25_1 = global$0 - 16 | 0;
  global$0 = $25_1;
  HEAP32[$25_1 + 12 >> 2] = $2_1;
  $4_1 = global$0 - 144 | 0;
  global$0 = $4_1;
  $3 = $1604($4_1, 0, 144);
  HEAP32[$3 + 76 >> 2] = -1;
  HEAP32[$3 + 44 >> 2] = $0_1;
  HEAP32[$3 + 32 >> 2] = 973;
  HEAP32[$3 + 84 >> 2] = $0_1;
  $4_1 = $1_1;
  $21_1 = $2_1;
  $0_1 = 0;
  $10_1 = global$0 - 304 | 0;
  global$0 = $10_1;
  label$2 : {
   label$3 : {
    label$4 : {
     label$5 : {
      if (HEAP32[$3 + 4 >> 2]) {
       break label$5
      }
      $1623($3);
      if (HEAP32[$3 + 4 >> 2]) {
       break label$5
      }
      break label$4;
     }
     $1_1 = HEAPU8[$4_1 | 0];
     if (!$1_1) {
      break label$2
     }
     $27_1 = $10_1 + 16 | 0;
     label$7 : {
      label$8 : {
       label$9 : {
        label$10 : {
         while (1) {
          label$11 : {
           label$13 : {
            if ($1708($1_1 & 255)) {
             while (1) {
              $1_1 = $4_1;
              $4_1 = $4_1 + 1 | 0;
              if ($1708(HEAPU8[$1_1 + 1 | 0])) {
               continue
              }
              break;
             };
             $1706($3, 0, 0);
             while (1) {
              $2_1 = HEAP32[$3 + 4 >> 2];
              label$17 : {
               if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                $2_1 = HEAPU8[$2_1 | 0];
                break label$17;
               }
               $2_1 = $1707($3);
              }
              if ($1708($2_1)) {
               continue
              }
              break;
             };
             $4_1 = HEAP32[$3 + 4 >> 2];
             if (HEAP32[$3 + 116 >> 2] >= 0) {
              $4_1 = $4_1 - 1 | 0;
              HEAP32[$3 + 4 >> 2] = $4_1;
             }
             $2_1 = $19 + HEAP32[$3 + 124 >> 2] | 0;
             $5_1 = $14 + HEAP32[$3 + 120 >> 2] | 0;
             $6_1 = $5_1 >>> 0 < $14 >>> 0 ? $2_1 + 1 | 0 : $2_1;
             $2_1 = $4_1 - HEAP32[$3 + 44 >> 2] | 0;
             $14 = $5_1 + $2_1 | 0;
             $4_1 = ($2_1 >> 31) + $6_1 | 0;
             $19 = $2_1 >>> 0 > $14 >>> 0 ? $4_1 + 1 | 0 : $4_1;
             break label$13;
            }
            label$20 : {
             label$21 : {
              label$22 : {
               if (HEAPU8[$4_1 | 0] == 37) {
                $1_1 = HEAPU8[$4_1 + 1 | 0];
                if (($1_1 | 0) == 42) {
                 break label$22
                }
                if (($1_1 | 0) != 37) {
                 break label$21
                }
               }
               $1706($3, 0, 0);
               label$24 : {
                if (HEAPU8[$4_1 | 0] == 37) {
                 while (1) {
                  $1_1 = HEAP32[$3 + 4 >> 2];
                  label$27 : {
                   if (($1_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                    HEAP32[$3 + 4 >> 2] = $1_1 + 1;
                    $1_1 = HEAPU8[$1_1 | 0];
                    break label$27;
                   }
                   $1_1 = $1707($3);
                  }
                  if ($1708($1_1)) {
                   continue
                  }
                  break;
                 };
                 $4_1 = $4_1 + 1 | 0;
                 break label$24;
                }
                $1_1 = HEAP32[$3 + 4 >> 2];
                if (($1_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                 HEAP32[$3 + 4 >> 2] = $1_1 + 1;
                 $1_1 = HEAPU8[$1_1 | 0];
                 break label$24;
                }
                $1_1 = $1707($3);
               }
               if (($1_1 | 0) != HEAPU8[$4_1 | 0]) {
                if (HEAP32[$3 + 116 >> 2] >= 0) {
                 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                }
                if (($1_1 | 0) >= 0) {
                 break label$2
                }
                $6_1 = 0;
                if ($22_1) {
                 break label$2
                }
                break label$4;
               }
               $1_1 = $19 + HEAP32[$3 + 124 >> 2] | 0;
               $2_1 = $14 + HEAP32[$3 + 120 >> 2] | 0;
               $5_1 = $2_1 >>> 0 < $14 >>> 0 ? $1_1 + 1 | 0 : $1_1;
               $1_1 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
               $14 = $2_1 + $1_1 | 0;
               $2_1 = ($1_1 >> 31) + $5_1 | 0;
               $19 = $1_1 >>> 0 > $14 >>> 0 ? $2_1 + 1 | 0 : $2_1;
               $1_1 = $4_1;
               break label$13;
              }
              $12_1 = 0;
              $1_1 = $4_1 + 2 | 0;
              break label$20;
             }
             if (!(!$1721($1_1) | HEAPU8[$4_1 + 2 | 0] != 36)) {
              $1_1 = HEAPU8[$4_1 + 1 | 0] - 48 | 0;
              $2_1 = global$0 - 16 | 0;
              HEAP32[$2_1 + 12 >> 2] = $21_1;
              $1_1 = ($1_1 >>> 0 > 1 ? ($1_1 << 2) - 4 | 0 : 0) + $21_1 | 0;
              HEAP32[$2_1 + 8 >> 2] = $1_1 + 4;
              $12_1 = HEAP32[$1_1 >> 2];
              $1_1 = $4_1 + 3 | 0;
              break label$20;
             }
             $12_1 = HEAP32[$21_1 >> 2];
             $21_1 = $21_1 + 4 | 0;
             $1_1 = $4_1 + 1 | 0;
            }
            $11_1 = 0;
            $4_1 = 0;
            if ($1721(HEAPU8[$1_1 | 0])) {
             while (1) {
              $4_1 = (HEAPU8[$1_1 | 0] + Math_imul($4_1, 10) | 0) - 48 | 0;
              $2_1 = HEAPU8[$1_1 + 1 | 0];
              $1_1 = $1_1 + 1 | 0;
              if ($1721($2_1)) {
               continue
              }
              break;
             }
            }
            $8 = HEAPU8[$1_1 | 0];
            if (!(($8 | 0) != 109)) {
             $13 = 0;
             $11_1 = ($12_1 | 0) != 0;
             $8 = HEAPU8[$1_1 + 1 | 0];
             $0_1 = 0;
             $1_1 = $1_1 + 1 | 0;
            }
            $2_1 = $1_1;
            $1_1 = $2_1 + 1 | 0;
            $5_1 = 3;
            $6_1 = $11_1;
            label$37 : {
             label$38 : {
              switch ($8 - 65 | 0) {
              case 39:
               $7_1 = $2_1 + 2 | 0;
               $2_1 = HEAPU8[$2_1 + 1 | 0] == 104;
               $1_1 = $2_1 ? $7_1 : $1_1;
               $5_1 = $2_1 ? -2 : -1;
               break label$37;
              case 43:
               $7_1 = $2_1 + 2 | 0;
               $2_1 = HEAPU8[$2_1 + 1 | 0] == 108;
               $1_1 = $2_1 ? $7_1 : $1_1;
               $5_1 = $2_1 ? 3 : 1;
               break label$37;
              case 51:
              case 57:
               $5_1 = 1;
               break label$37;
              case 11:
               $5_1 = 2;
               break label$37;
              case 41:
               break label$37;
              case 0:
              case 2:
              case 4:
              case 5:
              case 6:
              case 18:
              case 23:
              case 26:
              case 32:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 40:
              case 45:
              case 46:
              case 47:
              case 50:
              case 52:
              case 55:
               break label$38;
              default:
               break label$7;
              };
             }
             $5_1 = 0;
             $1_1 = $2_1;
            }
            $7_1 = $5_1;
            $2_1 = HEAPU8[$1_1 | 0];
            $5_1 = ($2_1 & 47) == 3;
            $20_1 = $5_1 ? 1 : $7_1;
            $16_1 = $5_1 ? $2_1 | 32 : $2_1;
            label$43 : {
             if (($16_1 | 0) == 91) {
              break label$43
             }
             label$44 : {
              if (($16_1 | 0) != 110) {
               if (($16_1 | 0) != 99) {
                break label$44
               }
               $4_1 = ($4_1 | 0) <= 1 ? 1 : $4_1;
               break label$43;
              }
              $1749($12_1, $20_1, $14, $19);
              break label$13;
             }
             $1706($3, 0, 0);
             while (1) {
              $2_1 = HEAP32[$3 + 4 >> 2];
              label$47 : {
               if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                $2_1 = HEAPU8[$2_1 | 0];
                break label$47;
               }
               $2_1 = $1707($3);
              }
              if ($1708($2_1)) {
               continue
              }
              break;
             };
             $2_1 = HEAP32[$3 + 4 >> 2];
             if (HEAP32[$3 + 116 >> 2] >= 0) {
              $2_1 = $2_1 - 1 | 0;
              HEAP32[$3 + 4 >> 2] = $2_1;
             }
             $5_1 = $19 + HEAP32[$3 + 124 >> 2] | 0;
             $6_1 = $5_1 + 1 | 0;
             $7_1 = $5_1;
             $5_1 = $14 + HEAP32[$3 + 120 >> 2] | 0;
             $6_1 = $14 >>> 0 > $5_1 >>> 0 ? $6_1 : $7_1;
             $2_1 = $2_1 - HEAP32[$3 + 44 >> 2] | 0;
             $14 = $2_1 + $5_1 | 0;
             $5_1 = ($2_1 >> 31) + $6_1 | 0;
             $19 = $2_1 >>> 0 > $14 >>> 0 ? $5_1 + 1 | 0 : $5_1;
            }
            $18_1 = $4_1 >> 31;
            $1706($3, $4_1, $18_1);
            $2_1 = HEAP32[$3 + 4 >> 2];
            label$50 : {
             if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
              HEAP32[$3 + 4 >> 2] = $2_1 + 1;
              break label$50;
             }
             if (($1707($3) | 0) < 0) {
              break label$8
             }
            }
            if (HEAP32[$3 + 116 >> 2] >= 0) {
             HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
            }
            $9 = $4_1;
            $2_1 = 16;
            label$53 : {
             label$54 : {
              label$55 : {
               label$56 : {
                label$57 : {
                 switch ($16_1 - 88 | 0) {
                 default:
                  $2_1 = $16_1 - 65 | 0;
                  if ($2_1 >>> 0 > 6 | !(1 << $2_1 & 113)) {
                   break label$53
                  }
                 case 9:
                 case 13:
                 case 14:
                 case 15:
                  $1714($10_1 + 8 | 0, $3, $20_1, 0);
                  $2_1 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
                  if (HEAP32[$3 + 120 >> 2] != (0 - $2_1 | 0) | HEAP32[$3 + 124 >> 2] != (0 - (($2_1 >> 31) + (($2_1 | 0) != 0) | 0) | 0)) {
                   break label$55
                  }
                  break label$9;
                 case 3:
                 case 11:
                 case 27:
                  if (($16_1 | 16) == 115) {
                   $1604($10_1 + 32 | 0, -1, 257);
                   HEAP8[$10_1 + 32 | 0] = 0;
                   if (($16_1 | 0) != 115) {
                    break label$54
                   }
                   HEAP8[$10_1 + 65 | 0] = 0;
                   HEAP8[$10_1 + 46 | 0] = 0;
                   HEAP16[$10_1 + 42 >> 1] = 0;
                   HEAP16[$10_1 + 44 >> 1] = 0;
                   break label$54;
                  }
                  $2_1 = HEAPU8[$1_1 + 1 | 0];
                  $5_1 = ($2_1 | 0) == 94;
                  $1604($10_1 + 32 | 0, $5_1, 257);
                  HEAP8[$10_1 + 32 | 0] = 0;
                  $6_1 = $5_1 ? $1_1 + 2 | 0 : $1_1 + 1 | 0;
                  label$64 : {
                   label$65 : {
                    label$66 : {
                     $1_1 = HEAPU8[($5_1 ? 2 : 1) + $1_1 | 0];
                     if (($1_1 | 0) != 45) {
                      if (($1_1 | 0) == 93) {
                       break label$66
                      }
                      $5_1 = ($2_1 | 0) != 94;
                      $1_1 = $6_1;
                      break label$64;
                     }
                     $5_1 = ($2_1 | 0) != 94;
                     HEAP8[$10_1 + 78 | 0] = $5_1;
                     break label$65;
                    }
                    $5_1 = ($2_1 | 0) != 94;
                    HEAP8[$10_1 + 126 | 0] = $5_1;
                   }
                   $1_1 = $6_1 + 1 | 0;
                  }
                  while (1) {
                   $2_1 = HEAPU8[$1_1 | 0];
                   label$69 : {
                    if (($2_1 | 0) != 45) {
                     if (!$2_1) {
                      break label$8
                     }
                     if (($2_1 | 0) == 93) {
                      break label$54
                     }
                     break label$69;
                    }
                    $2_1 = 45;
                    $6_1 = HEAPU8[$1_1 + 1 | 0];
                    if (!$6_1 | ($6_1 | 0) == 93) {
                     break label$69
                    }
                    $8 = $1_1 + 1 | 0;
                    $1_1 = HEAPU8[$1_1 - 1 | 0];
                    label$71 : {
                     if ($1_1 >>> 0 >= $6_1 >>> 0) {
                      $2_1 = $6_1;
                      break label$71;
                     }
                     while (1) {
                      $1_1 = $1_1 + 1 | 0;
                      HEAP8[$1_1 + ($10_1 + 32 | 0) | 0] = $5_1;
                      $2_1 = HEAPU8[$8 | 0];
                      if ($2_1 >>> 0 > $1_1 >>> 0) {
                       continue
                      }
                      break;
                     };
                    }
                    $1_1 = $8;
                   }
                   HEAP8[($2_1 + $10_1 | 0) + 33 | 0] = $5_1;
                   $1_1 = $1_1 + 1 | 0;
                   continue;
                  };
                 case 23:
                  $2_1 = 8;
                  break label$56;
                 case 12:
                 case 29:
                  $2_1 = 10;
                  break label$56;
                 case 1:
                 case 2:
                 case 4:
                 case 5:
                 case 6:
                 case 7:
                 case 8:
                 case 10:
                 case 16:
                 case 18:
                 case 19:
                 case 20:
                 case 21:
                 case 22:
                 case 25:
                 case 26:
                 case 28:
                 case 30:
                 case 31:
                  break label$53;
                 case 0:
                 case 24:
                 case 32:
                  break label$56;
                 case 17:
                  break label$57;
                 };
                }
                $2_1 = 0;
               }
               $4_1 = 0;
               $6_1 = 0;
               $8 = 0;
               $15_1 = 0;
               $18_1 = -1;
               $17_1 = -1;
               $23_1 = global$0 - 16 | 0;
               global$0 = $23_1;
               $5_1 = $2_1;
               label$1 : {
                if (!(($2_1 | 0) != 1 & $2_1 >>> 0 <= 36)) {
                 HEAP32[23975] = 28;
                 $17_1 = 0;
                 $18_1 = 0;
                 break label$1;
                }
                while (1) {
                 $2_1 = HEAP32[$3 + 4 >> 2];
                 label$510 : {
                  if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                   HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                   $7_1 = HEAPU8[$2_1 | 0];
                   break label$510;
                  }
                  $7_1 = $1707($3);
                 }
                 if ($1708($7_1)) {
                  continue
                 }
                 break;
                };
                label$711 : {
                 label$812 : {
                  switch ($7_1 - 43 | 0) {
                  case 0:
                  case 2:
                   break label$812;
                  default:
                   break label$711;
                  };
                 }
                 $15_1 = ($7_1 | 0) == 45 ? -1 : 0;
                 $2_1 = HEAP32[$3 + 4 >> 2];
                 if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                  HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                  $7_1 = HEAPU8[$2_1 | 0];
                  break label$711;
                 }
                 $7_1 = $1707($3);
                }
                label$1013 : {
                 label$1114 : {
                  label$1215 : {
                   label$1316 : {
                    if (!(($5_1 | 0) != 0 & ($5_1 | 0) != 16 | ($7_1 | 0) != 48)) {
                     $2_1 = HEAP32[$3 + 4 >> 2];
                     label$1517 : {
                      if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                       HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                       $7_1 = HEAPU8[$2_1 | 0];
                       break label$1517;
                      }
                      $7_1 = $1707($3);
                     }
                     if (($7_1 & -33) == 88) {
                      $5_1 = 16;
                      $2_1 = HEAP32[$3 + 4 >> 2];
                      label$18 : {
                       if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                        HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                        $7_1 = HEAPU8[$2_1 | 0];
                        break label$18;
                       }
                       $7_1 = $1707($3);
                      }
                      if (HEAPU8[$7_1 + 71745 | 0] < 16) {
                       break label$1215
                      }
                      $17_1 = 0;
                      $18_1 = 0;
                      if (HEAP32[$3 + 116 >> 2] >= 0) {
                       HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                      }
                      $1706($3, 0, 0);
                      break label$1;
                     }
                     if ($5_1) {
                      break label$1316
                     }
                     $5_1 = 8;
                     break label$1215;
                    }
                    $5_1 = $5_1 ? $5_1 : 10;
                    if ($5_1 >>> 0 > HEAPU8[$7_1 + 71745 | 0]) {
                     break label$1316
                    }
                    $17_1 = 0;
                    $18_1 = 0;
                    if (HEAP32[$3 + 116 >> 2] >= 0) {
                     HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                    }
                    $1706($3, 0, 0);
                    HEAP32[23975] = 28;
                    break label$1;
                   }
                   if (($5_1 | 0) != 10) {
                    break label$1215
                   }
                   $2_1 = 0;
                   $6_1 = $7_1 - 48 | 0;
                   if ($6_1 >>> 0 <= 9) {
                    $5_1 = 0;
                    while (1) {
                     $5_1 = Math_imul($5_1, 10) + $6_1 | 0;
                     $4_1 = $5_1 >>> 0 < 429496729;
                     $2_1 = HEAP32[$3 + 4 >> 2];
                     label$25 : {
                      if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                       HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                       $7_1 = HEAPU8[$2_1 | 0];
                       break label$25;
                      }
                      $7_1 = $1707($3);
                     }
                     $6_1 = $7_1 - 48 | 0;
                     if ($4_1 & $6_1 >>> 0 <= 9) {
                      continue
                     }
                     break;
                    };
                    $2_1 = $5_1;
                   }
                   label$28 : {
                    if ($6_1 >>> 0 > 9) {
                     break label$28
                    }
                    $5_1 = __wasm_i64_mul($2_1, 0, 10, 0);
                    $4_1 = i64toi32_i32$HIGH_BITS;
                    while (1) {
                     $2_1 = $5_1 + $6_1 | 0;
                     $4_1 = $2_1 >>> 0 < $6_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
                     $8 = $4_1;
                     $5_1 = ($4_1 | 0) == 429496729 & $2_1 >>> 0 >= 2576980378 | $4_1 >>> 0 > 429496729;
                     $4_1 = HEAP32[$3 + 4 >> 2];
                     label$30 : {
                      if (($4_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                       HEAP32[$3 + 4 >> 2] = $4_1 + 1;
                       $7_1 = HEAPU8[$4_1 | 0];
                       break label$30;
                      }
                      $7_1 = $1707($3);
                     }
                     $6_1 = $7_1 - 48 | 0;
                     if ($5_1 | $6_1 >>> 0 > 9) {
                      break label$28
                     }
                     $5_1 = __wasm_i64_mul($2_1, $8, 10, 0);
                     $4_1 = i64toi32_i32$HIGH_BITS;
                     if (($4_1 | 0) == -1 & ($6_1 ^ -1) >>> 0 >= $5_1 >>> 0 | ($4_1 | 0) != -1) {
                      continue
                     }
                     break;
                    };
                    $5_1 = 10;
                    break label$1114;
                   }
                   $5_1 = 10;
                   if ($6_1 >>> 0 <= 9) {
                    break label$1114
                   }
                   break label$1013;
                  }
                  if ($5_1 - 1 & $5_1) {
                   $2_1 = 0;
                   $4_1 = HEAPU8[$7_1 + 71745 | 0];
                   if ($5_1 >>> 0 > $4_1 >>> 0) {
                    while (1) {
                     $6_1 = Math_imul($5_1, $6_1) + $4_1 | 0;
                     $9 = $6_1 >>> 0 < 119304647;
                     $2_1 = HEAP32[$3 + 4 >> 2];
                     label$35 : {
                      if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                       HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                       $7_1 = HEAPU8[$2_1 | 0];
                       break label$35;
                      }
                      $7_1 = $1707($3);
                     }
                     $4_1 = HEAPU8[$7_1 + 71745 | 0];
                     if ($9 & $5_1 >>> 0 > $4_1 >>> 0) {
                      continue
                     }
                     break;
                    };
                    $2_1 = $6_1;
                   }
                   if ($4_1 >>> 0 >= $5_1 >>> 0) {
                    break label$1114
                   }
                   while (1) {
                    $6_1 = __wasm_i64_mul($2_1, $8, $5_1, 0);
                    $9 = i64toi32_i32$HIGH_BITS;
                    $4_1 = $4_1 & 255;
                    if (($9 | 0) == -1 & ($4_1 ^ -1) >>> 0 < $6_1 >>> 0) {
                     break label$1114
                    }
                    $2_1 = $4_1 + $6_1 | 0;
                    $8 = $2_1 >>> 0 < $4_1 >>> 0 ? $9 + 1 | 0 : $9;
                    $4_1 = HEAP32[$3 + 4 >> 2];
                    label$3921 : {
                     if (($4_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                      HEAP32[$3 + 4 >> 2] = $4_1 + 1;
                      $7_1 = HEAPU8[$4_1 | 0];
                      break label$3921;
                     }
                     $7_1 = $1707($3);
                    }
                    $4_1 = HEAPU8[$7_1 + 71745 | 0];
                    if ($4_1 >>> 0 >= $5_1 >>> 0) {
                     break label$1114
                    }
                    $1778($23_1, $5_1, 0, 0, 0, $2_1, $8, 0, 0);
                    if (!(HEAP32[$23_1 + 8 >> 2] | HEAP32[$23_1 + 12 >> 2])) {
                     continue
                    }
                    break;
                   };
                   break label$1114;
                  }
                  $24 = HEAP8[(Math_imul($5_1, 23) >>> 5 & 7) + 72001 | 0];
                  $2_1 = 0;
                  $6_1 = HEAPU8[$7_1 + 71745 | 0];
                  if ($5_1 >>> 0 > $6_1 >>> 0) {
                   while (1) {
                    $4_1 = $4_1 << $24 | $6_1;
                    $9 = $4_1 >>> 0 < 134217728;
                    $2_1 = HEAP32[$3 + 4 >> 2];
                    label$4323 : {
                     if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                      HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                      $7_1 = HEAPU8[$2_1 | 0];
                      break label$4323;
                     }
                     $7_1 = $1707($3);
                    }
                    $6_1 = HEAPU8[$7_1 + 71745 | 0];
                    if ($9 & $5_1 >>> 0 > $6_1 >>> 0) {
                     continue
                    }
                    break;
                   };
                   $2_1 = $4_1;
                  }
                  if ($5_1 >>> 0 <= $6_1 >>> 0) {
                   break label$1114
                  }
                  $9 = $24 & 31;
                  if (($24 & 63) >>> 0 >= 32) {
                   $4_1 = 0;
                   $26_1 = -1 >>> $9 | 0;
                  } else {
                   $4_1 = -1 >>> $9 | 0;
                   $26_1 = $4_1 | (1 << $9) - 1 << 32 - $9;
                  }
                  $9 = $4_1;
                  if (!$4_1 & $2_1 >>> 0 > $26_1 >>> 0) {
                   break label$1114
                  }
                  while (1) {
                   $7_1 = $24 & 31;
                   if (($24 & 63) >>> 0 >= 32) {
                    $4_1 = $2_1 << $7_1;
                    $2_1 = 0;
                   } else {
                    $4_1 = (1 << $7_1) - 1 & $2_1 >>> 32 - $7_1 | $8 << $7_1;
                    $2_1 = $2_1 << $7_1;
                   }
                   $8 = $4_1;
                   $2_1 = $6_1 & 255 | $2_1;
                   $4_1 = HEAP32[$3 + 4 >> 2];
                   label$4725 : {
                    if (($4_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                     HEAP32[$3 + 4 >> 2] = $4_1 + 1;
                     $7_1 = HEAPU8[$4_1 | 0];
                     break label$4725;
                    }
                    $7_1 = $1707($3);
                   }
                   $6_1 = HEAPU8[$7_1 + 71745 | 0];
                   if ($6_1 >>> 0 >= $5_1 >>> 0) {
                    break label$1114
                   }
                   if (($8 | 0) == ($9 | 0) & $2_1 >>> 0 <= $26_1 >>> 0 | $8 >>> 0 < $9 >>> 0) {
                    continue
                   }
                   break;
                  };
                 }
                 if (HEAPU8[$7_1 + 71745 | 0] >= $5_1 >>> 0) {
                  break label$1013
                 }
                 while (1) {
                  $2_1 = HEAP32[$3 + 4 >> 2];
                  label$5026 : {
                   if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                    HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                    $2_1 = HEAPU8[$2_1 | 0];
                    break label$5026;
                   }
                   $2_1 = $1707($3);
                  }
                  if (HEAPU8[$2_1 + 71745 | 0] < $5_1 >>> 0) {
                   continue
                  }
                  break;
                 };
                 HEAP32[23975] = 68;
                 $15_1 = 0;
                 $2_1 = -1;
                 $8 = -1;
                }
                if (HEAP32[$3 + 116 >> 2] >= 0) {
                 HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] - 1
                }
                label$5327 : {
                 if (($8 | 0) == -1 & ($2_1 | 0) != -1 | ($8 | 0) != -1) {
                  break label$5327
                 }
                 if (!($15_1 | 1)) {
                  HEAP32[23975] = 68;
                  $17_1 = -2;
                  $18_1 = ($17_1 | 0) != -1 ? -1 : -2;
                  break label$1;
                 }
                 if (($8 | 0) == -1 | ($8 | 0) != -1) {
                  break label$5327
                 }
                 HEAP32[23975] = 68;
                 break label$1;
                }
                $2_1 = $2_1 ^ $15_1;
                $17_1 = $2_1 - $15_1 | 0;
                $4_1 = $15_1 >> 31;
                $18_1 = ($4_1 ^ $8) - ($4_1 + ($2_1 >>> 0 < $15_1 >>> 0) | 0) | 0;
               }
               global$0 = $23_1 + 16 | 0;
               i64toi32_i32$HIGH_BITS = $18_1;
               $2_1 = $17_1;
               $4_1 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
               if (HEAP32[$3 + 120 >> 2] == (0 - $4_1 | 0) & HEAP32[$3 + 124 >> 2] == (0 - (($4_1 >> 31) + (($4_1 | 0) != 0) | 0) | 0)) {
                break label$9
               }
               if (!(!$12_1 | ($16_1 | 0) != 112)) {
                HEAP32[$12_1 >> 2] = $2_1;
                break label$53;
               }
               $1749($12_1, $20_1, $2_1, i64toi32_i32$HIGH_BITS);
               break label$53;
              }
              if (!$12_1) {
               break label$53
              }
              $2_1 = HEAP32[$27_1 >> 2];
              $5_1 = HEAP32[$27_1 + 4 >> 2];
              $11_1 = HEAP32[$10_1 + 8 >> 2];
              $8 = HEAP32[$10_1 + 12 >> 2];
              label$75 : {
               switch ($20_1 | 0) {
               case 0:
                $4_1 = global$0 - 32 | 0;
                global$0 = $4_1;
                $9 = $5_1 & 2147483647;
                $6_1 = $9 - 1065418752 | 0;
                $7_1 = $9 - 1082064896 | 0;
                label$128 : {
                 if (!(($6_1 | 0) == ($7_1 | 0) | $6_1 >>> 0 > $7_1 >>> 0)) {
                  $9 = ($5_1 & 33554431) << 7 | $2_1 >>> 25;
                  $2_1 = $2_1 & 33554431;
                  if (!(($2_1 | 0) == 16777216 ? !($8 | $11_1) : $2_1 >>> 0 < 16777216)) {
                   $6_1 = $9 + 1073741825 | 0;
                   break label$128;
                  }
                  $6_1 = $9 + 1073741824 | 0;
                  if ($2_1 ^ 16777216 | $11_1 | $8) {
                   break label$128
                  }
                  $6_1 = ($9 & 1) + $6_1 | 0;
                  break label$128;
                 }
                 if (!(!$2_1 & ($9 | 0) == 2147418112 ? !($8 | $11_1) : $9 >>> 0 < 2147418112)) {
                  $6_1 = (($5_1 & 33554431) << 7 | $2_1 >>> 25) & 4194303 | 2143289344;
                  break label$128;
                 }
                 $6_1 = 2139095040;
                 if ($9 >>> 0 > 1082064895) {
                  break label$128
                 }
                 $6_1 = 0;
                 $9 = $9 >>> 16 | 0;
                 if ($9 >>> 0 < 16145) {
                  break label$128
                 }
                 $7_1 = $4_1 + 16 | 0;
                 $6_1 = $5_1 & 65535 | 65536;
                 $1766($7_1, $11_1, $8, $2_1, $6_1, $9 - 16129 | 0);
                 $1776($4_1, $11_1, $8, $2_1, $6_1, 16257 - $9 | 0);
                 $6_1 = $4_1 + 8 | 0;
                 $2_1 = HEAP32[$6_1 >> 2];
                 $6_1 = (HEAP32[$6_1 + 4 >> 2] & 33554431) << 7 | $2_1 >>> 25;
                 $11_1 = $7_1 + 8 | 0;
                 $11_1 = HEAP32[$4_1 >> 2] | (HEAP32[$4_1 + 16 >> 2] | HEAP32[$11_1 >> 2] | (HEAP32[$4_1 + 20 >> 2] | HEAP32[$11_1 + 4 >> 2])) != 0;
                 $8 = HEAP32[$4_1 + 4 >> 2];
                 $2_1 = $2_1 & 33554431;
                 if (!(($2_1 | 0) == 16777216 ? !($11_1 | $8) : $2_1 >>> 0 < 16777216)) {
                  $6_1 = $6_1 + 1 | 0;
                  break label$128;
                 }
                 if ($2_1 ^ 16777216 | $11_1 | $8) {
                  break label$128
                 }
                 $6_1 = ($6_1 & 1) + $6_1 | 0;
                }
                global$0 = $4_1 + 32 | 0;
                HEAP32[$12_1 >> 2] = $5_1 & -2147483648 | $6_1;
                break label$53;
               case 1:
                HEAPF64[$12_1 >> 3] = $1780($11_1, $8, $2_1, $5_1);
                break label$53;
               case 2:
                break label$75;
               default:
                break label$53;
               };
              }
              HEAP32[$12_1 >> 2] = $11_1;
              HEAP32[$12_1 + 4 >> 2] = $8;
              HEAP32[$12_1 + 8 >> 2] = $2_1;
              HEAP32[$12_1 + 12 >> 2] = $5_1;
              break label$53;
             }
             $17_1 = ($16_1 | 0) != 99;
             $5_1 = $17_1 ? 31 : $4_1 + 1 | 0;
             label$78 : {
              if (($20_1 | 0) == 1) {
               $2_1 = $12_1;
               if ($11_1) {
                $2_1 = $1755($5_1 << 2);
                if (!$2_1) {
                 break label$10
                }
               }
               HEAP32[$10_1 + 296 >> 2] = 0;
               HEAP32[$10_1 + 300 >> 2] = 0;
               $4_1 = 0;
               while (1) {
                $0_1 = $2_1;
                label$82 : {
                 while (1) {
                  $2_1 = HEAP32[$3 + 4 >> 2];
                  label$84 : {
                   if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                    HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                    $2_1 = HEAPU8[$2_1 | 0];
                    break label$84;
                   }
                   $2_1 = $1707($3);
                  }
                  if (!HEAPU8[($2_1 + $10_1 | 0) + 33 | 0]) {
                   break label$82
                  }
                  HEAP8[$10_1 + 27 | 0] = $2_1;
                  $13 = $10_1 + 28 | 0;
                  $2_1 = $10_1 + 296 | 0;
                  $7_1 = $2_1 ? $2_1 : 97132;
                  $2_1 = HEAP32[$7_1 >> 2];
                  __inlined_func$1745 : {
                   label$14 : {
                    $6_1 = $10_1 + 27 | 0;
                    label$210 : {
                     label$311 : {
                      if (!$6_1) {
                       if ($2_1) {
                        break label$311
                       }
                       $2_1 = 0;
                       break __inlined_func$1745;
                      }
                      label$512 : {
                       if ($2_1) {
                        $8 = 1;
                        break label$512;
                       }
                       $2_1 = HEAPU8[$6_1 | 0];
                       $8 = $2_1 << 24 >> 24;
                       if (($8 | 0) >= 0) {
                        if ($13) {
                         HEAP32[$13 >> 2] = $2_1
                        }
                        $2_1 = ($8 | 0) != 0;
                        break __inlined_func$1745;
                       }
                       if (!HEAP32[HEAP32[24274] >> 2]) {
                        $2_1 = 1;
                        if (!$13) {
                         break label$210
                        }
                        HEAP32[$13 >> 2] = HEAP8[$6_1 | 0] & 57343;
                        $2_1 = 1;
                        break __inlined_func$1745;
                       }
                       $2_1 = HEAPU8[$6_1 | 0] - 194 | 0;
                       if ($2_1 >>> 0 > 50) {
                        break label$311
                       }
                       $2_1 = HEAP32[($2_1 << 2) + 72016 >> 2];
                       $8 = 0;
                       if (!$8) {
                        break label$14
                       }
                       $6_1 = $6_1 + 1 | 0;
                      }
                      $15_1 = HEAPU8[$6_1 | 0];
                      $20_1 = $15_1 >>> 3 | 0;
                      if (($20_1 - 16 | ($2_1 >> 26) + $20_1) >>> 0 > 7) {
                       break label$311
                      }
                      while (1) {
                       $8 = $8 - 1 | 0;
                       $2_1 = $15_1 - 128 | $2_1 << 6;
                       if (($2_1 | 0) >= 0) {
                        HEAP32[$7_1 >> 2] = 0;
                        if ($13) {
                         HEAP32[$13 >> 2] = $2_1
                        }
                        $2_1 = 1 - $8 | 0;
                        break __inlined_func$1745;
                       }
                       if (!$8) {
                        break label$14
                       }
                       $6_1 = $6_1 + 1 | 0;
                       $15_1 = HEAPU8[$6_1 | 0];
                       if (($15_1 & 192) == 128) {
                        continue
                       }
                       break;
                      };
                     }
                     HEAP32[$7_1 >> 2] = 0;
                     HEAP32[23975] = 25;
                     $2_1 = -1;
                    }
                    break __inlined_func$1745;
                   }
                   HEAP32[$7_1 >> 2] = $2_1;
                   $2_1 = -2;
                  }
                  if (($2_1 | 0) == -2) {
                   continue
                  }
                  $13 = 0;
                  if (($2_1 | 0) == -1) {
                   break label$8
                  }
                  if ($0_1) {
                   HEAP32[($4_1 << 2) + $0_1 >> 2] = HEAP32[$10_1 + 28 >> 2];
                   $4_1 = $4_1 + 1 | 0;
                  }
                  if (!$11_1 | ($4_1 | 0) != ($5_1 | 0)) {
                   continue
                  }
                  break;
                 };
                 $6_1 = 1;
                 $5_1 = $5_1 << 1 | 1;
                 $2_1 = $1757($0_1, $5_1 << 2);
                 if ($2_1) {
                  continue
                 }
                 break label$7;
                }
                break;
               };
               $13 = 0;
               $5_1 = $0_1;
               $2_1 = $10_1 + 296 | 0;
               if ($2_1) {
                $2_1 = HEAP32[$2_1 >> 2]
               } else {
                $2_1 = 0
               }
               if ($2_1) {
                break label$8
               }
               break label$78;
              }
              if ($11_1) {
               $4_1 = 0;
               $2_1 = $1755($5_1);
               if (!$2_1) {
                break label$10
               }
               while (1) {
                $0_1 = $2_1;
                while (1) {
                 $2_1 = HEAP32[$3 + 4 >> 2];
                 label$90 : {
                  if (($2_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                   HEAP32[$3 + 4 >> 2] = $2_1 + 1;
                   $2_1 = HEAPU8[$2_1 | 0];
                   break label$90;
                  }
                  $2_1 = $1707($3);
                 }
                 if (!HEAPU8[($2_1 + $10_1 | 0) + 33 | 0]) {
                  $5_1 = 0;
                  $13 = $0_1;
                  break label$78;
                 }
                 HEAP8[$0_1 + $4_1 | 0] = $2_1;
                 $4_1 = $4_1 + 1 | 0;
                 if (($5_1 | 0) != ($4_1 | 0)) {
                  continue
                 }
                 break;
                };
                $6_1 = 1;
                $5_1 = $5_1 << 1 | 1;
                $2_1 = $1757($0_1, $5_1);
                if ($2_1) {
                 continue
                }
                break;
               };
               $13 = $0_1;
               $0_1 = 0;
               break label$7;
              }
              $4_1 = 0;
              if ($12_1) {
               while (1) {
                $0_1 = HEAP32[$3 + 4 >> 2];
                label$95 : {
                 if (($0_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                  HEAP32[$3 + 4 >> 2] = $0_1 + 1;
                  $0_1 = HEAPU8[$0_1 | 0];
                  break label$95;
                 }
                 $0_1 = $1707($3);
                }
                if (HEAPU8[($0_1 + $10_1 | 0) + 33 | 0]) {
                 HEAP8[$4_1 + $12_1 | 0] = $0_1;
                 $4_1 = $4_1 + 1 | 0;
                 continue;
                } else {
                 $5_1 = 0;
                 $0_1 = $12_1;
                 $13 = $0_1;
                 break label$78;
                }
               }
              }
              while (1) {
               $0_1 = HEAP32[$3 + 4 >> 2];
               label$99 : {
                if (($0_1 | 0) != HEAP32[$3 + 104 >> 2]) {
                 HEAP32[$3 + 4 >> 2] = $0_1 + 1;
                 $0_1 = HEAPU8[$0_1 | 0];
                 break label$99;
                }
                $0_1 = $1707($3);
               }
               if (HEAPU8[($0_1 + $10_1 | 0) + 33 | 0]) {
                continue
               }
               break;
              };
              $0_1 = 0;
              $13 = 0;
              $5_1 = 0;
             }
             $2_1 = HEAP32[$3 + 4 >> 2];
             if (HEAP32[$3 + 116 >> 2] >= 0) {
              $2_1 = $2_1 - 1 | 0;
              HEAP32[$3 + 4 >> 2] = $2_1;
             }
             $2_1 = $2_1 - HEAP32[$3 + 44 >> 2] | 0;
             $6_1 = $2_1 + HEAP32[$3 + 120 >> 2] | 0;
             $8 = HEAP32[$3 + 124 >> 2] + ($2_1 >> 31) | 0;
             $2_1 = $2_1 >>> 0 > $6_1 >>> 0 ? $8 + 1 | 0 : $8;
             if (!($6_1 | $2_1) | !($17_1 | ($6_1 | 0) == ($9 | 0) & ($2_1 | 0) == ($18_1 | 0))) {
              break label$11
             }
             if ($11_1) {
              HEAP32[$12_1 >> 2] = $0_1
             }
             label$103 : {
              if (($16_1 | 0) == 99) {
               break label$103
              }
              if ($5_1) {
               HEAP32[($4_1 << 2) + $5_1 >> 2] = 0
              }
              if (!$13) {
               $13 = 0;
               break label$103;
              }
              HEAP8[$4_1 + $13 | 0] = 0;
             }
             $0_1 = $5_1;
            }
            $2_1 = $19 + HEAP32[$3 + 124 >> 2] | 0;
            $4_1 = $14 + HEAP32[$3 + 120 >> 2] | 0;
            $5_1 = $4_1 >>> 0 < $14 >>> 0 ? $2_1 + 1 | 0 : $2_1;
            $2_1 = HEAP32[$3 + 4 >> 2] - HEAP32[$3 + 44 >> 2] | 0;
            $14 = $4_1 + $2_1 | 0;
            $4_1 = ($2_1 >> 31) + $5_1 | 0;
            $19 = $2_1 >>> 0 > $14 >>> 0 ? $4_1 + 1 | 0 : $4_1;
            $22_1 = (($12_1 | 0) != 0) + $22_1 | 0;
           }
           $4_1 = $1_1 + 1 | 0;
           $1_1 = HEAPU8[$1_1 + 1 | 0];
           if ($1_1) {
            continue
           }
           break label$2;
          }
          break;
         };
         $0_1 = $5_1;
         break label$9;
        }
        $6_1 = 1;
        $13 = 0;
        $0_1 = 0;
        break label$7;
       }
       $6_1 = $11_1;
       break label$3;
      }
      $6_1 = $11_1;
     }
     if ($22_1) {
      break label$3
     }
    }
    $22_1 = -1;
   }
   if (!$6_1) {
    break label$2
   }
   $1756($13);
   $1756($0_1);
  }
  global$0 = $10_1 + 304 | 0;
  global$0 = $3 + 144 | 0;
  global$0 = $25_1 + 16 | 0;
  return $22_1;
 }
 
 function $1691($0_1) {
  $0_1 = $0_1 | 0;
  return 0;
 }
 
 function $1692($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0;
 }
 
 function $1693($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  __inlined_func$1694 : {
   label$1 : {
    $3 = $1_1 & 255;
    if ($3) {
     if ($0_1 & 3) {
      while (1) {
       $2_1 = HEAPU8[$0_1 | 0];
       if (!$2_1 | ($2_1 | 0) == ($1_1 & 255)) {
        break label$1
       }
       $0_1 = $0_1 + 1 | 0;
       if ($0_1 & 3) {
        continue
       }
       break;
      }
     }
     $2_1 = HEAP32[$0_1 >> 2];
     label$5 : {
      if (($2_1 ^ -1) & $2_1 - 16843009 & -2139062144) {
       break label$5
      }
      $3 = Math_imul($3, 16843009);
      while (1) {
       $2_1 = $2_1 ^ $3;
       if (($2_1 ^ -1) & $2_1 - 16843009 & -2139062144) {
        break label$5
       }
       $2_1 = HEAP32[$0_1 + 4 >> 2];
       $0_1 = $0_1 + 4 | 0;
       if (!($2_1 - 16843009 & ($2_1 ^ -1) & -2139062144)) {
        continue
       }
       break;
      };
     }
     while (1) {
      $2_1 = $0_1;
      $3 = HEAPU8[$0_1 | 0];
      if ($3) {
       $0_1 = $2_1 + 1 | 0;
       if (($3 | 0) != ($1_1 & 255)) {
        continue
       }
      }
      break;
     };
     $0_1 = $2_1;
     break __inlined_func$1694;
    }
    $0_1 = $1697($0_1) + $0_1 | 0;
    break __inlined_func$1694;
   }
  }
  return HEAPU8[$0_1 | 0] == ($1_1 & 255) ? $0_1 : 0;
 }
 
 function $1695($0_1, $1_1) {
  var $2_1 = 0, $3 = 0;
  $2_1 = HEAPU8[$0_1 | 0];
  $3 = HEAPU8[$1_1 | 0];
  label$1 : {
   if (!$2_1 | ($3 | 0) != ($2_1 | 0)) {
    break label$1
   }
   while (1) {
    $3 = HEAPU8[$1_1 + 1 | 0];
    $2_1 = HEAPU8[$0_1 + 1 | 0];
    if (!$2_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($2_1 | 0) == ($3 | 0)) {
     continue
    }
    break;
   };
  }
  return $2_1 - $3 | 0;
 }
 
 function $1697($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  $1_1 = $0_1;
  label$1 : {
   if ($1_1 & 3) {
    while (1) {
     if (!HEAPU8[$1_1 | 0]) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3) {
      continue
     }
     break;
    }
   }
   while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3 = HEAP32[$2_1 >> 2];
    if (!(($3 ^ -1) & $3 - 16843009 & -2139062144)) {
     continue
    }
    break;
   };
   while (1) {
    $1_1 = $2_1;
    $2_1 = $1_1 + 1 | 0;
    if (HEAPU8[$1_1 | 0]) {
     continue
    }
    break;
   };
  }
  return $1_1 - $0_1 | 0;
 }
 
 function $1699($0_1, $1_1, $2_1) {
  var $3 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (($0_1 ^ $1_1) & 3) {
       break label$4
      }
      $3 = ($2_1 | 0) != 0;
      label$5 : {
       if (!($1_1 & 3) | !$2_1) {
        break label$5
       }
       while (1) {
        $3 = HEAPU8[$1_1 | 0];
        HEAP8[$0_1 | 0] = $3;
        if (!$3) {
         break label$1
        }
        $0_1 = $0_1 + 1 | 0;
        $2_1 = $2_1 - 1 | 0;
        $3 = ($2_1 | 0) != 0;
        $1_1 = $1_1 + 1 | 0;
        if (!($1_1 & 3)) {
         break label$5
        }
        if ($2_1) {
         continue
        }
        break;
       };
      }
      if (!$3) {
       break label$2
      }
      if (!HEAPU8[$1_1 | 0]) {
       break label$1
      }
      if ($2_1 >>> 0 < 4) {
       break label$4
      }
      while (1) {
       $3 = HEAP32[$1_1 >> 2];
       if (($3 ^ -1) & $3 - 16843009 & -2139062144) {
        break label$3
       }
       HEAP32[$0_1 >> 2] = $3;
       $0_1 = $0_1 + 4 | 0;
       $1_1 = $1_1 + 4 | 0;
       $2_1 = $2_1 - 4 | 0;
       if ($2_1 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     if (!$2_1) {
      break label$2
     }
    }
    while (1) {
     $3 = HEAPU8[$1_1 | 0];
     HEAP8[$0_1 | 0] = $3;
     if (!$3) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 - 1 | 0;
     if ($2_1) {
      continue
     }
     break;
    };
   }
   $2_1 = 0;
  }
  $1604($0_1, 0, $2_1);
 }
 
 function $1706($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  HEAP32[$0_1 + 112 >> 2] = $1_1;
  HEAP32[$0_1 + 116 >> 2] = $2_1;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $3 = HEAP32[$0_1 + 44 >> 2] - $4_1 | 0;
  HEAP32[$0_1 + 120 >> 2] = $3;
  HEAP32[$0_1 + 124 >> 2] = $3 >> 31;
  $3 = HEAP32[$0_1 + 8 >> 2];
  label$1 : {
   if (!($1_1 | $2_1)) {
    break label$1
   }
   $5_1 = $3 - $4_1 | 0;
   $6_1 = $5_1 >> 31;
   if (($2_1 | 0) >= ($6_1 | 0) & $1_1 >>> 0 >= $5_1 >>> 0 | ($2_1 | 0) > ($6_1 | 0)) {
    break label$1
   }
   $3 = $1_1 + $4_1 | 0;
  }
  HEAP32[$0_1 + 104 >> 2] = $3;
 }
 
 function $1707($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $1_1 = HEAP32[$0_1 + 4 >> 2];
  $6_1 = HEAP32[$0_1 + 44 >> 2];
  $2_1 = $1_1 - $6_1 | 0;
  $4_1 = $2_1 + HEAP32[$0_1 + 120 >> 2] | 0;
  label$1 : {
   $5_1 = HEAP32[$0_1 + 112 >> 2];
   $7_1 = HEAP32[$0_1 + 116 >> 2];
   $3 = HEAP32[$0_1 + 124 >> 2] + ($2_1 >> 31) | 0;
   $2_1 = $2_1 >>> 0 > $4_1 >>> 0 ? $3 + 1 | 0 : $3;
   if (!(($7_1 | 0) <= ($2_1 | 0) & $4_1 >>> 0 >= $5_1 >>> 0 | ($2_1 | 0) > ($7_1 | 0) ? $5_1 | $7_1 : 0)) {
    $1_1 = global$0 - 16 | 0;
    global$0 = $1_1;
    $6_1 = -1;
    label$10 : {
     if ($1623($0_1)) {
      break label$10
     }
     if ((FUNCTION_TABLE[HEAP32[$0_1 + 32 >> 2]]($0_1, $1_1 + 15 | 0, 1) | 0) != 1) {
      break label$10
     }
     $6_1 = HEAPU8[$1_1 + 15 | 0];
    }
    global$0 = $1_1 + 16 | 0;
    if (($6_1 | 0) >= 0) {
     break label$1
    }
    $6_1 = HEAP32[$0_1 + 44 >> 2];
    $1_1 = HEAP32[$0_1 + 4 >> 2];
   }
   HEAP32[$0_1 + 112 >> 2] = -1;
   HEAP32[$0_1 + 116 >> 2] = -1;
   HEAP32[$0_1 + 104 >> 2] = $1_1;
   $3 = $4_1;
   $4_1 = $6_1 - $1_1 | 0;
   $1_1 = $3 + $4_1 | 0;
   HEAP32[$0_1 + 120 >> 2] = $1_1;
   $3 = $0_1;
   $0_1 = ($4_1 >> 31) + $2_1 | 0;
   HEAP32[$3 + 124 >> 2] = $1_1 >>> 0 < $4_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
   return -1;
  }
  $3 = $2_1;
  $1_1 = $2_1 + 1 | 0;
  $2_1 = $4_1 + 1 | 0;
  $7_1 = $2_1 ? $3 : $1_1;
  $4_1 = HEAP32[$0_1 + 4 >> 2];
  $1_1 = HEAP32[$0_1 + 8 >> 2];
  $5_1 = HEAP32[$0_1 + 112 >> 2];
  $3 = HEAP32[$0_1 + 116 >> 2];
  label$4 : {
   if (!($5_1 | $3)) {
    break label$4
   }
   $3 = $3 - ($7_1 + ($2_1 >>> 0 > $5_1 >>> 0) | 0) | 0;
   $8 = $1_1 - $4_1 | 0;
   $9 = $8 >> 31;
   $5_1 = $5_1 - $2_1 | 0;
   if (($3 | 0) >= ($9 | 0) & $5_1 >>> 0 >= $8 >>> 0 | ($3 | 0) > ($9 | 0)) {
    break label$4
   }
   $1_1 = $4_1 + $5_1 | 0;
  }
  HEAP32[$0_1 + 104 >> 2] = $1_1;
  $3 = $2_1;
  $1_1 = HEAP32[$0_1 + 44 >> 2];
  $2_1 = $1_1 - $4_1 | 0;
  $5_1 = $3 + $2_1 | 0;
  HEAP32[$0_1 + 120 >> 2] = $5_1;
  $3 = $0_1;
  $0_1 = ($2_1 >> 31) + $7_1 | 0;
  HEAP32[$3 + 124 >> 2] = $2_1 >>> 0 > $5_1 >>> 0 ? $0_1 + 1 | 0 : $0_1;
  if ($1_1 >>> 0 >= $4_1 >>> 0) {
   HEAP8[$4_1 - 1 | 0] = $6_1
  }
  return $6_1;
 }
 
 function $1708($0_1) {
  return ($0_1 | 0) == 32 | $0_1 - 9 >>> 0 < 5;
 }
 
 function $1709($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $3;
  HEAP32[$0_1 + 12 >> 2] = $4_1 & 65535 | ($8 >>> 16 & 32768 | $4_1 >>> 16 & 32767) << 16;
 }
 
 function $1710($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  label$1 : {
   if (($5_1 | 0) >= 16384) {
    $7_1 = $6_1 + 32 | 0;
    $1777($7_1, $1_1, $2_1, $3, $4_1, 0, 0, 0, 2147352576);
    $1_1 = $7_1 + 8 | 0;
    $3 = HEAP32[$1_1 >> 2];
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    $1_1 = HEAP32[$6_1 + 32 >> 2];
    $2_1 = HEAP32[$6_1 + 36 >> 2];
    if ($5_1 >>> 0 < 32767) {
     $5_1 = $5_1 - 16383 | 0;
     break label$1;
    }
    $7_1 = $6_1 + 16 | 0;
    $1777($7_1, $1_1, $2_1, $3, $4_1, 0, 0, 0, 2147352576);
    $5_1 = (($5_1 | 0) >= 49149 ? 49149 : $5_1) - 32766 | 0;
    $1_1 = $7_1 + 8 | 0;
    $3 = HEAP32[$1_1 >> 2];
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    $1_1 = HEAP32[$6_1 + 16 >> 2];
    $2_1 = HEAP32[$6_1 + 20 >> 2];
    break label$1;
   }
   if (($5_1 | 0) > -16383) {
    break label$1
   }
   $7_1 = $6_1 - -64 | 0;
   $1777($7_1, $1_1, $2_1, $3, $4_1, 0, 0, 0, 7471104);
   $1_1 = $7_1 + 8 | 0;
   $3 = HEAP32[$1_1 >> 2];
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = HEAP32[$6_1 + 64 >> 2];
   $2_1 = HEAP32[$6_1 + 68 >> 2];
   if ($5_1 >>> 0 > 4294934644) {
    $5_1 = $5_1 + 16269 | 0;
    break label$1;
   }
   $7_1 = $6_1 + 48 | 0;
   $1777($7_1, $1_1, $2_1, $3, $4_1, 0, 0, 0, 7471104);
   $5_1 = (($5_1 | 0) <= -48920 ? -48920 : $5_1) + 32538 | 0;
   $1_1 = $7_1 + 8 | 0;
   $3 = HEAP32[$1_1 >> 2];
   $4_1 = HEAP32[$1_1 + 4 >> 2];
   $1_1 = HEAP32[$6_1 + 48 >> 2];
   $2_1 = HEAP32[$6_1 + 52 >> 2];
  }
  $1777($6_1, $1_1, $2_1, $3, $4_1, 0, 0, 0, $5_1 + 16383 << 16);
  $1_1 = $6_1 + 8 | 0;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $2_1;
  $1_1 = HEAP32[$6_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$6_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $1_1;
  global$0 = $6_1 + 80 | 0;
 }
 
 function $1712($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0;
  $9 = global$0 - 128 | 0;
  global$0 = $9;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!$1767($5_1, $6_1, $7_1, $8, 0, 0, 0, 0)) {
      break label$3
     }
     $10_1 = $8 & 65535;
     $11_1 = $8 >>> 16 & 32767;
     __inlined_func$1711 : {
      label$10 : {
       if (($11_1 | 0) != 32767) {
        $12_1 = 4;
        if ($11_1) {
         break label$10
        }
        $11_1 = $5_1 | $7_1 | ($6_1 | $10_1) ? 3 : 2;
        break __inlined_func$1711;
       }
       $12_1 = !($5_1 | $7_1 | ($6_1 | $10_1));
      }
      $11_1 = $12_1;
     }
     $18_1 = $4_1 >>> 16 | 0;
     $14 = $18_1 & 32767;
     if (($14 | 0) == 32767) {
      break label$3
     }
     if ($11_1) {
      break label$2
     }
    }
    $11_1 = $9 + 16 | 0;
    $1777($11_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8);
    $4_1 = HEAP32[$9 + 16 >> 2];
    $3 = HEAP32[$9 + 20 >> 2];
    $1_1 = $11_1 + 8 | 0;
    $2_1 = HEAP32[$1_1 >> 2];
    $1_1 = HEAP32[$1_1 + 4 >> 2];
    $1769($9, $4_1, $3, $2_1, $1_1, $4_1, $3, $2_1, $1_1);
    $1_1 = $9 + 8 | 0;
    $3 = HEAP32[$1_1 >> 2];
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    $7_1 = HEAP32[$9 >> 2];
    $8 = HEAP32[$9 + 4 >> 2];
    break label$1;
   }
   $13 = $3;
   $12_1 = $4_1 & 2147483647;
   $11_1 = $7_1;
   $10_1 = $8 & 2147483647;
   if (($1767($1_1, $2_1, $13, $12_1, $5_1, $6_1, $7_1, $10_1) | 0) <= 0) {
    if ($1767($1_1, $2_1, $13, $12_1, $5_1, $6_1, $11_1, $10_1)) {
     $7_1 = $1_1;
     $8 = $2_1;
     break label$1;
    }
    $1777($9 + 112 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 0);
    $1_1 = $9 + 120 | 0;
    $3 = HEAP32[$1_1 >> 2];
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    $7_1 = HEAP32[$9 + 112 >> 2];
    $8 = HEAP32[$9 + 116 >> 2];
    break label$1;
   }
   $15_1 = $8 >>> 16 & 32767;
   label$6 : {
    if ($14) {
     $8 = $2_1;
     $7_1 = $1_1;
     break label$6;
    }
    $1777($9 + 96 | 0, $1_1, $2_1, $13, $12_1, 0, 0, 0, 1081540608);
    $7_1 = $9 + 104 | 0;
    $13 = HEAP32[$7_1 >> 2];
    $7_1 = HEAP32[$7_1 + 4 >> 2];
    $12_1 = $7_1;
    $14 = ($7_1 >>> 16 | 0) - 120 | 0;
    $8 = HEAP32[$9 + 100 >> 2];
    $7_1 = HEAP32[$9 + 96 >> 2];
   }
   if (!$15_1) {
    $1777($9 + 80 | 0, $5_1, $6_1, $11_1, $10_1, 0, 0, 0, 1081540608);
    $5_1 = $9 + 88 | 0;
    $11_1 = HEAP32[$5_1 >> 2];
    $5_1 = HEAP32[$5_1 + 4 >> 2];
    $10_1 = $5_1;
    $15_1 = ($10_1 >>> 16 | 0) - 120 | 0;
    $6_1 = HEAP32[$9 + 84 >> 2];
    $5_1 = HEAP32[$9 + 80 >> 2];
   }
   $16_1 = $11_1;
   $19 = $10_1 & 65535 | 65536;
   $12_1 = $12_1 & 65535 | 65536;
   if (($14 | 0) > ($15_1 | 0)) {
    while (1) {
     $10_1 = $13 - $16_1 | 0;
     $11_1 = ($6_1 | 0) == ($8 | 0) & $5_1 >>> 0 > $7_1 >>> 0 | $6_1 >>> 0 > $8 >>> 0;
     $17_1 = $10_1 - $11_1 | 0;
     $10_1 = ($12_1 - (($13 >>> 0 < $16_1 >>> 0) + $19 | 0) | 0) - ($10_1 >>> 0 < $11_1 >>> 0) | 0;
     label$11 : {
      if (($10_1 | 0) >= 0) {
       $11_1 = $7_1;
       $7_1 = $7_1 - $5_1 | 0;
       $8 = $8 - (($5_1 >>> 0 > $11_1 >>> 0) + $6_1 | 0) | 0;
       if (!($7_1 | $17_1 | ($8 | $10_1))) {
        $1777($9 + 32 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 0);
        $1_1 = $9 + 40 | 0;
        $3 = HEAP32[$1_1 >> 2];
        $4_1 = HEAP32[$1_1 + 4 >> 2];
        $7_1 = HEAP32[$9 + 32 >> 2];
        $8 = HEAP32[$9 + 36 >> 2];
        break label$1;
       }
       $13 = $17_1 << 1 | $8 >>> 31;
       $11_1 = $10_1 << 1 | $17_1 >>> 31;
       break label$11;
      }
      $11_1 = $12_1 << 1 | $13 >>> 31;
      $13 = $13 << 1 | $8 >>> 31;
     }
     $12_1 = $11_1;
     $8 = $8 << 1 | $7_1 >>> 31;
     $7_1 = $7_1 << 1;
     $14 = $14 - 1 | 0;
     if (($14 | 0) > ($15_1 | 0)) {
      continue
     }
     break;
    };
    $14 = $15_1;
   }
   $15_1 = $13 - $16_1 | 0;
   $10_1 = ($6_1 | 0) == ($8 | 0) & $5_1 >>> 0 > $7_1 >>> 0 | $6_1 >>> 0 > $8 >>> 0;
   $11_1 = $15_1 - $10_1 | 0;
   label$14 : {
    $10_1 = ($12_1 - (($13 >>> 0 < $16_1 >>> 0) + $19 | 0) | 0) - ($10_1 >>> 0 > $15_1 >>> 0) | 0;
    if (!(($10_1 | 0) > 0 | ($10_1 | 0) >= 0)) {
     $11_1 = $13;
     $10_1 = $12_1;
     break label$14;
    }
    $13 = $7_1;
    $7_1 = $7_1 - $5_1 | 0;
    $8 = $8 - (($5_1 >>> 0 > $13 >>> 0) + $6_1 | 0) | 0;
    if ($7_1 | $11_1 | ($8 | $10_1)) {
     break label$14
    }
    $1777($9 + 48 | 0, $1_1, $2_1, $3, $4_1, 0, 0, 0, 0);
    $1_1 = $9 + 56 | 0;
    $3 = HEAP32[$1_1 >> 2];
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    $7_1 = HEAP32[$9 + 48 >> 2];
    $8 = HEAP32[$9 + 52 >> 2];
    break label$1;
   }
   if ($10_1 >>> 0 <= 65535) {
    while (1) {
     $1_1 = $8 >>> 31 | 0;
     $14 = $14 - 1 | 0;
     $8 = $8 << 1 | $7_1 >>> 31;
     $7_1 = $7_1 << 1;
     $10_1 = $10_1 << 1 | $11_1 >>> 31;
     $11_1 = $1_1 | $11_1 << 1;
     if ($10_1 >>> 0 < 65536) {
      continue
     }
     break;
    }
   }
   $1_1 = $18_1 & 32768;
   if (($14 | 0) <= 0) {
    $1777($9 - -64 | 0, $7_1, $8, $11_1, $10_1 & 65535 | ($1_1 | $14 + 120) << 16, 0, 0, 0, 1065811968);
    $1_1 = $9 + 72 | 0;
    $3 = HEAP32[$1_1 >> 2];
    $4_1 = HEAP32[$1_1 + 4 >> 2];
    $7_1 = HEAP32[$9 + 64 >> 2];
    $8 = HEAP32[$9 + 68 >> 2];
    break label$1;
   }
   $3 = $11_1;
   $4_1 = $10_1 & 65535 | ($1_1 | $14) << 16;
  }
  HEAP32[$0_1 >> 2] = $7_1;
  HEAP32[$0_1 + 4 >> 2] = $8;
  HEAP32[$0_1 + 8 >> 2] = $3;
  HEAP32[$0_1 + 12 >> 2] = $4_1;
  global$0 = $9 + 128 | 0;
 }
 
 function $1714($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0.0;
  $18_1 = global$0 - 48 | 0;
  global$0 = $18_1;
  label$1 : {
   if ($2_1 >>> 0 <= 2) {
    $7_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 << 2;
    $17_1 = HEAP32[$2_1 + 71244 >> 2];
    $23_1 = HEAP32[$2_1 + 71232 >> 2];
    while (1) {
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     label$4 : {
      if (($2_1 | 0) != HEAP32[$1_1 + 104 >> 2]) {
       HEAP32[$7_1 >> 2] = $2_1 + 1;
       $2_1 = HEAPU8[$2_1 | 0];
       break label$4;
      }
      $2_1 = $1707($1_1);
     }
     if ($1708($2_1)) {
      continue
     }
     break;
    };
    $5_1 = 1;
    label$6 : {
     label$7 : {
      switch ($2_1 - 43 | 0) {
      case 0:
      case 2:
       break label$7;
      default:
       break label$6;
      };
     }
     $5_1 = ($2_1 | 0) == 45 ? -1 : 1;
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     if (($2_1 | 0) != HEAP32[$1_1 + 104 >> 2]) {
      HEAP32[$7_1 >> 2] = $2_1 + 1;
      $2_1 = HEAPU8[$2_1 | 0];
      break label$6;
     }
     $2_1 = $1707($1_1);
    }
    label$9 : {
     label$10 : {
      while (1) {
       if (HEAP8[$8 + 1085 | 0] == ($2_1 | 32)) {
        label$13 : {
         if ($8 >>> 0 > 6) {
          break label$13
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         if (($2_1 | 0) != HEAP32[$1_1 + 104 >> 2]) {
          HEAP32[$7_1 >> 2] = $2_1 + 1;
          $2_1 = HEAPU8[$2_1 | 0];
          break label$13;
         }
         $2_1 = $1707($1_1);
        }
        $8 = $8 + 1 | 0;
        if (($8 | 0) != 8) {
         continue
        }
        break label$10;
       }
       break;
      };
      if (($8 | 0) != 3) {
       if (($8 | 0) == 8) {
        break label$10
       }
       if (!$3 | $8 >>> 0 < 4) {
        break label$9
       }
       if (($8 | 0) == 8) {
        break label$10
       }
      }
      $1_1 = HEAP32[$1_1 + 116 >> 2];
      if (($1_1 | 0) >= 0) {
       HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1
      }
      if (!$3 | $8 >>> 0 < 4) {
       break label$10
      }
      $1_1 = ($1_1 | 0) < 0;
      while (1) {
       if (!$1_1) {
        HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1
       }
       $8 = $8 - 1 | 0;
       if ($8 >>> 0 > 3) {
        continue
       }
       break;
      };
     }
     $3 = 0;
     $2_1 = 0;
     $8 = global$0 - 16 | 0;
     global$0 = $8;
     $6_1 = (wasm2js_scratch_store_f32(Math_fround(Math_fround($5_1 | 0) * Math_fround(Infinity))), wasm2js_scratch_load_i32(2));
     $1_1 = $6_1 & 2147483647;
     label$11 : {
      if ($1_1 - 8388608 >>> 0 <= 2130706431) {
       $5_1 = $1_1 << 25;
       $3 = ($1_1 >>> 7 | 0) + 1065353216 | 0;
       $1_1 = 0;
       break label$11;
      }
      if ($1_1 >>> 0 >= 2139095040) {
       $5_1 = $6_1 << 25;
       $3 = $6_1 >>> 7 | 2147418112;
       $1_1 = 0;
       break label$11;
      }
      if (!$1_1) {
       $5_1 = 0;
       $1_1 = 0;
       break label$11;
      }
      $2_1 = $1_1;
      $1_1 = Math_clz32($1_1);
      $1766($8, $2_1, 0, 0, 0, $1_1 + 81 | 0);
      $2_1 = $8 + 8 | 0;
      $5_1 = HEAP32[$2_1 >> 2];
      $3 = HEAP32[$2_1 + 4 >> 2] ^ 65536 | 16265 - $1_1 << 16;
      $2_1 = HEAP32[$8 + 4 >> 2];
      $1_1 = HEAP32[$8 >> 2];
     }
     HEAP32[$18_1 >> 2] = $1_1;
     HEAP32[$18_1 + 4 >> 2] = $2_1;
     HEAP32[$18_1 + 8 >> 2] = $5_1;
     HEAP32[$18_1 + 12 >> 2] = $6_1 & -2147483648 | $3;
     global$0 = $8 + 16 | 0;
     $1_1 = $18_1 + 8 | 0;
     $5_1 = HEAP32[$1_1 >> 2];
     $2_1 = HEAP32[$1_1 + 4 >> 2];
     $16_1 = HEAP32[$18_1 >> 2];
     $11_1 = HEAP32[$18_1 + 4 >> 2];
     break label$1;
    }
    label$19 : {
     label$20 : {
      label$21 : {
       if ($8) {
        break label$21
       }
       $8 = 0;
       while (1) {
        if (HEAP8[$8 + 7861 | 0] != ($2_1 | 32)) {
         break label$21
        }
        label$23 : {
         if ($8 >>> 0 > 1) {
          break label$23
         }
         $2_1 = HEAP32[$1_1 + 4 >> 2];
         if (($2_1 | 0) != HEAP32[$1_1 + 104 >> 2]) {
          HEAP32[$7_1 >> 2] = $2_1 + 1;
          $2_1 = HEAPU8[$2_1 | 0];
          break label$23;
         }
         $2_1 = $1707($1_1);
        }
        $8 = $8 + 1 | 0;
        if (($8 | 0) != 3) {
         continue
        }
        break;
       };
       break label$20;
      }
      label$25 : {
       switch ($8 | 0) {
       case 0:
        label$27 : {
         if (($2_1 | 0) != 48) {
          break label$27
         }
         $8 = HEAP32[$1_1 + 4 >> 2];
         label$28 : {
          if (($8 | 0) != HEAP32[$1_1 + 104 >> 2]) {
           HEAP32[$7_1 >> 2] = $8 + 1;
           $9 = HEAPU8[$8 | 0];
           break label$28;
          }
          $9 = $1707($1_1);
         }
         if (($9 & -33) == 88) {
          $25_1 = $18_1 + 16 | 0;
          $8 = 0;
          $7_1 = global$0 - 432 | 0;
          global$0 = $7_1;
          $10_1 = $1_1;
          $2_1 = HEAP32[$1_1 + 4 >> 2];
          label$14 : {
           if (($2_1 | 0) != HEAP32[$1_1 + 104 >> 2]) {
            HEAP32[$10_1 + 4 >> 2] = $2_1 + 1;
            $9 = HEAPU8[$2_1 | 0];
            break label$14;
           }
           $9 = $1707($10_1);
          }
          label$35 : {
           label$46 : {
            while (1) {
             label$5 : {
              if (($9 | 0) != 48) {
               if (($9 | 0) != 46) {
                break label$35
               }
               $1_1 = HEAP32[$10_1 + 4 >> 2];
               if (($1_1 | 0) == HEAP32[$10_1 + 104 >> 2]) {
                break label$5
               }
               HEAP32[$10_1 + 4 >> 2] = $1_1 + 1;
               $9 = HEAPU8[$1_1 | 0];
               break label$46;
              }
              $1_1 = HEAP32[$10_1 + 4 >> 2];
              if (($1_1 | 0) != HEAP32[$10_1 + 104 >> 2]) {
               HEAP32[$10_1 + 4 >> 2] = $1_1 + 1;
               $9 = HEAPU8[$1_1 | 0];
              } else {
               $9 = $1707($10_1)
              }
              $6_1 = 1;
              continue;
             }
             break;
            };
            $9 = $1707($10_1);
           }
           $24 = 1;
           if (($9 | 0) != 48) {
            break label$35
           }
           while (1) {
            $1_1 = $11_1 - 1 | 0;
            $16_1 = $16_1 - 1 | 0;
            $11_1 = ($16_1 | 0) != -1 ? $1_1 + 1 | 0 : $1_1;
            $1_1 = HEAP32[$10_1 + 4 >> 2];
            label$109 : {
             if (($1_1 | 0) != HEAP32[$10_1 + 104 >> 2]) {
              HEAP32[$10_1 + 4 >> 2] = $1_1 + 1;
              $9 = HEAPU8[$1_1 | 0];
              break label$109;
             }
             $9 = $1707($10_1);
            }
            if (($9 | 0) == 48) {
             continue
            }
            break;
           };
           $6_1 = 1;
          }
          $13 = 1073676288;
          $1_1 = 0;
          $2_1 = 0;
          while (1) {
           label$1211 : {
            $26_1 = $9 | 32;
            label$1412 : {
             label$15 : {
              $27_1 = $9 - 48 | 0;
              if ($27_1 >>> 0 < 10) {
               break label$15
              }
              if (($9 | 0) != 46 & $26_1 - 97 >>> 0 >= 6) {
               break label$1211
              }
              if (($9 | 0) != 46) {
               break label$15
              }
              if ($24) {
               break label$1211
              }
              $24 = 1;
              $16_1 = $1_1;
              $11_1 = $2_1;
              break label$1412;
             }
             $6_1 = ($9 | 0) > 57 ? $26_1 - 87 | 0 : $27_1;
             label$1713 : {
              if (!($1_1 >>> 0 > 7 & ($2_1 | 0) >= 0 | ($2_1 | 0) > 0)) {
               $22_1 = $6_1 + ($22_1 << 4) | 0;
               break label$1713;
              }
              if (!(!$2_1 & $1_1 >>> 0 > 28 | ($2_1 | 0) != 0)) {
               $9 = $7_1 + 48 | 0;
               $1772($9, $6_1);
               $6_1 = $7_1 + 32 | 0;
               $1777($6_1, $14, $19, $8, $13, 0, 0, 0, 1073414144);
               $26_1 = $7_1 + 16 | 0;
               $8 = $9 + 8 | 0;
               $9 = HEAP32[$8 >> 2];
               $27_1 = HEAP32[$8 + 4 >> 2];
               $14 = HEAP32[$7_1 + 32 >> 2];
               $19 = HEAP32[$7_1 + 36 >> 2];
               $6_1 = $6_1 + 8 | 0;
               $8 = HEAP32[$6_1 >> 2];
               $13 = HEAP32[$6_1 + 4 >> 2];
               $1777($26_1, HEAP32[$7_1 + 48 >> 2], HEAP32[$7_1 + 52 >> 2], $9, $27_1, $14, $19, $8, $13);
               $6_1 = $26_1 + 8 | 0;
               $1765($7_1, HEAP32[$7_1 + 16 >> 2], HEAP32[$7_1 + 20 >> 2], HEAP32[$6_1 >> 2], HEAP32[$6_1 + 4 >> 2], $15_1, $4_1, $21_1, $20_1);
               $6_1 = $7_1 + 8 | 0;
               $21_1 = HEAP32[$6_1 >> 2];
               $20_1 = HEAP32[$6_1 + 4 >> 2];
               $15_1 = HEAP32[$7_1 >> 2];
               $4_1 = HEAP32[$7_1 + 4 >> 2];
               break label$1713;
              }
              if ($12_1 | !$6_1) {
               break label$1713
              }
              $6_1 = $7_1 + 80 | 0;
              $1777($6_1, $14, $19, $8, $13, 0, 0, 0, 1073610752);
              $12_1 = $7_1 - -64 | 0;
              $6_1 = $6_1 + 8 | 0;
              $1765($12_1, HEAP32[$7_1 + 80 >> 2], HEAP32[$7_1 + 84 >> 2], HEAP32[$6_1 >> 2], HEAP32[$6_1 + 4 >> 2], $15_1, $4_1, $21_1, $20_1);
              $6_1 = $12_1 + 8 | 0;
              $21_1 = HEAP32[$6_1 >> 2];
              $20_1 = HEAP32[$6_1 + 4 >> 2];
              $12_1 = 1;
              $15_1 = HEAP32[$7_1 + 64 >> 2];
              $4_1 = HEAP32[$7_1 + 68 >> 2];
             }
             $1_1 = $1_1 + 1 | 0;
             $2_1 = $1_1 ? $2_1 : $2_1 + 1 | 0;
             $6_1 = 1;
            }
            $9 = HEAP32[$10_1 + 4 >> 2];
            if (($9 | 0) != HEAP32[$10_1 + 104 >> 2]) {
             HEAP32[$10_1 + 4 >> 2] = $9 + 1;
             $9 = HEAPU8[$9 | 0];
            } else {
             $9 = $1707($10_1)
            }
            continue;
           }
           break;
          };
          label$2114 : {
           if (!$6_1) {
            label$2315 : {
             label$24 : {
              if (HEAP32[$10_1 + 116 >> 2] >= 0) {
               $1_1 = HEAP32[$10_1 + 4 >> 2];
               HEAP32[$10_1 + 4 >> 2] = $1_1 - 1;
               if (!$3) {
                break label$24
               }
               HEAP32[$10_1 + 4 >> 2] = $1_1 - 2;
               if (!$24) {
                break label$2315
               }
               HEAP32[$10_1 + 4 >> 2] = $1_1 - 3;
               break label$2315;
              }
              if ($3) {
               break label$2315
              }
             }
             $1706($10_1, 0, 0);
            }
            $1770($7_1 + 96 | 0, +($5_1 | 0) * 0.0);
            $2_1 = $7_1 + 104 | 0;
            $1_1 = HEAP32[$2_1 >> 2];
            $2_1 = HEAP32[$2_1 + 4 >> 2];
            $4_1 = HEAP32[$7_1 + 100 >> 2];
            $3 = HEAP32[$7_1 + 96 >> 2];
            break label$2114;
           }
           if (!($1_1 >>> 0 > 7 & ($2_1 | 0) >= 0 | ($2_1 | 0) > 0)) {
            $8 = $1_1;
            $13 = $2_1;
            while (1) {
             $22_1 = $22_1 << 4;
             $8 = $8 + 1 | 0;
             $13 = $8 ? $13 : $13 + 1 | 0;
             if ($13 | ($8 | 0) != 8) {
              continue
             }
             break;
            };
           }
           label$2817 : {
            label$29 : {
             label$30 : {
              if (($9 & -33) == 80) {
               $8 = $1717($10_1, $3);
               $13 = i64toi32_i32$HIGH_BITS;
               if ($8 | ($13 | 0) != -2147483648) {
                break label$2817
               }
               if ($3) {
                if (HEAP32[$10_1 + 116 >> 2] >= 0) {
                 break label$30
                }
                break label$29;
               }
               $4_1 = 0;
               $1706($10_1, 0, 0);
               $1_1 = 0;
               $2_1 = 0;
               $3 = 0;
               break label$2114;
              }
              $8 = 0;
              $13 = 0;
              if (HEAP32[$10_1 + 116 >> 2] < 0) {
               break label$2817
              }
             }
             HEAP32[$10_1 + 4 >> 2] = HEAP32[$10_1 + 4 >> 2] - 1;
            }
            $8 = 0;
            $13 = 0;
           }
           if (!$22_1) {
            $1770($7_1 + 112 | 0, +($5_1 | 0) * 0.0);
            $2_1 = $7_1 + 120 | 0;
            $1_1 = HEAP32[$2_1 >> 2];
            $2_1 = HEAP32[$2_1 + 4 >> 2];
            $4_1 = HEAP32[$7_1 + 116 >> 2];
            $3 = HEAP32[$7_1 + 112 >> 2];
            break label$2114;
           }
           $3 = $24 ? $16_1 : $1_1;
           $1_1 = $8 + ($3 << 2) | 0;
           $2_1 = (($24 ? $11_1 : $2_1) << 2 | $3 >>> 30) + $13 | 0;
           $2_1 = ($1_1 >>> 0 < $8 >>> 0 ? $2_1 + 1 | 0 : $2_1) - 1 | 0;
           $1_1 = $1_1 - 32 | 0;
           $2_1 = $1_1 >>> 0 < 4294967264 ? $2_1 + 1 | 0 : $2_1;
           if (!(($2_1 | 0) <= 0 & 0 - $17_1 >>> 0 >= $1_1 >>> 0 | ($2_1 | 0) < 0)) {
            HEAP32[23975] = 68;
            $1_1 = $7_1 + 160 | 0;
            $1772($1_1, $5_1);
            $2_1 = $7_1 + 144 | 0;
            $1_1 = $1_1 + 8 | 0;
            $1777($2_1, HEAP32[$7_1 + 160 >> 2], HEAP32[$7_1 + 164 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], -1, -1, -1, 2147418111);
            $1_1 = $7_1 + 128 | 0;
            $2_1 = $2_1 + 8 | 0;
            $1777($1_1, HEAP32[$7_1 + 144 >> 2], HEAP32[$7_1 + 148 >> 2], HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], -1, -1, -1, 2147418111);
            $2_1 = $1_1 + 8 | 0;
            $1_1 = HEAP32[$2_1 >> 2];
            $2_1 = HEAP32[$2_1 + 4 >> 2];
            $4_1 = HEAP32[$7_1 + 132 >> 2];
            $3 = HEAP32[$7_1 + 128 >> 2];
            break label$2114;
           }
           $3 = $17_1 - 226 | 0;
           $9 = $3 >>> 0 > $1_1 >>> 0;
           $3 = $3 >> 31;
           if (!($9 & ($3 | 0) >= ($2_1 | 0) | ($2_1 | 0) < ($3 | 0))) {
            if (($22_1 | 0) >= 0) {
             while (1) {
              $8 = $7_1 + 416 | 0;
              $1765($8, $15_1, $4_1, $21_1, $20_1, 0, 0, 0, -1073807360);
              $3 = $1768($15_1, $4_1, $21_1, $20_1, 1073610752);
              $3 = ($3 | 0) >= 0;
              $8 = $8 + 8 | 0;
              $1765($7_1 + 400 | 0, $15_1, $4_1, $21_1, $20_1, $3 ? HEAP32[$7_1 + 416 >> 2] : $15_1, $3 ? HEAP32[$7_1 + 420 >> 2] : $4_1, $3 ? HEAP32[$8 >> 2] : $21_1, $3 ? HEAP32[$8 + 4 >> 2] : $20_1);
              $2_1 = $2_1 - 1 | 0;
              $1_1 = $1_1 - 1 | 0;
              $2_1 = ($1_1 | 0) != -1 ? $2_1 + 1 | 0 : $2_1;
              $8 = $7_1 + 408 | 0;
              $21_1 = HEAP32[$8 >> 2];
              $20_1 = HEAP32[$8 + 4 >> 2];
              $15_1 = HEAP32[$7_1 + 400 >> 2];
              $4_1 = HEAP32[$7_1 + 404 >> 2];
              $22_1 = $3 | $22_1 << 1;
              if (($22_1 | 0) >= 0) {
               continue
              }
              break;
             }
            }
            $2_1 = $2_1 - (($17_1 >> 31) + ($1_1 >>> 0 < $17_1 >>> 0) | 0) | 0;
            $9 = $2_1 + 1 | 0;
            $3 = $2_1;
            $2_1 = ($1_1 - $17_1 | 0) + 32 | 0;
            $3 = $2_1 >>> 0 < 32 ? $9 : $3;
            $2_1 = $2_1 >>> 0 < $23_1 >>> 0 & ($3 | 0) <= 0 | ($3 | 0) < 0 ? (($2_1 | 0) > 0 ? $2_1 : 0) : $23_1;
            label$38 : {
             if (($2_1 | 0) >= 113) {
              $1772($7_1 + 384 | 0, $5_1);
              $3 = $7_1 + 392 | 0;
              $16_1 = HEAP32[$3 >> 2];
              $11_1 = HEAP32[$3 + 4 >> 2];
              $8 = 0;
              $13 = 0;
              $14 = HEAP32[$7_1 + 384 >> 2];
              $19 = HEAP32[$7_1 + 388 >> 2];
              $5_1 = 0;
              $3 = 0;
              break label$38;
             }
             $3 = $7_1 + 352 | 0;
             $1770($3, $1687(1.0, 144 - $2_1 | 0));
             $8 = $7_1 + 336 | 0;
             $1772($8, $5_1);
             $5_1 = $7_1 + 368 | 0;
             $3 = $3 + 8 | 0;
             $9 = HEAP32[$3 >> 2];
             $6_1 = HEAP32[$3 + 4 >> 2];
             $14 = HEAP32[$7_1 + 336 >> 2];
             $19 = HEAP32[$7_1 + 340 >> 2];
             $3 = $8 + 8 | 0;
             $16_1 = HEAP32[$3 >> 2];
             $11_1 = HEAP32[$3 + 4 >> 2];
             $1709($5_1, HEAP32[$7_1 + 352 >> 2], HEAP32[$7_1 + 356 >> 2], $9, $6_1, $14, $19, $16_1, $11_1);
             $3 = $5_1 + 8 | 0;
             $5_1 = HEAP32[$3 >> 2];
             $8 = HEAP32[$7_1 + 368 >> 2];
             $13 = HEAP32[$7_1 + 372 >> 2];
             $3 = HEAP32[$3 + 4 >> 2];
            }
            $6_1 = $7_1 + 320 | 0;
            $2_1 = !($22_1 & 1) & (($1767($15_1, $4_1, $21_1, $20_1, 0, 0, 0, 0) | 0) != 0 & ($2_1 | 0) < 32);
            $1773($6_1, $2_1 + $22_1 | 0);
            $12_1 = $7_1 + 304 | 0;
            $6_1 = $6_1 + 8 | 0;
            $1777($12_1, $14, $19, $16_1, $11_1, HEAP32[$7_1 + 320 >> 2], HEAP32[$7_1 + 324 >> 2], HEAP32[$6_1 >> 2], HEAP32[$6_1 + 4 >> 2]);
            $6_1 = $7_1 + 272 | 0;
            $12_1 = $12_1 + 8 | 0;
            $1765($6_1, HEAP32[$7_1 + 304 >> 2], HEAP32[$7_1 + 308 >> 2], HEAP32[$12_1 >> 2], HEAP32[$12_1 + 4 >> 2], $8, $13, $5_1, $3);
            $12_1 = $7_1 + 288 | 0;
            $1777($12_1, $14, $19, $16_1, $11_1, $2_1 ? 0 : $15_1, $2_1 ? 0 : $4_1, $2_1 ? 0 : $21_1, $2_1 ? 0 : $20_1);
            $2_1 = $7_1 + 256 | 0;
            $12_1 = $12_1 + 8 | 0;
            $6_1 = $6_1 + 8 | 0;
            $1765($2_1, HEAP32[$7_1 + 288 >> 2], HEAP32[$7_1 + 292 >> 2], HEAP32[$12_1 >> 2], HEAP32[$12_1 + 4 >> 2], HEAP32[$7_1 + 272 >> 2], HEAP32[$7_1 + 276 >> 2], HEAP32[$6_1 >> 2], HEAP32[$6_1 + 4 >> 2]);
            $6_1 = $7_1 + 240 | 0;
            $2_1 = $2_1 + 8 | 0;
            $1779($6_1, HEAP32[$7_1 + 256 >> 2], HEAP32[$7_1 + 260 >> 2], HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], $8, $13, $5_1, $3);
            $2_1 = HEAP32[$7_1 + 240 >> 2];
            $3 = HEAP32[$7_1 + 244 >> 2];
            $5_1 = $6_1 + 8 | 0;
            $8 = HEAP32[$5_1 >> 2];
            $5_1 = HEAP32[$5_1 + 4 >> 2];
            if (!$1767($2_1, $3, $8, $5_1, 0, 0, 0, 0)) {
             HEAP32[23975] = 68
            }
            $6_1 = $7_1 + 224 | 0;
            $1710($6_1, $2_1, $3, $8, $5_1, $1_1);
            $2_1 = $6_1 + 8 | 0;
            $1_1 = HEAP32[$2_1 >> 2];
            $2_1 = HEAP32[$2_1 + 4 >> 2];
            $4_1 = HEAP32[$7_1 + 228 >> 2];
            $3 = HEAP32[$7_1 + 224 >> 2];
            break label$2114;
           }
           HEAP32[23975] = 68;
           $1_1 = $7_1 + 208 | 0;
           $1772($1_1, $5_1);
           $2_1 = $7_1 + 192 | 0;
           $1_1 = $1_1 + 8 | 0;
           $1777($2_1, HEAP32[$7_1 + 208 >> 2], HEAP32[$7_1 + 212 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 0, 0, 0, 65536);
           $1_1 = $7_1 + 176 | 0;
           $2_1 = $2_1 + 8 | 0;
           $1777($1_1, HEAP32[$7_1 + 192 >> 2], HEAP32[$7_1 + 196 >> 2], HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], 0, 0, 0, 65536);
           $2_1 = $1_1 + 8 | 0;
           $1_1 = HEAP32[$2_1 >> 2];
           $2_1 = HEAP32[$2_1 + 4 >> 2];
           $4_1 = HEAP32[$7_1 + 180 >> 2];
           $3 = HEAP32[$7_1 + 176 >> 2];
          }
          HEAP32[$25_1 >> 2] = $3;
          HEAP32[$25_1 + 4 >> 2] = $4_1;
          HEAP32[$25_1 + 8 >> 2] = $1_1;
          HEAP32[$25_1 + 12 >> 2] = $2_1;
          global$0 = $7_1 + 432 | 0;
          $1_1 = $18_1 + 24 | 0;
          $5_1 = HEAP32[$1_1 >> 2];
          $2_1 = HEAP32[$1_1 + 4 >> 2];
          $16_1 = HEAP32[$18_1 + 16 >> 2];
          $11_1 = HEAP32[$18_1 + 20 >> 2];
          break label$1;
         }
         if (HEAP32[$1_1 + 116 >> 2] < 0) {
          break label$27
         }
         HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
        }
        $21_1 = $18_1 + 32 | 0;
        $11_1 = $1_1;
        $7_1 = $5_1;
        $9 = $3;
        $5_1 = 0;
        $1_1 = 0;
        $8 = 0;
        $4_1 = global$0 - 8976 | 0;
        global$0 = $4_1;
        $20_1 = 0 - $17_1 | 0;
        $16_1 = $23_1;
        $24 = $20_1 - $16_1 | 0;
        label$16 : {
         label$2 : {
          while (1) {
           label$39 : {
            if (($2_1 | 0) != 48) {
             if (($2_1 | 0) != 46) {
              break label$16
             }
             $2_1 = HEAP32[$11_1 + 4 >> 2];
             if (($2_1 | 0) == HEAP32[$11_1 + 104 >> 2]) {
              break label$39
             }
             HEAP32[$11_1 + 4 >> 2] = $2_1 + 1;
             $2_1 = HEAPU8[$2_1 | 0];
             break label$2;
            }
            $2_1 = HEAP32[$11_1 + 4 >> 2];
            if (($2_1 | 0) != HEAP32[$11_1 + 104 >> 2]) {
             HEAP32[$11_1 + 4 >> 2] = $2_1 + 1;
             $2_1 = HEAPU8[$2_1 | 0];
            } else {
             $2_1 = $1707($11_1)
            }
            $1_1 = 1;
            continue;
           }
           break;
          };
          $2_1 = $1707($11_1);
         }
         $12_1 = 1;
         if (($2_1 | 0) != 48) {
          break label$16
         }
         while (1) {
          $1_1 = $6_1 - 1 | 0;
          $5_1 = $5_1 - 1 | 0;
          $6_1 = ($5_1 | 0) != -1 ? $1_1 + 1 | 0 : $1_1;
          $1_1 = HEAP32[$11_1 + 4 >> 2];
          label$8 : {
           if (($1_1 | 0) != HEAP32[$11_1 + 104 >> 2]) {
            HEAP32[$11_1 + 4 >> 2] = $1_1 + 1;
            $2_1 = HEAPU8[$1_1 | 0];
            break label$8;
           }
           $2_1 = $1707($11_1);
          }
          if (($2_1 | 0) == 48) {
           continue
          }
          break;
         };
         $1_1 = 1;
        }
        HEAP32[$4_1 + 784 >> 2] = 0;
        label$1011 : {
         label$1112 : {
          $3 = ($2_1 | 0) == 46;
          $14 = $2_1 - 48 | 0;
          label$1213 : {
           label$1314 : {
            label$1415 : {
             if ($3 | $14 >>> 0 <= 9) {
              while (1) {
               label$18 : {
                if ($3 & 1) {
                 if (!$12_1) {
                  $5_1 = $13;
                  $6_1 = $10_1;
                  $12_1 = 1;
                  break label$18;
                 }
                 $3 = !$1_1;
                 break label$1415;
                }
                $13 = $13 + 1 | 0;
                $10_1 = $13 ? $10_1 : $10_1 + 1 | 0;
                if (($8 | 0) <= 2044) {
                 $19 = ($2_1 | 0) == 48 ? $19 : $13;
                 $1_1 = ($4_1 + 784 | 0) + ($8 << 2) | 0;
                 HEAP32[$1_1 >> 2] = $15_1 ? (Math_imul(HEAP32[$1_1 >> 2], 10) + $2_1 | 0) - 48 | 0 : $14;
                 $1_1 = 1;
                 $3 = $15_1 + 1 | 0;
                 $2_1 = ($3 | 0) == 9;
                 $15_1 = $2_1 ? 0 : $3;
                 $8 = $2_1 + $8 | 0;
                 break label$18;
                }
                if (($2_1 | 0) == 48) {
                 break label$18
                }
                HEAP32[$4_1 + 8960 >> 2] = HEAP32[$4_1 + 8960 >> 2] | 1;
                $19 = 18396;
               }
               $2_1 = HEAP32[$11_1 + 4 >> 2];
               label$2319 : {
                if (($2_1 | 0) != HEAP32[$11_1 + 104 >> 2]) {
                 HEAP32[$11_1 + 4 >> 2] = $2_1 + 1;
                 $2_1 = HEAPU8[$2_1 | 0];
                 break label$2319;
                }
                $2_1 = $1707($11_1);
               }
               $3 = ($2_1 | 0) == 46;
               $14 = $2_1 - 48 | 0;
               if ($3 | $14 >>> 0 < 10) {
                continue
               }
               break;
              }
             }
             $5_1 = $12_1 ? $5_1 : $13;
             $6_1 = $12_1 ? $6_1 : $10_1;
             if (!(!$1_1 | ($2_1 & -33) != 69)) {
              $3 = $1717($11_1, $9);
              $1_1 = i64toi32_i32$HIGH_BITS;
              $12_1 = $1_1;
              label$2620 : {
               if ($3 | ($1_1 | 0) != -2147483648) {
                break label$2620
               }
               if (!$9) {
                break label$1213
               }
               $3 = 0;
               $12_1 = 0;
               if (HEAP32[$11_1 + 116 >> 2] < 0) {
                break label$2620
               }
               HEAP32[$11_1 + 4 >> 2] = HEAP32[$11_1 + 4 >> 2] - 1;
              }
              $1_1 = $6_1 + $12_1 | 0;
              $2_1 = $5_1;
              $5_1 = $3 + $5_1 | 0;
              $6_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
              break label$1112;
             }
             $3 = !$1_1;
             if (($2_1 | 0) < 0) {
              break label$1314
             }
            }
            if (HEAP32[$11_1 + 116 >> 2] < 0) {
             break label$1314
            }
            HEAP32[$11_1 + 4 >> 2] = HEAP32[$11_1 + 4 >> 2] - 1;
           }
           if (!$3) {
            break label$1112
           }
           HEAP32[23975] = 28;
          }
          $10_1 = 0;
          $1706($11_1, 0, 0);
          $5_1 = 0;
          $6_1 = 0;
          $1_1 = 0;
          break label$1011;
         }
         $1_1 = HEAP32[$4_1 + 784 >> 2];
         if (!$1_1) {
          $1770($4_1, +($7_1 | 0) * 0.0);
          $1_1 = $4_1 + 8 | 0;
          $5_1 = HEAP32[$1_1 >> 2];
          $6_1 = HEAP32[$1_1 + 4 >> 2];
          $10_1 = HEAP32[$4_1 + 4 >> 2];
          $1_1 = HEAP32[$4_1 >> 2];
          break label$1011;
         }
         if (!($13 >>> 0 > 9 & ($10_1 | 0) >= 0 | ($10_1 | 0) > 0 | (($5_1 | 0) != ($13 | 0) | ($6_1 | 0) != ($10_1 | 0)) | ($1_1 >>> $16_1 | 0 ? ($16_1 | 0) <= 30 : 0))) {
          $2_1 = $4_1 + 48 | 0;
          $1772($2_1, $7_1);
          $3 = $4_1 + 32 | 0;
          $1773($3, $1_1);
          $1_1 = $4_1 + 16 | 0;
          $2_1 = $2_1 + 8 | 0;
          $5_1 = HEAP32[$2_1 >> 2];
          $9 = HEAP32[$2_1 + 4 >> 2];
          $2_1 = $3 + 8 | 0;
          $1777($1_1, HEAP32[$4_1 + 48 >> 2], HEAP32[$4_1 + 52 >> 2], $5_1, $9, HEAP32[$4_1 + 32 >> 2], HEAP32[$4_1 + 36 >> 2], HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2]);
          $1_1 = $1_1 + 8 | 0;
          $5_1 = HEAP32[$1_1 >> 2];
          $6_1 = HEAP32[$1_1 + 4 >> 2];
          $10_1 = HEAP32[$4_1 + 20 >> 2];
          $1_1 = HEAP32[$4_1 + 16 >> 2];
          break label$1011;
         }
         if (!(($6_1 | 0) <= 0 & $20_1 >>> 1 >>> 0 >= $5_1 >>> 0 | ($6_1 | 0) < 0)) {
          HEAP32[23975] = 68;
          $1_1 = $4_1 + 96 | 0;
          $1772($1_1, $7_1);
          $2_1 = $4_1 + 80 | 0;
          $1_1 = $1_1 + 8 | 0;
          $1777($2_1, HEAP32[$4_1 + 96 >> 2], HEAP32[$4_1 + 100 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], -1, -1, -1, 2147418111);
          $1_1 = $4_1 - -64 | 0;
          $2_1 = $2_1 + 8 | 0;
          $1777($1_1, HEAP32[$4_1 + 80 >> 2], HEAP32[$4_1 + 84 >> 2], HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], -1, -1, -1, 2147418111);
          $1_1 = $1_1 + 8 | 0;
          $5_1 = HEAP32[$1_1 >> 2];
          $6_1 = HEAP32[$1_1 + 4 >> 2];
          $10_1 = HEAP32[$4_1 + 68 >> 2];
          $1_1 = HEAP32[$4_1 + 64 >> 2];
          break label$1011;
         }
         $1_1 = $17_1 - 226 | 0;
         $2_1 = $1_1 >> 31;
         if (!(($2_1 | 0) <= ($6_1 | 0) & $1_1 >>> 0 <= $5_1 >>> 0 | ($2_1 | 0) < ($6_1 | 0))) {
          HEAP32[23975] = 68;
          $1_1 = $4_1 + 144 | 0;
          $1772($1_1, $7_1);
          $2_1 = $4_1 + 128 | 0;
          $1_1 = $1_1 + 8 | 0;
          $1777($2_1, HEAP32[$4_1 + 144 >> 2], HEAP32[$4_1 + 148 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 0, 0, 0, 65536);
          $1_1 = $4_1 + 112 | 0;
          $2_1 = $2_1 + 8 | 0;
          $1777($1_1, HEAP32[$4_1 + 128 >> 2], HEAP32[$4_1 + 132 >> 2], HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], 0, 0, 0, 65536);
          $1_1 = $1_1 + 8 | 0;
          $5_1 = HEAP32[$1_1 >> 2];
          $6_1 = HEAP32[$1_1 + 4 >> 2];
          $10_1 = HEAP32[$4_1 + 116 >> 2];
          $1_1 = HEAP32[$4_1 + 112 >> 2];
          break label$1011;
         }
         if ($15_1) {
          if (($15_1 | 0) <= 8) {
           $1_1 = ($4_1 + 784 | 0) + ($8 << 2) | 0;
           $9 = HEAP32[$1_1 >> 2];
           while (1) {
            $9 = Math_imul($9, 10);
            $15_1 = $15_1 + 1 | 0;
            if (($15_1 | 0) != 9) {
             continue
            }
            break;
           };
           HEAP32[$1_1 >> 2] = $9;
          }
          $8 = $8 + 1 | 0;
         }
         label$3521 : {
          $12_1 = $5_1;
          if (($19 | 0) > ($5_1 | 0) | ($19 | 0) >= 9 | ($5_1 | 0) > 17) {
           break label$3521
          }
          if (($12_1 | 0) == 9) {
           $1_1 = $4_1 + 192 | 0;
           $1772($1_1, $7_1);
           $2_1 = $4_1 + 176 | 0;
           $1773($2_1, HEAP32[$4_1 + 784 >> 2]);
           $3 = $4_1 + 160 | 0;
           $1_1 = $1_1 + 8 | 0;
           $5_1 = HEAP32[$1_1 >> 2];
           $9 = HEAP32[$1_1 + 4 >> 2];
           $1_1 = $2_1 + 8 | 0;
           $1777($3, HEAP32[$4_1 + 192 >> 2], HEAP32[$4_1 + 196 >> 2], $5_1, $9, HEAP32[$4_1 + 176 >> 2], HEAP32[$4_1 + 180 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
           $1_1 = $3 + 8 | 0;
           $5_1 = HEAP32[$1_1 >> 2];
           $6_1 = HEAP32[$1_1 + 4 >> 2];
           $10_1 = HEAP32[$4_1 + 164 >> 2];
           $1_1 = HEAP32[$4_1 + 160 >> 2];
           break label$1011;
          }
          if (($12_1 | 0) <= 8) {
           $1_1 = $4_1 + 272 | 0;
           $1772($1_1, $7_1);
           $2_1 = $4_1 + 256 | 0;
           $1773($2_1, HEAP32[$4_1 + 784 >> 2]);
           $3 = $4_1 + 240 | 0;
           $1_1 = $1_1 + 8 | 0;
           $5_1 = HEAP32[$1_1 >> 2];
           $9 = HEAP32[$1_1 + 4 >> 2];
           $1_1 = $2_1 + 8 | 0;
           $1777($3, HEAP32[$4_1 + 272 >> 2], HEAP32[$4_1 + 276 >> 2], $5_1, $9, HEAP32[$4_1 + 256 >> 2], HEAP32[$4_1 + 260 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
           $1_1 = $4_1 + 224 | 0;
           $1772($1_1, HEAP32[(0 - $12_1 << 2) + 71232 >> 2]);
           $2_1 = $4_1 + 208 | 0;
           $3 = $3 + 8 | 0;
           $1_1 = $1_1 + 8 | 0;
           $1769($2_1, HEAP32[$4_1 + 240 >> 2], HEAP32[$4_1 + 244 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2], HEAP32[$4_1 + 224 >> 2], HEAP32[$4_1 + 228 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
           $1_1 = $2_1 + 8 | 0;
           $5_1 = HEAP32[$1_1 >> 2];
           $6_1 = HEAP32[$1_1 + 4 >> 2];
           $10_1 = HEAP32[$4_1 + 212 >> 2];
           $1_1 = HEAP32[$4_1 + 208 >> 2];
           break label$1011;
          }
          $1_1 = (Math_imul($12_1, -3) + $16_1 | 0) + 27 | 0;
          $2_1 = HEAP32[$4_1 + 784 >> 2];
          if ($2_1 >>> $1_1 | 0 ? ($1_1 | 0) <= 30 : 0) {
           break label$3521
          }
          $1_1 = $4_1 + 352 | 0;
          $1772($1_1, $7_1);
          $3 = $4_1 + 336 | 0;
          $1773($3, $2_1);
          $2_1 = $4_1 + 320 | 0;
          $1_1 = $1_1 + 8 | 0;
          $5_1 = HEAP32[$1_1 >> 2];
          $9 = HEAP32[$1_1 + 4 >> 2];
          $1_1 = $3 + 8 | 0;
          $1777($2_1, HEAP32[$4_1 + 352 >> 2], HEAP32[$4_1 + 356 >> 2], $5_1, $9, HEAP32[$4_1 + 336 >> 2], HEAP32[$4_1 + 340 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
          $1_1 = $4_1 + 304 | 0;
          $1772($1_1, HEAP32[($12_1 << 2) + 71160 >> 2]);
          $3 = $4_1 + 288 | 0;
          $2_1 = $2_1 + 8 | 0;
          $1_1 = $1_1 + 8 | 0;
          $1777($3, HEAP32[$4_1 + 320 >> 2], HEAP32[$4_1 + 324 >> 2], HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$4_1 + 304 >> 2], HEAP32[$4_1 + 308 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
          $1_1 = $3 + 8 | 0;
          $5_1 = HEAP32[$1_1 >> 2];
          $6_1 = HEAP32[$1_1 + 4 >> 2];
          $10_1 = HEAP32[$4_1 + 292 >> 2];
          $1_1 = HEAP32[$4_1 + 288 >> 2];
          break label$1011;
         }
         while (1) {
          $2_1 = $8;
          $8 = $2_1 - 1 | 0;
          if (!HEAP32[($4_1 + 784 | 0) + ($8 << 2) >> 2]) {
           continue
          }
          break;
         };
         $15_1 = 0;
         $1_1 = ($12_1 | 0) % 9 | 0;
         label$40 : {
          if (!$1_1) {
           $3 = 0;
           break label$40;
          }
          $3 = 0;
          $1_1 = ($12_1 | 0) < 0 ? $1_1 + 9 | 0 : $1_1;
          label$42 : {
           if (!$2_1) {
            $2_1 = 0;
            break label$42;
           }
           $5_1 = HEAP32[(0 - $1_1 << 2) + 71232 >> 2];
           $6_1 = 1e9 / ($5_1 | 0) | 0;
           $14 = 0;
           $9 = 0;
           while (1) {
            $10_1 = ($4_1 + 784 | 0) + ($9 << 2) | 0;
            $11_1 = HEAP32[$10_1 >> 2];
            $13 = ($11_1 >>> 0) / ($5_1 >>> 0) | 0;
            $8 = $14 + $13 | 0;
            HEAP32[$10_1 >> 2] = $8;
            $8 = !$8 & ($3 | 0) == ($9 | 0);
            $3 = $8 ? $3 + 1 & 2047 : $3;
            $12_1 = $8 ? $12_1 - 9 | 0 : $12_1;
            $14 = Math_imul($6_1, $11_1 - Math_imul($5_1, $13) | 0);
            $9 = $9 + 1 | 0;
            if (($2_1 | 0) != ($9 | 0)) {
             continue
            }
            break;
           };
           if (!$14) {
            break label$42
           }
           HEAP32[($4_1 + 784 | 0) + ($2_1 << 2) >> 2] = $14;
           $2_1 = $2_1 + 1 | 0;
          }
          $12_1 = ($12_1 - $1_1 | 0) + 9 | 0;
         }
         while (1) {
          $10_1 = ($4_1 + 784 | 0) + ($3 << 2) | 0;
          label$4623 : {
           while (1) {
            if ((($12_1 | 0) != 36 | HEAPU32[$10_1 >> 2] >= 10384593) & ($12_1 | 0) >= 36) {
             break label$4623
            }
            $8 = $2_1 + 2047 | 0;
            $14 = 0;
            $1_1 = $2_1;
            while (1) {
             $2_1 = $1_1;
             $6_1 = $8 & 2047;
             $8 = ($4_1 + 784 | 0) + ($6_1 << 2) | 0;
             $1_1 = HEAP32[$8 >> 2];
             $5_1 = $1_1 >>> 3 | 0;
             $11_1 = $5_1 + 1 | 0;
             $9 = $5_1;
             $5_1 = $14 + ($1_1 << 29) | 0;
             $1_1 = $14 >>> 0 > $5_1 >>> 0 ? $11_1 : $9;
             label$50 : {
              if (!(!$1_1 & $5_1 >>> 0 >= 1000000001 | ($1_1 | 0) != 0)) {
               $14 = 0;
               break label$50;
              }
              $14 = __wasm_i64_udiv($5_1, $1_1, 1e9);
              $5_1 = $5_1 - __wasm_i64_mul($14, i64toi32_i32$HIGH_BITS, 1e9, 0) | 0;
             }
             HEAP32[$8 >> 2] = $5_1;
             $1_1 = ($6_1 | 0) != ($2_1 - 1 & 2047) ? $2_1 : ($3 | 0) == ($6_1 | 0) ? $2_1 : $5_1 ? $2_1 : $6_1;
             $8 = $6_1 - 1 | 0;
             if (($3 | 0) != ($6_1 | 0)) {
              continue
             }
             break;
            };
            $15_1 = $15_1 - 29 | 0;
            if (!$14) {
             continue
            }
            break;
           };
           $3 = $3 - 1 & 2047;
           if (($1_1 | 0) == ($3 | 0)) {
            $5_1 = $4_1 + 784 | 0;
            $2_1 = $5_1 + (($1_1 + 2046 & 2047) << 2) | 0;
            $9 = $2_1;
            $6_1 = HEAP32[$2_1 >> 2];
            $2_1 = $1_1 - 1 & 2047;
            HEAP32[$9 >> 2] = $6_1 | HEAP32[$5_1 + ($2_1 << 2) >> 2];
           }
           $12_1 = $12_1 + 9 | 0;
           HEAP32[($4_1 + 784 | 0) + ($3 << 2) >> 2] = $14;
           continue;
          }
          break;
         };
         label$53 : {
          label$54 : while (1) {
           $5_1 = $2_1 + 1 & 2047;
           $6_1 = ($4_1 + 784 | 0) + (($2_1 - 1 & 2047) << 2) | 0;
           while (1) {
            $8 = ($12_1 | 0) > 45 ? 9 : 1;
            label$56 : {
             while (1) {
              $1_1 = $3;
              $9 = 0;
              label$58 : {
               while (1) {
                label$59 : {
                 $3 = $1_1 + $9 & 2047;
                 if (($3 | 0) == ($2_1 | 0)) {
                  break label$59
                 }
                 $3 = HEAP32[($4_1 + 784 | 0) + ($3 << 2) >> 2];
                 $10_1 = HEAP32[($9 << 2) + 71184 >> 2];
                 if ($3 >>> 0 < $10_1 >>> 0) {
                  break label$59
                 }
                 if ($3 >>> 0 > $10_1 >>> 0) {
                  break label$58
                 }
                 $9 = $9 + 1 | 0;
                 if (($9 | 0) != 4) {
                  continue
                 }
                }
                break;
               };
               if (($12_1 | 0) != 36) {
                break label$58
               }
               $5_1 = 0;
               $6_1 = 0;
               $9 = 0;
               $13 = 0;
               $10_1 = 0;
               while (1) {
                $3 = $1_1 + $9 & 2047;
                if (($2_1 | 0) == ($3 | 0)) {
                 $2_1 = $2_1 + 1 & 2047;
                 HEAP32[($4_1 + ($2_1 << 2) | 0) + 780 >> 2] = 0;
                }
                $8 = $4_1 + 768 | 0;
                $1773($8, HEAP32[($4_1 + 784 | 0) + ($3 << 2) >> 2]);
                $3 = $4_1 + 752 | 0;
                $1777($3, $5_1, $6_1, $13, $10_1, 0, 0, 1342177280, 1075633366);
                $5_1 = $4_1 + 736 | 0;
                $3 = $3 + 8 | 0;
                $6_1 = HEAP32[$3 >> 2];
                $10_1 = HEAP32[$3 + 4 >> 2];
                $3 = $8 + 8 | 0;
                $1765($5_1, HEAP32[$4_1 + 752 >> 2], HEAP32[$4_1 + 756 >> 2], $6_1, $10_1, HEAP32[$4_1 + 768 >> 2], HEAP32[$4_1 + 772 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
                $3 = $5_1 + 8 | 0;
                $13 = HEAP32[$3 >> 2];
                $10_1 = HEAP32[$3 + 4 >> 2];
                $5_1 = HEAP32[$4_1 + 736 >> 2];
                $6_1 = HEAP32[$4_1 + 740 >> 2];
                $9 = $9 + 1 | 0;
                if (($9 | 0) != 4) {
                 continue
                }
                break;
               };
               $3 = $4_1 + 720 | 0;
               $1772($3, $7_1);
               $8 = $4_1 + 704 | 0;
               $3 = $3 + 8 | 0;
               $1777($8, $5_1, $6_1, $13, $10_1, HEAP32[$4_1 + 720 >> 2], HEAP32[$4_1 + 724 >> 2], HEAP32[$3 >> 2], HEAP32[$3 + 4 >> 2]);
               $3 = $8 + 8 | 0;
               $13 = HEAP32[$3 >> 2];
               $10_1 = HEAP32[$3 + 4 >> 2];
               $5_1 = 0;
               $6_1 = 0;
               $3 = HEAP32[$4_1 + 704 >> 2];
               $12_1 = HEAP32[$4_1 + 708 >> 2];
               $25_1 = $15_1 + 113 | 0;
               $23_1 = $25_1 - $17_1 | 0;
               $14 = ($23_1 | 0) < ($16_1 | 0);
               $8 = $14 ? (($23_1 | 0) > 0 ? $23_1 : 0) : $16_1;
               if (($8 | 0) <= 112) {
                break label$56
               }
               $9 = 0;
               $11_1 = 0;
               $19 = 0;
               $20_1 = 0;
               $16_1 = 0;
               break label$53;
              }
              $15_1 = $8 + $15_1 | 0;
              $3 = $2_1;
              if (($1_1 | 0) == ($2_1 | 0)) {
               continue
              }
              break;
             };
             $11_1 = 1e9 >>> $8 | 0;
             $13 = -1 << $8 ^ -1;
             $9 = 0;
             $3 = $1_1;
             while (1) {
              $10_1 = $9;
              $23_1 = ($4_1 + 784 | 0) + ($1_1 << 2) | 0;
              $9 = HEAP32[$23_1 >> 2];
              $10_1 = $10_1 + ($9 >>> $8 | 0) | 0;
              HEAP32[$23_1 >> 2] = $10_1;
              $10_1 = !$10_1 & ($1_1 | 0) == ($3 | 0);
              $3 = $10_1 ? $3 + 1 & 2047 : $3;
              $12_1 = $10_1 ? $12_1 - 9 | 0 : $12_1;
              $9 = Math_imul($11_1, $9 & $13);
              $1_1 = $1_1 + 1 & 2047;
              if (($1_1 | 0) != ($2_1 | 0)) {
               continue
              }
              break;
             };
             if (!$9) {
              continue
             }
             if (($3 | 0) != ($5_1 | 0)) {
              HEAP32[($4_1 + 784 | 0) + ($2_1 << 2) >> 2] = $9;
              $2_1 = $5_1;
              continue label$54;
             }
             HEAP32[$6_1 >> 2] = HEAP32[$6_1 >> 2] | 1;
             continue;
            }
            break;
           };
           break;
          };
          $5_1 = $4_1 + 656 | 0;
          $1770($5_1, $1687(1.0, 225 - $8 | 0));
          $6_1 = $4_1 + 688 | 0;
          $5_1 = $5_1 + 8 | 0;
          $1709($6_1, HEAP32[$4_1 + 656 >> 2], HEAP32[$4_1 + 660 >> 2], HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2], $3, $12_1, $13, $10_1);
          $5_1 = $6_1 + 8 | 0;
          $16_1 = HEAP32[$5_1 >> 2];
          $22_1 = HEAP32[$5_1 + 4 >> 2];
          $19 = HEAP32[$4_1 + 688 >> 2];
          $20_1 = HEAP32[$4_1 + 692 >> 2];
          $5_1 = $4_1 + 640 | 0;
          $1770($5_1, $1687(1.0, 113 - $8 | 0));
          $11_1 = $4_1 + 672 | 0;
          $5_1 = $5_1 + 8 | 0;
          $1712($11_1, $3, $12_1, $13, $10_1, HEAP32[$4_1 + 640 >> 2], HEAP32[$4_1 + 644 >> 2], HEAP32[$5_1 >> 2], HEAP32[$5_1 + 4 >> 2]);
          $17_1 = $4_1 + 624 | 0;
          $26_1 = $3;
          $5_1 = HEAP32[$4_1 + 672 >> 2];
          $6_1 = HEAP32[$4_1 + 676 >> 2];
          $3 = $11_1 + 8 | 0;
          $9 = HEAP32[$3 >> 2];
          $11_1 = HEAP32[$3 + 4 >> 2];
          $1779($17_1, $26_1, $12_1, $13, $10_1, $5_1, $6_1, $9, $11_1);
          $3 = $4_1 + 608 | 0;
          $12_1 = $17_1 + 8 | 0;
          $1765($3, $19, $20_1, $16_1, $22_1, HEAP32[$4_1 + 624 >> 2], HEAP32[$4_1 + 628 >> 2], HEAP32[$12_1 >> 2], HEAP32[$12_1 + 4 >> 2]);
          $3 = $3 + 8 | 0;
          $13 = HEAP32[$3 >> 2];
          $10_1 = HEAP32[$3 + 4 >> 2];
          $3 = HEAP32[$4_1 + 608 >> 2];
          $12_1 = HEAP32[$4_1 + 612 >> 2];
         }
         $17_1 = $1_1 + 4 & 2047;
         label$65 : {
          if (($17_1 | 0) == ($2_1 | 0)) {
           break label$65
          }
          $17_1 = HEAP32[($4_1 + 784 | 0) + ($17_1 << 2) >> 2];
          label$66 : {
           if ($17_1 >>> 0 <= 499999999) {
            if (!$17_1 & ($1_1 + 5 & 2047) == ($2_1 | 0)) {
             break label$66
            }
            $1_1 = $4_1 + 496 | 0;
            $1770($1_1, +($7_1 | 0) * .25);
            $2_1 = $4_1 + 480 | 0;
            $1_1 = $1_1 + 8 | 0;
            $1765($2_1, $5_1, $6_1, $9, $11_1, HEAP32[$4_1 + 496 >> 2], HEAP32[$4_1 + 500 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
            $1_1 = $2_1 + 8 | 0;
            $9 = HEAP32[$1_1 >> 2];
            $11_1 = HEAP32[$1_1 + 4 >> 2];
            $5_1 = HEAP32[$4_1 + 480 >> 2];
            $6_1 = HEAP32[$4_1 + 484 >> 2];
            break label$66;
           }
           if (($17_1 | 0) != 5e8) {
            $1_1 = $4_1 + 592 | 0;
            $1770($1_1, +($7_1 | 0) * .75);
            $2_1 = $4_1 + 576 | 0;
            $1_1 = $1_1 + 8 | 0;
            $1765($2_1, $5_1, $6_1, $9, $11_1, HEAP32[$4_1 + 592 >> 2], HEAP32[$4_1 + 596 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
            $1_1 = $2_1 + 8 | 0;
            $9 = HEAP32[$1_1 >> 2];
            $11_1 = HEAP32[$1_1 + 4 >> 2];
            $5_1 = HEAP32[$4_1 + 576 >> 2];
            $6_1 = HEAP32[$4_1 + 580 >> 2];
            break label$66;
           }
           $28_1 = +($7_1 | 0);
           if (($2_1 | 0) == ($1_1 + 5 & 2047)) {
            $1_1 = $4_1 + 528 | 0;
            $1770($1_1, $28_1 * .5);
            $2_1 = $4_1 + 512 | 0;
            $1_1 = $1_1 + 8 | 0;
            $1765($2_1, $5_1, $6_1, $9, $11_1, HEAP32[$4_1 + 528 >> 2], HEAP32[$4_1 + 532 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
            $1_1 = $2_1 + 8 | 0;
            $9 = HEAP32[$1_1 >> 2];
            $11_1 = HEAP32[$1_1 + 4 >> 2];
            $5_1 = HEAP32[$4_1 + 512 >> 2];
            $6_1 = HEAP32[$4_1 + 516 >> 2];
            break label$66;
           }
           $1_1 = $4_1 + 560 | 0;
           $1770($1_1, $28_1 * .75);
           $2_1 = $4_1 + 544 | 0;
           $1_1 = $1_1 + 8 | 0;
           $1765($2_1, $5_1, $6_1, $9, $11_1, HEAP32[$4_1 + 560 >> 2], HEAP32[$4_1 + 564 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2]);
           $1_1 = $2_1 + 8 | 0;
           $9 = HEAP32[$1_1 >> 2];
           $11_1 = HEAP32[$1_1 + 4 >> 2];
           $5_1 = HEAP32[$4_1 + 544 >> 2];
           $6_1 = HEAP32[$4_1 + 548 >> 2];
          }
          if (($8 | 0) > 111) {
           break label$65
          }
          $1_1 = $4_1 + 464 | 0;
          $1712($1_1, $5_1, $6_1, $9, $11_1, 0, 0, 0, 1073676288);
          $1_1 = $1_1 + 8 | 0;
          if ($1767(HEAP32[$4_1 + 464 >> 2], HEAP32[$4_1 + 468 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 0, 0, 0, 0)) {
           break label$65
          }
          $1_1 = $4_1 + 448 | 0;
          $1765($1_1, $5_1, $6_1, $9, $11_1, 0, 0, 0, 1073676288);
          $1_1 = $1_1 + 8 | 0;
          $9 = HEAP32[$1_1 >> 2];
          $11_1 = HEAP32[$1_1 + 4 >> 2];
          $5_1 = HEAP32[$4_1 + 448 >> 2];
          $6_1 = HEAP32[$4_1 + 452 >> 2];
         }
         $1_1 = $4_1 + 432 | 0;
         $1765($1_1, $3, $12_1, $13, $10_1, $5_1, $6_1, $9, $11_1);
         $2_1 = $4_1 + 416 | 0;
         $1_1 = $1_1 + 8 | 0;
         $1779($2_1, HEAP32[$4_1 + 432 >> 2], HEAP32[$4_1 + 436 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], $19, $20_1, $16_1, $22_1);
         $1_1 = $2_1 + 8 | 0;
         $13 = HEAP32[$1_1 >> 2];
         $10_1 = HEAP32[$1_1 + 4 >> 2];
         $3 = HEAP32[$4_1 + 416 >> 2];
         $12_1 = HEAP32[$4_1 + 420 >> 2];
         label$71 : {
          if (($24 - 2 | 0) >= ($25_1 & 2147483647)) {
           break label$71
          }
          $1_1 = $4_1 + 400 | 0;
          HEAP32[$1_1 + 8 >> 2] = $13;
          HEAP32[$1_1 + 12 >> 2] = $10_1 & 2147483647;
          HEAP32[$1_1 >> 2] = $3;
          HEAP32[$1_1 + 4 >> 2] = $12_1;
          $2_1 = $4_1 + 384 | 0;
          $1777($2_1, $3, $12_1, $13, $10_1, 0, 0, 0, 1073610752);
          $1_1 = $1_1 + 8 | 0;
          $1_1 = $1768(HEAP32[$4_1 + 400 >> 2], HEAP32[$4_1 + 404 >> 2], HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], 1081081856);
          $2_1 = $2_1 + 8 | 0;
          $1_1 = ($1_1 | 0) >= 0;
          $13 = $1_1 ? HEAP32[$2_1 >> 2] : $13;
          $10_1 = $1_1 ? HEAP32[$2_1 + 4 >> 2] : $10_1;
          $3 = $1_1 ? HEAP32[$4_1 + 384 >> 2] : $3;
          $12_1 = $1_1 ? HEAP32[$4_1 + 388 >> 2] : $12_1;
          $15_1 = $1_1 + $15_1 | 0;
          if (!(($1767($5_1, $6_1, $9, $11_1, 0, 0, 0, 0) | 0) != 0 & ($1_1 ? $14 & ($8 | 0) != ($23_1 | 0) : $14)) & ($24 | 0) >= ($15_1 + 110 | 0)) {
           break label$71
          }
          HEAP32[23975] = 68;
         }
         $1_1 = $4_1 + 368 | 0;
         $1710($1_1, $3, $12_1, $13, $10_1, $15_1);
         $1_1 = $1_1 + 8 | 0;
         $5_1 = HEAP32[$1_1 >> 2];
         $6_1 = HEAP32[$1_1 + 4 >> 2];
         $10_1 = HEAP32[$4_1 + 372 >> 2];
         $1_1 = HEAP32[$4_1 + 368 >> 2];
        }
        HEAP32[$21_1 + 8 >> 2] = $5_1;
        HEAP32[$21_1 + 12 >> 2] = $6_1;
        HEAP32[$21_1 >> 2] = $1_1;
        HEAP32[$21_1 + 4 >> 2] = $10_1;
        global$0 = $4_1 + 8976 | 0;
        $1_1 = $18_1 + 40 | 0;
        $5_1 = HEAP32[$1_1 >> 2];
        $2_1 = HEAP32[$1_1 + 4 >> 2];
        $16_1 = HEAP32[$18_1 + 32 >> 2];
        $11_1 = HEAP32[$18_1 + 36 >> 2];
        break label$1;
       case 3:
        break label$20;
       default:
        break label$25;
       };
      }
      if (HEAP32[$1_1 + 116 >> 2] >= 0) {
       HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1
      }
      break label$19;
     }
     label$3425 : {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      label$32 : {
       if (($2_1 | 0) != HEAP32[$1_1 + 104 >> 2]) {
        HEAP32[$7_1 >> 2] = $2_1 + 1;
        $2_1 = HEAPU8[$2_1 | 0];
        break label$32;
       }
       $2_1 = $1707($1_1);
      }
      if (($2_1 | 0) == 40) {
       $8 = 1;
       break label$3425;
      }
      $5_1 = 0;
      $2_1 = 2147450880;
      if (HEAP32[$1_1 + 116 >> 2] < 0) {
       break label$1
      }
      HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1;
      break label$1;
     }
     while (1) {
      $2_1 = HEAP32[$1_1 + 4 >> 2];
      label$3718 : {
       if (($2_1 | 0) != HEAP32[$1_1 + 104 >> 2]) {
        HEAP32[$7_1 >> 2] = $2_1 + 1;
        $6_1 = HEAPU8[$2_1 | 0];
        break label$3718;
       }
       $6_1 = $1707($1_1);
      }
      if (!(!($6_1 - 48 >>> 0 < 10 | $6_1 - 65 >>> 0 < 26 | ($6_1 | 0) == 95) & $6_1 - 97 >>> 0 >= 26)) {
       $8 = $8 + 1 | 0;
       continue;
      }
      break;
     };
     $5_1 = 0;
     $2_1 = 2147450880;
     if (($6_1 | 0) == 41) {
      break label$1
     }
     $6_1 = HEAP32[$1_1 + 116 >> 2];
     if (($6_1 | 0) >= 0) {
      HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1
     }
     label$4227 : {
      if ($3) {
       if ($8) {
        break label$4227
       }
       break label$1;
      }
      break label$19;
     }
     while (1) {
      $8 = $8 - 1 | 0;
      if (($6_1 | 0) >= 0) {
       HEAP32[$7_1 >> 2] = HEAP32[$7_1 >> 2] - 1
      }
      if ($8) {
       continue
      }
      break;
     };
     break label$1;
    }
    HEAP32[23975] = 28;
    $1706($1_1, 0, 0);
   }
   $5_1 = 0;
   $2_1 = 0;
  }
  HEAP32[$0_1 >> 2] = $16_1;
  HEAP32[$0_1 + 4 >> 2] = $11_1;
  HEAP32[$0_1 + 8 >> 2] = $5_1;
  HEAP32[$0_1 + 12 >> 2] = $2_1;
  global$0 = $18_1 + 48 | 0;
 }
 
 function $1717($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  label$3 : {
   label$4 : {
    label$5 : {
     label$6 : {
      label$7 : {
       $2_1 = HEAP32[$0_1 + 4 >> 2];
       label$1 : {
        if (($2_1 | 0) != HEAP32[$0_1 + 104 >> 2]) {
         HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
         $2_1 = HEAPU8[$2_1 | 0];
         break label$1;
        }
        $2_1 = $1707($0_1);
       }
       switch ($2_1 - 43 | 0) {
       case 0:
       case 2:
        break label$7;
       default:
        break label$6;
       };
      }
      $2_1 = ($2_1 | 0) == 45;
      $5_1 = !$1_1;
      $3 = HEAP32[$0_1 + 4 >> 2];
      label$8 : {
       if (($3 | 0) != HEAP32[$0_1 + 104 >> 2]) {
        HEAP32[$0_1 + 4 >> 2] = $3 + 1;
        $3 = HEAPU8[$3 | 0];
        break label$8;
       }
       $3 = $1707($0_1);
      }
      $4_1 = $3 - 58 | 0;
      $1_1 = $2_1;
      if ($5_1 | $4_1 >>> 0 > 4294967285) {
       break label$5
      }
      if (HEAP32[$0_1 + 116 >> 2] < 0) {
       break label$4
      }
      HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
      break label$4;
     }
     $4_1 = $2_1 - 58 | 0;
     $3 = $2_1;
     $1_1 = 0;
    }
    $5_1 = $1_1;
    if ($4_1 >>> 0 < 4294967286) {
     break label$4
    }
    $1_1 = 0;
    $2_1 = 0;
    $4_1 = $3 - 48 | 0;
    if ($4_1 >>> 0 < 10) {
     while (1) {
      $2_1 = (Math_imul($2_1, 10) + $3 | 0) - 48 | 0;
      $6_1 = ($2_1 | 0) < 214748364;
      $1_1 = HEAP32[$0_1 + 4 >> 2];
      label$12 : {
       if (($1_1 | 0) != HEAP32[$0_1 + 104 >> 2]) {
        HEAP32[$0_1 + 4 >> 2] = $1_1 + 1;
        $3 = HEAPU8[$1_1 | 0];
        break label$12;
       }
       $3 = $1707($0_1);
      }
      $4_1 = $3 - 48 | 0;
      if ($6_1 & $4_1 >>> 0 <= 9) {
       continue
      }
      break;
     };
     $1_1 = $2_1;
     $2_1 = $2_1 >> 31;
    }
    label$15 : {
     if ($4_1 >>> 0 >= 10) {
      break label$15
     }
     while (1) {
      $4_1 = $3;
      $3 = __wasm_i64_mul($1_1, $2_1, 10, 0);
      $2_1 = $4_1 + $3 | 0;
      $1_1 = i64toi32_i32$HIGH_BITS;
      $1_1 = $2_1 >>> 0 < $3 >>> 0 ? $1_1 + 1 | 0 : $1_1;
      $4_1 = $2_1;
      $2_1 = HEAP32[$0_1 + 4 >> 2];
      label$17 : {
       if (($2_1 | 0) != HEAP32[$0_1 + 104 >> 2]) {
        HEAP32[$0_1 + 4 >> 2] = $2_1 + 1;
        $3 = HEAPU8[$2_1 | 0];
        break label$17;
       }
       $3 = $1707($0_1);
      }
      $2_1 = $1_1 - 1 | 0;
      $1_1 = $4_1 - 48 | 0;
      $2_1 = $1_1 >>> 0 < 4294967248 ? $2_1 + 1 | 0 : $2_1;
      $4_1 = $3 - 48 | 0;
      if ($4_1 >>> 0 > 9) {
       break label$15
      }
      if ($1_1 >>> 0 < 2061584302 & ($2_1 | 0) <= 21474836 | ($2_1 | 0) < 21474836) {
       continue
      }
      break;
     };
    }
    if ($4_1 >>> 0 < 10) {
     while (1) {
      $3 = HEAP32[$0_1 + 4 >> 2];
      label$21 : {
       if (($3 | 0) != HEAP32[$0_1 + 104 >> 2]) {
        HEAP32[$0_1 + 4 >> 2] = $3 + 1;
        $3 = HEAPU8[$3 | 0];
        break label$21;
       }
       $3 = $1707($0_1);
      }
      if ($3 - 48 >>> 0 < 10) {
       continue
      }
      break;
     }
    }
    if (HEAP32[$0_1 + 116 >> 2] >= 0) {
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1
    }
    $0_1 = $1_1;
    $1_1 = $5_1 ? 0 - $0_1 | 0 : $0_1;
    $2_1 = $5_1 ? 0 - ($2_1 + (($0_1 | 0) != 0) | 0) | 0 : $2_1;
    break label$3;
   }
   $1_1 = 0;
   $2_1 = -2147483648;
   if (HEAP32[$0_1 + 116 >> 2] < 0) {
    break label$3
   }
   HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] - 1;
   i64toi32_i32$HIGH_BITS = -2147483648;
   return 0;
  }
  i64toi32_i32$HIGH_BITS = $2_1;
  return $1_1;
 }
 
 function $1719($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0.0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $1_1 = global$0 - 160 | 0;
  global$0 = $1_1;
  HEAP32[$1_1 + 60 >> 2] = $0_1;
  HEAP32[$1_1 + 20 >> 2] = $0_1;
  HEAP32[$1_1 + 24 >> 2] = -1;
  $0_1 = $1_1 + 16 | 0;
  $1706($0_1, 0, 0);
  $1714($1_1, $0_1, 1, 1);
  $0_1 = $1_1 + 8 | 0;
  $3 = HEAP32[$0_1 >> 2];
  $0_1 = HEAP32[$0_1 + 4 >> 2];
  $4_1 = HEAP32[$1_1 >> 2];
  $5_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$2_1 + 8 >> 2] = $3;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 >> 2] = $4_1;
  HEAP32[$2_1 + 4 >> 2] = $5_1;
  global$0 = $1_1 + 160 | 0;
  $0_1 = $2_1 + 8 | 0;
  $6_1 = $1780(HEAP32[$2_1 >> 2], HEAP32[$2_1 + 4 >> 2], HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2]);
  global$0 = $2_1 + 16 | 0;
  return $6_1;
 }
 
 function $1721($0_1) {
  return $0_1 - 48 >>> 0 < 10;
 }
 
 function $1723($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  $3 = wasm2js_scratch_load_i32(1) | 0;
  $4_1 = wasm2js_scratch_load_i32(0) | 0;
  $2_1 = $3 >>> 20 & 2047;
  if (($2_1 | 0) != 2047) {
   if (!$2_1) {
    if ($0_1 == 0.0) {
     $2_1 = 0
    } else {
     $0_1 = $1723($0_1 * 18446744073709551615.0, $1_1);
     $2_1 = HEAP32[$1_1 >> 2] + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $2_1;
    return $0_1;
   }
   HEAP32[$1_1 >> 2] = $2_1 - 1022;
   wasm2js_scratch_store_i32(0, $4_1 | 0);
   wasm2js_scratch_store_i32(1, $3 & -2146435073 | 1071644672);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return $0_1;
 }
 
 function $1724($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[$5_1 + 204 >> 2] = $2_1;
  $2_1 = $5_1 + 160 | 0;
  $1604($2_1, 0, 40);
  HEAP32[$5_1 + 200 >> 2] = HEAP32[$5_1 + 204 >> 2];
  label$1 : {
   if (($1725(0, $1_1, $5_1 + 200 | 0, $5_1 + 80 | 0, $2_1, $3, $4_1) | 0) < 0) {
    $4_1 = -1;
    break label$1;
   }
   $6_1 = HEAP32[$0_1 + 76 >> 2] >= 0 ? 1 : $6_1;
   $7_1 = HEAP32[$0_1 >> 2];
   if (HEAP32[$0_1 + 72 >> 2] <= 0) {
    HEAP32[$0_1 >> 2] = $7_1 & -33
   }
   label$5 : {
    label$6 : {
     label$7 : {
      if (!HEAP32[$0_1 + 48 >> 2]) {
       HEAP32[$0_1 + 48 >> 2] = 80;
       HEAP32[$0_1 + 28 >> 2] = 0;
       HEAP32[$0_1 + 16 >> 2] = 0;
       HEAP32[$0_1 + 20 >> 2] = 0;
       $8 = HEAP32[$0_1 + 44 >> 2];
       HEAP32[$0_1 + 44 >> 2] = $5_1;
       break label$7;
      }
      if (HEAP32[$0_1 + 16 >> 2]) {
       break label$6
      }
     }
     $2_1 = -1;
     if ($1631($0_1)) {
      break label$5
     }
    }
    $2_1 = $1725($0_1, $1_1, $5_1 + 200 | 0, $5_1 + 80 | 0, $5_1 + 160 | 0, $3, $4_1);
   }
   if ($8) {
    FUNCTION_TABLE[HEAP32[$0_1 + 36 >> 2]]($0_1, 0, 0) | 0;
    HEAP32[$0_1 + 48 >> 2] = 0;
    HEAP32[$0_1 + 44 >> 2] = $8;
    HEAP32[$0_1 + 28 >> 2] = 0;
    $1_1 = HEAP32[$0_1 + 20 >> 2];
    HEAP32[$0_1 + 16 >> 2] = 0;
    HEAP32[$0_1 + 20 >> 2] = 0;
    $2_1 = $1_1 ? $2_1 : -1;
   }
   $1_1 = $0_1;
   $0_1 = HEAP32[$0_1 >> 2];
   HEAP32[$1_1 >> 2] = $0_1 | $7_1 & 32;
   $4_1 = $0_1 & 32 ? -1 : $2_1;
   if (!$6_1) {
    break label$1
   }
  }
  global$0 = $5_1 + 208 | 0;
  return $4_1;
 }
 
 function $1725($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1) {
  var $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0;
  $9 = global$0 - 80 | 0;
  global$0 = $9;
  HEAP32[$9 + 76 >> 2] = $1_1;
  $25_1 = $9 + 55 | 0;
  $18_1 = $9 + 56 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : while (1) {
       $12_1 = $1_1;
       if (($14 ^ 2147483647) < ($7_1 | 0)) {
        break label$4
       }
       $14 = $7_1 + $14 | 0;
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           $7_1 = $12_1;
           $10_1 = HEAPU8[$7_1 | 0];
           if ($10_1) {
            while (1) {
             label$12 : {
              $1_1 = $10_1 & 255;
              label$13 : {
               if (!$1_1) {
                $1_1 = $7_1;
                break label$13;
               }
               if (($1_1 | 0) != 37) {
                break label$12
               }
               $10_1 = $7_1;
               while (1) {
                if (HEAPU8[$10_1 + 1 | 0] != 37) {
                 $1_1 = $10_1;
                 break label$13;
                }
                $7_1 = $7_1 + 1 | 0;
                $8 = HEAPU8[$10_1 + 2 | 0];
                $1_1 = $10_1 + 2 | 0;
                $10_1 = $1_1;
                if (($8 | 0) == 37) {
                 continue
                }
                break;
               };
              }
              $7_1 = $7_1 - $12_1 | 0;
              $24 = $14 ^ 2147483647;
              if (($7_1 | 0) > ($24 | 0)) {
               break label$4
              }
              if ($0_1) {
               $1726($0_1, $12_1, $7_1)
              }
              if ($7_1) {
               continue label$5
              }
              HEAP32[$9 + 76 >> 2] = $1_1;
              $7_1 = $1_1 + 1 | 0;
              $16_1 = -1;
              if (!(!$1721(HEAP8[$1_1 + 1 | 0]) | HEAPU8[$1_1 + 2 | 0] != 36)) {
               $16_1 = HEAP8[$1_1 + 1 | 0] - 48 | 0;
               $19 = 1;
               $7_1 = $1_1 + 3 | 0;
              }
              HEAP32[$9 + 76 >> 2] = $7_1;
              $13 = 0;
              $10_1 = HEAP8[$7_1 | 0];
              $1_1 = $10_1 - 32 | 0;
              label$19 : {
               if ($1_1 >>> 0 > 31) {
                $8 = $7_1;
                break label$19;
               }
               $8 = $7_1;
               $1_1 = 1 << $1_1;
               if (!($1_1 & 75913)) {
                break label$19
               }
               while (1) {
                $8 = $7_1 + 1 | 0;
                HEAP32[$9 + 76 >> 2] = $8;
                $13 = $1_1 | $13;
                $10_1 = HEAP8[$7_1 + 1 | 0];
                $1_1 = $10_1 - 32 | 0;
                if ($1_1 >>> 0 >= 32) {
                 break label$19
                }
                $7_1 = $8;
                $1_1 = 1 << $1_1;
                if ($1_1 & 75913) {
                 continue
                }
                break;
               };
              }
              label$22 : {
               if (($10_1 | 0) == 42) {
                label$24 : {
                 if (!(!$1721(HEAP8[$8 + 1 | 0]) | HEAPU8[$8 + 2 | 0] != 36)) {
                  HEAP32[((HEAP8[$8 + 1 | 0] << 2) + $4_1 | 0) - 192 >> 2] = 10;
                  $10_1 = $8 + 3 | 0;
                  $19 = 1;
                  $1_1 = HEAP32[((HEAP8[$8 + 1 | 0] << 3) + $3 | 0) - 384 >> 2];
                  break label$24;
                 }
                 if ($19) {
                  break label$9
                 }
                 $10_1 = $8 + 1 | 0;
                 if (!$0_1) {
                  HEAP32[$9 + 76 >> 2] = $10_1;
                  $19 = 0;
                  $17_1 = 0;
                  break label$22;
                 }
                 $1_1 = HEAP32[$2_1 >> 2];
                 HEAP32[$2_1 >> 2] = $1_1 + 4;
                 $19 = 0;
                 $1_1 = HEAP32[$1_1 >> 2];
                }
                $17_1 = $1_1;
                HEAP32[$9 + 76 >> 2] = $10_1;
                if (($17_1 | 0) >= 0) {
                 break label$22
                }
                $17_1 = 0 - $17_1 | 0;
                $13 = $13 | 8192;
                break label$22;
               }
               $17_1 = $1727($9 + 76 | 0);
               if (($17_1 | 0) < 0) {
                break label$4
               }
               $10_1 = HEAP32[$9 + 76 >> 2];
              }
              $7_1 = 0;
              $11_1 = -1;
              label$27 : {
               if (HEAPU8[$10_1 | 0] != 46) {
                $1_1 = $10_1;
                $21_1 = 0;
                break label$27;
               }
               if (HEAPU8[$10_1 + 1 | 0] == 42) {
                label$30 : {
                 if (!(!$1721(HEAP8[$10_1 + 2 | 0]) | HEAPU8[$10_1 + 3 | 0] != 36)) {
                  HEAP32[((HEAP8[$10_1 + 2 | 0] << 2) + $4_1 | 0) - 192 >> 2] = 10;
                  $1_1 = $10_1 + 4 | 0;
                  $11_1 = HEAP32[((HEAP8[$10_1 + 2 | 0] << 3) + $3 | 0) - 384 >> 2];
                  break label$30;
                 }
                 if ($19) {
                  break label$9
                 }
                 $1_1 = $10_1 + 2 | 0;
                 $11_1 = 0;
                 if (!$0_1) {
                  break label$30
                 }
                 $8 = HEAP32[$2_1 >> 2];
                 HEAP32[$2_1 >> 2] = $8 + 4;
                 $11_1 = HEAP32[$8 >> 2];
                }
                HEAP32[$9 + 76 >> 2] = $1_1;
                $21_1 = ($11_1 ^ -1) >>> 31 | 0;
                break label$27;
               }
               HEAP32[$9 + 76 >> 2] = $10_1 + 1;
               $11_1 = $1727($9 + 76 | 0);
               $1_1 = HEAP32[$9 + 76 >> 2];
               $21_1 = 1;
              }
              while (1) {
               $22_1 = $7_1;
               $8 = 28;
               $15_1 = $1_1;
               $7_1 = HEAP8[$1_1 | 0];
               if ($7_1 - 123 >>> 0 < 4294967238) {
                break label$3
               }
               $1_1 = $15_1 + 1 | 0;
               $7_1 = HEAPU8[($7_1 + Math_imul($22_1, 58) | 0) + 71199 | 0];
               if ($7_1 - 1 >>> 0 < 8) {
                continue
               }
               break;
              };
              HEAP32[$9 + 76 >> 2] = $1_1;
              label$34 : {
               label$35 : {
                if (($7_1 | 0) != 27) {
                 if (!$7_1) {
                  break label$3
                 }
                 if (($16_1 | 0) >= 0) {
                  HEAP32[($16_1 << 2) + $4_1 >> 2] = $7_1;
                  $8 = ($16_1 << 3) + $3 | 0;
                  $7_1 = HEAP32[$8 + 4 >> 2];
                  HEAP32[$9 + 64 >> 2] = HEAP32[$8 >> 2];
                  HEAP32[$9 + 68 >> 2] = $7_1;
                  break label$35;
                 }
                 if (!$0_1) {
                  break label$6
                 }
                 $1728($9 - -64 | 0, $7_1, $2_1, $6_1);
                 break label$34;
                }
                if (($16_1 | 0) >= 0) {
                 break label$3
                }
               }
               $7_1 = 0;
               if (!$0_1) {
                continue label$5
               }
              }
              $10_1 = $13 & -65537;
              $13 = $13 & 8192 ? $10_1 : $13;
              $16_1 = 0;
              $20_1 = 1616;
              $8 = $18_1;
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           label$51 : {
                            label$52 : {
                             label$53 : {
                              $7_1 = HEAP8[$15_1 | 0];
                              $7_1 = $22_1 ? (($7_1 & 15) == 3 ? $7_1 & -33 : $7_1) : $7_1;
                              switch ($7_1 - 88 | 0) {
                              case 11:
                               break label$38;
                              case 9:
                              case 13:
                              case 14:
                              case 15:
                               break label$39;
                              case 27:
                               break label$44;
                              case 12:
                              case 17:
                               break label$47;
                              case 23:
                               break label$48;
                              case 0:
                              case 32:
                               break label$49;
                              case 24:
                               break label$50;
                              case 22:
                               break label$51;
                              case 29:
                               break label$52;
                              case 1:
                              case 2:
                              case 3:
                              case 4:
                              case 5:
                              case 6:
                              case 7:
                              case 8:
                              case 10:
                              case 16:
                              case 18:
                              case 19:
                              case 20:
                              case 21:
                              case 25:
                              case 26:
                              case 28:
                              case 30:
                              case 31:
                               break label$7;
                              default:
                               break label$53;
                              };
                             }
                             label$54 : {
                              switch ($7_1 - 65 | 0) {
                              case 0:
                              case 4:
                              case 5:
                              case 6:
                               break label$39;
                              case 2:
                               break label$42;
                              case 1:
                              case 3:
                               break label$7;
                              default:
                               break label$54;
                              };
                             }
                             if (($7_1 | 0) == 83) {
                              break label$43
                             }
                             break label$8;
                            }
                            $7_1 = HEAP32[$9 + 64 >> 2];
                            $8 = HEAP32[$9 + 68 >> 2];
                            $20_1 = 1616;
                            break label$46;
                           }
                           $7_1 = 0;
                           label$55 : {
                            switch ($22_1 & 255) {
                            case 0:
                             HEAP32[HEAP32[$9 + 64 >> 2] >> 2] = $14;
                             continue label$5;
                            case 1:
                             HEAP32[HEAP32[$9 + 64 >> 2] >> 2] = $14;
                             continue label$5;
                            case 2:
                             $8 = HEAP32[$9 + 64 >> 2];
                             HEAP32[$8 >> 2] = $14;
                             HEAP32[$8 + 4 >> 2] = $14 >> 31;
                             continue label$5;
                            case 3:
                             HEAP16[HEAP32[$9 + 64 >> 2] >> 1] = $14;
                             continue label$5;
                            case 4:
                             HEAP8[HEAP32[$9 + 64 >> 2]] = $14;
                             continue label$5;
                            case 6:
                             HEAP32[HEAP32[$9 + 64 >> 2] >> 2] = $14;
                             continue label$5;
                            case 7:
                             break label$55;
                            default:
                             continue label$5;
                            };
                           }
                           $8 = HEAP32[$9 + 64 >> 2];
                           HEAP32[$8 >> 2] = $14;
                           HEAP32[$8 + 4 >> 2] = $14 >> 31;
                           continue label$5;
                          }
                          $11_1 = $11_1 >>> 0 <= 8 ? 8 : $11_1;
                          $13 = $13 | 8;
                          $7_1 = 120;
                         }
                         $12_1 = $18_1;
                         $22_1 = $7_1 & 32;
                         $23_1 = HEAP32[$9 + 64 >> 2];
                         $10_1 = HEAP32[$9 + 68 >> 2];
                         if ($23_1 | $10_1) {
                          while (1) {
                           $12_1 = $12_1 - 1 | 0;
                           HEAP8[$12_1 | 0] = HEAPU8[($23_1 & 15) + 71728 | 0] | $22_1;
                           $15_1 = !$10_1 & $23_1 >>> 0 > 15 | ($10_1 | 0) != 0;
                           $8 = $10_1;
                           $10_1 = $8 >>> 4 | 0;
                           $23_1 = ($8 & 15) << 28 | $23_1 >>> 4;
                           if ($15_1) {
                            continue
                           }
                           break;
                          }
                         }
                         if (!(HEAP32[$9 + 64 >> 2] | HEAP32[$9 + 68 >> 2]) | !($13 & 8)) {
                          break label$45
                         }
                         $20_1 = ($7_1 >>> 4 | 0) + 1616 | 0;
                         $16_1 = 2;
                         break label$45;
                        }
                        $15_1 = HEAP32[$9 + 64 >> 2];
                        $12_1 = HEAP32[$9 + 68 >> 2];
                        if ($15_1 | $12_1) {
                         while (1) {
                          $8 = $8 - 1 | 0;
                          HEAP8[$8 | 0] = $15_1 & 7 | 48;
                          $10_1 = !$12_1 & $15_1 >>> 0 > 7 | ($12_1 | 0) != 0;
                          $7_1 = $12_1;
                          $12_1 = $7_1 >>> 3 | 0;
                          $15_1 = ($7_1 & 7) << 29 | $15_1 >>> 3;
                          if ($10_1) {
                           continue
                          }
                          break;
                         }
                        }
                        $12_1 = $8;
                        if (!($13 & 8)) {
                         break label$45
                        }
                        $7_1 = $18_1 - $12_1 | 0;
                        $11_1 = ($7_1 | 0) < ($11_1 | 0) ? $11_1 : $7_1 + 1 | 0;
                        break label$45;
                       }
                       $7_1 = HEAP32[$9 + 64 >> 2];
                       $8 = HEAP32[$9 + 68 >> 2];
                       if (($8 | 0) < 0) {
                        $8 = 0 - ($8 + (($7_1 | 0) != 0) | 0) | 0;
                        $7_1 = 0 - $7_1 | 0;
                        HEAP32[$9 + 64 >> 2] = $7_1;
                        HEAP32[$9 + 68 >> 2] = $8;
                        $16_1 = 1;
                        $20_1 = 1616;
                        break label$46;
                       }
                       if ($13 & 2048) {
                        $16_1 = 1;
                        $20_1 = 1617;
                        break label$46;
                       }
                       $16_1 = $13 & 1;
                       $20_1 = $16_1 ? 1618 : 1616;
                      }
                      $12_1 = $1731($7_1, $8, $18_1);
                     }
                     if (!!$21_1 & ($11_1 | 0) < 0) {
                      break label$4
                     }
                     $13 = $21_1 ? $13 & -65537 : $13;
                     $8 = HEAP32[$9 + 64 >> 2];
                     $7_1 = HEAP32[$9 + 68 >> 2];
                     if (!($11_1 | ($8 | $7_1) != 0)) {
                      $12_1 = $18_1;
                      $8 = $12_1;
                      $11_1 = 0;
                      break label$7;
                     }
                     $7_1 = !($7_1 | $8) + ($18_1 - $12_1 | 0) | 0;
                     $11_1 = ($7_1 | 0) < ($11_1 | 0) ? $11_1 : $7_1;
                     break label$8;
                    }
                    $7_1 = HEAP32[$9 + 64 >> 2];
                    $12_1 = $7_1 ? $7_1 : 17968;
                    $8 = $11_1 >>> 0 >= 2147483647 ? 2147483647 : $11_1;
                    $7_1 = $1644($12_1, 0, $8);
                    $7_1 = $7_1 ? $7_1 - $12_1 | 0 : $8;
                    $8 = $7_1 + $12_1 | 0;
                    if (($11_1 | 0) >= 0) {
                     $13 = $10_1;
                     $11_1 = $7_1;
                     break label$7;
                    }
                    $13 = $10_1;
                    $11_1 = $7_1;
                    if (HEAPU8[$8 | 0]) {
                     break label$4
                    }
                    break label$7;
                   }
                   $7_1 = HEAP32[$9 + 64 >> 2];
                   if ($11_1) {
                    break label$41
                   }
                   $7_1 = 0;
                   $1732($0_1, 32, $17_1, 0, $13);
                   break label$40;
                  }
                  HEAP32[$9 + 12 >> 2] = 0;
                  HEAP32[$9 + 8 >> 2] = HEAP32[$9 + 64 >> 2];
                  $7_1 = $9 + 8 | 0;
                  HEAP32[$9 + 64 >> 2] = $7_1;
                  $11_1 = -1;
                 }
                 $10_1 = $7_1;
                 $7_1 = 0;
                 label$68 : {
                  while (1) {
                   $8 = HEAP32[$10_1 >> 2];
                   if (!$8) {
                    break label$68
                   }
                   $12_1 = $1754($9 + 4 | 0, $8);
                   $8 = ($12_1 | 0) < 0;
                   if (!($8 | $12_1 >>> 0 > $11_1 - $7_1 >>> 0)) {
                    $10_1 = $10_1 + 4 | 0;
                    $7_1 = $7_1 + $12_1 | 0;
                    if ($11_1 >>> 0 > $7_1 >>> 0) {
                     continue
                    }
                    break label$68;
                   }
                   break;
                  };
                  if ($8) {
                   break label$2
                  }
                 }
                 $8 = 61;
                 if (($7_1 | 0) < 0) {
                  break label$3
                 }
                 $1732($0_1, 32, $17_1, $7_1, $13);
                 if (!$7_1) {
                  $7_1 = 0;
                  break label$40;
                 }
                 $8 = 0;
                 $10_1 = HEAP32[$9 + 64 >> 2];
                 while (1) {
                  $12_1 = HEAP32[$10_1 >> 2];
                  if (!$12_1) {
                   break label$40
                  }
                  $12_1 = $1754($9 + 4 | 0, $12_1);
                  $8 = $12_1 + $8 | 0;
                  if ($8 >>> 0 > $7_1 >>> 0) {
                   break label$40
                  }
                  $1726($0_1, $9 + 4 | 0, $12_1);
                  $10_1 = $10_1 + 4 | 0;
                  if ($7_1 >>> 0 > $8 >>> 0) {
                   continue
                  }
                  break;
                 };
                }
                $1732($0_1, 32, $17_1, $7_1, $13 ^ 8192);
                $7_1 = ($7_1 | 0) < ($17_1 | 0) ? $17_1 : $7_1;
                continue label$5;
               }
               if (!!$21_1 & ($11_1 | 0) < 0) {
                break label$4
               }
               $8 = 61;
               $7_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, HEAPF64[$9 + 64 >> 3], $17_1, $11_1, $13, $7_1) | 0;
               if (($7_1 | 0) >= 0) {
                continue label$5
               }
               break label$3;
              }
              HEAP8[$9 + 55 | 0] = HEAP32[$9 + 64 >> 2];
              $11_1 = 1;
              $12_1 = $25_1;
              $13 = $10_1;
              break label$7;
             }
             $10_1 = HEAPU8[$7_1 + 1 | 0];
             $7_1 = $7_1 + 1 | 0;
             continue;
            }
           }
           if ($0_1) {
            break label$1
           }
           if (!$19) {
            break label$6
           }
           $7_1 = 1;
           while (1) {
            $0_1 = HEAP32[($7_1 << 2) + $4_1 >> 2];
            if ($0_1) {
             $1728(($7_1 << 3) + $3 | 0, $0_1, $2_1, $6_1);
             $14 = 1;
             $7_1 = $7_1 + 1 | 0;
             if (($7_1 | 0) != 10) {
              continue
             }
             break label$1;
            }
            break;
           };
           $14 = 1;
           if ($7_1 >>> 0 >= 10) {
            break label$1
           }
           while (1) {
            if (HEAP32[($7_1 << 2) + $4_1 >> 2]) {
             break label$9
            }
            $7_1 = $7_1 + 1 | 0;
            if (($7_1 | 0) != 10) {
             continue
            }
            break;
           };
           break label$1;
          }
          $8 = 28;
          break label$3;
         }
         $8 = $18_1;
        }
        $15_1 = $8 - $12_1 | 0;
        $10_1 = ($11_1 | 0) > ($15_1 | 0) ? $11_1 : $15_1;
        if (($10_1 | 0) > ($16_1 ^ 2147483647)) {
         break label$4
        }
        $8 = 61;
        $11_1 = $10_1 + $16_1 | 0;
        $7_1 = ($11_1 | 0) < ($17_1 | 0) ? $17_1 : $11_1;
        if (($24 | 0) < ($7_1 | 0)) {
         break label$3
        }
        $1732($0_1, 32, $7_1, $11_1, $13);
        $1726($0_1, $20_1, $16_1);
        $1732($0_1, 48, $7_1, $11_1, $13 ^ 65536);
        $1732($0_1, 48, $10_1, $15_1, 0);
        $1726($0_1, $12_1, $15_1);
        $1732($0_1, 32, $7_1, $11_1, $13 ^ 8192);
        continue;
       }
       break;
      };
      $14 = 0;
      break label$1;
     }
     $8 = 61;
    }
    HEAP32[23975] = $8;
   }
   $14 = -1;
  }
  global$0 = $9 + 80 | 0;
  return $14;
 }
 
 function $1726($0_1, $1_1, $2_1) {
  if (!(HEAPU8[$0_1 | 0] & 32)) {
   $1632($1_1, $2_1, $0_1)
  }
 }
 
 function $1727($0_1) {
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0;
  if (!$1721(HEAP8[HEAP32[$0_1 >> 2]])) {
   return 0
  }
  while (1) {
   $2_1 = HEAP32[$0_1 >> 2];
   $1_1 = -1;
   if ($3 >>> 0 <= 214748364) {
    $4_1 = HEAP8[$2_1 | 0] - 48 | 0;
    $1_1 = Math_imul($3, 10);
    $1_1 = ($4_1 | 0) > ($1_1 ^ 2147483647) ? -1 : $4_1 + $1_1 | 0;
   }
   HEAP32[$0_1 >> 2] = $2_1 + 1;
   $3 = $1_1;
   if ($1721(HEAP8[$2_1 + 1 | 0])) {
    continue
   }
   break;
  };
  return $1_1;
 }
 
 function $1728($0_1, $1_1, $2_1, $3) {
  folding_inner2 : {
   folding_inner1 : {
    folding_inner0 : {
     label$1 : {
      label$2 : {
       label$3 : {
        label$10 : {
         label$11 : {
          label$12 : {
           label$13 : {
            label$19 : {
             switch ($1_1 - 9 | 0) {
             case 1:
             case 4:
             case 14:
              break folding_inner0;
             case 2:
             case 5:
             case 11:
             case 15:
              break folding_inner1;
             case 3:
             case 10:
             case 12:
             case 13:
              break folding_inner2;
             case 9:
              break label$10;
             case 8:
              break label$11;
             case 7:
              break label$12;
             case 6:
              break label$13;
             case 0:
              break label$19;
             case 17:
              break label$2;
             case 16:
              break label$3;
             default:
              break label$1;
             };
            }
            $1_1 = HEAP32[$2_1 >> 2];
            HEAP32[$2_1 >> 2] = $1_1 + 4;
            HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
            return;
           }
           $1_1 = HEAP32[$2_1 >> 2];
           HEAP32[$2_1 >> 2] = $1_1 + 4;
           $1_1 = HEAP16[$1_1 >> 1];
           HEAP32[$0_1 >> 2] = $1_1;
           HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
           return;
          }
          $1_1 = HEAP32[$2_1 >> 2];
          HEAP32[$2_1 >> 2] = $1_1 + 4;
          HEAP32[$0_1 >> 2] = HEAPU16[$1_1 >> 1];
          HEAP32[$0_1 + 4 >> 2] = 0;
          return;
         }
         $1_1 = HEAP32[$2_1 >> 2];
         HEAP32[$2_1 >> 2] = $1_1 + 4;
         $1_1 = HEAP8[$1_1 | 0];
         HEAP32[$0_1 >> 2] = $1_1;
         HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
         return;
        }
        $1_1 = HEAP32[$2_1 >> 2];
        HEAP32[$2_1 >> 2] = $1_1 + 4;
        HEAP32[$0_1 >> 2] = HEAPU8[$1_1 | 0];
        HEAP32[$0_1 + 4 >> 2] = 0;
        return;
       }
       $1_1 = HEAP32[$2_1 >> 2] + 7 & -8;
       HEAP32[$2_1 >> 2] = $1_1 + 8;
       HEAPF64[$0_1 >> 3] = HEAPF64[$1_1 >> 3];
       return;
      }
      FUNCTION_TABLE[$3 | 0]($0_1, $2_1);
     }
     return;
    }
    $1_1 = HEAP32[$2_1 >> 2];
    HEAP32[$2_1 >> 2] = $1_1 + 4;
    $1_1 = HEAP32[$1_1 >> 2];
    HEAP32[$0_1 >> 2] = $1_1;
    HEAP32[$0_1 + 4 >> 2] = $1_1 >> 31;
    return;
   }
   $1_1 = HEAP32[$2_1 >> 2];
   HEAP32[$2_1 >> 2] = $1_1 + 4;
   HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
   HEAP32[$0_1 + 4 >> 2] = 0;
   return;
  }
  $1_1 = HEAP32[$2_1 >> 2] + 7 & -8;
  HEAP32[$2_1 >> 2] = $1_1 + 8;
  $2_1 = HEAP32[$1_1 + 4 >> 2];
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = $2_1;
 }
 
 function $1731($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0;
  if (($1_1 | 0) == 1 | $1_1 >>> 0 > 1) {
   while (1) {
    $2_1 = $2_1 - 1 | 0;
    $4_1 = $0_1;
    $0_1 = __wasm_i64_udiv($0_1, $1_1, 10);
    $3 = i64toi32_i32$HIGH_BITS;
    HEAP8[$2_1 | 0] = $4_1 - __wasm_i64_mul($0_1, $3, 10, 0) | 48;
    $4_1 = $1_1 >>> 0 > 9;
    $1_1 = $3;
    if ($4_1) {
     continue
    }
    break;
   }
  }
  if ($0_1) {
   while (1) {
    $2_1 = $2_1 - 1 | 0;
    $1_1 = ($0_1 >>> 0) / 10 | 0;
    HEAP8[$2_1 | 0] = $0_1 - Math_imul($1_1, 10) | 48;
    $3 = $0_1 >>> 0 > 9;
    $0_1 = $1_1;
    if ($3) {
     continue
    }
    break;
   }
  }
  return $2_1;
 }
 
 function $1732($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  if (!($4_1 & 73728 | ($2_1 | 0) <= ($3 | 0))) {
   $3 = $2_1 - $3 | 0;
   $2_1 = $3 >>> 0 < 256;
   $1604($5_1, $1_1 & 255, $2_1 ? $3 : 256);
   if (!$2_1) {
    while (1) {
     $1726($0_1, $5_1, 256);
     $3 = $3 - 256 | 0;
     if ($3 >>> 0 > 255) {
      continue
     }
     break;
    }
   }
   $1726($0_1, $5_1, $3);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $1734($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0.0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0;
  $12_1 = global$0 - 560 | 0;
  global$0 = $12_1;
  HEAP32[$12_1 + 44 >> 2] = 0;
  $1736($1_1);
  $6_1 = i64toi32_i32$HIGH_BITS;
  label$1 : {
   if (($6_1 | 0) < 0) {
    $18_1 = 1;
    $22_1 = 1626;
    $1_1 = -$1_1;
    $1736($1_1);
    $6_1 = i64toi32_i32$HIGH_BITS;
    break label$1;
   }
   if ($4_1 & 2048) {
    $18_1 = 1;
    $22_1 = 1629;
    break label$1;
   }
   $18_1 = $4_1 & 1;
   $22_1 = $18_1 ? 1632 : 1627;
   $24 = !$18_1;
  }
  label$4 : {
   if (($6_1 & 2146435072) == 2146435072) {
    $3 = $18_1 + 3 | 0;
    $1732($0_1, 32, $2_1, $3, $4_1 & -65537);
    $1726($0_1, $22_1, $18_1);
    $5_1 = $5_1 & 32;
    $1726($0_1, $1_1 != $1_1 ? ($5_1 ? 7861 : 14869) : $5_1 ? 9623 : 14956, 3);
    $1732($0_1, 32, $2_1, $3, $4_1 ^ 8192);
    $8 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
    break label$4;
   }
   $20_1 = $12_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      $1_1 = $1723($1_1, $12_1 + 44 | 0);
      $1_1 = $1_1 + $1_1;
      if ($1_1 != 0.0) {
       $6_1 = HEAP32[$12_1 + 44 >> 2];
       HEAP32[$12_1 + 44 >> 2] = $6_1 - 1;
       $17_1 = $5_1 | 32;
       if (($17_1 | 0) != 97) {
        break label$8
       }
       break label$6;
      }
      $17_1 = $5_1 | 32;
      if (($17_1 | 0) == 97) {
       break label$6
      }
      $10_1 = HEAP32[$12_1 + 44 >> 2];
      $11_1 = ($3 | 0) < 0 ? 6 : $3;
      break label$7;
     }
     $10_1 = $6_1 - 29 | 0;
     HEAP32[$12_1 + 44 >> 2] = $10_1;
     $1_1 = $1_1 * 268435456.0;
     $11_1 = ($3 | 0) < 0 ? 6 : $3;
    }
    $14 = ($12_1 + 48 | 0) + (($10_1 | 0) >= 0 ? 288 : 0) | 0;
    $7_1 = $14;
    while (1) {
     if ($1_1 < 4294967296.0 & $1_1 >= 0.0) {
      $6_1 = ~~$1_1 >>> 0
     } else {
      $6_1 = 0
     }
     HEAP32[$7_1 >> 2] = $6_1;
     $7_1 = $7_1 + 4 | 0;
     $1_1 = ($1_1 - +($6_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue
     }
     break;
    };
    label$13 : {
     if (($10_1 | 0) <= 0) {
      $3 = $10_1;
      $6_1 = $7_1;
      $9 = $14;
      break label$13;
     }
     $9 = $14;
     $3 = $10_1;
     while (1) {
      $13 = ($3 | 0) >= 29 ? 29 : $3;
      $6_1 = $7_1 - 4 | 0;
      label$16 : {
       if ($9 >>> 0 > $6_1 >>> 0) {
        break label$16
       }
       $3 = 0;
       while (1) {
        $8 = HEAP32[$6_1 >> 2];
        $15_1 = $13 & 31;
        if (($13 & 63) >>> 0 >= 32) {
         $23_1 = $8 << $15_1;
         $21_1 = 0;
        } else {
         $23_1 = (1 << $15_1) - 1 & $8 >>> 32 - $15_1;
         $21_1 = $8 << $15_1;
        }
        $8 = $21_1 + $3 | 0;
        $15_1 = $23_1;
        $3 = __wasm_i64_udiv($8, $3 >>> 0 > $8 >>> 0 ? $15_1 + 1 | 0 : $15_1, 1e9);
        HEAP32[$6_1 >> 2] = $8 - __wasm_i64_mul($3, i64toi32_i32$HIGH_BITS, 1e9, 0);
        $6_1 = $6_1 - 4 | 0;
        if ($9 >>> 0 <= $6_1 >>> 0) {
         continue
        }
        break;
       };
       if (!$3) {
        break label$16
       }
       $9 = $9 - 4 | 0;
       HEAP32[$9 >> 2] = $3;
      }
      while (1) {
       $6_1 = $7_1;
       if ($6_1 >>> 0 > $9 >>> 0) {
        $7_1 = $6_1 - 4 | 0;
        if (!HEAP32[$7_1 >> 2]) {
         continue
        }
       }
       break;
      };
      $3 = HEAP32[$12_1 + 44 >> 2] - $13 | 0;
      HEAP32[$12_1 + 44 >> 2] = $3;
      $7_1 = $6_1;
      if (($3 | 0) > 0) {
       continue
      }
      break;
     };
    }
    if (($3 | 0) < 0) {
     $19 = (($11_1 + 25 >>> 0) / 9 | 0) + 1 | 0;
     $13 = ($17_1 | 0) == 102;
     while (1) {
      $3 = 0 - $3 | 0;
      $8 = ($3 | 0) >= 9 ? 9 : $3;
      label$22 : {
       if ($6_1 >>> 0 <= $9 >>> 0) {
        $7_1 = HEAP32[$9 >> 2];
        break label$22;
       }
       $15_1 = 1e9 >>> $8 | 0;
       $23_1 = -1 << $8 ^ -1;
       $3 = 0;
       $7_1 = $9;
       while (1) {
        $21_1 = $3;
        $3 = HEAP32[$7_1 >> 2];
        HEAP32[$7_1 >> 2] = $21_1 + ($3 >>> $8 | 0);
        $3 = Math_imul($15_1, $3 & $23_1);
        $7_1 = $7_1 + 4 | 0;
        if ($7_1 >>> 0 < $6_1 >>> 0) {
         continue
        }
        break;
       };
       $7_1 = HEAP32[$9 >> 2];
       if (!$3) {
        break label$22
       }
       HEAP32[$6_1 >> 2] = $3;
       $6_1 = $6_1 + 4 | 0;
      }
      $3 = $8 + HEAP32[$12_1 + 44 >> 2] | 0;
      HEAP32[$12_1 + 44 >> 2] = $3;
      $9 = (!$7_1 << 2) + $9 | 0;
      $7_1 = $13 ? $14 : $9;
      $6_1 = $6_1 - $7_1 >> 2 > ($19 | 0) ? $7_1 + ($19 << 2) | 0 : $6_1;
      if (($3 | 0) < 0) {
       continue
      }
      break;
     };
    }
    $3 = 0;
    label$25 : {
     if ($6_1 >>> 0 <= $9 >>> 0) {
      break label$25
     }
     $3 = Math_imul($14 - $9 >> 2, 9);
     $7_1 = 10;
     $8 = HEAP32[$9 >> 2];
     if ($8 >>> 0 < 10) {
      break label$25
     }
     while (1) {
      $3 = $3 + 1 | 0;
      $7_1 = Math_imul($7_1, 10);
      if ($8 >>> 0 >= $7_1 >>> 0) {
       continue
      }
      break;
     };
    }
    $7_1 = ($11_1 - (($17_1 | 0) != 102 ? $3 : 0) | 0) - (($17_1 | 0) == 103 & ($11_1 | 0) != 0) | 0;
    if (($7_1 | 0) < (Math_imul($6_1 - $14 >> 2, 9) - 9 | 0)) {
     $8 = $7_1 + 9216 | 0;
     $13 = ($8 | 0) / 9 | 0;
     $10_1 = (($12_1 + (($10_1 | 0) < 0 ? 4 : 292) | 0) + ($13 << 2) | 0) - 4048 | 0;
     $7_1 = 10;
     $8 = $8 - Math_imul($13, 9) | 0;
     if (($8 | 0) <= 7) {
      while (1) {
       $7_1 = Math_imul($7_1, 10);
       $8 = $8 + 1 | 0;
       if (($8 | 0) != 8) {
        continue
       }
       break;
      }
     }
     $13 = $10_1 + 4 | 0;
     $15_1 = HEAP32[$10_1 >> 2];
     $19 = ($15_1 >>> 0) / ($7_1 >>> 0) | 0;
     $8 = $15_1 - Math_imul($7_1, $19) | 0;
     label$30 : {
      if (!$8) {
       if (($6_1 | 0) == ($13 | 0)) {
        break label$30
       }
      }
      label$32 : {
       if (!($19 & 1)) {
        $1_1 = 9007199254740992.0;
        if (!(HEAP8[$10_1 - 4 | 0] & 1) | (($7_1 | 0) != 1e9 | $9 >>> 0 >= $10_1 >>> 0)) {
         break label$32
        }
       }
       $1_1 = 9007199254740994.0;
      }
      $16_1 = ($6_1 | 0) == ($13 | 0) ? 1.0 : 1.5;
      $13 = $7_1 >>> 1 | 0;
      $16_1 = $8 >>> 0 < $13 >>> 0 ? .5 : ($13 | 0) == ($8 | 0) ? $16_1 : 1.5;
      if (!(HEAPU8[$22_1 | 0] != 45 | $24)) {
       $16_1 = -$16_1;
       $1_1 = -$1_1;
      }
      $8 = $15_1 - $8 | 0;
      HEAP32[$10_1 >> 2] = $8;
      if ($1_1 + $16_1 == $1_1) {
       break label$30
      }
      $3 = $7_1 + $8 | 0;
      HEAP32[$10_1 >> 2] = $3;
      if ($3 >>> 0 >= 1e9) {
       while (1) {
        HEAP32[$10_1 >> 2] = 0;
        $10_1 = $10_1 - 4 | 0;
        if ($9 >>> 0 > $10_1 >>> 0) {
         $9 = $9 - 4 | 0;
         HEAP32[$9 >> 2] = 0;
        }
        $3 = HEAP32[$10_1 >> 2] + 1 | 0;
        HEAP32[$10_1 >> 2] = $3;
        if ($3 >>> 0 > 999999999) {
         continue
        }
        break;
       }
      }
      $3 = Math_imul($14 - $9 >> 2, 9);
      $7_1 = 10;
      $8 = HEAP32[$9 >> 2];
      if ($8 >>> 0 < 10) {
       break label$30
      }
      while (1) {
       $3 = $3 + 1 | 0;
       $7_1 = Math_imul($7_1, 10);
       if ($8 >>> 0 >= $7_1 >>> 0) {
        continue
       }
       break;
      };
     }
     $7_1 = $10_1 + 4 | 0;
     $6_1 = $6_1 >>> 0 > $7_1 >>> 0 ? $7_1 : $6_1;
    }
    while (1) {
     label$39 : {
      $7_1 = $6_1;
      $8 = $6_1 >>> 0 <= $9 >>> 0;
      if ($8) {
       break label$39
      }
      $6_1 = $7_1 - 4 | 0;
      if (!HEAP32[$6_1 >> 2]) {
       continue
      }
     }
     break;
    };
    label$41 : {
     if (($17_1 | 0) != 103) {
      $10_1 = $4_1 & 8;
      break label$41;
     }
     $6_1 = $11_1 ? $11_1 : 1;
     $10_1 = ($6_1 | 0) > ($3 | 0) & ($3 | 0) > -5;
     $11_1 = ($10_1 ? $3 ^ -1 : -1) + $6_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $10_1 = $4_1 & 8;
     if ($10_1) {
      break label$41
     }
     $6_1 = -9;
     label$43 : {
      if ($8) {
       break label$43
      }
      $13 = HEAP32[$7_1 - 4 >> 2];
      if (!$13) {
       break label$43
      }
      $8 = 10;
      $6_1 = 0;
      if (($13 >>> 0) % 10 | 0) {
       break label$43
      }
      while (1) {
       $10_1 = $6_1;
       $6_1 = $6_1 + 1 | 0;
       $8 = Math_imul($8, 10);
       if (!(($13 >>> 0) % ($8 >>> 0) | 0)) {
        continue
       }
       break;
      };
      $6_1 = $10_1 ^ -1;
     }
     $8 = Math_imul($7_1 - $14 >> 2, 9);
     if (($5_1 & -33) == 70) {
      $10_1 = 0;
      $6_1 = ($6_1 + $8 | 0) - 9 | 0;
      $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
      $11_1 = ($6_1 | 0) > ($11_1 | 0) ? $11_1 : $6_1;
      break label$41;
     }
     $10_1 = 0;
     $6_1 = (($3 + $8 | 0) + $6_1 | 0) - 9 | 0;
     $6_1 = ($6_1 | 0) > 0 ? $6_1 : 0;
     $11_1 = ($6_1 | 0) > ($11_1 | 0) ? $11_1 : $6_1;
    }
    $8 = -1;
    $17_1 = $10_1 | $11_1;
    if ((($17_1 ? 2147483645 : 2147483646) | 0) < ($11_1 | 0)) {
     break label$4
    }
    $13 = ((($17_1 | 0) != 0) + $11_1 | 0) + 1 | 0;
    $15_1 = $5_1 & -33;
    label$46 : {
     if (($15_1 | 0) == 70) {
      if (($13 ^ 2147483647) < ($3 | 0)) {
       break label$4
      }
      $6_1 = ($3 | 0) > 0 ? $3 : 0;
      break label$46;
     }
     $6_1 = $3 >> 31;
     $6_1 = $1731(($6_1 ^ $3) - $6_1 | 0, 0, $20_1);
     if (($20_1 - $6_1 | 0) <= 1) {
      while (1) {
       $6_1 = $6_1 - 1 | 0;
       HEAP8[$6_1 | 0] = 48;
       if (($20_1 - $6_1 | 0) < 2) {
        continue
       }
       break;
      }
     }
     $19 = $6_1 - 2 | 0;
     HEAP8[$19 | 0] = $5_1;
     HEAP8[$6_1 - 1 | 0] = ($3 | 0) < 0 ? 45 : 43;
     $6_1 = $20_1 - $19 | 0;
     if (($6_1 | 0) > ($13 ^ 2147483647)) {
      break label$4
     }
    }
    $3 = $6_1 + $13 | 0;
    if (($3 | 0) > ($18_1 ^ 2147483647)) {
     break label$4
    }
    $5_1 = $3 + $18_1 | 0;
    $1732($0_1, 32, $2_1, $5_1, $4_1);
    $1726($0_1, $22_1, $18_1);
    $1732($0_1, 48, $2_1, $5_1, $4_1 ^ 65536);
    label$50 : {
     label$51 : {
      label$52 : {
       if (($15_1 | 0) == 70) {
        $6_1 = $12_1 + 16 | 0;
        $3 = $6_1 | 8;
        $10_1 = $6_1 | 9;
        $8 = $9 >>> 0 > $14 >>> 0 ? $14 : $9;
        $9 = $8;
        while (1) {
         $6_1 = $1731(HEAP32[$9 >> 2], 0, $10_1);
         label$55 : {
          if (($8 | 0) != ($9 | 0)) {
           if ($12_1 + 16 >>> 0 >= $6_1 >>> 0) {
            break label$55
           }
           while (1) {
            $6_1 = $6_1 - 1 | 0;
            HEAP8[$6_1 | 0] = 48;
            if ($12_1 + 16 >>> 0 < $6_1 >>> 0) {
             continue
            }
            break;
           };
           break label$55;
          }
          if (($6_1 | 0) != ($10_1 | 0)) {
           break label$55
          }
          HEAP8[$12_1 + 24 | 0] = 48;
          $6_1 = $3;
         }
         $1726($0_1, $6_1, $10_1 - $6_1 | 0);
         $9 = $9 + 4 | 0;
         if ($14 >>> 0 >= $9 >>> 0) {
          continue
         }
         break;
        };
        if ($17_1) {
         $1726($0_1, 17684, 1)
        }
        if (($11_1 | 0) <= 0 | $7_1 >>> 0 <= $9 >>> 0) {
         break label$52
        }
        while (1) {
         $6_1 = $1731(HEAP32[$9 >> 2], 0, $10_1);
         if ($6_1 >>> 0 > $12_1 + 16 >>> 0) {
          while (1) {
           $6_1 = $6_1 - 1 | 0;
           HEAP8[$6_1 | 0] = 48;
           if ($12_1 + 16 >>> 0 < $6_1 >>> 0) {
            continue
           }
           break;
          }
         }
         $1726($0_1, $6_1, ($11_1 | 0) >= 9 ? 9 : $11_1);
         $6_1 = $11_1 - 9 | 0;
         $9 = $9 + 4 | 0;
         if ($7_1 >>> 0 <= $9 >>> 0) {
          break label$51
         }
         $3 = ($11_1 | 0) > 9;
         $11_1 = $6_1;
         if ($3) {
          continue
         }
         break;
        };
        break label$51;
       }
       label$62 : {
        if (($11_1 | 0) < 0) {
         break label$62
        }
        $8 = $7_1 >>> 0 > $9 >>> 0 ? $7_1 : $9 + 4 | 0;
        $6_1 = $12_1 + 16 | 0;
        $3 = $6_1 | 8;
        $14 = $6_1 | 9;
        $7_1 = $9;
        while (1) {
         $6_1 = $1731(HEAP32[$7_1 >> 2], 0, $14);
         if (($6_1 | 0) == ($14 | 0)) {
          HEAP8[$12_1 + 24 | 0] = 48;
          $6_1 = $3;
         }
         label$65 : {
          if (($7_1 | 0) != ($9 | 0)) {
           if ($12_1 + 16 >>> 0 >= $6_1 >>> 0) {
            break label$65
           }
           while (1) {
            $6_1 = $6_1 - 1 | 0;
            HEAP8[$6_1 | 0] = 48;
            if ($12_1 + 16 >>> 0 < $6_1 >>> 0) {
             continue
            }
            break;
           };
           break label$65;
          }
          $1726($0_1, $6_1, 1);
          $6_1 = $6_1 + 1 | 0;
          if (!($10_1 | $11_1)) {
           break label$65
          }
          $1726($0_1, 17684, 1);
         }
         $21_1 = $6_1;
         $6_1 = $14 - $6_1 | 0;
         $1726($0_1, $21_1, ($6_1 | 0) > ($11_1 | 0) ? $11_1 : $6_1);
         $11_1 = $11_1 - $6_1 | 0;
         $7_1 = $7_1 + 4 | 0;
         if ($8 >>> 0 <= $7_1 >>> 0) {
          break label$62
         }
         if (($11_1 | 0) >= 0) {
          continue
         }
         break;
        };
       }
       $1732($0_1, 48, $11_1 + 18 | 0, 18, 0);
       $1726($0_1, $19, $20_1 - $19 | 0);
       break label$50;
      }
      $6_1 = $11_1;
     }
     $1732($0_1, 48, $6_1 + 9 | 0, 9, 0);
    }
    $1732($0_1, 32, $2_1, $5_1, $4_1 ^ 8192);
    $8 = ($2_1 | 0) < ($5_1 | 0) ? $5_1 : $2_1;
    break label$4;
   }
   $9 = ($5_1 << 26 >> 31 & 9) + $22_1 | 0;
   label$68 : {
    if ($3 >>> 0 > 11) {
     break label$68
    }
    $6_1 = 12 - $3 | 0;
    $16_1 = 16.0;
    while (1) {
     $16_1 = $16_1 * 16.0;
     $6_1 = $6_1 - 1 | 0;
     if ($6_1) {
      continue
     }
     break;
    };
    if (HEAPU8[$9 | 0] == 45) {
     $1_1 = -($16_1 + (-$1_1 - $16_1));
     break label$68;
    }
    $1_1 = $1_1 + $16_1 - $16_1;
   }
   $7_1 = HEAP32[$12_1 + 44 >> 2];
   $6_1 = $7_1 >> 31;
   $6_1 = $1731(($6_1 ^ $7_1) - $6_1 | 0, 0, $20_1);
   if (($6_1 | 0) == ($20_1 | 0)) {
    HEAP8[$12_1 + 15 | 0] = 48;
    $6_1 = $12_1 + 15 | 0;
   }
   $11_1 = $18_1 | 2;
   $10_1 = $5_1 & 32;
   $7_1 = HEAP32[$12_1 + 44 >> 2];
   $14 = $6_1 - 2 | 0;
   HEAP8[$14 | 0] = $5_1 + 15;
   HEAP8[$6_1 - 1 | 0] = ($7_1 | 0) < 0 ? 45 : 43;
   $6_1 = $4_1 & 8;
   $7_1 = $12_1 + 16 | 0;
   while (1) {
    $5_1 = $7_1;
    $5_1 = $7_1;
    if (Math_abs($1_1) < 2147483648.0) {
     $7_1 = ~~$1_1
    } else {
     $7_1 = -2147483648
    }
    HEAP8[$5_1 | 0] = $10_1 | HEAPU8[$7_1 + 71728 | 0];
    $1_1 = ($1_1 - +($7_1 | 0)) * 16.0;
    $7_1 = $5_1 + 1 | 0;
    if (!(!(($3 | 0) > 0 | $6_1) & $1_1 == 0.0 | ($7_1 - ($12_1 + 16 | 0) | 0) != 1)) {
     HEAP8[$5_1 + 1 | 0] = 46;
     $7_1 = $5_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue
    }
    break;
   };
   $8 = -1;
   $6_1 = $20_1 - $14 | 0;
   $5_1 = $6_1 + $11_1 | 0;
   if ((2147483645 - $5_1 | 0) < ($3 | 0)) {
    break label$4
   }
   $21_1 = $5_1;
   $10_1 = $12_1 + 16 | 0;
   $5_1 = $7_1 - $10_1 | 0;
   $7_1 = $3 ? (($5_1 - 2 | 0) < ($3 | 0) ? $3 + 2 | 0 : $5_1) : $5_1;
   $3 = $21_1 + $7_1 | 0;
   $1732($0_1, 32, $2_1, $3, $4_1);
   $1726($0_1, $9, $11_1);
   $1732($0_1, 48, $2_1, $3, $4_1 ^ 65536);
   $1726($0_1, $10_1, $5_1);
   $1732($0_1, 48, $7_1 - $5_1 | 0, 0, 0);
   $1726($0_1, $14, $6_1);
   $1732($0_1, 32, $2_1, $3, $4_1 ^ 8192);
   $8 = ($2_1 | 0) < ($3 | 0) ? $3 : $2_1;
  }
  global$0 = $12_1 + 560 | 0;
  return $8 | 0;
 }
 
 function $1735($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = $1_1;
  $1_1 = HEAP32[$1_1 >> 2] + 7 & -8;
  HEAP32[$2_1 >> 2] = $1_1 + 16;
  $2_1 = $0_1;
  $0_1 = $1_1 + 8 | 0;
  HEAPF64[$2_1 >> 3] = $1780(HEAP32[$1_1 >> 2], HEAP32[$1_1 + 4 >> 2], HEAP32[$0_1 >> 2], HEAP32[$0_1 + 4 >> 2]);
 }
 
 function $1736($0_1) {
  var $1_1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  $1_1 = wasm2js_scratch_load_i32(1) | 0;
  wasm2js_scratch_load_i32(0) | 0;
  i64toi32_i32$HIGH_BITS = $1_1;
 }
 
 function $1738($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 160 | 0;
  global$0 = $4_1;
  $5_1 = $1_1 ? $0_1 : $4_1 + 158 | 0;
  HEAP32[$4_1 + 148 >> 2] = $5_1;
  $0_1 = -1;
  $6_1 = $1_1 - 1 | 0;
  HEAP32[$4_1 + 152 >> 2] = $1_1 >>> 0 >= $6_1 >>> 0 ? $6_1 : 0;
  $4_1 = $1604($4_1, 0, 144);
  HEAP32[$4_1 + 76 >> 2] = -1;
  HEAP32[$4_1 + 36 >> 2] = 972;
  HEAP32[$4_1 + 80 >> 2] = -1;
  HEAP32[$4_1 + 44 >> 2] = $4_1 + 159;
  HEAP32[$4_1 + 84 >> 2] = $4_1 + 148;
  label$1 : {
   if (($1_1 | 0) < 0) {
    HEAP32[23975] = 61;
    break label$1;
   }
   HEAP8[$5_1 | 0] = 0;
   $0_1 = $1724($4_1, $2_1, $3, 970, 971);
  }
  global$0 = $4_1 + 160 | 0;
  return $0_1;
 }
 
 function $1739($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $5_1 = HEAP32[$4_1 + 4 >> 2];
  $6_1 = HEAP32[$0_1 + 28 >> 2];
  $3 = HEAP32[$0_1 + 20 >> 2] - $6_1 | 0;
  $3 = $3 >>> 0 > $5_1 >>> 0 ? $5_1 : $3;
  if ($3) {
   $1602(HEAP32[$4_1 >> 2], $6_1, $3);
   HEAP32[$4_1 >> 2] = $3 + HEAP32[$4_1 >> 2];
   $5_1 = HEAP32[$4_1 + 4 >> 2] - $3 | 0;
   HEAP32[$4_1 + 4 >> 2] = $5_1;
  }
  $3 = HEAP32[$4_1 >> 2];
  $5_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $5_1 : $2_1;
  if ($5_1) {
   $1602($3, $1_1, $5_1);
   $3 = $5_1 + HEAP32[$4_1 >> 2] | 0;
   HEAP32[$4_1 >> 2] = $3;
   HEAP32[$4_1 + 4 >> 2] = HEAP32[$4_1 + 4 >> 2] - $5_1;
  }
  HEAP8[$3 | 0] = 0;
  $1_1 = HEAP32[$0_1 + 44 >> 2];
  HEAP32[$0_1 + 28 >> 2] = $1_1;
  HEAP32[$0_1 + 20 >> 2] = $1_1;
  return $2_1 | 0;
 }
 
 function $1749($0_1, $1_1, $2_1, $3) {
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + 2 | 0) {
    case 0:
     HEAP8[$0_1 | 0] = $2_1;
     return;
    case 1:
     HEAP16[$0_1 >> 1] = $2_1;
     return;
    case 2:
    case 3:
     HEAP32[$0_1 >> 2] = $2_1;
     return;
    case 5:
     break label$2;
    default:
     break label$1;
    };
   }
   HEAP32[$0_1 >> 2] = $2_1;
   HEAP32[$0_1 + 4 >> 2] = $3;
  }
 }
 
 function $1751($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = HEAP32[$0_1 + 84 >> 2];
  $3 = $2_1 + 256 | 0;
  $5_1 = $1644($4_1, 0, $3);
  $3 = $5_1 ? $5_1 - $4_1 | 0 : $3;
  $2_1 = $2_1 >>> 0 > $3 >>> 0 ? $3 : $2_1;
  $1602($1_1, $4_1, $2_1);
  $1_1 = $4_1 + $3 | 0;
  HEAP32[$0_1 + 84 >> 2] = $1_1;
  HEAP32[$0_1 + 8 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1 + $4_1;
  return $2_1 | 0;
 }
 
 function $1752($0_1) {
  if (!$0_1) {
   return 0
  }
  HEAP32[23975] = $0_1;
  return -1;
 }
 
 function $1754($0_1, $1_1) {
  if (!$0_1) {
   return 0
  }
  __inlined_func$1753 : {
   label$1 : {
    if ($0_1) {
     if ($1_1 >>> 0 <= 127) {
      break label$1
     }
     label$3 : {
      if (!HEAP32[HEAP32[24274] >> 2]) {
       if (($1_1 & -128) == 57216) {
        break label$1
       }
       break label$3;
      }
      if ($1_1 >>> 0 <= 2047) {
       HEAP8[$0_1 + 1 | 0] = $1_1 & 63 | 128;
       HEAP8[$0_1 | 0] = $1_1 >>> 6 | 192;
       $0_1 = 2;
       break __inlined_func$1753;
      }
      if (!(($1_1 & -8192) != 57344 & $1_1 >>> 0 >= 55296)) {
       HEAP8[$0_1 + 2 | 0] = $1_1 & 63 | 128;
       HEAP8[$0_1 | 0] = $1_1 >>> 12 | 224;
       HEAP8[$0_1 + 1 | 0] = $1_1 >>> 6 & 63 | 128;
       $0_1 = 3;
       break __inlined_func$1753;
      }
      if ($1_1 - 65536 >>> 0 <= 1048575) {
       HEAP8[$0_1 + 3 | 0] = $1_1 & 63 | 128;
       HEAP8[$0_1 | 0] = $1_1 >>> 18 | 240;
       HEAP8[$0_1 + 2 | 0] = $1_1 >>> 6 & 63 | 128;
       HEAP8[$0_1 + 1 | 0] = $1_1 >>> 12 & 63 | 128;
       $0_1 = 4;
       break __inlined_func$1753;
      }
     }
     HEAP32[23975] = 25;
     $0_1 = -1;
    } else {
     $0_1 = 1
    }
    break __inlined_func$1753;
   }
   HEAP8[$0_1 | 0] = $1_1;
   $0_1 = 1;
  }
  return $0_1;
 }
 
 function $1755($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $11_1 = global$0 - 16 | 0;
  global$0 = $11_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           if ($0_1 >>> 0 <= 244) {
            $5_1 = HEAP32[24284];
            $6_1 = $0_1 >>> 0 < 11 ? 16 : $0_1 + 11 & -8;
            $0_1 = $6_1 >>> 3 | 0;
            $1_1 = $5_1 >>> $0_1 | 0;
            if ($1_1 & 3) {
             $2_1 = $0_1 + (($1_1 ^ -1) & 1) | 0;
             $1_1 = $2_1 << 3;
             $0_1 = $1_1 + 97176 | 0;
             $1_1 = HEAP32[$1_1 + 97184 >> 2];
             $3 = HEAP32[$1_1 + 8 >> 2];
             label$12 : {
              if (($0_1 | 0) == ($3 | 0)) {
               HEAP32[24284] = __wasm_rotl_i32($2_1) & $5_1;
               break label$12;
              }
              HEAP32[$3 + 12 >> 2] = $0_1;
              HEAP32[$0_1 + 8 >> 2] = $3;
             }
             $0_1 = $1_1 + 8 | 0;
             $2_1 = $2_1 << 3;
             HEAP32[$1_1 + 4 >> 2] = $2_1 | 3;
             $1_1 = $1_1 + $2_1 | 0;
             HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
             break label$1;
            }
            $7_1 = HEAP32[24286];
            if ($7_1 >>> 0 >= $6_1 >>> 0) {
             break label$9
            }
            if ($1_1) {
             $2_1 = 2 << $0_1;
             $0_1 = (0 - $2_1 | $2_1) & $1_1 << $0_1;
             $1_1 = __wasm_ctz_i32(0 - $0_1 & $0_1);
             $0_1 = $1_1 << 3;
             $2_1 = $0_1 + 97176 | 0;
             $0_1 = HEAP32[$0_1 + 97184 >> 2];
             $3 = HEAP32[$0_1 + 8 >> 2];
             label$15 : {
              if (($2_1 | 0) == ($3 | 0)) {
               $5_1 = __wasm_rotl_i32($1_1) & $5_1;
               HEAP32[24284] = $5_1;
               break label$15;
              }
              HEAP32[$3 + 12 >> 2] = $2_1;
              HEAP32[$2_1 + 8 >> 2] = $3;
             }
             HEAP32[$0_1 + 4 >> 2] = $6_1 | 3;
             $8 = $0_1 + $6_1 | 0;
             $1_1 = $1_1 << 3;
             $3 = $1_1 - $6_1 | 0;
             HEAP32[$8 + 4 >> 2] = $3 | 1;
             HEAP32[$0_1 + $1_1 >> 2] = $3;
             if ($7_1) {
              $1_1 = ($7_1 & -8) + 97176 | 0;
              $2_1 = HEAP32[24289];
              $4_1 = 1 << ($7_1 >>> 3);
              label$18 : {
               if (!($4_1 & $5_1)) {
                HEAP32[24284] = $4_1 | $5_1;
                $4_1 = $1_1;
                break label$18;
               }
               $4_1 = HEAP32[$1_1 + 8 >> 2];
              }
              HEAP32[$1_1 + 8 >> 2] = $2_1;
              HEAP32[$4_1 + 12 >> 2] = $2_1;
              HEAP32[$2_1 + 12 >> 2] = $1_1;
              HEAP32[$2_1 + 8 >> 2] = $4_1;
             }
             $0_1 = $0_1 + 8 | 0;
             HEAP32[24289] = $8;
             HEAP32[24286] = $3;
             break label$1;
            }
            $10_1 = HEAP32[24285];
            if (!$10_1) {
             break label$9
            }
            $2_1 = HEAP32[(__wasm_ctz_i32($10_1 & 0 - $10_1) << 2) + 97440 >> 2];
            $4_1 = (HEAP32[$2_1 + 4 >> 2] & -8) - $6_1 | 0;
            $1_1 = $2_1;
            while (1) {
             label$20 : {
              $0_1 = HEAP32[$1_1 + 16 >> 2];
              if (!$0_1) {
               $0_1 = HEAP32[$1_1 + 20 >> 2];
               if (!$0_1) {
                break label$20
               }
              }
              $3 = (HEAP32[$0_1 + 4 >> 2] & -8) - $6_1 | 0;
              $1_1 = $3 >>> 0 < $4_1 >>> 0;
              $4_1 = $1_1 ? $3 : $4_1;
              $2_1 = $1_1 ? $0_1 : $2_1;
              $1_1 = $0_1;
              continue;
             }
             break;
            };
            $9 = HEAP32[$2_1 + 24 >> 2];
            $3 = HEAP32[$2_1 + 12 >> 2];
            if (($2_1 | 0) != ($3 | 0)) {
             $0_1 = HEAP32[$2_1 + 8 >> 2];
             HEAP32[$0_1 + 12 >> 2] = $3;
             HEAP32[$3 + 8 >> 2] = $0_1;
             break label$2;
            }
            $1_1 = $2_1 + 20 | 0;
            $0_1 = HEAP32[$1_1 >> 2];
            if (!$0_1) {
             $0_1 = HEAP32[$2_1 + 16 >> 2];
             if (!$0_1) {
              break label$8
             }
             $1_1 = $2_1 + 16 | 0;
            }
            while (1) {
             $8 = $1_1;
             $3 = $0_1;
             $1_1 = $0_1 + 20 | 0;
             $0_1 = HEAP32[$1_1 >> 2];
             if ($0_1) {
              continue
             }
             $1_1 = $3 + 16 | 0;
             $0_1 = HEAP32[$3 + 16 >> 2];
             if ($0_1) {
              continue
             }
             break;
            };
            HEAP32[$8 >> 2] = 0;
            break label$2;
           }
           $6_1 = -1;
           if ($0_1 >>> 0 > 4294967231) {
            break label$9
           }
           $0_1 = $0_1 + 11 | 0;
           $6_1 = $0_1 & -8;
           $8 = HEAP32[24285];
           if (!$8) {
            break label$9
           }
           $4_1 = 0 - $6_1 | 0;
           $7_1 = 0;
           label$26 : {
            if ($6_1 >>> 0 < 256) {
             break label$26
            }
            $7_1 = 31;
            if ($6_1 >>> 0 > 16777215) {
             break label$26
            }
            $0_1 = Math_clz32($0_1 >>> 8 | 0);
            $7_1 = (($6_1 >>> 38 - $0_1 & 1) - ($0_1 << 1) | 0) + 62 | 0;
           }
           $1_1 = HEAP32[($7_1 << 2) + 97440 >> 2];
           label$27 : {
            label$28 : {
             label$29 : {
              if (!$1_1) {
               $0_1 = 0;
               break label$29;
              }
              $0_1 = 0;
              $2_1 = $6_1 << (($7_1 | 0) != 31 ? 25 - ($7_1 >>> 1 | 0) | 0 : 0);
              while (1) {
               label$32 : {
                $5_1 = (HEAP32[$1_1 + 4 >> 2] & -8) - $6_1 | 0;
                if ($5_1 >>> 0 >= $4_1 >>> 0) {
                 break label$32
                }
                $3 = $1_1;
                $4_1 = $5_1;
                if ($4_1) {
                 break label$32
                }
                $4_1 = 0;
                $0_1 = $1_1;
                break label$28;
               }
               $5_1 = HEAP32[$1_1 + 20 >> 2];
               $1_1 = HEAP32[(($2_1 >>> 29 & 4) + $1_1 | 0) + 16 >> 2];
               $0_1 = $5_1 ? (($5_1 | 0) == ($1_1 | 0) ? $0_1 : $5_1) : $0_1;
               $2_1 = $2_1 << 1;
               if ($1_1) {
                continue
               }
               break;
              };
             }
             if (!($0_1 | $3)) {
              $3 = 0;
              $0_1 = 2 << $7_1;
              $0_1 = (0 - $0_1 | $0_1) & $8;
              if (!$0_1) {
               break label$9
              }
              $0_1 = HEAP32[(__wasm_ctz_i32($0_1 & 0 - $0_1) << 2) + 97440 >> 2];
             }
             if (!$0_1) {
              break label$27
             }
            }
            while (1) {
             $2_1 = (HEAP32[$0_1 + 4 >> 2] & -8) - $6_1 | 0;
             $1_1 = $2_1 >>> 0 < $4_1 >>> 0;
             $4_1 = $1_1 ? $2_1 : $4_1;
             $3 = $1_1 ? $0_1 : $3;
             $1_1 = HEAP32[$0_1 + 16 >> 2];
             if ($1_1) {
              $0_1 = $1_1
             } else {
              $0_1 = HEAP32[$0_1 + 20 >> 2]
             }
             if ($0_1) {
              continue
             }
             break;
            };
           }
           if (!$3 | HEAP32[24286] - $6_1 >>> 0 <= $4_1 >>> 0) {
            break label$9
           }
           $7_1 = HEAP32[$3 + 24 >> 2];
           $2_1 = HEAP32[$3 + 12 >> 2];
           if (($2_1 | 0) != ($3 | 0)) {
            $0_1 = HEAP32[$3 + 8 >> 2];
            HEAP32[$0_1 + 12 >> 2] = $2_1;
            HEAP32[$2_1 + 8 >> 2] = $0_1;
            break label$3;
           }
           $1_1 = $3 + 20 | 0;
           $0_1 = HEAP32[$1_1 >> 2];
           if (!$0_1) {
            $0_1 = HEAP32[$3 + 16 >> 2];
            if (!$0_1) {
             break label$7
            }
            $1_1 = $3 + 16 | 0;
           }
           while (1) {
            $5_1 = $1_1;
            $2_1 = $0_1;
            $1_1 = $0_1 + 20 | 0;
            $0_1 = HEAP32[$1_1 >> 2];
            if ($0_1) {
             continue
            }
            $1_1 = $2_1 + 16 | 0;
            $0_1 = HEAP32[$2_1 + 16 >> 2];
            if ($0_1) {
             continue
            }
            break;
           };
           HEAP32[$5_1 >> 2] = 0;
           break label$3;
          }
          $3 = HEAP32[24286];
          if ($6_1 >>> 0 <= $3 >>> 0) {
           $0_1 = HEAP32[24289];
           $1_1 = $3 - $6_1 | 0;
           label$40 : {
            if ($1_1 >>> 0 >= 16) {
             $2_1 = $0_1 + $6_1 | 0;
             HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
             HEAP32[$0_1 + $3 >> 2] = $1_1;
             HEAP32[$0_1 + 4 >> 2] = $6_1 | 3;
             break label$40;
            }
            HEAP32[$0_1 + 4 >> 2] = $3 | 3;
            $1_1 = $0_1 + $3 | 0;
            HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] | 1;
            $2_1 = 0;
            $1_1 = 0;
           }
           HEAP32[24286] = $1_1;
           HEAP32[24289] = $2_1;
           $0_1 = $0_1 + 8 | 0;
           break label$1;
          }
          $2_1 = HEAP32[24287];
          if ($6_1 >>> 0 < $2_1 >>> 0) {
           $1_1 = $2_1 - $6_1 | 0;
           HEAP32[24287] = $1_1;
           $0_1 = HEAP32[24290];
           $2_1 = $0_1 + $6_1 | 0;
           HEAP32[24290] = $2_1;
           HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
           HEAP32[$0_1 + 4 >> 2] = $6_1 | 3;
           $0_1 = $0_1 + 8 | 0;
           break label$1;
          }
          $0_1 = 0;
          if (HEAP32[24402]) {
           $1_1 = HEAP32[24404]
          } else {
           HEAP32[24405] = -1;
           HEAP32[24406] = -1;
           HEAP32[24403] = 4096;
           HEAP32[24404] = 4096;
           HEAP32[24402] = $11_1 + 12 & -16 ^ 1431655768;
           HEAP32[24407] = 0;
           HEAP32[24395] = 0;
           $1_1 = 4096;
          }
          $4_1 = $6_1 + 47 | 0;
          $5_1 = $1_1 + $4_1 | 0;
          $8 = 0 - $1_1 | 0;
          $1_1 = $5_1 & $8;
          if ($1_1 >>> 0 <= $6_1 >>> 0) {
           break label$1
          }
          $3 = HEAP32[24394];
          if ($3) {
           $9 = $3;
           $3 = HEAP32[24392];
           $7_1 = $3 + $1_1 | 0;
           if ($9 >>> 0 < $7_1 >>> 0 | $3 >>> 0 >= $7_1 >>> 0) {
            break label$1
           }
          }
          label$46 : {
           if (!(HEAPU8[97580] & 4)) {
            label$48 : {
             label$49 : {
              label$50 : {
               label$51 : {
                $3 = HEAP32[24290];
                if ($3) {
                 $0_1 = 97584;
                 while (1) {
                  $7_1 = HEAP32[$0_1 >> 2];
                  if ($3 >>> 0 >= $7_1 >>> 0 & $3 >>> 0 < $7_1 + HEAP32[$0_1 + 4 >> 2] >>> 0) {
                   break label$51
                  }
                  $0_1 = HEAP32[$0_1 + 8 >> 2];
                  if ($0_1) {
                   continue
                  }
                  break;
                 };
                }
                $2_1 = $1764(0);
                if (($2_1 | 0) == -1) {
                 break label$48
                }
                $5_1 = $1_1;
                $0_1 = HEAP32[24403];
                $3 = $0_1 - 1 | 0;
                if ($3 & $2_1) {
                 $5_1 = ($1_1 - $2_1 | 0) + ($2_1 + $3 & 0 - $0_1) | 0
                }
                if ($6_1 >>> 0 >= $5_1 >>> 0) {
                 break label$48
                }
                $0_1 = HEAP32[24394];
                if ($0_1) {
                 $7_1 = $0_1;
                 $0_1 = HEAP32[24392];
                 $3 = $0_1 + $5_1 | 0;
                 if ($7_1 >>> 0 < $3 >>> 0 | $0_1 >>> 0 >= $3 >>> 0) {
                  break label$48
                 }
                }
                $0_1 = $1764($5_1);
                if (($2_1 | 0) != ($0_1 | 0)) {
                 break label$50
                }
                break label$46;
               }
               $5_1 = $8 & $5_1 - $2_1;
               $2_1 = $1764($5_1);
               if (($2_1 | 0) == (HEAP32[$0_1 >> 2] + HEAP32[$0_1 + 4 >> 2] | 0)) {
                break label$49
               }
               $0_1 = $2_1;
              }
              if (($0_1 | 0) == -1) {
               break label$48
              }
              if ($5_1 >>> 0 >= $6_1 + 48 >>> 0) {
               $2_1 = $0_1;
               break label$46;
              }
              $2_1 = HEAP32[24404];
              $2_1 = $2_1 + ($4_1 - $5_1 | 0) & 0 - $2_1;
              if (($1764($2_1) | 0) == -1) {
               break label$48
              }
              $5_1 = $2_1 + $5_1 | 0;
              $2_1 = $0_1;
              break label$46;
             }
             if (($2_1 | 0) != -1) {
              break label$46
             }
            }
            HEAP32[24395] = HEAP32[24395] | 4;
           }
           $2_1 = $1764($1_1);
           $0_1 = $1764(0);
           if (($2_1 | 0) == -1 | ($0_1 | 0) == -1 | $0_1 >>> 0 <= $2_1 >>> 0) {
            break label$4
           }
           $5_1 = $0_1 - $2_1 | 0;
           if ($5_1 >>> 0 <= $6_1 + 40 >>> 0) {
            break label$4
           }
          }
          $0_1 = HEAP32[24392] + $5_1 | 0;
          HEAP32[24392] = $0_1;
          if (HEAPU32[24393] < $0_1 >>> 0) {
           HEAP32[24393] = $0_1
          }
          label$59 : {
           $4_1 = HEAP32[24290];
           if ($4_1) {
            $0_1 = 97584;
            while (1) {
             $1_1 = HEAP32[$0_1 >> 2];
             $3 = HEAP32[$0_1 + 4 >> 2];
             if (($1_1 + $3 | 0) == ($2_1 | 0)) {
              break label$59
             }
             $0_1 = HEAP32[$0_1 + 8 >> 2];
             if ($0_1) {
              continue
             }
             break;
            };
            break label$6;
           }
           $0_1 = HEAP32[24288];
           if (!(!!$0_1 & $0_1 >>> 0 <= $2_1 >>> 0)) {
            HEAP32[24288] = $2_1
           }
           $0_1 = 0;
           HEAP32[24397] = $5_1;
           HEAP32[24396] = $2_1;
           HEAP32[24292] = -1;
           HEAP32[24293] = HEAP32[24402];
           HEAP32[24399] = 0;
           while (1) {
            $1_1 = $0_1 << 3;
            $3 = $1_1 + 97176 | 0;
            HEAP32[$1_1 + 97184 >> 2] = $3;
            HEAP32[$1_1 + 97188 >> 2] = $3;
            $0_1 = $0_1 + 1 | 0;
            if (($0_1 | 0) != 32) {
             continue
            }
            break;
           };
           $0_1 = $5_1 - 40 | 0;
           $1_1 = $2_1 + 8 & 7 ? -8 - $2_1 & 7 : 0;
           $3 = $0_1 - $1_1 | 0;
           HEAP32[24287] = $3;
           $1_1 = $1_1 + $2_1 | 0;
           HEAP32[24290] = $1_1;
           HEAP32[$1_1 + 4 >> 2] = $3 | 1;
           HEAP32[($0_1 + $2_1 | 0) + 4 >> 2] = 40;
           HEAP32[24291] = HEAP32[24406];
           break label$5;
          }
          if (HEAPU8[$0_1 + 12 | 0] & 8 | $1_1 >>> 0 > $4_1 >>> 0 | $2_1 >>> 0 <= $4_1 >>> 0) {
           break label$6
          }
          HEAP32[$0_1 + 4 >> 2] = $3 + $5_1;
          $0_1 = $4_1 + 8 & 7 ? -8 - $4_1 & 7 : 0;
          $1_1 = $0_1 + $4_1 | 0;
          HEAP32[24290] = $1_1;
          $2_1 = HEAP32[24287] + $5_1 | 0;
          $0_1 = $2_1 - $0_1 | 0;
          HEAP32[24287] = $0_1;
          HEAP32[$1_1 + 4 >> 2] = $0_1 | 1;
          HEAP32[($2_1 + $4_1 | 0) + 4 >> 2] = 40;
          HEAP32[24291] = HEAP32[24406];
          break label$5;
         }
         $3 = 0;
         break label$2;
        }
        $2_1 = 0;
        break label$3;
       }
       if ($2_1 >>> 0 < HEAPU32[24288]) {
        HEAP32[24288] = $2_1
       }
       $1_1 = $2_1 + $5_1 | 0;
       $0_1 = 97584;
       label$66 : {
        label$67 : {
         label$68 : {
          label$69 : {
           label$70 : {
            label$71 : {
             while (1) {
              if (HEAP32[$0_1 >> 2] != ($1_1 | 0)) {
               $0_1 = HEAP32[$0_1 + 8 >> 2];
               if ($0_1) {
                continue
               }
               break label$71;
              }
              break;
             };
             if (!(HEAPU8[$0_1 + 12 | 0] & 8)) {
              break label$70
             }
            }
            $0_1 = 97584;
            while (1) {
             $1_1 = HEAP32[$0_1 >> 2];
             if ($4_1 >>> 0 >= $1_1 >>> 0) {
              $3 = $1_1 + HEAP32[$0_1 + 4 >> 2] | 0;
              if ($3 >>> 0 > $4_1 >>> 0) {
               break label$69
              }
             }
             $0_1 = HEAP32[$0_1 + 8 >> 2];
             continue;
            };
           }
           HEAP32[$0_1 >> 2] = $2_1;
           HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] + $5_1;
           $7_1 = ($2_1 + 8 & 7 ? -8 - $2_1 & 7 : 0) + $2_1 | 0;
           HEAP32[$7_1 + 4 >> 2] = $6_1 | 3;
           $5_1 = $1_1 + ($1_1 + 8 & 7 ? -8 - $1_1 & 7 : 0) | 0;
           $6_1 = $6_1 + $7_1 | 0;
           $0_1 = $5_1 - $6_1 | 0;
           if (($4_1 | 0) == ($5_1 | 0)) {
            HEAP32[24290] = $6_1;
            $0_1 = HEAP32[24287] + $0_1 | 0;
            HEAP32[24287] = $0_1;
            HEAP32[$6_1 + 4 >> 2] = $0_1 | 1;
            break label$67;
           }
           if (($5_1 | 0) == HEAP32[24289]) {
            HEAP32[24289] = $6_1;
            $0_1 = HEAP32[24286] + $0_1 | 0;
            HEAP32[24286] = $0_1;
            HEAP32[$6_1 + 4 >> 2] = $0_1 | 1;
            HEAP32[$0_1 + $6_1 >> 2] = $0_1;
            break label$67;
           }
           $4_1 = HEAP32[$5_1 + 4 >> 2];
           if (($4_1 & 3) == 1) {
            $9 = $4_1 & -8;
            label$79 : {
             if ($4_1 >>> 0 <= 255) {
              $1_1 = HEAP32[$5_1 + 8 >> 2];
              $2_1 = HEAP32[$5_1 + 12 >> 2];
              if (($1_1 | 0) == ($2_1 | 0)) {
               HEAP32[24284] = HEAP32[24284] & __wasm_rotl_i32($4_1 >>> 3 | 0);
               break label$79;
              }
              HEAP32[$1_1 + 12 >> 2] = $2_1;
              HEAP32[$2_1 + 8 >> 2] = $1_1;
              break label$79;
             }
             $8 = HEAP32[$5_1 + 24 >> 2];
             $2_1 = HEAP32[$5_1 + 12 >> 2];
             label$82 : {
              if (($5_1 | 0) != ($2_1 | 0)) {
               $1_1 = HEAP32[$5_1 + 8 >> 2];
               HEAP32[$1_1 + 12 >> 2] = $2_1;
               HEAP32[$2_1 + 8 >> 2] = $1_1;
               break label$82;
              }
              label$84 : {
               $4_1 = $5_1 + 20 | 0;
               $1_1 = HEAP32[$4_1 >> 2];
               if ($1_1) {
                break label$84
               }
               $4_1 = $5_1 + 16 | 0;
               $1_1 = HEAP32[$4_1 >> 2];
               if ($1_1) {
                break label$84
               }
               $2_1 = 0;
               break label$82;
              }
              while (1) {
               $3 = $4_1;
               $2_1 = $1_1;
               $4_1 = $2_1 + 20 | 0;
               $1_1 = HEAP32[$4_1 >> 2];
               if ($1_1) {
                continue
               }
               $4_1 = $2_1 + 16 | 0;
               $1_1 = HEAP32[$2_1 + 16 >> 2];
               if ($1_1) {
                continue
               }
               break;
              };
              HEAP32[$3 >> 2] = 0;
             }
             if (!$8) {
              break label$79
             }
             $1_1 = HEAP32[$5_1 + 28 >> 2];
             $3 = ($1_1 << 2) + 97440 | 0;
             label$86 : {
              if (($5_1 | 0) == HEAP32[$3 >> 2]) {
               HEAP32[$3 >> 2] = $2_1;
               if ($2_1) {
                break label$86
               }
               HEAP32[24285] = HEAP32[24285] & __wasm_rotl_i32($1_1);
               break label$79;
              }
              HEAP32[$8 + (HEAP32[$8 + 16 >> 2] == ($5_1 | 0) ? 16 : 20) >> 2] = $2_1;
              if (!$2_1) {
               break label$79
              }
             }
             HEAP32[$2_1 + 24 >> 2] = $8;
             $1_1 = HEAP32[$5_1 + 16 >> 2];
             if ($1_1) {
              HEAP32[$2_1 + 16 >> 2] = $1_1;
              HEAP32[$1_1 + 24 >> 2] = $2_1;
             }
             $1_1 = HEAP32[$5_1 + 20 >> 2];
             if (!$1_1) {
              break label$79
             }
             HEAP32[$2_1 + 20 >> 2] = $1_1;
             HEAP32[$1_1 + 24 >> 2] = $2_1;
            }
            $5_1 = $5_1 + $9 | 0;
            $4_1 = HEAP32[$5_1 + 4 >> 2];
            $0_1 = $0_1 + $9 | 0;
           }
           HEAP32[$5_1 + 4 >> 2] = $4_1 & -2;
           HEAP32[$6_1 + 4 >> 2] = $0_1 | 1;
           HEAP32[$0_1 + $6_1 >> 2] = $0_1;
           if ($0_1 >>> 0 <= 255) {
            $1_1 = ($0_1 & -8) + 97176 | 0;
            $2_1 = HEAP32[24284];
            $0_1 = 1 << ($0_1 >>> 3);
            label$90 : {
             if (!($2_1 & $0_1)) {
              HEAP32[24284] = $0_1 | $2_1;
              $0_1 = $1_1;
              break label$90;
             }
             $0_1 = HEAP32[$1_1 + 8 >> 2];
            }
            HEAP32[$1_1 + 8 >> 2] = $6_1;
            HEAP32[$0_1 + 12 >> 2] = $6_1;
            HEAP32[$6_1 + 12 >> 2] = $1_1;
            HEAP32[$6_1 + 8 >> 2] = $0_1;
            break label$67;
           }
           $4_1 = 31;
           if ($0_1 >>> 0 <= 16777215) {
            $1_1 = Math_clz32($0_1 >>> 8 | 0);
            $4_1 = (($0_1 >>> 38 - $1_1 & 1) - ($1_1 << 1) | 0) + 62 | 0;
           }
           HEAP32[$6_1 + 28 >> 2] = $4_1;
           HEAP32[$6_1 + 16 >> 2] = 0;
           HEAP32[$6_1 + 20 >> 2] = 0;
           $1_1 = ($4_1 << 2) + 97440 | 0;
           $2_1 = HEAP32[24285];
           $3 = 1 << $4_1;
           label$93 : {
            if (!($2_1 & $3)) {
             HEAP32[24285] = $2_1 | $3;
             HEAP32[$1_1 >> 2] = $6_1;
             break label$93;
            }
            $4_1 = $0_1 << (($4_1 | 0) != 31 ? 25 - ($4_1 >>> 1 | 0) | 0 : 0);
            $2_1 = HEAP32[$1_1 >> 2];
            while (1) {
             $1_1 = $2_1;
             if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($0_1 | 0)) {
              break label$68
             }
             $2_1 = $4_1 >>> 29 | 0;
             $4_1 = $4_1 << 1;
             $3 = ($1_1 + ($2_1 & 4) | 0) + 16 | 0;
             $2_1 = HEAP32[$3 >> 2];
             if ($2_1) {
              continue
             }
             break;
            };
            HEAP32[$3 >> 2] = $6_1;
           }
           HEAP32[$6_1 + 24 >> 2] = $1_1;
           HEAP32[$6_1 + 12 >> 2] = $6_1;
           HEAP32[$6_1 + 8 >> 2] = $6_1;
           break label$67;
          }
          $0_1 = $5_1 - 40 | 0;
          $1_1 = $2_1 + 8 & 7 ? -8 - $2_1 & 7 : 0;
          $8 = $0_1 - $1_1 | 0;
          HEAP32[24287] = $8;
          $1_1 = $1_1 + $2_1 | 0;
          HEAP32[24290] = $1_1;
          HEAP32[$1_1 + 4 >> 2] = $8 | 1;
          HEAP32[($0_1 + $2_1 | 0) + 4 >> 2] = 40;
          HEAP32[24291] = HEAP32[24406];
          $0_1 = ($3 + ($3 - 39 & 7 ? 39 - $3 & 7 : 0) | 0) - 47 | 0;
          $1_1 = $0_1 >>> 0 < $4_1 + 16 >>> 0 ? $4_1 : $0_1;
          HEAP32[$1_1 + 4 >> 2] = 27;
          $0_1 = HEAP32[24399];
          $8 = $1_1 + 16 | 0;
          HEAP32[$8 >> 2] = HEAP32[24398];
          HEAP32[$8 + 4 >> 2] = $0_1;
          $0_1 = HEAP32[24397];
          HEAP32[$1_1 + 8 >> 2] = HEAP32[24396];
          HEAP32[$1_1 + 12 >> 2] = $0_1;
          HEAP32[24398] = $1_1 + 8;
          HEAP32[24397] = $5_1;
          HEAP32[24396] = $2_1;
          HEAP32[24399] = 0;
          $0_1 = $1_1 + 24 | 0;
          while (1) {
           HEAP32[$0_1 + 4 >> 2] = 7;
           $2_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($2_1 >>> 0 < $3 >>> 0) {
            continue
           }
           break;
          };
          if (($1_1 | 0) == ($4_1 | 0)) {
           break label$5
          }
          HEAP32[$1_1 + 4 >> 2] = HEAP32[$1_1 + 4 >> 2] & -2;
          $2_1 = $1_1 - $4_1 | 0;
          HEAP32[$4_1 + 4 >> 2] = $2_1 | 1;
          HEAP32[$1_1 >> 2] = $2_1;
          if ($2_1 >>> 0 <= 255) {
           $0_1 = ($2_1 & -8) + 97176 | 0;
           $1_1 = HEAP32[24284];
           $2_1 = 1 << ($2_1 >>> 3);
           label$98 : {
            if (!($1_1 & $2_1)) {
             HEAP32[24284] = $1_1 | $2_1;
             $1_1 = $0_1;
             break label$98;
            }
            $1_1 = HEAP32[$0_1 + 8 >> 2];
           }
           HEAP32[$0_1 + 8 >> 2] = $4_1;
           HEAP32[$1_1 + 12 >> 2] = $4_1;
           HEAP32[$4_1 + 12 >> 2] = $0_1;
           HEAP32[$4_1 + 8 >> 2] = $1_1;
           break label$5;
          }
          $0_1 = 31;
          if ($2_1 >>> 0 <= 16777215) {
           $0_1 = Math_clz32($2_1 >>> 8 | 0);
           $0_1 = (($2_1 >>> 38 - $0_1 & 1) - ($0_1 << 1) | 0) + 62 | 0;
          }
          HEAP32[$4_1 + 28 >> 2] = $0_1;
          HEAP32[$4_1 + 16 >> 2] = 0;
          HEAP32[$4_1 + 20 >> 2] = 0;
          $1_1 = ($0_1 << 2) + 97440 | 0;
          $3 = HEAP32[24285];
          $5_1 = 1 << $0_1;
          label$101 : {
           if (!($3 & $5_1)) {
            HEAP32[24285] = $3 | $5_1;
            HEAP32[$1_1 >> 2] = $4_1;
            break label$101;
           }
           $0_1 = $2_1 << (($0_1 | 0) != 31 ? 25 - ($0_1 >>> 1 | 0) | 0 : 0);
           $3 = HEAP32[$1_1 >> 2];
           while (1) {
            $1_1 = $3;
            if (($2_1 | 0) == (HEAP32[$1_1 + 4 >> 2] & -8)) {
             break label$66
            }
            $3 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1;
            $5_1 = ($1_1 + ($3 & 4) | 0) + 16 | 0;
            $3 = HEAP32[$5_1 >> 2];
            if ($3) {
             continue
            }
            break;
           };
           HEAP32[$5_1 >> 2] = $4_1;
          }
          HEAP32[$4_1 + 24 >> 2] = $1_1;
          HEAP32[$4_1 + 12 >> 2] = $4_1;
          HEAP32[$4_1 + 8 >> 2] = $4_1;
          break label$5;
         }
         $0_1 = HEAP32[$1_1 + 8 >> 2];
         HEAP32[$0_1 + 12 >> 2] = $6_1;
         HEAP32[$1_1 + 8 >> 2] = $6_1;
         HEAP32[$6_1 + 24 >> 2] = 0;
         HEAP32[$6_1 + 12 >> 2] = $1_1;
         HEAP32[$6_1 + 8 >> 2] = $0_1;
        }
        $0_1 = $7_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[$1_1 + 8 >> 2];
       HEAP32[$0_1 + 12 >> 2] = $4_1;
       HEAP32[$1_1 + 8 >> 2] = $4_1;
       HEAP32[$4_1 + 24 >> 2] = 0;
       HEAP32[$4_1 + 12 >> 2] = $1_1;
       HEAP32[$4_1 + 8 >> 2] = $0_1;
      }
      $0_1 = HEAP32[24287];
      if ($0_1 >>> 0 <= $6_1 >>> 0) {
       break label$4
      }
      $1_1 = $0_1 - $6_1 | 0;
      HEAP32[24287] = $1_1;
      $0_1 = HEAP32[24290];
      $2_1 = $0_1 + $6_1 | 0;
      HEAP32[24290] = $2_1;
      HEAP32[$2_1 + 4 >> 2] = $1_1 | 1;
      HEAP32[$0_1 + 4 >> 2] = $6_1 | 3;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[23975] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$104 : {
     if (!$7_1) {
      break label$104
     }
     $0_1 = HEAP32[$3 + 28 >> 2];
     $1_1 = ($0_1 << 2) + 97440 | 0;
     label$105 : {
      if (($3 | 0) == HEAP32[$1_1 >> 2]) {
       HEAP32[$1_1 >> 2] = $2_1;
       if ($2_1) {
        break label$105
       }
       $8 = __wasm_rotl_i32($0_1) & $8;
       HEAP32[24285] = $8;
       break label$104;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $2_1;
      if (!$2_1) {
       break label$104
      }
     }
     HEAP32[$2_1 + 24 >> 2] = $7_1;
     $0_1 = HEAP32[$3 + 16 >> 2];
     if ($0_1) {
      HEAP32[$2_1 + 16 >> 2] = $0_1;
      HEAP32[$0_1 + 24 >> 2] = $2_1;
     }
     $0_1 = HEAP32[$3 + 20 >> 2];
     if (!$0_1) {
      break label$104
     }
     HEAP32[$2_1 + 20 >> 2] = $0_1;
     HEAP32[$0_1 + 24 >> 2] = $2_1;
    }
    label$108 : {
     if ($4_1 >>> 0 <= 15) {
      $0_1 = $4_1 + $6_1 | 0;
      HEAP32[$3 + 4 >> 2] = $0_1 | 3;
      $0_1 = $0_1 + $3 | 0;
      HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
      break label$108;
     }
     HEAP32[$3 + 4 >> 2] = $6_1 | 3;
     $2_1 = $3 + $6_1 | 0;
     HEAP32[$2_1 + 4 >> 2] = $4_1 | 1;
     HEAP32[$2_1 + $4_1 >> 2] = $4_1;
     if ($4_1 >>> 0 <= 255) {
      $0_1 = ($4_1 & -8) + 97176 | 0;
      $1_1 = HEAP32[24284];
      $4_1 = 1 << ($4_1 >>> 3);
      label$111 : {
       if (!($1_1 & $4_1)) {
        HEAP32[24284] = $1_1 | $4_1;
        $1_1 = $0_1;
        break label$111;
       }
       $1_1 = HEAP32[$0_1 + 8 >> 2];
      }
      HEAP32[$0_1 + 8 >> 2] = $2_1;
      HEAP32[$1_1 + 12 >> 2] = $2_1;
      HEAP32[$2_1 + 12 >> 2] = $0_1;
      HEAP32[$2_1 + 8 >> 2] = $1_1;
      break label$108;
     }
     $0_1 = 31;
     if ($4_1 >>> 0 <= 16777215) {
      $0_1 = Math_clz32($4_1 >>> 8 | 0);
      $0_1 = (($4_1 >>> 38 - $0_1 & 1) - ($0_1 << 1) | 0) + 62 | 0;
     }
     HEAP32[$2_1 + 28 >> 2] = $0_1;
     HEAP32[$2_1 + 16 >> 2] = 0;
     HEAP32[$2_1 + 20 >> 2] = 0;
     $1_1 = ($0_1 << 2) + 97440 | 0;
     label$114 : {
      $5_1 = 1 << $0_1;
      label$115 : {
       if (!($5_1 & $8)) {
        HEAP32[24285] = $5_1 | $8;
        HEAP32[$1_1 >> 2] = $2_1;
        break label$115;
       }
       $0_1 = $4_1 << (($0_1 | 0) != 31 ? 25 - ($0_1 >>> 1 | 0) | 0 : 0);
       $6_1 = HEAP32[$1_1 >> 2];
       while (1) {
        $1_1 = $6_1;
        if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($4_1 | 0)) {
         break label$114
        }
        $5_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1;
        $5_1 = ($1_1 + ($5_1 & 4) | 0) + 16 | 0;
        $6_1 = HEAP32[$5_1 >> 2];
        if ($6_1) {
         continue
        }
        break;
       };
       HEAP32[$5_1 >> 2] = $2_1;
      }
      HEAP32[$2_1 + 24 >> 2] = $1_1;
      HEAP32[$2_1 + 12 >> 2] = $2_1;
      HEAP32[$2_1 + 8 >> 2] = $2_1;
      break label$108;
     }
     $0_1 = HEAP32[$1_1 + 8 >> 2];
     HEAP32[$0_1 + 12 >> 2] = $2_1;
     HEAP32[$1_1 + 8 >> 2] = $2_1;
     HEAP32[$2_1 + 24 >> 2] = 0;
     HEAP32[$2_1 + 12 >> 2] = $1_1;
     HEAP32[$2_1 + 8 >> 2] = $0_1;
    }
    $0_1 = $3 + 8 | 0;
    break label$1;
   }
   label$118 : {
    if (!$9) {
     break label$118
    }
    $0_1 = HEAP32[$2_1 + 28 >> 2];
    $1_1 = ($0_1 << 2) + 97440 | 0;
    label$119 : {
     if (($2_1 | 0) == HEAP32[$1_1 >> 2]) {
      HEAP32[$1_1 >> 2] = $3;
      if ($3) {
       break label$119
      }
      HEAP32[24285] = __wasm_rotl_i32($0_1) & $10_1;
      break label$118;
     }
     HEAP32[(HEAP32[$9 + 16 >> 2] == ($2_1 | 0) ? 16 : 20) + $9 >> 2] = $3;
     if (!$3) {
      break label$118
     }
    }
    HEAP32[$3 + 24 >> 2] = $9;
    $0_1 = HEAP32[$2_1 + 16 >> 2];
    if ($0_1) {
     HEAP32[$3 + 16 >> 2] = $0_1;
     HEAP32[$0_1 + 24 >> 2] = $3;
    }
    $0_1 = HEAP32[$2_1 + 20 >> 2];
    if (!$0_1) {
     break label$118
    }
    HEAP32[$3 + 20 >> 2] = $0_1;
    HEAP32[$0_1 + 24 >> 2] = $3;
   }
   label$122 : {
    if ($4_1 >>> 0 <= 15) {
     $0_1 = $4_1 + $6_1 | 0;
     HEAP32[$2_1 + 4 >> 2] = $0_1 | 3;
     $0_1 = $0_1 + $2_1 | 0;
     HEAP32[$0_1 + 4 >> 2] = HEAP32[$0_1 + 4 >> 2] | 1;
     break label$122;
    }
    HEAP32[$2_1 + 4 >> 2] = $6_1 | 3;
    $3 = $2_1 + $6_1 | 0;
    HEAP32[$3 + 4 >> 2] = $4_1 | 1;
    HEAP32[$3 + $4_1 >> 2] = $4_1;
    if ($7_1) {
     $0_1 = ($7_1 & -8) + 97176 | 0;
     $1_1 = HEAP32[24289];
     $6_1 = 1 << ($7_1 >>> 3);
     label$125 : {
      if (!($6_1 & $5_1)) {
       HEAP32[24284] = $6_1 | $5_1;
       $5_1 = $0_1;
       break label$125;
      }
      $5_1 = HEAP32[$0_1 + 8 >> 2];
     }
     HEAP32[$0_1 + 8 >> 2] = $1_1;
     HEAP32[$5_1 + 12 >> 2] = $1_1;
     HEAP32[$1_1 + 12 >> 2] = $0_1;
     HEAP32[$1_1 + 8 >> 2] = $5_1;
    }
    HEAP32[24289] = $3;
    HEAP32[24286] = $4_1;
   }
   $0_1 = $2_1 + 8 | 0;
  }
  global$0 = $11_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $1756($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $3 = $0_1 - 8 | 0;
   $1_1 = HEAP32[$0_1 - 4 >> 2];
   $0_1 = $1_1 & -8;
   $5_1 = $3 + $0_1 | 0;
   label$2 : {
    if ($1_1 & 1) {
     break label$2
    }
    if (!($1_1 & 3)) {
     break label$1
    }
    $1_1 = HEAP32[$3 >> 2];
    $3 = $3 - $1_1 | 0;
    if ($3 >>> 0 < HEAPU32[24288]) {
     break label$1
    }
    $0_1 = $0_1 + $1_1 | 0;
    if (($3 | 0) != HEAP32[24289]) {
     if ($1_1 >>> 0 <= 255) {
      $1_1 = $1_1 >>> 3 | 0;
      $4_1 = HEAP32[$3 + 8 >> 2];
      $2_1 = HEAP32[$3 + 12 >> 2];
      if (($4_1 | 0) == ($2_1 | 0)) {
       HEAP32[24284] = HEAP32[24284] & __wasm_rotl_i32($1_1);
       break label$2;
      }
      HEAP32[$4_1 + 12 >> 2] = $2_1;
      HEAP32[$2_1 + 8 >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[$3 + 24 >> 2];
     $1_1 = HEAP32[$3 + 12 >> 2];
     label$6 : {
      if (($3 | 0) != ($1_1 | 0)) {
       $2_1 = HEAP32[$3 + 8 >> 2];
       HEAP32[$2_1 + 12 >> 2] = $1_1;
       HEAP32[$1_1 + 8 >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $4_1 = $3 + 20 | 0;
       $2_1 = HEAP32[$4_1 >> 2];
       if ($2_1) {
        break label$8
       }
       $4_1 = $3 + 16 | 0;
       $2_1 = HEAP32[$4_1 >> 2];
       if ($2_1) {
        break label$8
       }
       $1_1 = 0;
       break label$6;
      }
      while (1) {
       $6_1 = $4_1;
       $1_1 = $2_1;
       $4_1 = $1_1 + 20 | 0;
       $2_1 = HEAP32[$4_1 >> 2];
       if ($2_1) {
        continue
       }
       $4_1 = $1_1 + 16 | 0;
       $2_1 = HEAP32[$1_1 + 16 >> 2];
       if ($2_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     $4_1 = HEAP32[$3 + 28 >> 2];
     $2_1 = ($4_1 << 2) + 97440 | 0;
     label$10 : {
      if (($3 | 0) == HEAP32[$2_1 >> 2]) {
       HEAP32[$2_1 >> 2] = $1_1;
       if ($1_1) {
        break label$10
       }
       HEAP32[24285] = HEAP32[24285] & __wasm_rotl_i32($4_1);
       break label$2;
      }
      HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($3 | 0) ? 16 : 20) >> 2] = $1_1;
      if (!$1_1) {
       break label$2
      }
     }
     HEAP32[$1_1 + 24 >> 2] = $7_1;
     $2_1 = HEAP32[$3 + 16 >> 2];
     if ($2_1) {
      HEAP32[$1_1 + 16 >> 2] = $2_1;
      HEAP32[$2_1 + 24 >> 2] = $1_1;
     }
     $2_1 = HEAP32[$3 + 20 >> 2];
     if (!$2_1) {
      break label$2
     }
     HEAP32[$1_1 + 20 >> 2] = $2_1;
     HEAP32[$2_1 + 24 >> 2] = $1_1;
     break label$2;
    }
    $1_1 = HEAP32[$5_1 + 4 >> 2];
    if (($1_1 & 3) != 3) {
     break label$2
    }
    HEAP32[24286] = $0_1;
    HEAP32[$5_1 + 4 >> 2] = $1_1 & -2;
    HEAP32[$3 + 4 >> 2] = $0_1 | 1;
    HEAP32[$0_1 + $3 >> 2] = $0_1;
    return;
   }
   if ($3 >>> 0 >= $5_1 >>> 0) {
    break label$1
   }
   $1_1 = HEAP32[$5_1 + 4 >> 2];
   if (!($1_1 & 1)) {
    break label$1
   }
   label$13 : {
    if (!($1_1 & 2)) {
     if (HEAP32[24290] == ($5_1 | 0)) {
      HEAP32[24290] = $3;
      $0_1 = HEAP32[24287] + $0_1 | 0;
      HEAP32[24287] = $0_1;
      HEAP32[$3 + 4 >> 2] = $0_1 | 1;
      if (HEAP32[24289] != ($3 | 0)) {
       break label$1
      }
      HEAP32[24286] = 0;
      HEAP32[24289] = 0;
      return;
     }
     if (HEAP32[24289] == ($5_1 | 0)) {
      HEAP32[24289] = $3;
      $0_1 = HEAP32[24286] + $0_1 | 0;
      HEAP32[24286] = $0_1;
      HEAP32[$3 + 4 >> 2] = $0_1 | 1;
      HEAP32[$0_1 + $3 >> 2] = $0_1;
      return;
     }
     $0_1 = ($1_1 & -8) + $0_1 | 0;
     label$17 : {
      if ($1_1 >>> 0 <= 255) {
       $1_1 = $1_1 >>> 3 | 0;
       $4_1 = HEAP32[$5_1 + 8 >> 2];
       $2_1 = HEAP32[$5_1 + 12 >> 2];
       if (($4_1 | 0) == ($2_1 | 0)) {
        HEAP32[24284] = HEAP32[24284] & __wasm_rotl_i32($1_1);
        break label$17;
       }
       HEAP32[$4_1 + 12 >> 2] = $2_1;
       HEAP32[$2_1 + 8 >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $1_1 = HEAP32[$5_1 + 12 >> 2];
      label$20 : {
       if (($1_1 | 0) != ($5_1 | 0)) {
        $2_1 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$2_1 + 12 >> 2] = $1_1;
        HEAP32[$1_1 + 8 >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $4_1 = $5_1 + 20 | 0;
        $2_1 = HEAP32[$4_1 >> 2];
        if ($2_1) {
         break label$22
        }
        $4_1 = $5_1 + 16 | 0;
        $2_1 = HEAP32[$4_1 >> 2];
        if ($2_1) {
         break label$22
        }
        $1_1 = 0;
        break label$20;
       }
       while (1) {
        $6_1 = $4_1;
        $1_1 = $2_1;
        $4_1 = $1_1 + 20 | 0;
        $2_1 = HEAP32[$4_1 >> 2];
        if ($2_1) {
         continue
        }
        $4_1 = $1_1 + 16 | 0;
        $2_1 = HEAP32[$1_1 + 16 >> 2];
        if ($2_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      $4_1 = HEAP32[$5_1 + 28 >> 2];
      $2_1 = ($4_1 << 2) + 97440 | 0;
      label$24 : {
       if (HEAP32[$2_1 >> 2] == ($5_1 | 0)) {
        HEAP32[$2_1 >> 2] = $1_1;
        if ($1_1) {
         break label$24
        }
        HEAP32[24285] = HEAP32[24285] & __wasm_rotl_i32($4_1);
        break label$17;
       }
       HEAP32[$7_1 + (($5_1 | 0) == HEAP32[$7_1 + 16 >> 2] ? 16 : 20) >> 2] = $1_1;
       if (!$1_1) {
        break label$17
       }
      }
      HEAP32[$1_1 + 24 >> 2] = $7_1;
      $2_1 = HEAP32[$5_1 + 16 >> 2];
      if ($2_1) {
       HEAP32[$1_1 + 16 >> 2] = $2_1;
       HEAP32[$2_1 + 24 >> 2] = $1_1;
      }
      $2_1 = HEAP32[$5_1 + 20 >> 2];
      if (!$2_1) {
       break label$17
      }
      HEAP32[$1_1 + 20 >> 2] = $2_1;
      HEAP32[$2_1 + 24 >> 2] = $1_1;
     }
     HEAP32[$3 + 4 >> 2] = $0_1 | 1;
     HEAP32[$0_1 + $3 >> 2] = $0_1;
     if (HEAP32[24289] != ($3 | 0)) {
      break label$13
     }
     HEAP32[24286] = $0_1;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $1_1 & -2;
    HEAP32[$3 + 4 >> 2] = $0_1 | 1;
    HEAP32[$0_1 + $3 >> 2] = $0_1;
   }
   if ($0_1 >>> 0 <= 255) {
    $1_1 = ($0_1 & -8) + 97176 | 0;
    $2_1 = HEAP32[24284];
    $0_1 = 1 << ($0_1 >>> 3);
    label$28 : {
     if (!($2_1 & $0_1)) {
      HEAP32[24284] = $0_1 | $2_1;
      $0_1 = $1_1;
      break label$28;
     }
     $0_1 = HEAP32[$1_1 + 8 >> 2];
    }
    HEAP32[$1_1 + 8 >> 2] = $3;
    HEAP32[$0_1 + 12 >> 2] = $3;
    HEAP32[$3 + 12 >> 2] = $1_1;
    HEAP32[$3 + 8 >> 2] = $0_1;
    return;
   }
   $4_1 = 31;
   if ($0_1 >>> 0 <= 16777215) {
    $1_1 = Math_clz32($0_1 >>> 8 | 0);
    $4_1 = (($0_1 >>> 38 - $1_1 & 1) - ($1_1 << 1) | 0) + 62 | 0;
   }
   HEAP32[$3 + 28 >> 2] = $4_1;
   HEAP32[$3 + 16 >> 2] = 0;
   HEAP32[$3 + 20 >> 2] = 0;
   $6_1 = ($4_1 << 2) + 97440 | 0;
   label$31 : {
    label$32 : {
     $2_1 = HEAP32[24285];
     $1_1 = 1 << $4_1;
     label$33 : {
      if (!($2_1 & $1_1)) {
       HEAP32[24285] = $1_1 | $2_1;
       HEAP32[$6_1 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $6_1;
       break label$33;
      }
      $4_1 = $0_1 << (($4_1 | 0) != 31 ? 25 - ($4_1 >>> 1 | 0) | 0 : 0);
      $1_1 = HEAP32[$6_1 >> 2];
      while (1) {
       $2_1 = $1_1;
       if ((HEAP32[$1_1 + 4 >> 2] & -8) == ($0_1 | 0)) {
        break label$32
       }
       $1_1 = $4_1 >>> 29 | 0;
       $4_1 = $4_1 << 1;
       $6_1 = ($2_1 + ($1_1 & 4) | 0) + 16 | 0;
       $1_1 = HEAP32[$6_1 >> 2];
       if ($1_1) {
        continue
       }
       break;
      };
      HEAP32[$6_1 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2_1;
     }
     HEAP32[$3 + 12 >> 2] = $3;
     HEAP32[$3 + 8 >> 2] = $3;
     break label$31;
    }
    $0_1 = HEAP32[$2_1 + 8 >> 2];
    HEAP32[$0_1 + 12 >> 2] = $3;
    HEAP32[$2_1 + 8 >> 2] = $3;
    HEAP32[$3 + 24 >> 2] = 0;
    HEAP32[$3 + 12 >> 2] = $2_1;
    HEAP32[$3 + 8 >> 2] = $0_1;
   }
   $0_1 = HEAP32[24292] - 1 | 0;
   HEAP32[24292] = $0_1 ? $0_1 : -1;
  }
 }
 
 function $1757($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0;
  if (!$0_1) {
   return $1755($1_1)
  }
  if ($1_1 >>> 0 >= 4294967232) {
   HEAP32[23975] = 48;
   return 0;
  }
  $5_1 = $1_1 >>> 0 < 11 ? 16 : $1_1 + 11 & -8;
  $4_1 = $0_1 - 8 | 0;
  $9 = HEAP32[$4_1 + 4 >> 2];
  $3 = $9 & -8;
  __inlined_func$1758 : {
   label$1 : {
    if (!($9 & 3)) {
     $2_1 = 0;
     if ($5_1 >>> 0 < 256) {
      break __inlined_func$1758
     }
     if ($5_1 + 4 >>> 0 <= $3 >>> 0) {
      $2_1 = $4_1;
      if ($3 - $5_1 >>> 0 <= HEAP32[24404] << 1 >>> 0) {
       break label$1
      }
     }
     $2_1 = 0;
     break __inlined_func$1758;
    }
    $6_1 = $3 + $4_1 | 0;
    label$5 : {
     if ($3 >>> 0 >= $5_1 >>> 0) {
      $3 = $3 - $5_1 | 0;
      if ($3 >>> 0 < 16) {
       break label$5
      }
      HEAP32[$4_1 + 4 >> 2] = $9 & 1 | $5_1 | 2;
      $2_1 = $4_1 + $5_1 | 0;
      HEAP32[$2_1 + 4 >> 2] = $3 | 3;
      HEAP32[$6_1 + 4 >> 2] = HEAP32[$6_1 + 4 >> 2] | 1;
      $1762($2_1, $3);
      break label$5;
     }
     if (($6_1 | 0) == HEAP32[24290]) {
      $7_1 = $3 + HEAP32[24287] | 0;
      if ($7_1 >>> 0 <= $5_1 >>> 0) {
       break label$1
      }
      HEAP32[$4_1 + 4 >> 2] = $9 & 1 | $5_1 | 2;
      $3 = $4_1 + $5_1 | 0;
      $2_1 = $7_1 - $5_1 | 0;
      HEAP32[$3 + 4 >> 2] = $2_1 | 1;
      HEAP32[24287] = $2_1;
      HEAP32[24290] = $3;
      break label$5;
     }
     if (($6_1 | 0) == HEAP32[24289]) {
      $3 = $3 + HEAP32[24286] | 0;
      if ($3 >>> 0 < $5_1 >>> 0) {
       break label$1
      }
      $2_1 = $3 - $5_1 | 0;
      label$9 : {
       if ($2_1 >>> 0 >= 16) {
        HEAP32[$4_1 + 4 >> 2] = $9 & 1 | $5_1 | 2;
        $7_1 = $4_1 + $5_1 | 0;
        HEAP32[$7_1 + 4 >> 2] = $2_1 | 1;
        $3 = $3 + $4_1 | 0;
        HEAP32[$3 >> 2] = $2_1;
        HEAP32[$3 + 4 >> 2] = HEAP32[$3 + 4 >> 2] & -2;
        break label$9;
       }
       HEAP32[$4_1 + 4 >> 2] = $3 | $9 & 1 | 2;
       $2_1 = $3 + $4_1 | 0;
       HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 1;
       $2_1 = 0;
      }
      HEAP32[24289] = $7_1;
      HEAP32[24286] = $2_1;
      break label$5;
     }
     $7_1 = HEAP32[$6_1 + 4 >> 2];
     if ($7_1 & 2) {
      break label$1
     }
     $10_1 = $3 + ($7_1 & -8) | 0;
     if ($10_1 >>> 0 < $5_1 >>> 0) {
      break label$1
     }
     $12_1 = $10_1 - $5_1 | 0;
     label$11 : {
      if ($7_1 >>> 0 <= 255) {
       $3 = HEAP32[$6_1 + 8 >> 2];
       $2_1 = HEAP32[$6_1 + 12 >> 2];
       if (($3 | 0) == ($2_1 | 0)) {
        HEAP32[24284] = HEAP32[24284] & __wasm_rotl_i32($7_1 >>> 3 | 0);
        break label$11;
       }
       HEAP32[$3 + 12 >> 2] = $2_1;
       HEAP32[$2_1 + 8 >> 2] = $3;
       break label$11;
      }
      $11_1 = HEAP32[$6_1 + 24 >> 2];
      $8 = HEAP32[$6_1 + 12 >> 2];
      label$14 : {
       if (($6_1 | 0) != ($8 | 0)) {
        $2_1 = HEAP32[$6_1 + 8 >> 2];
        HEAP32[$2_1 + 12 >> 2] = $8;
        HEAP32[$8 + 8 >> 2] = $2_1;
        break label$14;
       }
       label$16 : {
        $7_1 = $6_1 + 20 | 0;
        $2_1 = HEAP32[$7_1 >> 2];
        if ($2_1) {
         break label$16
        }
        $7_1 = $6_1 + 16 | 0;
        $2_1 = HEAP32[$7_1 >> 2];
        if ($2_1) {
         break label$16
        }
        $8 = 0;
        break label$14;
       }
       while (1) {
        $3 = $7_1;
        $8 = $2_1;
        $7_1 = $2_1 + 20 | 0;
        $2_1 = HEAP32[$7_1 >> 2];
        if ($2_1) {
         continue
        }
        $7_1 = $8 + 16 | 0;
        $2_1 = HEAP32[$8 + 16 >> 2];
        if ($2_1) {
         continue
        }
        break;
       };
       HEAP32[$3 >> 2] = 0;
      }
      if (!$11_1) {
       break label$11
      }
      $3 = HEAP32[$6_1 + 28 >> 2];
      $2_1 = ($3 << 2) + 97440 | 0;
      label$18 : {
       if (($6_1 | 0) == HEAP32[$2_1 >> 2]) {
        HEAP32[$2_1 >> 2] = $8;
        if ($8) {
         break label$18
        }
        HEAP32[24285] = HEAP32[24285] & __wasm_rotl_i32($3);
        break label$11;
       }
       HEAP32[(HEAP32[$11_1 + 16 >> 2] == ($6_1 | 0) ? 16 : 20) + $11_1 >> 2] = $8;
       if (!$8) {
        break label$11
       }
      }
      HEAP32[$8 + 24 >> 2] = $11_1;
      $2_1 = HEAP32[$6_1 + 16 >> 2];
      if ($2_1) {
       HEAP32[$8 + 16 >> 2] = $2_1;
       HEAP32[$2_1 + 24 >> 2] = $8;
      }
      $2_1 = HEAP32[$6_1 + 20 >> 2];
      if (!$2_1) {
       break label$11
      }
      HEAP32[$8 + 20 >> 2] = $2_1;
      HEAP32[$2_1 + 24 >> 2] = $8;
     }
     if ($12_1 >>> 0 <= 15) {
      HEAP32[$4_1 + 4 >> 2] = $9 & 1 | $10_1 | 2;
      $2_1 = $4_1 + $10_1 | 0;
      HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 1;
      break label$5;
     }
     HEAP32[$4_1 + 4 >> 2] = $9 & 1 | $5_1 | 2;
     $3 = $4_1 + $5_1 | 0;
     HEAP32[$3 + 4 >> 2] = $12_1 | 3;
     $2_1 = $4_1 + $10_1 | 0;
     HEAP32[$2_1 + 4 >> 2] = HEAP32[$2_1 + 4 >> 2] | 1;
     $1762($3, $12_1);
    }
    $2_1 = $4_1;
   }
  }
  if ($2_1) {
   return $2_1 + 8 | 0
  }
  $4_1 = $1755($1_1);
  if (!$4_1) {
   return 0
  }
  $2_1 = HEAP32[$0_1 - 4 >> 2];
  $2_1 = ($2_1 & 3 ? -4 : -8) + ($2_1 & -8) | 0;
  $1602($4_1, $0_1, $1_1 >>> 0 > $2_1 >>> 0 ? $2_1 : $1_1);
  $1756($0_1);
  return $4_1;
 }
 
 function $1762($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = $0_1 + $1_1 | 0;
  $2_1 = HEAP32[$0_1 + 4 >> 2];
  label$1 : {
   label$2 : {
    if ($2_1 & 1) {
     break label$2
    }
    if (!($2_1 & 3)) {
     break label$1
    }
    $2_1 = HEAP32[$0_1 >> 2];
    $1_1 = $2_1 + $1_1 | 0;
    label$3 : {
     $0_1 = $0_1 - $2_1 | 0;
     if (($0_1 | 0) != HEAP32[24289]) {
      if ($2_1 >>> 0 <= 255) {
       $2_1 = $2_1 >>> 3 | 0;
       $4_1 = HEAP32[$0_1 + 8 >> 2];
       $3 = HEAP32[$0_1 + 12 >> 2];
       if (($4_1 | 0) != ($3 | 0)) {
        break label$3
       }
       HEAP32[24284] = HEAP32[24284] & __wasm_rotl_i32($2_1);
       break label$2;
      }
      $7_1 = HEAP32[$0_1 + 24 >> 2];
      $2_1 = HEAP32[$0_1 + 12 >> 2];
      label$6 : {
       if (($0_1 | 0) != ($2_1 | 0)) {
        $3 = HEAP32[$0_1 + 8 >> 2];
        HEAP32[$3 + 12 >> 2] = $2_1;
        HEAP32[$2_1 + 8 >> 2] = $3;
        break label$6;
       }
       label$8 : {
        $4_1 = $0_1 + 20 | 0;
        $3 = HEAP32[$4_1 >> 2];
        if ($3) {
         break label$8
        }
        $4_1 = $0_1 + 16 | 0;
        $3 = HEAP32[$4_1 >> 2];
        if ($3) {
         break label$8
        }
        $2_1 = 0;
        break label$6;
       }
       while (1) {
        $6_1 = $4_1;
        $2_1 = $3;
        $4_1 = $2_1 + 20 | 0;
        $3 = HEAP32[$4_1 >> 2];
        if ($3) {
         continue
        }
        $4_1 = $2_1 + 16 | 0;
        $3 = HEAP32[$2_1 + 16 >> 2];
        if ($3) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$2
      }
      $4_1 = HEAP32[$0_1 + 28 >> 2];
      $3 = ($4_1 << 2) + 97440 | 0;
      label$10 : {
       if (($0_1 | 0) == HEAP32[$3 >> 2]) {
        HEAP32[$3 >> 2] = $2_1;
        if ($2_1) {
         break label$10
        }
        HEAP32[24285] = HEAP32[24285] & __wasm_rotl_i32($4_1);
        break label$2;
       }
       HEAP32[$7_1 + (HEAP32[$7_1 + 16 >> 2] == ($0_1 | 0) ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$2
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7_1;
      $3 = HEAP32[$0_1 + 16 >> 2];
      if ($3) {
       HEAP32[$2_1 + 16 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2_1;
      }
      $3 = HEAP32[$0_1 + 20 >> 2];
      if (!$3) {
       break label$2
      }
      HEAP32[$2_1 + 20 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2_1;
      break label$2;
     }
     $2_1 = HEAP32[$5_1 + 4 >> 2];
     if (($2_1 & 3) != 3) {
      break label$2
     }
     HEAP32[24286] = $1_1;
     HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
     HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
     HEAP32[$5_1 >> 2] = $1_1;
     return;
    }
    HEAP32[$4_1 + 12 >> 2] = $3;
    HEAP32[$3 + 8 >> 2] = $4_1;
   }
   $2_1 = HEAP32[$5_1 + 4 >> 2];
   label$13 : {
    if (!($2_1 & 2)) {
     if (HEAP32[24290] == ($5_1 | 0)) {
      HEAP32[24290] = $0_1;
      $1_1 = HEAP32[24287] + $1_1 | 0;
      HEAP32[24287] = $1_1;
      HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
      if (HEAP32[24289] != ($0_1 | 0)) {
       break label$1
      }
      HEAP32[24286] = 0;
      HEAP32[24289] = 0;
      return;
     }
     if (HEAP32[24289] == ($5_1 | 0)) {
      HEAP32[24289] = $0_1;
      $1_1 = HEAP32[24286] + $1_1 | 0;
      HEAP32[24286] = $1_1;
      HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
      HEAP32[$0_1 + $1_1 >> 2] = $1_1;
      return;
     }
     $1_1 = ($2_1 & -8) + $1_1 | 0;
     label$17 : {
      if ($2_1 >>> 0 <= 255) {
       $2_1 = $2_1 >>> 3 | 0;
       $4_1 = HEAP32[$5_1 + 8 >> 2];
       $3 = HEAP32[$5_1 + 12 >> 2];
       if (($4_1 | 0) == ($3 | 0)) {
        HEAP32[24284] = HEAP32[24284] & __wasm_rotl_i32($2_1);
        break label$17;
       }
       HEAP32[$4_1 + 12 >> 2] = $3;
       HEAP32[$3 + 8 >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[$5_1 + 24 >> 2];
      $2_1 = HEAP32[$5_1 + 12 >> 2];
      label$20 : {
       if (($2_1 | 0) != ($5_1 | 0)) {
        $3 = HEAP32[$5_1 + 8 >> 2];
        HEAP32[$3 + 12 >> 2] = $2_1;
        HEAP32[$2_1 + 8 >> 2] = $3;
        break label$20;
       }
       label$22 : {
        $3 = $5_1 + 20 | 0;
        $4_1 = HEAP32[$3 >> 2];
        if ($4_1) {
         break label$22
        }
        $3 = $5_1 + 16 | 0;
        $4_1 = HEAP32[$3 >> 2];
        if ($4_1) {
         break label$22
        }
        $2_1 = 0;
        break label$20;
       }
       while (1) {
        $6_1 = $3;
        $2_1 = $4_1;
        $3 = $2_1 + 20 | 0;
        $4_1 = HEAP32[$3 >> 2];
        if ($4_1) {
         continue
        }
        $3 = $2_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 + 16 >> 2];
        if ($4_1) {
         continue
        }
        break;
       };
       HEAP32[$6_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      $4_1 = HEAP32[$5_1 + 28 >> 2];
      $3 = ($4_1 << 2) + 97440 | 0;
      label$24 : {
       if (HEAP32[$3 >> 2] == ($5_1 | 0)) {
        HEAP32[$3 >> 2] = $2_1;
        if ($2_1) {
         break label$24
        }
        HEAP32[24285] = HEAP32[24285] & __wasm_rotl_i32($4_1);
        break label$17;
       }
       HEAP32[$7_1 + (($5_1 | 0) == HEAP32[$7_1 + 16 >> 2] ? 16 : 20) >> 2] = $2_1;
       if (!$2_1) {
        break label$17
       }
      }
      HEAP32[$2_1 + 24 >> 2] = $7_1;
      $3 = HEAP32[$5_1 + 16 >> 2];
      if ($3) {
       HEAP32[$2_1 + 16 >> 2] = $3;
       HEAP32[$3 + 24 >> 2] = $2_1;
      }
      $3 = HEAP32[$5_1 + 20 >> 2];
      if (!$3) {
       break label$17
      }
      HEAP32[$2_1 + 20 >> 2] = $3;
      HEAP32[$3 + 24 >> 2] = $2_1;
     }
     HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
     HEAP32[$0_1 + $1_1 >> 2] = $1_1;
     if (HEAP32[24289] != ($0_1 | 0)) {
      break label$13
     }
     HEAP32[24286] = $1_1;
     return;
    }
    HEAP32[$5_1 + 4 >> 2] = $2_1 & -2;
    HEAP32[$0_1 + 4 >> 2] = $1_1 | 1;
    HEAP32[$0_1 + $1_1 >> 2] = $1_1;
   }
   if ($1_1 >>> 0 <= 255) {
    $2_1 = ($1_1 & -8) + 97176 | 0;
    $3 = HEAP32[24284];
    $1_1 = 1 << ($1_1 >>> 3);
    label$28 : {
     if (!($3 & $1_1)) {
      HEAP32[24284] = $1_1 | $3;
      $1_1 = $2_1;
      break label$28;
     }
     $1_1 = HEAP32[$2_1 + 8 >> 2];
    }
    HEAP32[$2_1 + 8 >> 2] = $0_1;
    HEAP32[$1_1 + 12 >> 2] = $0_1;
    HEAP32[$0_1 + 12 >> 2] = $2_1;
    HEAP32[$0_1 + 8 >> 2] = $1_1;
    return;
   }
   $4_1 = 31;
   if ($1_1 >>> 0 <= 16777215) {
    $2_1 = Math_clz32($1_1 >>> 8 | 0);
    $4_1 = (($1_1 >>> 38 - $2_1 & 1) - ($2_1 << 1) | 0) + 62 | 0;
   }
   HEAP32[$0_1 + 28 >> 2] = $4_1;
   HEAP32[$0_1 + 16 >> 2] = 0;
   HEAP32[$0_1 + 20 >> 2] = 0;
   $6_1 = ($4_1 << 2) + 97440 | 0;
   label$31 : {
    $3 = HEAP32[24285];
    $2_1 = 1 << $4_1;
    label$32 : {
     if (!($3 & $2_1)) {
      HEAP32[24285] = $2_1 | $3;
      HEAP32[$6_1 >> 2] = $0_1;
      HEAP32[$0_1 + 24 >> 2] = $6_1;
      break label$32;
     }
     $4_1 = $1_1 << (($4_1 | 0) != 31 ? 25 - ($4_1 >>> 1 | 0) | 0 : 0);
     $2_1 = HEAP32[$6_1 >> 2];
     while (1) {
      $3 = $2_1;
      if ((HEAP32[$2_1 + 4 >> 2] & -8) == ($1_1 | 0)) {
       break label$31
      }
      $2_1 = $4_1 >>> 29 | 0;
      $4_1 = $4_1 << 1;
      $6_1 = ($3 + ($2_1 & 4) | 0) + 16 | 0;
      $2_1 = HEAP32[$6_1 >> 2];
      if ($2_1) {
       continue
      }
      break;
     };
     HEAP32[$6_1 >> 2] = $0_1;
     HEAP32[$0_1 + 24 >> 2] = $3;
    }
    HEAP32[$0_1 + 12 >> 2] = $0_1;
    HEAP32[$0_1 + 8 >> 2] = $0_1;
    return;
   }
   $1_1 = HEAP32[$3 + 8 >> 2];
   HEAP32[$1_1 + 12 >> 2] = $0_1;
   HEAP32[$3 + 8 >> 2] = $0_1;
   HEAP32[$0_1 + 24 >> 2] = 0;
   HEAP32[$0_1 + 12 >> 2] = $3;
   HEAP32[$0_1 + 8 >> 2] = $1_1;
  }
 }
 
 function $1764($0_1) {
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[18353];
  $2_1 = $0_1 + 7 & -8;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   if (!!$2_1 & $0_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   if ($0_1 >>> 0 > __wasm_memory_size() << 16 >>> 0) {
    if (!(fimport$37($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[18353] = $0_1;
   return $1_1;
  }
  HEAP32[23975] = 48;
  return -1;
 }
 
 function $1765($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0;
  $10_1 = global$0 - 112 | 0;
  global$0 = $10_1;
  $9 = $8 & 2147483647;
  label$1 : {
   label$2 : {
    $12_1 = $4_1 & 2147483647;
    $13 = !($1_1 | $2_1);
    if (!($3 | $12_1 ? $12_1 - 2147418112 >>> 0 < 2147549184 : $13)) {
     $11_1 = $9 - 2147418112 | 0;
     if (!$7_1 & ($11_1 | 0) == -2147418112 ? $5_1 | $6_1 : ($11_1 | 0) == -2147418112 & ($7_1 | 0) != 0 | $11_1 >>> 0 > 2147549184) {
      break label$2
     }
    }
    if (!(!$3 & ($12_1 | 0) == 2147418112 ? $13 : $12_1 >>> 0 < 2147418112)) {
     $7_1 = $3;
     $8 = $4_1 | 32768;
     $5_1 = $1_1;
     $6_1 = $2_1;
     break label$1;
    }
    if (!(!$7_1 & ($9 | 0) == 2147418112 ? !($5_1 | $6_1) : $9 >>> 0 < 2147418112)) {
     $8 = $8 | 32768;
     break label$1;
    }
    if (!($1_1 | $3 | ($12_1 ^ 2147418112 | $2_1))) {
     $9 = $3;
     $3 = !($1_1 ^ $5_1 | $3 ^ $7_1 | ($2_1 ^ $6_1 | $4_1 ^ $8 ^ -2147483648));
     $7_1 = $3 ? 0 : $9;
     $8 = $3 ? 2147450880 : $4_1;
     $5_1 = $3 ? 0 : $1_1;
     $6_1 = $3 ? 0 : $2_1;
     break label$1;
    }
    if (!($5_1 | $7_1 | ($9 ^ 2147418112 | $6_1))) {
     break label$1
    }
    if (!($1_1 | $3 | ($2_1 | $12_1))) {
     if ($5_1 | $7_1 | ($6_1 | $9)) {
      break label$1
     }
     $5_1 = $1_1 & $5_1;
     $6_1 = $2_1 & $6_1;
     $7_1 = $3 & $7_1;
     $8 = $4_1 & $8;
     break label$1;
    }
    if ($5_1 | $7_1 | ($6_1 | $9)) {
     break label$2
    }
    $5_1 = $1_1;
    $6_1 = $2_1;
    $7_1 = $3;
    $8 = $4_1;
    break label$1;
   }
   $11_1 = ($9 | 0) == ($12_1 | 0);
   $12_1 = $11_1 & ($3 | 0) == ($7_1 | 0) ? ($2_1 | 0) == ($6_1 | 0) & $1_1 >>> 0 < $5_1 >>> 0 | $2_1 >>> 0 < $6_1 >>> 0 : $11_1 & $3 >>> 0 < $7_1 >>> 0 | $9 >>> 0 > $12_1 >>> 0;
   $9 = $12_1;
   $14 = $9 ? $5_1 : $1_1;
   $16_1 = $9 ? $6_1 : $2_1;
   $13 = $9 ? $8 : $4_1;
   $17_1 = $13;
   $11_1 = $9 ? $7_1 : $3;
   $7_1 = $9 ? $3 : $7_1;
   $3 = $9 ? $4_1 : $8;
   $15_1 = $3;
   $3 = $3 >>> 16 & 32767;
   $4_1 = $13 & 65535;
   $9 = $13 >>> 16 & 32767;
   label$8 : {
    if ($9) {
     break label$8
    }
    $9 = $4_1;
    $8 = !($4_1 | $11_1);
    $4_1 = Math_clz32($8 ? $16_1 : $4_1);
    $4_1 = (($4_1 | 0) == 32 ? Math_clz32($8 ? $14 : $11_1) + 32 | 0 : $4_1) + ($8 << 6) | 0;
    $1766($10_1 + 96 | 0, $14, $16_1, $11_1, $9, $4_1 - 15 | 0);
    $9 = 16 - $4_1 | 0;
    $4_1 = $10_1 + 104 | 0;
    $11_1 = HEAP32[$4_1 >> 2];
    $14 = HEAP32[$10_1 + 96 >> 2];
    $16_1 = HEAP32[$10_1 + 100 >> 2];
    $4_1 = HEAP32[$4_1 + 4 >> 2];
   }
   $5_1 = $12_1 ? $1_1 : $5_1;
   $6_1 = $12_1 ? $2_1 : $6_1;
   $8 = $15_1 & 65535;
   if (!$3) {
    $1_1 = !($7_1 | $8);
    $2_1 = Math_clz32($1_1 ? $6_1 : $8);
    $1_1 = (($2_1 | 0) == 32 ? Math_clz32($1_1 ? $5_1 : $7_1) + 32 | 0 : $2_1) + ($1_1 << 6) | 0;
    $1766($10_1 + 80 | 0, $5_1, $6_1, $7_1, $8, $1_1 - 15 | 0);
    $3 = 16 - $1_1 | 0;
    $1_1 = $10_1 + 88 | 0;
    $7_1 = HEAP32[$1_1 >> 2];
    $8 = HEAP32[$1_1 + 4 >> 2];
    $6_1 = HEAP32[$10_1 + 84 >> 2];
    $5_1 = HEAP32[$10_1 + 80 >> 2];
   }
   $1_1 = $7_1 << 3 | $6_1 >>> 29;
   $12_1 = $11_1 << 3 | $16_1 >>> 29;
   $4_1 = $4_1 << 3 | $11_1 >>> 29;
   $11_1 = $5_1 << 3;
   $13 = $6_1 << 3 | $5_1 >>> 29;
   $5_1 = $15_1 ^ $17_1;
   $2_1 = $8 << 3 | $7_1 >>> 29 | 524288;
   label$10 : {
    if (($3 | 0) == ($9 | 0)) {
     break label$10
    }
    $3 = $9 - $3 | 0;
    if ($3 >>> 0 > 127) {
     $1_1 = 0;
     $11_1 = 1;
     $13 = 0;
     $2_1 = 0;
     break label$10;
    }
    $6_1 = $10_1 - -64 | 0;
    $1766($6_1, $11_1, $13, $1_1, $2_1, 128 - $3 | 0);
    $7_1 = $10_1 + 48 | 0;
    $1776($7_1, $11_1, $13, $1_1, $2_1, $3);
    $1_1 = $6_1 + 8 | 0;
    $11_1 = HEAP32[$10_1 + 48 >> 2] | (HEAP32[$10_1 + 64 >> 2] | HEAP32[$1_1 >> 2] | (HEAP32[$10_1 + 68 >> 2] | HEAP32[$1_1 + 4 >> 2])) != 0;
    $13 = HEAP32[$10_1 + 52 >> 2];
    $2_1 = $7_1 + 8 | 0;
    $1_1 = HEAP32[$2_1 >> 2];
    $2_1 = HEAP32[$2_1 + 4 >> 2];
   }
   $15_1 = $4_1 | 524288;
   $4_1 = $14 << 3;
   $14 = $16_1 << 3 | $14 >>> 29;
   label$12 : {
    if (($5_1 | 0) < 0) {
     $5_1 = 0;
     $6_1 = 0;
     $7_1 = 0;
     $8 = 0;
     if (!($4_1 ^ $11_1 | $1_1 ^ $12_1 | ($13 ^ $14 | $2_1 ^ $15_1))) {
      break label$1
     }
     $3 = $4_1 - $11_1 | 0;
     $5_1 = $4_1 >>> 0 < $11_1 >>> 0;
     $4_1 = $14 - ($5_1 + $13 | 0) | 0;
     $6_1 = $12_1 - $1_1 | 0;
     $5_1 = $5_1 & ($13 | 0) == ($14 | 0) | $13 >>> 0 > $14 >>> 0;
     $7_1 = $6_1 - $5_1 | 0;
     $1_1 = ($15_1 - (($1_1 >>> 0 > $12_1 >>> 0) + $2_1 | 0) | 0) - ($5_1 >>> 0 > $6_1 >>> 0) | 0;
     $8 = $1_1;
     if ($1_1 >>> 0 > 524287) {
      break label$12
     }
     $1_1 = !($7_1 | $8);
     $2_1 = Math_clz32($1_1 ? $4_1 : $8);
     $1_1 = ((($2_1 | 0) == 32 ? Math_clz32($1_1 ? $3 : $7_1) + 32 | 0 : $2_1) + ($1_1 << 6) | 0) - 12 | 0;
     $1766($10_1 + 32 | 0, $3, $4_1, $7_1, $8, $1_1);
     $9 = $9 - $1_1 | 0;
     $1_1 = $10_1 + 40 | 0;
     $7_1 = HEAP32[$1_1 >> 2];
     $8 = HEAP32[$1_1 + 4 >> 2];
     $3 = HEAP32[$10_1 + 32 >> 2];
     $4_1 = HEAP32[$10_1 + 36 >> 2];
     break label$12;
    }
    $2_1 = $2_1 + $15_1 | 0;
    $1_1 = $1_1 + $12_1 | 0;
    $2_1 = $1_1 >>> 0 < $12_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $6_1 = $2_1 + 1 | 0;
    $5_1 = $2_1;
    $2_1 = $13 + $14 | 0;
    $3 = $4_1 + $11_1 | 0;
    $4_1 = $3 >>> 0 < $4_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
    $2_1 = ($13 | 0) == ($4_1 | 0) & $3 >>> 0 < $11_1 >>> 0 | $4_1 >>> 0 < $13 >>> 0;
    $7_1 = $1_1 + $2_1 | 0;
    $8 = $2_1 >>> 0 > $7_1 >>> 0 ? $6_1 : $5_1;
    if (!($8 & 1048576)) {
     break label$12
    }
    $3 = $11_1 & 1 | (($4_1 & 1) << 31 | $3 >>> 1);
    $4_1 = $7_1 << 31 | $4_1 >>> 1;
    $9 = $9 + 1 | 0;
    $7_1 = ($8 & 1) << 31 | $7_1 >>> 1;
    $8 = $8 >>> 1 | 0;
   }
   $1_1 = $17_1 & -2147483648;
   if (($9 | 0) >= 32767) {
    $7_1 = 0;
    $8 = $1_1 | 2147418112;
    $5_1 = 0;
    $6_1 = 0;
    break label$1;
   }
   $2_1 = 0;
   label$15 : {
    if (($9 | 0) > 0) {
     $2_1 = $9;
     break label$15;
    }
    $5_1 = $10_1 + 16 | 0;
    $1766($5_1, $3, $4_1, $7_1, $8, $9 + 127 | 0);
    $1776($10_1, $3, $4_1, $7_1, $8, 1 - $9 | 0);
    $3 = $5_1 + 8 | 0;
    $3 = HEAP32[$10_1 >> 2] | (HEAP32[$10_1 + 16 >> 2] | HEAP32[$3 >> 2] | (HEAP32[$10_1 + 20 >> 2] | HEAP32[$3 + 4 >> 2])) != 0;
    $4_1 = HEAP32[$10_1 + 4 >> 2];
    $5_1 = $10_1 + 8 | 0;
    $7_1 = HEAP32[$5_1 >> 2];
    $8 = HEAP32[$5_1 + 4 >> 2];
   }
   $1_1 = $1_1 | ($8 >>> 3 & 65535 | $2_1 << 16);
   $12_1 = $1_1 + 1 | 0;
   $9 = $1_1;
   $1_1 = $7_1 << 29 | $4_1 >>> 3;
   $2_1 = $3 & 7;
   $5_1 = $2_1 >>> 0 > 4;
   $6_1 = $5_1;
   $3 = ($4_1 & 7) << 29 | $3 >>> 3;
   $5_1 = $5_1 + $3 | 0;
   $4_1 = $6_1 >>> 0 > $5_1 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $6_1 = $4_1;
   $1_1 = ($4_1 | 0) == ($1_1 | 0) & $3 >>> 0 > $5_1 >>> 0 | $1_1 >>> 0 > $4_1 >>> 0;
   $7_1 = $1_1 + (($8 & 7) << 29 | $7_1 >>> 3) | 0;
   $8 = $1_1 >>> 0 > $7_1 >>> 0 ? $12_1 : $9;
   label$17 : {
    if (($2_1 | 0) == 4) {
     $1_1 = $6_1;
     $3 = $1_1 + 1 | 0;
     $2_1 = $5_1;
     $1_1 = $5_1 & 1;
     $5_1 = $5_1 + $1_1 | 0;
     $6_1 = $2_1 >>> 0 > $5_1 >>> 0 ? $3 : $6_1;
     $1_1 = !$6_1 & $1_1 >>> 0 > $5_1 >>> 0;
     $7_1 = $1_1 + $7_1 | 0;
     $8 = $1_1 >>> 0 > $7_1 >>> 0 ? $8 + 1 | 0 : $8;
     break label$17;
    }
    if (!$2_1) {
     break label$1
    }
   }
  }
  HEAP32[$0_1 >> 2] = $5_1;
  HEAP32[$0_1 + 4 >> 2] = $6_1;
  HEAP32[$0_1 + 8 >> 2] = $7_1;
  HEAP32[$0_1 + 12 >> 2] = $8;
  global$0 = $10_1 + 112 | 0;
 }
 
 function $1766($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8 = 0;
  label$1 : {
   if ($5_1 & 64) {
    $3 = $1_1;
    $4_1 = $5_1 + -64 | 0;
    $1_1 = $4_1 & 31;
    if (($4_1 & 63) >>> 0 >= 32) {
     $4_1 = $3 << $1_1;
     $3 = 0;
    } else {
     $4_1 = (1 << $1_1) - 1 & $3 >>> 32 - $1_1 | $2_1 << $1_1;
     $3 = $3 << $1_1;
    }
    $1_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   if (!$5_1) {
    break label$1
   }
   $7_1 = 64 - $5_1 | 0;
   $6_1 = $7_1 & 31;
   if (($7_1 & 63) >>> 0 >= 32) {
    $7_1 = 0;
    $8 = $2_1 >>> $6_1 | 0;
   } else {
    $7_1 = $2_1 >>> $6_1 | 0;
    $8 = ((1 << $6_1) - 1 & $2_1) << 32 - $6_1 | $1_1 >>> $6_1;
   }
   $6_1 = $3;
   $3 = $5_1 & 31;
   if (($5_1 & 63) >>> 0 >= 32) {
    $4_1 = $6_1 << $3;
    $3 = 0;
   } else {
    $4_1 = (1 << $3) - 1 & $6_1 >>> 32 - $3 | $4_1 << $3;
    $3 = $6_1 << $3;
   }
   $3 = $8 | $3;
   $4_1 = $4_1 | $7_1;
   $6_1 = $1_1;
   $1_1 = $5_1 & 31;
   if (($5_1 & 63) >>> 0 >= 32) {
    $7_1 = $6_1 << $1_1;
    $1_1 = 0;
   } else {
    $7_1 = (1 << $1_1) - 1 & $6_1 >>> 32 - $1_1 | $2_1 << $1_1;
    $1_1 = $6_1 << $1_1;
   }
   $2_1 = $7_1;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $3;
  HEAP32[$0_1 + 12 >> 2] = $4_1;
 }
 
 function $1767($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1) {
  var $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  $10_1 = 1;
  $8 = $3 & 2147483647;
  $11_1 = $8;
  $9 = ($8 | 0) == 2147418112;
  label$1 : {
   if ($9 & !$2_1 ? $0_1 | $1_1 : $9 & ($2_1 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break label$1
   }
   $8 = $7_1 & 2147483647;
   $9 = ($8 | 0) == 2147418112;
   if ($9 & !$6_1 ? $4_1 | $5_1 : $9 & ($6_1 | 0) != 0 | $8 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0_1 | $4_1 | ($2_1 | $6_1) | ($1_1 | $5_1 | ($8 | $11_1)))) {
    return 0
   }
   if (($3 & $7_1) >= 0) {
    $10_1 = -1;
    if (($2_1 | 0) == ($6_1 | 0) & ($3 | 0) == ($7_1 | 0) ? ($1_1 | 0) == ($5_1 | 0) & $0_1 >>> 0 < $4_1 >>> 0 | $1_1 >>> 0 < $5_1 >>> 0 : $2_1 >>> 0 < $6_1 >>> 0 & ($3 | 0) <= ($7_1 | 0) | ($3 | 0) < ($7_1 | 0)) {
     break label$1
    }
    return ($0_1 ^ $4_1 | $2_1 ^ $6_1 | ($1_1 ^ $5_1 | $3 ^ $7_1)) != 0;
   }
   $10_1 = -1;
   if (($2_1 | 0) == ($6_1 | 0) & ($3 | 0) == ($7_1 | 0) ? ($1_1 | 0) == ($5_1 | 0) & $0_1 >>> 0 > $4_1 >>> 0 | $1_1 >>> 0 > $5_1 >>> 0 : $2_1 >>> 0 > $6_1 >>> 0 & ($3 | 0) >= ($7_1 | 0) | ($3 | 0) > ($7_1 | 0)) {
    break label$1
   }
   $10_1 = ($0_1 ^ $4_1 | $2_1 ^ $6_1 | ($1_1 ^ $5_1 | $3 ^ $7_1)) != 0;
  }
  return $10_1;
 }
 
 function $1768($0_1, $1_1, $2_1, $3, $4_1) {
  var $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $7_1 = -1;
  $5_1 = $3 & 2147483647;
  $8 = $5_1;
  $6_1 = ($5_1 | 0) == 2147418112;
  label$1 : {
   if ($6_1 & !$2_1 ? $0_1 | $1_1 : $6_1 & ($2_1 | 0) != 0 | $5_1 >>> 0 > 2147418112) {
    break label$1
   }
   $5_1 = $4_1 & 2147483647;
   $6_1 = ($5_1 | 0) == 2147418112;
   if ($6_1 ? 0 : $6_1 & 0 | $5_1 >>> 0 > 2147418112) {
    break label$1
   }
   if (!($0_1 | $2_1 | ($1_1 | ($5_1 | $8)))) {
    return 0
   }
   if (($3 & $4_1) >= 0) {
    if (!$2_1 & ($3 | 0) == ($4_1 | 0) ? 0 : ($3 | 0) < ($4_1 | 0)) {
     break label$1
    }
    return ($0_1 | $2_1 | ($1_1 | $3 ^ $4_1)) != 0;
   }
   if (!$2_1 & ($3 | 0) == ($4_1 | 0) ? $1_1 | !$1_1 & ($0_1 | 0) != 0 : ($2_1 | 0) != 0 & ($3 | 0) >= ($4_1 | 0) | ($3 | 0) > ($4_1 | 0)) {
    break label$1
   }
   $7_1 = ($0_1 | $2_1 | ($1_1 | $3 ^ $4_1)) != 0;
  }
  return $7_1;
 }
 
 function $1769($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0;
  $11_1 = global$0 - 336 | 0;
  global$0 = $11_1;
  $10_1 = $7_1;
  $12_1 = $8 & 65535;
  $13 = $3;
  $15_1 = $4_1 & 65535;
  $19 = ($4_1 ^ $8) & -2147483648;
  $16_1 = $8 >>> 16 & 32767;
  $22_1 = $4_1 >>> 16 & 32767;
  label$1 : {
   label$2 : {
    if ($22_1 - 32767 >>> 0 >= 4294934530) {
     if ($16_1 - 32767 >>> 0 > 4294934529) {
      break label$2
     }
    }
    $9 = $4_1 & 2147483647;
    if (!(!$3 & ($9 | 0) == 2147418112 ? !($1_1 | $2_1) : $9 >>> 0 < 2147418112)) {
     $23_1 = $3;
     $19 = $4_1 | 32768;
     break label$1;
    }
    $4_1 = $8 & 2147483647;
    if (!(!$7_1 & ($4_1 | 0) == 2147418112 ? !($5_1 | $6_1) : $4_1 >>> 0 < 2147418112)) {
     $23_1 = $7_1;
     $19 = $8 | 32768;
     $1_1 = $5_1;
     $2_1 = $6_1;
     break label$1;
    }
    if (!($1_1 | $3 | ($9 ^ 2147418112 | $2_1))) {
     if (!($5_1 | $7_1 | ($4_1 ^ 2147418112 | $6_1))) {
      $1_1 = 0;
      $2_1 = 0;
      $19 = 2147450880;
      break label$1;
     }
     $19 = $19 | 2147418112;
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($5_1 | $7_1 | ($4_1 ^ 2147418112 | $6_1))) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($1_1 | $3 | ($2_1 | $9))) {
     $1_1 = !($5_1 | $7_1 | ($4_1 | $6_1));
     $23_1 = $1_1 ? 0 : $23_1;
     $19 = $1_1 ? 2147450880 : $19;
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($5_1 | $7_1 | ($4_1 | $6_1))) {
     $19 = $19 | 2147418112;
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if ($9 >>> 0 <= 65535) {
     $3 = !($13 | $15_1);
     $8 = $3;
     $9 = $3 ? $1_1 : $13;
     $3 = $3 << 6;
     $8 = Math_clz32($8 ? $2_1 : $15_1);
     $3 = $3 + (($8 | 0) == 32 ? Math_clz32($9) + 32 | 0 : $8) | 0;
     $1766($11_1 + 320 | 0, $1_1, $2_1, $13, $15_1, $3 - 15 | 0);
     $17_1 = 16 - $3 | 0;
     $1_1 = $11_1 + 328 | 0;
     $13 = HEAP32[$1_1 >> 2];
     $15_1 = HEAP32[$1_1 + 4 >> 2];
     $2_1 = HEAP32[$11_1 + 324 >> 2];
     $1_1 = HEAP32[$11_1 + 320 >> 2];
    }
    if ($4_1 >>> 0 > 65535) {
     break label$2
    }
    $3 = !($10_1 | $12_1);
    $7_1 = $3;
    $8 = $3 ? $5_1 : $10_1;
    $3 = $3 << 6;
    $7_1 = Math_clz32($7_1 ? $6_1 : $12_1);
    $3 = $3 + (($7_1 | 0) == 32 ? Math_clz32($8) + 32 | 0 : $7_1) | 0;
    $1766($11_1 + 304 | 0, $5_1, $6_1, $10_1, $12_1, $3 - 15 | 0);
    $17_1 = ($3 + $17_1 | 0) - 16 | 0;
    $3 = $11_1 + 312 | 0;
    $10_1 = HEAP32[$3 >> 2];
    $12_1 = HEAP32[$3 + 4 >> 2];
    $5_1 = HEAP32[$11_1 + 304 >> 2];
    $6_1 = HEAP32[$11_1 + 308 >> 2];
   }
   $4_1 = 0;
   $7_1 = $12_1 | 65536;
   $25_1 = $7_1;
   $26_1 = $10_1;
   $3 = $10_1;
   $9 = $7_1 << 15 | $3 >>> 17;
   $3 = $3 << 15 | $6_1 >>> 17;
   $7_1 = 0 - $3 | 0;
   $4_1 = $4_1 | $9;
   $8 = 1963258675 - ($4_1 + (($3 | 0) != 0) | 0) | 0;
   $9 = $11_1 + 288 | 0;
   $1778($9, $3, $4_1, 0, 0, $7_1, $8, 0, 0);
   $14 = $11_1 + 272 | 0;
   $9 = $9 + 8 | 0;
   $10_1 = HEAP32[$9 >> 2];
   $1778($14, 0 - $10_1 | 0, 0 - (HEAP32[$9 + 4 >> 2] + (($10_1 | 0) != 0) | 0) | 0, 0, 0, $7_1, $8, 0, 0);
   $12_1 = HEAP32[$11_1 + 276 >> 2] >>> 31 | 0;
   $8 = 0;
   $9 = $14 + 8 | 0;
   $7_1 = HEAP32[$9 >> 2];
   $9 = HEAP32[$9 + 4 >> 2] << 1 | $7_1 >>> 31;
   $10_1 = $11_1 + 256 | 0;
   $7_1 = $7_1 << 1 | $12_1;
   $8 = $8 | $9;
   $1778($10_1, $7_1, $8, 0, 0, $3, $4_1, 0, 0);
   $14 = $11_1 + 240 | 0;
   $9 = $10_1 + 8 | 0;
   $10_1 = HEAP32[$9 >> 2];
   $1778($14, $7_1, $8, 0, 0, 0 - $10_1 | 0, 0 - (HEAP32[$9 + 4 >> 2] + (($10_1 | 0) != 0) | 0) | 0, 0, 0);
   $12_1 = HEAP32[$11_1 + 244 >> 2] >>> 31 | 0;
   $8 = 0;
   $9 = $14 + 8 | 0;
   $7_1 = HEAP32[$9 >> 2];
   $9 = HEAP32[$9 + 4 >> 2] << 1 | $7_1 >>> 31;
   $10_1 = $11_1 + 224 | 0;
   $7_1 = $7_1 << 1 | $12_1;
   $8 = $8 | $9;
   $1778($10_1, $7_1, $8, 0, 0, $3, $4_1, 0, 0);
   $14 = $11_1 + 208 | 0;
   $9 = $10_1 + 8 | 0;
   $10_1 = HEAP32[$9 >> 2];
   $1778($14, $7_1, $8, 0, 0, 0 - $10_1 | 0, 0 - (HEAP32[$9 + 4 >> 2] + (($10_1 | 0) != 0) | 0) | 0, 0, 0);
   $12_1 = HEAP32[$11_1 + 212 >> 2] >>> 31 | 0;
   $8 = 0;
   $9 = $14 + 8 | 0;
   $7_1 = HEAP32[$9 >> 2];
   $9 = HEAP32[$9 + 4 >> 2] << 1 | $7_1 >>> 31;
   $10_1 = $11_1 + 192 | 0;
   $7_1 = $7_1 << 1 | $12_1;
   $8 = $8 | $9;
   $1778($10_1, $7_1, $8, 0, 0, $3, $4_1, 0, 0);
   $14 = $11_1 + 176 | 0;
   $9 = $10_1 + 8 | 0;
   $10_1 = HEAP32[$9 >> 2];
   $1778($14, $7_1, $8, 0, 0, 0 - $10_1 | 0, 0 - (HEAP32[$9 + 4 >> 2] + (($10_1 | 0) != 0) | 0) | 0, 0, 0);
   $7_1 = $3;
   $10_1 = $4_1;
   $8 = 0;
   $9 = $14 + 8 | 0;
   $3 = HEAP32[$9 >> 2];
   $4_1 = ($3 << 1 | HEAP32[$11_1 + 180 >> 2] >>> 31) - 1 | 0;
   $8 = (HEAP32[$9 + 4 >> 2] << 1 | $3 >>> 31 | $8) - 1 | 0;
   $3 = ($4_1 | 0) != -1 ? $8 + 1 | 0 : $8;
   $1778($11_1 + 160 | 0, $7_1, $10_1, 0, 0, $4_1, $3, 0, 0);
   $9 = $11_1 + 144 | 0;
   $1778($9, $5_1 << 15, $6_1 << 15 | $5_1 >>> 17, 0, 0, $4_1, $3, 0, 0);
   $7_1 = $11_1 + 168 | 0;
   $30 = HEAP32[$7_1 >> 2];
   $8 = HEAP32[$7_1 + 4 >> 2];
   $12_1 = HEAP32[$11_1 + 160 >> 2];
   $7_1 = $9 + 8 | 0;
   $27_1 = HEAP32[$7_1 >> 2];
   $10_1 = $12_1 + $27_1 | 0;
   $14 = HEAP32[$11_1 + 164 >> 2];
   $9 = $14 + HEAP32[$7_1 + 4 >> 2] | 0;
   $9 = $10_1 >>> 0 < $27_1 >>> 0 ? $9 + 1 | 0 : $9;
   $7_1 = $9;
   $12_1 = ($14 | 0) == ($9 | 0) & $10_1 >>> 0 < $12_1 >>> 0 | $9 >>> 0 < $14 >>> 0;
   $9 = $8;
   $14 = $12_1 + $30 | 0;
   $8 = $14 >>> 0 < $12_1 >>> 0 ? $9 + 1 | 0 : $9;
   $12_1 = !$7_1 & $10_1 >>> 0 > 1 | ($7_1 | 0) != 0;
   $9 = $12_1 + $14 | 0;
   $8 = $12_1 >>> 0 > $9 >>> 0 ? $8 + 1 | 0 : $8;
   $1778($11_1 + 112 | 0, $4_1, $3, 0, 0, 0 - $9 | 0, 0 - ((($9 | 0) != 0) + $8 | 0) | 0, 0, 0);
   $14 = $11_1 + 128 | 0;
   $1778($14, 1 - $10_1 | 0, 0 - (($10_1 >>> 0 > 1) + $7_1 | 0) | 0, 0, 0, $4_1, $3, 0, 0);
   $34_1 = ($22_1 - $16_1 | 0) + $17_1 | 0;
   $4_1 = HEAP32[$11_1 + 116 >> 2];
   $20_1 = $4_1;
   $3 = HEAP32[$11_1 + 112 >> 2];
   $9 = $4_1 << 1 | $3 >>> 31;
   $7_1 = $3 << 1;
   $12_1 = $9;
   $4_1 = $9;
   $10_1 = HEAP32[$11_1 + 132 >> 2] >>> 31 | 0;
   $8 = 0;
   $9 = $14 + 8 | 0;
   $3 = HEAP32[$9 >> 2];
   $9 = HEAP32[$9 + 4 >> 2];
   $28_1 = $9;
   $9 = $9 << 1 | $3 >>> 31;
   $10_1 = $3 << 1 | $10_1;
   $3 = $10_1 + $7_1 | 0;
   $9 = ($8 | $9) + $4_1 | 0;
   $9 = $3 >>> 0 < $10_1 >>> 0 ? $9 + 1 | 0 : $9;
   $4_1 = $9;
   $8 = $9 - 1 | 0;
   $14 = $3;
   $10_1 = $3 - 13927 | 0;
   $8 = $10_1 >>> 0 < 4294953369 ? $8 + 1 | 0 : $8;
   $18_1 = $8;
   $22_1 = $8;
   $3 = 0;
   $8 = $15_1 | 65536;
   $35_1 = $8;
   $36_1 = $13;
   $9 = $13;
   $8 = $8 << 1 | $9 >>> 31;
   $38_1 = $9 << 1;
   $39_1 = $8;
   $29_1 = $8;
   $3 = __wasm_i64_mul($18_1, $3, $8, 0);
   $8 = i64toi32_i32$HIGH_BITS;
   $24 = $3;
   $21_1 = $8;
   $27_1 = $1_1 << 1;
   $9 = $2_1 << 1 | $1_1 >>> 31;
   $17_1 = $9;
   $8 = 0;
   $30 = $8;
   $16_1 = $8;
   $8 = $11_1 + 120 | 0;
   $3 = HEAP32[$8 >> 2];
   $8 = HEAP32[$8 + 4 >> 2] << 1 | $3 >>> 31;
   $3 = $3 << 1 | $20_1 >>> 31;
   $20_1 = $28_1 >>> 31 | 0;
   $3 = $3 + $20_1 | 0;
   $9 = $8;
   $9 = $3 >>> 0 < $20_1 >>> 0 ? $9 + 1 | 0 : $9;
   $7_1 = ($4_1 | 0) == ($12_1 | 0) & $7_1 >>> 0 > $14 >>> 0 | $4_1 >>> 0 < $12_1 >>> 0;
   $8 = $7_1;
   $7_1 = $3 + $7_1 | 0;
   $9 = $8 >>> 0 > $7_1 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = ($4_1 | 0) == ($18_1 | 0) & $10_1 >>> 0 < $14 >>> 0 | $4_1 >>> 0 > $18_1 >>> 0;
   $4_1 = $3;
   $3 = $3 + $7_1 | 0;
   $9 = ($4_1 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9) - 1 | 0;
   $4_1 = $3 - 1 | 0;
   $31_1 = ($4_1 | 0) != -1 ? $9 + 1 | 0 : $9;
   $18_1 = 0;
   $7_1 = __wasm_i64_mul($17_1, $16_1, $31_1, $18_1);
   $3 = $7_1 + $24 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $21_1 | 0;
   $14 = $3;
   $9 = $3 >>> 0 < $7_1 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $28_1 = ($21_1 | 0) == ($9 | 0) & $3 >>> 0 < $24 >>> 0 | $9 >>> 0 < $21_1 >>> 0;
   $9 = 0;
   $20_1 = $4_1;
   $37 = $2_1 >>> 31 | 0;
   $24 = $37 | $13 << 1;
   $21_1 = 0;
   $9 = __wasm_i64_mul($4_1, $9, $24, $21_1);
   $4_1 = $9 + $3 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $3 = $4_1 >>> 0 < $9 >>> 0 ? $3 + 1 | 0 : $3;
   $12_1 = $4_1;
   $9 = 0;
   $7_1 = $3;
   $3 = ($8 | 0) == ($3 | 0) & $4_1 >>> 0 < $14 >>> 0 | $3 >>> 0 < $8 >>> 0;
   $4_1 = $3;
   $3 = $3 + $28_1 | 0;
   $9 = $4_1 >>> 0 > $3 >>> 0 ? 1 : $9;
   $4_1 = __wasm_i64_mul($31_1, $18_1, $29_1, $16_1);
   $3 = $4_1 + $3 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $14 = $3;
   $13 = $3 >>> 0 < $4_1 >>> 0 ? $8 + 1 | 0 : $8;
   $3 = __wasm_i64_mul($20_1, $21_1, $29_1, $16_1);
   $15_1 = i64toi32_i32$HIGH_BITS;
   $9 = $3;
   $4_1 = __wasm_i64_mul($24, $21_1, $31_1, $18_1);
   $8 = $9 + $4_1 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $15_1 | 0;
   $3 = $4_1 >>> 0 > $8 >>> 0 ? $3 + 1 | 0 : $3;
   $4_1 = $3;
   $3 = ($15_1 | 0) == ($3 | 0) & $8 >>> 0 < $9 >>> 0 | $3 >>> 0 < $15_1 >>> 0;
   $15_1 = $14 + $4_1 | 0;
   $9 = $3 + $13 | 0;
   $3 = $4_1 >>> 0 > $15_1 >>> 0 ? $9 + 1 | 0 : $9;
   $4_1 = 0;
   $13 = $4_1 + $12_1 | 0;
   $9 = $7_1 + $8 | 0;
   $9 = $4_1 >>> 0 > $13 >>> 0 ? $9 + 1 | 0 : $9;
   $4_1 = $9;
   $7_1 = ($7_1 | 0) == ($9 | 0) & $12_1 >>> 0 > $13 >>> 0 | $7_1 >>> 0 > $9 >>> 0;
   $8 = $7_1;
   $7_1 = $7_1 + $15_1 | 0;
   $3 = $8 >>> 0 > $7_1 >>> 0 ? $3 + 1 | 0 : $3;
   $14 = $7_1;
   $28_1 = $10_1;
   $7_1 = __wasm_i64_mul($10_1, 0, $24, $21_1);
   $12_1 = i64toi32_i32$HIGH_BITS;
   $9 = $7_1;
   $10_1 = __wasm_i64_mul($22_1, $16_1, $17_1, $16_1);
   $7_1 = $9 + $10_1 | 0;
   $8 = i64toi32_i32$HIGH_BITS + $12_1 | 0;
   $8 = $7_1 >>> 0 < $10_1 >>> 0 ? $8 + 1 | 0 : $8;
   $10_1 = $7_1;
   $15_1 = ($8 | 0) == ($12_1 | 0) & $7_1 >>> 0 < $9 >>> 0 | $8 >>> 0 < $12_1 >>> 0;
   $32_1 = $27_1 & -2;
   $7_1 = __wasm_i64_mul($20_1, $21_1, $32_1, 0);
   $12_1 = $10_1 + $7_1 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $8 | 0;
   $9 = $7_1 >>> 0 > $12_1 >>> 0 ? $9 + 1 | 0 : $9;
   $7_1 = $9;
   $8 = ($8 | 0) == ($9 | 0) & $10_1 >>> 0 > $12_1 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $9 = 0;
   $10_1 = $8;
   $8 = $8 + $15_1 | 0;
   $9 = ($10_1 >>> 0 > $8 >>> 0 ? 1 : $9) + $4_1 | 0;
   $15_1 = $8 + $13 | 0;
   $9 = $15_1 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $4_1 = ($4_1 | 0) == ($9 | 0) & $13 >>> 0 > $15_1 >>> 0 | $4_1 >>> 0 > $9 >>> 0;
   $9 = $3;
   $3 = $4_1 + $14 | 0;
   $9 = $3 >>> 0 < $4_1 >>> 0 ? $9 + 1 | 0 : $9;
   $40_1 = $3;
   $14 = $9;
   $3 = __wasm_i64_mul($28_1, $23_1, $29_1, $16_1);
   $33_1 = i64toi32_i32$HIGH_BITS;
   $29_1 = $3;
   $9 = __wasm_i64_mul($32_1, $23_1, $31_1, $18_1);
   $4_1 = $3 + $9 | 0;
   $3 = i64toi32_i32$HIGH_BITS + $33_1 | 0;
   $3 = $4_1 >>> 0 < $9 >>> 0 ? $3 + 1 | 0 : $3;
   $18_1 = $4_1;
   $13 = __wasm_i64_mul($22_1, $16_1, $24, $21_1);
   $4_1 = $4_1 + $13 | 0;
   $10_1 = $3;
   $9 = $3 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $4_1 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
   $24 = $4_1;
   $3 = __wasm_i64_mul($20_1, $21_1, $17_1, $16_1);
   $13 = $4_1 + $3 | 0;
   $16_1 = $9;
   $9 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $3 >>> 0 > $13 >>> 0 ? $9 + 1 | 0 : $9;
   $4_1 = $9;
   $20_1 = 0;
   $3 = ($10_1 | 0) == ($16_1 | 0) & $18_1 >>> 0 > $24 >>> 0 | $10_1 >>> 0 > $16_1 >>> 0;
   $10_1 = $3 + (($10_1 | 0) == ($33_1 | 0) & $18_1 >>> 0 < $29_1 >>> 0 | $10_1 >>> 0 < $33_1 >>> 0) | 0;
   $3 = ($4_1 | 0) == ($16_1 | 0) & $13 >>> 0 < $24 >>> 0 | $4_1 >>> 0 < $16_1 >>> 0;
   $3 = $3 + $10_1 | 0;
   $16_1 = $4_1 + $15_1 | 0;
   $9 = ($3 | $20_1) + $8 | 0;
   $9 = $4_1 >>> 0 > $16_1 >>> 0 ? $9 + 1 | 0 : $9;
   $10_1 = $9;
   $3 = ($8 | 0) == ($9 | 0) & $15_1 >>> 0 > $16_1 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $9 = $14;
   $4_1 = $3;
   $3 = $3 + $40_1 | 0;
   $9 = $4_1 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $20_1 = $3;
   $15_1 = $9;
   $3 = __wasm_i64_mul($22_1, $30, $32_1, $23_1);
   $18_1 = i64toi32_i32$HIGH_BITS;
   $14 = $3;
   $8 = __wasm_i64_mul($28_1, $23_1, $17_1, $30);
   $3 = $3 + $8 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $18_1 | 0;
   $9 = $3 >>> 0 < $8 >>> 0 ? $9 + 1 | 0 : $9;
   $22_1 = 0;
   $8 = ($9 | 0) == ($18_1 | 0) & $3 >>> 0 < $14 >>> 0 | $9 >>> 0 < $18_1 >>> 0;
   $14 = $9;
   $3 = $9 + $12_1 | 0;
   $9 = ($8 | $22_1) + $7_1 | 0;
   $9 = $3 >>> 0 < $14 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   $12_1 = ($7_1 | 0) == ($9 | 0) & $3 >>> 0 < $12_1 >>> 0 | $7_1 >>> 0 > $9 >>> 0;
   $9 = $13;
   $13 = 0;
   $4_1 = $13 + $3 | 0;
   $9 = $8 + $9 | 0;
   $9 = $4_1 >>> 0 < $13 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = ($8 | 0) == ($9 | 0) & $3 >>> 0 > $4_1 >>> 0 | $8 >>> 0 > $9 >>> 0;
   $9 = 0;
   $4_1 = $3;
   $3 = $3 + $12_1 | 0;
   $9 = ($4_1 >>> 0 > $3 >>> 0 ? 1 : $9) + $10_1 | 0;
   $4_1 = $3;
   $3 = $3 + $16_1 | 0;
   $9 = $4_1 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $4_1 = $9;
   $7_1 = ($10_1 | 0) == ($9 | 0) & $3 >>> 0 < $16_1 >>> 0 | $9 >>> 0 < $10_1 >>> 0;
   $9 = $15_1;
   $8 = $7_1;
   $7_1 = $7_1 + $20_1 | 0;
   $9 = $8 >>> 0 > $7_1 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   label$12 : {
    if ($9 >>> 0 <= 131071) {
     $36_1 = $38_1 | $37;
     $35_1 = $21_1 | $39_1;
     $2_1 = $11_1 + 80 | 0;
     $1778($2_1, $3, $4_1, $7_1, $8, $5_1, $6_1, $26_1, $25_1);
     $10_1 = HEAP32[$11_1 + 84 >> 2];
     $14 = $10_1;
     $9 = $1_1 << 17;
     $12_1 = 0;
     $15_1 = $2_1 + 8 | 0;
     $16_1 = HEAP32[$15_1 >> 2];
     $2_1 = $12_1 - $16_1 | 0;
     $1_1 = HEAP32[$11_1 + 80 >> 2];
     $10_1 = ($10_1 | $1_1) != 0;
     $13 = $2_1 - $10_1 | 0;
     $15_1 = ($9 - (HEAP32[$15_1 + 4 >> 2] + ($12_1 >>> 0 < $16_1 >>> 0) | 0) | 0) - ($2_1 >>> 0 < $10_1 >>> 0) | 0;
     $16_1 = $34_1 + 16382 | 0;
     $10_1 = 0 - $1_1 | 0;
     $12_1 = 0 - ((($1_1 | 0) != 0) + $14 | 0) | 0;
     break label$12;
    }
    $9 = $11_1 + 96 | 0;
    $3 = ($4_1 & 1) << 31 | $3 >>> 1;
    $4_1 = $7_1 << 31 | $4_1 >>> 1;
    $7_1 = ($8 & 1) << 31 | $7_1 >>> 1;
    $8 = $8 >>> 1 | 0;
    $1778($9, $3, $4_1, $7_1, $8, $5_1, $6_1, $26_1, $25_1);
    $13 = HEAP32[$11_1 + 100 >> 2];
    $22_1 = $13;
    $17_1 = 0;
    $16_1 = $9 + 8 | 0;
    $14 = HEAP32[$16_1 >> 2];
    $10_1 = $17_1 - $14 | 0;
    $12_1 = HEAP32[$11_1 + 96 >> 2];
    $15_1 = ($13 | $12_1) != 0;
    $13 = $10_1 - $15_1 | 0;
    $15_1 = (($1_1 << 16) - (HEAP32[$16_1 + 4 >> 2] + ($14 >>> 0 > $17_1 >>> 0) | 0) | 0) - ($10_1 >>> 0 < $15_1 >>> 0) | 0;
    $16_1 = $34_1 + 16383 | 0;
    $10_1 = 0 - $12_1 | 0;
    $27_1 = $1_1;
    $17_1 = $2_1;
    $12_1 = 0 - ((($12_1 | 0) != 0) + $22_1 | 0) | 0;
   }
   if (($16_1 | 0) >= 32767) {
    $19 = $19 | 2147418112;
    $1_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   label$15 : {
    if (($16_1 | 0) > 0) {
     $1_1 = $15_1 << 1 | $13 >>> 31;
     $13 = $13 << 1 | $12_1 >>> 31;
     $15_1 = $1_1;
     $1_1 = $7_1;
     $17_1 = $8 & 65535 | $16_1 << 16;
     $8 = $12_1 << 1 | $10_1 >>> 31;
     $7_1 = $10_1 << 1;
     break label$15;
    }
    if (($16_1 | 0) <= -113) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    $1_1 = $11_1 - -64 | 0;
    $1776($1_1, $3, $4_1, $7_1, $8, 1 - $16_1 | 0);
    $7_1 = $11_1 + 48 | 0;
    $1766($7_1, $27_1, $17_1, $36_1, $35_1, $16_1 + 112 | 0);
    $8 = $11_1 + 32 | 0;
    $3 = HEAP32[$11_1 + 64 >> 2];
    $4_1 = HEAP32[$11_1 + 68 >> 2];
    $2_1 = $1_1 + 8 | 0;
    $1_1 = HEAP32[$2_1 >> 2];
    $17_1 = HEAP32[$2_1 + 4 >> 2];
    $1778($8, $5_1, $6_1, $26_1, $25_1, $3, $4_1, $1_1, $17_1);
    $2_1 = $7_1 + 8 | 0;
    $7_1 = HEAP32[$2_1 >> 2];
    $13 = HEAP32[$2_1 + 4 >> 2];
    $8 = $8 + 8 | 0;
    $2_1 = HEAP32[$8 >> 2];
    $10_1 = HEAP32[$11_1 + 36 >> 2];
    $15_1 = $2_1 << 1 | $10_1 >>> 31;
    $12_1 = $7_1 - $15_1 | 0;
    $15_1 = $13 - ((HEAP32[$8 + 4 >> 2] << 1 | $2_1 >>> 31) + ($7_1 >>> 0 < $15_1 >>> 0) | 0) | 0;
    $7_1 = HEAP32[$11_1 + 52 >> 2];
    $16_1 = $7_1;
    $2_1 = HEAP32[$11_1 + 32 >> 2];
    $8 = $10_1 << 1 | $2_1 >>> 31;
    $2_1 = $2_1 << 1;
    $9 = HEAP32[$11_1 + 48 >> 2];
    $10_1 = $2_1 >>> 0 > $9 >>> 0;
    $7_1 = $10_1 & ($7_1 | 0) == ($8 | 0) | $7_1 >>> 0 < $8 >>> 0;
    $13 = $12_1 - $7_1 | 0;
    $15_1 = $15_1 - ($7_1 >>> 0 > $12_1 >>> 0) | 0;
    $8 = $16_1 - ($8 + $10_1 | 0) | 0;
    $7_1 = $9 - $2_1 | 0;
   }
   $1778($11_1 + 16 | 0, $5_1, $6_1, $26_1, $25_1, 3, 0, 0, 0);
   $1778($11_1, $5_1, $6_1, $26_1, $25_1, 5, 0, 0, 0);
   $12_1 = $1_1;
   $2_1 = $17_1;
   $9 = 0;
   $8 = $8 + $9 | 0;
   $10_1 = $3 & 1;
   $1_1 = $7_1 + $10_1 | 0;
   $8 = $1_1 >>> 0 < $7_1 >>> 0 ? $8 + 1 | 0 : $8;
   $7_1 = $1_1;
   $17_1 = ($6_1 | 0) == ($8 | 0) & $5_1 >>> 0 < $7_1 >>> 0 | $6_1 >>> 0 < $8 >>> 0;
   $1_1 = ($8 | 0) == ($9 | 0) & $7_1 >>> 0 < $10_1 >>> 0 | $8 >>> 0 < $9 >>> 0;
   $9 = $15_1;
   $6_1 = $1_1 + $13 | 0;
   $9 = $6_1 >>> 0 < $1_1 >>> 0 ? $9 + 1 | 0 : $9;
   $5_1 = $9;
   $1_1 = ($6_1 | 0) == ($26_1 | 0) & ($9 | 0) == ($25_1 | 0) ? $17_1 : ($25_1 | 0) == ($9 | 0) & $6_1 >>> 0 > $26_1 >>> 0 | $9 >>> 0 > $25_1 >>> 0;
   $9 = $4_1;
   $10_1 = $1_1 + $3 | 0;
   $9 = $10_1 >>> 0 < $1_1 >>> 0 ? $9 + 1 | 0 : $9;
   $1_1 = $9;
   $3 = ($4_1 | 0) == ($9 | 0) & $3 >>> 0 > $10_1 >>> 0 | $4_1 >>> 0 > $9 >>> 0;
   $9 = $2_1;
   $2_1 = $3 + $12_1 | 0;
   $9 = $2_1 >>> 0 < $3 >>> 0 ? $9 + 1 | 0 : $9;
   $4_1 = $11_1 + 24 | 0;
   $3 = HEAP32[$4_1 >> 2];
   $13 = HEAP32[$11_1 + 20 >> 2];
   $4_1 = HEAP32[$4_1 + 4 >> 2];
   $4_1 = $9 >>> 0 < 2147418112 & (($3 | 0) == ($6_1 | 0) & ($4_1 | 0) == ($5_1 | 0) ? ($13 | 0) == ($8 | 0) & HEAPU32[$11_1 + 16 >> 2] < $7_1 >>> 0 | $8 >>> 0 > $13 >>> 0 : ($4_1 | 0) == ($5_1 | 0) & $3 >>> 0 < $6_1 >>> 0 | $4_1 >>> 0 < $5_1 >>> 0);
   $3 = $1_1;
   $13 = $4_1 + $10_1 | 0;
   $3 = $13 >>> 0 < $4_1 >>> 0 ? $3 + 1 | 0 : $3;
   $1_1 = ($1_1 | 0) == ($3 | 0) & $10_1 >>> 0 > $13 >>> 0 | $1_1 >>> 0 > $3 >>> 0;
   $4_1 = $1_1;
   $1_1 = $1_1 + $2_1 | 0;
   $9 = $4_1 >>> 0 > $1_1 >>> 0 ? $9 + 1 | 0 : $9;
   $10_1 = $1_1;
   $4_1 = $9;
   $2_1 = $11_1 + 8 | 0;
   $1_1 = HEAP32[$2_1 >> 2];
   $14 = $9 >>> 0 < 2147418112;
   $9 = HEAP32[$11_1 + 4 >> 2];
   $2_1 = HEAP32[$2_1 + 4 >> 2];
   $1_1 = $14 & (($1_1 | 0) == ($6_1 | 0) & ($2_1 | 0) == ($5_1 | 0) ? ($9 | 0) == ($8 | 0) & HEAPU32[$11_1 >> 2] < $7_1 >>> 0 | $8 >>> 0 > $9 >>> 0 : ($2_1 | 0) == ($5_1 | 0) & $1_1 >>> 0 < $6_1 >>> 0 | $2_1 >>> 0 < $5_1 >>> 0);
   $9 = $3;
   $2_1 = $1_1;
   $1_1 = $1_1 + $13 | 0;
   $9 = $2_1 >>> 0 > $1_1 >>> 0 ? $9 + 1 | 0 : $9;
   $2_1 = $9;
   $5_1 = ($3 | 0) == ($9 | 0) & $1_1 >>> 0 < $13 >>> 0 | $3 >>> 0 > $9 >>> 0;
   $3 = $4_1;
   $4_1 = $5_1 + $10_1 | 0;
   $3 = $4_1 >>> 0 < $5_1 >>> 0 ? $3 + 1 | 0 : $3;
   $23_1 = $4_1 | $23_1;
   $19 = $3 | $19;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $23_1;
  HEAP32[$0_1 + 12 >> 2] = $19;
  global$0 = $11_1 + 336 | 0;
 }
 
 function $1770($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  wasm2js_scratch_store_f64(+$1_1);
  $6_1 = wasm2js_scratch_load_i32(1) | 0;
  $3 = wasm2js_scratch_load_i32(0) | 0;
  $2_1 = $6_1 & 2147483647;
  label$1 : {
   if ($2_1 + -1048576 >>> 0 <= 2145386495) {
    $5_1 = $3 << 28;
    $8 = $2_1 >>> 4 | 0;
    $2_1 = ($2_1 & 15) << 28 | $3 >>> 4;
    $3 = $8 + 1006632960 | 0;
    break label$1;
   }
   if ($2_1 >>> 0 >= 2146435072) {
    $5_1 = $3 << 28;
    $2_1 = ($6_1 & 15) << 28 | $3 >>> 4;
    $3 = $6_1 >>> 4 | 2147418112;
    break label$1;
   }
   if (!($3 | $2_1)) {
    $2_1 = 0;
    $3 = 0;
    break label$1;
   }
   $7_1 = $2_1;
   $2_1 = $2_1 ? Math_clz32($2_1) : Math_clz32($3) + 32 | 0;
   $1766($4_1, $3, $7_1, 0, 0, $2_1 + 49 | 0);
   $5_1 = 15372 - $2_1 << 16;
   $3 = $4_1 + 8 | 0;
   $2_1 = HEAP32[$3 >> 2];
   $3 = $5_1 | HEAP32[$3 + 4 >> 2] ^ 65536;
   $7_1 = HEAP32[$4_1 >> 2];
   $5_1 = HEAP32[$4_1 + 4 >> 2];
  }
  HEAP32[$0_1 >> 2] = $7_1;
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  HEAP32[$0_1 + 8 >> 2] = $2_1;
  HEAP32[$0_1 + 12 >> 2] = $6_1 & -2147483648 | $3;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1772($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    break label$1;
   }
   $2_1 = $1_1 >> 31;
   $3 = ($2_1 ^ $1_1) - $2_1 | 0;
   $2_1 = Math_clz32($3);
   $1766($4_1, $3, 0, 0, 0, $2_1 + 81 | 0);
   $3 = $4_1 + 8 | 0;
   $5_1 = HEAP32[$3 >> 2];
   $6_1 = HEAP32[$3 + 4 >> 2] ^ 65536;
   $3 = $5_1;
   $5_1 = 0;
   $3 = $3 + $5_1 | 0;
   $2_1 = (16414 - $2_1 << 16) + $6_1 | 0;
   $2_1 = $3 >>> 0 < $5_1 >>> 0 ? $2_1 + 1 | 0 : $2_1;
   $5_1 = $1_1 & -2147483648 | $2_1;
   $2_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = HEAP32[$4_1 >> 2];
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $3;
  HEAP32[$0_1 + 12 >> 2] = $5_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1773($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  label$1 : {
   if (!$1_1) {
    $1_1 = 0;
    break label$1;
   }
   $2_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   $1766($4_1, $2_1, 0, 0, 0, $1_1 + 81 | 0);
   $3 = $4_1 + 8 | 0;
   $2_1 = HEAP32[$3 >> 2];
   $5_1 = HEAP32[$3 + 4 >> 2] ^ 65536;
   $3 = $2_1;
   $2_1 = 0;
   $3 = $3 + $2_1 | 0;
   $1_1 = (16414 - $1_1 << 16) + $5_1 | 0;
   $2_1 = $2_1 >>> 0 > $3 >>> 0 ? $1_1 + 1 | 0 : $1_1;
   $5_1 = HEAP32[$4_1 + 4 >> 2];
   $1_1 = HEAP32[$4_1 >> 2];
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $5_1;
  HEAP32[$0_1 + 8 >> 2] = $3;
  HEAP32[$0_1 + 12 >> 2] = $2_1;
  global$0 = $4_1 + 16 | 0;
 }
 
 function $1776($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  var $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  label$1 : {
   if ($5_1 & 64) {
    $2_1 = $5_1 + -64 | 0;
    $1_1 = $2_1 & 31;
    if (($2_1 & 63) >>> 0 >= 32) {
     $2_1 = 0;
     $1_1 = $4_1 >>> $1_1 | 0;
    } else {
     $2_1 = $4_1 >>> $1_1 | 0;
     $1_1 = ((1 << $1_1) - 1 & $4_1) << 32 - $1_1 | $3 >>> $1_1;
    }
    $3 = 0;
    $4_1 = 0;
    break label$1;
   }
   if (!$5_1) {
    break label$1
   }
   $8 = $3;
   $7_1 = 64 - $5_1 | 0;
   $6_1 = $7_1 & 31;
   if (($7_1 & 63) >>> 0 >= 32) {
    $7_1 = $8 << $6_1;
    $9 = 0;
   } else {
    $7_1 = (1 << $6_1) - 1 & $8 >>> 32 - $6_1 | $4_1 << $6_1;
    $9 = $8 << $6_1;
   }
   $8 = $1_1;
   $1_1 = $5_1 & 31;
   if (($5_1 & 63) >>> 0 >= 32) {
    $6_1 = 0;
    $1_1 = $2_1 >>> $1_1 | 0;
   } else {
    $6_1 = $2_1 >>> $1_1 | 0;
    $1_1 = ((1 << $1_1) - 1 & $2_1) << 32 - $1_1 | $8 >>> $1_1;
   }
   $1_1 = $9 | $1_1;
   $2_1 = $6_1 | $7_1;
   $6_1 = $3;
   $3 = $5_1 & 31;
   if (($5_1 & 63) >>> 0 >= 32) {
    $7_1 = 0;
    $3 = $4_1 >>> $3 | 0;
   } else {
    $7_1 = $4_1 >>> $3 | 0;
    $3 = ((1 << $3) - 1 & $4_1) << 32 - $3 | $6_1 >>> $3;
   }
   $4_1 = $7_1;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $3;
  HEAP32[$0_1 + 12 >> 2] = $4_1;
 }
 
 function $1777($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $13 = 0, $14 = 0, $15_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0;
  $12_1 = global$0 - 96 | 0;
  global$0 = $12_1;
  $14 = $8 & 65535;
  $13 = ($4_1 ^ $8) & -2147483648;
  $15_1 = $4_1 & 65535;
  $26_1 = $15_1;
  $42_1 = $8 >>> 16 & 32767;
  $43_1 = $4_1 >>> 16 & 32767;
  label$1 : {
   label$2 : {
    if ($43_1 - 32767 >>> 0 >= 4294934530) {
     if ($42_1 - 32767 >>> 0 > 4294934529) {
      break label$2
     }
    }
    $10_1 = $4_1 & 2147483647;
    $16_1 = $10_1;
    $9 = $3;
    if (!(!$9 & ($10_1 | 0) == 2147418112 ? !($1_1 | $2_1) : $10_1 >>> 0 < 2147418112)) {
     $17_1 = $3;
     $13 = $4_1 | 32768;
     break label$1;
    }
    $10_1 = $8 & 2147483647;
    $19 = $10_1;
    $4_1 = $7_1;
    if (!(!$4_1 & ($10_1 | 0) == 2147418112 ? !($5_1 | $6_1) : $10_1 >>> 0 < 2147418112)) {
     $17_1 = $7_1;
     $13 = $8 | 32768;
     $1_1 = $5_1;
     $2_1 = $6_1;
     break label$1;
    }
    if (!($1_1 | $9 | ($16_1 ^ 2147418112 | $2_1))) {
     if (!($4_1 | $5_1 | ($6_1 | $19))) {
      $13 = 2147450880;
      $1_1 = 0;
      $2_1 = 0;
      break label$1;
     }
     $13 = $13 | 2147418112;
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($4_1 | $5_1 | ($19 ^ 2147418112 | $6_1))) {
     $4_1 = $1_1 | $9;
     $3 = $2_1 | $16_1;
     $1_1 = 0;
     $2_1 = 0;
     if (!($3 | $4_1)) {
      $13 = 2147450880;
      break label$1;
     }
     $13 = $13 | 2147418112;
     break label$1;
    }
    if (!($1_1 | $9 | ($2_1 | $16_1))) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if (!($4_1 | $5_1 | ($6_1 | $19))) {
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    if ($16_1 >>> 0 <= 65535) {
     $9 = !($3 | $15_1);
     $8 = $9 ? $1_1 : $3;
     $10_1 = $9 << 6;
     $4_1 = Math_clz32($8) + 32 | 0;
     $8 = Math_clz32($9 ? $2_1 : $15_1);
     $8 = $10_1 + (($8 | 0) == 32 ? $4_1 : $8) | 0;
     $1766($12_1 + 80 | 0, $1_1, $2_1, $3, $15_1, $8 - 15 | 0);
     $36_1 = 16 - $8 | 0;
     $1_1 = $12_1 + 88 | 0;
     $3 = HEAP32[$1_1 >> 2];
     $26_1 = HEAP32[$1_1 + 4 >> 2];
     $2_1 = HEAP32[$12_1 + 84 >> 2];
     $1_1 = HEAP32[$12_1 + 80 >> 2];
    }
    if ($19 >>> 0 > 65535) {
     break label$2
    }
    $8 = !($7_1 | $14);
    $4_1 = $8 ? $5_1 : $7_1;
    $15_1 = $8 << 6;
    $9 = Math_clz32($4_1) + 32 | 0;
    $4_1 = Math_clz32($8 ? $6_1 : $14);
    $4_1 = $15_1 + (($4_1 | 0) == 32 ? $9 : $4_1) | 0;
    $1766($12_1 - -64 | 0, $5_1, $6_1, $7_1, $14, $4_1 - 15 | 0);
    $36_1 = ($36_1 - $4_1 | 0) + 16 | 0;
    $4_1 = $12_1 + 72 | 0;
    $7_1 = HEAP32[$4_1 >> 2];
    $14 = HEAP32[$4_1 + 4 >> 2];
    $5_1 = HEAP32[$12_1 + 64 >> 2];
    $6_1 = HEAP32[$12_1 + 68 >> 2];
   }
   $4_1 = $6_1 << 15 | $5_1 >>> 17;
   $8 = $5_1 << 15;
   $5_1 = 0;
   $20_1 = $8 & -32768;
   $37 = $2_1;
   $19 = __wasm_i64_mul($20_1, $5_1, $2_1, 0);
   $5_1 = i64toi32_i32$HIGH_BITS;
   $25_1 = $5_1;
   $38_1 = $4_1;
   $23_1 = $1_1;
   $1_1 = __wasm_i64_mul($4_1, 0, $1_1, 0);
   $8 = $1_1 + $19 | 0;
   $5_1 = i64toi32_i32$HIGH_BITS + $5_1 | 0;
   $5_1 = $1_1 >>> 0 > $8 >>> 0 ? $5_1 + 1 | 0 : $5_1;
   $2_1 = 0;
   $1_1 = __wasm_i64_mul($20_1, $21_1, $23_1, $21_1);
   $16_1 = $2_1 + $1_1 | 0;
   $4_1 = $8;
   $9 = $4_1 + i64toi32_i32$HIGH_BITS | 0;
   $9 = $1_1 >>> 0 > $16_1 >>> 0 ? $9 + 1 | 0 : $9;
   $15_1 = $9;
   $22_1 = ($4_1 | 0) == ($9 | 0) & $2_1 >>> 0 > $16_1 >>> 0 | $4_1 >>> 0 > $9 >>> 0;
   $39_1 = $3;
   $27_1 = __wasm_i64_mul($20_1, $21_1, $3, 0);
   $40_1 = i64toi32_i32$HIGH_BITS;
   $1_1 = __wasm_i64_mul($38_1, $24, $37, $24);
   $18_1 = $1_1 + $27_1 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $40_1 | 0;
   $9 = $1_1 >>> 0 > $18_1 >>> 0 ? $9 + 1 | 0 : $9;
   $10_1 = $9;
   $1_1 = $14 << 15 | $7_1 >>> 17;
   $28_1 = $7_1 << 15 | $6_1 >>> 17;
   $3 = __wasm_i64_mul($28_1, 0, $23_1, $21_1);
   $29_1 = $3 + $18_1 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $3 >>> 0 > $29_1 >>> 0 ? $9 + 1 | 0 : $9;
   $30 = $9;
   $3 = $9;
   $2_1 = 0;
   $9 = ($5_1 | 0) == ($25_1 | 0) & $4_1 >>> 0 < $19 >>> 0 | $5_1 >>> 0 < $25_1 >>> 0;
   $31_1 = $5_1 + $29_1 | 0;
   $4_1 = ($2_1 | $9) + $3 | 0;
   $4_1 = $5_1 >>> 0 > $31_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
   $8 = $4_1;
   $6_1 = $31_1;
   $32_1 = $26_1 | 65536;
   $26_1 = __wasm_i64_mul($20_1, $21_1, $32_1, $11_1);
   $41_1 = i64toi32_i32$HIGH_BITS;
   $3 = __wasm_i64_mul($38_1, $24, $39_1, $11_1);
   $33_1 = $3 + $26_1 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $41_1 | 0;
   $9 = $3 >>> 0 > $33_1 >>> 0 ? $9 + 1 | 0 : $9;
   $7_1 = $9;
   $34_1 = $1_1 | -2147483648;
   $1_1 = __wasm_i64_mul($34_1, 0, $23_1, $21_1);
   $20_1 = $1_1 + $33_1 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $9 = $1_1 >>> 0 > $20_1 >>> 0 ? $9 + 1 | 0 : $9;
   $1_1 = __wasm_i64_mul($28_1, $11_1, $37, $24);
   $25_1 = $1_1 + $20_1 | 0;
   $35_1 = $9;
   $5_1 = $9 + i64toi32_i32$HIGH_BITS | 0;
   $19 = $1_1 >>> 0 > $25_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
   $1_1 = 0;
   $23_1 = $1_1 + $6_1 | 0;
   $9 = $4_1 + $25_1 | 0;
   $21_1 = $1_1 >>> 0 > $23_1 >>> 0 ? $9 + 1 | 0 : $9;
   $4_1 = $21_1;
   $1_1 = $22_1 + $23_1 | 0;
   $2_1 = $1_1 >>> 0 < $23_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
   $22_1 = (($42_1 + $43_1 | 0) + $36_1 | 0) - 16383 | 0;
   $4_1 = __wasm_i64_mul($34_1, $11_1, $37, $24);
   $6_1 = i64toi32_i32$HIGH_BITS;
   $5_1 = __wasm_i64_mul($38_1, $24, $32_1, $11_1);
   $3 = $5_1 + $4_1 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $6_1 | 0;
   $9 = $3 >>> 0 < $5_1 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = ($6_1 | 0) == ($9 | 0) & $3 >>> 0 < $4_1 >>> 0 | $6_1 >>> 0 > $9 >>> 0;
   $6_1 = __wasm_i64_mul($28_1, $11_1, $39_1, $11_1);
   $4_1 = $6_1 + $3 | 0;
   $5_1 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $5_1 = $4_1 >>> 0 < $6_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
   $6_1 = $5_1;
   $3 = ($9 | 0) == ($5_1 | 0) & $3 >>> 0 > $4_1 >>> 0 | $5_1 >>> 0 < $9 >>> 0;
   $9 = 0;
   $5_1 = $3;
   $3 = $3 + $14 | 0;
   $9 = $5_1 >>> 0 > $3 >>> 0 ? 1 : $9;
   $5_1 = $3;
   $3 = __wasm_i64_mul($34_1, $11_1, $32_1, $11_1);
   $5_1 = $5_1 + $3 | 0;
   $9 = i64toi32_i32$HIGH_BITS + $9 | 0;
   $24 = $5_1;
   $3 = $3 >>> 0 > $5_1 >>> 0 ? $9 + 1 | 0 : $9;
   $9 = ($10_1 | 0) == ($40_1 | 0) & $18_1 >>> 0 < $27_1 >>> 0 | $10_1 >>> 0 < $40_1 >>> 0;
   $5_1 = 0;
   $10_1 = ($10_1 | 0) == ($30 | 0) & $18_1 >>> 0 > $29_1 >>> 0 | $10_1 >>> 0 > $30 >>> 0;
   $14 = $10_1;
   $10_1 = $9 + $10_1 | 0;
   $9 = ($14 >>> 0 > $10_1 >>> 0 ? 1 : $5_1) + $6_1 | 0;
   $5_1 = $4_1 + $10_1 | 0;
   $9 = $5_1 >>> 0 < $10_1 >>> 0 ? $9 + 1 | 0 : $9;
   $14 = $9;
   $27_1 = $5_1;
   $4_1 = ($6_1 | 0) == ($9 | 0) & $4_1 >>> 0 > $5_1 >>> 0 | $6_1 >>> 0 > $9 >>> 0;
   $9 = $3;
   $3 = $4_1 + $24 | 0;
   $9 = $3 >>> 0 < $4_1 >>> 0 ? $9 + 1 | 0 : $9;
   $10_1 = $3;
   $5_1 = __wasm_i64_mul($28_1, $11_1, $32_1, $11_1);
   $18_1 = i64toi32_i32$HIGH_BITS;
   $3 = __wasm_i64_mul($34_1, $11_1, $39_1, $11_1);
   $6_1 = $3 + $5_1 | 0;
   $4_1 = i64toi32_i32$HIGH_BITS + $18_1 | 0;
   $4_1 = $3 >>> 0 > $6_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
   $9 = (($18_1 | 0) == ($4_1 | 0) & $5_1 >>> 0 > $6_1 >>> 0 | $4_1 >>> 0 < $18_1 >>> 0) + $9 | 0;
   $10_1 = $4_1 + $10_1 | 0;
   $18_1 = $10_1;
   $5_1 = $10_1 >>> 0 < $4_1 >>> 0 ? $9 + 1 | 0 : $9;
   $3 = 0;
   $11_1 = $3 + $27_1 | 0;
   $9 = $6_1 + $14 | 0;
   $4_1 = $5_1;
   $9 = $3 >>> 0 > $11_1 >>> 0 ? $9 + 1 | 0 : $9;
   $10_1 = $9;
   $3 = ($14 | 0) == ($9 | 0) & $11_1 >>> 0 < $27_1 >>> 0 | $9 >>> 0 < $14 >>> 0;
   $5_1 = $3;
   $3 = $3 + $18_1 | 0;
   $4_1 = $5_1 >>> 0 > $3 >>> 0 ? $4_1 + 1 | 0 : $4_1;
   $14 = $3;
   $3 = $4_1;
   $6_1 = $19;
   $4_1 = 0;
   $5_1 = ($7_1 | 0) == ($41_1 | 0) & $26_1 >>> 0 > $33_1 >>> 0 | $7_1 >>> 0 < $41_1 >>> 0;
   $7_1 = ($7_1 | 0) == ($35_1 | 0) & $20_1 >>> 0 < $33_1 >>> 0 | $7_1 >>> 0 > $35_1 >>> 0;
   $5_1 = $5_1 + $7_1 | 0;
   $7_1 = ($6_1 | 0) == ($35_1 | 0) & $20_1 >>> 0 > $25_1 >>> 0 | $6_1 >>> 0 < $35_1 >>> 0;
   $5_1 = $5_1 + $7_1 | 0;
   $7_1 = $6_1;
   $6_1 = $6_1 + $11_1 | 0;
   $4_1 = ($4_1 | $5_1) + $10_1 | 0;
   $9 = $3;
   $4_1 = $6_1 >>> 0 < $7_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
   $7_1 = $4_1;
   $4_1 = ($10_1 | 0) == ($4_1 | 0) & $6_1 >>> 0 < $11_1 >>> 0 | $4_1 >>> 0 < $10_1 >>> 0;
   $3 = $4_1 + $14 | 0;
   $9 = $4_1 >>> 0 > $3 >>> 0 ? $9 + 1 | 0 : $9;
   $11_1 = $3;
   $5_1 = $9;
   $9 = 0;
   $4_1 = ($8 | 0) == ($21_1 | 0) & $23_1 >>> 0 < $31_1 >>> 0 | $8 >>> 0 > $21_1 >>> 0;
   $3 = $4_1 + (($8 | 0) == ($30 | 0) & $29_1 >>> 0 > $31_1 >>> 0 | $8 >>> 0 < $30 >>> 0) | 0;
   $4_1 = ($4_1 >>> 0 > $3 >>> 0 ? 1 : $9) + $7_1 | 0;
   $9 = $5_1;
   $5_1 = $3;
   $3 = $3 + $6_1 | 0;
   $4_1 = $5_1 >>> 0 > $3 >>> 0 ? $4_1 + 1 | 0 : $4_1;
   $6_1 = ($7_1 | 0) == ($4_1 | 0) & $3 >>> 0 < $6_1 >>> 0 | $4_1 >>> 0 < $7_1 >>> 0;
   $7_1 = $6_1 + $11_1 | 0;
   $9 = $6_1 >>> 0 > $7_1 >>> 0 ? $9 + 1 | 0 : $9;
   $8 = $9;
   label$13 : {
    if ($9 & 65536) {
     $22_1 = $22_1 + 1 | 0;
     break label$13;
    }
    $11_1 = $15_1 >>> 31 | 0;
    $5_1 = 0;
    $9 = $8 << 1 | $7_1 >>> 31;
    $7_1 = $7_1 << 1 | $4_1 >>> 31;
    $8 = $9;
    $9 = $4_1 << 1 | $3 >>> 31;
    $3 = $3 << 1 | $2_1 >>> 31;
    $4_1 = $9;
    $9 = $15_1 << 1 | $16_1 >>> 31;
    $16_1 = $16_1 << 1;
    $15_1 = $9;
    $9 = $2_1 << 1 | $1_1 >>> 31;
    $1_1 = $1_1 << 1 | $11_1;
    $2_1 = $5_1 | $9;
   }
   if (($22_1 | 0) >= 32767) {
    $13 = $13 | 2147418112;
    $1_1 = 0;
    $2_1 = 0;
    break label$1;
   }
   label$16 : {
    if (($22_1 | 0) <= 0) {
     $6_1 = 1 - $22_1 | 0;
     if ($6_1 >>> 0 <= 127) {
      $9 = $12_1 + 48 | 0;
      $5_1 = $22_1 + 127 | 0;
      $1766($9, $16_1, $15_1, $1_1, $2_1, $5_1);
      $11_1 = $12_1 + 32 | 0;
      $1766($11_1, $3, $4_1, $7_1, $8, $5_1);
      $5_1 = $12_1 + 16 | 0;
      $1776($5_1, $16_1, $15_1, $1_1, $2_1, $6_1);
      $1776($12_1, $3, $4_1, $7_1, $8, $6_1);
      $1_1 = $9 + 8 | 0;
      $16_1 = HEAP32[$12_1 + 32 >> 2] | HEAP32[$12_1 + 16 >> 2] | (HEAP32[$12_1 + 48 >> 2] | HEAP32[$1_1 >> 2] | (HEAP32[$12_1 + 52 >> 2] | HEAP32[$1_1 + 4 >> 2])) != 0;
      $15_1 = HEAP32[$12_1 + 36 >> 2] | HEAP32[$12_1 + 20 >> 2];
      $3 = $11_1 + 8 | 0;
      $2_1 = $5_1 + 8 | 0;
      $1_1 = HEAP32[$3 >> 2] | HEAP32[$2_1 >> 2];
      $2_1 = HEAP32[$3 + 4 >> 2] | HEAP32[$2_1 + 4 >> 2];
      $3 = $12_1 + 8 | 0;
      $7_1 = HEAP32[$3 >> 2];
      $8 = HEAP32[$3 + 4 >> 2];
      $3 = HEAP32[$12_1 >> 2];
      $4_1 = HEAP32[$12_1 + 4 >> 2];
      break label$16;
     }
     $1_1 = 0;
     $2_1 = 0;
     break label$1;
    }
    $8 = $8 & 65535 | $22_1 << 16;
   }
   $17_1 = $7_1 | $17_1;
   $13 = $8 | $13;
   if (!(!$1_1 & ($2_1 | 0) == -2147483648 ? !($16_1 | $15_1) : ($2_1 | 0) >= 0)) {
    $1_1 = $3 + 1 | 0;
    $4_1 = $1_1 ? $4_1 : $4_1 + 1 | 0;
    $2_1 = $4_1;
    $3 = !($4_1 | $1_1);
    $4_1 = $13;
    $17_1 = $3 + $17_1 | 0;
    $13 = $17_1 >>> 0 < $3 >>> 0 ? $4_1 + 1 | 0 : $4_1;
    break label$1;
   }
   if ($1_1 | $16_1 | ($2_1 ^ -2147483648 | $15_1)) {
    $1_1 = $3;
    $2_1 = $4_1;
    break label$1;
   }
   $9 = $13;
   $1_1 = $3 & 1;
   $2_1 = $1_1;
   $1_1 = $1_1 + $3 | 0;
   $2_1 = $2_1 >>> 0 > $1_1 >>> 0 ? $4_1 + 1 | 0 : $4_1;
   $3 = ($4_1 | 0) == ($2_1 | 0) & $1_1 >>> 0 < $3 >>> 0 | $2_1 >>> 0 < $4_1 >>> 0;
   $17_1 = $3 + $17_1 | 0;
   $13 = $3 >>> 0 > $17_1 >>> 0 ? $9 + 1 | 0 : $9;
  }
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 + 8 >> 2] = $17_1;
  HEAP32[$0_1 + 12 >> 2] = $13;
  global$0 = $12_1 + 96 | 0;
 }
 
 function $1778($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0, $10_1 = 0, $11_1 = 0;
  $8 = __wasm_i64_mul($7_1, $8, $1_1, $2_1);
  $7_1 = i64toi32_i32$HIGH_BITS;
  $3 = __wasm_i64_mul($3, $4_1, $5_1, $6_1);
  $8 = $3 + $8 | 0;
  $4_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
  $4_1 = $3 >>> 0 > $8 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $9 = $6_1;
  $3 = 0;
  $7_1 = $8;
  $8 = $2_1;
  $6_1 = 0;
  $2_1 = __wasm_i64_mul($9, $3, $8, $6_1);
  $3 = $7_1 + $2_1 | 0;
  $7_1 = i64toi32_i32$HIGH_BITS + $4_1 | 0;
  $10_1 = $3;
  $4_1 = $2_1 >>> 0 > $3 >>> 0 ? $7_1 + 1 | 0 : $7_1;
  $2_1 = $5_1;
  $3 = $1_1;
  $5_1 = __wasm_i64_mul($2_1, 0, $3, 0);
  $1_1 = i64toi32_i32$HIGH_BITS;
  $7_1 = 0;
  $8 = __wasm_i64_mul($2_1, $7_1, $8, $6_1);
  $1_1 = $1_1 + $8 | 0;
  $2_1 = i64toi32_i32$HIGH_BITS + $7_1 | 0;
  $2_1 = $1_1 >>> 0 < $8 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  $8 = $2_1 + $10_1 | 0;
  $2_1 = $2_1 >>> 0 > $8 >>> 0 ? $4_1 + 1 | 0 : $4_1;
  $4_1 = __wasm_i64_mul($9, $6_1, $3, $11_1);
  $1_1 = $4_1 + $1_1 | 0;
  $3 = i64toi32_i32$HIGH_BITS;
  $6_1 = $1_1 >>> 0 < $4_1 >>> 0 ? $3 + 1 | 0 : $3;
  $8 = $6_1 + $8 | 0;
  HEAP32[$0_1 + 8 >> 2] = $8;
  HEAP32[$0_1 + 12 >> 2] = $6_1 >>> 0 > $8 >>> 0 ? $2_1 + 1 | 0 : $2_1;
  HEAP32[$0_1 >> 2] = $5_1;
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $1779($0_1, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8) {
  var $9 = 0;
  $9 = global$0 - 16 | 0;
  global$0 = $9;
  $1765($9, $1_1, $2_1, $3, $4_1, $5_1, $6_1, $7_1, $8 ^ -2147483648);
  $1_1 = HEAP32[$9 >> 2];
  $2_1 = HEAP32[$9 + 4 >> 2];
  $3 = $9 + 8 | 0;
  $4_1 = HEAP32[$3 + 4 >> 2];
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$3 >> 2];
  HEAP32[$0_1 + 12 >> 2] = $4_1;
  HEAP32[$0_1 >> 2] = $1_1;
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  global$0 = $9 + 16 | 0;
 }
 
 function $1780($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $7_1 = global$0 - 32 | 0;
  global$0 = $7_1;
  $4_1 = $3 & 2147483647;
  $6_1 = $4_1;
  $5_1 = $4_1 - 1140785152 | 0;
  $4_1 = $4_1 - 1006698496 | 0;
  label$1 : {
   if (!(($4_1 | 0) == ($5_1 | 0) | $5_1 >>> 0 < $4_1 >>> 0)) {
    $4_1 = $2_1 << 4 | $1_1 >>> 28;
    $2_1 = $3 << 4 | $2_1 >>> 28;
    $1_1 = $1_1 & 268435455;
    if (!(!$0_1 & ($1_1 | 0) == 134217728 | $1_1 >>> 0 < 134217728)) {
     $5_1 = $2_1 + 1073741824 | 0;
     $4_1 = $4_1 + 1 | 0;
     $5_1 = $4_1 ? $5_1 : $5_1 + 1 | 0;
     break label$1;
    }
    $5_1 = $2_1 + 1073741824 | 0;
    if ($0_1 | ($1_1 | 0) != 134217728) {
     break label$1
    }
    $0_1 = $4_1 & 1;
    $4_1 = $0_1 + $4_1 | 0;
    $5_1 = $0_1 >>> 0 > $4_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
    break label$1;
   }
   if (!(!$2_1 & ($6_1 | 0) == 2147418112 ? !($0_1 | $1_1) : $6_1 >>> 0 < 2147418112)) {
    $4_1 = $2_1 << 4 | $1_1 >>> 28;
    $5_1 = ($3 << 4 | $2_1 >>> 28) & 524287 | 2146959360;
    break label$1;
   }
   $4_1 = 0;
   $5_1 = 2146435072;
   if ($6_1 >>> 0 > 1140785151) {
    break label$1
   }
   $5_1 = 0;
   $6_1 = $6_1 >>> 16 | 0;
   if ($6_1 >>> 0 < 15249) {
    break label$1
   }
   $8 = $7_1 + 16 | 0;
   $4_1 = $3 & 65535 | 65536;
   $1766($8, $0_1, $1_1, $2_1, $4_1, $6_1 - 15233 | 0);
   $1776($7_1, $0_1, $1_1, $2_1, $4_1, 15361 - $6_1 | 0);
   $2_1 = HEAP32[$7_1 >> 2];
   $1_1 = HEAP32[$7_1 + 4 >> 2];
   $6_1 = $1_1;
   $4_1 = $1_1 >>> 28 | 0;
   $0_1 = $7_1 + 8 | 0;
   $1_1 = HEAP32[$0_1 >> 2];
   $4_1 = $4_1 | $1_1 << 4;
   $5_1 = HEAP32[$0_1 + 4 >> 2] << 4 | $1_1 >>> 28 | $5_1;
   $0_1 = $8 + 8 | 0;
   $1_1 = (HEAP32[$7_1 + 16 >> 2] | HEAP32[$0_1 >> 2] | (HEAP32[$7_1 + 20 >> 2] | HEAP32[$0_1 + 4 >> 2])) != 0 | $2_1;
   $0_1 = $6_1 & 268435455;
   if (!(!$1_1 & ($0_1 | 0) == 134217728 | $0_1 >>> 0 < 134217728)) {
    $4_1 = $4_1 + 1 | 0;
    $5_1 = $4_1 ? $5_1 : $5_1 + 1 | 0;
    break label$1;
   }
   if ($1_1 | ($0_1 | 0) != 134217728) {
    break label$1
   }
   $0_1 = $4_1;
   $4_1 = $4_1 + ($4_1 & 1) | 0;
   $5_1 = $0_1 >>> 0 > $4_1 >>> 0 ? $5_1 + 1 | 0 : $5_1;
  }
  global$0 = $7_1 + 32 | 0;
  wasm2js_scratch_store_i32(0, $4_1 | 0);
  wasm2js_scratch_store_i32(1, $3 & -2147483648 | $5_1);
  return +wasm2js_scratch_load_f64();
 }
 
 function $1782($0_1) {
  var $1_1 = 0;
  $0_1 = $0_1 >>> 0 <= 1 ? 1 : $0_1;
  label$1 : {
   while (1) {
    $1_1 = $1755($0_1);
    if ($1_1) {
     break label$1
    }
    $1_1 = HEAP32[24410];
    if ($1_1) {
     FUNCTION_TABLE[$1_1 | 0]();
     continue;
    }
    break;
   };
   fimport$38();
   wasm2js_trap();
  }
  return $1_1;
 }
 
 function $1786($0_1) {
  $1756($0_1);
 }
 
 function $1788($0_1) {
  HEAP32[$0_1 >> 2] = 73024;
  return $0_1;
 }
 
 function $1794($0_1) {
  return HEAPU8[$0_1 + 11 | 0] >>> 7 | 0;
 }
 
 function $1797($0_1) {
  if ($1794($0_1)) {
   return HEAP32[$0_1 + 4 >> 2]
  }
  return HEAPU8[$0_1 + 11 | 0] & 127;
 }
 
 function $1798($0_1) {
  if ($1794($0_1)) {
   $0_1 = (HEAP32[$0_1 + 8 >> 2] & 2147483647) - 1 | 0
  } else {
   $0_1 = 10
  }
  return $0_1;
 }
 
 function $1799($0_1) {
  if ($1794($0_1)) {
   return HEAP32[$0_1 >> 2]
  }
  return $0_1;
 }
 
 function $1812($0_1, $1_1) {
  HEAP8[$0_1 | 0] = HEAPU8[$1_1 | 0];
 }
 
 function $1814($0_1, $1_1) {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  global$0 = $2_1 + 16 | 0;
  return HEAPU32[$0_1 >> 2] < HEAPU32[$1_1 >> 2] ? $1_1 : $0_1;
 }
 
 function $1815($0_1) {
  var $1_1 = 0;
  if ($0_1 >>> 0 >= 11) {
   $1_1 = $0_1 + 16 & -16;
   $0_1 = $1_1 - 1 | 0;
   $0_1 = ($0_1 | 0) == 11 ? $1_1 : $0_1;
  } else {
   $0_1 = 10
  }
  return $0_1;
 }
 
 function $1817($0_1, $1_1, $2_1) {
  $1_1 = $1782($2_1);
  HEAP32[$0_1 + 4 >> 2] = $2_1;
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1820($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 16 | 0;
  global$0 = $5_1;
  $3 = global$0 - 32 | 0;
  global$0 = $3;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[$4_1 + 12 >> 2] = $1_1;
  HEAP32[$4_1 + 8 >> 2] = $1_1 + $2_1;
  $1863($3 + 24 | 0, $4_1 + 12 | 0, $4_1 + 8 | 0);
  global$0 = $4_1 + 16 | 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $7_1 = HEAP32[$3 + 28 >> 2];
  $4_1 = HEAP32[$3 + 24 >> 2];
  $6_1 = $7_1 - $4_1 | 0;
  if (($4_1 | 0) != ($7_1 | 0)) {
   $1603($0_1, $4_1, $6_1)
  }
  HEAP32[$2_1 + 12 >> 2] = $4_1 + $6_1;
  HEAP32[$2_1 + 8 >> 2] = $0_1 + $6_1;
  $1860($3 + 16 | 0, $2_1 + 12 | 0, $2_1 + 8 | 0);
  global$0 = $2_1 + 16 | 0;
  HEAP32[$3 + 12 >> 2] = $1859($1_1, HEAP32[$3 + 16 >> 2]);
  HEAP32[$3 + 8 >> 2] = $1859($0_1, HEAP32[$3 + 20 >> 2]);
  $1860($5_1 + 8 | 0, $3 + 12 | 0, $3 + 8 | 0);
  global$0 = $3 + 32 | 0;
  global$0 = $5_1 + 16 | 0;
 }
 
 function $1822($0_1, $1_1) {
  HEAP32[$0_1 >> 2] = $1_1;
 }
 
 function $1823($0_1, $1_1) {
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] & -2147483648 | $1_1 & 2147483647;
  HEAP32[$0_1 + 8 >> 2] = HEAP32[$0_1 + 8 >> 2] | -2147483648;
 }
 
 function $1824($0_1, $1_1) {
  HEAP32[$0_1 + 4 >> 2] = $1_1;
 }
 
 function $1826($0_1, $1_1) {
  HEAP8[$0_1 + 11 | 0] = HEAPU8[$0_1 + 11 | 0] & 128 | $1_1;
  HEAP8[$0_1 + 11 | 0] = HEAPU8[$0_1 + 11 | 0] & 127;
 }
 
 function $1840($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0;
  $3 = global$0 - 16 | 0;
  global$0 = $3;
  HEAP32[$3 + 12 >> 2] = $1_1;
  if ($1_1 >>> 0 <= 2147483631) {
   label$2 : {
    if ($1798($0_1) >>> 0 >= $1_1 >>> 0) {
     break label$2
    }
    HEAP32[$3 + 8 >> 2] = $1797($0_1);
    $1_1 = $1815(HEAP32[$1814($3 + 12 | 0, $3 + 8 | 0) >> 2]);
    if (($1798($0_1) | 0) == ($1_1 | 0)) {
     break label$2
    }
    $2_1 = global$0 - 16 | 0;
    global$0 = $2_1;
    $4_1 = $1798($0_1);
    $7_1 = $1797($0_1);
    $8 = $1_1 >>> 0 < 11;
    label$1 : {
     label$20 : {
      if ($8) {
       $4_1 = 1;
       $5_1 = $1_1 + 1 | 0;
       $1_1 = $0_1;
       $6_1 = HEAP32[$0_1 >> 2];
       break label$20;
      }
      label$4 : {
       if ($1_1 >>> 0 > $4_1 >>> 0) {
        $1817($2_1 + 8 | 0, $0_1, $1_1 + 1 | 0);
        $1_1 = HEAP32[$2_1 + 8 >> 2];
        $5_1 = HEAP32[$2_1 + 12 >> 2];
        break label$4;
       }
       $1817($2_1 + 8 | 0, $0_1, $1_1 + 1 | 0);
       $1_1 = HEAP32[$2_1 + 8 >> 2];
       if (!$1_1) {
        break label$1
       }
       $5_1 = HEAP32[$2_1 + 12 >> 2];
      }
      $4_1 = $1794($0_1);
      $6_1 = $1799($0_1);
     }
     $1820($1_1, $6_1, $1797($0_1) + 1 | 0);
     if ($4_1) {
      $1756($6_1)
     }
     label$7 : {
      if (!$8) {
       $1823($0_1, $5_1);
       $1824($0_1, $7_1);
       $1822($0_1, $1_1);
       break label$7;
      }
      $1826($0_1, $7_1);
     }
    }
    global$0 = $2_1 + 16 | 0;
   }
   global$0 = $3 + 16 | 0;
   return;
  }
  $774();
  wasm2js_trap();
 }
 
 function $1859($0_1, $1_1) {
  return ($1_1 - $0_1 | 0) + $0_1 | 0;
 }
 
 function $1860($0_1, $1_1, $2_1) {
  $1863($0_1, $1_1, $2_1);
 }
 
 function $1863($0_1, $1_1, $2_1) {
  HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2];
  HEAP32[$0_1 + 4 >> 2] = HEAP32[$2_1 >> 2];
 }
 
 function $1876($0_1) {
  return $1755($0_1 + 80 | 0) + 80 | 0;
 }
 
 function $1887($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $1888($0_1, $1_1, 0) | 0;
 }
 
 function $1888($0_1, $1_1, $2_1) {
  if (!$2_1) {
   return HEAP32[$0_1 + 4 >> 2] == HEAP32[$1_1 + 4 >> 2]
  }
  if (($0_1 | 0) == ($1_1 | 0)) {
   return 1
  }
  return !$1695(HEAP32[$0_1 + 4 >> 2], HEAP32[$1_1 + 4 >> 2]);
 }
 
 function $1890($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0;
  $3 = global$0 + -64 | 0;
  global$0 = $3;
  $4_1 = 1;
  label$1 : {
   if ($1888($0_1, $1_1, 0)) {
    break label$1
   }
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $1_1 = $1891($1_1, 72304);
   $4_1 = 0;
   if (!$1_1) {
    break label$1
   }
   $1604($3 + 12 | 0, 0, 52);
   HEAP32[$3 + 56 >> 2] = 1;
   HEAP32[$3 + 20 >> 2] = -1;
   HEAP32[$3 + 16 >> 2] = $0_1;
   HEAP32[$3 + 8 >> 2] = $1_1;
   FUNCTION_TABLE[HEAP32[HEAP32[$1_1 >> 2] + 28 >> 2]]($1_1, $3 + 8 | 0, HEAP32[$2_1 >> 2], 1);
   $0_1 = HEAP32[$3 + 32 >> 2];
   if (($0_1 | 0) == 1) {
    HEAP32[$2_1 >> 2] = HEAP32[$3 + 24 >> 2]
   }
   $4_1 = ($0_1 | 0) == 1;
  }
  $0_1 = $4_1;
  global$0 = $3 - -64 | 0;
  return $0_1 | 0;
 }
 
 function $1891($0_1, $1_1) {
  var $2_1 = 0, $3 = 0, $4_1 = 0, $5_1 = 0;
  $2_1 = global$0 + -64 | 0;
  global$0 = $2_1;
  $3 = HEAP32[$0_1 >> 2];
  $4_1 = HEAP32[$3 - 4 >> 2];
  $5_1 = HEAP32[$3 - 8 >> 2];
  $3 = $2_1 + 32 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2_1 + 40 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2_1 + 48 | 0;
  HEAP32[$3 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  $3 = $2_1 + 55 | 0;
  HEAP8[$3 | 0] = 0;
  HEAP8[$3 + 1 | 0] = 0;
  HEAP8[$3 + 2 | 0] = 0;
  HEAP8[$3 + 3 | 0] = 0;
  HEAP8[$3 + 4 | 0] = 0;
  HEAP8[$3 + 5 | 0] = 0;
  HEAP8[$3 + 6 | 0] = 0;
  HEAP8[$3 + 7 | 0] = 0;
  HEAP32[$2_1 + 24 >> 2] = 0;
  HEAP32[$2_1 + 28 >> 2] = 0;
  HEAP32[$2_1 + 20 >> 2] = 0;
  HEAP32[$2_1 + 16 >> 2] = 72256;
  HEAP32[$2_1 + 12 >> 2] = $0_1;
  HEAP32[$2_1 + 8 >> 2] = $1_1;
  $0_1 = $0_1 + $5_1 | 0;
  $3 = 0;
  label$1 : {
   if ($1888($4_1, $1_1, 0)) {
    HEAP32[$2_1 + 56 >> 2] = 1;
    FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 20 >> 2]]($4_1, $2_1 + 8 | 0, $0_1, $0_1, 1, 0);
    $3 = HEAP32[$2_1 + 32 >> 2] == 1 ? $0_1 : 0;
    break label$1;
   }
   FUNCTION_TABLE[HEAP32[HEAP32[$4_1 >> 2] + 24 >> 2]]($4_1, $2_1 + 8 | 0, $0_1, 1, 0);
   label$3 : {
    switch (HEAP32[$2_1 + 44 >> 2]) {
    case 0:
     $3 = HEAP32[$2_1 + 48 >> 2] == 1 ? (HEAP32[$2_1 + 36 >> 2] == 1 ? (HEAP32[$2_1 + 40 >> 2] == 1 ? HEAP32[$2_1 + 28 >> 2] : 0) : 0) : 0;
     break label$1;
    case 1:
     break label$3;
    default:
     break label$1;
    };
   }
   if (HEAP32[$2_1 + 48 >> 2] | HEAP32[$2_1 + 36 >> 2] != 1 | HEAP32[$2_1 + 40 >> 2] != 1 ? HEAP32[$2_1 + 32 >> 2] != 1 : 0) {
    break label$1
   }
   $3 = HEAP32[$2_1 + 24 >> 2];
  }
  global$0 = $2_1 - -64 | 0;
  return $3;
 }
 
 function $1892($0_1, $1_1, $2_1) {
  var $3 = 0;
  $3 = HEAP32[$0_1 + 16 >> 2];
  if (!$3) {
   HEAP32[$0_1 + 36 >> 2] = 1;
   HEAP32[$0_1 + 24 >> 2] = $2_1;
   HEAP32[$0_1 + 16 >> 2] = $1_1;
   return;
  }
  label$2 : {
   if (($1_1 | 0) == ($3 | 0)) {
    if (HEAP32[$0_1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP32[$0_1 + 24 >> 2] = $2_1;
    return;
   }
   HEAP8[$0_1 + 54 | 0] = 1;
   HEAP32[$0_1 + 24 >> 2] = 2;
   HEAP32[$0_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2] + 1;
  }
 }
 
 function $1893($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  if ($1888($0_1, HEAP32[$1_1 + 8 >> 2], 0)) {
   $1892($1_1, $2_1, $3)
  }
 }
 
 function $1894($0_1, $1_1, $2_1, $3) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  if ($1888($0_1, HEAP32[$1_1 + 8 >> 2], 0)) {
   $1892($1_1, $2_1, $3);
   return;
  }
  $0_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $1_1, $2_1, $3);
 }
 
 function $1896($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $5_1 = global$0 + -64 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($1888($1_1, 72640, 0)) {
    HEAP32[$2_1 >> 2] = 0;
    $4_1 = 1;
    break label$1;
   }
   label$10 : {
    if (HEAPU8[$0_1 + 8 | 0] & 24) {
     $3 = 1
    } else {
     if (!$1_1) {
      break label$10
     }
     $3 = $1891($1_1, 72352);
     if (!$3) {
      break label$10
     }
     $3 = (HEAPU8[$3 + 8 | 0] & 24) != 0;
    }
    $6_1 = $1888($0_1, $1_1, $3);
   }
   if ($6_1) {
    $4_1 = 1;
    $0_1 = HEAP32[$2_1 >> 2];
    if (!$0_1) {
     break label$1
    }
    HEAP32[$2_1 >> 2] = HEAP32[$0_1 >> 2];
    break label$1;
   }
   label$4 : {
    if (!$1_1) {
     break label$4
    }
    $6_1 = $1891($1_1, 72400);
    if (!$6_1) {
     break label$1
    }
    $1_1 = HEAP32[$2_1 >> 2];
    if ($1_1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2]
    }
    $3 = HEAP32[$6_1 + 8 >> 2];
    $1_1 = HEAP32[$0_1 + 8 >> 2];
    if ($3 & ($1_1 ^ -1) & 7 | $1_1 & ($3 ^ -1) & 96) {
     break label$1
    }
    $4_1 = 1;
    if ($1888(HEAP32[$0_1 + 12 >> 2], HEAP32[$6_1 + 12 >> 2], 0)) {
     break label$1
    }
    if ($1888(HEAP32[$0_1 + 12 >> 2], 72608, 0)) {
     $0_1 = HEAP32[$6_1 + 12 >> 2];
     if (!$0_1) {
      break label$1
     }
     $4_1 = !$1891($0_1, 72452);
     break label$1;
    }
    $3 = HEAP32[$0_1 + 12 >> 2];
    if (!$3) {
     break label$4
    }
    $4_1 = 0;
    $1_1 = $1891($3, 72400);
    if ($1_1) {
     if (!(HEAP8[$0_1 + 8 | 0] & 1)) {
      break label$1
     }
     $0_1 = HEAP32[$6_1 + 12 >> 2];
     $2_1 = 0;
     __inlined_func$1897 : {
      label$11 : {
       while (1) {
        $4_1 = 0;
        if (!$0_1) {
         break __inlined_func$1897
        }
        $3 = $1891($0_1, 72400);
        if (!$3 | HEAP32[$3 + 8 >> 2] & (HEAP32[$1_1 + 8 >> 2] ^ -1)) {
         break label$11
        }
        $4_1 = 1;
        if ($1888(HEAP32[$1_1 + 12 >> 2], HEAP32[$3 + 12 >> 2], 0)) {
         break __inlined_func$1897
        }
        if (!(HEAP8[$1_1 + 8 | 0] & 1)) {
         break label$11
        }
        $0_1 = HEAP32[$1_1 + 12 >> 2];
        if (!$0_1) {
         break label$11
        }
        $1_1 = $1891($0_1, 72400);
        if ($1_1) {
         $0_1 = HEAP32[$3 + 12 >> 2];
         continue;
        }
        break;
       };
       $0_1 = $1891($0_1, 72512);
       if (!$0_1) {
        break label$11
       }
       $2_1 = $1898($0_1, HEAP32[$3 + 12 >> 2]);
      }
      $4_1 = $2_1;
     }
     break label$1;
    }
    $1_1 = $1891($3, 72512);
    if ($1_1) {
     if (!(HEAP8[$0_1 + 8 | 0] & 1)) {
      break label$1
     }
     $4_1 = $1898($1_1, HEAP32[$6_1 + 12 >> 2]);
     break label$1;
    }
    $1_1 = $1891($3, 72304);
    if (!$1_1) {
     break label$1
    }
    $0_1 = HEAP32[$6_1 + 12 >> 2];
    if (!$0_1) {
     break label$1
    }
    $0_1 = $1891($0_1, 72304);
    if (!$0_1) {
     break label$1
    }
    $1604($5_1 + 12 | 0, 0, 52);
    HEAP32[$5_1 + 56 >> 2] = 1;
    HEAP32[$5_1 + 20 >> 2] = -1;
    HEAP32[$5_1 + 16 >> 2] = $1_1;
    HEAP32[$5_1 + 8 >> 2] = $0_1;
    FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 28 >> 2]]($0_1, $5_1 + 8 | 0, HEAP32[$2_1 >> 2], 1);
    $0_1 = HEAP32[$5_1 + 32 >> 2];
    if (!(!HEAP32[$2_1 >> 2] | ($0_1 | 0) != 1)) {
     HEAP32[$2_1 >> 2] = HEAP32[$5_1 + 24 >> 2]
    }
    $4_1 = ($0_1 | 0) == 1;
    break label$1;
   }
   $4_1 = 0;
  }
  global$0 = $5_1 - -64 | 0;
  return $4_1 | 0;
 }
 
 function $1898($0_1, $1_1) {
  var $2_1 = 0;
  label$1 : {
   if (!$1_1) {
    break label$1
   }
   $1_1 = $1891($1_1, 72512);
   if (!$1_1 | HEAP32[$1_1 + 8 >> 2] & (HEAP32[$0_1 + 8 >> 2] ^ -1)) {
    break label$1
   }
   if (!$1888(HEAP32[$0_1 + 12 >> 2], HEAP32[$1_1 + 12 >> 2], 0)) {
    break label$1
   }
   $2_1 = $1888(HEAP32[$0_1 + 16 >> 2], HEAP32[$1_1 + 16 >> 2], 0);
  }
  return $2_1;
 }
 
 function $1899($0_1, $1_1, $2_1, $3) {
  HEAP8[$0_1 + 53 | 0] = 1;
  label$1 : {
   if (HEAP32[$0_1 + 4 >> 2] != ($2_1 | 0)) {
    break label$1
   }
   HEAP8[$0_1 + 52 | 0] = 1;
   $2_1 = HEAP32[$0_1 + 16 >> 2];
   label$2 : {
    if (!$2_1) {
     HEAP32[$0_1 + 36 >> 2] = 1;
     HEAP32[$0_1 + 24 >> 2] = $3;
     HEAP32[$0_1 + 16 >> 2] = $1_1;
     if (($3 | 0) != 1) {
      break label$1
     }
     if (HEAP32[$0_1 + 48 >> 2] == 1) {
      break label$2
     }
     break label$1;
    }
    if (($1_1 | 0) == ($2_1 | 0)) {
     $2_1 = HEAP32[$0_1 + 24 >> 2];
     if (($2_1 | 0) == 2) {
      HEAP32[$0_1 + 24 >> 2] = $3;
      $2_1 = $3;
     }
     if (HEAP32[$0_1 + 48 >> 2] != 1) {
      break label$1
     }
     if (($2_1 | 0) == 1) {
      break label$2
     }
     break label$1;
    }
    HEAP32[$0_1 + 36 >> 2] = HEAP32[$0_1 + 36 >> 2] + 1;
   }
   HEAP8[$0_1 + 54 | 0] = 1;
  }
 }
 
 function $1900($0_1, $1_1, $2_1) {
  if (!(HEAP32[$0_1 + 28 >> 2] == 1 | HEAP32[$0_1 + 4 >> 2] != ($1_1 | 0))) {
   HEAP32[$0_1 + 28 >> 2] = $2_1
  }
 }
 
 function $1901($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  if ($1888($0_1, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $1900($1_1, $2_1, $3);
   return;
  }
  label$2 : {
   if ($1888($0_1, HEAP32[$1_1 >> 2], $4_1)) {
    if (!(($2_1 | 0) != HEAP32[$1_1 + 16 >> 2] & HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0))) {
     if (($3 | 0) != 1) {
      break label$2
     }
     HEAP32[$1_1 + 32 >> 2] = 1;
     return;
    }
    HEAP32[$1_1 + 32 >> 2] = $3;
    label$6 : {
     if (HEAP32[$1_1 + 44 >> 2] == 4) {
      break label$6
     }
     HEAP16[$1_1 + 52 >> 1] = 0;
     $0_1 = HEAP32[$0_1 + 8 >> 2];
     FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, $1_1, $2_1, $2_1, 1, $4_1);
     if (HEAPU8[$1_1 + 53 | 0]) {
      HEAP32[$1_1 + 44 >> 2] = 3;
      if (!HEAPU8[$1_1 + 52 | 0]) {
       break label$6
      }
      break label$2;
     }
     HEAP32[$1_1 + 44 >> 2] = 4;
    }
    HEAP32[$1_1 + 20 >> 2] = $2_1;
    HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
    if (HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2) {
     break label$2
    }
    HEAP8[$1_1 + 54 | 0] = 1;
    return;
   }
   $0_1 = HEAP32[$0_1 + 8 >> 2];
   FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 24 >> 2]]($0_1, $1_1, $2_1, $3, $4_1);
  }
 }
 
 function $1902($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  if ($1888($0_1, HEAP32[$1_1 + 8 >> 2], $4_1)) {
   $1900($1_1, $2_1, $3);
   return;
  }
  label$2 : {
   if (!$1888($0_1, HEAP32[$1_1 >> 2], $4_1)) {
    break label$2
   }
   if (!(($2_1 | 0) != HEAP32[$1_1 + 16 >> 2] & HEAP32[$1_1 + 20 >> 2] != ($2_1 | 0))) {
    if (($3 | 0) != 1) {
     break label$2
    }
    HEAP32[$1_1 + 32 >> 2] = 1;
    return;
   }
   HEAP32[$1_1 + 20 >> 2] = $2_1;
   HEAP32[$1_1 + 32 >> 2] = $3;
   HEAP32[$1_1 + 40 >> 2] = HEAP32[$1_1 + 40 >> 2] + 1;
   if (!(HEAP32[$1_1 + 36 >> 2] != 1 | HEAP32[$1_1 + 24 >> 2] != 2)) {
    HEAP8[$1_1 + 54 | 0] = 1
   }
   HEAP32[$1_1 + 44 >> 2] = 4;
  }
 }
 
 function $1903($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  if ($1888($0_1, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $1899($1_1, $2_1, $3, $4_1);
   return;
  }
  $0_1 = HEAP32[$0_1 + 8 >> 2];
  FUNCTION_TABLE[HEAP32[HEAP32[$0_1 >> 2] + 20 >> 2]]($0_1, $1_1, $2_1, $3, $4_1, $5_1);
 }
 
 function $1904($0_1, $1_1, $2_1, $3, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  if ($1888($0_1, HEAP32[$1_1 + 8 >> 2], $5_1)) {
   $1899($1_1, $2_1, $3, $4_1)
  }
 }
 
 function $1905($0_1) {
  $0_1 = $0_1 | 0;
  if (!$0_1) {
   return 0
  }
  return ($1891($0_1, 72400) | 0) != 0 | 0;
 }
 
 function $1908($0_1) {
  $0_1 = $0_1 | 0;
  return 7399;
 }
 
 function $1911($0_1) {
  $0_1 = $0_1 | 0;
  return 13411;
 }
 
 function $1914($0_1) {
  $0_1 = $0_1 | 0;
  return 8610;
 }
 
 function $1915($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3 = 0;
  HEAP32[$0_1 >> 2] = 73136;
  $2_1 = HEAP32[$0_1 + 4 >> 2] - 12 | 0;
  $1_1 = $2_1 + 8 | 0;
  $3 = $1_1;
  $1_1 = HEAP32[$1_1 >> 2] - 1 | 0;
  HEAP32[$3 >> 2] = $1_1;
  if (($1_1 | 0) < 0) {
   $1756($2_1)
  }
  return $0_1 | 0;
 }
 
 function $1919($0_1) {
  $0_1 = $0_1 | 0;
  $1915($0_1);
  $1756($0_1);
 }
 
 function $1920($0_1) {
  $0_1 = $0_1 | 0;
  return HEAP32[$0_1 + 4 >> 2];
 }
 
 function $1924() {
  return global$0 | 0;
 }
 
 function $1925($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $1926($0_1) {
  $0_1 = $0_1 | 0;
  $0_1 = global$0 - $0_1 & -16;
  global$0 = $0_1;
  return $0_1 | 0;
 }
 
 function $1927($0_1) {
  $0_1 = $0_1 | 0;
  global$1 = $0_1;
 }
 
 function $1928() {
  return global$1 | 0;
 }
 
 function $1930($0_1, $1_1, $2_1, $3, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3 = $3 | 0;
  $4_1 = $4_1 | 0;
  $0_1 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, $3, $4_1) | 0;
  global$1 = i64toi32_i32$HIGH_BITS;
  return $0_1 | 0;
 }
 
 function $1931($0_1, $1_1, $2_1, $3) {
  fimport$39($0_1 | 0, $1_1 | 0, 8, 0, $2_1 | 0, -1, $3 | 0);
 }
 
 function __wasm_ctz_i32($0_1) {
  if ($0_1) {
   return 31 - Math_clz32($0_1 - 1 ^ $0_1) | 0
  }
  return 32;
 }
 
 function __wasm_i64_mul($0_1, $1_1, $2_1, $3) {
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0;
  $4_1 = $2_1 >>> 16 | 0;
  $5_1 = $0_1 >>> 16 | 0;
  $9 = Math_imul($4_1, $5_1);
  $6_1 = $2_1 & 65535;
  $7_1 = $0_1 & 65535;
  $8 = Math_imul($6_1, $7_1);
  $5_1 = ($8 >>> 16 | 0) + Math_imul($5_1, $6_1) | 0;
  $4_1 = ($5_1 & 65535) + Math_imul($4_1, $7_1) | 0;
  i64toi32_i32$HIGH_BITS = (Math_imul($1_1, $2_1) + $9 | 0) + Math_imul($0_1, $3) + ($5_1 >>> 16) + ($4_1 >>> 16) | 0;
  return $8 & 65535 | $4_1 << 16;
 }
 
 function __wasm_i64_udiv($0_1, $1_1, $2_1) {
  var $3 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0, $7_1 = 0, $8 = 0, $9 = 0, $10_1 = 0, $11_1 = 0;
  __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E : {
   label$1 : {
    label$2 : {
     label$3 : {
      label$4 : {
       label$5 : {
        label$6 : {
         label$7 : {
          label$9 : {
           label$11 : {
            if ($1_1) {
             if (!$2_1) {
              break label$11
             }
             break label$9;
            }
            i64toi32_i32$HIGH_BITS = 0;
            $0_1 = ($0_1 >>> 0) / ($2_1 >>> 0) | 0;
            break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
           }
           if (!$0_1) {
            break label$7
           }
           break label$6;
          }
          if (!($2_1 - 1 & $2_1)) {
           break label$5
          }
          $5_1 = (Math_clz32($2_1) + 33 | 0) - Math_clz32($1_1) | 0;
          $6_1 = 0 - $5_1 | 0;
          break label$3;
         }
         i64toi32_i32$HIGH_BITS = 0;
         $0_1 = ($1_1 >>> 0) / 0 | 0;
         break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
        }
        $3 = 32 - Math_clz32($1_1) | 0;
        if ($3 >>> 0 < 31) {
         break label$4
        }
        break label$2;
       }
       if (($2_1 | 0) == 1) {
        break label$1
       }
       $5_1 = __wasm_ctz_i32($2_1);
       $2_1 = $5_1 & 31;
       if (($5_1 & 63) >>> 0 >= 32) {
        $0_1 = $1_1 >>> $2_1 | 0
       } else {
        $3 = $1_1 >>> $2_1 | 0;
        $0_1 = ((1 << $2_1) - 1 & $1_1) << 32 - $2_1 | $0_1 >>> $2_1;
       }
       i64toi32_i32$HIGH_BITS = $3;
       break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
      }
      $5_1 = $3 + 1 | 0;
      $6_1 = 63 - $3 | 0;
     }
     $3 = $5_1 & 63;
     $4_1 = $3 & 31;
     if ($3 >>> 0 >= 32) {
      $3 = 0;
      $7_1 = $1_1 >>> $4_1 | 0;
     } else {
      $3 = $1_1 >>> $4_1 | 0;
      $7_1 = ((1 << $4_1) - 1 & $1_1) << 32 - $4_1 | $0_1 >>> $4_1;
     }
     $6_1 = $6_1 & 63;
     $4_1 = $6_1 & 31;
     if ($6_1 >>> 0 >= 32) {
      $1_1 = $0_1 << $4_1;
      $0_1 = 0;
     } else {
      $1_1 = (1 << $4_1) - 1 & $0_1 >>> 32 - $4_1 | $1_1 << $4_1;
      $0_1 = $0_1 << $4_1;
     }
     if ($5_1) {
      $6_1 = $2_1 - 1 | 0;
      $11_1 = ($6_1 | 0) == -1 ? -1 : 0;
      while (1) {
       $8 = $3 << 1 | $7_1 >>> 31;
       $3 = $7_1 << 1 | $1_1 >>> 31;
       $4_1 = $11_1 - ($8 + ($3 >>> 0 > $6_1 >>> 0) | 0) >> 31;
       $9 = $2_1 & $4_1;
       $7_1 = $3 - $9 | 0;
       $3 = $8 - ($3 >>> 0 < $9 >>> 0) | 0;
       $1_1 = $1_1 << 1 | $0_1 >>> 31;
       $0_1 = $10_1 | $0_1 << 1;
       $10_1 = $4_1 & 1;
       $5_1 = $5_1 - 1 | 0;
       if ($5_1) {
        continue
       }
       break;
      };
     }
     i64toi32_i32$HIGH_BITS = $1_1 << 1 | $0_1 >>> 31;
     $0_1 = $10_1 | $0_1 << 1;
     break __inlined_func$_ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E;
    }
    $0_1 = 0;
    $1_1 = 0;
   }
   i64toi32_i32$HIGH_BITS = $1_1;
  }
  return $0_1;
 }
 
 function __wasm_rotl_i32($0_1) {
  var $1_1 = 0;
  $1_1 = $0_1 & 31;
  $0_1 = 0 - $0_1 & 31;
  return (-1 >>> $1_1 & -2) << $1_1 | (-1 << $0_1 & -2) >>> $0_1;
 }
 
 function __wasm_rotl_i64($0_1, $1_1) {
  i64toi32_i32$HIGH_BITS = $0_1;
  return $1_1;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(imports);
 var FUNCTION_TABLE = Table([null, $4, $5, $6, $106, $107, $108, $109, $110, $166, $353, $360, $361, $436, $459, $460, $531, $532, $533, $534, $535, $596, $748, $751, $776, $762, $778, $779, $782, $783, $784, $785, $765, $786, $766, $787, $767, $788, $790, $783, $784, $785, $770, $794, $771, $772, $796, $783, $798, $799, $800, $801, $802, $803, $804, $805, $806, $807, $694, $808, $809, $810, $811, $812, $1915, $1619, $817, $783, $819, $804, $821, $822, $824, $825, $826, $827, $798, $799, $784, $785, $46, $832, $45, $833, $48, $812, $836, $783, $798, $799, $840, $801, $842, $804, $845, $783, $847, $848, $798, $799, $806, $807, $854, $783, $798, $799, $858, $804, $860, $862, $863, $864, $805, $866, $804, $868, $798, $799, $871, $872, $379, $833, $380, $874, $805, $382, $876, $877, $878, $879, $880, $881, $882, $883, $884, $885, $886, $887, $888, $889, $890, $891, $892, $893, $894, $895, $896, $897, $898, $899, $900, $901, $902, $903, $904, $905, $906, $907, $908, $909, $910, $911, $912, $913, $914, $915, $916, $917, $918, $919, $920, $921, $922, $923, $924, $925, $926, $927, $928, $898, $930, $894, $932, $872, $934, $935, $936, $937, $938, $939, $940, $941, $375, $383, $808, $384, $943, $872, $945, $946, $947, $948, $949, $923, $951, $377, $952, $957, $783, $959, $805, $806, $807, $798, $799, $822, $804, $967, $968, $423, $833, $970, $805, $973, $783, $975, $804, $977, $978, $784, $785, $982, $783, $984, $985, $804, $805, $806, $807, $798, $799, $784, $785, $994, $995, $996, $798, $799, $999, $1000, $1001, $1003, $1004, $784, $785, $1007, $805, $1009, $1010, $804, $805, $800, $801, $840, $801, $1017, $798, $799, $458, $833, $461, $1021, $848, $1023, $1024, $1025, $1026, $812, $1028, $1029, $1030, $1031, $1032, $1033, $1034, $1035, $1037, $1038, $1039, $877, $1041, $1042, $431, $833, $430, $432, $429, $434, $812, $1045, $812, $1047, $804, $1049, $1050, $1051, $1052, $1053, $1054, $1055, $1056, $1057, $806, $807, $798, $799, $1062, $1063, $804, $805, $968, $1067, $1068, $805, $1073, $783, $798, $799, $819, $804, $821, $822, $967, $1083, $1084, $798, $799, $1087, $804, $784, $785, $1091, $1092, $805, $1094, $1095, $1096, $1097, $1098, $1099, $1100, $1101, $1102, $806, $807, $1105, $1106, $1107, $1108, $1109, $1110, $1111, $1112, $1113, $1114, $1115, $1116, $1117, $1118, $1119, $1120, $1121, $1122, $1123, $1124, $1125, $1097, $1127, $1099, $1129, $1130, $1131, $1132, $1133, $1134, $7, $937, $1136, $923, $1138, $1139, $11, $833, $1141, $1142, $848, $1144, $1145, $1146, $1148, $783, $784, $785, $1087, $804, $1154, $994, $798, $799, $1158, $1159, $1160, $1161, $1162, $1163, $1107, $1165, $1166, $806, $807, $1169, $848, $1171, $1172, $826, $1174, $2, $1175, $826, $1178, $1179, $1180, $1181, $779, $826, $1184, $1185, $1186, $1187, $1188, $136, $161, $167, $1189, $1190, $1191, $1192, $1193, $1191, $1195, $1196, $363, $363, $365, $1199, $1200, $1181, $1202, $1203, $1204, $1205, $1206, $142, $1207, $1208, $211, $246, $245, $1179, $235, $234, $1210, $1211, $1212, $1213, $1214, $236, $237, $1215, $1216, $1217, $1218, $1219, $1220, $1221, $1222, $254, $255, $1223, $256, $1224, $1225, $1226, $1227, $261, $1228, $1229, $1230, $1231, $1232, $1233, $1234, $1235, $1236, $1237, $303, $304, $308, $309, $305, $306, $312, $313, $1238, $310, $311, $1239, $223, $1240, $1241, $1181, $57, $1243, $60, $1181, $228, $225, $230, $225, $289, $291, $38, $292, $232, $233, $1245, $259, $1246, $1247, $1248, $1249, $1250, $1179, $1252, $1253, $1254, $594, $276, $591, $589, $1255, $287, $288, $301, $275, $1256, $281, $282, $1257, $284, $285, $1258, $1259, $1260, $592, $259, $295, $296, $297, $1261, $269, $1262, $1263, $1264, $1265, $1266, $1267, $1268, $1269, $1270, $1271, $1272, $1273, $1274, $1275, $1276, $1277, $1278, $1279, $1280, $1281, $1282, $1283, $1205, $1285, $1277, $1287, $1288, $1289, $1290, $588, $1291, $599, $1292, $1293, $1294, $1295, $1296, $1297, $1298, $1299, $1300, $1301, $1302, $1303, $1304, $1305, $1306, $1307, $1308, $1309, $1310, $1311, $1312, $1313, $1314, $1315, $1316, $1317, $1318, $1319, $1320, $1321, $1322, $1323, $1324, $1325, $1326, $1327, $1328, $1329, $1330, $1331, $1332, $1333, $1334, $1335, $1336, $1337, $1338, $1339, $1340, $1341, $1342, $1343, $1344, $1345, $1346, $1347, $1348, $1349, $1350, $705, $1351, $1352, $1353, $1354, $1355, $1356, $1357, $1358, $1359, $1360, $1361, $1362, $716, $717, $1363, $1364, $718, $1365, $1366, $1367, $1368, $723, $1369, $1370, $1371, $1372, $1373, $1374, $1375, $1376, $1375, $1378, $1375, $1378, $1381, $1382, $733, $734, $736, $737, $1383, $740, $1384, $1385, $1333, $1387, $314, $315, $1388, $1389, $1390, $321, $1391, $1392, $319, $1393, $1394, $1395, $1396, $1397, $1398, $1399, $1400, $1401, $1402, $1403, $1404, $1405, $1406, $1222, $1408, $1409, $1410, $1411, $826, $1413, $1414, $1415, $1416, $1417, $1179, $1419, $1222, $1421, $1422, $1423, $1424, $1425, $552, $541, $1426, $545, $547, $544, $546, $542, $1427, $749, $1428, $759, $1429, $1430, $342, $1431, $344, $164, $345, $1432, $334, $1384, $1434, $335, $337, $1435, $339, $1436, $226, $227, $1437, $1438, $159, $263, $262, $89, $191, $90, $195, $200, $201, $192, $193, $194, $196, $197, $198, $199, $1439, $1440, $1441, $202, $1442, $1249, $1444, $1445, $1446, $1447, $120, $121, $1448, $1449, $1450, $1451, $1452, $1453, $1454, $1455, $217, $1456, $1457, $1458, $1459, $1460, $1461, $1462, $1463, $171, $172, $1464, $174, $175, $1465, $173, $189, $165, $176, $177, $178, $179, $1454, $1467, $1468, $184, $1469, $1470, $1471, $181, $1472, $1473, $186, $187, $188, $190, $1474, $1475, $1476, $1477, $1478, $1479, $1480, $1481, $1253, $1483, $1484, $1493, $1507, $1566, $1567, $1566, $1577, $1578, $1579, $1580, $1582, $1583, $1486, $1487, $775, $777, $781, $789, $795, $816, $823, $835, $844, $853, $861, $956, $972, $981, $1002, $1036, $1072, $1082, $1147, $1176, $953, $1489, $1490, $1491, $1492, $1494, $1495, $1491, $1492, $1498, $1499, $1500, $1501, $1502, $1503, $1504, $1505, $1506, $1509, $1510, $1508, $1511, $1513, $1514, $1512, $1515, $1517, $1518, $1516, $1519, $1521, $1522, $1520, $1523, $1525, $1526, $1524, $1527, $1529, $1530, $1528, $1531, $1533, $1534, $1532, $1535, $1552, $1553, $1555, $1557, $1559, $1561, $1563, $1565, $1569, $1570, $1571, $1572, $1574, $1575, $1520, $1523, $1581, $1588, $1616, $1617, $1618, $1620, $1686, $1691, $1692, $1734, $1735, $1739, $1751, $1619, $1786, $363, $363, $1887, $1786, $1890, $1904, $1902, $1893, $1786, $1903, $1901, $1894, $1786, $1896, $1786, $1911, $1786, $1914, $1786, $1908, $1919, $1920, $1919]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "malloc": $1755, 
  "free": $1756, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "__getTypeName": $1585, 
  "_embind_initialize_bindings": $1586, 
  "__errno_location": $1614, 
  "setTempRet0": $1927, 
  "getTempRet0": $1928, 
  "stackSave": $1924, 
  "stackRestore": $1925, 
  "stackAlloc": $1926, 
  "__cxa_is_pointer_type": $1905, 
  "dynCall_jiji": $1930
 };
}

  return asmFunc(info);
}

)(info);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module, info)
        });
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly != 'object') {
  abort('no native wasm support detected');
}

// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    // This build was created without ASSERTIONS defined.  `assert()` should not
    // ever be called in this configuration but in case there are callers in
    // the wild leave this simple abort() implemenation here for now.
    abort(text);
  }
}

// include: runtime_strings.js
// runtime_strings.js: String related runtime functions that are part of both
// MINIMAL_RUNTIME and regular runtime.

var UTF8Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * Given a pointer 'idx' to a null-terminated UTF8-encoded string in the given
 * array that contains uint8 values, returns a copy of that string as a
 * Javascript String object.
 * heapOrArray is either a regular array, or a JavaScript typed array view.
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heapOrArray, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on
  // null terminator by itself.  Also, use the length info to avoid running tiny
  // strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation,
  // so that undefined means Infinity)
  while (heapOrArray[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heapOrArray.buffer && UTF8Decoder) {
    return UTF8Decoder.decode(heapOrArray.subarray(idx, endPtr));
  }
  var str = '';
  // If building with TextDecoder, we have already computed the string length
  // above, so test loop end condition against that
  while (idx < endPtr) {
    // For UTF8 byte structure, see:
    // http://en.wikipedia.org/wiki/UTF-8#Description
    // https://www.ietf.org/rfc/rfc2279.txt
    // https://tools.ietf.org/html/rfc3629
    var u0 = heapOrArray[idx++];
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    var u1 = heapOrArray[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    var u2 = heapOrArray[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heapOrArray[idx++] & 63);
    }

    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
  return str;
}

/**
 * Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the
 * emscripten HEAP, returns a copy of that string as a Javascript String object.
 *
 * @param {number} ptr
 * @param {number=} maxBytesToRead - An optional length that specifies the
 *   maximum number of bytes to read. You can omit this parameter to scan the
 *   string until the first \0 byte. If maxBytesToRead is passed, and the string
 *   at [ptr, ptr+maxBytesToReadr[ contains a null byte in the middle, then the
 *   string will cut short at that byte index (i.e. maxBytesToRead will not
 *   produce a string of exact length [ptr, ptr+maxBytesToRead[) N.B. mixing
 *   frequent uses of UTF8ToString() with and without maxBytesToRead may throw
 *   JS JIT optimizations off, so it is worth to consider consistently using one
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

/**
 * Copies the given Javascript String object 'str' to the given byte array at
 * address 'outIdx', encoded in UTF8 form and null-terminated. The copy will
 * require at most str.length*4+1 bytes of space in the HEAP.  Use the function
 * lengthBytesUTF8 to compute the exact number of bytes (excluding null
 * terminator) that this function will write.
 *
 * @param {string} str - The Javascript string to copy.
 * @param {ArrayBufferView|Array<number>} heap - The array to copy to. Each
 *                                               index in this array is assumed
 *                                               to be one 8-byte element.
 * @param {number} outIdx - The starting offset in the array to begin the copying.
 * @param {number} maxBytesToWrite - The maximum number of bytes this function
 *                                   can write to the array.  This count should
 *                                   include the null terminator, i.e. if
 *                                   maxBytesToWrite=1, only the null terminator
 *                                   will be written and nothing else.
 *                                   maxBytesToWrite=0 does not write any bytes
 *                                   to the output, not even the null
 *                                   terminator.
 * @return {number} The number of bytes written, EXCLUDING the null terminator.
 */
function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  // Parameter maxBytesToWrite is not optional. Negative values, 0, null,
  // undefined and false each don't write out any bytes.
  if (!(maxBytesToWrite > 0))
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description
    // and https://www.ietf.org/rfc/rfc2279.txt
    // and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

/**
 * Copies the given Javascript String object 'str' to the emscripten HEAP at
 * address 'outPtr', null-terminated and encoded in UTF8 form. The copy will
 * require at most str.length*4+1 bytes of space in the HEAP.
 * Use the function lengthBytesUTF8 to compute the exact number of bytes
 * (excluding null terminator) that this function will write.
 *
 * @return {number} The number of bytes written, EXCLUDING the null terminator.
 */
function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

/**
 * Returns the number of bytes the given Javascript string takes if encoded as a
 * UTF8 byte array, EXCLUDING the null terminator byte.
 *
 * @param {string} str - JavaScript string to operator on
 * @return {number} Length, in bytes, of the UTF8 encoded string.
 */
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code
    // unit, not a Unicode code point of the character! So decode
    // UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var c = str.charCodeAt(i); // possibly a lead surrogate
    if (c <= 0x7F) {
      len++;
    } else if (c <= 0x7FF) {
      len += 2;
    } else if (c >= 0xD800 && c <= 0xDFFF) {
      len += 4; ++i;
    } else {
      len += 3;
    }
  }
  return len;
}

// end include: runtime_strings.js
// Memory management

var HEAP,
/** @type {!Int8Array} */
  HEAP8,
/** @type {!Uint8Array} */
  HEAPU8,
/** @type {!Int16Array} */
  HEAP16,
/** @type {!Uint16Array} */
  HEAPU16,
/** @type {!Int32Array} */
  HEAP32,
/** @type {!Uint32Array} */
  HEAPU32,
/** @type {!Float32Array} */
  HEAPF32,
/** @type {!Float64Array} */
  HEAPF64;

function updateMemoryViews() {
  var b = wasmMemory.buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(b);
  Module['HEAP16'] = HEAP16 = new Int16Array(b);
  Module['HEAP32'] = HEAP32 = new Int32Array(b);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(b);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(b);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(b);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(b);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(b);
}

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js
// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 16777216;

assert(INITIAL_MEMORY >= 65536, 'INITIAL_MEMORY should be larger than STACK_SIZE, was ' + INITIAL_MEMORY + '! (STACK_SIZE=' + 65536 + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

updateMemoryViews();

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = wasmMemory.buffer.byteLength;

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js
// end include: runtime_stack_check.js
// include: runtime_assertions.js
// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;

var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  runtimeInitialized = true;

  
  callRuntimeCallbacks(__ATINIT__);
}

function postRun() {

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function getUniqueRunDependency(id) {
  return id;
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

/** @param {string|number=} what */
function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  what = 'Aborted(' + what + ')';
  // TODO(sbc): Should we remove printing and leave it up to whoever
  // catches the exception?
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  what += '. Build with -sASSERTIONS for more info.';

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  // FIXME This approach does not work in Wasm EH because it currently does not assume
  // all RuntimeErrors are from traps; it decides whether a RuntimeError is from
  // a trap or not based on a hidden field within the object. So at the moment
  // we don't have a way of throwing a wasm trap from JS. TODO Make a JS API that
  // allows this in the wasm spec.

  // Suppress closure compiler warning here. Closure compiler's builtin extern
  // defintion for WebAssembly.RuntimeError claims it takes no arguments even
  // though it can.
  // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure gets fixed.
  /** @suppress {checkTypes} */
  var e = new WebAssembly.RuntimeError(what);

  readyPromiseReject(e);
  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// include: memoryprofiler.js
// end include: memoryprofiler.js
// include: URIUtils.js
// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
// include: runtime_exceptions.js
// end include: runtime_exceptions.js
var wasmBinaryFile;
  wasmBinaryFile = '<<< WASM_BINARY_FILE >>>';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    }
    throw "both async and sync fetching of the wasm failed";
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise(binaryFile) {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch == 'function'
    ) {
      return fetch(binaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + binaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(binaryFile);
      });
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(binaryFile); });
}

function instantiateArrayBuffer(binaryFile, imports, receiver) {
  return getBinaryPromise(binaryFile).then(function(binary) {
    return WebAssembly.instantiate(binary, imports);
  }).then(function (instance) {
    return instance;
  }).then(receiver, function(reason) {
    err('failed to asynchronously prepare wasm: ' + reason);

    abort(reason);
  });
}

function instantiateAsync(binary, binaryFile, imports, callback) {
  if (!binary &&
      typeof WebAssembly.instantiateStreaming == 'function' &&
      !isDataURI(binaryFile) &&
      typeof fetch == 'function') {
    return fetch(binaryFile, { credentials: 'same-origin' }).then(function(response) {
      // Suppress closure warning here since the upstream definition for
      // instantiateStreaming only allows Promise<Repsponse> rather than
      // an actual Response.
      // TODO(https://github.com/google/closure-compiler/pull/3913): Remove if/when upstream closure is fixed.
      /** @suppress {checkTypes} */
      var result = WebAssembly.instantiateStreaming(response, imports);

      return result.then(
        callback,
        function(reason) {
          // We expect the most common failure cause to be a bad MIME type for the binary,
          // in which case falling back to ArrayBuffer instantiation should work.
          err('wasm streaming compile failed: ' + reason);
          err('falling back to ArrayBuffer instantiation');
          return instantiateArrayBuffer(binaryFile, imports, callback);
        });
    });
  } else {
    return instantiateArrayBuffer(binaryFile, imports, callback);
  }
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': wasmImports,
    'wasi_snapshot_preview1': wasmImports,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');

    return exports;
  }
  // wait for the pthread pool (if any)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.
  function receiveInstantiationResult(result) {
    // 'result' is a ResultObject object which has both the module and instance.
    // receiveInstance() will swap in the exports (to Module.asm) so they can be called
    // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193, the above line no longer optimizes out down to the following line.
    // When the regression is fixed, can restore the above PTHREADS-enabled path.
    receiveInstance(result['instance']);
  }

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  // Also pthreads and wasm workers initialize the wasm instance through this path.
  if (Module['instantiateWasm']) {
    try {
      return Module['instantiateWasm'](info, receiveInstance);
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
        // If instantiation fails, reject the module ready promise.
        readyPromiseReject(e);
    }
  }

  // If instantiation fails, reject the module ready promise.
  instantiateAsync(wasmBinary, wasmBinaryFile, info, receiveInstantiationResult).catch(readyPromiseReject);
  return {}; // no exports yet; we'll fill them in later
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// include: runtime_debug.js
// end include: runtime_debug.js
// === Body ===


// end include: preamble.js

  /** @constructor */
  function ExitStatus(status) {
      this.name = 'ExitStatus';
      this.message = 'Program terminated with exit(' + status + ')';
      this.status = status;
    }

  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        // Pass the module as the first argument.
        callbacks.shift()(Module);
      }
    }

  
    /**
     * @param {number} ptr
     * @param {string} type
     */
  function getValue(ptr, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      case '*': return HEAPU32[((ptr)>>2)];
      default: abort('invalid type for getValue: ' + type);
    }
  }

  function intArrayToString(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      var chr = array[i];
      if (chr > 0xFF) {
        chr &= 0xFF;
      }
      ret.push(String.fromCharCode(chr));
    }
    return ret.join('');
  }

  
    /**
     * @param {number} ptr
     * @param {number} value
     * @param {string} type
     */
  function setValue(ptr, value, type = 'i8') {
    if (type.endsWith('*')) type = '*';
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      case '*': HEAPU32[((ptr)>>2)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  }

  /** @constructor */
  function ExceptionInfo(excPtr) {
      this.excPtr = excPtr;
      this.ptr = excPtr - 24;
  
      this.set_type = function(type) {
        HEAPU32[(((this.ptr)+(4))>>2)] = type;
      };
  
      this.get_type = function() {
        return HEAPU32[(((this.ptr)+(4))>>2)];
      };
  
      this.set_destructor = function(destructor) {
        HEAPU32[(((this.ptr)+(8))>>2)] = destructor;
      };
  
      this.get_destructor = function() {
        return HEAPU32[(((this.ptr)+(8))>>2)];
      };
  
      this.set_refcount = function(refcount) {
        HEAP32[((this.ptr)>>2)] = refcount;
      };
  
      this.set_caught = function (caught) {
        caught = caught ? 1 : 0;
        HEAP8[(((this.ptr)+(12))>>0)] = caught;
      };
  
      this.get_caught = function () {
        return HEAP8[(((this.ptr)+(12))>>0)] != 0;
      };
  
      this.set_rethrown = function (rethrown) {
        rethrown = rethrown ? 1 : 0;
        HEAP8[(((this.ptr)+(13))>>0)] = rethrown;
      };
  
      this.get_rethrown = function () {
        return HEAP8[(((this.ptr)+(13))>>0)] != 0;
      };
  
      // Initialize native structure fields. Should be called once after allocated.
      this.init = function(type, destructor) {
        this.set_adjusted_ptr(0);
        this.set_type(type);
        this.set_destructor(destructor);
        this.set_refcount(0);
        this.set_caught(false);
        this.set_rethrown(false);
      }
  
      this.add_ref = function() {
        var value = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = value + 1;
      };
  
      // Returns true if last reference released.
      this.release_ref = function() {
        var prev = HEAP32[((this.ptr)>>2)];
        HEAP32[((this.ptr)>>2)] = prev - 1;
        return prev === 1;
      };
  
      this.set_adjusted_ptr = function(adjustedPtr) {
        HEAPU32[(((this.ptr)+(16))>>2)] = adjustedPtr;
      };
  
      this.get_adjusted_ptr = function() {
        return HEAPU32[(((this.ptr)+(16))>>2)];
      };
  
      // Get pointer which is expected to be received by catch clause in C++ code. It may be adjusted
      // when the pointer is casted to some of the exception object base classes (e.g. when virtual
      // inheritance is used). When a pointer is thrown this method should return the thrown pointer
      // itself.
      this.get_exception_ptr = function() {
        // Work around a fastcomp bug, this code is still included for some reason in a build without
        // exceptions support.
        var isPointer = ___cxa_is_pointer_type(this.get_type());
        if (isPointer) {
          return HEAPU32[((this.excPtr)>>2)];
        }
        var adjusted = this.get_adjusted_ptr();
        if (adjusted !== 0) return adjusted;
        return this.excPtr;
      };
    }
  
  var exceptionLast = 0;
  
  var uncaughtExceptionCount = 0;
  function ___cxa_throw(ptr, type, destructor) {
      var info = new ExceptionInfo(ptr);
      // Initialize ExceptionInfo content after it was allocated in __cxa_allocate_exception.
      info.init(type, destructor);
      exceptionLast = ptr;
      uncaughtExceptionCount++;
      throw ptr;
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var SYSCALLS = {varargs:undefined,get:function() {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      }};
  function ___syscall_fcntl64(fd, cmd, varargs) {
  SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___syscall_ioctl(fd, op, varargs) {
  SYSCALLS.varargs = varargs;
  
      return 0;
    }

  function ___syscall_openat(dirfd, path, flags, varargs) {
  SYSCALLS.varargs = varargs;
  
  }

  function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {}

  function getShiftFromSize(size) {
      switch (size) {
          case 1: return 0;
          case 2: return 1;
          case 4: return 2;
          case 8: return 3;
          default:
              throw new TypeError('Unknown type size: ' + size);
      }
    }
  
  function embind_init_charCodes() {
      var codes = new Array(256);
      for (var i = 0; i < 256; ++i) {
          codes[i] = String.fromCharCode(i);
      }
      embind_charCodes = codes;
    }
  var embind_charCodes = undefined;
  function readLatin1String(ptr) {
      var ret = "";
      var c = ptr;
      while (HEAPU8[c]) {
          ret += embind_charCodes[HEAPU8[c++]];
      }
      return ret;
    }
  
  var awaitingDependencies = {};
  
  var registeredTypes = {};
  
  var typeDependencies = {};
  
  var char_0 = 48;
  
  var char_9 = 57;
  function makeLegalFunctionName(name) {
      if (undefined === name) {
        return '_unknown';
      }
      name = name.replace(/[^a-zA-Z0-9_]/g, '$');
      var f = name.charCodeAt(0);
      if (f >= char_0 && f <= char_9) {
        return '_' + name;
      }
      return name;
    }
  function createNamedFunction(name, body) {
      name = makeLegalFunctionName(name);
      // Use an abject with a computed property name to create a new function with
      // a name specified at runtime, but without using `new Function` or `eval`.
      return {
        [name]: function() {
          return body.apply(this, arguments);
        }
      }[name];
    }
  function extendError(baseErrorType, errorName) {
      var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;
  
        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
          this.stack = this.toString() + '\n' +
              stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
      });
      errorClass.prototype = Object.create(baseErrorType.prototype);
      errorClass.prototype.constructor = errorClass;
      errorClass.prototype.toString = function() {
        if (this.message === undefined) {
          return this.name;
        } else {
          return this.name + ': ' + this.message;
        }
      };
  
      return errorClass;
    }
  var BindingError = undefined;
  function throwBindingError(message) {
      throw new BindingError(message);
    }
  
  
  
  
  var InternalError = undefined;
  function throwInternalError(message) {
      throw new InternalError(message);
    }
  function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
      myTypes.forEach(function(type) {
          typeDependencies[type] = dependentTypes;
      });
  
      function onComplete(typeConverters) {
          var myTypeConverters = getTypeConverters(typeConverters);
          if (myTypeConverters.length !== myTypes.length) {
              throwInternalError('Mismatched type converter count');
          }
          for (var i = 0; i < myTypes.length; ++i) {
              registerType(myTypes[i], myTypeConverters[i]);
          }
      }
  
      var typeConverters = new Array(dependentTypes.length);
      var unregisteredTypes = [];
      var registered = 0;
      dependentTypes.forEach((dt, i) => {
        if (registeredTypes.hasOwnProperty(dt)) {
          typeConverters[i] = registeredTypes[dt];
        } else {
          unregisteredTypes.push(dt);
          if (!awaitingDependencies.hasOwnProperty(dt)) {
            awaitingDependencies[dt] = [];
          }
          awaitingDependencies[dt].push(() => {
            typeConverters[i] = registeredTypes[dt];
            ++registered;
            if (registered === unregisteredTypes.length) {
              onComplete(typeConverters);
            }
          });
        }
      });
      if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
      }
    }
  /** @param {Object=} options */
  function registerType(rawType, registeredInstance, options = {}) {
      if (!('argPackAdvance' in registeredInstance)) {
          throw new TypeError('registerType registeredInstance requires argPackAdvance');
      }
  
      var name = registeredInstance.name;
      if (!rawType) {
          throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
      }
      if (registeredTypes.hasOwnProperty(rawType)) {
          if (options.ignoreDuplicateRegistrations) {
              return;
          } else {
              throwBindingError("Cannot register type '" + name + "' twice");
          }
      }
  
      registeredTypes[rawType] = registeredInstance;
      delete typeDependencies[rawType];
  
      if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach((cb) => cb());
      }
    }
  function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
      var shift = getShiftFromSize(size);
  
      name = readLatin1String(name);
      registerType(rawType, {
          name: name,
          'fromWireType': function(wt) {
              // ambiguous emscripten ABI: sometimes return values are
              // true or false, and sometimes integers (0 or 1)
              return !!wt;
          },
          'toWireType': function(destructors, o) {
              return o ? trueValue : falseValue;
          },
          'argPackAdvance': 8,
          'readValueFromPointer': function(pointer) {
              // TODO: if heap is fixed (like in asm.js) this could be executed outside
              var heap;
              if (size === 1) {
                  heap = HEAP8;
              } else if (size === 2) {
                  heap = HEAP16;
              } else if (size === 4) {
                  heap = HEAP32;
              } else {
                  throw new TypeError("Unknown boolean type size: " + name);
              }
              return this['fromWireType'](heap[pointer >> shift]);
          },
          destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function ClassHandle_isAliasOf(other) {
      if (!(this instanceof ClassHandle)) {
        return false;
      }
      if (!(other instanceof ClassHandle)) {
        return false;
      }
  
      var leftClass = this.$$.ptrType.registeredClass;
      var left = this.$$.ptr;
      var rightClass = other.$$.ptrType.registeredClass;
      var right = other.$$.ptr;
  
      while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
      }
  
      while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
      }
  
      return leftClass === rightClass && left === right;
    }
  
  function shallowCopyInternalPointer(o) {
      return {
        count: o.count,
        deleteScheduled: o.deleteScheduled,
        preservePointerOnDelete: o.preservePointerOnDelete,
        ptr: o.ptr,
        ptrType: o.ptrType,
        smartPtr: o.smartPtr,
        smartPtrType: o.smartPtrType,
      };
    }
  
  function throwInstanceAlreadyDeleted(obj) {
      function getInstanceTypeName(handle) {
        return handle.$$.ptrType.registeredClass.name;
      }
      throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
    }
  
  var finalizationRegistry = false;
  
  function detachFinalizer(handle) {}
  
  function runDestructor($$) {
      if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
      } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
      }
    }
  function releaseClassHandle($$) {
      $$.count.value -= 1;
      var toDelete = 0 === $$.count.value;
      if (toDelete) {
        runDestructor($$);
      }
    }
  
  function downcastPointer(ptr, ptrClass, desiredClass) {
      if (ptrClass === desiredClass) {
        return ptr;
      }
      if (undefined === desiredClass.baseClass) {
        return null; // no conversion
      }
  
      var rv = downcastPointer(ptr, ptrClass, desiredClass.baseClass);
      if (rv === null) {
        return null;
      }
      return desiredClass.downcast(rv);
    }
  
  var registeredPointers = {};
  
  function getInheritedInstanceCount() {
      return Object.keys(registeredInstances).length;
    }
  
  function getLiveInheritedInstances() {
      var rv = [];
      for (var k in registeredInstances) {
        if (registeredInstances.hasOwnProperty(k)) {
          rv.push(registeredInstances[k]);
        }
      }
      return rv;
    }
  
  var deletionQueue = [];
  function flushPendingDeletes() {
      while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
      }
    }
  
  var delayFunction = undefined;
  
  
  function setDelayFunction(fn) {
      delayFunction = fn;
      if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
    }
  function init_embind() {
      Module['getInheritedInstanceCount'] = getInheritedInstanceCount;
      Module['getLiveInheritedInstances'] = getLiveInheritedInstances;
      Module['flushPendingDeletes'] = flushPendingDeletes;
      Module['setDelayFunction'] = setDelayFunction;
    }
  var registeredInstances = {};
  
  function getBasestPointer(class_, ptr) {
      if (ptr === undefined) {
          throwBindingError('ptr should not be undefined');
      }
      while (class_.baseClass) {
          ptr = class_.upcast(ptr);
          class_ = class_.baseClass;
      }
      return ptr;
    }
  function getInheritedInstance(class_, ptr) {
      ptr = getBasestPointer(class_, ptr);
      return registeredInstances[ptr];
    }
  
  
  function makeClassHandle(prototype, record) {
      if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
      }
      var hasSmartPtrType = !!record.smartPtrType;
      var hasSmartPtr = !!record.smartPtr;
      if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
      }
      record.count = { value: 1 };
      return attachFinalizer(Object.create(prototype, {
        $$: {
            value: record,
        },
      }));
    }
  function RegisteredPointer_fromWireType(ptr) {
      // ptr is a raw pointer (or a raw smartpointer)
  
      // rawPointer is a maybe-null raw pointer
      var rawPointer = this.getPointee(ptr);
      if (!rawPointer) {
        this.destructor(ptr);
        return null;
      }
  
      var registeredInstance = getInheritedInstance(this.registeredClass, rawPointer);
      if (undefined !== registeredInstance) {
        // JS object has been neutered, time to repopulate it
        if (0 === registeredInstance.$$.count.value) {
          registeredInstance.$$.ptr = rawPointer;
          registeredInstance.$$.smartPtr = ptr;
          return registeredInstance['clone']();
        } else {
          // else, just increment reference count on existing object
          // it already has a reference to the smart pointer
          var rv = registeredInstance['clone']();
          this.destructor(ptr);
          return rv;
        }
      }
  
      function makeDefaultHandle() {
        if (this.isSmartPointer) {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this.pointeeType,
            ptr: rawPointer,
            smartPtrType: this,
            smartPtr: ptr,
          });
        } else {
          return makeClassHandle(this.registeredClass.instancePrototype, {
            ptrType: this,
            ptr: ptr,
          });
        }
      }
  
      var actualType = this.registeredClass.getActualType(rawPointer);
      var registeredPointerRecord = registeredPointers[actualType];
      if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
      }
  
      var toType;
      if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
      } else {
        toType = registeredPointerRecord.pointerType;
      }
      var dp = downcastPointer(
          rawPointer,
          this.registeredClass,
          toType.registeredClass);
      if (dp === null) {
        return makeDefaultHandle.call(this);
      }
      if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
          smartPtrType: this,
          smartPtr: ptr,
        });
      } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
          ptrType: toType,
          ptr: dp,
        });
      }
    }
  function attachFinalizer(handle) {
      if ('undefined' === typeof FinalizationRegistry) {
        attachFinalizer = (handle) => handle;
        return handle;
      }
      // If the running environment has a FinalizationRegistry (see
      // https://github.com/tc39/proposal-weakrefs), then attach finalizers
      // for class handles.  We check for the presence of FinalizationRegistry
      // at run-time, not build-time.
      finalizationRegistry = new FinalizationRegistry((info) => {
        releaseClassHandle(info.$$);
      });
      attachFinalizer = (handle) => {
        var $$ = handle.$$;
        var hasSmartPtr = !!$$.smartPtr;
        if (hasSmartPtr) {
          // We should not call the destructor on raw pointers in case other code expects the pointee to live
          var info = { $$: $$ };
          finalizationRegistry.register(handle, info, handle);
        }
        return handle;
      };
      detachFinalizer = (handle) => finalizationRegistry.unregister(handle);
      return attachFinalizer(handle);
    }
  function ClassHandle_clone() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.preservePointerOnDelete) {
        this.$$.count.value += 1;
        return this;
      } else {
        var clone = attachFinalizer(Object.create(Object.getPrototypeOf(this), {
          $$: {
            value: shallowCopyInternalPointer(this.$$),
          }
        }));
  
        clone.$$.count.value += 1;
        clone.$$.deleteScheduled = false;
        return clone;
      }
    }
  
  
  
  
  function ClassHandle_delete() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
  
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
  
      detachFinalizer(this);
      releaseClassHandle(this.$$);
  
      if (!this.$$.preservePointerOnDelete) {
        this.$$.smartPtr = undefined;
        this.$$.ptr = undefined;
      }
    }
  
  function ClassHandle_isDeleted() {
      return !this.$$.ptr;
    }
  
  
  
  function ClassHandle_deleteLater() {
      if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
      }
      if (this.$$.deleteScheduled && !this.$$.preservePointerOnDelete) {
        throwBindingError('Object already scheduled for deletion');
      }
      deletionQueue.push(this);
      if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
      }
      this.$$.deleteScheduled = true;
      return this;
    }
  function init_ClassHandle() {
      ClassHandle.prototype['isAliasOf'] = ClassHandle_isAliasOf;
      ClassHandle.prototype['clone'] = ClassHandle_clone;
      ClassHandle.prototype['delete'] = ClassHandle_delete;
      ClassHandle.prototype['isDeleted'] = ClassHandle_isDeleted;
      ClassHandle.prototype['deleteLater'] = ClassHandle_deleteLater;
    }
  function ClassHandle() {
    }
  
  
  
  function ensureOverloadTable(proto, methodName, humanName) {
      if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
          // TODO This check can be removed in -O3 level "unsafe" optimizations.
          if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
              throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
          }
          return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
      }
    }
  
  /** @param {number=} numArguments */
  function exposePublicSymbol(name, value, numArguments) {
      if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
          throwBindingError("Cannot register public name '" + name + "' twice");
        }
  
        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
      }
      else {
        Module[name] = value;
        if (undefined !== numArguments) {
          Module[name].numArguments = numArguments;
        }
      }
    }
  
  
  
  /** @constructor */
  function RegisteredClass(name,
                               constructor,
                               instancePrototype,
                               rawDestructor,
                               baseClass,
                               getActualType,
                               upcast,
                               downcast) {
      this.name = name;
      this.constructor = constructor;
      this.instancePrototype = instancePrototype;
      this.rawDestructor = rawDestructor;
      this.baseClass = baseClass;
      this.getActualType = getActualType;
      this.upcast = upcast;
      this.downcast = downcast;
      this.pureVirtualFunctions = [];
    }
  
  
  function upcastPointer(ptr, ptrClass, desiredClass) {
      while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
          throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
      }
      return ptr;
    }
  function constNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  
  function genericPointerToWireType(destructors, handle) {
      var ptr;
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
  
        if (this.isSmartPointer) {
          ptr = this.rawConstructor();
          if (destructors !== null) {
            destructors.push(this.rawDestructor, ptr);
          }
          return ptr;
        } else {
          return 0;
        }
      }
  
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
  
      if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
          throwBindingError('Passing raw pointer to smart pointer is illegal');
        }
  
        switch (this.sharingPolicy) {
          case 0: // NONE
            // no upcasting
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
            }
            break;
  
          case 1: // INTRUSIVE
            ptr = handle.$$.smartPtr;
            break;
  
          case 2: // BY_EMVAL
            if (handle.$$.smartPtrType === this) {
              ptr = handle.$$.smartPtr;
            } else {
              var clonedHandle = handle['clone']();
              ptr = this.rawShare(
                ptr,
                Emval.toHandle(function() {
                  clonedHandle['delete']();
                })
              );
              if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
              }
            }
            break;
  
          default:
            throwBindingError('Unsupporting sharing policy');
        }
      }
      return ptr;
    }
  
  
  function nonConstNoSmartPtrRawPointerToWireType(destructors, handle) {
      if (handle === null) {
        if (this.isReference) {
          throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
      }
  
      if (!handle.$$) {
        throwBindingError('Cannot pass "' + embindRepr(handle) + '" as a ' + this.name);
      }
      if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
      }
      if (handle.$$.ptrType.isConst) {
          throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
      }
      var handleClass = handle.$$.ptrType.registeredClass;
      var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
      return ptr;
    }
  
  function simpleReadValueFromPointer(pointer) {
      return this['fromWireType'](HEAP32[((pointer)>>2)]);
    }
  
  function RegisteredPointer_getPointee(ptr) {
      if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
      }
      return ptr;
    }
  
  function RegisteredPointer_destructor(ptr) {
      if (this.rawDestructor) {
        this.rawDestructor(ptr);
      }
    }
  
  function RegisteredPointer_deleteObject(handle) {
      if (handle !== null) {
        handle['delete']();
      }
    }
  
  function init_RegisteredPointer() {
      RegisteredPointer.prototype.getPointee = RegisteredPointer_getPointee;
      RegisteredPointer.prototype.destructor = RegisteredPointer_destructor;
      RegisteredPointer.prototype['argPackAdvance'] = 8;
      RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;
      RegisteredPointer.prototype['deleteObject'] = RegisteredPointer_deleteObject;
      RegisteredPointer.prototype['fromWireType'] = RegisteredPointer_fromWireType;
    }
  /** @constructor
      @param {*=} pointeeType,
      @param {*=} sharingPolicy,
      @param {*=} rawGetPointee,
      @param {*=} rawConstructor,
      @param {*=} rawShare,
      @param {*=} rawDestructor,
       */
  function RegisteredPointer(
      name,
      registeredClass,
      isReference,
      isConst,
  
      // smart pointer properties
      isSmartPointer,
      pointeeType,
      sharingPolicy,
      rawGetPointee,
      rawConstructor,
      rawShare,
      rawDestructor
    ) {
      this.name = name;
      this.registeredClass = registeredClass;
      this.isReference = isReference;
      this.isConst = isConst;
  
      // smart pointer properties
      this.isSmartPointer = isSmartPointer;
      this.pointeeType = pointeeType;
      this.sharingPolicy = sharingPolicy;
      this.rawGetPointee = rawGetPointee;
      this.rawConstructor = rawConstructor;
      this.rawShare = rawShare;
      this.rawDestructor = rawDestructor;
  
      if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
          this['toWireType'] = constNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        } else {
          this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
          this.destructorFunction = null;
        }
      } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
      }
    }
  
  /** @param {number=} numArguments */
  function replacePublicSymbol(name, value, numArguments) {
      if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
      }
      // If there's an overload table for this symbol, replace the symbol in the overload table instead.
      if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
      }
      else {
        Module[name] = value;
        Module[name].argCount = numArguments;
      }
    }
  
  
  
  function dynCallLegacy(sig, ptr, args) {
      var f = Module['dynCall_' + sig];
      return args && args.length ? f.apply(null, [ptr].concat(args)) : f.call(null, ptr);
    }
  
  var wasmTableMirror = [];
  
  function getWasmTableEntry(funcPtr) {
      var func = wasmTableMirror[funcPtr];
      if (!func) {
        if (funcPtr >= wasmTableMirror.length) wasmTableMirror.length = funcPtr + 1;
        wasmTableMirror[funcPtr] = func = wasmTable.get(funcPtr);
      }
      return func;
    }
  
  /** @param {Object=} args */
  function dynCall(sig, ptr, args) {
      // Without WASM_BIGINT support we cannot directly call function with i64 as
      // part of thier signature, so we rely the dynCall functions generated by
      // wasm-emscripten-finalize
      if (sig.includes('j')) {
        return dynCallLegacy(sig, ptr, args);
      }
      var rtn = getWasmTableEntry(ptr).apply(null, args);
      return rtn;
    }
  
  function getDynCaller(sig, ptr) {
      var argCache = [];
      return function() {
        argCache.length = 0;
        Object.assign(argCache, arguments);
        return dynCall(sig, ptr, argCache);
      };
    }
  
  
  function embind__requireFunction(signature, rawFunction) {
      signature = readLatin1String(signature);
  
      function makeDynCaller() {
        if (signature.includes('j')) {
          return getDynCaller(signature, rawFunction);
        }
        return getWasmTableEntry(rawFunction);
      }
  
      var fp = makeDynCaller();
      if (typeof fp != "function") {
          throwBindingError("unknown function pointer with signature " + signature + ": " + rawFunction);
      }
      return fp;
    }
  
  
  
  var UnboundTypeError = undefined;
  
  
  function getTypeName(type) {
      var ptr = ___getTypeName(type);
      var rv = readLatin1String(ptr);
      _free(ptr);
      return rv;
    }
  function throwUnboundTypeError(message, types) {
      var unboundTypes = [];
      var seen = {};
      function visit(type) {
        if (seen[type]) {
          return;
        }
        if (registeredTypes[type]) {
          return;
        }
        if (typeDependencies[type]) {
          typeDependencies[type].forEach(visit);
          return;
        }
        unboundTypes.push(type);
        seen[type] = true;
      }
      types.forEach(visit);
  
      throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
    }
  
  function __embind_register_class(rawType,
                                     rawPointerType,
                                     rawConstPointerType,
                                     baseClassRawType,
                                     getActualTypeSignature,
                                     getActualType,
                                     upcastSignature,
                                     upcast,
                                     downcastSignature,
                                     downcast,
                                     name,
                                     destructorSignature,
                                     rawDestructor) {
      name = readLatin1String(name);
      getActualType = embind__requireFunction(getActualTypeSignature, getActualType);
      if (upcast) {
        upcast = embind__requireFunction(upcastSignature, upcast);
      }
      if (downcast) {
        downcast = embind__requireFunction(downcastSignature, downcast);
      }
      rawDestructor = embind__requireFunction(destructorSignature, rawDestructor);
      var legalFunctionName = makeLegalFunctionName(name);
  
      exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
      });
  
      whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
          base = base[0];
  
          var baseClass;
          var basePrototype;
          if (baseClassRawType) {
            baseClass = base.registeredClass;
            basePrototype = baseClass.instancePrototype;
          } else {
            basePrototype = ClassHandle.prototype;
          }
  
          var constructor = createNamedFunction(legalFunctionName, function() {
            if (Object.getPrototypeOf(this) !== instancePrototype) {
              throw new BindingError("Use 'new' to construct " + name);
            }
            if (undefined === registeredClass.constructor_body) {
              throw new BindingError(name + " has no accessible constructor");
            }
            var body = registeredClass.constructor_body[arguments.length];
            if (undefined === body) {
              throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
            }
            return body.apply(this, arguments);
          });
  
          var instancePrototype = Object.create(basePrototype, {
            constructor: { value: constructor },
          });
  
          constructor.prototype = instancePrototype;
  
          var registeredClass = new RegisteredClass(name,
                                                    constructor,
                                                    instancePrototype,
                                                    rawDestructor,
                                                    baseClass,
                                                    getActualType,
                                                    upcast,
                                                    downcast);
  
          var referenceConverter = new RegisteredPointer(name,
                                                         registeredClass,
                                                         true,
                                                         false,
                                                         false);
  
          var pointerConverter = new RegisteredPointer(name + '*',
                                                       registeredClass,
                                                       false,
                                                       false,
                                                       false);
  
          var constPointerConverter = new RegisteredPointer(name + ' const*',
                                                            registeredClass,
                                                            false,
                                                            true,
                                                            false);
  
          registeredPointers[rawType] = {
            pointerType: pointerConverter,
            constPointerType: constPointerConverter
          };
  
          replacePublicSymbol(legalFunctionName, constructor);
  
          return [referenceConverter, pointerConverter, constPointerConverter];
        }
      );
    }

  function heap32VectorToArray(count, firstElement) {
      var array = [];
      for (var i = 0; i < count; i++) {
          // TODO(https://github.com/emscripten-core/emscripten/issues/17310):
          // Find a way to hoist the `>> 2` or `>> 3` out of this loop.
          array.push(HEAPU32[(((firstElement)+(i * 4))>>2)]);
      }
      return array;
    }
  
  
  function runDestructors(destructors) {
      while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
      }
    }
  
  
  
  
  
  function new_(constructor, argumentList) {
      if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
      }
      /*
       * Previously, the following line was just:
       *   function dummy() {};
       * Unfortunately, Chrome was preserving 'dummy' as the object's name, even
       * though at creation, the 'dummy' has the correct constructor name.  Thus,
       * objects created with IMVU.new would show up in the debugger as 'dummy',
       * which isn't very helpful.  Using IMVU.createNamedFunction addresses the
       * issue.  Doublely-unfortunately, there's no way to write a test for this
       * behavior.  -NRD 2013.02.22
       */
      var dummy = createNamedFunction(constructor.name || 'unknownFunctionName', function(){});
      dummy.prototype = constructor.prototype;
      var obj = new dummy;
  
      var r = constructor.apply(obj, argumentList);
      return (r instanceof Object) ? r : obj;
    }
  
  
  function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc, isAsync) {
      // humanName: a human-readable string name for the function to be generated.
      // argTypes: An array that contains the embind type objects for all types in the function signature.
      //    argTypes[0] is the type object for the function return value.
      //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
      //    argTypes[2...] are the actual function parameters.
      // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
      // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
      // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
      var argCount = argTypes.length;
  
      if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
      }
  
      var isClassMethodFunc = (argTypes[1] !== null && classType !== null);
  
      // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
  // TODO: This omits argument count check - enable only at -O3 or similar.
  //    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
  //       return FUNCTION_TABLE[fn];
  //    }
  
      // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
      // TODO: Remove this completely once all function invokers are being dynamically generated.
      var needsDestructorStack = false;
  
      for (var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
          needsDestructorStack = true;
          break;
        }
      }
  
      var returns = (argTypes[0].name !== "void");
  
      var argsList = "";
      var argsListWired = "";
      for (var i = 0; i < argCount - 2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
      }
  
      var invokerFnBody =
          "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
          "if (arguments.length !== "+(argCount - 2)+") {\n" +
              "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
          "}\n";
  
      if (needsDestructorStack) {
        invokerFnBody += "var destructors = [];\n";
      }
  
      var dtorStack = needsDestructorStack ? "destructors" : "null";
      var args1 = ["throwBindingError", "invoker", "fn", "runDestructors", "retType", "classParam"];
      var args2 = [throwBindingError, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];
  
      if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
      }
  
      for (var i = 0; i < argCount - 2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
      }
  
      if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
      }
  
      invokerFnBody +=
          (returns || isAsync ? "var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";
  
      if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
      } else {
        for (var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
          var paramName = (i === 1 ? "thisWired" : ("arg"+(i - 2)+"Wired"));
          if (argTypes[i].destructorFunction !== null) {
            invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
            args1.push(paramName+"_dtor");
            args2.push(argTypes[i].destructorFunction);
          }
        }
      }
  
      if (returns) {
        invokerFnBody += "var ret = retType.fromWireType(rv);\n" +
                         "return ret;\n";
      } else {
      }
  
      invokerFnBody += "}\n";
  
      args1.push(invokerFnBody);
  
      var invokerFunction = new_(Function, args1).apply(null, args2);
      return invokerFunction;
    }
  function __embind_register_class_constructor(
      rawClassType,
      argCount,
      rawArgTypesAddr,
      invokerSignature,
      invoker,
      rawConstructor
    ) {
      assert(argCount > 0);
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      invoker = embind__requireFunction(invokerSignature, invoker);
      var args = [rawConstructor];
      var destructors = [];
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;
  
        if (undefined === classType.registeredClass.constructor_body) {
          classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
          throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = () => {
          throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          // Insert empty slot for context type (argTypes[1]).
          argTypes.splice(1, 0, null);
          classType.registeredClass.constructor_body[argCount - 1] = craftInvokerFunction(humanName, argTypes, null, invoker, rawConstructor);
          return [];
        });
        return [];
      });
    }

  
  
  
  
  
  function __embind_register_class_function(rawClassType,
                                              methodName,
                                              argCount,
                                              rawArgTypesAddr, // [ReturnType, ThisType, Args...]
                                              invokerSignature,
                                              rawInvoker,
                                              context,
                                              isPureVirtual,
                                              isAsync) {
      var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      methodName = readLatin1String(methodName);
      rawInvoker = embind__requireFunction(invokerSignature, rawInvoker);
  
      whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;
  
        if (methodName.startsWith("@@")) {
          methodName = Symbol[methodName.substring(2)];
        }
  
        if (isPureVirtual) {
          classType.registeredClass.pureVirtualFunctions.push(methodName);
        }
  
        function unboundTypesHandler() {
          throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        }
  
        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount - 2)) {
          // This is the first overload to be registered, OR we are replacing a
          // function in the base class with a function in the derived class.
          unboundTypesHandler.argCount = argCount - 2;
          unboundTypesHandler.className = classType.name;
          proto[methodName] = unboundTypesHandler;
        } else {
          // There was an existing function with the same name registered. Set up
          // a function overload routing table.
          ensureOverloadTable(proto, methodName, humanName);
          proto[methodName].overloadTable[argCount - 2] = unboundTypesHandler;
        }
  
        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
          var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context, isAsync);
  
          // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
          // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
          if (undefined === proto[methodName].overloadTable) {
            // Set argCount in case an overload is registered later
            memberFunction.argCount = argCount - 2;
            proto[methodName] = memberFunction;
          } else {
            proto[methodName].overloadTable[argCount - 2] = memberFunction;
          }
  
          return [];
        });
        return [];
      });
    }

  
  
  
  
  
  
  
  function validateThis(this_, classType, humanName) {
      if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
      }
      if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
      }
      if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
      }
  
      // todo: kill this
      return upcastPointer(this_.$$.ptr,
                           this_.$$.ptrType.registeredClass,
                           classType.registeredClass);
    }
  function __embind_register_class_property(classType,
                                              fieldName,
                                              getterReturnType,
                                              getterSignature,
                                              getter,
                                              getterContext,
                                              setterArgumentType,
                                              setterSignature,
                                              setter,
                                              setterContext) {
      fieldName = readLatin1String(fieldName);
      getter = embind__requireFunction(getterSignature, getter);
  
      whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
          get: function() {
            throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
          },
          enumerable: true,
          configurable: true
        };
        if (setter) {
          desc.set = () => {
            throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
          };
        } else {
          desc.set = (v) => {
            throwBindingError(humanName + ' is a read-only property');
          };
        }
  
        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
  
        whenDependentTypesAreResolved(
          [],
          (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
      function(types) {
          var getterReturnType = types[0];
          var desc = {
            get: function() {
              var ptr = validateThis(this, classType, humanName + ' getter');
              return getterReturnType['fromWireType'](getter(getterContext, ptr));
            },
            enumerable: true
          };
  
          if (setter) {
            setter = embind__requireFunction(setterSignature, setter);
            var setterArgumentType = types[1];
            desc.set = function(v) {
              var ptr = validateThis(this, classType, humanName + ' setter');
              var destructors = [];
              setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
              runDestructors(destructors);
            };
          }
  
          Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
          return [];
        });
  
        return [];
      });
    }

  
  function __embind_register_constant(name, type, value) {
      name = readLatin1String(name);
      whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
      });
    }

  var emval_free_list = [];
  
  var emval_handle_array = [{},{value:undefined},{value:null},{value:true},{value:false}];
  function __emval_decref(handle) {
      if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
        emval_handle_array[handle] = undefined;
        emval_free_list.push(handle);
      }
    }
  
  
  
  
  function count_emval_handles() {
      var count = 0;
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          ++count;
        }
      }
      return count;
    }
  
  function get_first_emval() {
      for (var i = 5; i < emval_handle_array.length; ++i) {
        if (emval_handle_array[i] !== undefined) {
          return emval_handle_array[i];
        }
      }
      return null;
    }
  function init_emval() {
      Module['count_emval_handles'] = count_emval_handles;
      Module['get_first_emval'] = get_first_emval;
    }
  var Emval = {toValue:(handle) => {
        if (!handle) {
            throwBindingError('Cannot use deleted val. handle = ' + handle);
        }
        return emval_handle_array[handle].value;
      },toHandle:(value) => {
        switch (value) {
          case undefined: return 1;
          case null: return 2;
          case true: return 3;
          case false: return 4;
          default:{
            var handle = emval_free_list.length ?
                emval_free_list.pop() :
                emval_handle_array.length;
  
            emval_handle_array[handle] = {refcount: 1, value: value};
            return handle;
          }
        }
      }};
  
  
  
  function __embind_register_emval(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
          var rv = Emval.toValue(handle);
          __emval_decref(handle);
          return rv;
        },
        'toWireType': function(destructors, value) {
          return Emval.toHandle(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor
  
        // TODO: do we need a deleteObject here?  write a test where
        // emval is passed into JS via an interface
      });
    }

  function embindRepr(v) {
      if (v === null) {
          return 'null';
      }
      var t = typeof v;
      if (t === 'object' || t === 'array' || t === 'function') {
          return v.toString();
      } else {
          return '' + v;
      }
    }
  
  function floatReadValueFromPointer(name, shift) {
      switch (shift) {
          case 2: return function(pointer) {
              return this['fromWireType'](HEAPF32[pointer >> 2]);
          };
          case 3: return function(pointer) {
              return this['fromWireType'](HEAPF64[pointer >> 3]);
          };
          default:
              throw new TypeError("Unknown float type: " + name);
      }
    }
  
  
  
  function __embind_register_float(rawType, name, size) {
      var shift = getShiftFromSize(size);
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
           return value;
        },
        'toWireType': function(destructors, value) {
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  
  
  
  
  
  
  
  function __embind_register_function(name, argCount, rawArgTypesAddr, signature, rawInvoker, fn, isAsync) {
      var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
      name = readLatin1String(name);
  
      rawInvoker = embind__requireFunction(signature, rawInvoker);
  
      exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
      }, argCount - 1);
  
      whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn, isAsync), argCount - 1);
        return [];
      });
    }

  
  
  function integerReadValueFromPointer(name, shift, signed) {
      // integers are quite common, so generate very specialized functions
      switch (shift) {
          case 0: return signed ?
              function readS8FromPointer(pointer) { return HEAP8[pointer]; } :
              function readU8FromPointer(pointer) { return HEAPU8[pointer]; };
          case 1: return signed ?
              function readS16FromPointer(pointer) { return HEAP16[pointer >> 1]; } :
              function readU16FromPointer(pointer) { return HEAPU16[pointer >> 1]; };
          case 2: return signed ?
              function readS32FromPointer(pointer) { return HEAP32[pointer >> 2]; } :
              function readU32FromPointer(pointer) { return HEAPU32[pointer >> 2]; };
          default:
              throw new TypeError("Unknown integer type: " + name);
      }
    }
  
  
  function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
      name = readLatin1String(name);
      // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come
      // out as 'i32 -1'. Always treat those as max u32.
      if (maxRange === -1) {
          maxRange = 4294967295;
      }
  
      var shift = getShiftFromSize(size);
  
      var fromWireType = (value) => value;
  
      if (minRange === 0) {
          var bitshift = 32 - 8*size;
          fromWireType = (value) => (value << bitshift) >>> bitshift;
      }
  
      var isUnsignedType = (name.includes('unsigned'));
      var checkAssertions = (value, toTypeName) => {
      }
      var toWireType;
      if (isUnsignedType) {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          return value >>> 0;
        }
      } else {
        toWireType = function(destructors, value) {
          checkAssertions(value, this.name);
          // The VM will perform JS to Wasm value conversion, according to the spec:
          // https://www.w3.org/TR/wasm-js-api-1/#towebassemblyvalue
          return value;
        }
      }
      registerType(primitiveType, {
        name: name,
        'fromWireType': fromWireType,
        'toWireType': toWireType,
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
      });
    }

  
  function __embind_register_memory_view(rawType, dataTypeIndex, name) {
      var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
      ];
  
      var TA = typeMapping[dataTypeIndex];
  
      function decodeMemoryView(handle) {
        handle = handle >> 2;
        var heap = HEAPU32;
        var size = heap[handle]; // in elements
        var data = heap[handle + 1]; // byte offset into emscripten heap
        return new TA(heap.buffer, data, size);
      }
  
      name = readLatin1String(name);
      registerType(rawType, {
        name: name,
        'fromWireType': decodeMemoryView,
        'argPackAdvance': 8,
        'readValueFromPointer': decodeMemoryView,
      }, {
        ignoreDuplicateRegistrations: true,
      });
    }

  
  
  
  function __embind_register_std_string(rawType, name) {
      name = readLatin1String(name);
      var stdStringIsUTF8
      //process only std::string bindings with UTF8 support, in contrast to e.g. std::basic_string<unsigned char>
      = (name === "std::string");
  
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          var length = HEAPU32[((value)>>2)];
          var payload = value + 4;
  
          var str;
          if (stdStringIsUTF8) {
            var decodeStartPtr = payload;
            // Looping here to support possible embedded '0' bytes
            for (var i = 0; i <= length; ++i) {
              var currentBytePtr = payload + i;
              if (i == length || HEAPU8[currentBytePtr] == 0) {
                var maxRead = currentBytePtr - decodeStartPtr;
                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                if (str === undefined) {
                  str = stringSegment;
                } else {
                  str += String.fromCharCode(0);
                  str += stringSegment;
                }
                decodeStartPtr = currentBytePtr + 1;
              }
            }
          } else {
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
              a[i] = String.fromCharCode(HEAPU8[payload + i]);
            }
            str = a.join('');
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (value instanceof ArrayBuffer) {
            value = new Uint8Array(value);
          }
  
          var length;
          var valueIsOfTypeString = (typeof value == 'string');
  
          if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) {
            throwBindingError('Cannot pass non-string to std::string');
          }
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            length = lengthBytesUTF8(value);
          } else {
            length = value.length;
          }
  
          // assumes 4-byte alignment
          var base = _malloc(4 + length + 1);
          var ptr = base + 4;
          HEAPU32[((base)>>2)] = length;
          if (stdStringIsUTF8 && valueIsOfTypeString) {
            stringToUTF8(value, ptr, length + 1);
          } else {
            if (valueIsOfTypeString) {
              for (var i = 0; i < length; ++i) {
                var charCode = value.charCodeAt(i);
                if (charCode > 255) {
                  _free(ptr);
                  throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + i] = charCode;
              }
            } else {
              for (var i = 0; i < length; ++i) {
                HEAPU8[ptr + i] = value[i];
              }
            }
          }
  
          if (destructors !== null) {
            destructors.push(_free, base);
          }
          return base;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  
  
  var UTF16Decoder = typeof TextDecoder != 'undefined' ? new TextDecoder('utf-16le') : undefined;;
  function UTF16ToString(ptr, maxBytesToRead) {
      var endPtr = ptr;
      // TextDecoder needs to know the byte length in advance, it doesn't stop on
      // null terminator by itself.
      // Also, use the length info to avoid running tiny strings through
      // TextDecoder, since .subarray() allocates garbage.
      var idx = endPtr >> 1;
      var maxIdx = idx + maxBytesToRead / 2;
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
      endPtr = idx << 1;
  
      if (endPtr - ptr > 32 && UTF16Decoder)
        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  
      // Fallback: decode without UTF16Decoder
      var str = '';
  
      // If maxBytesToRead is not passed explicitly, it will be undefined, and the
      // for-loop's condition will always evaluate to true. The loop is then
      // terminated on the first null char.
      for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
        var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
        if (codeUnit == 0) break;
        // fromCharCode constructs a character from a UTF-16 code unit, so we can
        // pass the UTF16 string right through.
        str += String.fromCharCode(codeUnit);
      }
  
      return str;
    }
  
  function stringToUTF16(str, outPtr, maxBytesToWrite) {
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 2) return 0;
      maxBytesToWrite -= 2; // Null terminator.
      var startPtr = outPtr;
      var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
      for (var i = 0; i < numCharsToWrite; ++i) {
        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        HEAP16[((outPtr)>>1)] = codeUnit;
        outPtr += 2;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP16[((outPtr)>>1)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF16(str) {
      return str.length*2;
    }
  
  function UTF32ToString(ptr, maxBytesToRead) {
      var i = 0;
  
      var str = '';
      // If maxBytesToRead is not passed explicitly, it will be undefined, and this
      // will always evaluate to true. This saves on code size.
      while (!(i >= maxBytesToRead / 4)) {
        var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
        if (utf32 == 0) break;
        ++i;
        // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        if (utf32 >= 0x10000) {
          var ch = utf32 - 0x10000;
          str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
        } else {
          str += String.fromCharCode(utf32);
        }
      }
      return str;
    }
  
  function stringToUTF32(str, outPtr, maxBytesToWrite) {
      // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
      if (maxBytesToWrite === undefined) {
        maxBytesToWrite = 0x7FFFFFFF;
      }
      if (maxBytesToWrite < 4) return 0;
      var startPtr = outPtr;
      var endPtr = startPtr + maxBytesToWrite - 4;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
          var trailSurrogate = str.charCodeAt(++i);
          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
        }
        HEAP32[((outPtr)>>2)] = codeUnit;
        outPtr += 4;
        if (outPtr + 4 > endPtr) break;
      }
      // Null-terminate the pointer to the HEAP.
      HEAP32[((outPtr)>>2)] = 0;
      return outPtr - startPtr;
    }
  
  function lengthBytesUTF32(str) {
      var len = 0;
      for (var i = 0; i < str.length; ++i) {
        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
        // See http://unicode.org/faq/utf_bom.html#utf16-3
        var codeUnit = str.charCodeAt(i);
        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
        len += 4;
      }
  
      return len;
    }
  function __embind_register_std_wstring(rawType, charSize, name) {
      name = readLatin1String(name);
      var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
      if (charSize === 2) {
        decodeString = UTF16ToString;
        encodeString = stringToUTF16;
        lengthBytesUTF = lengthBytesUTF16;
        getHeap = () => HEAPU16;
        shift = 1;
      } else if (charSize === 4) {
        decodeString = UTF32ToString;
        encodeString = stringToUTF32;
        lengthBytesUTF = lengthBytesUTF32;
        getHeap = () => HEAPU32;
        shift = 2;
      }
      registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
          // Code mostly taken from _embind_register_std_string fromWireType
          var length = HEAPU32[value >> 2];
          var HEAP = getHeap();
          var str;
  
          var decodeStartPtr = value + 4;
          // Looping here to support possible embedded '0' bytes
          for (var i = 0; i <= length; ++i) {
            var currentBytePtr = value + 4 + i * charSize;
            if (i == length || HEAP[currentBytePtr >> shift] == 0) {
              var maxReadBytes = currentBytePtr - decodeStartPtr;
              var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
              if (str === undefined) {
                str = stringSegment;
              } else {
                str += String.fromCharCode(0);
                str += stringSegment;
              }
              decodeStartPtr = currentBytePtr + charSize;
            }
          }
  
          _free(value);
  
          return str;
        },
        'toWireType': function(destructors, value) {
          if (!(typeof value == 'string')) {
            throwBindingError('Cannot pass non-string to C++ string type ' + name);
          }
  
          // assumes 4-byte alignment
          var length = lengthBytesUTF(value);
          var ptr = _malloc(4 + length + charSize);
          HEAPU32[ptr >> 2] = length >> shift;
  
          encodeString(value, ptr + 4, length + charSize);
  
          if (destructors !== null) {
            destructors.push(_free, ptr);
          }
          return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
      });
    }

  
  function __embind_register_void(rawType, name) {
      name = readLatin1String(name);
      registerType(rawType, {
          isVoid: true, // void return values can be optimized out sometimes
          name: name,
          'argPackAdvance': 0,
          'fromWireType': function() {
              return undefined;
          },
          'toWireType': function(destructors, o) {
              // TODO: assert if anything else is given?
              return undefined;
          },
      });
    }

  
  
  
  function requireRegisteredType(rawType, humanName) {
      var impl = registeredTypes[rawType];
      if (undefined === impl) {
          throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
      }
      return impl;
    }
  function __emval_as(handle, returnType, destructorsRef) {
      handle = Emval.toValue(handle);
      returnType = requireRegisteredType(returnType, 'emval::as');
      var destructors = [];
      var rd = Emval.toHandle(destructors);
      HEAPU32[((destructorsRef)>>2)] = rd;
      return returnType['toWireType'](destructors, handle);
    }

  function emval_lookupTypes(argCount, argTypes) {
      var a = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(HEAPU32[(((argTypes)+(i * 4))>>2)],
                                     "parameter " + i);
      }
      return a;
    }
  
  function __emval_call(handle, argCount, argTypes, argv) {
      handle = Emval.toValue(handle);
      var types = emval_lookupTypes(argCount, argTypes);
  
      var args = new Array(argCount);
      for (var i = 0; i < argCount; ++i) {
        var type = types[i];
        args[i] = type['readValueFromPointer'](argv);
        argv += type['argPackAdvance'];
      }
  
      var rv = handle.apply(undefined, args);
      return Emval.toHandle(rv);
    }

  function emval_allocateDestructors(destructorsRef) {
      var destructors = [];
      HEAPU32[((destructorsRef)>>2)] = Emval.toHandle(destructors);
      return destructors;
    }
  
  var emval_symbols = {};
  
  function getStringOrSymbol(address) {
      var symbol = emval_symbols[address];
      if (symbol === undefined) {
        return readLatin1String(address);
      }
      return symbol;
    }
  
  var emval_methodCallers = [];
  
  function __emval_call_void_method(caller, handle, methodName, args) {
      caller = emval_methodCallers[caller];
      handle = Emval.toValue(handle);
      methodName = getStringOrSymbol(methodName);
      caller(handle, methodName, null, args);
    }


  function emval_addMethodCaller(caller) {
      var id = emval_methodCallers.length;
      emval_methodCallers.push(caller);
      return id;
    }
  
  
  
  
  var emval_registeredMethods = [];
  function __emval_get_method_caller(argCount, argTypes) {
      var types = emval_lookupTypes(argCount, argTypes);
      var retType = types[0];
      var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";
      var returnId = emval_registeredMethods[signatureName];
      if (returnId !== undefined) {
        return returnId;
      }
  
      var params = ["retType"];
      var args = [retType];
  
      var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
      for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        params.push("argType" + i);
        args.push(types[1 + i]);
      }
  
      var functionName = makeLegalFunctionName("methodCaller_" + signatureName);
      var functionBody =
          "return function " + functionName + "(handle, name, destructors, args) {\n";
  
      var offset = 0;
      for (var i = 0; i < argCount - 1; ++i) {
          functionBody +=
          "    var arg" + i + " = argType" + i + ".readValueFromPointer(args" + (offset ? ("+"+offset) : "") + ");\n";
          offset += types[i + 1]['argPackAdvance'];
      }
      functionBody +=
          "    var rv = handle[name](" + argsList + ");\n";
      for (var i = 0; i < argCount - 1; ++i) {
          if (types[i + 1]['deleteObject']) {
              functionBody +=
              "    argType" + i + ".deleteObject(arg" + i + ");\n";
          }
      }
      if (!retType.isVoid) {
          functionBody +=
          "    return retType.toWireType(destructors, rv);\n";
      }
      functionBody +=
          "};\n";
  
      params.push(functionBody);
      var invokerFunction = new_(Function, params).apply(null, args);
      returnId = emval_addMethodCaller(invokerFunction);
      emval_registeredMethods[signatureName] = returnId;
      return returnId;
    }

  function __emval_get_property(handle, key) {
      handle = Emval.toValue(handle);
      key = Emval.toValue(key);
      return Emval.toHandle(handle[key]);
    }

  function __emval_incref(handle) {
      if (handle > 4) {
        emval_handle_array[handle].refcount += 1;
      }
    }

  function __emval_new_array() {
      return Emval.toHandle([]);
    }

  
  function __emval_new_cstring(v) {
      return Emval.toHandle(getStringOrSymbol(v));
    }

  function __emval_new_object() {
      return Emval.toHandle({});
    }

  
  
  function __emval_run_destructors(handle) {
      var destructors = Emval.toValue(handle);
      runDestructors(destructors);
      __emval_decref(handle);
    }

  function __emval_set_property(handle, key, value) {
      handle = Emval.toValue(handle);
      key = Emval.toValue(key);
      value = Emval.toValue(value);
      handle[key] = value;
    }

  function __emval_strictly_equals(first, second) {
      first = Emval.toValue(first);
      second = Emval.toValue(second);
      return first === second;
    }

  
  function __emval_take_value(type, arg) {
      type = requireRegisteredType(type, '_emval_take_value');
      var v = type['readValueFromPointer'](arg);
      return Emval.toHandle(v);
    }

  function __emval_typeof(handle) {
      handle = Emval.toValue(handle);
      return Emval.toHandle(typeof handle);
    }

  function _abort() {
      abort('');
    }

  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.copyWithin(dest, src, src + num);
    }

  function getHeapMax() {
      return HEAPU8.length;
    }
  
  function abortOnCannotGrowMemory(requestedSize) {
      abort('OOM');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _fd_close(fd) {
      return 52;
    }

  function _fd_read(fd, iov, iovcnt, pnum) {
      return 52;
    }

  function convertI32PairToI53Checked(lo, hi) {
      return ((hi + 0x200000) >>> 0 < 0x400001 - !!lo) ? (lo >>> 0) + hi * 4294967296 : NaN;
    }
  
  
  
  
  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {
      return 70;
    }

  var printCharBuffers = [null,[],[]];
  function printChar(stream, curr) {
      var buffer = printCharBuffers[stream];
      if (curr === 0 || curr === 10) {
        (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));
        buffer.length = 0;
      } else {
        buffer.push(curr);
      }
    }
  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      if (printCharBuffers[1].length) printChar(1, 10);
      if (printCharBuffers[2].length) printChar(2, 10);
    }
  
  
  function _fd_write(fd, iov, iovcnt, pnum) {
      // hack to support printf in SYSCALLS_REQUIRE_FILESYSTEM=0
      var num = 0;
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAPU32[((iov)>>2)];
        var len = HEAPU32[(((iov)+(4))>>2)];
        iov += 8;
        for (var j = 0; j < len; j++) {
          printChar(fd, HEAPU8[ptr+j]);
        }
        num += len;
      }
      HEAPU32[((pnum)>>2)] = num;
      return 0;
    }
embind_init_charCodes();
BindingError = Module['BindingError'] = extendError(Error, 'BindingError');;
InternalError = Module['InternalError'] = extendError(Error, 'InternalError');;
init_ClassHandle();
init_embind();;
init_RegisteredPointer();
UnboundTypeError = Module['UnboundTypeError'] = extendError(Error, 'UnboundTypeError');;
init_emval();;
// include: base64Utils.js
// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob == 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


// end include: base64Utils.js
var wasmImports = {
  "__cxa_throw": ___cxa_throw,
  "__syscall_fcntl64": ___syscall_fcntl64,
  "__syscall_ioctl": ___syscall_ioctl,
  "__syscall_openat": ___syscall_openat,
  "_embind_register_bigint": __embind_register_bigint,
  "_embind_register_bool": __embind_register_bool,
  "_embind_register_class": __embind_register_class,
  "_embind_register_class_constructor": __embind_register_class_constructor,
  "_embind_register_class_function": __embind_register_class_function,
  "_embind_register_class_property": __embind_register_class_property,
  "_embind_register_constant": __embind_register_constant,
  "_embind_register_emval": __embind_register_emval,
  "_embind_register_float": __embind_register_float,
  "_embind_register_function": __embind_register_function,
  "_embind_register_integer": __embind_register_integer,
  "_embind_register_memory_view": __embind_register_memory_view,
  "_embind_register_std_string": __embind_register_std_string,
  "_embind_register_std_wstring": __embind_register_std_wstring,
  "_embind_register_void": __embind_register_void,
  "_emval_as": __emval_as,
  "_emval_call": __emval_call,
  "_emval_call_void_method": __emval_call_void_method,
  "_emval_decref": __emval_decref,
  "_emval_get_method_caller": __emval_get_method_caller,
  "_emval_get_property": __emval_get_property,
  "_emval_incref": __emval_incref,
  "_emval_new_array": __emval_new_array,
  "_emval_new_cstring": __emval_new_cstring,
  "_emval_new_object": __emval_new_object,
  "_emval_run_destructors": __emval_run_destructors,
  "_emval_set_property": __emval_set_property,
  "_emval_strictly_equals": __emval_strictly_equals,
  "_emval_take_value": __emval_take_value,
  "_emval_typeof": __emval_typeof,
  "abort": _abort,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "memory": wasmMemory
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = function() {
  return (___wasm_call_ctors = Module["asm"]["__wasm_call_ctors"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _malloc = function() {
  return (_malloc = Module["asm"]["malloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var _free = function() {
  return (_free = Module["asm"]["free"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___getTypeName = Module["___getTypeName"] = function() {
  return (___getTypeName = Module["___getTypeName"] = Module["asm"]["__getTypeName"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var __embind_initialize_bindings = Module["__embind_initialize_bindings"] = function() {
  return (__embind_initialize_bindings = Module["__embind_initialize_bindings"] = Module["asm"]["_embind_initialize_bindings"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___errno_location = function() {
  return (___errno_location = Module["asm"]["__errno_location"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var setTempRet0 = function() {
  return (setTempRet0 = Module["asm"]["setTempRet0"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var getTempRet0 = function() {
  return (getTempRet0 = Module["asm"]["getTempRet0"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackSave = function() {
  return (stackSave = Module["asm"]["stackSave"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackRestore = function() {
  return (stackRestore = Module["asm"]["stackRestore"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var stackAlloc = function() {
  return (stackAlloc = Module["asm"]["stackAlloc"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var ___cxa_is_pointer_type = function() {
  return (___cxa_is_pointer_type = Module["asm"]["__cxa_is_pointer_type"]).apply(null, arguments);
};

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = function() {
  return (dynCall_jiji = Module["dynCall_jiji"] = Module["asm"]["dynCall_jiji"]).apply(null, arguments);
};



// include: postamble.js
// === Auto-generated postamble setup entry stuff ===




var calledRun;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function run() {

  if (runDependencies > 0) {
    return;
  }

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    readyPromiseResolve(Module);
    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();


// end include: postamble.js


  return Module.ready
}

);
})();
if (typeof exports === 'object' && typeof module === 'object')
  module.exports = Module;
else if (typeof define === 'function' && define['amd'])
  define([], function() { return Module; });
else if (typeof exports === 'object')
  exports["Module"] = Module;
